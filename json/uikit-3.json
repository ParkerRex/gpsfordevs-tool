[
  {
    "html": "Deprecated\n\nUse userNotificationCenter(_:willPresent:withCompletionHandler:) instead.\n\nParameters\napplication\n\nThe app object that received the remote notification.\n\nuserInfo\n\nA dictionary that contains information related to the remote notification, potentially including a badge number for the app icon, an alert sound, an alert message to display to the user, a notification identifier, and custom data. The provider originates it as a JSON-defined dictionary that iOS converts to an NSDictionary object; the dictionary might contain only property-list objects plus NSNull.\n\nDiscussion\n\nImplement the application(_:didReceiveRemoteNotification:fetchCompletionHandler:) method instead of this one whenever possible. If your delegate implements both methods, the app object calls the application(_:didReceiveRemoteNotification:fetchCompletionHandler:) method.\n\nIf the app is running, the app calls this method to process incoming remote notifications. The userInfo dictionary contains the aps key whose value is another dictionary with the remaining notification data. Although you should not need the information in the aps dictionary, you can retrieve its contents using the following keys:\n\nalert—The value is either a string for the alert message or a dictionary with two keys: body and show-view. The value of the body key is a string containing the alert message and the value of the show-view key is a Boolean. If the value of the show-view key is false, the alert’s View button is not shown. The default is to show the View button which, if the user taps it, launches the app.\n\nbadge—A number indicating the quantity of data items to download from the provider. This number is to be displayed on the app icon. The absence of a badge property indicates that any number currently badging the icon should be removed.\n\nsound—The name of a sound file in the app bundle to play as an alert sound. If “default” is specified, the default sound should be played.\n\nThe userInfo dictionary may also have custom data defined by the provider according to the JSON schema. The properties for custom data should be specified at the same level as the aps dictionary. However, custom-defined properties should not be used for mass data transport because there is a strict size limit per notification (256 bytes) and delivery is not guaranteed.\n\nIf the app is not running when a remote notification arrives, the method launches the app and provides the appropriate information in the launch options dictionary. The app does not call this method to handle that remote notification. Instead, your implementation of the application(_:willFinishLaunchingWithOptions:) or application(_:didFinishLaunchingWithOptions:) method needs to get the remote notification payload data and respond appropriately.\n\nFor more information about how to implement remote notifications in your app, see Local and Remote Notification Programming Guide.\n\nSee Also\nDeprecated\nfunc application(UIApplication, didRegister: UIUserNotificationSettings)\nCalled to tell the delegate the types of local and remote notifications that can be used to get the user’s attention.\nDeprecated\nfunc application(UIApplication, didReceive: UILocalNotification)\nSent to the delegate when a running app receives a local notification.\nDeprecated\nfunc application(UIApplication, handleActionWithIdentifier: String?, for: UILocalNotification, completionHandler: () -> Void)\nCalled when your app has been activated because user selected a custom action from the alert panel of a local notification.\nDeprecated\nfunc application(UIApplication, handleActionWithIdentifier: String?, for: UILocalNotification, withResponseInfo: [AnyHashable : Any], completionHandler: () -> Void)\nCalled when your app has been activated by the user selecting an action from a local notification.\nDeprecated\nfunc application(UIApplication, handleActionWithIdentifier: String?, forRemoteNotification: [AnyHashable : Any], completionHandler: () -> Void)\nTells the app delegate to perform the custom action specified by a remote notification.\nDeprecated\nfunc application(UIApplication, handleActionWithIdentifier: String?, forRemoteNotification: [AnyHashable : Any], withResponseInfo: [AnyHashable : Any], completionHandler: () -> Void)\nCalled when your app has been activated by the user selecting an action from a remote notification.\nDeprecated\nfunc application(UIApplication, handleOpen: URL) -> Bool\nAsks the delegate to open a resource identified by URL.\nDeprecated\nfunc application(UIApplication, open: URL, sourceApplication: String?, annotation: Any) -> Bool\nAsks the delegate to open a resource identified by a URL.\nDeprecated\nfunc application(UIApplication, willChangeStatusBarOrientation: UIInterfaceOrientation, duration: TimeInterval)\nTells the delegate when the interface orientation of the status bar is about to change.\nDeprecated\nfunc application(UIApplication, didChangeStatusBarOrientation: UIInterfaceOrientation)\nTells the delegate when the interface orientation of the status bar has changed.\nDeprecated\nfunc application(UIApplication, willChangeStatusBarFrame: CGRect)\nTells the delegate when the frame of the status bar is about to change.\nDeprecated\nfunc application(UIApplication, didChangeStatusBarFrame: CGRect)\nTells the delegate when the frame of the status bar has changed.\nDeprecated\nfunc application(UIApplication, handle: INIntent, completionHandler: (INIntentResponse) -> Void)\nAsks the delegate to handle the specified SiriKit intent directly.\nDeprecated\nfunc application(UIApplication, performFetchWithCompletionHandler: (UIBackgroundFetchResult) -> Void)\nTells the app that it can begin a fetch operation if it has data to download.\nDeprecated\nfunc application(UIApplication, shouldSaveApplicationState: NSCoder) -> Bool\nAsks the delegate whether to preserve the app’s state.\nDeprecated\nfunc application(UIApplication, shouldRestoreApplicationState: NSCoder) -> Bool\nAsks the delegate whether to restore the app’s saved state.\nDeprecated\nRelated Documentation\nfunc application(UIApplication, didRegisterForRemoteNotificationsWithDeviceToken: Data)\nTells the delegate that the app successfully registered with Apple Push Notification service (APNs).\nfunc application(UIApplication, didFailToRegisterForRemoteNotificationsWithError: Error)\nTells the delegate when Apple Push Notification service cannot successfully complete the registration process."
  },
  {
    "title": "UIDocumentBrowserViewController.BrowserUserInterfaceStyle.dark | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentbrowserviewcontroller/browseruserinterfacestyle/dark",
    "html": "See Also\nUser interface styles\ncase light\nA light background.\ncase white\nA white background."
  },
  {
    "title": "sourceApplication | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/launchoptionskey/1623064-sourceapplication",
    "html": "Discussion\n\nThe value of this key is an NSString object containing the bundle ID of the app that made the request. If the request originated from another app belonging to your team, UIKit sets the value of this key to the ID of that app. If the team identifier of the originating app is different than the team identifier of the current app, the value of the key is nil.\n\nThis key is also used to access the same value in the userInfo dictionary of the notification named didFinishLaunchingNotification.\n\nSee Also\nAccessing launch options\nstatic let bluetoothCentrals: UIApplication.LaunchOptionsKey\nA key indicating that the app was relaunched to handle Bluetooth-related events.\nstatic let bluetoothPeripherals: UIApplication.LaunchOptionsKey\nA key indicating that the app should continue actions associated with its Bluetooth peripheral objects.\nstatic let cloudKitShareMetadata: UIApplication.LaunchOptionsKey\nA key indicating that the app received a CloudKit share invitation.\nstatic let eventAttribution: UIApplication.LaunchOptionsKey\nstatic let location: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched to handle an incoming location event.\nstatic let newsstandDownloads: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched to process newly downloaded Newsstand assets.\nstatic let remoteNotification: UIApplication.LaunchOptionsKey\nA key indicating that a remote notification is available for the app to process.\nstatic let shortcutItem: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched in response to the user selecting a Home screen quick action.\nstatic let url: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched so that it could open the specified URL.\nstatic let userActivityDictionary: UIApplication.LaunchOptionsKey\nA key indicating a dictionary associated with an activity that the user wants to continue.\nstatic let userActivityType: UIApplication.LaunchOptionsKey\nA key indicating the type of user activity that the user wants to continue.\nstatic let annotation: UIApplication.LaunchOptionsKey\nA key indicating that the URL passed to your app contained custom annotation data from the source app.\nDeprecated\nstatic let localNotification: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched to handle a local notification.\nDeprecated"
  },
  {
    "title": "userActivityType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/launchoptionskey/1622954-useractivitytype",
    "html": "Discussion\n\nThis key is used in the subdictionary which is the value of shortcutItem. The value of this key is an NSString object identifying the activity type.\n\nSee Also\nAccessing launch options\nstatic let bluetoothCentrals: UIApplication.LaunchOptionsKey\nA key indicating that the app was relaunched to handle Bluetooth-related events.\nstatic let bluetoothPeripherals: UIApplication.LaunchOptionsKey\nA key indicating that the app should continue actions associated with its Bluetooth peripheral objects.\nstatic let cloudKitShareMetadata: UIApplication.LaunchOptionsKey\nA key indicating that the app received a CloudKit share invitation.\nstatic let eventAttribution: UIApplication.LaunchOptionsKey\nstatic let location: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched to handle an incoming location event.\nstatic let newsstandDownloads: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched to process newly downloaded Newsstand assets.\nstatic let remoteNotification: UIApplication.LaunchOptionsKey\nA key indicating that a remote notification is available for the app to process.\nstatic let shortcutItem: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched in response to the user selecting a Home screen quick action.\nstatic let sourceApplication: UIApplication.LaunchOptionsKey\nA key indicating that another app requested the launch of your app.\nstatic let url: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched so that it could open the specified URL.\nstatic let userActivityDictionary: UIApplication.LaunchOptionsKey\nA key indicating a dictionary associated with an activity that the user wants to continue.\nstatic let annotation: UIApplication.LaunchOptionsKey\nA key indicating that the URL passed to your app contained custom annotation data from the source app.\nDeprecated\nstatic let localNotification: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched to handle a local notification.\nDeprecated"
  },
  {
    "title": "url | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/launchoptionskey/1622996-url",
    "html": "Discussion\n\nThe value of this key is an NSURL object containing the URL to open. This key is also used to access the same value in the userInfo dictionary of the notification named didFinishLaunchingNotification.\n\nSee Also\nAccessing launch options\nstatic let bluetoothCentrals: UIApplication.LaunchOptionsKey\nA key indicating that the app was relaunched to handle Bluetooth-related events.\nstatic let bluetoothPeripherals: UIApplication.LaunchOptionsKey\nA key indicating that the app should continue actions associated with its Bluetooth peripheral objects.\nstatic let cloudKitShareMetadata: UIApplication.LaunchOptionsKey\nA key indicating that the app received a CloudKit share invitation.\nstatic let eventAttribution: UIApplication.LaunchOptionsKey\nstatic let location: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched to handle an incoming location event.\nstatic let newsstandDownloads: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched to process newly downloaded Newsstand assets.\nstatic let remoteNotification: UIApplication.LaunchOptionsKey\nA key indicating that a remote notification is available for the app to process.\nstatic let shortcutItem: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched in response to the user selecting a Home screen quick action.\nstatic let sourceApplication: UIApplication.LaunchOptionsKey\nA key indicating that another app requested the launch of your app.\nstatic let userActivityDictionary: UIApplication.LaunchOptionsKey\nA key indicating a dictionary associated with an activity that the user wants to continue.\nstatic let userActivityType: UIApplication.LaunchOptionsKey\nA key indicating the type of user activity that the user wants to continue.\nstatic let annotation: UIApplication.LaunchOptionsKey\nA key indicating that the URL passed to your app contained custom annotation data from the source app.\nDeprecated\nstatic let localNotification: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched to handle a local notification.\nDeprecated"
  },
  {
    "title": "newsstandDownloads | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/launchoptionskey/1623129-newsstanddownloads",
    "html": "Discussion\n\nThe value of this key is an array of string identifiers that identify the NKAssetDownload objects corresponding to the assets. Although you can use the identifiers for cross-checking purposes, you should obtain the definitive array of NKAssetDownload objects (representing asset downloads in progress or in error) through the downloadingAssets property of the NKLibrary object representing the Newsstand app’s library.\n\nSee Also\nAccessing launch options\nstatic let bluetoothCentrals: UIApplication.LaunchOptionsKey\nA key indicating that the app was relaunched to handle Bluetooth-related events.\nstatic let bluetoothPeripherals: UIApplication.LaunchOptionsKey\nA key indicating that the app should continue actions associated with its Bluetooth peripheral objects.\nstatic let cloudKitShareMetadata: UIApplication.LaunchOptionsKey\nA key indicating that the app received a CloudKit share invitation.\nstatic let eventAttribution: UIApplication.LaunchOptionsKey\nstatic let location: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched to handle an incoming location event.\nstatic let remoteNotification: UIApplication.LaunchOptionsKey\nA key indicating that a remote notification is available for the app to process.\nstatic let shortcutItem: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched in response to the user selecting a Home screen quick action.\nstatic let sourceApplication: UIApplication.LaunchOptionsKey\nA key indicating that another app requested the launch of your app.\nstatic let url: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched so that it could open the specified URL.\nstatic let userActivityDictionary: UIApplication.LaunchOptionsKey\nA key indicating a dictionary associated with an activity that the user wants to continue.\nstatic let userActivityType: UIApplication.LaunchOptionsKey\nA key indicating the type of user activity that the user wants to continue.\nstatic let annotation: UIApplication.LaunchOptionsKey\nA key indicating that the URL passed to your app contained custom annotation data from the source app.\nDeprecated\nstatic let localNotification: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched to handle a local notification.\nDeprecated"
  },
  {
    "title": "userActivityDictionary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/launchoptionskey/1623113-useractivitydictionary",
    "html": "Discussion\n\nThe value of this key is an NSDictionary object containing the key userActivityType, whose value is an NSString object identifying the activity type.\n\nSee Also\nAccessing launch options\nstatic let bluetoothCentrals: UIApplication.LaunchOptionsKey\nA key indicating that the app was relaunched to handle Bluetooth-related events.\nstatic let bluetoothPeripherals: UIApplication.LaunchOptionsKey\nA key indicating that the app should continue actions associated with its Bluetooth peripheral objects.\nstatic let cloudKitShareMetadata: UIApplication.LaunchOptionsKey\nA key indicating that the app received a CloudKit share invitation.\nstatic let eventAttribution: UIApplication.LaunchOptionsKey\nstatic let location: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched to handle an incoming location event.\nstatic let newsstandDownloads: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched to process newly downloaded Newsstand assets.\nstatic let remoteNotification: UIApplication.LaunchOptionsKey\nA key indicating that a remote notification is available for the app to process.\nstatic let shortcutItem: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched in response to the user selecting a Home screen quick action.\nstatic let sourceApplication: UIApplication.LaunchOptionsKey\nA key indicating that another app requested the launch of your app.\nstatic let url: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched so that it could open the specified URL.\nstatic let userActivityType: UIApplication.LaunchOptionsKey\nA key indicating the type of user activity that the user wants to continue.\nstatic let annotation: UIApplication.LaunchOptionsKey\nA key indicating that the URL passed to your app contained custom annotation data from the source app.\nDeprecated\nstatic let localNotification: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched to handle a local notification.\nDeprecated\nRelated Documentation\nclass NSUserActivity\nA representation of the state of your app at a moment in time."
  },
  {
    "title": "annotation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/launchoptionskey/1623009-annotation",
    "html": "Discussion\n\nThe presence of this key indicates that custom data was provided by the app that requested the opening of the URL. The value of this key is a property-list object containing the custom data. The same object is also passed to the annotation parameter of the application(_:open:sourceApplication:annotation:) method. The contents of this property-list object are specific to the app that made the request.\n\nSee Also\nAccessing launch options\nstatic let bluetoothCentrals: UIApplication.LaunchOptionsKey\nA key indicating that the app was relaunched to handle Bluetooth-related events.\nstatic let bluetoothPeripherals: UIApplication.LaunchOptionsKey\nA key indicating that the app should continue actions associated with its Bluetooth peripheral objects.\nstatic let cloudKitShareMetadata: UIApplication.LaunchOptionsKey\nA key indicating that the app received a CloudKit share invitation.\nstatic let eventAttribution: UIApplication.LaunchOptionsKey\nstatic let location: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched to handle an incoming location event.\nstatic let newsstandDownloads: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched to process newly downloaded Newsstand assets.\nstatic let remoteNotification: UIApplication.LaunchOptionsKey\nA key indicating that a remote notification is available for the app to process.\nstatic let shortcutItem: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched in response to the user selecting a Home screen quick action.\nstatic let sourceApplication: UIApplication.LaunchOptionsKey\nA key indicating that another app requested the launch of your app.\nstatic let url: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched so that it could open the specified URL.\nstatic let userActivityDictionary: UIApplication.LaunchOptionsKey\nA key indicating a dictionary associated with an activity that the user wants to continue.\nstatic let userActivityType: UIApplication.LaunchOptionsKey\nA key indicating the type of user activity that the user wants to continue.\nstatic let localNotification: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched to handle a local notification.\nDeprecated"
  },
  {
    "title": "insetsContentViewsToSafeArea | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/2921665-insetscontentviewstosafearea",
    "html": "Discussion\n\nWhen the value of this property is true (the default), the table view adjusts the insets of the content view within each of its cells, headers, and footers on the leading and trailing sides to make the content fit within the safe area. The safe area ensures that the content within the table view isn’t obscured by other views, or by the edges of the device.\n\nWhen the value of this property is false, the table view doesn’t adjust the insets of the content view within each of its cells, headers, and footers to account for the safe area. In this case, the content views extend to the bounds of their respective superviews, which may cause the content to be obscured.\n\nSee Also\nConfiguring cell height and layout\nvar rowHeight: CGFloat\nThe default height in points of each row in the table view.\nvar estimatedRowHeight: CGFloat\nThe estimated height of rows in the table view.\nvar fillerRowHeight: CGFloat\nThe height for empty rows that fill the table view.\nvar cellLayoutMarginsFollowReadableWidth: Bool\nA Boolean value that indicates whether the cell margins derive from the width of the readable content guide.\nRelated Documentation\nvar safeAreaInsets: UIEdgeInsets\nThe insets that you use to determine the safe area for this view."
  },
  {
    "title": "numberOfRows(inSection:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614952-numberofrows",
    "html": "Parameters\nsection\n\nAn index number that identifies a section of the table. Table views in a plain style have a section index of zero.\n\nReturn Value\n\nThe number of rows in the section.\n\nDiscussion\n\nUITableView gets the value returned by this method from its data source and caches it.\n\nSee Also\nGetting the number of rows and sections\nvar numberOfSections: Int\nThe number of sections in the table view."
  },
  {
    "title": "reloadSections(_:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614954-reloadsections",
    "html": "Parameters\nsections\n\nAn index set identifying the sections to reload.\n\nanimation\n\nA constant that indicates how the reloading is to be animated, for example, fade out or slide out from the bottom. See UITableView.RowAnimation for descriptions of these constants.\n\nThe animation constant affects the direction in which both the old and the new section rows slide. For example, if the animation constant is UITableView.RowAnimation.right, the old rows slide out to the right and the new cells slide in from the right.\n\nDiscussion\n\nCalling this method causes the table view to ask its data source for new cells for the specified sections. The table view animates the insertion of new cells in as it animates the old cells out. Call this method if you want to alert the user that the values of the designated sections are changing. If, however, you just want to change values in cells of the specified sections without alerting the user, you can get those cells and directly set their new values.\n\nWhen this method is called in an animation block defined by the beginUpdates() and endUpdates() methods, it behaves similarly to deleteSections(_:with:). The indexes that UITableView passes to the method are specified in the state of the table view prior to any updates. This happens regardless of ordering of the insertion, deletion, and reloading method calls within the animation block.\n\nSee Also\nReloading the table view\nvar hasUncommittedUpdates: Bool\nA Boolean value that indicates whether the table view’s appearance contains changes that aren’t present in its data source.\nfunc reconfigureRows(at: [IndexPath])\nUpdates the data for the rows at the index paths you specify, preserving the existing cells for the rows.\nfunc reloadData()\nReloads the rows and sections of the table view.\nfunc reloadRows(at: [IndexPath], with: UITableView.RowAnimation)\nReloads the specified rows using the provided animation effect.\nfunc reloadSectionIndexTitles()\nReloads the items in the index bar along the right side of the table view.\nRelated Documentation\nfunc insertSections(IndexSet, with: UITableView.RowAnimation)\nInserts one or more sections in the table view, with an option to animate the insertion."
  },
  {
    "title": "dragDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/2897362-dragdelegate",
    "html": "See Also\nManaging drag interactions\nprotocol UITableViewDragDelegate\nThe interface for initiating drags from a table view.\nvar hasActiveDrag: Bool\nA Boolean value that indicates whether the table view is currently tracking a drag session.\nvar dragInteractionEnabled: Bool\nA Boolean value that indicates whether the table view supports dragging content."
  },
  {
    "title": "dragInteractionEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/2909064-draginteractionenabled",
    "html": "Discussion\n\nTo support dragging content from the table view to a view in your app or another app, set this property value to true. To disable this behavior, set the value to false. The default value is true.\n\nIn iOS 14 and earlier, the default value is true for iPad and false for iPhone. Setting the value to true on iPhone enables dragging within your app only. Dragging content to other apps isn’t possible on iPhone prior to iOS 15.\n\nSee Also\nManaging drag interactions\nvar dragDelegate: UITableViewDragDelegate?\nThe delegate object that manages the dragging of items from the table view.\nprotocol UITableViewDragDelegate\nThe interface for initiating drags from a table view.\nvar hasActiveDrag: Bool\nA Boolean value that indicates whether the table view is currently tracking a drag session."
  },
  {
    "title": "reloadRows(at:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614935-reloadrows",
    "html": "Parameters\nindexPaths\n\nAn array of NSIndexPath objects identifying the rows to reload.\n\nanimation\n\nA constant that indicates how the reloading is to be animated, for example, fade out or slide out from the bottom. See UITableView.RowAnimation for descriptions of these constants.\n\nThe animation constant affects the direction in which both the old and the new rows slide. For example, if the animation constant is UITableView.RowAnimation.right, the old rows slide out to the right and the new cells slide in from the right.\n\nDiscussion\n\nReloading a row causes the table view to ask its data source for a new cell for that row. The table animates that new cell in as it animates the old row out. Call this method if you want to alert the user that the value of a cell is changing. If, however, notifying the user isn’t important — that is, you just want to change the value that a cell is displaying — you can get the cell for a particular row and set its new value.\n\nWhen this method is called in an animation block defined by the beginUpdates() and endUpdates() methods, it behaves similarly to deleteRows(at:with:). The indexes that UITableView passes to the method are specified in the state of the table view prior to any updates. This happens regardless of ordering of the insertion, deletion, and reloading method calls within the animation block.\n\nSee Also\nReloading the table view\nvar hasUncommittedUpdates: Bool\nA Boolean value that indicates whether the table view’s appearance contains changes that aren’t present in its data source.\nfunc reconfigureRows(at: [IndexPath])\nUpdates the data for the rows at the index paths you specify, preserving the existing cells for the rows.\nfunc reloadData()\nReloads the rows and sections of the table view.\nfunc reloadSections(IndexSet, with: UITableView.RowAnimation)\nReloads the specified sections using the provided animation effect.\nfunc reloadSectionIndexTitles()\nReloads the items in the index bar along the right side of the table view.\nRelated Documentation\nfunc insertRows(at: [IndexPath], with: UITableView.RowAnimation)\nInserts rows in the table view at the locations that an array of index paths identifies, with an option to animate the insertion."
  },
  {
    "title": "reconfigureRows(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/3801923-reconfigurerows",
    "html": "Parameters\nindexPaths\n\nAn array of NSIndexPath objects identifying the items you want to update.\n\nDiscussion\n\nTo update the contents of existing (including prefetched) cells without replacing them with new cells, use this method instead of reloadRows(at:with:). For optimal performance, choose to reconfigure rows instead of reloading rows unless you have an explicit need to replace the existing cell with a new cell.\n\nYour cell provider must dequeue the same type of cell for the provided index path, and must return the same existing cell for a given index path. Because this method reconfigures existing cells, the table view doesn’t call prepareForReuse() for each cell dequeued. If you need to return a different type of cell for an index path, use reloadRows(at:with:) instead.\n\nIf your cells are self-sizing, the table view resizes your cells after reconfiguring them.\n\nBy default, the table view animates any size or layout changes that are a result of reconfiguration. To reconfigure cells without animation, use UIView’s performWithoutAnimation(_:) when you call this method. Alternatively, to avoid animations when setting specific properties, use performWithoutAnimation(_:) in your cell configuration logic.\n\nIf your table view uses a custom implementation of UITableViewDataSource, use this method. If your table view uses a diffable data source, use reconfigureItems(_:) on NSDiffableDataSourceSnapshot instead.\n\nSee Also\nReloading the table view\nvar hasUncommittedUpdates: Bool\nA Boolean value that indicates whether the table view’s appearance contains changes that aren’t present in its data source.\nfunc reloadData()\nReloads the rows and sections of the table view.\nfunc reloadRows(at: [IndexPath], with: UITableView.RowAnimation)\nReloads the specified rows using the provided animation effect.\nfunc reloadSections(IndexSet, with: UITableView.RowAnimation)\nReloads the specified sections using the provided animation effect.\nfunc reloadSectionIndexTitles()\nReloads the items in the index bar along the right side of the table view."
  },
  {
    "title": "endUpdates() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614890-endupdates",
    "html": "Discussion\n\nUse the performBatchUpdates(_:completion:) method instead of this one whenever possible.\n\nYou call this method to bracket a series of method calls that begins with beginUpdates() and that consists of operations to insert, delete, select, and reload rows and sections of the table view. When you call endUpdates, UITableView animates the operations simultaneously. Invocations of beginUpdates() and endUpdates can be nested. If you don’t make the insertion, deletion, and selection calls inside this block, table attributes such as row count can become invalid.\n\nSee Also\nPerforming batch updates to rows and sections\nfunc performBatchUpdates((() -> Void)?, completion: ((Bool) -> Void)?)\nAnimates multiple insert, delete, reload, and move operations as a group.\nfunc beginUpdates()\nBegins a series of method calls that insert, delete, or select rows and sections of the table view."
  },
  {
    "title": "insertSections(_:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614892-insertsections",
    "html": "Parameters\nsections\n\nAn index set that specifies the sections to insert in the table view. If a section already exists at the specified index location, it is moved down one index location.\n\nanimation\n\nA constant that indicates how the insertion is to be animated, for example, fade in or slide in from the left. See UITableView.RowAnimation for descriptions of these constants.\n\nDiscussion\n\nUITableView calls the relevant delegate and data source methods immediately afterward to get the cells and other content for visible cells.\n\nWhen this method is called in an animation block defined by the beginUpdates() and endUpdates() methods, UITableView defers any insertions of rows or sections until after it has handled the deletions of rows or sections. This order is followed regardless of how the insertion and deletion method calls are ordered. This is unlike inserting or removing an item in a mutable array, in which the operation can affect the array index used for the successive insertion or removal operation. For more on this subject, see Batch Insertion, Deletion, and Reloading of Rows and Sections in Table View Programming Guide for iOS.\n\nSee Also\nInserting, deleting, and moving rows and sections\nfunc insertRows(at: [IndexPath], with: UITableView.RowAnimation)\nInserts rows in the table view at the locations that an array of index paths identifies, with an option to animate the insertion.\nfunc deleteRows(at: [IndexPath], with: UITableView.RowAnimation)\nDeletes the rows that an array of index paths identifies, with an option to animate the deletion.\nfunc deleteSections(IndexSet, with: UITableView.RowAnimation)\nDeletes one or more sections in the table view, with an option to animate the deletion.\nenum UITableView.RowAnimation\nThe type of animation to use when inserting or deleting rows.\nfunc moveRow(at: IndexPath, to: IndexPath)\nMoves the row at a specified location to a destination location.\nfunc moveSection(Int, toSection: Int)\nMoves a section to a new location in the table view.\nRelated Documentation\nfunc reloadSections(IndexSet, with: UITableView.RowAnimation)\nReloads the specified sections using the provided animation effect."
  },
  {
    "title": "deleteRows(at:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614960-deleterows",
    "html": "Parameters\nindexPaths\n\nAn array of NSIndexPath objects identifying the rows to delete.\n\nanimation\n\nA constant that indicates how the deletion is to be animated, for example, fade out or slide out from the bottom. See UITableView.RowAnimation for descriptions of these constants.\n\nDiscussion\n\nWhen this method is called in an animation block defined by the beginUpdates() and endUpdates() methods, UITableView defers any insertions of rows or sections until after it has handled the deletions of rows or sections. This order is followed regardless how the insertion and deletion method calls are ordered. This is unlike inserting or removing an item in a mutable array, in which the operation can affect the array index used for the successive insertion or removal operation. For more on this subject, see Batch Insertion, Deletion, and Reloading of Rows and Sections in Table View Programming Guide for iOS.\n\nSee Also\nInserting, deleting, and moving rows and sections\nfunc insertRows(at: [IndexPath], with: UITableView.RowAnimation)\nInserts rows in the table view at the locations that an array of index paths identifies, with an option to animate the insertion.\nfunc insertSections(IndexSet, with: UITableView.RowAnimation)\nInserts one or more sections in the table view, with an option to animate the insertion.\nfunc deleteSections(IndexSet, with: UITableView.RowAnimation)\nDeletes one or more sections in the table view, with an option to animate the deletion.\nenum UITableView.RowAnimation\nThe type of animation to use when inserting or deleting rows.\nfunc moveRow(at: IndexPath, to: IndexPath)\nMoves the row at a specified location to a destination location.\nfunc moveSection(Int, toSection: Int)\nMoves a section to a new location in the table view.\nRelated Documentation\nfunc reloadRows(at: [IndexPath], with: UITableView.RowAnimation)\nReloads the specified rows using the provided animation effect."
  },
  {
    "title": "selectionDidChangeNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614958-selectiondidchangenotification",
    "html": "Discussion\n\nThere’s no userInfo dictionary associated with this notification.\n\nSee Also\nSelecting rows\nvar indexPathForSelectedRow: IndexPath?\nAn index path that identifies the row and section of the selected row.\nvar indexPathsForSelectedRows: [IndexPath]?\nThe index paths that represent the selected rows.\nfunc selectRow(at: IndexPath?, animated: Bool, scrollPosition: UITableView.ScrollPosition)\nSelects a row in the table view that an index path identifies, optionally scrolling the row to a location in the table view.\nfunc deselectRow(at: IndexPath, animated: Bool)\nDeselects a row that an index path identifies, with an option to animate the deselection.\nvar allowsSelection: Bool\nA Boolean value that determines whether users can select a row.\nvar allowsMultipleSelection: Bool\nA Boolean value that determines whether users can select more than one row outside of editing mode.\nvar allowsSelectionDuringEditing: Bool\nA Boolean value that determines whether users can select cells while the table view is in editing mode.\nvar allowsMultipleSelectionDuringEditing: Bool\nA Boolean value that controls whether users can select more than one cell simultaneously in editing mode.\nvar selectionFollowsFocus: Bool\nA Boolean value that triggers an automatic selection when focus moves to a cell."
  },
  {
    "title": "allowsSelection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614911-allowsselection",
    "html": "Discussion\n\nIf the value of this property is true (the default), users can select rows. If you set it to false, they can’t select rows. Setting this property affects cell selection only when the table view isn’t in editing mode. If you want to restrict selection of cells in editing mode, use allowsSelectionDuringEditing.\n\nSee Also\nSelecting rows\nvar indexPathForSelectedRow: IndexPath?\nAn index path that identifies the row and section of the selected row.\nvar indexPathsForSelectedRows: [IndexPath]?\nThe index paths that represent the selected rows.\nfunc selectRow(at: IndexPath?, animated: Bool, scrollPosition: UITableView.ScrollPosition)\nSelects a row in the table view that an index path identifies, optionally scrolling the row to a location in the table view.\nfunc deselectRow(at: IndexPath, animated: Bool)\nDeselects a row that an index path identifies, with an option to animate the deselection.\nvar allowsMultipleSelection: Bool\nA Boolean value that determines whether users can select more than one row outside of editing mode.\nvar allowsSelectionDuringEditing: Bool\nA Boolean value that determines whether users can select cells while the table view is in editing mode.\nvar allowsMultipleSelectionDuringEditing: Bool\nA Boolean value that controls whether users can select more than one cell simultaneously in editing mode.\nvar selectionFollowsFocus: Bool\nA Boolean value that triggers an automatic selection when focus moves to a cell.\nclass let selectionDidChangeNotification: NSNotification.Name\nA notification that posts when the selected row in the posting table view changes."
  },
  {
    "title": "selectionFollowsFocus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/3573921-selectionfollowsfocus",
    "html": "Discussion\n\nThe system determines the default value of this property according to the platform and other properties of the table view.\n\nSee Also\nSelecting rows\nvar indexPathForSelectedRow: IndexPath?\nAn index path that identifies the row and section of the selected row.\nvar indexPathsForSelectedRows: [IndexPath]?\nThe index paths that represent the selected rows.\nfunc selectRow(at: IndexPath?, animated: Bool, scrollPosition: UITableView.ScrollPosition)\nSelects a row in the table view that an index path identifies, optionally scrolling the row to a location in the table view.\nfunc deselectRow(at: IndexPath, animated: Bool)\nDeselects a row that an index path identifies, with an option to animate the deselection.\nvar allowsSelection: Bool\nA Boolean value that determines whether users can select a row.\nvar allowsMultipleSelection: Bool\nA Boolean value that determines whether users can select more than one row outside of editing mode.\nvar allowsSelectionDuringEditing: Bool\nA Boolean value that determines whether users can select cells while the table view is in editing mode.\nvar allowsMultipleSelectionDuringEditing: Bool\nA Boolean value that controls whether users can select more than one cell simultaneously in editing mode.\nclass let selectionDidChangeNotification: NSNotification.Name\nA notification that posts when the selected row in the posting table view changes."
  },
  {
    "title": "allowsMultipleSelection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614938-allowsmultipleselection",
    "html": "Discussion\n\nThis property controls whether a user can select multiple rows simultaneously outside of editing mode. Selected rows acquire a selected appearance.\n\nIn iOS, when the value of this property is true, the user can select additional rows by tapping on them. The user must tap a currently selected row to deselect it.\n\nIn macOS, when the value of this property is true, the user can select additional rows by holding the Command or Shift key while clicking on the additional rows they want to select. If the user isn’t holding a modifier key, clicking on another row clears the current selection and selects only the clicked row. This behavior resembles the selection behavior of NSTableView.\n\nIf you access indexPathsForSelectedRows, you can get the index paths that identify the selected rows.\n\nThe default value of this property is false.\n\nSee Also\nSelecting rows\nvar indexPathForSelectedRow: IndexPath?\nAn index path that identifies the row and section of the selected row.\nvar indexPathsForSelectedRows: [IndexPath]?\nThe index paths that represent the selected rows.\nfunc selectRow(at: IndexPath?, animated: Bool, scrollPosition: UITableView.ScrollPosition)\nSelects a row in the table view that an index path identifies, optionally scrolling the row to a location in the table view.\nfunc deselectRow(at: IndexPath, animated: Bool)\nDeselects a row that an index path identifies, with an option to animate the deselection.\nvar allowsSelection: Bool\nA Boolean value that determines whether users can select a row.\nvar allowsSelectionDuringEditing: Bool\nA Boolean value that determines whether users can select cells while the table view is in editing mode.\nvar allowsMultipleSelectionDuringEditing: Bool\nA Boolean value that controls whether users can select more than one cell simultaneously in editing mode.\nvar selectionFollowsFocus: Bool\nA Boolean value that triggers an automatic selection when focus moves to a cell.\nclass let selectionDidChangeNotification: NSNotification.Name\nA notification that posts when the selected row in the posting table view changes."
  },
  {
    "title": "allowsMultipleSelectionDuringEditing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614944-allowsmultipleselectionduringedi",
    "html": "Discussion\n\nThe default value of this property is false. If you set it to true, check marks appear next to selected rows in editing mode. In addition, UITableView doesn’t query for editing styles when it goes into editing mode. If you access indexPathsForSelectedRows, you can get the index paths that identify the selected rows.\n\nSee Also\nSelecting rows\nvar indexPathForSelectedRow: IndexPath?\nAn index path that identifies the row and section of the selected row.\nvar indexPathsForSelectedRows: [IndexPath]?\nThe index paths that represent the selected rows.\nfunc selectRow(at: IndexPath?, animated: Bool, scrollPosition: UITableView.ScrollPosition)\nSelects a row in the table view that an index path identifies, optionally scrolling the row to a location in the table view.\nfunc deselectRow(at: IndexPath, animated: Bool)\nDeselects a row that an index path identifies, with an option to animate the deselection.\nvar allowsSelection: Bool\nA Boolean value that determines whether users can select a row.\nvar allowsMultipleSelection: Bool\nA Boolean value that determines whether users can select more than one row outside of editing mode.\nvar allowsSelectionDuringEditing: Bool\nA Boolean value that determines whether users can select cells while the table view is in editing mode.\nvar selectionFollowsFocus: Bool\nA Boolean value that triggers an automatic selection when focus moves to a cell.\nclass let selectionDidChangeNotification: NSNotification.Name\nA notification that posts when the selected row in the posting table view changes."
  },
  {
    "title": "deselectRow(at:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614989-deselectrow",
    "html": "Parameters\nindexPath\n\nAn index path identifying a row in the table view.\n\nanimated\n\ntrue if you want to animate the deselection, and false if the change should be immediate.\n\nDiscussion\n\nCalling this method doesn’t cause the delegate to receive a tableView(_:willDeselectRowAt:) or tableView(_:didDeselectRowAt:) message, nor does it send selectionDidChangeNotification notifications to observers.\n\nCalling this method doesn’t cause any scrolling to the deselected row.\n\nSee Also\nSelecting rows\nvar indexPathForSelectedRow: IndexPath?\nAn index path that identifies the row and section of the selected row.\nvar indexPathsForSelectedRows: [IndexPath]?\nThe index paths that represent the selected rows.\nfunc selectRow(at: IndexPath?, animated: Bool, scrollPosition: UITableView.ScrollPosition)\nSelects a row in the table view that an index path identifies, optionally scrolling the row to a location in the table view.\nvar allowsSelection: Bool\nA Boolean value that determines whether users can select a row.\nvar allowsMultipleSelection: Bool\nA Boolean value that determines whether users can select more than one row outside of editing mode.\nvar allowsSelectionDuringEditing: Bool\nA Boolean value that determines whether users can select cells while the table view is in editing mode.\nvar allowsMultipleSelectionDuringEditing: Bool\nA Boolean value that controls whether users can select more than one cell simultaneously in editing mode.\nvar selectionFollowsFocus: Bool\nA Boolean value that triggers an automatic selection when focus moves to a cell.\nclass let selectionDidChangeNotification: NSNotification.Name\nA notification that posts when the selected row in the posting table view changes."
  },
  {
    "title": "indexPathsForVisibleRows | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614885-indexpathsforvisiblerows",
    "html": "Discussion\n\nThe value of this property is an array of NSIndexPath objects each representing a row index and section index that together identify a visible row in the table view. If no rows are visible, the value is nil.\n\nSee Also\nGetting cells and section-based views\nfunc cellForRow(at: IndexPath) -> UITableViewCell?\nReturns the table cell at the index path you specify.\nfunc headerView(forSection: Int) -> UITableViewHeaderFooterView?\nReturns the header view for the specified section.\nfunc footerView(forSection: Int) -> UITableViewHeaderFooterView?\nReturns the footer view for the specified section.\nfunc indexPath(for: UITableViewCell) -> IndexPath?\nReturns an index path that represents the row and section of a specified table-view cell.\nfunc indexPathForRow(at: CGPoint) -> IndexPath?\nReturns an index path that identifies the row and section at the specified point.\nfunc indexPathsForRows(in: CGRect) -> [IndexPath]?\nReturns an array of index paths, each representing a row that the specified rectangle encloses.\nvar visibleCells: [UITableViewCell]\nThe table cells that are visible in the table view."
  },
  {
    "title": "errorDomain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentbrowsererror/2920004-errordomain",
    "html": "See Also\nGetting error properties\nvar errorCode: Int\nA code that indicates the kind of error.\nvar code: Code\nA code that indicates the kind of error.\nvar userInfo: [String : Any]\nThe user information dictionary associated with the error.\nvar errorUserInfo: [String : Any]\nThe user information dictionary associated with the error.\nvar localizedDescription: String\nA string containing the localized description of the error."
  },
  {
    "title": "visibleCells | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614896-visiblecells",
    "html": "Discussion\n\nThe value of this property is an array containing UITableViewCell objects, each representing a visible cell in the table view.\n\nSee Also\nGetting cells and section-based views\nfunc cellForRow(at: IndexPath) -> UITableViewCell?\nReturns the table cell at the index path you specify.\nfunc headerView(forSection: Int) -> UITableViewHeaderFooterView?\nReturns the header view for the specified section.\nfunc footerView(forSection: Int) -> UITableViewHeaderFooterView?\nReturns the footer view for the specified section.\nfunc indexPath(for: UITableViewCell) -> IndexPath?\nReturns an index path that represents the row and section of a specified table-view cell.\nfunc indexPathForRow(at: CGPoint) -> IndexPath?\nReturns an index path that identifies the row and section at the specified point.\nfunc indexPathsForRows(in: CGRect) -> [IndexPath]?\nReturns an array of index paths, each representing a row that the specified rectangle encloses.\nvar indexPathsForVisibleRows: [IndexPath]?\nAn array of index paths, each identifying a visible row in the table view."
  },
  {
    "title": "indexPathsForRows(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614991-indexpathsforrows",
    "html": "Parameters\nrect\n\nA rectangle defining an area of the table view in local coordinates.\n\nReturn Value\n\nAn array of NSIndexPath objects each representing a row and section index identifying a row within rect. Returns an empty array if there aren’t any rows to return.\n\nSee Also\nGetting cells and section-based views\nfunc cellForRow(at: IndexPath) -> UITableViewCell?\nReturns the table cell at the index path you specify.\nfunc headerView(forSection: Int) -> UITableViewHeaderFooterView?\nReturns the header view for the specified section.\nfunc footerView(forSection: Int) -> UITableViewHeaderFooterView?\nReturns the footer view for the specified section.\nfunc indexPath(for: UITableViewCell) -> IndexPath?\nReturns an index path that represents the row and section of a specified table-view cell.\nfunc indexPathForRow(at: CGPoint) -> IndexPath?\nReturns an index path that identifies the row and section at the specified point.\nvar visibleCells: [UITableViewCell]\nThe table cells that are visible in the table view.\nvar indexPathsForVisibleRows: [IndexPath]?\nAn array of index paths, each identifying a visible row in the table view."
  },
  {
    "title": "showsScopeBar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchbar/1624319-showsscopebar",
    "html": "Discussion\n\nIf the search bar is owned by a UISearchController, then setting this property implicitly sets the search controller’s automaticallyShowsScopeBar property to false.\n\nSee Also\nConfiguring scope bar buttons\nvar scopeButtonTitles: [String]?\nAn array of strings indicating the titles of the scope buttons.\nvar selectedScopeButtonIndex: Int\nThe index of the selected scope button.\nfunc setShowsScope(Bool, animated: Bool)\nSpecifies whether the scope bar is displayed, optionally using an animation."
  },
  {
    "title": "showsCancelButton | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchbar/1624283-showscancelbutton",
    "html": "Discussion\n\nWhen the value of this property is true, the cancel button is displayed if the app is running on iPhone. The value of this property is ignored, and no cancel button is displayed, for apps running on iPad. The default value is false.\n\nSee Also\nConfiguring the search interface\nvar showsBookmarkButton: Bool\nA Boolean value indicating whether the bookmark button is displayed.\nfunc setShowsCancelButton(Bool, animated: Bool)\nSets the display state of the cancel button optionally with animation.\nvar showsSearchResultsButton: Bool\nA Boolean value indicating whether the search results button is displayed.\nvar isSearchResultsButtonSelected: Bool\nA Boolean value indicating whether the search results button is selected."
  },
  {
    "title": "sheetPresentationControllerDidChangeSelectedDetentIdentifier(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisheetpresentationcontrollerdelegate/3801914-sheetpresentationcontrollerdidch",
    "html": "Parameters\nsheetPresentationController\n\nThe sheet presentation controller whose detent changes.\n\nDiscussion\n\nImplement this method if you want to perform changes in response to the user resizing a sheet to a new detent.\n\nThe system calls this method after a sheet's selectedDetentIdentifier changes in response to user interaction. The system doesn't call this after you change selectedDetentIdentifier programmatically."
  },
  {
    "title": "appearanceForTraitCollection: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiappearance/1615007-appearancefortraitcollection",
    "html": "Required\n\nParameters\ntrait\n\nThe trait collection used for matching.\n\nReturn Value\n\nThe appearance proxy for the receiver.\n\nSee Also\nWorking with the appearance proxy\n+ appearance\nReturns the appearance proxy for the receiver.\n\nRequired\n\n+ appearanceWhenContainedInInstancesOfClasses:\nReturns the appearance proxy for the object when it’s contained in the hierarchy the specified classes describe.\n\nRequired\n\n+ appearanceForTraitCollection:whenContainedInInstancesOfClasses:\nReturns the appearance proxy for the object when it’s contained in the hierarchy the specified classes describe and has the specified trait collection.\n\nRequired\n\n+ appearanceWhenContainedIn:\nReturns the appearance proxy for object when it’s contained in the hierarchy the specified classes describe.\n\nRequired\n\nDeprecated\n+ appearanceForTraitCollection:whenContainedIn:\nReturns the appearance proxy for the object when it’s contained in the hierarchy the specified classes describe and has the specified trait collection.\n\nRequired\n\nDeprecated"
  },
  {
    "title": "navigationBar(_:shouldPop:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uinavigationbardelegate/1624944-navigationbar",
    "html": "Parameters\nnavigationBar\n\nThe navigation bar that the item is being popped from.\n\nitem\n\nThe navigation item that is being popped.\n\nReturn Value\n\ntrue if the item should be popped; otherwise, false.\n\nDiscussion\n\nSent to the delegate before popping an item from the navigation bar.\n\nSee Also\nPopping items\nfunc navigationBar(UINavigationBar, didPop: UINavigationItem)\nTells the delegate that an item was popped from the navigation bar."
  },
  {
    "title": "image | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentbrowseraction/2874076-image",
    "html": "Discussion\n\nThis property is used only when the action is displayed in the navigation bar. By default, it is set to nil, and the navigation bar displays the value of the action's localizedTitle property.\n\nIf set, the navigation bar derives a bar button image from this image. Only the alpha values in the source image are used to create the bar button image—opaque values are ignored.\n\nIf this image is too large, it is scaled to fit. Typically, navigation bar images are 20 x 20 points.\n\nSee Also\nCreating and configuring actions\ninit(identifier: String, localizedTitle: String, availability: UIDocumentBrowserAction.Availability, handler: ([URL]) -> Void)\nInstantiates and returns a new browser action item.\nvar supportedContentTypes: [String]\nAn array of uniform type identifiers that define the types of documents that the action supports.\nvar supportsMultipleItems: Bool\nA Boolean value that determines whether the action can be triggered on more than one document at a time."
  },
  {
    "title": "supportedContentTypes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentbrowseraction/2874070-supportedcontenttypes",
    "html": "Discussion\n\nThe action can be triggered only on documents that are allowed by both the action's supportedContentTypes property and the document browser's allowedContentTypes property.\n\nBy default, this property contains only the public.item uniform type identifier (UTI)—indicating that there are no additional restrictions on document types.\n\nTo further restrict the supported documents, assign an array that contains a more restricted set of UTIs. These UTIs should define a subset of the UTIs supported by the document browser.\n\nFor more about UTIs, see Uniform Type Identifiers Reference.\n\nSee Also\nCreating and configuring actions\ninit(identifier: String, localizedTitle: String, availability: UIDocumentBrowserAction.Availability, handler: ([URL]) -> Void)\nInstantiates and returns a new browser action item.\nvar image: UIImage?\nThe action's image displayed in the navigation bar.\nvar supportsMultipleItems: Bool\nA Boolean value that determines whether the action can be triggered on more than one document at a time."
  },
  {
    "title": "rectForFooter(inSection:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614999-rectforfooter",
    "html": "Parameters\nsection\n\nAn index number identifying a section of the table view. Plain-style table views always have a section index of zero.\n\nReturn Value\n\nA rectangle defining the area in which the table view draws the section footer.\n\nSee Also\nGetting the drawing areas for the table\nfunc rect(forSection: Int) -> CGRect\nReturns the drawing area for a specified section of the table view.\nfunc rectForRow(at: IndexPath) -> CGRect\nReturns the drawing area for a row that an index path identifies.\nfunc rectForHeader(inSection: Int) -> CGRect\nReturns the drawing area for the header of the specified section."
  },
  {
    "title": "remembersLastFocusedIndexPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614858-rememberslastfocusedindexpath",
    "html": "Discussion\n\nWhen this property is set to true, the table view remembers which index path was focused when focus leaves the table view, and automatically redirects focus back to that index path if focus moves back into the table view. By default, this property is set to false.\n\nThe effects of this property may be ignored during or immediately after a view controller transition, such as a presentation dismissal or navigation stack pop. In such cases, the view controller attempts to restore focus to the item that was focused prior to the transition (for example, prior to the view controller being presented or pushed), which can take precedence over the effects of this property. To learn how to control or disable this behavior in the view controller, see restoresFocusAfterTransition.\n\nSee Also\nWorking with focus\nvar allowsFocus: Bool\nA Boolean value that determines whether the table view allows its cells to become focused.\nvar allowsFocusDuringEditing: Bool\nA Boolean value that determines whether the table view allows its cells to become focused in edit mode.\nvar selectionFollowsFocus: Bool\nA Boolean value that triggers an automatic selection when focus moves to a cell."
  },
  {
    "title": "allowsFocus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/3795594-allowsfocus",
    "html": "Discussion\n\nIf you implement tableView(_:canFocusRowAt:), its return value takes precedence over the value of this property.\n\nThe system determines the default value of this property according to the platform and other properties of the table view.\n\nSee Also\nWorking with focus\nvar allowsFocusDuringEditing: Bool\nA Boolean value that determines whether the table view allows its cells to become focused in edit mode.\nvar selectionFollowsFocus: Bool\nA Boolean value that triggers an automatic selection when focus moves to a cell.\nvar remembersLastFocusedIndexPath: Bool\nA Boolean value that indicates whether the table view automatically returns the focus to the cell at the last focused index path."
  },
  {
    "title": "allowsFocusDuringEditing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/3795595-allowsfocusduringediting",
    "html": "Discussion\n\nIf you implement tableView(_:canFocusRowAt:), its return value takes precedence over the value of this property.\n\nThe system determines the default value of this property according to the platform and other properties of the table view.\n\nSee Also\nWorking with focus\nvar allowsFocus: Bool\nA Boolean value that determines whether the table view allows its cells to become focused.\nvar selectionFollowsFocus: Bool\nA Boolean value that triggers an automatic selection when focus moves to a cell.\nvar remembersLastFocusedIndexPath: Bool\nA Boolean value that indicates whether the table view automatically returns the focus to the cell at the last focused index path."
  },
  {
    "title": "rectForRow(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614974-rectforrow",
    "html": "Parameters\nindexPath\n\nAn index path object that identifies a row by its index and its section index.\n\nReturn Value\n\nA rectangle defining the area in which the table view draws the row or CGRectZero if indexPath is invalid.\n\nSee Also\nGetting the drawing areas for the table\nfunc rect(forSection: Int) -> CGRect\nReturns the drawing area for a specified section of the table view.\nfunc rectForFooter(inSection: Int) -> CGRect\nReturns the drawing area for the footer of the specified section.\nfunc rectForHeader(inSection: Int) -> CGRect\nReturns the drawing area for the header of the specified section."
  },
  {
    "title": "indexSearch | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614959-indexsearch",
    "html": "Discussion\n\nIf the data source includes this constant string in the array of strings it returns in sectionIndexTitles(for:), the section index displays a magnifying glass icon at the corresponding index location. This location should generally be the first title in the index.\n\nSee Also\nConfiguring the table index\nvar sectionIndexMinimumDisplayRowCount: Int\nThe number of table rows at which to display the index list on the right edge of the table.\nvar sectionIndexColor: UIColor?\nThe color to use for the table view’s index text.\nvar sectionIndexBackgroundColor: UIColor?\nThe color to use for the background of the table view’s section index.\nvar sectionIndexTrackingBackgroundColor: UIColor?\nThe color to use for the table view’s index background area."
  },
  {
    "title": "activityViewControllerProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentproperties/3967513-activityviewcontrollerprovider",
    "html": "Discussion\n\nTo support sharing, assign a closure that returns a UIActivityViewController that you configure to share the document. When you set this property, a person can share the document by tapping the share button in the navigation item’s title menu."
  },
  {
    "title": "UIVibrancyEffectStyle.secondaryFill | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uivibrancyeffectstyle/secondaryfill",
    "html": "See Also\nFill styles\ncase fill\nA style for views with large filled areas containing primary content.\ncase tertiaryFill\nA style for views with large filled areas containing tertiary content."
  },
  {
    "title": "targetView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentbrowsertransitioncontroller/2874176-targetview",
    "html": "Discussion\n\nWhen this property is set, the transition controller acts as a UIViewControllerAnimatedTransitioning object for the transition from the browser to the document view controller. It provides transition animation that zooms and cross fades from the document's thumbnail to the target view.\n\nTo use the transition animation:\n\nInstantiate the view controller to display the document.\n\nCall the document view controller's loadViewIfNeeded() method to ensure that the view hierarchy is loaded.\n\nRequest a transition controller for the document you are going to present.\n\nAssign a view from the document view controller to the transition controller's targetView property.\n\nCreate a UIViewControllerTransitioningDelegate object that returns the transition controller. You must keep a strong reference to both the transition controller and the transitioning delegate throughout the entire animation.\n\nSet the document view controller's modalPresentationStyle property to custom.\n\nAssign the transitioning delegate to the document view controller's transitioningDelegate property.\n\nPresent the document view controller.\n\nIn Listing 1 and Listing 2, the transition controller provides a zoom and fade transition animation both when presenting the document view controller, and when dismissing it.\n\nListing 1 Setting the transition animation\nlet doc = // Create a UIDocument subclass for the selected URL.\nlet editor = // Create a view controller to edit the document.\n\n\n// Load the editor's view hierarchy.\neditor.loadViewIfNeeded()\n\n\n// Get the transition controller\nlet transitionController = controller.transitionController(forDocumentURL: url)\n\n\n// Set the target view\ntransitionController.targetView = editor.textView\n\n\n// Instantiate the transitioning delegate\nlet transitionDelegate = UIDocumentBrowserTransitioningDelegate(withTransitionController: transitionController)\n\n\n// Configure the transition animation\neditor.modalPresentationStyle = .custom\neditor.transitioningDelegate = transitionDelegate\n\n\n// Keep a strong reference to the transition delegate.\ndoc.transitioningDelegate = transitionDelegate\n\n\n// Open the document\ndoc.open { (success) in\n    guard success else {\n        // Handle the error here...\n    }\n        \n    // When the load is done, present the document\n    controller.present(editor, animated: true, completion: nil)\n}\n\nListing 2 Defining a transitioning delegate\nclass UIDocumentBrowserTransitioningDelegate : NSObject, UIViewControllerTransitioningDelegate {\n    \n    let transitionController : UIDocumentBrowserTransitionController\n    \n    init(withTransitionController transitionController: UIDocumentBrowserTransitionController) {\n        self.transitionController = transitionController\n    }\n    \n    func animationController(forPresented presented: UIViewController, presenting: UIViewController, source: UIViewController) -> UIViewControllerAnimatedTransitioning? {\n        return transitionController\n    }\n    \n    func animationController(forDismissed dismissed: UIViewController) -> UIViewControllerAnimatedTransitioning? {\n        return transitionController\n    }\n}\n\n\nSee Also\nAnimating transitions\nvar loadingProgress: Progress?\nA progress object that tracks a document as it loads."
  },
  {
    "title": "iconImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchsuggestion/3584824-iconimage",
    "html": "See Also\nDescribing a search suggestion\nvar localizedSuggestion: String?\nA label for the suggestion, usually the search term the suggestion represents.\n\nRequired\n\nvar localizedDescription: String?\nA description of the suggestion.\nvar localizedAttributedSuggestion: NSAttributedString?\nAn attributed label for the suggestion, usually the search term the suggestion represents.\n\nRequired\n\nvar representedObject: Any?\nAn object for tracking supplementary information about the search suggestion.\n\nRequired"
  },
  {
    "title": "indexPathForRow(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614874-indexpathforrow",
    "html": "Parameters\npoint\n\nA point in the local coordinate system of the table view (the table view’s bounds).\n\nReturn Value\n\nAn index path representing the row and section associated with point, or nil if the point is out of the bounds of any row.\n\nSee Also\nGetting cells and section-based views\nfunc cellForRow(at: IndexPath) -> UITableViewCell?\nReturns the table cell at the index path you specify.\nfunc headerView(forSection: Int) -> UITableViewHeaderFooterView?\nReturns the header view for the specified section.\nfunc footerView(forSection: Int) -> UITableViewHeaderFooterView?\nReturns the footer view for the specified section.\nfunc indexPath(for: UITableViewCell) -> IndexPath?\nReturns an index path that represents the row and section of a specified table-view cell.\nfunc indexPathsForRows(in: CGRect) -> [IndexPath]?\nReturns an array of index paths, each representing a row that the specified rectangle encloses.\nvar visibleCells: [UITableViewCell]\nThe table cells that are visible in the table view.\nvar indexPathsForVisibleRows: [IndexPath]?\nAn array of index paths, each identifying a visible row in the table view."
  },
  {
    "title": "indexPath(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614881-indexpath",
    "html": "Parameters\ncell\n\nA cell object of the table view.\n\nReturn Value\n\nAn index path representing the row and section of the cell, or nil if the index path is invalid.\n\nSee Also\nGetting cells and section-based views\nfunc cellForRow(at: IndexPath) -> UITableViewCell?\nReturns the table cell at the index path you specify.\nfunc headerView(forSection: Int) -> UITableViewHeaderFooterView?\nReturns the header view for the specified section.\nfunc footerView(forSection: Int) -> UITableViewHeaderFooterView?\nReturns the footer view for the specified section.\nfunc indexPathForRow(at: CGPoint) -> IndexPath?\nReturns an index path that identifies the row and section at the specified point.\nfunc indexPathsForRows(in: CGRect) -> [IndexPath]?\nReturns an array of index paths, each representing a row that the specified rectangle encloses.\nvar visibleCells: [UITableViewCell]\nThe table cells that are visible in the table view.\nvar indexPathsForVisibleRows: [IndexPath]?\nAn array of index paths, each identifying a visible row in the table view."
  },
  {
    "title": "numberOfSections | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614924-numberofsections",
    "html": "Discussion\n\nUITableView gets the value in this property from its data source and caches it.\n\nSee Also\nGetting the number of rows and sections\nfunc numberOfRows(inSection: Int) -> Int\nReturns the number of rows (table cells) in a specified section."
  },
  {
    "title": "cellForRow(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614983-cellforrow",
    "html": "Parameters\nindexPath\n\nThe index path locating the row in the table view.\n\nReturn Value\n\nThe cell object at the corresponding index path. In versions of iOS earlier than iOS 15, this method returns nil if the cell isn’t visible or if indexPath is out of range. In iOS 15 and later, this method returns a non-nil cell if the table view retains a prepared cell at the specified index path, even if the cell isn’t currently visible.\n\nDiscussion\n\nIn iOS 15 and later, the table view retains a prepared cell in the following situations:\n\nCells that the table view prefetches and retains in its cache of prepared cells, but that aren’t visible because the table view hasn’t displayed them yet.\n\nCells that the table view finishes displaying and continues to retain in its cache of prepared cells because they remain near the visible region and might scroll back into view.\n\nThe cell that contains the first responder.\n\nThe cell that has focus.\n\nSee Also\nGetting cells and section-based views\nfunc headerView(forSection: Int) -> UITableViewHeaderFooterView?\nReturns the header view for the specified section.\nfunc footerView(forSection: Int) -> UITableViewHeaderFooterView?\nReturns the footer view for the specified section.\nfunc indexPath(for: UITableViewCell) -> IndexPath?\nReturns an index path that represents the row and section of a specified table-view cell.\nfunc indexPathForRow(at: CGPoint) -> IndexPath?\nReturns an index path that identifies the row and section at the specified point.\nfunc indexPathsForRows(in: CGRect) -> [IndexPath]?\nReturns an array of index paths, each representing a row that the specified rectangle encloses.\nvar visibleCells: [UITableViewCell]\nThe table cells that are visible in the table view.\nvar indexPathsForVisibleRows: [IndexPath]?\nAn array of index paths, each identifying a visible row in the table view."
  },
  {
    "title": "UITableView.SeparatorInsetReference | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/separatorinsetreference",
    "html": "Topics\nConstants\ncase fromCellEdges\nAn inset value that’s relative to the edge of the cell.\ncase fromAutomaticInsets\nAn inset value that indicates the starting position is based on the default separator insets.\nRelationships\nConforms To\nSendable\nSee Also\nCustomizing the separator appearance\nvar separatorStyle: UITableViewCell.SeparatorStyle\nThe style for table cells to use as separators.\nenum UITableViewCell.SeparatorStyle\nThe style for cells to use as separators.\nvar separatorColor: UIColor?\nThe color of separator rows in the table view.\nvar separatorEffect: UIVisualEffect?\nThe effect to apply to table separators.\nvar separatorInset: UIEdgeInsets\nThe default inset of cell separators.\nvar separatorInsetReference: UITableView.SeparatorInsetReference\nAn indicator of how to interpret the separator inset value."
  },
  {
    "title": "separatorColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614984-separatorcolor",
    "html": "Discussion\n\nThe default color is gray.\n\nSee Also\nCustomizing the separator appearance\nvar separatorStyle: UITableViewCell.SeparatorStyle\nThe style for table cells to use as separators.\nenum UITableViewCell.SeparatorStyle\nThe style for cells to use as separators.\nvar separatorEffect: UIVisualEffect?\nThe effect to apply to table separators.\nvar separatorInset: UIEdgeInsets\nThe default inset of cell separators.\nvar separatorInsetReference: UITableView.SeparatorInsetReference\nAn indicator of how to interpret the separator inset value.\nenum UITableView.SeparatorInsetReference\nConstants that indicate how to interpret the separator inset value of a table view."
  },
  {
    "title": "separatorStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614909-separatorstyle",
    "html": "Discussion\n\nThe value of this property is one of the separator-style constants described in UITableViewCell. UITableView uses this property to set the separator style on the cell returned from the delegate in tableView(_:cellForRowAt:).\n\nSee Also\nCustomizing the separator appearance\nenum UITableViewCell.SeparatorStyle\nThe style for cells to use as separators.\nvar separatorColor: UIColor?\nThe color of separator rows in the table view.\nvar separatorEffect: UIVisualEffect?\nThe effect to apply to table separators.\nvar separatorInset: UIEdgeInsets\nThe default inset of cell separators.\nvar separatorInsetReference: UITableView.SeparatorInsetReference\nAn indicator of how to interpret the separator inset value.\nenum UITableView.SeparatorInsetReference\nConstants that indicate how to interpret the separator inset value of a table view."
  },
  {
    "title": "estimatedSectionHeaderHeight | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614957-estimatedsectionheaderheight",
    "html": "Discussion\n\nProviding a nonnegative estimate of the height of section headers can improve the performance of loading the table view. If the table contains variable height section headers, it might be expensive to calculate all their heights when the table loads. Estimation allows you to defer some of the cost of geometry calculation from load time to scrolling time.\n\nThe default value is automaticDimension, which means that the table view selects an estimated height to use on your behalf. Setting the value to 0 disables estimated heights, which causes the table view to request the actual height for each header. If your table uses self-sizing headers, the value of this property must not be 0.\n\nWhen using height estimates, the table view actively manages the contentOffset and contentSize properties inherited from its scroll view. Don’t attempt to read or modify those properties directly.\n\nSee Also\nConfiguring header and footer appearance\nvar sectionHeaderHeight: CGFloat\nThe height of section headers in the table view.\nvar sectionFooterHeight: CGFloat\nThe height of section footers in the table view.\nvar estimatedSectionFooterHeight: CGFloat\nThe estimated height of section footers in the table view.\nvar sectionHeaderTopPadding: CGFloat\nThe amount of padding above each section header.\nRelated Documentation\nvar estimatedRowHeight: CGFloat\nThe estimated height of rows in the table view."
  },
  {
    "title": "sectionFooterHeight | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614846-sectionfooterheight",
    "html": "Discussion\n\nThe default value is automaticDimension. If the delegate doesn’t implement tableView(_:heightForFooterInSection:), the table view calculates the height automatically. To override automatic height calculation, set this property to a positive value.\n\nSee Also\nConfiguring header and footer appearance\nvar sectionHeaderHeight: CGFloat\nThe height of section headers in the table view.\nvar estimatedSectionHeaderHeight: CGFloat\nThe estimated height of section headers in the table view.\nvar estimatedSectionFooterHeight: CGFloat\nThe estimated height of section footers in the table view.\nvar sectionHeaderTopPadding: CGFloat\nThe amount of padding above each section header.\nRelated Documentation\nvar tableFooterView: UIView?\nThe view that displays below the table’s content."
  },
  {
    "title": "separatorInsetReference | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/2887517-separatorinsetreference",
    "html": "Discussion\n\nUse the value of this property to determine how the value in the separatorInset property is interpreted for cells. The default value of this property is UITableView.SeparatorInsetReference.fromCellEdges.\n\nSee Also\nCustomizing the separator appearance\nvar separatorStyle: UITableViewCell.SeparatorStyle\nThe style for table cells to use as separators.\nenum UITableViewCell.SeparatorStyle\nThe style for cells to use as separators.\nvar separatorColor: UIColor?\nThe color of separator rows in the table view.\nvar separatorEffect: UIVisualEffect?\nThe effect to apply to table separators.\nvar separatorInset: UIEdgeInsets\nThe default inset of cell separators.\nenum UITableView.SeparatorInsetReference\nConstants that indicate how to interpret the separator inset value of a table view."
  },
  {
    "title": "separatorInset | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614851-separatorinset",
    "html": "Discussion\n\nIn iOS 7 and later, cell separators don’t extend all the way to the edge of the table view. This property sets the default inset for all cells in the table, much as rowHeight sets the default height for cells. It’s also used for managing the “extra” separators drawn at the bottom of plain style tables.\n\nFor example, to specify a table view where the default left separator inset is 3 points and the default right separator inset is 11, you’d write:\n\ntableView.separatorInset = UIEdgeInsetsMake(0, 3, 0, 11);\n\n\nIf every cell in a table contains an image view of the same size, by default iOS vertically aligns the leading edge of all separators. In a table that mixes text-only cells with cells that contain image views, you can use the separatorInset property to ensure that the separators are vertically aligned.\n\nIn a right-to-left user interface, an inset that you set using the separatorInset property automatically flips its left and right measurements.\n\nSpecial considerations\n\nOnly left and right insets are honored. In a right-to-left user interface, the inset measurements are automatically flipped.\n\nSee Also\nCustomizing the separator appearance\nvar separatorStyle: UITableViewCell.SeparatorStyle\nThe style for table cells to use as separators.\nenum UITableViewCell.SeparatorStyle\nThe style for cells to use as separators.\nvar separatorColor: UIColor?\nThe color of separator rows in the table view.\nvar separatorEffect: UIVisualEffect?\nThe effect to apply to table separators.\nvar separatorInsetReference: UITableView.SeparatorInsetReference\nAn indicator of how to interpret the separator inset value.\nenum UITableView.SeparatorInsetReference\nConstants that indicate how to interpret the separator inset value of a table view."
  },
  {
    "title": "separatorEffect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614865-separatoreffect",
    "html": "See Also\nCustomizing the separator appearance\nvar separatorStyle: UITableViewCell.SeparatorStyle\nThe style for table cells to use as separators.\nenum UITableViewCell.SeparatorStyle\nThe style for cells to use as separators.\nvar separatorColor: UIColor?\nThe color of separator rows in the table view.\nvar separatorInset: UIEdgeInsets\nThe default inset of cell separators.\nvar separatorInsetReference: UITableView.SeparatorInsetReference\nAn indicator of how to interpret the separator inset value.\nenum UITableView.SeparatorInsetReference\nConstants that indicate how to interpret the separator inset value of a table view."
  },
  {
    "title": "sectionHeaderHeight | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614863-sectionheaderheight",
    "html": "Discussion\n\nThe default value is automaticDimension. If the delegate doesn’t implement tableView(_:heightForHeaderInSection:), the table view calculates the height automatically. To override automatic height calculation, set this property to a positive value.\n\nSee Also\nConfiguring header and footer appearance\nvar sectionFooterHeight: CGFloat\nThe height of section footers in the table view.\nvar estimatedSectionHeaderHeight: CGFloat\nThe estimated height of section headers in the table view.\nvar estimatedSectionFooterHeight: CGFloat\nThe estimated height of section footers in the table view.\nvar sectionHeaderTopPadding: CGFloat\nThe amount of padding above each section header.\nRelated Documentation\nvar tableHeaderView: UIView?\nThe view that displays above the table’s content."
  },
  {
    "title": "dequeueReusableCell(withIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614891-dequeuereusablecell",
    "html": "Parameters\nidentifier\n\nA string identifying the cell object to be reused. This parameter must not be nil.\n\nReturn Value\n\nA UITableViewCell object with the associated identifier, or nil if no such object exists in the reusable-cell queue.\n\nDiscussion\n\nFor performance reasons, a table view’s data source should generally reuse UITableViewCell objects when it assigns cells to rows in its tableView(_:cellForRowAt:) method. A table view maintains a queue or list of UITableViewCell objects that the data source has marked for reuse. Call this method from your data source object when asked to provide a new cell for the table view. This method dequeues an existing cell if one is available or creates a new one using the class or nib file you previously registered. If no cell is available for reuse and you didn’t register a class or nib file, this method returns nil.\n\nIf you registered a class for the specified identifier and a new cell must be created, this method initializes the cell by calling its init(style:reuseIdentifier:) method. For nib-based cells, this method loads the cell object from the provided nib file. If an existing cell was available for reuse, this method calls the cell’s prepareForReuse() method instead.\n\nSee Also\nRecycling table view cells\nfunc register(UINib?, forCellReuseIdentifier: String)\nRegisters a nib object that contains a cell with the table view under a specified identifier.\nfunc register(AnyClass?, forCellReuseIdentifier: String)\nRegisters a class to use in creating new table cells.\nfunc dequeueReusableCell(withIdentifier: String, for: IndexPath) -> UITableViewCell\nReturns a reusable table-view cell object for the specified reuse identifier and adds it to the table."
  },
  {
    "title": "register(_:forHeaderFooterViewReuseIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614921-register",
    "html": "Parameters\nnib\n\nA nib object that specifies the nib file to use to create the header or footer view. This parameter can’t be nil.\n\nidentifier\n\nThe reuse identifier for the header or footer view. This parameter must not be nil and must not be an empty string.\n\nDiscussion\n\nBefore dequeueing any header or footer views, call this method or the register(_:forHeaderFooterViewReuseIdentifier:) method to tell the table view how to create new instances of your views. If a view of the specified type isn’t currently in a reuse queue, the table view uses the provided information to create a new one automatically.\n\nIf you previously registered a class or nib file with the same reuse identifier, the nib you specify in the nib parameter replaces the old entry. You may specify nil for nib if you want to unregister the nib from the specified reuse identifier.\n\nSee Also\nRecycling section headers and footers\nfunc register(AnyClass?, forHeaderFooterViewReuseIdentifier: String)\nRegisters a class to use in creating new table header or footer views.\nfunc dequeueReusableHeaderFooterView(withIdentifier: String) -> UITableViewHeaderFooterView?\nReturns a reusable header or footer view after locating it by its identifier."
  },
  {
    "title": "dequeueReusableCell(withIdentifier:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614878-dequeuereusablecell",
    "html": "Parameters\nidentifier\n\nA string identifying the cell object to be reused. This parameter must not be nil.\n\nindexPath\n\nThe index path specifying the location of the cell. Always specify the index path provided to you by your data source object. This method uses the index path to perform additional configuration based on the cell’s position in the table view.\n\nReturn Value\n\nA UITableViewCell object with the associated reuse identifier. This method always returns a valid cell.\n\nDiscussion\n\nCall this method only from the tableView(_:cellForRowAt:) method of your table view data source object. This method returns an existing cell of the specified type, if one is available, or it creates and returns a new cell using the class or storyboard you provided earlier. Don’t call this method outside of your data source’s tableView(_:cellForRowAt:) method. If you need to create cells at other times, call dequeueReusableCell(withIdentifier:) instead.\n\nImportant\n\nYou must specify a cell with a matching identifier in your storyboard file. You may also register a class or nib file using the register(_:forCellReuseIdentifier:) or register(_:forCellReuseIdentifier:) method, but must do so before calling this method.\n\nWhen creating new cells from your storyboard or nib file, this method loads the cell object and initializes it using its init(coder:) method. When creating cells from a registered class, this method creates the cell and initializes it by calling its init(style:reuseIdentifier:) method. For nib-based cells, this method loads the cell object from the provided nib file. If an existing cell was available for reuse, this method calls the cell’s prepareForReuse() method instead.\n\nSee Also\nRecycling table view cells\nfunc register(UINib?, forCellReuseIdentifier: String)\nRegisters a nib object that contains a cell with the table view under a specified identifier.\nfunc register(AnyClass?, forCellReuseIdentifier: String)\nRegisters a class to use in creating new table cells.\nfunc dequeueReusableCell(withIdentifier: String) -> UITableViewCell?\nReturns a reusable table-view cell object after locating it by its identifier."
  },
  {
    "title": "register(_:forCellReuseIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614888-register",
    "html": "Parameters\ncellClass\n\nThe class of a cell that you want to use in the table (must be a UITableViewCell subclass).\n\nidentifier\n\nThe reuse identifier for the cell. This parameter must not be nil and must not be an empty string.\n\nDiscussion\n\nPrior to dequeueing any cells, call this method or the register(_:forCellReuseIdentifier:) method to tell the table view how to create new cells. If a cell of the specified type isn’t currently in a reuse queue, the table view uses the provided information to create a new cell object automatically.\n\nIf you previously registered a class or nib file with the same reuse identifier, the class you specify in the cellClass parameter replaces the old entry. You may specify nil for cellClass if you want to unregister the class from the specified reuse identifier.\n\nSee Also\nRecycling table view cells\nfunc register(UINib?, forCellReuseIdentifier: String)\nRegisters a nib object that contains a cell with the table view under a specified identifier.\nfunc dequeueReusableCell(withIdentifier: String, for: IndexPath) -> UITableViewCell\nReturns a reusable table-view cell object for the specified reuse identifier and adds it to the table.\nfunc dequeueReusableCell(withIdentifier: String) -> UITableViewCell?\nReturns a reusable table-view cell object after locating it by its identifier."
  },
  {
    "title": "register(_:forCellReuseIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614937-register",
    "html": "Parameters\nnib\n\nA nib object that specifies the nib file to use to create the cell.\n\nidentifier\n\nThe reuse identifier for the cell. This parameter must not be nil and must not be an empty string.\n\nDiscussion\n\nBefore dequeueing any cells, call this method or the register(_:forCellReuseIdentifier:) method to tell the table view how to create new cells. If a cell of the specified type isn’t currently in a reuse queue, the table view uses the provided information to create a new cell object automatically.\n\nIf you previously registered a class or nib file with the same reuse identifier, the nib you specify in the nib parameter replaces the old entry. You may specify nil for nib if you want to unregister the nib from the specified reuse identifier.\n\nSee Also\nRecycling table view cells\nfunc register(AnyClass?, forCellReuseIdentifier: String)\nRegisters a class to use in creating new table cells.\nfunc dequeueReusableCell(withIdentifier: String, for: IndexPath) -> UITableViewCell\nReturns a reusable table-view cell object for the specified reuse identifier and adds it to the table.\nfunc dequeueReusableCell(withIdentifier: String) -> UITableViewCell?\nReturns a reusable table-view cell object after locating it by its identifier.\nRelated Documentation\nfunc tableView(UITableView, cellForRowAt: IndexPath) -> UITableViewCell\nAsks the data source for a cell to insert in a particular location of the table view."
  },
  {
    "title": "dataSource | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614955-datasource",
    "html": "Discussion\n\nThe data source must adopt the UITableViewDataSource protocol. The data source isn’t retained.\n\nSee Also\nProviding the data and cells\nvar prefetchDataSource: UITableViewDataSourcePrefetching?\nThe object that acts as the prefetching data source for the table view, receiving notifications of upcoming cell data requirements.\nvar isPrefetchingEnabled: Bool\nA Boolean value that indicates whether to allow cell and data prefetching.\nprotocol UITableViewDataSource\nThe methods that an object adopts to manage data and provide cells for a table view.\nprotocol UITableViewDataSourcePrefetching\nA protocol that provides advance warning of the data requirements for a table view, allowing you to start potentially long-running data operations early.\nRelated Documentation\nvar delegate: UITableViewDelegate?\nThe object that acts as the delegate of the table view."
  },
  {
    "title": "UITableView.ScrollPosition | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/scrollposition",
    "html": "Overview\n\nYou set the scroll position through a parameter of the selectRow(at:animated:scrollPosition:), scrollToNearestSelectedRow(at:animated:), cellForRow(at:), and indexPathForSelectedRow methods.\n\nTopics\nConstants\ncase none\nThe table view scrolls the row of interest to be fully visible with a minimum of movement.\ncase top\nThe table view scrolls the row of interest to the top of the visible table view.\ncase middle\nThe table view scrolls the row of interest to the middle of the visible table view.\ncase bottom\nThe table view scrolls the row of interest to the bottom of the visible table view.\nRelationships\nConforms To\nSendable\nSee Also\nScrolling the table view\nfunc scrollToRow(at: IndexPath, at: UITableView.ScrollPosition, animated: Bool)\nScrolls through the table view until a row that an index path identifies is at a particular location on the screen.\nfunc scrollToNearestSelectedRow(at: UITableView.ScrollPosition, animated: Bool)\nScrolls the table view so that the selected row nearest to a specified position in the table view is at that position."
  },
  {
    "title": "prefetchDataSource | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1771763-prefetchdatasource",
    "html": "Discussion\n\nAssign an object that conforms to the UITableViewDataSourcePrefetching protocol to facilitate prefetching of data for cells to be displayed in the near future. To disable prefetching behavior, set this property to nil. This object isn’t retained.\n\nSee Also\nProviding the data and cells\nvar dataSource: UITableViewDataSource?\nThe object that acts as the data source of the table view.\nvar isPrefetchingEnabled: Bool\nA Boolean value that indicates whether to allow cell and data prefetching.\nprotocol UITableViewDataSource\nThe methods that an object adopts to manage data and provide cells for a table view.\nprotocol UITableViewDataSourcePrefetching\nA protocol that provides advance warning of the data requirements for a table view, allowing you to start potentially long-running data operations early."
  },
  {
    "title": "setEditing(_:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614876-setediting",
    "html": "Parameters\nediting\n\ntrue to enter editing mode; false to leave it. The default value is false.\n\nanimate\n\ntrue to animate the transition to editing mode; false to make the transition immediate.\n\nDiscussion\n\nWhen you call this method with the value of editing set to true, the table view goes into editing mode by calling setEditing(_:animated:) on each visible UITableViewCell object. Calling this method with editing set to false turns off editing mode. In editing mode, the cells of the table might show an insertion or deletion control on the left side of each cell and a reordering control on the right side, depending on how the cell is configured. (See UITableViewCell for details.) The data source of the table view can selectively exclude cells from editing mode by implementing tableView(_:canEditRowAt:).\n\nSee Also\nPutting the table into edit mode\nvar isEditing: Bool\nA Boolean value that determines whether the table view is in editing mode."
  },
  {
    "title": "scrollToNearestSelectedRow(at:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614910-scrolltonearestselectedrow",
    "html": "Parameters\nscrollPosition\n\nA constant that identifies a relative position in the table view (top, middle, bottom) for the row when scrolling concludes. See UITableView.ScrollPosition for a descriptions of valid constants.\n\nanimated\n\ntrue if you want to animate the change in position; false if it should be immediate.\n\nSee Also\nScrolling the table view\nfunc scrollToRow(at: IndexPath, at: UITableView.ScrollPosition, animated: Bool)\nScrolls through the table view until a row that an index path identifies is at a particular location on the screen.\nenum UITableView.ScrollPosition\nThe position in the table view (top, middle, bottom) to scroll a specified row to."
  },
  {
    "title": "isEditing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1615001-isediting",
    "html": "Discussion\n\nWhen the value of this property is true, the table view is in editing mode: The cells of the table might show an insertion or deletion control on the left side of each cell and a reordering control on the right side, depending on how the cell is configured. (See UITableViewCell for details.) Tapping a control causes the table view to invoke the data source method tableView(_:commit:forRowAt:). The default value is false.\n\nSee Also\nPutting the table into edit mode\nfunc setEditing(Bool, animated: Bool)\nToggles the table view into and out of editing mode."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614859-init",
    "html": "See Also\nCreating a table view\ninit(frame: CGRect, style: UITableView.Style)\nCreates and returns a table view with the specified frame and style."
  },
  {
    "title": "sectionIndexMinimumDisplayRowCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614903-sectionindexminimumdisplayrowcou",
    "html": "Discussion\n\nThis property is applicable only to table views in the UITableView.Style.plain style. The default value is zero.\n\nSee Also\nConfiguring the table index\nvar sectionIndexColor: UIColor?\nThe color to use for the table view’s index text.\nvar sectionIndexBackgroundColor: UIColor?\nThe color to use for the background of the table view’s section index.\nvar sectionIndexTrackingBackgroundColor: UIColor?\nThe color to use for the table view’s index background area.\nclass let indexSearch: String\nA constant for adding the magnifying glass icon to the section index of a table view."
  },
  {
    "title": "isPrefetchingEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/3801922-isprefetchingenabled",
    "html": "Discussion\n\nWhen true, the table view may request cells in advance of displaying them. When false, the table view requests cells when they need to display. Setting this property to false also disables data prefetching. The default value of this property is true.\n\nSee Also\nProviding the data and cells\nvar dataSource: UITableViewDataSource?\nThe object that acts as the data source of the table view.\nvar prefetchDataSource: UITableViewDataSourcePrefetching?\nThe object that acts as the prefetching data source for the table view, receiving notifications of upcoming cell data requirements.\nprotocol UITableViewDataSource\nThe methods that an object adopts to manage data and provide cells for a table view.\nprotocol UITableViewDataSourcePrefetching\nA protocol that provides advance warning of the data requirements for a table view, allowing you to start potentially long-running data operations early."
  },
  {
    "title": "hasActiveDrag | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/2897381-hasactivedrag",
    "html": "See Also\nManaging drag interactions\nvar dragDelegate: UITableViewDragDelegate?\nThe delegate object that manages the dragging of items from the table view.\nprotocol UITableViewDragDelegate\nThe interface for initiating drags from a table view.\nvar dragInteractionEnabled: Bool\nA Boolean value that indicates whether the table view supports dragging content."
  },
  {
    "title": "hasActiveDrop | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/2897323-hasactivedrop",
    "html": "Discussion\n\nThe value of this property is true when the table view is tracking a drop session.\n\nSee Also\nManaging drop interactions\nvar dropDelegate: UITableViewDropDelegate?\nThe delegate object that manages the dropping of content into the table view.\nprotocol UITableViewDropDelegate\nThe interface for handling drops in a table view."
  },
  {
    "title": "beginUpdates() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614908-beginupdates",
    "html": "Discussion\n\nUse the performBatchUpdates(_:completion:) method instead of this one whenever possible.\n\nCall this method if you want subsequent insertions, deletion, and selection operations (for example, cellForRow(at:) and indexPathsForVisibleRows) to be animated simultaneously. You can also use this method followed by the endUpdates() method to animate the change in the row heights without reloading the cell. This group of methods must conclude with an invocation of endUpdates(). These method pairs can be nested. If you don’t make the insertion, deletion, and selection calls inside this block, table attributes such as row count might become invalid. You shouldn’t call reloadData() within the group; if you call this method within the group, you must perform any animations yourself.\n\nSee Also\nPerforming batch updates to rows and sections\nfunc performBatchUpdates((() -> Void)?, completion: ((Bool) -> Void)?)\nAnimates multiple insert, delete, reload, and move operations as a group.\nfunc endUpdates()\nConcludes a series of method calls that insert, delete, select, or reload rows and sections of the table view."
  },
  {
    "title": "performBatchUpdates(_:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/2887515-performbatchupdates",
    "html": "Parameters\nupdates\n\nThe block that performs the relevant insert, delete, reload, or move operations. In addition to modifying the table’s rows, update your table’s data source to reflect your changes. This block has no return value and takes no parameters.\n\ncompletion\n\nA completion handler block to execute when all of the operations are finished. This block has no return value and takes the following parameter:\n\nfinished\n\nA Boolean value indicating whether the animations completed successfully. The value of this parameter is false if the animations were interrupted for any reason.\n\nDiscussion\n\nUse this method in cases where you want to make multiple changes to the table view in one single animated operation, as opposed to several separate animations. Use the block passed in the updates parameter to specify all of the operations you want to perform.\n\nDeletes are processed before inserts in batch operations. This means the indexes for the deletions are processed relative to the indexes of the table view’s state before the batch operation, and the indexes for the insertions are processed relative to the indexes of the state after all the deletions in the batch operation.\n\nSee Also\nPerforming batch updates to rows and sections\nfunc beginUpdates()\nBegins a series of method calls that insert, delete, or select rows and sections of the table view.\nfunc endUpdates()\nConcludes a series of method calls that insert, delete, select, or reload rows and sections of the table view."
  },
  {
    "title": "deleteSections(_:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614922-deletesections",
    "html": "Parameters\nsections\n\nAn index set that specifies the sections to delete from the table view. If a section exists after the specified index location, it is moved up one index location.\n\nanimation\n\nA constant that either specifies the kind of animation to perform when deleting the section or requests no animation. See UITableView.RowAnimation for descriptions of the constants.\n\nDiscussion\n\nWhen this method when is called in an animation block defined by the beginUpdates() and endUpdates() methods, UITableView defers any insertions of rows or sections until after it has handled the deletions of rows or sections. This order is followed regardless how the insertion and deletion method calls are ordered. This is unlike inserting or removing an item in a mutable array, in which the operation can affect the array index used for the successive insertion or removal operation. For more on this subject, see Batch Insertion, Deletion, and Reloading of Rows and Sections in Table View Programming Guide for iOS.\n\nSee Also\nInserting, deleting, and moving rows and sections\nfunc insertRows(at: [IndexPath], with: UITableView.RowAnimation)\nInserts rows in the table view at the locations that an array of index paths identifies, with an option to animate the insertion.\nfunc deleteRows(at: [IndexPath], with: UITableView.RowAnimation)\nDeletes the rows that an array of index paths identifies, with an option to animate the deletion.\nfunc insertSections(IndexSet, with: UITableView.RowAnimation)\nInserts one or more sections in the table view, with an option to animate the insertion.\nenum UITableView.RowAnimation\nThe type of animation to use when inserting or deleting rows.\nfunc moveRow(at: IndexPath, to: IndexPath)\nMoves the row at a specified location to a destination location.\nfunc moveSection(Int, toSection: Int)\nMoves a section to a new location in the table view.\nRelated Documentation\nfunc reloadSections(IndexSet, with: UITableView.RowAnimation)\nReloads the specified sections using the provided animation effect."
  },
  {
    "title": "allowsSelectionDuringEditing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614889-allowsselectionduringediting",
    "html": "Discussion\n\nIf the value of this property is true, users can select rows during editing. The default value is false. If you want to restrict selection of cells regardless of mode, use allowsSelection.\n\nSee Also\nSelecting rows\nvar indexPathForSelectedRow: IndexPath?\nAn index path that identifies the row and section of the selected row.\nvar indexPathsForSelectedRows: [IndexPath]?\nThe index paths that represent the selected rows.\nfunc selectRow(at: IndexPath?, animated: Bool, scrollPosition: UITableView.ScrollPosition)\nSelects a row in the table view that an index path identifies, optionally scrolling the row to a location in the table view.\nfunc deselectRow(at: IndexPath, animated: Bool)\nDeselects a row that an index path identifies, with an option to animate the deselection.\nvar allowsSelection: Bool\nA Boolean value that determines whether users can select a row.\nvar allowsMultipleSelection: Bool\nA Boolean value that determines whether users can select more than one row outside of editing mode.\nvar allowsMultipleSelectionDuringEditing: Bool\nA Boolean value that controls whether users can select more than one cell simultaneously in editing mode.\nvar selectionFollowsFocus: Bool\nA Boolean value that triggers an automatic selection when focus moves to a cell.\nclass let selectionDidChangeNotification: NSNotification.Name\nA notification that posts when the selected row in the posting table view changes."
  },
  {
    "title": "selectRow(at:animated:scrollPosition:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614875-selectrow",
    "html": "Parameters\nindexPath\n\nAn index path identifying a row in the table view.\n\nanimated\n\ntrue if you want to animate the selection and any change in position; false if the change should be immediate.\n\nscrollPosition\n\nA constant that identifies a relative position in the table view (top, middle, bottom) for the row when scrolling concludes. See UITableView.ScrollPosition for descriptions of valid constants.\n\nDiscussion\n\nCalling this method doesn’t cause the delegate to receive a tableView(_:willSelectRowAt:) or tableView(_:didSelectRowAt:) message, nor does it send selectionDidChangeNotification notifications to observers.\n\nSpecial considerations\n\nPassing UITableView.ScrollPosition.none results in no scrolling, rather than the minimum scrolling described for that constant. To scroll to the newly selected row with minimum scrolling, select the row using this method with UITableView.ScrollPosition.none, then call scrollToRow(at:at:animated:) with UITableView.ScrollPosition.none.\n\nNSIndexPath *rowToSelect;  // assume this exists and is set properly\nUITableView *myTableView;  // assume this exists\n \n[myTableView selectRowAtIndexPath:rowToSelect animated:YES scrollPosition:UITableViewScrollPositionNone];\n[myTableView scrollToRowAtIndexPath:rowToSelect atScrollPosition:UITableViewScrollPositionNone animated:YES];\n\nSee Also\nSelecting rows\nvar indexPathForSelectedRow: IndexPath?\nAn index path that identifies the row and section of the selected row.\nvar indexPathsForSelectedRows: [IndexPath]?\nThe index paths that represent the selected rows.\nfunc deselectRow(at: IndexPath, animated: Bool)\nDeselects a row that an index path identifies, with an option to animate the deselection.\nvar allowsSelection: Bool\nA Boolean value that determines whether users can select a row.\nvar allowsMultipleSelection: Bool\nA Boolean value that determines whether users can select more than one row outside of editing mode.\nvar allowsSelectionDuringEditing: Bool\nA Boolean value that determines whether users can select cells while the table view is in editing mode.\nvar allowsMultipleSelectionDuringEditing: Bool\nA Boolean value that controls whether users can select more than one cell simultaneously in editing mode.\nvar selectionFollowsFocus: Bool\nA Boolean value that triggers an automatic selection when focus moves to a cell.\nclass let selectionDidChangeNotification: NSNotification.Name\nA notification that posts when the selected row in the posting table view changes."
  },
  {
    "title": "UITableView.Style.plain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/style/plain",
    "html": "Discussion\n\nSection headers and footers are displayed as inline separators and float when the table view is scrolled.\n\nSee Also\nStyles\ncase grouped\nA table view where sections have distinct groups of rows.\ncase insetGrouped\nA table view where the grouped sections are inset with rounded corners."
  },
  {
    "title": "splitViewController(_:willShow:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontrollerdelegate/3580927-splitviewcontroller",
    "html": "Parameters\nsvc\n\nThe split view controller whose column is being shown.\n\ncolumn\n\nThe column to be shown. See UISplitViewController.Column for possible values.\n\nDiscussion\n\nThis delegate method only applies to column-style split view interfaces. For more information, see Split view styles.\n\nThe split view controller calls this method when one of its columns is about to be shown, for example with show(_:). Use this method to perform any customization associated with showing the column. You can use the split view controller’s transitionCoordinator to coordinate any of your animations alongside the transition animation.\n\nSee Also\nExpanding the interface\nfunc splitViewController(UISplitViewController, displayModeForExpandingToProposedDisplayMode: UISplitViewController.DisplayMode) -> UISplitViewController.DisplayMode\nAsks the delegate to provide the display mode to use after the split view interface expands.\nfunc splitViewControllerDidExpand(UISplitViewController)\nTells the delegate that the split view controller interface has expanded."
  },
  {
    "title": "splitViewController(_:displayModeForExpandingToProposedDisplayMode:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontrollerdelegate/3580924-splitviewcontroller",
    "html": "Parameters\nsvc\n\nThe split view controller whose interface is expanding.\n\nproposedDisplayMode\n\nThe proposed display mode to expand the interface to.\n\nReturn Value\n\nThe display mode to expand the interface to. This value may be the same as proposedDisplayMode, or you may return a different value.\n\nDiscussion\n\nThis delegate method only applies to column-style split view interfaces. For more information, see Split view styles.\n\nWhen the split view controller transitions from a horizontally compact to a horizontally regular size class, it calls this method and asks you for the display mode to use when that transition is complete. Use this method to customize the display mode you’re expanding to. For example, you might use this opportunity to adjust column widths before returning the display mode to use.\n\nSee Also\nExpanding the interface\nfunc splitViewController(UISplitViewController, willShow: UISplitViewController.Column)\nTells the delegate that the specified column is about to be shown.\nfunc splitViewControllerDidExpand(UISplitViewController)\nTells the delegate that the split view controller interface has expanded."
  },
  {
    "title": "splitViewController(_:willShow:invalidating:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontrollerdelegate/1623202-splitviewcontroller",
    "html": "Deprecated\n\nImplement the splitViewController(_:willChangeTo:) method instead.\n\nParameters\nsvc\n\nThe split view controller that owns the specified view controller.\n\naViewController\n\nThe view controller being hidden.\n\nbutton\n\nThe button used to display the view controller while it was hidden.\n\nDiscussion\n\nWhen the view controller rotates from a portrait to landscape orientation, it shows its hidden view controller once more. If you added the specified button to your toolbar to facilitate the display of the hidden view controller in a popover, you must implement this method and use it to remove that button.\n\nSee Also\nDeprecated methods\nfunc splitViewController(UISplitViewController, shouldHide: UIViewController, in: UIInterfaceOrientation) -> Bool\nAsks the delegate whether the first view controller should be hidden for the specified orientation.\nDeprecated\nfunc splitViewController(UISplitViewController, willHide: UIViewController, with: UIBarButtonItem, for: UIPopoverController)\nTells the delegate that the specified view controller is about to be hidden.\nDeprecated\nfunc splitViewController(UISplitViewController, popoverController: UIPopoverController, willPresent: UIViewController)\nTells the delegate that the hidden view controller is about to be displayed in a popover.\nDeprecated"
  },
  {
    "title": "init(url:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentproperties/3967516-init",
    "html": "Parameters\nurl\n\nThe URL that points to the document data.\n\nDiscussion\n\nWhen you initialize a document properties object with a URL, UIKit automatically finds the corresponding metadata and stores it in the document properties object’s metadata property.\n\nSee Also\nCreating a document header\ninit(metadata: LPLinkMetadata)\nCreates a document properties object from the metadata object you specify.\nvar metadata: LPLinkMetadata\nThe document’s metadata."
  },
  {
    "title": "init(metadata:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentproperties/3967515-init",
    "html": "Parameters\nmetadata\n\nMetadata about a document.\n\nDiscussion\n\nIf you don’t have a URL backing your document, create a metadata object manually to initialize a document properties object.\n\nSee Also\nCreating a document header\ninit(url: URL)\nCreates a document properties object from document data at the URL you specify.\nvar metadata: LPLinkMetadata\nThe document’s metadata."
  },
  {
    "title": "searchController(_:willChangeTo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchcontrollerdelegate/3979287-searchcontroller",
    "html": "Parameters\nsearchController\n\nThe search controller associated with the search bar.\n\nnewPlacement\n\nThe new search bar placement.\n\nDiscussion\n\nThe system calls this method before a search bar placement change occurs, such as in response to a layout change that alters the amount of available space in the navigation bar. Implement this method if you need to make any custom changes to your search suggestions UI according to the new search bar placement.\n\nThe system calls this method before searchController(_:didChangeFrom:).\n\nSee Also\nResponding to search bar placement updates\nfunc searchController(UISearchController, didChangeFrom: UINavigationItem.SearchBarPlacement)\nNotifies the delegate after the search bar placement changes."
  },
  {
    "title": "metadata | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentproperties/3967517-metadata",
    "html": "Discussion\n\nIf you initialize the document properties object using init(url:), UIKit generates this metadata automatically. Typically, you don’t need to access the value of this property directly because UIKit updates the metadata asynchronously to display the latest information in the document header.\n\nIf you initialize the document properties object using init(metadata:), you can use this property to manually set metadata if it requires an update.\n\nSee Also\nCreating a document header\ninit(url: URL)\nCreates a document properties object from document data at the URL you specify.\ninit(metadata: LPLinkMetadata)\nCreates a document properties object from the metadata object you specify."
  },
  {
    "title": "errorUserInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentbrowsererror/2920005-erroruserinfo",
    "html": "See Also\nGetting error properties\nvar errorCode: Int\nA code that indicates the kind of error.\nvar code: Code\nA code that indicates the kind of error.\nstatic var errorDomain: String\nA string that identifies the error domain.\nvar userInfo: [String : Any]\nThe user information dictionary associated with the error.\nvar localizedDescription: String\nA string containing the localized description of the error."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentbrowsererror/3727742-hashvalue",
    "html": "See Also\nComparing errors\nstatic func == (UIDocumentBrowserError, UIDocumentBrowserError) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nstatic func != (UIDocumentBrowserError, UIDocumentBrowserError) -> Bool\nReturns a Boolean value indicating whether two values are unequal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the error by feeding them into the given hash function."
  },
  {
    "title": "localizedDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentbrowsererror/2920006-localizeddescription",
    "html": "See Also\nGetting error properties\nvar errorCode: Int\nA code that indicates the kind of error.\nvar code: Code\nA code that indicates the kind of error.\nstatic var errorDomain: String\nA string that identifies the error domain.\nvar userInfo: [String : Any]\nThe user information dictionary associated with the error.\nvar errorUserInfo: [String : Any]\nThe user information dictionary associated with the error."
  },
  {
    "title": "init(localizedAttributedSuggestion:localizedDescription:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchsuggestionitem/3979290-init",
    "html": "Parameters\nsuggestion\n\nAn attributed label for the suggestion, usually the search term the suggestion represents.\n\ndescription\n\nA description of the suggestion. The system uses this description for accessibility.\n\nSee Also\nCreating a search suggestion\ninit(localizedSuggestion: String, localizedDescription: String?, iconImage: UIImage?)\nCreates a search suggestion with the specified text and image attributes.\ninit(localizedAttributedSuggestion: NSAttributedString, localizedDescription: String?, iconImage: UIImage?)\nCreates a search suggestion with the specified attributed label, accessibility description, and image.\ninit(localizedSuggestion: String, localizedDescription: String?)\nCreates a search suggestion with the specified label and accessibility description.\ninit(localizedSuggestion: String)\nCreates a search suggestion with the specified label.\ninit(localizedAttributedSuggestion: NSAttributedString)\nCreates a search suggestion with the specified attributed label."
  },
  {
    "title": "init(localizedAttributedSuggestion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchsuggestionitem/3979289-init",
    "html": "Parameters\nsuggestion\n\nAn attributed label for the suggestion, usually the search term the suggestion represents.\n\nSee Also\nCreating a search suggestion\ninit(localizedSuggestion: String, localizedDescription: String?, iconImage: UIImage?)\nCreates a search suggestion with the specified text and image attributes.\ninit(localizedAttributedSuggestion: NSAttributedString, localizedDescription: String?, iconImage: UIImage?)\nCreates a search suggestion with the specified attributed label, accessibility description, and image.\ninit(localizedSuggestion: String, localizedDescription: String?)\nCreates a search suggestion with the specified label and accessibility description.\ninit(localizedAttributedSuggestion: NSAttributedString, localizedDescription: String?)\nCreates a search suggestion with the specified attributed label and accessibility description.\ninit(localizedSuggestion: String)\nCreates a search suggestion with the specified label."
  },
  {
    "title": "init(localizedSuggestion:localizedDescription:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchsuggestionitem/3584830-init",
    "html": "Parameters\nsuggestion\n\nA label for the suggestion, usually the search term the suggestion represents.\n\ndescription\n\nA description of the suggestion. The system uses this description for accessibility.\n\nSee Also\nCreating a search suggestion\ninit(localizedSuggestion: String, localizedDescription: String?, iconImage: UIImage?)\nCreates a search suggestion with the specified text and image attributes.\ninit(localizedAttributedSuggestion: NSAttributedString, localizedDescription: String?, iconImage: UIImage?)\nCreates a search suggestion with the specified attributed label, accessibility description, and image.\ninit(localizedAttributedSuggestion: NSAttributedString, localizedDescription: String?)\nCreates a search suggestion with the specified attributed label and accessibility description.\ninit(localizedSuggestion: String)\nCreates a search suggestion with the specified label.\ninit(localizedAttributedSuggestion: NSAttributedString)\nCreates a search suggestion with the specified attributed label."
  },
  {
    "title": "localizedDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchsuggestionitem/3584832-localizeddescription",
    "html": "Discussion\n\nThe system uses this description for accessibility.\n\nSee Also\nDescribing a search suggestion\nvar localizedSuggestion: String?\nA label for the suggestion, usually the search term the suggestion represents.\nvar localizedAttributedSuggestion: NSAttributedString?\nAn attributed label for the suggestion, usually the search term the suggestion represents.\nvar iconImage: UIImage?\nAn image for display on the suggestion.\nvar representedObject: Any?\nAn object for tracking supplementary information about the search suggestion."
  },
  {
    "title": "UIVibrancyEffectStyle.tertiaryLabel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uivibrancyeffectstyle/tertiarylabel",
    "html": "See Also\nLabel styles\ncase label\nA style for labels containing primary content.\ncase secondaryLabel\nA style for labels containing secondary content.\ncase quaternaryLabel\nA style for labels containing quaternary content."
  },
  {
    "title": "UISearchController.ScopeBarActivation.manual | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchcontroller/scopebaractivation/manual",
    "html": "Discussion\n\nWhen you use this mode, you control when to show and hide the scope bar through the showsScopeBar property on the searchBar of the UISearchController."
  },
  {
    "title": "localizedAttributedSuggestion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchsuggestion/3979288-localizedattributedsuggestion",
    "html": "Required\n\nSee Also\nDescribing a search suggestion\nvar localizedSuggestion: String?\nA label for the suggestion, usually the search term the suggestion represents.\n\nRequired\n\nvar localizedDescription: String?\nA description of the suggestion.\nvar iconImage: UIImage?\nAn image for display on the suggestion.\nvar representedObject: Any?\nAn object for tracking supplementary information about the search suggestion.\n\nRequired"
  },
  {
    "title": "representedObject | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchsuggestion/3976736-representedobject",
    "html": "Required\n\nDiscussion\n\nUse this property to associate the search suggestion with a corresponding object.\n\nSee Also\nDescribing a search suggestion\nvar localizedSuggestion: String?\nA label for the suggestion, usually the search term the suggestion represents.\n\nRequired\n\nvar localizedDescription: String?\nA description of the suggestion.\nvar localizedAttributedSuggestion: NSAttributedString?\nAn attributed label for the suggestion, usually the search term the suggestion represents.\n\nRequired\n\nvar iconImage: UIImage?\nAn image for display on the suggestion."
  },
  {
    "title": "scopeButtonTitles | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchbar/1624292-scopebuttontitles",
    "html": "Discussion\n\nThe order of the strings in the array indicates the order that the corresponding buttons will be displayed, from left to right. The index in the array corresponds to the index used in selectedScopeButtonIndex.\n\nSee Also\nConfiguring scope bar buttons\nvar selectedScopeButtonIndex: Int\nThe index of the selected scope button.\nvar showsScopeBar: Bool\nSpecifies whether the scope bar is displayed.\nfunc setShowsScope(Bool, animated: Bool)\nSpecifies whether the scope bar is displayed, optionally using an animation."
  },
  {
    "title": "UIImagePickerController.QualityType.typeIFrame960x540 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimagepickercontroller/qualitytype/typeiframe960x540",
    "html": "Discussion\n\nThe Apple iFrame format supports video editing by keeping content in its native recorded format while editing."
  },
  {
    "title": "UIImagePickerController.QualityType.typeLow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimagepickercontroller/qualitytype/typelow",
    "html": "Discussion\n\nRecorded files can usually be transferred over the cellular network.\n\nIf displaying a recorded movie in the image picker, specifies that you want to transcode higher-quality movies to low video quality."
  },
  {
    "title": "UIImagePickerController.QualityType.typeIFrame1280x720 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimagepickercontroller/qualitytype/typeiframe1280x720",
    "html": "Discussion\n\nThe Apple iFrame format supports video editing by keeping content in its native recorded format while editing."
  },
  {
    "title": "UIImagePickerController.QualityType.typeMedium | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimagepickercontroller/qualitytype/typemedium",
    "html": "Discussion\n\nRecorded files can usually be transferred using Wi-Fi. This is the default video quality setting.\n\nIf displaying a recorded movie in the image picker, specifies that you want to transcode higher-quality movies to medium video quality."
  },
  {
    "title": "generic | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentbrowsererror/2920007-generic",
    "html": "See Also\nError codes\nstatic var noLocationAvailable: UIDocumentBrowserError.Code\nAn error indicating that no location exists.\nenum UIDocumentBrowserError.Code\nThe error codes for document browser errors."
  },
  {
    "title": "UIDocumentBrowserViewController.ImportMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentbrowserviewcontroller/importmode",
    "html": "Topics\nConstants\ncase copy\nA mode indicating that the file should be copied into its new location (the original file is left unchanged).\ncase move\nA mode indicating that the file should be moved to its new location (the original file should be deleted).\ncase none\nA mode indicating that the document can’t be imported.\nRelationships\nConforms To\nSendable\nSee Also\nCreating new documents\nfunc documentBrowser(UIDocumentBrowserViewController, didRequestDocumentCreationWithHandler: (URL?, UIDocumentBrowserViewController.ImportMode) -> Void)\nAsks the delegate to create a new document.\nfunc documentBrowser(UIDocumentBrowserViewController, didImportDocumentAt: URL, toDestinationURL: URL)\nTells the delegate that a document has been successfully imported.\nfunc documentBrowser(UIDocumentBrowserViewController, failedToImportDocumentAt: URL, error: Error?)\nTells the delegate that the document browser failed to import the specified document."
  },
  {
    "title": "UINavigationBar.NSToolbarSection.none | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uinavigationbar/nstoolbarsection/none",
    "html": "Discussion\n\nUse this value to disable NSToolbar hosting. This value is equivalent to setting the preferredBehavioralStyle of the navigation bar to UIBehavioralStyle.pad."
  },
  {
    "title": "noLocationAvailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentbrowsererror/3022587-nolocationavailable",
    "html": "See Also\nError codes\nstatic var generic: UIDocumentBrowserError.Code\nAn unspecified error.\nenum UIDocumentBrowserError.Code\nThe error codes for document browser errors."
  },
  {
    "title": "UIDocumentBrowserError.Code.generic | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentbrowsererror/code/generic",
    "html": "See Also\nError codes\ncase noLocationAvailable\nAn error indicating that no location exists."
  },
  {
    "title": "tableView(_:canPerformPrimaryActionForRowAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/3975910-tableview",
    "html": "Parameters\ntableView\n\nThe table view object asking whether to perform a primary action.\n\nindexPath\n\nThe index path of the row.\n\nReturn Value\n\ntrue if the primary action can be performed; otherwise, false. If you don’t implement this method, the default return value is true when the table view isn’t in an editing state, and false when it is.\n\nDiscussion\n\nPrimary actions allow you to distinguish between a distinct user action and a change in selection (like a focus change or other indirect selection change). A primary action occurs when a person selects a single row without extending an existing selection.\n\nUIKit calls this method before tableView(_:performPrimaryActionForRowAt:).\n\nSee Also\nPerforming primary actions\nfunc tableView(UITableView, performPrimaryActionForRowAt: IndexPath)\nTells the delegate to perform the primary action for the row at the specified index path."
  },
  {
    "title": "sectionHeaderTopPadding | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/3750914-sectionheadertoppadding",
    "html": "Discussion\n\nThe default value is automaticDimension.\n\nSee Also\nConfiguring header and footer appearance\nvar sectionHeaderHeight: CGFloat\nThe height of section headers in the table view.\nvar sectionFooterHeight: CGFloat\nThe height of section footers in the table view.\nvar estimatedSectionHeaderHeight: CGFloat\nThe estimated height of section headers in the table view.\nvar estimatedSectionFooterHeight: CGFloat\nThe estimated height of section footers in the table view."
  },
  {
    "title": "estimatedSectionFooterHeight | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614979-estimatedsectionfooterheight",
    "html": "Discussion\n\nProviding a nonnegative estimate of the height of section footers can improve the performance of loading the table view. If the table contains variable height section footers, it might be expensive to calculate all their heights when the table loads. Using estimation allows you to defer some of the cost of geometry calculation from load time to scrolling time.\n\nThe default value is automaticDimension, which means that the table view selects an estimated height to use on your behalf. Setting the value to 0 disables estimated heights, which causes the table view to request the actual height for each footer. If your table uses self-sizing footers, the value of this property must not be 0.\n\nWhen using height estimates, the table view actively manages the contentOffset and contentSize properties inherited from its scroll view. Don’t attempt to read or modify those properties directly.\n\nSee Also\nConfiguring header and footer appearance\nvar sectionHeaderHeight: CGFloat\nThe height of section headers in the table view.\nvar sectionFooterHeight: CGFloat\nThe height of section footers in the table view.\nvar estimatedSectionHeaderHeight: CGFloat\nThe estimated height of section headers in the table view.\nvar sectionHeaderTopPadding: CGFloat\nThe amount of padding above each section header.\nRelated Documentation\nvar estimatedRowHeight: CGFloat\nThe estimated height of rows in the table view."
  },
  {
    "title": "cellLayoutMarginsFollowReadableWidth | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614849-celllayoutmarginsfollowreadablew",
    "html": "See Also\nConfiguring cell height and layout\nvar rowHeight: CGFloat\nThe default height in points of each row in the table view.\nvar estimatedRowHeight: CGFloat\nThe estimated height of rows in the table view.\nvar fillerRowHeight: CGFloat\nThe height for empty rows that fill the table view.\nvar insetsContentViewsToSafeArea: Bool\nA Boolean value that indicates whether the table view adjusts the content views of its cells, headers, and footers to fit within the safe area.\nRelated Documentation\nvar readableContentGuide: UILayoutGuide\nA layout guide representing an area with a readable width within the view."
  },
  {
    "title": "fillerRowHeight | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/3801921-fillerrowheight",
    "html": "Discussion\n\nTable views with a style of UITableView.Style.plain can display filler rows, empty rows that appear below the last row when there isn’t enough content to fill the table view. Set this property to adjust the height of each filler row:\n\nSet 0.0 to not display filler rows. This behavior is the default in iOS 15 and later.\n\nSet automaticDimension to display filler rows that use an automatic height, matching the height of the last row in the table view. This behavior is the default in versions of iOS earlier than iOS 15.\n\nSet any other positive value to display filler rows of that specified height.\n\nA table view with a style other than UITableView.Style.plain doesn’t show filler rows, so it ignores any value other than 0.0 for this property.\n\nSee Also\nConfiguring cell height and layout\nvar rowHeight: CGFloat\nThe default height in points of each row in the table view.\nvar estimatedRowHeight: CGFloat\nThe estimated height of rows in the table view.\nvar cellLayoutMarginsFollowReadableWidth: Bool\nA Boolean value that indicates whether the cell margins derive from the width of the readable content guide.\nvar insetsContentViewsToSafeArea: Bool\nA Boolean value that indicates whether the table view adjusts the content views of its cells, headers, and footers to fit within the safe area."
  },
  {
    "title": "tableHeaderView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614904-tableheaderview",
    "html": "Discussion\n\nUse this property to specify a header view for your entire table. The header view is the first item to appear in the table’s view’s scrolling content, and it’s separate from the header views you add to individual sections. The default value of this property is nil.\n\nWhen assigning a view to this property, set the height of that view to a nonzero value. The table view respects only the height of your view’s frame rectangle; it adjusts the width of your header view automatically to match the table view’s width.\n\nSee Also\nConfiguring the table’s appearance\nvar style: UITableView.Style\nThe style of the table view.\nenum UITableView.Style\nConstants for the table view styles.\nvar tableFooterView: UIView?\nThe view that displays below the table’s content.\nvar backgroundView: UIView?\nThe background view of the table view.\nRelated Documentation\nvar sectionHeaderHeight: CGFloat\nThe height of section headers in the table view."
  },
  {
    "title": "tableFooterView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614976-tablefooterview",
    "html": "Discussion\n\nUse this property to specify a footer view for your entire table. The footer view is the last item to appear in the table’s view’s scrolling content, and it’s separate from the footer views you add to individual sections. The default value of this property is nil.\n\nWhen assigning a view to this property, set the height of your view to a nonzero value. The table view respects only the height of your view’s frame rectangle; it adjusts the width of your footer view automatically to match the table view’s width.\n\nSee Also\nConfiguring the table’s appearance\nvar style: UITableView.Style\nThe style of the table view.\nenum UITableView.Style\nConstants for the table view styles.\nvar tableHeaderView: UIView?\nThe view that displays above the table’s content.\nvar backgroundView: UIView?\nThe background view of the table view.\nRelated Documentation\nvar sectionFooterHeight: CGFloat\nThe height of section footers in the table view."
  },
  {
    "title": "backgroundView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614986-backgroundview",
    "html": "Discussion\n\nAssign a background view to change the color behind your table’s sections and rows. The default value of this property is nil.\n\nWhen you assign a view to this property, the table view automatically resizes that view to match its own bounds. Your background view appears behind all cells, header views, and footer views and doesn’t scroll with the rest of the table’s content.\n\nSee Also\nConfiguring the table’s appearance\nvar style: UITableView.Style\nThe style of the table view.\nenum UITableView.Style\nConstants for the table view styles.\nvar tableHeaderView: UIView?\nThe view that displays above the table’s content.\nvar tableFooterView: UIView?\nThe view that displays below the table’s content."
  },
  {
    "title": "estimatedRowHeight | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614925-estimatedrowheight",
    "html": "Discussion\n\nProviding a nonnegative estimate of the height of rows can improve the performance of loading the table view. If the table contains variable height rows, it might be expensive to calculate all their heights when the table loads. Estimation allows you to defer some of the cost of geometry calculation from load time to scrolling time.\n\nThe default value is automaticDimension, which means that the table view selects an estimated height to use on your behalf. Setting the value to 0 disables estimated heights, which causes the table view to request the actual height for each cell. If your table uses self-sizing cells, the value of this property must not be 0.\n\nWhen using height estimates, the table view actively manages the contentOffset and contentSize properties inherited from its scroll view. Don’t attempt to read or modify those properties directly.\n\nSee Also\nConfiguring cell height and layout\nvar rowHeight: CGFloat\nThe default height in points of each row in the table view.\nvar fillerRowHeight: CGFloat\nThe height for empty rows that fill the table view.\nvar cellLayoutMarginsFollowReadableWidth: Bool\nA Boolean value that indicates whether the cell margins derive from the width of the readable content guide.\nvar insetsContentViewsToSafeArea: Bool\nA Boolean value that indicates whether the table view adjusts the content views of its cells, headers, and footers to fit within the safe area.\nRelated Documentation\nvar estimatedSectionHeaderHeight: CGFloat\nThe estimated height of section headers in the table view.\nvar estimatedSectionFooterHeight: CGFloat\nThe estimated height of section footers in the table view."
  },
  {
    "title": "rowHeight | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614852-rowheight",
    "html": "Discussion\n\nUse this property to specify a custom height for the cells in your table view. The default value of this property is automaticDimension, which causes the table view to choose an appropriate height based on your cell’s content.\n\nIf you create a self-sizing cell in Interface Builder, the table view changes the default row height to the value you set in Interface Builder. To get the expected self-sizing behavior for a cell that you create in Interface Builder, you must explicitly set rowHeight to automaticDimension in your code.\n\nThe table view ignores the value of this property if its delegate implements the tableView(_:heightForRowAt:) method. Prefer the use of this property over the delegate method when specifying row heights. When you implement the delegate method, the table view must call that method for every row of the table, including those that are offscreen. For tables with large numbers of rows (1000 or more), calling that method many times can negatively impact performance.\n\nSee Also\nConfiguring cell height and layout\nvar estimatedRowHeight: CGFloat\nThe estimated height of rows in the table view.\nvar fillerRowHeight: CGFloat\nThe height for empty rows that fill the table view.\nvar cellLayoutMarginsFollowReadableWidth: Bool\nA Boolean value that indicates whether the cell margins derive from the width of the readable content guide.\nvar insetsContentViewsToSafeArea: Bool\nA Boolean value that indicates whether the table view adjusts the content views of its cells, headers, and footers to fit within the safe area."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614894-delegate",
    "html": "Discussion\n\nThe delegate must adopt the UITableViewDelegate protocol. The delegate isn’t retained.\n\nSee Also\nManaging interactions with the table\nprotocol UITableViewDelegate\nMethods for managing selections, configuring section headers and footers, deleting and reordering cells, and performing other actions in a table view.\nRelated Documentation\nvar dataSource: UITableViewDataSource?\nThe object that acts as the data source of the table view."
  },
  {
    "title": "style | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614913-style",
    "html": "Discussion\n\nSee UITableView.Style for descriptions of the constants used to specify table-view style.\n\nSee Also\nConfiguring the table’s appearance\nenum UITableView.Style\nConstants for the table view styles.\nvar tableHeaderView: UIView?\nThe view that displays above the table’s content.\nvar tableFooterView: UIView?\nThe view that displays below the table’s content.\nvar backgroundView: UIView?\nThe background view of the table view."
  },
  {
    "title": "dequeueReusableHeaderFooterView(withIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614975-dequeuereusableheaderfooterview",
    "html": "Parameters\nidentifier\n\nA string identifying the header or footer view to be reused. This parameter must not be nil.\n\nReturn Value\n\nA UITableViewHeaderFooterView object with the associated identifier or nil if no such object exists in the reusable view queue.\n\nDiscussion\n\nFor performance reasons, a table view’s delegate should generally reuse UITableViewHeaderFooterView objects when it’s asked to provide them. A table view maintains a queue or list of UITableViewHeaderFooterView objects that the table view’s delegate has marked for reuse. It marks a view for reuse by assigning it a reuse identifier when it creates it (in the init(reuseIdentifier:) method of UITableViewHeaderFooterView).\n\nYou can use this method to access specific template header and footer views that you previously created. You can access a view’s reuse identifier through its reuseIdentifier property.\n\nSee Also\nRecycling section headers and footers\nfunc register(UINib?, forHeaderFooterViewReuseIdentifier: String)\nRegisters a nib object that contains a header or footer with the table view under a specified identifier.\nfunc register(AnyClass?, forHeaderFooterViewReuseIdentifier: String)\nRegisters a class to use in creating new table header or footer views."
  },
  {
    "title": "register(_:forHeaderFooterViewReuseIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614964-register",
    "html": "Parameters\naClass\n\nThe class of the header or footer view that you want to register. You must specify either UITableViewHeaderFooterView or a subclass of it.\n\nidentifier\n\nThe reuse identifier for the header or footer view. This parameter must not be nil and must not be an empty string.\n\nDiscussion\n\nBefore dequeueing any header or footer views, call this method or the register(_:forHeaderFooterViewReuseIdentifier:) method to tell the table view how to create new instances of your views. If a view of the specified type isn’t currently in a reuse queue, the table view uses the provided information to create a one automatically.\n\nIf you previously registered a class or nib file with the same reuse identifier, the class you specify in the aClass parameter replaces the old entry. You may specify nil for aClass if you want to unregister the class from the specified reuse identifier.\n\nSee Also\nRecycling section headers and footers\nfunc register(UINib?, forHeaderFooterViewReuseIdentifier: String)\nRegisters a nib object that contains a header or footer with the table view under a specified identifier.\nfunc dequeueReusableHeaderFooterView(withIdentifier: String) -> UITableViewHeaderFooterView?\nReturns a reusable header or footer view after locating it by its identifier."
  },
  {
    "title": "tableView(_:canFocusRowAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614973-tableview",
    "html": "Parameters\ntableView\n\nThe table view requesting this information.\n\nindexPath\n\nAn index path locating a row in tableView.\n\nReturn Value\n\ntrue if the row indicated by indexPath; otherwise, false.\n\nDiscussion\n\nThe functionality of this delegate method is equivalent to overriding the cell's canBecomeFocused method. If true is returned, then the cell at the specified index path is focusable, meaning none of its contents can be focused. Returningfalse means the cell itself is not focusable, however this does not prevent any of its contents from being focused. If this method is not implemented, then the return value is assumed to be true.\n\nSee Also\nManaging table view focus\nfunc tableView(UITableView, shouldUpdateFocusIn: UITableViewFocusUpdateContext) -> Bool\nAsks the delegate whether the focus update specified by the context is allowed to occur.\nfunc tableView(UITableView, didUpdateFocusIn: UITableViewFocusUpdateContext, with: UIFocusAnimationCoordinator)\nTells the delegate that a focus update specified by the context has just occurred.\nfunc indexPathForPreferredFocusedView(in: UITableView) -> IndexPath?\nAsks the delegate for the table view’s index path for the preferred focused view.\nfunc tableView(UITableView, selectionFollowsFocusForRowAt: IndexPath) -> Bool\nAsks the delegate whether to relate selection and focus behavior for the row at the corresponding index path."
  },
  {
    "title": "primaryViewController(forCollapsing:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontrollerdelegate/1623197-primaryviewcontroller",
    "html": "Parameters\nsplitViewController\n\nThe split view controller whose interface is collapsing.\n\nReturn Value\n\nThe new primary view controller to display onscreen.\n\nDiscussion\n\nThis delegate method only applies to classic split view interfaces. For more information, see Split view styles.\n\nWhen the split view controller transitions from a horizontally regular to a horizontally compact size class, it calls this method and asks you for the view controller to display when that transition is complete. The view controller you return becomes the new primary view controller of the split view interface.\n\nUse this method to specify which view controller you want to display in a compact environment. By default, a collapsing split view controller displays its current primary view controller, but you can return a different view controller if you want to. For example, you might return the secondary view controller if that view controller contains the content you want to display. You might also return a completely different view controller that is better suited for displaying content in a compact environment.\n\nIf you implement this method, you should also implement the primaryViewController(forExpanding:) method to handle the expansion of your interface from a horizontally compact to a horizontally regular environment. If you do not implement this method, or if your implementation returns nil, the split view controller chooses its primary view controller as the one to display.\n\nSee Also\nCollapsing and expanding classic split views\nfunc splitViewController(UISplitViewController, collapseSecondary: UIViewController, onto: UIViewController) -> Bool\nAsks the delegate to adjust the primary view controller and to incorporate the secondary view controller into the collapsed interface.\nfunc primaryViewController(forExpanding: UISplitViewController) -> UIViewController?\nAsks the delegate to provide the view controller to display in the primary position when the split view interface expands.\nfunc splitViewController(UISplitViewController, separateSecondaryFrom: UIViewController) -> UIViewController?\nAsks the delegate to provide the new secondary view controller for the split view interface."
  },
  {
    "title": "splitViewController(_:willHide:with:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontrollerdelegate/1623175-splitviewcontroller",
    "html": "Deprecated\n\nImplement the splitViewController(_:willChangeTo:) method instead.\n\nParameters\nsvc\n\nThe split view controller that owns the specified view controller.\n\naViewController\n\nThe view controller being hidden.\n\nbarButtonItem\n\nA button you can add to your toolbar.\n\npc\n\nThe popover controller that uses taps in barButtonItem to display the specified view controller.\n\nDiscussion\n\nWhen the split view controller rotates from a landscape to portrait orientation, it typically hides one of its view controllers. When that happens, it calls this method to coordinate the addition of a button to the toolbar (or navigation bar) of the remaining custom view controller. If you want the soon-to-be hidden view controller to be displayed in a popover, you must implement this method and use it to add the specified button to your interface.\n\nSee Also\nDeprecated methods\nfunc splitViewController(UISplitViewController, shouldHide: UIViewController, in: UIInterfaceOrientation) -> Bool\nAsks the delegate whether the first view controller should be hidden for the specified orientation.\nDeprecated\nfunc splitViewController(UISplitViewController, willShow: UIViewController, invalidating: UIBarButtonItem)\nTells the delegate that the specified view controller is about to be shown again.\nDeprecated\nfunc splitViewController(UISplitViewController, popoverController: UIPopoverController, willPresent: UIViewController)\nTells the delegate that the hidden view controller is about to be displayed in a popover.\nDeprecated"
  },
  {
    "title": "splitViewControllerInteractivePresentationGestureWillBegin(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontrollerdelegate/3650237-splitviewcontrollerinteractivepr",
    "html": "Parameters\nsvc\n\nThe split view controller responding to the interactive presentation gesture.\n\nDiscussion\n\nThis delegate method only applies to column-style split view interfaces. For more information, see Split view styles.\n\nThe split view controller calls this method when the interactive presentation gesture is about to begin. Use this method for performance optimizations related to drawing the column content or other work related to handling the interactive gesture.\n\nSee Also\nHandling the presentation gesture\nfunc splitViewControllerInteractivePresentationGestureDidEnd(UISplitViewController)\nTells the delegate when the interactive presentation gesture ends."
  },
  {
    "title": "code | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentbrowsererror/3727740-code",
    "html": "See Also\nGetting error properties\nvar errorCode: Int\nA code that indicates the kind of error.\nstatic var errorDomain: String\nA string that identifies the error domain.\nvar userInfo: [String : Any]\nThe user information dictionary associated with the error.\nvar errorUserInfo: [String : Any]\nThe user information dictionary associated with the error.\nvar localizedDescription: String\nA string containing the localized description of the error."
  },
  {
    "title": "errorCode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentbrowsererror/2920003-errorcode",
    "html": "Discussion\n\nNote that errors are domain specific.\n\nSee Also\nGetting error properties\nvar code: Code\nA code that indicates the kind of error.\nstatic var errorDomain: String\nA string that identifies the error domain.\nvar userInfo: [String : Any]\nThe user information dictionary associated with the error.\nvar errorUserInfo: [String : Any]\nThe user information dictionary associated with the error.\nvar localizedDescription: String\nA string containing the localized description of the error."
  },
  {
    "title": "UIDocumentBrowserError.Code.noLocationAvailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentbrowsererror/code/nolocationavailable",
    "html": "See Also\nError codes\ncase generic\nAn unspecified error."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentbrowsererror/3727739",
    "html": "See Also\nComparing errors\nstatic func != (UIDocumentBrowserError, UIDocumentBrowserError) -> Bool\nReturns a Boolean value indicating whether two values are unequal.\nvar hashValue: Int\nThe hash value of the error.\nfunc hash(into: inout Hasher)\nHashes the essential components of the error by feeding them into the given hash function."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentbrowsererror/2947129",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable.\n\nSee Also\nComparing errors\nstatic func == (UIDocumentBrowserError, UIDocumentBrowserError) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nvar hashValue: Int\nThe hash value of the error.\nfunc hash(into: inout Hasher)\nHashes the essential components of the error by feeding them into the given hash function."
  },
  {
    "title": "didPresentSearchController(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchcontrollerdelegate/1618646-didpresentsearchcontroller",
    "html": "Parameters\nsearchController\n\nThe UISearchController object to present.\n\nDiscussion\n\nThe system only calls this method when it automatically presents the search controller. The system doesn’t call this method if you explicitly present the search controller.\n\nSee Also\nPresenting and dismissing the search controller\nfunc didDismissSearchController(UISearchController)\nNotifies the delegate when the system completes automatic dismissal of the search controller.\nfunc presentSearchController(UISearchController)\nPresents the designated search controller.\nfunc willDismissSearchController(UISearchController)\nNotifies the delegate that the system is about to automatically dismiss the search controller.\nfunc willPresentSearchController(UISearchController)\nNotifies the delegate that the system is about to automatically display the search controller."
  },
  {
    "title": "dragItemsProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentproperties/3967514-dragitemsprovider",
    "html": "Discussion\n\nTo support drag and drop, assign a closure that returns an array of drag items that represent the document contents. When you set this property, a person can drag and drop the document from the navigation item’s title menu."
  },
  {
    "title": "searchController(_:didChangeFrom:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchcontrollerdelegate/3979286-searchcontroller",
    "html": "Parameters\nsearchController\n\nThe search controller associated with the search bar.\n\npreviousPlacement\n\nThe previous search bar placement.\n\nDiscussion\n\nThe system calls this method after a search bar placement change occurs. Implement this method if you need to make any custom changes to your search suggestions UI according to the previous search bar placement.\n\nThe system calls this method after searchController(_:willChangeTo:).\n\nSee Also\nResponding to search bar placement updates\nfunc searchController(UISearchController, willChangeTo: UINavigationItem.SearchBarPlacement)\nNotifies the delegate before the search bar placement changes."
  },
  {
    "title": "init(localizedSuggestion:localizedDescription:iconImage:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchsuggestionitem/3584831-init",
    "html": "Parameters\nsuggestion\n\nA label for the suggestion, usually the search term the suggestion represents.\n\ndescription\n\nA description of the suggestion. The system uses this description for accessibility.\n\niconImage\n\nAn image for display on the suggestion.\n\nSee Also\nCreating a search suggestion\ninit(localizedAttributedSuggestion: NSAttributedString, localizedDescription: String?, iconImage: UIImage?)\nCreates a search suggestion with the specified attributed label, accessibility description, and image.\ninit(localizedSuggestion: String, localizedDescription: String?)\nCreates a search suggestion with the specified label and accessibility description.\ninit(localizedAttributedSuggestion: NSAttributedString, localizedDescription: String?)\nCreates a search suggestion with the specified attributed label and accessibility description.\ninit(localizedSuggestion: String)\nCreates a search suggestion with the specified label.\ninit(localizedAttributedSuggestion: NSAttributedString)\nCreates a search suggestion with the specified attributed label."
  },
  {
    "title": "init(localizedSuggestion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchsuggestionitem/3584829-init",
    "html": "Parameters\nsuggestion\n\nThe item’s label, usually the search term.\n\nSee Also\nCreating a search suggestion\ninit(localizedSuggestion: String, localizedDescription: String?, iconImage: UIImage?)\nCreates a search suggestion with the specified text and image attributes.\ninit(localizedAttributedSuggestion: NSAttributedString, localizedDescription: String?, iconImage: UIImage?)\nCreates a search suggestion with the specified attributed label, accessibility description, and image.\ninit(localizedSuggestion: String, localizedDescription: String?)\nCreates a search suggestion with the specified label and accessibility description.\ninit(localizedAttributedSuggestion: NSAttributedString, localizedDescription: String?)\nCreates a search suggestion with the specified attributed label and accessibility description.\ninit(localizedAttributedSuggestion: NSAttributedString)\nCreates a search suggestion with the specified attributed label."
  },
  {
    "title": "localizedSuggestion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchsuggestionitem/3584833-localizedsuggestion",
    "html": "See Also\nDescribing a search suggestion\nvar localizedAttributedSuggestion: NSAttributedString?\nAn attributed label for the suggestion, usually the search term the suggestion represents.\nvar localizedDescription: String?\nA description of the suggestion.\nvar iconImage: UIImage?\nAn image for display on the suggestion.\nvar representedObject: Any?\nAn object for tracking supplementary information about the search suggestion."
  },
  {
    "title": "representedObject | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchsuggestionitem/3976737-representedobject",
    "html": "Discussion\n\nUse this property to associate the search suggestion with a corresponding object.\n\nSee Also\nDescribing a search suggestion\nvar localizedSuggestion: String?\nA label for the suggestion, usually the search term the suggestion represents.\nvar localizedAttributedSuggestion: NSAttributedString?\nAn attributed label for the suggestion, usually the search term the suggestion represents.\nvar localizedDescription: String?\nA description of the suggestion.\nvar iconImage: UIImage?\nAn image for display on the suggestion."
  },
  {
    "title": "strokeOutset | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundconfiguration/3600334-strokeoutset",
    "html": "Discussion\n\nThis value is relative to the background, including any backgroundInsets. The default value is 0.0.\n\nSee Also\nCustomizing the background\nvar customView: UIView?\nA custom view for the background.\nvar cornerRadius: CGFloat\nThe preferred corner radius, using a continuous corner curve, for the background and stroke.\nvar backgroundInsets: NSDirectionalEdgeInsets\nThe insets (or outsets, if negative) for the background and stroke, relative to the edges of the containing view.\nvar edgesAddingLayoutMarginsToBackgroundInsets: NSDirectionalRectEdge\nThe edges on which the configuration adds the containing view’s layout margins to the background insets.\nvar backgroundColor: UIColor?\nThe color of the background.\nvar backgroundColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the background color.\nfunc resolvedBackgroundColor(for: UIColor) -> UIColor\nGenerates the resolved background color for the specified tint color, using the background color and color transformer.\nvar visualEffect: UIVisualEffect?\nThe visual effect that the configuration applies to the background.\nvar strokeColor: UIColor?\nThe color of the stroke.\nvar strokeColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the stroke color.\nfunc resolvedStrokeColor(for: UIColor) -> UIColor\nGenerates the resolved stroke color for the specified tint color, using the stroke color and color transformer.\nvar strokeWidth: CGFloat\nThe width of the stroke.\nvar image: UIImage?\nThe image displayed in the view’s background.\nvar imageContentMode: UIView.ContentMode\nA property that determines the layout of a background image in a view when its bounds change."
  },
  {
    "title": "tableView(_:didSelectRowAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614877-tableview",
    "html": "Parameters\ntableView\n\nA table view informing the delegate about the new row selection.\n\nindexPath\n\nAn index path locating the new selected row in tableView.\n\nDiscussion\n\nThe delegate handles selections in this method. For instance, you can use this method to assign a checkmark (UITableViewCell.AccessoryType.checkmark) to one row in a section in order to create a radio-list style. The system doesn’t call this method if the rows in the table aren’t selectable. See Handling row selection in a table view for more information on controlling table row selection behavior.\n\nSee Also\nResponding to row selections\nHandling row selection in a table view\nDetect when a user taps a table view cell so your app can take the next indicated action.\nSelecting multiple items with a two-finger pan gesture\nAccelerate user selection of multiple items using the multiselect gesture on table and collection views.\nfunc tableView(UITableView, willSelectRowAt: IndexPath) -> IndexPath?\nTells the delegate a row is about to be selected.\nfunc tableView(UITableView, willDeselectRowAt: IndexPath) -> IndexPath?\nTells the delegate that a specified row is about to be deselected.\nfunc tableView(UITableView, didDeselectRowAt: IndexPath)\nTells the delegate that the specified row is now deselected.\nfunc tableView(UITableView, shouldBeginMultipleSelectionInteractionAt: IndexPath) -> Bool\nAsks the delegate whether the user can use a two-finger pan gesture to select multiple items in a table view.\nfunc tableView(UITableView, didBeginMultipleSelectionInteractionAt: IndexPath)\nTells the delegate when the user starts using a two-finger pan gesture to select multiple rows in a table view.\nfunc tableViewDidEndMultipleSelectionInteraction(UITableView)\nTells the delegate when the user stops using a two-finger pan gesture to select multiple rows in a table view."
  },
  {
    "title": "iconImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchsuggestionitem/3584828-iconimage",
    "html": "See Also\nDescribing a search suggestion\nvar localizedSuggestion: String?\nA label for the suggestion, usually the search term the suggestion represents.\nvar localizedAttributedSuggestion: NSAttributedString?\nAn attributed label for the suggestion, usually the search term the suggestion represents.\nvar localizedDescription: String?\nA description of the suggestion.\nvar representedObject: Any?\nAn object for tracking supplementary information about the search suggestion."
  },
  {
    "title": "tableView(_:estimatedHeightForHeaderInSection:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614854-tableview",
    "html": "Parameters\ntableView\n\nThe table view requesting this information.\n\nsection\n\nAn index number identifying a section of tableView .\n\nReturn Value\n\nA nonnegative floating-point value that specifies the height (in points) of the header for section.\n\nDiscussion\n\nProviding an estimate the height of section headers can improve the user experience when loading the table view. If the table contains variable height section headers, it might be expensive to calculate all their heights and so lead to a longer load time. Using estimation allows you to defer some of the cost of geometry calculation from load time to scrolling time.\n\nSee Also\nEstimating heights for the table's content\nfunc tableView(UITableView, estimatedHeightForRowAt: IndexPath) -> CGFloat\nAsks the delegate for the estimated height of a row in a specified location.\nfunc tableView(UITableView, estimatedHeightForFooterInSection: Int) -> CGFloat\nAsks the delegate for the estimated height of the footer of a particular section.\nRelated Documentation\nfunc tableView(UITableView, heightForHeaderInSection: Int) -> CGFloat\nAsks the delegate for the height to use for the header of a particular section."
  },
  {
    "title": "localizedDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchsuggestion/3584825-localizeddescription",
    "html": "Discussion\n\nThe system uses this description for accessibility.\n\nSee Also\nDescribing a search suggestion\nvar localizedSuggestion: String?\nA label for the suggestion, usually the search term the suggestion represents.\n\nRequired\n\nvar localizedAttributedSuggestion: NSAttributedString?\nAn attributed label for the suggestion, usually the search term the suggestion represents.\n\nRequired\n\nvar iconImage: UIImage?\nAn image for display on the suggestion.\nvar representedObject: Any?\nAn object for tracking supplementary information about the search suggestion.\n\nRequired"
  },
  {
    "title": "UIImagePickerController.QualityType.typeHigh | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimagepickercontroller/qualitytype/typehigh",
    "html": "Discussion\n\nRecorded files are suitable for on-device playback and for wired transfer to the Desktop using Image Capture; they are likely to be too large for transfer using Wi-Fi.\n\nIf displaying a recorded movie in the image picker, specifies that you do not want to reduce the video quality of the movie."
  },
  {
    "title": "large() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisheetpresentationcontroller/detent/3801916-large",
    "html": "See Also\nCreating a system detent\nclass func medium() -> Self\nCreates a system detent for a sheet that’s approximately half the height of the screen, and is inactive in compact height."
  },
  {
    "title": "tableView(_:targetIndexPathForMoveFromRowAt:toProposedIndexPath:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614953-tableview",
    "html": "Parameters\ntableView\n\nThe table view that is requesting this information.\n\nsourceIndexPath\n\nAn index path identifying the original location of a row (in its section) that is being dragged.\n\nproposedDestinationIndexPath\n\nAn index path identifying the currently proposed destination of the row being dragged.\n\nReturn Value\n\nAn index path locating the desired row destination for the move operation. Return proposedDestinationIndexPath if that location is suitable.\n\nDiscussion\n\nThis method allows customization of the target row for a particular row as it is being moved up and down a table view. As the dragged row hovers over another row, the destination row slides downward to visually make room for the relocation; this is the location identified by proposedDestinationIndexPath."
  },
  {
    "title": "UISheetPresentationController.Detent.Identifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisheetpresentationcontroller/detent/identifier",
    "html": "Topics\nIdentifying detent size\nstatic let large: UISheetPresentationController.Detent.Identifier\nThe identifier for the system's large detent.\nstatic let medium: UISheetPresentationController.Detent.Identifier\nThe identifier for the system's medium detent.\nCreating a detent identifier\ninit(String)\nCreates a detent identifier.\ninit(rawValue: String)\nCreates a detent identifier with the specified raw value.\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable\nSee Also\nIdentifying a detent\nvar identifier: UISheetPresentationController.Detent.Identifier\nThe identifier of the detent."
  },
  {
    "title": "UIImagePickerController.QualityType.type640x480 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimagepickercontroller/qualitytype/type640x480",
    "html": "Discussion\n\nIf displaying a recorded movie in the image picker, specifies that you want to transcode higher-quality movies to VGA video quality."
  },
  {
    "title": "large | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisheetpresentationcontroller/detent/identifier/3801919-large",
    "html": "See Also\nIdentifying detent size\nstatic let medium: UISheetPresentationController.Detent.Identifier\nThe identifier for the system's medium detent."
  },
  {
    "title": "loadingProgress | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentbrowsertransitioncontroller/2874195-loadingprogress",
    "html": "Discussion\n\nThis property defaults to nil. If this property is set, the document browser modifies the document's thumbnail to show the loading progress.\n\nUse this animation for documents that can take a noticeable amount of time to load.\n\nTo set up this animation:\n\nGet a transition controller for the document.\n\nSet a Progress object to track the document as it loads. Be sure to keep a strong reference to the transition controller until the animation is complete.\n\nBegin loading the document.\n\nWhen the load action is complete, present the document.\n\nListing 1 provides the loading animation when opening a document. Note that because UIDocument uses file coordination, the system may delay opening the file until it is available and ready to use. For example, the open(completionHandler:) method can trigger the download of a remote file, and the system won't call the completion handler until the download is complete.\n\nListing 1 Setting the loading animation\nlet doc = // Create a UIDocument subclass for the selected URL.\nlet editor = // Create a view controller to edit the document.\n// Get the transition controller\nlet transitionController = controller.transitionController(forDocumentURL: url)\n// Set the transition controller's progress\ntransitionController.loadingProgress = doc.loadProgress\n// Keep a strong reference to the transition controller\ndoc.transitionController = transitionController\n// Open the document\ndoc.open { (success) in\n    guard success else {\n        // Handle the error here...\n    }\n        \n    // When the load is done, present the document\n    controller.present(editor, animated: true, completion: nil)\n}\n\nSee Also\nAnimating transitions\nvar targetView: UIView?\nThe target view for transition animations when presenting or dismissing the transition controller's document."
  },
  {
    "title": "medium | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisheetpresentationcontroller/detent/identifier/3801920-medium",
    "html": "See Also\nIdentifying detent size\nstatic let large: UISheetPresentationController.Detent.Identifier\nThe identifier for the system's large detent."
  },
  {
    "title": "init(frame:style:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614886-init",
    "html": "Parameters\nframe\n\nA rectangle specifying the initial location and size of the table view in its superview’s coordinates. The frame of the table view changes as table cells are added and deleted.\n\nstyle\n\nA constant that specifies the style of the table view. For a list of valid styles, see UITableView.Style.\n\nReturn Value\n\nReturns an initialized UITableView object.\n\nDiscussion\n\nYou must specify the style of a table view when you create it, and you can’t change that style later. If you initialize the table view with the UIView method init(frame:), the UITableView.Style.plain style is used as a default.\n\nSee Also\nCreating a table view\ninit?(coder: NSCoder)\nCreates a table view object from data in an unarchiver."
  },
  {
    "title": "backgroundImage(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uinavigationbar/1624962-backgroundimage",
    "html": "Parameters\nbarMetrics\n\nA bar metrics constant.\n\nReturn Value\n\nThe background image for barMetrics.\n\nDiscussion\n\nEquivalent to using backgroundImage(for:barMetrics:) with a position of UIBarPosition.any.\n\nSee Also\nChanging the background\nvar barTintColor: UIColor?\nThe tint color to apply to the navigation bar background.\nfunc setBackgroundImage(UIImage?, for: UIBarMetrics)\nSets the background image for given bar metrics.\nfunc backgroundImage(for: UIBarPosition, barMetrics: UIBarMetrics) -> UIImage?\nReturns the background image to use for a given bar position and set of metrics.\nfunc setBackgroundImage(UIImage?, for: UIBarPosition, barMetrics: UIBarMetrics)\nSets the background image to use for a given bar position and set of metrics."
  },
  {
    "title": "UIPageViewController.TransitionStyle.scroll | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipageviewcontroller/transitionstyle/scroll",
    "html": "Discussion\n\nWhen the page scrolling style is specified, the page view controller displays a page-scrolling animation when transitioning between view controllers. If a data source is specified, the animation follows the user’s finger during a navigation gesture."
  },
  {
    "title": "indexPathForPreferredFocusedView(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614929-indexpathforpreferredfocusedview",
    "html": "Parameters\ntableView\n\nA table view requesting the index path for preferred focus view.\n\nReturn Value\n\nAn index path for the preferred focus row, or the default preferred focus view.\n\nDiscussion\n\nThis functionality of this delegate method is equivalent to overriding UITableView class’s preferredFocusedView method in the UIFocusEnvironment protocol. If the UITableView class’s remembersLastFocusedIndexPath method is set to true, this method defines the index path that gets focused when the table view is focused for the first time.\n\nThe effects of this method may be ignored during or immediately after a view controller transition, such as a presentation dismissal or navigation stack pop. In such cases, the view controller attempts to restore focus to the item that was focused prior to the transition (for example, prior to the view controller being presented or pushed), which can take precedence over the effects of this method. To learn how to control or disable this behavior in the view controller, see restoresFocusAfterTransition.\n\nSee Also\nManaging table view focus\nfunc tableView(UITableView, canFocusRowAt: IndexPath) -> Bool\nAsks the delegate whether the cell at the specified index path is itself focusable.\nfunc tableView(UITableView, shouldUpdateFocusIn: UITableViewFocusUpdateContext) -> Bool\nAsks the delegate whether the focus update specified by the context is allowed to occur.\nfunc tableView(UITableView, didUpdateFocusIn: UITableViewFocusUpdateContext, with: UIFocusAnimationCoordinator)\nTells the delegate that a focus update specified by the context has just occurred.\nfunc tableView(UITableView, selectionFollowsFocusForRowAt: IndexPath) -> Bool\nAsks the delegate whether to relate selection and focus behavior for the row at the corresponding index path."
  },
  {
    "title": "tableView(_:performPrimaryActionForRowAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/3975911-tableview",
    "html": "Parameters\ntableView\n\nThe table view object on which to perform the primary action.\n\nindexPath\n\nThe index path of the row.\n\nDiscussion\n\nPrimary actions allow you to distinguish between a distinct user action and a change in selection (like a focus change or other indirect selection change). A primary action occurs when a person selects a single row without extending an existing selection.\n\nUIKit calls this method after tableView(_:willSelectRowAt:) and tableView(_:didSelectRowAt:), regardless of whether the row selection state changes. Use tableView(_:didSelectRowAt:) to update the state of the current view controller (like its buttons, title, and so on), and use tableView(_:performPrimaryActionForRowAt:) for actions like navigation or showing another split view column.\n\nIf tableView(_:willSelectRowAt:) returns an index path to allow selection for the row, only that row has selection when the system calls this method. If tableView(_:willSelectRowAt:) returns nil, the system preserves the existing row selection in the table view. You can use this behavior to perform primary actions on nonselectable, button-style rows without changing the selection.\n\nSee Also\nPerforming primary actions\nfunc tableView(UITableView, canPerformPrimaryActionForRowAt: IndexPath) -> Bool\nAsks the delegate whether to perform a primary action for the row at the specified index path."
  },
  {
    "title": "tableView(_:editingStyleForRowAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614869-tableview",
    "html": "Parameters\ntableView\n\nThe table view requesting this information.\n\nindexPath\n\nAn index path locating a row in tableView.\n\nReturn Value\n\nThe editing style of the cell for the row identified by indexPath.\n\nDiscussion\n\nThis method allows the delegate to customize the editing style of the cell located atindexPath. If the delegate does not implement this method and the UITableViewCell object is editable (that is, it has its isEditing property set to true), the cell has the UITableViewCell.EditingStyle.delete style set for it.\n\nSee Also\nEditing table rows\nfunc tableView(UITableView, willBeginEditingRowAt: IndexPath)\nTells the delegate that the table view is about to go into editing mode.\nfunc tableView(UITableView, didEndEditingRowAt: IndexPath?)\nTells the delegate that the table view has left editing mode.\nfunc tableView(UITableView, titleForDeleteConfirmationButtonForRowAt: IndexPath) -> String?\nChanges the default title of the delete-confirmation button.\nfunc tableView(UITableView, shouldIndentWhileEditingRowAt: IndexPath) -> Bool\nAsks the delegate whether the background of the specified row should be indented while the table view is in editing mode."
  },
  {
    "title": "UIVibrancyEffectStyle.secondaryLabel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uivibrancyeffectstyle/secondarylabel",
    "html": "See Also\nLabel styles\ncase label\nA style for labels containing primary content.\ncase tertiaryLabel\nA style for labels containing tertiary content.\ncase quaternaryLabel\nA style for labels containing quaternary content."
  },
  {
    "title": "UITableView.Style | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/style",
    "html": "Overview\n\nYou set the table style when you initialize the table view (see init(frame:style:)). You can’t modify the style thereafter.\n\nTopics\nStyles\ncase plain\nA plain table view.\ncase grouped\nA table view where sections have distinct groups of rows.\ncase insetGrouped\nA table view where the grouped sections are inset with rounded corners.\nRelationships\nConforms To\nSendable\nSee Also\nConfiguring the table’s appearance\nvar style: UITableView.Style\nThe style of the table view.\nvar tableHeaderView: UIView?\nThe view that displays above the table’s content.\nvar tableFooterView: UIView?\nThe view that displays below the table’s content.\nvar backgroundView: UIView?\nThe background view of the table view."
  },
  {
    "title": "UITableView.Style.grouped | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/style/grouped",
    "html": "Discussion\n\nSection headers and footers don’t float when the table view scrolls.\n\nSee Also\nStyles\ncase plain\nA plain table view.\ncase insetGrouped\nA table view where the grouped sections are inset with rounded corners."
  },
  {
    "title": "splitViewController(_:topColumnForCollapsingToProposedTopColumn:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontrollerdelegate/3580925-splitviewcontroller",
    "html": "Parameters\nsvc\n\nThe split view controller whose interface is collapsing.\n\nproposedTopColumn\n\nThe proposed column to display in the collapsed interface.\n\nReturn Value\n\nThe column corresponding to the view controller to display in the collapsed interface. This value may be the same as proposedTopColumn, or you may return a different value.\n\nDiscussion\n\nThis delegate method only applies to column-style split view interfaces. For more information, see Split view styles.\n\nWhen the split view controller transitions from a horizontally regular to a horizontally compact size class, it calls this method and asks you for the column to display when that transition is complete. Use this method to customize the view controller you’re collapsing to. For example, you might use this opportunity to configure the interface in the view controller associated with the UISplitViewController.Column.compact column before returning that column.\n\nSee Also\nCollapsing the interface\nfunc splitViewController(UISplitViewController, willHide: UISplitViewController.Column)\nTells the delegate that the specified column is about to be hidden.\nfunc splitViewControllerDidCollapse(UISplitViewController)\nTells the delegate that the split view controller interface has collapsed."
  },
  {
    "title": "splitViewController(_:willChangeTo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontrollerdelegate/1623176-splitviewcontroller",
    "html": "Parameters\nsvc\n\nThe split view controller whose display mode is changing.\n\ndisplayMode\n\nThe new display mode that is about to be applied to the split view controller.\n\nDiscussion\n\nThe split view controller calls this method when its display mode is about to change. Because changing the display mode usually means hiding or showing one of the child view controllers, you can implement this method and use it to add or remove the controls for showing the primary view controller.\n\nSee Also\nResponding to display mode changes\nfunc targetDisplayModeForAction(in: UISplitViewController) -> UISplitViewController.DisplayMode\nAsks the delegate to provide the display mode to apply when a split view controller action occurs.\nRelated Documentation\nView Controller Catalog for iOS"
  },
  {
    "title": "splitViewController(_:willHide:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontrollerdelegate/3580926-splitviewcontroller",
    "html": "Parameters\nsvc\n\nThe split view controller whose column is being hidden.\n\ncolumn\n\nThe column to be hidden. See UISplitViewController.Column for possible values.\n\nDiscussion\n\nThis delegate method only applies to column-style split view interfaces. For more information, see Split view styles.\n\nThe split view controller calls this method when one of its columns is about to be hidden, for example with hide(_:). Use this method to perform any customization associated with hiding the column. You can use the split view controller’s transitionCoordinator to coordinate any of your animations alongside the transition animation.\n\nSee Also\nCollapsing the interface\nfunc splitViewController(UISplitViewController, topColumnForCollapsingToProposedTopColumn: UISplitViewController.Column) -> UISplitViewController.Column\nAsks the delegate to provide the column to display after the split view interface collapses.\nfunc splitViewControllerDidCollapse(UISplitViewController)\nTells the delegate that the split view controller interface has collapsed."
  },
  {
    "title": "splitViewControllerInteractivePresentationGestureDidEnd(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontrollerdelegate/3650236-splitviewcontrollerinteractivepr",
    "html": "Parameters\nsvc\n\nThe split view controller responding to the interactive presentation gesture.\n\nDiscussion\n\nThis delegate method only applies to column-style split view interfaces. For more information, see Split view styles.\n\nThe split view controller calls this method when the interactive presentation gesture ends. Use this method for performance optimizations related to drawing the column content or other work related to handling the interactive gesture.\n\nSee Also\nHandling the presentation gesture\nfunc splitViewControllerInteractivePresentationGestureWillBegin(UISplitViewController)\nTells the delegate that the interactive presentation gesture is about to begin."
  },
  {
    "title": "splitViewControllerDidCollapse(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontrollerdelegate/3580928-splitviewcontrollerdidcollapse",
    "html": "Parameters\nsvc\n\nThe split view controller whose interface has collapsed.\n\nDiscussion\n\nThis delegate method only applies to column-style split view interfaces. For more information, see Split view styles.\n\nThe split view controller calls this method after its interface has collapsed, meaning that isCollapsed is true. Use this method to perform any customization associated with the collapsed interface.\n\nSee Also\nCollapsing the interface\nfunc splitViewController(UISplitViewController, topColumnForCollapsingToProposedTopColumn: UISplitViewController.Column) -> UISplitViewController.Column\nAsks the delegate to provide the column to display after the split view interface collapses.\nfunc splitViewController(UISplitViewController, willHide: UISplitViewController.Column)\nTells the delegate that the specified column is about to be hidden."
  },
  {
    "title": "splitViewControllerDidExpand(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontrollerdelegate/3580929-splitviewcontrollerdidexpand",
    "html": "Parameters\nsvc\n\nThe split view controller whose interface has expanded.\n\nDiscussion\n\nThis delegate method only applies to column-style split view interfaces. For more information, see Split view styles.\n\nThe split view controller calls this method after its interface has expanded, meaning that isCollapsed is false. Use this method to perform any customization associated with the expanded interface.\n\nSee Also\nExpanding the interface\nfunc splitViewController(UISplitViewController, displayModeForExpandingToProposedDisplayMode: UISplitViewController.DisplayMode) -> UISplitViewController.DisplayMode\nAsks the delegate to provide the display mode to use after the split view interface expands.\nfunc splitViewController(UISplitViewController, willShow: UISplitViewController.Column)\nTells the delegate that the specified column is about to be shown."
  },
  {
    "title": "splitViewControllerPreferredInterfaceOrientationForPresentation(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontrollerdelegate/1623169-splitviewcontrollerpreferredinte",
    "html": "Parameters\nsplitViewController\n\nThe split view controller that is about to be presented onscreen.\n\nReturn Value\n\nThe orientation to use when first displaying the split view controller.\n\nDiscussion\n\nUIKit calls this method to determine which orientation your app prefers when presenting the specified split view controller. You can use this method to specify the orientation that you think is best when first displaying the split view controller. The orientation you specify can be different from the current device orientation. After presentation, the system may rotate the split view controller as appropriate to one of its other supported interface orientations.\n\nIf you do not implement this method, the system presents the view controller using the current orientation of the status bar.\n\nSee Also\nSpecifying the interface orientations\nfunc splitViewControllerSupportedInterfaceOrientations(UISplitViewController) -> UIInterfaceOrientationMask\nAsks the delegate to specify the interface orientations that the split view controller supports.\nRelated Documentation\nvar preferredInterfaceOrientationForPresentation: UIInterfaceOrientation\nThe interface orientation to use when presenting the view controller."
  },
  {
    "title": "splitViewController(_:popoverController:willPresent:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontrollerdelegate/1623186-splitviewcontroller",
    "html": "Deprecated\n\nOrientation-related delegate methods are no longer supported.\n\nParameters\nsvc\n\nThe split view controller that owns the hidden view controller.\n\npc\n\nThe popover controller that is about to display the view controller.\n\naViewController\n\nThe view controller to be displayed in the popover.\n\nDiscussion\n\nThe toolbar button you add to your user interface facilitates the display of the hidden view controller in response to user taps. When the user taps that button, the split view controller calls this method. You can use this method to perform any additional steps prior to displaying the currently hidden view controller.\n\nSee Also\nDeprecated methods\nfunc splitViewController(UISplitViewController, shouldHide: UIViewController, in: UIInterfaceOrientation) -> Bool\nAsks the delegate whether the first view controller should be hidden for the specified orientation.\nDeprecated\nfunc splitViewController(UISplitViewController, willHide: UIViewController, with: UIBarButtonItem, for: UIPopoverController)\nTells the delegate that the specified view controller is about to be hidden.\nDeprecated\nfunc splitViewController(UISplitViewController, willShow: UIViewController, invalidating: UIBarButtonItem)\nTells the delegate that the specified view controller is about to be shown again.\nDeprecated"
  },
  {
    "title": "landscapePhonePrompt | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibarmetrics/1624862-landscapephoneprompt",
    "html": "Deprecated\n\nUse UIBarMetrics.compactPrompt instead."
  },
  {
    "title": "largeTitleTextAttributes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uinavigationbar/2919946-largetitletextattributes",
    "html": "Discussion\n\nYou can specify the font, text color, text shadow color, and text shadow offset for the title in the text attributes dictionary, using the text attribute keys described in NSAttributedString.Key.\n\nSee Also\nConfiguring the title\nvar titleTextAttributes: [NSAttributedString.Key : Any]?\nDisplay attributes for the bar’s title text.\nfunc titleVerticalPositionAdjustment(for: UIBarMetrics) -> CGFloat\nReturns the title’s vertical position adjustment for given bar metrics.\nfunc setTitleVerticalPositionAdjustment(CGFloat, for: UIBarMetrics)\nSets the title’s vertical position adjustment for given bar metrics."
  },
  {
    "title": "UIBarStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibarstyle",
    "html": "Topics\nBar styles\ncase `default`\nThe default style normally associated with the given view.\ncase black\nA black background with light content.\nstatic var blackOpaque: UIBarStyle\nA deprecated opaque style.\nDeprecated\ncase blackTranslucent\nA deprecated translucent style.\nDeprecated\nRelationships\nConforms To\nSendable\nSee Also\nConfiguring the search bar\nvar isEnabled: Bool\nA Boolean value indicating whether the search bar is in the enabled state.\nvar barTintColor: UIColor?\nThe tint color to apply to the search bar background.\nvar searchBarStyle: UISearchBar.Style\nA search bar style that specifies the search bar’s appearance.\nenum UISearchBar.Style\nSpecifies whether the search bar has a background.\nvar tintColor: UIColor!\nThe tint color to apply to key elements in the search bar.\nvar isTranslucent: Bool\nA Boolean value that indicates whether the search bar is translucent (true) or not (false).\nvar barStyle: UIBarStyle\nA bar style that specifies the search bar’s appearance."
  },
  {
    "title": "titleVerticalPositionAdjustment(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uinavigationbar/1624966-titleverticalpositionadjustment",
    "html": "Parameters\nbarMetrics\n\nA bar metrics constant.\n\nReturn Value\n\nThe title’s vertical position adjustment for barMetrics.\n\nSee Also\nConfiguring the title\nvar titleTextAttributes: [NSAttributedString.Key : Any]?\nDisplay attributes for the bar’s title text.\nvar largeTitleTextAttributes: [NSAttributedString.Key : Any]?\nDisplay attributes for the bar's large title text.\nfunc setTitleVerticalPositionAdjustment(CGFloat, for: UIBarMetrics)\nSets the title’s vertical position adjustment for given bar metrics."
  },
  {
    "title": "UIBarPosition.top | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibarposition/top",
    "html": "Discussion\n\nThe system uses this as a hint to draw directional decoration accordingly. For example, any shadow would be drawn below the bar.\n\nInstances of UIToolbar do not appear with this position on iPhone, but they can on iPad."
  },
  {
    "title": "UIBarStyle.default | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibarstyle/default",
    "html": "Discussion\n\nFor example, navigation bars typically use a white background with dark content.\n\nSee Also\nBar styles\ncase black\nA black background with light content.\nstatic var blackOpaque: UIBarStyle\nA deprecated opaque style.\nDeprecated\ncase blackTranslucent\nA deprecated translucent style.\nDeprecated"
  },
  {
    "title": "UIBarPosition.bottom | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibarposition/bottom",
    "html": "Discussion\n\nThe system uses this as a hint to draw directional decoration accordingly. For example, any shadow would be drawn above the bar."
  },
  {
    "title": "tableView(_:sectionForSectionIndexTitle:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdatasource/1614933-tableview",
    "html": "Parameters\ntableView\n\nThe table-view object requesting this information.\n\ntitle\n\nThe title as displayed in the section index of tableView.\n\nindex\n\nAn index number identifying a section title in the array returned by sectionIndexTitles(for:).\n\nReturn Value\n\nAn index number identifying a section.\n\nDiscussion\n\nThis method is passed the index number and title of an entry in the section index list and should return the index of the referenced section. To be clear, there are two index numbers in play here: an index to a section index title in the array returned by sectionIndexTitles(for:), and an index to a section of the table view; the former is passed in, and the latter is returned. You implement this method only for table views with a section index list — which can only be table views created in the plain style (UITableView.Style.plain). Note that the array of section titles returned by sectionIndexTitles(for:) can have fewer items than the actual number of sections in the table view.\n\nSee Also\nConfiguring an index\nfunc sectionIndexTitles(for: UITableView) -> [String]?\nAsks the data source to return the titles for the sections of a table view.\nRelated Documentation\nfunc numberOfSections(in: UITableView) -> Int\nAsks the data source to return the number of sections in the table view."
  },
  {
    "title": "UITableViewDiffableDataSourceReference | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdiffabledatasourcereference",
    "html": "Overview\n\nImportant\n\nIf you’re working in a Swift codebase, always use UITableViewDiffableDataSource instead.\n\nTopics\nCreating a diffable data source\ninit(tableView: UITableView, cellProvider: UITableViewDiffableDataSourceReferenceCellProvider)\nCreates a diffable data source with the specified cell provider, and connects it to the specified table view.\ntypealias UITableViewDiffableDataSourceReferenceCellProvider\nA closure that configures and returns a cell for a table view from its diffable data source.\nIdentifying items\nfunc itemIdentifier(for: IndexPath) -> Any?\nReturns an identifier for the item at the specified index path in the table view.\nfunc indexPath(forItemIdentifier: Any) -> IndexPath?\nReturns an index path for the item with the specified identifier in the table view.\nIdentifying sections\nfunc sectionIdentifier(for: Int) -> Any?\nReturns an identifier for the section at the index you specify in the table view.\nfunc index(forSectionIdentifier: Any) -> Int\nReturns an index for the section with the identifier you specify in the table view.\nUpdating data\nfunc snapshot() -> NSDiffableDataSourceSnapshotReference\nReturns a representation of the current state of the data in the table view.\nfunc applySnapshot(NSDiffableDataSourceSnapshotReference, animatingDifferences: Bool)\nUpdates the UI to reflect the state of the data in the snapshot, optionally animating the UI changes.\nfunc applySnapshot(NSDiffableDataSourceSnapshotReference, animatingDifferences: Bool, completion: (() -> Void)?)\nUpdates the UI to reflect the state of the data in the snapshot, optionally animating the UI changes and executing a completion handler.\nfunc applySnapshot(usingReloadData: NSDiffableDataSourceSnapshotReference)\nResets the UI to reflect the state of the data in the snapshot without computing a diff or animating the changes.\nfunc applySnapshot(usingReloadData: NSDiffableDataSourceSnapshotReference, completion: (() -> Void)?)\nResets the UI to reflect the state of the data in the snapshot without computing a diff or animating the changes, optionally executing a completion handler.\nvar defaultRowAnimation: UITableView.RowAnimation\nThe default type of animation to use when inserting or deleting rows.\nRelationships\nInherits From\nNSObject\nConforms To\nUITableViewDataSource"
  },
  {
    "title": "userInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentbrowsererror/3727744-userinfo",
    "html": "See Also\nGetting error properties\nvar errorCode: Int\nA code that indicates the kind of error.\nvar code: Code\nA code that indicates the kind of error.\nstatic var errorDomain: String\nA string that identifies the error domain.\nvar errorUserInfo: [String : Any]\nThe user information dictionary associated with the error.\nvar localizedDescription: String\nA string containing the localized description of the error."
  },
  {
    "title": "didDismissSearchController(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchcontrollerdelegate/1618651-diddismisssearchcontroller",
    "html": "Parameters\nsearchController\n\nThe UISearchController object to dismiss.\n\nDiscussion\n\nThe system only calls this method when it automatically dismisses the search controller. The system doesn’t call this method if you explicitly dismiss the search controller.\n\nSee Also\nPresenting and dismissing the search controller\nfunc didPresentSearchController(UISearchController)\nNotifies the delegate when the system completes automatic presentation of the search controller.\nfunc presentSearchController(UISearchController)\nPresents the designated search controller.\nfunc willDismissSearchController(UISearchController)\nNotifies the delegate that the system is about to automatically dismiss the search controller.\nfunc willPresentSearchController(UISearchController)\nNotifies the delegate that the system is about to automatically display the search controller."
  },
  {
    "title": "presentSearchController(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchcontrollerdelegate/1618648-presentsearchcontroller",
    "html": "Parameters\nsearchController\n\nThe UISearchController object to present.\n\nDiscussion\n\nThe system calls this method when the user begins editing in the search controller, or you set the isActive property to true. The system performs a default presentation if you don’t implement this method or you present the controller yourself.\n\nSee Also\nPresenting and dismissing the search controller\nfunc didDismissSearchController(UISearchController)\nNotifies the delegate when the system completes automatic dismissal of the search controller.\nfunc didPresentSearchController(UISearchController)\nNotifies the delegate when the system completes automatic presentation of the search controller.\nfunc willDismissSearchController(UISearchController)\nNotifies the delegate that the system is about to automatically dismiss the search controller.\nfunc willPresentSearchController(UISearchController)\nNotifies the delegate that the system is about to automatically display the search controller."
  },
  {
    "title": "UISplitViewController.PrimaryEdge.trailing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontroller/primaryedge/trailing",
    "html": "Discussion\n\nIn an interface that is oriented left-to-right, this value corresponds to the right side of the split view interface. For right-to-left interfaces, the trailing edge is on the left side."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentbrowsererror/3727741-hash",
    "html": "See Also\nComparing errors\nstatic func == (UIDocumentBrowserError, UIDocumentBrowserError) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nstatic func != (UIDocumentBrowserError, UIDocumentBrowserError) -> Bool\nReturns a Boolean value indicating whether two values are unequal.\nvar hashValue: Int\nThe hash value of the error."
  },
  {
    "title": "willDismissSearchController(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchcontrollerdelegate/1618655-willdismisssearchcontroller",
    "html": "Parameters\nsearchController\n\nThe UISearchController object to dismiss.\n\nDiscussion\n\nThe system only calls this method when it’s about to automatically dismiss the search controller. The system doesn’t call this method if you explicitly dismiss the search controller.\n\nSee Also\nPresenting and dismissing the search controller\nfunc didDismissSearchController(UISearchController)\nNotifies the delegate when the system completes automatic dismissal of the search controller.\nfunc didPresentSearchController(UISearchController)\nNotifies the delegate when the system completes automatic presentation of the search controller.\nfunc presentSearchController(UISearchController)\nPresents the designated search controller.\nfunc willPresentSearchController(UISearchController)\nNotifies the delegate that the system is about to automatically display the search controller."
  },
  {
    "title": "willPresentSearchController(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchcontrollerdelegate/1618652-willpresentsearchcontroller",
    "html": "Parameters\nsearchController\n\nThe UISearchController object to present.\n\nDiscussion\n\nThe system only calls this method when it’s about to automatically present the search controller. The system doesn’t call this method when you explicitly present the search controller.\n\nSee Also\nPresenting and dismissing the search controller\nfunc didDismissSearchController(UISearchController)\nNotifies the delegate when the system completes automatic dismissal of the search controller.\nfunc didPresentSearchController(UISearchController)\nNotifies the delegate when the system completes automatic presentation of the search controller.\nfunc presentSearchController(UISearchController)\nPresents the designated search controller.\nfunc willDismissSearchController(UISearchController)\nNotifies the delegate that the system is about to automatically dismiss the search controller."
  },
  {
    "title": "localizedAttributedSuggestion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchsuggestionitem/3979292-localizedattributedsuggestion",
    "html": "See Also\nDescribing a search suggestion\nvar localizedSuggestion: String?\nA label for the suggestion, usually the search term the suggestion represents.\nvar localizedDescription: String?\nA description of the suggestion.\nvar iconImage: UIImage?\nAn image for display on the suggestion.\nvar representedObject: Any?\nAn object for tracking supplementary information about the search suggestion."
  },
  {
    "title": "wantsIconRepresentation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentproperties/3967518-wantsiconrepresentation",
    "html": "Discussion\n\nIf the value is true, an icon representation of the document appears on the leading edge of the document’s title in the navigation bar."
  },
  {
    "title": "UIVibrancyEffectStyle.quaternaryLabel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uivibrancyeffectstyle/quaternarylabel",
    "html": "See Also\nLabel styles\ncase label\nA style for labels containing primary content.\ncase secondaryLabel\nA style for labels containing secondary content.\ncase tertiaryLabel\nA style for labels containing tertiary content."
  },
  {
    "title": "UIVibrancyEffectStyle.fill | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uivibrancyeffectstyle/fill",
    "html": "See Also\nFill styles\ncase secondaryFill\nA style for views with large filled areas containing secondary content.\ncase tertiaryFill\nA style for views with large filled areas containing tertiary content."
  },
  {
    "title": "tableView(_:willDeselectRowAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614977-tableview",
    "html": "Parameters\ntableView\n\nA table view informing the delegate about the impending deselection.\n\nindexPath\n\nAn index path locating the row in tableView to be deselected.\n\nReturn Value\n\nAn index path that confirms or alters the deselected row. Return an NSIndexPath object other than indexPath if you want another cell to be deselected. Return nil if you don’t want the row deselected.\n\nDiscussion\n\nThis method is only called if there is an existing selection when the user tries to select a different row. The delegate is sent this method for the previously selected row. You can use UITableViewCell.SelectionStyle.none to disable the appearance of the cell highlight on touch-down.\n\nSee Also\nResponding to row selections\nHandling row selection in a table view\nDetect when a user taps a table view cell so your app can take the next indicated action.\nSelecting multiple items with a two-finger pan gesture\nAccelerate user selection of multiple items using the multiselect gesture on table and collection views.\nfunc tableView(UITableView, willSelectRowAt: IndexPath) -> IndexPath?\nTells the delegate a row is about to be selected.\nfunc tableView(UITableView, didSelectRowAt: IndexPath)\nTells the delegate a row is selected.\nfunc tableView(UITableView, didDeselectRowAt: IndexPath)\nTells the delegate that the specified row is now deselected.\nfunc tableView(UITableView, shouldBeginMultipleSelectionInteractionAt: IndexPath) -> Bool\nAsks the delegate whether the user can use a two-finger pan gesture to select multiple items in a table view.\nfunc tableView(UITableView, didBeginMultipleSelectionInteractionAt: IndexPath)\nTells the delegate when the user starts using a two-finger pan gesture to select multiple rows in a table view.\nfunc tableViewDidEndMultipleSelectionInteraction(UITableView)\nTells the delegate when the user stops using a two-finger pan gesture to select multiple rows in a table view."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentunavailableconfigurationstate/4176585-hash",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nRelationships\nFrom Protocol\nHashable"
  },
  {
    "title": "tableView(_:heightForFooterInSection:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614967-tableview",
    "html": "Parameters\ntableView\n\nThe table view requesting this information.\n\nsection\n\nAn index number identifying a section of tableView .\n\nReturn Value\n\nA nonnegative floating-point value that specifies the height (in points) of the footer for section.\n\nDiscussion\n\nUse this method to specify the height of custom header views returned by your tableView(_:viewForFooterInSection:) method.\n\nSee Also\nProviding header, footer, and row heights\nfunc tableView(UITableView, heightForRowAt: IndexPath) -> CGFloat\nAsks the delegate for the height to use for a row in a specified location.\nfunc tableView(UITableView, heightForHeaderInSection: Int) -> CGFloat\nAsks the delegate for the height to use for the header of a particular section.\nclass let automaticDimension: CGFloat\nA constant representing the default value for a given dimension.\nRelated Documentation\nfunc tableView(UITableView, viewForFooterInSection: Int) -> UIView?\nAsks the delegate for a view to display in the footer of the specified section of the table view.\nfunc tableView(UITableView, estimatedHeightForFooterInSection: Int) -> CGFloat\nAsks the delegate for the estimated height of the footer of a particular section."
  },
  {
    "title": "backgroundColorTransformer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundconfiguration/3600318-backgroundcolortransformer",
    "html": "Discussion\n\nIf the value is nil, the configuration uses backgroundColor without any transformations.\n\nSee Also\nCustomizing the background\nvar customView: UIView?\nA custom view for the background.\nvar cornerRadius: CGFloat\nThe preferred corner radius, using a continuous corner curve, for the background and stroke.\nvar backgroundInsets: NSDirectionalEdgeInsets\nThe insets (or outsets, if negative) for the background and stroke, relative to the edges of the containing view.\nvar edgesAddingLayoutMarginsToBackgroundInsets: NSDirectionalRectEdge\nThe edges on which the configuration adds the containing view’s layout margins to the background insets.\nvar backgroundColor: UIColor?\nThe color of the background.\nfunc resolvedBackgroundColor(for: UIColor) -> UIColor\nGenerates the resolved background color for the specified tint color, using the background color and color transformer.\nvar visualEffect: UIVisualEffect?\nThe visual effect that the configuration applies to the background.\nvar strokeColor: UIColor?\nThe color of the stroke.\nvar strokeColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the stroke color.\nfunc resolvedStrokeColor(for: UIColor) -> UIColor\nGenerates the resolved stroke color for the specified tint color, using the stroke color and color transformer.\nvar strokeWidth: CGFloat\nThe width of the stroke.\nvar strokeOutset: CGFloat\nThe outset (or inset, if negative) for the stroke.\nvar image: UIImage?\nThe image displayed in the view’s background.\nvar imageContentMode: UIView.ContentMode\nA property that determines the layout of a background image in a view when its bounds change."
  },
  {
    "title": "imageContentMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundconfiguration/3750761-imagecontentmode",
    "html": "Discussion\n\nThe content mode specifies how the background image adjusts when the view’s bounds change. You can use this property to specify that you want to scale the background image (either with or without distortion) or pin it to a particular spot on the view.\n\nFor a list of values you can assign to this property, see UIView.ContentMode. The default value of this property is UIView.ContentMode.scaleToFill.\n\nSee Also\nCustomizing the background\nvar customView: UIView?\nA custom view for the background.\nvar cornerRadius: CGFloat\nThe preferred corner radius, using a continuous corner curve, for the background and stroke.\nvar backgroundInsets: NSDirectionalEdgeInsets\nThe insets (or outsets, if negative) for the background and stroke, relative to the edges of the containing view.\nvar edgesAddingLayoutMarginsToBackgroundInsets: NSDirectionalRectEdge\nThe edges on which the configuration adds the containing view’s layout margins to the background insets.\nvar backgroundColor: UIColor?\nThe color of the background.\nvar backgroundColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the background color.\nfunc resolvedBackgroundColor(for: UIColor) -> UIColor\nGenerates the resolved background color for the specified tint color, using the background color and color transformer.\nvar visualEffect: UIVisualEffect?\nThe visual effect that the configuration applies to the background.\nvar strokeColor: UIColor?\nThe color of the stroke.\nvar strokeColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the stroke color.\nfunc resolvedStrokeColor(for: UIColor) -> UIColor\nGenerates the resolved stroke color for the specified tint color, using the stroke color and color transformer.\nvar strokeWidth: CGFloat\nThe width of the stroke.\nvar strokeOutset: CGFloat\nThe outset (or inset, if negative) for the stroke.\nvar image: UIImage?\nThe image displayed in the view’s background."
  },
  {
    "title": "UIVibrancyEffectStyle.tertiaryFill | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uivibrancyeffectstyle/tertiaryfill",
    "html": "See Also\nFill styles\ncase fill\nA style for views with large filled areas containing primary content.\ncase secondaryFill\nA style for views with large filled areas containing secondary content."
  },
  {
    "title": "backgroundImage(for:barMetrics:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uinavigationbar/1624940-backgroundimage",
    "html": "Parameters\nbarPosition\n\nThe location of the navigation bar.\n\nbarMetrics\n\nThe metrics of the navigation bar.\n\nReturn Value\n\nThe image to use for the specified location and metrics.\n\nDiscussion\n\nResizable images will be stretched vertically, if necessary, for a position of UIBarPosition.topAttached.\n\nSee Also\nChanging the background\nvar barTintColor: UIColor?\nThe tint color to apply to the navigation bar background.\nfunc backgroundImage(for: UIBarMetrics) -> UIImage?\nReturns the background image for given bar metrics.\nfunc setBackgroundImage(UIImage?, for: UIBarMetrics)\nSets the background image for given bar metrics.\nfunc setBackgroundImage(UIImage?, for: UIBarPosition, barMetrics: UIBarMetrics)\nSets the background image to use for a given bar position and set of metrics."
  },
  {
    "title": "tableView(_:shouldIndentWhileEditingRowAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614873-tableview",
    "html": "Parameters\ntableView\n\nThe table view requesting this information.\n\nindexPath\n\nAn index path locating the row in its section.\n\nReturn Value\n\ntrue if the background of the row should be indented, otherwise false.\n\nDiscussion\n\nIf the delegate does not implement this method, the default is true. This method is unrelated to tableView(_:indentationLevelForRowAt:).\n\nSee Also\nEditing table rows\nfunc tableView(UITableView, willBeginEditingRowAt: IndexPath)\nTells the delegate that the table view is about to go into editing mode.\nfunc tableView(UITableView, didEndEditingRowAt: IndexPath?)\nTells the delegate that the table view has left editing mode.\nfunc tableView(UITableView, editingStyleForRowAt: IndexPath) -> UITableViewCell.EditingStyle\nAsks the delegate for the editing style of a row at a particular location in a table view.\nfunc tableView(UITableView, titleForDeleteConfirmationButtonForRowAt: IndexPath) -> String?\nChanges the default title of the delete-confirmation button."
  },
  {
    "title": "tableView(_:titleForDeleteConfirmationButtonForRowAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614970-tableview",
    "html": "Parameters\ntableView\n\nThe table view requesting this information.\n\nindexPath\n\nAn index path locating the row in its section.\n\nReturn Value\n\nA localized string to used as the title of the delete-confirmation button.\n\nDiscussion\n\nBy default, the delete-confirmation button, which appears on the right side of the cell, has the title of “Delete”. The table view displays this button when the user attempts to delete a row, either by swiping the row or tapping the red minus icon in editing mode. You can implement this method to return an alternative title, which should be localized.\n\nSee Also\nEditing table rows\nfunc tableView(UITableView, willBeginEditingRowAt: IndexPath)\nTells the delegate that the table view is about to go into editing mode.\nfunc tableView(UITableView, didEndEditingRowAt: IndexPath?)\nTells the delegate that the table view has left editing mode.\nfunc tableView(UITableView, editingStyleForRowAt: IndexPath) -> UITableViewCell.EditingStyle\nAsks the delegate for the editing style of a row at a particular location in a table view.\nfunc tableView(UITableView, shouldIndentWhileEditingRowAt: IndexPath) -> Bool\nAsks the delegate whether the background of the specified row should be indented while the table view is in editing mode."
  },
  {
    "title": "pageViewController(_:viewControllerBefore:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipageviewcontrollerdatasource/1614086-pageviewcontroller",
    "html": "Required\n\nParameters\npageViewController\n\nThe page view controller\n\nviewController\n\nThe view controller that the user navigated away from.\n\nReturn Value\n\nThe view controller before the given view controller, or nil to indicate that there is no previous view controller.\n\nSee Also\nProviding View Controllers\nfunc pageViewController(UIPageViewController, viewControllerAfter: UIViewController) -> UIViewController?\nReturns the view controller after the given view controller.\n\nRequired\n\nRelated Documentation\nView Controller Catalog for iOS"
  },
  {
    "title": "presentationCount(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipageviewcontrollerdatasource/1614095-presentationcount",
    "html": "Parameters\npageViewController\n\nThe page view controller.\n\nReturn Value\n\nThe number of items to be reflected in the page indicator.\n\nSee Also\nSupporting a Page Indicator\nfunc presentationIndex(for: UIPageViewController) -> Int\nReturns the index of the selected item to be reflected in the page indicator."
  },
  {
    "title": "presentationIndex(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipageviewcontrollerdatasource/1614116-presentationindex",
    "html": "Parameters\npageViewController\n\nThe page view controller.\n\nReturn Value\n\nThe index of the selected item to be reflected in the page indicator.\n\nSee Also\nSupporting a Page Indicator\nfunc presentationCount(for: UIPageViewController) -> Int\nReturns the number of items to be reflected in the page indicator."
  },
  {
    "title": "tableView(_:selectionFollowsFocusForRowAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/3752212-tableview",
    "html": "Parameters\ntableView\n\nThe table view making the request.\n\nindexPath\n\nThe index path of the row to determine selection behavior for.\n\nReturn Value\n\ntrue if you want to automatically select the row at the specified index path when focus moves to it; otherwise, false.\n\nDiscussion\n\nIf the table view’s selectionFollowsFocus property is true and you return false from this delegate method, focus still moves to the row when the user selects it. However, when focus moves to the row, the row doesn’t automatically select.\n\nSee Also\nManaging table view focus\nfunc tableView(UITableView, canFocusRowAt: IndexPath) -> Bool\nAsks the delegate whether the cell at the specified index path is itself focusable.\nfunc tableView(UITableView, shouldUpdateFocusIn: UITableViewFocusUpdateContext) -> Bool\nAsks the delegate whether the focus update specified by the context is allowed to occur.\nfunc tableView(UITableView, didUpdateFocusIn: UITableViewFocusUpdateContext, with: UIFocusAnimationCoordinator)\nTells the delegate that a focus update specified by the context has just occurred.\nfunc indexPathForPreferredFocusedView(in: UITableView) -> IndexPath?\nAsks the delegate for the table view’s index path for the preferred focused view."
  },
  {
    "title": "tableView(_:didUpdateFocusIn:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614945-tableview",
    "html": "Parameters\ntableView\n\nA table view informing the delegate about the new focus.\n\ncontext\n\nAn instance of the UIFocusUpdateContext class, containing metadata for the focus related update.\n\ncoordinator\n\nAn instance of the UIFocusUpdateContext class, containing metadata for the focus related update.\n\nDiscussion\n\nThis functionality of this delegate method is equivalent to overriding UITableView class’s implementation of tableView(_:didUpdateFocusIn:with:). This delegate method provides additional UITableView-related information in its context parameter, such as the index paths for the previously and next focused views. Note that, these index paths are available only if their views are contained within the table view. To learn more about the information provided by the context, see see UITableViewFocusUpdateContext.\n\nSee Also\nManaging table view focus\nfunc tableView(UITableView, canFocusRowAt: IndexPath) -> Bool\nAsks the delegate whether the cell at the specified index path is itself focusable.\nfunc tableView(UITableView, shouldUpdateFocusIn: UITableViewFocusUpdateContext) -> Bool\nAsks the delegate whether the focus update specified by the context is allowed to occur.\nfunc indexPathForPreferredFocusedView(in: UITableView) -> IndexPath?\nAsks the delegate for the table view’s index path for the preferred focused view.\nfunc tableView(UITableView, selectionFollowsFocusForRowAt: IndexPath) -> Bool\nAsks the delegate whether to relate selection and focus behavior for the row at the corresponding index path."
  },
  {
    "title": "tableView(_:shouldUpdateFocusIn:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614949-tableview",
    "html": "Parameters\ntableView\n\nA table view in which the focus update is occurring.\n\ncontext\n\nAn instance of UIFocusUpdateContext class, contains metadata for the focus related update.\n\nReturn Value\n\ntrue if the focus should update; otherwise false.\n\nDiscussion\n\nThe functionality of this delegate method is equivalent to overriding UITableView class’s shouldUpdateFocus(in:) method. This delegate method provides additional UITableView-related information in its context parameter, such as the index paths for the previously and next focused views. Note that, these index paths are only available if their views are contained within the table view. To learn more about the information provided by the context, see UITableViewFocusUpdateContext.\n\nSee Also\nManaging table view focus\nfunc tableView(UITableView, canFocusRowAt: IndexPath) -> Bool\nAsks the delegate whether the cell at the specified index path is itself focusable.\nfunc tableView(UITableView, didUpdateFocusIn: UITableViewFocusUpdateContext, with: UIFocusAnimationCoordinator)\nTells the delegate that a focus update specified by the context has just occurred.\nfunc indexPathForPreferredFocusedView(in: UITableView) -> IndexPath?\nAsks the delegate for the table view’s index path for the preferred focused view.\nfunc tableView(UITableView, selectionFollowsFocusForRowAt: IndexPath) -> Bool\nAsks the delegate whether to relate selection and focus behavior for the row at the corresponding index path."
  },
  {
    "title": "tableView(_:didEndDisplayingFooterView:forSection:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614856-tableview",
    "html": "Parameters\ntableView\n\nThe table view that removed the view.\n\nview\n\nThe footer view that was removed.\n\nsection\n\nThe index of the section that contained the footer.\n\nDiscussion\n\nUse this method to detect when a footer view is removed from a table view, as opposed to monitoring the view itself to see when it appears or disappears.\n\nSee Also\nTracking the removal of views\nfunc tableView(UITableView, didEndDisplaying: UITableViewCell, forRowAt: IndexPath)\nTells the delegate that the specified cell was removed from the table.\nfunc tableView(UITableView, didEndDisplayingHeaderView: UIView, forSection: Int)\nTells the delegate that the specified header view was removed from the table."
  },
  {
    "title": "tableView(_:editActionsForRowAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614956-tableview",
    "html": "Parameters\ntableView\n\nThe table view requesting this information.\n\nindexPath\n\nThe index path of the row.\n\nReturn Value\n\nAn array of UITableViewRowAction objects representing the actions for the row. Each action you provide is used to create a button that the user can tap.\n\nDiscussion\n\nUse this method when you want to provide custom actions for one of your table rows. When the user swipes horizontally in a row, the table view moves the row content aside to reveal your actions. Tapping one of the action buttons executes the handler block stored with the action object.\n\nIf you do not implement this method, the table view displays the standard accessory buttons when the user swipes the row.\n\nSee Also\nResponding to row actions\nfunc tableView(UITableView, leadingSwipeActionsConfigurationForRowAt: IndexPath) -> UISwipeActionsConfiguration?\nReturns the swipe actions to display on the leading edge of the row.\nfunc tableView(UITableView, trailingSwipeActionsConfigurationForRowAt: IndexPath) -> UISwipeActionsConfiguration?\nReturns the swipe actions to display on the trailing edge of the row.\nfunc tableView(UITableView, shouldShowMenuForRowAt: IndexPath) -> Bool\nAsks the delegate if the editing menu should be shown for a certain row.\nDeprecated\nfunc tableView(UITableView, canPerformAction: Selector, forRowAt: IndexPath, withSender: Any?) -> Bool\nAsks the delegate if the editing menu should omit the Copy or Paste command for a given row.\nDeprecated\nfunc tableView(UITableView, performAction: Selector, forRowAt: IndexPath, withSender: Any?)\nTells the delegate to perform a copy or paste operation on the content of a given row.\nDeprecated"
  },
  {
    "title": "tableView(_:didEndDisplayingHeaderView:forSection:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614971-tableview",
    "html": "Parameters\ntableView\n\nThe table view that removed the view.\n\nview\n\nThe header view that was removed.\n\nsection\n\nThe index of the section that contained the header.\n\nDiscussion\n\nUse this method to detect when a header view is removed from a table view, as opposed to monitoring the view itself to see when it appears or disappears.\n\nSee Also\nTracking the removal of views\nfunc tableView(UITableView, didEndDisplaying: UITableViewCell, forRowAt: IndexPath)\nTells the delegate that the specified cell was removed from the table.\nfunc tableView(UITableView, didEndDisplayingFooterView: UIView, forSection: Int)\nTells the delegate that the specified footer view was removed from the table."
  },
  {
    "title": "tableView(_:didEndDisplaying:forRowAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614870-tableview",
    "html": "Parameters\ntableView\n\nThe table view that removed the view.\n\ncell\n\nThe cell that was removed.\n\nindexPath\n\nThe index path of the cell.\n\nDiscussion\n\nUse this method to detect when a cell is removed from a table view, as opposed to monitoring the view itself to see when it appears or disappears.\n\nSee Also\nTracking the removal of views\nfunc tableView(UITableView, didEndDisplayingHeaderView: UIView, forSection: Int)\nTells the delegate that the specified header view was removed from the table.\nfunc tableView(UITableView, didEndDisplayingFooterView: UIView, forSection: Int)\nTells the delegate that the specified footer view was removed from the table."
  },
  {
    "title": "tableView(_:didEndEditingRowAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614963-tableview",
    "html": "Parameters\ntableView\n\nThe table view providing this information.\n\nindexPath\n\nAn index path locating the row in tableView.\n\nDiscussion\n\nThis method is called when the table view exits editing mode after having been put into the mode by the user swiping across the row identified by indexPath. As a result, a Delete button appears in the row; however, in this \"swipe to delete\" mode the table view does not display any insertion, deletion, and reordering controls. When entering this \"swipe to delete\" editing mode, the table view sends a tableView(_:willBeginEditingRowAt:) message to the delegate to allow it to adjust its user interface.\n\nSee Also\nEditing table rows\nfunc tableView(UITableView, willBeginEditingRowAt: IndexPath)\nTells the delegate that the table view is about to go into editing mode.\nfunc tableView(UITableView, editingStyleForRowAt: IndexPath) -> UITableViewCell.EditingStyle\nAsks the delegate for the editing style of a row at a particular location in a table view.\nfunc tableView(UITableView, titleForDeleteConfirmationButtonForRowAt: IndexPath) -> String?\nChanges the default title of the delete-confirmation button.\nfunc tableView(UITableView, shouldIndentWhileEditingRowAt: IndexPath) -> Bool\nAsks the delegate whether the background of the specified row should be indented while the table view is in editing mode."
  },
  {
    "title": "tableView(_:willBeginEditingRowAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614907-tableview",
    "html": "Parameters\ntableView\n\nThe table view providing this information.\n\nindexPath\n\nAn index path locating the row in tableView.\n\nDiscussion\n\nThis method is called when the user swipes horizontally across a row; as a consequence, the table view sets its isEditing property to true (thereby entering editing mode) and displays a Delete button in the row identified by indexPath. In this \"swipe to delete\" mode the table view does not display any insertion, deletion, and reordering controls. This method gives the delegate an opportunity to adjust the application's user interface to editing mode. When the table exits editing mode (for example, the user taps the Delete button), the table view calls tableView(_:didEndEditingRowAt:).\n\nNote\n\nA swipe motion across a cell does not cause the display of a Delete button unless the table view's data source implements the tableView(_:commit:forRowAt:) method.\n\nSee Also\nEditing table rows\nfunc tableView(UITableView, didEndEditingRowAt: IndexPath?)\nTells the delegate that the table view has left editing mode.\nfunc tableView(UITableView, editingStyleForRowAt: IndexPath) -> UITableViewCell.EditingStyle\nAsks the delegate for the editing style of a row at a particular location in a table view.\nfunc tableView(UITableView, titleForDeleteConfirmationButtonForRowAt: IndexPath) -> String?\nChanges the default title of the delete-confirmation button.\nfunc tableView(UITableView, shouldIndentWhileEditingRowAt: IndexPath) -> Bool\nAsks the delegate whether the background of the specified row should be indented while the table view is in editing mode."
  },
  {
    "title": "tableView(_:didUnhighlightRowAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614868-tableview",
    "html": "Parameters\ntableView\n\nThe table view that removed the highlight from the cell.\n\nindexPath\n\nThe index path of the row that had its highlight removed.\n\nSee Also\nManaging table view highlights\nfunc tableView(UITableView, shouldHighlightRowAt: IndexPath) -> Bool\nAsks the delegate if the specified row should be highlighted.\nfunc tableView(UITableView, didHighlightRowAt: IndexPath)\nTells the delegate that the specified row was highlighted."
  },
  {
    "title": "tableView(_:performAction:forRowAt:withSender:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614980-tableview",
    "html": "Parameters\ntableView\n\nThe table view that is making this request.\n\naction\n\nA selector type identifying the copy(_:) or paste(_:) method of the UIResponderStandardEditActions informal protocol.\n\nindexPath\n\nThe index path of the row.\n\nsender\n\nThe object that initially sent the copy: or paste: message.\n\nDiscussion\n\nThe table view invokes this method for a given action if the user taps Copy or Paste in the editing menu. The delegate can do whatever is appropriate for the action; for example, for a copy, it can extract the relevant cell content for the row at indexPath and write it to the general pasteboard or an application (private) pasteboard. See UIPasteboard for further information.\n\nSee Also\nResponding to row actions\nfunc tableView(UITableView, leadingSwipeActionsConfigurationForRowAt: IndexPath) -> UISwipeActionsConfiguration?\nReturns the swipe actions to display on the leading edge of the row.\nfunc tableView(UITableView, trailingSwipeActionsConfigurationForRowAt: IndexPath) -> UISwipeActionsConfiguration?\nReturns the swipe actions to display on the trailing edge of the row.\nfunc tableView(UITableView, shouldShowMenuForRowAt: IndexPath) -> Bool\nAsks the delegate if the editing menu should be shown for a certain row.\nDeprecated\nfunc tableView(UITableView, canPerformAction: Selector, forRowAt: IndexPath, withSender: Any?) -> Bool\nAsks the delegate if the editing menu should omit the Copy or Paste command for a given row.\nDeprecated\nfunc tableView(UITableView, editActionsForRowAt: IndexPath) -> [UITableViewRowAction]?\nAsks the delegate for the actions to display in response to a swipe in the specified row.\nDeprecated"
  },
  {
    "title": "tableView(_:canPerformAction:forRowAt:withSender:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614898-tableview",
    "html": "Parameters\ntableView\n\nThe table view that is making this request.\n\naction\n\nA selector type identifying the copy(_:) or paste(_:) method of the UIResponderStandardEditActions informal protocol.\n\nindexPath\n\nThe index path of the row.\n\nsender\n\nThe object that initially sent the copy: or paste: message.\n\nReturn Value\n\ntrue if the command corresponding to action should appear in the editing menu, otherwise false. The default value is false.\n\nDiscussion\n\nThis method is invoked after tableView(_:shouldShowMenuForRowAt:). It gives the developer the opportunity to exclude one of the commands—Copy or Paste—from the editing menu. For example, the user might have copied some cell content from one row but wants to paste into another row that doesn’t take the copied content. In a case like this, return false from this method.\n\nSee Also\nResponding to row actions\nfunc tableView(UITableView, leadingSwipeActionsConfigurationForRowAt: IndexPath) -> UISwipeActionsConfiguration?\nReturns the swipe actions to display on the leading edge of the row.\nfunc tableView(UITableView, trailingSwipeActionsConfigurationForRowAt: IndexPath) -> UISwipeActionsConfiguration?\nReturns the swipe actions to display on the trailing edge of the row.\nfunc tableView(UITableView, shouldShowMenuForRowAt: IndexPath) -> Bool\nAsks the delegate if the editing menu should be shown for a certain row.\nDeprecated\nfunc tableView(UITableView, performAction: Selector, forRowAt: IndexPath, withSender: Any?)\nTells the delegate to perform a copy or paste operation on the content of a given row.\nDeprecated\nfunc tableView(UITableView, editActionsForRowAt: IndexPath) -> [UITableViewRowAction]?\nAsks the delegate for the actions to display in response to a swipe in the specified row.\nDeprecated"
  },
  {
    "title": "tableView(_:shouldHighlightRowAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614988-tableview",
    "html": "Parameters\ntableView\n\nThe table view that is making this request.\n\nindexPath\n\nThe index path of the row being highlighted.\n\nReturn Value\n\ntrue if the row should be highlighted or false if it should not.\n\nDiscussion\n\nAs touch events arrive, the table view highlights rows in anticipation of the user selecting them. As it processes those touch events, the table view calls this method to ask your delegate if a given cell should be highlighted. Your delegate can implement this method and use it to prevent the highlighting of a row when another row is already selected or when other relevant criteria occur.\n\nIf you do not implement this method, the default return value is true.\n\nSee Also\nManaging table view highlights\nfunc tableView(UITableView, didHighlightRowAt: IndexPath)\nTells the delegate that the specified row was highlighted.\nfunc tableView(UITableView, didUnhighlightRowAt: IndexPath)\nTells the delegate that the highlight was removed from the row at the specified index path."
  },
  {
    "title": "tableView(_:willPerformPreviewActionForMenuWith:animator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/3375810-tableview",
    "html": "Parameters\ntableView\n\nThe table view informing the delegate of this event.\n\nconfiguration\n\nThe configuration of the menu being displayed.\n\nanimator\n\nThe animations to run alongside the commit transition.\n\nSee Also\nManaging context menus\nAdding Context Menus in Your App\nProvide quick access to useful actions by adding context menus to your iOS app.\nfunc tableView(UITableView, contextMenuConfigurationForRowAt: IndexPath, point: CGPoint) -> UIContextMenuConfiguration?\nReturns a context menu configuration for the row at a point.\nfunc tableView(UITableView, previewForDismissingContextMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nReturns the destination view when dismissing a context menu.\nfunc tableView(UITableView, previewForHighlightingContextMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nReturns a view to override the default preview the table view created.\nfunc tableView(UITableView, willDisplayContextMenu: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nInforms the delegate when a context menu will appear.\nfunc tableView(UITableView, willEndContextMenuInteraction: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nInforms the delegate when a context menu will disappear."
  },
  {
    "title": "tableView(_:didHighlightRowAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614982-tableview",
    "html": "Parameters\ntableView\n\nThe table view that highlighted the cell.\n\nindexPath\n\nThe index path of the row that was highlighted.\n\nSee Also\nManaging table view highlights\nfunc tableView(UITableView, shouldHighlightRowAt: IndexPath) -> Bool\nAsks the delegate if the specified row should be highlighted.\nfunc tableView(UITableView, didUnhighlightRowAt: IndexPath)\nTells the delegate that the highlight was removed from the row at the specified index path."
  },
  {
    "title": "UISplitViewController.PrimaryEdge.leading | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontroller/primaryedge/leading",
    "html": "Discussion\n\nIn an interface that is oriented left-to-right, this value corresponds to the left side of the split view interface. For right-to-left interfaces, the leading edge is on the right side."
  },
  {
    "title": "splitViewControllerSupportedInterfaceOrientations(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontrollerdelegate/1623178-splitviewcontrollersupportedinte",
    "html": "Parameters\nsplitViewController\n\nThe split view controller.\n\nReturn Value\n\nThe orientations that you want the specified split view controller to support. The value you return can be one or more of the UIInterfaceOrientationMask constants.\n\nDiscussion\n\nThe split view controller calls this method to obtain the orientations that it supports. You can use this method to alter the set of orientations typically supported by a split view controller. If you don’t implement this method, the split view controller supports all orientations on iPad and all but the allButUpsideDown orientation on iPhone devices.\n\nSee Also\nSpecifying the interface orientations\nfunc splitViewControllerPreferredInterfaceOrientationForPresentation(UISplitViewController) -> UIInterfaceOrientation\nAsks the delegate for the orientation to use when presenting the split view controller.\nRelated Documentation\nvar supportedInterfaceOrientations: UIInterfaceOrientationMask\nThe interface orientations that the view controller supports."
  },
  {
    "title": "splitViewController(_:shouldHide:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontrollerdelegate/1623174-splitviewcontroller",
    "html": "Deprecated\n\nOrientation-related delegate methods are no longer supported.\n\nParameters\nsvc\n\nThe split view controller that owns the first view controller.\n\nvc\n\nThe first view controller in the array of view controllers.\n\norientation\n\nThe orientation being considered.\n\nReturn Value\n\ntrue if the view controller should be hidden in the specified orientation or false if it should be visible. If you do not implement this method, a value of true is assumed for portrait orientations and false is assumed for landscape orientations.\n\nDiscussion\n\nThe split view controller calls this method only for the first child view controller in its array. The second view controller always remains visible regardless of the orientation.\n\nPrior to iOS 5.0, the first view controller was always hidden in portrait orientations and always shown in landscape orientations. If you do not implement this method in your delegate object, that default behavior remains in effect.\n\nSee Also\nDeprecated methods\nfunc splitViewController(UISplitViewController, willHide: UIViewController, with: UIBarButtonItem, for: UIPopoverController)\nTells the delegate that the specified view controller is about to be hidden.\nDeprecated\nfunc splitViewController(UISplitViewController, willShow: UIViewController, invalidating: UIBarButtonItem)\nTells the delegate that the specified view controller is about to be shown again.\nDeprecated\nfunc splitViewController(UISplitViewController, popoverController: UIPopoverController, willPresent: UIViewController)\nTells the delegate that the hidden view controller is about to be displayed in a popover.\nDeprecated"
  },
  {
    "title": "primaryOverlay | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontroller/displaymode/1623195-primaryoverlay",
    "html": "Deprecated\n\nUse UISplitViewController.DisplayMode.oneOverSecondary instead.\n\nSee Also\nDeprecated\nstatic var primaryHidden: UISplitViewController.DisplayMode\nThe primary view controller is hidden.\nDeprecated\nstatic var allVisible: UISplitViewController.DisplayMode\nThe primary and secondary view controllers are displayed side-by-side onscreen.\nDeprecated"
  },
  {
    "title": "primaryViewController(forExpanding:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontrollerdelegate/1623188-primaryviewcontroller",
    "html": "Parameters\nsplitViewController\n\nThe split view controller whose interface is expanding.\n\nReturn Value\n\nThe view controller to use as the primary view controller, or nil to specify the current primary view controller.\n\nDiscussion\n\nThis delegate method only applies to classic split view interfaces. For more information, see Split view styles.\n\nWhen the split view controller transitions from a horizontally compact to a horizontally regular size class, it calls this method and asks you for the view controller to display in the primary position when that transition is complete. The view controller you return becomes the primary view controller of the split view interface. If you do not implement this method, or if your implementation returns nil, the split view controller chooses its current primary view controller as the one to use.\n\nIf you specified a specific view controller in your primaryViewController(forCollapsing:) method, use this method to restore the original primary view controller for your split view interface. You can also implement the splitViewController(_:separateSecondaryFrom:) method to disentangle your view controllers from one another as needed.\n\nSee Also\nCollapsing and expanding classic split views\nfunc primaryViewController(forCollapsing: UISplitViewController) -> UIViewController?\nAsks the delegate to provide the single view controller to display after the split view interface collapses.\nfunc splitViewController(UISplitViewController, collapseSecondary: UIViewController, onto: UIViewController) -> Bool\nAsks the delegate to adjust the primary view controller and to incorporate the secondary view controller into the collapsed interface.\nfunc splitViewController(UISplitViewController, separateSecondaryFrom: UIViewController) -> UIViewController?\nAsks the delegate to provide the new secondary view controller for the split view interface."
  },
  {
    "title": "edgesAddingLayoutMarginsToBackgroundInsets | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundconfiguration/3600323-edgesaddinglayoutmarginstobackgr",
    "html": "Discussion\n\nFor the specified edges, the backgroundInsets values are relative to the containing view’s layout margins.\n\nThe default value is NSDirectionalRectEdgeNone.\n\nSee Also\nCustomizing the background\nvar customView: UIView?\nA custom view for the background.\nvar cornerRadius: CGFloat\nThe preferred corner radius, using a continuous corner curve, for the background and stroke.\nvar backgroundInsets: NSDirectionalEdgeInsets\nThe insets (or outsets, if negative) for the background and stroke, relative to the edges of the containing view.\nvar backgroundColor: UIColor?\nThe color of the background.\nvar backgroundColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the background color.\nfunc resolvedBackgroundColor(for: UIColor) -> UIColor\nGenerates the resolved background color for the specified tint color, using the background color and color transformer.\nvar visualEffect: UIVisualEffect?\nThe visual effect that the configuration applies to the background.\nvar strokeColor: UIColor?\nThe color of the stroke.\nvar strokeColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the stroke color.\nfunc resolvedStrokeColor(for: UIColor) -> UIColor\nGenerates the resolved stroke color for the specified tint color, using the stroke color and color transformer.\nvar strokeWidth: CGFloat\nThe width of the stroke.\nvar strokeOutset: CGFloat\nThe outset (or inset, if negative) for the stroke.\nvar image: UIImage?\nThe image displayed in the view’s background.\nvar imageContentMode: UIView.ContentMode\nA property that determines the layout of a background image in a view when its bounds change."
  },
  {
    "title": "customView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundconfiguration/3600322-customview",
    "html": "Discussion\n\nThe custom view must have translatesAutoresizingMaskIntoConstraints set to true, but it can use Auto Layout constraints internally for layout of its subviews.\n\nSee Also\nCustomizing the background\nvar cornerRadius: CGFloat\nThe preferred corner radius, using a continuous corner curve, for the background and stroke.\nvar backgroundInsets: NSDirectionalEdgeInsets\nThe insets (or outsets, if negative) for the background and stroke, relative to the edges of the containing view.\nvar edgesAddingLayoutMarginsToBackgroundInsets: NSDirectionalRectEdge\nThe edges on which the configuration adds the containing view’s layout margins to the background insets.\nvar backgroundColor: UIColor?\nThe color of the background.\nvar backgroundColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the background color.\nfunc resolvedBackgroundColor(for: UIColor) -> UIColor\nGenerates the resolved background color for the specified tint color, using the background color and color transformer.\nvar visualEffect: UIVisualEffect?\nThe visual effect that the configuration applies to the background.\nvar strokeColor: UIColor?\nThe color of the stroke.\nvar strokeColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the stroke color.\nfunc resolvedStrokeColor(for: UIColor) -> UIColor\nGenerates the resolved stroke color for the specified tint color, using the stroke color and color transformer.\nvar strokeWidth: CGFloat\nThe width of the stroke.\nvar strokeOutset: CGFloat\nThe outset (or inset, if negative) for the stroke.\nvar image: UIImage?\nThe image displayed in the view’s background.\nvar imageContentMode: UIView.ContentMode\nA property that determines the layout of a background image in a view when its bounds change."
  },
  {
    "title": "tableView(_:titleForHeaderInSection:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdatasource/1614850-tableview",
    "html": "Parameters\ntableView\n\nThe table-view object asking for the title.\n\nsection\n\nAn index number identifying a section of tableView.\n\nReturn Value\n\nA string to use as the title of the section header. If you return nil , the section will have no title.\n\nDiscussion\n\nThe table view uses a fixed font style for section header titles. If you want a different font style, return a custom view (for example, a UILabel object) in the delegate method tableView(_:viewForHeaderInSection:) instead.\n\nIf you don’t implement this method or the tableView(_:viewForHeaderInSection:) method, the table doesn’t display headers for sections. If you implement both methods, the tableView(_:viewForHeaderInSection:) method takes priority.\n\nSee Also\nProviding cells, headers, and footers\nfunc tableView(UITableView, cellForRowAt: IndexPath) -> UITableViewCell\nAsks the data source for a cell to insert in a particular location of the table view.\n\nRequired\n\nfunc tableView(UITableView, titleForFooterInSection: Int) -> String?\nAsks the data source for the title of the footer of the specified section of the table view."
  },
  {
    "title": "tableView(_:cellForRowAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdatasource/1614861-tableview",
    "html": "Required\n\nParameters\ntableView\n\nA table-view object requesting the cell.\n\nindexPath\n\nAn index path locating a row in tableView.\n\nReturn Value\n\nAn object inheriting from UITableViewCell that the table view can use for the specified row. UIKit raises an assertion if you return nil.\n\nDiscussion\n\nIn your implementation, create and configure an appropriate cell for the given index path. Create your cell using the table view’s dequeueReusableCell(withIdentifier:for:) method, which recycles or creates the cell for you. After creating the cell, update the properties of the cell with appropriate data values.\n\nNever call this method yourself. If you want to retrieve cells from your table, call the table view’s cellForRow(at:) method instead.\n\nSee Also\nProviding cells, headers, and footers\nfunc tableView(UITableView, titleForHeaderInSection: Int) -> String?\nAsks the data source for the title of the header of the specified section of the table view.\nfunc tableView(UITableView, titleForFooterInSection: Int) -> String?\nAsks the data source for the title of the footer of the specified section of the table view.\nRelated Documentation\nTable View Programming Guide for iOS"
  },
  {
    "title": "sectionIndexTitles(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdatasource/1614857-sectionindextitles",
    "html": "Parameters\ntableView\n\nThe table-view object requesting this information.\n\nReturn Value\n\nAn array of strings that serve as the title of sections in the table view and appear in the index list on the right side of the table view. The table view must be in the plain style (UITableViewStylePlain). For example, for an alphabetized list, you could return an array containing strings “A” through “Z”.\n\nSee Also\nConfiguring an index\nfunc tableView(UITableView, sectionForSectionIndexTitle: String, at: Int) -> Int\nAsks the data source to return the index of the section having the given title and section title index."
  },
  {
    "title": "configurationState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewcell/3600948-configurationstate",
    "html": "Discussion\n\nTo add your own custom state, see UIConfigurationStateCustomKey.\n\nSee Also\nManaging the state\nfunc setNeedsUpdateConfiguration()\nInforms the cell to update its configuration for its current state.\nfunc updateConfiguration(using: UICellConfigurationState)\nUpdates the cell’s configuration using the current state.\nvar configurationUpdateHandler: UICollectionViewCell.ConfigurationUpdateHandler?\nA block for handling updates to the cell’s configuration using the current state.\ntypealias UICollectionViewCell.ConfigurationUpdateHandler\nThe type of block for handling updates to the cell’s configuration using the current state.\nvar isSelected: Bool\nThe selection state of the cell.\nvar isHighlighted: Bool\nThe highlight state of the cell."
  },
  {
    "title": "contentView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewcell/1620133-contentview",
    "html": "Discussion\n\nWhen configuring a cell, you add any custom views representing your cell’s content to this view. The cell object places the content in this view in front of any background views.\n\nSee Also\nManaging the content\nvar contentConfiguration: (UIContentConfiguration)?\nThe current content configuration of the cell.\nvar automaticallyUpdatesContentConfiguration: Bool\nA Boolean value that determines whether the cell automatically updates its content configuration when its state changes."
  },
  {
    "title": "configurationUpdateHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewcell/3751733-configurationupdatehandler",
    "html": "Discussion\n\nA configuration update handler provides an alternative approach to overriding updateConfiguration(using:) in a subclass. Set a configuration update handler to update the cell’s configuration using the new state in response to a configuration state change:\n\ncell.configurationUpdateHandler = { cell, state in\n    var content = UIListContentConfiguration.cell().updated(for: state)\n    content.text = \"Hello world!\"\n    if state.isDisabled {\n        content.textProperties.color = .systemGray\n    }\n    cell.contentConfiguration = content\n}\n\n\nSetting the value of this property calls setNeedsUpdateConfiguration(). The system calls this handler after calling updateConfiguration(using:).\n\nSee Also\nManaging the state\nvar configurationState: UICellConfigurationState\nThe current configuration state of the cell.\nfunc setNeedsUpdateConfiguration()\nInforms the cell to update its configuration for its current state.\nfunc updateConfiguration(using: UICellConfigurationState)\nUpdates the cell’s configuration using the current state.\ntypealias UICollectionViewCell.ConfigurationUpdateHandler\nThe type of block for handling updates to the cell’s configuration using the current state.\nvar isSelected: Bool\nThe selection state of the cell.\nvar isHighlighted: Bool\nThe highlight state of the cell."
  },
  {
    "title": "UICollectionViewCell.DragState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewcell/dragstate",
    "html": "Topics\nConstants\ncase none\nThe cell isn’t involved in a drag.\ncase lifting\nThe cell is being animated off of the surface of the collection view.\ncase dragging\nThe cell is being dragged.\nRelationships\nConforms To\nSendable\nSee Also\nManaging drag state changes\nfunc dragStateDidChange(UICollectionViewCell.DragState)\nCalled when the drag state of the cell changes."
  },
  {
    "title": "UICollectionViewCell.ConfigurationUpdateHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewcell/configurationupdatehandler",
    "html": "Parameters\ncell\n\nThe collection view cell to configure.\n\nstate\n\nThe new state to use for updating the cell’s configuration.\n\nSee Also\nManaging the state\nvar configurationState: UICellConfigurationState\nThe current configuration state of the cell.\nfunc setNeedsUpdateConfiguration()\nInforms the cell to update its configuration for its current state.\nfunc updateConfiguration(using: UICellConfigurationState)\nUpdates the cell’s configuration using the current state.\nvar configurationUpdateHandler: UICollectionViewCell.ConfigurationUpdateHandler?\nA block for handling updates to the cell’s configuration using the current state.\nvar isSelected: Bool\nThe selection state of the cell.\nvar isHighlighted: Bool\nThe highlight state of the cell."
  },
  {
    "title": "tableView(_:numberOfRowsInSection:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdatasource/1614931-tableview",
    "html": "Required\n\nParameters\ntableView\n\nThe table-view object requesting this information.\n\nsection\n\nAn index number identifying a section in tableView.\n\nReturn Value\n\nThe number of rows in section.\n\nSee Also\nProviding the number of rows and sections\nfunc numberOfSections(in: UITableView) -> Int\nAsks the data source to return the number of sections in the table view."
  },
  {
    "title": "init(traitCollection:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentunavailableconfigurationstate/4176587-init",
    "html": "Parameters\ntraitCollection\n\nThe trait collection describing the user interface environment.\n\nDiscussion\n\nTypically, you don’t create a configuration state yourself. To access the current configuration state for a content-unavailable view, read contentUnavailableConfigurationState. View controller subclasses can override that property to customize the configuration state returned by the system.\n\nRelationships\nFrom Protocol\nUIConfigurationState"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentunavailableconfigurationstate/4176589-subscript",
    "html": "Relationships\nFrom Protocol\nUIConfigurationState"
  },
  {
    "title": "tableView(_:shouldBeginMultipleSelectionInteractionAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/3183943-tableview",
    "html": "Parameters\ntableView\n\nThe table view calling this method.\n\nindexPath\n\nThe index path of the row that the user touched to start the two-finger pan gesture.\n\nReturn Value\n\ntrue to allow the user to select multiple rows using a two-finger pan gesture; otherwise, false to disable the behavior. The default value is false.\n\nDiscussion\n\nWhen the system recognizes a two-finger pan gesture, it calls this method before it sets isEditing to true. If you return true from this method, the user can select multiple rows using a two-finger pan gesture.\n\nIn macOS, the system calls this method when a user attempts to select multiple rows by holding a modifier key and clicking additional rows to select them.\n\nTo support multiple selection using the two-finger pan gesture (in iOS) or modifier keys (in macOS), set the allowsMultipleSelectionDuringEditing property to true when you configure the table view.\n\nSee Also\nResponding to row selections\nHandling row selection in a table view\nDetect when a user taps a table view cell so your app can take the next indicated action.\nSelecting multiple items with a two-finger pan gesture\nAccelerate user selection of multiple items using the multiselect gesture on table and collection views.\nfunc tableView(UITableView, willSelectRowAt: IndexPath) -> IndexPath?\nTells the delegate a row is about to be selected.\nfunc tableView(UITableView, didSelectRowAt: IndexPath)\nTells the delegate a row is selected.\nfunc tableView(UITableView, willDeselectRowAt: IndexPath) -> IndexPath?\nTells the delegate that a specified row is about to be deselected.\nfunc tableView(UITableView, didDeselectRowAt: IndexPath)\nTells the delegate that the specified row is now deselected.\nfunc tableView(UITableView, didBeginMultipleSelectionInteractionAt: IndexPath)\nTells the delegate when the user starts using a two-finger pan gesture to select multiple rows in a table view.\nfunc tableViewDidEndMultipleSelectionInteraction(UITableView)\nTells the delegate when the user stops using a two-finger pan gesture to select multiple rows in a table view."
  },
  {
    "title": "tableView(_:shouldSpringLoadRowAt:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/2897335-tableview",
    "html": "Parameters\ntableView\n\nThe table view where the interaction is occurring.\n\nindexPath\n\nThe index path of the row whose spring-loading behavior is being considered.\n\ncontext\n\nA context object that you can use to modify the spring-loading behavior. Use this object to specify the location for spring-loading animations associated in the row.\n\nReturn Value\n\ntrue if the row allows spring-loaded interactions or false if it does not.\n\nDiscussion\n\nOverride this method when you want to selectively disable spring-loaded interactions with the rows of your table. For example, you might return false for rows that represent leaf content and not a folder of content. If you do not implement this method, the table view performs spring-loading animations on the row when it is not currently being dragged.By default, spring-loading animations are performed on the entire row. To modify these animations, modify the provided context object. For example, you might use the context object to apply the spring-loading animations to a single subview of the row instead of to the entire row.\n\nSee Also\nConfiguring rows for the table view\nfunc tableView(UITableView, willDisplay: UITableViewCell, forRowAt: IndexPath)\nTells the delegate the table view is about to draw a cell for a particular row.\nfunc tableView(UITableView, indentationLevelForRowAt: IndexPath) -> Int\nAsks the delegate to return the level of indentation for a row in a given section."
  },
  {
    "title": "tableView(_:willSelectRowAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614943-tableview",
    "html": "Parameters\ntableView\n\nA table view informing the delegate about the impending selection.\n\nindexPath\n\nAn index path locating the row in tableView.\n\nReturn Value\n\nAn index path that confirms or alters the selected row. Return an IndexPath other than indexPath if you want another cell to be selected. Return nil if you don't want the row selected.\n\nDiscussion\n\nThe system calls this method after a user has lifted their finger; the row is highlighted on the initial touch, but only selected when the touch withdraws. You can use UITableViewCell.SelectionStyle.none to disable the appearance of the cell highlight on the initial touch. The system doesn’t call this method if the rows in the table aren’t selectable. See Handling row selection in a table view for more information on controlling table row selection behavior.\n\nSee Also\nResponding to row selections\nHandling row selection in a table view\nDetect when a user taps a table view cell so your app can take the next indicated action.\nSelecting multiple items with a two-finger pan gesture\nAccelerate user selection of multiple items using the multiselect gesture on table and collection views.\nfunc tableView(UITableView, didSelectRowAt: IndexPath)\nTells the delegate a row is selected.\nfunc tableView(UITableView, willDeselectRowAt: IndexPath) -> IndexPath?\nTells the delegate that a specified row is about to be deselected.\nfunc tableView(UITableView, didDeselectRowAt: IndexPath)\nTells the delegate that the specified row is now deselected.\nfunc tableView(UITableView, shouldBeginMultipleSelectionInteractionAt: IndexPath) -> Bool\nAsks the delegate whether the user can use a two-finger pan gesture to select multiple items in a table view.\nfunc tableView(UITableView, didBeginMultipleSelectionInteractionAt: IndexPath)\nTells the delegate when the user starts using a two-finger pan gesture to select multiple rows in a table view.\nfunc tableViewDidEndMultipleSelectionInteraction(UITableView)\nTells the delegate when the user stops using a two-finger pan gesture to select multiple rows in a table view.\nRelated Documentation\nfunc tableView(UITableView, shouldIndentWhileEditingRowAt: IndexPath) -> Bool\nAsks the delegate whether the background of the specified row should be indented while the table view is in editing mode."
  },
  {
    "title": "tableView(_:indentationLevelForRowAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614966-tableview",
    "html": "Parameters\ntableView\n\nThe table view requesting this information.\n\nindexPath\n\nAn index path locating the row in tableView.\n\nReturn Value\n\nReturns the depth of the specified row to show its hierarchical position in the section.\n\nSee Also\nConfiguring rows for the table view\nfunc tableView(UITableView, willDisplay: UITableViewCell, forRowAt: IndexPath)\nTells the delegate the table view is about to draw a cell for a particular row.\nfunc tableView(UITableView, shouldSpringLoadRowAt: IndexPath, with: UISpringLoadedInteractionContext) -> Bool\nCalled to let you fine tune the spring-loading behavior of the rows in a table."
  },
  {
    "title": "tableView(_:didDeselectRowAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614916-tableview",
    "html": "Parameters\ntableView\n\nA table view informing the delegate about the row deselection.\n\nindexPath\n\nAn index path locating the deselected row in tableView.\n\nDiscussion\n\nThe delegate handles row deselections in this method. It could, for example, remove the check-mark image (UITableViewCell.AccessoryType.checkmark) associated with the row.\n\nSee Also\nResponding to row selections\nHandling row selection in a table view\nDetect when a user taps a table view cell so your app can take the next indicated action.\nSelecting multiple items with a two-finger pan gesture\nAccelerate user selection of multiple items using the multiselect gesture on table and collection views.\nfunc tableView(UITableView, willSelectRowAt: IndexPath) -> IndexPath?\nTells the delegate a row is about to be selected.\nfunc tableView(UITableView, didSelectRowAt: IndexPath)\nTells the delegate a row is selected.\nfunc tableView(UITableView, willDeselectRowAt: IndexPath) -> IndexPath?\nTells the delegate that a specified row is about to be deselected.\nfunc tableView(UITableView, shouldBeginMultipleSelectionInteractionAt: IndexPath) -> Bool\nAsks the delegate whether the user can use a two-finger pan gesture to select multiple items in a table view.\nfunc tableView(UITableView, didBeginMultipleSelectionInteractionAt: IndexPath)\nTells the delegate when the user starts using a two-finger pan gesture to select multiple rows in a table view.\nfunc tableViewDidEndMultipleSelectionInteraction(UITableView)\nTells the delegate when the user stops using a two-finger pan gesture to select multiple rows in a table view."
  },
  {
    "title": "tableView(_:willDisplayFooterView:forSection:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614941-tableview",
    "html": "Parameters\ntableView\n\nThe table view informing the delegate of this event.\n\nview\n\nThe footer view that is about to be displayed.\n\nsection\n\nThe index number of the section containing the footer view.\n\nSee Also\nProviding custom header and footer views\nfunc tableView(UITableView, viewForHeaderInSection: Int) -> UIView?\nAsks the delegate for a view to display in the header of the specified section of the table view.\nfunc tableView(UITableView, viewForFooterInSection: Int) -> UIView?\nAsks the delegate for a view to display in the footer of the specified section of the table view.\nfunc tableView(UITableView, willDisplayHeaderView: UIView, forSection: Int)\nTells the delegate that the table is about to display the header view for the specified section."
  },
  {
    "title": "tableView(_:heightForRowAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614998-tableview",
    "html": "Parameters\ntableView\n\nThe table view requesting this information.\n\nindexPath\n\nAn index path that locates a row in tableView.\n\nReturn Value\n\nA nonnegative floating-point value that specifies the height (in points) that row should be.\n\nDiscussion\n\nOverride this method when the rows of your table are not all the same height. If your rows are the same height, do not override this method; assign a value to the rowHeight property of UITableView instead. The value returned by this method takes precedence over the value in the rowHeight property.\n\nBefore it appears onscreen, the table view calls this method for the items in the visible portion of the table. As the user scrolls, the table view calls the method for items only when they move onscreen. It calls the method each time the item appears onscreen, regardless of whether it appeared onscreen previously.\n\nSee Also\nProviding header, footer, and row heights\nfunc tableView(UITableView, heightForHeaderInSection: Int) -> CGFloat\nAsks the delegate for the height to use for the header of a particular section.\nfunc tableView(UITableView, heightForFooterInSection: Int) -> CGFloat\nAsks the delegate for the height to use for the footer of a particular section.\nclass let automaticDimension: CGFloat\nA constant representing the default value for a given dimension.\nRelated Documentation\nTable View Programming Guide for iOS\nfunc tableView(UITableView, estimatedHeightForRowAt: IndexPath) -> CGFloat\nAsks the delegate for the estimated height of a row in a specified location."
  },
  {
    "title": "tableView(_:heightForHeaderInSection:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614855-tableview",
    "html": "Parameters\ntableView\n\nThe table view requesting this information.\n\nsection\n\nAn index number identifying a section of tableView .\n\nReturn Value\n\nA nonnegative floating-point value that specifies the height (in points) of the header for section.\n\nDiscussion\n\nUse this method to specify the height of custom header views returned by your tableView(_:viewForHeaderInSection:) method.\n\nSee Also\nProviding header, footer, and row heights\nfunc tableView(UITableView, heightForRowAt: IndexPath) -> CGFloat\nAsks the delegate for the height to use for a row in a specified location.\nfunc tableView(UITableView, heightForFooterInSection: Int) -> CGFloat\nAsks the delegate for the height to use for the footer of a particular section.\nclass let automaticDimension: CGFloat\nA constant representing the default value for a given dimension.\nRelated Documentation\nfunc tableView(UITableView, estimatedHeightForHeaderInSection: Int) -> CGFloat\nAsks the delegate for the estimated height of the header of a particular section.\nfunc tableView(UITableView, viewForHeaderInSection: Int) -> UIView?\nAsks the delegate for a view to display in the header of the specified section of the table view."
  },
  {
    "title": "tableView(_:estimatedHeightForRowAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614926-tableview",
    "html": "Parameters\ntableView\n\nThe table view requesting this information.\n\nindexPath\n\nAn index path that locates a row in tableView.\n\nReturn Value\n\nA nonnegative floating-point value that estimates the height (in points) that row should be. Return automaticDimension if you have no estimate.\n\nDiscussion\n\nProviding an estimate the height of rows can improve the user experience when loading the table view. If the table contains variable height rows, it might be expensive to calculate all their heights and so lead to a longer load time. Using estimation allows you to defer some of the cost of geometry calculation from load time to scrolling time.\n\nSee Also\nEstimating heights for the table's content\nfunc tableView(UITableView, estimatedHeightForHeaderInSection: Int) -> CGFloat\nAsks the delegate for the estimated height of the header of a particular section.\nfunc tableView(UITableView, estimatedHeightForFooterInSection: Int) -> CGFloat\nAsks the delegate for the estimated height of the footer of a particular section.\nRelated Documentation\nfunc tableView(UITableView, heightForRowAt: IndexPath) -> CGFloat\nAsks the delegate for the height to use for a row in a specified location."
  },
  {
    "title": "debugDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundconfiguration/3656308-debugdescription",
    "html": "Relationships\nFrom Protocol\nCustomDebugStringConvertible\nSee Also\nDescribing a background configuration\nvar description: String\nA textual representation of this instance.\nvar customMirror: Mirror\nThe custom mirror for this instance."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundconfiguration/3600760-hashvalue",
    "html": "Relationships\nFrom Protocol\nHashable\nSee Also\nComparing background configurations\nstatic func == (UIBackgroundConfiguration, UIBackgroundConfiguration) -> Bool\nAn operator for checking whether two background configurations are equal.\nstatic func != (UIBackgroundConfiguration, UIBackgroundConfiguration) -> Bool\nAn operator for checking whether two background configurations are unequal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the background configuration by feeding them into the hasher."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundconfiguration/3600759-hash",
    "html": "Relationships\nFrom Protocol\nHashable\nSee Also\nComparing background configurations\nstatic func == (UIBackgroundConfiguration, UIBackgroundConfiguration) -> Bool\nAn operator for checking whether two background configurations are equal.\nstatic func != (UIBackgroundConfiguration, UIBackgroundConfiguration) -> Bool\nAn operator for checking whether two background configurations are unequal.\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundconfiguration/3600750",
    "html": "See Also\nComparing background configurations\nstatic func == (UIBackgroundConfiguration, UIBackgroundConfiguration) -> Bool\nAn operator for checking whether two background configurations are equal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the background configuration by feeding them into the hasher.\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundconfiguration/3600751",
    "html": "See Also\nComparing background configurations\nstatic func != (UIBackgroundConfiguration, UIBackgroundConfiguration) -> Bool\nAn operator for checking whether two background configurations are unequal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the background configuration by feeding them into the hasher.\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "image | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundconfiguration/3750760-image",
    "html": "Discussion\n\nThis property contains the image displayed in the view’s background. If this property is set to nil, the view displays no background image.\n\nChanging the image in this property doesn’t change the size of the view automatically. You can use the background configuration’s imageContentMode to specify how to lay out the image when its size differs from the size in the view’s bounds.\n\nSee Also\nCustomizing the background\nvar customView: UIView?\nA custom view for the background.\nvar cornerRadius: CGFloat\nThe preferred corner radius, using a continuous corner curve, for the background and stroke.\nvar backgroundInsets: NSDirectionalEdgeInsets\nThe insets (or outsets, if negative) for the background and stroke, relative to the edges of the containing view.\nvar edgesAddingLayoutMarginsToBackgroundInsets: NSDirectionalRectEdge\nThe edges on which the configuration adds the containing view’s layout margins to the background insets.\nvar backgroundColor: UIColor?\nThe color of the background.\nvar backgroundColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the background color.\nfunc resolvedBackgroundColor(for: UIColor) -> UIColor\nGenerates the resolved background color for the specified tint color, using the background color and color transformer.\nvar visualEffect: UIVisualEffect?\nThe visual effect that the configuration applies to the background.\nvar strokeColor: UIColor?\nThe color of the stroke.\nvar strokeColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the stroke color.\nfunc resolvedStrokeColor(for: UIColor) -> UIColor\nGenerates the resolved stroke color for the specified tint color, using the stroke color and color transformer.\nvar strokeWidth: CGFloat\nThe width of the stroke.\nvar strokeOutset: CGFloat\nThe outset (or inset, if negative) for the stroke.\nvar imageContentMode: UIView.ContentMode\nA property that determines the layout of a background image in a view when its bounds change."
  },
  {
    "title": "resolvedBackgroundColor(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundconfiguration/3600330-resolvedbackgroundcolor",
    "html": "Discussion\n\nThe resulting color depends on backgroundColor and backgroundColorTransformer.\n\nSee Also\nCustomizing the background\nvar customView: UIView?\nA custom view for the background.\nvar cornerRadius: CGFloat\nThe preferred corner radius, using a continuous corner curve, for the background and stroke.\nvar backgroundInsets: NSDirectionalEdgeInsets\nThe insets (or outsets, if negative) for the background and stroke, relative to the edges of the containing view.\nvar edgesAddingLayoutMarginsToBackgroundInsets: NSDirectionalRectEdge\nThe edges on which the configuration adds the containing view’s layout margins to the background insets.\nvar backgroundColor: UIColor?\nThe color of the background.\nvar backgroundColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the background color.\nvar visualEffect: UIVisualEffect?\nThe visual effect that the configuration applies to the background.\nvar strokeColor: UIColor?\nThe color of the stroke.\nvar strokeColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the stroke color.\nfunc resolvedStrokeColor(for: UIColor) -> UIColor\nGenerates the resolved stroke color for the specified tint color, using the stroke color and color transformer.\nvar strokeWidth: CGFloat\nThe width of the stroke.\nvar strokeOutset: CGFloat\nThe outset (or inset, if negative) for the stroke.\nvar image: UIImage?\nThe image displayed in the view’s background.\nvar imageContentMode: UIView.ContentMode\nA property that determines the layout of a background image in a view when its bounds change."
  },
  {
    "title": "strokeColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundconfiguration/3600332-strokecolor",
    "html": "Discussion\n\nIf the value is nil, the stroke color is the view’s tint color. Use clear for a transparent stroke with no color.\n\nSee Also\nCustomizing the background\nvar customView: UIView?\nA custom view for the background.\nvar cornerRadius: CGFloat\nThe preferred corner radius, using a continuous corner curve, for the background and stroke.\nvar backgroundInsets: NSDirectionalEdgeInsets\nThe insets (or outsets, if negative) for the background and stroke, relative to the edges of the containing view.\nvar edgesAddingLayoutMarginsToBackgroundInsets: NSDirectionalRectEdge\nThe edges on which the configuration adds the containing view’s layout margins to the background insets.\nvar backgroundColor: UIColor?\nThe color of the background.\nvar backgroundColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the background color.\nfunc resolvedBackgroundColor(for: UIColor) -> UIColor\nGenerates the resolved background color for the specified tint color, using the background color and color transformer.\nvar visualEffect: UIVisualEffect?\nThe visual effect that the configuration applies to the background.\nvar strokeColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the stroke color.\nfunc resolvedStrokeColor(for: UIColor) -> UIColor\nGenerates the resolved stroke color for the specified tint color, using the stroke color and color transformer.\nvar strokeWidth: CGFloat\nThe width of the stroke.\nvar strokeOutset: CGFloat\nThe outset (or inset, if negative) for the stroke.\nvar image: UIImage?\nThe image displayed in the view’s background.\nvar imageContentMode: UIView.ContentMode\nA property that determines the layout of a background image in a view when its bounds change."
  },
  {
    "title": "resolvedStrokeColor(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundconfiguration/3600331-resolvedstrokecolor",
    "html": "Discussion\n\nThe resulting color depends on strokeColor and strokeColorTransformer.\n\nSee Also\nCustomizing the background\nvar customView: UIView?\nA custom view for the background.\nvar cornerRadius: CGFloat\nThe preferred corner radius, using a continuous corner curve, for the background and stroke.\nvar backgroundInsets: NSDirectionalEdgeInsets\nThe insets (or outsets, if negative) for the background and stroke, relative to the edges of the containing view.\nvar edgesAddingLayoutMarginsToBackgroundInsets: NSDirectionalRectEdge\nThe edges on which the configuration adds the containing view’s layout margins to the background insets.\nvar backgroundColor: UIColor?\nThe color of the background.\nvar backgroundColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the background color.\nfunc resolvedBackgroundColor(for: UIColor) -> UIColor\nGenerates the resolved background color for the specified tint color, using the background color and color transformer.\nvar visualEffect: UIVisualEffect?\nThe visual effect that the configuration applies to the background.\nvar strokeColor: UIColor?\nThe color of the stroke.\nvar strokeColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the stroke color.\nvar strokeWidth: CGFloat\nThe width of the stroke.\nvar strokeOutset: CGFloat\nThe outset (or inset, if negative) for the stroke.\nvar image: UIImage?\nThe image displayed in the view’s background.\nvar imageContentMode: UIView.ContentMode\nA property that determines the layout of a background image in a view when its bounds change."
  },
  {
    "title": "strokeColorTransformer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundconfiguration/3600333-strokecolortransformer",
    "html": "Discussion\n\nIf the value is nil, the configuration uses strokeColor without any transformations.\n\nSee Also\nCustomizing the background\nvar customView: UIView?\nA custom view for the background.\nvar cornerRadius: CGFloat\nThe preferred corner radius, using a continuous corner curve, for the background and stroke.\nvar backgroundInsets: NSDirectionalEdgeInsets\nThe insets (or outsets, if negative) for the background and stroke, relative to the edges of the containing view.\nvar edgesAddingLayoutMarginsToBackgroundInsets: NSDirectionalRectEdge\nThe edges on which the configuration adds the containing view’s layout margins to the background insets.\nvar backgroundColor: UIColor?\nThe color of the background.\nvar backgroundColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the background color.\nfunc resolvedBackgroundColor(for: UIColor) -> UIColor\nGenerates the resolved background color for the specified tint color, using the background color and color transformer.\nvar visualEffect: UIVisualEffect?\nThe visual effect that the configuration applies to the background.\nvar strokeColor: UIColor?\nThe color of the stroke.\nfunc resolvedStrokeColor(for: UIColor) -> UIColor\nGenerates the resolved stroke color for the specified tint color, using the stroke color and color transformer.\nvar strokeWidth: CGFloat\nThe width of the stroke.\nvar strokeOutset: CGFloat\nThe outset (or inset, if negative) for the stroke.\nvar image: UIImage?\nThe image displayed in the view’s background.\nvar imageContentMode: UIView.ContentMode\nA property that determines the layout of a background image in a view when its bounds change."
  },
  {
    "title": "strokeWidth | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundconfiguration/3600335-strokewidth",
    "html": "Discussion\n\nThe default value is 0.0.\n\nSee Also\nCustomizing the background\nvar customView: UIView?\nA custom view for the background.\nvar cornerRadius: CGFloat\nThe preferred corner radius, using a continuous corner curve, for the background and stroke.\nvar backgroundInsets: NSDirectionalEdgeInsets\nThe insets (or outsets, if negative) for the background and stroke, relative to the edges of the containing view.\nvar edgesAddingLayoutMarginsToBackgroundInsets: NSDirectionalRectEdge\nThe edges on which the configuration adds the containing view’s layout margins to the background insets.\nvar backgroundColor: UIColor?\nThe color of the background.\nvar backgroundColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the background color.\nfunc resolvedBackgroundColor(for: UIColor) -> UIColor\nGenerates the resolved background color for the specified tint color, using the background color and color transformer.\nvar visualEffect: UIVisualEffect?\nThe visual effect that the configuration applies to the background.\nvar strokeColor: UIColor?\nThe color of the stroke.\nvar strokeColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the stroke color.\nfunc resolvedStrokeColor(for: UIColor) -> UIColor\nGenerates the resolved stroke color for the specified tint color, using the stroke color and color transformer.\nvar strokeOutset: CGFloat\nThe outset (or inset, if negative) for the stroke.\nvar image: UIImage?\nThe image displayed in the view’s background.\nvar imageContentMode: UIView.ContentMode\nA property that determines the layout of a background image in a view when its bounds change."
  },
  {
    "title": "pageViewController(_:viewControllerAfter:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipageviewcontrollerdatasource/1614118-pageviewcontroller",
    "html": "Required\n\nParameters\npageViewController\n\nThe page view controller\n\nviewController\n\nThe view controller that the user navigated away from.\n\nReturn Value\n\nThe view controller after the given view controller, or nil to indicate that there is no next view controller.\n\nSee Also\nProviding View Controllers\nfunc pageViewController(UIPageViewController, viewControllerBefore: UIViewController) -> UIViewController?\nReturns the view controller before the given view controller.\n\nRequired"
  },
  {
    "title": "tableView(_:leadingSwipeActionsConfigurationForRowAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/2902366-tableview",
    "html": "Parameters\ntableView\n\nThe table view containing the row.\n\nindexPath\n\nThe index path of the row.\n\nReturn Value\n\nThe swipe actions to display next to the leading edge of the row. Return nil if you want the table to display the default set of actions.\n\nDiscussion\n\nUse this method to return a set of actions to display when the user swipes the row. The actions you return are displayed on the leading edge of the row. For example, in a left-to-right language environment, they are displayed on the left side of the row when the user swipes from left to right.\n\nSee Also\nResponding to row actions\nfunc tableView(UITableView, trailingSwipeActionsConfigurationForRowAt: IndexPath) -> UISwipeActionsConfiguration?\nReturns the swipe actions to display on the trailing edge of the row.\nfunc tableView(UITableView, shouldShowMenuForRowAt: IndexPath) -> Bool\nAsks the delegate if the editing menu should be shown for a certain row.\nDeprecated\nfunc tableView(UITableView, canPerformAction: Selector, forRowAt: IndexPath, withSender: Any?) -> Bool\nAsks the delegate if the editing menu should omit the Copy or Paste command for a given row.\nDeprecated\nfunc tableView(UITableView, performAction: Selector, forRowAt: IndexPath, withSender: Any?)\nTells the delegate to perform a copy or paste operation on the content of a given row.\nDeprecated\nfunc tableView(UITableView, editActionsForRowAt: IndexPath) -> [UITableViewRowAction]?\nAsks the delegate for the actions to display in response to a swipe in the specified row.\nDeprecated"
  },
  {
    "title": "tableView(_:trailingSwipeActionsConfigurationForRowAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/2902367-tableview",
    "html": "Parameters\ntableView\n\nThe table view containing the row.\n\nindexPath\n\nThe index path of the row.\n\nReturn Value\n\nThe swipe actions to display next to the trailing edge of the row. Return nil if you want the table to display the default set of actions.\n\nDiscussion\n\nUse this method to return a set of actions to display when the user swipes the row. The actions you return are displayed on the trailing edge of the row. For example, in a left-to-right language environment, they are displayed on the right side of the row when the user swipes from right to left.\n\nSee Also\nResponding to row actions\nfunc tableView(UITableView, leadingSwipeActionsConfigurationForRowAt: IndexPath) -> UISwipeActionsConfiguration?\nReturns the swipe actions to display on the leading edge of the row.\nfunc tableView(UITableView, shouldShowMenuForRowAt: IndexPath) -> Bool\nAsks the delegate if the editing menu should be shown for a certain row.\nDeprecated\nfunc tableView(UITableView, canPerformAction: Selector, forRowAt: IndexPath, withSender: Any?) -> Bool\nAsks the delegate if the editing menu should omit the Copy or Paste command for a given row.\nDeprecated\nfunc tableView(UITableView, performAction: Selector, forRowAt: IndexPath, withSender: Any?)\nTells the delegate to perform a copy or paste operation on the content of a given row.\nDeprecated\nfunc tableView(UITableView, editActionsForRowAt: IndexPath) -> [UITableViewRowAction]?\nAsks the delegate for the actions to display in response to a swipe in the specified row.\nDeprecated"
  },
  {
    "title": "tableView(_:shouldShowMenuForRowAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614950-tableview",
    "html": "Parameters\ntableView\n\nThe table view that is making this request.\n\nindexPath\n\nThe index path of the row.\n\nReturn Value\n\ntrue if the editing menu should be shown positioned near the row and pointing to it, otherwise false. The default value is false.\n\nDiscussion\n\nIf the user tap-holds a certain row in the table view, this method (if implemented) is invoked first. Return false if the editing menu shouldn’t be shown—for example, the cell corresponding to the row contains content that shouldn’t be copied or pasted over.\n\nSee Also\nResponding to row actions\nfunc tableView(UITableView, leadingSwipeActionsConfigurationForRowAt: IndexPath) -> UISwipeActionsConfiguration?\nReturns the swipe actions to display on the leading edge of the row.\nfunc tableView(UITableView, trailingSwipeActionsConfigurationForRowAt: IndexPath) -> UISwipeActionsConfiguration?\nReturns the swipe actions to display on the trailing edge of the row.\nfunc tableView(UITableView, canPerformAction: Selector, forRowAt: IndexPath, withSender: Any?) -> Bool\nAsks the delegate if the editing menu should omit the Copy or Paste command for a given row.\nDeprecated\nfunc tableView(UITableView, performAction: Selector, forRowAt: IndexPath, withSender: Any?)\nTells the delegate to perform a copy or paste operation on the content of a given row.\nDeprecated\nfunc tableView(UITableView, editActionsForRowAt: IndexPath) -> [UITableViewRowAction]?\nAsks the delegate for the actions to display in response to a swipe in the specified row.\nDeprecated"
  },
  {
    "title": "tableView(_:willEndContextMenuInteraction:animator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/3601232-tableview",
    "html": "Parameters\ntableView\n\nThe table view informing the delegate of this event.\n\nconfiguration\n\nThe ending configuration.\n\nanimator\n\nThe animations to run alongside the disappearance transition.\n\nSee Also\nManaging context menus\nAdding Context Menus in Your App\nProvide quick access to useful actions by adding context menus to your iOS app.\nfunc tableView(UITableView, contextMenuConfigurationForRowAt: IndexPath, point: CGPoint) -> UIContextMenuConfiguration?\nReturns a context menu configuration for the row at a point.\nfunc tableView(UITableView, previewForDismissingContextMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nReturns the destination view when dismissing a context menu.\nfunc tableView(UITableView, previewForHighlightingContextMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nReturns a view to override the default preview the table view created.\nfunc tableView(UITableView, willDisplayContextMenu: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nInforms the delegate when a context menu will appear.\nfunc tableView(UITableView, willPerformPreviewActionForMenuWith: UIContextMenuConfiguration, animator: UIContextMenuInteractionCommitAnimating)\nInforms the delegate when a user triggers a commit by tapping the preview."
  },
  {
    "title": "textToSecondaryTextHorizontalPadding | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3601049-texttosecondarytexthorizontalpad",
    "html": "Discussion\n\nThis value only applies when there’s both text and secondary text, and they’re in a side-by-side layout that prefersSideBySideTextAndSecondaryText specifies.\n\nSee Also\nCustomizing layout\nvar axesPreservingSuperviewLayoutMargins: UIAxis\nA Boolean value that determines whether the content view preserves the layout margins that it inherits from its superview on the horizontal or vertical axes.\nvar directionalLayoutMargins: NSDirectionalEdgeInsets\nThe margins between the content and the edges of the content view.\nvar prefersSideBySideTextAndSecondaryText: Bool\nA Boolean value that determines whether the configuration positions the text and secondary text side by side.\nvar imageToTextPadding: CGFloat\nThe padding between the image and text.\nvar textToSecondaryTextVerticalPadding: CGFloat\nThe vertical padding between the text and secondary text."
  },
  {
    "title": "backgroundColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundconfiguration/3600317-backgroundcolor",
    "html": "Discussion\n\nIf the value is nil, the background color is the view’s tint color. Use clear for a transparent background with no color.\n\nSee Also\nCustomizing the background\nvar customView: UIView?\nA custom view for the background.\nvar cornerRadius: CGFloat\nThe preferred corner radius, using a continuous corner curve, for the background and stroke.\nvar backgroundInsets: NSDirectionalEdgeInsets\nThe insets (or outsets, if negative) for the background and stroke, relative to the edges of the containing view.\nvar edgesAddingLayoutMarginsToBackgroundInsets: NSDirectionalRectEdge\nThe edges on which the configuration adds the containing view’s layout margins to the background insets.\nvar backgroundColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the background color.\nfunc resolvedBackgroundColor(for: UIColor) -> UIColor\nGenerates the resolved background color for the specified tint color, using the background color and color transformer.\nvar visualEffect: UIVisualEffect?\nThe visual effect that the configuration applies to the background.\nvar strokeColor: UIColor?\nThe color of the stroke.\nvar strokeColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the stroke color.\nfunc resolvedStrokeColor(for: UIColor) -> UIColor\nGenerates the resolved stroke color for the specified tint color, using the stroke color and color transformer.\nvar strokeWidth: CGFloat\nThe width of the stroke.\nvar strokeOutset: CGFloat\nThe outset (or inset, if negative) for the stroke.\nvar image: UIImage?\nThe image displayed in the view’s background.\nvar imageContentMode: UIView.ContentMode\nA property that determines the layout of a background image in a view when its bounds change."
  },
  {
    "title": "UISplitViewController.DisplayMode.twoDisplaceSecondary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontroller/displaymode/twodisplacesecondary",
    "html": "Discussion\n\nThis display mode is only available for UISplitViewController.Style.tripleColumn interfaces.\n\nThis display mode shows both sidebars, which partially displace the secondary view controller offscreen to make space for the primary column. The secondary view controller is dimmed out, preventing interaction with its view. Touching the dimmed view or using a gesture returns the interface to the UISplitViewController.DisplayMode.oneBesideSecondary display mode.\n\nThis display mode is available for the UISplitViewController.SplitBehavior.displace split behavior."
  },
  {
    "title": "UISplitViewController.DisplayMode.automatic | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontroller/displaymode/automatic",
    "html": "Discussion\n\nThis constant represents the default value of the preferredDisplayMode property. Although you can assign the property this constant as its value, the displayMode property never reports it."
  },
  {
    "title": "numberOfSections(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdatasource/1618023-numberofsections",
    "html": "Parameters\ncollectionView\n\nThe collection view requesting this information.\n\nReturn Value\n\nThe number of sections in collectionView.\n\nDiscussion\n\nIf you don’t implement this method, the collection view uses a default value of 1.\n\nSee Also\nGetting item and section metrics\nfunc collectionView(UICollectionView, numberOfItemsInSection: Int) -> Int\nAsks your data source object for the number of items in the specified section.\n\nRequired"
  },
  {
    "title": "backgroundInsets | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundconfiguration/3600319-backgroundinsets",
    "html": "Discussion\n\nThis property applies to the custom view. The default value is zero.\n\nSee Also\nCustomizing the background\nvar customView: UIView?\nA custom view for the background.\nvar cornerRadius: CGFloat\nThe preferred corner radius, using a continuous corner curve, for the background and stroke.\nvar edgesAddingLayoutMarginsToBackgroundInsets: NSDirectionalRectEdge\nThe edges on which the configuration adds the containing view’s layout margins to the background insets.\nvar backgroundColor: UIColor?\nThe color of the background.\nvar backgroundColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the background color.\nfunc resolvedBackgroundColor(for: UIColor) -> UIColor\nGenerates the resolved background color for the specified tint color, using the background color and color transformer.\nvar visualEffect: UIVisualEffect?\nThe visual effect that the configuration applies to the background.\nvar strokeColor: UIColor?\nThe color of the stroke.\nvar strokeColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the stroke color.\nfunc resolvedStrokeColor(for: UIColor) -> UIColor\nGenerates the resolved stroke color for the specified tint color, using the stroke color and color transformer.\nvar strokeWidth: CGFloat\nThe width of the stroke.\nvar strokeOutset: CGFloat\nThe outset (or inset, if negative) for the stroke.\nvar image: UIImage?\nThe image displayed in the view’s background.\nvar imageContentMode: UIView.ContentMode\nA property that determines the layout of a background image in a view when its bounds change."
  },
  {
    "title": "cornerRadius | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundconfiguration/3600321-cornerradius",
    "html": "Discussion\n\nThis value doesn’t apply to the custom view. The default value is 0.0.\n\nIf the view is too small to fit the requested radius, the system adjusts the corner curve and radius to fit.\n\nSee Also\nCustomizing the background\nvar customView: UIView?\nA custom view for the background.\nvar backgroundInsets: NSDirectionalEdgeInsets\nThe insets (or outsets, if negative) for the background and stroke, relative to the edges of the containing view.\nvar edgesAddingLayoutMarginsToBackgroundInsets: NSDirectionalRectEdge\nThe edges on which the configuration adds the containing view’s layout margins to the background insets.\nvar backgroundColor: UIColor?\nThe color of the background.\nvar backgroundColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the background color.\nfunc resolvedBackgroundColor(for: UIColor) -> UIColor\nGenerates the resolved background color for the specified tint color, using the background color and color transformer.\nvar visualEffect: UIVisualEffect?\nThe visual effect that the configuration applies to the background.\nvar strokeColor: UIColor?\nThe color of the stroke.\nvar strokeColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the stroke color.\nfunc resolvedStrokeColor(for: UIColor) -> UIColor\nGenerates the resolved stroke color for the specified tint color, using the stroke color and color transformer.\nvar strokeWidth: CGFloat\nThe width of the stroke.\nvar strokeOutset: CGFloat\nThe outset (or inset, if negative) for the stroke.\nvar image: UIImage?\nThe image displayed in the view’s background.\nvar imageContentMode: UIView.ContentMode\nA property that determines the layout of a background image in a view when its bounds change."
  },
  {
    "title": "listPlainCell() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundconfiguration/3600326-listplaincell",
    "html": "Return Value\n\nThe default configuration for a cell in a plain list.\n\nDiscussion\n\nCreate this configuration to update the styling for the background of a cell in a list. When you apply this configuration to a cell, the background of the cell matches the system default styling for a plain cell, including styling for highlighted and selected states.\n\nFor an appearance consistent with system defaults, use this background configuration for a cell in these contexts:\n\nA table view that you configure with the UITableView.Style.plain enumeration case.\n\nA collection view list that you configure with the UICollectionLayoutListConfiguration.Appearance.plain enumeration case.\n\nSee Also\nCreating cell background configurations\nstatic func listGroupedCell() -> UIBackgroundConfiguration\nCreates the default configuration you use to style a cell in a grouped list.\nstatic func listSidebarCell() -> UIBackgroundConfiguration\nCreates the default configuration you use to style a cell in a sidebar list.\nstatic func listAccompaniedSidebarCell() -> UIBackgroundConfiguration\nCreates the default configuration you use to style a cell in an accompanied sidebar list."
  },
  {
    "title": "tableView(_:titleForFooterInSection:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdatasource/1614994-tableview",
    "html": "Parameters\ntableView\n\nThe table-view object asking for the title.\n\nsection\n\nAn index number identifying a section of tableView.\n\nReturn Value\n\nA string to use as the title of the section footer. If you return nil , the section will have no title.\n\nDiscussion\n\nThe table view uses a fixed font style for section footer titles. If you want a different font style, return a custom view (for example, a UILabel object) in the delegate method tableView(_:viewForFooterInSection:) instead.\n\nIf you don’t implement this method or the tableView(_:viewForFooterInSection:) method, the table doesn’t display footers for sections. If you implement both methods, the tableView(_:viewForFooterInSection:) method takes priority.\n\nSee Also\nProviding cells, headers, and footers\nfunc tableView(UITableView, cellForRowAt: IndexPath) -> UITableViewCell\nAsks the data source for a cell to insert in a particular location of the table view.\n\nRequired\n\nfunc tableView(UITableView, titleForHeaderInSection: Int) -> String?\nAsks the data source for the title of the header of the specified section of the table view."
  },
  {
    "title": "tableView(_:commit:forRowAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdatasource/1614871-tableview",
    "html": "Parameters\ntableView\n\nThe table-view object requesting the insertion or deletion.\n\neditingStyle\n\nThe cell editing style corresponding to a insertion or deletion requested for the row specified by indexPath. Possible editing styles are UITableViewCell.EditingStyle.insert or UITableViewCell.EditingStyle.delete.\n\nindexPath\n\nAn index path locating the row in tableView.\n\nDiscussion\n\nWhen users tap the insertion (green plus) control or Delete button associated with a UITableViewCell object in the table view, the table view sends this message to the data source, asking it to commit the change. (If the user taps the deletion (red minus) control, the table view then displays the Delete button to get confirmation.) The data source commits the insertion or deletion by invoking the UITableView methods insertRows(at:with:) or deleteRows(at:with:), as appropriate.\n\nTo enable the swipe-to-delete feature of table views (wherein a user swipes horizontally across a row to display a Delete button), you must implement this method.\n\nYou shouldn’t call setEditing(_:animated:) within an implementation of this method. If for some reason you must, invoke it after a delay by using the perform(_:with:afterDelay:) method.\n\nSee Also\nInserting or deleting table rows\nfunc tableView(UITableView, canEditRowAt: IndexPath) -> Bool\nAsks the data source to verify that the given row is editable."
  },
  {
    "title": "tableView(_:canEditRowAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdatasource/1614900-tableview",
    "html": "Parameters\ntableView\n\nThe table-view object requesting this information.\n\nindexPath\n\nAn index path locating a row in tableView.\n\nReturn Value\n\ntrue if the row indicated by indexPath is editable; otherwise, false.\n\nDiscussion\n\nThe method permits the data source to exclude individual rows from being treated as editable. Editable rows display the insertion or deletion control in their cells. If this method isn’t implemented, all rows are assumed to be editable. Rows that aren’t editable ignore the editingStyle property of a UITableViewCell object and do no indentation for the deletion or insertion control. Rows that are editable, but that don’t want to have an insertion or remove control shown, can return UITableViewCell.EditingStyle.none from the tableView(_:editingStyleForRowAt:) delegate method.\n\nSee Also\nInserting or deleting table rows\nfunc tableView(UITableView, commit: UITableViewCell.EditingStyle, forRowAt: IndexPath)\nAsks the data source to commit the insertion or deletion of a specified row."
  },
  {
    "title": "defaultBackgroundConfiguration() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewcell/4013360-defaultbackgroundconfiguration",
    "html": "Return Value\n\nA default background configuration. The system determines default values for the configuration according to the section where the cell appears.\n\nSee Also\nConfiguring the background\nvar backgroundConfiguration: UIBackgroundConfiguration?\nThe current background configuration of the cell.\nvar automaticallyUpdatesBackgroundConfiguration: Bool\nA Boolean value that determines whether the cell automatically updates its background configuration when its state changes.\nvar backgroundView: UIView?\nThe view that displays behind the cell’s other content.\nvar selectedBackgroundView: UIView?\nThe view that displays just above the background view for a selected cell."
  },
  {
    "title": "updateConfiguration(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewcell/3600950-updateconfiguration",
    "html": "Discussion\n\nAvoid calling this method directly. Instead, use setNeedsUpdateConfiguration() to request an update.\n\nOverride this method in a subclass to update the cell’s configuration using the provided state.\n\nSee Also\nManaging the state\nvar configurationState: UICellConfigurationState\nThe current configuration state of the cell.\nfunc setNeedsUpdateConfiguration()\nInforms the cell to update its configuration for its current state.\nvar configurationUpdateHandler: UICollectionViewCell.ConfigurationUpdateHandler?\nA block for handling updates to the cell’s configuration using the current state.\ntypealias UICollectionViewCell.ConfigurationUpdateHandler\nThe type of block for handling updates to the cell’s configuration using the current state.\nvar isSelected: Bool\nThe selection state of the cell.\nvar isHighlighted: Bool\nThe highlight state of the cell."
  },
  {
    "title": "isSelected | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewcell/1620130-isselected",
    "html": "Discussion\n\nThis property manages the selection state of the cell only. The default value of this property is false, which indicates an unselected state.\n\nYou typically don’t set the value of this property directly. Changing the value of this property programmatically doesn’t change the appearance of the cell. The preferred way to select the cell and highlight it’s to use the selection methods of the collection view object.\n\nSee Also\nManaging the state\nvar configurationState: UICellConfigurationState\nThe current configuration state of the cell.\nfunc setNeedsUpdateConfiguration()\nInforms the cell to update its configuration for its current state.\nfunc updateConfiguration(using: UICellConfigurationState)\nUpdates the cell’s configuration using the current state.\nvar configurationUpdateHandler: UICollectionViewCell.ConfigurationUpdateHandler?\nA block for handling updates to the cell’s configuration using the current state.\ntypealias UICollectionViewCell.ConfigurationUpdateHandler\nThe type of block for handling updates to the cell’s configuration using the current state.\nvar isHighlighted: Bool\nThe highlight state of the cell."
  },
  {
    "title": "isHighlighted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewcell/1620134-ishighlighted",
    "html": "Discussion\n\nThis property manages the highlight state of the cell only. The default value of this property is false, which indicates that the cell isn’t in a highlighted state.\n\nYou typically don’t set the value of this property directly. Instead, the preferred way to select the cell and highlight it’s to use the selection methods of the collection view object.\n\nSee Also\nManaging the state\nvar configurationState: UICellConfigurationState\nThe current configuration state of the cell.\nfunc setNeedsUpdateConfiguration()\nInforms the cell to update its configuration for its current state.\nfunc updateConfiguration(using: UICellConfigurationState)\nUpdates the cell’s configuration using the current state.\nvar configurationUpdateHandler: UICollectionViewCell.ConfigurationUpdateHandler?\nA block for handling updates to the cell’s configuration using the current state.\ntypealias UICollectionViewCell.ConfigurationUpdateHandler\nThe type of block for handling updates to the cell’s configuration using the current state.\nvar isSelected: Bool\nThe selection state of the cell."
  },
  {
    "title": "dragStateDidChange(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewcell/2897262-dragstatedidchange",
    "html": "Discussion\n\nSubclasses can override this method and use it to change the cell's appearance during drag and drop operations. For example, you might use this method to hide or disable controls that you do not want to be visible while the cell is being dragged. You can also use this method to alter the disabled appearance of the cell that remains in the collection view at the original location of the drag.\n\nSee Also\nManaging drag state changes\nenum UICollectionViewCell.DragState\nConstants indicating the current state of the drag operation."
  },
  {
    "title": "customMirror | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentunavailableconfigurationstate/4176582-custommirror",
    "html": "Relationships\nFrom Protocol\nCustomReflectable"
  },
  {
    "title": "tableView(_:willDisplayContextMenu:animator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/3601231-tableview",
    "html": "Parameters\ntableView\n\nThe table view informing the delegate of this event.\n\nconfiguration\n\nThe configuration of the menu to display.\n\nanimator\n\nThe animations to run alongside the appearance transition.\n\nSee Also\nManaging context menus\nAdding Context Menus in Your App\nProvide quick access to useful actions by adding context menus to your iOS app.\nfunc tableView(UITableView, contextMenuConfigurationForRowAt: IndexPath, point: CGPoint) -> UIContextMenuConfiguration?\nReturns a context menu configuration for the row at a point.\nfunc tableView(UITableView, previewForDismissingContextMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nReturns the destination view when dismissing a context menu.\nfunc tableView(UITableView, previewForHighlightingContextMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nReturns a view to override the default preview the table view created.\nfunc tableView(UITableView, willEndContextMenuInteraction: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nInforms the delegate when a context menu will disappear.\nfunc tableView(UITableView, willPerformPreviewActionForMenuWith: UIContextMenuConfiguration, animator: UIContextMenuInteractionCommitAnimating)\nInforms the delegate when a user triggers a commit by tapping the preview."
  },
  {
    "title": "tableView(_:previewForHighlightingContextMenuWithConfiguration:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/3295958-tableview",
    "html": "Parameters\ntableView\n\nThe table view informing the delegate of this event.\n\nconfiguration\n\nThe configuration of the menu being highlighted.\n\nSee Also\nManaging context menus\nAdding Context Menus in Your App\nProvide quick access to useful actions by adding context menus to your iOS app.\nfunc tableView(UITableView, contextMenuConfigurationForRowAt: IndexPath, point: CGPoint) -> UIContextMenuConfiguration?\nReturns a context menu configuration for the row at a point.\nfunc tableView(UITableView, previewForDismissingContextMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nReturns the destination view when dismissing a context menu.\nfunc tableView(UITableView, willDisplayContextMenu: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nInforms the delegate when a context menu will appear.\nfunc tableView(UITableView, willEndContextMenuInteraction: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nInforms the delegate when a context menu will disappear.\nfunc tableView(UITableView, willPerformPreviewActionForMenuWith: UIContextMenuConfiguration, animator: UIContextMenuInteractionCommitAnimating)\nInforms the delegate when a user triggers a commit by tapping the preview."
  },
  {
    "title": "tableView(_:previewForDismissingContextMenuWithConfiguration:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/3295957-tableview",
    "html": "Parameters\ntableView\n\nThe table view informing the delegate of this event.\n\nconfiguration\n\nThe configuration of the menu being displayed.\n\nSee Also\nManaging context menus\nAdding Context Menus in Your App\nProvide quick access to useful actions by adding context menus to your iOS app.\nfunc tableView(UITableView, contextMenuConfigurationForRowAt: IndexPath, point: CGPoint) -> UIContextMenuConfiguration?\nReturns a context menu configuration for the row at a point.\nfunc tableView(UITableView, previewForHighlightingContextMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nReturns a view to override the default preview the table view created.\nfunc tableView(UITableView, willDisplayContextMenu: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nInforms the delegate when a context menu will appear.\nfunc tableView(UITableView, willEndContextMenuInteraction: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nInforms the delegate when a context menu will disappear.\nfunc tableView(UITableView, willPerformPreviewActionForMenuWith: UIContextMenuConfiguration, animator: UIContextMenuInteractionCommitAnimating)\nInforms the delegate when a user triggers a commit by tapping the preview."
  },
  {
    "title": "UIListContentConfiguration.TextProperties | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/textproperties",
    "html": "Topics\nConfiguring text properties\nvar font: UIFont\nThe font for the text.\nvar color: UIColor\nThe color of the text.\nvar colorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the text color.\nfunc resolvedColor() -> UIColor\nGenerates the resolved color for the specified color, using the text color and color transformer.\nvar alignment: UIListContentConfiguration.TextProperties.TextAlignment\nThe alignment for the text.\nvar lineBreakMode: NSLineBreakMode\nThe line break mode to use for the text.\nvar numberOfLines: Int\nThe maximum number of lines for the text.\nvar adjustsFontSizeToFitWidth: Bool\nA Boolean value that determines whether the configuration automatically adjusts the font size of the text when necessary to fit in the available width.\nvar minimumScaleFactor: CGFloat\nThe smallest multiplier for the font size that the configuration uses to make the text fit.\nvar allowsDefaultTighteningForTruncation: Bool\nA Boolean value that determines whether the configuration tightens the text before truncating.\nvar adjustsFontForContentSizeCategory: Bool\nA Boolean value that determines whether the configuration automatically updates the font when the content size category changes.\nenum UIListContentConfiguration.TextProperties.TextAlignment\nConstants that specify the visual alignment of the text.\nvar transform: UIListContentConfiguration.TextProperties.TextTransform\nThe transform to apply to the text.\nenum UIListContentConfiguration.TextProperties.TextTransform\nConstants that specify the transform to apply to the text.\nvar showsExpansionTextWhenTruncated: Bool\nA Boolean value that determines whether the full text displays when the pointer hovers over the truncated text.\nComparing text properties\nstatic func == (UIListContentConfiguration.TextProperties, UIListContentConfiguration.TextProperties) -> Bool\nAn operator used to check whether two text properties structures are equal.\nstatic func != (UIListContentConfiguration.TextProperties, UIListContentConfiguration.TextProperties) -> Bool\nAn operator used to check whether two text properties structures are not equal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the text properties structure by feeding them into the hasher.\nvar hashValue: Int\nThe hash value.\nDescribing text properties\nvar description: String\nA textual representation of this instance.\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging.\nvar customMirror: Mirror\nThe custom mirror for this instance.\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomReflectable\nCustomStringConvertible\nHashable\nSee Also\nCustomizing appearance\nvar imageProperties: UIListContentConfiguration.ImageProperties\nProperties for configuring the image.\nvar textProperties: UIListContentConfiguration.TextProperties\nProperties for configuring the primary text.\nvar secondaryTextProperties: UIListContentConfiguration.TextProperties\nProperties for configuring the secondary text.\nstruct UIListContentConfiguration.ImageProperties\nProperties that affect the list content configuration’s image."
  },
  {
    "title": "tableViewDidEndMultipleSelectionInteraction(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/3183944-tableviewdidendmultipleselection",
    "html": "Parameters\ntableView\n\nThe table view calling this method.\n\nDiscussion\n\nThe table view calls this method after the user lifts their finger from the device.\n\nSee Also\nResponding to row selections\nHandling row selection in a table view\nDetect when a user taps a table view cell so your app can take the next indicated action.\nSelecting multiple items with a two-finger pan gesture\nAccelerate user selection of multiple items using the multiselect gesture on table and collection views.\nfunc tableView(UITableView, willSelectRowAt: IndexPath) -> IndexPath?\nTells the delegate a row is about to be selected.\nfunc tableView(UITableView, didSelectRowAt: IndexPath)\nTells the delegate a row is selected.\nfunc tableView(UITableView, willDeselectRowAt: IndexPath) -> IndexPath?\nTells the delegate that a specified row is about to be deselected.\nfunc tableView(UITableView, didDeselectRowAt: IndexPath)\nTells the delegate that the specified row is now deselected.\nfunc tableView(UITableView, shouldBeginMultipleSelectionInteractionAt: IndexPath) -> Bool\nAsks the delegate whether the user can use a two-finger pan gesture to select multiple items in a table view.\nfunc tableView(UITableView, didBeginMultipleSelectionInteractionAt: IndexPath)\nTells the delegate when the user starts using a two-finger pan gesture to select multiple rows in a table view."
  },
  {
    "title": "tableView(_:willDisplayHeaderView:forSection:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614905-tableview",
    "html": "Parameters\ntableView\n\nThe table view informing the delegate of this event.\n\nview\n\nThe header view that is about to be displayed.\n\nsection\n\nThe index number of the section containing the header view.\n\nSee Also\nProviding custom header and footer views\nfunc tableView(UITableView, viewForHeaderInSection: Int) -> UIView?\nAsks the delegate for a view to display in the header of the specified section of the table view.\nfunc tableView(UITableView, viewForFooterInSection: Int) -> UIView?\nAsks the delegate for a view to display in the footer of the specified section of the table view.\nfunc tableView(UITableView, willDisplayFooterView: UIView, forSection: Int)\nTells the delegate that the table is about to display the footer view for the specified section."
  },
  {
    "title": "tableView(_:willDisplay:forRowAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614883-tableview",
    "html": "Parameters\ntableView\n\nThe table view informing the delegate of this impending event.\n\ncell\n\nA cell that tableView is going to use when drawing the row.\n\nindexPath\n\nAn index path locating the row in tableView.\n\nDiscussion\n\nA table view sends this message to its delegate just before it uses cell to draw a row, thereby permitting the delegate to customize the cell object before it is displayed. This method gives the delegate a chance to override state-based properties set earlier by the table view, such as selection and background color. After the delegate returns, the table view sets only the alpha and frame properties, and then only when animating rows as they slide in or out.\n\nSee Also\nConfiguring rows for the table view\nfunc tableView(UITableView, indentationLevelForRowAt: IndexPath) -> Int\nAsks the delegate to return the level of indentation for a row in a given section.\nfunc tableView(UITableView, shouldSpringLoadRowAt: IndexPath, with: UISpringLoadedInteractionContext) -> Bool\nCalled to let you fine tune the spring-loading behavior of the rows in a table.\nRelated Documentation\nfunc tableView(UITableView, cellForRowAt: IndexPath) -> UITableViewCell\nAsks the data source for a cell to insert in a particular location of the table view.\nfunc prepareForReuse()\nPrepares a reusable cell for reuse by the table view’s delegate."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundconfiguration/3656309-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible\nSee Also\nDescribing a background configuration\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging.\nvar customMirror: Mirror\nThe custom mirror for this instance."
  },
  {
    "title": "tableView(_:viewForFooterInSection:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614946-tableview",
    "html": "Parameters\ntableView\n\nThe table view asking for the view.\n\nsection\n\nThe index number of the section containing the footer view.\n\nReturn Value\n\nA UILabel, UIImageView, or custom view to display at the bottom of the specified section.\n\nDiscussion\n\nIf you implement this method but don’t implement tableView(_:heightForFooterInSection:), the table view calculates the height automatically, or uses the value of sectionFooterHeight if set.\n\nSee Also\nProviding custom header and footer views\nfunc tableView(UITableView, viewForHeaderInSection: Int) -> UIView?\nAsks the delegate for a view to display in the header of the specified section of the table view.\nfunc tableView(UITableView, willDisplayHeaderView: UIView, forSection: Int)\nTells the delegate that the table is about to display the header view for the specified section.\nfunc tableView(UITableView, willDisplayFooterView: UIView, forSection: Int)\nTells the delegate that the table is about to display the footer view for the specified section."
  },
  {
    "title": "tableView(_:viewForHeaderInSection:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614901-tableview",
    "html": "Parameters\ntableView\n\nThe table view asking for the view.\n\nsection\n\nThe index number of the section containing the header view.\n\nReturn Value\n\nA UILabel, UIImageView, or custom view to display at the top of the specified section.\n\nDiscussion\n\nIf you implement this method but don’t implement tableView(_:heightForHeaderInSection:), the table view calculates the height automatically, or uses the value of sectionHeaderHeight if set.\n\nSee Also\nProviding custom header and footer views\nfunc tableView(UITableView, viewForFooterInSection: Int) -> UIView?\nAsks the delegate for a view to display in the footer of the specified section of the table view.\nfunc tableView(UITableView, willDisplayHeaderView: UIView, forSection: Int)\nTells the delegate that the table is about to display the header view for the specified section.\nfunc tableView(UITableView, willDisplayFooterView: UIView, forSection: Int)\nTells the delegate that the table is about to display the footer view for the specified section."
  },
  {
    "title": "tableView(_:didBeginMultipleSelectionInteractionAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/3183942-tableview",
    "html": "Parameters\ntableView\n\nThe table view calling this method.\n\nindexPath\n\nThe index path of the item that the user touched to start the two-finger pan gesture.\n\nDiscussion\n\nYour implementation of this method is a good place to indicate, in the app’s user interface, that the user is selecting multiple rows; for example, you could replace an Edit or Select button with a Done button.\n\noverride func tableView(_ tableView: UITableView, didBeginMultipleSelectionInteractionAt indexPath: IndexPath) {\n    // Replace the Edit button with Done, and put the\n    // table view into editing mode.\n    self.setEditing(true, animated: true)\n}\n\n\nSee Also\nResponding to row selections\nHandling row selection in a table view\nDetect when a user taps a table view cell so your app can take the next indicated action.\nSelecting multiple items with a two-finger pan gesture\nAccelerate user selection of multiple items using the multiselect gesture on table and collection views.\nfunc tableView(UITableView, willSelectRowAt: IndexPath) -> IndexPath?\nTells the delegate a row is about to be selected.\nfunc tableView(UITableView, didSelectRowAt: IndexPath)\nTells the delegate a row is selected.\nfunc tableView(UITableView, willDeselectRowAt: IndexPath) -> IndexPath?\nTells the delegate that a specified row is about to be deselected.\nfunc tableView(UITableView, didDeselectRowAt: IndexPath)\nTells the delegate that the specified row is now deselected.\nfunc tableView(UITableView, shouldBeginMultipleSelectionInteractionAt: IndexPath) -> Bool\nAsks the delegate whether the user can use a two-finger pan gesture to select multiple items in a table view.\nfunc tableViewDidEndMultipleSelectionInteraction(UITableView)\nTells the delegate when the user stops using a two-finger pan gesture to select multiple rows in a table view."
  },
  {
    "title": "customMirror | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundconfiguration/3656307-custommirror",
    "html": "Relationships\nFrom Protocol\nCustomReflectable\nSee Also\nDescribing a background configuration\nvar description: String\nA textual representation of this instance.\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "automaticDimension | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableview/1614961-automaticdimension",
    "html": "Discussion\n\nReturn this value from your table view's delegate methods when you want the table view to choose a default value for the given dimension. For example, if you return this constant from tableView(_:heightForHeaderInSection:) or tableView(_:heightForFooterInSection:), the table view uses a height that fits the value returned from tableView(_:titleForHeaderInSection:) or tableView(_:titleForFooterInSection:), if the title is not nil.\n\nSee Also\nProviding header, footer, and row heights\nfunc tableView(UITableView, heightForRowAt: IndexPath) -> CGFloat\nAsks the delegate for the height to use for a row in a specified location.\nfunc tableView(UITableView, heightForHeaderInSection: Int) -> CGFloat\nAsks the delegate for the height to use for the header of a particular section.\nfunc tableView(UITableView, heightForFooterInSection: Int) -> CGFloat\nAsks the delegate for the height to use for the footer of a particular section."
  },
  {
    "title": "tableView(_:accessoryButtonTappedForRowWith:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614996-tableview",
    "html": "Parameters\ntableView\n\nThe table view informing the delegate of this event.\n\nindexPath\n\nThe index path of the row whose detail button was tapped.\n\nDiscussion\n\nUse this method to respond to taps in the detail button accessory view of a row. The table view does not call this method for other types of accessory views."
  },
  {
    "title": "tableView(_:estimatedHeightForFooterInSection:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614939-tableview",
    "html": "Parameters\ntableView\n\nThe table view requesting this information.\n\nsection\n\nAn index number identifying a section of tableView .\n\nReturn Value\n\nA nonnegative floating-point value that estimates the height (in points) of the footer for section.\n\nDiscussion\n\nProviding an estimate the height of section footers can improve the user experience when loading the table view. If the table contains variable height section footers, it might be expensive to calculate all their heights and so lead to a longer load time. Using estimation allows you to defer some of the cost of geometry calculation from load time to scrolling time.\n\nSee Also\nEstimating heights for the table's content\nfunc tableView(UITableView, estimatedHeightForRowAt: IndexPath) -> CGFloat\nAsks the delegate for the estimated height of a row in a specified location.\nfunc tableView(UITableView, estimatedHeightForHeaderInSection: Int) -> CGFloat\nAsks the delegate for the estimated height of the header of a particular section.\nRelated Documentation\nfunc tableView(UITableView, heightForFooterInSection: Int) -> CGFloat\nAsks the delegate for the height to use for the footer of a particular section."
  },
  {
    "title": "visualEffect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundconfiguration/3600337-visualeffect",
    "html": "Discussion\n\nThe default value is nil.\n\nSee Also\nCustomizing the background\nvar customView: UIView?\nA custom view for the background.\nvar cornerRadius: CGFloat\nThe preferred corner radius, using a continuous corner curve, for the background and stroke.\nvar backgroundInsets: NSDirectionalEdgeInsets\nThe insets (or outsets, if negative) for the background and stroke, relative to the edges of the containing view.\nvar edgesAddingLayoutMarginsToBackgroundInsets: NSDirectionalRectEdge\nThe edges on which the configuration adds the containing view’s layout margins to the background insets.\nvar backgroundColor: UIColor?\nThe color of the background.\nvar backgroundColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the background color.\nfunc resolvedBackgroundColor(for: UIColor) -> UIColor\nGenerates the resolved background color for the specified tint color, using the background color and color transformer.\nvar strokeColor: UIColor?\nThe color of the stroke.\nvar strokeColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the stroke color.\nfunc resolvedStrokeColor(for: UIColor) -> UIColor\nGenerates the resolved stroke color for the specified tint color, using the stroke color and color transformer.\nvar strokeWidth: CGFloat\nThe width of the stroke.\nvar strokeOutset: CGFloat\nThe outset (or inset, if negative) for the stroke.\nvar image: UIImage?\nThe image displayed in the view’s background.\nvar imageContentMode: UIView.ContentMode\nA property that determines the layout of a background image in a view when its bounds change."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentsizecategory/3603321-init",
    "html": "See Also\nFont size category creation\ninit(rawValue: String)\nCreates a new instance with the specified raw value.\ninit(DynamicTypeSize?)\nCreates a content size category from the specified SwiftUI Dynamic Type size."
  },
  {
    "title": "UITabBar.ItemPositioning | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitabbar/itempositioning",
    "html": "Topics\nConstants\ncase automatic\nSpecifies automatic tab bar item positioning according to the user interface idiom, as follows:\ncase fill\nDistribute items across the entire width of the tab bar.\ncase centered\nCenter items in the available space.\nRelationships\nConforms To\nSendable\nSee Also\nCustomizing item spacing\nvar itemPositioning: UITabBar.ItemPositioning\nThe positioning scheme for the tab bar items in the tab bar.\nvar itemSpacing: CGFloat\nThe amount of space (in points) to use between tab bar items.\nvar itemWidth: CGFloat\nThe width (in points) of tab bar items."
  },
  {
    "title": "debugDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3656320-debugdescription",
    "html": "Relationships\nFrom Protocol\nCustomDebugStringConvertible\nSee Also\nDescribing a list content configuration\nvar description: String\nA textual representation of the instance.\nvar customMirror: Mirror\nThe custom mirror for the instance."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3656321-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible\nSee Also\nDescribing a list content configuration\nvar debugDescription: String\nA textual representation of the instance, suitable for debugging.\nvar customMirror: Mirror\nThe custom mirror for the instance."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3600991",
    "html": "See Also\nComparing list content configurations\nstatic func != (UIListContentConfiguration, UIListContentConfiguration) -> Bool\nAn operator for checking whether two list content configurations are unequal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the list content configuration by feeding them into the hasher.\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "imageToTextPadding | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3601035-imagetotextpadding",
    "html": "Discussion\n\nThis value only applies when there’s both an image and text.\n\nSee Also\nCustomizing layout\nvar axesPreservingSuperviewLayoutMargins: UIAxis\nA Boolean value that determines whether the content view preserves the layout margins that it inherits from its superview on the horizontal or vertical axes.\nvar directionalLayoutMargins: NSDirectionalEdgeInsets\nThe margins between the content and the edges of the content view.\nvar prefersSideBySideTextAndSecondaryText: Bool\nA Boolean value that determines whether the configuration positions the text and secondary text side by side.\nvar textToSecondaryTextHorizontalPadding: CGFloat\nThe minimum horizontal padding between the text and secondary text.\nvar textToSecondaryTextVerticalPadding: CGFloat\nThe vertical padding between the text and secondary text."
  },
  {
    "title": "prefersSideBySideTextAndSecondaryText | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3601039-preferssidebysidetextandsecondar",
    "html": "Discussion\n\nWhen this value is true, the configuration positions the text and secondary text side by side if there’s sufficient space. Otherwise, the configuration stacks the text in a vertical layout.\n\nSee Also\nCustomizing layout\nvar axesPreservingSuperviewLayoutMargins: UIAxis\nA Boolean value that determines whether the content view preserves the layout margins that it inherits from its superview on the horizontal or vertical axes.\nvar directionalLayoutMargins: NSDirectionalEdgeInsets\nThe margins between the content and the edges of the content view.\nvar imageToTextPadding: CGFloat\nThe padding between the image and text.\nvar textToSecondaryTextHorizontalPadding: CGFloat\nThe minimum horizontal padding between the text and secondary text.\nvar textToSecondaryTextVerticalPadding: CGFloat\nThe vertical padding between the text and secondary text."
  },
  {
    "title": "groupedFooter() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3601029-groupedfooter",
    "html": "Return Value\n\nThe default configuration for a footer in a grouped list.\n\nDiscussion\n\nCreate this configuration to update the content and styling of a footer in a table view or collection view list.\n\nFor an appearance consistent with system defaults, display your footer in a table view or collection view list that you configure with one of the following enumeration cases:\n\nUITableView.Style.grouped\n\nUITableView.Style.insetGrouped\n\nUICollectionLayoutListConfiguration.Appearance.grouped\n\nUICollectionLayoutListConfiguration.Appearance.insetGrouped\n\nConfigure the background of your footer using one of the UIBackgroundConfiguration options below. Match the background of your footer to the corresponding table view or collection view styles as follows:\n\nBackground configuration option\n\n\t\n\nMatching table view or collection view styles\n\n\n\n\nlistGroupedHeaderFooter()\n\n\t\n\nUITableView.Style.grouped, UITableView.Style.insetGrouped, UICollectionLayoutListConfiguration.Appearance.grouped, UICollectionLayoutListConfiguration.Appearance.insetGrouped\n\nSee Also\nCreating header and footer configurations\nstatic func plainHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style a header in a plain list.\nstatic func plainFooter() -> UIListContentConfiguration\nCreates the default configuration you use to style a footer in a plain list.\nstatic func groupedHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style a header in a grouped list.\nstatic func prominentInsetGroupedHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style a prominent header in an inset grouped list.\nstatic func extraProminentInsetGroupedHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style an extra prominent header in an inset grouped list.\nstatic func sidebarHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style a header in a sidebar list."
  },
  {
    "title": "accompaniedSidebarCell() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3668009-accompaniedsidebarcell",
    "html": "Return Value\n\nThe default configuration for a cell in an accompanied sidebar list.\n\nDiscussion\n\nCreate this configuration to update the content and styling of a cell in an accompanied sidebar collection view list, where the list is in the primary column of a split view controller, accompanied by another list in the split view controller’s supplementary column. When you apply this configuration to a cell, the cell displays one label, which resizes automatically based on the length of the text you provide and the device’s Dynamic Type and accessibility settings.\n\nFor an appearance consistent with system defaults, display your cell in an accompanied sidebar collection view list that you configure with one of the following enumeration cases:\n\nUICollectionLayoutListConfiguration.Appearance.sidebar\n\nUICollectionLayoutListConfiguration.Appearance.sidebarPlain\n\nConfigure the background of your cell using one of the UIBackgroundConfiguration options below. Match the background of your cell to the corresponding table view or collection view styles as follows:\n\nBackground configuration option\n\n\t\n\nMatching table view or collection view styles\n\n\n\n\nlistAccompaniedSidebarCell()\n\n\t\n\nUICollectionLayoutListConfiguration.Appearance.sidebar, UICollectionLayoutListConfiguration.Appearance.sidebarPlain\n\nSee Also\nCreating default cell configurations\nstatic func cell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell in a list.\nstatic func subtitleCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell that’s in a list and contains subtitle text.\nstatic func valueCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell that’s in a list and contains side-by-side value text.\nstatic func sidebarCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell in a sidebar list.\nstatic func sidebarSubtitleCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell that’s in a sidebar list and contains subtitle text.\nstatic func accompaniedSidebarSubtitleCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell that’s in an accompanied sidebar list and contains subtitle text."
  },
  {
    "title": "prominentInsetGroupedHeader() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3752759-prominentinsetgroupedheader",
    "html": "Return Value\n\nThe default configuration for a prominent header in an inset grouped list.\n\nDiscussion\n\nCreate this configuration to update the content and styling of a header in a table view or collection view list.\n\nFor an appearance consistent with system defaults, display your header in a table view or collection view list that you configure with one of the following enumeration cases:\n\nUITableView.Style.insetGrouped\n\nUICollectionLayoutListConfiguration.Appearance.insetGrouped\n\nConfigure the background of your header using one of the UIBackgroundConfiguration options below. Match the background of your header to the corresponding table view or collection view styles as follows:\n\nBackground configuration option\n\n\t\n\nMatching table view or collection view styles\n\n\n\n\nlistGroupedHeaderFooter()\n\n\t\n\nUITableView.Style.insetGrouped, UICollectionLayoutListConfiguration.Appearance.insetGrouped\n\nSee Also\nCreating header and footer configurations\nstatic func plainHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style a header in a plain list.\nstatic func plainFooter() -> UIListContentConfiguration\nCreates the default configuration you use to style a footer in a plain list.\nstatic func groupedHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style a header in a grouped list.\nstatic func groupedFooter() -> UIListContentConfiguration\nCreates the default configuration you use to style a footer in a grouped list.\nstatic func extraProminentInsetGroupedHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style an extra prominent header in an inset grouped list.\nstatic func sidebarHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style a header in a sidebar list."
  },
  {
    "title": "primaryHidden | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontroller/displaymode/1623205-primaryhidden",
    "html": "Deprecated\n\nUse UISplitViewController.DisplayMode.secondaryOnly instead.\n\nSee Also\nDeprecated\nstatic var allVisible: UISplitViewController.DisplayMode\nThe primary and secondary view controllers are displayed side-by-side onscreen.\nDeprecated\nstatic var primaryOverlay: UISplitViewController.DisplayMode\nThe primary view controller is layered on top of the secondary view controller, leaving the secondary view controller partially visible.\nDeprecated"
  },
  {
    "title": "allVisible | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontroller/displaymode/1623190-allvisible",
    "html": "Deprecated\n\nUse UISplitViewController.DisplayMode.oneBesideSecondary instead.\n\nSee Also\nDeprecated\nstatic var primaryHidden: UISplitViewController.DisplayMode\nThe primary view controller is hidden.\nDeprecated\nstatic var primaryOverlay: UISplitViewController.DisplayMode\nThe primary view controller is layered on top of the secondary view controller, leaving the secondary view controller partially visible.\nDeprecated"
  },
  {
    "title": "splitViewController(_:showDetail:sender:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontrollerdelegate/1623204-splitviewcontroller",
    "html": "Parameters\nsplitViewController\n\nThe split view controller whose secondary view controller is being updated.\n\nvc\n\nThe view controller being displayed in the secondary position.\n\nsender\n\nThe object that made the request.\n\nReturn Value\n\ntrue if you handled the presentation of the view controller, or false if you want the split view controller to do it.\n\nDiscussion\n\nThis delegate method only applies to classic split view interfaces. For more information, see Split view styles.\n\nWhen its showDetailViewController(_:sender:) method is called, the split view controller calls this method to see if your delegate will handle the presentation of the specified view controller. If you implement this method and ultimately return true, your implementation is responsible for presenting the specified view controller in the secondary position of the split view interface.\n\nIf you don’t implement this method or if your implementation returns false, the split view controller presents the view controller.\n\nSee Also\nOverriding the presentation behavior\nfunc splitViewController(UISplitViewController, show: UIViewController, sender: Any?) -> Bool\nAsks the delegate if it will do the work of displaying a view controller in the primary position of the split view interface."
  },
  {
    "title": "UISplitViewController.DisplayMode.oneOverSecondary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontroller/displaymode/oneoversecondary",
    "html": "Discussion\n\nThis display mode shows one sidebar layered on top of the secondary view controller, partially obscuring it. The sidebar shown is the primary column for UISplitViewController.Style.doubleColumn interfaces and the supplementary column for UISplitViewController.Style.tripleColumn interfaces. The secondary view controller is dimmed out, preventing interaction with its view. Touching the dimmed view dismisses the overlay and returns the interface to the UISplitViewController.DisplayMode.secondaryOnly display mode.\n\nThis display mode is available for the UISplitViewController.SplitBehavior.overlay split behavior."
  },
  {
    "title": "UISplitViewController.DisplayMode.oneBesideSecondary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontroller/displaymode/onebesidesecondary",
    "html": "Discussion\n\nThis display mode shows one sidebar tiled next to the secondary view controller. The sidebar shown is the primary column for UISplitViewController.Style.doubleColumn interfaces and the supplementary column for UISplitViewController.Style.tripleColumn interfaces. The sidebar is displayed on the side specified by primaryEdge, followed by the secondary view controller. The secondary view controller’s view is fully interactive.\n\nThis display mode is available for the UISplitViewController.SplitBehavior.tile and UISplitViewController.SplitBehavior.displace split behaviors."
  },
  {
    "title": "UISplitViewController.Column.supplementary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontroller/column/supplementary",
    "html": "Discussion\n\nThis value only takes effect when the split view controller’s style property is UISplitViewController.Style.tripleColumn."
  },
  {
    "title": "splitViewController(_:show:sender:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontrollerdelegate/1623168-splitviewcontroller",
    "html": "Parameters\nsplitViewController\n\nThe split view controller whose primary view controller is being updated.\n\nvc\n\nThe view controller being displayed in the primary position.\n\nsender\n\nThe object that made the request.\n\nReturn Value\n\ntrue if you handled the presentation of the view controller, or false if you want the split view controller to do it.\n\nDiscussion\n\nThis delegate method only applies to classic split view interfaces. For more information, see Split view styles.\n\nWhen its show(_:sender:) method is called, the split view controller calls this method to see if your delegate will handle the presentation of the specified view controller. If you implement this method and your implementation returns true, you are responsible for presenting the specified view controller in the primary position of the split view interface. The split view controller does nothing more to try to show the view controller.\n\nIf you don’t implement this method or if your implementation returns false, the split view controller presents the view controller.\n\nSee Also\nOverriding the presentation behavior\nfunc splitViewController(UISplitViewController, showDetail: UIViewController, sender: Any?) -> Bool\nAsks the delegate if it will do the work of displaying a view controller in the secondary position of the split view interface."
  },
  {
    "title": "UISplitViewController.DisplayMode.twoOverSecondary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontroller/displaymode/twooversecondary",
    "html": "Discussion\n\nThis display mode is only available for UISplitViewController.Style.tripleColumn interfaces.\n\nThis display mode shows both sidebars layered on top of the secondary view controller, partially obscuring it. The secondary view controller is dimmed out, preventing interaction with its view. Touching the dimmed view dismisses the overlay and returns the interface to the UISplitViewController.DisplayMode.secondaryOnly display mode.\n\nThe interactive gesture can move the interface freely through UISplitViewController.DisplayMode.oneOverSecondary to UISplitViewController.DisplayMode.secondaryOnly and back, stopping at any of the display modes depending on the user interaction.\n\nThis display mode is available for the UISplitViewController.SplitBehavior.overlay split behavior."
  },
  {
    "title": "targetDisplayModeForAction(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontrollerdelegate/1623192-targetdisplaymodeforaction",
    "html": "Parameters\nsvc\n\nThe split view controller whose action may be triggered. Use this object to obtain the current display mode and configuration of the split view interface.\n\nReturn Value\n\nThe display mode to apply to the split view controller when the user performs specific actions.\n\nDiscussion\n\nThis delegate method only applies to classic split view interfaces. For more information, see Split view styles.\n\nThe split view controller calls this method to determine which display mode to apply to itself in response to user-initiated actions. The split view controller has a built-in gesture recognizer that changes the current display mode. It also provides a bar button item from its displayModeButtonItem property that changes the display mode. The gesture recognizer is enabled using the presentsWithGesture property of the split view controller. Apps must incorporate the bar button item into their interface.\n\nImplement this method if you want to specify which display mode to apply to the split view controller in response to the user actions. The split view controller calls this method to obtain an updated value for the gesture and bar button item. If you do not implement this method or if your method returns UISplitViewController.DisplayMode.automatic, the split view controller applies its own heuristics to determine which mode to apply when the next action is triggered. You cannot specify different display modes for the gesture and bar button item.\n\nSee Also\nResponding to display mode changes\nfunc splitViewController(UISplitViewController, willChangeTo: UISplitViewController.DisplayMode)\nTells the delegate that the display mode for the split view controller is about to change."
  },
  {
    "title": "indexTitles(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdatasource/2851455-indextitles",
    "html": "Parameters\ncollectionView\n\nThe collection view requesting this information.\n\nReturn Value\n\nAn array of strings to use for the title of each index entry. For example, you might return an array of strings containing the letters of the alphabet ([\"A\", \"B\", \"C\", ..., \"Z\"]).\n\nDiscussion\n\nUse this method to support fast scrolling through your collection view’s content. The strings you return are displayed in an index view that can be used to jump to specific locations in the collection view’s content. If you implement this method, you must also implement the collectionView(_:indexPathForIndexTitle:at:) method to specify the collection view item associated with each index title.\n\nSee Also\nConfiguring an index\nfunc collectionView(UICollectionView, indexPathForIndexTitle: String, at: Int) -> IndexPath\nAsks the data source to return the index path of a collection view item that corresponds to one of your index entries."
  },
  {
    "title": "collectionView(_:viewForSupplementaryElementOfKind:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdatasource/1618037-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view requesting this information.\n\nkind\n\nThe kind of supplementary view to provide. The value of this string is defined by the layout object that supports the supplementary view.\n\nindexPath\n\nThe index path that specifies the location of the new supplementary view.\n\nReturn Value\n\nA configured supplementary view object. You must not return nil from this method.\n\nDiscussion\n\nYour implementation of this method is responsible for creating, configuring, and returning the appropriate supplementary view that is being requested. You do this by calling the dequeueReusableSupplementaryView(ofKind:withReuseIdentifier:for:) method of the collection view and passing the information that corresponds to the view you want. That method always returns a valid view object. Upon receiving the view, you should set any properties that correspond to the data you want to display, perform any additional needed configuration, and return the view.\n\nYou do not need to set the location of the supplementary view inside the collection view’s bounds. The collection view sets the location of each view using the layout attributes provided by its layout object.\n\nThis method must always return a valid view object. If you do not want a supplementary view in a particular case, your layout object should not create the attributes for that view. Alternatively, you can hide views by setting the isHidden property of the corresponding attributes to true or set the alpha property of the attributes to 0. To hide header and footer views in a flow layout, you can also set the width and height of those views to 0.\n\nSee Also\nGetting views for items\nfunc collectionView(UICollectionView, cellForItemAt: IndexPath) -> UICollectionViewCell\nAsks your data source object for the cell that corresponds to the specified item in the collection view.\n\nRequired"
  },
  {
    "title": "collectionView(_:canMoveItemAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdatasource/1618015-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view requesting this information.\n\nindexPath\n\nThe index path of the item that the collection view is trying to move.\n\nReturn Value\n\ntrue if the item is allowed to move, or false if it isn’t.\n\nDiscussion\n\nUse this method to selectively allow or disallow the movement of items within a collection view. If you don’t implement this method, but you do implement the collectionView(_:moveItemAt:to:) method, the collection view allows all items to be reordered.\n\nSee Also\nReordering items\nfunc collectionView(UICollectionView, moveItemAt: IndexPath, to: IndexPath)\nTells your data source object to move the specified item to its new location."
  },
  {
    "title": "UITabBar.ItemPositioning.centered | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitabbar/itempositioning/centered",
    "html": "Discussion\n\nWith this option, the tab bar uses the itemWidth and itemSpacing properties to set the width of items and the spacing between items, positioning those items in the center of the available space. When the UITabBar.ItemPositioning.automatic option is selected, the tab bar uses this behavior in horizontally regular environments."
  },
  {
    "title": "collectionView(_:moveItemAt:to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdatasource/1618064-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view notifying you of the move.\n\nsourceIndexPath\n\nThe item’s original index path.\n\ndestinationIndexPath\n\nThe new index path of the item.\n\nDiscussion\n\nYou must implement this method to support the reordering of items within the collection view. If you don’t implement this method, the collection view ignores any attempts to reorder items.\n\nWhen interactions with an item end, the collection view calls this method if the position of the item changed. Use this method to update your data structures with the new index path information.\n\nSee Also\nReordering items\nfunc collectionView(UICollectionView, canMoveItemAt: IndexPath) -> Bool\nAsks your data source object whether the specified item can move to another location in the collection view."
  },
  {
    "title": "collectionView(_:indexPathForIndexTitle:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdatasource/2851456-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view requesting this information.\n\ntitle\n\nThe title of the index item. This string corresponds to one of the strings you returned in your indexTitles(for:) method.\n\nindex\n\nThe index into the array returned by the indexTitles(for:) method that corresponds to the index title.\n\nReturn Value\n\nThe index path for the collection view item that should appear when the user selects the index.\n\nDiscussion\n\nUse this method to support fast scrolling through your collection view’s content. After returning a set of index strings from your indexTitles(for:) method, the collection view calls this method for each string to fetch the collection view item to use as the scrolling destination.\n\nSee Also\nConfiguring an index\nfunc indexTitles(for: UICollectionView) -> [String]?\nAsks the data source to return the titles for the index items to display for the collection view."
  },
  {
    "title": "clear() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundconfiguration/3600320-clear",
    "html": "Return Value\n\nAn empty background configuration with a transparent background and no default styling.\n\nDiscussion\n\nCreate this configuration for the background of a view. It configures the view with a transparent background and no default styling."
  },
  {
    "title": "listSidebarHeader() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundconfiguration/3600329-listsidebarheader",
    "html": "Return Value\n\nThe default configuration for a sidebar list header.\n\nDiscussion\n\nCreate this configuration to update the styling for the background of a header or footer in a table view or collection view list. When you apply this configuration, the background of the header or footer matches the system default styling for a header or footer in a sidebar list.\n\nFor an appearance consistent with system defaults, use this background configuration for a header or footer in a collection view list that you configure with the UICollectionLayoutListConfiguration.Appearance.sidebar enumeration case.\n\nSee Also\nCreating header and footer background configurations\nstatic func listPlainHeaderFooter() -> UIBackgroundConfiguration\nCreates the default configuration you use to style a plain list header or footer.\nstatic func listGroupedHeaderFooter() -> UIBackgroundConfiguration\nCreates the default configuration you use to style a grouped list header or footer."
  },
  {
    "title": "listPlainHeaderFooter() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundconfiguration/3600327-listplainheaderfooter",
    "html": "Return Value\n\nThe default configuration for a plain list header or footer.\n\nDiscussion\n\nCreate this configuration to update the styling for the background of a header or footer in a table view or collection view list. When you apply this configuration, the background of the header or footer matches the system default styling for a header or footer in a plain list.\n\nFor an appearance consistent with system defaults, use this background configuration for a header or footer in these contexts:\n\nA table view that you configure with the UITableView.Style.plain enumeration case.\n\nA collection view list that you configure with the UICollectionLayoutListConfiguration.Appearance.plain or UICollectionLayoutListConfiguration.Appearance.sidebarPlain enumeration cases.\n\nSee Also\nCreating header and footer background configurations\nstatic func listGroupedHeaderFooter() -> UIBackgroundConfiguration\nCreates the default configuration you use to style a grouped list header or footer.\nstatic func listSidebarHeader() -> UIBackgroundConfiguration\nCreates the default configuration you use to style a sidebar list header."
  },
  {
    "title": "listGroupedHeaderFooter() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundconfiguration/3600325-listgroupedheaderfooter",
    "html": "Return Value\n\nThe default configuration for a grouped list header or footer.\n\nDiscussion\n\nCreate this configuration to update the styling for the background of a header or footer in a table view or collection view list. When you apply this configuration, the background of the header or footer matches the system default styling for a header or footer in a grouped list.\n\nFor an appearance consistent with system defaults, use this background configuration for a header or footer in these contexts:\n\nA table view that you configure with the UITableView.Style.grouped or UITableView.Style.insetGrouped enumeration cases.\n\nA a collection view list that you configure with the UICollectionLayoutListConfiguration.Appearance.grouped or UICollectionLayoutListConfiguration.Appearance.insetGrouped enumeration cases.\n\nSee Also\nCreating header and footer background configurations\nstatic func listPlainHeaderFooter() -> UIBackgroundConfiguration\nCreates the default configuration you use to style a plain list header or footer.\nstatic func listSidebarHeader() -> UIBackgroundConfiguration\nCreates the default configuration you use to style a sidebar list header."
  },
  {
    "title": "listSidebarCell() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundconfiguration/3600328-listsidebarcell",
    "html": "Return Value\n\nThe default configuration for a cell in a sidebar list.\n\nDiscussion\n\nCreate this configuration to update the styling for the background of a cell in a list. When you apply this configuration to a cell, the background of the cell matches the system default styling for a cell in a sidebar collection view list, including styling for highlighted and selected states.\n\nFor an appearance consistent with system defaults, use this background configuration for a cell in a collection view list that you configure with the UICollectionLayoutListConfiguration.Appearance.sidebar or UICollectionLayoutListConfiguration.Appearance.sidebarPlain enumeration case.\n\nSee Also\nCreating cell background configurations\nstatic func listPlainCell() -> UIBackgroundConfiguration\nCreates the default configuration you use to style a cell in a plain list.\nstatic func listGroupedCell() -> UIBackgroundConfiguration\nCreates the default configuration you use to style a cell in a grouped list.\nstatic func listAccompaniedSidebarCell() -> UIBackgroundConfiguration\nCreates the default configuration you use to style a cell in an accompanied sidebar list."
  },
  {
    "title": "listAccompaniedSidebarCell() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundconfiguration/3667725-listaccompaniedsidebarcell",
    "html": "Return Value\n\nThe default configuration for a cell in an accompanied sidebar list.\n\nDiscussion\n\nCreate this configuration to update the styling for the background of a cell in a list. When you apply this configuration to a cell, the background of the cell matches the system default styling for a cell in an accompanied sidebar collection view list, including styling for highlighted and selected states. An accompanied sidebar collection view list is a list that’s in the primary column of a split view controller, accompanied by another list in the split view controller’s supplementary column.\n\nFor an appearance consistent with system defaults, use this background configuration for a cell in an accompanied sidebar collection view list that you configure with the UICollectionLayoutListConfiguration.Appearance.sidebar or UICollectionLayoutListConfiguration.Appearance.sidebarPlain enumeration case.\n\nSee Also\nCreating cell background configurations\nstatic func listPlainCell() -> UIBackgroundConfiguration\nCreates the default configuration you use to style a cell in a plain list.\nstatic func listGroupedCell() -> UIBackgroundConfiguration\nCreates the default configuration you use to style a cell in a grouped list.\nstatic func listSidebarCell() -> UIBackgroundConfiguration\nCreates the default configuration you use to style a cell in a sidebar list."
  },
  {
    "title": "automaticallyUpdatesContentConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewcell/3600428-automaticallyupdatescontentconfi",
    "html": "Discussion\n\nWhen this value is true, the cell automatically calls updated(for:) on its contentConfiguration when the cell’s configurationState changes, and applies the updated configuration back to the cell. The default value is true.\n\nIf you override updateConfiguration(using:) to manually update and customize the content configuration, disable automatic updates by setting this property to false.\n\nSee Also\nManaging the content\nvar contentConfiguration: (UIContentConfiguration)?\nThe current content configuration of the cell.\nvar contentView: UIView\nThe main view that you add your cell’s custom content to."
  },
  {
    "title": "contentConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewcell/3600949-contentconfiguration",
    "html": "Discussion\n\nUsing a content configuration, you can set the cell’s content and styling for a variety of different cell states.\n\nSetting a content configuration replaces the existing contentView of the cell with a new content view instance from the configuration, or directly applies the configuration to the existing content view if the configuration is compatible with the existing content view type.\n\nThe default value is nil. After you set a content configuration to this property, setting this property back to nil replaces the current content view with a new, empty content view.\n\nSee Also\nManaging the content\nvar automaticallyUpdatesContentConfiguration: Bool\nA Boolean value that determines whether the cell automatically updates its content configuration when its state changes.\nvar contentView: UIView\nThe main view that you add your cell’s custom content to."
  },
  {
    "title": "automaticallyUpdatesBackgroundConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewcell/3600427-automaticallyupdatesbackgroundco",
    "html": "Discussion\n\nWhen this value is true, the cell automatically calls updated(for:) on its backgroundConfiguration when the cell’s configurationState changes, and applies the updated configuration back to the cell. The default value is true.\n\nIf you override updateConfiguration(using:) to manually update and customize the background configuration, disable automatic updates by setting this property to false.\n\nSee Also\nConfiguring the background\nfunc defaultBackgroundConfiguration() -> UIBackgroundConfiguration\nRetrieves a background configuration with system default values.\nvar backgroundConfiguration: UIBackgroundConfiguration?\nThe current background configuration of the cell.\nvar backgroundView: UIView?\nThe view that displays behind the cell’s other content.\nvar selectedBackgroundView: UIView?\nThe view that displays just above the background view for a selected cell."
  },
  {
    "title": "backgroundView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewcell/1620131-backgroundview",
    "html": "Discussion\n\nUse this property to assign a custom background view to the cell. The background view appears behind the content view and its frame automatically adjusts so that it fills the bounds of the cell.\n\nA background configuration is mutually exclusive with background views, so you must use one approach or the other. Setting a non-nil value for this property resets backgroundConfiguration to nil.\n\nSee Also\nConfiguring the background\nfunc defaultBackgroundConfiguration() -> UIBackgroundConfiguration\nRetrieves a background configuration with system default values.\nvar backgroundConfiguration: UIBackgroundConfiguration?\nThe current background configuration of the cell.\nvar automaticallyUpdatesBackgroundConfiguration: Bool\nA Boolean value that determines whether the cell automatically updates its background configuration when its state changes.\nvar selectedBackgroundView: UIView?\nThe view that displays just above the background view for a selected cell."
  },
  {
    "title": "backgroundConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewcell/3600947-backgroundconfiguration",
    "html": "Discussion\n\nUsing a background configuration, you can obtain system default background styling for a variety of different cell states. Create a background configuration with one of the default system styles, customize the configuration to match your cell’s style as necessary, and assign the configuration to this property.\n\nvar backgroundConfig = UIBackgroundConfiguration.listPlainCell()\n\n\n// Set a nil background color to use the view's tint color. \nbackgroundConfig.backgroundColor = nil \n\n\ncell.backgroundConfiguration = backgroundConfig \n\n\nA background configuration is mutually exclusive with background views, so you must use one approach or the other. Setting a non-nil value for this property resets the following APIs to nil:\n\nbackgroundColor\n\nbackgroundView\n\nselectedBackgroundView\n\nSee Also\nConfiguring the background\nfunc defaultBackgroundConfiguration() -> UIBackgroundConfiguration\nRetrieves a background configuration with system default values.\nvar automaticallyUpdatesBackgroundConfiguration: Bool\nA Boolean value that determines whether the cell automatically updates its background configuration when its state changes.\nvar backgroundView: UIView?\nThe view that displays behind the cell’s other content.\nvar selectedBackgroundView: UIView?\nThe view that displays just above the background view for a selected cell."
  },
  {
    "title": "selectedBackgroundView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewcell/1620138-selectedbackgroundview",
    "html": "Discussion\n\nYou can use this view to give a selected cell a custom appearance. When the cell has a selected state, this view layers above the backgroundView and behind the contentView.\n\nA background configuration is mutually exclusive with background views, so you must use one approach or the other. Setting a non-nil value for this property resets backgroundConfiguration to nil.\n\nSee Also\nConfiguring the background\nfunc defaultBackgroundConfiguration() -> UIBackgroundConfiguration\nRetrieves a background configuration with system default values.\nvar backgroundConfiguration: UIBackgroundConfiguration?\nThe current background configuration of the cell.\nvar automaticallyUpdatesBackgroundConfiguration: Bool\nA Boolean value that determines whether the cell automatically updates its background configuration when its state changes.\nvar backgroundView: UIView?\nThe view that displays behind the cell’s other content."
  },
  {
    "title": "setNeedsUpdateConfiguration() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewcell/3600432-setneedsupdateconfiguration",
    "html": "Discussion\n\nYou call this method when you need the cell to update its configuration according to the current configuration state. The system calls this method automatically when the cell’s configurationState changes, as well as in other circumstances that may require an update. The system might combine multiple requests into a single update.\n\nIf you add custom states to the cell’s configuration state, make sure to call this method every time those custom states change.\n\nSee Also\nManaging the state\nvar configurationState: UICellConfigurationState\nThe current configuration state of the cell.\nfunc updateConfiguration(using: UICellConfigurationState)\nUpdates the cell’s configuration using the current state.\nvar configurationUpdateHandler: UICollectionViewCell.ConfigurationUpdateHandler?\nA block for handling updates to the cell’s configuration using the current state.\ntypealias UICollectionViewCell.ConfigurationUpdateHandler\nThe type of block for handling updates to the cell’s configuration using the current state.\nvar isSelected: Bool\nThe selection state of the cell.\nvar isHighlighted: Bool\nThe highlight state of the cell."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentunavailableconfigurationstate/4176584-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "axesPreservingSuperviewLayoutMargins | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3601026-axespreservingsuperviewlayoutmar",
    "html": "Discussion\n\nBy default, the content view preserves the layout margins of its superview on both axes.\n\nSee Also\nCustomizing layout\nvar directionalLayoutMargins: NSDirectionalEdgeInsets\nThe margins between the content and the edges of the content view.\nvar prefersSideBySideTextAndSecondaryText: Bool\nA Boolean value that determines whether the configuration positions the text and secondary text side by side.\nvar imageToTextPadding: CGFloat\nThe padding between the image and text.\nvar textToSecondaryTextHorizontalPadding: CGFloat\nThe minimum horizontal padding between the text and secondary text.\nvar textToSecondaryTextVerticalPadding: CGFloat\nThe vertical padding between the text and secondary text."
  },
  {
    "title": "searchText | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentunavailableconfigurationstate/4176588-searchtext",
    "html": "Discussion\n\nBy default, this property returns the search bar text from the view controller’s search controller."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentunavailableconfigurationstate/4176586-hashvalue",
    "html": "Relationships\nFrom Protocol\nHashable"
  },
  {
    "title": "debugDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentunavailableconfigurationstate/4176583-debugdescription",
    "html": "Relationships\nFrom Protocol\nCustomDebugStringConvertible"
  },
  {
    "title": "traitCollection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentunavailableconfigurationstate/4176590-traitcollection",
    "html": "Relationships\nFrom Protocol\nUIConfigurationState"
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentsizecategory/2206726-init",
    "html": "See Also\nFont size category creation\ninit(ContentSizeCategory?)\nCreates a content size category from the specified SwiftUI content size category.\ninit(DynamicTypeSize?)\nCreates a content size category from the specified SwiftUI Dynamic Type size."
  },
  {
    "title": "secondaryTextLayoutGuide | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentview/3650225-secondarytextlayoutguide",
    "html": "Discussion\n\nIf the configuration doesn’t specify secondary text, the value of this property is nil.\n\nIf you apply a new configuration without secondary text to the content view, the system removes this layout guide from the view and deactivates any constraints associated with it.\n\nSee Also\nManaging the content layout\nvar textLayoutGuide: UILayoutGuide?\nA guide for positioning the primary text in the content view.\nvar imageLayoutGuide: UILayoutGuide?\nA guide for positioning the image in the content view."
  },
  {
    "title": "medium | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentsizecategory/1622928-medium",
    "html": "See Also\nFont sizes\nstatic let unspecified: UIContentSizeCategory\nAn unspecified font size.\nstatic let extraSmall: UIContentSizeCategory\nAn extra-small font.\nstatic let small: UIContentSizeCategory\nA small font.\nstatic let large: UIContentSizeCategory\nA large font.\nstatic let extraLarge: UIContentSizeCategory\nAn extra-large font.\nstatic let extraExtraLarge: UIContentSizeCategory\nA font that is larger than the extra-large font but smaller than the largest font size available.\nstatic let extraExtraExtraLarge: UIContentSizeCategory\nThe largest font size."
  },
  {
    "title": "accessibilityExtraLarge | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentsizecategory/1622959-accessibilityextralarge",
    "html": "See Also\nAccessibility sizes\nstatic let accessibilityMedium: UIContentSizeCategory\nA medium font size that reflects the current accessibility settings.\nstatic let accessibilityLarge: UIContentSizeCategory\nA large font size that reflects the current accessibility settings.\nstatic let accessibilityExtraExtraLarge: UIContentSizeCategory\nA font that is larger than the extra-large font but not the largest available, reflecting the current accessibility settings.\nstatic let accessibilityExtraExtraExtraLarge: UIContentSizeCategory\nThe largest font size that reflects the current accessibility settings.\nvar isAccessibilityCategory: Bool\nA Boolean value that indicates whether the content size category is associated with accessibility."
  },
  {
    "title": "accessibilityMedium | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentsizecategory/1623110-accessibilitymedium",
    "html": "See Also\nAccessibility sizes\nstatic let accessibilityLarge: UIContentSizeCategory\nA large font size that reflects the current accessibility settings.\nstatic let accessibilityExtraLarge: UIContentSizeCategory\nAn extra-large font size that reflects the current accessibility settings.\nstatic let accessibilityExtraExtraLarge: UIContentSizeCategory\nA font that is larger than the extra-large font but not the largest available, reflecting the current accessibility settings.\nstatic let accessibilityExtraExtraExtraLarge: UIContentSizeCategory\nThe largest font size that reflects the current accessibility settings.\nvar isAccessibilityCategory: Bool\nA Boolean value that indicates whether the content size category is associated with accessibility."
  },
  {
    "title": "callAsFunction(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiconfigurationcolortransformer/3600971-callasfunction",
    "html": "Discussion\n\nUsing this syntax, you can call the color transformer type as if it were a closure:\n\nlet alphaColorTransformer = UIConfigurationColorTransformer() { baseColor -> UIColor in\n    return baseColor.withAlphaComponent(0.5)\n}\n\n\nlet baseColor = UIColor.red\nlet modifiedColor = alphaColorTransformer(baseColor)\n\n\nSee Also\nCalling the color transformer\nlet transform: (UIColor) -> UIColor\nThe transform closure of the color transformer."
  },
  {
    "title": "preferredTint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiconfigurationcolortransformer/3650223-preferredtint",
    "html": "Discussion\n\nThis color transformer returns the original color on platforms without a system accent color, or when the system accent color is set to Multicolor. When the system accent color is set to any other color, this color transformer returns that system accent color.\n\nSee Also\nCreating a color transformer\ninit((UIColor) -> UIColor)\nCreates a color transformer with the specified closure.\nstatic let grayscale: UIConfigurationColorTransformer\nCreates a color transformer that generates a grayscale version of the color.\nstatic let monochromeTint: UIConfigurationColorTransformer\nA color transformer that returns the color with a monochrome tint."
  },
  {
    "title": "universalLinksOnly | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/openexternalurloptionskey/1648680-universallinksonly",
    "html": "Discussion\n\nWhen you include this key in the options dictionary of the open(_:options:completionHandler:) method, the method opens the URL only if the URL is a valid universal link and there is an installed app capable of opening that URL. The value of this key is an NSNumber object containing a Boolean value."
  },
  {
    "title": "grayscale | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiconfigurationcolortransformer/3600476-grayscale",
    "html": "See Also\nCreating a color transformer\ninit((UIColor) -> UIColor)\nCreates a color transformer with the specified closure.\nstatic let preferredTint: UIConfigurationColorTransformer\nA color transformer that returns the preferred system accent color.\nstatic let monochromeTint: UIConfigurationColorTransformer\nA color transformer that returns the color with a monochrome tint."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiconfigurationcolortransformer/3600973-init",
    "html": "See Also\nCreating a color transformer\nstatic let grayscale: UIConfigurationColorTransformer\nCreates a color transformer that generates a grayscale version of the color.\nstatic let preferredTint: UIConfigurationColorTransformer\nA color transformer that returns the preferred system accent color.\nstatic let monochromeTint: UIConfigurationColorTransformer\nA color transformer that returns the color with a monochrome tint."
  },
  {
    "title": "monochromeTint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiconfigurationcolortransformer/3650222-monochrometint",
    "html": "Discussion\n\nUse this color transformer to deemphasize a tinted item. The tinted item remains monochrome regardless of the system accent color.\n\nSee Also\nCreating a color transformer\ninit((UIColor) -> UIColor)\nCreates a color transformer with the specified closure.\nstatic let grayscale: UIConfigurationColorTransformer\nCreates a color transformer that generates a grayscale version of the color.\nstatic let preferredTint: UIConfigurationColorTransformer\nA color transformer that returns the preferred system accent color."
  },
  {
    "title": "customMirror | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3656319-custommirror",
    "html": "Relationships\nFrom Protocol\nCustomReflectable\nSee Also\nDescribing a list content configuration\nvar description: String\nA textual representation of the instance.\nvar debugDescription: String\nA textual representation of the instance, suitable for debugging."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3601032-hashvalue",
    "html": "Relationships\nFrom Protocol\nHashable\nSee Also\nComparing list content configurations\nstatic func == (UIListContentConfiguration, UIListContentConfiguration) -> Bool\nAn operator for checking whether two list content configurations are equal.\nstatic func != (UIListContentConfiguration, UIListContentConfiguration) -> Bool\nAn operator for checking whether two list content configurations are unequal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the list content configuration by feeding them into the hasher."
  },
  {
    "title": "updated(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3601051-updated",
    "html": "Relationships\nFrom Protocol\nUIContentConfiguration"
  },
  {
    "title": "textToSecondaryTextVerticalPadding | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3601050-texttosecondarytextverticalpaddi",
    "html": "Discussion\n\nThis value only applies when there’s both text and secondary text, and they’re in a stacked vertical layout.\n\nSee Also\nCustomizing layout\nvar axesPreservingSuperviewLayoutMargins: UIAxis\nA Boolean value that determines whether the content view preserves the layout margins that it inherits from its superview on the horizontal or vertical axes.\nvar directionalLayoutMargins: NSDirectionalEdgeInsets\nThe margins between the content and the edges of the content view.\nvar prefersSideBySideTextAndSecondaryText: Bool\nA Boolean value that determines whether the configuration positions the text and secondary text side by side.\nvar imageToTextPadding: CGFloat\nThe padding between the image and text.\nvar textToSecondaryTextHorizontalPadding: CGFloat\nThe minimum horizontal padding between the text and secondary text."
  },
  {
    "title": "valueCell() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3601052-valuecell",
    "html": "Return Value\n\nThe default configuration for a cell that’s in a list and contains side-by-side value text.\n\nDiscussion\n\nCreate this configuration to update the content and styling of a cell in a list. When you apply this configuration to a cell, the cell displays one primary label and one value label next to the main label in the trailing direction. Both labels resize automatically based on the length of the text you provide and the device’s Dynamic Type and accessibility settings.\n\nFor an appearance consistent with system defaults, display your cell in a table view or collection view list that you configure with one of the following enumeration cases:\n\nUITableView.Style.plain\n\nUITableView.Style.grouped\n\nUITableView.Style.insetGrouped\n\nUICollectionLayoutListConfiguration.Appearance.plain\n\nUICollectionLayoutListConfiguration.Appearance.grouped\n\nUICollectionLayoutListConfiguration.Appearance.insetGrouped\n\nConfigure the background of your cell using one of the UIBackgroundConfiguration options below. Match the background of your cell to the corresponding table view or collection view styles as follows:\n\nBackground configuration option\n\n\t\n\nMatching table view or collection view styles\n\n\n\n\nlistPlainCell()\n\n\t\n\nUITableView.Style.plain, UICollectionLayoutListConfiguration.Appearance.plain\n\n\n\n\nlistGroupedCell()\n\n\t\n\nUITableView.Style.grouped, UITableView.Style.insetGrouped, UICollectionLayoutListConfiguration.Appearance.grouped, UICollectionLayoutListConfiguration.Appearance.insetGrouped\n\nSee Also\nCreating default cell configurations\nstatic func cell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell in a list.\nstatic func subtitleCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell that’s in a list and contains subtitle text.\nstatic func sidebarCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell in a sidebar list.\nstatic func sidebarSubtitleCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell that’s in a sidebar list and contains subtitle text.\nstatic func accompaniedSidebarCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell in an accompanied sidebar list.\nstatic func accompaniedSidebarSubtitleCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell that’s in an accompanied sidebar list and contains subtitle text."
  },
  {
    "title": "makeContentView() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3601036-makecontentview",
    "html": "Relationships\nFrom Protocol\nUIContentConfiguration"
  },
  {
    "title": "sidebarSubtitleCell() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3601045-sidebarsubtitlecell",
    "html": "Return Value\n\nThe default configuration for a cell that’s in a sidebar list and contains subtitle text.\n\nDiscussion\n\nCreate this configuration to update the content and styling of a cell in a sidebar collection view list. When you apply this configuration to a cell, the cell displays one primary label and one subtitle label below the primary label. Both labels resize automatically based on the length of the text you provide and the device’s Dynamic Type and accessibility settings.\n\nFor an appearance consistent with system defaults, display your cell in a sidebar collection view list that you configure with one of the following enumeration cases:\n\nUICollectionLayoutListConfiguration.Appearance.sidebar\n\nUICollectionLayoutListConfiguration.Appearance.sidebarPlain\n\nConfigure the background of your cell using one of the UIBackgroundConfiguration options below. Match the background of your cell to the corresponding table view or collection view styles as follows:\n\nBackground configuration option\n\n\t\n\nMatching table view or collection view styles\n\n\n\n\nlistSidebarCell()\n\n\t\n\nUICollectionLayoutListConfiguration.Appearance.sidebar, UICollectionLayoutListConfiguration.Appearance.sidebarPlain\n\nSee Also\nCreating default cell configurations\nstatic func cell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell in a list.\nstatic func subtitleCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell that’s in a list and contains subtitle text.\nstatic func valueCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell that’s in a list and contains side-by-side value text.\nstatic func sidebarCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell in a sidebar list.\nstatic func accompaniedSidebarCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell in an accompanied sidebar list.\nstatic func accompaniedSidebarSubtitleCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell that’s in an accompanied sidebar list and contains subtitle text."
  },
  {
    "title": "subtitleCell() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3601046-subtitlecell",
    "html": "Return Value\n\nThe default configuration for a cell that’s in a list and contains subtitle text.\n\nDiscussion\n\nCreate this configuration to update the content and styling of a cell in a list. When you apply this configuration to a cell, the cell displays one primary label and one subtitle label below the primary label. Both labels resize automatically based on the length of the text you provide and the device’s Dynamic Type and accessibility settings.\n\nFor an appearance consistent with system defaults, display your cell in a table view or collection view list that you configure with one of the following enumeration cases:\n\nUITableView.Style.plain\n\nUITableView.Style.grouped\n\nUITableView.Style.insetGrouped\n\nUICollectionLayoutListConfiguration.Appearance.plain\n\nUICollectionLayoutListConfiguration.Appearance.grouped\n\nUICollectionLayoutListConfiguration.Appearance.insetGrouped\n\nConfigure the background of your cell using one of the UIBackgroundConfiguration options below. Match the background of your cell to the corresponding table view or collection view styles as follows:\n\nBackground configuration option\n\n\t\n\nMatching table view or collection view styles\n\n\n\n\nlistPlainCell()\n\n\t\n\nUITableView.Style.plain, UICollectionLayoutListConfiguration.Appearance.plain\n\n\n\n\nlistGroupedCell()\n\n\t\n\nUITableView.Style.grouped, UITableView.Style.insetGrouped, UICollectionLayoutListConfiguration.Appearance.grouped, UICollectionLayoutListConfiguration.Appearance.insetGrouped\n\nSee Also\nCreating default cell configurations\nstatic func cell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell in a list.\nstatic func valueCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell that’s in a list and contains side-by-side value text.\nstatic func sidebarCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell in a sidebar list.\nstatic func sidebarSubtitleCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell that’s in a sidebar list and contains subtitle text.\nstatic func accompaniedSidebarCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell in an accompanied sidebar list.\nstatic func accompaniedSidebarSubtitleCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell that’s in an accompanied sidebar list and contains subtitle text."
  },
  {
    "title": "plainFooter() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3601037-plainfooter",
    "html": "Return Value\n\nThe default configuration for a footer in a plain list.\n\nDiscussion\n\nCreate this configuration to update the content and styling of a footer in a table view or collection view list.\n\nFor an appearance consistent with system defaults, display your footer in a table view or collection view list that you configure with one of the following enumeration cases:\n\nUITableView.Style.plain\n\nUICollectionLayoutListConfiguration.Appearance.plain\n\nUICollectionLayoutListConfiguration.Appearance.sidebarPlain\n\nConfigure the background of your footer using one of the UIBackgroundConfiguration options below. Match the background of your footer to the corresponding table view or collection view styles as follows:\n\nBackground configuration option\n\n\t\n\nMatching table view or collection view styles\n\n\n\n\nlistPlainHeaderFooter()\n\n\t\n\nUITableView.Style.plain, UICollectionLayoutListConfiguration.Appearance.plain, UICollectionLayoutListConfiguration.Appearance.sidebarPlain\n\nSee Also\nCreating header and footer configurations\nstatic func plainHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style a header in a plain list.\nstatic func groupedHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style a header in a grouped list.\nstatic func groupedFooter() -> UIListContentConfiguration\nCreates the default configuration you use to style a footer in a grouped list.\nstatic func prominentInsetGroupedHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style a prominent header in an inset grouped list.\nstatic func extraProminentInsetGroupedHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style an extra prominent header in an inset grouped list.\nstatic func sidebarHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style a header in a sidebar list."
  },
  {
    "title": "groupedHeader() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3601030-groupedheader",
    "html": "Return Value\n\nThe default configuration for a header in a grouped list.\n\nDiscussion\n\nCreate this configuration to update the content and styling of a header in a table view or collection view list.\n\nFor an appearance consistent with system defaults, display your header in a table view or collection view list that you configure with one of the following enumeration cases:\n\nUITableView.Style.grouped\n\nUITableView.Style.insetGrouped\n\nUICollectionLayoutListConfiguration.Appearance.grouped\n\nUICollectionLayoutListConfiguration.Appearance.insetGrouped\n\nConfigure the background of your header using one of the UIBackgroundConfiguration options below. Match the background of your header to the corresponding table view or collection view styles as follows:\n\nBackground configuration option\n\n\t\n\nMatching table view or collection view styles\n\n\n\n\nlistGroupedHeaderFooter()\n\n\t\n\nUITableView.Style.grouped, UITableView.Style.insetGrouped, UICollectionLayoutListConfiguration.Appearance.grouped, UICollectionLayoutListConfiguration.Appearance.insetGrouped\n\nSee Also\nCreating header and footer configurations\nstatic func plainHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style a header in a plain list.\nstatic func plainFooter() -> UIListContentConfiguration\nCreates the default configuration you use to style a footer in a plain list.\nstatic func groupedFooter() -> UIListContentConfiguration\nCreates the default configuration you use to style a footer in a grouped list.\nstatic func prominentInsetGroupedHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style a prominent header in an inset grouped list.\nstatic func extraProminentInsetGroupedHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style an extra prominent header in an inset grouped list.\nstatic func sidebarHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style a header in a sidebar list."
  },
  {
    "title": "plainHeader() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3601038-plainheader",
    "html": "Return Value\n\nThe default configuration for a header in a plain list.\n\nDiscussion\n\nCreate this configuration to update the content and styling of a header in a table view or collection view list.\n\nFor an appearance consistent with system defaults, display your header in a table view or collection view list that you configure with one of the following enumeration cases:\n\nUITableView.Style.plain\n\nUICollectionLayoutListConfiguration.Appearance.plain\n\nUICollectionLayoutListConfiguration.Appearance.sidebarPlain\n\nConfigure the background of your header using one of the UIBackgroundConfiguration options below. Match the background of your header to the corresponding table view or collection view styles as follows:\n\nBackground configuration option\n\n\t\n\nMatching table view or collection view styles\n\n\n\n\nlistPlainHeaderFooter()\n\n\t\n\nUITableView.Style.plain, UICollectionLayoutListConfiguration.Appearance.plain, UICollectionLayoutListConfiguration.Appearance.sidebarPlain\n\nSee Also\nCreating header and footer configurations\nstatic func plainFooter() -> UIListContentConfiguration\nCreates the default configuration you use to style a footer in a plain list.\nstatic func groupedHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style a header in a grouped list.\nstatic func groupedFooter() -> UIListContentConfiguration\nCreates the default configuration you use to style a footer in a grouped list.\nstatic func prominentInsetGroupedHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style a prominent header in an inset grouped list.\nstatic func extraProminentInsetGroupedHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style an extra prominent header in an inset grouped list.\nstatic func sidebarHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style a header in a sidebar list."
  },
  {
    "title": "accompaniedSidebarSubtitleCell() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3668010-accompaniedsidebarsubtitlecell",
    "html": "Return Value\n\nThe default configuration for a cell that’s in an accompanied sidebar list and contains subtitle text.\n\nDiscussion\n\nCreate this configuration to update the content and styling of a cell in an accompanied sidebar collection view list, where the list is in the primary column of a split view controller, accompanied by another list in the split view controller’s supplementary column. When you apply this configuration to a cell, the cell displays one primary label and one subtitle label below the primary label. Both labels resize automatically based on the length of the text you provide and the device’s Dynamic Type and accessibility settings.\n\nFor an appearance consistent with system defaults, display your cell in an accompanied sidebar collection view list that you configure with one of the following enumeration cases:\n\nUICollectionLayoutListConfiguration.Appearance.sidebar\n\nUICollectionLayoutListConfiguration.Appearance.sidebarPlain\n\nConfigure the background of your cell using one of the UIBackgroundConfiguration options below. Match the background of your cell to the corresponding table view or collection view styles as follows:\n\nBackground configuration option\n\n\t\n\nMatching table view or collection view styles\n\n\n\n\nlistAccompaniedSidebarCell()\n\n\t\n\nUICollectionLayoutListConfiguration.Appearance.sidebar, UICollectionLayoutListConfiguration.Appearance.sidebarPlain\n\nSee Also\nCreating default cell configurations\nstatic func cell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell in a list.\nstatic func subtitleCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell that’s in a list and contains subtitle text.\nstatic func valueCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell that’s in a list and contains side-by-side value text.\nstatic func sidebarCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell in a sidebar list.\nstatic func sidebarSubtitleCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell that’s in a sidebar list and contains subtitle text.\nstatic func accompaniedSidebarCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell in an accompanied sidebar list."
  },
  {
    "title": "extraProminentInsetGroupedHeader() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3752758-extraprominentinsetgroupedheader",
    "html": "Return Value\n\nThe default configuration for an extra prominent header in an inset grouped list.\n\nDiscussion\n\nCreate this configuration to update the content and styling of a header in a table view or collection view list.\n\nFor an appearance consistent with system defaults, display your header in a table view or collection view list that you configure with one of the following enumeration cases:\n\nUITableView.Style.insetGrouped\n\nUICollectionLayoutListConfiguration.Appearance.insetGrouped\n\nConfigure the background of your header using one of the UIBackgroundConfiguration options below. Match the background of your header to the corresponding table view or collection view styles as follows:\n\nBackground configuration option\n\n\t\n\nMatching table view or collection view styles\n\n\n\n\nlistGroupedHeaderFooter()\n\n\t\n\nUITableView.Style.insetGrouped, UICollectionLayoutListConfiguration.Appearance.insetGrouped\n\nSee Also\nCreating header and footer configurations\nstatic func plainHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style a header in a plain list.\nstatic func plainFooter() -> UIListContentConfiguration\nCreates the default configuration you use to style a footer in a plain list.\nstatic func groupedHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style a header in a grouped list.\nstatic func groupedFooter() -> UIListContentConfiguration\nCreates the default configuration you use to style a footer in a grouped list.\nstatic func prominentInsetGroupedHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style a prominent header in an inset grouped list.\nstatic func sidebarHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style a header in a sidebar list."
  },
  {
    "title": "cellDropState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicellconfigurationstate/3601199-celldropstate",
    "html": "See Also\nManaging cell configuration states\nvar isEditing: Bool\nA Boolean value that indicates whether the cell is in editing mode.\nvar isSwiped: Bool\nA Boolean value that indicates whether the cell is in a swiped state.\nvar isExpanded: Bool\nA Boolean value that indicates whether the cell is in an expanded state, such as in an outline.\nvar isReordering: Bool\nA Boolean value that indicates whether the cell is reordering.\nvar cellDragState: UICellConfigurationState.DragState\nThe cell’s drag state.\nenum UICellConfigurationState.DragState\nConstants that describe the cell’s drag state.\nenum UICellConfigurationState.DropState\nConstants that describe the cell’s drop state."
  },
  {
    "title": "writingDirection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281968-writingdirection",
    "html": "See Also\nEdit menus\nstatic let undoRedo: UIMenu.Identifier\nThe Undo/Redo menu.\nstatic let standardEdit: UIMenu.Identifier\nThe standard Edit menu.\nstatic let find: UIMenu.Identifier\nThe Find menu.\nstatic let replace: UIMenu.Identifier\nThe Replace menu.\nstatic let share: UIMenu.Identifier\nThe Share menu.\nstatic let textStyle: UIMenu.Identifier\nThe Text Style menu.\nstatic let spelling: UIMenu.Identifier\nThe Spelling menu.\nstatic let spellingPanel: UIMenu.Identifier\nThe Spelling Panel menu.\nstatic let spellingOptions: UIMenu.Identifier\nThe Spelling Options menu.\nstatic let substitutions: UIMenu.Identifier\nThe Substitutions menu.\nstatic let substitutionsPanel: UIMenu.Identifier\nThe Substitutions Panel menu.\nstatic let substitutionOptions: UIMenu.Identifier\nThe Substitutions Options menu.\nstatic let transformations: UIMenu.Identifier\nThe Transformations menu.\nstatic let speech: UIMenu.Identifier\nThe Speech menu.\nstatic let lookup: UIMenu.Identifier\nThe Lookup menu.\nstatic let learn: UIMenu.Identifier\nThe Learn menu.\nstatic let format: UIMenu.Identifier\nThe Format menu.\nstatic let font: UIMenu.Identifier\nThe Font menu.\nstatic let textSize: UIMenu.Identifier\nThe Text Size menu.\nstatic let textColor: UIMenu.Identifier\nThe Text Color menu.\nstatic let textStylePasteboard: UIMenu.Identifier\nThe Text Style Pasteboard menu.\nstatic let text: UIMenu.Identifier\nThe Text menu.\nstatic let autoFill: UIMenu.Identifier\nThe AutoFill menu.\nstatic let alignment: UIMenu.Identifier\nThe Alignment menu."
  },
  {
    "title": "fullscreen | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281937-fullscreen",
    "html": "See Also\nView menus\nstatic let toolbar: UIMenu.Identifier\nThe Toolbar menu group.\nstatic let sidebar: UIMenu.Identifier\nThe Sidebar menu group."
  },
  {
    "title": "textSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281961-textsize",
    "html": "See Also\nEdit menus\nstatic let undoRedo: UIMenu.Identifier\nThe Undo/Redo menu.\nstatic let standardEdit: UIMenu.Identifier\nThe standard Edit menu.\nstatic let find: UIMenu.Identifier\nThe Find menu.\nstatic let replace: UIMenu.Identifier\nThe Replace menu.\nstatic let share: UIMenu.Identifier\nThe Share menu.\nstatic let textStyle: UIMenu.Identifier\nThe Text Style menu.\nstatic let spelling: UIMenu.Identifier\nThe Spelling menu.\nstatic let spellingPanel: UIMenu.Identifier\nThe Spelling Panel menu.\nstatic let spellingOptions: UIMenu.Identifier\nThe Spelling Options menu.\nstatic let substitutions: UIMenu.Identifier\nThe Substitutions menu.\nstatic let substitutionsPanel: UIMenu.Identifier\nThe Substitutions Panel menu.\nstatic let substitutionOptions: UIMenu.Identifier\nThe Substitutions Options menu.\nstatic let transformations: UIMenu.Identifier\nThe Transformations menu.\nstatic let speech: UIMenu.Identifier\nThe Speech menu.\nstatic let lookup: UIMenu.Identifier\nThe Lookup menu.\nstatic let learn: UIMenu.Identifier\nThe Learn menu.\nstatic let format: UIMenu.Identifier\nThe Format menu.\nstatic let font: UIMenu.Identifier\nThe Font menu.\nstatic let textColor: UIMenu.Identifier\nThe Text Color menu.\nstatic let textStylePasteboard: UIMenu.Identifier\nThe Text Style Pasteboard menu.\nstatic let text: UIMenu.Identifier\nThe Text menu.\nstatic let autoFill: UIMenu.Identifier\nThe AutoFill menu.\nstatic let writingDirection: UIMenu.Identifier\nThe Writing Direction menu.\nstatic let alignment: UIMenu.Identifier\nThe Alignment menu."
  },
  {
    "title": "secondaryAttributedText | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3601040-secondaryattributedtext",
    "html": "Discussion\n\nThis value supersedes the secondaryText property.\n\nSee Also\nCustomizing content\nvar image: UIImage?\nThe image to display.\nvar text: String?\nThe primary text.\nvar attributedText: NSAttributedString?\nAn attributed variant of the primary text.\nvar secondaryText: String?\nThe secondary text."
  },
  {
    "title": "sidebarHeader() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3601044-sidebarheader",
    "html": "Return Value\n\nThe default configuration for a header in a sidebar list.\n\nDiscussion\n\nCreate this configuration to update the content and styling of a header in a sidebar collection view list.\n\nFor an appearance consistent with system defaults, display your header in a sidebar collection view list that you configure with the UICollectionLayoutListConfiguration.Appearance.sidebar enumeration case.\n\nConfigure the background of your cell using one of the UIBackgroundConfiguration options below. Match the background of your cell to the corresponding table view or collection view styles as follows:\n\nBackground configuration option\n\n\t\n\nMatching table view or collection view styles\n\n\n\n\nlistSidebarHeader()\n\n\t\n\nUICollectionLayoutListConfiguration.Appearance.sidebar\n\nSee Also\nCreating header and footer configurations\nstatic func plainHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style a header in a plain list.\nstatic func plainFooter() -> UIListContentConfiguration\nCreates the default configuration you use to style a footer in a plain list.\nstatic func groupedHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style a header in a grouped list.\nstatic func groupedFooter() -> UIListContentConfiguration\nCreates the default configuration you use to style a footer in a grouped list.\nstatic func prominentInsetGroupedHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style a prominent header in an inset grouped list.\nstatic func extraProminentInsetGroupedHeader() -> UIListContentConfiguration\nCreates the default configuration you use to style an extra prominent header in an inset grouped list."
  },
  {
    "title": "attributedText | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3601025-attributedtext",
    "html": "Discussion\n\nThis value supersedes the text property.\n\nSee Also\nCustomizing content\nvar image: UIImage?\nThe image to display.\nvar text: String?\nThe primary text.\nvar secondaryText: String?\nThe secondary text.\nvar secondaryAttributedText: NSAttributedString?\nAn attributed variant of the secondary text."
  },
  {
    "title": "text | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3601047-text",
    "html": "See Also\nCustomizing content\nvar image: UIImage?\nThe image to display.\nvar attributedText: NSAttributedString?\nAn attributed variant of the primary text.\nvar secondaryText: String?\nThe secondary text.\nvar secondaryAttributedText: NSAttributedString?\nAn attributed variant of the secondary text."
  },
  {
    "title": "secondaryText | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3601041-secondarytext",
    "html": "See Also\nCustomizing content\nvar image: UIImage?\nThe image to display.\nvar text: String?\nThe primary text.\nvar attributedText: NSAttributedString?\nAn attributed variant of the primary text.\nvar secondaryAttributedText: NSAttributedString?\nAn attributed variant of the secondary text."
  },
  {
    "title": "UICellConfigurationState.DropState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicellconfigurationstate/dropstate",
    "html": "Topics\nDrop states\ncase none\nThe system hasn’t associated the cell with a drag session.\ncase notTargeted\nA drag session is active and can perform a drop in the cell’s container, but the cell itself isn’t the drop target.\ncase targeted\nThe cell is the drop target for a drag session.\nComparing drop states\nstatic func == (UICellConfigurationState.DropState, UICellConfigurationState.DropState) -> Bool\nAn operator for checking whether two drop states are equal.\nstatic func != (UICellConfigurationState.DropState, UICellConfigurationState.DropState) -> Bool\nAn operator for checking whether two drop states are unequal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the drop state by feeding them into the hasher.\nvar hashValue: Int\nThe hash value.\nRelationships\nConforms To\nHashable\nSee Also\nManaging cell configuration states\nvar isEditing: Bool\nA Boolean value that indicates whether the cell is in editing mode.\nvar isSwiped: Bool\nA Boolean value that indicates whether the cell is in a swiped state.\nvar isExpanded: Bool\nA Boolean value that indicates whether the cell is in an expanded state, such as in an outline.\nvar isReordering: Bool\nA Boolean value that indicates whether the cell is reordering.\nvar cellDragState: UICellConfigurationState.DragState\nThe cell’s drag state.\nvar cellDropState: UICellConfigurationState.DropState\nThe cell’s drop state.\nenum UICellConfigurationState.DragState\nConstants that describe the cell’s drag state."
  },
  {
    "title": "UISplitViewController.DisplayModeButtonVisibility.always | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontroller/displaymodebuttonvisibility/always",
    "html": "Discussion\n\nWith this behavior, the display mode button can appear even if presentsWithGesture is false."
  },
  {
    "title": "UISplitViewController.DisplayMode.twoBesideSecondary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontroller/displaymode/twobesidesecondary",
    "html": "Discussion\n\nThis display mode is only available for UISplitViewController.Style.tripleColumn interfaces.\n\nThis display mode shows both sidebars tiled next to the secondary view controller. The primary view controller is displayed on the side specified by primaryEdge, followed by the supplementary view controller, and finally the secondary view controller. The secondary view controller’s view is fully interactive.\n\nThis display mode is available for the UISplitViewController.SplitBehavior.tile split behavior."
  },
  {
    "title": "UICollectionViewDiffableDataSourceReference | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdiffabledatasourcereference",
    "html": "Overview\n\nImportant\n\nIf you’re working in a Swift codebase, always use UICollectionViewDiffableDataSource instead.\n\nTopics\nCreating a diffable data source\ninit(collectionView: UICollectionView, cellProvider: UICollectionViewDiffableDataSourceReferenceCellProvider)\nCreates a diffable data source with the specified cell provider, and connects it to the specified collection view.\ntypealias UICollectionViewDiffableDataSourceReferenceCellProvider\nA closure that configures and returns a cell for a collection view from its diffable data source.\nCreating supplementary views\nvar supplementaryViewProvider: UICollectionViewDiffableDataSourceReferenceSupplementaryViewProvider?\nThe closure that configures and returns the collection view’s supplementary views, such as headers and footers, from the diffable data source.\ntypealias UICollectionViewDiffableDataSourceReferenceSupplementaryViewProvider\nA closure that configures and returns a collection view’s supplementary view, such as a header or footer, from a diffable data source.\nIdentifying items\nfunc itemIdentifier(for: IndexPath) -> Any?\nReturns an identifier for the item at the specified index path in the collection view.\nfunc indexPath(forItemIdentifier: Any) -> IndexPath?\nReturns an index path for the item with the specified identifier in the collection view.\nIdentifying sections\nfunc sectionIdentifier(for: Int) -> Any?\nReturns an identifier for the section at the index you specify in the collection view.\nfunc index(forSectionIdentifier: Any) -> Int\nReturns an index for the section with the identifier you specify in the collection view.\nUpdating data\nfunc snapshot() -> NSDiffableDataSourceSnapshotReference\nReturns a representation of the current state of the data in the collection view.\nfunc applySnapshot(NSDiffableDataSourceSnapshotReference, animatingDifferences: Bool)\nUpdates the UI to reflect the state of the data in the snapshot, optionally animating the UI changes.\nfunc applySnapshot(NSDiffableDataSourceSnapshotReference, animatingDifferences: Bool, completion: (() -> Void)?)\nUpdates the UI to reflect the state of the data in the snapshot, optionally animating the UI changes and executing a completion handler.\nfunc applySnapshot(usingReloadData: NSDiffableDataSourceSnapshotReference)\nResets the UI to reflect the state of the data in the snapshot without computing a diff or animating the changes.\nfunc applySnapshot(usingReloadData: NSDiffableDataSourceSnapshotReference, completion: (() -> Void)?)\nResets the UI to reflect the state of the data in the snapshot without computing a diff or animating the changes, optionally executing a completion handler.\nUpdating section data\nfunc snapshot(forSection: Any) -> NSDiffableDataSourceSectionSnapshotReference\nReturns a representation of the current state of the data in the specified section of the collection view.\nfunc applySnapshot(NSDiffableDataSourceSectionSnapshotReference, toSection: Any, animatingDifferences: Bool)\nUpdates the section UI to reflect the state of the data in the specified snapshot, optionally animating the UI changes.\nfunc applySnapshot(NSDiffableDataSourceSectionSnapshotReference, toSection: Any, animatingDifferences: Bool, completion: (() -> Void)?)\nUpdates the section UI to reflect the state of the data in the specified snapshot, optionally animating the UI changes and executing a completion handler.\nSupporting reordering\nvar reorderingHandlers: __UICollectionViewDiffableDataSourceReorderingHandlers\nThe diffable data source’s handlers for reordering items.\nSupporting expanding and collapsing\nvar sectionSnapshotHandlers: __UICollectionViewDiffableDataSourceSectionSnapshotHandlers\nThe diffable data source’s handlers for expanding and collapsing items.\nRelationships\nInherits From\nNSObject\nConforms To\nUICollectionViewDataSource"
  },
  {
    "title": "UISplitViewController.DisplayModeButtonVisibility.automatic | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontroller/displaymodebuttonvisibility/automatic",
    "html": "Discussion\n\nWith this behavior, setting presentsWithGesture to false hides the display mode button. This behavior is the default."
  },
  {
    "title": "collectionView(_:numberOfItemsInSection:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdatasource/1618058-collectionview",
    "html": "Required\n\nParameters\ncollectionView\n\nThe collection view requesting this information.\n\nsection\n\nAn index number identifying a section in collectionView. This index value is 0-based.\n\nReturn Value\n\nThe number of items in section.\n\nSee Also\nGetting item and section metrics\nfunc numberOfSections(in: UICollectionView) -> Int\nAsks your data source object for the number of sections in the collection view."
  },
  {
    "title": "collectionView(_:cellForItemAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdatasource/1618029-collectionview",
    "html": "Required\n\nParameters\ncollectionView\n\nThe collection view requesting this information.\n\nindexPath\n\nThe index path that specifies the location of the item.\n\nReturn Value\n\nA configured cell object. You must not return nil from this method.\n\nDiscussion\n\nYour implementation of this method is responsible for creating, configuring, and returning the appropriate cell for the given item. You do this by calling the dequeueReusableCell(withReuseIdentifier:for:) method of the collection view and passing the reuse identifier that corresponds to the cell type you want. That method always returns a valid cell object. Upon receiving the cell, you should set any properties that correspond to the data of the corresponding item, perform any additional needed configuration, and return the cell.\n\nYou don’t need to set the location of the cell inside the collection view’s bounds. The collection view sets the location of each cell automatically using the layout attributes provided by its layout object.\n\nIf isPrefetchingEnabled on the collection view is set to true then this method is called in advance of the cell appearing. Use the collectionView(_:willDisplay:forItemAt:) delegate method to make any changes to the appearance of the cell to reflect its visual state such as selection.\n\nThis method must always return a valid view object.\n\nSee Also\nGetting views for items\nfunc collectionView(UICollectionView, viewForSupplementaryElementOfKind: String, at: IndexPath) -> UICollectionReusableView\nAsks your data source object to provide a supplementary view to display in the collection view."
  },
  {
    "title": "UIApplication.State.inactive | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/state/inactive",
    "html": "Discussion\n\nThis might happen as a result of an interruption or because the app is transitioning to or from the background."
  },
  {
    "title": "cellDragState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicellconfigurationstate/3601198-celldragstate",
    "html": "See Also\nManaging cell configuration states\nvar isEditing: Bool\nA Boolean value that indicates whether the cell is in editing mode.\nvar isSwiped: Bool\nA Boolean value that indicates whether the cell is in a swiped state.\nvar isExpanded: Bool\nA Boolean value that indicates whether the cell is in an expanded state, such as in an outline.\nvar isReordering: Bool\nA Boolean value that indicates whether the cell is reordering.\nvar cellDropState: UICellConfigurationState.DropState\nThe cell’s drop state.\nenum UICellConfigurationState.DragState\nConstants that describe the cell’s drag state.\nenum UICellConfigurationState.DropState\nConstants that describe the cell’s drop state."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicellconfigurationstate/3600907-subscript",
    "html": "Relationships\nFrom Protocol\nUIConfigurationState\nSee Also\nManaging view configuration states\nvar traitCollection: UITraitCollection\nThe traits that describe the current layout environment of the view, such as the user interface style and layout direction.\nvar isSelected: Bool\nA Boolean value that indicates whether the cell is in a selected state.\nvar isHighlighted: Bool\nA Boolean value that indicates whether the cell is in a highlighted state.\nvar isFocused: Bool\nA Boolean value that indicates whether the cell is in a focused state.\nvar isDisabled: Bool\nA Boolean value that indicates whether the cell is in a disabled state.\nvar isPinned: Bool\nA Boolean value that indicates whether the view is in a pinned state."
  },
  {
    "title": "isEditing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicellconfigurationstate/3600400-isediting",
    "html": "See Also\nManaging cell configuration states\nvar isSwiped: Bool\nA Boolean value that indicates whether the cell is in a swiped state.\nvar isExpanded: Bool\nA Boolean value that indicates whether the cell is in an expanded state, such as in an outline.\nvar isReordering: Bool\nA Boolean value that indicates whether the cell is reordering.\nvar cellDragState: UICellConfigurationState.DragState\nThe cell’s drag state.\nvar cellDropState: UICellConfigurationState.DropState\nThe cell’s drop state.\nenum UICellConfigurationState.DragState\nConstants that describe the cell’s drag state.\nenum UICellConfigurationState.DropState\nConstants that describe the cell’s drop state."
  },
  {
    "title": "isFocused | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicellconfigurationstate/3600903-isfocused",
    "html": "See Also\nManaging view configuration states\nvar traitCollection: UITraitCollection\nThe traits that describe the current layout environment of the view, such as the user interface style and layout direction.\nvar isSelected: Bool\nA Boolean value that indicates whether the cell is in a selected state.\nvar isHighlighted: Bool\nA Boolean value that indicates whether the cell is in a highlighted state.\nvar isDisabled: Bool\nA Boolean value that indicates whether the cell is in a disabled state.\nvar isPinned: Bool\nA Boolean value that indicates whether the view is in a pinned state.\nsubscript(UIConfigurationStateCustomKey) -> AnyHashable?\nAccesses custom states by key."
  },
  {
    "title": "isSelected | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicellconfigurationstate/3600905-isselected",
    "html": "See Also\nManaging view configuration states\nvar traitCollection: UITraitCollection\nThe traits that describe the current layout environment of the view, such as the user interface style and layout direction.\nvar isHighlighted: Bool\nA Boolean value that indicates whether the cell is in a highlighted state.\nvar isFocused: Bool\nA Boolean value that indicates whether the cell is in a focused state.\nvar isDisabled: Bool\nA Boolean value that indicates whether the cell is in a disabled state.\nvar isPinned: Bool\nA Boolean value that indicates whether the view is in a pinned state.\nsubscript(UIConfigurationStateCustomKey) -> AnyHashable?\nAccesses custom states by key."
  },
  {
    "title": "UIListContentConfiguration.ImageProperties | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/imageproperties",
    "html": "Topics\nConfiguring image properties\nvar preferredSymbolConfiguration: UIImage.SymbolConfiguration?\nThe symbol configuration to use.\nvar tintColor: UIColor?\nThe tint color to apply to the image view.\nvar tintColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the tint color.\nfunc resolvedTintColor(for: UIColor) -> UIColor\nGenerates the resolved tint color for the specified tint color, using the tint color and color transformer.\nvar cornerRadius: CGFloat\nThe preferred corner radius, using a continuous corner curve, for the image.\nvar maximumSize: CGSize\nThe maximum size for the image.\nvar reservedLayoutSize: CGSize\nThe layout size that the system reserves for the image, and then centers the image within.\nstatic let standardDimension: CGFloat\nThe system standard layout dimension for reserved layout size.\nvar accessibilityIgnoresInvertColors: Bool\nA Boolean value that determines whether the image inverts its colors when the user turns on the Invert Colors accessibility setting.\nComparing image properties\nstatic func == (UIListContentConfiguration.ImageProperties, UIListContentConfiguration.ImageProperties) -> Bool\nAn operator for checking whether two image properties structures are equal.\nstatic func != (UIListContentConfiguration.ImageProperties, UIListContentConfiguration.ImageProperties) -> Bool\nAn operator for checking whether two image properties structures are unequal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the image properties structure by feeding them into the hasher.\nvar hashValue: Int\nThe hash value.\nDescribing image properties\nvar description: String\nA textual representation of this instance.\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging.\nvar customMirror: Mirror\nThe custom mirror for this instance.\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomReflectable\nCustomStringConvertible\nHashable\nSee Also\nCustomizing appearance\nvar imageProperties: UIListContentConfiguration.ImageProperties\nProperties for configuring the image.\nvar textProperties: UIListContentConfiguration.TextProperties\nProperties for configuring the primary text.\nvar secondaryTextProperties: UIListContentConfiguration.TextProperties\nProperties for configuring the secondary text.\nstruct UIListContentConfiguration.TextProperties\nProperties that affect the list content configuration’s text."
  },
  {
    "title": "traitCollection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicellconfigurationstate/3600908-traitcollection",
    "html": "Relationships\nFrom Protocol\nUIConfigurationState\nSee Also\nManaging view configuration states\nvar isSelected: Bool\nA Boolean value that indicates whether the cell is in a selected state.\nvar isHighlighted: Bool\nA Boolean value that indicates whether the cell is in a highlighted state.\nvar isFocused: Bool\nA Boolean value that indicates whether the cell is in a focused state.\nvar isDisabled: Bool\nA Boolean value that indicates whether the cell is in a disabled state.\nvar isPinned: Bool\nA Boolean value that indicates whether the view is in a pinned state.\nsubscript(UIConfigurationStateCustomKey) -> AnyHashable?\nAccesses custom states by key."
  },
  {
    "title": "traitCollection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiconfigurationstate/3600978-traitcollection",
    "html": "Required\n\nSee Also\nManaging configuration states\nsubscript(UIConfigurationStateCustomKey) -> AnyHashable?\nAccesses custom states by key.\n\nRequired"
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewconfigurationstate/3656324-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible\nSee Also\nDescribing a view configuration state\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging.\nvar customMirror: Mirror\nThe custom mirror for this instance."
  },
  {
    "title": "secondaryTextProperties | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3601042-secondarytextproperties",
    "html": "See Also\nCustomizing appearance\nvar imageProperties: UIListContentConfiguration.ImageProperties\nProperties for configuring the image.\nvar textProperties: UIListContentConfiguration.TextProperties\nProperties for configuring the primary text.\nstruct UIListContentConfiguration.ImageProperties\nProperties that affect the list content configuration’s image.\nstruct UIListContentConfiguration.TextProperties\nProperties that affect the list content configuration’s text."
  },
  {
    "title": "init(traitCollection:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewconfigurationstate/3600605-init",
    "html": "Discussion\n\nTypically, you don’t create a configuration state yourself. To obtain a configuration state, override the updateConfiguration(using:) method in your view subclass and use the state parameter. Outside of this method, you can get a view’s configuration state by using its configurationState property.\n\nRelationships\nFrom Protocol\nUIConfigurationState"
  },
  {
    "title": "supports(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentview/4051990-supports",
    "html": "Parameters\nconfiguration\n\nThe new configuration to test for compatibility.\n\nReturn Value\n\ntrue if the view supports this configuration being set to its configuration property and is capable of updating itself for the configuration; otherwise, false.\n\nDiscussion\n\nThe default implementation assumes the view is compatible with configuration types that match the type of the view’s existing configuration.\n\nRelationships\nFrom Protocol\nUIContentView"
  },
  {
    "title": "imageLayoutGuide | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentview/3650224-imagelayoutguide",
    "html": "Discussion\n\nIf the configuration doesn’t specify an image, the value of this property is nil.\n\nIf you apply a new configuration without secondary text to the content view, the system removes this layout guide from the view and deactivates any constraints associated with it.\n\nSee Also\nManaging the content layout\nvar textLayoutGuide: UILayoutGuide?\nA guide for positioning the primary text in the content view.\nvar secondaryTextLayoutGuide: UILayoutGuide?\nA guide for positioning the secondary text in the content view."
  },
  {
    "title": "extraSmall | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentsizecategory/1623066-extrasmall",
    "html": "See Also\nFont sizes\nstatic let unspecified: UIContentSizeCategory\nAn unspecified font size.\nstatic let small: UIContentSizeCategory\nA small font.\nstatic let medium: UIContentSizeCategory\nA medium-sized font.\nstatic let large: UIContentSizeCategory\nA large font.\nstatic let extraLarge: UIContentSizeCategory\nAn extra-large font.\nstatic let extraExtraLarge: UIContentSizeCategory\nA font that is larger than the extra-large font but smaller than the largest font size available.\nstatic let extraExtraExtraLarge: UIContentSizeCategory\nThe largest font size."
  },
  {
    "title": "textLayoutGuide | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentview/3650226-textlayoutguide",
    "html": "Discussion\n\nIf the configuration doesn’t specify primary text, the value of this property is nil.\n\nIf you apply a new configuration without primary text to the content view, the system removes this layout guide from the view and deactivates any constraints associated with it.\n\nSee Also\nManaging the content layout\nvar secondaryTextLayoutGuide: UILayoutGuide?\nA guide for positioning the secondary text in the content view.\nvar imageLayoutGuide: UILayoutGuide?\nA guide for positioning the image in the content view."
  },
  {
    "title": "unspecified | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentsizecategory/1771727-unspecified",
    "html": "See Also\nFont sizes\nstatic let extraSmall: UIContentSizeCategory\nAn extra-small font.\nstatic let small: UIContentSizeCategory\nA small font.\nstatic let medium: UIContentSizeCategory\nA medium-sized font.\nstatic let large: UIContentSizeCategory\nA large font.\nstatic let extraLarge: UIContentSizeCategory\nAn extra-large font.\nstatic let extraExtraLarge: UIContentSizeCategory\nA font that is larger than the extra-large font but smaller than the largest font size available.\nstatic let extraExtraExtraLarge: UIContentSizeCategory\nThe largest font size."
  },
  {
    "title": "small | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentsizecategory/1623103-small",
    "html": "See Also\nFont sizes\nstatic let unspecified: UIContentSizeCategory\nAn unspecified font size.\nstatic let extraSmall: UIContentSizeCategory\nAn extra-small font.\nstatic let medium: UIContentSizeCategory\nA medium-sized font.\nstatic let large: UIContentSizeCategory\nA large font.\nstatic let extraLarge: UIContentSizeCategory\nAn extra-large font.\nstatic let extraExtraLarge: UIContentSizeCategory\nA font that is larger than the extra-large font but smaller than the largest font size available.\nstatic let extraExtraExtraLarge: UIContentSizeCategory\nThe largest font size."
  },
  {
    "title": "makeContentView() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentconfiguration/3600982-makecontentview",
    "html": "Required"
  },
  {
    "title": "extraLarge | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentsizecategory/1622960-extralarge",
    "html": "See Also\nFont sizes\nstatic let unspecified: UIContentSizeCategory\nAn unspecified font size.\nstatic let extraSmall: UIContentSizeCategory\nAn extra-small font.\nstatic let small: UIContentSizeCategory\nA small font.\nstatic let medium: UIContentSizeCategory\nA medium-sized font.\nstatic let large: UIContentSizeCategory\nA large font.\nstatic let extraExtraLarge: UIContentSizeCategory\nA font that is larger than the extra-large font but smaller than the largest font size available.\nstatic let extraExtraExtraLarge: UIContentSizeCategory\nThe largest font size."
  },
  {
    "title": "init(configuration:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentview/3600554-init",
    "html": "See Also\nCreating a list content view\ninit?(coder: NSCoder)\nCreates a list content view from data in an unarchiver."
  },
  {
    "title": "accessibilityExtraExtraLarge | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentsizecategory/1623120-accessibilityextraextralarge",
    "html": "See Also\nAccessibility sizes\nstatic let accessibilityMedium: UIContentSizeCategory\nA medium font size that reflects the current accessibility settings.\nstatic let accessibilityLarge: UIContentSizeCategory\nA large font size that reflects the current accessibility settings.\nstatic let accessibilityExtraLarge: UIContentSizeCategory\nAn extra-large font size that reflects the current accessibility settings.\nstatic let accessibilityExtraExtraExtraLarge: UIContentSizeCategory\nThe largest font size that reflects the current accessibility settings.\nvar isAccessibilityCategory: Bool\nA Boolean value that indicates whether the content size category is associated with accessibility."
  },
  {
    "title": "accessibilityLarge | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentsizecategory/1623050-accessibilitylarge",
    "html": "See Also\nAccessibility sizes\nstatic let accessibilityMedium: UIContentSizeCategory\nA medium font size that reflects the current accessibility settings.\nstatic let accessibilityExtraLarge: UIContentSizeCategory\nAn extra-large font size that reflects the current accessibility settings.\nstatic let accessibilityExtraExtraLarge: UIContentSizeCategory\nA font that is larger than the extra-large font but not the largest available, reflecting the current accessibility settings.\nstatic let accessibilityExtraExtraExtraLarge: UIContentSizeCategory\nThe largest font size that reflects the current accessibility settings.\nvar isAccessibilityCategory: Bool\nA Boolean value that indicates whether the content size category is associated with accessibility."
  },
  {
    "title": "updated(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentconfiguration/3600983-updated",
    "html": "Required"
  },
  {
    "title": ">(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentsizecategory/2897365",
    "html": "Relationships\nFrom Protocol\nComparable\nSee Also\nFont size category comparisons\nstatic func < (UIContentSizeCategory, UIContentSizeCategory) -> Bool\nIndicates whether the left-hand category represents a text size smaller than the text size associated with the right-hand category.\nstatic func <= (UIContentSizeCategory, UIContentSizeCategory) -> Bool\nIndicates whether the left-hand category represents a text size smaller than or equal to the text size associated with the right-hand category.\nstatic func >= (UIContentSizeCategory, UIContentSizeCategory) -> Bool\nIndicates whether the left-hand category represents a text size greater than or equal to the text size associated with the right-hand category."
  },
  {
    "title": "isAccessibilityCategory | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentsizecategory/2897444-isaccessibilitycategory",
    "html": "Discussion\n\nThis property is true for accessibilityMedium, accessibilityLarge, accessibilityExtraLarge, accessibilityExtraExtraLarge, and accessibilityExtraExtraExtraLarge. It is false for other values.\n\nSee Also\nAccessibility sizes\nstatic let accessibilityMedium: UIContentSizeCategory\nA medium font size that reflects the current accessibility settings.\nstatic let accessibilityLarge: UIContentSizeCategory\nA large font size that reflects the current accessibility settings.\nstatic let accessibilityExtraLarge: UIContentSizeCategory\nAn extra-large font size that reflects the current accessibility settings.\nstatic let accessibilityExtraExtraLarge: UIContentSizeCategory\nA font that is larger than the extra-large font but not the largest available, reflecting the current accessibility settings.\nstatic let accessibilityExtraExtraExtraLarge: UIContentSizeCategory\nThe largest font size that reflects the current accessibility settings."
  },
  {
    "title": "accessibilityExtraExtraExtraLarge | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentsizecategory/1623086-accessibilityextraextraextralarg",
    "html": "See Also\nAccessibility sizes\nstatic let accessibilityMedium: UIContentSizeCategory\nA medium font size that reflects the current accessibility settings.\nstatic let accessibilityLarge: UIContentSizeCategory\nA large font size that reflects the current accessibility settings.\nstatic let accessibilityExtraLarge: UIContentSizeCategory\nAn extra-large font size that reflects the current accessibility settings.\nstatic let accessibilityExtraExtraLarge: UIContentSizeCategory\nA font that is larger than the extra-large font but not the largest available, reflecting the current accessibility settings.\nvar isAccessibilityCategory: Bool\nA Boolean value that indicates whether the content size category is associated with accessibility."
  },
  {
    "title": "<=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentsizecategory/2897361",
    "html": "Relationships\nFrom Protocol\nComparable\nSee Also\nFont size category comparisons\nstatic func < (UIContentSizeCategory, UIContentSizeCategory) -> Bool\nIndicates whether the left-hand category represents a text size smaller than the text size associated with the right-hand category.\nstatic func > (UIContentSizeCategory, UIContentSizeCategory) -> Bool\nIndicates whether the left-hand category represents a text size greater than the text size associated with the right-hand category.\nstatic func >= (UIContentSizeCategory, UIContentSizeCategory) -> Bool\nIndicates whether the left-hand category represents a text size greater than or equal to the text size associated with the right-hand category."
  },
  {
    "title": ">=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentsizecategory/2897378",
    "html": "Relationships\nFrom Protocol\nComparable\nSee Also\nFont size category comparisons\nstatic func < (UIContentSizeCategory, UIContentSizeCategory) -> Bool\nIndicates whether the left-hand category represents a text size smaller than the text size associated with the right-hand category.\nstatic func <= (UIContentSizeCategory, UIContentSizeCategory) -> Bool\nIndicates whether the left-hand category represents a text size smaller than or equal to the text size associated with the right-hand category.\nstatic func > (UIContentSizeCategory, UIContentSizeCategory) -> Bool\nIndicates whether the left-hand category represents a text size greater than the text size associated with the right-hand category."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicellconfigurationstate/3600897-hash",
    "html": "Relationships\nFrom Protocol\nHashable\nSee Also\nComparing cell configuration states\nstatic func != (UICellConfigurationState, UICellConfigurationState) -> Bool\nAn operator for checking whether two cell configuration states are equal.\nstatic func == (UICellConfigurationState, UICellConfigurationState) -> Bool\nAn operator for checking whether two cell configuration states are unequal.\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicellconfigurationstate/3600877",
    "html": "See Also\nComparing cell configuration states\nstatic func == (UICellConfigurationState, UICellConfigurationState) -> Bool\nAn operator for checking whether two cell configuration states are unequal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the cell configuration state by feeding them into the hasher.\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicellconfigurationstate/3600878",
    "html": "See Also\nComparing cell configuration states\nstatic func != (UICellConfigurationState, UICellConfigurationState) -> Bool\nAn operator for checking whether two cell configuration states are equal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the cell configuration state by feeding them into the hasher.\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3600990",
    "html": "See Also\nComparing list content configurations\nstatic func == (UIListContentConfiguration, UIListContentConfiguration) -> Bool\nAn operator for checking whether two list content configurations are equal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the list content configuration by feeding them into the hasher.\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "directionalLayoutMargins | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3601028-directionallayoutmargins",
    "html": "Discussion\n\nWhen you preserve superview layout margins on one or both axes, this value specifies the minimum margins. The inherited margins may be larger.\n\nBy default, the content view preserves the layout margins of its superview on both axes. You can customize this behavior by changing axesPreservingSuperviewLayoutMargins.\n\nSee Also\nCustomizing layout\nvar axesPreservingSuperviewLayoutMargins: UIAxis\nA Boolean value that determines whether the content view preserves the layout margins that it inherits from its superview on the horizontal or vertical axes.\nvar prefersSideBySideTextAndSecondaryText: Bool\nA Boolean value that determines whether the configuration positions the text and secondary text side by side.\nvar imageToTextPadding: CGFloat\nThe padding between the image and text.\nvar textToSecondaryTextHorizontalPadding: CGFloat\nThe minimum horizontal padding between the text and secondary text.\nvar textToSecondaryTextVerticalPadding: CGFloat\nThe vertical padding between the text and secondary text."
  },
  {
    "title": "transform | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiconfigurationcolortransformer/3600974-transform",
    "html": "See Also\nCalling the color transformer\nfunc callAsFunction(UIColor) -> UIColor\nCalls the transform closure of the color transformer."
  },
  {
    "title": "sidebarCell() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3601043-sidebarcell",
    "html": "Return Value\n\nThe default configuration for a cell in a sidebar list.\n\nDiscussion\n\nCreate this configuration to update the content and styling of a cell in a sidebar collection view list. When you apply this configuration to a cell, the cell displays one label, which resizes automatically based on the length of the text you provide and the device’s Dynamic Type and accessibility settings.\n\nFor an appearance consistent with system defaults, display your cell in a sidebar collection view list that you configure with one of the following enumeration cases:\n\nUICollectionLayoutListConfiguration.Appearance.sidebar\n\nUICollectionLayoutListConfiguration.Appearance.sidebarPlain\n\nConfigure the background of your cell using one of the UIBackgroundConfiguration options below. Match the background of your cell to the corresponding table view or collection view styles as follows:\n\nBackground configuration option\n\n\t\n\nMatching table view or collection view styles\n\n\n\n\nlistSidebarCell()\n\n\t\n\nUICollectionLayoutListConfiguration.Appearance.sidebar, UICollectionLayoutListConfiguration.Appearance.sidebarPlain\n\nSee Also\nCreating default cell configurations\nstatic func cell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell in a list.\nstatic func subtitleCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell that’s in a list and contains subtitle text.\nstatic func valueCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell that’s in a list and contains side-by-side value text.\nstatic func sidebarSubtitleCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell that’s in a sidebar list and contains subtitle text.\nstatic func accompaniedSidebarCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell in an accompanied sidebar list.\nstatic func accompaniedSidebarSubtitleCell() -> UIListContentConfiguration\nCreates the default configuration you use to style a cell that’s in an accompanied sidebar list and contains subtitle text."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3601031-hash",
    "html": "Relationships\nFrom Protocol\nHashable\nSee Also\nComparing list content configurations\nstatic func == (UIListContentConfiguration, UIListContentConfiguration) -> Bool\nAn operator for checking whether two list content configurations are equal.\nstatic func != (UIListContentConfiguration, UIListContentConfiguration) -> Bool\nAn operator for checking whether two list content configurations are unequal.\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "imageProperties | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3601034-imageproperties",
    "html": "See Also\nCustomizing appearance\nvar textProperties: UIListContentConfiguration.TextProperties\nProperties for configuring the primary text.\nvar secondaryTextProperties: UIListContentConfiguration.TextProperties\nProperties for configuring the secondary text.\nstruct UIListContentConfiguration.ImageProperties\nProperties that affect the list content configuration’s image.\nstruct UIListContentConfiguration.TextProperties\nProperties that affect the list content configuration’s text."
  },
  {
    "title": "text | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281959-text",
    "html": "See Also\nEdit menus\nstatic let undoRedo: UIMenu.Identifier\nThe Undo/Redo menu.\nstatic let standardEdit: UIMenu.Identifier\nThe standard Edit menu.\nstatic let find: UIMenu.Identifier\nThe Find menu.\nstatic let replace: UIMenu.Identifier\nThe Replace menu.\nstatic let share: UIMenu.Identifier\nThe Share menu.\nstatic let textStyle: UIMenu.Identifier\nThe Text Style menu.\nstatic let spelling: UIMenu.Identifier\nThe Spelling menu.\nstatic let spellingPanel: UIMenu.Identifier\nThe Spelling Panel menu.\nstatic let spellingOptions: UIMenu.Identifier\nThe Spelling Options menu.\nstatic let substitutions: UIMenu.Identifier\nThe Substitutions menu.\nstatic let substitutionsPanel: UIMenu.Identifier\nThe Substitutions Panel menu.\nstatic let substitutionOptions: UIMenu.Identifier\nThe Substitutions Options menu.\nstatic let transformations: UIMenu.Identifier\nThe Transformations menu.\nstatic let speech: UIMenu.Identifier\nThe Speech menu.\nstatic let lookup: UIMenu.Identifier\nThe Lookup menu.\nstatic let learn: UIMenu.Identifier\nThe Learn menu.\nstatic let format: UIMenu.Identifier\nThe Format menu.\nstatic let font: UIMenu.Identifier\nThe Font menu.\nstatic let textSize: UIMenu.Identifier\nThe Text Size menu.\nstatic let textColor: UIMenu.Identifier\nThe Text Color menu.\nstatic let textStylePasteboard: UIMenu.Identifier\nThe Text Style Pasteboard menu.\nstatic let autoFill: UIMenu.Identifier\nThe AutoFill menu.\nstatic let writingDirection: UIMenu.Identifier\nThe Writing Direction menu.\nstatic let alignment: UIMenu.Identifier\nThe Alignment menu."
  },
  {
    "title": "bringAllToFront | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281930-bringalltofront",
    "html": "See Also\nWindow menus\nstatic let minimizeAndZoom: UIMenu.Identifier\nThe Minimize and Zoom menu."
  },
  {
    "title": "UICellConfigurationState.DragState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicellconfigurationstate/dragstate",
    "html": "Topics\nDrag states\ncase none\nThe system hasn’t associated the cell with a drag session.\ncase lifting\nA user interaction is lifting the cell, but it isn’t yet part of an active drag session.\ncase dragging\nThe cell is part of an active drag session.\nComparing drag states\nstatic func == (UICellConfigurationState.DragState, UICellConfigurationState.DragState) -> Bool\nAn operator for checking whether two drag states are equal.\nstatic func != (UICellConfigurationState.DragState, UICellConfigurationState.DragState) -> Bool\nAn operator for checking whether two drag states are unequal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the drag state by feeding them into the hasher.\nvar hashValue: Int\nThe hash value.\nRelationships\nConforms To\nHashable\nSee Also\nManaging cell configuration states\nvar isEditing: Bool\nA Boolean value that indicates whether the cell is in editing mode.\nvar isSwiped: Bool\nA Boolean value that indicates whether the cell is in a swiped state.\nvar isExpanded: Bool\nA Boolean value that indicates whether the cell is in an expanded state, such as in an outline.\nvar isReordering: Bool\nA Boolean value that indicates whether the cell is reordering.\nvar cellDragState: UICellConfigurationState.DragState\nThe cell’s drag state.\nvar cellDropState: UICellConfigurationState.DropState\nThe cell’s drop state.\nenum UICellConfigurationState.DropState\nConstants that describe the cell’s drop state."
  },
  {
    "title": "isReordering | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicellconfigurationstate/3672180-isreordering",
    "html": "See Also\nManaging cell configuration states\nvar isEditing: Bool\nA Boolean value that indicates whether the cell is in editing mode.\nvar isSwiped: Bool\nA Boolean value that indicates whether the cell is in a swiped state.\nvar isExpanded: Bool\nA Boolean value that indicates whether the cell is in an expanded state, such as in an outline.\nvar cellDragState: UICellConfigurationState.DragState\nThe cell’s drag state.\nvar cellDropState: UICellConfigurationState.DropState\nThe cell’s drop state.\nenum UICellConfigurationState.DragState\nConstants that describe the cell’s drag state.\nenum UICellConfigurationState.DropState\nConstants that describe the cell’s drop state."
  },
  {
    "title": "textProperties | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3601048-textproperties",
    "html": "See Also\nCustomizing appearance\nvar imageProperties: UIListContentConfiguration.ImageProperties\nProperties for configuring the image.\nvar secondaryTextProperties: UIListContentConfiguration.TextProperties\nProperties for configuring the secondary text.\nstruct UIListContentConfiguration.ImageProperties\nProperties that affect the list content configuration’s image.\nstruct UIListContentConfiguration.TextProperties\nProperties that affect the list content configuration’s text."
  },
  {
    "title": "image | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentconfiguration/3601033-image",
    "html": "See Also\nCustomizing content\nvar text: String?\nThe primary text.\nvar attributedText: NSAttributedString?\nAn attributed variant of the primary text.\nvar secondaryText: String?\nThe secondary text.\nvar secondaryAttributedText: NSAttributedString?\nAn attributed variant of the secondary text."
  },
  {
    "title": "isSwiped | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicellconfigurationstate/3600402-isswiped",
    "html": "See Also\nManaging cell configuration states\nvar isEditing: Bool\nA Boolean value that indicates whether the cell is in editing mode.\nvar isExpanded: Bool\nA Boolean value that indicates whether the cell is in an expanded state, such as in an outline.\nvar isReordering: Bool\nA Boolean value that indicates whether the cell is reordering.\nvar cellDragState: UICellConfigurationState.DragState\nThe cell’s drag state.\nvar cellDropState: UICellConfigurationState.DropState\nThe cell’s drop state.\nenum UICellConfigurationState.DragState\nConstants that describe the cell’s drag state.\nenum UICellConfigurationState.DropState\nConstants that describe the cell’s drop state."
  },
  {
    "title": "isExpanded | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicellconfigurationstate/3600401-isexpanded",
    "html": "See Also\nManaging cell configuration states\nvar isEditing: Bool\nA Boolean value that indicates whether the cell is in editing mode.\nvar isSwiped: Bool\nA Boolean value that indicates whether the cell is in a swiped state.\nvar isReordering: Bool\nA Boolean value that indicates whether the cell is reordering.\nvar cellDragState: UICellConfigurationState.DragState\nThe cell’s drag state.\nvar cellDropState: UICellConfigurationState.DropState\nThe cell’s drop state.\nenum UICellConfigurationState.DragState\nConstants that describe the cell’s drag state.\nenum UICellConfigurationState.DropState\nConstants that describe the cell’s drop state."
  },
  {
    "title": "isPinned | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicellconfigurationstate/3751730-ispinned",
    "html": "Discussion\n\nThis state applies to header and footer views.\n\nSee Also\nManaging view configuration states\nvar traitCollection: UITraitCollection\nThe traits that describe the current layout environment of the view, such as the user interface style and layout direction.\nvar isSelected: Bool\nA Boolean value that indicates whether the cell is in a selected state.\nvar isHighlighted: Bool\nA Boolean value that indicates whether the cell is in a highlighted state.\nvar isFocused: Bool\nA Boolean value that indicates whether the cell is in a focused state.\nvar isDisabled: Bool\nA Boolean value that indicates whether the cell is in a disabled state.\nsubscript(UIConfigurationStateCustomKey) -> AnyHashable?\nAccesses custom states by key."
  },
  {
    "title": "isDisabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicellconfigurationstate/3600900-isdisabled",
    "html": "See Also\nManaging view configuration states\nvar traitCollection: UITraitCollection\nThe traits that describe the current layout environment of the view, such as the user interface style and layout direction.\nvar isSelected: Bool\nA Boolean value that indicates whether the cell is in a selected state.\nvar isHighlighted: Bool\nA Boolean value that indicates whether the cell is in a highlighted state.\nvar isFocused: Bool\nA Boolean value that indicates whether the cell is in a focused state.\nvar isPinned: Bool\nA Boolean value that indicates whether the view is in a pinned state.\nsubscript(UIConfigurationStateCustomKey) -> AnyHashable?\nAccesses custom states by key."
  },
  {
    "title": "isHighlighted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicellconfigurationstate/3600904-ishighlighted",
    "html": "See Also\nManaging view configuration states\nvar traitCollection: UITraitCollection\nThe traits that describe the current layout environment of the view, such as the user interface style and layout direction.\nvar isSelected: Bool\nA Boolean value that indicates whether the cell is in a selected state.\nvar isFocused: Bool\nA Boolean value that indicates whether the cell is in a focused state.\nvar isDisabled: Bool\nA Boolean value that indicates whether the cell is in a disabled state.\nvar isPinned: Bool\nA Boolean value that indicates whether the view is in a pinned state.\nsubscript(UIConfigurationStateCustomKey) -> AnyHashable?\nAccesses custom states by key."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiconfigurationstate/3600977-subscript",
    "html": "Required\n\nSee Also\nManaging configuration states\nvar traitCollection: UITraitCollection\nThe traits that describe the current layout environment of the view, such as the user interface style and layout direction.\n\nRequired"
  },
  {
    "title": "isFocused | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewconfigurationstate/3601072-isfocused",
    "html": "See Also\nManaging view configuration states\nvar traitCollection: UITraitCollection\nThe traits that describe the current layout environment of the view, such as the user interface style and layout direction.\nvar isSelected: Bool\nA Boolean value that indicates whether the view is in a selected state.\nvar isHighlighted: Bool\nA Boolean value that indicates whether the view is in a highlighted state.\nvar isDisabled: Bool\nA Boolean value that indicates whether the view is in a disabled state.\nvar isPinned: Bool\nA Boolean value that indicates whether the view is in a pinned state.\nsubscript(UIConfigurationStateCustomKey) -> AnyHashable?\nAccesses custom states by key."
  },
  {
    "title": "isDisabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewconfigurationstate/3601071-isdisabled",
    "html": "See Also\nManaging view configuration states\nvar traitCollection: UITraitCollection\nThe traits that describe the current layout environment of the view, such as the user interface style and layout direction.\nvar isSelected: Bool\nA Boolean value that indicates whether the view is in a selected state.\nvar isHighlighted: Bool\nA Boolean value that indicates whether the view is in a highlighted state.\nvar isFocused: Bool\nA Boolean value that indicates whether the view is in a focused state.\nvar isPinned: Bool\nA Boolean value that indicates whether the view is in a pinned state.\nsubscript(UIConfigurationStateCustomKey) -> AnyHashable?\nAccesses custom states by key."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewconfigurationstate/3601075-subscript",
    "html": "Relationships\nFrom Protocol\nUIConfigurationState\nSee Also\nManaging view configuration states\nvar traitCollection: UITraitCollection\nThe traits that describe the current layout environment of the view, such as the user interface style and layout direction.\nvar isSelected: Bool\nA Boolean value that indicates whether the view is in a selected state.\nvar isHighlighted: Bool\nA Boolean value that indicates whether the view is in a highlighted state.\nvar isFocused: Bool\nA Boolean value that indicates whether the view is in a focused state.\nvar isDisabled: Bool\nA Boolean value that indicates whether the view is in a disabled state.\nvar isPinned: Bool\nA Boolean value that indicates whether the view is in a pinned state."
  },
  {
    "title": "UIPointerEffect.TintMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipointereffect/tintmode",
    "html": "Topics\nTint Modes\ncase none\nThe view has no tint applied.\ncase overlay\nThe view has a tint overlay.\ncase underlay\nThe view has a tint underlay.\nComparing Tint Modes\nvar hashValue: Int\nThe hashed value of the tint mode.\nfunc hash(into: inout Hasher)\nHashes the essential components of the tint mode by feeding them into the given hash function.\nstatic func == (UIPointerEffect.TintMode, UIPointerEffect.TintMode) -> Bool\nA Boolean that indicates whether the two tint modes are equal.\nstatic func != (UIPointerEffect.TintMode, UIPointerEffect.TintMode) -> Bool\nA Boolean that indicates whether the two tint modes are not equal.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewconfigurationstate/3601067",
    "html": "See Also\nComparing view configuration states\nstatic func != (UIViewConfigurationState, UIViewConfigurationState) -> Bool\nAn operator for checking whether two view configuration states are unequal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the view configuration state by feeding them into the hasher.\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "statusBarOrientationAnimationDuration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/1623014-statusbarorientationanimationdur",
    "html": "Discussion\n\nYou should double the value of this property for a 180 degree orientation change in the status bar.\n\nSee Also\nDeprecated properties\nvar applicationIconBadgeNumber: Int\nThe number currently set as the badge of the app icon on the Home screen.\nDeprecated\nclass let statusBarFrameUserInfoKey: String\nA key whose value is an NSValue object that encapsulates a CGRect structure expressing the location and size of the new status bar frame. This key is used with didChangeStatusBarFrameNotification and willChangeStatusBarFrameNotification notifications.\nDeprecated\nclass let statusBarOrientationUserInfoKey: String\nA key whose value is an NSNumber object that encapsulates a UIInterfaceOrientation value indicating the current orientation (see UIInterfaceOrientation). This key is used with didChangeStatusBarOrientationNotification and willChangeStatusBarOrientationNotification notifications.\nDeprecated\nvar currentUserNotificationSettings: UIUserNotificationSettings?\nReturns the user notification settings for the app.\nDeprecated\nvar isIgnoringInteractionEvents: Bool\nA Boolean value that indicates whether the receiver is ignoring events initiated by touches on the screen.\nDeprecated\nvar isNetworkActivityIndicatorVisible: Bool\nA Boolean value that turns an indicator of network activity on or off.\nDeprecated\nvar isStatusBarHidden: Bool\nA Boolean value that determines whether the status bar is hidden.\nDeprecated\nvar keyWindow: UIWindow?\nThe app's key window.\nDeprecated\nvar scheduledLocalNotifications: [UILocalNotification]?\nAll currently scheduled local notifications.\nDeprecated\nvar statusBarFrame: CGRect\nThe frame rectangle defining the area of the status bar.\nDeprecated\nvar statusBarOrientation: UIInterfaceOrientation\nThe current orientation of the app’s status bar.\nDeprecated\nvar statusBarStyle: UIStatusBarStyle\nThe current style of the status bar.\nDeprecated\nvar windows: [UIWindow]\nThe app’s visible and hidden windows.\nDeprecated\nRelated Documentation\nfunc setStatusBarOrientation(UIInterfaceOrientation, animated: Bool)\nSets the app's status bar to the specified orientation, optionally animating the transition."
  },
  {
    "title": "keyWindow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/1622924-keywindow",
    "html": "Discussion\n\nThis property holds the UIWindow object in the windows array that is most recently sent the makeKeyAndVisible() message.\n\nSee Also\nDeprecated properties\nvar applicationIconBadgeNumber: Int\nThe number currently set as the badge of the app icon on the Home screen.\nDeprecated\nclass let statusBarFrameUserInfoKey: String\nA key whose value is an NSValue object that encapsulates a CGRect structure expressing the location and size of the new status bar frame. This key is used with didChangeStatusBarFrameNotification and willChangeStatusBarFrameNotification notifications.\nDeprecated\nclass let statusBarOrientationUserInfoKey: String\nA key whose value is an NSNumber object that encapsulates a UIInterfaceOrientation value indicating the current orientation (see UIInterfaceOrientation). This key is used with didChangeStatusBarOrientationNotification and willChangeStatusBarOrientationNotification notifications.\nDeprecated\nvar currentUserNotificationSettings: UIUserNotificationSettings?\nReturns the user notification settings for the app.\nDeprecated\nvar isIgnoringInteractionEvents: Bool\nA Boolean value that indicates whether the receiver is ignoring events initiated by touches on the screen.\nDeprecated\nvar isNetworkActivityIndicatorVisible: Bool\nA Boolean value that turns an indicator of network activity on or off.\nDeprecated\nvar isStatusBarHidden: Bool\nA Boolean value that determines whether the status bar is hidden.\nDeprecated\nvar scheduledLocalNotifications: [UILocalNotification]?\nAll currently scheduled local notifications.\nDeprecated\nvar statusBarFrame: CGRect\nThe frame rectangle defining the area of the status bar.\nDeprecated\nvar statusBarOrientation: UIInterfaceOrientation\nThe current orientation of the app’s status bar.\nDeprecated\nvar statusBarOrientationAnimationDuration: TimeInterval\nThe animation duration in seconds for the status bar during a 90 degree orientation change.\nDeprecated\nvar statusBarStyle: UIStatusBarStyle\nThe current style of the status bar.\nDeprecated\nvar windows: [UIWindow]\nThe app’s visible and hidden windows.\nDeprecated"
  },
  {
    "title": "statusBarFrame | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/1622937-statusbarframe",
    "html": "Discussion\n\nThe value of this property is CGRectZero if the status bar is hidden.\n\nSee Also\nDeprecated properties\nvar applicationIconBadgeNumber: Int\nThe number currently set as the badge of the app icon on the Home screen.\nDeprecated\nclass let statusBarFrameUserInfoKey: String\nA key whose value is an NSValue object that encapsulates a CGRect structure expressing the location and size of the new status bar frame. This key is used with didChangeStatusBarFrameNotification and willChangeStatusBarFrameNotification notifications.\nDeprecated\nclass let statusBarOrientationUserInfoKey: String\nA key whose value is an NSNumber object that encapsulates a UIInterfaceOrientation value indicating the current orientation (see UIInterfaceOrientation). This key is used with didChangeStatusBarOrientationNotification and willChangeStatusBarOrientationNotification notifications.\nDeprecated\nvar currentUserNotificationSettings: UIUserNotificationSettings?\nReturns the user notification settings for the app.\nDeprecated\nvar isIgnoringInteractionEvents: Bool\nA Boolean value that indicates whether the receiver is ignoring events initiated by touches on the screen.\nDeprecated\nvar isNetworkActivityIndicatorVisible: Bool\nA Boolean value that turns an indicator of network activity on or off.\nDeprecated\nvar isStatusBarHidden: Bool\nA Boolean value that determines whether the status bar is hidden.\nDeprecated\nvar keyWindow: UIWindow?\nThe app's key window.\nDeprecated\nvar scheduledLocalNotifications: [UILocalNotification]?\nAll currently scheduled local notifications.\nDeprecated\nvar statusBarOrientation: UIInterfaceOrientation\nThe current orientation of the app’s status bar.\nDeprecated\nvar statusBarOrientationAnimationDuration: TimeInterval\nThe animation duration in seconds for the status bar during a 90 degree orientation change.\nDeprecated\nvar statusBarStyle: UIStatusBarStyle\nThe current style of the status bar.\nDeprecated\nvar windows: [UIWindow]\nThe app’s visible and hidden windows.\nDeprecated"
  },
  {
    "title": "isStatusBarHidden | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/1622982-isstatusbarhidden",
    "html": "Return Value\n\ntrue means the status bar is hidden; false means it's visible.\n\nDiscussion\n\nChanging the value of this property changes the visibility of the status bar immediately—that is, without animations.\n\nSee Also\nDeprecated properties\nvar applicationIconBadgeNumber: Int\nThe number currently set as the badge of the app icon on the Home screen.\nDeprecated\nclass let statusBarFrameUserInfoKey: String\nA key whose value is an NSValue object that encapsulates a CGRect structure expressing the location and size of the new status bar frame. This key is used with didChangeStatusBarFrameNotification and willChangeStatusBarFrameNotification notifications.\nDeprecated\nclass let statusBarOrientationUserInfoKey: String\nA key whose value is an NSNumber object that encapsulates a UIInterfaceOrientation value indicating the current orientation (see UIInterfaceOrientation). This key is used with didChangeStatusBarOrientationNotification and willChangeStatusBarOrientationNotification notifications.\nDeprecated\nvar currentUserNotificationSettings: UIUserNotificationSettings?\nReturns the user notification settings for the app.\nDeprecated\nvar isIgnoringInteractionEvents: Bool\nA Boolean value that indicates whether the receiver is ignoring events initiated by touches on the screen.\nDeprecated\nvar isNetworkActivityIndicatorVisible: Bool\nA Boolean value that turns an indicator of network activity on or off.\nDeprecated\nvar keyWindow: UIWindow?\nThe app's key window.\nDeprecated\nvar scheduledLocalNotifications: [UILocalNotification]?\nAll currently scheduled local notifications.\nDeprecated\nvar statusBarFrame: CGRect\nThe frame rectangle defining the area of the status bar.\nDeprecated\nvar statusBarOrientation: UIInterfaceOrientation\nThe current orientation of the app’s status bar.\nDeprecated\nvar statusBarOrientationAnimationDuration: TimeInterval\nThe animation duration in seconds for the status bar during a 90 degree orientation change.\nDeprecated\nvar statusBarStyle: UIStatusBarStyle\nThe current style of the status bar.\nDeprecated\nvar windows: [UIWindow]\nThe app’s visible and hidden windows.\nDeprecated\nRelated Documentation\n- setStatusBarHidden(_:animated:)\nHides or shows the status bar, optionally animating the transition."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewconfigurationstate/3601068-hash",
    "html": "Relationships\nFrom Protocol\nHashable\nSee Also\nComparing view configuration states\nstatic func == (UIViewConfigurationState, UIViewConfigurationState) -> Bool\nAn operator for checking whether two view configuration states are equal.\nstatic func != (UIViewConfigurationState, UIViewConfigurationState) -> Bool\nAn operator for checking whether two view configuration states are unequal.\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewconfigurationstate/3601069-hashvalue",
    "html": "Relationships\nFrom Protocol\nHashable\nSee Also\nComparing view configuration states\nstatic func == (UIViewConfigurationState, UIViewConfigurationState) -> Bool\nAn operator for checking whether two view configuration states are equal.\nstatic func != (UIViewConfigurationState, UIViewConfigurationState) -> Bool\nAn operator for checking whether two view configuration states are unequal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the view configuration state by feeding them into the hasher."
  },
  {
    "title": "scheduledLocalNotifications | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/1622993-scheduledlocalnotifications",
    "html": "Deprecated\n\nUse the UNUserNotificationCenter class to schedule local notifications instead.\n\nDiscussion\n\nThis property holds an array of UILocalNotification objects representing the current scheduled local notifications. Use this property to access the currently scheduled notifications, perhaps to cancel them. Assigning a new value to this property implicitly schedules all of the notifications in the new array.\n\nThis method may be faster than using scheduleLocalNotification(_:) when scheduling a large number of notifications.\n\nSee Also\nDeprecated properties\nvar applicationIconBadgeNumber: Int\nThe number currently set as the badge of the app icon on the Home screen.\nDeprecated\nclass let statusBarFrameUserInfoKey: String\nA key whose value is an NSValue object that encapsulates a CGRect structure expressing the location and size of the new status bar frame. This key is used with didChangeStatusBarFrameNotification and willChangeStatusBarFrameNotification notifications.\nDeprecated\nclass let statusBarOrientationUserInfoKey: String\nA key whose value is an NSNumber object that encapsulates a UIInterfaceOrientation value indicating the current orientation (see UIInterfaceOrientation). This key is used with didChangeStatusBarOrientationNotification and willChangeStatusBarOrientationNotification notifications.\nDeprecated\nvar currentUserNotificationSettings: UIUserNotificationSettings?\nReturns the user notification settings for the app.\nDeprecated\nvar isIgnoringInteractionEvents: Bool\nA Boolean value that indicates whether the receiver is ignoring events initiated by touches on the screen.\nDeprecated\nvar isNetworkActivityIndicatorVisible: Bool\nA Boolean value that turns an indicator of network activity on or off.\nDeprecated\nvar isStatusBarHidden: Bool\nA Boolean value that determines whether the status bar is hidden.\nDeprecated\nvar keyWindow: UIWindow?\nThe app's key window.\nDeprecated\nvar statusBarFrame: CGRect\nThe frame rectangle defining the area of the status bar.\nDeprecated\nvar statusBarOrientation: UIInterfaceOrientation\nThe current orientation of the app’s status bar.\nDeprecated\nvar statusBarOrientationAnimationDuration: TimeInterval\nThe animation duration in seconds for the status bar during a 90 degree orientation change.\nDeprecated\nvar statusBarStyle: UIStatusBarStyle\nThe current style of the status bar.\nDeprecated\nvar windows: [UIWindow]\nThe app’s visible and hidden windows.\nDeprecated"
  },
  {
    "title": "configuration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentview/3600552-configuration",
    "html": "Discussion\n\nSetting this property applies the new configuration to the view.\n\nRelationships\nFrom Protocol\nUIContentView"
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilistcontentview/3600553-init",
    "html": "See Also\nCreating a list content view\ninit(configuration: UIListContentConfiguration)\nCreates a list content view with the specified content configuration."
  },
  {
    "title": "<(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentsizecategory/2897318",
    "html": "Relationships\nFrom Protocol\nComparable\nSee Also\nFont size category comparisons\nstatic func <= (UIContentSizeCategory, UIContentSizeCategory) -> Bool\nIndicates whether the left-hand category represents a text size smaller than or equal to the text size associated with the right-hand category.\nstatic func > (UIContentSizeCategory, UIContentSizeCategory) -> Bool\nIndicates whether the left-hand category represents a text size greater than the text size associated with the right-hand category.\nstatic func >= (UIContentSizeCategory, UIContentSizeCategory) -> Bool\nIndicates whether the left-hand category represents a text size greater than or equal to the text size associated with the right-hand category."
  },
  {
    "title": "extraExtraLarge | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentsizecategory/1623007-extraextralarge",
    "html": "See Also\nFont sizes\nstatic let unspecified: UIContentSizeCategory\nAn unspecified font size.\nstatic let extraSmall: UIContentSizeCategory\nAn extra-small font.\nstatic let small: UIContentSizeCategory\nA small font.\nstatic let medium: UIContentSizeCategory\nA medium-sized font.\nstatic let large: UIContentSizeCategory\nA large font.\nstatic let extraLarge: UIContentSizeCategory\nAn extra-large font.\nstatic let extraExtraExtraLarge: UIContentSizeCategory\nThe largest font size."
  },
  {
    "title": "extraExtraExtraLarge | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentsizecategory/1623109-extraextraextralarge",
    "html": "See Also\nFont sizes\nstatic let unspecified: UIContentSizeCategory\nAn unspecified font size.\nstatic let extraSmall: UIContentSizeCategory\nAn extra-small font.\nstatic let small: UIContentSizeCategory\nA small font.\nstatic let medium: UIContentSizeCategory\nA medium-sized font.\nstatic let large: UIContentSizeCategory\nA large font.\nstatic let extraLarge: UIContentSizeCategory\nAn extra-large font.\nstatic let extraExtraLarge: UIContentSizeCategory\nA font that is larger than the extra-large font but smaller than the largest font size available."
  },
  {
    "title": "automatic | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uihovereffect/4224527-automatic",
    "html": "See Also\nChoosing a hover effect\nstatic var highlight: UIHoverHighlightEffect\nAn effect that applies a highlight to the view on hover.\nAvailable when Self is UIHoverHighlightEffect.\nstatic var lift: UIHoverLiftEffect\nAn effect that can visually lift the view on hover where appropriate.\nAvailable when Self is UIHoverLiftEffect."
  },
  {
    "title": "debugDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicellconfigurationstate/3656311-debugdescription",
    "html": "Relationships\nFrom Protocol\nCustomDebugStringConvertible\nSee Also\nDescribing a cell configuration state\nvar description: String\nA textual representation of this instance.\nvar customMirror: Mirror\nThe custom mirror for this instance."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicellconfigurationstate/3600898-hashvalue",
    "html": "Relationships\nFrom Protocol\nHashable\nSee Also\nComparing cell configuration states\nstatic func != (UICellConfigurationState, UICellConfigurationState) -> Bool\nAn operator for checking whether two cell configuration states are equal.\nstatic func == (UICellConfigurationState, UICellConfigurationState) -> Bool\nAn operator for checking whether two cell configuration states are unequal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the cell configuration state by feeding them into the hasher."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentsizecategory/3780237-init",
    "html": "See Also\nFont size category creation\ninit(rawValue: String)\nCreates a new instance with the specified raw value.\ninit(ContentSizeCategory?)\nCreates a content size category from the specified SwiftUI content size category."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicellconfigurationstate/3656312-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible\nSee Also\nDescribing a cell configuration state\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging.\nvar customMirror: Mirror\nThe custom mirror for this instance."
  },
  {
    "title": "customMirror | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicellconfigurationstate/3656310-custommirror",
    "html": "Relationships\nFrom Protocol\nCustomReflectable\nSee Also\nDescribing a cell configuration state\nvar description: String\nA textual representation of this instance.\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "replace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281947-replace",
    "html": "See Also\nEdit menus\nstatic let undoRedo: UIMenu.Identifier\nThe Undo/Redo menu.\nstatic let standardEdit: UIMenu.Identifier\nThe standard Edit menu.\nstatic let find: UIMenu.Identifier\nThe Find menu.\nstatic let share: UIMenu.Identifier\nThe Share menu.\nstatic let textStyle: UIMenu.Identifier\nThe Text Style menu.\nstatic let spelling: UIMenu.Identifier\nThe Spelling menu.\nstatic let spellingPanel: UIMenu.Identifier\nThe Spelling Panel menu.\nstatic let spellingOptions: UIMenu.Identifier\nThe Spelling Options menu.\nstatic let substitutions: UIMenu.Identifier\nThe Substitutions menu.\nstatic let substitutionsPanel: UIMenu.Identifier\nThe Substitutions Panel menu.\nstatic let substitutionOptions: UIMenu.Identifier\nThe Substitutions Options menu.\nstatic let transformations: UIMenu.Identifier\nThe Transformations menu.\nstatic let speech: UIMenu.Identifier\nThe Speech menu.\nstatic let lookup: UIMenu.Identifier\nThe Lookup menu.\nstatic let learn: UIMenu.Identifier\nThe Learn menu.\nstatic let format: UIMenu.Identifier\nThe Format menu.\nstatic let font: UIMenu.Identifier\nThe Font menu.\nstatic let textSize: UIMenu.Identifier\nThe Text Size menu.\nstatic let textColor: UIMenu.Identifier\nThe Text Color menu.\nstatic let textStylePasteboard: UIMenu.Identifier\nThe Text Style Pasteboard menu.\nstatic let text: UIMenu.Identifier\nThe Text menu.\nstatic let autoFill: UIMenu.Identifier\nThe AutoFill menu.\nstatic let writingDirection: UIMenu.Identifier\nThe Writing Direction menu.\nstatic let alignment: UIMenu.Identifier\nThe Alignment menu."
  },
  {
    "title": "close | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281931-close",
    "html": "See Also\nFile menus\nstatic let newScene: UIMenu.Identifier\nThe New Scene menu.\nstatic let openRecent: UIMenu.Identifier\nThe Open Recent menu.\nstatic let print: UIMenu.Identifier\nThe Print menu.\nstatic let document: UIMenu.Identifier\nThe Document menu."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscenesessionactivationrequest/4176602",
    "html": "Parameters\nlhs\n\nA request to compare.\n\nrhs\n\nAnother request to compare.\n\nReturn Value\n\ntrue if lhs isn’t equal to rhs; otherwise, false.\n\nSee Also\nComparing requests\nstatic func == (UISceneSessionActivationRequest, UISceneSessionActivationRequest) -> Bool\nAn operator for checking whether two requests are equal.\nvar hashValue: Int\nThe hash value of the request.\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscenesessionactivationrequest/4176603",
    "html": "Parameters\na\n\nA request to compare.\n\nb\n\nAnother request to compare.\n\nReturn Value\n\ntrue if a is equal to b; otherwise, false.\n\nSee Also\nComparing requests\nstatic func != (UISceneSessionActivationRequest, UISceneSessionActivationRequest) -> Bool\nAn operator for checking whether two requests aren’t equal.\nvar hashValue: Int\nThe hash value of the request.\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher."
  },
  {
    "title": "speech | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281951-speech",
    "html": "See Also\nEdit menus\nstatic let undoRedo: UIMenu.Identifier\nThe Undo/Redo menu.\nstatic let standardEdit: UIMenu.Identifier\nThe standard Edit menu.\nstatic let find: UIMenu.Identifier\nThe Find menu.\nstatic let replace: UIMenu.Identifier\nThe Replace menu.\nstatic let share: UIMenu.Identifier\nThe Share menu.\nstatic let textStyle: UIMenu.Identifier\nThe Text Style menu.\nstatic let spelling: UIMenu.Identifier\nThe Spelling menu.\nstatic let spellingPanel: UIMenu.Identifier\nThe Spelling Panel menu.\nstatic let spellingOptions: UIMenu.Identifier\nThe Spelling Options menu.\nstatic let substitutions: UIMenu.Identifier\nThe Substitutions menu.\nstatic let substitutionsPanel: UIMenu.Identifier\nThe Substitutions Panel menu.\nstatic let substitutionOptions: UIMenu.Identifier\nThe Substitutions Options menu.\nstatic let transformations: UIMenu.Identifier\nThe Transformations menu.\nstatic let lookup: UIMenu.Identifier\nThe Lookup menu.\nstatic let learn: UIMenu.Identifier\nThe Learn menu.\nstatic let format: UIMenu.Identifier\nThe Format menu.\nstatic let font: UIMenu.Identifier\nThe Font menu.\nstatic let textSize: UIMenu.Identifier\nThe Text Size menu.\nstatic let textColor: UIMenu.Identifier\nThe Text Color menu.\nstatic let textStylePasteboard: UIMenu.Identifier\nThe Text Style Pasteboard menu.\nstatic let text: UIMenu.Identifier\nThe Text menu.\nstatic let autoFill: UIMenu.Identifier\nThe AutoFill menu.\nstatic let writingDirection: UIMenu.Identifier\nThe Writing Direction menu.\nstatic let alignment: UIMenu.Identifier\nThe Alignment menu."
  },
  {
    "title": "learn | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281940-learn",
    "html": "See Also\nEdit menus\nstatic let undoRedo: UIMenu.Identifier\nThe Undo/Redo menu.\nstatic let standardEdit: UIMenu.Identifier\nThe standard Edit menu.\nstatic let find: UIMenu.Identifier\nThe Find menu.\nstatic let replace: UIMenu.Identifier\nThe Replace menu.\nstatic let share: UIMenu.Identifier\nThe Share menu.\nstatic let textStyle: UIMenu.Identifier\nThe Text Style menu.\nstatic let spelling: UIMenu.Identifier\nThe Spelling menu.\nstatic let spellingPanel: UIMenu.Identifier\nThe Spelling Panel menu.\nstatic let spellingOptions: UIMenu.Identifier\nThe Spelling Options menu.\nstatic let substitutions: UIMenu.Identifier\nThe Substitutions menu.\nstatic let substitutionsPanel: UIMenu.Identifier\nThe Substitutions Panel menu.\nstatic let substitutionOptions: UIMenu.Identifier\nThe Substitutions Options menu.\nstatic let transformations: UIMenu.Identifier\nThe Transformations menu.\nstatic let speech: UIMenu.Identifier\nThe Speech menu.\nstatic let lookup: UIMenu.Identifier\nThe Lookup menu.\nstatic let format: UIMenu.Identifier\nThe Format menu.\nstatic let font: UIMenu.Identifier\nThe Font menu.\nstatic let textSize: UIMenu.Identifier\nThe Text Size menu.\nstatic let textColor: UIMenu.Identifier\nThe Text Color menu.\nstatic let textStylePasteboard: UIMenu.Identifier\nThe Text Style Pasteboard menu.\nstatic let text: UIMenu.Identifier\nThe Text menu.\nstatic let autoFill: UIMenu.Identifier\nThe AutoFill menu.\nstatic let writingDirection: UIMenu.Identifier\nThe Writing Direction menu.\nstatic let alignment: UIMenu.Identifier\nThe Alignment menu."
  },
  {
    "title": "application | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281929-application",
    "html": "See Also\nTop-level menus\nstatic let file: UIMenu.Identifier\nThe standard File menu.\nstatic let edit: UIMenu.Identifier\nThe standard Edit menu.\nstatic let view: UIMenu.Identifier\nThe standard View menu.\nstatic let window: UIMenu.Identifier\nThe standard Window menu.\nstatic let help: UIMenu.Identifier\nThe standard Help menu."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscenesessionactivationrequest/4176605-hashvalue",
    "html": "Relationships\nFrom Protocol\nHashable\nSee Also\nComparing requests\nstatic func == (UISceneSessionActivationRequest, UISceneSessionActivationRequest) -> Bool\nAn operator for checking whether two requests are equal.\nstatic func != (UISceneSessionActivationRequest, UISceneSessionActivationRequest) -> Bool\nAn operator for checking whether two requests aren’t equal.\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscenesessionactivationrequest/4176604-hash",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nRelationships\nFrom Protocol\nHashable\nSee Also\nComparing requests\nstatic func == (UISceneSessionActivationRequest, UISceneSessionActivationRequest) -> Bool\nAn operator for checking whether two requests are equal.\nstatic func != (UISceneSessionActivationRequest, UISceneSessionActivationRequest) -> Bool\nAn operator for checking whether two requests aren’t equal.\nvar hashValue: Int\nThe hash value of the request."
  },
  {
    "title": "init(session:userActivity:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscenesessionactivationrequest/4176607-init",
    "html": "Parameters\nsession\n\nThe specific scene session to activate.\n\nuserActivity\n\nA user activity to send to the newly activated scene.\n\noptions\n\nActivation request options to further customize the request.\n\nDiscussion\n\nCreate an activation request with this method when you want the system to activate an existing scene session that you provide.\n\nSee Also\nCreating a request\ninit(role: UISceneSession.Role, userActivity: NSUserActivity?, options: UIScene.ActivationRequestOptions?)\nCreates a scene session activation request object with a role, a user activity, and options that you provide."
  },
  {
    "title": "minimizeAndZoom | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281942-minimizeandzoom",
    "html": "See Also\nWindow menus\nstatic let bringAllToFront: UIMenu.Identifier\nThe Bring All to Front menu."
  },
  {
    "title": "alignment | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281928-alignment",
    "html": "See Also\nEdit menus\nstatic let undoRedo: UIMenu.Identifier\nThe Undo/Redo menu.\nstatic let standardEdit: UIMenu.Identifier\nThe standard Edit menu.\nstatic let find: UIMenu.Identifier\nThe Find menu.\nstatic let replace: UIMenu.Identifier\nThe Replace menu.\nstatic let share: UIMenu.Identifier\nThe Share menu.\nstatic let textStyle: UIMenu.Identifier\nThe Text Style menu.\nstatic let spelling: UIMenu.Identifier\nThe Spelling menu.\nstatic let spellingPanel: UIMenu.Identifier\nThe Spelling Panel menu.\nstatic let spellingOptions: UIMenu.Identifier\nThe Spelling Options menu.\nstatic let substitutions: UIMenu.Identifier\nThe Substitutions menu.\nstatic let substitutionsPanel: UIMenu.Identifier\nThe Substitutions Panel menu.\nstatic let substitutionOptions: UIMenu.Identifier\nThe Substitutions Options menu.\nstatic let transformations: UIMenu.Identifier\nThe Transformations menu.\nstatic let speech: UIMenu.Identifier\nThe Speech menu.\nstatic let lookup: UIMenu.Identifier\nThe Lookup menu.\nstatic let learn: UIMenu.Identifier\nThe Learn menu.\nstatic let format: UIMenu.Identifier\nThe Format menu.\nstatic let font: UIMenu.Identifier\nThe Font menu.\nstatic let textSize: UIMenu.Identifier\nThe Text Size menu.\nstatic let textColor: UIMenu.Identifier\nThe Text Color menu.\nstatic let textStylePasteboard: UIMenu.Identifier\nThe Text Style Pasteboard menu.\nstatic let text: UIMenu.Identifier\nThe Text menu.\nstatic let autoFill: UIMenu.Identifier\nThe AutoFill menu.\nstatic let writingDirection: UIMenu.Identifier\nThe Writing Direction menu."
  },
  {
    "title": "toolbar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3368157-toolbar",
    "html": "Discussion\n\nThe Toolbar menu group contains menu elements to show and hide the toolbar, and to customize the toolbar.\n\nSee Also\nView menus\nstatic let sidebar: UIMenu.Identifier\nThe Sidebar menu group.\nstatic let fullscreen: UIMenu.Identifier\nThe Full Screen menu."
  },
  {
    "title": "sidebar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3783577-sidebar",
    "html": "Discussion\n\nThe Sidebar menu group contains menu elements to show and hide the sidebar.\n\nSee Also\nView menus\nstatic let toolbar: UIMenu.Identifier\nThe Toolbar menu group.\nstatic let fullscreen: UIMenu.Identifier\nThe Full Screen menu."
  },
  {
    "title": "textStylePasteboard | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281963-textstylepasteboard",
    "html": "See Also\nEdit menus\nstatic let undoRedo: UIMenu.Identifier\nThe Undo/Redo menu.\nstatic let standardEdit: UIMenu.Identifier\nThe standard Edit menu.\nstatic let find: UIMenu.Identifier\nThe Find menu.\nstatic let replace: UIMenu.Identifier\nThe Replace menu.\nstatic let share: UIMenu.Identifier\nThe Share menu.\nstatic let textStyle: UIMenu.Identifier\nThe Text Style menu.\nstatic let spelling: UIMenu.Identifier\nThe Spelling menu.\nstatic let spellingPanel: UIMenu.Identifier\nThe Spelling Panel menu.\nstatic let spellingOptions: UIMenu.Identifier\nThe Spelling Options menu.\nstatic let substitutions: UIMenu.Identifier\nThe Substitutions menu.\nstatic let substitutionsPanel: UIMenu.Identifier\nThe Substitutions Panel menu.\nstatic let substitutionOptions: UIMenu.Identifier\nThe Substitutions Options menu.\nstatic let transformations: UIMenu.Identifier\nThe Transformations menu.\nstatic let speech: UIMenu.Identifier\nThe Speech menu.\nstatic let lookup: UIMenu.Identifier\nThe Lookup menu.\nstatic let learn: UIMenu.Identifier\nThe Learn menu.\nstatic let format: UIMenu.Identifier\nThe Format menu.\nstatic let font: UIMenu.Identifier\nThe Font menu.\nstatic let textSize: UIMenu.Identifier\nThe Text Size menu.\nstatic let textColor: UIMenu.Identifier\nThe Text Color menu.\nstatic let text: UIMenu.Identifier\nThe Text menu.\nstatic let autoFill: UIMenu.Identifier\nThe AutoFill menu.\nstatic let writingDirection: UIMenu.Identifier\nThe Writing Direction menu.\nstatic let alignment: UIMenu.Identifier\nThe Alignment menu."
  },
  {
    "title": "autoFill | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/4277938-autofill",
    "html": "See Also\nEdit menus\nstatic let undoRedo: UIMenu.Identifier\nThe Undo/Redo menu.\nstatic let standardEdit: UIMenu.Identifier\nThe standard Edit menu.\nstatic let find: UIMenu.Identifier\nThe Find menu.\nstatic let replace: UIMenu.Identifier\nThe Replace menu.\nstatic let share: UIMenu.Identifier\nThe Share menu.\nstatic let textStyle: UIMenu.Identifier\nThe Text Style menu.\nstatic let spelling: UIMenu.Identifier\nThe Spelling menu.\nstatic let spellingPanel: UIMenu.Identifier\nThe Spelling Panel menu.\nstatic let spellingOptions: UIMenu.Identifier\nThe Spelling Options menu.\nstatic let substitutions: UIMenu.Identifier\nThe Substitutions menu.\nstatic let substitutionsPanel: UIMenu.Identifier\nThe Substitutions Panel menu.\nstatic let substitutionOptions: UIMenu.Identifier\nThe Substitutions Options menu.\nstatic let transformations: UIMenu.Identifier\nThe Transformations menu.\nstatic let speech: UIMenu.Identifier\nThe Speech menu.\nstatic let lookup: UIMenu.Identifier\nThe Lookup menu.\nstatic let learn: UIMenu.Identifier\nThe Learn menu.\nstatic let format: UIMenu.Identifier\nThe Format menu.\nstatic let font: UIMenu.Identifier\nThe Font menu.\nstatic let textSize: UIMenu.Identifier\nThe Text Size menu.\nstatic let textColor: UIMenu.Identifier\nThe Text Color menu.\nstatic let textStylePasteboard: UIMenu.Identifier\nThe Text Style Pasteboard menu.\nstatic let text: UIMenu.Identifier\nThe Text menu.\nstatic let writingDirection: UIMenu.Identifier\nThe Writing Direction menu.\nstatic let alignment: UIMenu.Identifier\nThe Alignment menu."
  },
  {
    "title": "about | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281927-about",
    "html": "See Also\nApp menu commands\nstatic let preferences: UIMenu.Identifier\nThe Preferences menu.\nstatic let services: UIMenu.Identifier\nThe Services menu.\nstatic let hide: UIMenu.Identifier\nThe Hide menu.\nstatic let quit: UIMenu.Identifier\nThe Quit menu."
  },
  {
    "title": "font | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281935-font",
    "html": "See Also\nEdit menus\nstatic let undoRedo: UIMenu.Identifier\nThe Undo/Redo menu.\nstatic let standardEdit: UIMenu.Identifier\nThe standard Edit menu.\nstatic let find: UIMenu.Identifier\nThe Find menu.\nstatic let replace: UIMenu.Identifier\nThe Replace menu.\nstatic let share: UIMenu.Identifier\nThe Share menu.\nstatic let textStyle: UIMenu.Identifier\nThe Text Style menu.\nstatic let spelling: UIMenu.Identifier\nThe Spelling menu.\nstatic let spellingPanel: UIMenu.Identifier\nThe Spelling Panel menu.\nstatic let spellingOptions: UIMenu.Identifier\nThe Spelling Options menu.\nstatic let substitutions: UIMenu.Identifier\nThe Substitutions menu.\nstatic let substitutionsPanel: UIMenu.Identifier\nThe Substitutions Panel menu.\nstatic let substitutionOptions: UIMenu.Identifier\nThe Substitutions Options menu.\nstatic let transformations: UIMenu.Identifier\nThe Transformations menu.\nstatic let speech: UIMenu.Identifier\nThe Speech menu.\nstatic let lookup: UIMenu.Identifier\nThe Lookup menu.\nstatic let learn: UIMenu.Identifier\nThe Learn menu.\nstatic let format: UIMenu.Identifier\nThe Format menu.\nstatic let textSize: UIMenu.Identifier\nThe Text Size menu.\nstatic let textColor: UIMenu.Identifier\nThe Text Color menu.\nstatic let textStylePasteboard: UIMenu.Identifier\nThe Text Style Pasteboard menu.\nstatic let text: UIMenu.Identifier\nThe Text menu.\nstatic let autoFill: UIMenu.Identifier\nThe AutoFill menu.\nstatic let writingDirection: UIMenu.Identifier\nThe Writing Direction menu.\nstatic let alignment: UIMenu.Identifier\nThe Alignment menu."
  },
  {
    "title": "textColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281960-textcolor",
    "html": "See Also\nEdit menus\nstatic let undoRedo: UIMenu.Identifier\nThe Undo/Redo menu.\nstatic let standardEdit: UIMenu.Identifier\nThe standard Edit menu.\nstatic let find: UIMenu.Identifier\nThe Find menu.\nstatic let replace: UIMenu.Identifier\nThe Replace menu.\nstatic let share: UIMenu.Identifier\nThe Share menu.\nstatic let textStyle: UIMenu.Identifier\nThe Text Style menu.\nstatic let spelling: UIMenu.Identifier\nThe Spelling menu.\nstatic let spellingPanel: UIMenu.Identifier\nThe Spelling Panel menu.\nstatic let spellingOptions: UIMenu.Identifier\nThe Spelling Options menu.\nstatic let substitutions: UIMenu.Identifier\nThe Substitutions menu.\nstatic let substitutionsPanel: UIMenu.Identifier\nThe Substitutions Panel menu.\nstatic let substitutionOptions: UIMenu.Identifier\nThe Substitutions Options menu.\nstatic let transformations: UIMenu.Identifier\nThe Transformations menu.\nstatic let speech: UIMenu.Identifier\nThe Speech menu.\nstatic let lookup: UIMenu.Identifier\nThe Lookup menu.\nstatic let learn: UIMenu.Identifier\nThe Learn menu.\nstatic let format: UIMenu.Identifier\nThe Format menu.\nstatic let font: UIMenu.Identifier\nThe Font menu.\nstatic let textSize: UIMenu.Identifier\nThe Text Size menu.\nstatic let textStylePasteboard: UIMenu.Identifier\nThe Text Style Pasteboard menu.\nstatic let text: UIMenu.Identifier\nThe Text menu.\nstatic let autoFill: UIMenu.Identifier\nThe AutoFill menu.\nstatic let writingDirection: UIMenu.Identifier\nThe Writing Direction menu.\nstatic let alignment: UIMenu.Identifier\nThe Alignment menu."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiconfigurationstatecustomkey/3600980-init",
    "html": "See Also\nCreating a custom state key\ninit(String)\nCreates a custom state key."
  },
  {
    "title": "init(traitCollection:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicellconfigurationstate/3600899-init",
    "html": "Discussion\n\nTypically, you don’t create a configuration state yourself. To obtain a configuration state, override the updateConfiguration(using:) method in your view subclass and use the state parameter. Outside of this method, you can get a view’s configuration state by using its configurationState property.\n\nRelationships\nFrom Protocol\nUIConfigurationState"
  },
  {
    "title": "isPinned | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewconfigurationstate/3751738-ispinned",
    "html": "Discussion\n\nThis state applies to header and footer views.\n\nSee Also\nManaging view configuration states\nvar traitCollection: UITraitCollection\nThe traits that describe the current layout environment of the view, such as the user interface style and layout direction.\nvar isSelected: Bool\nA Boolean value that indicates whether the view is in a selected state.\nvar isHighlighted: Bool\nA Boolean value that indicates whether the view is in a highlighted state.\nvar isFocused: Bool\nA Boolean value that indicates whether the view is in a focused state.\nvar isDisabled: Bool\nA Boolean value that indicates whether the view is in a disabled state.\nsubscript(UIConfigurationStateCustomKey) -> AnyHashable?\nAccesses custom states by key."
  },
  {
    "title": "traitCollection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewconfigurationstate/3601076-traitcollection",
    "html": "Relationships\nFrom Protocol\nUIConfigurationState\nSee Also\nManaging view configuration states\nvar isSelected: Bool\nA Boolean value that indicates whether the view is in a selected state.\nvar isHighlighted: Bool\nA Boolean value that indicates whether the view is in a highlighted state.\nvar isFocused: Bool\nA Boolean value that indicates whether the view is in a focused state.\nvar isDisabled: Bool\nA Boolean value that indicates whether the view is in a disabled state.\nvar isPinned: Bool\nA Boolean value that indicates whether the view is in a pinned state.\nsubscript(UIConfigurationStateCustomKey) -> AnyHashable?\nAccesses custom states by key."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiconfigurationstatecustomkey/3600979-init",
    "html": "See Also\nCreating a custom state key\ninit(rawValue: String)\nCreates a custom state key with the specified raw value."
  },
  {
    "title": "isHighlighted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewconfigurationstate/3601073-ishighlighted",
    "html": "See Also\nManaging view configuration states\nvar traitCollection: UITraitCollection\nThe traits that describe the current layout environment of the view, such as the user interface style and layout direction.\nvar isSelected: Bool\nA Boolean value that indicates whether the view is in a selected state.\nvar isFocused: Bool\nA Boolean value that indicates whether the view is in a focused state.\nvar isDisabled: Bool\nA Boolean value that indicates whether the view is in a disabled state.\nvar isPinned: Bool\nA Boolean value that indicates whether the view is in a pinned state.\nsubscript(UIConfigurationStateCustomKey) -> AnyHashable?\nAccesses custom states by key."
  },
  {
    "title": "isSelected | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewconfigurationstate/3601074-isselected",
    "html": "See Also\nManaging view configuration states\nvar traitCollection: UITraitCollection\nThe traits that describe the current layout environment of the view, such as the user interface style and layout direction.\nvar isHighlighted: Bool\nA Boolean value that indicates whether the view is in a highlighted state.\nvar isFocused: Bool\nA Boolean value that indicates whether the view is in a focused state.\nvar isDisabled: Bool\nA Boolean value that indicates whether the view is in a disabled state.\nvar isPinned: Bool\nA Boolean value that indicates whether the view is in a pinned state.\nsubscript(UIConfigurationStateCustomKey) -> AnyHashable?\nAccesses custom states by key."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewconfigurationstate/3601066",
    "html": "See Also\nComparing view configuration states\nstatic func == (UIViewConfigurationState, UIViewConfigurationState) -> Bool\nAn operator for checking whether two view configuration states are equal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the view configuration state by feeding them into the hasher.\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "init(traitCollection:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiconfigurationstate/3600976-init",
    "html": "Required\n\nDiscussion\n\nTypically, you don’t create a configuration state yourself. To obtain a configuration state, override the updateConfiguration(using:) method in your view subclass and use the state parameter. Outside of this method, you can get a view’s configuration state by using its configurationState property."
  },
  {
    "title": "windows | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/1623104-windows",
    "html": "Deprecated\n\nUse the windows property of the relevant window scene.\n\nDiscussion\n\nThis property contains the UIWindow objects currently associated with the app. This list doesn’t include windows created and managed by the system, such as the window used to display the status bar.\n\nThe array orders the windows from back to front by window level; thus, the last window in the array is on top of all other app windows.\n\nSee Also\nDeprecated properties\nvar applicationIconBadgeNumber: Int\nThe number currently set as the badge of the app icon on the Home screen.\nDeprecated\nclass let statusBarFrameUserInfoKey: String\nA key whose value is an NSValue object that encapsulates a CGRect structure expressing the location and size of the new status bar frame. This key is used with didChangeStatusBarFrameNotification and willChangeStatusBarFrameNotification notifications.\nDeprecated\nclass let statusBarOrientationUserInfoKey: String\nA key whose value is an NSNumber object that encapsulates a UIInterfaceOrientation value indicating the current orientation (see UIInterfaceOrientation). This key is used with didChangeStatusBarOrientationNotification and willChangeStatusBarOrientationNotification notifications.\nDeprecated\nvar currentUserNotificationSettings: UIUserNotificationSettings?\nReturns the user notification settings for the app.\nDeprecated\nvar isIgnoringInteractionEvents: Bool\nA Boolean value that indicates whether the receiver is ignoring events initiated by touches on the screen.\nDeprecated\nvar isNetworkActivityIndicatorVisible: Bool\nA Boolean value that turns an indicator of network activity on or off.\nDeprecated\nvar isStatusBarHidden: Bool\nA Boolean value that determines whether the status bar is hidden.\nDeprecated\nvar keyWindow: UIWindow?\nThe app's key window.\nDeprecated\nvar scheduledLocalNotifications: [UILocalNotification]?\nAll currently scheduled local notifications.\nDeprecated\nvar statusBarFrame: CGRect\nThe frame rectangle defining the area of the status bar.\nDeprecated\nvar statusBarOrientation: UIInterfaceOrientation\nThe current orientation of the app’s status bar.\nDeprecated\nvar statusBarOrientationAnimationDuration: TimeInterval\nThe animation duration in seconds for the status bar during a 90 degree orientation change.\nDeprecated\nvar statusBarStyle: UIStatusBarStyle\nThe current style of the status bar.\nDeprecated"
  },
  {
    "title": "statusBarStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/1622988-statusbarstyle",
    "html": "Discussion\n\nThe value of the property is a UIStatusBarStyle constant that indicates the style of status. The default style is UIStatusBarStyle.default. Changing this property sets the new style immediately without animations.\n\nSee Also\nDeprecated properties\nvar applicationIconBadgeNumber: Int\nThe number currently set as the badge of the app icon on the Home screen.\nDeprecated\nclass let statusBarFrameUserInfoKey: String\nA key whose value is an NSValue object that encapsulates a CGRect structure expressing the location and size of the new status bar frame. This key is used with didChangeStatusBarFrameNotification and willChangeStatusBarFrameNotification notifications.\nDeprecated\nclass let statusBarOrientationUserInfoKey: String\nA key whose value is an NSNumber object that encapsulates a UIInterfaceOrientation value indicating the current orientation (see UIInterfaceOrientation). This key is used with didChangeStatusBarOrientationNotification and willChangeStatusBarOrientationNotification notifications.\nDeprecated\nvar currentUserNotificationSettings: UIUserNotificationSettings?\nReturns the user notification settings for the app.\nDeprecated\nvar isIgnoringInteractionEvents: Bool\nA Boolean value that indicates whether the receiver is ignoring events initiated by touches on the screen.\nDeprecated\nvar isNetworkActivityIndicatorVisible: Bool\nA Boolean value that turns an indicator of network activity on or off.\nDeprecated\nvar isStatusBarHidden: Bool\nA Boolean value that determines whether the status bar is hidden.\nDeprecated\nvar keyWindow: UIWindow?\nThe app's key window.\nDeprecated\nvar scheduledLocalNotifications: [UILocalNotification]?\nAll currently scheduled local notifications.\nDeprecated\nvar statusBarFrame: CGRect\nThe frame rectangle defining the area of the status bar.\nDeprecated\nvar statusBarOrientation: UIInterfaceOrientation\nThe current orientation of the app’s status bar.\nDeprecated\nvar statusBarOrientationAnimationDuration: TimeInterval\nThe animation duration in seconds for the status bar during a 90 degree orientation change.\nDeprecated\nvar windows: [UIWindow]\nThe app’s visible and hidden windows.\nDeprecated"
  },
  {
    "title": "debugDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewconfigurationstate/3656323-debugdescription",
    "html": "Relationships\nFrom Protocol\nCustomDebugStringConvertible\nSee Also\nDescribing a view configuration state\nvar description: String\nA textual representation of this instance.\nvar customMirror: Mirror\nThe custom mirror for this instance."
  },
  {
    "title": "invalid | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundtaskidentifier/1622983-invalid",
    "html": "Discussion\n\nUse this constant to initialize variables or to check for errors."
  },
  {
    "title": "customMirror | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewconfigurationstate/3656322-custommirror",
    "html": "Relationships\nFrom Protocol\nCustomReflectable\nSee Also\nDescribing a view configuration state\nvar description: String\nA textual representation of this instance.\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "UIBackgroundRefreshStatus.restricted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibackgroundrefreshstatus/restricted",
    "html": "Discussion\n\nFor example, this status can occur when parental controls are in effect for the current user."
  },
  {
    "title": "highlight | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uihovereffect/4224528-highlight",
    "html": "See Also\nChoosing a hover effect\nstatic var automatic: UIHoverAutomaticEffect\nA system-default hover effect that automatically selects the appropriate effect based on the view to which it applies.\nAvailable when Self is UIHoverAutomaticEffect.\nstatic var lift: UIHoverLiftEffect\nAn effect that can visually lift the view on hover where appropriate.\nAvailable when Self is UIHoverLiftEffect."
  },
  {
    "title": "displayAsPalette | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/options/4195440-displayaspalette",
    "html": "Discussion\n\nRelated sessions from WWDC23\n\nSession 10055: What’s new in UIKit\n\nSee Also\nOptions\nstatic var displayInline: UIMenu.Options\nAn option indicating the menu displays inline with its parent menu instead of displaying as a submenu.\nstatic var destructive: UIMenu.Options\nAn option indicating the menu’s appearance represents a destructive action.\nstatic var singleSelection: UIMenu.Options\nAn option indicating whether the menu and its submenus allow a single menu item that’s in the “on” state."
  },
  {
    "title": "hide | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281939-hide",
    "html": "See Also\nApp menu commands\nstatic let about: UIMenu.Identifier\nThe About menu.\nstatic let preferences: UIMenu.Identifier\nThe Preferences menu.\nstatic let services: UIMenu.Identifier\nThe Services menu.\nstatic let quit: UIMenu.Identifier\nThe Quit menu."
  },
  {
    "title": "quit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281946-quit",
    "html": "See Also\nApp menu commands\nstatic let about: UIMenu.Identifier\nThe About menu.\nstatic let preferences: UIMenu.Identifier\nThe Preferences menu.\nstatic let services: UIMenu.Identifier\nThe Services menu.\nstatic let hide: UIMenu.Identifier\nThe Hide menu."
  },
  {
    "title": "newScene | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281943-newscene",
    "html": "See Also\nFile menus\nstatic let openRecent: UIMenu.Identifier\nThe Open Recent menu.\nstatic let close: UIMenu.Identifier\nThe Close menu.\nstatic let print: UIMenu.Identifier\nThe Print menu.\nstatic let document: UIMenu.Identifier\nThe Document menu."
  },
  {
    "title": "print | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281945-print",
    "html": "See Also\nFile menus\nstatic let newScene: UIMenu.Identifier\nThe New Scene menu.\nstatic let openRecent: UIMenu.Identifier\nThe Open Recent menu.\nstatic let close: UIMenu.Identifier\nThe Close menu.\nstatic let document: UIMenu.Identifier\nThe Document menu."
  },
  {
    "title": "openRecent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3548064-openrecent",
    "html": "See Also\nFile menus\nstatic let newScene: UIMenu.Identifier\nThe New Scene menu.\nstatic let close: UIMenu.Identifier\nThe Close menu.\nstatic let print: UIMenu.Identifier\nThe Print menu.\nstatic let document: UIMenu.Identifier\nThe Document menu."
  },
  {
    "title": "share | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281950-share",
    "html": "See Also\nEdit menus\nstatic let undoRedo: UIMenu.Identifier\nThe Undo/Redo menu.\nstatic let standardEdit: UIMenu.Identifier\nThe standard Edit menu.\nstatic let find: UIMenu.Identifier\nThe Find menu.\nstatic let replace: UIMenu.Identifier\nThe Replace menu.\nstatic let textStyle: UIMenu.Identifier\nThe Text Style menu.\nstatic let spelling: UIMenu.Identifier\nThe Spelling menu.\nstatic let spellingPanel: UIMenu.Identifier\nThe Spelling Panel menu.\nstatic let spellingOptions: UIMenu.Identifier\nThe Spelling Options menu.\nstatic let substitutions: UIMenu.Identifier\nThe Substitutions menu.\nstatic let substitutionsPanel: UIMenu.Identifier\nThe Substitutions Panel menu.\nstatic let substitutionOptions: UIMenu.Identifier\nThe Substitutions Options menu.\nstatic let transformations: UIMenu.Identifier\nThe Transformations menu.\nstatic let speech: UIMenu.Identifier\nThe Speech menu.\nstatic let lookup: UIMenu.Identifier\nThe Lookup menu.\nstatic let learn: UIMenu.Identifier\nThe Learn menu.\nstatic let format: UIMenu.Identifier\nThe Format menu.\nstatic let font: UIMenu.Identifier\nThe Font menu.\nstatic let textSize: UIMenu.Identifier\nThe Text Size menu.\nstatic let textColor: UIMenu.Identifier\nThe Text Color menu.\nstatic let textStylePasteboard: UIMenu.Identifier\nThe Text Style Pasteboard menu.\nstatic let text: UIMenu.Identifier\nThe Text menu.\nstatic let autoFill: UIMenu.Identifier\nThe AutoFill menu.\nstatic let writingDirection: UIMenu.Identifier\nThe Writing Direction menu.\nstatic let alignment: UIMenu.Identifier\nThe Alignment menu."
  },
  {
    "title": "spelling | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281952-spelling",
    "html": "See Also\nEdit menus\nstatic let undoRedo: UIMenu.Identifier\nThe Undo/Redo menu.\nstatic let standardEdit: UIMenu.Identifier\nThe standard Edit menu.\nstatic let find: UIMenu.Identifier\nThe Find menu.\nstatic let replace: UIMenu.Identifier\nThe Replace menu.\nstatic let share: UIMenu.Identifier\nThe Share menu.\nstatic let textStyle: UIMenu.Identifier\nThe Text Style menu.\nstatic let spellingPanel: UIMenu.Identifier\nThe Spelling Panel menu.\nstatic let spellingOptions: UIMenu.Identifier\nThe Spelling Options menu.\nstatic let substitutions: UIMenu.Identifier\nThe Substitutions menu.\nstatic let substitutionsPanel: UIMenu.Identifier\nThe Substitutions Panel menu.\nstatic let substitutionOptions: UIMenu.Identifier\nThe Substitutions Options menu.\nstatic let transformations: UIMenu.Identifier\nThe Transformations menu.\nstatic let speech: UIMenu.Identifier\nThe Speech menu.\nstatic let lookup: UIMenu.Identifier\nThe Lookup menu.\nstatic let learn: UIMenu.Identifier\nThe Learn menu.\nstatic let format: UIMenu.Identifier\nThe Format menu.\nstatic let font: UIMenu.Identifier\nThe Font menu.\nstatic let textSize: UIMenu.Identifier\nThe Text Size menu.\nstatic let textColor: UIMenu.Identifier\nThe Text Color menu.\nstatic let textStylePasteboard: UIMenu.Identifier\nThe Text Style Pasteboard menu.\nstatic let text: UIMenu.Identifier\nThe Text menu.\nstatic let autoFill: UIMenu.Identifier\nThe AutoFill menu.\nstatic let writingDirection: UIMenu.Identifier\nThe Writing Direction menu.\nstatic let alignment: UIMenu.Identifier\nThe Alignment menu."
  },
  {
    "title": "find | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281934-find",
    "html": "See Also\nEdit menus\nstatic let undoRedo: UIMenu.Identifier\nThe Undo/Redo menu.\nstatic let standardEdit: UIMenu.Identifier\nThe standard Edit menu.\nstatic let replace: UIMenu.Identifier\nThe Replace menu.\nstatic let share: UIMenu.Identifier\nThe Share menu.\nstatic let textStyle: UIMenu.Identifier\nThe Text Style menu.\nstatic let spelling: UIMenu.Identifier\nThe Spelling menu.\nstatic let spellingPanel: UIMenu.Identifier\nThe Spelling Panel menu.\nstatic let spellingOptions: UIMenu.Identifier\nThe Spelling Options menu.\nstatic let substitutions: UIMenu.Identifier\nThe Substitutions menu.\nstatic let substitutionsPanel: UIMenu.Identifier\nThe Substitutions Panel menu.\nstatic let substitutionOptions: UIMenu.Identifier\nThe Substitutions Options menu.\nstatic let transformations: UIMenu.Identifier\nThe Transformations menu.\nstatic let speech: UIMenu.Identifier\nThe Speech menu.\nstatic let lookup: UIMenu.Identifier\nThe Lookup menu.\nstatic let learn: UIMenu.Identifier\nThe Learn menu.\nstatic let format: UIMenu.Identifier\nThe Format menu.\nstatic let font: UIMenu.Identifier\nThe Font menu.\nstatic let textSize: UIMenu.Identifier\nThe Text Size menu.\nstatic let textColor: UIMenu.Identifier\nThe Text Color menu.\nstatic let textStylePasteboard: UIMenu.Identifier\nThe Text Style Pasteboard menu.\nstatic let text: UIMenu.Identifier\nThe Text menu.\nstatic let autoFill: UIMenu.Identifier\nThe AutoFill menu.\nstatic let writingDirection: UIMenu.Identifier\nThe Writing Direction menu.\nstatic let alignment: UIMenu.Identifier\nThe Alignment menu."
  },
  {
    "title": "document | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3975869-document",
    "html": "See Also\nFile menus\nstatic let newScene: UIMenu.Identifier\nThe New Scene menu.\nstatic let openRecent: UIMenu.Identifier\nThe Open Recent menu.\nstatic let close: UIMenu.Identifier\nThe Close menu.\nstatic let print: UIMenu.Identifier\nThe Print menu."
  },
  {
    "title": "textStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281962-textstyle",
    "html": "See Also\nEdit menus\nstatic let undoRedo: UIMenu.Identifier\nThe Undo/Redo menu.\nstatic let standardEdit: UIMenu.Identifier\nThe standard Edit menu.\nstatic let find: UIMenu.Identifier\nThe Find menu.\nstatic let replace: UIMenu.Identifier\nThe Replace menu.\nstatic let share: UIMenu.Identifier\nThe Share menu.\nstatic let spelling: UIMenu.Identifier\nThe Spelling menu.\nstatic let spellingPanel: UIMenu.Identifier\nThe Spelling Panel menu.\nstatic let spellingOptions: UIMenu.Identifier\nThe Spelling Options menu.\nstatic let substitutions: UIMenu.Identifier\nThe Substitutions menu.\nstatic let substitutionsPanel: UIMenu.Identifier\nThe Substitutions Panel menu.\nstatic let substitutionOptions: UIMenu.Identifier\nThe Substitutions Options menu.\nstatic let transformations: UIMenu.Identifier\nThe Transformations menu.\nstatic let speech: UIMenu.Identifier\nThe Speech menu.\nstatic let lookup: UIMenu.Identifier\nThe Lookup menu.\nstatic let learn: UIMenu.Identifier\nThe Learn menu.\nstatic let format: UIMenu.Identifier\nThe Format menu.\nstatic let font: UIMenu.Identifier\nThe Font menu.\nstatic let textSize: UIMenu.Identifier\nThe Text Size menu.\nstatic let textColor: UIMenu.Identifier\nThe Text Color menu.\nstatic let textStylePasteboard: UIMenu.Identifier\nThe Text Style Pasteboard menu.\nstatic let text: UIMenu.Identifier\nThe Text menu.\nstatic let autoFill: UIMenu.Identifier\nThe AutoFill menu.\nstatic let writingDirection: UIMenu.Identifier\nThe Writing Direction menu.\nstatic let alignment: UIMenu.Identifier\nThe Alignment menu."
  },
  {
    "title": "spellingPanel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281954-spellingpanel",
    "html": "See Also\nEdit menus\nstatic let undoRedo: UIMenu.Identifier\nThe Undo/Redo menu.\nstatic let standardEdit: UIMenu.Identifier\nThe standard Edit menu.\nstatic let find: UIMenu.Identifier\nThe Find menu.\nstatic let replace: UIMenu.Identifier\nThe Replace menu.\nstatic let share: UIMenu.Identifier\nThe Share menu.\nstatic let textStyle: UIMenu.Identifier\nThe Text Style menu.\nstatic let spelling: UIMenu.Identifier\nThe Spelling menu.\nstatic let spellingOptions: UIMenu.Identifier\nThe Spelling Options menu.\nstatic let substitutions: UIMenu.Identifier\nThe Substitutions menu.\nstatic let substitutionsPanel: UIMenu.Identifier\nThe Substitutions Panel menu.\nstatic let substitutionOptions: UIMenu.Identifier\nThe Substitutions Options menu.\nstatic let transformations: UIMenu.Identifier\nThe Transformations menu.\nstatic let speech: UIMenu.Identifier\nThe Speech menu.\nstatic let lookup: UIMenu.Identifier\nThe Lookup menu.\nstatic let learn: UIMenu.Identifier\nThe Learn menu.\nstatic let format: UIMenu.Identifier\nThe Format menu.\nstatic let font: UIMenu.Identifier\nThe Font menu.\nstatic let textSize: UIMenu.Identifier\nThe Text Size menu.\nstatic let textColor: UIMenu.Identifier\nThe Text Color menu.\nstatic let textStylePasteboard: UIMenu.Identifier\nThe Text Style Pasteboard menu.\nstatic let text: UIMenu.Identifier\nThe Text menu.\nstatic let autoFill: UIMenu.Identifier\nThe AutoFill menu.\nstatic let writingDirection: UIMenu.Identifier\nThe Writing Direction menu.\nstatic let alignment: UIMenu.Identifier\nThe Alignment menu."
  },
  {
    "title": "substitutionOptions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281956-substitutionoptions",
    "html": "See Also\nEdit menus\nstatic let undoRedo: UIMenu.Identifier\nThe Undo/Redo menu.\nstatic let standardEdit: UIMenu.Identifier\nThe standard Edit menu.\nstatic let find: UIMenu.Identifier\nThe Find menu.\nstatic let replace: UIMenu.Identifier\nThe Replace menu.\nstatic let share: UIMenu.Identifier\nThe Share menu.\nstatic let textStyle: UIMenu.Identifier\nThe Text Style menu.\nstatic let spelling: UIMenu.Identifier\nThe Spelling menu.\nstatic let spellingPanel: UIMenu.Identifier\nThe Spelling Panel menu.\nstatic let spellingOptions: UIMenu.Identifier\nThe Spelling Options menu.\nstatic let substitutions: UIMenu.Identifier\nThe Substitutions menu.\nstatic let substitutionsPanel: UIMenu.Identifier\nThe Substitutions Panel menu.\nstatic let transformations: UIMenu.Identifier\nThe Transformations menu.\nstatic let speech: UIMenu.Identifier\nThe Speech menu.\nstatic let lookup: UIMenu.Identifier\nThe Lookup menu.\nstatic let learn: UIMenu.Identifier\nThe Learn menu.\nstatic let format: UIMenu.Identifier\nThe Format menu.\nstatic let font: UIMenu.Identifier\nThe Font menu.\nstatic let textSize: UIMenu.Identifier\nThe Text Size menu.\nstatic let textColor: UIMenu.Identifier\nThe Text Color menu.\nstatic let textStylePasteboard: UIMenu.Identifier\nThe Text Style Pasteboard menu.\nstatic let text: UIMenu.Identifier\nThe Text menu.\nstatic let autoFill: UIMenu.Identifier\nThe AutoFill menu.\nstatic let writingDirection: UIMenu.Identifier\nThe Writing Direction menu.\nstatic let alignment: UIMenu.Identifier\nThe Alignment menu."
  },
  {
    "title": "substitutions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281957-substitutions",
    "html": "See Also\nEdit menus\nstatic let undoRedo: UIMenu.Identifier\nThe Undo/Redo menu.\nstatic let standardEdit: UIMenu.Identifier\nThe standard Edit menu.\nstatic let find: UIMenu.Identifier\nThe Find menu.\nstatic let replace: UIMenu.Identifier\nThe Replace menu.\nstatic let share: UIMenu.Identifier\nThe Share menu.\nstatic let textStyle: UIMenu.Identifier\nThe Text Style menu.\nstatic let spelling: UIMenu.Identifier\nThe Spelling menu.\nstatic let spellingPanel: UIMenu.Identifier\nThe Spelling Panel menu.\nstatic let spellingOptions: UIMenu.Identifier\nThe Spelling Options menu.\nstatic let substitutionsPanel: UIMenu.Identifier\nThe Substitutions Panel menu.\nstatic let substitutionOptions: UIMenu.Identifier\nThe Substitutions Options menu.\nstatic let transformations: UIMenu.Identifier\nThe Transformations menu.\nstatic let speech: UIMenu.Identifier\nThe Speech menu.\nstatic let lookup: UIMenu.Identifier\nThe Lookup menu.\nstatic let learn: UIMenu.Identifier\nThe Learn menu.\nstatic let format: UIMenu.Identifier\nThe Format menu.\nstatic let font: UIMenu.Identifier\nThe Font menu.\nstatic let textSize: UIMenu.Identifier\nThe Text Size menu.\nstatic let textColor: UIMenu.Identifier\nThe Text Color menu.\nstatic let textStylePasteboard: UIMenu.Identifier\nThe Text Style Pasteboard menu.\nstatic let text: UIMenu.Identifier\nThe Text menu.\nstatic let autoFill: UIMenu.Identifier\nThe AutoFill menu.\nstatic let writingDirection: UIMenu.Identifier\nThe Writing Direction menu.\nstatic let alignment: UIMenu.Identifier\nThe Alignment menu."
  },
  {
    "title": "lookup | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281941-lookup",
    "html": "See Also\nEdit menus\nstatic let undoRedo: UIMenu.Identifier\nThe Undo/Redo menu.\nstatic let standardEdit: UIMenu.Identifier\nThe standard Edit menu.\nstatic let find: UIMenu.Identifier\nThe Find menu.\nstatic let replace: UIMenu.Identifier\nThe Replace menu.\nstatic let share: UIMenu.Identifier\nThe Share menu.\nstatic let textStyle: UIMenu.Identifier\nThe Text Style menu.\nstatic let spelling: UIMenu.Identifier\nThe Spelling menu.\nstatic let spellingPanel: UIMenu.Identifier\nThe Spelling Panel menu.\nstatic let spellingOptions: UIMenu.Identifier\nThe Spelling Options menu.\nstatic let substitutions: UIMenu.Identifier\nThe Substitutions menu.\nstatic let substitutionsPanel: UIMenu.Identifier\nThe Substitutions Panel menu.\nstatic let substitutionOptions: UIMenu.Identifier\nThe Substitutions Options menu.\nstatic let transformations: UIMenu.Identifier\nThe Transformations menu.\nstatic let speech: UIMenu.Identifier\nThe Speech menu.\nstatic let learn: UIMenu.Identifier\nThe Learn menu.\nstatic let format: UIMenu.Identifier\nThe Format menu.\nstatic let font: UIMenu.Identifier\nThe Font menu.\nstatic let textSize: UIMenu.Identifier\nThe Text Size menu.\nstatic let textColor: UIMenu.Identifier\nThe Text Color menu.\nstatic let textStylePasteboard: UIMenu.Identifier\nThe Text Style Pasteboard menu.\nstatic let text: UIMenu.Identifier\nThe Text menu.\nstatic let autoFill: UIMenu.Identifier\nThe AutoFill menu.\nstatic let writingDirection: UIMenu.Identifier\nThe Writing Direction menu.\nstatic let alignment: UIMenu.Identifier\nThe Alignment menu."
  },
  {
    "title": "substitutionsPanel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281958-substitutionspanel",
    "html": "See Also\nEdit menus\nstatic let undoRedo: UIMenu.Identifier\nThe Undo/Redo menu.\nstatic let standardEdit: UIMenu.Identifier\nThe standard Edit menu.\nstatic let find: UIMenu.Identifier\nThe Find menu.\nstatic let replace: UIMenu.Identifier\nThe Replace menu.\nstatic let share: UIMenu.Identifier\nThe Share menu.\nstatic let textStyle: UIMenu.Identifier\nThe Text Style menu.\nstatic let spelling: UIMenu.Identifier\nThe Spelling menu.\nstatic let spellingPanel: UIMenu.Identifier\nThe Spelling Panel menu.\nstatic let spellingOptions: UIMenu.Identifier\nThe Spelling Options menu.\nstatic let substitutions: UIMenu.Identifier\nThe Substitutions menu.\nstatic let substitutionOptions: UIMenu.Identifier\nThe Substitutions Options menu.\nstatic let transformations: UIMenu.Identifier\nThe Transformations menu.\nstatic let speech: UIMenu.Identifier\nThe Speech menu.\nstatic let lookup: UIMenu.Identifier\nThe Lookup menu.\nstatic let learn: UIMenu.Identifier\nThe Learn menu.\nstatic let format: UIMenu.Identifier\nThe Format menu.\nstatic let font: UIMenu.Identifier\nThe Font menu.\nstatic let textSize: UIMenu.Identifier\nThe Text Size menu.\nstatic let textColor: UIMenu.Identifier\nThe Text Color menu.\nstatic let textStylePasteboard: UIMenu.Identifier\nThe Text Style Pasteboard menu.\nstatic let text: UIMenu.Identifier\nThe Text menu.\nstatic let autoFill: UIMenu.Identifier\nThe AutoFill menu.\nstatic let writingDirection: UIMenu.Identifier\nThe Writing Direction menu.\nstatic let alignment: UIMenu.Identifier\nThe Alignment menu."
  },
  {
    "title": "transformations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281964-transformations",
    "html": "See Also\nEdit menus\nstatic let undoRedo: UIMenu.Identifier\nThe Undo/Redo menu.\nstatic let standardEdit: UIMenu.Identifier\nThe standard Edit menu.\nstatic let find: UIMenu.Identifier\nThe Find menu.\nstatic let replace: UIMenu.Identifier\nThe Replace menu.\nstatic let share: UIMenu.Identifier\nThe Share menu.\nstatic let textStyle: UIMenu.Identifier\nThe Text Style menu.\nstatic let spelling: UIMenu.Identifier\nThe Spelling menu.\nstatic let spellingPanel: UIMenu.Identifier\nThe Spelling Panel menu.\nstatic let spellingOptions: UIMenu.Identifier\nThe Spelling Options menu.\nstatic let substitutions: UIMenu.Identifier\nThe Substitutions menu.\nstatic let substitutionsPanel: UIMenu.Identifier\nThe Substitutions Panel menu.\nstatic let substitutionOptions: UIMenu.Identifier\nThe Substitutions Options menu.\nstatic let speech: UIMenu.Identifier\nThe Speech menu.\nstatic let lookup: UIMenu.Identifier\nThe Lookup menu.\nstatic let learn: UIMenu.Identifier\nThe Learn menu.\nstatic let format: UIMenu.Identifier\nThe Format menu.\nstatic let font: UIMenu.Identifier\nThe Font menu.\nstatic let textSize: UIMenu.Identifier\nThe Text Size menu.\nstatic let textColor: UIMenu.Identifier\nThe Text Color menu.\nstatic let textStylePasteboard: UIMenu.Identifier\nThe Text Style Pasteboard menu.\nstatic let text: UIMenu.Identifier\nThe Text menu.\nstatic let autoFill: UIMenu.Identifier\nThe AutoFill menu.\nstatic let writingDirection: UIMenu.Identifier\nThe Writing Direction menu.\nstatic let alignment: UIMenu.Identifier\nThe Alignment menu."
  },
  {
    "title": "init(role:userActivity:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscenesessionactivationrequest/4176606-init",
    "html": "Parameters\nrole\n\nThe role to request.\n\nuserActivity\n\nA user activity to send to the newly activated scene.\n\noptions\n\nActivation request options to further customize the request.\n\nDiscussion\n\nCreate an activation request with this method when you want the system to activate a scene session appropriate for the role and userActivity you provide. The system activates an existing scene session when the scene session’s role matches the role you request, and the user activity’s targetContentIdentifier satisfies the scene’s activationConditions. Otherwise, the system activates a new scene session.\n\nSee Also\nCreating a request\ninit(session: UISceneSession, userActivity: NSUserActivity?, options: UIScene.ActivationRequestOptions?)\nCreates a scene session activation request object with a scene session, a user activity, and options that you provide."
  },
  {
    "title": "role | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscenesessionactivationrequest/4176609-role",
    "html": "Discussion\n\nIf you created the request using init(session:userActivity:options:), this property reflects the role of the session.\n\nSee Also\nManaging request details\nvar options: UIScene.ActivationRequestOptions?\nActivation request options to further customize the request.\nvar session: UISceneSession?\nThe specific scene session to activate.\nvar userActivity: NSUserActivity?\nA user activity to send to the newly activated scene."
  },
  {
    "title": "options | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscenesessionactivationrequest/4176608-options",
    "html": "See Also\nManaging request details\nvar role: UISceneSession.Role\nThe role to request.\nvar session: UISceneSession?\nThe specific scene session to activate.\nvar userActivity: NSUserActivity?\nA user activity to send to the newly activated scene.\nRelated Documentation\nclass UIWindowScene.ActivationRequestOptions\nAn object that contains information you want the system to use when activating a new window scene."
  },
  {
    "title": "session | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscenesessionactivationrequest/4176610-session",
    "html": "See Also\nManaging request details\nvar options: UIScene.ActivationRequestOptions?\nActivation request options to further customize the request.\nvar role: UISceneSession.Role\nThe role to request.\nvar userActivity: NSUserActivity?\nA user activity to send to the newly activated scene."
  },
  {
    "title": "userActivity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscenesessionactivationrequest/4176611-useractivity",
    "html": "Discussion\n\nThe system sends the userActivity to the session’s scene upon activation, regardless of whether the scene session already exists.\n\nIf you don’t provide a scene session to activate, the system uses the targetContentIdentifier of the user activity to determine which scene session to activate. When the user activity’s targetContentIdentifier satisfies the prefersToActivateForTargetContentIdentifierPredicate, the system activates that scene’s session to handle the user activity.\n\nSee Also\nManaging request details\nvar options: UIScene.ActivationRequestOptions?\nActivation request options to further customize the request.\nvar role: UISceneSession.Role\nThe role to request.\nvar session: UISceneSession?\nThe specific scene session to activate."
  },
  {
    "title": "lift | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uihovereffect/4224529-lift",
    "html": "See Also\nChoosing a hover effect\nstatic var automatic: UIHoverAutomaticEffect\nA system-default hover effect that automatically selects the appropriate effect based on the view to which it applies.\nAvailable when Self is UIHoverAutomaticEffect.\nstatic var highlight: UIHoverHighlightEffect\nAn effect that applies a highlight to the view on hover.\nAvailable when Self is UIHoverHighlightEffect."
  },
  {
    "title": "preferences | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281944-preferences",
    "html": "See Also\nApp menu commands\nstatic let about: UIMenu.Identifier\nThe About menu.\nstatic let services: UIMenu.Identifier\nThe Services menu.\nstatic let hide: UIMenu.Identifier\nThe Hide menu.\nstatic let quit: UIMenu.Identifier\nThe Quit menu."
  },
  {
    "title": "file | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281933-file",
    "html": "See Also\nTop-level menus\nstatic let application: UIMenu.Identifier\nThe standard app menu.\nstatic let edit: UIMenu.Identifier\nThe standard Edit menu.\nstatic let view: UIMenu.Identifier\nThe standard View menu.\nstatic let window: UIMenu.Identifier\nThe standard Window menu.\nstatic let help: UIMenu.Identifier\nThe standard Help menu."
  },
  {
    "title": "window | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281967-window",
    "html": "See Also\nTop-level menus\nstatic let application: UIMenu.Identifier\nThe standard app menu.\nstatic let file: UIMenu.Identifier\nThe standard File menu.\nstatic let edit: UIMenu.Identifier\nThe standard Edit menu.\nstatic let view: UIMenu.Identifier\nThe standard View menu.\nstatic let help: UIMenu.Identifier\nThe standard Help menu."
  },
  {
    "title": "edit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281932-edit",
    "html": "See Also\nTop-level menus\nstatic let application: UIMenu.Identifier\nThe standard app menu.\nstatic let file: UIMenu.Identifier\nThe standard File menu.\nstatic let view: UIMenu.Identifier\nThe standard View menu.\nstatic let window: UIMenu.Identifier\nThe standard Window menu.\nstatic let help: UIMenu.Identifier\nThe standard Help menu."
  },
  {
    "title": "format | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281936-format",
    "html": "See Also\nEdit menus\nstatic let undoRedo: UIMenu.Identifier\nThe Undo/Redo menu.\nstatic let standardEdit: UIMenu.Identifier\nThe standard Edit menu.\nstatic let find: UIMenu.Identifier\nThe Find menu.\nstatic let replace: UIMenu.Identifier\nThe Replace menu.\nstatic let share: UIMenu.Identifier\nThe Share menu.\nstatic let textStyle: UIMenu.Identifier\nThe Text Style menu.\nstatic let spelling: UIMenu.Identifier\nThe Spelling menu.\nstatic let spellingPanel: UIMenu.Identifier\nThe Spelling Panel menu.\nstatic let spellingOptions: UIMenu.Identifier\nThe Spelling Options menu.\nstatic let substitutions: UIMenu.Identifier\nThe Substitutions menu.\nstatic let substitutionsPanel: UIMenu.Identifier\nThe Substitutions Panel menu.\nstatic let substitutionOptions: UIMenu.Identifier\nThe Substitutions Options menu.\nstatic let transformations: UIMenu.Identifier\nThe Transformations menu.\nstatic let speech: UIMenu.Identifier\nThe Speech menu.\nstatic let lookup: UIMenu.Identifier\nThe Lookup menu.\nstatic let learn: UIMenu.Identifier\nThe Learn menu.\nstatic let font: UIMenu.Identifier\nThe Font menu.\nstatic let textSize: UIMenu.Identifier\nThe Text Size menu.\nstatic let textColor: UIMenu.Identifier\nThe Text Color menu.\nstatic let textStylePasteboard: UIMenu.Identifier\nThe Text Style Pasteboard menu.\nstatic let text: UIMenu.Identifier\nThe Text menu.\nstatic let autoFill: UIMenu.Identifier\nThe AutoFill menu.\nstatic let writingDirection: UIMenu.Identifier\nThe Writing Direction menu.\nstatic let alignment: UIMenu.Identifier\nThe Alignment menu."
  },
  {
    "title": "view | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281966-view",
    "html": "See Also\nTop-level menus\nstatic let application: UIMenu.Identifier\nThe standard app menu.\nstatic let file: UIMenu.Identifier\nThe standard File menu.\nstatic let edit: UIMenu.Identifier\nThe standard Edit menu.\nstatic let window: UIMenu.Identifier\nThe standard Window menu.\nstatic let help: UIMenu.Identifier\nThe standard Help menu."
  },
  {
    "title": "help | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281938-help",
    "html": "See Also\nTop-level menus\nstatic let application: UIMenu.Identifier\nThe standard app menu.\nstatic let file: UIMenu.Identifier\nThe standard File menu.\nstatic let edit: UIMenu.Identifier\nThe standard Edit menu.\nstatic let view: UIMenu.Identifier\nThe standard View menu.\nstatic let window: UIMenu.Identifier\nThe standard Window menu."
  },
  {
    "title": "textFieldDidEndEditing(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextfielddelegate/1619591-textfielddidendediting",
    "html": "Parameters\ntextField\n\nThe text field for which editing ended.\n\nDiscussion\n\nThis method is called after the text field resigns its first responder status. You can use this method to update your delegate’s state information. For example, you might use this method to hide overlay views that should be visible only while editing.\n\nImplementation of this method by the delegate is optional. If your delegate also implements the textFieldDidEndEditing(_:reason:) method, UIKit calls that method in preference to this one.\n\nSee Also\nManaging editing\nfunc textFieldShouldBeginEditing(UITextField) -> Bool\nAsks the delegate whether to begin editing in the specified text field.\nfunc textFieldDidBeginEditing(UITextField)\nTells the delegate when editing begins in the specified text field.\nfunc textFieldShouldEndEditing(UITextField) -> Bool\nAsks the delegate whether to stop editing in the specified text field.\nfunc textFieldDidEndEditing(UITextField, reason: UITextField.DidEndEditingReason)\nTells the delegate when editing stops for the specified text field, and the reason it stopped.\nenum UITextField.DidEndEditingReason\nConstants that indicate the reason for ending editing in a text field."
  },
  {
    "title": "textField(_:willDismissEditMenuWith:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextfielddelegate/4057378-textfield",
    "html": "Parameters\ntextField\n\nThe text field showing the menu.\n\nanimator\n\nThe dismissal animator to add animations to, so that the animations will run alongside the dismissal transition.\n\nSee Also\nCustomizing an edit menu\nfunc textField(UITextField, willPresentEditMenuWith: UIEditMenuInteractionAnimating)\nTells the delegate that the system is about to present an edit menu with an animator."
  },
  {
    "title": "textFieldDidBeginEditing(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextfielddelegate/1619590-textfielddidbeginediting",
    "html": "Parameters\ntextField\n\nThe text field in which an editing session began.\n\nDiscussion\n\nThis method notifies the delegate that the specified text field just became the first responder. Use this method to update state information or perform other tasks. For example, you might use this method to show overlay views that are visible only while editing.\n\nImplementation of this method by the delegate is optional.\n\nSee Also\nManaging editing\nfunc textFieldShouldBeginEditing(UITextField) -> Bool\nAsks the delegate whether to begin editing in the specified text field.\nfunc textFieldShouldEndEditing(UITextField) -> Bool\nAsks the delegate whether to stop editing in the specified text field.\nfunc textFieldDidEndEditing(UITextField, reason: UITextField.DidEndEditingReason)\nTells the delegate when editing stops for the specified text field, and the reason it stopped.\nfunc textFieldDidEndEditing(UITextField)\nTells the delegate when editing stops for the specified text field.\nenum UITextField.DidEndEditingReason\nConstants that indicate the reason for ending editing in a text field."
  },
  {
    "title": "lookupSuggestion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidatadetectortypes/1648141-lookupsuggestion",
    "html": "Discussion\n\nExamples of lookup suggestions include the name of a restaurant, the title of a new movie, the name of a celebrity, and so on."
  },
  {
    "title": "UIContextMenuInteractionCommitStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontextmenuinteractioncommitstyle",
    "html": "Topics\nInteraction Styles\ncase dismiss\nAn interaction with no animations.\ncase pop\nAn interaction that uses animations.\nRelationships\nConforms To\nSendable\nSee Also\nSpecifying the Commit Style\nvar preferredCommitStyle: UIContextMenuInteractionCommitStyle\nThe preferred animation style triggered when the user taps the preview.\n\nRequired"
  },
  {
    "title": "preferredCommitStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontextmenuinteractioncommitanimating/3295931-preferredcommitstyle",
    "html": "Required\n\nSee Also\nSpecifying the Commit Style\nenum UIContextMenuInteractionCommitStyle\nConstants that control the interaction commit style."
  },
  {
    "title": "tableView(_:contextMenuConfigurationForRowAt:point:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/3295956-tableview",
    "html": "Parameters\ntableView\n\nThe table view containing the row.\n\nindexPath\n\nThe index path of the row.\n\npoint\n\nThe location of the interaction in the table view’s coordinate space.\n\nReturn Value\n\nA context menu configuration for the indexPath.\n\nDiscussion\n\nUse this method to provide a UIContextMenuConfiguration describing the menu to present. Return nil to prevent the interaction from beginning. Return an empty configuration to begin the interaction and then fail with a cancellation effect. Use the empty configuration to indicate to users that it’s possible for this element to present a menu, but that there are no actions to present at this time.\n\nSee Also\nManaging context menus\nAdding Context Menus in Your App\nProvide quick access to useful actions by adding context menus to your iOS app.\nfunc tableView(UITableView, previewForDismissingContextMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nReturns the destination view when dismissing a context menu.\nfunc tableView(UITableView, previewForHighlightingContextMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nReturns a view to override the default preview the table view created.\nfunc tableView(UITableView, willDisplayContextMenu: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nInforms the delegate when a context menu will appear.\nfunc tableView(UITableView, willEndContextMenuInteraction: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nInforms the delegate when a context menu will disappear.\nfunc tableView(UITableView, willPerformPreviewActionForMenuWith: UIContextMenuConfiguration, animator: UIContextMenuInteractionCommitAnimating)\nInforms the delegate when a user triggers a commit by tapping the preview."
  },
  {
    "title": "previewViewController | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontextmenuinteractionanimating/3375804-previewviewcontroller",
    "html": "Required"
  },
  {
    "title": "UITextField.DidEndEditingReason.committed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextfield/didendeditingreason/committed",
    "html": "Discussion\n\nOn tvOS, text field changes become committed when the user presses the Done button."
  },
  {
    "title": "services | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281949-services",
    "html": "See Also\nApp menu commands\nstatic let about: UIMenu.Identifier\nThe About menu.\nstatic let preferences: UIMenu.Identifier\nThe Preferences menu.\nstatic let hide: UIMenu.Identifier\nThe Hide menu.\nstatic let quit: UIMenu.Identifier\nThe Quit menu."
  },
  {
    "title": "undoRedo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281965-undoredo",
    "html": "See Also\nEdit menus\nstatic let standardEdit: UIMenu.Identifier\nThe standard Edit menu.\nstatic let find: UIMenu.Identifier\nThe Find menu.\nstatic let replace: UIMenu.Identifier\nThe Replace menu.\nstatic let share: UIMenu.Identifier\nThe Share menu.\nstatic let textStyle: UIMenu.Identifier\nThe Text Style menu.\nstatic let spelling: UIMenu.Identifier\nThe Spelling menu.\nstatic let spellingPanel: UIMenu.Identifier\nThe Spelling Panel menu.\nstatic let spellingOptions: UIMenu.Identifier\nThe Spelling Options menu.\nstatic let substitutions: UIMenu.Identifier\nThe Substitutions menu.\nstatic let substitutionsPanel: UIMenu.Identifier\nThe Substitutions Panel menu.\nstatic let substitutionOptions: UIMenu.Identifier\nThe Substitutions Options menu.\nstatic let transformations: UIMenu.Identifier\nThe Transformations menu.\nstatic let speech: UIMenu.Identifier\nThe Speech menu.\nstatic let lookup: UIMenu.Identifier\nThe Lookup menu.\nstatic let learn: UIMenu.Identifier\nThe Learn menu.\nstatic let format: UIMenu.Identifier\nThe Format menu.\nstatic let font: UIMenu.Identifier\nThe Font menu.\nstatic let textSize: UIMenu.Identifier\nThe Text Size menu.\nstatic let textColor: UIMenu.Identifier\nThe Text Color menu.\nstatic let textStylePasteboard: UIMenu.Identifier\nThe Text Style Pasteboard menu.\nstatic let text: UIMenu.Identifier\nThe Text menu.\nstatic let autoFill: UIMenu.Identifier\nThe AutoFill menu.\nstatic let writingDirection: UIMenu.Identifier\nThe Writing Direction menu.\nstatic let alignment: UIMenu.Identifier\nThe Alignment menu."
  },
  {
    "title": "spellingOptions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281953-spellingoptions",
    "html": "See Also\nEdit menus\nstatic let undoRedo: UIMenu.Identifier\nThe Undo/Redo menu.\nstatic let standardEdit: UIMenu.Identifier\nThe standard Edit menu.\nstatic let find: UIMenu.Identifier\nThe Find menu.\nstatic let replace: UIMenu.Identifier\nThe Replace menu.\nstatic let share: UIMenu.Identifier\nThe Share menu.\nstatic let textStyle: UIMenu.Identifier\nThe Text Style menu.\nstatic let spelling: UIMenu.Identifier\nThe Spelling menu.\nstatic let spellingPanel: UIMenu.Identifier\nThe Spelling Panel menu.\nstatic let substitutions: UIMenu.Identifier\nThe Substitutions menu.\nstatic let substitutionsPanel: UIMenu.Identifier\nThe Substitutions Panel menu.\nstatic let substitutionOptions: UIMenu.Identifier\nThe Substitutions Options menu.\nstatic let transformations: UIMenu.Identifier\nThe Transformations menu.\nstatic let speech: UIMenu.Identifier\nThe Speech menu.\nstatic let lookup: UIMenu.Identifier\nThe Lookup menu.\nstatic let learn: UIMenu.Identifier\nThe Learn menu.\nstatic let format: UIMenu.Identifier\nThe Format menu.\nstatic let font: UIMenu.Identifier\nThe Font menu.\nstatic let textSize: UIMenu.Identifier\nThe Text Size menu.\nstatic let textColor: UIMenu.Identifier\nThe Text Color menu.\nstatic let textStylePasteboard: UIMenu.Identifier\nThe Text Style Pasteboard menu.\nstatic let text: UIMenu.Identifier\nThe Text menu.\nstatic let autoFill: UIMenu.Identifier\nThe AutoFill menu.\nstatic let writingDirection: UIMenu.Identifier\nThe Writing Direction menu.\nstatic let alignment: UIMenu.Identifier\nThe Alignment menu."
  },
  {
    "title": "textView(_:shouldInteractWith:in:interaction:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextviewdelegate/1649336-textview",
    "html": "Parameters\ntextView\n\nThe text view containing the text attachment.\n\ntextAttachment\n\nThe text attachment.\n\ncharacterRange\n\nThe character range containing the text attachment.\n\ninteraction\n\nThe type of interaction that is occurring (for possible values, see UITextItemInteraction).\n\nReturn Value\n\ntrue if interaction with the text attachment should be allowed; false if interaction should not be allowed.\n\nDiscussion\n\nA text view calls this method if the user taps or long-presses the text attachment and its image property is not nil. You can use this method to trigger an action in addition to displaying the text attachment inline with the text.\n\nSee Also\nInteracting with text data\nfunc textView(UITextView, shouldInteractWith: URL, in: NSRange, interaction: UITextItemInteraction) -> Bool\nAsks the delegate whether the specified text view allows the specified type of user interaction with the specified URL in the specified range of text.\nDeprecated\nfunc textView(UITextView, shouldInteractWith: NSTextAttachment, in: NSRange) -> Bool\nAsks the delegate whether the specified text view allows user interaction with the provided text attachment in the specified range of text.\nDeprecated\nfunc textView(UITextView, shouldInteractWith: URL, in: NSRange) -> Bool\nAsks the delegate whether the specified text view allows user interaction with the specified URL in the specified range of text.\nDeprecated"
  },
  {
    "title": "textView(_:editMenuForTextIn:suggestedActions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextviewdelegate/3975940-textview",
    "html": "Parameters\ntextView\n\nThe text view requesting the menu.\n\nrange\n\nThe character range the menu is presenting for.\n\nsuggestedActions\n\nThe actions and commands the system suggests.\n\nReturn Value\n\nReturns a menu describing the desired menu hierarchy. Return nil to present the default system menu.\n\nDiscussion\n\nThe following example returns a menu that includes an “Add Bookmark” action and also a “Highlight” action, but only if the selected text range is greater than zero.\n\nfunc textView(_ textView: UITextView, editMenuForTextIn range: NSRange, suggestedActions: [UIMenuElement]) -> UIMenu? {\n    var additionalActions: [UIMenuElement] = []\n    if range.length > 0 {\n        let highlightAction = UIAction(title: \"Highlight\", image: UIImage(systemName: \"highlighter\")) { action in\n            // The highlight action.\n        }\n        additionalActions.append(highlightAction)\n    }\n    let addBookmarkAction = UIAction(title: \"Add Bookmark\", image: UIImage(systemName: \"bookmark\")) { action in\n        // The bookmark action.\n    }\n    additionalActions.append(addBookmarkAction)\n    return UIMenu(children: suggestedActions + additionalActions)\n}\n"
  },
  {
    "title": "textDragOptions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextdraggable/2897255-textdragoptions",
    "html": "Required"
  },
  {
    "title": "textDragInteraction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextdraggable/2890911-textdraginteraction",
    "html": "Required\n\nDiscussion\n\nYou can set the text drag interaction's isEnabled property to false if you need to explicitly turn off drag interactions for a UIKit-provided text view."
  },
  {
    "title": "allFoundRanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextsearchaggregator/4013184-allfoundranges",
    "html": "See Also\nTracking search results\nfunc foundRange(UITextRange, searchString: String, document: DocumentIdentifier)\nAdds a text range to the set of matches.\nfunc invalidateFoundRange(UITextRange, document: DocumentIdentifier)\nRemoves a text range from the set of matches.\nfunc invalidate()\nInvalidates all currently shown ranges.\nfunc finishedSearching()\nFinishes the search for text ranges."
  },
  {
    "title": "isTextDropActive | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextdroppable/2890852-istextdropactive",
    "html": "Required"
  },
  {
    "title": "textFieldShouldBeginEditing(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextfielddelegate/1619601-textfieldshouldbeginediting",
    "html": "Parameters\ntextField\n\nThe text field in which editing is about to begin.\n\nReturn Value\n\ntrue if editing should begin or false if it should not.\n\nDiscussion\n\nThe text field calls this method when the user performs an action that would normally initiate the editing of the text field’s text. Implement this method if you want to prevent editing from happening in some situations. For example, you could use this method to prevent the user from editing the text field’s contents more than once. Most of the time, you should return true to allow editing to proceed.\n\nIf you do not implement this method, the text field acts as if this method had returned true.\n\nSee Also\nManaging editing\nfunc textFieldDidBeginEditing(UITextField)\nTells the delegate when editing begins in the specified text field.\nfunc textFieldShouldEndEditing(UITextField) -> Bool\nAsks the delegate whether to stop editing in the specified text field.\nfunc textFieldDidEndEditing(UITextField, reason: UITextField.DidEndEditingReason)\nTells the delegate when editing stops for the specified text field, and the reason it stopped.\nfunc textFieldDidEndEditing(UITextField)\nTells the delegate when editing stops for the specified text field.\nenum UITextField.DidEndEditingReason\nConstants that indicate the reason for ending editing in a text field."
  },
  {
    "title": "textFieldShouldEndEditing(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextfielddelegate/1619592-textfieldshouldendediting",
    "html": "Parameters\ntextField\n\nThe text field in which editing is about to end.\n\nReturn Value\n\ntrue if editing should stop or false if it should continue.\n\nDiscussion\n\nThe text field calls this method when it is asked to resign the first responder status. This can happen when the user selects another control or when you call the text field’s resignFirstResponder() method. Before the focus change occurs, however, the text field calls this method and gives you a chance to prevent the change from happening.\n\nNormally, you would return true from this method to allow the text field to resign the first responder status. You might return false, however, in cases where your delegate detects invalid contents in the text field. Returning false prevents the user from switching to another control until the text field contains a valid value.\n\nNote\n\nIf you use this method to validate the contents of the text field, you might also want to use an overlay view to provide feedback to that effect. For example, you might display a small icon indicating the text is invalid. For more information about adding overlays to text fields, see the methods of UITextField.\n\nBe aware that this method provides only a recommendation about whether editing should end. Even if you return false, UIKit might still force an end to editing. For example, text fields always resign the first responder status when they are removed from their parent view or window.\n\nImplementation of this method by the delegate is optional. If you do not implement this method, the text field resigns the first responder status as if this method had returned true.\n\nSee Also\nManaging editing\nfunc textFieldShouldBeginEditing(UITextField) -> Bool\nAsks the delegate whether to begin editing in the specified text field.\nfunc textFieldDidBeginEditing(UITextField)\nTells the delegate when editing begins in the specified text field.\nfunc textFieldDidEndEditing(UITextField, reason: UITextField.DidEndEditingReason)\nTells the delegate when editing stops for the specified text field, and the reason it stopped.\nfunc textFieldDidEndEditing(UITextField)\nTells the delegate when editing stops for the specified text field.\nenum UITextField.DidEndEditingReason\nConstants that indicate the reason for ending editing in a text field."
  },
  {
    "title": "textFieldShouldClear(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextfielddelegate/1619594-textfieldshouldclear",
    "html": "Parameters\ntextField\n\nThe text field containing the text.\n\nReturn Value\n\ntrue if the text field’s contents should be cleared; otherwise, false.\n\nDiscussion\n\nThe text field calls this method in response to the user pressing the built-in clear button. (This button is not shown by default but can be enabled by changing the value in the clearButtonMode property of the text field.) This method is also called when editing begins and the clearsOnBeginEditing property of the text field is set to true.\n\nIf you do not implement this method, the text field clears the text as if the method had returned true.\n\nSee Also\nEditing the text field’s text\nfunc textField(UITextField, shouldChangeCharactersIn: NSRange, replacementString: String) -> Bool\nAsks the delegate whether to change the specified text.\nfunc textFieldShouldReturn(UITextField) -> Bool\nAsks the delegate whether to process the pressing of the Return button for the text field."
  },
  {
    "title": "textField(_:editMenuForCharactersIn:suggestedActions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextfielddelegate/3975912-textfield",
    "html": "Parameters\ntextField\n\nThe text field requesting the menu.\n\nrange\n\nThe character range the menu is presenting for.\n\nsuggestedActions\n\nThe actions and commands the system suggests.\n\nReturn Value\n\nReturns a menu describing the desired menu hierarchy. Return nil to present the default system menu.\n\nDiscussion\n\nThe following example returns a menu that includes a “Show in Large Type” action.\n\nfunc textField(_ textField: UITextField, editMenuForCharactersIn range: NSRange, suggestedActions: [UIMenuElement]) -> UIMenu? {\n    let showLargeAction = UIAction(title: \"Show in Large Type\", image: UIImage(systemName: \"a.magnify\")) { action in\n            // Include \"Show in Large Type\" action.\n    }\n\n\n    var actions = suggestedActions\n    actions.append(showLargeAction)\n    return UIMenu(children: actions)\n}\n"
  },
  {
    "title": "textField(_:willPresentEditMenuWith:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextfielddelegate/4057379-textfield",
    "html": "Parameters\ntextField\n\nThe text field showing the menu.\n\nanimator\n\nThe appearance animator to add animations to, so that the animations will run alongside the appearance transition.\n\nSee Also\nCustomizing an edit menu\nfunc textField(UITextField, willDismissEditMenuWith: UIEditMenuInteractionAnimating)\nTells the delegate that the system is about to dismiss an edit menu with an animator."
  },
  {
    "title": "UIContentUnavailableConfiguration.TextProperties | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentunavailableconfiguration/textproperties",
    "html": "Topics\nInstance Properties\nvar adjustsFontSizeToFitWidth: Bool\nA Boolean value indicating whether the view modifies the font size of the text to fit the available width.\nvar allowsDefaultTighteningForTruncation: Bool\nA Boolean value that determines whether the view tightens text before truncating.\nvar color: UIColor\nThe color of the text.\nvar customMirror: Mirror\nA mirror that reflects the text properties.\nvar debugDescription: String\nA text representation of the text properties that’s suitable for output during debugging.\nvar description: String\nA textual representation of the text properties.\nvar font: UIFont\nThe font of the text.\nvar hashValue: Int\nThe hash value.\nvar lineBreakMode: NSLineBreakMode\nThe technique for wrapping and truncating the text.\nvar minimumScaleFactor: CGFloat\nThe minimum scale factor for the text.\nvar numberOfLines: Int\nThe maximum number of lines for the text.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nOperator Functions\nstatic func != (UIContentUnavailableConfiguration.TextProperties, UIContentUnavailableConfiguration.TextProperties) -> Bool\nAn operator for checking whether two text property configurations are unequal.\nstatic func == (UIContentUnavailableConfiguration.TextProperties, UIContentUnavailableConfiguration.TextProperties) -> Bool\nAn operator for checking whether two text property configurations are equal.\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomReflectable\nCustomStringConvertible\nHashable"
  },
  {
    "title": "debugDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentunavailableconfiguration/4176557-debugdescription",
    "html": "Relationships\nFrom Protocol\nCustomDebugStringConvertible"
  },
  {
    "title": "displayInline | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/options/3261455-displayinline",
    "html": "Discussion\n\nWhen the menu system displays an inline menu, it separates the menu from the surrounding menus by displaying line separators.\n\nSee Also\nOptions\nstatic var destructive: UIMenu.Options\nAn option indicating the menu’s appearance represents a destructive action.\nstatic var singleSelection: UIMenu.Options\nAn option indicating whether the menu and its submenus allow a single menu item that’s in the “on” state.\nstatic var displayAsPalette: UIMenu.Options\nAn option indicating the menu displays as a row of menu elements for choosing from a collection of items."
  },
  {
    "title": "destructive | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/options/3261454-destructive",
    "html": "Discussion\n\nApply this option when you need a menu for a destructive action. Use the menu’s title to communicate the action to perform, and use the menu’s child menu elements to ask for user confirmation of that action.\n\nSee Also\nOptions\nstatic var displayInline: UIMenu.Options\nAn option indicating the menu displays inline with its parent menu instead of displaying as a submenu.\nstatic var singleSelection: UIMenu.Options\nAn option indicating whether the menu and its submenus allow a single menu item that’s in the “on” state.\nstatic var displayAsPalette: UIMenu.Options\nAn option indicating the menu displays as a row of menu elements for choosing from a collection of items."
  },
  {
    "title": "singleSelection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/options/3750864-singleselection",
    "html": "See Also\nOptions\nstatic var displayInline: UIMenu.Options\nAn option indicating the menu displays inline with its parent menu instead of displaying as a submenu.\nstatic var destructive: UIMenu.Options\nAn option indicating the menu’s appearance represents a destructive action.\nstatic var displayAsPalette: UIMenu.Options\nAn option indicating the menu displays as a row of menu elements for choosing from a collection of items."
  },
  {
    "title": "selected | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/state/1618205-selected",
    "html": "Discussion\n\nFor many controls, this state has no effect on behavior or appearance. Some subclasses, like the UISegmentedControl class, use this state to change their appearance. You can retrieve and set this value through the isSelected property."
  },
  {
    "title": "addAnimations(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uieditmenuinteractionanimating/3975817-addanimations",
    "html": "Required\n\nParameters\nanimations\n\nA closure that performs animations.\n\nSee Also\nAdding Animations\nfunc addCompletion(() -> Void)\nAdds a closure to perform operations when the edit menu interaction presentation animations are complete.\n\nRequired"
  },
  {
    "title": "addCompletion(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontextmenuinteractionanimating/3375803-addcompletion",
    "html": "Required\n\nParameters\ncompletion\n\nThe completion block.\n\nSee Also\nAdding Custom Animations\nfunc addAnimations(() -> Void)\nAdds the specified animation block to the animator.\n\nRequired"
  },
  {
    "title": "addAnimations(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontextmenuinteractionanimating/3375802-addanimations",
    "html": "Required\n\nParameters\nanimations\n\nThe animation block.\n\nSee Also\nAdding Custom Animations\nfunc addCompletion(() -> Void)\nAdds the specified completion block to the animator.\n\nRequired"
  },
  {
    "title": "addCompletion(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uieditmenuinteractionanimating/3975818-addcompletion",
    "html": "Required\n\nParameters\ncompletion\n\nA closure that performs operations after the animations complete.\n\nSee Also\nAdding Animations\nfunc addAnimations(() -> Void)\nAdds a closure that performs animations to run alongside the edit menu interaction presentation.\n\nRequired"
  },
  {
    "title": "standardEdit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenu/identifier/3281955-standardedit",
    "html": "See Also\nEdit menus\nstatic let undoRedo: UIMenu.Identifier\nThe Undo/Redo menu.\nstatic let find: UIMenu.Identifier\nThe Find menu.\nstatic let replace: UIMenu.Identifier\nThe Replace menu.\nstatic let share: UIMenu.Identifier\nThe Share menu.\nstatic let textStyle: UIMenu.Identifier\nThe Text Style menu.\nstatic let spelling: UIMenu.Identifier\nThe Spelling menu.\nstatic let spellingPanel: UIMenu.Identifier\nThe Spelling Panel menu.\nstatic let spellingOptions: UIMenu.Identifier\nThe Spelling Options menu.\nstatic let substitutions: UIMenu.Identifier\nThe Substitutions menu.\nstatic let substitutionsPanel: UIMenu.Identifier\nThe Substitutions Panel menu.\nstatic let substitutionOptions: UIMenu.Identifier\nThe Substitutions Options menu.\nstatic let transformations: UIMenu.Identifier\nThe Transformations menu.\nstatic let speech: UIMenu.Identifier\nThe Speech menu.\nstatic let lookup: UIMenu.Identifier\nThe Lookup menu.\nstatic let learn: UIMenu.Identifier\nThe Learn menu.\nstatic let format: UIMenu.Identifier\nThe Format menu.\nstatic let font: UIMenu.Identifier\nThe Font menu.\nstatic let textSize: UIMenu.Identifier\nThe Text Size menu.\nstatic let textColor: UIMenu.Identifier\nThe Text Color menu.\nstatic let textStylePasteboard: UIMenu.Identifier\nThe Text Style Pasteboard menu.\nstatic let text: UIMenu.Identifier\nThe Text menu.\nstatic let autoFill: UIMenu.Identifier\nThe AutoFill menu.\nstatic let writingDirection: UIMenu.Identifier\nThe Writing Direction menu.\nstatic let alignment: UIMenu.Identifier\nThe Alignment menu."
  },
  {
    "title": "UITextField.DidEndEditingReason.cancelled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextfield/didendeditingreason/cancelled",
    "html": "Discussion\n\nOn tvOS, text field changes become cancelled when the user dismisses the text entry interface by pressing the Menu button."
  },
  {
    "title": "init(name:image:actionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilitycustomaction/3650220-init",
    "html": "See Also\nCreating a custom action\ninit(name: String, actionHandler: UIAccessibilityCustomAction.Handler)\nCreates a custom action object with the specified name and action handler.\ninit(name: String, target: Any?, selector: Selector)\nCreates a custom action object with the specified name, target, and selector.\ninit(name: String, image: UIImage?, target: Any?, selector: Selector)\nCreates a custom action object with the specified name, image, target, and selector.\ninit(attributedName: NSAttributedString, actionHandler: UIAccessibilityCustomAction.Handler)\nCreates a custom action object with the specified attributed name and action handler.\ninit(attributedName: NSAttributedString, target: Any?, selector: Selector)\nCreates a custom action object with the specified attributed name, target, and selector.\ninit(attributedName: NSAttributedString, image: UIImage?, actionHandler: UIAccessibilityCustomAction.Handler)\nCreates a custom action object with the specified attributed name, image, and action handler.\ninit(attributedName: NSAttributedString, image: UIImage?, target: Any?, selector: Selector)\nCreates a custom action object with the specified attributed name, image, target, and selector."
  },
  {
    "title": "textViewShouldBeginEditing(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextviewdelegate/1618608-textviewshouldbeginediting",
    "html": "Parameters\ntextView\n\nThe text view for which editing is about to begin.\n\nReturn Value\n\ntrue if an editing session should be initiated; otherwise, false to disallow editing.\n\nDiscussion\n\nWhen the user performs an action that would normally initiate an editing session, the text view calls this method first to see if editing should actually proceed. In most circumstances, you would simply return true from this method to allow editing to proceed.\n\nImplementation of this method by the delegate is optional. If it is not present, editing proceeds as if this method had returned true.\n\nSee Also\nResponding to editing notifications\nfunc textViewDidBeginEditing(UITextView)\nTells the delegate when editing of the specified text view begins.\nfunc textViewShouldEndEditing(UITextView) -> Bool\nAsks the delegate whether to stop editing in the specified text view.\nfunc textViewDidEndEditing(UITextView)\nTells the delegate when editing of the specified text view ends."
  },
  {
    "title": "textViewDidChangeSelection(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextviewdelegate/1618620-textviewdidchangeselection",
    "html": "Parameters\ntextView\n\nThe text view whose selection changed.\n\nDiscussion\n\nImplementation of this method is optional. You can use the selectedRange property of the text view to get the new selection."
  },
  {
    "title": "textView(_:willDismissEditMenuWith:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextviewdelegate/4057382-textview",
    "html": "See Also\nCustomizing an edit menu\nfunc textView(UITextView, willPresentEditMenuWith: UIEditMenuInteractionAnimating)"
  },
  {
    "title": "statusBarOrientation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/1623026-statusbarorientation",
    "html": "Deprecated\n\nUse the interfaceOrientation property of the window scene instead.\n\nDiscussion\n\nThe value of this property is a constant that indicates an orientation of the status bar. See UIInterfaceOrientation for details. Setting this property rotates the status bar to the specified orientation without animating the transition. If your app has rotatable window content, however, you shouldn’t arbitrarily set status-bar orientation using this method. The status-bar orientation set by this method doesn’t change if the device changes orientation. For more on rotatable window views, see View Controller Programming Guide for iOS.\n\nSee Also\nDeprecated properties\nvar applicationIconBadgeNumber: Int\nThe number currently set as the badge of the app icon on the Home screen.\nDeprecated\nclass let statusBarFrameUserInfoKey: String\nA key whose value is an NSValue object that encapsulates a CGRect structure expressing the location and size of the new status bar frame. This key is used with didChangeStatusBarFrameNotification and willChangeStatusBarFrameNotification notifications.\nDeprecated\nclass let statusBarOrientationUserInfoKey: String\nA key whose value is an NSNumber object that encapsulates a UIInterfaceOrientation value indicating the current orientation (see UIInterfaceOrientation). This key is used with didChangeStatusBarOrientationNotification and willChangeStatusBarOrientationNotification notifications.\nDeprecated\nvar currentUserNotificationSettings: UIUserNotificationSettings?\nReturns the user notification settings for the app.\nDeprecated\nvar isIgnoringInteractionEvents: Bool\nA Boolean value that indicates whether the receiver is ignoring events initiated by touches on the screen.\nDeprecated\nvar isNetworkActivityIndicatorVisible: Bool\nA Boolean value that turns an indicator of network activity on or off.\nDeprecated\nvar isStatusBarHidden: Bool\nA Boolean value that determines whether the status bar is hidden.\nDeprecated\nvar keyWindow: UIWindow?\nThe app's key window.\nDeprecated\nvar scheduledLocalNotifications: [UILocalNotification]?\nAll currently scheduled local notifications.\nDeprecated\nvar statusBarFrame: CGRect\nThe frame rectangle defining the area of the status bar.\nDeprecated\nvar statusBarOrientationAnimationDuration: TimeInterval\nThe animation duration in seconds for the status bar during a 90 degree orientation change.\nDeprecated\nvar statusBarStyle: UIStatusBarStyle\nThe current style of the status bar.\nDeprecated\nvar windows: [UIWindow]\nThe app’s visible and hidden windows.\nDeprecated\nRelated Documentation\nfunc setStatusBarOrientation(UIInterfaceOrientation, animated: Bool)\nSets the app's status bar to the specified orientation, optionally animating the transition."
  },
  {
    "title": "topLeft | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipointeraccessory/position/3752771-topleft",
    "html": "See Also\nGetting an accessory position\nstatic var top: UIPointerAccessory.Position\nAn accessory position at the top of the primary pointer.\nstatic var topRight: UIPointerAccessory.Position\nAn accessory position at the top-right of the primary pointer.\nstatic var right: UIPointerAccessory.Position\nAn accessory position at the right of the primary pointer.\nstatic var bottomRight: UIPointerAccessory.Position\nAn accessory position at the bottom-right of the primary pointer.\nstatic var bottom: UIPointerAccessory.Position\nAn accessory position at the bottom of the primary pointer.\nstatic var bottomLeft: UIPointerAccessory.Position\nAn accessory position at the bottom-left of the primary pointer.\nstatic var left: UIPointerAccessory.Position\nAn accessory position at the left of the primary pointer."
  },
  {
    "title": "hovered | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/3750771-hovered",
    "html": "Discussion\n\nIf you enable pointer interaction by setting pointerInteractionEnabled, this property indicates the button has an active pointer effect.\n\nSee Also\nSupporting pointer interactions\npointerInteractionEnabled\nA Boolean that enables pointer interaction.\npointerStyleProvider\nA block that returns the pointer style to use when the pointer hovers over the button.\nUIButtonPointerStyleProvider\nA type alias defining a block that returns a pointer style to apply to a button.\nRelated Documentation\nPointer interactions\nSupport pointer interactions in your custom controls and views."
  },
  {
    "title": "textDropInteraction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextdroppable/2890862-textdropinteraction",
    "html": "Required"
  },
  {
    "title": "textDropDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextdroppable/2890860-textdropdelegate",
    "html": "Required"
  },
  {
    "title": "UIContentUnavailableConfiguration.ButtonProperties | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentunavailableconfiguration/buttonproperties",
    "html": "Topics\nInstance Properties\nvar customMirror: Mirror\nA mirror that reflects the button properties.\nvar debugDescription: String\nA text representation of the button properties that’s suitable for output during debugging.\nvar description: String\nA textual representation of the button properties.\nvar hashValue: Int\nThe hash value.\nvar isEnabled: Bool\nA Boolean value that enables and disables the button.\nvar menu: UIMenu?\nA menu that the button displays.\nvar primaryAction: UIAction?\nThe action to perform for the primary action control event.\nvar role: UIButton.Role\nThe role of the button.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nOperator Functions\nstatic func != (UIContentUnavailableConfiguration.ButtonProperties, UIContentUnavailableConfiguration.ButtonProperties) -> Bool\nAn operator for checking whether two button property configurations are unequal.\nstatic func == (UIContentUnavailableConfiguration.ButtonProperties, UIContentUnavailableConfiguration.ButtonProperties) -> Bool\nAn operator for checking whether two button property configurations are equal.\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomReflectable\nCustomStringConvertible\nHashable"
  },
  {
    "title": "init(wrappedValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontroller/viewloading/4107503-init",
    "html": "Parameters\nwrappedValue\n\nThe underlying value tied to the loading of the view.\n\nSee Also\nCreating a ViewLoading property wrapper\ninit()\nCreates an empty property wrapper that loads the view controller’s view before accessing the property."
  },
  {
    "title": "accessibilityFrame | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilityelement/1619579-accessibilityframe",
    "html": "Discussion\n\nWhen you create an accessibility element to represent an element in your application, you must set this property to the CGRect structure that specifies the object’s screen location and size. (Objects that inherit from UIView include this information by default.)\n\nAssigning a new value to this property changes the value of the accessibilityFrameInContainerSpace property to CGRectNull.\n\nSee Also\nAccessing the attributes of an accessibility element\nvar accessibilityLabel: String?\nA string that succinctly identifies the accessibility element.\nvar accessibilityHint: String?\nA string that briefly describes the result of performing an action on the accessibility element.\nvar accessibilityValue: String?\nA string that represents the current value of the accessibility element.\nvar accessibilityFrameInContainerSpace: CGRect\nThe frame of the accessibility element, in the coordinate space of its container view.\nvar accessibilityTraits: UIAccessibilityTraits\nThe combination of traits that best characterize the accessibility element.\nRelated Documentation\nstatic func convertToScreenCoordinates(CGRect, in: UIView) -> CGRect\nConverts the specified rectangle from view coordinates to screen coordinates."
  },
  {
    "title": "UIContentUnavailableConfiguration.Alignment | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentunavailableconfiguration/alignment",
    "html": "Topics\nEnumeration Cases\ncase center\nViews with centered alignment.\ncase natural\nThe default alignment for the current locale.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nOperator Functions\nstatic func != (UIContentUnavailableConfiguration.Alignment, UIContentUnavailableConfiguration.Alignment) -> Bool\nAn operator for checking whether two alignments are unequal.\nstatic func == (UIContentUnavailableConfiguration.Alignment, UIContentUnavailableConfiguration.Alignment) -> Bool\nAn operator for checking whether two alignments are equal.\nRelationships\nConforms To\nHashable"
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontroller/viewloading/4107502-init",
    "html": "See Also\nCreating a ViewLoading property wrapper\ninit(wrappedValue: Value)\nCreates a property wrapper that loads the view controller’s view before accessing the property."
  },
  {
    "title": "init(name:target:selector:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilitycustomaction/1620499-init",
    "html": "Parameters\nname\n\nThe localized name of the action. Provide a short and descriptive name for the action.\n\ntarget\n\nThe object that performs the action.\n\nselector\n\nThe selector of target to call when you want to perform the action. The method signature must take one of the following forms:\n\n- (BOOL)myPerformActionMethod\n- (BOOL)myPerformActionMethod:(UIAccessibilityCustomAction *)action\n\nReturn Value\n\nAn initialized custom action object.\n\nSee Also\nCreating a custom action\ninit(name: String, actionHandler: UIAccessibilityCustomAction.Handler)\nCreates a custom action object with the specified name and action handler.\ninit(name: String, image: UIImage?, actionHandler: UIAccessibilityCustomAction.Handler)\nCreates a custom action object with the specified name, image, and action handler.\ninit(name: String, image: UIImage?, target: Any?, selector: Selector)\nCreates a custom action object with the specified name, image, target, and selector.\ninit(attributedName: NSAttributedString, actionHandler: UIAccessibilityCustomAction.Handler)\nCreates a custom action object with the specified attributed name and action handler.\ninit(attributedName: NSAttributedString, target: Any?, selector: Selector)\nCreates a custom action object with the specified attributed name, target, and selector.\ninit(attributedName: NSAttributedString, image: UIImage?, actionHandler: UIAccessibilityCustomAction.Handler)\nCreates a custom action object with the specified attributed name, image, and action handler.\ninit(attributedName: NSAttributedString, image: UIImage?, target: Any?, selector: Selector)\nCreates a custom action object with the specified attributed name, image, target, and selector."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentunavailableconfiguration/4176562-hashvalue",
    "html": "Relationships\nFrom Protocol\nHashable"
  },
  {
    "title": "init(name:image:target:selector:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilitycustomaction/3650221-init",
    "html": "See Also\nCreating a custom action\ninit(name: String, actionHandler: UIAccessibilityCustomAction.Handler)\nCreates a custom action object with the specified name and action handler.\ninit(name: String, target: Any?, selector: Selector)\nCreates a custom action object with the specified name, target, and selector.\ninit(name: String, image: UIImage?, actionHandler: UIAccessibilityCustomAction.Handler)\nCreates a custom action object with the specified name, image, and action handler.\ninit(attributedName: NSAttributedString, actionHandler: UIAccessibilityCustomAction.Handler)\nCreates a custom action object with the specified attributed name and action handler.\ninit(attributedName: NSAttributedString, target: Any?, selector: Selector)\nCreates a custom action object with the specified attributed name, target, and selector.\ninit(attributedName: NSAttributedString, image: UIImage?, actionHandler: UIAccessibilityCustomAction.Handler)\nCreates a custom action object with the specified attributed name, image, and action handler.\ninit(attributedName: NSAttributedString, image: UIImage?, target: Any?, selector: Selector)\nCreates a custom action object with the specified attributed name, image, target, and selector."
  },
  {
    "title": "init(attributedName:actionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilitycustomaction/3043556-init",
    "html": "See Also\nCreating a custom action\ninit(name: String, actionHandler: UIAccessibilityCustomAction.Handler)\nCreates a custom action object with the specified name and action handler.\ninit(name: String, target: Any?, selector: Selector)\nCreates a custom action object with the specified name, target, and selector.\ninit(name: String, image: UIImage?, actionHandler: UIAccessibilityCustomAction.Handler)\nCreates a custom action object with the specified name, image, and action handler.\ninit(name: String, image: UIImage?, target: Any?, selector: Selector)\nCreates a custom action object with the specified name, image, target, and selector.\ninit(attributedName: NSAttributedString, target: Any?, selector: Selector)\nCreates a custom action object with the specified attributed name, target, and selector.\ninit(attributedName: NSAttributedString, image: UIImage?, actionHandler: UIAccessibilityCustomAction.Handler)\nCreates a custom action object with the specified attributed name, image, and action handler.\ninit(attributedName: NSAttributedString, image: UIImage?, target: Any?, selector: Selector)\nCreates a custom action object with the specified attributed name, image, target, and selector."
  },
  {
    "title": "init(attributedName:target:selector:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilitycustomaction/2865951-init",
    "html": "Parameters\nattributedName\n\nThe localized name of the action. Provide a short and descriptive name for the action.\n\ntarget\n\nThe object that performs the action.\n\nselector\n\nThe selector of target to call when you want to perform the action. The method signature must take one of the following forms:\n\n- (BOOL)myPerformActionMethod\n- (BOOL)myPerformActionMethod:(UIAccessibilityCustomAction *)action\n\nReturn Value\n\nAn initialized custom action object.\n\nSee Also\nCreating a custom action\ninit(name: String, actionHandler: UIAccessibilityCustomAction.Handler)\nCreates a custom action object with the specified name and action handler.\ninit(name: String, target: Any?, selector: Selector)\nCreates a custom action object with the specified name, target, and selector.\ninit(name: String, image: UIImage?, actionHandler: UIAccessibilityCustomAction.Handler)\nCreates a custom action object with the specified name, image, and action handler.\ninit(name: String, image: UIImage?, target: Any?, selector: Selector)\nCreates a custom action object with the specified name, image, target, and selector.\ninit(attributedName: NSAttributedString, actionHandler: UIAccessibilityCustomAction.Handler)\nCreates a custom action object with the specified attributed name and action handler.\ninit(attributedName: NSAttributedString, image: UIImage?, actionHandler: UIAccessibilityCustomAction.Handler)\nCreates a custom action object with the specified attributed name, image, and action handler.\ninit(attributedName: NSAttributedString, image: UIImage?, target: Any?, selector: Selector)\nCreates a custom action object with the specified attributed name, image, target, and selector."
  },
  {
    "title": "init(attributedName:image:actionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilitycustomaction/3650218-init",
    "html": "See Also\nCreating a custom action\ninit(name: String, actionHandler: UIAccessibilityCustomAction.Handler)\nCreates a custom action object with the specified name and action handler.\ninit(name: String, target: Any?, selector: Selector)\nCreates a custom action object with the specified name, target, and selector.\ninit(name: String, image: UIImage?, actionHandler: UIAccessibilityCustomAction.Handler)\nCreates a custom action object with the specified name, image, and action handler.\ninit(name: String, image: UIImage?, target: Any?, selector: Selector)\nCreates a custom action object with the specified name, image, target, and selector.\ninit(attributedName: NSAttributedString, actionHandler: UIAccessibilityCustomAction.Handler)\nCreates a custom action object with the specified attributed name and action handler.\ninit(attributedName: NSAttributedString, target: Any?, selector: Selector)\nCreates a custom action object with the specified attributed name, target, and selector.\ninit(attributedName: NSAttributedString, image: UIImage?, target: Any?, selector: Selector)\nCreates a custom action object with the specified attributed name, image, target, and selector."
  },
  {
    "title": "textView(_:shouldInteractWith:in:interaction:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextviewdelegate/1649337-textview",
    "html": "Parameters\ntextView\n\nThe text view containing the text attachment.\n\nURL\n\nThe URL to be processed.\n\ncharacterRange\n\nThe character range containing the URL.\n\ninteraction\n\nThe type of interaction that is occurring (for possible values, see UITextItemInteraction).\n\nReturn Value\n\ntrue if interaction with the URL should be allowed; false if interaction should not be allowed.\n\nDiscussion\n\nThis method is called on only the first interaction with the URL link. For example, this method is called when the user wants their first interaction with a URL to display a list of actions they can take; if the user chooses an open action from the list, this method is not called, because “open” represents the second interaction with the same URL.\n\nImportant\n\nLinks in text views are interactive only if the text view is selectable but noneditable. That is, if the value of the UITextView isSelectable property is true and the isEditable property is false.\n\nSee Also\nInteracting with text data\nfunc textView(UITextView, shouldInteractWith: NSTextAttachment, in: NSRange, interaction: UITextItemInteraction) -> Bool\nAsks the delegate whether the specified text view allows the specified type of user interaction with the provided text attachment in the specified range of text.\nDeprecated\nfunc textView(UITextView, shouldInteractWith: NSTextAttachment, in: NSRange) -> Bool\nAsks the delegate whether the specified text view allows user interaction with the provided text attachment in the specified range of text.\nDeprecated\nfunc textView(UITextView, shouldInteractWith: URL, in: NSRange) -> Bool\nAsks the delegate whether the specified text view allows user interaction with the specified URL in the specified range of text.\nDeprecated"
  },
  {
    "title": "textView(_:willPresentEditMenuWith:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextviewdelegate/4057383-textview",
    "html": "See Also\nCustomizing an edit menu\nfunc textView(UITextView, willDismissEditMenuWith: UIEditMenuInteractionAnimating)"
  },
  {
    "title": "textView(_:shouldInteractWith:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextviewdelegate/1618606-textview",
    "html": "Deprecated\n\nUse textView(_:shouldInteractWith:in:interaction:) instead.\n\nParameters\ntextView\n\nThe text view containing the text attachment.\n\nURL\n\nThe URL to be processed.\n\ncharacterRange\n\nThe character range containing the URL.\n\nReturn Value\n\ntrue if interaction with the URL should be allowed; false if interaction should not be allowed.\n\nDiscussion\n\nThe text view calls this method if the user taps or long-presses the URL link. Implementation of this method is optional. By default, the text view opens the application responsible for handling the URL type and passes it the URL. You can use this method to trigger an alternative action, such as displaying the web content at the URL in a web view within the current application.\n\nImportant\n\nLinks in text views are interactive only if the text view is selectable but noneditable. That is, if the value of the UITextView isSelectable property is true and the isEditable property is false.\n\nSee Also\nInteracting with text data\nfunc textView(UITextView, shouldInteractWith: NSTextAttachment, in: NSRange, interaction: UITextItemInteraction) -> Bool\nAsks the delegate whether the specified text view allows the specified type of user interaction with the provided text attachment in the specified range of text.\nDeprecated\nfunc textView(UITextView, shouldInteractWith: URL, in: NSRange, interaction: UITextItemInteraction) -> Bool\nAsks the delegate whether the specified text view allows the specified type of user interaction with the specified URL in the specified range of text.\nDeprecated\nfunc textView(UITextView, shouldInteractWith: NSTextAttachment, in: NSRange) -> Bool\nAsks the delegate whether the specified text view allows user interaction with the provided text attachment in the specified range of text.\nDeprecated"
  },
  {
    "title": "textView(_:shouldInteractWith:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextviewdelegate/1618621-textview",
    "html": "Deprecated\n\nUse textView(_:shouldInteractWith:in:interaction:) instead.\n\nParameters\ntextView\n\nThe text view containing the text attachment.\n\ntextAttachment\n\nThe text attachment.\n\ncharacterRange\n\nThe character range containing the text attachment.\n\nReturn Value\n\ntrue if interaction with the text attachment should be allowed; false if interaction should not be allowed.\n\nDiscussion\n\nA text view calls this method if the user taps or long-presses the text attachment and its image property is not nil. Implementation of this method is optional. You can use this method to trigger an action in addition to displaying the text attachment inline with the text.\n\nSee Also\nInteracting with text data\nfunc textView(UITextView, shouldInteractWith: NSTextAttachment, in: NSRange, interaction: UITextItemInteraction) -> Bool\nAsks the delegate whether the specified text view allows the specified type of user interaction with the provided text attachment in the specified range of text.\nDeprecated\nfunc textView(UITextView, shouldInteractWith: URL, in: NSRange, interaction: UITextItemInteraction) -> Bool\nAsks the delegate whether the specified text view allows the specified type of user interaction with the specified URL in the specified range of text.\nDeprecated\nfunc textView(UITextView, shouldInteractWith: URL, in: NSRange) -> Bool\nAsks the delegate whether the specified text view allows user interaction with the specified URL in the specified range of text.\nDeprecated"
  },
  {
    "title": "UITextItemInteraction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextiteminteraction",
    "html": "Topics\nConstants\ncase invokeDefaultAction\nThe user wants to perform the default action on the text item; for example, opening a URL.\ncase presentActions\nThe user wants to be presented with a list of actions that can be taken on the text item, such as opening the link in a different way or downloading content from the link.\ncase preview\nThe user wants to get a preview of the content represented by the text item, such as by initiating a peek and pop on a link.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "prefersScaledContent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipointerhovereffect/3539016-prefersscaledcontent",
    "html": "Discussion\n\nThe default value of this property is YES.\n\nSee Also\nCustomizing the effect\nprefersShadow\nA Boolean value that determines whether to add a shadow."
  },
  {
    "title": "UIBandSelectionInteractionStateBegan | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibandselectioninteractionstate/uibandselectioninteractionstatebegan",
    "html": "Discussion\n\nThe interaction object enters this state once at the beginning of each interaction, and subsequently transitions to the UIBandSelectionInteractionStateSelecting or UIBandSelectionInteractionStateEnded state. When in this state, perform any one-time tasks that you need to manage your app’s state. For example, you might prepare your view to start the selection of items.\n\nSee Also\nGetting the selection state\nUIBandSelectionInteractionStatePossible\nA state that indicates the interaction object is ready to start a new interaction.\nUIBandSelectionInteractionStateSelecting\nA state that indicates the interaction object is tracking changes to the selection rectangle.\nUIBandSelectionInteractionStateEnded\nA state that indicates the current interaction ended."
  },
  {
    "title": "hearingDevicePairedEar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibility/1648477-hearingdevicepairedear",
    "html": "See Also\nSystem notifications\nstatic let announcementDidFinishNotification: NSNotification.Name\nA notification that UIKit posts when the system finishes reading an announcement.\nstatic let assistiveTouchStatusDidChangeNotification: NSNotification.Name\nA notification that indicates a change in the status of AssistiveTouch.\nstatic let boldTextStatusDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when the system’s Bold Text setting changes.\nstatic let buttonShapesEnabledStatusDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when the system’s Button Shapes setting changes.\nstatic let closedCaptioningStatusDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when the setting for Closed Captions + SDH changes.\nstatic let darkerSystemColorsStatusDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when the system’s Increase Contrast setting changes.\nstatic let differentiateWithoutColorDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when the system’s Differentiate Without Color setting changes.\nstatic let onOffSwitchLabelsDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when the system’s On/Off Labels setting changes.\nstatic let videoAutoplayStatusDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when the system’s Auto-Play Video Previews setting changes.\nstatic let elementFocusedNotification: NSNotification.Name\nA notification that UIKit posts when an assistive app focuses on an accessibility element.\nstatic let grayscaleStatusDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when the system’s Grayscale setting changes.\nstatic let guidedAccessStatusDidChangeNotification: NSNotification.Name\nA notification that indicates when a Guided Access session starts or ends.\nstatic let hearingDevicePairedEarDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when there is a change to the currently paired hearing devices.\nstatic let invertColorsStatusDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when the settings for inverted colors change.\nstatic let monoAudioStatusDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when system audio changes from stereo to mono.\nstatic let prefersCrossFadeTransitionsStatusDidChange: NSNotification.Name\nA notification that UIKit posts when the system’s Prefer Cross-Fade Transitions setting changes.\nstatic let reduceMotionStatusDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when the system’s Reduce Motion setting changes.\nstatic let reduceTransparencyStatusDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when the system’s Reduce Transparency setting changes.\nstatic let shakeToUndoDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when the system's Shake to Undo setting changes.\nstatic let speakScreenStatusDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when the system’s Speak Screen setting changes.\nstatic let speakSelectionStatusDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when the system’s Speak Selection setting changes.\nstatic let switchControlStatusDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when the system’s Switch Control setting changes.\nstatic let voiceOverStatusDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when VoiceOver starts or stops."
  },
  {
    "title": "zoomFocusChanged(zoomType:toFrame:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibility/1624921-zoomfocuschanged",
    "html": "Parameters\ntype\n\nA UIKit Functions constant that identifies the type of Zoom.\n\nframe\n\nThe frame that’s currently zoomed, in screen coordinates.\n\nview\n\nThe view that contains the zoomed frame.\n\nSee Also\nConvenience functions\nstatic func focusedElement(using: UIAccessibility.AssistiveTechnologyIdentifier?) -> Any?\nReturns the accessibility element that’s currently in focus by the specified assistive app.\nstatic func registerGestureConflictWithZoom()\nWarns users that app-specific gestures conflict with the system-defined Zoom accessibility gestures."
  },
  {
    "title": "invalidateFoundRange(_:document:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextsearchaggregator/4013187-invalidatefoundrange",
    "html": "Parameters\nrange\n\nThe text range to remove from the set of matches.\n\ndocument\n\nA string that uniquely identifies the document containing the text range. Nil when searching a single document.\n\nDiscussion\n\nCall this method to invalidate a text range when removing or changing text in the document. This causes the system find panel to update it’s current state, and if the range is the highlighted range, the find panel advances to the next found result.\n\nSee Also\nTracking search results\nfunc foundRange(UITextRange, searchString: String, document: DocumentIdentifier)\nAdds a text range to the set of matches.\nfunc invalidate()\nInvalidates all currently shown ranges.\nfunc finishedSearching()\nFinishes the search for text ranges.\nvar allFoundRanges: [UITextRange]\nAn ordered set of all the text ranges that match the search."
  },
  {
    "title": "finishedSearching() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextsearchaggregator/4013185-finishedsearching",
    "html": "Discussion\n\nCall this method after searching all documents.\n\nSee Also\nTracking search results\nfunc foundRange(UITextRange, searchString: String, document: DocumentIdentifier)\nAdds a text range to the set of matches.\nfunc invalidateFoundRange(UITextRange, document: DocumentIdentifier)\nRemoves a text range from the set of matches.\nfunc invalidate()\nInvalidates all currently shown ranges.\nvar allFoundRanges: [UITextRange]\nAn ordered set of all the text ranges that match the search."
  },
  {
    "title": "isTextDragActive | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextdraggable/2890913-istextdragactive",
    "html": "Required"
  },
  {
    "title": "foundRange(_:searchString:document:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextsearchaggregator/4013186-foundrange",
    "html": "Parameters\nrange\n\nThe text range to add to the set of matches.\n\nsearchString\n\nThe query string the search used to locate this range of text.\n\ndocument\n\nA string that uniquely identifies the document containing the text range. Nil when searching a single document.\n\nDiscussion\n\nCall this method to add a text range found in your document to the set of matches.\n\nSee Also\nTracking search results\nfunc invalidateFoundRange(UITextRange, document: DocumentIdentifier)\nRemoves a text range from the set of matches.\nfunc invalidate()\nInvalidates all currently shown ranges.\nfunc finishedSearching()\nFinishes the search for text ranges.\nvar allFoundRanges: [UITextRange]\nAn ordered set of all the text ranges that match the search."
  },
  {
    "title": "textDragDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextdraggable/2890903-textdragdelegate",
    "html": "Required"
  },
  {
    "title": "invalidate() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextsearchaggregator/4077703-invalidate",
    "html": "Discussion\n\nCalling this method causes the system find panel to update its current state, and might trigger a new search using performTextSearch(queryString:options:resultAggregator:) immediately after.\n\nSee Also\nTracking search results\nfunc foundRange(UITextRange, searchString: String, document: DocumentIdentifier)\nAdds a text range to the set of matches.\nfunc invalidateFoundRange(UITextRange, document: DocumentIdentifier)\nRemoves a text range from the set of matches.\nfunc finishedSearching()\nFinishes the search for text ranges.\nvar allFoundRanges: [UITextRange]\nAn ordered set of all the text ranges that match the search."
  },
  {
    "title": "pointerInteractionEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/3538957-pointerinteractionenabled",
    "html": "Discussion\n\nThe default value of this property is NO.\n\nSee Also\nSupporting pointer interactions\nhovered\nA Boolean value that indicates whether a pointer effect is active.\npointerStyleProvider\nA block that returns the pointer style to use when the pointer hovers over the button.\nUIButtonPointerStyleProvider\nA type alias defining a block that returns a pointer style to apply to a button."
  },
  {
    "title": "bottomLeft | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipointeraccessory/position/3752763-bottomleft",
    "html": "See Also\nGetting an accessory position\nstatic var top: UIPointerAccessory.Position\nAn accessory position at the top of the primary pointer.\nstatic var topRight: UIPointerAccessory.Position\nAn accessory position at the top-right of the primary pointer.\nstatic var right: UIPointerAccessory.Position\nAn accessory position at the right of the primary pointer.\nstatic var bottomRight: UIPointerAccessory.Position\nAn accessory position at the bottom-right of the primary pointer.\nstatic var bottom: UIPointerAccessory.Position\nAn accessory position at the bottom of the primary pointer.\nstatic var left: UIPointerAccessory.Position\nAn accessory position at the left of the primary pointer.\nstatic var topLeft: UIPointerAccessory.Position\nAn accessory position at the top-left of the primary pointer."
  },
  {
    "title": "init(offset:angle:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipointeraccessory/position/3752766-init",
    "html": "See Also\nCreating a custom accessory position\nvar angle: CGFloat\nThe angle of the accessory’s position, measured in radians clockwise from the top of the primary pointer.\nvar offset: CGFloat\nThe offset of the accessory from the primary pointer.\nstatic let defaultOffset: CGFloat\nA constant that specifies the default offset of an accessory from the primary pointer shape."
  },
  {
    "title": "accessibilityLineNumber(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilityreadingcontent/1615107-accessibilitylinenumber",
    "html": "Required\n\nParameters\npoint\n\nA point within the bounds of the receiver’s view space, in screen coordinates. That is, a point for which [self pointInside:point withEvent:event] == YES.\n\nReturn Value\n\nThe line number that contains the specified point or NSNotFound if the point indicates an empty area within the receiver’s rectangle. By default, this method returns NSNotFound.\n\nDiscussion\n\nThis method is called only when point is within the bounds of the view or element.\n\nSee Also\nAccessing the content on a page\nfunc accessibilityAttributedContent(forLineNumber: Int) -> NSAttributedString?\nReturns the styled text associated with the specified line number.\nfunc accessibilityContent(forLineNumber: Int) -> String?\nReturns the text associated with the specified line number.\n\nRequired\n\nfunc accessibilityFrame(forLineNumber: Int) -> CGRect\nReturns the onscreen frame associated with the specified line number.\n\nRequired\n\nfunc accessibilityAttributedPageContent() -> NSAttributedString?\nReturns the styled text displayed on the current page.\nfunc accessibilityPageContent() -> String?\nReturns the text displayed on the current page.\n\nRequired\n\nRelated Documentation\nstatic func convertToScreenCoordinates(CGRect, in: UIView) -> CGRect\nConverts the specified rectangle from view coordinates to screen coordinates."
  },
  {
    "title": "accessibilityFrameInContainerSpace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilityelement/1649543-accessibilityframeincontainerspa",
    "html": "Discussion\n\nThe default value of this property is CGRectNull. Use this property to set the frame rectangle of an element whose frame rectangle could be affected by its container view. For example, use this property to set the frame rectangle for an element in a scroll view's content view. Changing the value of this property automatically adjusts the rectangle in the accessibilityFrame property.\n\nSee Also\nAccessing the attributes of an accessibility element\nvar accessibilityLabel: String?\nA string that succinctly identifies the accessibility element.\nvar accessibilityHint: String?\nA string that briefly describes the result of performing an action on the accessibility element.\nvar accessibilityValue: String?\nA string that represents the current value of the accessibility element.\nvar accessibilityFrame: CGRect\nThe frame of the accessibility element, in screen coordinates.\nvar accessibilityTraits: UIAccessibilityTraits\nThe combination of traits that best characterize the accessibility element."
  },
  {
    "title": "accessibilityValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilityelement/1619583-accessibilityvalue",
    "html": "Discussion\n\nThe value is a localized string that contains the current value of an element. For example, the value of a slider might be 9.5 or 35% and the value of a text field is the text it contains.\n\nUse the value property only when an accessibility element can have a value that is not represented by its label. For example, a volume slider’s label might be “Volume,” but its value is the current volume level. In this case, it’s not enough for users to know the identity of the slider, because they also need to know its current value. The label of a Save button, on the other hand, tells users everything they need to know about the control; supplying the word “Save” as a value would be unnecessary and confusing.\n\nSee Also\nAccessing the attributes of an accessibility element\nvar accessibilityLabel: String?\nA string that succinctly identifies the accessibility element.\nvar accessibilityHint: String?\nA string that briefly describes the result of performing an action on the accessibility element.\nvar accessibilityFrame: CGRect\nThe frame of the accessibility element, in screen coordinates.\nvar accessibilityFrameInContainerSpace: CGRect\nThe frame of the accessibility element, in the coordinate space of its container view.\nvar accessibilityTraits: UIAccessibilityTraits\nThe combination of traits that best characterize the accessibility element."
  },
  {
    "title": "UIContentUnavailableConfiguration.ImageProperties | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentunavailableconfiguration/imageproperties",
    "html": "Topics\nInstance Properties\nvar accessibilityIgnoresInvertColors: Bool\nA Boolean value that determines whether the image inverts its colors with the Invert Colors accessibility feature enabled.\nvar cornerRadius: CGFloat\nThe preferred corner radius for the image.\nvar customMirror: Mirror\nA mirror that reflects the image properties.\nvar debugDescription: String\nA text representation of the image properties that’s suitable for output during debugging.\nvar description: String\nA textual representation of the image properties.\nvar hashValue: Int\nThe hash value.\nvar maximumSize: CGSize\nA maximum size for the image.\nvar preferredSymbolConfiguration: UIImage.SymbolConfiguration?\nThe symbol configuration for the image.\nvar tintColor: UIColor?\nThe tint color applied to the image view.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nOperator Functions\nstatic func != (UIContentUnavailableConfiguration.ImageProperties, UIContentUnavailableConfiguration.ImageProperties) -> Bool\nAn operator for checking whether two image property configurations are unequal.\nstatic func == (UIContentUnavailableConfiguration.ImageProperties, UIContentUnavailableConfiguration.ImageProperties) -> Bool\nAn operator for checking whether two image property configurations are equal.\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomReflectable\nCustomStringConvertible\nHashable"
  },
  {
    "title": "customMirror | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentunavailableconfiguration/4176556-custommirror",
    "html": "Relationships\nFrom Protocol\nCustomReflectable"
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentunavailableconfiguration/4176558-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "held | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/3750770-held",
    "html": "Discussion\n\nThe property is YES if the button is presenting a menu in response to a long press. Buttons that set showsMenuAsPrimaryAction to present a menu don’t set this property.\n\nSee Also\nSupporting menu and toggle buttons\nmenu\nA menu that the button displays.\nchangesSelectionAsPrimaryAction\nA Boolean value that indicates whether the button tracks a selection, either through a menu or a toggle.\npreferredMenuElementOrder\nThe preferred menu-element ordering strategy for the menu."
  },
  {
    "title": "textViewDidChange(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextviewdelegate/1618599-textviewdidchange",
    "html": "Parameters\ntextView\n\nThe text view containing the changes.\n\nDiscussion\n\nThe text view calls this method in response to user-initiated changes to the text. This method is not called in response to programmatically initiated changes.\n\nImplementation of this method is optional.\n\nSee Also\nResponding to text changes\nfunc textView(UITextView, shouldChangeTextIn: NSRange, replacementText: String) -> Bool\nAsks the delegate whether to replace the specified text in the text view."
  },
  {
    "title": "init(name:actionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilitycustomaction/3043557-init",
    "html": "See Also\nCreating a custom action\ninit(name: String, target: Any?, selector: Selector)\nCreates a custom action object with the specified name, target, and selector.\ninit(name: String, image: UIImage?, actionHandler: UIAccessibilityCustomAction.Handler)\nCreates a custom action object with the specified name, image, and action handler.\ninit(name: String, image: UIImage?, target: Any?, selector: Selector)\nCreates a custom action object with the specified name, image, target, and selector.\ninit(attributedName: NSAttributedString, actionHandler: UIAccessibilityCustomAction.Handler)\nCreates a custom action object with the specified attributed name and action handler.\ninit(attributedName: NSAttributedString, target: Any?, selector: Selector)\nCreates a custom action object with the specified attributed name, target, and selector.\ninit(attributedName: NSAttributedString, image: UIImage?, actionHandler: UIAccessibilityCustomAction.Handler)\nCreates a custom action object with the specified attributed name, image, and action handler.\ninit(attributedName: NSAttributedString, image: UIImage?, target: Any?, selector: Selector)\nCreates a custom action object with the specified attributed name, image, target, and selector."
  },
  {
    "title": "textViewDidBeginEditing(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextviewdelegate/1618610-textviewdidbeginediting",
    "html": "Parameters\ntextView\n\nThe text view in which editing began.\n\nDiscussion\n\nImplementation of this method is optional. A text view sends this message to its delegate immediately after the user initiates editing in a text view and before any changes are actually made. You can use this method to set up any editing-related data structures and generally prepare your delegate to receive future editing messages.\n\nSee Also\nResponding to editing notifications\nfunc textViewShouldBeginEditing(UITextView) -> Bool\nAsks the delegate whether to begin editing in the specified text view.\nfunc textViewShouldEndEditing(UITextView) -> Bool\nAsks the delegate whether to stop editing in the specified text view.\nfunc textViewDidEndEditing(UITextView)\nTells the delegate when editing of the specified text view ends."
  },
  {
    "title": "textViewDidEndEditing(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextviewdelegate/1618628-textviewdidendediting",
    "html": "Parameters\ntextView\n\nThe text view in which editing ended.\n\nDiscussion\n\nImplementation of this method is optional. A text view sends this message to its delegate after it closes out any pending edits and resigns its first responder status. You can use this method to tear down any data structures or change any state information that you set when editing began.\n\nSee Also\nResponding to editing notifications\nfunc textViewShouldBeginEditing(UITextView) -> Bool\nAsks the delegate whether to begin editing in the specified text view.\nfunc textViewDidBeginEditing(UITextView)\nTells the delegate when editing of the specified text view begins.\nfunc textViewShouldEndEditing(UITextView) -> Bool\nAsks the delegate whether to stop editing in the specified text view."
  },
  {
    "title": "textViewShouldEndEditing(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextviewdelegate/1618603-textviewshouldendediting",
    "html": "Parameters\ntextView\n\nThe text view for which editing is about to end.\n\nReturn Value\n\ntrue if editing should stop; otherwise, false if the editing session should continue\n\nDiscussion\n\nThis method is called when the text view is asked to resign the first responder status. This might occur when the user tries to change the editing focus to another control. Before the focus actually changes, however, the text view calls this method to give your delegate a chance to decide whether it should.\n\nNormally, you would return true from this method to allow the text view to resign the first responder status. You might return false, however, in cases where your delegate wants to validate the contents of the text view. By returning false, you could prevent the user from switching to another control until the text view contained a valid value.\n\nBe aware that this method provides only a recommendation about whether editing should end. Even if you return false from this method, it is possible that editing might still end. For example, this might happen when the text view is forced to resign the first responder status by being removed from its parent view or window.\n\nImplementation of this method by the delegate is optional. If it is not present, the first responder status is resigned as if this method had returned true.\n\nSee Also\nResponding to editing notifications\nfunc textViewShouldBeginEditing(UITextView) -> Bool\nAsks the delegate whether to begin editing in the specified text view.\nfunc textViewDidBeginEditing(UITextView)\nTells the delegate when editing of the specified text view begins.\nfunc textViewDidEndEditing(UITextView)\nTells the delegate when editing of the specified text view ends."
  },
  {
    "title": "textView(_:shouldChangeTextIn:replacementText:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextviewdelegate/1618630-textview",
    "html": "Parameters\ntextView\n\nThe text view containing the changes.\n\nrange\n\nThe current selection range. If the length of the range is 0, range reflects the current insertion point. If the user presses the Delete key, the length of the range is 1 and an empty string object replaces that single character.\n\ntext\n\nThe text to insert.\n\nReturn Value\n\ntrue if the old text should be replaced by the new text; false if the replacement operation should be aborted.\n\nDiscussion\n\nThe text view calls this method whenever the user types a new character or deletes an existing character. Implementation of this method is optional. You can use this method to replace text before it is committed to the text view storage. For example, a spell checker might use this method to replace a misspelled word with the correct spelling.\n\nSee Also\nResponding to text changes\nfunc textViewDidChange(UITextView)\nTells the delegate when the user changes the text or attributes in the specified text view."
  },
  {
    "title": "initWithFrame: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/3600348-initwithframe",
    "html": "Parameters\nframe\n\nThe frame rectangle for the view, measured in points.\n\nSee Also\nCreating buttons\n- initWithFrame:primaryAction:\nCreates a new button with the specified frame, registers the primary action event, and sets the title and image to the action’s title and image.\n- initWithCoder:\nCreates a new button with data in an unarchiver."
  },
  {
    "title": "accessibilityHint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilityelement/1619585-accessibilityhint",
    "html": "Discussion\n\nThe hint is a brief, localized description of the result of performing an action on the element without identifying the element or the action. For example, the hint for a table row that contains an email message might be “Selects the message,” but not “Tap this row to select the message.”\n\nBy default, standard UIKit controls and views have system-provided hints. If you provide a custom control or view, however, you need to set this property appropriately so that assistive applications can supply accurate information to users with disabilities.\n\nSee Also\nAccessing the attributes of an accessibility element\nvar accessibilityLabel: String?\nA string that succinctly identifies the accessibility element.\nvar accessibilityValue: String?\nA string that represents the current value of the accessibility element.\nvar accessibilityFrame: CGRect\nThe frame of the accessibility element, in screen coordinates.\nvar accessibilityFrameInContainerSpace: CGRect\nThe frame of the accessibility element, in the coordinate space of its container view.\nvar accessibilityTraits: UIAccessibilityTraits\nThe combination of traits that best characterize the accessibility element."
  },
  {
    "title": "name | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilitycustomaction/1620502-name",
    "html": "See Also\nAccessing the action parameters\nvar attributedName: NSAttributedString\nThe localized name of the action as an attributed string.\nvar image: UIImage?\nAn image that represents the action in assistive apps.\nvar actionHandler: UIAccessibilityCustomAction.Handler?\nA handler to perform for the action.\nvar target: AnyObject?\nThe object that performs the action.\nvar selector: Selector\nThe method that performs the action.\ntypealias UIAccessibilityCustomAction.Handler\nA closure type that defines a handler to perform for an action."
  },
  {
    "title": "UIPointerEffectTintMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipointereffecttintmode",
    "html": "Topics\nTint modes\nUIPointerEffectTintModeNone\nThe view has no tint applied.\nUIPointerEffectTintModeOverlay\nThe view has a tint overlay.\nUIPointerEffectTintModeUnderlay\nThe view has a tint underlay.\nSee Also\nSpecifying the tint mode\npreferredTintMode\nThe preferred tint mode for the effect."
  },
  {
    "title": "splitViewController(_:separateSecondaryFrom:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontrollerdelegate/1623189-splitviewcontroller",
    "html": "Parameters\nsplitViewController\n\nThe split view controller whose interface is expanding.\n\nprimaryViewController\n\nThe primary view controller in the expanded split view interface. If you implement the primaryViewController(forExpanding:) method in your delegate, this object is the one that method returns.\n\nReturn Value\n\nThe view controller to use as the secondary view controller in the expanded split view interface, or nil to let the split view controller choose an appropriate secondary view controller for you.\n\nDiscussion\n\nThis delegate method only applies to classic split view interfaces. For more information, see Split view styles.\n\nUse this method to designate the secondary view controller for your split view interface and to perform any additional cleanup that might be needed. After this method returns, the split view controller installs the newly designated primary and secondary view controllers in its viewControllers array.\n\nWhen an interface collapses, some view controllers merge the contents of the primary and secondary view controllers. This method is your opportunity to undo those changes and return your split view interface to its original state.\n\nWhen you return nil from this method, the split view controller calls the primary view controller’s separateSecondaryViewController(for:) method, giving it a chance to designate an appropriate secondary view controller. Most view controllers do nothing by default but the UINavigationController class responds by popping and returning the view controller from the top of its navigation stack.\n\nSee Also\nCollapsing and expanding classic split views\nfunc primaryViewController(forCollapsing: UISplitViewController) -> UIViewController?\nAsks the delegate to provide the single view controller to display after the split view interface collapses.\nfunc splitViewController(UISplitViewController, collapseSecondary: UIViewController, onto: UIViewController) -> Bool\nAsks the delegate to adjust the primary view controller and to incorporate the secondary view controller into the collapsed interface.\nfunc primaryViewController(forExpanding: UISplitViewController) -> UIViewController?\nAsks the delegate to provide the view controller to display in the primary position when the split view interface expands."
  },
  {
    "title": "isBoldTextEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibility/1615156-isboldtextenabled",
    "html": "See Also\nCapabilities\nstatic var isAssistiveTouchRunning: Bool\nA Boolean value that indicates whether AssistiveTouch is in an enabled state.\nstatic var isClosedCaptioningEnabled: Bool\nA Boolean value that indicates whether the Closed Captions + SDH setting is in an enabled state.\nstatic var isDarkerSystemColorsEnabled: Bool\nA Boolean value that indicates whether the Increase Contrast setting is in an enabled state.\nstatic var isGrayscaleEnabled: Bool\nA Boolean value that indicates whether the Color Filters and the Grayscale settings are in an enabled state.\nstatic var isGuidedAccessEnabled: Bool\nA Boolean value that indicates whether the Guided Access setting is in an enabled state.\nstatic var isInvertColorsEnabled: Bool\nA Boolean value that indicates whether the Classic Invert setting is in an enabled state.\nstatic var isMonoAudioEnabled: Bool\nA Boolean value that indicates whether the Mono Audio setting is in an enabled state.\nstatic var isOnOffSwitchLabelsEnabled: Bool\nA Boolean value that indicates whether the On/Off Labels setting is in an enabled state.\nstatic var isReduceMotionEnabled: Bool\nA Boolean value that indicates whether the Reduce Motion setting is in an enabled state.\nstatic var isReduceTransparencyEnabled: Bool\nA Boolean value that indicates whether the Reduce Transparency setting is in an enabled state.\nstatic var isShakeToUndoEnabled: Bool\nA Boolean value that indicates whether the Shake to Undo setting is in an enabled state.\nstatic var isSpeakScreenEnabled: Bool\nA Boolean value that indicates whether the Speak Screen setting is in an enabled state.\nstatic var isSpeakSelectionEnabled: Bool\nA Boolean value that indicates whether the Speak Selection setting is in an enabled state.\nstatic var isSwitchControlRunning: Bool\nA Boolean value that indicates whether the Switch Control setting is in an enabled state.\nstatic var isVideoAutoplayEnabled: Bool\nA Boolean value that indicates whether the Auto-Play Video Previews setting is in an enabled state.\nstatic var isVoiceOverRunning: Bool\nA Boolean value that indicates whether VoiceOver is in an enabled state.\nstatic var shouldDifferentiateWithoutColor: Bool\nA Boolean value that indicates whether the Differentiate Without Color setting is in an enabled state.\nstatic var buttonShapesEnabled: Bool\nA Boolean value that indicates whether the Button Shapes setting is in an enabled state.\nstatic var prefersCrossFadeTransitions: Bool\nA Boolean value that indicates whether the Reduce Motion and the Prefer Cross-Fade Transitions settings are in an enabled state."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentunavailableconfiguration/4176561-hash",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nRelationships\nFrom Protocol\nHashable"
  },
  {
    "title": "updated(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentunavailableconfiguration/4176578-updated",
    "html": "Relationships\nFrom Protocol\nUIContentConfiguration"
  },
  {
    "title": "makeContentView() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentunavailableconfiguration/4176567-makecontentview",
    "html": "Relationships\nFrom Protocol\nUIContentConfiguration"
  },
  {
    "title": "accessibilityContent(forLineNumber:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilityreadingcontent/1615163-accessibilitycontent",
    "html": "Required\n\nParameters\nlineNumber\n\nA line number in the receiver’s content.\n\nReturn Value\n\nA string containing the text that is associated with the specified line number, or nil if the line number is invalid. By default, this function returns nil.\n\nDiscussion\n\nThe system tries to call the accessibilityAttributedContent(forLineNumber:) method before calling this method.\n\nSee Also\nAccessing the content on a page\nfunc accessibilityLineNumber(for: CGPoint) -> Int\nReturns the line number that contains the specified point.\n\nRequired\n\nfunc accessibilityAttributedContent(forLineNumber: Int) -> NSAttributedString?\nReturns the styled text associated with the specified line number.\nfunc accessibilityFrame(forLineNumber: Int) -> CGRect\nReturns the onscreen frame associated with the specified line number.\n\nRequired\n\nfunc accessibilityAttributedPageContent() -> NSAttributedString?\nReturns the styled text displayed on the current page.\nfunc accessibilityPageContent() -> String?\nReturns the text displayed on the current page.\n\nRequired"
  },
  {
    "title": "accessibilityAttributedPageContent() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilityreadingcontent/2865881-accessibilityattributedpageconte",
    "html": "Return Value\n\nAn attributed string that contains the text displayed on the current page.\n\nDiscussion\n\nThe system tries to call this method before calling the accessibilityPageContent() method.\n\nSee Also\nAccessing the content on a page\nfunc accessibilityLineNumber(for: CGPoint) -> Int\nReturns the line number that contains the specified point.\n\nRequired\n\nfunc accessibilityAttributedContent(forLineNumber: Int) -> NSAttributedString?\nReturns the styled text associated with the specified line number.\nfunc accessibilityContent(forLineNumber: Int) -> String?\nReturns the text associated with the specified line number.\n\nRequired\n\nfunc accessibilityFrame(forLineNumber: Int) -> CGRect\nReturns the onscreen frame associated with the specified line number.\n\nRequired\n\nfunc accessibilityPageContent() -> String?\nReturns the text displayed on the current page.\n\nRequired"
  },
  {
    "title": "accessibilityPageContent() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilityreadingcontent/1615157-accessibilitypagecontent",
    "html": "Required\n\nReturn Value\n\nA string that contains the text displayed on the current page.\n\nDiscussion\n\nThe system tries to call the accessibilityAttributedPageContent() method before calling this method.\n\nSee Also\nAccessing the content on a page\nfunc accessibilityLineNumber(for: CGPoint) -> Int\nReturns the line number that contains the specified point.\n\nRequired\n\nfunc accessibilityAttributedContent(forLineNumber: Int) -> NSAttributedString?\nReturns the styled text associated with the specified line number.\nfunc accessibilityContent(forLineNumber: Int) -> String?\nReturns the text associated with the specified line number.\n\nRequired\n\nfunc accessibilityFrame(forLineNumber: Int) -> CGRect\nReturns the onscreen frame associated with the specified line number.\n\nRequired\n\nfunc accessibilityAttributedPageContent() -> NSAttributedString?\nReturns the styled text displayed on the current page."
  },
  {
    "title": "top | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipointeraccessory/position/3752770-top",
    "html": "See Also\nGetting an accessory position\nstatic var topRight: UIPointerAccessory.Position\nAn accessory position at the top-right of the primary pointer.\nstatic var right: UIPointerAccessory.Position\nAn accessory position at the right of the primary pointer.\nstatic var bottomRight: UIPointerAccessory.Position\nAn accessory position at the bottom-right of the primary pointer.\nstatic var bottom: UIPointerAccessory.Position\nAn accessory position at the bottom of the primary pointer.\nstatic var bottomLeft: UIPointerAccessory.Position\nAn accessory position at the bottom-left of the primary pointer.\nstatic var left: UIPointerAccessory.Position\nAn accessory position at the left of the primary pointer.\nstatic var topLeft: UIPointerAccessory.Position\nAn accessory position at the top-left of the primary pointer."
  },
  {
    "title": "causesPageTurn | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilitytraits/1620205-causespageturn",
    "html": "Discussion\n\nUse this trait to characterize an accessibility element that represents a page of content within a set of pages, such as a view that represents a page in a book. When VoiceOver finishes reading the content in the current page, it calls accessibilityScroll(_:) with UIAccessibilityScrollDirection.next to scroll to the next content page. If VoiceOver detects that the new content doesn't differ from the previous content, it stops scrolling."
  },
  {
    "title": "topRight | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipointeraccessory/position/3752772-topright",
    "html": "See Also\nGetting an accessory position\nstatic var top: UIPointerAccessory.Position\nAn accessory position at the top of the primary pointer.\nstatic var right: UIPointerAccessory.Position\nAn accessory position at the right of the primary pointer.\nstatic var bottomRight: UIPointerAccessory.Position\nAn accessory position at the bottom-right of the primary pointer.\nstatic var bottom: UIPointerAccessory.Position\nAn accessory position at the bottom of the primary pointer.\nstatic var bottomLeft: UIPointerAccessory.Position\nAn accessory position at the bottom-left of the primary pointer.\nstatic var left: UIPointerAccessory.Position\nAn accessory position at the left of the primary pointer.\nstatic var topLeft: UIPointerAccessory.Position\nAn accessory position at the top-left of the primary pointer."
  },
  {
    "title": "right | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipointeraccessory/position/3752769-right",
    "html": "See Also\nGetting an accessory position\nstatic var top: UIPointerAccessory.Position\nAn accessory position at the top of the primary pointer.\nstatic var topRight: UIPointerAccessory.Position\nAn accessory position at the top-right of the primary pointer.\nstatic var bottomRight: UIPointerAccessory.Position\nAn accessory position at the bottom-right of the primary pointer.\nstatic var bottom: UIPointerAccessory.Position\nAn accessory position at the bottom of the primary pointer.\nstatic var bottomLeft: UIPointerAccessory.Position\nAn accessory position at the bottom-left of the primary pointer.\nstatic var left: UIPointerAccessory.Position\nAn accessory position at the left of the primary pointer.\nstatic var topLeft: UIPointerAccessory.Position\nAn accessory position at the top-left of the primary pointer."
  },
  {
    "title": "bottomRight | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipointeraccessory/position/3752764-bottomright",
    "html": "See Also\nGetting an accessory position\nstatic var top: UIPointerAccessory.Position\nAn accessory position at the top of the primary pointer.\nstatic var topRight: UIPointerAccessory.Position\nAn accessory position at the top-right of the primary pointer.\nstatic var right: UIPointerAccessory.Position\nAn accessory position at the right of the primary pointer.\nstatic var bottom: UIPointerAccessory.Position\nAn accessory position at the bottom of the primary pointer.\nstatic var bottomLeft: UIPointerAccessory.Position\nAn accessory position at the bottom-left of the primary pointer.\nstatic var left: UIPointerAccessory.Position\nAn accessory position at the left of the primary pointer.\nstatic var topLeft: UIPointerAccessory.Position\nAn accessory position at the top-left of the primary pointer."
  },
  {
    "title": "accessibilityFrame(forLineNumber:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilityreadingcontent/1615171-accessibilityframe",
    "html": "Required\n\nParameters\nlineNumber\n\nThe line number.\n\nReturn Value\n\nThe frame in the receiver that contains the specified line number, in screen coordinates. By default, this method returns CGRectZero.\n\nDiscussion\n\nTo determine the onscreen rectangle (or frame) of a line, you can use code such as the following:\n\nlet lineBounds: CGRect = // the bounds of the line in view space\nlet view: UIView = // the relevant view\nreturn UIAccessibilityConvertFrameToScreenCoordinates(lineBounds, view)\n\nSee Also\nAccessing the content on a page\nfunc accessibilityLineNumber(for: CGPoint) -> Int\nReturns the line number that contains the specified point.\n\nRequired\n\nfunc accessibilityAttributedContent(forLineNumber: Int) -> NSAttributedString?\nReturns the styled text associated with the specified line number.\nfunc accessibilityContent(forLineNumber: Int) -> String?\nReturns the text associated with the specified line number.\n\nRequired\n\nfunc accessibilityAttributedPageContent() -> NSAttributedString?\nReturns the styled text displayed on the current page.\nfunc accessibilityPageContent() -> String?\nReturns the text displayed on the current page.\n\nRequired\n\nRelated Documentation\nstatic func convertToScreenCoordinates(CGRect, in: UIView) -> CGRect\nConverts the specified rectangle from view coordinates to screen coordinates."
  },
  {
    "title": "bottom | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipointeraccessory/position/3752762-bottom",
    "html": "See Also\nGetting an accessory position\nstatic var top: UIPointerAccessory.Position\nAn accessory position at the top of the primary pointer.\nstatic var topRight: UIPointerAccessory.Position\nAn accessory position at the top-right of the primary pointer.\nstatic var right: UIPointerAccessory.Position\nAn accessory position at the right of the primary pointer.\nstatic var bottomRight: UIPointerAccessory.Position\nAn accessory position at the bottom-right of the primary pointer.\nstatic var bottomLeft: UIPointerAccessory.Position\nAn accessory position at the bottom-left of the primary pointer.\nstatic var left: UIPointerAccessory.Position\nAn accessory position at the left of the primary pointer.\nstatic var topLeft: UIPointerAccessory.Position\nAn accessory position at the top-left of the primary pointer."
  },
  {
    "title": "left | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipointeraccessory/position/3752767-left",
    "html": "See Also\nGetting an accessory position\nstatic var top: UIPointerAccessory.Position\nAn accessory position at the top of the primary pointer.\nstatic var topRight: UIPointerAccessory.Position\nAn accessory position at the top-right of the primary pointer.\nstatic var right: UIPointerAccessory.Position\nAn accessory position at the right of the primary pointer.\nstatic var bottomRight: UIPointerAccessory.Position\nAn accessory position at the bottom-right of the primary pointer.\nstatic var bottom: UIPointerAccessory.Position\nAn accessory position at the bottom of the primary pointer.\nstatic var bottomLeft: UIPointerAccessory.Position\nAn accessory position at the bottom-left of the primary pointer.\nstatic var topLeft: UIPointerAccessory.Position\nAn accessory position at the top-left of the primary pointer."
  },
  {
    "title": "init(accessibilityContainer:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilityelement/1619582-init",
    "html": "Parameters\ncontainer\n\nThe view that contains the accessibility element.\n\nReturn Value\n\nAn accessibility element to represent a non-view item in the container.\n\nDiscussion\n\nIn general, you do not create accessibility elements for items in your application because standard UIKit controls and views are accessible by default. However, if you have a view that contains nonview items, such as icons or text images, that need to be accessible to users with disabilities, you create accessibility elements to represent them. In this case, the containing view should implement the UIAccessibilityContainer informal protocol and use this method to create an accessibility element to represent each item that should be exposed to an assistive application.\n\nSee Also\nRelated Documentation\nAccessibility Programming Guide for iOS"
  },
  {
    "title": "isAccessibilityElement | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilityelement/1619580-isaccessibilityelement",
    "html": "Discussion\n\nThe default value for this property is false. If the receiver is a UIKit control, the default value is true."
  },
  {
    "title": "accessibilityTraits | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilityelement/1619584-accessibilitytraits",
    "html": "Discussion\n\nA trait describes a single aspect of an element’s behavior, state, or usage. Several traits are combined in this property (using an OR operation) to give a complete picture of the element to an assistive application. See “Accessibility Traits” in UIAccessibility for a complete list of traits.\n\nUIKit provides an appropriate combination of traits for all standard controls and views. When combining traits for a custom accessibility element, be sure to:\n\nUse common sense. Don’t combine traits that characterize the element in mutually exclusive ways, such as combining the button and search-field traits.\n\nCombine the traits you select with the superclass’s traits. Specifically, always combine your custom traits with [super accessibilityTraits] in the method you use to set a custom element’s traits.\n\nSee Also\nAccessing the attributes of an accessibility element\nvar accessibilityLabel: String?\nA string that succinctly identifies the accessibility element.\nvar accessibilityHint: String?\nA string that briefly describes the result of performing an action on the accessibility element.\nvar accessibilityValue: String?\nA string that represents the current value of the accessibility element.\nvar accessibilityFrame: CGRect\nThe frame of the accessibility element, in screen coordinates.\nvar accessibilityFrameInContainerSpace: CGRect\nThe frame of the accessibility element, in the coordinate space of its container view."
  },
  {
    "title": "attributedText | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentunavailableconfiguration/4176550-attributedtext",
    "html": "Discussion\n\nSetting this property supersedes text and some properties of textProperties."
  },
  {
    "title": "search() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentunavailableconfiguration/4176568-search",
    "html": "Return Value\n\nA new configuration."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3784559",
    "html": "Parameters\nlhs\n\nThe first configuration to compare.\n\nrhs\n\nThe second configuration to compare.\n\nReturn Value\n\nA Boolean value set to true if the two errors aren’t equal.\n\nSee Also\nComparing configurations\nstatic func == (UIButton.Configuration, UIButton.Configuration) -> Bool\nIndicates whether two button configurations are equal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the button configuration by feeding them into the given hash function.\nvar hashValue: Int\nThe hash value of the configuration."
  },
  {
    "title": "empty() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentunavailableconfiguration/4176560-empty",
    "html": "Return Value\n\nA new configuration.\n\nDiscussion\n\nUse this method to create a new configuration to customize. This is useful if your empty content doesn’t fit the uses covered by configurations available with search() or loading()."
  },
  {
    "title": "loading() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentunavailableconfiguration/4176566-loading",
    "html": "Return Value\n\nA new configuration."
  },
  {
    "title": "assistiveTouch | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiguidedaccessaccessibilityfeature/3089190-assistivetouch",
    "html": "See Also\nNavigating elements\nUIAccessibilityContainer\nProvide a set of methods that view subclasses use to make subcomponents accessible as separate elements.\nvar accessibilityActivationPoint: CGPoint\nThe activation point for the accessibility element in screen coordinates.\nvar accessibilityFocusedUIElement: Any?\nThe deepest descendant of the accessibility hierarchy that has the focus.\nvar accessibilityFrame: CGRect\nThe frame of the accessibility element in screen coordinates.\nfunc accessibilityHitTest(NSPoint) -> Any?\nReturns the deepest descendant of the accessibility hierarchy that contains the specified point.\nvar accessibilityNavigationStyle: UIAccessibilityNavigationStyle\nThe navigation style to apply to the object and its elements.\nenum UIAccessibilityNavigationStyle\nConstants that describe how to navigate an object’s elements with an assistive app.\nvar accessibilityPath: UIBezierPath?\nThe path of the element in screen coordinates.\nstatic func zoomFocusChanged(zoomType: UIAccessibility.ZoomType, toFrame: CGRect, in: UIView)\nNotifies the system when the app’s focus changes to a new location.\nenum UIAccessibility.ZoomType\nThe types of system Zoom that can be in effect."
  },
  {
    "title": "UIAccessibilityLocationDescriptor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilitylocationdescriptor",
    "html": "Topics\nInitializing the descriptor\ninit(attributedName: NSAttributedString, point: CGPoint, in: UIView)\nInitializes a new accessibility location descriptor using an attributed string and a specified point in a view.\ninit(name: String, point: CGPoint, in: UIView)\nInitializes a new accessibility location descriptor with a specified point in a view.\ninit(name: String, view: UIView)\nInitializes a new accessibility location descriptor with a specified view’s activation point.\nGetting the descriptor information\nvar name: String\nReturns the plaintext string representation of the name for the accessibility location descriptor.\nvar attributedName: NSAttributedString\nReturns the attributed string representation of the name for the accessibility location descriptor.\nvar point: CGPoint\nReturns the geometric point of interest for the accessibility location descriptor within its associated view and in the coordinate space of the view.\nvar view: UIView?\nReturns the view associated with the accessibility location descriptor.\nRelationships\nInherits From\nNSObject"
  },
  {
    "title": "UIBandSelectionInteractionStateEnded | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibandselectioninteractionstate/uibandselectioninteractionstateended",
    "html": "Discussion\n\nUse this state to finalize the interaction. For example, you might finalize the selection of items in your view.\n\nSee Also\nGetting the selection state\nUIBandSelectionInteractionStatePossible\nA state that indicates the interaction object is ready to start a new interaction.\nUIBandSelectionInteractionStateBegan\nA state that indicates the interaction object began a new interaction.\nUIBandSelectionInteractionStateSelecting\nA state that indicates the interaction object is tracking changes to the selection rectangle."
  },
  {
    "title": "failed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibility/guidedaccesserror/3089215-failed",
    "html": "See Also\nAccessing error codes\nstatic var permissionDenied: UIAccessibility.GuidedAccessError.Code\nAn error that indicates the app isn’t authorized to perform the requested action.\nenum UIAccessibility.GuidedAccessError.Code\nError codes for Guided Access."
  },
  {
    "title": "permissionDenied | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibility/guidedaccesserror/3089217-permissiondenied",
    "html": "Discussion\n\nFor example, this error might indicate that your app is requesting a configuration change but isn’t locked into Single App Mode through a configuration profile.\n\nSee Also\nAccessing error codes\nstatic var failed: UIAccessibility.GuidedAccessError.Code\nAn error that indicates a failure for an unspecified reason.\nenum UIAccessibility.GuidedAccessError.Code\nError codes for Guided Access."
  },
  {
    "title": "UIBandSelectionInteractionStateSelecting | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibandselectioninteractionstate/uibandselectioninteractionstateselecting",
    "html": "Discussion\n\nUse this state to select items that intersect the current selection rectangle.\n\nSee Also\nGetting the selection state\nUIBandSelectionInteractionStatePossible\nA state that indicates the interaction object is ready to start a new interaction.\nUIBandSelectionInteractionStateBegan\nA state that indicates the interaction object began a new interaction.\nUIBandSelectionInteractionStateEnded\nA state that indicates the current interaction ended."
  },
  {
    "title": "prefersShadow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipointerhovereffect/3539017-prefersshadow",
    "html": "Discussion\n\nThe default value of this property is NO.\n\nSee Also\nCustomizing the effect\nprefersScaledContent\nA Boolean value that determines whether to scale the content."
  },
  {
    "title": "focusedElement(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibility/1615119-focusedelement",
    "html": "Return Value\n\nThe element that is currently focused by the specified assistive technology or the element that was most recently focused, if no technology is specified.\n\nSee Also\nConvenience functions\nstatic func registerGestureConflictWithZoom()\nWarns users that app-specific gestures conflict with the system-defined Zoom accessibility gestures.\nstatic func zoomFocusChanged(zoomType: UIAccessibility.ZoomType, toFrame: CGRect, in: UIView)\nNotifies the system when the app’s focus changes to a new location."
  },
  {
    "title": "UIAccessibilityCustomRotorSearchPredicate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilitycustomrotorsearchpredicate",
    "html": "Topics\nConfiguring search parameters\nvar currentItem: UIAccessibilityCustomRotorItemResult\nThe current element of the search.\nvar searchDirection: UIAccessibilityCustomRotor.Direction\nThe direction in which to search.\nenum UIAccessibilityCustomRotor.Direction\nConstants that indicate the search direction.\nRelationships\nInherits From\nNSObject\nSee Also\nNavigation\nclass UIAccessibilityCustomRotor\nA context-sensitive function that helps VoiceOver users find the next instance of a related element.\nclass UIAccessibilityCustomRotorItemResult\nA target element that a custom rotor references."
  },
  {
    "title": "init(attributedName:image:target:selector:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilitycustomaction/3650219-init",
    "html": "See Also\nCreating a custom action\ninit(name: String, actionHandler: UIAccessibilityCustomAction.Handler)\nCreates a custom action object with the specified name and action handler.\ninit(name: String, target: Any?, selector: Selector)\nCreates a custom action object with the specified name, target, and selector.\ninit(name: String, image: UIImage?, actionHandler: UIAccessibilityCustomAction.Handler)\nCreates a custom action object with the specified name, image, and action handler.\ninit(name: String, image: UIImage?, target: Any?, selector: Selector)\nCreates a custom action object with the specified name, image, target, and selector.\ninit(attributedName: NSAttributedString, actionHandler: UIAccessibilityCustomAction.Handler)\nCreates a custom action object with the specified attributed name and action handler.\ninit(attributedName: NSAttributedString, target: Any?, selector: Selector)\nCreates a custom action object with the specified attributed name, target, and selector.\ninit(attributedName: NSAttributedString, image: UIImage?, actionHandler: UIAccessibilityCustomAction.Handler)\nCreates a custom action object with the specified attributed name, image, and action handler."
  },
  {
    "title": "image | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilitycustomaction/3650217-image",
    "html": "See Also\nAccessing the action parameters\nvar name: String\nThe localized name of the action.\nvar attributedName: NSAttributedString\nThe localized name of the action as an attributed string.\nvar actionHandler: UIAccessibilityCustomAction.Handler?\nA handler to perform for the action.\nvar target: AnyObject?\nThe object that performs the action.\nvar selector: Selector\nThe method that performs the action.\ntypealias UIAccessibilityCustomAction.Handler\nA closure type that defines a handler to perform for an action."
  },
  {
    "title": "registerGestureConflictWithZoom() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibility/1624919-registergestureconflictwithzoom",
    "html": "Discussion\n\nUse this function if your application uses multi-finger gestures that conflict with the gestures used by system Zoom (that is, three-finger gestures). When this is the case, the user is presented with the choice of turning off Zoom or continuing.\n\nSee Also\nConvenience functions\nstatic func focusedElement(using: UIAccessibility.AssistiveTechnologyIdentifier?) -> Any?\nReturns the accessibility element that’s currently in focus by the specified assistive app.\nstatic func zoomFocusChanged(zoomType: UIAccessibility.ZoomType, toFrame: CGRect, in: UIView)\nNotifies the system when the app’s focus changes to a new location."
  },
  {
    "title": "UIAccessibility.HearingDeviceEar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibility/hearingdeviceear",
    "html": "Topics\nConstants\nstatic var left: UIAccessibility.HearingDeviceEar\nA constant that represents the left ear.\nstatic var right: UIAccessibility.HearingDeviceEar\nA constant that represents the right ear.\nstatic var both: UIAccessibility.HearingDeviceEar\nA constant that represents both ears.\nInitializers\ninit(rawValue: UInt)\nCreates a structure that represents a hearing-device ear with the specified raw value.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nConvenience functions\nstatic func focusedElement(using: UIAccessibility.AssistiveTechnologyIdentifier?) -> Any?\nReturns the accessibility element that’s currently in focus by the specified assistive app.\nstatic var hearingDevicePairedEar: UIAccessibility.HearingDeviceEar\nThe current pairing status of Made for iPhone hearing devices.\nstatic func registerGestureConflictWithZoom()\nWarns users that app-specific gestures conflict with the system-defined Zoom accessibility gestures.\nstatic func requestGuidedAccessSession(enabled: Bool, completionHandler: (Bool) -> Void)\nTransitions the app to or from Single App mode asynchronously.\nstatic func zoomFocusChanged(zoomType: UIAccessibility.ZoomType, toFrame: CGRect, in: UIView)\nNotifies the system when the app’s focus changes to a new location."
  },
  {
    "title": "isSwitchControlRunning | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibility/1615131-isswitchcontrolrunning",
    "html": "See Also\nCapabilities\nstatic var isAssistiveTouchRunning: Bool\nA Boolean value that indicates whether AssistiveTouch is in an enabled state.\nstatic var isBoldTextEnabled: Bool\nA Boolean value that indicates whether the Bold Text setting is in an enabled state.\nstatic var isClosedCaptioningEnabled: Bool\nA Boolean value that indicates whether the Closed Captions + SDH setting is in an enabled state.\nstatic var isDarkerSystemColorsEnabled: Bool\nA Boolean value that indicates whether the Increase Contrast setting is in an enabled state.\nstatic var isGrayscaleEnabled: Bool\nA Boolean value that indicates whether the Color Filters and the Grayscale settings are in an enabled state.\nstatic var isGuidedAccessEnabled: Bool\nA Boolean value that indicates whether the Guided Access setting is in an enabled state.\nstatic var isInvertColorsEnabled: Bool\nA Boolean value that indicates whether the Classic Invert setting is in an enabled state.\nstatic var isMonoAudioEnabled: Bool\nA Boolean value that indicates whether the Mono Audio setting is in an enabled state.\nstatic var isOnOffSwitchLabelsEnabled: Bool\nA Boolean value that indicates whether the On/Off Labels setting is in an enabled state.\nstatic var isReduceMotionEnabled: Bool\nA Boolean value that indicates whether the Reduce Motion setting is in an enabled state.\nstatic var isReduceTransparencyEnabled: Bool\nA Boolean value that indicates whether the Reduce Transparency setting is in an enabled state.\nstatic var isShakeToUndoEnabled: Bool\nA Boolean value that indicates whether the Shake to Undo setting is in an enabled state.\nstatic var isSpeakScreenEnabled: Bool\nA Boolean value that indicates whether the Speak Screen setting is in an enabled state.\nstatic var isSpeakSelectionEnabled: Bool\nA Boolean value that indicates whether the Speak Selection setting is in an enabled state.\nstatic var isVideoAutoplayEnabled: Bool\nA Boolean value that indicates whether the Auto-Play Video Previews setting is in an enabled state.\nstatic var isVoiceOverRunning: Bool\nA Boolean value that indicates whether VoiceOver is in an enabled state.\nstatic var shouldDifferentiateWithoutColor: Bool\nA Boolean value that indicates whether the Differentiate Without Color setting is in an enabled state.\nstatic var buttonShapesEnabled: Bool\nA Boolean value that indicates whether the Button Shapes setting is in an enabled state.\nstatic var prefersCrossFadeTransitions: Bool\nA Boolean value that indicates whether the Reduce Motion and the Prefer Cross-Fade Transitions settings are in an enabled state."
  },
  {
    "title": "isAssistiveTouchRunning | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibility/1648479-isassistivetouchrunning",
    "html": "Discussion\n\nThe user must enable Guided Access for the correct value to return.\n\nSee Also\nCapabilities\nstatic var isBoldTextEnabled: Bool\nA Boolean value that indicates whether the Bold Text setting is in an enabled state.\nstatic var isClosedCaptioningEnabled: Bool\nA Boolean value that indicates whether the Closed Captions + SDH setting is in an enabled state.\nstatic var isDarkerSystemColorsEnabled: Bool\nA Boolean value that indicates whether the Increase Contrast setting is in an enabled state.\nstatic var isGrayscaleEnabled: Bool\nA Boolean value that indicates whether the Color Filters and the Grayscale settings are in an enabled state.\nstatic var isGuidedAccessEnabled: Bool\nA Boolean value that indicates whether the Guided Access setting is in an enabled state.\nstatic var isInvertColorsEnabled: Bool\nA Boolean value that indicates whether the Classic Invert setting is in an enabled state.\nstatic var isMonoAudioEnabled: Bool\nA Boolean value that indicates whether the Mono Audio setting is in an enabled state.\nstatic var isOnOffSwitchLabelsEnabled: Bool\nA Boolean value that indicates whether the On/Off Labels setting is in an enabled state.\nstatic var isReduceMotionEnabled: Bool\nA Boolean value that indicates whether the Reduce Motion setting is in an enabled state.\nstatic var isReduceTransparencyEnabled: Bool\nA Boolean value that indicates whether the Reduce Transparency setting is in an enabled state.\nstatic var isShakeToUndoEnabled: Bool\nA Boolean value that indicates whether the Shake to Undo setting is in an enabled state.\nstatic var isSpeakScreenEnabled: Bool\nA Boolean value that indicates whether the Speak Screen setting is in an enabled state.\nstatic var isSpeakSelectionEnabled: Bool\nA Boolean value that indicates whether the Speak Selection setting is in an enabled state.\nstatic var isSwitchControlRunning: Bool\nA Boolean value that indicates whether the Switch Control setting is in an enabled state.\nstatic var isVideoAutoplayEnabled: Bool\nA Boolean value that indicates whether the Auto-Play Video Previews setting is in an enabled state.\nstatic var isVoiceOverRunning: Bool\nA Boolean value that indicates whether VoiceOver is in an enabled state.\nstatic var shouldDifferentiateWithoutColor: Bool\nA Boolean value that indicates whether the Differentiate Without Color setting is in an enabled state.\nstatic var buttonShapesEnabled: Bool\nA Boolean value that indicates whether the Button Shapes setting is in an enabled state.\nstatic var prefersCrossFadeTransitions: Bool\nA Boolean value that indicates whether the Reduce Motion and the Prefer Cross-Fade Transitions settings are in an enabled state."
  },
  {
    "title": "localizedSuggestion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchsuggestion/3584826-localizedsuggestion",
    "html": "Required\n\nSee Also\nDescribing a search suggestion\nvar localizedDescription: String?\nA description of the suggestion.\nvar localizedAttributedSuggestion: NSAttributedString?\nAn attributed label for the suggestion, usually the search term the suggestion represents.\n\nRequired\n\nvar iconImage: UIImage?\nAn image for display on the suggestion.\nvar representedObject: Any?\nAn object for tracking supplementary information about the search suggestion.\n\nRequired"
  },
  {
    "title": "isShakeToUndoEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibility/1615103-isshaketoundoenabled",
    "html": "See Also\nCapabilities\nstatic var isAssistiveTouchRunning: Bool\nA Boolean value that indicates whether AssistiveTouch is in an enabled state.\nstatic var isBoldTextEnabled: Bool\nA Boolean value that indicates whether the Bold Text setting is in an enabled state.\nstatic var isClosedCaptioningEnabled: Bool\nA Boolean value that indicates whether the Closed Captions + SDH setting is in an enabled state.\nstatic var isDarkerSystemColorsEnabled: Bool\nA Boolean value that indicates whether the Increase Contrast setting is in an enabled state.\nstatic var isGrayscaleEnabled: Bool\nA Boolean value that indicates whether the Color Filters and the Grayscale settings are in an enabled state.\nstatic var isGuidedAccessEnabled: Bool\nA Boolean value that indicates whether the Guided Access setting is in an enabled state.\nstatic var isInvertColorsEnabled: Bool\nA Boolean value that indicates whether the Classic Invert setting is in an enabled state.\nstatic var isMonoAudioEnabled: Bool\nA Boolean value that indicates whether the Mono Audio setting is in an enabled state.\nstatic var isOnOffSwitchLabelsEnabled: Bool\nA Boolean value that indicates whether the On/Off Labels setting is in an enabled state.\nstatic var isReduceMotionEnabled: Bool\nA Boolean value that indicates whether the Reduce Motion setting is in an enabled state.\nstatic var isReduceTransparencyEnabled: Bool\nA Boolean value that indicates whether the Reduce Transparency setting is in an enabled state.\nstatic var isSpeakScreenEnabled: Bool\nA Boolean value that indicates whether the Speak Screen setting is in an enabled state.\nstatic var isSpeakSelectionEnabled: Bool\nA Boolean value that indicates whether the Speak Selection setting is in an enabled state.\nstatic var isSwitchControlRunning: Bool\nA Boolean value that indicates whether the Switch Control setting is in an enabled state.\nstatic var isVideoAutoplayEnabled: Bool\nA Boolean value that indicates whether the Auto-Play Video Previews setting is in an enabled state.\nstatic var isVoiceOverRunning: Bool\nA Boolean value that indicates whether VoiceOver is in an enabled state.\nstatic var shouldDifferentiateWithoutColor: Bool\nA Boolean value that indicates whether the Differentiate Without Color setting is in an enabled state.\nstatic var buttonShapesEnabled: Bool\nA Boolean value that indicates whether the Button Shapes setting is in an enabled state.\nstatic var prefersCrossFadeTransitions: Bool\nA Boolean value that indicates whether the Reduce Motion and the Prefer Cross-Fade Transitions settings are in an enabled state."
  },
  {
    "title": "isClosedCaptioningEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibility/1615112-isclosedcaptioningenabled",
    "html": "See Also\nCapabilities\nstatic var isAssistiveTouchRunning: Bool\nA Boolean value that indicates whether AssistiveTouch is in an enabled state.\nstatic var isBoldTextEnabled: Bool\nA Boolean value that indicates whether the Bold Text setting is in an enabled state.\nstatic var isDarkerSystemColorsEnabled: Bool\nA Boolean value that indicates whether the Increase Contrast setting is in an enabled state.\nstatic var isGrayscaleEnabled: Bool\nA Boolean value that indicates whether the Color Filters and the Grayscale settings are in an enabled state.\nstatic var isGuidedAccessEnabled: Bool\nA Boolean value that indicates whether the Guided Access setting is in an enabled state.\nstatic var isInvertColorsEnabled: Bool\nA Boolean value that indicates whether the Classic Invert setting is in an enabled state.\nstatic var isMonoAudioEnabled: Bool\nA Boolean value that indicates whether the Mono Audio setting is in an enabled state.\nstatic var isOnOffSwitchLabelsEnabled: Bool\nA Boolean value that indicates whether the On/Off Labels setting is in an enabled state.\nstatic var isReduceMotionEnabled: Bool\nA Boolean value that indicates whether the Reduce Motion setting is in an enabled state.\nstatic var isReduceTransparencyEnabled: Bool\nA Boolean value that indicates whether the Reduce Transparency setting is in an enabled state.\nstatic var isShakeToUndoEnabled: Bool\nA Boolean value that indicates whether the Shake to Undo setting is in an enabled state.\nstatic var isSpeakScreenEnabled: Bool\nA Boolean value that indicates whether the Speak Screen setting is in an enabled state.\nstatic var isSpeakSelectionEnabled: Bool\nA Boolean value that indicates whether the Speak Selection setting is in an enabled state.\nstatic var isSwitchControlRunning: Bool\nA Boolean value that indicates whether the Switch Control setting is in an enabled state.\nstatic var isVideoAutoplayEnabled: Bool\nA Boolean value that indicates whether the Auto-Play Video Previews setting is in an enabled state.\nstatic var isVoiceOverRunning: Bool\nA Boolean value that indicates whether VoiceOver is in an enabled state.\nstatic var shouldDifferentiateWithoutColor: Bool\nA Boolean value that indicates whether the Differentiate Without Color setting is in an enabled state.\nstatic var buttonShapesEnabled: Bool\nA Boolean value that indicates whether the Button Shapes setting is in an enabled state.\nstatic var prefersCrossFadeTransitions: Bool\nA Boolean value that indicates whether the Reduce Motion and the Prefer Cross-Fade Transitions settings are in an enabled state."
  },
  {
    "title": "text | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchbar/1624282-text",
    "html": "Discussion\n\nThe default value is nil.\n\nSee Also\nGetting the search text\nvar placeholder: String?\nThe string to display when there’s no other text in the text field.\nvar prompt: String?\nA single line of text displayed at the top of the search bar.\nvar searchTextField: UISearchTextField\nThe text field that the user enters a search query into."
  },
  {
    "title": "UINavigationItem.SearchBarPlacement.stacked | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uinavigationitem/searchbarplacement/stacked",
    "html": "Discussion\n\nThis value reflects the traditional search bar layout available in versions of iOS earlier than iOS 16."
  },
  {
    "title": "subtitle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3750796-subtitle",
    "html": "Discussion\n\nThis property matches the string value of the attributedSubtitle property. To change the button subtitle when the button state changes, use configurationUpdateHandler or updateConfiguration().\n\nSee Also\nConfiguring titles\nvar title: String?\nThe text of the title label the button displays.\nvar attributedTitle: AttributedString?\nThe text and style attributes for the button’s title label.\nvar attributedSubtitle: AttributedString?\nThe text and style attributes for the button’s subtitle label.\nvar titleTextAttributesTransformer: UIConfigurationTextAttributesTransformer?\nA structure to update the attributed title when the button state changes.\nvar subtitleTextAttributesTransformer: UIConfigurationTextAttributesTransformer?\nA structure to update the attributed subtitle when the button state changes.\nstruct UIConfigurationTextAttributesTransformer\nDefines a text transformation that can affect the visual appearance of a string.\nvar titlePadding: CGFloat\nThe distance between the title and subtitle labels.\nvar titleAlignment: UIButton.Configuration.TitleAlignment\nThe text alignment the button uses to lay out the title and subtitle.\nenum UIButton.Configuration.TitleAlignment\nSpecifies how to align a button’s title and subtitle.\nvar titleLineBreakMode: NSLineBreakMode\nThe line break mode the button uses to lay out the button’s title.\nvar subtitleLineBreakMode: NSLineBreakMode\nThe line break mode the button uses to lay out the button’s subtitle."
  },
  {
    "title": "titlePadding | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3750801-titlepadding",
    "html": "Discussion\n\nThe title padding adjusts the distance between the title and subtitle labels.\n\nSee Also\nConfiguring titles\nvar title: String?\nThe text of the title label the button displays.\nvar subtitle: String?\nThe text the subtitle label of the button displays.\nvar attributedTitle: AttributedString?\nThe text and style attributes for the button’s title label.\nvar attributedSubtitle: AttributedString?\nThe text and style attributes for the button’s subtitle label.\nvar titleTextAttributesTransformer: UIConfigurationTextAttributesTransformer?\nA structure to update the attributed title when the button state changes.\nvar subtitleTextAttributesTransformer: UIConfigurationTextAttributesTransformer?\nA structure to update the attributed subtitle when the button state changes.\nstruct UIConfigurationTextAttributesTransformer\nDefines a text transformation that can affect the visual appearance of a string.\nvar titleAlignment: UIButton.Configuration.TitleAlignment\nThe text alignment the button uses to lay out the title and subtitle.\nenum UIButton.Configuration.TitleAlignment\nSpecifies how to align a button’s title and subtitle.\nvar titleLineBreakMode: NSLineBreakMode\nThe line break mode the button uses to lay out the button’s title.\nvar subtitleLineBreakMode: NSLineBreakMode\nThe line break mode the button uses to lay out the button’s subtitle."
  },
  {
    "title": "accessibilityAttributedContent(forLineNumber:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilityreadingcontent/2866114-accessibilityattributedcontent",
    "html": "Parameters\nlineNumber\n\nA line number in the receiver’s content.\n\nReturn Value\n\nAn attributed string containing the text that is associated with the specified line number, or nil if the line number is invalid. By default, this function returns nil.\n\nDiscussion\n\nThe system tries to call this method before calling the accessibilityContent(forLineNumber:) method.\n\nSee Also\nAccessing the content on a page\nfunc accessibilityLineNumber(for: CGPoint) -> Int\nReturns the line number that contains the specified point.\n\nRequired\n\nfunc accessibilityContent(forLineNumber: Int) -> String?\nReturns the text associated with the specified line number.\n\nRequired\n\nfunc accessibilityFrame(forLineNumber: Int) -> CGRect\nReturns the onscreen frame associated with the specified line number.\n\nRequired\n\nfunc accessibilityAttributedPageContent() -> NSAttributedString?\nReturns the styled text displayed on the current page.\nfunc accessibilityPageContent() -> String?\nReturns the text displayed on the current page.\n\nRequired"
  },
  {
    "title": "gray() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3750787-gray",
    "html": "Return Value\n\nA new configuration object.\n\nSee Also\nCreating configurations\nstatic func plain() -> UIButton.Configuration\nCreates a configuration for a button with a transparent background.\nstatic func tinted() -> UIButton.Configuration\nCreates a configuration for a button with a tinted background color.\nstatic func filled() -> UIButton.Configuration\nCreates a configuration for a button with a background filled with the button’s tint color.\nstatic func borderless() -> UIButton.Configuration\nCreates a configuration for a button that has a borderless style.\nstatic func bordered() -> UIButton.Configuration\nCreates a configuration for a button that has a bordered style.\nstatic func borderedTinted() -> UIButton.Configuration\nCreates a configuration for a button that has a tinted, bordered style.\nstatic func borderedProminent() -> UIButton.Configuration\nCreates a configuration for a button that has a prominent, bordered style.\nfunc updated(for: UIButton) -> UIButton.Configuration\nReturns a copy of the configuration, updated for the given button."
  },
  {
    "title": "UIUserInterfaceStyle.dark | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiuserinterfacestyle/dark",
    "html": "See Also\nInterface styles\ncase unspecified\nAn unspecified interface style.\ncase light\nThe light interface style."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3784560",
    "html": "Parameters\na\n\nThe first configuration to compare.\n\nb\n\nThe second configuration to compare.\n\nReturn Value\n\nA Boolean value set to true if the two configurations are equal.\n\nRelationships\nFrom Protocol\nEquatable\nSee Also\nComparing configurations\nstatic func != (UIButton.Configuration, UIButton.Configuration) -> Bool\nIndicates whether two button configurations are unequal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the button configuration by feeding them into the given hash function.\nvar hashValue: Int\nThe hash value of the configuration."
  },
  {
    "title": "UIButton.Configuration.Indicator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/indicator",
    "html": "Overview\n\nUse these constants to set the value of the indicator property.\n\nTopics\nIndicator styles\ncase automatic\nA constant that automatically determines an indicator style according to the button’s properties.\ncase none\nA constant that doesn’t show an indicator.\ncase popup\nA constant that shows a popup-style indicator.\nComparisons\nstatic func == (UIButton.Configuration.Indicator, UIButton.Configuration.Indicator) -> Bool\nIndicates whether two indicators are equal.\nstatic func != (UIButton.Configuration.Indicator, UIButton.Configuration.Indicator) -> Bool\nIndicates whether two indicators are unequal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the indicator by feeding them into the hasher.\nvar hashValue: Int\nThe hash value.\nSee Also\nConfiguring the indicator\nvar indicator: UIButton.Configuration.Indicator\nThe style of the indicator that appears on the button.\nvar indicatorColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the indicator color."
  },
  {
    "title": "textSelectionDataSource | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselectionnavigation/3801857-textselectiondatasource",
    "html": "See Also\nAccessing the data source\nprotocol NSTextSelectionDataSource\nA set of methods that objects implement to provide data for, and manage text selections."
  },
  {
    "title": "adjustsImageSizeForAccessibilityContentSizeCategory | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilitycontentsizecategoryimageadjusting/2890929-adjustsimagesizeforaccessibility",
    "html": "Required\n\nDiscussion\n\nWhen the value of this property is true, the current object scales its image to an appropriate accessibility content size category. When the value of this property is false, the current object displays its image at the regular content sizes."
  },
  {
    "title": "UIAccessibility.GuidedAccessError.Code.failed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibility/guidedaccesserror/code/failed",
    "html": "See Also\nErrors\ncase permissionDenied\nAn error that indicates the app isn’t authorized to perform the requested action."
  },
  {
    "title": "UIAccessibilityCustomRotor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilitycustomrotor",
    "html": "Overview\n\nYou might use an instance of this class to find the next link in an article, or the next misspelled word in a document.\n\nRelated Sessions from WWDC20\n\nSession 10116: VoiceOver Efficiency with Custom Rotors\n\nTopics\nCreating a rotor object\ninit(attributedName: NSAttributedString, itemSearch: UIAccessibilityCustomRotor.Search)\nCreates a rotor with the specified name and search block.\ninit(name: String, itemSearch: UIAccessibilityCustomRotor.Search)\nCreates a rotor with the specified name and search block.\ninit(systemType: UIAccessibilityCustomRotor.SystemRotorType, itemSearch: UIAccessibilityCustomRotor.Search)\nCreates a rotor for the specified type of item.\nNavigating to the next item\nvar itemSearchBlock: UIAccessibilityCustomRotor.Search\nThe block for retrieving the next or previous rotor.\ntypealias UIAccessibilityCustomRotor.Search\nThe block type for retrieving the next or previous rotor.\nenum UIAccessibilityCustomRotor.Direction\nConstants that indicate the search direction.\nGetting the rotor type\nvar systemRotorType: UIAccessibilityCustomRotor.SystemRotorType\nThe type of content that the rotor searches.\nenum UIAccessibilityCustomRotor.SystemRotorType\nConstants that indicate the type of content that the rotor represents.\nIdentifying the rotor\nvar name: String\nThe name of the rotor.\nvar attributedName: NSAttributedString\nThe name of the rotor as an attributed string.\nRelationships\nInherits From\nNSObject\nSee Also\nNavigation\nclass UIAccessibilityCustomRotorItemResult\nA target element that a custom rotor references.\nclass UIAccessibilityCustomRotorSearchPredicate\nThe search parameters that help determine the next matching custom rotor item result."
  },
  {
    "title": "UIAccessibility.GuidedAccessError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibility/guidedaccesserror",
    "html": "Topics\nAccessing error codes\nstatic var permissionDenied: UIAccessibility.GuidedAccessError.Code\nAn error that indicates the app isn’t authorized to perform the requested action.\nstatic var failed: UIAccessibility.GuidedAccessError.Code\nAn error that indicates a failure for an unspecified reason.\nenum UIAccessibility.GuidedAccessError.Code\nError codes for Guided Access.\nGetting error information\nstatic var errorDomain: String\nThe Guided Access error domain.\nvar errorUserInfo: [String : Any]\nThe error user info dictionary.\nvar userInfo: [String : Any]\nThe user info dictionary.\nvar errorCode: Int\nAn integer value for the error.\nvar code: Code\nA code that indicates the cause of the error.\nvar localizedDescription: String\nA localized description of the error.\nComparing errors\nstatic func == (UIAccessibility.GuidedAccessError, UIAccessibility.GuidedAccessError) -> Bool\nAn operator for checking whether two errors are equal.\nstatic func != (UIAccessibility.GuidedAccessError, UIAccessibility.GuidedAccessError) -> Bool\nAn operator for checking whether two errors are unequal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the error by feeding them into the given hash function.\nvar hashValue: Int\nThe hashed value of the error.\nCreating errors\ninit(Code, userInfo: [String : Any])\nCreates a Guided Access error.\nSee Also\nErrors\nstatic let guidedAccessErrorDomain: String\nA string that identifies the Guided Access error domain."
  },
  {
    "title": "UIAccessibilityContainerType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilitycontainertype",
    "html": "Topics\nConstants\ncase none\nNo additional data.\ncase dataTable\nA table that contains structured data.\ncase list\nA list of data.\ncase landmark\nLandmark data.\ncase semanticGroup\nA semantic group of data.\nUseful links\nAccessibility Design for Mac Catalyst\nImprove navigation in your app by using keyboard shortcuts and accessibility containers.\nRelationships\nConforms To\nSendable\nSee Also\nContainers\nprotocol UIAccessibilityContainerDataTable\nMethods that convey information about the contents of a table.\nprotocol UIAccessibilityContainerDataTableCell\nMethods that provide the location of a cell in a table."
  },
  {
    "title": "UIAccessibilityCustomRotorItemResult | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilitycustomrotoritemresult",
    "html": "Topics\nCreating a rotor item result\ninit(targetElement: NSObjectProtocol, targetRange: UITextRange?)\nCreates a rotor item result from the specified target element and text range.\nGetting information about the target element\nvar targetElement: NSObjectProtocol?\nThe target element of the rotor.\nvar targetRange: UITextRange?\nThe text range (if any) of the target element.\nRelationships\nInherits From\nNSObject\nSee Also\nNavigation\nclass UIAccessibilityCustomRotor\nA context-sensitive function that helps VoiceOver users find the next instance of a related element.\nclass UIAccessibilityCustomRotorSearchPredicate\nThe search parameters that help determine the next matching custom rotor item result."
  },
  {
    "title": "UIAccessibility.GuidedAccessError.Code.permissionDenied | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibility/guidedaccesserror/code/permissiondenied",
    "html": "Discussion\n\nFor example, this error might indicate that your app is requesting a configuration change but isn’t locked into Single App Mode through a configuration profile.\n\nSee Also\nErrors\ncase failed\nAn error that indicates a failure for an unspecified reason."
  },
  {
    "title": "Notification names | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/accessibility_for_uikit/notification_names",
    "html": "Topics\nUI changes\nstatic var screenChanged: UIAccessibility.Notification\nA notification that an app posts when a new view appears that occupies a major portion of the screen.\nstatic var layoutChanged: UIAccessibility.Notification\nA notification that an app posts when the layout of a screen changes.\nstatic var pageScrolled: UIAccessibility.Notification\nA notification that an app posts when a scroll action completes.\nstatic let switchControlStatusDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when the system’s Switch Control setting changes.\nstatic let elementFocusedNotification: NSNotification.Name\nA notification that UIKit posts when an assistive app focuses on an accessibility element.\nstatic let reduceTransparencyStatusDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when the system’s Reduce Transparency setting changes.\nstatic let buttonShapesEnabledStatusDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when the system’s Button Shapes setting changes.\nVoiceOver\nstatic var announcement: UIAccessibility.Notification\nA notification that an app posts when it needs to convey an announcement to the assistive app.\nstatic let voiceOverStatusDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when VoiceOver starts or stops.\nstatic let announcementDidFinishNotification: NSNotification.Name\nA notification that UIKit posts when the system finishes reading an announcement.\nlet UIAccessibilityVoiceOverStatusChanged: String\nA notification that UIKit posts when VoiceOver starts or stops.\nDeprecated\nText\nstatic let boldTextStatusDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when the system’s Bold Text setting changes.\nstatic let closedCaptioningStatusDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when the setting for Closed Captions + SDH changes.\nColors\nstatic let darkerSystemColorsStatusDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when the system’s Increase Contrast setting changes.\nstatic let grayscaleStatusDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when the system’s Grayscale setting changes.\nstatic let invertColorsStatusDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when the settings for inverted colors change.\nAssistive apps\nstatic let assistiveTouchStatusDidChangeNotification: NSNotification.Name\nA notification that indicates a change in the status of AssistiveTouch.\nstatic let guidedAccessStatusDidChangeNotification: NSNotification.Name\nA notification that indicates when a Guided Access session starts or ends.\nstatic var pauseAssistiveTechnology: UIAccessibility.Notification\nA notification that pauses an assistive app's operations temporarily.\nstatic var resumeAssistiveTechnology: UIAccessibility.Notification\nA notification that resumes an assistive app's operations temporarily.\nstruct UIAccessibility.AssistiveTechnologyIdentifier\nIdentifiers for assistive apps.\nAudio and speech\nstatic let monoAudioStatusDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when system audio changes from stereo to mono.\nstatic let speakScreenStatusDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when the system’s Speak Screen setting changes.\nstatic let speakSelectionStatusDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when the system’s Speak Selection setting changes.\nstatic let hearingDevicePairedEarDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when there is a change to the currently paired hearing devices.\nMotion\nstatic let reduceMotionStatusDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when the system’s Reduce Motion setting changes.\nstatic let shakeToUndoDidChangeNotification: NSNotification.Name\nA notification that UIKit posts when the system's Shake to Undo setting changes.\nSee Also\nNotifications\nNotification dictionary keys\nHandle notifications with keys in the user info dictionary.\nstatic func post(notification: UIAccessibility.Notification, argument: Any?)\nPosts a notification to assistive apps."
  },
  {
    "title": "rotatesCoordinateSystemForLayoutOrientation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselectionnavigation/3801856-rotatescoordinatesystemforlayout",
    "html": "Discussion\n\nIf set to true, the framework rotates the coordinate system for arguments passed to the navigation methods such as textSelections(interactingAt:inContainerAt:anchors:modifiers:selecting:bounds:): based on the text container layout orientation. Defaults to false.\n\nSee Also\nSelection characteristics\nvar allowsNonContiguousRanges: Bool\nDetermines if the instance could produce selections with multiple noncontiguous selections.\nstruct NSTextSelectionNavigation.Modifier\nValues that describe how the framework handles different kinds of selection modifiers.\nenum NSTextSelectionNavigation.Destination\nValues that affect how the framework handles navigation across different textual boundaries during a selection.\nenum NSTextSelectionNavigation.Direction\nValues that describe the direction of a selection.\nfunc textSelection(for: NSTextSelection.Granularity, enclosing: CGPoint, inContainerAt: NSTextLocation) -> NSTextSelection?\nReturns a text selection that expands to the nearest boundaries for selection granularity and an enclosing point you specify."
  },
  {
    "title": "destinationSelection(for:direction:destination:extending:confined:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselectionnavigation/3801852-destinationselection",
    "html": "Parameters\ntextSelection\n\nThe source selection.\n\ndirection\n\nOne of the available NSTextSelectionNavigation.Direction directions.\n\ndestination\n\nOne of the available NSTextSelectionNavigation.Destination destinations.\n\nextending\n\nWhether this selection extends an existing selection.\n\nconfined\n\nWhether to confine movement to the existing selection.\n\nReturn Value\n\nA new NSTextSelection, or nil if the operation doesn’t produce a logically valid result.\n\nDiscussion\n\nIf confined is true, confine any movement to the text element that the selection already lies within.\n\nSee Also\nWorking with text selections\nfunc textSelection(for: NSTextSelection.Granularity, enclosing: NSTextSelection) -> NSTextSelection\nReturns a text selection expanded to the nearest boundaries for the selection granularity and enclosing text selection text ranges you specify.\nfunc textSelections(interactingAt: CGPoint, inContainerAt: NSTextLocation, anchors: [NSTextSelection], modifiers: NSTextSelectionNavigation.Modifier, selecting: Bool, bounds: CGRect) -> [NSTextSelection]\nReturns an array of text selections produced by a tap or click at the point you specify."
  },
  {
    "title": "angle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipointeraccessory/position/3752761-angle",
    "html": "See Also\nCreating a custom accessory position\ninit(offset: CGFloat, angle: CGFloat)\nCreates a custom accessory position with the specified offset and angle.\nvar offset: CGFloat\nThe offset of the accessory from the primary pointer.\nstatic let defaultOffset: CGFloat\nA constant that specifies the default offset of an accessory from the primary pointer shape."
  },
  {
    "title": "offset | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipointeraccessory/position/3752768-offset",
    "html": "Discussion\n\nThis property only supports positive values.\n\nSee Also\nCreating a custom accessory position\ninit(offset: CGFloat, angle: CGFloat)\nCreates a custom accessory position with the specified offset and angle.\nvar angle: CGFloat\nThe angle of the accessory’s position, measured in radians clockwise from the top of the primary pointer.\nstatic let defaultOffset: CGFloat\nA constant that specifies the default offset of an accessory from the primary pointer shape."
  },
  {
    "title": "defaultOffset | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipointeraccessory/position/3752765-defaultoffset",
    "html": "See Also\nCreating a custom accessory position\ninit(offset: CGFloat, angle: CGFloat)\nCreates a custom accessory position with the specified offset and angle.\nvar angle: CGFloat\nThe angle of the accessory’s position, measured in radians clockwise from the top of the primary pointer.\nvar offset: CGFloat\nThe offset of the accessory from the primary pointer."
  },
  {
    "title": "UIBandSelectionInteractionStatePossible | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibandselectioninteractionstate/uibandselectioninteractionstatepossible",
    "html": "Discussion\n\nA UIBandSelectionInteraction object in this state is waiting for events to occur that start the interaction. When an interaction concludes, the interaction returns to this state until a new interaction begins.\n\nSee Also\nGetting the selection state\nUIBandSelectionInteractionStateBegan\nA state that indicates the interaction object began a new interaction.\nUIBandSelectionInteractionStateSelecting\nA state that indicates the interaction object is tracking changes to the selection rectangle.\nUIBandSelectionInteractionStateEnded\nA state that indicates the current interaction ended."
  },
  {
    "title": "accessibilityLabel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilityelement/1619577-accessibilitylabel",
    "html": "Discussion\n\nThe label is a very short, localized string that identifies the accessibility element, but does not include the type of the control or view. For example, the label for a Save button is “Save,” not “Save button.”\n\nBy default, standard UIKit controls and views have labels that derive from their titles. If you provide a custom control or view, however, you need to set this property appropriately so that assistive applications can supply accurate information to users with disabilities.\n\nSee Also\nAccessing the attributes of an accessibility element\nvar accessibilityHint: String?\nA string that briefly describes the result of performing an action on the accessibility element.\nvar accessibilityValue: String?\nA string that represents the current value of the accessibility element.\nvar accessibilityFrame: CGRect\nThe frame of the accessibility element, in screen coordinates.\nvar accessibilityFrameInContainerSpace: CGRect\nThe frame of the accessibility element, in the coordinate space of its container view.\nvar accessibilityTraits: UIAccessibilityTraits\nThe combination of traits that best characterize the accessibility element."
  },
  {
    "title": "attributedName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilitycustomaction/2865932-attributedname",
    "html": "See Also\nAccessing the action parameters\nvar name: String\nThe localized name of the action.\nvar image: UIImage?\nAn image that represents the action in assistive apps.\nvar actionHandler: UIAccessibilityCustomAction.Handler?\nA handler to perform for the action.\nvar target: AnyObject?\nThe object that performs the action.\nvar selector: Selector\nThe method that performs the action.\ntypealias UIAccessibilityCustomAction.Handler\nA closure type that defines a handler to perform for an action."
  },
  {
    "title": "preferredTintMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipointerhovereffect/3539015-preferredtintmode",
    "html": "Discussion\n\nThe default value of this property is UIPointerEffectTintModeOverlay.\n\nSee Also\nSpecifying the tint mode\nUIPointerEffectTintMode\nAn effect that defines how to apply a tint to a view during a pointer interaction."
  },
  {
    "title": "target | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilitycustomaction/1620501-target",
    "html": "See Also\nAccessing the action parameters\nvar name: String\nThe localized name of the action.\nvar attributedName: NSAttributedString\nThe localized name of the action as an attributed string.\nvar image: UIImage?\nAn image that represents the action in assistive apps.\nvar actionHandler: UIAccessibilityCustomAction.Handler?\nA handler to perform for the action.\nvar selector: Selector\nThe method that performs the action.\ntypealias UIAccessibilityCustomAction.Handler\nA closure type that defines a handler to perform for an action."
  },
  {
    "title": "selector | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilitycustomaction/1620498-selector",
    "html": "Discussion\n\nThe signature of the selector must take one of the following forms:\n\n- (BOOL)myPerformActionMethod\n- (BOOL)myPerformActionMethod:(UIAccessibilityCustomAction *)action\n\n\nWhen the user selects a custom action, the assistive technology calls the specified method of the object in the target property. Use your method to perform the indicated action.\n\nSee Also\nAccessing the action parameters\nvar name: String\nThe localized name of the action.\nvar attributedName: NSAttributedString\nThe localized name of the action as an attributed string.\nvar image: UIImage?\nAn image that represents the action in assistive apps.\nvar actionHandler: UIAccessibilityCustomAction.Handler?\nA handler to perform for the action.\nvar target: AnyObject?\nThe object that performs the action.\ntypealias UIAccessibilityCustomAction.Handler\nA closure type that defines a handler to perform for an action."
  },
  {
    "title": "isVoiceOverRunning | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibility/1615187-isvoiceoverrunning",
    "html": "Discussion\n\nYou can use this function to customize your app’s UI specifically for VoiceOver users. For example, you might want UI elements that usually disappear quickly to persist onscreen for VoiceOver users. Note that you can also listen for the voiceOverStatusDidChangeNotification notification to determine when VoiceOver starts and stops.\n\nSee Also\nCapabilities\nstatic var isAssistiveTouchRunning: Bool\nA Boolean value that indicates whether AssistiveTouch is in an enabled state.\nstatic var isBoldTextEnabled: Bool\nA Boolean value that indicates whether the Bold Text setting is in an enabled state.\nstatic var isClosedCaptioningEnabled: Bool\nA Boolean value that indicates whether the Closed Captions + SDH setting is in an enabled state.\nstatic var isDarkerSystemColorsEnabled: Bool\nA Boolean value that indicates whether the Increase Contrast setting is in an enabled state.\nstatic var isGrayscaleEnabled: Bool\nA Boolean value that indicates whether the Color Filters and the Grayscale settings are in an enabled state.\nstatic var isGuidedAccessEnabled: Bool\nA Boolean value that indicates whether the Guided Access setting is in an enabled state.\nstatic var isInvertColorsEnabled: Bool\nA Boolean value that indicates whether the Classic Invert setting is in an enabled state.\nstatic var isMonoAudioEnabled: Bool\nA Boolean value that indicates whether the Mono Audio setting is in an enabled state.\nstatic var isOnOffSwitchLabelsEnabled: Bool\nA Boolean value that indicates whether the On/Off Labels setting is in an enabled state.\nstatic var isReduceMotionEnabled: Bool\nA Boolean value that indicates whether the Reduce Motion setting is in an enabled state.\nstatic var isReduceTransparencyEnabled: Bool\nA Boolean value that indicates whether the Reduce Transparency setting is in an enabled state.\nstatic var isShakeToUndoEnabled: Bool\nA Boolean value that indicates whether the Shake to Undo setting is in an enabled state.\nstatic var isSpeakScreenEnabled: Bool\nA Boolean value that indicates whether the Speak Screen setting is in an enabled state.\nstatic var isSpeakSelectionEnabled: Bool\nA Boolean value that indicates whether the Speak Selection setting is in an enabled state.\nstatic var isSwitchControlRunning: Bool\nA Boolean value that indicates whether the Switch Control setting is in an enabled state.\nstatic var isVideoAutoplayEnabled: Bool\nA Boolean value that indicates whether the Auto-Play Video Previews setting is in an enabled state.\nstatic var shouldDifferentiateWithoutColor: Bool\nA Boolean value that indicates whether the Differentiate Without Color setting is in an enabled state.\nstatic var buttonShapesEnabled: Bool\nA Boolean value that indicates whether the Button Shapes setting is in an enabled state.\nstatic var prefersCrossFadeTransitions: Bool\nA Boolean value that indicates whether the Reduce Motion and the Prefer Cross-Fade Transitions settings are in an enabled state."
  },
  {
    "title": "preferredSymbolConfigurationForImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3750794-preferredsymbolconfigurationfori",
    "html": "Discussion\n\nA symbol configuration defines details such as the point size, scale, text style, weight, and font of symbol image. The button uses these details to determine which variant of the image to use and how to scale or style the image.\n\nSee Also\nConfiguring images\nvar image: UIImage?\nThe foreground image the button displays.\nvar imagePadding: CGFloat\nThe distance between the button’s image and text.\nvar imagePlacement: NSDirectionalRectEdge\nThe edge against which the button places the image.\nvar imageReservation: CGFloat\nA value that reserves space for the image in the same axis as the edge against which the button places the image.\nvar imageColorTransformer: UIConfigurationColorTransformer?\nA block that transforms the image color when the button state changes."
  },
  {
    "title": "updated(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3750803-updated",
    "html": "Parameters\nbutton\n\nA button to use as a basis for the configuration.\n\nReturn Value\n\nAn updated configuration. This method preserves custom values set on the configuration, and updates default values based on the button state.\n\nSee Also\nCreating configurations\nstatic func plain() -> UIButton.Configuration\nCreates a configuration for a button with a transparent background.\nstatic func gray() -> UIButton.Configuration\nCreates a configuration for a button with a gray background.\nstatic func tinted() -> UIButton.Configuration\nCreates a configuration for a button with a tinted background color.\nstatic func filled() -> UIButton.Configuration\nCreates a configuration for a button with a background filled with the button’s tint color.\nstatic func borderless() -> UIButton.Configuration\nCreates a configuration for a button that has a borderless style.\nstatic func bordered() -> UIButton.Configuration\nCreates a configuration for a button that has a bordered style.\nstatic func borderedTinted() -> UIButton.Configuration\nCreates a configuration for a button that has a tinted, bordered style.\nstatic func borderedProminent() -> UIButton.Configuration\nCreates a configuration for a button that has a prominent, bordered style."
  },
  {
    "title": "title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3750799-title",
    "html": "Discussion\n\nThis property matches the string value of the attributedTitle property. To change the button title when the button state changes, use configurationUpdateHandler or updateConfiguration().\n\nSee Also\nConfiguring titles\nvar subtitle: String?\nThe text the subtitle label of the button displays.\nvar attributedTitle: AttributedString?\nThe text and style attributes for the button’s title label.\nvar attributedSubtitle: AttributedString?\nThe text and style attributes for the button’s subtitle label.\nvar titleTextAttributesTransformer: UIConfigurationTextAttributesTransformer?\nA structure to update the attributed title when the button state changes.\nvar subtitleTextAttributesTransformer: UIConfigurationTextAttributesTransformer?\nA structure to update the attributed subtitle when the button state changes.\nstruct UIConfigurationTextAttributesTransformer\nDefines a text transformation that can affect the visual appearance of a string.\nvar titlePadding: CGFloat\nThe distance between the title and subtitle labels.\nvar titleAlignment: UIButton.Configuration.TitleAlignment\nThe text alignment the button uses to lay out the title and subtitle.\nenum UIButton.Configuration.TitleAlignment\nSpecifies how to align a button’s title and subtitle.\nvar titleLineBreakMode: NSLineBreakMode\nThe line break mode the button uses to lay out the button’s title.\nvar subtitleLineBreakMode: NSLineBreakMode\nThe line break mode the button uses to lay out the button’s subtitle."
  },
  {
    "title": "imageReservation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/4130645-imagereservation",
    "html": "Discussion\n\nDefaults to 0. The value reserves space in the axis that corresponds to imagePlacement. If the image is larger than the reservation value in that axis, the system ignores the reservation value. Otherwise, the system centers the image in the space that the reservation value provides.\n\nIf the image is a symbol image, the system scales the reservation value with dynamic type, based on the image configuration.\n\nSee Also\nConfiguring images\nvar image: UIImage?\nThe foreground image the button displays.\nvar imagePadding: CGFloat\nThe distance between the button’s image and text.\nvar imagePlacement: NSDirectionalRectEdge\nThe edge against which the button places the image.\nvar imageColorTransformer: UIConfigurationColorTransformer?\nA block that transforms the image color when the button state changes.\nvar preferredSymbolConfigurationForImage: UIImage.SymbolConfiguration?\nA requested configuration object for the button symbol image."
  },
  {
    "title": "borderedProminent() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3869629-borderedprominent",
    "html": "Return Value\n\nA new configuration object.\n\nDiscussion\n\nThis style provides an alternative name for the filled() style.\n\nSee Also\nCreating configurations\nstatic func plain() -> UIButton.Configuration\nCreates a configuration for a button with a transparent background.\nstatic func gray() -> UIButton.Configuration\nCreates a configuration for a button with a gray background.\nstatic func tinted() -> UIButton.Configuration\nCreates a configuration for a button with a tinted background color.\nstatic func filled() -> UIButton.Configuration\nCreates a configuration for a button with a background filled with the button’s tint color.\nstatic func borderless() -> UIButton.Configuration\nCreates a configuration for a button that has a borderless style.\nstatic func bordered() -> UIButton.Configuration\nCreates a configuration for a button that has a bordered style.\nstatic func borderedTinted() -> UIButton.Configuration\nCreates a configuration for a button that has a tinted, bordered style.\nfunc updated(for: UIButton) -> UIButton.Configuration\nReturns a copy of the configuration, updated for the given button."
  },
  {
    "title": "tinted() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3750798-tinted",
    "html": "Return Value\n\nA new configuration object.\n\nSee Also\nCreating configurations\nstatic func plain() -> UIButton.Configuration\nCreates a configuration for a button with a transparent background.\nstatic func gray() -> UIButton.Configuration\nCreates a configuration for a button with a gray background.\nstatic func filled() -> UIButton.Configuration\nCreates a configuration for a button with a background filled with the button’s tint color.\nstatic func borderless() -> UIButton.Configuration\nCreates a configuration for a button that has a borderless style.\nstatic func bordered() -> UIButton.Configuration\nCreates a configuration for a button that has a bordered style.\nstatic func borderedTinted() -> UIButton.Configuration\nCreates a configuration for a button that has a tinted, bordered style.\nstatic func borderedProminent() -> UIButton.Configuration\nCreates a configuration for a button that has a prominent, bordered style.\nfunc updated(for: UIButton) -> UIButton.Configuration\nReturns a copy of the configuration, updated for the given button."
  },
  {
    "title": "backgroundRect(forBounds:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/1624015-backgroundrect",
    "html": "Parameters\nbounds\n\nThe bounding rectangle of the receiver.\n\nReturn Value\n\nThe bounds rectangle in which to draw any standard button content.\n\nDiscussion\n\nThe default implementation of this method returns the value in the bounds parameter. This rectangle represents the area in which the button draws its standard background content. Subclasses that provide custom background adornments can override this method and return a modified bounds rectangle to prevent the button from drawing over any custom content.\n\nSee Also\nDimensions\nfunc contentRect(forBounds: CGRect) -> CGRect\nReturns the rectangle in which the receiver draws its entire content.\nDeprecated\nfunc titleRect(forContentRect: CGRect) -> CGRect\nReturns the rectangle in which the receiver draws its title.\nDeprecated\nfunc imageRect(forContentRect: CGRect) -> CGRect\nReturns the rectangle in which the receiver draws its image.\nDeprecated"
  },
  {
    "title": "Notification dictionary keys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/accessibility_for_uikit/notification_dictionary_keys",
    "html": "Topics\nNotification keys\nstatic let announcementStringValueUserInfoKey: String\nThe text of the announcement.\nstatic let announcementWasSuccessfulUserInfoKey: String\nA Boolean value that indicates whether the announcement is successful.\nstatic let focusedElementUserInfoKey: String\nThe element currently in focus by the assistive app.\nstatic let unfocusedElementUserInfoKey: String\nThe element previously in focus by the assistive app.\nstatic let assistiveTechnologyUserInfoKey: String\nThe identifier of the assistive app.\nstruct UIAccessibility.AssistiveTechnologyIdentifier\nIdentifiers for assistive apps.\nSee Also\nNotifications\nNotification names\nThe names of notifications that the accessibility system generates.\nstatic func post(notification: UIAccessibility.Notification, argument: Any?)\nPosts a notification to assistive apps."
  },
  {
    "title": "UIWindowSceneGeometryPreferences | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscenegeometrypreferences",
    "html": "Topics\nGeometry preferences\nUIWindowSceneGeometryPreferencesMac\nAn object that represents the geometry preferences for a window scene in an app built with Mac Catalyst.\nUIWindowSceneGeometryPreferencesIOS\nAn object that represents the geometry preferences for a window scene in an iOS app.\nRelationships\nInherits From\nNSObject\nSee Also\nWorking with window geometry\neffectiveGeometry\nThe current values for the window scene’s geometry in system space.\n- requestGeometryUpdateWithPreferences:errorHandler:\nRequests an update to the window scene’s geometry using the specified geometry preferences object.\nUIWindowSceneGeometry\nAn object that provides geometry information about the window scene.\nUIWindowSceneGeometryPreferencesIOS\nAn object that represents the geometry preferences for a window scene in an iOS app.\nUIWindowSceneGeometryPreferencesMac\nAn object that represents the geometry preferences for a window scene in an app built with Mac Catalyst.\nUIProposedSceneSizeNoPreference\nBeta"
  },
  {
    "title": "post(notification:argument:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibility/1615194-post",
    "html": "Parameters\nnotification\n\nThe notification to post (see “Notifications” in UIAccessibility for a list of notifications).\n\nargument\n\nThe argument specified by the notification. Pass nil unless a notification specifies otherwise.\n\nDiscussion\n\nYour application might need to post accessibility notifications if you have user interface components that change very frequently or that appear and disappear.\n\nSee Also\nApp notifications\nstruct UIAccessibility.Notification\nAn accessibility notification that an app can send."
  },
  {
    "title": "convertToScreenCoordinates(_:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibility/1615145-converttoscreencoordinates",
    "html": "Parameters\nrect\n\nA rectangle specified in the coordinate system of the specified view.\n\nview\n\nThe view that contains the specified rectangle. This parameter must not be nil.\n\nReturn Value\n\nThe rectangle in screen coordinates.\n\nDiscussion\n\nUse this function to convert accessibility frame rectangles to screen coordinates.\n\nSee Also\nConversions\nstatic func convertToScreenCoordinates(UIBezierPath, in: UIView) -> UIBezierPath\nConverts the specified path object to screen coordinates and returns a new path object with the results."
  },
  {
    "title": "UIUserInterfaceStyle.light | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiuserinterfacestyle/light",
    "html": "See Also\nInterface styles\ncase unspecified\nAn unspecified interface style.\ncase dark\nThe dark interface style."
  },
  {
    "title": "UIButton.Role.normal | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/role/normal",
    "html": "See Also\nButton Roles\ncase primary\nA button role that responds to a primary key press.\ncase cancel\nA button role that responds to a cancel action.\ncase destructive\nA button role with a red background color."
  },
  {
    "title": "UIButton.Role.destructive | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/role/destructive",
    "html": "See Also\nButton Roles\ncase normal\nA button role for a default button style.\ncase primary\nA button role that responds to a primary key press.\ncase cancel\nA button role that responds to a cancel action."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3784610-hashvalue",
    "html": "Relationships\nFrom Protocol\nHashable\nSee Also\nComparing configurations\nstatic func == (UIButton.Configuration, UIButton.Configuration) -> Bool\nIndicates whether two button configurations are equal.\nstatic func != (UIButton.Configuration, UIButton.Configuration) -> Bool\nIndicates whether two button configurations are unequal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the button configuration by feeding them into the given hash function."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3784609-hash",
    "html": "Relationships\nFrom Protocol\nHashable\nSee Also\nComparing configurations\nstatic func == (UIButton.Configuration, UIButton.Configuration) -> Bool\nIndicates whether two button configurations are equal.\nstatic func != (UIButton.Configuration, UIButton.Configuration) -> Bool\nIndicates whether two button configurations are unequal.\nvar hashValue: Int\nThe hash value of the configuration."
  },
  {
    "title": "automaticallyUpdateForSelection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3869627-automaticallyupdateforselection",
    "html": "Discussion\n\nThe default value is true for the plain(), gray(), and tinted() configurations. Set this value to false to customize the selection behavior."
  },
  {
    "title": "indicatorColorTransformer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/4044366-indicatorcolortransformer",
    "html": "Discussion\n\nUse this color transformer to set a custom color for indicator. For example, the following code uses a grayscale color for the indicator instead of the default color.\n\nvar config = UIButton.Configuration.filled()\nconfig.indicatorColorTransformer = UIConfigurationColorTransformer.grayscale\n\n\nSee Also\nConfiguring the indicator\nvar indicator: UIButton.Configuration.Indicator\nThe style of the indicator that appears on the button.\nenum UIButton.Configuration.Indicator\nConstants that determine the style of the indicator that appears on a button."
  },
  {
    "title": "indicator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/4044365-indicator",
    "html": "Discussion\n\nUse this property to control the style of the indicator that appears on the trailing edge of the button. For example, the following code disables the indicator by setting this style to UIButton.Configuration.Indicator.none.\n\nvar config = UIButton.Configuration.filled()\nconfig.indicator = .none\n\n\nSee Also\nConfiguring the indicator\nenum UIButton.Configuration.Indicator\nConstants that determine the style of the indicator that appears on a button.\nvar indicatorColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the indicator color."
  },
  {
    "title": "UIButton.Configuration.MacIdiomStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/macidiomstyle",
    "html": "Overview\n\nIf you build your app with Mac Catalyst, you can use these styles to configure how your app displays a button when running on a Mac. To opt in to these styles, choose Optimize Interface for Mac in you project’s general settings.\n\nIf you’re configuring your button in Interface Builder, you can choose a style from the Mac Style pop-up menu in the Attributes inspector.\n\nTopics\nButton styles\ncase automatic\nThe button has a style that matches other content in the button configuration.\ncase bordered\nThe button has a bordered style.\ncase borderless\nThe button has a borderless style.\ncase borderlessTinted\nThe button has a tinted, borderless style.\nComparisons\nstatic func == (UIButton.Configuration.MacIdiomStyle, UIButton.Configuration.MacIdiomStyle) -> Bool\nIndicates whether two button styles are equal.\nstatic func != (UIButton.Configuration.MacIdiomStyle, UIButton.Configuration.MacIdiomStyle) -> Bool\nIndicates whether two button styles are unequal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the button style by feeding them into the given hash function.\nvar hashValue: Int\nThe hashed value of the button style.\nSee Also\nConfiguring the appearance on macOS\nvar macIdiomStyle: UIButton.Configuration.MacIdiomStyle\nThe style to use when this button appears in macOS."
  },
  {
    "title": "UIButton.Configuration.CornerStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/cornerstyle",
    "html": "Overview\n\nUse this property to control how the button uses the cornerRadius property of the button’s background.\n\nTopics\nCorner styles\ncase dynamic\nA style that adjusts the background corner radius for dynamic type.\ncase fixed\nA style that uses the background corner radius without modification.\ncase capsule\nA style that ignores the background corner radius and uses a corner radius that generates a capsule.\ncase large\nA style that ignores the background corner radius and uses a large system-defined corner radius.\ncase medium\nA style that ignores the background corner radius and uses a medium system-defined corner radius.\ncase small\nA style that ignores the background corner radius and uses a small system-defined corner radius.\nComparisons\nstatic func == (UIButton.Configuration.CornerStyle, UIButton.Configuration.CornerStyle) -> Bool\nIndicates whether two corner styles are equal.\nstatic func != (UIButton.Configuration.CornerStyle, UIButton.Configuration.CornerStyle) -> Bool\nIndicates whether two corner styles are unequal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the corner style by feeding them into the given hash function.\nvar hashValue: Int\nThe hashed value of the corner style.\nSee Also\nConfiguring the button background\nvar background: UIBackgroundConfiguration\nThe configuration to customize the button background.\nvar cornerStyle: UIButton.Configuration.CornerStyle\nThe button style that controls the display behavior of the background corner radius."
  },
  {
    "title": "activityIndicatorColorTransformer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3869626-activityindicatorcolortransforme",
    "html": "See Also\nConfiguring the activity indicator\nvar showsActivityIndicator: Bool\nA Boolean value that determines whether the button displays an activity indicator instead of an image."
  },
  {
    "title": "background | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3750780-background",
    "html": "Discussion\n\nThe button lays out foreground configuration elements such as title, subtitle, and image on top of background elements. Use this property for detailed control over the background.\n\nSee Also\nConfiguring the button background\nvar cornerStyle: UIButton.Configuration.CornerStyle\nThe button style that controls the display behavior of the background corner radius.\nenum UIButton.Configuration.CornerStyle\nSettings that determine the appearance of the background corner radius."
  },
  {
    "title": "UIApplicationShortcutIcon.IconType.contact | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplicationshortcuticon/icontype/contact",
    "html": "Discussion"
  },
  {
    "title": "UIApplicationShortcutIcon.IconType.mail | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplicationshortcuticon/icontype/mail",
    "html": "Discussion"
  },
  {
    "title": "UIPrintRenderingQuality.responsive | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprintrenderingquality/responsive",
    "html": "Discussion\n\nUse this option if you determine that rendering at the best quality using UIPrintRenderingQuality.best reduces the responsiveness of the user interface."
  },
  {
    "title": "init(userActivity:options:preview:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscene/activationconfiguration/3752777-init",
    "html": "Parameters\nuserActivity\n\nThe user activity used to request a scene.\n\noptions\n\nOptions for customizing the scene request. If you don’t provide options, the system uses the default options.\n\npreview\n\nAn optional targeted preview that the system uses to animate the transition to the new scene."
  },
  {
    "title": "UIScrollViewAccessibilityDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollviewaccessibilitydelegate",
    "html": "Topics\nProviding descriptive information\nfunc accessibilityScrollStatus(for: UIScrollView) -> String?\nReturns a string describing the content at the current offset in the scroll view.\nfunc accessibilityAttributedScrollStatus(for: UIScrollView) -> NSAttributedString?\nReturns an attributed string describing the content at the current offset in the scroll view.\nRelationships\nInherits From\nUIScrollViewDelegate\nSee Also\nElements\nclass UIAccessibilityElement\nAn element that should be accessible to users with disabilities, but that isn’t accessible by default.\nprotocol UIPickerViewAccessibilityDelegate\nA set of methods you can implement to provide accessibility information for individual components of a picker view."
  },
  {
    "title": "UIPickerViewAccessibilityDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipickerviewaccessibilitydelegate",
    "html": "Topics\nProviding descriptive information\nfunc pickerView(UIPickerView, accessibilityLabelForComponent: Int) -> String?\nReturns a string that identifies the picker view component.\nfunc pickerView(UIPickerView, accessibilityAttributedLabelForComponent: Int) -> NSAttributedString?\nReturns an attributed string that identifies the picker view component.\nfunc pickerView(UIPickerView, accessibilityHintForComponent: Int) -> String?\nReturns a string that describes the result of performing an action on the component.\nfunc pickerView(UIPickerView, accessibilityAttributedHintForComponent: Int) -> NSAttributedString?\nReturns an attributed string that describes the result of performing an action on the specified component.\nfunc pickerView(UIPickerView, accessibilityUserInputLabelsForComponent: Int) -> [String]\nfunc pickerView(UIPickerView, accessibilityAttributedUserInputLabelsForComponent: Int) -> [NSAttributedString]\nRelationships\nInherits From\nUIPickerViewDelegate\nSee Also\nElements\nclass UIAccessibilityElement\nAn element that should be accessible to users with disabilities, but that isn’t accessible by default.\nprotocol UIScrollViewAccessibilityDelegate\nA set of methods you can implement to provide accessibility information for a scroll view."
  },
  {
    "title": "UIAccessibilityContainerDataTable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilitycontainerdatatable",
    "html": "Topics\nProviding cell elements\nfunc accessibilityDataTableCellElement(forRow: Int, column: Int) -> UIAccessibilityContainerDataTableCell?\nReturns the accessibility element for the specified cell.\n\nRequired\n\nProviding the table dimensions\nfunc accessibilityColumnCount() -> Int\nReturns the total number of columns in the table.\n\nRequired\n\nfunc accessibilityRowCount() -> Int\nReturns the total number of rows in the table.\n\nRequired\n\nProviding header elements\nfunc accessibilityHeaderElements(forColumn: Int) -> [UIAccessibilityContainerDataTableCell]?\nReturns the accessibility element for the specified column header.\nfunc accessibilityHeaderElements(forRow: Int) -> [UIAccessibilityContainerDataTableCell]?\nReturns the accessibility element for the specified row header.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nContainers\nprotocol UIAccessibilityContainerDataTableCell\nMethods that provide the location of a cell in a table.\nenum UIAccessibilityContainerType\nConstants that indicate the type of content in a data-based container."
  },
  {
    "title": "UIAccessibilityContainerDataTableCell | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilitycontainerdatatablecell",
    "html": "Topics\nGetting the rows and columns\nfunc accessibilityColumnRange() -> NSRange\nReturns the columns spanned by the cell.\n\nRequired\n\nfunc accessibilityRowRange() -> NSRange\nReturns the visible range of rows.\n\nRequired\n\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nContainers\nprotocol UIAccessibilityContainerDataTable\nMethods that convey information about the contents of a table.\nenum UIAccessibilityContainerType\nConstants that indicate the type of content in a data-based container."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscene/geometrypreferences/mac/4047542-init",
    "html": "See Also\nCreating a geometry preferences object\ninit(systemFrame: CGRect)\nInitializes a new window scene geometry preferences object with the specified window frame."
  },
  {
    "title": "columnTerminators(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstexttab/1535107-columnterminators",
    "html": "Parameters\naLocale\n\nThe locale to use when determining the terminators. Specify nil to use the system’s current locale. You can get the user’s locale using the current method of NSLocale.\n\nReturn Value\n\nThe characters for the column terminators.\n\nDiscussion\n\nThe returned value can be used as the value for columnTerminators to make a decimal tab stop.\n\nSee Also\nGetting text tab information\nvar alignment: NSTextAlignment\nThe text alignment of the text tab.\nvar options: [NSTextTab.OptionKey : Any]\nThe dictionary of attributes for the text tab."
  },
  {
    "title": "init(textAlignment:location:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstexttab/1526080-init",
    "html": "Parameters\nalignment\n\nThe alignment of the text.\n\nloc\n\nThe position of the text tab on the ruler, relative to the back margin.\n\noptions\n\nOptions to apply to the text tab.\n\nReturn Value\n\nAn initialized text tab.\n\nDiscussion\n\nThe text alignment is used to determine the position of text inside the tab column. See NSParagraphStyle.TextTabType for a mapping between alignments and tab stop types"
  },
  {
    "title": "UIContextMenuConfiguration.ElementOrder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontextmenuconfiguration/elementorder",
    "html": "Topics\nConstants\ncase automatic\nA constant that allows the system to choose an ordering strategy according to the current context.\ncase priority\nA constant that displays menu elements according to their priority.\ncase fixed\nA constant that displays menu elements in a fixed order.\nRelationships\nConforms To\nSendable\nSee Also\nSpecifying the order of menu elements\nvar preferredMenuElementOrder: UIContextMenuConfiguration.ElementOrder\nThe preferred menu-element ordering strategy for the menu."
  },
  {
    "title": "contentInsets | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3750784-contentinsets",
    "html": "Discussion\n\nA button has a default inset based on its styling. This property is an additional inset applied after that default inset.\n\nSee Also\nConfiguring layout\nvar buttonSize: UIButton.Configuration.Size\nA size that requests a preferred size for the button.\nenum UIButton.Configuration.Size\nA predefined size for button elements.\nfunc setDefaultContentInsets()\nRestores the default content insets."
  },
  {
    "title": "imageColorTransformer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3750789-imagecolortransformer",
    "html": "Discussion\n\nUse this property to transform an image to, for example, a monochrome or tinted image.\n\nSee Also\nConfiguring images\nvar image: UIImage?\nThe foreground image the button displays.\nvar imagePadding: CGFloat\nThe distance between the button’s image and text.\nvar imagePlacement: NSDirectionalRectEdge\nThe edge against which the button places the image.\nvar imageReservation: CGFloat\nA value that reserves space for the image in the same axis as the edge against which the button places the image.\nvar preferredSymbolConfigurationForImage: UIImage.SymbolConfiguration?\nA requested configuration object for the button symbol image."
  },
  {
    "title": "image | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3750788-image",
    "html": "Discussion\n\nA configuration contains one image. To change the image based on button state, use configurationUpdateHandler or updateConfiguration().\n\nSee Also\nConfiguring images\nvar imagePadding: CGFloat\nThe distance between the button’s image and text.\nvar imagePlacement: NSDirectionalRectEdge\nThe edge against which the button places the image.\nvar imageReservation: CGFloat\nA value that reserves space for the image in the same axis as the edge against which the button places the image.\nvar imageColorTransformer: UIConfigurationColorTransformer?\nA block that transforms the image color when the button state changes.\nvar preferredSymbolConfigurationForImage: UIImage.SymbolConfiguration?\nA requested configuration object for the button symbol image."
  },
  {
    "title": "imagePadding | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3750790-imagepadding",
    "html": "Discussion\n\nUse this property to adjust the distance from the title and subtitle. This doesn’t affect the distance to the button’s edge.\n\nSee Also\nConfiguring images\nvar image: UIImage?\nThe foreground image the button displays.\nvar imagePlacement: NSDirectionalRectEdge\nThe edge against which the button places the image.\nvar imageReservation: CGFloat\nA value that reserves space for the image in the same axis as the edge against which the button places the image.\nvar imageColorTransformer: UIConfigurationColorTransformer?\nA block that transforms the image color when the button state changes.\nvar preferredSymbolConfigurationForImage: UIImage.SymbolConfiguration?\nA requested configuration object for the button symbol image."
  },
  {
    "title": "titleTextAttributesTransformer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3750802-titletextattributestransformer",
    "html": "See Also\nConfiguring titles\nvar title: String?\nThe text of the title label the button displays.\nvar subtitle: String?\nThe text the subtitle label of the button displays.\nvar attributedTitle: AttributedString?\nThe text and style attributes for the button’s title label.\nvar attributedSubtitle: AttributedString?\nThe text and style attributes for the button’s subtitle label.\nvar subtitleTextAttributesTransformer: UIConfigurationTextAttributesTransformer?\nA structure to update the attributed subtitle when the button state changes.\nstruct UIConfigurationTextAttributesTransformer\nDefines a text transformation that can affect the visual appearance of a string.\nvar titlePadding: CGFloat\nThe distance between the title and subtitle labels.\nvar titleAlignment: UIButton.Configuration.TitleAlignment\nThe text alignment the button uses to lay out the title and subtitle.\nenum UIButton.Configuration.TitleAlignment\nSpecifies how to align a button’s title and subtitle.\nvar titleLineBreakMode: NSLineBreakMode\nThe line break mode the button uses to lay out the button’s title.\nvar subtitleLineBreakMode: NSLineBreakMode\nThe line break mode the button uses to lay out the button’s subtitle."
  },
  {
    "title": "UIConfigurationTextAttributesTransformer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiconfigurationtextattributestransformer",
    "html": "Overview\n\nUse a transformer to affect how your attributed text appears on the UI. You provide a closure when initializing the transformer. Your closure accepts a container with the current text attributes and returns a container with the new text attributes.\n\nlet transformer = UIConfigurationTextAttributesTransformer { incoming in\n    var outgoing = incoming\n    outgoing.foregroundColor = UIColor.black\n    outgoing.font = UIFont.boldSystemFont(ofSize: 20)\n    return outgoing\n}\n\n\nTopics\nCreating a text attributes transformer\ninit((AttributeContainer) -> AttributeContainer)\nCreates a new text attributes transformer.\nDefining a text transformation\nlet transform: (AttributeContainer) -> AttributeContainer\nA closure that defines the text transformation.\nCalling a text transformer\nfunc callAsFunction(AttributeContainer) -> AttributeContainer\nCalls the transform closure of the text attributes transformer.\nSee Also\nConfiguring titles\nvar title: String?\nThe text of the title label the button displays.\nvar subtitle: String?\nThe text the subtitle label of the button displays.\nvar attributedTitle: AttributedString?\nThe text and style attributes for the button’s title label.\nvar attributedSubtitle: AttributedString?\nThe text and style attributes for the button’s subtitle label.\nvar titleTextAttributesTransformer: UIConfigurationTextAttributesTransformer?\nA structure to update the attributed title when the button state changes.\nvar subtitleTextAttributesTransformer: UIConfigurationTextAttributesTransformer?\nA structure to update the attributed subtitle when the button state changes.\nvar titlePadding: CGFloat\nThe distance between the title and subtitle labels.\nvar titleAlignment: UIButton.Configuration.TitleAlignment\nThe text alignment the button uses to lay out the title and subtitle.\nenum UIButton.Configuration.TitleAlignment\nSpecifies how to align a button’s title and subtitle.\nvar titleLineBreakMode: NSLineBreakMode\nThe line break mode the button uses to lay out the button’s title.\nvar subtitleLineBreakMode: NSLineBreakMode\nThe line break mode the button uses to lay out the button’s subtitle."
  },
  {
    "title": "attributedSubtitle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3750778-attributedsubtitle",
    "html": "Discussion\n\nThe configuration sets the subtitle property to match the string value of this attributed string. To change the button subtitle when the button state changes, use configurationUpdateHandler or updateConfiguration().\n\nSee Also\nConfiguring titles\nvar title: String?\nThe text of the title label the button displays.\nvar subtitle: String?\nThe text the subtitle label of the button displays.\nvar attributedTitle: AttributedString?\nThe text and style attributes for the button’s title label.\nvar titleTextAttributesTransformer: UIConfigurationTextAttributesTransformer?\nA structure to update the attributed title when the button state changes.\nvar subtitleTextAttributesTransformer: UIConfigurationTextAttributesTransformer?\nA structure to update the attributed subtitle when the button state changes.\nstruct UIConfigurationTextAttributesTransformer\nDefines a text transformation that can affect the visual appearance of a string.\nvar titlePadding: CGFloat\nThe distance between the title and subtitle labels.\nvar titleAlignment: UIButton.Configuration.TitleAlignment\nThe text alignment the button uses to lay out the title and subtitle.\nenum UIButton.Configuration.TitleAlignment\nSpecifies how to align a button’s title and subtitle.\nvar titleLineBreakMode: NSLineBreakMode\nThe line break mode the button uses to lay out the button’s title.\nvar subtitleLineBreakMode: NSLineBreakMode\nThe line break mode the button uses to lay out the button’s subtitle."
  },
  {
    "title": "subtitleTextAttributesTransformer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3750797-subtitletextattributestransforme",
    "html": "See Also\nConfiguring titles\nvar title: String?\nThe text of the title label the button displays.\nvar subtitle: String?\nThe text the subtitle label of the button displays.\nvar attributedTitle: AttributedString?\nThe text and style attributes for the button’s title label.\nvar attributedSubtitle: AttributedString?\nThe text and style attributes for the button’s subtitle label.\nvar titleTextAttributesTransformer: UIConfigurationTextAttributesTransformer?\nA structure to update the attributed title when the button state changes.\nstruct UIConfigurationTextAttributesTransformer\nDefines a text transformation that can affect the visual appearance of a string.\nvar titlePadding: CGFloat\nThe distance between the title and subtitle labels.\nvar titleAlignment: UIButton.Configuration.TitleAlignment\nThe text alignment the button uses to lay out the title and subtitle.\nenum UIButton.Configuration.TitleAlignment\nSpecifies how to align a button’s title and subtitle.\nvar titleLineBreakMode: NSLineBreakMode\nThe line break mode the button uses to lay out the button’s title.\nvar subtitleLineBreakMode: NSLineBreakMode\nThe line break mode the button uses to lay out the button’s subtitle."
  },
  {
    "title": "UIButton.Configuration.TitleAlignment | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/titlealignment",
    "html": "Overview\n\nIf your button displays both title and subtitle, use this enumeration to configure how the text aligns.\n\nTopics\nTitle alignments\ncase automatic\nAligns the title and subtitle based on other elements in the button configuration, like an image or activity indicator.\ncase center\nAligns the title and subtitle on their horizontal centers.\ncase leading\nAligns the title and subtitle on their leading edges.\ncase trailing\nAligns the title and subtitle on their trailing edges.\nComparisons\nstatic func == (UIButton.Configuration.TitleAlignment, UIButton.Configuration.TitleAlignment) -> Bool\nIndicates whether two title alignments are equal.\nstatic func != (UIButton.Configuration.TitleAlignment, UIButton.Configuration.TitleAlignment) -> Bool\nIndicates whether two title alignments are unequal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the title alignment by feeding them into the given hash function.\nvar hashValue: Int\nThe hashed value of the title alignment.\nSee Also\nConfiguring titles\nvar title: String?\nThe text of the title label the button displays.\nvar subtitle: String?\nThe text the subtitle label of the button displays.\nvar attributedTitle: AttributedString?\nThe text and style attributes for the button’s title label.\nvar attributedSubtitle: AttributedString?\nThe text and style attributes for the button’s subtitle label.\nvar titleTextAttributesTransformer: UIConfigurationTextAttributesTransformer?\nA structure to update the attributed title when the button state changes.\nvar subtitleTextAttributesTransformer: UIConfigurationTextAttributesTransformer?\nA structure to update the attributed subtitle when the button state changes.\nstruct UIConfigurationTextAttributesTransformer\nDefines a text transformation that can affect the visual appearance of a string.\nvar titlePadding: CGFloat\nThe distance between the title and subtitle labels.\nvar titleAlignment: UIButton.Configuration.TitleAlignment\nThe text alignment the button uses to lay out the title and subtitle.\nvar titleLineBreakMode: NSLineBreakMode\nThe line break mode the button uses to lay out the button’s title.\nvar subtitleLineBreakMode: NSLineBreakMode\nThe line break mode the button uses to lay out the button’s subtitle."
  },
  {
    "title": "titleAlignment | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3750800-titlealignment",
    "html": "Discussion\n\nThe title aligment can align the title and subtitle labels along the leading or trailing edges, or center them relative to each other.\n\nSee Also\nConfiguring titles\nvar title: String?\nThe text of the title label the button displays.\nvar subtitle: String?\nThe text the subtitle label of the button displays.\nvar attributedTitle: AttributedString?\nThe text and style attributes for the button’s title label.\nvar attributedSubtitle: AttributedString?\nThe text and style attributes for the button’s subtitle label.\nvar titleTextAttributesTransformer: UIConfigurationTextAttributesTransformer?\nA structure to update the attributed title when the button state changes.\nvar subtitleTextAttributesTransformer: UIConfigurationTextAttributesTransformer?\nA structure to update the attributed subtitle when the button state changes.\nstruct UIConfigurationTextAttributesTransformer\nDefines a text transformation that can affect the visual appearance of a string.\nvar titlePadding: CGFloat\nThe distance between the title and subtitle labels.\nenum UIButton.Configuration.TitleAlignment\nSpecifies how to align a button’s title and subtitle.\nvar titleLineBreakMode: NSLineBreakMode\nThe line break mode the button uses to lay out the button’s title.\nvar subtitleLineBreakMode: NSLineBreakMode\nThe line break mode the button uses to lay out the button’s subtitle."
  },
  {
    "title": "subtitleLineBreakMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/4130646-subtitlelinebreakmode",
    "html": "Discussion\n\nWord and character wrapping modes enable multiline text, while other modes restrict the text to a single line.\n\nThe default value is NSLineBreakMode.byWordWrapping.\n\nSee Also\nConfiguring titles\nvar title: String?\nThe text of the title label the button displays.\nvar subtitle: String?\nThe text the subtitle label of the button displays.\nvar attributedTitle: AttributedString?\nThe text and style attributes for the button’s title label.\nvar attributedSubtitle: AttributedString?\nThe text and style attributes for the button’s subtitle label.\nvar titleTextAttributesTransformer: UIConfigurationTextAttributesTransformer?\nA structure to update the attributed title when the button state changes.\nvar subtitleTextAttributesTransformer: UIConfigurationTextAttributesTransformer?\nA structure to update the attributed subtitle when the button state changes.\nstruct UIConfigurationTextAttributesTransformer\nDefines a text transformation that can affect the visual appearance of a string.\nvar titlePadding: CGFloat\nThe distance between the title and subtitle labels.\nvar titleAlignment: UIButton.Configuration.TitleAlignment\nThe text alignment the button uses to lay out the title and subtitle.\nenum UIButton.Configuration.TitleAlignment\nSpecifies how to align a button’s title and subtitle.\nvar titleLineBreakMode: NSLineBreakMode\nThe line break mode the button uses to lay out the button’s title."
  },
  {
    "title": "titleLineBreakMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/4130647-titlelinebreakmode",
    "html": "Discussion\n\nWord and character wrapping modes enable multiline text, while other modes restrict the text to a single line.\n\nThe default value is NSLineBreakMode.byWordWrapping.\n\nSee Also\nConfiguring titles\nvar title: String?\nThe text of the title label the button displays.\nvar subtitle: String?\nThe text the subtitle label of the button displays.\nvar attributedTitle: AttributedString?\nThe text and style attributes for the button’s title label.\nvar attributedSubtitle: AttributedString?\nThe text and style attributes for the button’s subtitle label.\nvar titleTextAttributesTransformer: UIConfigurationTextAttributesTransformer?\nA structure to update the attributed title when the button state changes.\nvar subtitleTextAttributesTransformer: UIConfigurationTextAttributesTransformer?\nA structure to update the attributed subtitle when the button state changes.\nstruct UIConfigurationTextAttributesTransformer\nDefines a text transformation that can affect the visual appearance of a string.\nvar titlePadding: CGFloat\nThe distance between the title and subtitle labels.\nvar titleAlignment: UIButton.Configuration.TitleAlignment\nThe text alignment the button uses to lay out the title and subtitle.\nenum UIButton.Configuration.TitleAlignment\nSpecifies how to align a button’s title and subtitle.\nvar subtitleLineBreakMode: NSLineBreakMode\nThe line break mode the button uses to lay out the button’s subtitle."
  },
  {
    "title": "imagePlacement | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3750791-imageplacement",
    "html": "Discussion\n\nUse this property to place the image along the top, leading, trailing, or bottom edge of the button.\n\nSee Also\nConfiguring images\nvar image: UIImage?\nThe foreground image the button displays.\nvar imagePadding: CGFloat\nThe distance between the button’s image and text.\nvar imageReservation: CGFloat\nA value that reserves space for the image in the same axis as the edge against which the button places the image.\nvar imageColorTransformer: UIConfigurationColorTransformer?\nA block that transforms the image color when the button state changes.\nvar preferredSymbolConfigurationForImage: UIImage.SymbolConfiguration?\nA requested configuration object for the button symbol image."
  },
  {
    "title": "bordered() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3869628-bordered",
    "html": "Return Value\n\nA new configuration object.\n\nDiscussion\n\nThis style provides an alternative name for the gray() style.\n\nSee Also\nCreating configurations\nstatic func plain() -> UIButton.Configuration\nCreates a configuration for a button with a transparent background.\nstatic func gray() -> UIButton.Configuration\nCreates a configuration for a button with a gray background.\nstatic func tinted() -> UIButton.Configuration\nCreates a configuration for a button with a tinted background color.\nstatic func filled() -> UIButton.Configuration\nCreates a configuration for a button with a background filled with the button’s tint color.\nstatic func borderless() -> UIButton.Configuration\nCreates a configuration for a button that has a borderless style.\nstatic func borderedTinted() -> UIButton.Configuration\nCreates a configuration for a button that has a tinted, bordered style.\nstatic func borderedProminent() -> UIButton.Configuration\nCreates a configuration for a button that has a prominent, bordered style.\nfunc updated(for: UIButton) -> UIButton.Configuration\nReturns a copy of the configuration, updated for the given button."
  },
  {
    "title": "borderedTinted() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3869630-borderedtinted",
    "html": "Return Value\n\nA new configuration object.\n\nDiscussion\n\nThis style provides an alternative name for the tinted() style.\n\nSee Also\nCreating configurations\nstatic func plain() -> UIButton.Configuration\nCreates a configuration for a button with a transparent background.\nstatic func gray() -> UIButton.Configuration\nCreates a configuration for a button with a gray background.\nstatic func tinted() -> UIButton.Configuration\nCreates a configuration for a button with a tinted background color.\nstatic func filled() -> UIButton.Configuration\nCreates a configuration for a button with a background filled with the button’s tint color.\nstatic func borderless() -> UIButton.Configuration\nCreates a configuration for a button that has a borderless style.\nstatic func bordered() -> UIButton.Configuration\nCreates a configuration for a button that has a bordered style.\nstatic func borderedProminent() -> UIButton.Configuration\nCreates a configuration for a button that has a prominent, bordered style.\nfunc updated(for: UIButton) -> UIButton.Configuration\nReturns a copy of the configuration, updated for the given button."
  },
  {
    "title": "filled() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3750786-filled",
    "html": "Return Value\n\nA new configuration object.\n\nSee Also\nCreating configurations\nstatic func plain() -> UIButton.Configuration\nCreates a configuration for a button with a transparent background.\nstatic func gray() -> UIButton.Configuration\nCreates a configuration for a button with a gray background.\nstatic func tinted() -> UIButton.Configuration\nCreates a configuration for a button with a tinted background color.\nstatic func borderless() -> UIButton.Configuration\nCreates a configuration for a button that has a borderless style.\nstatic func bordered() -> UIButton.Configuration\nCreates a configuration for a button that has a bordered style.\nstatic func borderedTinted() -> UIButton.Configuration\nCreates a configuration for a button that has a tinted, bordered style.\nstatic func borderedProminent() -> UIButton.Configuration\nCreates a configuration for a button that has a prominent, bordered style.\nfunc updated(for: UIButton) -> UIButton.Configuration\nReturns a copy of the configuration, updated for the given button."
  },
  {
    "title": "borderless() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3869631-borderless",
    "html": "Return Value\n\nA new configuration object.\n\nDiscussion\n\nThis style provides an alternative name for the plain() style.\n\nSee Also\nCreating configurations\nstatic func plain() -> UIButton.Configuration\nCreates a configuration for a button with a transparent background.\nstatic func gray() -> UIButton.Configuration\nCreates a configuration for a button with a gray background.\nstatic func tinted() -> UIButton.Configuration\nCreates a configuration for a button with a tinted background color.\nstatic func filled() -> UIButton.Configuration\nCreates a configuration for a button with a background filled with the button’s tint color.\nstatic func bordered() -> UIButton.Configuration\nCreates a configuration for a button that has a bordered style.\nstatic func borderedTinted() -> UIButton.Configuration\nCreates a configuration for a button that has a tinted, bordered style.\nstatic func borderedProminent() -> UIButton.Configuration\nCreates a configuration for a button that has a prominent, bordered style.\nfunc updated(for: UIButton) -> UIButton.Configuration\nReturns a copy of the configuration, updated for the given button."
  },
  {
    "title": "contentRect(forBounds:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/1624027-contentrect",
    "html": "Parameters\nbounds\n\nThe bounding rectangle for the receiver.\n\nReturn Value\n\nThe rectangle in which the receiver draws its entire content.\n\nDiscussion\n\nThe content rectangle is the area needed to display the image and title including any padding and adjustments for alignment and other settings.\n\nSee Also\nDimensions\nfunc backgroundRect(forBounds: CGRect) -> CGRect\nReturns the rectangle in which the receiver draws its background.\nDeprecated\nfunc titleRect(forContentRect: CGRect) -> CGRect\nReturns the rectangle in which the receiver draws its title.\nDeprecated\nfunc imageRect(forContentRect: CGRect) -> CGRect\nReturns the rectangle in which the receiver draws its image.\nDeprecated\nRelated Documentation\nvar contentEdgeInsets: UIEdgeInsets\nThe inset or outset margins for the rectangle surrounding all of the button’s content."
  },
  {
    "title": "titleRect(forContentRect:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/1624001-titlerect",
    "html": "Parameters\ncontentRect\n\nThe content rectangle for the receiver.\n\nReturn Value\n\nThe rectangle in which the receiver draws its title.\n\nSee Also\nDimensions\nfunc backgroundRect(forBounds: CGRect) -> CGRect\nReturns the rectangle in which the receiver draws its background.\nDeprecated\nfunc contentRect(forBounds: CGRect) -> CGRect\nReturns the rectangle in which the receiver draws its entire content.\nDeprecated\nfunc imageRect(forContentRect: CGRect) -> CGRect\nReturns the rectangle in which the receiver draws its image.\nDeprecated"
  },
  {
    "title": "plain() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3750793-plain",
    "html": "Return Value\n\nA new configuration object.\n\nSee Also\nCreating configurations\nstatic func gray() -> UIButton.Configuration\nCreates a configuration for a button with a gray background.\nstatic func tinted() -> UIButton.Configuration\nCreates a configuration for a button with a tinted background color.\nstatic func filled() -> UIButton.Configuration\nCreates a configuration for a button with a background filled with the button’s tint color.\nstatic func borderless() -> UIButton.Configuration\nCreates a configuration for a button that has a borderless style.\nstatic func bordered() -> UIButton.Configuration\nCreates a configuration for a button that has a bordered style.\nstatic func borderedTinted() -> UIButton.Configuration\nCreates a configuration for a button that has a tinted, bordered style.\nstatic func borderedProminent() -> UIButton.Configuration\nCreates a configuration for a button that has a prominent, bordered style.\nfunc updated(for: UIButton) -> UIButton.Configuration\nReturns a copy of the configuration, updated for the given button."
  },
  {
    "title": "imageRect(forContentRect:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/1624007-imagerect",
    "html": "Parameters\ncontentRect\n\nThe content rectangle for the receiver.\n\nReturn Value\n\nThe rectangle in which the receiver draws its image.\n\nSee Also\nDimensions\nfunc backgroundRect(forBounds: CGRect) -> CGRect\nReturns the rectangle in which the receiver draws its background.\nDeprecated\nfunc contentRect(forBounds: CGRect) -> CGRect\nReturns the rectangle in which the receiver draws its entire content.\nDeprecated\nfunc titleRect(forContentRect: CGRect) -> CGRect\nReturns the rectangle in which the receiver draws its title.\nDeprecated"
  },
  {
    "title": "roundedRect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/buttontype/1624029-roundedrect",
    "html": "Deprecated\n\nUse UIButton.ButtonType.system instead."
  },
  {
    "title": "setMinimumBackgroundFetchInterval(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/1623100-setminimumbackgroundfetchinterva",
    "html": "Deprecated\n\nFor apps supporting iOS 13 and higher use BGAppRefreshTask.\n\nParameters\nminimumBackgroundFetchInterval\n\nThe minimum number of seconds that must elapse before another background fetch can be initiated. This value is advisory only and does not indicate the exact amount of time expected between fetch operations.\n\nDiscussion\n\nThis property has no effect for apps that do not have the UIBackgroundModes key with the fetch value in its Info.plist file.\n\nThe default fetch interval for apps is backgroundFetchIntervalNever. Therefore, you must call this method and set a fetch interval before your app is given background execution time.\n\nSee Also\nDeprecated methods\nfunc requestSceneSessionActivation(UISceneSession?, userActivity: NSUserActivity?, options: UIScene.ActivationRequestOptions?, errorHandler: ((Error) -> Void)?)\nAsks the system to activate an existing scene, or create a new scene and associate it with your app.\nDeprecated\nfunc beginIgnoringInteractionEvents()\nTells the receiver to suspend the handling of touch-related events.\nDeprecated\nfunc endIgnoringInteractionEvents()\nTells the receiver to resume the handling of touch-related events.\nDeprecated\nfunc scheduleLocalNotification(UILocalNotification)\nSchedules a local notification for delivery at its encapsulated date and time.\nDeprecated\nfunc presentLocalNotificationNow(UILocalNotification)\nPresents a local notification immediately.\nDeprecated\nfunc cancelLocalNotification(UILocalNotification)\nCancels the delivery of the specified scheduled local notification.\nDeprecated\nfunc cancelAllLocalNotifications()\nCancels the delivery of all scheduled local notifications.\nDeprecated\nfunc setKeepAliveTimeout(TimeInterval, handler: (() -> Void)?) -> Bool\nConfigures a periodic handler for VoIP apps in older versions of iOS.\nDeprecated\nlet UIMinimumKeepAliveTimeout: TimeInterval\nThe minimum amount of time (measured in seconds) an app may run a critical background task in the background.\nDeprecated\nfunc clearKeepAliveTimeout()\nRemoves a previously installed periodic handler block.\nDeprecated\nfunc setStatusBarHidden(Bool, with: UIStatusBarAnimation)\nHides or shows the status bar, optionally animating the transition.\nDeprecated\nfunc setStatusBarStyle(UIStatusBarStyle, animated: Bool)\nSets the style of the status bar, optionally animating the transition to the new style.\nDeprecated\nfunc setStatusBarOrientation(UIInterfaceOrientation, animated: Bool)\nSets the app's status bar to the specified orientation, optionally animating the transition.\nDeprecated\nfunc registerUserNotificationSettings(UIUserNotificationSettings)\nRegisters your preferred options for notifying the user.\nDeprecated\nfunc registerForRemoteNotifications(matching: UIRemoteNotificationType)\nRegister to receive remote notifications of the specified types via Apple Push Notification service.\nDeprecated\nfunc enabledRemoteNotificationTypes() -> UIRemoteNotificationType\nReturns the types of notifications the app accepts.\nDeprecated\nstruct UIRemoteNotificationType\nConstants indicating the types of notifications the app may display to the user.\nDeprecated\nfunc openURL(URL) -> Bool\nAttempts to open the resource at the specified URL.\nDeprecated\nfunc setNewsstandIconImage(UIImage?)\nSets the icon of a Newsstand app to an image depicting the current issue of a publication.\nDeprecated"
  },
  {
    "title": "setKeepAliveTimeout(_:handler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/1622989-setkeepalivetimeout",
    "html": "Deprecated\n\nThis legacy VoIP API was deprecated in iOS 10.0. Use PushKit to develop VoIP apps.\n\nParameters\ntimeout\n\nThe maximum interval (measured in seconds) at which your app should be woken up to check its VoIP connection. The minimum acceptable timeout value is 600 seconds.\n\nkeepAliveHandler\n\nA block that performs the tasks needed to maintain your VoIP network connection. Setting this parameter to nil releases the current handler block and prevents UIKit from scheduling the next wake.\n\nReturn Value\n\ntrue if the handler was installed or false if it was not.\n\nDiscussion\n\nIn iOS 8 and later, voice-over-IP (VoIP) apps register for registerForRemoteNotifications() remote notifications instead of using this method. Using remote notifications eliminates the need for a timeout handler to check in with the VoIP service. Instead, when a calls arrives for the user, the VoIP service sends a VoIP remote notification to the user’s device. Upon receiving this notification, the device launches or wakes the app as needed so that it can handle the incoming call.\n\nIn iOS 7 and earlier, VoIP apps use this method to install a handler whose job is to maintain the app’s network connection with a VoIP server. This handler is guaranteed to be called before the specified timeout value but may be called at a slightly different time interval in order to better align execution of your handler with other system tasks, and thereby save power. Your handler has a maximum of 10 seconds to perform any needed tasks and exit. If it does not exit before time expires, the app is suspended.\n\nTimeout values and handlers are not persisted between app launches. Therefore, if your app is terminated for any reason, you must reinstall the handler during the next launch cycle.\n\nFor calls to this method to succeed, the app must have the voip value in the array associated with the UIBackgroundModes key in its Info.plist file. Calling this method replaces the previously installed handler and timeout values, if any.\n\nSee Also\nDeprecated methods\nfunc requestSceneSessionActivation(UISceneSession?, userActivity: NSUserActivity?, options: UIScene.ActivationRequestOptions?, errorHandler: ((Error) -> Void)?)\nAsks the system to activate an existing scene, or create a new scene and associate it with your app.\nDeprecated\nfunc beginIgnoringInteractionEvents()\nTells the receiver to suspend the handling of touch-related events.\nDeprecated\nfunc endIgnoringInteractionEvents()\nTells the receiver to resume the handling of touch-related events.\nDeprecated\nfunc setMinimumBackgroundFetchInterval(TimeInterval)\nSpecifies the minimum amount of time that must elapse between background fetch operations.\nDeprecated\nfunc scheduleLocalNotification(UILocalNotification)\nSchedules a local notification for delivery at its encapsulated date and time.\nDeprecated\nfunc presentLocalNotificationNow(UILocalNotification)\nPresents a local notification immediately.\nDeprecated\nfunc cancelLocalNotification(UILocalNotification)\nCancels the delivery of the specified scheduled local notification.\nDeprecated\nfunc cancelAllLocalNotifications()\nCancels the delivery of all scheduled local notifications.\nDeprecated\nlet UIMinimumKeepAliveTimeout: TimeInterval\nThe minimum amount of time (measured in seconds) an app may run a critical background task in the background.\nDeprecated\nfunc clearKeepAliveTimeout()\nRemoves a previously installed periodic handler block.\nDeprecated\nfunc setStatusBarHidden(Bool, with: UIStatusBarAnimation)\nHides or shows the status bar, optionally animating the transition.\nDeprecated\nfunc setStatusBarStyle(UIStatusBarStyle, animated: Bool)\nSets the style of the status bar, optionally animating the transition to the new style.\nDeprecated\nfunc setStatusBarOrientation(UIInterfaceOrientation, animated: Bool)\nSets the app's status bar to the specified orientation, optionally animating the transition.\nDeprecated\nfunc registerUserNotificationSettings(UIUserNotificationSettings)\nRegisters your preferred options for notifying the user.\nDeprecated\nfunc registerForRemoteNotifications(matching: UIRemoteNotificationType)\nRegister to receive remote notifications of the specified types via Apple Push Notification service.\nDeprecated\nfunc enabledRemoteNotificationTypes() -> UIRemoteNotificationType\nReturns the types of notifications the app accepts.\nDeprecated\nstruct UIRemoteNotificationType\nConstants indicating the types of notifications the app may display to the user.\nDeprecated\nfunc openURL(URL) -> Bool\nAttempts to open the resource at the specified URL.\nDeprecated\nfunc setNewsstandIconImage(UIImage?)\nSets the icon of a Newsstand app to an image depicting the current issue of a publication.\nDeprecated"
  },
  {
    "title": "UIButton.Role.cancel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/role/cancel",
    "html": "See Also\nButton Roles\ncase normal\nA button role for a default button style.\ncase primary\nA button role that responds to a primary key press.\ncase destructive\nA button role with a red background color."
  },
  {
    "title": "UIButton.Role.primary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/role/primary",
    "html": "See Also\nButton Roles\ncase normal\nA button role for a default button style.\ncase cancel\nA button role that responds to a cancel action.\ncase destructive\nA button role with a red background color."
  },
  {
    "title": "showsActivityIndicator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3750795-showsactivityindicator",
    "html": "Discussion\n\nThe button respects the imagePlacement property when positioning the activity indicator.\n\nSee Also\nConfiguring the activity indicator\nvar activityIndicatorColorTransformer: UIConfigurationColorTransformer?\nThe color transformer for resolving the color of the activity indicator."
  },
  {
    "title": "macIdiomStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3750792-macidiomstyle",
    "html": "Discussion\n\nUse this property when building your app with Mac Catalyst. The value UIButton.Configuration.MacIdiomStyle.automatic lets the system choose the appropriate style. Select a specific style to force the button to always use that style.\n\nSee Also\nConfiguring the appearance on macOS\nenum UIButton.Configuration.MacIdiomStyle\nThe button style your app uses when running in macOS."
  },
  {
    "title": "baseForegroundColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3750782-baseforegroundcolor",
    "html": "Discussion\n\nThe button configuration may transform the base color before applying it to foreground views.\n\nSee Also\nConfiguring button colors\nvar baseBackgroundColor: UIColor?\nThe untransformed color for background views."
  },
  {
    "title": "baseBackgroundColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3750781-basebackgroundcolor",
    "html": "Discussion\n\nThe button configuration may transform the base color before applying it to background elements.\n\nSee Also\nConfiguring button colors\nvar baseForegroundColor: UIColor?\nThe untransformed color for foreground views."
  },
  {
    "title": "UIApplicationShortcutIcon.IconType.love | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplicationshortcuticon/icontype/love",
    "html": "Discussion"
  },
  {
    "title": "options | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscene/activationconfiguration/3752228-options",
    "html": "Discussion\n\nThis property is optional. If you don’t specify options, the system requests a scene using the default options.\n\nSee Also\nGetting information about the activation configuration\nvar userActivity: NSUserActivity\nThe user activity used to request a scene.\nclass UIWindowScene.ActivationRequestOptions\nAn object that contains information you want the system to use when activating a new window scene.\nvar preview: UITargetedPreview?\nAn optional targeted preview that the system uses to animate the transition to the new scene."
  },
  {
    "title": "UINavigationItem.ItemStyle.browser | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uinavigationitem/itemstyle/browser",
    "html": "Discussion\n\nUse this style for apps that support history-based navigation, like web browsers. With this style, the navigation item’s title appears on the leading side of the navigation bar, and center items (centerItemGroups) appear in the center of the bar."
  },
  {
    "title": "preview | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscene/activationconfiguration/3752229-preview",
    "html": "See Also\nGetting information about the activation configuration\nvar userActivity: NSUserActivity\nThe user activity used to request a scene.\nvar options: UIWindowScene.ActivationRequestOptions?\nOptions for customizing the scene request.\nclass UIWindowScene.ActivationRequestOptions\nAn object that contains information you want the system to use when activating a new window scene."
  },
  {
    "title": "interfaceOrientation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscene/geometry/4047536-interfaceorientation",
    "html": "See Also\nAccessing scene geometry\nvar systemFrame: CGRect\nThe current frame of the scene, in system coordinates."
  },
  {
    "title": "init(systemFrame:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscene/geometrypreferences/mac/4047543-init",
    "html": "See Also\nCreating a geometry preferences object\ninit()\nInitializes a new window scene geometry preferences object."
  },
  {
    "title": "NSTextSelectionNavigation.Modifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselectionnavigation/modifier",
    "html": "Topics\nCreating a navigation modifier\ninit(rawValue: UInt)\nCreates a new navigation modifier using a raw value.\nNavigation modifier characteristics\nstatic var extend: NSTextSelectionNavigation.Modifier\nThe value that indicates the framework extends the selection by not moving the initial location while in a drag selection.\nstatic var multiple: NSTextSelectionNavigation.Modifier\nThe value that indicates the framework extends the selection visually inside the rectangular area defined by the anchor and dragged positions.\nstatic var visual: NSTextSelectionNavigation.Modifier\nThe value that indicates the framework extends the selection visually inside the rectangular area defined by the anchor and drag positions.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nSelection characteristics\nvar allowsNonContiguousRanges: Bool\nDetermines if the instance could produce selections with multiple noncontiguous selections.\nvar rotatesCoordinateSystemForLayoutOrientation: Bool\nDetermines if the framework rotates the coordinate system to match the layout orientation.\nenum NSTextSelectionNavigation.Destination\nValues that affect how the framework handles navigation across different textual boundaries during a selection.\nenum NSTextSelectionNavigation.Direction\nValues that describe the direction of a selection.\nfunc textSelection(for: NSTextSelection.Granularity, enclosing: CGPoint, inContainerAt: NSTextLocation) -> NSTextSelection?\nReturns a text selection that expands to the nearest boundaries for selection granularity and an enclosing point you specify."
  },
  {
    "title": "NSTextSelectionNavigation.Destination | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselectionnavigation/destination",
    "html": "Topics\nSelection destinations\ncase character\nThe selection moves to the next extended grapheme cluster boundary.\ncase word\nThe selection moves to the next word boundary ignoring punctuation, whitespace, and format characters preceding the next word.\ncase line\nThe selection moves to the next line boundary.\ncase sentence\nThe selection moves to the next sentence boundary, ignoring punctuation, whitespace, and format characters preceding the next sentence.\ncase paragraph\nThe selection moves to the next paragraph boundary, ignoring the end of line elastic characters and paragraph separators.\ncase container\nThe selection moves to the next container or page boundary after boundary of the current container, ignoring the end of line elastic characters.\ncase document\nThe selection moves to the document boundary.\nRelationships\nConforms To\nSendable\nSee Also\nSelection characteristics\nvar allowsNonContiguousRanges: Bool\nDetermines if the instance could produce selections with multiple noncontiguous selections.\nvar rotatesCoordinateSystemForLayoutOrientation: Bool\nDetermines if the framework rotates the coordinate system to match the layout orientation.\nstruct NSTextSelectionNavigation.Modifier\nValues that describe how the framework handles different kinds of selection modifiers.\nenum NSTextSelectionNavigation.Direction\nValues that describe the direction of a selection.\nfunc textSelection(for: NSTextSelection.Granularity, enclosing: CGPoint, inContainerAt: NSTextLocation) -> NSTextSelection?\nReturns a text selection that expands to the nearest boundaries for selection granularity and an enclosing point you specify."
  },
  {
    "title": "textSelection(for:enclosing:inContainerAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselectionnavigation/3801858-textselection",
    "html": "Parameters\ngranularity\n\nOne of the available NSTextSelection.Granularity options.\n\npoint\n\nThe point that encloses the text.\n\ncontainerLocation\n\nAn NSTextLocation that describes the container.\n\nReturn Value\n\nA new NSTextSelection, or nil if the text selection is not found.\n\nSee Also\nSelection characteristics\nvar allowsNonContiguousRanges: Bool\nDetermines if the instance could produce selections with multiple noncontiguous selections.\nvar rotatesCoordinateSystemForLayoutOrientation: Bool\nDetermines if the framework rotates the coordinate system to match the layout orientation.\nstruct NSTextSelectionNavigation.Modifier\nValues that describe how the framework handles different kinds of selection modifiers.\nenum NSTextSelectionNavigation.Destination\nValues that affect how the framework handles navigation across different textual boundaries during a selection.\nenum NSTextSelectionNavigation.Direction\nValues that describe the direction of a selection."
  },
  {
    "title": "NSTextSelectionNavigation.Direction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselectionnavigation/direction",
    "html": "Topics\nNavigation directions\ncase forward\nThe value that represents a logical forward selection based on the flow of text stored in the document.\ncase backward\nThe value that represents a backward selection based on the flow of text stored in the document.\ncase left\nThe value that represents a selection in the left direction along the current line.\ncase right\nThe value that represents a selection in the right direction along the current line.\ncase up\nThe value that represents a selection in the up direction, above the current line.\ncase down\nThe value that represents a selection in the down direction, below the current line.\nRelationships\nConforms To\nSendable\nSee Also\nSelection characteristics\nvar allowsNonContiguousRanges: Bool\nDetermines if the instance could produce selections with multiple noncontiguous selections.\nvar rotatesCoordinateSystemForLayoutOrientation: Bool\nDetermines if the framework rotates the coordinate system to match the layout orientation.\nstruct NSTextSelectionNavigation.Modifier\nValues that describe how the framework handles different kinds of selection modifiers.\nenum NSTextSelectionNavigation.Destination\nValues that affect how the framework handles navigation across different textual boundaries during a selection.\nfunc textSelection(for: NSTextSelection.Granularity, enclosing: CGPoint, inContainerAt: NSTextLocation) -> NSTextSelection?\nReturns a text selection that expands to the nearest boundaries for selection granularity and an enclosing point you specify."
  },
  {
    "title": "flushLayoutCache() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselectionnavigation/3801853-flushlayoutcache",
    "html": "Discussion\n\nYou call this method whenever the contents of the document change."
  },
  {
    "title": "UIButton.Configuration.Size | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/size",
    "html": "Overview\n\nYou can use this enumeration to choose a predefined size for elements in a button. The value you choose for button size can be effectively overridden by explicitly assigning values for configuration elements like padding, corner style, or title and subtitle font sizes.\n\nTopics\nButton sizes\ncase large\nDisplays button elements at a large size.\ncase medium\nDisplays button elements at a standard size.\ncase small\nDisplays button elements at a small size.\ncase mini\nDisplays button elements at the smallest size.\nComparisons\nstatic func == (UIButton.Configuration.Size, UIButton.Configuration.Size) -> Bool\nIndicates whether two button sizes are equal.\nstatic func != (UIButton.Configuration.Size, UIButton.Configuration.Size) -> Bool\nIndicates whether two button sizes are unequal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the button size by feeding them into the given hash function.\nvar hashValue: Int\nThe hashed value of the button size.\nSee Also\nConfiguring layout\nvar buttonSize: UIButton.Configuration.Size\nA size that requests a preferred size for the button.\nvar contentInsets: NSDirectionalEdgeInsets\nThe distance from the button’s content area to its bounds.\nfunc setDefaultContentInsets()\nRestores the default content insets."
  },
  {
    "title": "setDefaultContentInsets() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3869632-setdefaultcontentinsets",
    "html": "See Also\nConfiguring layout\nvar buttonSize: UIButton.Configuration.Size\nA size that requests a preferred size for the button.\nenum UIButton.Configuration.Size\nA predefined size for button elements.\nvar contentInsets: NSDirectionalEdgeInsets\nThe distance from the button’s content area to its bounds."
  },
  {
    "title": "buttonSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3750783-buttonsize",
    "html": "Discussion\n\nThe size indicates a system-defined size you prefer for this button. The exact size of the button may change regardless of this value.\n\nSee Also\nConfiguring layout\nenum UIButton.Configuration.Size\nA predefined size for button elements.\nvar contentInsets: NSDirectionalEdgeInsets\nThe distance from the button’s content area to its bounds.\nfunc setDefaultContentInsets()\nRestores the default content insets."
  },
  {
    "title": "resolvedInsertionLocation(for:writingDirection:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselectionnavigation/3852581-resolvedinsertionlocation",
    "html": "Parameters\ntextSelection\n\nThe text selection.\n\nwritingDirection\n\nThe NSTextSelectionNavigation.WritingDirection direction.\n\nReturn Value\n\nReturns an NSTextLocation when the textSelection.isLogical = false AND secondarySelectionLocation != nil. Otherwise, returns nil."
  },
  {
    "title": "deletionRanges(for:direction:destination:allowsDecomposition:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselectionnavigation/3801851-deletionranges",
    "html": "Parameters\ntextSelection\n\nThe text selection.\n\ndirection\n\nThe NSTextSelectionNavigation.Direction to consider when calculating the deletion ranges.\n\ndestination\n\nThe NSTextSelectionNavigation.Destination that describes the scope of the text selection to consider when calculating the deletion ranges.\n\nallowsDecomposition\n\nA Boolean value that determines if this method operates on composite characters which may be present depending on the characteristics of the script used by textSelection.\n\nReturn Value\n\nAn array of text ranges to delete.\n\nDiscussion\n\nThe selection after deletion contains a zero-length range starting at the location of the first range returned. The framework ignores the destination when textSelection has a non-empty selection. The allowsDecomposition parameter only applies to the NSTextSelectionNavigation.Direction.backward direction and NSTextSelectionNavigation.Destination.character with a zero-length selection."
  },
  {
    "title": "options | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstexttab/1534965-options",
    "html": "See Also\nGetting text tab information\nvar alignment: NSTextAlignment\nThe text alignment of the text tab.\nclass func columnTerminators(for: Locale?) -> CharacterSet\nReturns the column terminators for the specified locale."
  },
  {
    "title": "NSTextTab.OptionKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstexttab/optionkey",
    "html": "Topics\nValues\nstatic let columnTerminators: NSTextTab.OptionKey\nThe value is an NSCharacterSet object.\nInitializers\ninit(rawValue: String)\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable"
  },
  {
    "title": "alignment | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstexttab/1527212-alignment",
    "html": "See Also\nGetting text tab information\nvar options: [NSTextTab.OptionKey : Any]\nThe dictionary of attributes for the text tab.\nclass func columnTerminators(for: Locale?) -> CharacterSet\nReturns the column terminators for the specified locale."
  },
  {
    "title": "preferredMenuElementOrder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontextmenuconfiguration/3979278-preferredmenuelementorder",
    "html": "See Also\nSpecifying the order of menu elements\nenum UIContextMenuConfiguration.ElementOrder\nConstants that define the ordering strategy for menu elements in a context menu."
  },
  {
    "title": "init(identifier:previewProvider:actionProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontextmenuconfiguration/3295922-init",
    "html": "Parameters\nidentifier\n\nA unique identifier for the menu configuration object. If you want this method to generate a unique identifier for you, specify nil.\n\npreviewProvider\n\nAn optional block that returns the custom view controller that you use to preview content. If you specify nil, UIKit uses a default preview view controller.\n\nactionProvider\n\nAn optional block that provides a contextual menu to display with the preview. If you specify nil, UIKit doesn't display a contextual menu with the previewed content.\n\nReturn Value\n\nA new menu configuration object with the specified provider blocks.\n\nSee Also\nCreating the menu configuration object\ntypealias UIContextMenuContentPreviewProvider\nReturns the custom view controller to use when previewing your content.\ntypealias UIContextMenuActionProvider\nReturns an action-based contextual menu, optionally incorporating the system-suggested actions."
  },
  {
    "title": "UIContextMenuContentPreviewProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontextmenucontentpreviewprovider",
    "html": "Return Value\n\nThe view controller to display in place of the system's standard view controller. If you want UIKit to present your content using a default view controller, return nil.\n\nDiscussion\n\nUse this handler to load or create your custom view controller, configure it with your content, and return it to UIKit.\n\nSee Also\nCreating the menu configuration object\ninit(identifier: (NSCopying)?, previewProvider: UIContextMenuContentPreviewProvider?, actionProvider: UIContextMenuActionProvider?)\nCreates a menu configuration object with the specified action and preview providers.\ntypealias UIContextMenuActionProvider\nReturns an action-based contextual menu, optionally incorporating the system-suggested actions."
  },
  {
    "title": "attributedTitle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibutton/configuration/3750779-attributedtitle",
    "html": "Discussion\n\nThe configuration sets the title property to match the string value of this attributed string. To change the button title when the button state changes, use configurationUpdateHandler or updateConfiguration().\n\nSee Also\nConfiguring titles\nvar title: String?\nThe text of the title label the button displays.\nvar subtitle: String?\nThe text the subtitle label of the button displays.\nvar attributedSubtitle: AttributedString?\nThe text and style attributes for the button’s subtitle label.\nvar titleTextAttributesTransformer: UIConfigurationTextAttributesTransformer?\nA structure to update the attributed title when the button state changes.\nvar subtitleTextAttributesTransformer: UIConfigurationTextAttributesTransformer?\nA structure to update the attributed subtitle when the button state changes.\nstruct UIConfigurationTextAttributesTransformer\nDefines a text transformation that can affect the visual appearance of a string.\nvar titlePadding: CGFloat\nThe distance between the title and subtitle labels.\nvar titleAlignment: UIButton.Configuration.TitleAlignment\nThe text alignment the button uses to lay out the title and subtitle.\nenum UIButton.Configuration.TitleAlignment\nSpecifies how to align a button’s title and subtitle.\nvar titleLineBreakMode: NSLineBreakMode\nThe line break mode the button uses to lay out the button’s title.\nvar subtitleLineBreakMode: NSLineBreakMode\nThe line break mode the button uses to lay out the button’s subtitle."
  },
  {
    "title": "location(_:offsetBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontentstorage/3852571-location",
    "html": "Parameters\nlocation\n\nA starting location\n\noffset\n\nAn Integer offset into the text.\n\nReturn Value\n\nAn NSTextLocation that represents the offset starting from location, or nil if the offset you provide exceeds the bounds of the text.\n\nSee Also\nFinding ranges, locations, and offsets\nfunc adjustedRange(from: NSTextRange, forEditingTextSelection: Bool) -> NSTextRange?\nReturns the text range, if any, in the backing store that required manual adjustment after editing.\nfunc offset(from: NSTextLocation, to: NSTextLocation) -> Int\nReturns the offset between the two specified locations."
  },
  {
    "title": "UIMinimumKeepAliveTimeout | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiminimumkeepalivetimeout",
    "html": "See Also\nDeprecated methods\nfunc requestSceneSessionActivation(UISceneSession?, userActivity: NSUserActivity?, options: UIScene.ActivationRequestOptions?, errorHandler: ((Error) -> Void)?)\nAsks the system to activate an existing scene, or create a new scene and associate it with your app.\nDeprecated\nfunc beginIgnoringInteractionEvents()\nTells the receiver to suspend the handling of touch-related events.\nDeprecated\nfunc endIgnoringInteractionEvents()\nTells the receiver to resume the handling of touch-related events.\nDeprecated\nfunc setMinimumBackgroundFetchInterval(TimeInterval)\nSpecifies the minimum amount of time that must elapse between background fetch operations.\nDeprecated\nfunc scheduleLocalNotification(UILocalNotification)\nSchedules a local notification for delivery at its encapsulated date and time.\nDeprecated\nfunc presentLocalNotificationNow(UILocalNotification)\nPresents a local notification immediately.\nDeprecated\nfunc cancelLocalNotification(UILocalNotification)\nCancels the delivery of the specified scheduled local notification.\nDeprecated\nfunc cancelAllLocalNotifications()\nCancels the delivery of all scheduled local notifications.\nDeprecated\nfunc setKeepAliveTimeout(TimeInterval, handler: (() -> Void)?) -> Bool\nConfigures a periodic handler for VoIP apps in older versions of iOS.\nDeprecated\nfunc clearKeepAliveTimeout()\nRemoves a previously installed periodic handler block.\nDeprecated\nfunc setStatusBarHidden(Bool, with: UIStatusBarAnimation)\nHides or shows the status bar, optionally animating the transition.\nDeprecated\nfunc setStatusBarStyle(UIStatusBarStyle, animated: Bool)\nSets the style of the status bar, optionally animating the transition to the new style.\nDeprecated\nfunc setStatusBarOrientation(UIInterfaceOrientation, animated: Bool)\nSets the app's status bar to the specified orientation, optionally animating the transition.\nDeprecated\nfunc registerUserNotificationSettings(UIUserNotificationSettings)\nRegisters your preferred options for notifying the user.\nDeprecated\nfunc registerForRemoteNotifications(matching: UIRemoteNotificationType)\nRegister to receive remote notifications of the specified types via Apple Push Notification service.\nDeprecated\nfunc enabledRemoteNotificationTypes() -> UIRemoteNotificationType\nReturns the types of notifications the app accepts.\nDeprecated\nstruct UIRemoteNotificationType\nConstants indicating the types of notifications the app may display to the user.\nDeprecated\nfunc openURL(URL) -> Bool\nAttempts to open the resource at the specified URL.\nDeprecated\nfunc setNewsstandIconImage(UIImage?)\nSets the icon of a Newsstand app to an image depicting the current issue of a publication.\nDeprecated"
  },
  {
    "title": "setStatusBarStyle(_:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/1622923-setstatusbarstyle",
    "html": "Parameters\nstatusBarStyle\n\nA constant that specifies a style for the status bar. See the descriptions of the constants in UIStatusBarStyle for details.\n\nanimated\n\ntrue if the transition to the new style should be animated; otherwise false .\n\nDiscussion\n\nThe animation slides the status bar out toward the top of the interface.\n\nIn iOS 7 and later, status bar behavior is determined by view controllers, and so calling this method has no effect by default. When view controller-based status bar appearance is disabled, this method behaves normally. To opt out of the view controller-based status bar appearance behavior, you must add the UIViewControllerBasedStatusBarAppearance key with a value of false to your app’s Info.plist file, but doing so is not recommended.\n\nSee Also\nDeprecated methods\nfunc requestSceneSessionActivation(UISceneSession?, userActivity: NSUserActivity?, options: UIScene.ActivationRequestOptions?, errorHandler: ((Error) -> Void)?)\nAsks the system to activate an existing scene, or create a new scene and associate it with your app.\nDeprecated\nfunc beginIgnoringInteractionEvents()\nTells the receiver to suspend the handling of touch-related events.\nDeprecated\nfunc endIgnoringInteractionEvents()\nTells the receiver to resume the handling of touch-related events.\nDeprecated\nfunc setMinimumBackgroundFetchInterval(TimeInterval)\nSpecifies the minimum amount of time that must elapse between background fetch operations.\nDeprecated\nfunc scheduleLocalNotification(UILocalNotification)\nSchedules a local notification for delivery at its encapsulated date and time.\nDeprecated\nfunc presentLocalNotificationNow(UILocalNotification)\nPresents a local notification immediately.\nDeprecated\nfunc cancelLocalNotification(UILocalNotification)\nCancels the delivery of the specified scheduled local notification.\nDeprecated\nfunc cancelAllLocalNotifications()\nCancels the delivery of all scheduled local notifications.\nDeprecated\nfunc setKeepAliveTimeout(TimeInterval, handler: (() -> Void)?) -> Bool\nConfigures a periodic handler for VoIP apps in older versions of iOS.\nDeprecated\nlet UIMinimumKeepAliveTimeout: TimeInterval\nThe minimum amount of time (measured in seconds) an app may run a critical background task in the background.\nDeprecated\nfunc clearKeepAliveTimeout()\nRemoves a previously installed periodic handler block.\nDeprecated\nfunc setStatusBarHidden(Bool, with: UIStatusBarAnimation)\nHides or shows the status bar, optionally animating the transition.\nDeprecated\nfunc setStatusBarOrientation(UIInterfaceOrientation, animated: Bool)\nSets the app's status bar to the specified orientation, optionally animating the transition.\nDeprecated\nfunc registerUserNotificationSettings(UIUserNotificationSettings)\nRegisters your preferred options for notifying the user.\nDeprecated\nfunc registerForRemoteNotifications(matching: UIRemoteNotificationType)\nRegister to receive remote notifications of the specified types via Apple Push Notification service.\nDeprecated\nfunc enabledRemoteNotificationTypes() -> UIRemoteNotificationType\nReturns the types of notifications the app accepts.\nDeprecated\nstruct UIRemoteNotificationType\nConstants indicating the types of notifications the app may display to the user.\nDeprecated\nfunc openURL(URL) -> Bool\nAttempts to open the resource at the specified URL.\nDeprecated\nfunc setNewsstandIconImage(UIImage?)\nSets the icon of a Newsstand app to an image depicting the current issue of a publication.\nDeprecated\nRelated Documentation\nvar statusBarStyle: UIStatusBarStyle\nThe current style of the status bar."
  },
  {
    "title": "setNewsstandIconImage(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/1623016-setnewsstandiconimage",
    "html": "Parameters\nimage\n\nAn image to use as the icon of a Newsstand app. Pass nil to clear the currently set image and revert to the icon stored in the app bundle.\n\nDiscussion\n\nThe Newsstand app icon is typically downloaded from the app’s server for each issue.\n\nSee Also\nDeprecated methods\nfunc requestSceneSessionActivation(UISceneSession?, userActivity: NSUserActivity?, options: UIScene.ActivationRequestOptions?, errorHandler: ((Error) -> Void)?)\nAsks the system to activate an existing scene, or create a new scene and associate it with your app.\nDeprecated\nfunc beginIgnoringInteractionEvents()\nTells the receiver to suspend the handling of touch-related events.\nDeprecated\nfunc endIgnoringInteractionEvents()\nTells the receiver to resume the handling of touch-related events.\nDeprecated\nfunc setMinimumBackgroundFetchInterval(TimeInterval)\nSpecifies the minimum amount of time that must elapse between background fetch operations.\nDeprecated\nfunc scheduleLocalNotification(UILocalNotification)\nSchedules a local notification for delivery at its encapsulated date and time.\nDeprecated\nfunc presentLocalNotificationNow(UILocalNotification)\nPresents a local notification immediately.\nDeprecated\nfunc cancelLocalNotification(UILocalNotification)\nCancels the delivery of the specified scheduled local notification.\nDeprecated\nfunc cancelAllLocalNotifications()\nCancels the delivery of all scheduled local notifications.\nDeprecated\nfunc setKeepAliveTimeout(TimeInterval, handler: (() -> Void)?) -> Bool\nConfigures a periodic handler for VoIP apps in older versions of iOS.\nDeprecated\nlet UIMinimumKeepAliveTimeout: TimeInterval\nThe minimum amount of time (measured in seconds) an app may run a critical background task in the background.\nDeprecated\nfunc clearKeepAliveTimeout()\nRemoves a previously installed periodic handler block.\nDeprecated\nfunc setStatusBarHidden(Bool, with: UIStatusBarAnimation)\nHides or shows the status bar, optionally animating the transition.\nDeprecated\nfunc setStatusBarStyle(UIStatusBarStyle, animated: Bool)\nSets the style of the status bar, optionally animating the transition to the new style.\nDeprecated\nfunc setStatusBarOrientation(UIInterfaceOrientation, animated: Bool)\nSets the app's status bar to the specified orientation, optionally animating the transition.\nDeprecated\nfunc registerUserNotificationSettings(UIUserNotificationSettings)\nRegisters your preferred options for notifying the user.\nDeprecated\nfunc registerForRemoteNotifications(matching: UIRemoteNotificationType)\nRegister to receive remote notifications of the specified types via Apple Push Notification service.\nDeprecated\nfunc enabledRemoteNotificationTypes() -> UIRemoteNotificationType\nReturns the types of notifications the app accepts.\nDeprecated\nstruct UIRemoteNotificationType\nConstants indicating the types of notifications the app may display to the user.\nDeprecated\nfunc openURL(URL) -> Bool\nAttempts to open the resource at the specified URL.\nDeprecated"
  },
  {
    "title": "statusBarOrientationUserInfoKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/1623038-statusbarorientationuserinfokey",
    "html": "See Also\nDeprecated properties\nvar applicationIconBadgeNumber: Int\nThe number currently set as the badge of the app icon on the Home screen.\nDeprecated\nclass let statusBarFrameUserInfoKey: String\nA key whose value is an NSValue object that encapsulates a CGRect structure expressing the location and size of the new status bar frame. This key is used with didChangeStatusBarFrameNotification and willChangeStatusBarFrameNotification notifications.\nDeprecated\nvar currentUserNotificationSettings: UIUserNotificationSettings?\nReturns the user notification settings for the app.\nDeprecated\nvar isIgnoringInteractionEvents: Bool\nA Boolean value that indicates whether the receiver is ignoring events initiated by touches on the screen.\nDeprecated\nvar isNetworkActivityIndicatorVisible: Bool\nA Boolean value that turns an indicator of network activity on or off.\nDeprecated\nvar isStatusBarHidden: Bool\nA Boolean value that determines whether the status bar is hidden.\nDeprecated\nvar keyWindow: UIWindow?\nThe app's key window.\nDeprecated\nvar scheduledLocalNotifications: [UILocalNotification]?\nAll currently scheduled local notifications.\nDeprecated\nvar statusBarFrame: CGRect\nThe frame rectangle defining the area of the status bar.\nDeprecated\nvar statusBarOrientation: UIInterfaceOrientation\nThe current orientation of the app’s status bar.\nDeprecated\nvar statusBarOrientationAnimationDuration: TimeInterval\nThe animation duration in seconds for the status bar during a 90 degree orientation change.\nDeprecated\nvar statusBarStyle: UIStatusBarStyle\nThe current style of the status bar.\nDeprecated\nvar windows: [UIWindow]\nThe app’s visible and hidden windows.\nDeprecated"
  },
  {
    "title": "tailIndent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsmutableparagraphstyle/1531666-tailindent",
    "html": "Discussion\n\nIf positive, this value is the distance from the leading margin (for example, the left margin in left-to-right text). If 0 or negative, it’s the distance from the trailing margin.\n\nFor example, a paragraph style designed to fit exactly in a 2-inch wide container has a head indent of 0.0 and a tail indent of 0.0. One designed to fit with a quarter-inch margin has a head indent of 0.25 and a tail indent of –0.25.\n\nSee Also\nSetting style information\nfunc setParagraphStyle(NSParagraphStyle)\nReplaces the subattributes of the paragraph with those in the specified paragraph style object.\nvar alignment: NSTextAlignment\nThe text alignment of the paragraph.\nvar firstLineHeadIndent: CGFloat\nThe indentation of the first line of the paragraph.\nvar headIndent: CGFloat\nThe indentation of the paragraph’s lines other than the first.\nvar lineHeightMultiple: CGFloat\nThe line height multiple.\nvar maximumLineHeight: CGFloat\nThe paragraph’s maximum line height.\nvar minimumLineHeight: CGFloat\nThe paragraph’s minimum line height.\nvar lineSpacing: CGFloat\nThe distance in points between the bottom of one line fragment and the top of the next.\nvar paragraphSpacing: CGFloat\nThe space after the end of the paragraph.\nvar paragraphSpacingBefore: CGFloat\nThe distance between the paragraph’s top and the beginning of its text content.\nvar baseWritingDirection: NSWritingDirection\nThe base writing direction for the paragraph."
  },
  {
    "title": "isIgnoringInteractionEvents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/2097536-isignoringinteractionevents",
    "html": "Discussion\n\nThe value of this property is\n\ntrue if the receiver is ignoring interaction events and if the nested beginIgnoringInteractionEvents() and endIgnoringInteractionEvents() calls are at least one level deep; otherwise, false.\n\nSee Also\nDeprecated properties\nvar applicationIconBadgeNumber: Int\nThe number currently set as the badge of the app icon on the Home screen.\nDeprecated\nclass let statusBarFrameUserInfoKey: String\nA key whose value is an NSValue object that encapsulates a CGRect structure expressing the location and size of the new status bar frame. This key is used with didChangeStatusBarFrameNotification and willChangeStatusBarFrameNotification notifications.\nDeprecated\nclass let statusBarOrientationUserInfoKey: String\nA key whose value is an NSNumber object that encapsulates a UIInterfaceOrientation value indicating the current orientation (see UIInterfaceOrientation). This key is used with didChangeStatusBarOrientationNotification and willChangeStatusBarOrientationNotification notifications.\nDeprecated\nvar currentUserNotificationSettings: UIUserNotificationSettings?\nReturns the user notification settings for the app.\nDeprecated\nvar isNetworkActivityIndicatorVisible: Bool\nA Boolean value that turns an indicator of network activity on or off.\nDeprecated\nvar isStatusBarHidden: Bool\nA Boolean value that determines whether the status bar is hidden.\nDeprecated\nvar keyWindow: UIWindow?\nThe app's key window.\nDeprecated\nvar scheduledLocalNotifications: [UILocalNotification]?\nAll currently scheduled local notifications.\nDeprecated\nvar statusBarFrame: CGRect\nThe frame rectangle defining the area of the status bar.\nDeprecated\nvar statusBarOrientation: UIInterfaceOrientation\nThe current orientation of the app’s status bar.\nDeprecated\nvar statusBarOrientationAnimationDuration: TimeInterval\nThe animation duration in seconds for the status bar during a 90 degree orientation change.\nDeprecated\nvar statusBarStyle: UIStatusBarStyle\nThe current style of the status bar.\nDeprecated\nvar windows: [UIWindow]\nThe app’s visible and hidden windows.\nDeprecated"
  },
  {
    "title": "setParagraphStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsmutableparagraphstyle/1533980-setparagraphstyle",
    "html": "See Also\nSetting style information\nvar alignment: NSTextAlignment\nThe text alignment of the paragraph.\nvar firstLineHeadIndent: CGFloat\nThe indentation of the first line of the paragraph.\nvar headIndent: CGFloat\nThe indentation of the paragraph’s lines other than the first.\nvar tailIndent: CGFloat\nThe trailing indentation of the paragraph.\nvar lineHeightMultiple: CGFloat\nThe line height multiple.\nvar maximumLineHeight: CGFloat\nThe paragraph’s maximum line height.\nvar minimumLineHeight: CGFloat\nThe paragraph’s minimum line height.\nvar lineSpacing: CGFloat\nThe distance in points between the bottom of one line fragment and the top of the next.\nvar paragraphSpacing: CGFloat\nThe space after the end of the paragraph.\nvar paragraphSpacingBefore: CGFloat\nThe distance between the paragraph’s top and the beginning of its text content.\nvar baseWritingDirection: NSWritingDirection\nThe base writing direction for the paragraph.\nRelated Documentation\nRuler and Paragraph Style Programming Topics"
  },
  {
    "title": "paragraphSpacing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsmutableparagraphstyle/1532528-paragraphspacing",
    "html": "Discussion\n\nThis property contains the space (measured in points) added at the end of the paragraph to separate it from the following paragraph. This value must be nonnegative. The space between paragraphs is determined by adding the previous paragraph’s paragraphSpacing and the current paragraph’s paragraphSpacingBefore.\n\nSee Also\nSetting style information\nfunc setParagraphStyle(NSParagraphStyle)\nReplaces the subattributes of the paragraph with those in the specified paragraph style object.\nvar alignment: NSTextAlignment\nThe text alignment of the paragraph.\nvar firstLineHeadIndent: CGFloat\nThe indentation of the first line of the paragraph.\nvar headIndent: CGFloat\nThe indentation of the paragraph’s lines other than the first.\nvar tailIndent: CGFloat\nThe trailing indentation of the paragraph.\nvar lineHeightMultiple: CGFloat\nThe line height multiple.\nvar maximumLineHeight: CGFloat\nThe paragraph’s maximum line height.\nvar minimumLineHeight: CGFloat\nThe paragraph’s minimum line height.\nvar lineSpacing: CGFloat\nThe distance in points between the bottom of one line fragment and the top of the next.\nvar paragraphSpacingBefore: CGFloat\nThe distance between the paragraph’s top and the beginning of its text content.\nvar baseWritingDirection: NSWritingDirection\nThe base writing direction for the paragraph."
  },
  {
    "title": "isClosable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscenewindowingbehaviors/3930375-isclosable",
    "html": "See Also\nSpecifying window behaviors\nvar isMiniaturizable: Bool\nA Boolean value that determines whether the window displays a minimize button."
  },
  {
    "title": "firstLineHeadIndent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsmutableparagraphstyle/1528392-firstlineheadindent",
    "html": "Discussion\n\nThis property contains the distance (in points) from the leading margin of a text container to the beginning of the paragraph’s first line. This value is always nonnegative.\n\nSee Also\nSetting style information\nfunc setParagraphStyle(NSParagraphStyle)\nReplaces the subattributes of the paragraph with those in the specified paragraph style object.\nvar alignment: NSTextAlignment\nThe text alignment of the paragraph.\nvar headIndent: CGFloat\nThe indentation of the paragraph’s lines other than the first.\nvar tailIndent: CGFloat\nThe trailing indentation of the paragraph.\nvar lineHeightMultiple: CGFloat\nThe line height multiple.\nvar maximumLineHeight: CGFloat\nThe paragraph’s maximum line height.\nvar minimumLineHeight: CGFloat\nThe paragraph’s minimum line height.\nvar lineSpacing: CGFloat\nThe distance in points between the bottom of one line fragment and the top of the next.\nvar paragraphSpacing: CGFloat\nThe space after the end of the paragraph.\nvar paragraphSpacingBefore: CGFloat\nThe distance between the paragraph’s top and the beginning of its text content.\nvar baseWritingDirection: NSWritingDirection\nThe base writing direction for the paragraph."
  },
  {
    "title": "textFieldDidEndEditing(_:reason:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextfielddelegate/2352220-textfielddidendediting",
    "html": "Parameters\ntextField\n\nThe text field for which editing ended.\n\nreason\n\nThe reason why editing ended. Use this field to determine whether to incorporate the text editing changes or abandon them.\n\nDiscussion\n\nThis method is called after the text field resigns its first responder status. You can use this method to update your delegate’s state information. For example, you might use this method to hide overlay views that should be visible only while editing.\n\nImplementation of this method by the delegate is optional. UIKit calls this method in preference to the textFieldDidEndEditing(_:) method.\n\nSee Also\nManaging editing\nfunc textFieldShouldBeginEditing(UITextField) -> Bool\nAsks the delegate whether to begin editing in the specified text field.\nfunc textFieldDidBeginEditing(UITextField)\nTells the delegate when editing begins in the specified text field.\nfunc textFieldShouldEndEditing(UITextField) -> Bool\nAsks the delegate whether to stop editing in the specified text field.\nfunc textFieldDidEndEditing(UITextField)\nTells the delegate when editing stops for the specified text field.\nenum UITextField.DidEndEditingReason\nConstants that indicate the reason for ending editing in a text field."
  },
  {
    "title": "UIApplicationShortcutIcon.IconType.play | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplicationshortcuticon/icontype/play",
    "html": "Discussion"
  },
  {
    "title": "UITextAlignmentLeft | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextalignment/uitextalignmentleft",
    "html": "Deprecated\n\nUse NSTextAlignmentLeft instead.\n\nSee Also\nDeprecated constants\nUITextAlignmentCenter\nAlign text equally along both sides of the center line.\nDeprecated\nUITextAlignmentRight\nAlign text along the right edge.\nDeprecated"
  },
  {
    "title": "UIApplicationShortcutIcon.IconType.compose | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplicationshortcuticon/icontype/compose",
    "html": "Discussion"
  },
  {
    "title": "UIApplicationShortcutIcon.IconType.prohibit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplicationshortcuticon/icontype/prohibit",
    "html": "Discussion"
  },
  {
    "title": "UIApplicationShortcutIcon.IconType.pause | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplicationshortcuticon/icontype/pause",
    "html": "Discussion"
  },
  {
    "title": "UIApplicationShortcutIcon.IconType.share | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplicationshortcuticon/icontype/share",
    "html": "Discussion"
  },
  {
    "title": "UIApplicationShortcutIcon.IconType.home | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplicationshortcuticon/icontype/home",
    "html": "Discussion"
  },
  {
    "title": "allowsNonContiguousRanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselectionnavigation/3801850-allowsnoncontiguousranges",
    "html": "See Also\nSelection characteristics\nvar rotatesCoordinateSystemForLayoutOrientation: Bool\nDetermines if the framework rotates the coordinate system to match the layout orientation.\nstruct NSTextSelectionNavigation.Modifier\nValues that describe how the framework handles different kinds of selection modifiers.\nenum NSTextSelectionNavigation.Destination\nValues that affect how the framework handles navigation across different textual boundaries during a selection.\nenum NSTextSelectionNavigation.Direction\nValues that describe the direction of a selection.\nfunc textSelection(for: NSTextSelection.Granularity, enclosing: CGPoint, inContainerAt: NSTextLocation) -> NSTextSelection?\nReturns a text selection that expands to the nearest boundaries for selection granularity and an enclosing point you specify."
  },
  {
    "title": "UIApplicationShortcutIcon.IconType.favorite | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplicationshortcuticon/icontype/favorite",
    "html": "Discussion"
  },
  {
    "title": "UIApplicationShortcutIcon.IconType.invitation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplicationshortcuticon/icontype/invitation",
    "html": "Discussion"
  },
  {
    "title": "hyphenationFactor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsmutableparagraphstyle/1535553-hyphenationfactor",
    "html": "Discussion\n\nValid values lie between 0.0 and 1.0 inclusive. The default value is 0.0. Hyphenation is attempted when the ratio of the text width (as broken without hyphenation) to the width of the line fragment is less than the hyphenation factor. When the paragraph’s hyphenation factor is 0.0, the layout manager’s hyphenation factor is used instead. When both are 0.0, hyphenation is disabled. This property detects the user-selected language by examining the first item in preferredLanguages.\n\nSee Also\nSetting line-break information\nvar lineBreakMode: NSLineBreakMode\nThe mode for breaking lines in the paragraph.\nvar lineBreakStrategy: NSParagraphStyle.LineBreakStrategy\nThe strategies that the text system may use to break lines while laying out the paragraph.\nvar usesDefaultHyphenation: Bool\nvar tighteningFactorForTruncation: Float\nThe threshold for using tightening as an alternative to truncation.\nvar allowsDefaultTighteningForTruncation: Bool\nA Boolean value that indicates whether the system tightens intercharacter spacing before truncating text.\nRelated Documentation\nlet kCTLanguageAttributeName: CFString\nThe name of the text language."
  },
  {
    "title": "init(dataSource:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselectionnavigation/3801854-init",
    "html": "Parameters\ndataSource\n\nAn NSTextSelectionDataSource."
  },
  {
    "title": "UIApplicationShortcutIcon.IconType.message | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplicationshortcuticon/icontype/message",
    "html": "Discussion"
  },
  {
    "title": "UIApplicationShortcutIcon.IconType.capturePhoto | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplicationshortcuticon/icontype/capturephoto",
    "html": "Discussion"
  },
  {
    "title": "UIApplicationShortcutIcon.IconType.date | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplicationshortcuticon/icontype/date",
    "html": "Discussion"
  },
  {
    "title": "enumerateEnclosingRects(forGlyphRange:withinSelectedGlyphRange:in:using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403021-enumerateenclosingrects",
    "html": "Parameters\nglyphRange\n\nThe glyph range for which to return enclosing rectangles.\n\nselectedRange\n\nSelected glyphs within glyphRange, which can affect the size of the rectangles. If not interested in selection rectangles, pass {NSNotFound, 0} as the selected range.\n\ntextContainer\n\nThe text container in which the glyphs are laid out.\n\nblock\n\nThe block to apply to the glyph range. The block has two arguments:\n\nrect\n\nThe current enclosing rectangle.\n\nstop\n\nA reference to a Boolean value. The block can set the value to true to stop further processing of the array. The stop argument is an out-only argument. You should only set this Boolean to true within the block.\n\nDiscussion\n\nThese rectangles are always in container coordinates. They can be used to draw the text background or highlight for the given range of characters. The rectangles don’t necessarily enclose glyphs that draw outside their line fragment rectangles; use boundingRect(forGlyphRange:in:) to determine the area that contains all drawing performed for a range of glyphs.\n\nIf a selected range is given in the second argument, the rectangles returned are correct for drawing the selection. Selection rectangles are generally more complicated than enclosing rectangles, and supplying a selected range determines whether the method does this extra work. This method does the minimum amount of work required to answer the question.\n\nPerforms glyph generation and layout if needed.\n\nSee Also\nPerforming advanced layout queries\nfunc boundingRect(forGlyphRange: NSRange, in: NSTextContainer) -> CGRect\nReturns the bounding rectangle for the specified glyphs in a container.\nfunc characterIndex(for: CGPoint, in: NSTextContainer, fractionOfDistanceBetweenInsertionPoints: UnsafeMutablePointer<CGFloat>?) -> Int\nReturns the index of the character that lies beneath the specified point using the specified container's coordinate system.\nfunc characterRange(forGlyphRange: NSRange, actualGlyphRange: NSRangePointer?) -> NSRange\nReturns the range of characters that correspond to the glyphs in the specified glyph range.\nfunc enumerateLineFragments(forGlyphRange: NSRange, using: (CGRect, CGRect, NSTextContainer, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates line fragments intersecting with the specified glyph range.\nfunc fractionOfDistanceThroughGlyph(for: CGPoint, in: NSTextContainer) -> CGFloat\nReturns the fraction of the distance between the glyph at the specified point and the next glyph.\nfunc getLineFragmentInsertionPoints(forCharacterAt: Int, alternatePositions: Bool, inDisplayOrder: Bool, positions: UnsafeMutablePointer<CGFloat>?, characterIndexes: UnsafeMutablePointer<Int>?) -> Int\nReturns insertion points in bulk for a specified line fragment.\nfunc glyphIndex(for: CGPoint, in: NSTextContainer) -> Int\nReturns the index of the glyph at the specified location in a text container.\nfunc glyphIndex(for: CGPoint, in: NSTextContainer, fractionOfDistanceThroughGlyph: UnsafeMutablePointer<CGFloat>?) -> Int\nReturns the index of the glyph at the specified point using the container's coordinate system.\nfunc glyphRange(forBoundingRect: CGRect, in: NSTextContainer) -> NSRange\nReturns the smallest contiguous range for glyphs lying wholly or partially within the specified rectangle of the text container.\nfunc glyphRange(forBoundingRectWithoutAdditionalLayout: CGRect, in: NSTextContainer) -> NSRange\nReturns the smallest contiguous range for glyphs lying wholly or partially within the specified rectangle of the text container.\nfunc glyphRange(for: NSTextContainer) -> NSRange\nReturns the range of glyphs lying within the specified text container.\nfunc glyphRange(forCharacterRange: NSRange, actualCharacterRange: NSRangePointer?) -> NSRange\nReturns the range of glyphs that the specified range of characters generates.\nfunc range(ofNominallySpacedGlyphsContaining: Int) -> NSRange\nReturns the range of displayable glyphs that surround the glyph at the specified index."
  },
  {
    "title": "UIApplicationShortcutIcon.IconType.taskCompleted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplicationshortcuticon/icontype/taskcompleted",
    "html": "Discussion"
  },
  {
    "title": "UIApplicationShortcutIcon.IconType.task | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplicationshortcuticon/icontype/task",
    "html": "Discussion"
  },
  {
    "title": "drawGlyphs(forGlyphRange:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403158-drawglyphs",
    "html": "Parameters\nglyphsToShow\n\nThe range of glyphs that are drawn.\n\norigin\n\nThe position of the text container in the coordinate system of the currently focused view.\n\nDiscussion\n\nThis method is called by NSTextView for drawing. You can override it to perform additional drawing, or to replace text drawing entirely, but not to change layout. You can call this method directly, but focus must already be locked on the destination view or image. This method expects the coordinate system of the view to be flipped.\n\nThis method draws the actual glyphs, including attachments, as well as any underlines or strikethoughs.\n\nPerforms glyph generation and layout if needed.\n\nSee Also\nDrawing\nfunc drawBackground(forGlyphRange: NSRange, at: CGPoint)\nDraws background marks for the specified glyphs, which must lie completely within a single text container.\nfunc drawStrikethrough(forGlyphRange: NSRange, strikethroughType: NSUnderlineStyle, baselineOffset: CGFloat, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint)\nDraws a strikethrough for the specified glyphs.\nfunc drawUnderline(forGlyphRange: NSRange, underlineType: NSUnderlineStyle, baselineOffset: CGFloat, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint)\nDraws underlining for the glyphs in a specified range.\nfunc fillBackgroundRectArray(UnsafePointer<CGRect>, count: Int, forCharacterRange: NSRange, color: UIColor)\nFills background rectangles with a color.\nfunc showCGGlyphs(UnsafePointer<CGGlyph>, positions: UnsafePointer<CGPoint>, count: Int, font: UIFont, textMatrix: CGAffineTransform, attributes: [NSAttributedString.Key : Any], in: CGContext)\nRenders the glyphs at the specified positions, using the specified attributes.\nfunc strikethroughGlyphRange(NSRange, strikethroughType: NSUnderlineStyle, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint)\nCalculates and draws strikethrough for the specified glyphs.\nfunc underlineGlyphRange(NSRange, underlineType: NSUnderlineStyle, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint)\nCalculates subranges to underline for the specified glyphs and draws the underlining as appropriate.\nRelated Documentation\nvar textContainerOrigin: NSPoint\nThe origin of the receiver’s text container.\nfunc glyphRange(for: NSTextContainer) -> NSRange\nReturns the range of glyphs lying within the specified text container."
  },
  {
    "title": "UIApplicationShortcutIcon.IconType.shuffle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplicationshortcuticon/icontype/shuffle",
    "html": "Discussion"
  },
  {
    "title": "userActivity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscene/activationconfiguration/3752230-useractivity",
    "html": "See Also\nGetting information about the activation configuration\nvar options: UIWindowScene.ActivationRequestOptions?\nOptions for customizing the scene request.\nclass UIWindowScene.ActivationRequestOptions\nAn object that contains information you want the system to use when activating a new window scene.\nvar preview: UITargetedPreview?\nAn optional targeted preview that the system uses to animate the transition to the new scene."
  },
  {
    "title": "UIApplicationShortcutIcon.IconType.captureVideo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplicationshortcuticon/icontype/capturevideo",
    "html": "Discussion"
  },
  {
    "title": "textSelections(interactingAt:inContainerAt:anchors:modifiers:selecting:bounds:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselectionnavigation/3801869-textselections",
    "html": "Parameters\npoint\n\nA CGPoint that represents the location of the tap or click.\n\ncontainerLocation\n\nA NSTextLocation that describes the contasiner location.\n\nanchors\n\nAn array of NSTextSelection objects.\n\nmodifiers\n\nOne or more NSTextSelectionNavigation.Modifier options.\n\nselecting\n\nA Boolean value that indicates if the selection is in drag session.\n\nbounds\n\nA CGRect that defines the view area in the container’s coordinate system that can interact with events.\n\nReturn Value\n\nAn array of text selections.\n\nSee Also\nWorking with text selections\nfunc textSelection(for: NSTextSelection.Granularity, enclosing: NSTextSelection) -> NSTextSelection\nReturns a text selection expanded to the nearest boundaries for the selection granularity and enclosing text selection text ranges you specify.\nfunc destinationSelection(for: NSTextSelection, direction: NSTextSelectionNavigation.Direction, destination: NSTextSelectionNavigation.Destination, extending: Bool, confined: Bool) -> NSTextSelection?\nReturns a new selection that results from applying the navigation operations you specify to the text selection you provide."
  },
  {
    "title": "textSelection(for:enclosing:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselectionnavigation/3801868-textselection",
    "html": "Parameters\nselectionGranularity\n\nOne of the available NSTextSelection.Granularity options.\n\ntextSelection\n\nThe text selection that describes the text range of interest.\n\nReturn Value\n\nA new text selection.\n\nSee Also\nWorking with text selections\nfunc textSelections(interactingAt: CGPoint, inContainerAt: NSTextLocation, anchors: [NSTextSelection], modifiers: NSTextSelectionNavigation.Modifier, selecting: Bool, bounds: CGRect) -> [NSTextSelection]\nReturns an array of text selections produced by a tap or click at the point you specify.\nfunc destinationSelection(for: NSTextSelection, direction: NSTextSelectionNavigation.Direction, destination: NSTextSelectionNavigation.Destination, extending: Bool, confined: Bool) -> NSTextSelection?\nReturns a new selection that results from applying the navigation operations you specify to the text selection you provide."
  },
  {
    "title": "UINavigationItem.ItemStyle.navigator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uinavigationitem/itemstyle/navigator",
    "html": "Discussion\n\nUse this style for apps that support a traditional hierarchical navigation model. With this style, the navigation item’s title appears in the center of the navigation bar, and center items (centerItemGroups) appear in the overflow menu."
  },
  {
    "title": "systemFrame | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscene/geometry/3975946-systemframe",
    "html": "Discussion\n\nThis property represents the current frame of the scene in the system coordinate space, where an origin of (0, 0) corresponds to the top-left corner of the main display.\n\nSee Also\nAccessing scene geometry\nvar interfaceOrientation: UIInterfaceOrientation\nThe current interface orientation for the scene."
  },
  {
    "title": "systemFrame | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscene/geometrypreferences/mac/4047548-systemframe",
    "html": "Discussion\n\nThis property represents the preferred frame of the scene in the system coordinate space, where an origin of (0, 0) corresponds to the top-left corner of the main display. The default value is CGRectNull, which indicates no preferred frame."
  },
  {
    "title": "UIContextMenuActionProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontextmenuactionprovider",
    "html": "Parameters\nsuggestedActions\n\nSuggested actions for you to include in your menu. UIKit collects these actions from responders in the current responder chain. You are not required to include the actions in your menu.\n\nReturn Value\n\nThe menu object containing the actions for the user to select.\n\nDiscussion\n\nUse this handler to create UIAction objects representing the actions the user may choose from your menu. To organize groups of actions hierarchically, create a UIMenu object to represent a submenu and add nested actions to it. Finally, build your top-level UIMenu object from the actions and submenus you created, and return that menu object from your handler.\n\nSee Also\nCreating the menu configuration object\ninit(identifier: (NSCopying)?, previewProvider: UIContextMenuContentPreviewProvider?, actionProvider: UIContextMenuActionProvider?)\nCreates a menu configuration object with the specified action and preview providers.\ntypealias UIContextMenuContentPreviewProvider\nReturns the custom view controller to use when previewing your content."
  },
  {
    "title": "badgeCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontextmenuconfiguration/3979277-badgecount",
    "html": "Discussion\n\nThe system uses this value to generate a badge for the stack of selected items to indicate how many items the menu is acting on. A value below 2 hides the badge. If you don’t set this value, the system determines it automatically.\n\nSee Also\nHandling multiple-item interactions\nvar secondaryItemIdentifiers: Set<AnyHashable>\nA set of identifiers corresponding to each item other than the primary item in a multiple-item interaction."
  },
  {
    "title": "identifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontextmenuconfiguration/3295923-identifier",
    "html": "Discussion\n\nIf you did not provide an identifier when creating this object, UIKit assigns a new UUID object to this property."
  },
  {
    "title": "ensureLayout(forBoundingRect:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1402962-ensurelayout",
    "html": "Parameters\nbounds\n\nThe area for which layout is performed.\n\ncontainer\n\nThe text container containing the area for which layout is performed.\n\nDiscussion\n\nThe layout manager reserves the right to perform layout for larger ranges. If noncontiguous layout is disabled, then the affected range is always effectively extended to start at the beginning of the text.\n\nSee Also\nCausing glyph generation and layout\nfunc ensureGlyphs(forCharacterRange: NSRange)\nForces the layout manager to generate glyphs for the specified character range if it hasn’t already.\nfunc ensureGlyphs(forGlyphRange: NSRange)\nForces the layout manager to generate glyphs for the specified glyph range if it hasn’t already.\nfunc ensureLayout(forCharacterRange: NSRange)\nForces the layout manager to perform layout for the specified character range if it hasn’t already.\nfunc ensureLayout(forGlyphRange: NSRange)\nForces the layout manager to perform layout for the specified glyph range if it hasn’t already.\nfunc ensureLayout(for: NSTextContainer)\nForces the layout manager to perform layout for the specified text container if it hasn’t already.\nvar glyphGenerator: NSGlyphGenerator\nThe glyph generator that the layout manager uses."
  },
  {
    "title": "image(forBounds:textContainer:characterIndex:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextattachmentcontainer/1508386-image",
    "html": "Required\n\nParameters\nimageBounds\n\nThe rectangle in which the image is laid out.\n\ntextContainer\n\nThe text container in which the image is laid out.\n\ncharIndex\n\nThe character location inside the text storage for the attachment character.\n\nReturn Value\n\nThe image rendered in the bounds rectangle.\n\nDiscussion\n\nThe method should return an image appropriate for the target rendering context derived by arguments passed into this method. The NSTextAttachment implementation returns the text attachment’s image when non-nil. If the image is nil, it returns an image based on the text attachment’s contents and fileType properties."
  },
  {
    "title": "UIModalTransitionStyle.partialCurl | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimodaltransitionstyle/partialcurl",
    "html": "Discussion\n\nWhen the view controller is presented, one corner of the current view curls up to reveal the presented view underneath. On dismissal, the curled up page unfurls itself back on top of the presented view. A view controller presented using this transition is itself prevented from presenting any additional view controllers.\n\nThis transition style is supported only if the parent view controller is presenting a full-screen view and you use the UIModalPresentationStyle.fullScreen modal presentation style. Attempting to use a different form factor for the parent view or a different presentation style triggers an exception."
  },
  {
    "title": "ensureGlyphs(forCharacterRange:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403189-ensureglyphs",
    "html": "Parameters\ncharRange\n\nThe character range for which glyphs are generated.\n\nDiscussion\n\nThe layout manager reserves the right to perform glyph generation for larger ranges. If noncontiguous layout is disabled, then the affected range is always effectively extended to start at the beginning of the text.\n\nSee Also\nCausing glyph generation and layout\nfunc ensureGlyphs(forGlyphRange: NSRange)\nForces the layout manager to generate glyphs for the specified glyph range if it hasn’t already.\nfunc ensureLayout(forBoundingRect: CGRect, in: NSTextContainer)\nForces the layout manager to perform layout for the specified area in the specified text container if it hasn’t already.\nfunc ensureLayout(forCharacterRange: NSRange)\nForces the layout manager to perform layout for the specified character range if it hasn’t already.\nfunc ensureLayout(forGlyphRange: NSRange)\nForces the layout manager to perform layout for the specified glyph range if it hasn’t already.\nfunc ensureLayout(for: NSTextContainer)\nForces the layout manager to perform layout for the specified text container if it hasn’t already.\nvar glyphGenerator: NSGlyphGenerator\nThe glyph generator that the layout manager uses."
  },
  {
    "title": "UIModalTransitionStyle.crossDissolve | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimodaltransitionstyle/crossdissolve",
    "html": "Discussion\n\nWhen the view controller is presented, the current view fades out while the new view fades in at the same time. On dismissal, a similar type of cross-fade is used to return to the original view."
  },
  {
    "title": "UIScene.ActivationState.foregroundActive | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscene/activationstate/foregroundactive",
    "html": "Discussion\n\nThe interface for an active scene is onscreen and visible to the user.\n\nSee Also\nScene States\ncase unattached\nA state that indicates that the scene is not currently connected to your app.\ncase foregroundInactive\nA state that indicates that the scene is running in the foreground but is not receiving events.\ncase background\nA state that indicates that the scene is running in the background and is not onscreen."
  },
  {
    "title": "drawStrikethrough(forGlyphRange:strikethroughType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403169-drawstrikethrough",
    "html": "Parameters\nglyphRange\n\nThe range of glyphs for which to draw a strikethrough. The range must belong to a single line fragment rectangle (as returned by lineFragmentRect(forGlyphAt:effectiveRange:)).\n\nstrikethroughVal\n\nThe style of strikethrough to draw. This value is a mask derived from the value for underlineStyle—for example, (NSUnderlinePatternDash | NSUnderlineStyleThick). Subclasses can define custom strikethrough styles.\n\nbaselineOffset\n\nIndicates how far above the text baseline the underline should be drawn.\n\nlineRect\n\nThe line fragment rectangle containing the glyphs to draw strikethrough for.\n\nlineGlyphRange\n\nThe range of all glyphs within lineRect.\n\ncontainerOrigin\n\nThe origin of the line fragment rectangle’s NSTextContainer in its NSTextView.\n\nDiscussion\n\nThis method is invoked automatically by strikethroughGlyphRange(_:strikethroughType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:); you should rarely need to invoke it directly. This method’s strikethroughVal parameter does not take account of any setting forNSUnderlineByWordMask because that's taken care of by underlineGlyphRange(_:underlineType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:).\n\nSee Also\nDrawing\nfunc drawBackground(forGlyphRange: NSRange, at: CGPoint)\nDraws background marks for the specified glyphs, which must lie completely within a single text container.\nfunc drawGlyphs(forGlyphRange: NSRange, at: CGPoint)\nDraws the specified glyphs, which must lie completely within a single text container.\nfunc drawUnderline(forGlyphRange: NSRange, underlineType: NSUnderlineStyle, baselineOffset: CGFloat, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint)\nDraws underlining for the glyphs in a specified range.\nfunc fillBackgroundRectArray(UnsafePointer<CGRect>, count: Int, forCharacterRange: NSRange, color: UIColor)\nFills background rectangles with a color.\nfunc showCGGlyphs(UnsafePointer<CGGlyph>, positions: UnsafePointer<CGPoint>, count: Int, font: UIFont, textMatrix: CGAffineTransform, attributes: [NSAttributedString.Key : Any], in: CGContext)\nRenders the glyphs at the specified positions, using the specified attributes.\nfunc strikethroughGlyphRange(NSRange, strikethroughType: NSUnderlineStyle, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint)\nCalculates and draws strikethrough for the specified glyphs.\nfunc underlineGlyphRange(NSRange, underlineType: NSUnderlineStyle, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint)\nCalculates subranges to underline for the specified glyphs and draws the underlining as appropriate."
  },
  {
    "title": "openInPlace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscene/openurloptions/3197944-openinplace",
    "html": "Discussion\n\nWhen the value of this property is false, copy the document to your app’s container before opening the file. When the value of this property is true, open the existing URL in its current location."
  },
  {
    "title": "endIgnoringInteractionEvents() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/1622938-endignoringinteractionevents",
    "html": "Discussion\n\nYou typically call this method when, after calling the beginIgnoringInteractionEvents() method, the animation or transition concludes. Nested calls of this method should match nested calls of the beginIgnoringInteractionEvents() method.\n\nSee Also\nDeprecated methods\nfunc requestSceneSessionActivation(UISceneSession?, userActivity: NSUserActivity?, options: UIScene.ActivationRequestOptions?, errorHandler: ((Error) -> Void)?)\nAsks the system to activate an existing scene, or create a new scene and associate it with your app.\nDeprecated\nfunc beginIgnoringInteractionEvents()\nTells the receiver to suspend the handling of touch-related events.\nDeprecated\nfunc setMinimumBackgroundFetchInterval(TimeInterval)\nSpecifies the minimum amount of time that must elapse between background fetch operations.\nDeprecated\nfunc scheduleLocalNotification(UILocalNotification)\nSchedules a local notification for delivery at its encapsulated date and time.\nDeprecated\nfunc presentLocalNotificationNow(UILocalNotification)\nPresents a local notification immediately.\nDeprecated\nfunc cancelLocalNotification(UILocalNotification)\nCancels the delivery of the specified scheduled local notification.\nDeprecated\nfunc cancelAllLocalNotifications()\nCancels the delivery of all scheduled local notifications.\nDeprecated\nfunc setKeepAliveTimeout(TimeInterval, handler: (() -> Void)?) -> Bool\nConfigures a periodic handler for VoIP apps in older versions of iOS.\nDeprecated\nlet UIMinimumKeepAliveTimeout: TimeInterval\nThe minimum amount of time (measured in seconds) an app may run a critical background task in the background.\nDeprecated\nfunc clearKeepAliveTimeout()\nRemoves a previously installed periodic handler block.\nDeprecated\nfunc setStatusBarHidden(Bool, with: UIStatusBarAnimation)\nHides or shows the status bar, optionally animating the transition.\nDeprecated\nfunc setStatusBarStyle(UIStatusBarStyle, animated: Bool)\nSets the style of the status bar, optionally animating the transition to the new style.\nDeprecated\nfunc setStatusBarOrientation(UIInterfaceOrientation, animated: Bool)\nSets the app's status bar to the specified orientation, optionally animating the transition.\nDeprecated\nfunc registerUserNotificationSettings(UIUserNotificationSettings)\nRegisters your preferred options for notifying the user.\nDeprecated\nfunc registerForRemoteNotifications(matching: UIRemoteNotificationType)\nRegister to receive remote notifications of the specified types via Apple Push Notification service.\nDeprecated\nfunc enabledRemoteNotificationTypes() -> UIRemoteNotificationType\nReturns the types of notifications the app accepts.\nDeprecated\nstruct UIRemoteNotificationType\nConstants indicating the types of notifications the app may display to the user.\nDeprecated\nfunc openURL(URL) -> Bool\nAttempts to open the resource at the specified URL.\nDeprecated\nfunc setNewsstandIconImage(UIImage?)\nSets the icon of a Newsstand app to an image depicting the current issue of a publication.\nDeprecated\nRelated Documentation"
  },
  {
    "title": "clearKeepAliveTimeout() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/1622986-clearkeepalivetimeout",
    "html": "Discussion\n\nIf your VoIP app no longer needs to be woken up at periodic intervals, you can use this method to remove any previously installed handler.\n\nSee Also\nDeprecated methods\nfunc requestSceneSessionActivation(UISceneSession?, userActivity: NSUserActivity?, options: UIScene.ActivationRequestOptions?, errorHandler: ((Error) -> Void)?)\nAsks the system to activate an existing scene, or create a new scene and associate it with your app.\nDeprecated\nfunc beginIgnoringInteractionEvents()\nTells the receiver to suspend the handling of touch-related events.\nDeprecated\nfunc endIgnoringInteractionEvents()\nTells the receiver to resume the handling of touch-related events.\nDeprecated\nfunc setMinimumBackgroundFetchInterval(TimeInterval)\nSpecifies the minimum amount of time that must elapse between background fetch operations.\nDeprecated\nfunc scheduleLocalNotification(UILocalNotification)\nSchedules a local notification for delivery at its encapsulated date and time.\nDeprecated\nfunc presentLocalNotificationNow(UILocalNotification)\nPresents a local notification immediately.\nDeprecated\nfunc cancelLocalNotification(UILocalNotification)\nCancels the delivery of the specified scheduled local notification.\nDeprecated\nfunc cancelAllLocalNotifications()\nCancels the delivery of all scheduled local notifications.\nDeprecated\nfunc setKeepAliveTimeout(TimeInterval, handler: (() -> Void)?) -> Bool\nConfigures a periodic handler for VoIP apps in older versions of iOS.\nDeprecated\nlet UIMinimumKeepAliveTimeout: TimeInterval\nThe minimum amount of time (measured in seconds) an app may run a critical background task in the background.\nDeprecated\nfunc setStatusBarHidden(Bool, with: UIStatusBarAnimation)\nHides or shows the status bar, optionally animating the transition.\nDeprecated\nfunc setStatusBarStyle(UIStatusBarStyle, animated: Bool)\nSets the style of the status bar, optionally animating the transition to the new style.\nDeprecated\nfunc setStatusBarOrientation(UIInterfaceOrientation, animated: Bool)\nSets the app's status bar to the specified orientation, optionally animating the transition.\nDeprecated\nfunc registerUserNotificationSettings(UIUserNotificationSettings)\nRegisters your preferred options for notifying the user.\nDeprecated\nfunc registerForRemoteNotifications(matching: UIRemoteNotificationType)\nRegister to receive remote notifications of the specified types via Apple Push Notification service.\nDeprecated\nfunc enabledRemoteNotificationTypes() -> UIRemoteNotificationType\nReturns the types of notifications the app accepts.\nDeprecated\nstruct UIRemoteNotificationType\nConstants indicating the types of notifications the app may display to the user.\nDeprecated\nfunc openURL(URL) -> Bool\nAttempts to open the resource at the specified URL.\nDeprecated\nfunc setNewsstandIconImage(UIImage?)\nSets the icon of a Newsstand app to an image depicting the current issue of a publication.\nDeprecated"
  },
  {
    "title": "setStatusBarOrientation(_:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/1622939-setstatusbarorientation",
    "html": "Parameters\ninterfaceOrientation\n\nA specific orientation of the status bar. See UIInterfaceOrientation for details. The default value is UIInterfaceOrientation.portrait.\n\nanimated\n\ntrue if the transition to the new orientation should be animated; false if it should be immediate, without animation.\n\nDiscussion\n\nCalling this method changes the value of the statusBarOrientation property and rotates the status bar, animating the transition if animated is true . If your app has rotatable window content, however, you should not arbitrarily set status-bar orientation using this method. The status-bar orientation set by this method does not change if the device changes orientation.\n\nSee Also\nDeprecated methods\nfunc requestSceneSessionActivation(UISceneSession?, userActivity: NSUserActivity?, options: UIScene.ActivationRequestOptions?, errorHandler: ((Error) -> Void)?)\nAsks the system to activate an existing scene, or create a new scene and associate it with your app.\nDeprecated\nfunc beginIgnoringInteractionEvents()\nTells the receiver to suspend the handling of touch-related events.\nDeprecated\nfunc endIgnoringInteractionEvents()\nTells the receiver to resume the handling of touch-related events.\nDeprecated\nfunc setMinimumBackgroundFetchInterval(TimeInterval)\nSpecifies the minimum amount of time that must elapse between background fetch operations.\nDeprecated\nfunc scheduleLocalNotification(UILocalNotification)\nSchedules a local notification for delivery at its encapsulated date and time.\nDeprecated\nfunc presentLocalNotificationNow(UILocalNotification)\nPresents a local notification immediately.\nDeprecated\nfunc cancelLocalNotification(UILocalNotification)\nCancels the delivery of the specified scheduled local notification.\nDeprecated\nfunc cancelAllLocalNotifications()\nCancels the delivery of all scheduled local notifications.\nDeprecated\nfunc setKeepAliveTimeout(TimeInterval, handler: (() -> Void)?) -> Bool\nConfigures a periodic handler for VoIP apps in older versions of iOS.\nDeprecated\nlet UIMinimumKeepAliveTimeout: TimeInterval\nThe minimum amount of time (measured in seconds) an app may run a critical background task in the background.\nDeprecated\nfunc clearKeepAliveTimeout()\nRemoves a previously installed periodic handler block.\nDeprecated\nfunc setStatusBarHidden(Bool, with: UIStatusBarAnimation)\nHides or shows the status bar, optionally animating the transition.\nDeprecated\nfunc setStatusBarStyle(UIStatusBarStyle, animated: Bool)\nSets the style of the status bar, optionally animating the transition to the new style.\nDeprecated\nfunc registerUserNotificationSettings(UIUserNotificationSettings)\nRegisters your preferred options for notifying the user.\nDeprecated\nfunc registerForRemoteNotifications(matching: UIRemoteNotificationType)\nRegister to receive remote notifications of the specified types via Apple Push Notification service.\nDeprecated\nfunc enabledRemoteNotificationTypes() -> UIRemoteNotificationType\nReturns the types of notifications the app accepts.\nDeprecated\nstruct UIRemoteNotificationType\nConstants indicating the types of notifications the app may display to the user.\nDeprecated\nfunc openURL(URL) -> Bool\nAttempts to open the resource at the specified URL.\nDeprecated\nfunc setNewsstandIconImage(UIImage?)\nSets the icon of a Newsstand app to an image depicting the current issue of a publication.\nDeprecated\nRelated Documentation\nvar statusBarOrientationAnimationDuration: TimeInterval\nThe animation duration in seconds for the status bar during a 90 degree orientation change.\nvar statusBarOrientation: UIInterfaceOrientation\nThe current orientation of the app’s status bar."
  },
  {
    "title": "registerForRemoteNotifications(matching:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/1623010-registerforremotenotifications",
    "html": "Deprecated\n\nUse the registerForRemoteNotifications() method instead.\n\nParameters\ntypes\n\nA bit mask specifying the types of notifications the app accepts. For a list of values, see UIRemoteNotificationType.\n\nDiscussion\n\nWhen you send this message, the device initiates the registration process with Apple Push Notification service. If it succeeds, the app delegate receives a device token in the application(_:didRegisterForRemoteNotificationsWithDeviceToken:) method; if registration doesn’t succeed, the delegate is informed via the application(_:didFailToRegisterForRemoteNotificationsWithError:) method. If the app delegate receives a device token, it should connect with its provider and pass it the token.\n\niOS does not display or play notification types specified in the notification payload that are not one of the requested ones. For example, if alert messages are not one of the accepted notification types, iOS does not display an alert even if one is specified in the notification payload. To find out what the app’s current notification types are, call the enabledRemoteNotificationTypes() method.\n\nSee Also\nDeprecated methods\nfunc requestSceneSessionActivation(UISceneSession?, userActivity: NSUserActivity?, options: UIScene.ActivationRequestOptions?, errorHandler: ((Error) -> Void)?)\nAsks the system to activate an existing scene, or create a new scene and associate it with your app.\nDeprecated\nfunc beginIgnoringInteractionEvents()\nTells the receiver to suspend the handling of touch-related events.\nDeprecated\nfunc endIgnoringInteractionEvents()\nTells the receiver to resume the handling of touch-related events.\nDeprecated\nfunc setMinimumBackgroundFetchInterval(TimeInterval)\nSpecifies the minimum amount of time that must elapse between background fetch operations.\nDeprecated\nfunc scheduleLocalNotification(UILocalNotification)\nSchedules a local notification for delivery at its encapsulated date and time.\nDeprecated\nfunc presentLocalNotificationNow(UILocalNotification)\nPresents a local notification immediately.\nDeprecated\nfunc cancelLocalNotification(UILocalNotification)\nCancels the delivery of the specified scheduled local notification.\nDeprecated\nfunc cancelAllLocalNotifications()\nCancels the delivery of all scheduled local notifications.\nDeprecated\nfunc setKeepAliveTimeout(TimeInterval, handler: (() -> Void)?) -> Bool\nConfigures a periodic handler for VoIP apps in older versions of iOS.\nDeprecated\nlet UIMinimumKeepAliveTimeout: TimeInterval\nThe minimum amount of time (measured in seconds) an app may run a critical background task in the background.\nDeprecated\nfunc clearKeepAliveTimeout()\nRemoves a previously installed periodic handler block.\nDeprecated\nfunc setStatusBarHidden(Bool, with: UIStatusBarAnimation)\nHides or shows the status bar, optionally animating the transition.\nDeprecated\nfunc setStatusBarStyle(UIStatusBarStyle, animated: Bool)\nSets the style of the status bar, optionally animating the transition to the new style.\nDeprecated\nfunc setStatusBarOrientation(UIInterfaceOrientation, animated: Bool)\nSets the app's status bar to the specified orientation, optionally animating the transition.\nDeprecated\nfunc registerUserNotificationSettings(UIUserNotificationSettings)\nRegisters your preferred options for notifying the user.\nDeprecated\nfunc enabledRemoteNotificationTypes() -> UIRemoteNotificationType\nReturns the types of notifications the app accepts.\nDeprecated\nstruct UIRemoteNotificationType\nConstants indicating the types of notifications the app may display to the user.\nDeprecated\nfunc openURL(URL) -> Bool\nAttempts to open the resource at the specified URL.\nDeprecated\nfunc setNewsstandIconImage(UIImage?)\nSets the icon of a Newsstand app to an image depicting the current issue of a publication.\nDeprecated\nRelated Documentation"
  },
  {
    "title": "openURL(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/1622961-openurl",
    "html": "Deprecated\n\nUse the open(_:options:completionHandler:) method instead.\n\nParameters\nurl\n\nA URL (Universal Resource Locator). UIKit supports many common schemes, including the http, https, tel, facetime, and mailto schemes. You can also employ custom URL schemes associated with apps installed on the device.\n\nReturn Value\n\ntrue if the resource located by the URL was successfully opened; otherwise false.\n\nDiscussion\n\nThe URL you pass to this method can identify a resource in the app that calls the method, or a resource to be handled by another app. If the resource is to be handled another app, invoking this method might cause the calling app to quit so the other can launch.\n\nTo check if there is an installed app that can handle a scheme, call the canOpenURL(_:) method before calling this one. Be sure to read the description of that method for an important note about registering the schemes you want to employ.\n\nSee Also\nDeprecated methods\nfunc requestSceneSessionActivation(UISceneSession?, userActivity: NSUserActivity?, options: UIScene.ActivationRequestOptions?, errorHandler: ((Error) -> Void)?)\nAsks the system to activate an existing scene, or create a new scene and associate it with your app.\nDeprecated\nfunc beginIgnoringInteractionEvents()\nTells the receiver to suspend the handling of touch-related events.\nDeprecated\nfunc endIgnoringInteractionEvents()\nTells the receiver to resume the handling of touch-related events.\nDeprecated\nfunc setMinimumBackgroundFetchInterval(TimeInterval)\nSpecifies the minimum amount of time that must elapse between background fetch operations.\nDeprecated\nfunc scheduleLocalNotification(UILocalNotification)\nSchedules a local notification for delivery at its encapsulated date and time.\nDeprecated\nfunc presentLocalNotificationNow(UILocalNotification)\nPresents a local notification immediately.\nDeprecated\nfunc cancelLocalNotification(UILocalNotification)\nCancels the delivery of the specified scheduled local notification.\nDeprecated\nfunc cancelAllLocalNotifications()\nCancels the delivery of all scheduled local notifications.\nDeprecated\nfunc setKeepAliveTimeout(TimeInterval, handler: (() -> Void)?) -> Bool\nConfigures a periodic handler for VoIP apps in older versions of iOS.\nDeprecated\nlet UIMinimumKeepAliveTimeout: TimeInterval\nThe minimum amount of time (measured in seconds) an app may run a critical background task in the background.\nDeprecated\nfunc clearKeepAliveTimeout()\nRemoves a previously installed periodic handler block.\nDeprecated\nfunc setStatusBarHidden(Bool, with: UIStatusBarAnimation)\nHides or shows the status bar, optionally animating the transition.\nDeprecated\nfunc setStatusBarStyle(UIStatusBarStyle, animated: Bool)\nSets the style of the status bar, optionally animating the transition to the new style.\nDeprecated\nfunc setStatusBarOrientation(UIInterfaceOrientation, animated: Bool)\nSets the app's status bar to the specified orientation, optionally animating the transition.\nDeprecated\nfunc registerUserNotificationSettings(UIUserNotificationSettings)\nRegisters your preferred options for notifying the user.\nDeprecated\nfunc registerForRemoteNotifications(matching: UIRemoteNotificationType)\nRegister to receive remote notifications of the specified types via Apple Push Notification service.\nDeprecated\nfunc enabledRemoteNotificationTypes() -> UIRemoteNotificationType\nReturns the types of notifications the app accepts.\nDeprecated\nstruct UIRemoteNotificationType\nConstants indicating the types of notifications the app may display to the user.\nDeprecated\nfunc setNewsstandIconImage(UIImage?)\nSets the icon of a Newsstand app to an image depicting the current issue of a publication.\nDeprecated\nRelated Documentation\nfunc application(UIApplication, handleOpen: URL) -> Bool\nAsks the delegate to open a resource identified by URL.\nfunc canOpenURL(URL) -> Bool\nReturns a Boolean value that indicates whether an app is available to handle a URL scheme."
  },
  {
    "title": "currentUserNotificationSettings | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/1623092-currentusernotificationsettings",
    "html": "Deprecated\n\nUse UNUserNotificationCenter instead.\n\nReturn Value\n\nA user notification settings object indicating the types of notifications that your app may use.\n\nDiscussion\n\nIf you configure local or remote notifications with unavailable notification types, the system does not display the corresponding alerts to the user. The system does still deliver the local and remote notifications to your app.\n\nSee Also\nDeprecated properties\nvar applicationIconBadgeNumber: Int\nThe number currently set as the badge of the app icon on the Home screen.\nDeprecated\nclass let statusBarFrameUserInfoKey: String\nA key whose value is an NSValue object that encapsulates a CGRect structure expressing the location and size of the new status bar frame. This key is used with didChangeStatusBarFrameNotification and willChangeStatusBarFrameNotification notifications.\nDeprecated\nclass let statusBarOrientationUserInfoKey: String\nA key whose value is an NSNumber object that encapsulates a UIInterfaceOrientation value indicating the current orientation (see UIInterfaceOrientation). This key is used with didChangeStatusBarOrientationNotification and willChangeStatusBarOrientationNotification notifications.\nDeprecated\nvar isIgnoringInteractionEvents: Bool\nA Boolean value that indicates whether the receiver is ignoring events initiated by touches on the screen.\nDeprecated\nvar isNetworkActivityIndicatorVisible: Bool\nA Boolean value that turns an indicator of network activity on or off.\nDeprecated\nvar isStatusBarHidden: Bool\nA Boolean value that determines whether the status bar is hidden.\nDeprecated\nvar keyWindow: UIWindow?\nThe app's key window.\nDeprecated\nvar scheduledLocalNotifications: [UILocalNotification]?\nAll currently scheduled local notifications.\nDeprecated\nvar statusBarFrame: CGRect\nThe frame rectangle defining the area of the status bar.\nDeprecated\nvar statusBarOrientation: UIInterfaceOrientation\nThe current orientation of the app’s status bar.\nDeprecated\nvar statusBarOrientationAnimationDuration: TimeInterval\nThe animation duration in seconds for the status bar during a 90 degree orientation change.\nDeprecated\nvar statusBarStyle: UIStatusBarStyle\nThe current style of the status bar.\nDeprecated\nvar windows: [UIWindow]\nThe app’s visible and hidden windows.\nDeprecated\nRelated Documentation\nfunc registerUserNotificationSettings(UIUserNotificationSettings)\nRegisters your preferred options for notifying the user."
  },
  {
    "title": "statusBarFrameUserInfoKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/1623119-statusbarframeuserinfokey",
    "html": "See Also\nDeprecated properties\nvar applicationIconBadgeNumber: Int\nThe number currently set as the badge of the app icon on the Home screen.\nDeprecated\nclass let statusBarOrientationUserInfoKey: String\nA key whose value is an NSNumber object that encapsulates a UIInterfaceOrientation value indicating the current orientation (see UIInterfaceOrientation). This key is used with didChangeStatusBarOrientationNotification and willChangeStatusBarOrientationNotification notifications.\nDeprecated\nvar currentUserNotificationSettings: UIUserNotificationSettings?\nReturns the user notification settings for the app.\nDeprecated\nvar isIgnoringInteractionEvents: Bool\nA Boolean value that indicates whether the receiver is ignoring events initiated by touches on the screen.\nDeprecated\nvar isNetworkActivityIndicatorVisible: Bool\nA Boolean value that turns an indicator of network activity on or off.\nDeprecated\nvar isStatusBarHidden: Bool\nA Boolean value that determines whether the status bar is hidden.\nDeprecated\nvar keyWindow: UIWindow?\nThe app's key window.\nDeprecated\nvar scheduledLocalNotifications: [UILocalNotification]?\nAll currently scheduled local notifications.\nDeprecated\nvar statusBarFrame: CGRect\nThe frame rectangle defining the area of the status bar.\nDeprecated\nvar statusBarOrientation: UIInterfaceOrientation\nThe current orientation of the app’s status bar.\nDeprecated\nvar statusBarOrientationAnimationDuration: TimeInterval\nThe animation duration in seconds for the status bar during a 90 degree orientation change.\nDeprecated\nvar statusBarStyle: UIStatusBarStyle\nThe current style of the status bar.\nDeprecated\nvar windows: [UIWindow]\nThe app’s visible and hidden windows.\nDeprecated"
  },
  {
    "title": "didChangeStatusBarFrameNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/1623018-didchangestatusbarframenotificat",
    "html": "Discussion\n\nThe userInfo dictionary contains an NSValue object that encapsulates a CGRect structure expressing the location and size of the new status bar frame. Use statusBarFrameUserInfoKey to access this value.\n\nSee Also\nDeprecated notifications\nclass let willChangeStatusBarFrameNotification: NSNotification.Name\nPosted when the app is about to change the frame of the status bar.\nDeprecated\nclass let willChangeStatusBarOrientationNotification: NSNotification.Name\nPosted when the app is about to change the orientation of its interface.\nDeprecated\nclass let didChangeStatusBarOrientationNotification: NSNotification.Name\nPosted when the orientation of the app’s user interface changes.\nDeprecated"
  },
  {
    "title": "willChangeStatusBarFrameNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/1622940-willchangestatusbarframenotifica",
    "html": "Discussion\n\nThe userInfo dictionary contains an NSValue object that encapsulates a CGRect structure expressing the location and size of the new status bar frame. Use statusBarFrameUserInfoKey to access this value.\n\nSee Also\nDeprecated notifications\nclass let didChangeStatusBarFrameNotification: NSNotification.Name\nPosted when the frame of the status bar changes.\nDeprecated\nclass let willChangeStatusBarOrientationNotification: NSNotification.Name\nPosted when the app is about to change the orientation of its interface.\nDeprecated\nclass let didChangeStatusBarOrientationNotification: NSNotification.Name\nPosted when the orientation of the app’s user interface changes.\nDeprecated"
  },
  {
    "title": "didChangeStatusBarOrientationNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/1622991-didchangestatusbarorientationnot",
    "html": "Discussion\n\nThe userInfo dictionary contains an NSNumber object that encapsulates a UIInterfaceOrientation value (see UIInterfaceOrientation). Use statusBarOrientationUserInfoKey to access this value\n\nSee Also\nDeprecated notifications\nclass let willChangeStatusBarFrameNotification: NSNotification.Name\nPosted when the app is about to change the frame of the status bar.\nDeprecated\nclass let didChangeStatusBarFrameNotification: NSNotification.Name\nPosted when the frame of the status bar changes.\nDeprecated\nclass let willChangeStatusBarOrientationNotification: NSNotification.Name\nPosted when the app is about to change the orientation of its interface.\nDeprecated"
  },
  {
    "title": "UIWindowScene.PresentationStyle.prominent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscene/presentationstyle/prominent",
    "html": "Discussion\n\nOn iPad, the system displays the window scene modally, centered and elevated above the existing workspace. You should dedicate the scene to specific content within your app, like a document or file, and include buttons to close the scene."
  },
  {
    "title": "baseWritingDirection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsmutableparagraphstyle/1534601-basewritingdirection",
    "html": "Discussion\n\nIf you specify NSWritingDirection.natural, the receiver resolves the writing direction to either NSWritingDirection.leftToRight or NSWritingDirection.rightToLeft, depending on the direction for the user’s language preference setting.\n\nSee Also\nSetting style information\nfunc setParagraphStyle(NSParagraphStyle)\nReplaces the subattributes of the paragraph with those in the specified paragraph style object.\nvar alignment: NSTextAlignment\nThe text alignment of the paragraph.\nvar firstLineHeadIndent: CGFloat\nThe indentation of the first line of the paragraph.\nvar headIndent: CGFloat\nThe indentation of the paragraph’s lines other than the first.\nvar tailIndent: CGFloat\nThe trailing indentation of the paragraph.\nvar lineHeightMultiple: CGFloat\nThe line height multiple.\nvar maximumLineHeight: CGFloat\nThe paragraph’s maximum line height.\nvar minimumLineHeight: CGFloat\nThe paragraph’s minimum line height.\nvar lineSpacing: CGFloat\nThe distance in points between the bottom of one line fragment and the top of the next.\nvar paragraphSpacing: CGFloat\nThe space after the end of the paragraph.\nvar paragraphSpacingBefore: CGFloat\nThe distance between the paragraph’s top and the beginning of its text content."
  },
  {
    "title": "isMiniaturizable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscenewindowingbehaviors/3930376-isminiaturizable",
    "html": "See Also\nSpecifying window behaviors\nvar isClosable: Bool\nA Boolean value that determines whether the window displays a close button."
  },
  {
    "title": "UIWindowScene.PresentationStyle.standard | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscene/presentationstyle/standard",
    "html": "Discussion\n\nOn iPad, the system displays the window scene in Split View, side-by-side with the scene that originated the request for the new scene."
  },
  {
    "title": "headIndent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsmutableparagraphstyle/1525135-headindent",
    "html": "Discussion\n\nThis property contains the distance (in points) from the leading margin of a text container to the beginning of lines other than the first. This value is always nonnegative.\n\nSee Also\nSetting style information\nfunc setParagraphStyle(NSParagraphStyle)\nReplaces the subattributes of the paragraph with those in the specified paragraph style object.\nvar alignment: NSTextAlignment\nThe text alignment of the paragraph.\nvar firstLineHeadIndent: CGFloat\nThe indentation of the first line of the paragraph.\nvar tailIndent: CGFloat\nThe trailing indentation of the paragraph.\nvar lineHeightMultiple: CGFloat\nThe line height multiple.\nvar maximumLineHeight: CGFloat\nThe paragraph’s maximum line height.\nvar minimumLineHeight: CGFloat\nThe paragraph’s minimum line height.\nvar lineSpacing: CGFloat\nThe distance in points between the bottom of one line fragment and the top of the next.\nvar paragraphSpacing: CGFloat\nThe space after the end of the paragraph.\nvar paragraphSpacingBefore: CGFloat\nThe distance between the paragraph’s top and the beginning of its text content.\nvar baseWritingDirection: NSWritingDirection\nThe base writing direction for the paragraph."
  },
  {
    "title": "alignment | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsmutableparagraphstyle/1534368-alignment",
    "html": "Discussion\n\nNatural text alignment is realized as left or right alignment depending on the line sweep direction of the first script contained in the paragraph.\n\nSee Also\nSetting style information\nfunc setParagraphStyle(NSParagraphStyle)\nReplaces the subattributes of the paragraph with those in the specified paragraph style object.\nvar firstLineHeadIndent: CGFloat\nThe indentation of the first line of the paragraph.\nvar headIndent: CGFloat\nThe indentation of the paragraph’s lines other than the first.\nvar tailIndent: CGFloat\nThe trailing indentation of the paragraph.\nvar lineHeightMultiple: CGFloat\nThe line height multiple.\nvar maximumLineHeight: CGFloat\nThe paragraph’s maximum line height.\nvar minimumLineHeight: CGFloat\nThe paragraph’s minimum line height.\nvar lineSpacing: CGFloat\nThe distance in points between the bottom of one line fragment and the top of the next.\nvar paragraphSpacing: CGFloat\nThe space after the end of the paragraph.\nvar paragraphSpacingBefore: CGFloat\nThe distance between the paragraph’s top and the beginning of its text content.\nvar baseWritingDirection: NSWritingDirection\nThe base writing direction for the paragraph."
  },
  {
    "title": "lineHeightMultiple | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsmutableparagraphstyle/1524596-lineheightmultiple",
    "html": "Discussion\n\nThe natural line height of the receiver is multiplied by this factor (if positive) before being constrained by minimum and maximum line height. The default value of this property is 0.0.\n\nSee Also\nSetting style information\nfunc setParagraphStyle(NSParagraphStyle)\nReplaces the subattributes of the paragraph with those in the specified paragraph style object.\nvar alignment: NSTextAlignment\nThe text alignment of the paragraph.\nvar firstLineHeadIndent: CGFloat\nThe indentation of the first line of the paragraph.\nvar headIndent: CGFloat\nThe indentation of the paragraph’s lines other than the first.\nvar tailIndent: CGFloat\nThe trailing indentation of the paragraph.\nvar maximumLineHeight: CGFloat\nThe paragraph’s maximum line height.\nvar minimumLineHeight: CGFloat\nThe paragraph’s minimum line height.\nvar lineSpacing: CGFloat\nThe distance in points between the bottom of one line fragment and the top of the next.\nvar paragraphSpacing: CGFloat\nThe space after the end of the paragraph.\nvar paragraphSpacingBefore: CGFloat\nThe distance between the paragraph’s top and the beginning of its text content.\nvar baseWritingDirection: NSWritingDirection\nThe base writing direction for the paragraph."
  },
  {
    "title": "maximumLineHeight | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsmutableparagraphstyle/1524351-maximumlineheight",
    "html": "Discussion\n\nThis property contains the maximum height in points that any line in the receiver will occupy, regardless of the font size or size of any attached graphic. This value is always nonnegative. The default value is 0.\n\nGlyphs and graphics exceeding this height will overlap neighboring lines; however, a maximum height of 0 implies no line height limit. Although this limit applies to the line itself, line spacing adds extra space between adjacent lines.\n\nSee Also\nSetting style information\nfunc setParagraphStyle(NSParagraphStyle)\nReplaces the subattributes of the paragraph with those in the specified paragraph style object.\nvar alignment: NSTextAlignment\nThe text alignment of the paragraph.\nvar firstLineHeadIndent: CGFloat\nThe indentation of the first line of the paragraph.\nvar headIndent: CGFloat\nThe indentation of the paragraph’s lines other than the first.\nvar tailIndent: CGFloat\nThe trailing indentation of the paragraph.\nvar lineHeightMultiple: CGFloat\nThe line height multiple.\nvar minimumLineHeight: CGFloat\nThe paragraph’s minimum line height.\nvar lineSpacing: CGFloat\nThe distance in points between the bottom of one line fragment and the top of the next.\nvar paragraphSpacing: CGFloat\nThe space after the end of the paragraph.\nvar paragraphSpacingBefore: CGFloat\nThe distance between the paragraph’s top and the beginning of its text content.\nvar baseWritingDirection: NSWritingDirection\nThe base writing direction for the paragraph."
  },
  {
    "title": "textContainers | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403144-textcontainers",
    "html": "See Also\nManaging the text containers\nfunc addTextContainer(NSTextContainer)\nAppends the specified text container to the series of text containers where the layout manager arranges text.\nfunc insertTextContainer(NSTextContainer, at: Int)\nInserts a text container at the specified index in the list of text containers.\nfunc removeTextContainer(at: Int)\nRemoves the text container at the specified index and invalidates the layout as necessary.\nfunc setTextContainer(NSTextContainer, forGlyphRange: NSRange)\nAssociates a text container with the specified range of glyphs.\nfunc textContainerChangedGeometry(NSTextContainer)\nInvalidates the layout information, and possibly glyphs, for the specified text container and all subsequent text container objects.\nfunc textContainerChangedTextView(NSTextContainer)\nUpdates the information necessary to manage text view objects for the specified text container.\nfunc textContainer(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> NSTextContainer?\nReturns the text container that manages the layout for the specified glyph, causing layout to happen as necessary.\nfunc textContainer(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> NSTextContainer?\nReturns the text container that manages the layout for the specified glyph.\nfunc usedRect(for: NSTextContainer) -> CGRect\nReturns the bounding rectangle for the glyphs in the specified text container."
  },
  {
    "title": "fixesAttributesLazily | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextstorage/1532043-fixesattributeslazily",
    "html": "Discussion\n\nWhen subclassing, the default value of this property is false, meaning that your subclass fixes attributes immediately when they change. The system’s concrete subclass overrides this property and sets it to true.\n\nSee Also\nFixing the string attributes\nfunc invalidateAttributes(in: NSRange)\nInvalidates attributes in the specified range.\nfunc ensureAttributesAreFixed(in: NSRange)\nEnsures that attribute fixing occurs in the specified range."
  },
  {
    "title": "textLists | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsmutableparagraphstyle/1524648-textlists",
    "html": "See Also\nSetting text blocks and lists\nvar textBlocks: [NSTextBlock]\nThe text blocks that contain the paragraph."
  },
  {
    "title": "usesFontLeading | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403156-usesfontleading",
    "html": "See Also\nConfiguring the global layout manager options\nvar allowsNonContiguousLayout: Bool\nA Boolean value that indicates whether the layout manager allows noncontiguous layout.\nvar hasNonContiguousLayout: Bool\nA Boolean value that indicates whether the layout manager currently has any areas of noncontiguous layout.\nvar showsInvisibleCharacters: Bool\nA Boolean value that indicates whether to substitute visible glyphs for whitespace and other typically invisible characters.\nvar showsControlCharacters: Bool\nA Boolean value that indicates whether the layout manager substitutes visible glyphs for control characters in the layout.\nvar backgroundLayoutEnabled: Bool\nA Boolean value that indicates whether the layout manager generates glyphs and lays them out when the app's run loop is idle.\nvar limitsLayoutForSuspiciousContents: Bool\nA Boolean value that indicates whether the layout manager avoids laying out unusually long or suspicious input.\nvar usesDefaultHyphenation: Bool\nA Boolean value that indicates whether the layout manager uses the default hyphenation rules to wrap lines.\nRelated Documentation\nvar lineSpacing: CGFloat\nThe distance in points between the bottom of one line fragment and the top of the next."
  },
  {
    "title": "tabStops | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsmutableparagraphstyle/1531988-tabstops",
    "html": "Discussion\n\nThe NSTextTab objects, sorted by location, define the tab stops for the paragraph style. The default value is an array of 12 left-aligned tabs at 28-point intervals.\n\nSee Also\nSpecifying tab information\nfunc addTabStop(NSTextTab)\nAdds the specified tab stop to the paragraph.\nfunc removeTabStop(NSTextTab)\nRemoves the first text tab with a location and type equal to the specified tab stop.\nvar defaultTabInterval: CGFloat\nA number used as the document’s default tab spacing."
  },
  {
    "title": "defaultTabInterval | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsmutableparagraphstyle/1529861-defaulttabinterval",
    "html": "Discussion\n\nThis property represents the default tab interval in points. The system places tabs after the last specified in tabStops at integer multiples of this distance (if positive). Default value is 0.0.\n\nSee Also\nSpecifying tab information\nfunc addTabStop(NSTextTab)\nAdds the specified tab stop to the paragraph.\nfunc removeTabStop(NSTextTab)\nRemoves the first text tab with a location and type equal to the specified tab stop.\nvar tabStops: [NSTextTab]!\nThe text tab objects that represent the paragraph’s tab stops."
  },
  {
    "title": "glyphRange(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403041-glyphrange",
    "html": "Discussion\n\nThis is a less efficient method than the similar textContainer(forGlyphAt:effectiveRange:).\n\nPerforms glyph generation and layout if needed.\n\nSee Also\nPerforming advanced layout queries\nfunc boundingRect(forGlyphRange: NSRange, in: NSTextContainer) -> CGRect\nReturns the bounding rectangle for the specified glyphs in a container.\nfunc characterIndex(for: CGPoint, in: NSTextContainer, fractionOfDistanceBetweenInsertionPoints: UnsafeMutablePointer<CGFloat>?) -> Int\nReturns the index of the character that lies beneath the specified point using the specified container's coordinate system.\nfunc characterRange(forGlyphRange: NSRange, actualGlyphRange: NSRangePointer?) -> NSRange\nReturns the range of characters that correspond to the glyphs in the specified glyph range.\nfunc enumerateEnclosingRects(forGlyphRange: NSRange, withinSelectedGlyphRange: NSRange, in: NSTextContainer, using: (CGRect, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates enclosing rectangles for the specified glyph range in a text container.\nfunc enumerateLineFragments(forGlyphRange: NSRange, using: (CGRect, CGRect, NSTextContainer, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates line fragments intersecting with the specified glyph range.\nfunc fractionOfDistanceThroughGlyph(for: CGPoint, in: NSTextContainer) -> CGFloat\nReturns the fraction of the distance between the glyph at the specified point and the next glyph.\nfunc getLineFragmentInsertionPoints(forCharacterAt: Int, alternatePositions: Bool, inDisplayOrder: Bool, positions: UnsafeMutablePointer<CGFloat>?, characterIndexes: UnsafeMutablePointer<Int>?) -> Int\nReturns insertion points in bulk for a specified line fragment.\nfunc glyphIndex(for: CGPoint, in: NSTextContainer) -> Int\nReturns the index of the glyph at the specified location in a text container.\nfunc glyphIndex(for: CGPoint, in: NSTextContainer, fractionOfDistanceThroughGlyph: UnsafeMutablePointer<CGFloat>?) -> Int\nReturns the index of the glyph at the specified point using the container's coordinate system.\nfunc glyphRange(forBoundingRect: CGRect, in: NSTextContainer) -> NSRange\nReturns the smallest contiguous range for glyphs lying wholly or partially within the specified rectangle of the text container.\nfunc glyphRange(forBoundingRectWithoutAdditionalLayout: CGRect, in: NSTextContainer) -> NSRange\nReturns the smallest contiguous range for glyphs lying wholly or partially within the specified rectangle of the text container.\nfunc glyphRange(forCharacterRange: NSRange, actualCharacterRange: NSRangePointer?) -> NSRange\nReturns the range of glyphs that the specified range of characters generates.\nfunc range(ofNominallySpacedGlyphsContaining: Int) -> NSRange\nReturns the range of displayable glyphs that surround the glyph at the specified index.\nRelated Documentation\nfunc textContainer(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> NSTextContainer?\nReturns the text container that manages the layout for the specified glyph, causing layout to happen as necessary."
  },
  {
    "title": "drawBackground(forGlyphRange:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1402949-drawbackground",
    "html": "Parameters\nglyphsToShow\n\nThe range of glyphs for which the background is drawn.\n\norigin\n\nThe position of the text container in the coordinate system of the currently focused view.\n\nDiscussion\n\nThis method is called by NSTextView for drawing. You can override it to perform additional drawing, or to replace text drawing entirely, but not to change layout. You can call this method directly, but focus must already be locked on the destination view or image.\n\nBackground marks are such things as selection highlighting, text background color, and any background for marked text, along with block decoration such as table backgrounds and borders.\n\nPerforms glyph generation and layout if needed.\n\nSee Also\nDrawing\nfunc drawGlyphs(forGlyphRange: NSRange, at: CGPoint)\nDraws the specified glyphs, which must lie completely within a single text container.\nfunc drawStrikethrough(forGlyphRange: NSRange, strikethroughType: NSUnderlineStyle, baselineOffset: CGFloat, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint)\nDraws a strikethrough for the specified glyphs.\nfunc drawUnderline(forGlyphRange: NSRange, underlineType: NSUnderlineStyle, baselineOffset: CGFloat, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint)\nDraws underlining for the glyphs in a specified range.\nfunc fillBackgroundRectArray(UnsafePointer<CGRect>, count: Int, forCharacterRange: NSRange, color: UIColor)\nFills background rectangles with a color.\nfunc showCGGlyphs(UnsafePointer<CGGlyph>, positions: UnsafePointer<CGPoint>, count: Int, font: UIFont, textMatrix: CGAffineTransform, attributes: [NSAttributedString.Key : Any], in: CGContext)\nRenders the glyphs at the specified positions, using the specified attributes.\nfunc strikethroughGlyphRange(NSRange, strikethroughType: NSUnderlineStyle, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint)\nCalculates and draws strikethrough for the specified glyphs.\nfunc underlineGlyphRange(NSRange, underlineType: NSUnderlineStyle, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint)\nCalculates subranges to underline for the specified glyphs and draws the underlining as appropriate.\nRelated Documentation\nvar textContainerOrigin: NSPoint\nThe origin of the receiver’s text container.\nfunc glyphRange(for: NSTextContainer) -> NSRange\nReturns the range of glyphs lying within the specified text container."
  },
  {
    "title": "showsInvisibleCharacters | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403254-showsinvisiblecharacters",
    "html": "See Also\nConfiguring the global layout manager options\nvar allowsNonContiguousLayout: Bool\nA Boolean value that indicates whether the layout manager allows noncontiguous layout.\nvar hasNonContiguousLayout: Bool\nA Boolean value that indicates whether the layout manager currently has any areas of noncontiguous layout.\nvar showsControlCharacters: Bool\nA Boolean value that indicates whether the layout manager substitutes visible glyphs for control characters in the layout.\nvar usesFontLeading: Bool\nA Boolean value that indicates whether the layout manager uses the leading of the font.\nvar backgroundLayoutEnabled: Bool\nA Boolean value that indicates whether the layout manager generates glyphs and lays them out when the app's run loop is idle.\nvar limitsLayoutForSuspiciousContents: Bool\nA Boolean value that indicates whether the layout manager avoids laying out unusually long or suspicious input.\nvar usesDefaultHyphenation: Bool\nA Boolean value that indicates whether the layout manager uses the default hyphenation rules to wrap lines."
  },
  {
    "title": "UIApplicationShortcutIcon.IconType.add | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplicationshortcuticon/icontype/add",
    "html": "Discussion"
  },
  {
    "title": "UIApplicationShortcutIcon.IconType.confirmation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplicationshortcuticon/icontype/confirmation",
    "html": "Discussion"
  },
  {
    "title": "UIApplicationShortcutIcon.IconType.cloud | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplicationshortcuticon/icontype/cloud",
    "html": "Discussion"
  },
  {
    "title": "UIApplicationShortcutIcon.IconType.search | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplicationshortcuticon/icontype/search",
    "html": "Discussion"
  },
  {
    "title": "characterRange(forGlyphRange:actualGlyphRange:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403225-characterrange",
    "html": "Parameters\nglyphRange\n\nThe glyph range for which to return the character range.\n\nactualGlyphRange\n\nIf not NULL, on output, points to the full range of glyphs generated by the character range returned. This range may be identical or slightly larger than the requested glyph range. For example, if the text storage contains the character “Ö” and the glyph cache contains the two atomic glyphs “O” and “¨”, and if glyphRange encloses only the first or second glyph, then actualGlyphRange is set to enclose both glyphs.\n\nReturn Value\n\nThe range of characters that generated the glyphs in glyphRange.\n\nDiscussion\n\nIf the length of glyphRange is 0, the resulting character range is a zero-length range just after the character(s) corresponding to the preceding glyph, and actualGlyphRange is also zero-length. If glyphRange extends beyond the text length, the method truncates the result to the number of characters in the text.\n\nIf noncontiguous layout is not enabled, this method forces the generation of glyphs for all characters up to and including the end of the returned range.\n\nSee Also\nPerforming advanced layout queries\nfunc boundingRect(forGlyphRange: NSRange, in: NSTextContainer) -> CGRect\nReturns the bounding rectangle for the specified glyphs in a container.\nfunc characterIndex(for: CGPoint, in: NSTextContainer, fractionOfDistanceBetweenInsertionPoints: UnsafeMutablePointer<CGFloat>?) -> Int\nReturns the index of the character that lies beneath the specified point using the specified container's coordinate system.\nfunc enumerateEnclosingRects(forGlyphRange: NSRange, withinSelectedGlyphRange: NSRange, in: NSTextContainer, using: (CGRect, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates enclosing rectangles for the specified glyph range in a text container.\nfunc enumerateLineFragments(forGlyphRange: NSRange, using: (CGRect, CGRect, NSTextContainer, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates line fragments intersecting with the specified glyph range.\nfunc fractionOfDistanceThroughGlyph(for: CGPoint, in: NSTextContainer) -> CGFloat\nReturns the fraction of the distance between the glyph at the specified point and the next glyph.\nfunc getLineFragmentInsertionPoints(forCharacterAt: Int, alternatePositions: Bool, inDisplayOrder: Bool, positions: UnsafeMutablePointer<CGFloat>?, characterIndexes: UnsafeMutablePointer<Int>?) -> Int\nReturns insertion points in bulk for a specified line fragment.\nfunc glyphIndex(for: CGPoint, in: NSTextContainer) -> Int\nReturns the index of the glyph at the specified location in a text container.\nfunc glyphIndex(for: CGPoint, in: NSTextContainer, fractionOfDistanceThroughGlyph: UnsafeMutablePointer<CGFloat>?) -> Int\nReturns the index of the glyph at the specified point using the container's coordinate system.\nfunc glyphRange(forBoundingRect: CGRect, in: NSTextContainer) -> NSRange\nReturns the smallest contiguous range for glyphs lying wholly or partially within the specified rectangle of the text container.\nfunc glyphRange(forBoundingRectWithoutAdditionalLayout: CGRect, in: NSTextContainer) -> NSRange\nReturns the smallest contiguous range for glyphs lying wholly or partially within the specified rectangle of the text container.\nfunc glyphRange(for: NSTextContainer) -> NSRange\nReturns the range of glyphs lying within the specified text container.\nfunc glyphRange(forCharacterRange: NSRange, actualCharacterRange: NSRangePointer?) -> NSRange\nReturns the range of glyphs that the specified range of characters generates.\nfunc range(ofNominallySpacedGlyphsContaining: Int) -> NSRange\nReturns the range of displayable glyphs that surround the glyph at the specified index.\nRelated Documentation\nfunc characterIndexForGlyph(at: Int) -> Int\nReturns the index in the text storage for the first character of the specified glyph."
  },
  {
    "title": "UIApplicationShortcutIcon.IconType.location | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplicationshortcuticon/icontype/location",
    "html": "Discussion"
  },
  {
    "title": "lineFragmentUsedRect(forGlyphAt:effectiveRange:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403193-linefragmentusedrect",
    "html": "Parameters\nglyphIndex\n\nThe glyph for which to return the line fragment used rectangle.\n\neffectiveGlyphRange\n\nIf not NULL, on output, the range for all glyphs in the line fragment.\n\nReturn Value\n\nThe used rectangle for the line fragment in which the given glyph is laid out.\n\nDiscussion\n\nThis method causes glyph generation and layout for the line fragment containing the specified glyph, or if noncontiguous layout is not enabled, up to and including that line fragment.\n\nLine fragment used rectangles are always in container coordinates.\n\nOverriding this method is not recommended. If the line fragment used rectangle needs to be modified, that should be done at the typesetter level or by calling setLineFragmentRect(_:forGlyphRange:usedRect:).\n\nSee Also\nGetting layout information\nfunc attachmentSize(forGlyphAt: Int) -> CGSize\nReturns the size of the attachment glyph at the specified index.\nfunc drawsOutsideLineFragment(forGlyphAt: Int) -> Bool\nIndicates whether the glyph draws outside its line fragment rectangle.\nvar extraLineFragmentRect: CGRect\nThe rectangle for the extra line fragment at the end of a document.\nvar extraLineFragmentTextContainer: NSTextContainer?\nThe text container for the extra line fragment rectangle.\nvar extraLineFragmentUsedRect: CGRect\nThe rectangle that encloses the insertion point in the extra line fragment rectangle.\nfunc firstUnlaidCharacterIndex() -> Int\nReturns the index for the first character in the layout manager that isn’t in the layout.\nfunc firstUnlaidGlyphIndex() -> Int\nReturns the index for the first glyph in the layout manager that isn’t in the layout.\nfunc getFirstUnlaidCharacterIndex(UnsafeMutablePointer<Int>?, glyphIndex: UnsafeMutablePointer<Int>?)\nReturns the indexes for the first character and glyph that have invalid layout information.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the rectangle for the line fragment where the glyph lies and (optionally), by reference, the entire range of glyphs in that fragment.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the line fragment rectangle that contains the glyph at the specified glyph index.\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment.\nfunc location(forGlyphAt: Int) -> CGPoint\nReturns the location for the specified glyph within its line fragment.\nfunc notShownAttribute(forGlyphAt: Int) -> Bool\nIndicates whether the glyph at the specified index has a visible representation.\nfunc truncatedGlyphRange(inLineFragmentForGlyphAt: Int) -> NSRange\nReturns the range of truncated glyphs for a line fragment that contains the specified index.\nRelated Documentation\nfunc setLineFragmentRect(CGRect, forGlyphRange: NSRange, usedRect: CGRect)\nAssociates the line fragment bounds for the specified range of glyphs."
  },
  {
    "title": "lineFragmentRect(forGlyphAt:effectiveRange:withoutAdditionalLayout:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403116-linefragmentrect",
    "html": "Parameters\nglyphIndex\n\nThe glyph for which to return the line fragment rectangle.\n\neffectiveGlyphRange\n\nIf not NULL, on output, the range for all glyphs in the line fragment.\n\nflag\n\nIf true, glyph generation and layout are not performed, so this option should not be used unless layout is known to be complete for the range in question, or unless noncontiguous layout is enabled; if false, both are performed as needed.\n\nReturn Value\n\nThe line fragment in which the given glyph is laid out.\n\nDiscussion\n\nThis method is primarily for use from within NSTypesetter, after layout is complete for the range in question, but before the layout manager's call to NSTypesetter has returned. In that case glyph and layout holes have not yet been recalculated, so the layout manager does not yet know that layout is complete for that range, and this variant must be used.\n\nOverriding this method is not recommended. If the line fragment rectangle needs to be modified, that should be done at the typesetter level or by calling setLineFragmentRect(_:forGlyphRange:usedRect:).\n\nSee Also\nGetting layout information\nfunc attachmentSize(forGlyphAt: Int) -> CGSize\nReturns the size of the attachment glyph at the specified index.\nfunc drawsOutsideLineFragment(forGlyphAt: Int) -> Bool\nIndicates whether the glyph draws outside its line fragment rectangle.\nvar extraLineFragmentRect: CGRect\nThe rectangle for the extra line fragment at the end of a document.\nvar extraLineFragmentTextContainer: NSTextContainer?\nThe text container for the extra line fragment rectangle.\nvar extraLineFragmentUsedRect: CGRect\nThe rectangle that encloses the insertion point in the extra line fragment rectangle.\nfunc firstUnlaidCharacterIndex() -> Int\nReturns the index for the first character in the layout manager that isn’t in the layout.\nfunc firstUnlaidGlyphIndex() -> Int\nReturns the index for the first glyph in the layout manager that isn’t in the layout.\nfunc getFirstUnlaidCharacterIndex(UnsafeMutablePointer<Int>?, glyphIndex: UnsafeMutablePointer<Int>?)\nReturns the indexes for the first character and glyph that have invalid layout information.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the rectangle for the line fragment where the glyph lies and (optionally), by reference, the entire range of glyphs in that fragment.\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment.\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment.\nfunc location(forGlyphAt: Int) -> CGPoint\nReturns the location for the specified glyph within its line fragment.\nfunc notShownAttribute(forGlyphAt: Int) -> Bool\nIndicates whether the glyph at the specified index has a visible representation.\nfunc truncatedGlyphRange(inLineFragmentForGlyphAt: Int) -> NSRange\nReturns the range of truncated glyphs for a line fragment that contains the specified index.\nRelated Documentation\nfunc setLineFragmentRect(CGRect, forGlyphRange: NSRange, usedRect: CGRect)\nAssociates the line fragment bounds for the specified range of glyphs."
  },
  {
    "title": "truncatedGlyphRange(inLineFragmentForGlyphAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403203-truncatedglyphrange",
    "html": "Parameters\nglyphIndex\n\nA glyph whose line fragment is tested.\n\nReturn Value\n\nThe range of truncated glyphs for a line fragment containing the specified glyph, or, when there is no truncation for the line fragment, {NSNotFound, 0}.\n\nSee Also\nGetting layout information\nfunc attachmentSize(forGlyphAt: Int) -> CGSize\nReturns the size of the attachment glyph at the specified index.\nfunc drawsOutsideLineFragment(forGlyphAt: Int) -> Bool\nIndicates whether the glyph draws outside its line fragment rectangle.\nvar extraLineFragmentRect: CGRect\nThe rectangle for the extra line fragment at the end of a document.\nvar extraLineFragmentTextContainer: NSTextContainer?\nThe text container for the extra line fragment rectangle.\nvar extraLineFragmentUsedRect: CGRect\nThe rectangle that encloses the insertion point in the extra line fragment rectangle.\nfunc firstUnlaidCharacterIndex() -> Int\nReturns the index for the first character in the layout manager that isn’t in the layout.\nfunc firstUnlaidGlyphIndex() -> Int\nReturns the index for the first glyph in the layout manager that isn’t in the layout.\nfunc getFirstUnlaidCharacterIndex(UnsafeMutablePointer<Int>?, glyphIndex: UnsafeMutablePointer<Int>?)\nReturns the indexes for the first character and glyph that have invalid layout information.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the rectangle for the line fragment where the glyph lies and (optionally), by reference, the entire range of glyphs in that fragment.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the line fragment rectangle that contains the glyph at the specified glyph index.\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment.\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment.\nfunc location(forGlyphAt: Int) -> CGPoint\nReturns the location for the specified glyph within its line fragment.\nfunc notShownAttribute(forGlyphAt: Int) -> Bool\nIndicates whether the glyph at the specified index has a visible representation."
  },
  {
    "title": "cgGlyph(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403039-cgglyph",
    "html": "Parameters\nglyphIndex\n\nThe index of the glyph that you want. If the index is out of range, this method raises an exception with the error rangeException.\n\nReturn Value\n\nThe glyph at the specified index.\n\nDiscussion\n\nCalling this method generates all of the glyphs (as needed) up to and including the glyph at the specified index.\n\nSee Also\nAccessing glyphs\nfunc getGlyphs(in: NSRange, glyphs: UnsafeMutablePointer<CGGlyph>?, properties: UnsafeMutablePointer<NSLayoutManager.GlyphProperty>?, characterIndexes: UnsafeMutablePointer<Int>?, bidiLevels: UnsafeMutablePointer<UInt8>?) -> Int\nFills a passed-in buffer with a sequence of glyphs.\nfunc cgGlyph(at: Int, isValidIndex: UnsafeMutablePointer<ObjCBool>?) -> CGGlyph\nReturns the glyph at the specified index along with information about whether the glyph index is valid.\nfunc setGlyphs(UnsafePointer<CGGlyph>, properties: UnsafePointer<NSLayoutManager.GlyphProperty>, characterIndexes: UnsafePointer<Int>, font: UIFont, forGlyphRange: NSRange)\nStores the initial glyphs and glyph properties for a character range.\nfunc characterIndexForGlyph(at: Int) -> Int\nReturns the index in the text storage for the first character of the specified glyph.\nfunc glyphIndexForCharacter(at: Int) -> Int\nReturns the index of the first glyph of the character at the specified index.\nfunc isValidGlyphIndex(Int) -> Bool\nIndicates whether the specified index refers to a valid glyph.\nvar numberOfGlyphs: Int\nThe number of glyphs in the layout manager.\nfunc propertyForGlyph(at: Int) -> NSLayoutManager.GlyphProperty\nReturns the glyph property of the glyph at the specified index.\nstruct NSLayoutManager.GlyphProperty\nGlyph properties."
  },
  {
    "title": "UIApplicationShortcutIcon.IconType.markLocation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplicationshortcuticon/icontype/marklocation",
    "html": "Discussion"
  },
  {
    "title": "UIApplicationShortcutIcon.IconType.alarm | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplicationshortcuticon/icontype/alarm",
    "html": "Discussion"
  },
  {
    "title": "UIApplicationShortcutIcon.IconType.bookmark | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplicationshortcuticon/icontype/bookmark",
    "html": "Discussion"
  },
  {
    "title": "UIModalTransitionStyle.flipHorizontal | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimodaltransitionstyle/fliphorizontal",
    "html": "Discussion\n\nWhen the view controller is presented, the current view initiates a horizontal 3D flip from right-to-left, resulting in the revealing of the new view as if it were on the back of the previous view. On dismissal, the flip occurs from left-to-right, returning to the original view."
  },
  {
    "title": "lineBreakStrategy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsmutableparagraphstyle/3667462-linebreakstrategy",
    "html": "Discussion\n\nLine-break strategies are collections of options the system uses to determine where to break lines in a paragraph. This is different from lineBreakMode, which controls how to lay out lines of text that don’t fit in a container. The system ignores this property if the paragraph style’s lineBreakMode property specifies a mode that doesn’t support multiple lines, such as NSLineBreakMode.byClipping.\n\nThe default value is NSLineBreakStrategyNone.\n\nSee Also\nSetting line-break information\nvar lineBreakMode: NSLineBreakMode\nThe mode for breaking lines in the paragraph.\nvar hyphenationFactor: Float\nThe paragraph’s threshold for hyphenation.\nvar usesDefaultHyphenation: Bool\nvar tighteningFactorForTruncation: Float\nThe threshold for using tightening as an alternative to truncation.\nvar allowsDefaultTighteningForTruncation: Bool\nA Boolean value that indicates whether the system tightens intercharacter spacing before truncating text."
  },
  {
    "title": "ensureGlyphs(forGlyphRange:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403219-ensureglyphs",
    "html": "Parameters\nglyphRange\n\nThe glyph range for which glyphs are generated.\n\nDiscussion\n\nThe layout manager reserves the right to perform glyph generation for larger ranges. If noncontiguous layout is disabled, then the affected range is always effectively extended to start at the beginning of the text.\n\nSee Also\nCausing glyph generation and layout\nfunc ensureGlyphs(forCharacterRange: NSRange)\nForces the layout manager to generate glyphs for the specified character range if it hasn’t already.\nfunc ensureLayout(forBoundingRect: CGRect, in: NSTextContainer)\nForces the layout manager to perform layout for the specified area in the specified text container if it hasn’t already.\nfunc ensureLayout(forCharacterRange: NSRange)\nForces the layout manager to perform layout for the specified character range if it hasn’t already.\nfunc ensureLayout(forGlyphRange: NSRange)\nForces the layout manager to perform layout for the specified glyph range if it hasn’t already.\nfunc ensureLayout(for: NSTextContainer)\nForces the layout manager to perform layout for the specified text container if it hasn’t already.\nvar glyphGenerator: NSGlyphGenerator\nThe glyph generator that the layout manager uses."
  },
  {
    "title": "eventAttribution | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscene/openurloptions/3727337-eventattribution",
    "html": "Discussion\n\nFor more information about event attribution data, see UIEventAttribution.\n\nSee Also\nSpecifying the URL details\nvar sourceApplication: String?\nThe bundle ID of the app that originated the request.\nvar annotation: Any?\nA property-list object that contains the annotation data provided by a document interaction controller."
  },
  {
    "title": "usesDefaultHyphenation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsmutableparagraphstyle/3809912-usesdefaulthyphenation",
    "html": "See Also\nSetting line-break information\nvar lineBreakMode: NSLineBreakMode\nThe mode for breaking lines in the paragraph.\nvar lineBreakStrategy: NSParagraphStyle.LineBreakStrategy\nThe strategies that the text system may use to break lines while laying out the paragraph.\nvar hyphenationFactor: Float\nThe paragraph’s threshold for hyphenation.\nvar tighteningFactorForTruncation: Float\nThe threshold for using tightening as an alternative to truncation.\nvar allowsDefaultTighteningForTruncation: Bool\nA Boolean value that indicates whether the system tightens intercharacter spacing before truncating text."
  },
  {
    "title": "splitViewController(_:collapseSecondary:onto:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontrollerdelegate/1623184-splitviewcontroller",
    "html": "Parameters\nsplitViewController\n\nThe split view controller whose interface is collapsing.\n\nsecondaryViewController\n\nThe secondary view controller of the split view interface.\n\nprimaryViewController\n\nThe primary view controller of the split view interface. If you implement the primaryViewController(forCollapsing:) method in your delegate, this object is the one that method returns.\n\nReturn Value\n\nfalse to let the split view controller try to incorporate the secondary view controller’s content into the collapsed interface, or true to indicate that you do not want the split view controller to do anything with the secondary view controller.\n\nDiscussion\n\nThis delegate method only applies to classic split view interfaces. For more information, see Split view styles.\n\nThis method is your opportunity to perform any necessary tasks related to the transition to a collapsed interface. After this method returns, the split view controller removes the secondary view controller from its viewControllers array, leaving the primary view controller as its only child. In your implementation of this method, you might prepare the primary view controller for display in a compact environment, or you might attempt to incorporate the secondary view controller’s content into the newly collapsed interface.\n\nReturning false tells the split view controller to use its default behavior to try to incorporate the secondary view controller into the collapsed interface. When you return false, the split view controller calls the collapseSecondaryViewController(_:for:) method of the primary view controller, giving it a chance to do something with the secondary view controller’s content. Most view controllers do nothing by default, but the UINavigationController class responds by pushing the secondary view controller onto its navigation stack.\n\nReturning true from this method tells the split view controller not to apply any default behavior. You might return true in cases where you do not want the secondary view controller’s content incorporated into the resulting interface.\n\nSee Also\nCollapsing and expanding classic split views\nfunc primaryViewController(forCollapsing: UISplitViewController) -> UIViewController?\nAsks the delegate to provide the single view controller to display after the split view interface collapses.\nfunc primaryViewController(forExpanding: UISplitViewController) -> UIViewController?\nAsks the delegate to provide the view controller to display in the primary position when the split view interface expands.\nfunc splitViewController(UISplitViewController, separateSecondaryFrom: UIViewController) -> UIViewController?\nAsks the delegate to provide the new secondary view controller for the split view interface."
  },
  {
    "title": "attachmentBounds(for:proposedLineFragment:glyphPosition:characterIndex:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextattachmentcontainer/1508382-attachmentbounds",
    "html": "Required\n\nParameters\ntextContainer\n\nThe text container for the text being laid out.\n\nlineFrag\n\nThe line fragment containing the text attachment.\n\nposition\n\nThe glyph location inside lineFrag which is the origin of the returned bounds rectangle.\n\ncharIndex\n\nThe character location inside the text storage for the attachment character.\n\nReturn Value\n\nThe bounds rectangle of the text attachment if not CGRectZero; otherwise, the rectangle of the size property of the attachment’s image property.\n\nDiscussion\n\nConforming objects can implement more sophisticated logic for negotiating the attachment bounds based on the available container space and proposed line fragment rectangle."
  },
  {
    "title": "annotation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscene/openurloptions/3197943-annotation",
    "html": "Discussion\n\nThis property contains the data that the originating app placed in the annotation property of its UIDocumentInteractionController. The root object is always an NSDictionary object. The contents of that dictionary may be any other property list types, including NSDictionary, NSArray, NSData, NSString, NSNumber, or NSDate objects.\n\nSee Also\nSpecifying the URL details\nvar sourceApplication: String?\nThe bundle ID of the app that originated the request.\nvar eventAttribution: UIEventAttribution?\nAn event attribution associated with the URL to open."
  },
  {
    "title": "shortcutItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/launchoptionskey/1622972-shortcutitem",
    "html": "Discussion\n\nThe value of this key is the UIApplicationShortcutItem object representing the action that the user selected.\n\nSee Also\nAccessing launch options\nstatic let bluetoothCentrals: UIApplication.LaunchOptionsKey\nA key indicating that the app was relaunched to handle Bluetooth-related events.\nstatic let bluetoothPeripherals: UIApplication.LaunchOptionsKey\nA key indicating that the app should continue actions associated with its Bluetooth peripheral objects.\nstatic let cloudKitShareMetadata: UIApplication.LaunchOptionsKey\nA key indicating that the app received a CloudKit share invitation.\nstatic let eventAttribution: UIApplication.LaunchOptionsKey\nstatic let location: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched to handle an incoming location event.\nstatic let newsstandDownloads: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched to process newly downloaded Newsstand assets.\nstatic let remoteNotification: UIApplication.LaunchOptionsKey\nA key indicating that a remote notification is available for the app to process.\nstatic let sourceApplication: UIApplication.LaunchOptionsKey\nA key indicating that another app requested the launch of your app.\nstatic let url: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched so that it could open the specified URL.\nstatic let userActivityDictionary: UIApplication.LaunchOptionsKey\nA key indicating a dictionary associated with an activity that the user wants to continue.\nstatic let userActivityType: UIApplication.LaunchOptionsKey\nA key indicating the type of user activity that the user wants to continue.\nstatic let annotation: UIApplication.LaunchOptionsKey\nA key indicating that the URL passed to your app contained custom annotation data from the source app.\nDeprecated\nstatic let localNotification: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched to handle a local notification.\nDeprecated"
  },
  {
    "title": "offset(from:to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontentstorage/3852572-offset",
    "html": "Parameters\nfrom\n\nA starting location.\n\nto\n\nAn ending location.\n\nReturn Value\n\nAn Integer that represents the offset between the starting and ending locations.\n\nSee Also\nFinding ranges, locations, and offsets\nfunc adjustedRange(from: NSTextRange, forEditingTextSelection: Bool) -> NSTextRange?\nReturns the text range, if any, in the backing store that required manual adjustment after editing.\nfunc location(NSTextLocation, offsetBy: Int) -> NSTextLocation?\nReturns a new text location from an existing location and offset you provide."
  },
  {
    "title": "UIScene.ActivationState.background | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscene/activationstate/background",
    "html": "Discussion\n\nA background scene does not have a visible interface.\n\nSee Also\nScene States\ncase unattached\nA state that indicates that the scene is not currently connected to your app.\ncase foregroundInactive\nA state that indicates that the scene is running in the foreground but is not receiving events.\ncase foregroundActive\nA state that indicates that the scene is running in the foreground and is currently receiving events."
  },
  {
    "title": "UIScene.ActivationState.unattached | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscene/activationstate/unattached",
    "html": "Discussion\n\nA scene starts in the unattached state and remains in that state until the system sends a connection notification to it. A scene reenters the attached state when the user dismisses the interface from the app switcher or to reclaim its resources.\n\nSee Also\nScene States\ncase foregroundInactive\nA state that indicates that the scene is running in the foreground but is not receiving events.\ncase foregroundActive\nA state that indicates that the scene is running in the foreground and is currently receiving events.\ncase background\nA state that indicates that the scene is running in the background and is not onscreen."
  },
  {
    "title": "UIScene.ActivationState.foregroundInactive | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscene/activationstate/foregroundinactive",
    "html": "Discussion\n\nA scene transits through the foreground-inactive state on its way to or from another state.\n\nSee Also\nScene States\ncase unattached\nA state that indicates that the scene is not currently connected to your app.\ncase foregroundActive\nA state that indicates that the scene is running in the foreground and is currently receiving events.\ncase background\nA state that indicates that the scene is running in the background and is not onscreen."
  },
  {
    "title": "showCGGlyphs(_:positions:count:font:textMatrix:attributes:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/3180379-showcgglyphs",
    "html": "Parameters\nglyphs\n\nThe glyphs to draw, which may include embedded NULL bytes.\n\npositions\n\nThe positions at which to draw the glyphs in the user space coordinate system.\n\nglyphCount\n\nThe number of glyphs to draw.\n\nfont\n\nThe font to apply to the graphics state. This value can be different from the font value in the attributes argument because of various font substitutions that the system automatically executes.\n\ntextMatrix\n\nThe affine transform mapping the text space coordinate system to the user space coordinate system. The tx and ty components of textMatrix are ignored because Quartz overrides them with the glyph positions.\n\nattributes\n\nA dictionary of glyph attributes. For a list of possible keys and values, see Glyph Attributes.\n\nCGContext\n\nA graphics context object already configured with the information in the font, textMatrix, and attributes parameters\n\nDiscussion\n\nThe layout manager calls this primitive method when it is time to lay out a set of glyphs in the specified graphics context.\n\nSee Also\nDrawing\nfunc drawBackground(forGlyphRange: NSRange, at: CGPoint)\nDraws background marks for the specified glyphs, which must lie completely within a single text container.\nfunc drawGlyphs(forGlyphRange: NSRange, at: CGPoint)\nDraws the specified glyphs, which must lie completely within a single text container.\nfunc drawStrikethrough(forGlyphRange: NSRange, strikethroughType: NSUnderlineStyle, baselineOffset: CGFloat, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint)\nDraws a strikethrough for the specified glyphs.\nfunc drawUnderline(forGlyphRange: NSRange, underlineType: NSUnderlineStyle, baselineOffset: CGFloat, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint)\nDraws underlining for the glyphs in a specified range.\nfunc fillBackgroundRectArray(UnsafePointer<CGRect>, count: Int, forCharacterRange: NSRange, color: UIColor)\nFills background rectangles with a color.\nfunc strikethroughGlyphRange(NSRange, strikethroughType: NSUnderlineStyle, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint)\nCalculates and draws strikethrough for the specified glyphs.\nfunc underlineGlyphRange(NSRange, underlineType: NSUnderlineStyle, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint)\nCalculates subranges to underline for the specified glyphs and draws the underlining as appropriate."
  },
  {
    "title": "fillBackgroundRectArray(_:count:forCharacterRange:color:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403161-fillbackgroundrectarray",
    "html": "Parameters\nrectArray\n\nThe array of rectangles to fill.\n\nrectCount\n\nThe number of rectangles in rectArray.\n\ncharRange\n\nThe range of characters whose background rectangles are filled.\n\ncolor\n\nThe fill color.\n\nDiscussion\n\nThis is the primitive method used by drawBackground(forGlyphRange:at:), providing a finer-grained override point for actually filling rectangles with a particular background color for a background color attribute, a selected or marked range highlight, a block decoration, or any other rectangle fill needed by that method. As with showPackedGlyphs:length:glyphRange:atPoint:font:color:printingAdjustment:, the charRange and color parameters are passed in merely for informational purposes; the color is already set in the graphics state. If for any reason you modify it, you must restore it before returning from this method.\n\nThis method operates in terms of character ranges, because the relevant attributes are expressed on characters, and they don't always lie on glyph boundaries—for example, when one character of an “fi” ligature is highlighted.\n\nYou should never call this method, but you might override it. The default implementation simply fills the rectangles in the specified array. The graphics operation used for this fill is controlled by a link check; for compatibility reasons, it is NSCompositeCopy for applications linked prior to OS X v10.6 and NSCompositeSourceOver for applications linked on macOS 10.6 or later. Applications can control the operation used, or modify the drawing, by overriding this method in an NSLayoutManager subclass.\n\nSee Also\nDrawing\nfunc drawBackground(forGlyphRange: NSRange, at: CGPoint)\nDraws background marks for the specified glyphs, which must lie completely within a single text container.\nfunc drawGlyphs(forGlyphRange: NSRange, at: CGPoint)\nDraws the specified glyphs, which must lie completely within a single text container.\nfunc drawStrikethrough(forGlyphRange: NSRange, strikethroughType: NSUnderlineStyle, baselineOffset: CGFloat, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint)\nDraws a strikethrough for the specified glyphs.\nfunc drawUnderline(forGlyphRange: NSRange, underlineType: NSUnderlineStyle, baselineOffset: CGFloat, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint)\nDraws underlining for the glyphs in a specified range.\nfunc showCGGlyphs(UnsafePointer<CGGlyph>, positions: UnsafePointer<CGPoint>, count: Int, font: UIFont, textMatrix: CGAffineTransform, attributes: [NSAttributedString.Key : Any], in: CGContext)\nRenders the glyphs at the specified positions, using the specified attributes.\nfunc strikethroughGlyphRange(NSRange, strikethroughType: NSUnderlineStyle, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint)\nCalculates and draws strikethrough for the specified glyphs.\nfunc underlineGlyphRange(NSRange, underlineType: NSUnderlineStyle, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint)\nCalculates subranges to underline for the specified glyphs and draws the underlining as appropriate."
  },
  {
    "title": "adjustedRange(from:forEditingTextSelection:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontentstorage/3852570-adjustedrange",
    "html": "Parameters\ntextRange\n\nThe text range.\n\nforEditingTextSelection\n\nA Boolean value that indicates if textRange is for the text selection associated with the edit session.\n\nReturn Value\n\nThe adjusted TextRange for the editing session, or nil of no adjustment was necessary\n\nDiscussion\n\nWhen textRange is intersecting or following the current edited range, the method returns an adjusted range for the modification in the editing session.\n\nSee Also\nFinding ranges, locations, and offsets\nfunc location(NSTextLocation, offsetBy: Int) -> NSTextLocation?\nReturns a new text location from an existing location and offset you provide.\nfunc offset(from: NSTextLocation, to: NSTextLocation) -> Int\nReturns the offset between the two specified locations."
  },
  {
    "title": "drawUnderline(forGlyphRange:underlineType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403079-drawunderline",
    "html": "Parameters\nglyphRange\n\nA range of glyphs, which must belong to a single line fragment rectangle (as returned by lineFragmentRect(forGlyphAt:effectiveRange:)).\n\nunderlineVal\n\nThe style of underlining to draw. This value is a mask derived from the value for underlineStyle—for example, (NSUnderlinePatternDash | NSUnderlineStyleThick). Subclasses can define custom underlining styles.\n\nbaselineOffset\n\nSpecifies the distance from the bottom of the bounding box of the specified glyphs in the specified range to their baseline.\n\nlineRect\n\nThe line fragment rectangle containing the glyphs to draw underlining for.\n\nlineGlyphRange\n\nThe range of all glyphs within lineRect.\n\ncontainerOrigin\n\nThe origin of the lineRectNSTextContainer in its NSTextView.\n\nDiscussion\n\nThis method is invoked automatically by underlineGlyphRange(_:underlineType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:); you should rarely need to invoke it directly. This method’s underlineVal parameter does not take account of any setting forNSUnderlineByWordMask because that's taken care of by underlineGlyphRange(_:underlineType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:).\n\nSee Also\nDrawing\nfunc drawBackground(forGlyphRange: NSRange, at: CGPoint)\nDraws background marks for the specified glyphs, which must lie completely within a single text container.\nfunc drawGlyphs(forGlyphRange: NSRange, at: CGPoint)\nDraws the specified glyphs, which must lie completely within a single text container.\nfunc drawStrikethrough(forGlyphRange: NSRange, strikethroughType: NSUnderlineStyle, baselineOffset: CGFloat, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint)\nDraws a strikethrough for the specified glyphs.\nfunc fillBackgroundRectArray(UnsafePointer<CGRect>, count: Int, forCharacterRange: NSRange, color: UIColor)\nFills background rectangles with a color.\nfunc showCGGlyphs(UnsafePointer<CGGlyph>, positions: UnsafePointer<CGPoint>, count: Int, font: UIFont, textMatrix: CGAffineTransform, attributes: [NSAttributedString.Key : Any], in: CGContext)\nRenders the glyphs at the specified positions, using the specified attributes.\nfunc strikethroughGlyphRange(NSRange, strikethroughType: NSUnderlineStyle, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint)\nCalculates and draws strikethrough for the specified glyphs.\nfunc underlineGlyphRange(NSRange, underlineType: NSUnderlineStyle, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint)\nCalculates subranges to underline for the specified glyphs and draws the underlining as appropriate.\nRelated Documentation\nfunc textContainer(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> NSTextContainer?\nReturns the text container that manages the layout for the specified glyph, causing layout to happen as necessary.\nvar textContainerOrigin: NSPoint\nThe origin of the receiver’s text container."
  },
  {
    "title": "processEditing(for:edited:range:changeInLength:invalidatedRange:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403065-processediting",
    "html": "Parameters\ntextStorage\n\nThe text storage object processing edits.\n\neditMask\n\nThe types of edits done: NSTextStorageEditedAttributes, NSTextStorageEditedCharacters, or both.\n\nnewCharRange\n\nThe range in the final string that was explicitly edited.\n\ndelta\n\nThe length delta for the editing changes.\n\ninvalidatedCharRange\n\nThe range of characters that changed as a result of attribute fixing. This invalidated range is either equal to newCharRange or larger.\n\nDiscussion\n\nThe processEditing() method of NSTextStorage calls this method to notify the layout manager of an edit action. Layout managers must not change the contents of the text storage during the execution of this message.\n\nSee Also\nInvalidating glyphs and layout\nfunc invalidateDisplay(forCharacterRange: NSRange)\nInvalidates display for the specified character range.\nfunc invalidateDisplay(forGlyphRange: NSRange)\nInvalidates a range of glyphs, requiring new layout information, and updates the appropriate regions of any text views that display those glyphs.\nfunc invalidateGlyphs(forCharacterRange: NSRange, changeInLength: Int, actualCharacterRange: NSRangePointer?)\nInvalidates and adjusts the glyphs in the specified character range.\nfunc invalidateLayout(forCharacterRange: NSRange, actualCharacterRange: NSRangePointer?)\nInvalidates the layout information for the glyphs that map to the specified character range."
  },
  {
    "title": "textLayoutFragment(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3810013-textlayoutfragment",
    "html": "Parameters\nposition\n\nA CGPoint that describes the position in the coordinate system for the text container.\n\nReturn Value\n\nAn NSTextLayoutFragment.\n\nSee Also\nCausing layout generation\nvar textViewportLayoutController: NSTextViewportLayoutController\nReturns text viewport layout controller associated with the layout manager’s text container.\nfunc invalidateLayout(for: NSTextRange)\nInvalidates the layout information for specified text range.\nfunc textLayoutFragment(for: NSTextLocation) -> NSTextLayoutFragment?\nReturns the text layout fragment from the document at the specified location.\nfunc ensureLayout(for: CGRect)\nPerforms the layout for filling the bounds you specify inside the last text container.\nfunc ensureLayout(for: NSTextRange)\nPerforms the layout for specified text range.\nfunc enumerateTextLayoutFragments(from: NSTextLocation?, options: NSTextLayoutFragment.EnumerationOptions, using: (NSTextLayoutFragment) -> Bool) -> NSTextLocation?\nEnumerates the text layout fragments starting at the specified location.\nenum NSTextLayoutManager.SegmentType\nValues that describe the rendering of selection boundaries.\nstruct NSTextLayoutManager.SegmentOptions\nValues that describe where and how the framework extends segments of a selection."
  },
  {
    "title": "strikethroughGlyphRange(_:strikethroughType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403009-strikethroughglyphrange",
    "html": "Parameters\nglyphRange\n\nThe range of glyphs for which to draw a strikethrough. The range must belong to a single line fragment rectangle (as returned by lineFragmentRect(forGlyphAt:effectiveRange:)).\n\nstrikethroughVal\n\nThe style of underlining to draw. This value is a mask derived from the value for underlineStyle—for example, (NSUnderlinePatternDash | NSUnderlineStyleThick | NSUnderlineByWordMask). Subclasses can define custom underlining styles.\n\nlineRect\n\nThe line fragment rectangle containing the glyphs to draw strikethrough for.\n\nlineGlyphRange\n\nThe range of all glyphs within lineRect.\n\ncontainerOrigin\n\nThe origin of the line fragment rectangle’s NSTextContainer in its NSTextView.\n\nDiscussion\n\nThis method determines which glyphs actually need to have a strikethrough drawn based on strikethroughVal. After determining which glyphs to draw strikethrough on, this method invokes drawStrikethrough(forGlyphRange:strikethroughType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:) for each contiguous range of glyphs that requires it.\n\nSee Also\nDrawing\nfunc drawBackground(forGlyphRange: NSRange, at: CGPoint)\nDraws background marks for the specified glyphs, which must lie completely within a single text container.\nfunc drawGlyphs(forGlyphRange: NSRange, at: CGPoint)\nDraws the specified glyphs, which must lie completely within a single text container.\nfunc drawStrikethrough(forGlyphRange: NSRange, strikethroughType: NSUnderlineStyle, baselineOffset: CGFloat, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint)\nDraws a strikethrough for the specified glyphs.\nfunc drawUnderline(forGlyphRange: NSRange, underlineType: NSUnderlineStyle, baselineOffset: CGFloat, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint)\nDraws underlining for the glyphs in a specified range.\nfunc fillBackgroundRectArray(UnsafePointer<CGRect>, count: Int, forCharacterRange: NSRange, color: UIColor)\nFills background rectangles with a color.\nfunc showCGGlyphs(UnsafePointer<CGGlyph>, positions: UnsafePointer<CGPoint>, count: Int, font: UIFont, textMatrix: CGAffineTransform, attributes: [NSAttributedString.Key : Any], in: CGContext)\nRenders the glyphs at the specified positions, using the specified attributes.\nfunc underlineGlyphRange(NSRange, underlineType: NSUnderlineStyle, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint)\nCalculates subranges to underline for the specified glyphs and draws the underlining as appropriate."
  },
  {
    "title": "invalidateDisplay(forCharacterRange:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1402924-invalidatedisplay",
    "html": "Parameters\ncharRange\n\nThe character range for which display is invalidated.\n\nDiscussion\n\nParts of the range that are not laid out are remembered and redisplayed later when the layout is available. Does not actually cause layout.\n\nSee Also\nInvalidating glyphs and layout\nfunc invalidateDisplay(forGlyphRange: NSRange)\nInvalidates a range of glyphs, requiring new layout information, and updates the appropriate regions of any text views that display those glyphs.\nfunc invalidateGlyphs(forCharacterRange: NSRange, changeInLength: Int, actualCharacterRange: NSRangePointer?)\nInvalidates and adjusts the glyphs in the specified character range.\nfunc invalidateLayout(forCharacterRange: NSRange, actualCharacterRange: NSRangePointer?)\nInvalidates the layout information for the glyphs that map to the specified character range.\nfunc processEditing(for: NSTextStorage, edited: NSTextStorage.EditActions, range: NSRange, changeInLength: Int, invalidatedRange: NSRange)\nNotifies the layout manager when an edit action changes the contents of its text storage object."
  },
  {
    "title": "textElement(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontentstorage/3809937-textelement",
    "html": "Parameters\nattributedString\n\nThe attributed string to map into an NSTextElement.\n\nReturn Value\n\nAn NSTextElement, or nil.\n\nDiscussion\n\nReturns nil when attributedString contains attributes not mappable to NSTextElement.\n\nSee Also\nAccessing text\nvar attributedString: NSAttributedString?\nThe contents of a document.\nfunc attributedString(for: NSTextElement) -> NSAttributedString?\nReturns a new attributed string for the text element."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontentstorage/3809936-delegate",
    "html": "See Also\nAccessing paragraphs\nprotocol NSTextContentStorageDelegate\nThe optional methods that delegates of content storage objects implement to handle content processing."
  },
  {
    "title": "UIRemoteNotificationType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiremotenotificationtype",
    "html": "Overview\n\nOne or more of the values in the UIRemoteNotificationType bit mask are passed to iOS as the argument of the registerForRemoteNotifications(matching:) method. Thereafter, iOS filters notifications for the app based on these values. You can always get the current notification types by calling the enabledRemoteNotificationTypes() method.\n\nTopics\nConstants\nstatic var badge: UIRemoteNotificationType\nThe app accepts notifications that badge the app icon.\nstatic var sound: UIRemoteNotificationType\nThe app accepts alert sounds as notifications.\nstatic var alert: UIRemoteNotificationType\nThe app accepts alert messages as notifications.\nstatic var newsstandContentAvailability: UIRemoteNotificationType\nThe app accepts notifications that start the downloading of issue assets for Newsstand apps.\nInitializers\ninit(rawValue: UInt)\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nDeprecated methods\nfunc requestSceneSessionActivation(UISceneSession?, userActivity: NSUserActivity?, options: UIScene.ActivationRequestOptions?, errorHandler: ((Error) -> Void)?)\nAsks the system to activate an existing scene, or create a new scene and associate it with your app.\nDeprecated\nfunc beginIgnoringInteractionEvents()\nTells the receiver to suspend the handling of touch-related events.\nDeprecated\nfunc endIgnoringInteractionEvents()\nTells the receiver to resume the handling of touch-related events.\nDeprecated\nfunc setMinimumBackgroundFetchInterval(TimeInterval)\nSpecifies the minimum amount of time that must elapse between background fetch operations.\nDeprecated\nfunc scheduleLocalNotification(UILocalNotification)\nSchedules a local notification for delivery at its encapsulated date and time.\nDeprecated\nfunc presentLocalNotificationNow(UILocalNotification)\nPresents a local notification immediately.\nDeprecated\nfunc cancelLocalNotification(UILocalNotification)\nCancels the delivery of the specified scheduled local notification.\nDeprecated\nfunc cancelAllLocalNotifications()\nCancels the delivery of all scheduled local notifications.\nDeprecated\nfunc setKeepAliveTimeout(TimeInterval, handler: (() -> Void)?) -> Bool\nConfigures a periodic handler for VoIP apps in older versions of iOS.\nDeprecated\nlet UIMinimumKeepAliveTimeout: TimeInterval\nThe minimum amount of time (measured in seconds) an app may run a critical background task in the background.\nDeprecated\nfunc clearKeepAliveTimeout()\nRemoves a previously installed periodic handler block.\nDeprecated\nfunc setStatusBarHidden(Bool, with: UIStatusBarAnimation)\nHides or shows the status bar, optionally animating the transition.\nDeprecated\nfunc setStatusBarStyle(UIStatusBarStyle, animated: Bool)\nSets the style of the status bar, optionally animating the transition to the new style.\nDeprecated\nfunc setStatusBarOrientation(UIInterfaceOrientation, animated: Bool)\nSets the app's status bar to the specified orientation, optionally animating the transition.\nDeprecated\nfunc registerUserNotificationSettings(UIUserNotificationSettings)\nRegisters your preferred options for notifying the user.\nDeprecated\nfunc registerForRemoteNotifications(matching: UIRemoteNotificationType)\nRegister to receive remote notifications of the specified types via Apple Push Notification service.\nDeprecated\nfunc enabledRemoteNotificationTypes() -> UIRemoteNotificationType\nReturns the types of notifications the app accepts.\nDeprecated\nfunc openURL(URL) -> Bool\nAttempts to open the resource at the specified URL.\nDeprecated\nfunc setNewsstandIconImage(UIImage?)\nSets the icon of a Newsstand app to an image depicting the current issue of a publication.\nDeprecated"
  },
  {
    "title": "enabledRemoteNotificationTypes() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/1623075-enabledremotenotificationtypes",
    "html": "Deprecated\n\nUse the isRegisteredForRemoteNotifications method instead.\n\nReturn Value\n\nA bit mask whose values indicate the types of notifications the user has requested for the app. See UIRemoteNotificationType for valid bit-mask values.\n\nDiscussion\n\nThe values in the returned bit mask indicate the types of notifications currently enabled for the app. These types are first set when the app calls the registerForRemoteNotifications(matching:) method to register itself with Apple Push Notification service. Thereafter, the user may modify these accepted notification types in the Notifications preference of the Settings app. This method returns those initial or modified values. iOS does not display or play notification types specified in the notification payload that are not one of the enabled types. For example, the app might accept icon-badging as a form of notification, but might reject sounds and alert messages, even if they are specified in the notification payload.\n\nSee Also\nDeprecated methods\nfunc requestSceneSessionActivation(UISceneSession?, userActivity: NSUserActivity?, options: UIScene.ActivationRequestOptions?, errorHandler: ((Error) -> Void)?)\nAsks the system to activate an existing scene, or create a new scene and associate it with your app.\nDeprecated\nfunc beginIgnoringInteractionEvents()\nTells the receiver to suspend the handling of touch-related events.\nDeprecated\nfunc endIgnoringInteractionEvents()\nTells the receiver to resume the handling of touch-related events.\nDeprecated\nfunc setMinimumBackgroundFetchInterval(TimeInterval)\nSpecifies the minimum amount of time that must elapse between background fetch operations.\nDeprecated\nfunc scheduleLocalNotification(UILocalNotification)\nSchedules a local notification for delivery at its encapsulated date and time.\nDeprecated\nfunc presentLocalNotificationNow(UILocalNotification)\nPresents a local notification immediately.\nDeprecated\nfunc cancelLocalNotification(UILocalNotification)\nCancels the delivery of the specified scheduled local notification.\nDeprecated\nfunc cancelAllLocalNotifications()\nCancels the delivery of all scheduled local notifications.\nDeprecated\nfunc setKeepAliveTimeout(TimeInterval, handler: (() -> Void)?) -> Bool\nConfigures a periodic handler for VoIP apps in older versions of iOS.\nDeprecated\nlet UIMinimumKeepAliveTimeout: TimeInterval\nThe minimum amount of time (measured in seconds) an app may run a critical background task in the background.\nDeprecated\nfunc clearKeepAliveTimeout()\nRemoves a previously installed periodic handler block.\nDeprecated\nfunc setStatusBarHidden(Bool, with: UIStatusBarAnimation)\nHides or shows the status bar, optionally animating the transition.\nDeprecated\nfunc setStatusBarStyle(UIStatusBarStyle, animated: Bool)\nSets the style of the status bar, optionally animating the transition to the new style.\nDeprecated\nfunc setStatusBarOrientation(UIInterfaceOrientation, animated: Bool)\nSets the app's status bar to the specified orientation, optionally animating the transition.\nDeprecated\nfunc registerUserNotificationSettings(UIUserNotificationSettings)\nRegisters your preferred options for notifying the user.\nDeprecated\nfunc registerForRemoteNotifications(matching: UIRemoteNotificationType)\nRegister to receive remote notifications of the specified types via Apple Push Notification service.\nDeprecated\nstruct UIRemoteNotificationType\nConstants indicating the types of notifications the app may display to the user.\nDeprecated\nfunc openURL(URL) -> Bool\nAttempts to open the resource at the specified URL.\nDeprecated\nfunc setNewsstandIconImage(UIImage?)\nSets the icon of a Newsstand app to an image depicting the current issue of a publication.\nDeprecated\nRelated Documentation"
  },
  {
    "title": "UIApplicationShortcutIcon.IconType.update | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplicationshortcuticon/icontype/update",
    "html": "Discussion"
  },
  {
    "title": "minimumLineHeight | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsmutableparagraphstyle/1531118-minimumlineheight",
    "html": "Discussion\n\nThis property contains the minimum height in points that any line in the receiver will occupy, regardless of the font size or size of any attached graphic. This value must be nonnegative.\n\nSee Also\nSetting style information\nfunc setParagraphStyle(NSParagraphStyle)\nReplaces the subattributes of the paragraph with those in the specified paragraph style object.\nvar alignment: NSTextAlignment\nThe text alignment of the paragraph.\nvar firstLineHeadIndent: CGFloat\nThe indentation of the first line of the paragraph.\nvar headIndent: CGFloat\nThe indentation of the paragraph’s lines other than the first.\nvar tailIndent: CGFloat\nThe trailing indentation of the paragraph.\nvar lineHeightMultiple: CGFloat\nThe line height multiple.\nvar maximumLineHeight: CGFloat\nThe paragraph’s maximum line height.\nvar lineSpacing: CGFloat\nThe distance in points between the bottom of one line fragment and the top of the next.\nvar paragraphSpacing: CGFloat\nThe space after the end of the paragraph.\nvar paragraphSpacingBefore: CGFloat\nThe distance between the paragraph’s top and the beginning of its text content.\nvar baseWritingDirection: NSWritingDirection\nThe base writing direction for the paragraph."
  },
  {
    "title": "removeTabStop(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsmutableparagraphstyle/1535084-removetabstop",
    "html": "See Also\nSpecifying tab information\nfunc addTabStop(NSTextTab)\nAdds the specified tab stop to the paragraph.\nvar tabStops: [NSTextTab]!\nThe text tab objects that represent the paragraph’s tab stops.\nvar defaultTabInterval: CGFloat\nA number used as the document’s default tab spacing.\nRelated Documentation\nvar tabStops: [NSTextTab]\nThe text tab objects that represent the paragraph’s tab stops."
  },
  {
    "title": "paragraphSpacingBefore | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsmutableparagraphstyle/1527729-paragraphspacingbefore",
    "html": "Discussion\n\nThis property contains the space (measured in points) between the paragraph’s top and the beginning of its text content. The default value of this property is 0.0.\n\nSee Also\nSetting style information\nfunc setParagraphStyle(NSParagraphStyle)\nReplaces the subattributes of the paragraph with those in the specified paragraph style object.\nvar alignment: NSTextAlignment\nThe text alignment of the paragraph.\nvar firstLineHeadIndent: CGFloat\nThe indentation of the first line of the paragraph.\nvar headIndent: CGFloat\nThe indentation of the paragraph’s lines other than the first.\nvar tailIndent: CGFloat\nThe trailing indentation of the paragraph.\nvar lineHeightMultiple: CGFloat\nThe line height multiple.\nvar maximumLineHeight: CGFloat\nThe paragraph’s maximum line height.\nvar minimumLineHeight: CGFloat\nThe paragraph’s minimum line height.\nvar lineSpacing: CGFloat\nThe distance in points between the bottom of one line fragment and the top of the next.\nvar paragraphSpacing: CGFloat\nThe space after the end of the paragraph.\nvar baseWritingDirection: NSWritingDirection\nThe base writing direction for the paragraph."
  },
  {
    "title": "addTabStop(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsmutableparagraphstyle/1525051-addtabstop",
    "html": "See Also\nSpecifying tab information\nfunc removeTabStop(NSTextTab)\nRemoves the first text tab with a location and type equal to the specified tab stop.\nvar tabStops: [NSTextTab]!\nThe text tab objects that represent the paragraph’s tab stops.\nvar defaultTabInterval: CGFloat\nA number used as the document’s default tab spacing.\nRelated Documentation\nvar tabStops: [NSTextTab]\nThe text tab objects that represent the paragraph’s tab stops."
  },
  {
    "title": "lineSpacing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsmutableparagraphstyle/1528742-linespacing",
    "html": "Discussion\n\nThis value is always nonnegative. This value is included in the line fragment heights in the layout manager.\n\nSee Also\nSetting style information\nfunc setParagraphStyle(NSParagraphStyle)\nReplaces the subattributes of the paragraph with those in the specified paragraph style object.\nvar alignment: NSTextAlignment\nThe text alignment of the paragraph.\nvar firstLineHeadIndent: CGFloat\nThe indentation of the first line of the paragraph.\nvar headIndent: CGFloat\nThe indentation of the paragraph’s lines other than the first.\nvar tailIndent: CGFloat\nThe trailing indentation of the paragraph.\nvar lineHeightMultiple: CGFloat\nThe line height multiple.\nvar maximumLineHeight: CGFloat\nThe paragraph’s maximum line height.\nvar minimumLineHeight: CGFloat\nThe paragraph’s minimum line height.\nvar paragraphSpacing: CGFloat\nThe space after the end of the paragraph.\nvar paragraphSpacingBefore: CGFloat\nThe distance between the paragraph’s top and the beginning of its text content.\nvar baseWritingDirection: NSWritingDirection\nThe base writing direction for the paragraph."
  },
  {
    "title": "invalidateDisplay(forGlyphRange:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403118-invalidatedisplay",
    "html": "Parameters\nglyphRange\n\nThe range of glyphs to invalidate.\n\nDiscussion\n\nYou should rarely need to invoke this method.\n\nSee Also\nInvalidating glyphs and layout\nfunc invalidateDisplay(forCharacterRange: NSRange)\nInvalidates display for the specified character range.\nfunc invalidateGlyphs(forCharacterRange: NSRange, changeInLength: Int, actualCharacterRange: NSRangePointer?)\nInvalidates and adjusts the glyphs in the specified character range.\nfunc invalidateLayout(forCharacterRange: NSRange, actualCharacterRange: NSRangePointer?)\nInvalidates the layout information for the glyphs that map to the specified character range.\nfunc processEditing(for: NSTextStorage, edited: NSTextStorage.EditActions, range: NSRange, changeInLength: Int, invalidatedRange: NSRange)\nNotifies the layout manager when an edit action changes the contents of its text storage object."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403043-init",
    "html": "Parameters\ncoder\n\nA coder that implements NSCoder.\n\nSee Also\nCreating a layout manager\ninit()\nInitializes a newly created layout manager object."
  },
  {
    "title": "editedMask | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextstorage/1525323-editedmask",
    "html": "Discussion\n\nThis property indicates pending changes for attributes, characters, or both. Use the C bitwise AND operator to test the value against the editedAttributes or editedCharacters constants; testing for equality fails if you add additional mask flags later. The text storage object’s associated delegate and layout managers can use this information to determine the nature of edits in their respective notification methods.\n\nSee Also\nDetermining the nature of changes\nvar editedRange: NSRange\nThe range of text that contains changes.\nvar changeInLength: Int\nThe difference between the current length of the edited range and its length before editing."
  },
  {
    "title": "ensureAttributesAreFixed(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextstorage/1533947-ensureattributesarefixed",
    "html": "Parameters\nrange\n\nThe range of characters to examine.\n\nDiscussion\n\nAn NSTextStorage object using lazy attribute fixing is required to call this method before accessing any attributes within range. This method gives attribute fixing a chance to occur if necessary. NSTextStorage subclasses wishing to support laziness must call this method from all attribute accessors they implement.\n\nSee Also\nFixing the string attributes\nfunc invalidateAttributes(in: NSRange)\nInvalidates attributes in the specified range.\nvar fixesAttributesLazily: Bool\nA Boolean value that indicates whether the text storage object fixes attributes lazily."
  },
  {
    "title": "glyphRange(forCharacterRange:actualCharacterRange:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1402999-glyphrange",
    "html": "Parameters\ncharRange\n\nThe character range for which to return the generated glyph range.\n\nactualCharRange\n\nIf not NULL, on output, points to the actual range of characters that fully define the glyph range returned. This range may be identical to or slightly larger than the requested character range. For example, if the text storage contains the characters \"O\" and \"¨\", and the glyph store contains the single precomposed glyph \"¨Ö\", and if charRange encloses only the first or second character, then actualCharRange is set to enclose both characters.\n\nReturn Value\n\nThe range of glyphs generated by charRange.\n\nDiscussion\n\nIf the length of charRange is 0, the resulting glyph range is a zero-length range just after the glyph(s) corresponding to the preceding character, and actualCharRange will also be zero-length. If charRange extends beyond the text length, the method truncates the result to the number of glyphs in the text.\n\nIf noncontiguous layout is not enabled, this method forces the generation of glyphs for all characters up to and including the end of the specified range.\n\nSee Also\nPerforming advanced layout queries\nfunc boundingRect(forGlyphRange: NSRange, in: NSTextContainer) -> CGRect\nReturns the bounding rectangle for the specified glyphs in a container.\nfunc characterIndex(for: CGPoint, in: NSTextContainer, fractionOfDistanceBetweenInsertionPoints: UnsafeMutablePointer<CGFloat>?) -> Int\nReturns the index of the character that lies beneath the specified point using the specified container's coordinate system.\nfunc characterRange(forGlyphRange: NSRange, actualGlyphRange: NSRangePointer?) -> NSRange\nReturns the range of characters that correspond to the glyphs in the specified glyph range.\nfunc enumerateEnclosingRects(forGlyphRange: NSRange, withinSelectedGlyphRange: NSRange, in: NSTextContainer, using: (CGRect, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates enclosing rectangles for the specified glyph range in a text container.\nfunc enumerateLineFragments(forGlyphRange: NSRange, using: (CGRect, CGRect, NSTextContainer, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates line fragments intersecting with the specified glyph range.\nfunc fractionOfDistanceThroughGlyph(for: CGPoint, in: NSTextContainer) -> CGFloat\nReturns the fraction of the distance between the glyph at the specified point and the next glyph.\nfunc getLineFragmentInsertionPoints(forCharacterAt: Int, alternatePositions: Bool, inDisplayOrder: Bool, positions: UnsafeMutablePointer<CGFloat>?, characterIndexes: UnsafeMutablePointer<Int>?) -> Int\nReturns insertion points in bulk for a specified line fragment.\nfunc glyphIndex(for: CGPoint, in: NSTextContainer) -> Int\nReturns the index of the glyph at the specified location in a text container.\nfunc glyphIndex(for: CGPoint, in: NSTextContainer, fractionOfDistanceThroughGlyph: UnsafeMutablePointer<CGFloat>?) -> Int\nReturns the index of the glyph at the specified point using the container's coordinate system.\nfunc glyphRange(forBoundingRect: CGRect, in: NSTextContainer) -> NSRange\nReturns the smallest contiguous range for glyphs lying wholly or partially within the specified rectangle of the text container.\nfunc glyphRange(forBoundingRectWithoutAdditionalLayout: CGRect, in: NSTextContainer) -> NSRange\nReturns the smallest contiguous range for glyphs lying wholly or partially within the specified rectangle of the text container.\nfunc glyphRange(for: NSTextContainer) -> NSRange\nReturns the range of glyphs lying within the specified text container.\nfunc range(ofNominallySpacedGlyphsContaining: Int) -> NSRange\nReturns the range of displayable glyphs that surround the glyph at the specified index.\nRelated Documentation\nfunc characterIndexForGlyph(at: Int) -> Int\nReturns the index in the text storage for the first character of the specified glyph."
  },
  {
    "title": "glyphRange(forBoundingRectWithoutAdditionalLayout:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403183-glyphrange",
    "html": "Parameters\nbounds\n\nThe bounding rectangle for which to return glyphs.\n\ncontainer\n\nThe text container in which the glyphs are laid out.\n\nReturn Value\n\nThe range of glyphs that would need to be displayed in order to draw all glyphs that fall (even partially) within the given bounding rectangle. The range returned can include glyphs that don’t fall inside or intersect bounds, although the first and last glyphs in the range always do. At most this method returns the glyph range for the whole container.\n\nDiscussion\n\nUnlike glyphRange(forBoundingRect:in:), this variant of the method doesn’t perform glyph generation or layout. Its results, though faster, can be incorrect. This method is primarily for use by NSTextView; you should rarely need to use it yourself.\n\nBounding rectangles are always in container coordinates.\n\nSee Also\nPerforming advanced layout queries\nfunc boundingRect(forGlyphRange: NSRange, in: NSTextContainer) -> CGRect\nReturns the bounding rectangle for the specified glyphs in a container.\nfunc characterIndex(for: CGPoint, in: NSTextContainer, fractionOfDistanceBetweenInsertionPoints: UnsafeMutablePointer<CGFloat>?) -> Int\nReturns the index of the character that lies beneath the specified point using the specified container's coordinate system.\nfunc characterRange(forGlyphRange: NSRange, actualGlyphRange: NSRangePointer?) -> NSRange\nReturns the range of characters that correspond to the glyphs in the specified glyph range.\nfunc enumerateEnclosingRects(forGlyphRange: NSRange, withinSelectedGlyphRange: NSRange, in: NSTextContainer, using: (CGRect, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates enclosing rectangles for the specified glyph range in a text container.\nfunc enumerateLineFragments(forGlyphRange: NSRange, using: (CGRect, CGRect, NSTextContainer, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates line fragments intersecting with the specified glyph range.\nfunc fractionOfDistanceThroughGlyph(for: CGPoint, in: NSTextContainer) -> CGFloat\nReturns the fraction of the distance between the glyph at the specified point and the next glyph.\nfunc getLineFragmentInsertionPoints(forCharacterAt: Int, alternatePositions: Bool, inDisplayOrder: Bool, positions: UnsafeMutablePointer<CGFloat>?, characterIndexes: UnsafeMutablePointer<Int>?) -> Int\nReturns insertion points in bulk for a specified line fragment.\nfunc glyphIndex(for: CGPoint, in: NSTextContainer) -> Int\nReturns the index of the glyph at the specified location in a text container.\nfunc glyphIndex(for: CGPoint, in: NSTextContainer, fractionOfDistanceThroughGlyph: UnsafeMutablePointer<CGFloat>?) -> Int\nReturns the index of the glyph at the specified point using the container's coordinate system.\nfunc glyphRange(forBoundingRect: CGRect, in: NSTextContainer) -> NSRange\nReturns the smallest contiguous range for glyphs lying wholly or partially within the specified rectangle of the text container.\nfunc glyphRange(for: NSTextContainer) -> NSRange\nReturns the range of glyphs lying within the specified text container.\nfunc glyphRange(forCharacterRange: NSRange, actualCharacterRange: NSRangePointer?) -> NSRange\nReturns the range of glyphs that the specified range of characters generates.\nfunc range(ofNominallySpacedGlyphsContaining: Int) -> NSRange\nReturns the range of displayable glyphs that surround the glyph at the specified index."
  },
  {
    "title": "glyphIndex(for:in:fractionOfDistanceThroughGlyph:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1402933-glyphindex",
    "html": "Parameters\npoint\n\nThe point for which to return the glyph, in coordinates of container.\n\ncontainer\n\nThe container in which the returned glyph is laid out.\n\npartialFraction\n\nIf not NULL, on output, the fraction of the distance between the location of the glyph returned and the location of the next glyph.\n\nReturn Value\n\nThe index of the glyph falling under the given point, expressed in the given container's coordinate system.\n\nDiscussion\n\nIf no glyph is under point, the nearest glyph is returned, where nearest is defined according to the requirements of selection by mouse. Clients who wish to determine whether the the point actually lies within the bounds of the glyph returned should follow this with a call to boundingRect(forGlyphRange:in:) and test whether the point falls in the rectangle returned by that method. If partialFraction is non-NULL, it returns by reference the fraction of the distance between the location of the glyph returned and the location of the next glyph.\n\nFor purposes such as dragging out a selection or placing the insertion point, a partial percentage less than or equal to 0.5 indicates that point should be considered as falling before the glyph index returned; a partial percentage greater than 0.5 indicates that it should be considered as falling after the glyph index returned. If the nearest glyph doesn’t lie under point at all (for example, if point is beyond the beginning or end of a line), this ratio is 0 or 1.\n\nIf the glyph stream contains the glyphs “A” and “b”, with the width of “A” being 13 points, and the user clicks at a location 8 points into “A”, partialFraction is 8/13, or 0.615. In this case, the point given should be considered as falling between “A” and “b” for purposes such as dragging out a selection or placing the insertion point.\n\nPerforms glyph generation and layout if needed.\n\nAs part of its implementation, this method calls fractionOfDistanceThroughGlyph(for:in:) and glyphIndex(for:in:). To change this method’s behavior, override those two methods instead of this one.\n\nSee Also\nPerforming advanced layout queries\nfunc boundingRect(forGlyphRange: NSRange, in: NSTextContainer) -> CGRect\nReturns the bounding rectangle for the specified glyphs in a container.\nfunc characterIndex(for: CGPoint, in: NSTextContainer, fractionOfDistanceBetweenInsertionPoints: UnsafeMutablePointer<CGFloat>?) -> Int\nReturns the index of the character that lies beneath the specified point using the specified container's coordinate system.\nfunc characterRange(forGlyphRange: NSRange, actualGlyphRange: NSRangePointer?) -> NSRange\nReturns the range of characters that correspond to the glyphs in the specified glyph range.\nfunc enumerateEnclosingRects(forGlyphRange: NSRange, withinSelectedGlyphRange: NSRange, in: NSTextContainer, using: (CGRect, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates enclosing rectangles for the specified glyph range in a text container.\nfunc enumerateLineFragments(forGlyphRange: NSRange, using: (CGRect, CGRect, NSTextContainer, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates line fragments intersecting with the specified glyph range.\nfunc fractionOfDistanceThroughGlyph(for: CGPoint, in: NSTextContainer) -> CGFloat\nReturns the fraction of the distance between the glyph at the specified point and the next glyph.\nfunc getLineFragmentInsertionPoints(forCharacterAt: Int, alternatePositions: Bool, inDisplayOrder: Bool, positions: UnsafeMutablePointer<CGFloat>?, characterIndexes: UnsafeMutablePointer<Int>?) -> Int\nReturns insertion points in bulk for a specified line fragment.\nfunc glyphIndex(for: CGPoint, in: NSTextContainer) -> Int\nReturns the index of the glyph at the specified location in a text container.\nfunc glyphRange(forBoundingRect: CGRect, in: NSTextContainer) -> NSRange\nReturns the smallest contiguous range for glyphs lying wholly or partially within the specified rectangle of the text container.\nfunc glyphRange(forBoundingRectWithoutAdditionalLayout: CGRect, in: NSTextContainer) -> NSRange\nReturns the smallest contiguous range for glyphs lying wholly or partially within the specified rectangle of the text container.\nfunc glyphRange(for: NSTextContainer) -> NSRange\nReturns the range of glyphs lying within the specified text container.\nfunc glyphRange(forCharacterRange: NSRange, actualCharacterRange: NSRangePointer?) -> NSRange\nReturns the range of glyphs that the specified range of characters generates.\nfunc range(ofNominallySpacedGlyphsContaining: Int) -> NSRange\nReturns the range of displayable glyphs that surround the glyph at the specified index."
  },
  {
    "title": "glyphIndex(for:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403112-glyphindex",
    "html": "Discussion\n\nThis method is a primitive for glyphIndex(for:in:fractionOfDistanceThroughGlyph:). You should always call the main method, not the primitives.\n\nOverriding should be done for the primitive methods. Existing subclasses that do not do this overriding will not have their implementations available to Java developers.\n\nSee Also\nPerforming advanced layout queries\nfunc boundingRect(forGlyphRange: NSRange, in: NSTextContainer) -> CGRect\nReturns the bounding rectangle for the specified glyphs in a container.\nfunc characterIndex(for: CGPoint, in: NSTextContainer, fractionOfDistanceBetweenInsertionPoints: UnsafeMutablePointer<CGFloat>?) -> Int\nReturns the index of the character that lies beneath the specified point using the specified container's coordinate system.\nfunc characterRange(forGlyphRange: NSRange, actualGlyphRange: NSRangePointer?) -> NSRange\nReturns the range of characters that correspond to the glyphs in the specified glyph range.\nfunc enumerateEnclosingRects(forGlyphRange: NSRange, withinSelectedGlyphRange: NSRange, in: NSTextContainer, using: (CGRect, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates enclosing rectangles for the specified glyph range in a text container.\nfunc enumerateLineFragments(forGlyphRange: NSRange, using: (CGRect, CGRect, NSTextContainer, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates line fragments intersecting with the specified glyph range.\nfunc fractionOfDistanceThroughGlyph(for: CGPoint, in: NSTextContainer) -> CGFloat\nReturns the fraction of the distance between the glyph at the specified point and the next glyph.\nfunc getLineFragmentInsertionPoints(forCharacterAt: Int, alternatePositions: Bool, inDisplayOrder: Bool, positions: UnsafeMutablePointer<CGFloat>?, characterIndexes: UnsafeMutablePointer<Int>?) -> Int\nReturns insertion points in bulk for a specified line fragment.\nfunc glyphIndex(for: CGPoint, in: NSTextContainer, fractionOfDistanceThroughGlyph: UnsafeMutablePointer<CGFloat>?) -> Int\nReturns the index of the glyph at the specified point using the container's coordinate system.\nfunc glyphRange(forBoundingRect: CGRect, in: NSTextContainer) -> NSRange\nReturns the smallest contiguous range for glyphs lying wholly or partially within the specified rectangle of the text container.\nfunc glyphRange(forBoundingRectWithoutAdditionalLayout: CGRect, in: NSTextContainer) -> NSRange\nReturns the smallest contiguous range for glyphs lying wholly or partially within the specified rectangle of the text container.\nfunc glyphRange(for: NSTextContainer) -> NSRange\nReturns the range of glyphs lying within the specified text container.\nfunc glyphRange(forCharacterRange: NSRange, actualCharacterRange: NSRangePointer?) -> NSRange\nReturns the range of glyphs that the specified range of characters generates.\nfunc range(ofNominallySpacedGlyphsContaining: Int) -> NSRange\nReturns the range of displayable glyphs that surround the glyph at the specified index."
  },
  {
    "title": "getLineFragmentInsertionPoints(forCharacterAt:alternatePositions:inDisplayOrder:positions:characterIndexes:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403012-getlinefragmentinsertionpoints",
    "html": "Parameters\ncharIndex\n\nThe character index of one character within the line fragment.\n\naFlag\n\nIf true, returns alternate, rather than primary, insertion points.\n\ndFlag\n\nIf true, returns insertion points in display, rather than logical, order.\n\npositions\n\nOn output, the positions of the insertion points, in the order specified.\n\ncharIndexes\n\nOn output, the indexes of the characters corresponding to the returned insertion points.\n\nReturn Value\n\nThe number of insertion points returned.\n\nDiscussion\n\nThe method allows clients to obtain all insertion points for a line fragment in one call. Each pointer passed in should either be NULL or else point to sufficient memory to hold as many elements as there are insertion points in the line fragment (which cannot be more than the number of characters + 1). The returned positions indicate a transverse offset relative to the line fragment rectangle's origin. Internal caching is used to ensure that repeated calls to this method for the same line fragment (possibly with differing values for other arguments) are not significantly more expensive than a single call.\n\nSee Also\nPerforming advanced layout queries\nfunc boundingRect(forGlyphRange: NSRange, in: NSTextContainer) -> CGRect\nReturns the bounding rectangle for the specified glyphs in a container.\nfunc characterIndex(for: CGPoint, in: NSTextContainer, fractionOfDistanceBetweenInsertionPoints: UnsafeMutablePointer<CGFloat>?) -> Int\nReturns the index of the character that lies beneath the specified point using the specified container's coordinate system.\nfunc characterRange(forGlyphRange: NSRange, actualGlyphRange: NSRangePointer?) -> NSRange\nReturns the range of characters that correspond to the glyphs in the specified glyph range.\nfunc enumerateEnclosingRects(forGlyphRange: NSRange, withinSelectedGlyphRange: NSRange, in: NSTextContainer, using: (CGRect, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates enclosing rectangles for the specified glyph range in a text container.\nfunc enumerateLineFragments(forGlyphRange: NSRange, using: (CGRect, CGRect, NSTextContainer, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates line fragments intersecting with the specified glyph range.\nfunc fractionOfDistanceThroughGlyph(for: CGPoint, in: NSTextContainer) -> CGFloat\nReturns the fraction of the distance between the glyph at the specified point and the next glyph.\nfunc glyphIndex(for: CGPoint, in: NSTextContainer) -> Int\nReturns the index of the glyph at the specified location in a text container.\nfunc glyphIndex(for: CGPoint, in: NSTextContainer, fractionOfDistanceThroughGlyph: UnsafeMutablePointer<CGFloat>?) -> Int\nReturns the index of the glyph at the specified point using the container's coordinate system.\nfunc glyphRange(forBoundingRect: CGRect, in: NSTextContainer) -> NSRange\nReturns the smallest contiguous range for glyphs lying wholly or partially within the specified rectangle of the text container.\nfunc glyphRange(forBoundingRectWithoutAdditionalLayout: CGRect, in: NSTextContainer) -> NSRange\nReturns the smallest contiguous range for glyphs lying wholly or partially within the specified rectangle of the text container.\nfunc glyphRange(for: NSTextContainer) -> NSRange\nReturns the range of glyphs lying within the specified text container.\nfunc glyphRange(forCharacterRange: NSRange, actualCharacterRange: NSRangePointer?) -> NSRange\nReturns the range of glyphs that the specified range of characters generates.\nfunc range(ofNominallySpacedGlyphsContaining: Int) -> NSRange\nReturns the range of displayable glyphs that surround the glyph at the specified index.\nRelated Documentation\nfunc rectArray(forCharacterRange: NSRange, withinSelectedCharacterRange: NSRange, in: NSTextContainer, rectCount: UnsafeMutablePointer<Int>) -> NSRectArray?\nReturns an array of rectangles and, by reference, the number of such rectangles, that define the region in the given container enclosing the given character range.\nfunc rectArray(forGlyphRange: NSRange, withinSelectedGlyphRange: NSRange, in: NSTextContainer, rectCount: UnsafeMutablePointer<Int>) -> NSRectArray?\nReturns an array of rectangles and, by reference, the number of such rectangles, that define the region in the given container enclosing the given glyph range."
  },
  {
    "title": "fractionOfDistanceThroughGlyph(for:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403097-fractionofdistancethroughglyph",
    "html": "Discussion\n\nThis method is a primitive for glyphIndex(for:in:fractionOfDistanceThroughGlyph:). You should always call the main method, not the primitives.\n\nOverriding should be done for the primitive methods. Existing subclasses that do not do this overriding will not have their implementations available to Java developers.\n\nSee Also\nPerforming advanced layout queries\nfunc boundingRect(forGlyphRange: NSRange, in: NSTextContainer) -> CGRect\nReturns the bounding rectangle for the specified glyphs in a container.\nfunc characterIndex(for: CGPoint, in: NSTextContainer, fractionOfDistanceBetweenInsertionPoints: UnsafeMutablePointer<CGFloat>?) -> Int\nReturns the index of the character that lies beneath the specified point using the specified container's coordinate system.\nfunc characterRange(forGlyphRange: NSRange, actualGlyphRange: NSRangePointer?) -> NSRange\nReturns the range of characters that correspond to the glyphs in the specified glyph range.\nfunc enumerateEnclosingRects(forGlyphRange: NSRange, withinSelectedGlyphRange: NSRange, in: NSTextContainer, using: (CGRect, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates enclosing rectangles for the specified glyph range in a text container.\nfunc enumerateLineFragments(forGlyphRange: NSRange, using: (CGRect, CGRect, NSTextContainer, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates line fragments intersecting with the specified glyph range.\nfunc getLineFragmentInsertionPoints(forCharacterAt: Int, alternatePositions: Bool, inDisplayOrder: Bool, positions: UnsafeMutablePointer<CGFloat>?, characterIndexes: UnsafeMutablePointer<Int>?) -> Int\nReturns insertion points in bulk for a specified line fragment.\nfunc glyphIndex(for: CGPoint, in: NSTextContainer) -> Int\nReturns the index of the glyph at the specified location in a text container.\nfunc glyphIndex(for: CGPoint, in: NSTextContainer, fractionOfDistanceThroughGlyph: UnsafeMutablePointer<CGFloat>?) -> Int\nReturns the index of the glyph at the specified point using the container's coordinate system.\nfunc glyphRange(forBoundingRect: CGRect, in: NSTextContainer) -> NSRange\nReturns the smallest contiguous range for glyphs lying wholly or partially within the specified rectangle of the text container.\nfunc glyphRange(forBoundingRectWithoutAdditionalLayout: CGRect, in: NSTextContainer) -> NSRange\nReturns the smallest contiguous range for glyphs lying wholly or partially within the specified rectangle of the text container.\nfunc glyphRange(for: NSTextContainer) -> NSRange\nReturns the range of glyphs lying within the specified text container.\nfunc glyphRange(forCharacterRange: NSRange, actualCharacterRange: NSRangePointer?) -> NSRange\nReturns the range of glyphs that the specified range of characters generates.\nfunc range(ofNominallySpacedGlyphsContaining: Int) -> NSRange\nReturns the range of displayable glyphs that surround the glyph at the specified index."
  },
  {
    "title": "boundingRect(forGlyphRange:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403255-boundingrect",
    "html": "Parameters\nglyphRange\n\nThe range of glyphs for which to return the bounding rectangle.\n\ncontainer\n\nThe text container in which the glyphs are laid out.\n\nReturn Value\n\nThe bounding rectangle enclosing the given range of glyphs.\n\nDiscussion\n\nThis method returns a single bounding rectangle (in container coordinates) enclosing all glyphs and other marks drawn in the given text container for the given glyph range, including glyphs that draw outside their line fragment rectangles and text attributes such as underlining.\n\nThe range is intersected with the container's range before computing the bounding rectangle. This method can be used to translate glyph ranges into display rectangles for invalidation and redrawing when a range of glyphs changes. Bounding rectangles are always in container coordinates.\n\nPerforms glyph generation and layout if needed.\n\nSee Also\nPerforming advanced layout queries\nfunc characterIndex(for: CGPoint, in: NSTextContainer, fractionOfDistanceBetweenInsertionPoints: UnsafeMutablePointer<CGFloat>?) -> Int\nReturns the index of the character that lies beneath the specified point using the specified container's coordinate system.\nfunc characterRange(forGlyphRange: NSRange, actualGlyphRange: NSRangePointer?) -> NSRange\nReturns the range of characters that correspond to the glyphs in the specified glyph range.\nfunc enumerateEnclosingRects(forGlyphRange: NSRange, withinSelectedGlyphRange: NSRange, in: NSTextContainer, using: (CGRect, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates enclosing rectangles for the specified glyph range in a text container.\nfunc enumerateLineFragments(forGlyphRange: NSRange, using: (CGRect, CGRect, NSTextContainer, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates line fragments intersecting with the specified glyph range.\nfunc fractionOfDistanceThroughGlyph(for: CGPoint, in: NSTextContainer) -> CGFloat\nReturns the fraction of the distance between the glyph at the specified point and the next glyph.\nfunc getLineFragmentInsertionPoints(forCharacterAt: Int, alternatePositions: Bool, inDisplayOrder: Bool, positions: UnsafeMutablePointer<CGFloat>?, characterIndexes: UnsafeMutablePointer<Int>?) -> Int\nReturns insertion points in bulk for a specified line fragment.\nfunc glyphIndex(for: CGPoint, in: NSTextContainer) -> Int\nReturns the index of the glyph at the specified location in a text container.\nfunc glyphIndex(for: CGPoint, in: NSTextContainer, fractionOfDistanceThroughGlyph: UnsafeMutablePointer<CGFloat>?) -> Int\nReturns the index of the glyph at the specified point using the container's coordinate system.\nfunc glyphRange(forBoundingRect: CGRect, in: NSTextContainer) -> NSRange\nReturns the smallest contiguous range for glyphs lying wholly or partially within the specified rectangle of the text container.\nfunc glyphRange(forBoundingRectWithoutAdditionalLayout: CGRect, in: NSTextContainer) -> NSRange\nReturns the smallest contiguous range for glyphs lying wholly or partially within the specified rectangle of the text container.\nfunc glyphRange(for: NSTextContainer) -> NSRange\nReturns the range of glyphs lying within the specified text container.\nfunc glyphRange(forCharacterRange: NSRange, actualCharacterRange: NSRangePointer?) -> NSRange\nReturns the range of glyphs that the specified range of characters generates.\nfunc range(ofNominallySpacedGlyphsContaining: Int) -> NSRange\nReturns the range of displayable glyphs that surround the glyph at the specified index.\nRelated Documentation\nfunc drawsOutsideLineFragment(forGlyphAt: Int) -> Bool\nIndicates whether the glyph draws outside its line fragment rectangle."
  },
  {
    "title": "location(forGlyphAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403239-location",
    "html": "Parameters\nglyphIndex\n\nThe glyph whose location is returned.\n\nReturn Value\n\nThe location of the given glyph.\n\nDiscussion\n\nIf the given glyph does not have an explicit location set for it (for example, if it is part of (but not first in) a sequence of nominally spaced characters), the location is calculated by glyph advancements from the location of the most recent preceding glyph with a location set.\n\nGlyph locations are relative to their line fragment rectangle's origin. The line fragment rectangle in turn is defined in the coordinate system of the text container where it resides.\n\nThis method causes glyph generation and layout for the line fragment containing the specified glyph, or if noncontiguous layout is not enabled, up to and including that line fragment.\n\nSee Also\nGetting layout information\nfunc attachmentSize(forGlyphAt: Int) -> CGSize\nReturns the size of the attachment glyph at the specified index.\nfunc drawsOutsideLineFragment(forGlyphAt: Int) -> Bool\nIndicates whether the glyph draws outside its line fragment rectangle.\nvar extraLineFragmentRect: CGRect\nThe rectangle for the extra line fragment at the end of a document.\nvar extraLineFragmentTextContainer: NSTextContainer?\nThe text container for the extra line fragment rectangle.\nvar extraLineFragmentUsedRect: CGRect\nThe rectangle that encloses the insertion point in the extra line fragment rectangle.\nfunc firstUnlaidCharacterIndex() -> Int\nReturns the index for the first character in the layout manager that isn’t in the layout.\nfunc firstUnlaidGlyphIndex() -> Int\nReturns the index for the first glyph in the layout manager that isn’t in the layout.\nfunc getFirstUnlaidCharacterIndex(UnsafeMutablePointer<Int>?, glyphIndex: UnsafeMutablePointer<Int>?)\nReturns the indexes for the first character and glyph that have invalid layout information.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the rectangle for the line fragment where the glyph lies and (optionally), by reference, the entire range of glyphs in that fragment.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the line fragment rectangle that contains the glyph at the specified glyph index.\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment.\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment.\nfunc notShownAttribute(forGlyphAt: Int) -> Bool\nIndicates whether the glyph at the specified index has a visible representation.\nfunc truncatedGlyphRange(inLineFragmentForGlyphAt: Int) -> NSRange\nReturns the range of truncated glyphs for a line fragment that contains the specified index."
  },
  {
    "title": "cgGlyph(at:isValidIndex:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403132-cgglyph",
    "html": "Parameters\nglyphIndex\n\nThe index of the glyph that you want.\n\nisValidIndex\n\nAn optional Boolean variable. On return, the variable is set to true if the glyph index is valid or false if it is not.\n\nReturn Value\n\nThe glyph at the specified index or kCGFontIndexInvalid if the index is out of range.\n\nDiscussion\n\nIf noncontiguous layout is disabled, calling this method generates all glyphs up to and including the one at glyphIndex.\n\nSee Also\nAccessing glyphs\nfunc getGlyphs(in: NSRange, glyphs: UnsafeMutablePointer<CGGlyph>?, properties: UnsafeMutablePointer<NSLayoutManager.GlyphProperty>?, characterIndexes: UnsafeMutablePointer<Int>?, bidiLevels: UnsafeMutablePointer<UInt8>?) -> Int\nFills a passed-in buffer with a sequence of glyphs.\nfunc cgGlyph(at: Int) -> CGGlyph\nReturns the glyph at the specified index.\nfunc setGlyphs(UnsafePointer<CGGlyph>, properties: UnsafePointer<NSLayoutManager.GlyphProperty>, characterIndexes: UnsafePointer<Int>, font: UIFont, forGlyphRange: NSRange)\nStores the initial glyphs and glyph properties for a character range.\nfunc characterIndexForGlyph(at: Int) -> Int\nReturns the index in the text storage for the first character of the specified glyph.\nfunc glyphIndexForCharacter(at: Int) -> Int\nReturns the index of the first glyph of the character at the specified index.\nfunc isValidGlyphIndex(Int) -> Bool\nIndicates whether the specified index refers to a valid glyph.\nvar numberOfGlyphs: Int\nThe number of glyphs in the layout manager.\nfunc propertyForGlyph(at: Int) -> NSLayoutManager.GlyphProperty\nReturns the glyph property of the glyph at the specified index.\nstruct NSLayoutManager.GlyphProperty\nGlyph properties."
  },
  {
    "title": "lineFragmentUsedRect(forGlyphAt:effectiveRange:withoutAdditionalLayout:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403035-linefragmentusedrect",
    "html": "Parameters\nglyphIndex\n\nThe glyph for which to return the line fragment used rectangle.\n\neffectiveGlyphRange\n\nIf not NULL, on output, the range for all glyphs in the line fragment.\n\nflag\n\nIf true, glyph generation and layout are not performed, so this option should not be used unless layout is known to be complete for the range in question, or unless noncontiguous layout is enabled; if false, both are performed as needed.\n\nReturn Value\n\nThe used rectangle for the line fragment in which the given glyph is laid out.\n\nDiscussion\n\nThis method causes glyph generation and layout for the line fragment containing the specified glyph, or if noncontiguous layout is not enabled, up to and including that line fragment.\n\nLine fragment used rectangles are always in container coordinates.\n\nOverriding this method is not recommended. If the line fragment used rectangle needs to be modified, that should be done at the typesetter level or by calling setLineFragmentRect(_:forGlyphRange:usedRect:).\n\nSee Also\nGetting layout information\nfunc attachmentSize(forGlyphAt: Int) -> CGSize\nReturns the size of the attachment glyph at the specified index.\nfunc drawsOutsideLineFragment(forGlyphAt: Int) -> Bool\nIndicates whether the glyph draws outside its line fragment rectangle.\nvar extraLineFragmentRect: CGRect\nThe rectangle for the extra line fragment at the end of a document.\nvar extraLineFragmentTextContainer: NSTextContainer?\nThe text container for the extra line fragment rectangle.\nvar extraLineFragmentUsedRect: CGRect\nThe rectangle that encloses the insertion point in the extra line fragment rectangle.\nfunc firstUnlaidCharacterIndex() -> Int\nReturns the index for the first character in the layout manager that isn’t in the layout.\nfunc firstUnlaidGlyphIndex() -> Int\nReturns the index for the first glyph in the layout manager that isn’t in the layout.\nfunc getFirstUnlaidCharacterIndex(UnsafeMutablePointer<Int>?, glyphIndex: UnsafeMutablePointer<Int>?)\nReturns the indexes for the first character and glyph that have invalid layout information.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the rectangle for the line fragment where the glyph lies and (optionally), by reference, the entire range of glyphs in that fragment.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the line fragment rectangle that contains the glyph at the specified glyph index.\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment.\nfunc location(forGlyphAt: Int) -> CGPoint\nReturns the location for the specified glyph within its line fragment.\nfunc notShownAttribute(forGlyphAt: Int) -> Bool\nIndicates whether the glyph at the specified index has a visible representation.\nfunc truncatedGlyphRange(inLineFragmentForGlyphAt: Int) -> NSRange\nReturns the range of truncated glyphs for a line fragment that contains the specified index.\nRelated Documentation\nfunc setLineFragmentRect(CGRect, forGlyphRange: NSRange, usedRect: CGRect)\nAssociates the line fragment bounds for the specified range of glyphs."
  },
  {
    "title": "getGlyphs(in:glyphs:properties:characterIndexes:bidiLevels:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403104-getglyphs",
    "html": "Parameters\nglyphRange\n\nThe range of glyphs to fill in.\n\nglyphBuffer\n\nOn output, the sequence of glyphs in the given glyph range.\n\nprops\n\nIf not NULL, on output, the glyph properties corresponding to the filled-in glyphs.\n\ncharIndexBuffer\n\nIf not NULL, on output, the indexes of the original characters corresponding to the given glyph range. Note that a glyph at index 1 is not necessarily mapped to the character at index 1, since a glyph may be for a ligature or accent.\n\nbidiLevelBuffer\n\nIf not NULL, on output, the direction of each glyph for bidirectional text. The values range from 0 to 61 as defined by Unicode Standard Annex #9. An even value means the glyph goes left-to-right, and an odd value means the glyph goes right-to-left.\n\nReturn Value\n\nThe number of glyphs returned in glyphBuffer.\n\nDiscussion\n\nEach pointer passed in should either be NULL or else point to sufficient memory to hold glyphRange.length elements.\n\nSee Also\nAccessing glyphs\nfunc cgGlyph(at: Int) -> CGGlyph\nReturns the glyph at the specified index.\nfunc cgGlyph(at: Int, isValidIndex: UnsafeMutablePointer<ObjCBool>?) -> CGGlyph\nReturns the glyph at the specified index along with information about whether the glyph index is valid.\nfunc setGlyphs(UnsafePointer<CGGlyph>, properties: UnsafePointer<NSLayoutManager.GlyphProperty>, characterIndexes: UnsafePointer<Int>, font: UIFont, forGlyphRange: NSRange)\nStores the initial glyphs and glyph properties for a character range.\nfunc characterIndexForGlyph(at: Int) -> Int\nReturns the index in the text storage for the first character of the specified glyph.\nfunc glyphIndexForCharacter(at: Int) -> Int\nReturns the index of the first glyph of the character at the specified index.\nfunc isValidGlyphIndex(Int) -> Bool\nIndicates whether the specified index refers to a valid glyph.\nvar numberOfGlyphs: Int\nThe number of glyphs in the layout manager.\nfunc propertyForGlyph(at: Int) -> NSLayoutManager.GlyphProperty\nReturns the glyph property of the glyph at the specified index.\nstruct NSLayoutManager.GlyphProperty\nGlyph properties."
  },
  {
    "title": "ensureLayout(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1402967-ensurelayout",
    "html": "Parameters\ncontainer\n\nThe text container for which layout is performed.\n\nDiscussion\n\nThe layout manager reserves the right to perform layout for larger ranges. If noncontiguous layout is disabled, then the affected range is always effectively extended to start at the beginning of the text.\n\nSee Also\nCausing glyph generation and layout\nfunc ensureGlyphs(forCharacterRange: NSRange)\nForces the layout manager to generate glyphs for the specified character range if it hasn’t already.\nfunc ensureGlyphs(forGlyphRange: NSRange)\nForces the layout manager to generate glyphs for the specified glyph range if it hasn’t already.\nfunc ensureLayout(forBoundingRect: CGRect, in: NSTextContainer)\nForces the layout manager to perform layout for the specified area in the specified text container if it hasn’t already.\nfunc ensureLayout(forCharacterRange: NSRange)\nForces the layout manager to perform layout for the specified character range if it hasn’t already.\nfunc ensureLayout(forGlyphRange: NSRange)\nForces the layout manager to perform layout for the specified glyph range if it hasn’t already.\nvar glyphGenerator: NSGlyphGenerator\nThe glyph generator that the layout manager uses."
  },
  {
    "title": "lineFragmentRect(forGlyphAt:effectiveRange:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403140-linefragmentrect",
    "html": "Parameters\nglyphIndex\n\nThe glyph for which to return the line fragment rectangle.\n\neffectiveGlyphRange\n\nIf not NULL, on output, the range for all glyphs in the line fragment.\n\nReturn Value\n\nThe line fragment in which the given glyph is laid out.\n\nDiscussion\n\nThis method causes glyph generation and layout for the line fragment containing the specified glyph, or if noncontiguous layout is not enabled, for all of the text up to and including that line fragment.\n\nLine fragment rectangles are always in container coordinates.\n\nOverriding this method is not recommended. If the line fragment rectangle needs to be modified, that should be done at the typesetter level or by calling setLineFragmentRect(_:forGlyphRange:usedRect:).\n\nSee Also\nGetting layout information\nfunc attachmentSize(forGlyphAt: Int) -> CGSize\nReturns the size of the attachment glyph at the specified index.\nfunc drawsOutsideLineFragment(forGlyphAt: Int) -> Bool\nIndicates whether the glyph draws outside its line fragment rectangle.\nvar extraLineFragmentRect: CGRect\nThe rectangle for the extra line fragment at the end of a document.\nvar extraLineFragmentTextContainer: NSTextContainer?\nThe text container for the extra line fragment rectangle.\nvar extraLineFragmentUsedRect: CGRect\nThe rectangle that encloses the insertion point in the extra line fragment rectangle.\nfunc firstUnlaidCharacterIndex() -> Int\nReturns the index for the first character in the layout manager that isn’t in the layout.\nfunc firstUnlaidGlyphIndex() -> Int\nReturns the index for the first glyph in the layout manager that isn’t in the layout.\nfunc getFirstUnlaidCharacterIndex(UnsafeMutablePointer<Int>?, glyphIndex: UnsafeMutablePointer<Int>?)\nReturns the indexes for the first character and glyph that have invalid layout information.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the line fragment rectangle that contains the glyph at the specified glyph index.\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment.\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment.\nfunc location(forGlyphAt: Int) -> CGPoint\nReturns the location for the specified glyph within its line fragment.\nfunc notShownAttribute(forGlyphAt: Int) -> Bool\nIndicates whether the glyph at the specified index has a visible representation.\nfunc truncatedGlyphRange(inLineFragmentForGlyphAt: Int) -> NSRange\nReturns the range of truncated glyphs for a line fragment that contains the specified index.\nRelated Documentation\nfunc setLineFragmentRect(CGRect, forGlyphRange: NSRange, usedRect: CGRect)\nAssociates the line fragment bounds for the specified range of glyphs."
  },
  {
    "title": "propertyForGlyph(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403014-propertyforglyph",
    "html": "Parameters\nglyphIndex\n\nThe glyph whose glyph property is returned.\n\nReturn Value\n\nThe glyph property associated with the specified glyph. NSLayoutManager.GlyphProperty lists the values that can be returned.\n\nDiscussion\n\nIf noncontiguous layout is not enabled, this method causes generation of all glyphs up to and including the one at glyphIndex.\n\nSee Also\nAccessing glyphs\nfunc getGlyphs(in: NSRange, glyphs: UnsafeMutablePointer<CGGlyph>?, properties: UnsafeMutablePointer<NSLayoutManager.GlyphProperty>?, characterIndexes: UnsafeMutablePointer<Int>?, bidiLevels: UnsafeMutablePointer<UInt8>?) -> Int\nFills a passed-in buffer with a sequence of glyphs.\nfunc cgGlyph(at: Int) -> CGGlyph\nReturns the glyph at the specified index.\nfunc cgGlyph(at: Int, isValidIndex: UnsafeMutablePointer<ObjCBool>?) -> CGGlyph\nReturns the glyph at the specified index along with information about whether the glyph index is valid.\nfunc setGlyphs(UnsafePointer<CGGlyph>, properties: UnsafePointer<NSLayoutManager.GlyphProperty>, characterIndexes: UnsafePointer<Int>, font: UIFont, forGlyphRange: NSRange)\nStores the initial glyphs and glyph properties for a character range.\nfunc characterIndexForGlyph(at: Int) -> Int\nReturns the index in the text storage for the first character of the specified glyph.\nfunc glyphIndexForCharacter(at: Int) -> Int\nReturns the index of the first glyph of the character at the specified index.\nfunc isValidGlyphIndex(Int) -> Bool\nIndicates whether the specified index refers to a valid glyph.\nvar numberOfGlyphs: Int\nThe number of glyphs in the layout manager.\nstruct NSLayoutManager.GlyphProperty\nGlyph properties."
  },
  {
    "title": "setLineFragmentRect(_:forGlyphRange:usedRect:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1402935-setlinefragmentrect",
    "html": "Parameters\nfragmentRect\n\nThe rectangle of the line fragment.\n\nglyphRange\n\nThe range of glyphs to be associated with fragmentRect.\n\nusedRect\n\nThe portion of fragmentRect that actually contains glyphs or other marks that are drawn (including the text container’s line fragment padding. Must be equal to or contained within fragmentRect.\n\nDiscussion\n\nThe typesetter must specify the text container first with setTextContainer(_:forGlyphRange:), and it sets the exact positions of the glyphs afterwards with setLocation(_:forStartOfGlyphRange:).\n\nIn the course of layout, all glyphs should end up being included in a range passed to this method, but only glyphs that start a new line fragment should be at the start of such ranges.\n\nLine fragment rectangles and line fragment used rectangles are always in container coordinates.\n\nThis method is used by the layout mechanism and should be invoked only during typesetting, in almost all cases only by the typesetter. For example, a custom typesetter might invoke it.\n\nSee Also\nSetting layout information\nfunc setAttachmentSize(CGSize, forGlyphRange: NSRange)\nSets the size to use when drawing a glyph that represents an attachment.\nfunc setDrawsOutsideLineFragment(Bool, forGlyphAt: Int)\nIndicates whether the specified glyph exceeds the bounds of the line fragment for its layout.\nfunc setExtraLineFragmentRect(CGRect, usedRect: CGRect, textContainer: NSTextContainer)\nSets the bounds and container for the extra line fragment.\nfunc setLocation(CGPoint, forStartOfGlyphRange: NSRange)\nSets the location for the first glyph in the specified range.\nfunc setNotShownAttribute(Bool, forGlyphAt: Int)\nSets the visibility of the glyph at the specified index.\nRelated Documentation\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the rectangle for the line fragment where the glyph lies and (optionally), by reference, the entire range of glyphs in that fragment.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the line fragment rectangle that contains the glyph at the specified glyph index.\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment."
  },
  {
    "title": "setExtraLineFragmentRect(_:usedRect:textContainer:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403071-setextralinefragmentrect",
    "html": "Parameters\naRect\n\nThe rectangle to set.\n\nusedRect\n\nIndicates where the insertion point is drawn.\n\naTextContainer\n\nThe text container where the rectangle is to be laid out.\n\nDiscussion\n\nThe extra line fragment is used when the text backing ends with a hard line break or when the text backing is totally empty, to define the extra line which needs to be displayed at the end of the text. If the text backing is not empty and does not end with a hard line break, this should be set to NSZeroRect and nil.\n\nLine fragment rectangles and line fragment used rectangles are always in container coordinates.\n\nThis method is used by the layout mechanism and should be invoked only during typesetting, in almost all cases only by the typesetter. For example, a custom typesetter might invoke it.\n\nSee Also\nSetting layout information\nfunc setAttachmentSize(CGSize, forGlyphRange: NSRange)\nSets the size to use when drawing a glyph that represents an attachment.\nfunc setDrawsOutsideLineFragment(Bool, forGlyphAt: Int)\nIndicates whether the specified glyph exceeds the bounds of the line fragment for its layout.\nfunc setLineFragmentRect(CGRect, forGlyphRange: NSRange, usedRect: CGRect)\nAssociates the line fragment bounds for the specified range of glyphs.\nfunc setLocation(CGPoint, forStartOfGlyphRange: NSRange)\nSets the location for the first glyph in the specified range.\nfunc setNotShownAttribute(Bool, forGlyphAt: Int)\nSets the visibility of the glyph at the specified index.\nRelated Documentation\nvar extraLineFragmentRect: CGRect\nThe rectangle for the extra line fragment at the end of a document.\nvar extraLineFragmentUsedRect: CGRect\nThe rectangle that encloses the insertion point in the extra line fragment rectangle.\nvar textContainers: [NSTextContainer]\nThe current text containers of the layout manager."
  },
  {
    "title": "setLocation(_:forStartOfGlyphRange:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1402982-setlocation",
    "html": "Parameters\naPoint\n\nThe location to which the first glyph is set, relative to the origin of the glyph’s line fragment origin.\n\nglyphRange\n\nThe glyphs whose location is set.\n\nDiscussion\n\nSetting the location for a glyph range implies that its first glyph is not nominally spaced with respect to the previous glyph. In the course of layout, all glyphs should end up being included in a range passed to this method, but only glyphs that start a new nominal range should be at the start of such ranges. The first glyph in a line fragment should always start a new nominal range. Glyph locations are given relative to their line fragment rectangle's origin.\n\nBefore setting the location for a glyph range, you must specify the text container with setTextContainer(_:forGlyphRange:) and the line fragment rectangle with setLineFragmentRect(_:forGlyphRange:usedRect:).\n\nThis method is used by the layout mechanism and should be invoked only during typesetting, in almost all cases only by the typesetter. For example, a custom typesetter might invoke it.\n\nSee Also\nSetting layout information\nfunc setAttachmentSize(CGSize, forGlyphRange: NSRange)\nSets the size to use when drawing a glyph that represents an attachment.\nfunc setDrawsOutsideLineFragment(Bool, forGlyphAt: Int)\nIndicates whether the specified glyph exceeds the bounds of the line fragment for its layout.\nfunc setExtraLineFragmentRect(CGRect, usedRect: CGRect, textContainer: NSTextContainer)\nSets the bounds and container for the extra line fragment.\nfunc setLineFragmentRect(CGRect, forGlyphRange: NSRange, usedRect: CGRect)\nAssociates the line fragment bounds for the specified range of glyphs.\nfunc setNotShownAttribute(Bool, forGlyphAt: Int)\nSets the visibility of the glyph at the specified index.\nRelated Documentation\nfunc range(ofNominallySpacedGlyphsContaining: Int) -> NSRange\nReturns the range of displayable glyphs that surround the glyph at the specified index."
  },
  {
    "title": "extraLineFragmentTextContainer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403165-extralinefragmenttextcontainer",
    "html": "Discussion\n\nThis rectangle is used to display the insertion point at the end of a text (either in an empty text or after a final paragraph separator).\n\nSee Also\nGetting layout information\nfunc attachmentSize(forGlyphAt: Int) -> CGSize\nReturns the size of the attachment glyph at the specified index.\nfunc drawsOutsideLineFragment(forGlyphAt: Int) -> Bool\nIndicates whether the glyph draws outside its line fragment rectangle.\nvar extraLineFragmentRect: CGRect\nThe rectangle for the extra line fragment at the end of a document.\nvar extraLineFragmentUsedRect: CGRect\nThe rectangle that encloses the insertion point in the extra line fragment rectangle.\nfunc firstUnlaidCharacterIndex() -> Int\nReturns the index for the first character in the layout manager that isn’t in the layout.\nfunc firstUnlaidGlyphIndex() -> Int\nReturns the index for the first glyph in the layout manager that isn’t in the layout.\nfunc getFirstUnlaidCharacterIndex(UnsafeMutablePointer<Int>?, glyphIndex: UnsafeMutablePointer<Int>?)\nReturns the indexes for the first character and glyph that have invalid layout information.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the rectangle for the line fragment where the glyph lies and (optionally), by reference, the entire range of glyphs in that fragment.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the line fragment rectangle that contains the glyph at the specified glyph index.\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment.\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment.\nfunc location(forGlyphAt: Int) -> CGPoint\nReturns the location for the specified glyph within its line fragment.\nfunc notShownAttribute(forGlyphAt: Int) -> Bool\nIndicates whether the glyph at the specified index has a visible representation.\nfunc truncatedGlyphRange(inLineFragmentForGlyphAt: Int) -> NSRange\nReturns the range of truncated glyphs for a line fragment that contains the specified index.\nRelated Documentation\nfunc setExtraLineFragmentRect(CGRect, usedRect: CGRect, textContainer: NSTextContainer)\nSets the bounds and container for the extra line fragment."
  },
  {
    "title": "extraLineFragmentUsedRect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1402988-extralinefragmentusedrect",
    "html": "Discussion\n\nThe rectangle is defined in the coordinate system of its NSTextContainer. NSZeroRect if there is no extra line fragment rectangle.\n\nThe extra line fragment used rectangle is twice as wide (or tall) as the text container’s line fragment padding, with the insertion point itself in the middle.\n\nSee Also\nGetting layout information\nfunc attachmentSize(forGlyphAt: Int) -> CGSize\nReturns the size of the attachment glyph at the specified index.\nfunc drawsOutsideLineFragment(forGlyphAt: Int) -> Bool\nIndicates whether the glyph draws outside its line fragment rectangle.\nvar extraLineFragmentRect: CGRect\nThe rectangle for the extra line fragment at the end of a document.\nvar extraLineFragmentTextContainer: NSTextContainer?\nThe text container for the extra line fragment rectangle.\nfunc firstUnlaidCharacterIndex() -> Int\nReturns the index for the first character in the layout manager that isn’t in the layout.\nfunc firstUnlaidGlyphIndex() -> Int\nReturns the index for the first glyph in the layout manager that isn’t in the layout.\nfunc getFirstUnlaidCharacterIndex(UnsafeMutablePointer<Int>?, glyphIndex: UnsafeMutablePointer<Int>?)\nReturns the indexes for the first character and glyph that have invalid layout information.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the rectangle for the line fragment where the glyph lies and (optionally), by reference, the entire range of glyphs in that fragment.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the line fragment rectangle that contains the glyph at the specified glyph index.\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment.\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment.\nfunc location(forGlyphAt: Int) -> CGPoint\nReturns the location for the specified glyph within its line fragment.\nfunc notShownAttribute(forGlyphAt: Int) -> Bool\nIndicates whether the glyph at the specified index has a visible representation.\nfunc truncatedGlyphRange(inLineFragmentForGlyphAt: Int) -> NSRange\nReturns the range of truncated glyphs for a line fragment that contains the specified index.\nRelated Documentation\nfunc setExtraLineFragmentRect(CGRect, usedRect: CGRect, textContainer: NSTextContainer)\nSets the bounds and container for the extra line fragment."
  },
  {
    "title": "drawsOutsideLineFragment(forGlyphAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403003-drawsoutsidelinefragment",
    "html": "Parameters\nglyphIndex\n\nIndex of the glyph.\n\nReturn Value\n\ntrue if the glyph at glyphIndex exceeds the bounds of the line fragment where it’s laid out, false otherwise.\n\nDiscussion\n\nExceeding bounds can happen when text is set at a fixed line height. For example, if the user specifies a fixed line height of 12 points and sets the font size to 24 points, the glyphs will exceed their layout rectangles.\n\nThis method causes glyph generation and layout for the line fragment containing the specified glyph, or if noncontiguous layout is not enabled, up to and including that line fragment.\n\nGlyphs that draw outside their line fragment rectangles aren’t considered when calculating enclosing rectangles with the rectArray(forCharacterRange:withinSelectedCharacterRange:in:rectCount:) and rectArray(forGlyphRange:withinSelectedGlyphRange:in:rectCount:) methods. They are, however, considered by boundingRect(forGlyphRange:in:).\n\nSee Also\nGetting layout information\nfunc attachmentSize(forGlyphAt: Int) -> CGSize\nReturns the size of the attachment glyph at the specified index.\nvar extraLineFragmentRect: CGRect\nThe rectangle for the extra line fragment at the end of a document.\nvar extraLineFragmentTextContainer: NSTextContainer?\nThe text container for the extra line fragment rectangle.\nvar extraLineFragmentUsedRect: CGRect\nThe rectangle that encloses the insertion point in the extra line fragment rectangle.\nfunc firstUnlaidCharacterIndex() -> Int\nReturns the index for the first character in the layout manager that isn’t in the layout.\nfunc firstUnlaidGlyphIndex() -> Int\nReturns the index for the first glyph in the layout manager that isn’t in the layout.\nfunc getFirstUnlaidCharacterIndex(UnsafeMutablePointer<Int>?, glyphIndex: UnsafeMutablePointer<Int>?)\nReturns the indexes for the first character and glyph that have invalid layout information.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the rectangle for the line fragment where the glyph lies and (optionally), by reference, the entire range of glyphs in that fragment.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the line fragment rectangle that contains the glyph at the specified glyph index.\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment.\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment.\nfunc location(forGlyphAt: Int) -> CGPoint\nReturns the location for the specified glyph within its line fragment.\nfunc notShownAttribute(forGlyphAt: Int) -> Bool\nIndicates whether the glyph at the specified index has a visible representation.\nfunc truncatedGlyphRange(inLineFragmentForGlyphAt: Int) -> NSRange\nReturns the range of truncated glyphs for a line fragment that contains the specified index."
  },
  {
    "title": "setNotShownAttribute(_:forGlyphAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403078-setnotshownattribute",
    "html": "Parameters\nflag\n\nIf true, the glyph is not shown; if false, it is shown.\n\nglyphIndex\n\nIndex of the glyph whose attribute is set.\n\nDiscussion\n\nThe typesetter decides which glyphs are not shown and sets this attribute in the layout manager to ensure that those glyphs are not displayed. For example, a tab or newline character doesn’t leave any marks; it just indicates where following glyphs are laid out.\n\nRaises an NSRangeException if glyphIndex is out of bounds.\n\nThis method is used by the layout mechanism and should be invoked only during typesetting, in almost all cases only by the typesetter. For example, a custom typesetter might invoke it.\n\nSee Also\nSetting layout information\nfunc setAttachmentSize(CGSize, forGlyphRange: NSRange)\nSets the size to use when drawing a glyph that represents an attachment.\nfunc setDrawsOutsideLineFragment(Bool, forGlyphAt: Int)\nIndicates whether the specified glyph exceeds the bounds of the line fragment for its layout.\nfunc setExtraLineFragmentRect(CGRect, usedRect: CGRect, textContainer: NSTextContainer)\nSets the bounds and container for the extra line fragment.\nfunc setLineFragmentRect(CGRect, forGlyphRange: NSRange, usedRect: CGRect)\nAssociates the line fragment bounds for the specified range of glyphs.\nfunc setLocation(CGPoint, forStartOfGlyphRange: NSRange)\nSets the location for the first glyph in the specified range.\nRelated Documentation\nfunc notShownAttribute(forGlyphAt: Int) -> Bool\nIndicates whether the glyph at the specified index has a visible representation."
  },
  {
    "title": "firstUnlaidCharacterIndex() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403067-firstunlaidcharacterindex",
    "html": "See Also\nGetting layout information\nfunc attachmentSize(forGlyphAt: Int) -> CGSize\nReturns the size of the attachment glyph at the specified index.\nfunc drawsOutsideLineFragment(forGlyphAt: Int) -> Bool\nIndicates whether the glyph draws outside its line fragment rectangle.\nvar extraLineFragmentRect: CGRect\nThe rectangle for the extra line fragment at the end of a document.\nvar extraLineFragmentTextContainer: NSTextContainer?\nThe text container for the extra line fragment rectangle.\nvar extraLineFragmentUsedRect: CGRect\nThe rectangle that encloses the insertion point in the extra line fragment rectangle.\nfunc firstUnlaidGlyphIndex() -> Int\nReturns the index for the first glyph in the layout manager that isn’t in the layout.\nfunc getFirstUnlaidCharacterIndex(UnsafeMutablePointer<Int>?, glyphIndex: UnsafeMutablePointer<Int>?)\nReturns the indexes for the first character and glyph that have invalid layout information.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the rectangle for the line fragment where the glyph lies and (optionally), by reference, the entire range of glyphs in that fragment.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the line fragment rectangle that contains the glyph at the specified glyph index.\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment.\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment.\nfunc location(forGlyphAt: Int) -> CGPoint\nReturns the location for the specified glyph within its line fragment.\nfunc notShownAttribute(forGlyphAt: Int) -> Bool\nIndicates whether the glyph at the specified index has a visible representation.\nfunc truncatedGlyphRange(inLineFragmentForGlyphAt: Int) -> NSRange\nReturns the range of truncated glyphs for a line fragment that contains the specified index."
  },
  {
    "title": "attachmentSize(forGlyphAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403099-attachmentsize",
    "html": "Parameters\nglyphIndex\n\nThe index of the attachment glyph.\n\nReturn Value\n\nThe layout manager calls this method for glyphs representing attachments, and returns the size that the attachment cell occupies. Returns {-1.0, -1.0} if there is no attachment laid for the specified glyph.\n\nSee Also\nGetting layout information\nfunc drawsOutsideLineFragment(forGlyphAt: Int) -> Bool\nIndicates whether the glyph draws outside its line fragment rectangle.\nvar extraLineFragmentRect: CGRect\nThe rectangle for the extra line fragment at the end of a document.\nvar extraLineFragmentTextContainer: NSTextContainer?\nThe text container for the extra line fragment rectangle.\nvar extraLineFragmentUsedRect: CGRect\nThe rectangle that encloses the insertion point in the extra line fragment rectangle.\nfunc firstUnlaidCharacterIndex() -> Int\nReturns the index for the first character in the layout manager that isn’t in the layout.\nfunc firstUnlaidGlyphIndex() -> Int\nReturns the index for the first glyph in the layout manager that isn’t in the layout.\nfunc getFirstUnlaidCharacterIndex(UnsafeMutablePointer<Int>?, glyphIndex: UnsafeMutablePointer<Int>?)\nReturns the indexes for the first character and glyph that have invalid layout information.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the rectangle for the line fragment where the glyph lies and (optionally), by reference, the entire range of glyphs in that fragment.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the line fragment rectangle that contains the glyph at the specified glyph index.\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment.\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment.\nfunc location(forGlyphAt: Int) -> CGPoint\nReturns the location for the specified glyph within its line fragment.\nfunc notShownAttribute(forGlyphAt: Int) -> Bool\nIndicates whether the glyph at the specified index has a visible representation.\nfunc truncatedGlyphRange(inLineFragmentForGlyphAt: Int) -> NSRange\nReturns the range of truncated glyphs for a line fragment that contains the specified index.\nRelated Documentation\nfunc setAttachmentSize(CGSize, forGlyphRange: NSRange)\nSets the size to use when drawing a glyph that represents an attachment.\nvar defaultAttachmentScaling: NSImageScaling\nThe default amount of scaling to apply when an attachment image is too large to fit in a text container."
  },
  {
    "title": "setDrawsOutsideLineFragment(_:forGlyphAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1402964-setdrawsoutsidelinefragment",
    "html": "Parameters\nflag\n\nIf true, sets the given glyph to draw outside its line fragment; if false, the glyph does not draw outside.\n\nglyphIndex\n\nIndex of the glyph to set.\n\nDiscussion\n\nThis can happen when text is set at a fixed line height. For example, if the user specifies a fixed line height of 12 points and sets the font size to 24 points, the glyphs will exceed their layout rectangles. This information is important for determining whether additional lines need to be redrawn as a result of changes to any given line fragment.\n\nThis method is used by the layout mechanism and should be invoked only during typesetting, in almost all cases only by the typesetter. For example, a custom typesetter might invoke it.\n\nSee Also\nSetting layout information\nfunc setAttachmentSize(CGSize, forGlyphRange: NSRange)\nSets the size to use when drawing a glyph that represents an attachment.\nfunc setExtraLineFragmentRect(CGRect, usedRect: CGRect, textContainer: NSTextContainer)\nSets the bounds and container for the extra line fragment.\nfunc setLineFragmentRect(CGRect, forGlyphRange: NSRange, usedRect: CGRect)\nAssociates the line fragment bounds for the specified range of glyphs.\nfunc setLocation(CGPoint, forStartOfGlyphRange: NSRange)\nSets the location for the first glyph in the specified range.\nfunc setNotShownAttribute(Bool, forGlyphAt: Int)\nSets the visibility of the glyph at the specified index.\nRelated Documentation\nfunc drawsOutsideLineFragment(forGlyphAt: Int) -> Bool\nIndicates whether the glyph draws outside its line fragment rectangle."
  },
  {
    "title": "extraLineFragmentRect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403175-extralinefragmentrect",
    "html": "Discussion\n\nThe layout manager uses the extra line fragment when the last character in a document causes a line or paragraph break. This extra line fragment has no corresponding glyph.\n\nThe rectangle is defined in the coordinate system of its NSTextContainer. NSZeroRect if there is no such rectangle.\n\nSee Also\nGetting layout information\nfunc attachmentSize(forGlyphAt: Int) -> CGSize\nReturns the size of the attachment glyph at the specified index.\nfunc drawsOutsideLineFragment(forGlyphAt: Int) -> Bool\nIndicates whether the glyph draws outside its line fragment rectangle.\nvar extraLineFragmentTextContainer: NSTextContainer?\nThe text container for the extra line fragment rectangle.\nvar extraLineFragmentUsedRect: CGRect\nThe rectangle that encloses the insertion point in the extra line fragment rectangle.\nfunc firstUnlaidCharacterIndex() -> Int\nReturns the index for the first character in the layout manager that isn’t in the layout.\nfunc firstUnlaidGlyphIndex() -> Int\nReturns the index for the first glyph in the layout manager that isn’t in the layout.\nfunc getFirstUnlaidCharacterIndex(UnsafeMutablePointer<Int>?, glyphIndex: UnsafeMutablePointer<Int>?)\nReturns the indexes for the first character and glyph that have invalid layout information.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the rectangle for the line fragment where the glyph lies and (optionally), by reference, the entire range of glyphs in that fragment.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the line fragment rectangle that contains the glyph at the specified glyph index.\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment.\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment.\nfunc location(forGlyphAt: Int) -> CGPoint\nReturns the location for the specified glyph within its line fragment.\nfunc notShownAttribute(forGlyphAt: Int) -> Bool\nIndicates whether the glyph at the specified index has a visible representation.\nfunc truncatedGlyphRange(inLineFragmentForGlyphAt: Int) -> NSRange\nReturns the range of truncated glyphs for a line fragment that contains the specified index.\nRelated Documentation\nfunc setExtraLineFragmentRect(CGRect, usedRect: CGRect, textContainer: NSTextContainer)\nSets the bounds and container for the extra line fragment."
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextrange/3801804-contains",
    "html": "Parameters\nlocation\n\nAn NSTextLocation.\n\nReturn Value\n\nReturns true if the location is in the range otherwise false .\n\nSee Also\nFinding text within the text range\nfunc contains(NSTextRange) -> Bool\nDetermines if the text range you specify is in the current text range."
  },
  {
    "title": "Deprecated Symbols | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/deprecated_symbols",
    "html": "Topics\nMethods\nfunc showCGGlyphs(UnsafePointer<CGGlyph>, positions: UnsafePointer<CGPoint>, count: Int, font: UIFont, matrix: CGAffineTransform, attributes: [NSAttributedString.Key : Any], in: CGContext)\nRenders the glyphs at the specified positions, using the specified attributes.\nDeprecated\nfunc invalidateGlyphs(onLayoutInvalidationForGlyphRange: NSRange)\nSpecifies explicitly when portions of the glyph stream depend on layout.\nDeprecated\nfunc invalidateLayout(forCharacterRange: NSRange, isSoft: Bool, actualCharacterRange: NSRangePointer?)\nInvalidates the layout information for the glyphs mapped to the given range of characters.\nDeprecated\nfunc textStorage(NSTextStorage, edited: Int, range: NSRange, changeInLength: Int, invalidatedRange: NSRange)\nInvalidates glyph and layout information for a portion of the text in the given text storage object.\nDeprecated\nfunc insertGlyph(NSGlyph, atGlyphIndex: Int, characterIndex: Int)\nInserts a single glyph into the glyph stream at the given index and maps it to the character at the given character index.\nDeprecated\nfunc insertGlyphs(UnsafePointer<NSGlyph>, length: Int, forStartingGlyphAt: Int, characterIndex: Int)\nInserts the given glyphs into the glyph cache at the given index and maps them to characters beginning at the given character index.\nDeprecated\nfunc glyph(at: Int) -> CGGlyph\nReturns the glyph at the specified index.\nDeprecated\nfunc glyph(at: Int, isValidIndex: UnsafeMutablePointer<ObjCBool>?) -> CGGlyph\nReturns the glyph at a specified index, and optionally returns a flag indicating whether the requested index is valid.\nDeprecated\nfunc replaceGlyph(at: Int, withGlyph: NSGlyph)\nReplaces the glyph at the given index with a new glyph.\nDeprecated\nfunc getGlyphs(UnsafeMutablePointer<NSGlyph>?, range: NSRange) -> Int\nFills the passed-in buffer with a sequence of glyphs.\nDeprecated\nfunc getGlyphs(in: NSRange, glyphs: UnsafeMutablePointer<NSGlyph>?, characterIndexes: UnsafeMutablePointer<Int>?, glyphInscriptions: UnsafeMutablePointer<NSGlyphInscription>?, elasticBits: UnsafeMutablePointer<ObjCBool>?) -> Int\nReturns the glyphs and information needed to perform layout for the given glyph range.\nDeprecated\nfunc getGlyphs(in: NSRange, glyphs: UnsafeMutablePointer<NSGlyph>?, characterIndexes: UnsafeMutablePointer<Int>?, glyphInscriptions: UnsafeMutablePointer<NSGlyphInscription>?, elasticBits: UnsafeMutablePointer<ObjCBool>?, bidiLevels: UnsafeMutablePointer<UInt8>?) -> Int\nReturns the glyphs and information needed to perform layout for the given glyph range.\nDeprecated\nfunc deleteGlyphs(in: NSRange)\nDeletes the glyphs in the given range from the receiver’s glyph store.\nDeprecated\nfunc setCharacterIndex(Int, forGlyphAt: Int)\nSets the index of the character corresponding to the glyph at the given glyph index.\nDeprecated\nfunc intAttribute(Int, forGlyphAt: Int) -> Int\nReturns the value of the attribute identified by the given attribute tag for the glyph at the given index.\nDeprecated\nfunc setIntAttribute(Int, value: Int, forGlyphAt: Int)\nSets a custom attribute value for a given glyph.\nDeprecated\nfunc setLocations(NSPointArray, startingGlyphIndexes: UnsafeMutablePointer<Int>, count: Int, forGlyphRange: NSRange)\nSets locations for many glyph ranges at once.\nDeprecated\nfunc rectArray(forCharacterRange: NSRange, withinSelectedCharacterRange: NSRange, in: NSTextContainer, rectCount: UnsafeMutablePointer<Int>) -> NSRectArray?\nReturns an array of rectangles and, by reference, the number of such rectangles, that define the region in the given container enclosing the given character range.\nDeprecated\nfunc rectArray(forGlyphRange: NSRange, withinSelectedGlyphRange: NSRange, in: NSTextContainer, rectCount: UnsafeMutablePointer<Int>) -> NSRectArray?\nReturns an array of rectangles and, by reference, the number of such rectangles, that define the region in the given container enclosing the given glyph range.\nDeprecated\nfunc substituteFont(for: NSFont) -> NSFont\nReplaces the specified font with a suitable screen font if one is available.\nDeprecated\nProperties\nvar hyphenationFactor: CGFloat\nThe threshold controlling when hyphenation is done.\nDeprecated\nattributedString\nThe text storage object from which the NSGlyphGenerator object procures characters for glyph generation.\nlayoutOptions\nThe layout manager’s current layout options.\nvar usesScreenFonts: Bool\nA Boolean that controls using screen fonts to calculate layout and display text.\nDeprecated\nTypes\nGlyph Attributes\nAttributes that are used only inside the glyph generation machinery, but must also be shared between components."
  },
  {
    "title": "sourceApplication | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscene/openurloptions/3197945-sourceapplication",
    "html": "See Also\nSpecifying the URL details\nvar annotation: Any?\nA property-list object that contains the annotation data provided by a document interaction controller.\nvar eventAttribution: UIEventAttribution?\nAn event attribution associated with the URL to open."
  },
  {
    "title": "NSTextContentStorageDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontentstoragedelegate",
    "html": "Topics\nWorking with paragraphs\nfunc textContentStorage(NSTextContentStorage, textParagraphWith: NSRange) -> NSTextParagraph?\nReturns a custom paragraph for a range that you provide from the object’s attributed string.\nRelationships\nInherits From\nNSTextContentManagerDelegate\nSee Also\nAccessing paragraphs\nvar delegate: NSTextContentStorageDelegate?\nThe delegate for the content storage object."
  },
  {
    "title": "attributedString(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontentstorage/3809935-attributedstring",
    "html": "Parameters\ntextElement\n\nThe NSTextElement to map into an attributed string.\n\nReturn Value\n\nAn NSAttributedString, or nil.\n\nDiscussion\n\nReturns nil if the method can’t map textElement to an NSAttributedString.\n\nSee Also\nAccessing text\nvar attributedString: NSAttributedString?\nThe contents of a document.\nfunc textElement(for: NSAttributedString) -> NSTextElement?\nReturns the text element corresponding to object’s attributed string."
  },
  {
    "title": "attributedString | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontentstorage/3809934-attributedstring",
    "html": "See Also\nAccessing text\nfunc attributedString(for: NSTextElement) -> NSAttributedString?\nReturns a new attributed string for the text element.\nfunc textElement(for: NSAttributedString) -> NSTextElement?\nReturns the text element corresponding to object’s attributed string."
  },
  {
    "title": "underlineGlyphRange(_:underlineType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403114-underlineglyphrange",
    "html": "Parameters\nglyphRange\n\nA range of glyphs, which must belong to a single line fragment rectangle (as returned by lineFragmentRect(forGlyphAt:effectiveRange:)).\n\nunderlineVal\n\nThe style of underlining to draw. This value is a mask derived from the value for underlineStyle—for example, (NSUnderlinePatternDash | NSUnderlineStyleThick | NSUnderlineByWordMask). Subclasses can define custom underlining styles.\n\nlineRect\n\nThe line fragment rectangle containing the glyphs to draw underlining for.\n\nlineGlyphRange\n\nThe range of all glyphs within that line fragment rectangle.\n\ncontainerOrigin\n\nThe origin of the line fragment rectangle’s NSTextContainer in its NSTextView.\n\nDiscussion\n\nThis method determines which glyphs actually need to be underlined based on underlineVal. With NSUnderlineStyleSingle, for example, leading and trailing whitespace isn’t underlined, but whitespace between visible glyphs is. A potential word-underline style would omit underlining on any whitespace. After determining which glyphs to draw underlining on, this method invokes drawUnderline(forGlyphRange:underlineType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:) for each contiguous range of glyphs that requires it.\n\nSee Also\nDrawing\nfunc drawBackground(forGlyphRange: NSRange, at: CGPoint)\nDraws background marks for the specified glyphs, which must lie completely within a single text container.\nfunc drawGlyphs(forGlyphRange: NSRange, at: CGPoint)\nDraws the specified glyphs, which must lie completely within a single text container.\nfunc drawStrikethrough(forGlyphRange: NSRange, strikethroughType: NSUnderlineStyle, baselineOffset: CGFloat, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint)\nDraws a strikethrough for the specified glyphs.\nfunc drawUnderline(forGlyphRange: NSRange, underlineType: NSUnderlineStyle, baselineOffset: CGFloat, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint)\nDraws underlining for the glyphs in a specified range.\nfunc fillBackgroundRectArray(UnsafePointer<CGRect>, count: Int, forCharacterRange: NSRange, color: UIColor)\nFills background rectangles with a color.\nfunc showCGGlyphs(UnsafePointer<CGGlyph>, positions: UnsafePointer<CGPoint>, count: Int, font: UIFont, textMatrix: CGAffineTransform, attributes: [NSAttributedString.Key : Any], in: CGContext)\nRenders the glyphs at the specified positions, using the specified attributes.\nfunc strikethroughGlyphRange(NSRange, strikethroughType: NSUnderlineStyle, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint)\nCalculates and draws strikethrough for the specified glyphs.\nRelated Documentation\nfunc textContainer(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> NSTextContainer?\nReturns the text container that manages the layout for the specified glyph, causing layout to happen as necessary.\nvar textContainerOrigin: NSPoint\nThe origin of the receiver’s text container."
  },
  {
    "title": "childElements | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlistelement/4018410-childelements",
    "html": "See Also\nAccessing the text elements\nvar textList: NSTextList\nThe value that represents the text list.\nvar parent: NSTextListElement?\nA text list element that refers to the enclosing text list element."
  },
  {
    "title": "enumerateTextLayoutFragments(from:options:using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3809994-enumeratetextlayoutfragments",
    "html": "Parameters\nlocation\n\nThe location where youstart the enumeration.\n\noptions\n\nOne or more of the available NSTextLayoutFragment.EnumerationOptions.\n\nblock\n\nA closure you provide that determines if the enumeration finishes early.\n\nReturn Value\n\nAn NSTextLocation, or nil.\n\nDiscussion\n\nIf textLocation is nil, the method starts at self.textContentManager.documentRange.location.The method uses self.documentRange.endLocation for reverse enumeration. When enumerating backward, it starts with the fragment preceding the one containing textLocation. If the method enumerates at least one fragment, it returns the edge of the enumerated range.\n\nThe enumerated range might not match the range of the last element returned; it enumerates the elements in the sequence, but it can skip a range. For example, it can limit the maximum number of text elements the method enumerates for a single invocation or hide some elements from the layout.\n\nReturning false from block breaks out of the enumeration.\n\nSee Also\nCausing layout generation\nvar textViewportLayoutController: NSTextViewportLayoutController\nReturns text viewport layout controller associated with the layout manager’s text container.\nfunc invalidateLayout(for: NSTextRange)\nInvalidates the layout information for specified text range.\nfunc textLayoutFragment(for: NSTextLocation) -> NSTextLayoutFragment?\nReturns the text layout fragment from the document at the specified location.\nfunc textLayoutFragment(for: CGPoint) -> NSTextLayoutFragment?\nReturns the text layout fragment at the position you specify in the text container.\nfunc ensureLayout(for: CGRect)\nPerforms the layout for filling the bounds you specify inside the last text container.\nfunc ensureLayout(for: NSTextRange)\nPerforms the layout for specified text range.\nenum NSTextLayoutManager.SegmentType\nValues that describe the rendering of selection boundaries.\nstruct NSTextLayoutManager.SegmentOptions\nValues that describe where and how the framework extends segments of a selection."
  },
  {
    "title": "ensureLayout(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3809992-ensurelayout",
    "html": "Parameters\nrange\n\nThe NSTextRange that describes the content to lay out.\n\nSee Also\nCausing layout generation\nvar textViewportLayoutController: NSTextViewportLayoutController\nReturns text viewport layout controller associated with the layout manager’s text container.\nfunc invalidateLayout(for: NSTextRange)\nInvalidates the layout information for specified text range.\nfunc textLayoutFragment(for: NSTextLocation) -> NSTextLayoutFragment?\nReturns the text layout fragment from the document at the specified location.\nfunc textLayoutFragment(for: CGPoint) -> NSTextLayoutFragment?\nReturns the text layout fragment at the position you specify in the text container.\nfunc ensureLayout(for: CGRect)\nPerforms the layout for filling the bounds you specify inside the last text container.\nfunc enumerateTextLayoutFragments(from: NSTextLocation?, options: NSTextLayoutFragment.EnumerationOptions, using: (NSTextLayoutFragment) -> Bool) -> NSTextLocation?\nEnumerates the text layout fragments starting at the specified location.\nenum NSTextLayoutManager.SegmentType\nValues that describe the rendering of selection boundaries.\nstruct NSTextLayoutManager.SegmentOptions\nValues that describe where and how the framework extends segments of a selection."
  },
  {
    "title": "image(for:attributes:location:textContainer:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextattachmentlayout/3857591-image",
    "html": "Required\n\nParameters\nbounds\n\nThe CGRect that presents the image boundaries inside textContainer.\n\nattributes\n\nA dictionary of NSAttributedString.Key attributes.\n\nlocation\n\nAn NSTextLocation that indicates that start of the string.\n\ntextContainer\n\nThe NSTextContainer that contains the source text.\n\nReturn Value\n\nAn optional image object.\n\nDiscussion\n\nA custom implementation should return an image appropriate for the target rendering context that you derive by arguments to this method. The default NSTextAttachment implementation returns the contents of the image property when non-nil. If the image property is nil, it returns an image based on the contents and fileType properties.\n\nSee Also\nDetermining the characteristics of an attachment\nfunc attachmentBounds(for: [NSAttributedString.Key : Any], location: NSTextLocation, textContainer: NSTextContainer?, proposedLineFragment: CGRect, position: CGPoint) -> CGRect\nReturns the layout bounds of the attachment you specify.\n\nRequired\n\nfunc viewProvider(for: UIView?, location: NSTextLocation, textContainer: NSTextContainer?) -> NSTextAttachmentViewProvider?\nReturns the text attachment view provider corresponding to the file type.\n\nRequired"
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3809990-delegate",
    "html": "See Also\nManaging the layout process\nprotocol NSTextLayoutManagerDelegate\nOptional methods that delegates implement to respond to layout changes."
  },
  {
    "title": "linkRenderingAttributes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3810002-linkrenderingattributes",
    "html": "Discussion\n\nThe base NSTextLayoutManager class returns with single for underlineStyle and the platform link color for foregroundColor. The platform color for macOS is linkColor. Other platforms uses blueColor.\n\nSee Also\nAdjusting rendering\nfunc addRenderingAttribute(NSAttributedString.Key, value: Any?, for: NSTextRange)\nSets the rendering attribute for the value and range you specify.\nfunc enumerateRenderingAttributes(from: NSTextLocation, reverse: Bool, using: (NSTextLayoutManager, [NSAttributedString.Key : Any], NSTextRange) -> Bool)\nEnumerates the rendering attributes from a location you specify.\nfunc renderingAttributes(forLink: Any, at: NSTextLocation) -> [NSAttributedString.Key : Any]\nReturns a dictionary of rendering attributes for rendering a link.\nfunc invalidateRenderingAttributes(for: NSTextRange)\nInvalidates the rendering attributes of the specified text range.\nfunc removeRenderingAttribute(NSAttributedString.Key, for: NSTextRange)\nRemoves the rendering attribute from the specified text range.\nfunc setRenderingAttributes([NSAttributedString.Key : Any], for: NSTextRange)\nSets the rendering attributes for the range you specify."
  },
  {
    "title": "invalidateGlyphs(forCharacterRange:changeInLength:actualCharacterRange:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403171-invalidateglyphs",
    "html": "Parameters\ncharRange\n\nThe range of characters for which to invalidate glyphs.\n\nlengthChange\n\nThe number of characters added or removed.\n\nactualCharRange\n\nIf not NULL, on output, the actual range invalidated after any necessary expansion. This range can be larger than the range of characters given due to the effect of context on glyphs and layout.\n\nDiscussion\n\nThis method invalidates the cached glyphs for the characters in the given character range, adjusts the character indices of all the subsequent glyphs by the change in length, and invalidates the new character range. This method invalidates only glyph information and performs no glyph generation or layout. Because invalidating glyphs also invalidates layout, after invoking this method you should also invoke invalidateLayout(forCharacterRange:actualCharacterRange:), passing charRange as the first argument.\n\nThis method is used by the layout mechanism and should be invoked only during typesetting, in almost all cases only by the typesetter. For example, a custom typesetter might invoke it.\n\nSee Also\nInvalidating glyphs and layout\nfunc invalidateDisplay(forCharacterRange: NSRange)\nInvalidates display for the specified character range.\nfunc invalidateDisplay(forGlyphRange: NSRange)\nInvalidates a range of glyphs, requiring new layout information, and updates the appropriate regions of any text views that display those glyphs.\nfunc invalidateLayout(forCharacterRange: NSRange, actualCharacterRange: NSRangePointer?)\nInvalidates the layout information for the glyphs that map to the specified character range.\nfunc processEditing(for: NSTextStorage, edited: NSTextStorage.EditActions, range: NSRange, changeInLength: Int, invalidatedRange: NSRange)\nNotifies the layout manager when an edit action changes the contents of its text storage object."
  },
  {
    "title": "intersection(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextrange/3801814-intersection",
    "html": "Parameters\ntextRange\n\nThe range used to compare against the current range to evaluate for differences.\n\nReturn Value\n\nAn NSRange that represents the intersection of the ranges, or nil if they don’t intersect.\n\nSee Also\nComparing text ranges\nfunc intersects(NSTextRange) -> Bool\nDetermines if two ranges intersect.\nfunc isEqual(to: NSTextRange) -> Bool\nCompares two text ranges.\nfunc union(NSTextRange) -> Self\nReturns a new text range by forming the union with the text range you provide."
  },
  {
    "title": "textContainer(forGlyphAt:effectiveRange:withoutAdditionalLayout:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403055-textcontainer",
    "html": "Parameters\nglyphIndex\n\nIndex of a glyph in the returned container.\n\neffectiveGlyphRange\n\nIf not NULL, on output, points to the whole range of glyphs that are in the returned container.\n\nflag\n\nIf true, glyph generation and layout are not performed, so this option should not be used unless layout is known to be complete for the range in question, or unless noncontiguous layout is enabled; if false, both are performed as needed.\n\nReturn Value\n\nThe text container in which the glyph at glyphIndex is laid out.\n\nDiscussion\n\nThis method is primarily for use from within NSTypesetter, after layout is complete for the range in question, but before the layout manager's call to NSTypesetter has returned. In that case glyph and layout holes have not yet been recalculated, so the layout manager does not yet know that layout is complete for that range, and this variant must be used.\n\nOverriding this method is not recommended. Any changes to the returned glyph range should be done at the typesetter level.\n\nSee Also\nManaging the text containers\nvar textContainers: [NSTextContainer]\nThe current text containers of the layout manager.\nfunc addTextContainer(NSTextContainer)\nAppends the specified text container to the series of text containers where the layout manager arranges text.\nfunc insertTextContainer(NSTextContainer, at: Int)\nInserts a text container at the specified index in the list of text containers.\nfunc removeTextContainer(at: Int)\nRemoves the text container at the specified index and invalidates the layout as necessary.\nfunc setTextContainer(NSTextContainer, forGlyphRange: NSRange)\nAssociates a text container with the specified range of glyphs.\nfunc textContainerChangedGeometry(NSTextContainer)\nInvalidates the layout information, and possibly glyphs, for the specified text container and all subsequent text container objects.\nfunc textContainerChangedTextView(NSTextContainer)\nUpdates the information necessary to manage text view objects for the specified text container.\nfunc textContainer(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> NSTextContainer?\nReturns the text container that manages the layout for the specified glyph, causing layout to happen as necessary.\nfunc usedRect(for: NSTextContainer) -> CGRect\nReturns the bounding rectangle for the glyphs in the specified text container."
  },
  {
    "title": "usedRect(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1402980-usedrect",
    "html": "Discussion\n\nReturns the text container's currently used area, which determines the size that the view would need to be in order to display all the glyphs that are currently laid out in the container. This causes neither glyph generation nor layout.\n\nUsed rectangles are always in container coordinates.\n\nSee Also\nManaging the text containers\nvar textContainers: [NSTextContainer]\nThe current text containers of the layout manager.\nfunc addTextContainer(NSTextContainer)\nAppends the specified text container to the series of text containers where the layout manager arranges text.\nfunc insertTextContainer(NSTextContainer, at: Int)\nInserts a text container at the specified index in the list of text containers.\nfunc removeTextContainer(at: Int)\nRemoves the text container at the specified index and invalidates the layout as necessary.\nfunc setTextContainer(NSTextContainer, forGlyphRange: NSRange)\nAssociates a text container with the specified range of glyphs.\nfunc textContainerChangedGeometry(NSTextContainer)\nInvalidates the layout information, and possibly glyphs, for the specified text container and all subsequent text container objects.\nfunc textContainerChangedTextView(NSTextContainer)\nUpdates the information necessary to manage text view objects for the specified text container.\nfunc textContainer(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> NSTextContainer?\nReturns the text container that manages the layout for the specified glyph, causing layout to happen as necessary.\nfunc textContainer(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> NSTextContainer?\nReturns the text container that manages the layout for the specified glyph.\nRelated Documentation\nvar containerSize: NSSize\nThe size of the text container’s bounding rectangle."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1402975-init",
    "html": "Discussion\n\nThis method is the designated initializer for the NSLayoutManager class. Returns an initialized object.\n\nSee Also\nCreating a layout manager\ninit?(coder: NSCoder)\nCreates a layout manager from data in an unarchiver.\nRelated Documentation\nText Layout Programming Guide\nCocoa Text Architecture Guide\nfunc addTextContainer(NSTextContainer)\nAppends the specified text container to the series of text containers where the layout manager arranges text.\nfunc addLayoutManager(NSLayoutManager)\nAdds a layout manager to the text storage object’s set of layout managers."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1402920-delegate",
    "html": "See Also\nManaging the layout process\nprotocol NSLayoutManagerDelegate\nA set of optional methods that delegates of layout manager objects implement."
  },
  {
    "title": "textStorage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403015-textstorage",
    "html": "See Also\nAccessing the text storage\nfunc replaceTextStorage(NSTextStorage)\nReplaces the layout manager's current text storage object with the specified object.\nRelated Documentation\nfunc addLayoutManager(NSLayoutManager)\nAdds a layout manager to the text storage object’s set of layout managers."
  },
  {
    "title": "showsControlCharacters | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1402912-showscontrolcharacters",
    "html": "See Also\nConfiguring the global layout manager options\nvar allowsNonContiguousLayout: Bool\nA Boolean value that indicates whether the layout manager allows noncontiguous layout.\nvar hasNonContiguousLayout: Bool\nA Boolean value that indicates whether the layout manager currently has any areas of noncontiguous layout.\nvar showsInvisibleCharacters: Bool\nA Boolean value that indicates whether to substitute visible glyphs for whitespace and other typically invisible characters.\nvar usesFontLeading: Bool\nA Boolean value that indicates whether the layout manager uses the leading of the font.\nvar backgroundLayoutEnabled: Bool\nA Boolean value that indicates whether the layout manager generates glyphs and lays them out when the app's run loop is idle.\nvar limitsLayoutForSuspiciousContents: Bool\nA Boolean value that indicates whether the layout manager avoids laying out unusually long or suspicious input.\nvar usesDefaultHyphenation: Bool\nA Boolean value that indicates whether the layout manager uses the default hyphenation rules to wrap lines."
  },
  {
    "title": "hasNonContiguousLayout | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403207-hasnoncontiguouslayout",
    "html": "Discussion\n\nThere may be times at which there is no noncontiguous layout, such as when layout is complete; this method enables the layout manager to report that to clients.\n\nFor more information about noncontiguous layout, see Noncontiguous Layout.\n\nSee Also\nConfiguring the global layout manager options\nvar allowsNonContiguousLayout: Bool\nA Boolean value that indicates whether the layout manager allows noncontiguous layout.\nvar showsInvisibleCharacters: Bool\nA Boolean value that indicates whether to substitute visible glyphs for whitespace and other typically invisible characters.\nvar showsControlCharacters: Bool\nA Boolean value that indicates whether the layout manager substitutes visible glyphs for control characters in the layout.\nvar usesFontLeading: Bool\nA Boolean value that indicates whether the layout manager uses the leading of the font.\nvar backgroundLayoutEnabled: Bool\nA Boolean value that indicates whether the layout manager generates glyphs and lays them out when the app's run loop is idle.\nvar limitsLayoutForSuspiciousContents: Bool\nA Boolean value that indicates whether the layout manager avoids laying out unusually long or suspicious input.\nvar usesDefaultHyphenation: Bool\nA Boolean value that indicates whether the layout manager uses the default hyphenation rules to wrap lines."
  },
  {
    "title": "usesDefaultHyphenation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/3180380-usesdefaulthyphenation",
    "html": "Discussion\n\nWhen the value of this property is true, the layout manager makes a best-effort attempt to hyphenate text when wrapping lines. You may override this hyphenation behavior on a per-paragraph basis using the hyphenationFactor property of NSParagraphStyle The default value of this property is false, which prevents the layout manager from hyphenating text.\n\nSee Also\nConfiguring the global layout manager options\nvar allowsNonContiguousLayout: Bool\nA Boolean value that indicates whether the layout manager allows noncontiguous layout.\nvar hasNonContiguousLayout: Bool\nA Boolean value that indicates whether the layout manager currently has any areas of noncontiguous layout.\nvar showsInvisibleCharacters: Bool\nA Boolean value that indicates whether to substitute visible glyphs for whitespace and other typically invisible characters.\nvar showsControlCharacters: Bool\nA Boolean value that indicates whether the layout manager substitutes visible glyphs for control characters in the layout.\nvar usesFontLeading: Bool\nA Boolean value that indicates whether the layout manager uses the leading of the font.\nvar backgroundLayoutEnabled: Bool\nA Boolean value that indicates whether the layout manager generates glyphs and lays them out when the app's run loop is idle.\nvar limitsLayoutForSuspiciousContents: Bool\nA Boolean value that indicates whether the layout manager avoids laying out unusually long or suspicious input."
  },
  {
    "title": "addTextContainer(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1402946-addtextcontainer",
    "html": "Parameters\naTextContainer\n\nThe text container to append.\n\nDiscussion\n\nInvalidates glyphs and layout as needed, but doesn’t perform glyph generation or layout.\n\nSee Also\nManaging the text containers\nvar textContainers: [NSTextContainer]\nThe current text containers of the layout manager.\nfunc insertTextContainer(NSTextContainer, at: Int)\nInserts a text container at the specified index in the list of text containers.\nfunc removeTextContainer(at: Int)\nRemoves the text container at the specified index and invalidates the layout as necessary.\nfunc setTextContainer(NSTextContainer, forGlyphRange: NSRange)\nAssociates a text container with the specified range of glyphs.\nfunc textContainerChangedGeometry(NSTextContainer)\nInvalidates the layout information, and possibly glyphs, for the specified text container and all subsequent text container objects.\nfunc textContainerChangedTextView(NSTextContainer)\nUpdates the information necessary to manage text view objects for the specified text container.\nfunc textContainer(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> NSTextContainer?\nReturns the text container that manages the layout for the specified glyph, causing layout to happen as necessary.\nfunc textContainer(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> NSTextContainer?\nReturns the text container that manages the layout for the specified glyph.\nfunc usedRect(for: NSTextContainer) -> CGRect\nReturns the bounding rectangle for the glyphs in the specified text container.\nRelated Documentation\nfunc invalidateGlyphs(forCharacterRange: NSRange, changeInLength: Int, actualCharacterRange: NSRangePointer?)\nInvalidates and adjusts the glyphs in the specified character range.\nfunc invalidateLayout(forCharacterRange: NSRange, isSoft: Bool, actualCharacterRange: NSRangePointer?)\nInvalidates the layout information for the glyphs mapped to the given range of characters."
  },
  {
    "title": "insertTextContainer(_:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403010-inserttextcontainer",
    "html": "Parameters\naTextContainer\n\nThe text container to insert.\n\nindex\n\nThe index in the series of text containers at which to insert aTextContainer.\n\nDiscussion\n\nThis method invalidates layout for all subsequent NSTextContainer objects, and invalidates glyph information as needed.\n\nSee Also\nManaging the text containers\nvar textContainers: [NSTextContainer]\nThe current text containers of the layout manager.\nfunc addTextContainer(NSTextContainer)\nAppends the specified text container to the series of text containers where the layout manager arranges text.\nfunc removeTextContainer(at: Int)\nRemoves the text container at the specified index and invalidates the layout as necessary.\nfunc setTextContainer(NSTextContainer, forGlyphRange: NSRange)\nAssociates a text container with the specified range of glyphs.\nfunc textContainerChangedGeometry(NSTextContainer)\nInvalidates the layout information, and possibly glyphs, for the specified text container and all subsequent text container objects.\nfunc textContainerChangedTextView(NSTextContainer)\nUpdates the information necessary to manage text view objects for the specified text container.\nfunc textContainer(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> NSTextContainer?\nReturns the text container that manages the layout for the specified glyph, causing layout to happen as necessary.\nfunc textContainer(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> NSTextContainer?\nReturns the text container that manages the layout for the specified glyph.\nfunc usedRect(for: NSTextContainer) -> CGRect\nReturns the bounding rectangle for the glyphs in the specified text container."
  },
  {
    "title": "removeTextContainer(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403017-removetextcontainer",
    "html": "Parameters\nindex\n\nThe index of the text container to remove.\n\nDiscussion\n\nThis method invalidates glyph information as needed.\n\nSee Also\nManaging the text containers\nvar textContainers: [NSTextContainer]\nThe current text containers of the layout manager.\nfunc addTextContainer(NSTextContainer)\nAppends the specified text container to the series of text containers where the layout manager arranges text.\nfunc insertTextContainer(NSTextContainer, at: Int)\nInserts a text container at the specified index in the list of text containers.\nfunc setTextContainer(NSTextContainer, forGlyphRange: NSRange)\nAssociates a text container with the specified range of glyphs.\nfunc textContainerChangedGeometry(NSTextContainer)\nInvalidates the layout information, and possibly glyphs, for the specified text container and all subsequent text container objects.\nfunc textContainerChangedTextView(NSTextContainer)\nUpdates the information necessary to manage text view objects for the specified text container.\nfunc textContainer(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> NSTextContainer?\nReturns the text container that manages the layout for the specified glyph, causing layout to happen as necessary.\nfunc textContainer(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> NSTextContainer?\nReturns the text container that manages the layout for the specified glyph.\nfunc usedRect(for: NSTextContainer) -> CGRect\nReturns the bounding rectangle for the glyphs in the specified text container.\nRelated Documentation\nfunc invalidateGlyphs(forCharacterRange: NSRange, changeInLength: Int, actualCharacterRange: NSRangePointer?)\nInvalidates and adjusts the glyphs in the specified character range.\nfunc invalidateLayout(forCharacterRange: NSRange, isSoft: Bool, actualCharacterRange: NSRangePointer?)\nInvalidates the layout information for the glyphs mapped to the given range of characters."
  },
  {
    "title": "edited(_:range:changeInLength:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextstorage/1529793-edited",
    "html": "Parameters\nmask\n\nA mask specifying the nature of the changes. You make the value by combining with the C bitwise OR operator the options described in NSTextStorage.EditActions.\n\noldRange\n\nThe extent of characters affected before the change took place.\n\nlengthChange\n\nThe number of characters added to or removed from oldRange. If no characters where edited as noted by mask, its value is irrelevant and undefined. For example, when replacing “The” with “Several” in the string “The files couldn’t be saved”, oldRange is {0, 3} and lengthChange is 4.\n\nDiscussion\n\nThis method invokes processEditing() if there are no outstanding beginEditing() calls. NSTextStorage invokes this method automatically each time it makes a change to its attributed string. Subclasses that override or add methods that alter their attributed strings directly should invoke this method after making those changes; otherwise you shouldn’t invoke this method. The information accumulated with this method is then used in an invocation of processEditing() to report the affected portion of the receiver.\n\nThe methods for querying changes, editedRange and changeInLength, indicate the extent of characters affected after the change. This method expects the characters before the change because that information is readily available as the argument to whatever method performs the change (such as replaceCharacters(in:with:)).\n\nSee Also\nManaging edits\nfunc processEditing()\nCleans up changes to the text storage object and notifies its delegate and layout managers of changes."
  },
  {
    "title": "processEditing() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextstorage/1525980-processediting",
    "html": "Discussion\n\nThis method is automatically invoked in response to an edited(_:range:changeInLength:) message or an endEditing() message if edits were made within the scope of a beginEditing() block. You should never need to invoke it directly.\n\nThis method begins by posting an willProcessEditingNotification to the default notification center (which results in the delegate receiving a textStorageWillProcessEditing: message). Then it fixes attributes. After this, it posts an didProcessEditingNotification to the default notification center (which results in the delegate receiving a textStorageDidProcessEditing: message). Finally, it sends a textStorage(_:edited:range:changeInLength:invalidatedRange:) message to each of the receiver’s layout managers using the argument values provided.\n\nSee Also\nManaging edits\nfunc edited(NSTextStorage.EditActions, range: NSRange, changeInLength: Int)\nTracks changes made to the text storage object, allowing the text storage to record the full extent of changes."
  },
  {
    "title": "invalidateAttributes(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextstorage/1534025-invalidateattributes",
    "html": "Parameters\nrange\n\nThe range of characters whose attributes the method should invalidate.\n\nDiscussion\n\nCalled from processEditing() to invalidate attributes when the text storage changes. If the receiver isn’t lazy, this method calls fixAttributes(in:). If lazy attribute fixing is in effect, this method instead records the range needing fixing.\n\nSee Also\nFixing the string attributes\nfunc ensureAttributesAreFixed(in: NSRange)\nEnsures that attribute fixing occurs in the specified range.\nvar fixesAttributesLazily: Bool\nA Boolean value that indicates whether the text storage object fixes attributes lazily."
  },
  {
    "title": "range(ofNominallySpacedGlyphsContaining:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403152-range",
    "html": "Parameters\nglyphIndex\n\nIndex of the glyph to test.\n\nReturn Value\n\nThe range of nominally spaced glyphs.\n\nDiscussion\n\nThis method returns the range for the glyphs around the given glyph that can be displayed using only their advancements from the font, without pairwise kerning or other adjustments to spacing. The range returned begins with the first glyph, counting back from glyphIndex, that has a location set, and it continues up to, but does not include, the next glyph that has a location set.\n\nPerforms glyph generation and layout if needed.\n\nSee Also\nPerforming advanced layout queries\nfunc boundingRect(forGlyphRange: NSRange, in: NSTextContainer) -> CGRect\nReturns the bounding rectangle for the specified glyphs in a container.\nfunc characterIndex(for: CGPoint, in: NSTextContainer, fractionOfDistanceBetweenInsertionPoints: UnsafeMutablePointer<CGFloat>?) -> Int\nReturns the index of the character that lies beneath the specified point using the specified container's coordinate system.\nfunc characterRange(forGlyphRange: NSRange, actualGlyphRange: NSRangePointer?) -> NSRange\nReturns the range of characters that correspond to the glyphs in the specified glyph range.\nfunc enumerateEnclosingRects(forGlyphRange: NSRange, withinSelectedGlyphRange: NSRange, in: NSTextContainer, using: (CGRect, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates enclosing rectangles for the specified glyph range in a text container.\nfunc enumerateLineFragments(forGlyphRange: NSRange, using: (CGRect, CGRect, NSTextContainer, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates line fragments intersecting with the specified glyph range.\nfunc fractionOfDistanceThroughGlyph(for: CGPoint, in: NSTextContainer) -> CGFloat\nReturns the fraction of the distance between the glyph at the specified point and the next glyph.\nfunc getLineFragmentInsertionPoints(forCharacterAt: Int, alternatePositions: Bool, inDisplayOrder: Bool, positions: UnsafeMutablePointer<CGFloat>?, characterIndexes: UnsafeMutablePointer<Int>?) -> Int\nReturns insertion points in bulk for a specified line fragment.\nfunc glyphIndex(for: CGPoint, in: NSTextContainer) -> Int\nReturns the index of the glyph at the specified location in a text container.\nfunc glyphIndex(for: CGPoint, in: NSTextContainer, fractionOfDistanceThroughGlyph: UnsafeMutablePointer<CGFloat>?) -> Int\nReturns the index of the glyph at the specified point using the container's coordinate system.\nfunc glyphRange(forBoundingRect: CGRect, in: NSTextContainer) -> NSRange\nReturns the smallest contiguous range for glyphs lying wholly or partially within the specified rectangle of the text container.\nfunc glyphRange(forBoundingRectWithoutAdditionalLayout: CGRect, in: NSTextContainer) -> NSRange\nReturns the smallest contiguous range for glyphs lying wholly or partially within the specified rectangle of the text container.\nfunc glyphRange(for: NSTextContainer) -> NSRange\nReturns the range of glyphs lying within the specified text container.\nfunc glyphRange(forCharacterRange: NSRange, actualCharacterRange: NSRangePointer?) -> NSRange\nReturns the range of glyphs that the specified range of characters generates."
  },
  {
    "title": "NSTextStorageDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextstoragedelegate",
    "html": "Topics\nProcessing edit actions\nfunc textStorage(NSTextStorage, willProcessEditing: NSTextStorage.EditActions, range: NSRange, changeInLength: Int)\nThe method the framework calls when a text storage object is about to process edits.\nfunc textStorage(NSTextStorage, didProcessEditing: NSTextStorage.EditActions, range: NSRange, changeInLength: Int)\nThe method the framework calls when a text storage object has finished processing edits.\nDeprecated\ntextStorageWillProcessEditing:\nSent when a text storage is about to process edits.\ntextStorageDidProcessEditing:\nSent when a text storage has finished processing edits.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nProcessing the editing actions\nvar delegate: NSTextStorageDelegate?\nThe delegate for the text storage object."
  },
  {
    "title": "enumerateLineFragments(forGlyphRange:using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403160-enumeratelinefragments",
    "html": "Parameters\nglyphRange\n\nThe glyph range for which to return line fragment rectangles.\n\nblock\n\nThe block to apply to the glyph range. The block has five arguments:\n\nrect\n\nThe current line fragment rectangle.\n\nusedRect\n\nThe portion of the line fragment rectangle that actually contains glyphs or other marks that are drawn (including the text container’s line fragment padding).\n\ntextContainer\n\nThe text container in which the glyphs are laid out.\n\nglyphRange\n\nThe range of glyphs laid out in the current line fragment.\n\nstop\n\nA reference to a Boolean value. The block can set the value to true to stop further processing of the array. The stop argument is an out-only argument. You should only set this Boolean to true within the block.\n\nDiscussion\n\nThis method causes glyph generation and layout for the line fragment containing the glyphs in the specified range, or if noncontiguous layout is not enabled, for all of the text up to and including that line fragment.\n\nLine fragment rectangles are always in container coordinates.\n\nSee Also\nPerforming advanced layout queries\nfunc boundingRect(forGlyphRange: NSRange, in: NSTextContainer) -> CGRect\nReturns the bounding rectangle for the specified glyphs in a container.\nfunc characterIndex(for: CGPoint, in: NSTextContainer, fractionOfDistanceBetweenInsertionPoints: UnsafeMutablePointer<CGFloat>?) -> Int\nReturns the index of the character that lies beneath the specified point using the specified container's coordinate system.\nfunc characterRange(forGlyphRange: NSRange, actualGlyphRange: NSRangePointer?) -> NSRange\nReturns the range of characters that correspond to the glyphs in the specified glyph range.\nfunc enumerateEnclosingRects(forGlyphRange: NSRange, withinSelectedGlyphRange: NSRange, in: NSTextContainer, using: (CGRect, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates enclosing rectangles for the specified glyph range in a text container.\nfunc fractionOfDistanceThroughGlyph(for: CGPoint, in: NSTextContainer) -> CGFloat\nReturns the fraction of the distance between the glyph at the specified point and the next glyph.\nfunc getLineFragmentInsertionPoints(forCharacterAt: Int, alternatePositions: Bool, inDisplayOrder: Bool, positions: UnsafeMutablePointer<CGFloat>?, characterIndexes: UnsafeMutablePointer<Int>?) -> Int\nReturns insertion points in bulk for a specified line fragment.\nfunc glyphIndex(for: CGPoint, in: NSTextContainer) -> Int\nReturns the index of the glyph at the specified location in a text container.\nfunc glyphIndex(for: CGPoint, in: NSTextContainer, fractionOfDistanceThroughGlyph: UnsafeMutablePointer<CGFloat>?) -> Int\nReturns the index of the glyph at the specified point using the container's coordinate system.\nfunc glyphRange(forBoundingRect: CGRect, in: NSTextContainer) -> NSRange\nReturns the smallest contiguous range for glyphs lying wholly or partially within the specified rectangle of the text container.\nfunc glyphRange(forBoundingRectWithoutAdditionalLayout: CGRect, in: NSTextContainer) -> NSRange\nReturns the smallest contiguous range for glyphs lying wholly or partially within the specified rectangle of the text container.\nfunc glyphRange(for: NSTextContainer) -> NSRange\nReturns the range of glyphs lying within the specified text container.\nfunc glyphRange(forCharacterRange: NSRange, actualCharacterRange: NSRangePointer?) -> NSRange\nReturns the range of glyphs that the specified range of characters generates.\nfunc range(ofNominallySpacedGlyphsContaining: Int) -> NSRange\nReturns the range of displayable glyphs that surround the glyph at the specified index."
  },
  {
    "title": "layoutManagers | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextstorage/1527938-layoutmanagers",
    "html": "See Also\nAccessing the layout managers\nfunc addLayoutManager(NSLayoutManager)\nAdds a layout manager to the text storage object’s set of layout managers.\nfunc removeLayoutManager(NSLayoutManager)\nRemoves a layout manager from the text storage object’s set of layout managers."
  },
  {
    "title": "glyphRange(forBoundingRect:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403053-glyphrange",
    "html": "Parameters\nbounds\n\nThe bounding rectangle for which to return glyphs.\n\ncontainer\n\nThe text container in which the glyphs are laid out.\n\nReturn Value\n\nThe range of glyphs that would need to be displayed in order to draw all glyphs that fall (even partially) within the given bounding rectangle. The range returned can include glyphs that don’t fall inside or intersect bounds, although the first and last glyphs in the range always do. At most this method returns the glyph range for the whole container.\n\nDiscussion\n\nThis method is used to determine which glyphs need to be displayed within a given rectangle.\n\nPerforms glyph generation and layout if needed. Bounding rectangles are always in container coordinates.\n\nSee Also\nPerforming advanced layout queries\nfunc boundingRect(forGlyphRange: NSRange, in: NSTextContainer) -> CGRect\nReturns the bounding rectangle for the specified glyphs in a container.\nfunc characterIndex(for: CGPoint, in: NSTextContainer, fractionOfDistanceBetweenInsertionPoints: UnsafeMutablePointer<CGFloat>?) -> Int\nReturns the index of the character that lies beneath the specified point using the specified container's coordinate system.\nfunc characterRange(forGlyphRange: NSRange, actualGlyphRange: NSRangePointer?) -> NSRange\nReturns the range of characters that correspond to the glyphs in the specified glyph range.\nfunc enumerateEnclosingRects(forGlyphRange: NSRange, withinSelectedGlyphRange: NSRange, in: NSTextContainer, using: (CGRect, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates enclosing rectangles for the specified glyph range in a text container.\nfunc enumerateLineFragments(forGlyphRange: NSRange, using: (CGRect, CGRect, NSTextContainer, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates line fragments intersecting with the specified glyph range.\nfunc fractionOfDistanceThroughGlyph(for: CGPoint, in: NSTextContainer) -> CGFloat\nReturns the fraction of the distance between the glyph at the specified point and the next glyph.\nfunc getLineFragmentInsertionPoints(forCharacterAt: Int, alternatePositions: Bool, inDisplayOrder: Bool, positions: UnsafeMutablePointer<CGFloat>?, characterIndexes: UnsafeMutablePointer<Int>?) -> Int\nReturns insertion points in bulk for a specified line fragment.\nfunc glyphIndex(for: CGPoint, in: NSTextContainer) -> Int\nReturns the index of the glyph at the specified location in a text container.\nfunc glyphIndex(for: CGPoint, in: NSTextContainer, fractionOfDistanceThroughGlyph: UnsafeMutablePointer<CGFloat>?) -> Int\nReturns the index of the glyph at the specified point using the container's coordinate system.\nfunc glyphRange(forBoundingRectWithoutAdditionalLayout: CGRect, in: NSTextContainer) -> NSRange\nReturns the smallest contiguous range for glyphs lying wholly or partially within the specified rectangle of the text container.\nfunc glyphRange(for: NSTextContainer) -> NSRange\nReturns the range of glyphs lying within the specified text container.\nfunc glyphRange(forCharacterRange: NSRange, actualCharacterRange: NSRangePointer?) -> NSRange\nReturns the range of glyphs that the specified range of characters generates.\nfunc range(ofNominallySpacedGlyphsContaining: Int) -> NSRange\nReturns the range of displayable glyphs that surround the glyph at the specified index."
  },
  {
    "title": "shortcutItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscene/connectionoptions/3238072-shortcutitem",
    "html": "Discussion\n\nIf the user selected one of your app’s quick actions, this property contains the selected action. You use quick actions to provide access to frequently used features of your app, and the user accesses those actions through interactions with your app’s icon in the Home Screen. If the user didn’t select a quick action, this property is nil.\n\nFor an example of how to set up quick actions for your app, see Add Home Screen Quick Actions."
  },
  {
    "title": "notShownAttribute(forGlyphAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1402931-notshownattribute",
    "html": "Parameters\nglyphIndex\n\nIndex of the glyph.\n\nReturn Value\n\ntrue if the glyph at glyphIndex is not shown; otherwise false.\n\nDiscussion\n\nSome glyphs are not shown. For example, a tab, newline, or attachment glyph is not shown; it just affects the layout of following glyphs or locates the attachment graphic. Space characters, however, typically are shown as glyphs with a displacement, although they leave no visible marks.\n\nThis method causes glyph generation and layout for the line fragment containing the specified glyph, or if noncontiguous layout is not enabled, up to and including that line fragment.\n\nRaises an NSRangeException if glyphIndex is out of bounds.\n\nSee Also\nGetting layout information\nfunc attachmentSize(forGlyphAt: Int) -> CGSize\nReturns the size of the attachment glyph at the specified index.\nfunc drawsOutsideLineFragment(forGlyphAt: Int) -> Bool\nIndicates whether the glyph draws outside its line fragment rectangle.\nvar extraLineFragmentRect: CGRect\nThe rectangle for the extra line fragment at the end of a document.\nvar extraLineFragmentTextContainer: NSTextContainer?\nThe text container for the extra line fragment rectangle.\nvar extraLineFragmentUsedRect: CGRect\nThe rectangle that encloses the insertion point in the extra line fragment rectangle.\nfunc firstUnlaidCharacterIndex() -> Int\nReturns the index for the first character in the layout manager that isn’t in the layout.\nfunc firstUnlaidGlyphIndex() -> Int\nReturns the index for the first glyph in the layout manager that isn’t in the layout.\nfunc getFirstUnlaidCharacterIndex(UnsafeMutablePointer<Int>?, glyphIndex: UnsafeMutablePointer<Int>?)\nReturns the indexes for the first character and glyph that have invalid layout information.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the rectangle for the line fragment where the glyph lies and (optionally), by reference, the entire range of glyphs in that fragment.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the line fragment rectangle that contains the glyph at the specified glyph index.\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment.\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment.\nfunc location(forGlyphAt: Int) -> CGPoint\nReturns the location for the specified glyph within its line fragment.\nfunc truncatedGlyphRange(inLineFragmentForGlyphAt: Int) -> NSRange\nReturns the range of truncated glyphs for a line fragment that contains the specified index.\nRelated Documentation\nfunc setNotShownAttribute(Bool, forGlyphAt: Int)\nSets the visibility of the glyph at the specified index."
  },
  {
    "title": "firstUnlaidGlyphIndex() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403245-firstunlaidglyphindex",
    "html": "See Also\nGetting layout information\nfunc attachmentSize(forGlyphAt: Int) -> CGSize\nReturns the size of the attachment glyph at the specified index.\nfunc drawsOutsideLineFragment(forGlyphAt: Int) -> Bool\nIndicates whether the glyph draws outside its line fragment rectangle.\nvar extraLineFragmentRect: CGRect\nThe rectangle for the extra line fragment at the end of a document.\nvar extraLineFragmentTextContainer: NSTextContainer?\nThe text container for the extra line fragment rectangle.\nvar extraLineFragmentUsedRect: CGRect\nThe rectangle that encloses the insertion point in the extra line fragment rectangle.\nfunc firstUnlaidCharacterIndex() -> Int\nReturns the index for the first character in the layout manager that isn’t in the layout.\nfunc getFirstUnlaidCharacterIndex(UnsafeMutablePointer<Int>?, glyphIndex: UnsafeMutablePointer<Int>?)\nReturns the indexes for the first character and glyph that have invalid layout information.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the rectangle for the line fragment where the glyph lies and (optionally), by reference, the entire range of glyphs in that fragment.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the line fragment rectangle that contains the glyph at the specified glyph index.\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment.\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment.\nfunc location(forGlyphAt: Int) -> CGPoint\nReturns the location for the specified glyph within its line fragment.\nfunc notShownAttribute(forGlyphAt: Int) -> Bool\nIndicates whether the glyph at the specified index has a visible representation.\nfunc truncatedGlyphRange(inLineFragmentForGlyphAt: Int) -> NSRange\nReturns the range of truncated glyphs for a line fragment that contains the specified index."
  },
  {
    "title": "getFirstUnlaidCharacterIndex(_:glyphIndex:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403187-getfirstunlaidcharacterindex",
    "html": "Parameters\ncharIndex\n\nOn return, if not NULL, the index of the first character that has invalid layout information\n\nglyphIndex\n\nOn return, if not NULL, the index of the first glyph that has invalid layout information.\n\nDiscussion\n\nEither parameter may be NULL, in which case the receiver simply ignores it.\n\nAs part of its implementation, this method calls firstUnlaidCharacterIndex() and firstUnlaidGlyphIndex(). To change this method’s behavior, override those two methods instead of this one.\n\nSee Also\nGetting layout information\nfunc attachmentSize(forGlyphAt: Int) -> CGSize\nReturns the size of the attachment glyph at the specified index.\nfunc drawsOutsideLineFragment(forGlyphAt: Int) -> Bool\nIndicates whether the glyph draws outside its line fragment rectangle.\nvar extraLineFragmentRect: CGRect\nThe rectangle for the extra line fragment at the end of a document.\nvar extraLineFragmentTextContainer: NSTextContainer?\nThe text container for the extra line fragment rectangle.\nvar extraLineFragmentUsedRect: CGRect\nThe rectangle that encloses the insertion point in the extra line fragment rectangle.\nfunc firstUnlaidCharacterIndex() -> Int\nReturns the index for the first character in the layout manager that isn’t in the layout.\nfunc firstUnlaidGlyphIndex() -> Int\nReturns the index for the first glyph in the layout manager that isn’t in the layout.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the rectangle for the line fragment where the glyph lies and (optionally), by reference, the entire range of glyphs in that fragment.\nfunc lineFragmentRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the line fragment rectangle that contains the glyph at the specified glyph index.\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment.\nfunc lineFragmentUsedRect(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> CGRect\nReturns the usage rectangle for the line fragment and (optionally) returns the entire range of glyphs in that fragment.\nfunc location(forGlyphAt: Int) -> CGPoint\nReturns the location for the specified glyph within its line fragment.\nfunc notShownAttribute(forGlyphAt: Int) -> Bool\nIndicates whether the glyph at the specified index has a visible representation.\nfunc truncatedGlyphRange(inLineFragmentForGlyphAt: Int) -> NSRange\nReturns the range of truncated glyphs for a line fragment that contains the specified index."
  },
  {
    "title": "glyphIndexForCharacter(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403001-glyphindexforcharacter",
    "html": "Parameters\ncharIndex\n\nThe index of the character for which to return the associated glyph.\n\nReturn Value\n\nThe index of the first glyph associated with the character at the specified index.\n\nDiscussion\n\nIf noncontiguous layout is not enabled, this method causes generation of all glyphs up to and including those associated with the specified character. This method accepts an index beyond the last character, returning an index extrapolated from the last actual character index.\n\nIn many cases it’s better to use the range-mapping methods, characterRange(forGlyphRange:actualGlyphRange:) and glyphRange(forCharacterRange:actualCharacterRange:), which provide more comprehensive information.\n\nSee Also\nAccessing glyphs\nfunc getGlyphs(in: NSRange, glyphs: UnsafeMutablePointer<CGGlyph>?, properties: UnsafeMutablePointer<NSLayoutManager.GlyphProperty>?, characterIndexes: UnsafeMutablePointer<Int>?, bidiLevels: UnsafeMutablePointer<UInt8>?) -> Int\nFills a passed-in buffer with a sequence of glyphs.\nfunc cgGlyph(at: Int) -> CGGlyph\nReturns the glyph at the specified index.\nfunc cgGlyph(at: Int, isValidIndex: UnsafeMutablePointer<ObjCBool>?) -> CGGlyph\nReturns the glyph at the specified index along with information about whether the glyph index is valid.\nfunc setGlyphs(UnsafePointer<CGGlyph>, properties: UnsafePointer<NSLayoutManager.GlyphProperty>, characterIndexes: UnsafePointer<Int>, font: UIFont, forGlyphRange: NSRange)\nStores the initial glyphs and glyph properties for a character range.\nfunc characterIndexForGlyph(at: Int) -> Int\nReturns the index in the text storage for the first character of the specified glyph.\nfunc isValidGlyphIndex(Int) -> Bool\nIndicates whether the specified index refers to a valid glyph.\nvar numberOfGlyphs: Int\nThe number of glyphs in the layout manager.\nfunc propertyForGlyph(at: Int) -> NSLayoutManager.GlyphProperty\nReturns the glyph property of the glyph at the specified index.\nstruct NSLayoutManager.GlyphProperty\nGlyph properties."
  },
  {
    "title": "setGlyphs(_:properties:characterIndexes:font:forGlyphRange:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403030-setglyphs",
    "html": "Parameters\nglyphs\n\nA pointer to the layout manager's glyph cache.\n\nprops\n\nA pointer to a buffer containing glyph properties for the glyphs in the cache.\n\ncharIndexes\n\nA pointer to the starting index for the characters in the text storage for which glyphs are generated.\n\naFont\n\nA font to override the font attributes in the text storage for the specified character range.\n\nglyphRange\n\nThe range of glyphs in the glyph cache to set.\n\nDiscussion\n\nThis method is invoked by text system during the glyph generation process. The only place apps are allowed to call this method directly is from an implementation of the NSLayoutManagerDelegate protocol method layoutManager(_:shouldGenerateGlyphs:properties:characterIndexes:font:forGlyphRange:).\n\nEach array has glyphRange.length items. The specified charIndexes must be contiguous (no skipped indexes), enabling multiple items to have a same character index (as when one character index generates multiple glyph IDs). Due to font substitution, aFont passed into this method might not match the font in the attributes dictionary. Calling this method for a character range that has previously calculated layout information invalidates the layout and display.\n\nSee Also\nAccessing glyphs\nfunc getGlyphs(in: NSRange, glyphs: UnsafeMutablePointer<CGGlyph>?, properties: UnsafeMutablePointer<NSLayoutManager.GlyphProperty>?, characterIndexes: UnsafeMutablePointer<Int>?, bidiLevels: UnsafeMutablePointer<UInt8>?) -> Int\nFills a passed-in buffer with a sequence of glyphs.\nfunc cgGlyph(at: Int) -> CGGlyph\nReturns the glyph at the specified index.\nfunc cgGlyph(at: Int, isValidIndex: UnsafeMutablePointer<ObjCBool>?) -> CGGlyph\nReturns the glyph at the specified index along with information about whether the glyph index is valid.\nfunc characterIndexForGlyph(at: Int) -> Int\nReturns the index in the text storage for the first character of the specified glyph.\nfunc glyphIndexForCharacter(at: Int) -> Int\nReturns the index of the first glyph of the character at the specified index.\nfunc isValidGlyphIndex(Int) -> Bool\nIndicates whether the specified index refers to a valid glyph.\nvar numberOfGlyphs: Int\nThe number of glyphs in the layout manager.\nfunc propertyForGlyph(at: Int) -> NSLayoutManager.GlyphProperty\nReturns the glyph property of the glyph at the specified index.\nstruct NSLayoutManager.GlyphProperty\nGlyph properties."
  },
  {
    "title": "numberOfGlyphs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1402937-numberofglyphs",
    "html": "See Also\nAccessing glyphs\nfunc getGlyphs(in: NSRange, glyphs: UnsafeMutablePointer<CGGlyph>?, properties: UnsafeMutablePointer<NSLayoutManager.GlyphProperty>?, characterIndexes: UnsafeMutablePointer<Int>?, bidiLevels: UnsafeMutablePointer<UInt8>?) -> Int\nFills a passed-in buffer with a sequence of glyphs.\nfunc cgGlyph(at: Int) -> CGGlyph\nReturns the glyph at the specified index.\nfunc cgGlyph(at: Int, isValidIndex: UnsafeMutablePointer<ObjCBool>?) -> CGGlyph\nReturns the glyph at the specified index along with information about whether the glyph index is valid.\nfunc setGlyphs(UnsafePointer<CGGlyph>, properties: UnsafePointer<NSLayoutManager.GlyphProperty>, characterIndexes: UnsafePointer<Int>, font: UIFont, forGlyphRange: NSRange)\nStores the initial glyphs and glyph properties for a character range.\nfunc characterIndexForGlyph(at: Int) -> Int\nReturns the index in the text storage for the first character of the specified glyph.\nfunc glyphIndexForCharacter(at: Int) -> Int\nReturns the index of the first glyph of the character at the specified index.\nfunc isValidGlyphIndex(Int) -> Bool\nIndicates whether the specified index refers to a valid glyph.\nfunc propertyForGlyph(at: Int) -> NSLayoutManager.GlyphProperty\nReturns the glyph property of the glyph at the specified index.\nstruct NSLayoutManager.GlyphProperty\nGlyph properties."
  },
  {
    "title": "isValidGlyphIndex(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1402950-isvalidglyphindex",
    "html": "Parameters\nglyphIndex\n\nThe index of a glyph in the receiver.\n\nReturn Value\n\ntrue if the specified glyphIndex refers to a valid glyph, otherwise false.\n\nSee Also\nAccessing glyphs\nfunc getGlyphs(in: NSRange, glyphs: UnsafeMutablePointer<CGGlyph>?, properties: UnsafeMutablePointer<NSLayoutManager.GlyphProperty>?, characterIndexes: UnsafeMutablePointer<Int>?, bidiLevels: UnsafeMutablePointer<UInt8>?) -> Int\nFills a passed-in buffer with a sequence of glyphs.\nfunc cgGlyph(at: Int) -> CGGlyph\nReturns the glyph at the specified index.\nfunc cgGlyph(at: Int, isValidIndex: UnsafeMutablePointer<ObjCBool>?) -> CGGlyph\nReturns the glyph at the specified index along with information about whether the glyph index is valid.\nfunc setGlyphs(UnsafePointer<CGGlyph>, properties: UnsafePointer<NSLayoutManager.GlyphProperty>, characterIndexes: UnsafePointer<Int>, font: UIFont, forGlyphRange: NSRange)\nStores the initial glyphs and glyph properties for a character range.\nfunc characterIndexForGlyph(at: Int) -> Int\nReturns the index in the text storage for the first character of the specified glyph.\nfunc glyphIndexForCharacter(at: Int) -> Int\nReturns the index of the first glyph of the character at the specified index.\nvar numberOfGlyphs: Int\nThe number of glyphs in the layout manager.\nfunc propertyForGlyph(at: Int) -> NSLayoutManager.GlyphProperty\nReturns the glyph property of the glyph at the specified index.\nstruct NSLayoutManager.GlyphProperty\nGlyph properties."
  },
  {
    "title": "NSLayoutManager.GlyphProperty | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/glyphproperty",
    "html": "Topics\nGlyph properties\nstatic var null: NSLayoutManager.GlyphProperty\nThe null glyph, which the layout manager ignores.\nstatic var controlCharacter: NSLayoutManager.GlyphProperty\nA glyph representing a control character.\nstatic var elastic: NSLayoutManager.GlyphProperty\nA glyph with a changeable width, such as a white space character.\nstatic var nonBaseCharacter: NSLayoutManager.GlyphProperty\nA glyph that combines several properties.\nInitializers\ninit(rawValue: Int)\nCreates a new instance with the specified raw value.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nAccessing glyphs\nfunc getGlyphs(in: NSRange, glyphs: UnsafeMutablePointer<CGGlyph>?, properties: UnsafeMutablePointer<NSLayoutManager.GlyphProperty>?, characterIndexes: UnsafeMutablePointer<Int>?, bidiLevels: UnsafeMutablePointer<UInt8>?) -> Int\nFills a passed-in buffer with a sequence of glyphs.\nfunc cgGlyph(at: Int) -> CGGlyph\nReturns the glyph at the specified index.\nfunc cgGlyph(at: Int, isValidIndex: UnsafeMutablePointer<ObjCBool>?) -> CGGlyph\nReturns the glyph at the specified index along with information about whether the glyph index is valid.\nfunc setGlyphs(UnsafePointer<CGGlyph>, properties: UnsafePointer<NSLayoutManager.GlyphProperty>, characterIndexes: UnsafePointer<Int>, font: UIFont, forGlyphRange: NSRange)\nStores the initial glyphs and glyph properties for a character range.\nfunc characterIndexForGlyph(at: Int) -> Int\nReturns the index in the text storage for the first character of the specified glyph.\nfunc glyphIndexForCharacter(at: Int) -> Int\nReturns the index of the first glyph of the character at the specified index.\nfunc isValidGlyphIndex(Int) -> Bool\nIndicates whether the specified index refers to a valid glyph.\nvar numberOfGlyphs: Int\nThe number of glyphs in the layout manager.\nfunc propertyForGlyph(at: Int) -> NSLayoutManager.GlyphProperty\nReturns the glyph property of the glyph at the specified index."
  },
  {
    "title": "setAttachmentSize(_:forGlyphRange:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403047-setattachmentsize",
    "html": "Parameters\nattachmentSize\n\nThe glyph size to set.\n\nglyphRange\n\nThe attachment glyph’s position in the glyph stream.\n\nDiscussion\n\nFor a glyph corresponding to an attachment, this method should be called to set the size for the attachment cell to occupy. The glyph's value should be NSControlGlyph.\n\nThis method is used by the layout mechanism and should be invoked only during typesetting, in almost all cases only by the typesetter. For example, a custom typesetter might invoke it.\n\nSee Also\nSetting layout information\nfunc setDrawsOutsideLineFragment(Bool, forGlyphAt: Int)\nIndicates whether the specified glyph exceeds the bounds of the line fragment for its layout.\nfunc setExtraLineFragmentRect(CGRect, usedRect: CGRect, textContainer: NSTextContainer)\nSets the bounds and container for the extra line fragment.\nfunc setLineFragmentRect(CGRect, forGlyphRange: NSRange, usedRect: CGRect)\nAssociates the line fragment bounds for the specified range of glyphs.\nfunc setLocation(CGPoint, forStartOfGlyphRange: NSRange)\nSets the location for the first glyph in the specified range.\nfunc setNotShownAttribute(Bool, forGlyphAt: Int)\nSets the visibility of the glyph at the specified index.\nRelated Documentation\nfunc attachmentSize(forGlyphAt: Int) -> CGSize\nReturns the size of the attachment glyph at the specified index.\nvar defaultAttachmentScaling: NSImageScaling\nThe default amount of scaling to apply when an attachment image is too large to fit in a text container."
  },
  {
    "title": "characterIndexForGlyph(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1402944-characterindexforglyph",
    "html": "Parameters\nglyphIndex\n\nThe index of the glyph for which to return the associated character.\n\nReturn Value\n\nThe index of the first character associated with the glyph at the specified index.\n\nDiscussion\n\nIf noncontiguous layout is not enabled, this method causes generation of all glyphs up to and including glyphIndex. This method accepts an index beyond the last glyph, returning an index extrapolated from the last actual glyph index.\n\nIn many cases it’s better to use the range-mapping methods, characterRange(forGlyphRange:actualGlyphRange:) and glyphRange(forCharacterRange:actualCharacterRange:), which provide more comprehensive information.\n\nSee Also\nAccessing glyphs\nfunc getGlyphs(in: NSRange, glyphs: UnsafeMutablePointer<CGGlyph>?, properties: UnsafeMutablePointer<NSLayoutManager.GlyphProperty>?, characterIndexes: UnsafeMutablePointer<Int>?, bidiLevels: UnsafeMutablePointer<UInt8>?) -> Int\nFills a passed-in buffer with a sequence of glyphs.\nfunc cgGlyph(at: Int) -> CGGlyph\nReturns the glyph at the specified index.\nfunc cgGlyph(at: Int, isValidIndex: UnsafeMutablePointer<ObjCBool>?) -> CGGlyph\nReturns the glyph at the specified index along with information about whether the glyph index is valid.\nfunc setGlyphs(UnsafePointer<CGGlyph>, properties: UnsafePointer<NSLayoutManager.GlyphProperty>, characterIndexes: UnsafePointer<Int>, font: UIFont, forGlyphRange: NSRange)\nStores the initial glyphs and glyph properties for a character range.\nfunc glyphIndexForCharacter(at: Int) -> Int\nReturns the index of the first glyph of the character at the specified index.\nfunc isValidGlyphIndex(Int) -> Bool\nIndicates whether the specified index refers to a valid glyph.\nvar numberOfGlyphs: Int\nThe number of glyphs in the layout manager.\nfunc propertyForGlyph(at: Int) -> NSLayoutManager.GlyphProperty\nReturns the glyph property of the glyph at the specified index.\nstruct NSLayoutManager.GlyphProperty\nGlyph properties."
  },
  {
    "title": "isEqual(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextrange/3801811-isequal",
    "html": "Parameters\ntextRange\n\nThe range used to compare against the current range to evaluate for differences.\n\nReturn Value\n\nReturns true if the ranges are equal.\n\nSee Also\nComparing text ranges\nfunc intersection(NSTextRange) -> Self?\nReturns the range, if any, where two text ranges intersect.\nfunc intersects(NSTextRange) -> Bool\nDetermines if two ranges intersect.\nfunc union(NSTextRange) -> Self\nReturns a new text range by forming the union with the text range you provide."
  },
  {
    "title": "ensureLayout(forGlyphRange:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1402939-ensurelayout",
    "html": "Parameters\nglyphRange\n\nThe glyph range for which layout is performed.\n\nDiscussion\n\nThe layout manager reserves the right to perform layout for larger ranges. If noncontiguous layout is disabled, then the affected range is always effectively extended to start at the beginning of the text.\n\nSee Also\nCausing glyph generation and layout\nfunc ensureGlyphs(forCharacterRange: NSRange)\nForces the layout manager to generate glyphs for the specified character range if it hasn’t already.\nfunc ensureGlyphs(forGlyphRange: NSRange)\nForces the layout manager to generate glyphs for the specified glyph range if it hasn’t already.\nfunc ensureLayout(forBoundingRect: CGRect, in: NSTextContainer)\nForces the layout manager to perform layout for the specified area in the specified text container if it hasn’t already.\nfunc ensureLayout(forCharacterRange: NSRange)\nForces the layout manager to perform layout for the specified character range if it hasn’t already.\nfunc ensureLayout(for: NSTextContainer)\nForces the layout manager to perform layout for the specified text container if it hasn’t already.\nvar glyphGenerator: NSGlyphGenerator\nThe glyph generator that the layout manager uses."
  },
  {
    "title": "registerViewProviderClass(_:forFileType:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextattachment/3857586-registerviewproviderclass",
    "html": "Parameters\ntextAttachmentViewProviderClass\n\nThe text attachment view provider class.\n\nfileType\n\nA String that represents the file type.\n\nSee Also\nConvenience methods\nclass func textAttachmentViewProviderClass(forFileType: String) -> AnyClass?\nReturns the text attachment view provider class, if any, for the file type you specify."
  },
  {
    "title": "default | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsparagraphstyle/1532681-default",
    "html": "Discussion\n\nThe default paragraph style has the following default values:\n\nSubattribute\n\n\t\n\nDefault\n\n\n\n\nAlignment\n\n\t\n\nNSNaturalTextAlignment\n\n\n\n\nTab stops\n\n\t\n\n12 left-aligned tabs, spaced by 28.0 points\n\n\n\n\nLine break mode\n\n\t\n\nNSLineBreakByWordWrapping\n\n\n\n\nAll others\n\n\t\n\n0.0\n\nSee individual method descriptions for explanations of each subattribute.\n\nSee Also\nRelated Documentation\nRuler and Paragraph Style Programming Topics"
  },
  {
    "title": "NSTextSelectionDataSource | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselectiondatasource",
    "html": "Topics\nRange of the selection\nvar documentRange: NSTextRange\nReturns the starting and ending locations for the document.\n\nRequired\n\nEnumerating components of the selection\nfunc enumerateCaretOffsetsInLineFragment(at: NSTextLocation, using: (CGFloat, NSTextLocation, Bool, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates all the insertion point caret offsets from left to right in visual order.\n\nRequired\n\nfunc enumerateContainerBoundaries(from: NSTextLocation, reverse: Bool, using: (NSTextLocation, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates all the container boundaries starting from the location you specify.\nfunc enumerateSubstrings(from: NSTextLocation, options: NSString.EnumerationOptions, using: (String?, NSTextRange, NSTextRange?, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates the textual segment boundaries starting at the location you specify.\n\nRequired\n\nFinding specific content in the selection\nfunc location(NSTextLocation, offsetBy: Int) -> NSTextLocation?\nReturns a new location using the location and offset you specify.\n\nRequired\n\nfunc lineFragmentRange(for: CGPoint, inContainerAt: NSTextLocation) -> NSTextRange?\nReturns the range of the line fragment that contains the point you specify.\n\nRequired\n\nfunc offset(from: NSTextLocation, to: NSTextLocation) -> Int\nReturns the offset between the two locations you specify.\n\nRequired\n\nfunc textRange(for: NSTextSelection.Granularity, enclosing: NSTextLocation) -> NSTextRange?\nReturns a text range that corresponds to selection granularity of the enclosing location.\n\nRequired\n\nChanging the characteristics of the selection\nfunc baseWritingDirection(at: NSTextLocation) -> NSTextSelectionNavigation.WritingDirection\nReturns the base writing direction at the location you specify.\n\nRequired\n\nenum NSTextSelectionNavigation.WritingDirection\nValues that describe the writing direction inside a text selection.\nfunc textLayoutOrientation(at: NSTextLocation) -> NSTextSelectionNavigation.LayoutOrientation\nReturns the layout orientation at the location you specify.\nenum NSTextSelectionNavigation.LayoutOrientation\nValues that describe the possible layout orientations.\nRelationships\nInherits From\nNSObjectProtocol\nConforming Types\nNSTextLayoutManager\nSee Also\nAccessing the data source\nvar textSelectionDataSource: NSTextSelectionDataSource?\nThe data source associated with this selection navigation."
  },
  {
    "title": "NSTextLayoutManager.SegmentOptions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/segmentoptions",
    "html": "Topics\nCreating segment options\ninit(rawValue: UInt)\nCceates a new segment option using the value you provide.\nGetting segment options\nstatic var headSegmentExtended: NSTextLayoutManager.SegmentOptions\nReturns the value that causes the framework to extend the segment to the tail edge.\nstatic var middleFragmentsExcluded: NSTextLayoutManager.SegmentOptions\nReturns the value that causes the framework to enumerate segments in only the first and last line fragments.\nstatic var rangeNotRequired: NSTextLayoutManager.SegmentOptions\nReturns the value that causes the framework enumerate text segment rectangles, but avoids preparing a range object.\nstatic var tailSegmentExtended: NSTextLayoutManager.SegmentOptions\nReturns the value that causes the framework to extend the segment to the tail edge.\nstatic var upstreamAffinity: NSTextLayoutManager.SegmentOptions\nReturns the value that causes the framework to the place the segment based on the upstream affinity for an empty range.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nCausing layout generation\nvar textViewportLayoutController: NSTextViewportLayoutController\nReturns text viewport layout controller associated with the layout manager’s text container.\nfunc invalidateLayout(for: NSTextRange)\nInvalidates the layout information for specified text range.\nfunc textLayoutFragment(for: NSTextLocation) -> NSTextLayoutFragment?\nReturns the text layout fragment from the document at the specified location.\nfunc textLayoutFragment(for: CGPoint) -> NSTextLayoutFragment?\nReturns the text layout fragment at the position you specify in the text container.\nfunc ensureLayout(for: CGRect)\nPerforms the layout for filling the bounds you specify inside the last text container.\nfunc ensureLayout(for: NSTextRange)\nPerforms the layout for specified text range.\nfunc enumerateTextLayoutFragments(from: NSTextLocation?, options: NSTextLayoutFragment.EnumerationOptions, using: (NSTextLayoutFragment) -> Bool) -> NSTextLocation?\nEnumerates the text layout fragments starting at the specified location.\nenum NSTextLayoutManager.SegmentType\nValues that describe the rendering of selection boundaries."
  },
  {
    "title": "NSTextLayoutManager.SegmentType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/segmenttype",
    "html": "Topics\nKinds of text selection segments\ncase highlight\nThe segment behavior suitable for highlighting.\ncase selection\nThe segment behavior suitable for selection rendering.\ncase standard\nThe standard segment, matching the typographic bounds of the range.\nRelationships\nConforms To\nSendable\nSee Also\nCausing layout generation\nvar textViewportLayoutController: NSTextViewportLayoutController\nReturns text viewport layout controller associated with the layout manager’s text container.\nfunc invalidateLayout(for: NSTextRange)\nInvalidates the layout information for specified text range.\nfunc textLayoutFragment(for: NSTextLocation) -> NSTextLayoutFragment?\nReturns the text layout fragment from the document at the specified location.\nfunc textLayoutFragment(for: CGPoint) -> NSTextLayoutFragment?\nReturns the text layout fragment at the position you specify in the text container.\nfunc ensureLayout(for: CGRect)\nPerforms the layout for filling the bounds you specify inside the last text container.\nfunc ensureLayout(for: NSTextRange)\nPerforms the layout for specified text range.\nfunc enumerateTextLayoutFragments(from: NSTextLocation?, options: NSTextLayoutFragment.EnumerationOptions, using: (NSTextLayoutFragment) -> Bool) -> NSTextLocation?\nEnumerates the text layout fragments starting at the specified location.\nstruct NSTextLayoutManager.SegmentOptions\nValues that describe where and how the framework extends segments of a selection."
  },
  {
    "title": "invalidateLayout(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3809998-invalidatelayout",
    "html": "Parameters\nrange\n\nThe range of the layout to invalidate.\n\nSee Also\nCausing layout generation\nvar textViewportLayoutController: NSTextViewportLayoutController\nReturns text viewport layout controller associated with the layout manager’s text container.\nfunc textLayoutFragment(for: NSTextLocation) -> NSTextLayoutFragment?\nReturns the text layout fragment from the document at the specified location.\nfunc textLayoutFragment(for: CGPoint) -> NSTextLayoutFragment?\nReturns the text layout fragment at the position you specify in the text container.\nfunc ensureLayout(for: CGRect)\nPerforms the layout for filling the bounds you specify inside the last text container.\nfunc ensureLayout(for: NSTextRange)\nPerforms the layout for specified text range.\nfunc enumerateTextLayoutFragments(from: NSTextLocation?, options: NSTextLayoutFragment.EnumerationOptions, using: (NSTextLayoutFragment) -> Bool) -> NSTextLocation?\nEnumerates the text layout fragments starting at the specified location.\nenum NSTextLayoutManager.SegmentType\nValues that describe the rendering of selection boundaries.\nstruct NSTextLayoutManager.SegmentOptions\nValues that describe where and how the framework extends segments of a selection."
  },
  {
    "title": "ensureLayout(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3809991-ensurelayout",
    "html": "Parameters\nbounds\n\nA CGRect that describes the layout bounds.\n\nSee Also\nCausing layout generation\nvar textViewportLayoutController: NSTextViewportLayoutController\nReturns text viewport layout controller associated with the layout manager’s text container.\nfunc invalidateLayout(for: NSTextRange)\nInvalidates the layout information for specified text range.\nfunc textLayoutFragment(for: NSTextLocation) -> NSTextLayoutFragment?\nReturns the text layout fragment from the document at the specified location.\nfunc textLayoutFragment(for: CGPoint) -> NSTextLayoutFragment?\nReturns the text layout fragment at the position you specify in the text container.\nfunc ensureLayout(for: NSTextRange)\nPerforms the layout for specified text range.\nfunc enumerateTextLayoutFragments(from: NSTextLocation?, options: NSTextLayoutFragment.EnumerationOptions, using: (NSTextLayoutFragment) -> Bool) -> NSTextLocation?\nEnumerates the text layout fragments starting at the specified location.\nenum NSTextLayoutManager.SegmentType\nValues that describe the rendering of selection boundaries.\nstruct NSTextLayoutManager.SegmentOptions\nValues that describe where and how the framework extends segments of a selection."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3809997-init",
    "html": "Parameters\ncoder\n\nA coder that implements NSCoder.\n\nSee Also\nCreating a layout manager\ninit()\nCreates a new text layout manager."
  },
  {
    "title": "textContainer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3810010-textcontainer",
    "html": "See Also\nAccessing the text storage\nvar textContentManager: NSTextContentManager?\nReturns the text content manager associated with this text layout manager.\nvar textSelectionNavigation: NSTextSelectionNavigation\nReturns a text selection manager configured to have the text layout manager as its data source.\nvar textSelections: [NSTextSelection]\nAn array of text selections associated by the text layout manager.\nvar usageBoundsForTextContainer: CGRect\nReturns the usage bounds for the text container.\nfunc enumerateTextSegments(in: NSTextRange, type: NSTextLayoutManager.SegmentType, options: NSTextLayoutManager.SegmentOptions, using: (NSTextRange?, CGRect, CGFloat, NSTextContainer) -> Bool)\nEnumerates text segments of a specific type and in the text range you provide.\nfunc replace(NSTextContentManager)\nReplaces the current text content manager with a new one you provide.\nfunc replaceContents(in: NSTextRange, with: NSAttributedString)\nReplaces content at the location you specify with an attributed string you provide.\nfunc replaceContents(in: NSTextRange, with: [NSTextElement])\nReplaces content at the location you specify with the text elements string you provide."
  },
  {
    "title": "limitsLayoutForSuspiciousContents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3810001-limitslayoutforsuspiciouscontent",
    "html": "Discussion\n\nBy enabling this functionality, it’s possible that certain text — such as a very long paragraph — might result in an unexpected layout. Defaults to false.\n\nSee Also\nConfiguring global layout manager options\nvar layoutQueue: OperationQueue?\nThe queue that the framework dispatches layout operations on.\nvar renderingAttributesValidator: ((NSTextLayoutManager, NSTextLayoutFragment) -> Void)?\nA callback block that the framework invokes whenever the text layout manager needs to validate the rendering attributes for the range.\nvar usesFontLeading: Bool\nA Boolean value that controls whether the framework uses the leading information specified by the font when laying out text.\nvar usesHyphenation: Bool\nA Boolean values that controls whether the text layout manager attempts to hyphenate when wrapping lines."
  },
  {
    "title": "usesFontLeading | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3810018-usesfontleading",
    "html": "Discussion\n\nIf set to true, uses the leading as specified by the font. However, this isn’t appropriate for most UI text. Defaults to true.\n\nSee Also\nConfiguring global layout manager options\nvar layoutQueue: OperationQueue?\nThe queue that the framework dispatches layout operations on.\nvar renderingAttributesValidator: ((NSTextLayoutManager, NSTextLayoutFragment) -> Void)?\nA callback block that the framework invokes whenever the text layout manager needs to validate the rendering attributes for the range.\nvar usesHyphenation: Bool\nA Boolean values that controls whether the text layout manager attempts to hyphenate when wrapping lines.\nvar limitsLayoutForSuspiciousContents: Bool\nA Boolean value that controls internal security analysis for malicious inputs and activates defensive behaviors."
  },
  {
    "title": "textSelectionNavigation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3810014-textselectionnavigation",
    "html": "See Also\nAccessing the text storage\nvar textContentManager: NSTextContentManager?\nReturns the text content manager associated with this text layout manager.\nvar textContainer: NSTextContainer?\nThe text container object that provides geometric information for the layout destination.\nvar textSelections: [NSTextSelection]\nAn array of text selections associated by the text layout manager.\nvar usageBoundsForTextContainer: CGRect\nReturns the usage bounds for the text container.\nfunc enumerateTextSegments(in: NSTextRange, type: NSTextLayoutManager.SegmentType, options: NSTextLayoutManager.SegmentOptions, using: (NSTextRange?, CGRect, CGFloat, NSTextContainer) -> Bool)\nEnumerates text segments of a specific type and in the text range you provide.\nfunc replace(NSTextContentManager)\nReplaces the current text content manager with a new one you provide.\nfunc replaceContents(in: NSTextRange, with: NSAttributedString)\nReplaces content at the location you specify with an attributed string you provide.\nfunc replaceContents(in: NSTextRange, with: [NSTextElement])\nReplaces content at the location you specify with the text elements string you provide."
  },
  {
    "title": "usesHyphenation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3810019-useshyphenation",
    "html": "Discussion\n\nDefaults to true.\n\nSee Also\nConfiguring global layout manager options\nvar layoutQueue: OperationQueue?\nThe queue that the framework dispatches layout operations on.\nvar renderingAttributesValidator: ((NSTextLayoutManager, NSTextLayoutFragment) -> Void)?\nA callback block that the framework invokes whenever the text layout manager needs to validate the rendering attributes for the range.\nvar usesFontLeading: Bool\nA Boolean value that controls whether the framework uses the leading information specified by the font when laying out text.\nvar limitsLayoutForSuspiciousContents: Bool\nA Boolean value that controls internal security analysis for malicious inputs and activates defensive behaviors."
  },
  {
    "title": "textSelections | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3810015-textselections",
    "html": "Discussion\n\nEach NSTextSelection represents an insertion point. The selection state that the framework shares among all viewports connected to the text layout manager through text containers.\n\nSee Also\nAccessing the text storage\nvar textContentManager: NSTextContentManager?\nReturns the text content manager associated with this text layout manager.\nvar textContainer: NSTextContainer?\nThe text container object that provides geometric information for the layout destination.\nvar textSelectionNavigation: NSTextSelectionNavigation\nReturns a text selection manager configured to have the text layout manager as its data source.\nvar usageBoundsForTextContainer: CGRect\nReturns the usage bounds for the text container.\nfunc enumerateTextSegments(in: NSTextRange, type: NSTextLayoutManager.SegmentType, options: NSTextLayoutManager.SegmentOptions, using: (NSTextRange?, CGRect, CGFloat, NSTextContainer) -> Bool)\nEnumerates text segments of a specific type and in the text range you provide.\nfunc replace(NSTextContentManager)\nReplaces the current text content manager with a new one you provide.\nfunc replaceContents(in: NSTextRange, with: NSAttributedString)\nReplaces content at the location you specify with an attributed string you provide.\nfunc replaceContents(in: NSTextRange, with: [NSTextElement])\nReplaces content at the location you specify with the text elements string you provide."
  },
  {
    "title": "NSTextLayoutManagerDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanagerdelegate",
    "html": "Topics\nResponding to layout changes\nfunc textLayoutManager(NSTextLayoutManager, renderingAttributesForLink: Any, at: NSTextLocation, defaultAttributes: [NSAttributedString.Key : Any]) -> [NSAttributedString.Key : Any]?\nThe method the framework calls to return a dictionary of attributes for rendering a link attribute name.\nfunc textLayoutManager(NSTextLayoutManager, shouldBreakLineBefore: NSTextLocation, hyphenating: Bool) -> Bool\nThe method the framework calls to determine the soft line break point.\nfunc textLayoutManager(NSTextLayoutManager, textLayoutFragmentFor: NSTextLocation, in: NSTextElement) -> NSTextLayoutFragment\nThe method the framework calls to give the delegate an opportunity to return a custom text layout fragment.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nManaging the layout process\nvar delegate: NSTextLayoutManagerDelegate?\nThe delegate for the text layout manager object."
  },
  {
    "title": "enumerateTextSegments(in:type:options:using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3809995-enumeratetextsegments",
    "html": "Parameters\ntextRange\n\nThe range as an NSTextRange.\n\ntype\n\nOne of the available NSTextLayoutManager.SegmentType values.\n\noptions\n\nOne or more of the NSTextLayoutManager.SegmentOptions options.\n\nblock\n\nA closure you provide to determine if the enumeration finishes early.\n\nReturn Value\n\nA Boolean value that signals whether the enumeration continues.\n\nDiscussion\n\nA text segment is a logically and visually contiguous portion of the text content inside a line fragment that you specify with a single text range. The framework enumerates the segments visually from left to right. Returning false breaks out of the enumeration.\n\nSee Also\nAccessing the text storage\nvar textContentManager: NSTextContentManager?\nReturns the text content manager associated with this text layout manager.\nvar textContainer: NSTextContainer?\nThe text container object that provides geometric information for the layout destination.\nvar textSelectionNavigation: NSTextSelectionNavigation\nReturns a text selection manager configured to have the text layout manager as its data source.\nvar textSelections: [NSTextSelection]\nAn array of text selections associated by the text layout manager.\nvar usageBoundsForTextContainer: CGRect\nReturns the usage bounds for the text container.\nfunc replace(NSTextContentManager)\nReplaces the current text content manager with a new one you provide.\nfunc replaceContents(in: NSTextRange, with: NSAttributedString)\nReplaces content at the location you specify with an attributed string you provide.\nfunc replaceContents(in: NSTextRange, with: [NSTextElement])\nReplaces content at the location you specify with the text elements string you provide."
  },
  {
    "title": "addRenderingAttribute(_:value:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3809989-addrenderingattribute",
    "html": "Parameters\nrenderingAttribute\n\nThe NSAttributedString.Key that represents the attribute.\n\nvalue\n\nThe value for the attribute.\n\ntextRange\n\nThe range over which to apply the attribute.\n\nDiscussion\n\nPassing nil overrides the specified attribute by removing it from the final attributes the framework passes to the layout and rendering engine. This is a convenience method for setRenderingAttributes(_:for:).\n\nSee Also\nAdjusting rendering\nclass var linkRenderingAttributes: [NSAttributedString.Key : Any]\nReturns the default set of attributes for rendering a link.\nfunc enumerateRenderingAttributes(from: NSTextLocation, reverse: Bool, using: (NSTextLayoutManager, [NSAttributedString.Key : Any], NSTextRange) -> Bool)\nEnumerates the rendering attributes from a location you specify.\nfunc renderingAttributes(forLink: Any, at: NSTextLocation) -> [NSAttributedString.Key : Any]\nReturns a dictionary of rendering attributes for rendering a link.\nfunc invalidateRenderingAttributes(for: NSTextRange)\nInvalidates the rendering attributes of the specified text range.\nfunc removeRenderingAttribute(NSAttributedString.Key, for: NSTextRange)\nRemoves the rendering attribute from the specified text range.\nfunc setRenderingAttributes([NSAttributedString.Key : Any], for: NSTextRange)\nSets the rendering attributes for the range you specify."
  },
  {
    "title": "usageBoundsForTextContainer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3810017-usageboundsfortextcontainer",
    "html": "Discussion\n\nViews can observe this property to trigger a resize operation. For example, UIView or NSView call setNeedsUpdateConstraints() when the usage bounds changes. This property is KVO-compliant.\n\nSee Also\nAccessing the text storage\nvar textContentManager: NSTextContentManager?\nReturns the text content manager associated with this text layout manager.\nvar textContainer: NSTextContainer?\nThe text container object that provides geometric information for the layout destination.\nvar textSelectionNavigation: NSTextSelectionNavigation\nReturns a text selection manager configured to have the text layout manager as its data source.\nvar textSelections: [NSTextSelection]\nAn array of text selections associated by the text layout manager.\nfunc enumerateTextSegments(in: NSTextRange, type: NSTextLayoutManager.SegmentType, options: NSTextLayoutManager.SegmentOptions, using: (NSTextRange?, CGRect, CGFloat, NSTextContainer) -> Bool)\nEnumerates text segments of a specific type and in the text range you provide.\nfunc replace(NSTextContentManager)\nReplaces the current text content manager with a new one you provide.\nfunc replaceContents(in: NSTextRange, with: NSAttributedString)\nReplaces content at the location you specify with an attributed string you provide.\nfunc replaceContents(in: NSTextRange, with: [NSTextElement])\nReplaces content at the location you specify with the text elements string you provide."
  },
  {
    "title": "enumerateRenderingAttributes(from:reverse:using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3809993-enumeraterenderingattributes",
    "html": "Parameters\nlocation\n\nThe location at which to start the enumeration.\n\nreverse\n\nWhether to start the enumeration from the end of the range.\n\nblock\n\nA closure you provide to determine if the enumeration finishes early.\n\nReturn Value\n\nA Boolean value that determines whether the enumeration continues.\n\nDiscussion\n\nThis method only enumerates ranges with text that specify rendering attributes. Returning false from block breaks out of the enumeration.\n\nSee Also\nAdjusting rendering\nclass var linkRenderingAttributes: [NSAttributedString.Key : Any]\nReturns the default set of attributes for rendering a link.\nfunc addRenderingAttribute(NSAttributedString.Key, value: Any?, for: NSTextRange)\nSets the rendering attribute for the value and range you specify.\nfunc renderingAttributes(forLink: Any, at: NSTextLocation) -> [NSAttributedString.Key : Any]\nReturns a dictionary of rendering attributes for rendering a link.\nfunc invalidateRenderingAttributes(for: NSTextRange)\nInvalidates the rendering attributes of the specified text range.\nfunc removeRenderingAttribute(NSAttributedString.Key, for: NSTextRange)\nRemoves the rendering attribute from the specified text range.\nfunc setRenderingAttributes([NSAttributedString.Key : Any], for: NSTextRange)\nSets the rendering attributes for the range you specify."
  },
  {
    "title": "replace(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3810008-replace",
    "html": "Parameters\ntextContentManager\n\nThe new text context manager.\n\nDiscussion\n\nUse this method to replace the current NSTextContentManager with a new one, leaving all related objects intact. This method makes sure the NSTextLayoutManager doesn’t get deallocated while migrating to the new manager.\n\nSee Also\nAccessing the text storage\nvar textContentManager: NSTextContentManager?\nReturns the text content manager associated with this text layout manager.\nvar textContainer: NSTextContainer?\nThe text container object that provides geometric information for the layout destination.\nvar textSelectionNavigation: NSTextSelectionNavigation\nReturns a text selection manager configured to have the text layout manager as its data source.\nvar textSelections: [NSTextSelection]\nAn array of text selections associated by the text layout manager.\nvar usageBoundsForTextContainer: CGRect\nReturns the usage bounds for the text container.\nfunc enumerateTextSegments(in: NSTextRange, type: NSTextLayoutManager.SegmentType, options: NSTextLayoutManager.SegmentOptions, using: (NSTextRange?, CGRect, CGFloat, NSTextContainer) -> Bool)\nEnumerates text segments of a specific type and in the text range you provide.\nfunc replaceContents(in: NSTextRange, with: NSAttributedString)\nReplaces content at the location you specify with an attributed string you provide.\nfunc replaceContents(in: NSTextRange, with: [NSTextElement])\nReplaces content at the location you specify with the text elements string you provide."
  },
  {
    "title": "replaceContents(in:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3810007-replacecontents",
    "html": "Parameters\nrange\n\nThe range of the content to replace.\n\ntextElements\n\nAn array of text elements.\n\nSee Also\nAccessing the text storage\nvar textContentManager: NSTextContentManager?\nReturns the text content manager associated with this text layout manager.\nvar textContainer: NSTextContainer?\nThe text container object that provides geometric information for the layout destination.\nvar textSelectionNavigation: NSTextSelectionNavigation\nReturns a text selection manager configured to have the text layout manager as its data source.\nvar textSelections: [NSTextSelection]\nAn array of text selections associated by the text layout manager.\nvar usageBoundsForTextContainer: CGRect\nReturns the usage bounds for the text container.\nfunc enumerateTextSegments(in: NSTextRange, type: NSTextLayoutManager.SegmentType, options: NSTextLayoutManager.SegmentOptions, using: (NSTextRange?, CGRect, CGFloat, NSTextContainer) -> Bool)\nEnumerates text segments of a specific type and in the text range you provide.\nfunc replace(NSTextContentManager)\nReplaces the current text content manager with a new one you provide.\nfunc replaceContents(in: NSTextRange, with: NSAttributedString)\nReplaces content at the location you specify with an attributed string you provide."
  },
  {
    "title": "renderingAttributes(forLink:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3810004-renderingattributes",
    "html": "Parameters\nlink\n\nThe link.\n\nlocation\n\nThe location of the link in the text.\n\nReturn Value\n\nA dictionary of rendering attributes.\n\nDiscussion\n\nAs with other rendering attributes, specifying NSNull removes the attribute from the final attributes the framework uses for rendering. It has priority over the general rendering attributes.\n\nSee Also\nAdjusting rendering\nclass var linkRenderingAttributes: [NSAttributedString.Key : Any]\nReturns the default set of attributes for rendering a link.\nfunc addRenderingAttribute(NSAttributedString.Key, value: Any?, for: NSTextRange)\nSets the rendering attribute for the value and range you specify.\nfunc enumerateRenderingAttributes(from: NSTextLocation, reverse: Bool, using: (NSTextLayoutManager, [NSAttributedString.Key : Any], NSTextRange) -> Bool)\nEnumerates the rendering attributes from a location you specify.\nfunc invalidateRenderingAttributes(for: NSTextRange)\nInvalidates the rendering attributes of the specified text range.\nfunc removeRenderingAttribute(NSAttributedString.Key, for: NSTextRange)\nRemoves the rendering attribute from the specified text range.\nfunc setRenderingAttributes([NSAttributedString.Key : Any], for: NSTextRange)\nSets the rendering attributes for the range you specify."
  },
  {
    "title": "UIImage.SymbolScale.small | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/symbolscale/small",
    "html": "See Also\nSymbol image scales\ncase `default`\nThe default scale variant that matches the system usage.\ncase unspecified\nAn unspecified scale.\ncase medium\nThe medium variant of the symbol image\ncase large\nThe large variant of the symbol image."
  },
  {
    "title": "init(location:end:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextrange/3801809-init",
    "html": "Parameters\nlocation\n\nThe starting location.\n\nendLocation\n\nThe ending location.\n\nSee Also\nCreating a text range\ninit(location: NSTextLocation)\nCreates a new text range at the location you specify."
  },
  {
    "title": "endLocation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextrange/3801807-endlocation",
    "html": "See Also\nCharacteristics of the text range\nvar isEmpty: Bool\nReturns whether the text range is empty.\nvar location: NSTextLocation\nReturns the starting location of the text range."
  },
  {
    "title": "location | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextrange/3801812-location",
    "html": "See Also\nCharacteristics of the text range\nvar endLocation: NSTextLocation\nReturns the ending location of the text range.\nvar isEmpty: Bool\nReturns whether the text range is empty."
  },
  {
    "title": "isEmpty | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextrange/3801806-isempty",
    "html": "See Also\nCharacteristics of the text range\nvar endLocation: NSTextLocation\nReturns the ending location of the text range.\nvar location: NSTextLocation\nReturns the starting location of the text range."
  },
  {
    "title": "allowsNonContiguousLayout | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403197-allowsnoncontiguouslayout",
    "html": "Discussion\n\nFor more information about noncontiguous layout, see Noncontiguous Layout.\n\nSee Also\nConfiguring the global layout manager options\nvar hasNonContiguousLayout: Bool\nA Boolean value that indicates whether the layout manager currently has any areas of noncontiguous layout.\nvar showsInvisibleCharacters: Bool\nA Boolean value that indicates whether to substitute visible glyphs for whitespace and other typically invisible characters.\nvar showsControlCharacters: Bool\nA Boolean value that indicates whether the layout manager substitutes visible glyphs for control characters in the layout.\nvar usesFontLeading: Bool\nA Boolean value that indicates whether the layout manager uses the leading of the font.\nvar backgroundLayoutEnabled: Bool\nA Boolean value that indicates whether the layout manager generates glyphs and lays them out when the app's run loop is idle.\nvar limitsLayoutForSuspiciousContents: Bool\nA Boolean value that indicates whether the layout manager avoids laying out unusually long or suspicious input.\nvar usesDefaultHyphenation: Bool\nA Boolean value that indicates whether the layout manager uses the default hyphenation rules to wrap lines."
  },
  {
    "title": "limitsLayoutForSuspiciousContents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/3021179-limitslayoutforsuspiciouscontent",
    "html": "Discussion\n\nThe default value of this property is false, which causes the layout manager to lay out whatever text you give it. Changing the value to true causes the layout manager to generate invalid layout information when it detects potentially suspicious content.\n\nSee Also\nConfiguring the global layout manager options\nvar allowsNonContiguousLayout: Bool\nA Boolean value that indicates whether the layout manager allows noncontiguous layout.\nvar hasNonContiguousLayout: Bool\nA Boolean value that indicates whether the layout manager currently has any areas of noncontiguous layout.\nvar showsInvisibleCharacters: Bool\nA Boolean value that indicates whether to substitute visible glyphs for whitespace and other typically invisible characters.\nvar showsControlCharacters: Bool\nA Boolean value that indicates whether the layout manager substitutes visible glyphs for control characters in the layout.\nvar usesFontLeading: Bool\nA Boolean value that indicates whether the layout manager uses the leading of the font.\nvar backgroundLayoutEnabled: Bool\nA Boolean value that indicates whether the layout manager generates glyphs and lays them out when the app's run loop is idle.\nvar usesDefaultHyphenation: Bool\nA Boolean value that indicates whether the layout manager uses the default hyphenation rules to wrap lines."
  },
  {
    "title": "textContainer(forGlyphAt:effectiveRange:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403110-textcontainer",
    "html": "Parameters\nglyphIndex\n\nIndex of a glyph in the returned container.\n\neffectiveGlyphRange\n\nIf not NULL, on output, points to the whole range of glyphs that are in the returned container.\n\nReturn Value\n\nThe text container in which the glyph at glyphIndex is laid out.\n\nDiscussion\n\nThis method causes glyph generation and layout for the line fragment containing the specified glyph, or if noncontiguous layout is not enabled, up to and including that line fragment. If noncontiguous layout is not enabled and effectiveGlyphRange is not NULL, this method additionally causes glyph generation and layout for the entire text container containing the specified glyph.\n\nOverriding this method is not recommended. Any changes to the returned glyph range should be done at the typesetter level.\n\nSee Also\nManaging the text containers\nvar textContainers: [NSTextContainer]\nThe current text containers of the layout manager.\nfunc addTextContainer(NSTextContainer)\nAppends the specified text container to the series of text containers where the layout manager arranges text.\nfunc insertTextContainer(NSTextContainer, at: Int)\nInserts a text container at the specified index in the list of text containers.\nfunc removeTextContainer(at: Int)\nRemoves the text container at the specified index and invalidates the layout as necessary.\nfunc setTextContainer(NSTextContainer, forGlyphRange: NSRange)\nAssociates a text container with the specified range of glyphs.\nfunc textContainerChangedGeometry(NSTextContainer)\nInvalidates the layout information, and possibly glyphs, for the specified text container and all subsequent text container objects.\nfunc textContainerChangedTextView(NSTextContainer)\nUpdates the information necessary to manage text view objects for the specified text container.\nfunc textContainer(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> NSTextContainer?\nReturns the text container that manages the layout for the specified glyph.\nfunc usedRect(for: NSTextContainer) -> CGRect\nReturns the bounding rectangle for the glyphs in the specified text container."
  },
  {
    "title": "removeLayoutManager(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextstorage/1528755-removelayoutmanager",
    "html": "Parameters\naLayoutManager\n\nThe layout manager to remove.\n\nSee Also\nAccessing the layout managers\nvar layoutManagers: [NSLayoutManager]\nThe layout managers for the text storage object.\nfunc addLayoutManager(NSLayoutManager)\nAdds a layout manager to the text storage object’s set of layout managers."
  },
  {
    "title": "setTextContainer(_:forGlyphRange:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403241-settextcontainer",
    "html": "Parameters\naTextContainer\n\nThe text container to set.\n\nglyphRange\n\nThe range of glyphs to lay out.\n\nDiscussion\n\nThe layout within the container is specified with the setLineFragmentRect(_:forGlyphRange:usedRect:) and setLocation(_:forStartOfGlyphRange:) methods.\n\nThis method is used by the layout mechanism and should be invoked only during typesetting, in almost all cases only by the typesetter. For example, a custom typesetter might invoke it.\n\nSee Also\nManaging the text containers\nvar textContainers: [NSTextContainer]\nThe current text containers of the layout manager.\nfunc addTextContainer(NSTextContainer)\nAppends the specified text container to the series of text containers where the layout manager arranges text.\nfunc insertTextContainer(NSTextContainer, at: Int)\nInserts a text container at the specified index in the list of text containers.\nfunc removeTextContainer(at: Int)\nRemoves the text container at the specified index and invalidates the layout as necessary.\nfunc textContainerChangedGeometry(NSTextContainer)\nInvalidates the layout information, and possibly glyphs, for the specified text container and all subsequent text container objects.\nfunc textContainerChangedTextView(NSTextContainer)\nUpdates the information necessary to manage text view objects for the specified text container.\nfunc textContainer(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> NSTextContainer?\nReturns the text container that manages the layout for the specified glyph, causing layout to happen as necessary.\nfunc textContainer(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> NSTextContainer?\nReturns the text container that manages the layout for the specified glyph.\nfunc usedRect(for: NSTextContainer) -> CGRect\nReturns the bounding rectangle for the glyphs in the specified text container."
  },
  {
    "title": "NSTextStorageObserving | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextstorageobserving",
    "html": "Topics\nAccessing the text storage\nvar textStorage: NSTextStorage?\n\nRequired\n\nManaging the editing process\nfunc performEditingTransaction(for: NSTextStorage, using: () -> Void)\n\nRequired\n\nfunc processEditing(for: NSTextStorage, edited: NSTextStorage.EditActions, range: NSRange, changeInLength: Int, invalidatedRange: NSRange)\n\nRequired\n\nRelationships\nInherits From\nNSObjectProtocol\nConforming Types\nNSTextContentStorage\nSee Also\nAccessing the storage controller\nvar textStorageObserver: NSTextStorageObserving?\nThe observer for the text storage object."
  },
  {
    "title": "didProcessEditingNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextstorage/1525483-didprocesseditingnotification",
    "html": "Discussion\n\nThe framework posts this notification after a text storage finishes processing edits in processEditing(). Observers other than the delegate shouldn’t make further changes to the text storage. The notification object is the text storage object that processed the edits. This notification doesn’t contain a userInfo dictionary.\n\nSee Also\nNotifications\nclass let willProcessEditingNotification: NSNotification.Name\nA notification that posts before a text storage begins processing edits."
  },
  {
    "title": "editedRange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextstorage/1524379-editedrange",
    "html": "Discussion\n\nThe specified range can reflect changes to characters or attributes. The text storage object’s delegate and layout managers can use this information to determine the nature of edits in their respective notification methods.\n\nSee Also\nDetermining the nature of changes\nvar editedMask: NSTextStorage.EditActions\nA mask that describes the kinds of edits pending for the text storage object.\nvar changeInLength: Int\nThe difference between the current length of the edited range and its length before editing."
  },
  {
    "title": "textContainerChangedGeometry(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/1403091-textcontainerchangedgeometry",
    "html": "Parameters\naTextContainer\n\nThe text container whose layout is invalidated.\n\nDiscussion\n\nThis method is invoked automatically by other components of the text system; you should rarely need to invoke it directly. Subclasses of NSTextContainer, however, must invoke this method any time their size of shape changes (a text container that dynamically adjusts its shape to wrap text around placed graphics, for example, must do so when a graphic is added, moved, or removed).\n\nSee Also\nManaging the text containers\nvar textContainers: [NSTextContainer]\nThe current text containers of the layout manager.\nfunc addTextContainer(NSTextContainer)\nAppends the specified text container to the series of text containers where the layout manager arranges text.\nfunc insertTextContainer(NSTextContainer, at: Int)\nInserts a text container at the specified index in the list of text containers.\nfunc removeTextContainer(at: Int)\nRemoves the text container at the specified index and invalidates the layout as necessary.\nfunc setTextContainer(NSTextContainer, forGlyphRange: NSRange)\nAssociates a text container with the specified range of glyphs.\nfunc textContainerChangedTextView(NSTextContainer)\nUpdates the information necessary to manage text view objects for the specified text container.\nfunc textContainer(forGlyphAt: Int, effectiveRange: NSRangePointer?) -> NSTextContainer?\nReturns the text container that manages the layout for the specified glyph, causing layout to happen as necessary.\nfunc textContainer(forGlyphAt: Int, effectiveRange: NSRangePointer?, withoutAdditionalLayout: Bool) -> NSTextContainer?\nReturns the text container that manages the layout for the specified glyph.\nfunc usedRect(for: NSTextContainer) -> CGRect\nReturns the bounding rectangle for the glyphs in the specified text container."
  },
  {
    "title": "addLayoutManager(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextstorage/1533459-addlayoutmanager",
    "html": "Parameters\naLayoutManager\n\nThe layout manager to add.\n\nSee Also\nAccessing the layout managers\nvar layoutManagers: [NSLayoutManager]\nThe layout managers for the text storage object.\nfunc removeLayoutManager(NSLayoutManager)\nRemoves a layout manager from the text storage object’s set of layout managers."
  },
  {
    "title": "willProcessEditingNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextstorage/1529695-willprocesseditingnotification",
    "html": "Discussion\n\nThe framework posts this notification before a text storage begins processing edits in processEditing(). Observers other than the delegate shouldn’t make further changes to the text storage. The notification object is the text storage object that’s about to process the edits. This notification doesn’t contain a userInfo dictionary.\n\nSee Also\nNotifications\nclass let didProcessEditingNotification: NSNotification.Name\nA notification that posts after a text storage finishes processing edits."
  },
  {
    "title": "changeInLength | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextstorage/1528400-changeinlength",
    "html": "Discussion\n\nThis property reflects difference between the current length of the edited range and its length before editing began—that is, before the first call to the beginEditing() method or a single call to theedited(_:range:changeInLength:) method. This difference is accumulated with each call to the edited(_:range:changeInLength:) method, until the changes are finally processed.\n\nThe text storage object’s delegate and layout managers can use this information to determine the nature of edits in their respective notification methods.\n\nSee Also\nDetermining the nature of changes\nvar editedMask: NSTextStorage.EditActions\nA mask that describes the kinds of edits pending for the text storage object.\nvar editedRange: NSRange\nThe range of text that contains changes."
  },
  {
    "title": "textStorageObserver | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextstorage/3824756-textstorageobserver",
    "html": "See Also\nAccessing the storage controller\nprotocol NSTextStorageObserving\nOptional methods that delegates implement to handle editing and transaction processing."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextstorage/1532704-delegate",
    "html": "Discussion\n\nUse a delegate object to monitor edits occurring to the text contents. Your delegate object must conform to the NSTextStorageDelegate protocol.\n\nSee Also\nProcessing the editing actions\nprotocol NSTextStorageDelegate\nThe optional methods that delegates of text storage objects implement to handle text-edit processing."
  },
  {
    "title": "textSelection(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselection/3801826-textselection",
    "html": "Parameters\ntextRanges\n\nAn array of text ranges.\n\nReturn Value\n\nA new NSTextSelection."
  },
  {
    "title": "handoffUserActivityType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscene/connectionoptions/3238070-handoffuseractivitytype",
    "html": "Discussion\n\nWhen a Handoff activity is pending at scene-connection time, UIKit puts the type of that activity in this property. Use this information at connection time to prepare your scene to receive the actual activity object. After your scene connects, UIKit calls the appropriate delegate methods to deliver the NSUserActivity object.\n\nIf the value of this property is nil, no Handoff activity is pending."
  },
  {
    "title": "prepareThumbnailOfSize:completionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/3750845-preparethumbnailofsize",
    "html": "Parameters\nsize\n\nThe desired size of the thumbnail.\n\ncompletionHandler\n\nThe completion handler to call when the thumbnail is ready. The handler executes on a background thread.\n\nThe completion handler takes the following parameters:\n\nthumbnail\n\nA new thumbnail image. This parameter is nil if the original image isn’t backed by a CGImage or if the image data is corrupt or malformed.\n\nDiscussion\n\nWhen displaying an image in a UIImageView, you can use the view’s contentMode property to clip or scale the image automatically. But when the native image size is much larger than the bounds of the view, decoding the full size image creates unnecessary memory overhead. By creating a thumbnail image at a specified size with this method, you avoid the overhead of decoding the image at its full size.\n\nThis method asynchronously creates the thumbnail image on a background thread and calls the completion handler on that thread. If your app updates the UI in the completion handler, schedule the UI update on the main thread.\n\n- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {\n    UICollectionViewCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:self.cellIdentifier forIndexPath:indexPath];\n    NSAssert([cell isKindOfClass:[ItemCell class]], @\"Unexpected type for cell. Check configuration.\\n\");\n    \n    Item *item = self.items[indexPath.row];\n    ItemCell *itemCell = (ItemCell *)cell;\n    itemCell.nameLabel.text = item.name;\n    [item.image prepareThumbnailOfSize:self.thumbnailSize completionHandler:^(UIImage *thumbnail) {\n        dispatch_async(dispatch_get_main_queue(), ^{\n            itemCell.thumbnailImageView.image = thumbnail;\n        });\n    }];\n    return cell;\n}\n\n\nSee Also\nLoading images for display\n- imageByPreparingForDisplay\nDecodes an image synchronously and provides a new one for display in views and animations.\n- prepareForDisplayWithCompletionHandler:\nDecodes an image asynchronously and provides a new one for display in views and animations.\n- imageByPreparingThumbnailOfSize:\nReturns a new thumbnail image at the specified size."
  },
  {
    "title": "resizableImageWithCapInsets: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/1624102-resizableimagewithcapinsets",
    "html": "Parameters\ncapInsets\n\nThe values to use for the cap insets.\n\nReturn Value\n\nA new image object with the specified cap insets.\n\nDiscussion\n\nYou use this method to add cap insets to an image or to change the existing cap insets of an image. In both cases, you get back a new image and the original image remains untouched. For example, you can use this method to create a background image for a button with borders and corners: when the button is resized, the corners of the image remain unchanged, but the borders and center of the image expand to cover the new size.\n\niOS uses different rendering techniques, with different performance characteristics, depending on the size of each resizable area in the image:\n\nIf resizable areas have a width or height of 1 pixel—that is, a horizontally resizable area is 1 pixel wide, a vertically resizable area is 1 pixel tall, or the center region of the image is 1 x 1 pixel—iOS draws the image by stretching the 1-pixel region. This mode provides the fastest performance (for nonzero cap insets).\n\nIf resizable areas have a width or height greater than 1 pixel, iOS draws the image by tiling the region. This mode provides reduced performance, but can be useful for images with textured (rather than solid-color) content in their resizable areas.\n\nIf the entire image is resizable—that is, the capInsets parameter is UIEdgeInsetsZero—and its size is greater than 1 x 1 pixel, iOS draws the image by tiling the entire image. This mode is faster than the tiling mode for nonzero cap insets.\n\nTo instead directly control the resizing mode, use the resizableImageWithCapInsets:resizingMode: method.\n\nSee Also\nChanging the image attributes\n- imageWithConfiguration:\nReturns a new version of the current image, replacing the current configuration attributes with the specified attributes.\n- imageByApplyingSymbolConfiguration:\nReturns a new version of the current image, applying the specified configuration attributes on top of the current attributes.\n- imageFlippedForRightToLeftLayoutDirection\nReturns a new version of the current image that flips horizontally when it’s in a right-to-left layout.\n- imageWithHorizontallyFlippedOrientation\nReturns a new version of the image that’s a mirror of the original image.\n- imageWithRenderingMode:\nReturns a new version of the image that uses the specified rendering mode.\n- imageWithAlignmentRectInsets:\nReturns a new version of the image that uses the specified alignment insets.\n- resizableImageWithCapInsets:resizingMode:\nReturns a new version of the image with the specified cap insets and options.\n- imageWithoutBaseline\nCreates a copy of the current image object without any baseline information.\n- imageWithBaselineOffsetFromBottom:\nCreates a new image with a baseline at the specified offset from the bottom of the image.\nUIImageConfiguration\nA configuration object that contains the traits that the system uses when selecting the current image variant.\nUIImageSymbolConfiguration\nAn object that contains the specific font, size, style, and weight attributes to apply to a symbol image."
  },
  {
    "title": "imageWithAlignmentRectInsets: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/1624100-imagewithalignmentrectinsets",
    "html": "Parameters\nalignmentInsets\n\nThe alignment metadata to apply to the new image.\n\nReturn Value\n\nA new image object.\n\nSee Also\nChanging the image attributes\n- imageWithConfiguration:\nReturns a new version of the current image, replacing the current configuration attributes with the specified attributes.\n- imageByApplyingSymbolConfiguration:\nReturns a new version of the current image, applying the specified configuration attributes on top of the current attributes.\n- imageFlippedForRightToLeftLayoutDirection\nReturns a new version of the current image that flips horizontally when it’s in a right-to-left layout.\n- imageWithHorizontallyFlippedOrientation\nReturns a new version of the image that’s a mirror of the original image.\n- imageWithRenderingMode:\nReturns a new version of the image that uses the specified rendering mode.\n- resizableImageWithCapInsets:\nReturns a new version of the image with the specified cap insets.\n- resizableImageWithCapInsets:resizingMode:\nReturns a new version of the image with the specified cap insets and options.\n- imageWithoutBaseline\nCreates a copy of the current image object without any baseline information.\n- imageWithBaselineOffsetFromBottom:\nCreates a new image with a baseline at the specified offset from the bottom of the image.\nUIImageConfiguration\nA configuration object that contains the traits that the system uses when selecting the current image variant.\nUIImageSymbolConfiguration\nAn object that contains the specific font, size, style, and weight attributes to apply to a symbol image.\nRelated Documentation\nalignmentRectInsets\nThe alignment metadata for positioning the image during layout."
  },
  {
    "title": "lineLayoutPadding | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextattachment/3857585-linelayoutpadding",
    "html": "Discussion\n\nThe layout and rendering bounds X origin is inset by the padding value. This affects the relationship between the text attachment bounds and NSLayoutManager glyph metrics methods location(forGlyphAt:) and attachmentSize(forGlyphAt:). The default value is 0.0.\n\nSee Also\nDefining the attachment’s contents\nvar bounds: CGRect\nThe layout bounds of the text attachment’s graphical representation in the text coordinate system.\nvar contents: Data?\nThe contents for the text attachment.\nvar fileType: String?\nThe file type of the contents for the text attachment.\nvar image: UIImage?\nAn instance of the relevant image class that represents the contents of the text attachment object.\nvar fileWrapper: FileWrapper?\nThe text attachment’s file wrapper.\nvar allowsTextAttachmentView: Bool\nA Boolean value that determines whether the text attachment uses text attachment views.\nvar usesTextAttachmentView: Bool\nA Boolean value that indicates whether the text attachment uses text attachment views."
  },
  {
    "title": "intersects(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextrange/3801810-intersects",
    "html": "Parameters\ntextRange\n\nThe range used to compare against the current range to evaluate for differences.\n\nReturn Value\n\nReturns true if the ranges intersect.\n\nSee Also\nComparing text ranges\nfunc intersection(NSTextRange) -> Self?\nReturns the range, if any, where two text ranges intersect.\nfunc isEqual(to: NSTextRange) -> Bool\nCompares two text ranges.\nfunc union(NSTextRange) -> Self\nReturns a new text range by forming the union with the text range you provide."
  },
  {
    "title": "union(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextrange/3801813-union",
    "html": "Parameters\ntextRange\n\nThe range to use to create the union.\n\nReturn Value\n\nAn NSTextRange that represent the union of the two ranges.\n\nSee Also\nComparing text ranges\nfunc intersection(NSTextRange) -> Self?\nReturns the range, if any, where two text ranges intersect.\nfunc intersects(NSTextRange) -> Bool\nDetermines if two ranges intersect.\nfunc isEqual(to: NSTextRange) -> Bool\nCompares two text ranges."
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextrange/3801805-contains",
    "html": "Parameters\ntextRange\n\nAn NSTextRange.\n\nReturn Value\n\nReturns true if the range you provide is in the current range; otherwise false.\n\nSee Also\nFinding text within the text range\nfunc contains(NSTextLocation) -> Bool\nDetermines if the text location you specify is in the current text range."
  },
  {
    "title": "init(data:ofType:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextattachment/1508374-init",
    "html": "Parameters\ncontentData\n\nData to use for the text attachment contents. Can be nil.\n\nuti\n\nA uniform type identifier specifying the data type of the attachment contents. Can be nil.\n\nReturn Value\n\nA new NSTextAttachment object.\n\nDiscussion\n\nThis method is the designated initializer for the NSTextAttachment class on iOS.\n\nWhen either contentData or uti is nil, TextKit considers the receiver to be an attachment without document contents. In this case, the NSAttributedString external file writing methods try to save the value of the image property instead.\n\nSee Also\nInitializing a text attachment\ninit(fileWrapper: FileWrapper?)\nCreates a text attachment object to contain the specified file wrapper.\ninit(image: UIImage)\nCreates a text attachment object to contain the specified image."
  },
  {
    "title": "init(image:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextattachment/3327290-init",
    "html": "Parameters\nimage\n\nThe image for the attachment.\n\nReturn Value\n\nA new text attachment object initialized with the image.\n\nDiscussion\n\nAttachments created with this method automatically adapt to the surrounding font and color attributes in attributed strings.\n\nFor example, the following code creates a text attachment from the UIImage class using an SF symbol in a blue headline style and embeds it at the end of the NSMutableAttributedString class:\n\nlet content = NSMutableAttributedString(string: \"Open \")\nguard let lockImage = UIImage(systemName: \"lock\") else {\n    return\n}\nlet attributes: [NSAttributedString.Key: Any] = [\n    .foregroundColor: UIColor.blue,\n    .font: UIFont.preferredFont(forTextStyle: .headline)\n]\nlet lockSymbol = NSMutableAttributedString(\n    attachment: NSTextAttachment(image: lockImage)\n)\nlockSymbol.addAttributes(attributes, \n                         range: NSRange(location: 0, length: 1))\ncontent.insert(lockSymbol, at: 5)\n\n\n\n\nSee Also\nInitializing a text attachment\ninit(fileWrapper: FileWrapper?)\nCreates a text attachment object to contain the specified file wrapper.\ninit(data: Data?, ofType: String?)\nCreates a text attachment object with the specified data."
  },
  {
    "title": "bounds | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextattachment/1508394-bounds",
    "html": "Discussion\n\nThe bounds rectangle origin is at the current glyph location on the text baseline. The default value is CGRectZero.\n\nSee Also\nDefining the attachment’s contents\nvar contents: Data?\nThe contents for the text attachment.\nvar fileType: String?\nThe file type of the contents for the text attachment.\nvar image: UIImage?\nAn instance of the relevant image class that represents the contents of the text attachment object.\nvar fileWrapper: FileWrapper?\nThe text attachment’s file wrapper.\nvar allowsTextAttachmentView: Bool\nA Boolean value that determines whether the text attachment uses text attachment views.\nvar usesTextAttachmentView: Bool\nA Boolean value that indicates whether the text attachment uses text attachment views.\nvar lineLayoutPadding: CGFloat\nThe layout padding before and after the text attachment bounds."
  },
  {
    "title": "textAttachmentViewProviderClass(forFileType:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextattachment/3857587-textattachmentviewproviderclass",
    "html": "Parameters\nfileType\n\nA String that represents the file type.\n\nReturn Value\n\nThe text attachment view provider class, or nil if the there is no class for the specified file type.\n\nSee Also\nConvenience methods\nclass func registerViewProviderClass(AnyClass, forFileType: String)\nRegisters a specific file type with the attachment view provider."
  },
  {
    "title": "attachmentBounds(for:location:textContainer:proposedLineFragment:position:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextattachmentlayout/3857590-attachmentbounds",
    "html": "Required\n\nParameters\nattributes\n\nA dictionary of NSAttributedString.Key attributes.\n\nlocation\n\nAn NSTextLocation that indicates that start of the string.\n\ntextContainer\n\nThe NSTextContainer that contains the source text.\n\nproposedLineFragment\n\nA CGRect that describes the boundaries of the line fragment.\n\nposition\n\nA CGPoint inside proposedLineFragment.\n\nReturn Value\n\nReturns a CGRect that describes the boundaries of the attachment, or CGRectZero.\n\nDiscussion\n\nThe framework interprets the bounds origin to match position inside proposedLineFragment. The default NSTextAttachment implementation returns bounds if the value isn’t equivalent to CGRectZero; otherwise, it derives the bounds value from image.size. Conforming objects can implement more sophisticated logic for negotiating the frame size based on the available container space and proposed line fragment rectangle.\n\nSee Also\nDetermining the characteristics of an attachment\nfunc image(for: CGRect, attributes: [NSAttributedString.Key : Any], location: NSTextLocation, textContainer: NSTextContainer?) -> UIImage?\nReturns the image object rendered at the bounds and inside the text container you specify.\n\nRequired\n\nfunc viewProvider(for: UIView?, location: NSTextLocation, textContainer: NSTextContainer?) -> NSTextAttachmentViewProvider?\nReturns the text attachment view provider corresponding to the file type.\n\nRequired"
  },
  {
    "title": "alignment | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsparagraphstyle/1532321-alignment",
    "html": "Discussion\n\nThe framework displays natural text alignment as left or right alignment depending on the line sweep direction of the first script contained in the paragraph.\n\nSee Also\nAccessing style information\nenum NSTextAlignment\nConstants that specify text alignment.\nvar firstLineHeadIndent: CGFloat\nThe indentation of the first line of the paragraph.\nvar headIndent: CGFloat\nThe indentation of the paragraph’s lines other than the first.\nvar tailIndent: CGFloat\nThe trailing indentation of the paragraph.\nvar lineHeightMultiple: CGFloat\nThe line height multiple.\nvar maximumLineHeight: CGFloat\nThe paragraph’s maximum line height.\nvar minimumLineHeight: CGFloat\nThe paragraph’s minimum line height.\nvar lineSpacing: CGFloat\nThe distance in points between the bottom of one line fragment and the top of the next.\nvar paragraphSpacing: CGFloat\nDistance between the bottom of this paragraph and top of next.\nvar paragraphSpacingBefore: CGFloat\nThe distance between the paragraph’s top and the beginning of its text content."
  },
  {
    "title": "viewProvider(for:location:textContainer:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextattachmentlayout/3857592-viewprovider",
    "html": "Required\n\nParameters\nparentView\n\nThe parent view.\n\nlocation\n\nAn NSTextLocation that indicates that start of the string.\n\ntextContainer\n\nThe NSTextContainer that contains the source text.\n\nReturn Value\n\nAn NSTextAttachmentViewProvider.\n\nDiscussion\n\nThe default implementation queries the text attachment view provider class using the textAttachmentViewProviderClass(forFileType:) method of NSTextAttachment. When non-nil, it instantiates a view, then, fills properties declared in NSTextAttachmentViewProvider if implemented.\n\nSee Also\nDetermining the characteristics of an attachment\nfunc attachmentBounds(for: [NSAttributedString.Key : Any], location: NSTextLocation, textContainer: NSTextContainer?, proposedLineFragment: CGRect, position: CGPoint) -> CGRect\nReturns the layout bounds of the attachment you specify.\n\nRequired\n\nfunc image(for: CGRect, attributes: [NSAttributedString.Key : Any], location: NSTextLocation, textContainer: NSTextContainer?) -> UIImage?\nReturns the image object rendered at the bounds and inside the text container you specify.\n\nRequired"
  },
  {
    "title": "init(parent:textList:contents:markerAttributes:children:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlistelement/4018412-init",
    "html": "Parameters\nparentElement\n\nThe parent NSTextListElement of this element, if any.\n\ntextList\n\nThe NSTextList to add elements to.\n\ncontents\n\nAn NSAttributedString that contains the contents of the text list element.\n\nmarkerAttributes\n\nA dictionary of NSAttributedString.Key keys and IDs that describe the marker attributes.\n\nchildElements\n\nAn array of NSTextListElement elements.\n\nSee Also\nCreate a text list element\ninit?(children: [NSTextListElement], textList: NSTextList, nestingLevel: Int)\nCreates a text list element with the list elements and nesting level you provide.\ninit(contents: NSAttributedString, markerAttributes: [NSAttributedString.Key : Any]?, textList: NSTextList, children: [NSTextListElement]?)\nCreates a text list element with the list elements, nesting level, and marker attributes you provide."
  },
  {
    "title": "init(children:textList:nestingLevel:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlistelement/4018416-init",
    "html": "Parameters\nchildElements\n\nAn array of NSTextListElement elements.\n\ntextList\n\nThe NSTextList to add elements to.\n\nnestingLevel\n\nAn integer value that describes the level of nesting of these elements.\n\nSee Also\nCreate a text list element\ninit(contents: NSAttributedString, markerAttributes: [NSAttributedString.Key : Any]?, textList: NSTextList, children: [NSTextListElement]?)\nCreates a text list element with the list elements, nesting level, and marker attributes you provide.\ninit(parent: NSTextListElement?, textList: NSTextList, contents: NSAttributedString?, markerAttributes: [NSAttributedString.Key : Any]?, children: [NSTextListElement]?)\nCreates a text list element with the parent, list elements, nesting level, and marker attributes you provide."
  },
  {
    "title": "init(contents:markerAttributes:textList:children:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlistelement/4018417-init",
    "html": "Parameters\ncontents\n\nAn NSAttributedString that contains the contents of the text list element.\n\nmarkerAttributes\n\nA dictionary of NSAttributedString.Key keys and IDs that describe the marker attributes.\n\ntextList\n\nThe NSTextList to add elements to.\n\nchildElements\n\nAn array of NSTextListElement elements.\n\nSee Also\nCreate a text list element\ninit?(children: [NSTextListElement], textList: NSTextList, nestingLevel: Int)\nCreates a text list element with the list elements and nesting level you provide.\ninit(parent: NSTextListElement?, textList: NSTextList, contents: NSAttributedString?, markerAttributes: [NSAttributedString.Key : Any]?, children: [NSTextListElement]?)\nCreates a text list element with the parent, list elements, nesting level, and marker attributes you provide."
  },
  {
    "title": "textList | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlistelement/4018415-textlist",
    "html": "See Also\nAccessing the text elements\nvar parent: NSTextListElement?\nA text list element that refers to the enclosing text list element.\nvar childElements: [NSTextListElement]\nAn array that contains child text elements."
  },
  {
    "title": "resizableImageWithCapInsets:resizingMode: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/1624127-resizableimagewithcapinsets",
    "html": "Parameters\ncapInsets\n\nThe values to use for the cap insets.\n\nresizingMode\n\nThe mode with which the interior of the image is resized.\n\nReturn Value\n\nA new image object with the specified cap insets and resizing mode.\n\nDiscussion\n\nThis method is exactly the same as its counterpart resizableImageWithCapInsets: except that the resizing mode of the new image object can be explicitly declared. You should only call this method in place of its counterpart if you specifically want your image to be resized with the UIImageResizingModeStretch resizing mode.\n\nSee Also\nChanging the image attributes\n- imageWithConfiguration:\nReturns a new version of the current image, replacing the current configuration attributes with the specified attributes.\n- imageByApplyingSymbolConfiguration:\nReturns a new version of the current image, applying the specified configuration attributes on top of the current attributes.\n- imageFlippedForRightToLeftLayoutDirection\nReturns a new version of the current image that flips horizontally when it’s in a right-to-left layout.\n- imageWithHorizontallyFlippedOrientation\nReturns a new version of the image that’s a mirror of the original image.\n- imageWithRenderingMode:\nReturns a new version of the image that uses the specified rendering mode.\n- imageWithAlignmentRectInsets:\nReturns a new version of the image that uses the specified alignment insets.\n- resizableImageWithCapInsets:\nReturns a new version of the image with the specified cap insets.\n- imageWithoutBaseline\nCreates a copy of the current image object without any baseline information.\n- imageWithBaselineOffsetFromBottom:\nCreates a new image with a baseline at the specified offset from the bottom of the image.\nUIImageConfiguration\nA configuration object that contains the traits that the system uses when selecting the current image variant.\nUIImageSymbolConfiguration\nAn object that contains the specific font, size, style, and weight attributes to apply to a symbol image."
  },
  {
    "title": "parent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlistelement/4018414-parent",
    "html": "See Also\nAccessing the text elements\nvar textList: NSTextList\nThe value that represents the text list.\nvar childElements: [NSTextListElement]\nAn array that contains child text elements."
  },
  {
    "title": "attributedString | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlistelement/4018409-attributedstring",
    "html": "See Also\nAccessing the formatted string data\nvar contents: NSAttributedString?\nThe text list element contents without markers and formatting."
  },
  {
    "title": "textLayoutFragment(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3810012-textlayoutfragment",
    "html": "Parameters\nlocation\n\nThe starting location.\n\nReturn Value\n\nAn NSTextLayoutFragment.\n\nSee Also\nCausing layout generation\nvar textViewportLayoutController: NSTextViewportLayoutController\nReturns text viewport layout controller associated with the layout manager’s text container.\nfunc invalidateLayout(for: NSTextRange)\nInvalidates the layout information for specified text range.\nfunc textLayoutFragment(for: CGPoint) -> NSTextLayoutFragment?\nReturns the text layout fragment at the position you specify in the text container.\nfunc ensureLayout(for: CGRect)\nPerforms the layout for filling the bounds you specify inside the last text container.\nfunc ensureLayout(for: NSTextRange)\nPerforms the layout for specified text range.\nfunc enumerateTextLayoutFragments(from: NSTextLocation?, options: NSTextLayoutFragment.EnumerationOptions, using: (NSTextLayoutFragment) -> Bool) -> NSTextLocation?\nEnumerates the text layout fragments starting at the specified location.\nenum NSTextLayoutManager.SegmentType\nValues that describe the rendering of selection boundaries.\nstruct NSTextLayoutManager.SegmentOptions\nValues that describe where and how the framework extends segments of a selection."
  },
  {
    "title": "removeRenderingAttribute(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3810003-removerenderingattribute",
    "html": "Parameters\nrenderingAttribute\n\nThe NSAttributedString.Key attribute to remove\n\ntextRange\n\nThe range over which to remove the rendering attribute.\n\nSee Also\nAdjusting rendering\nclass var linkRenderingAttributes: [NSAttributedString.Key : Any]\nReturns the default set of attributes for rendering a link.\nfunc addRenderingAttribute(NSAttributedString.Key, value: Any?, for: NSTextRange)\nSets the rendering attribute for the value and range you specify.\nfunc enumerateRenderingAttributes(from: NSTextLocation, reverse: Bool, using: (NSTextLayoutManager, [NSAttributedString.Key : Any], NSTextRange) -> Bool)\nEnumerates the rendering attributes from a location you specify.\nfunc renderingAttributes(forLink: Any, at: NSTextLocation) -> [NSAttributedString.Key : Any]\nReturns a dictionary of rendering attributes for rendering a link.\nfunc invalidateRenderingAttributes(for: NSTextRange)\nInvalidates the rendering attributes of the specified text range.\nfunc setRenderingAttributes([NSAttributedString.Key : Any], for: NSTextRange)\nSets the rendering attributes for the range you specify."
  },
  {
    "title": "textViewportLayoutController | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3810016-textviewportlayoutcontroller",
    "html": "See Also\nCausing layout generation\nfunc invalidateLayout(for: NSTextRange)\nInvalidates the layout information for specified text range.\nfunc textLayoutFragment(for: NSTextLocation) -> NSTextLayoutFragment?\nReturns the text layout fragment from the document at the specified location.\nfunc textLayoutFragment(for: CGPoint) -> NSTextLayoutFragment?\nReturns the text layout fragment at the position you specify in the text container.\nfunc ensureLayout(for: CGRect)\nPerforms the layout for filling the bounds you specify inside the last text container.\nfunc ensureLayout(for: NSTextRange)\nPerforms the layout for specified text range.\nfunc enumerateTextLayoutFragments(from: NSTextLocation?, options: NSTextLayoutFragment.EnumerationOptions, using: (NSTextLayoutFragment) -> Bool) -> NSTextLocation?\nEnumerates the text layout fragments starting at the specified location.\nenum NSTextLayoutManager.SegmentType\nValues that describe the rendering of selection boundaries.\nstruct NSTextLayoutManager.SegmentOptions\nValues that describe where and how the framework extends segments of a selection."
  },
  {
    "title": "setRenderingAttributes(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3810009-setrenderingattributes",
    "html": "Parameters\nrenderingAttributes\n\nA dictionary of rendering attributes.\n\ntextRange\n\nThe text range over which to apply renderingAttributes.\n\nSee Also\nAdjusting rendering\nclass var linkRenderingAttributes: [NSAttributedString.Key : Any]\nReturns the default set of attributes for rendering a link.\nfunc addRenderingAttribute(NSAttributedString.Key, value: Any?, for: NSTextRange)\nSets the rendering attribute for the value and range you specify.\nfunc enumerateRenderingAttributes(from: NSTextLocation, reverse: Bool, using: (NSTextLayoutManager, [NSAttributedString.Key : Any], NSTextRange) -> Bool)\nEnumerates the rendering attributes from a location you specify.\nfunc renderingAttributes(forLink: Any, at: NSTextLocation) -> [NSAttributedString.Key : Any]\nReturns a dictionary of rendering attributes for rendering a link.\nfunc invalidateRenderingAttributes(for: NSTextRange)\nInvalidates the rendering attributes of the specified text range.\nfunc removeRenderingAttribute(NSAttributedString.Key, for: NSTextRange)\nRemoves the rendering attribute from the specified text range."
  },
  {
    "title": "invalidateRenderingAttributes(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3809999-invalidaterenderingattributes",
    "html": "Parameters\ntextRange\n\nThe range of the text to invalidate.\n\nSee Also\nAdjusting rendering\nclass var linkRenderingAttributes: [NSAttributedString.Key : Any]\nReturns the default set of attributes for rendering a link.\nfunc addRenderingAttribute(NSAttributedString.Key, value: Any?, for: NSTextRange)\nSets the rendering attribute for the value and range you specify.\nfunc enumerateRenderingAttributes(from: NSTextLocation, reverse: Bool, using: (NSTextLayoutManager, [NSAttributedString.Key : Any], NSTextRange) -> Bool)\nEnumerates the rendering attributes from a location you specify.\nfunc renderingAttributes(forLink: Any, at: NSTextLocation) -> [NSAttributedString.Key : Any]\nReturns a dictionary of rendering attributes for rendering a link.\nfunc removeRenderingAttribute(NSAttributedString.Key, for: NSTextRange)\nRemoves the rendering attribute from the specified text range.\nfunc setRenderingAttributes([NSAttributedString.Key : Any], for: NSTextRange)\nSets the rendering attributes for the range you specify."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3809996-init",
    "html": "See Also\nCreating a layout manager\ninit?(coder: NSCoder)\nCreates a new text layout manager with the coder you provide."
  },
  {
    "title": "renderingAttributesValidator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3810005-renderingattributesvalidator",
    "html": "Discussion\n\nThe validator uses setRenderingAttributes(_:for:) to fill the rendering attributes appropriate for the range inside textLayoutFragment.\n\nSee Also\nConfiguring global layout manager options\nvar layoutQueue: OperationQueue?\nThe queue that the framework dispatches layout operations on.\nvar usesFontLeading: Bool\nA Boolean value that controls whether the framework uses the leading information specified by the font when laying out text.\nvar usesHyphenation: Bool\nA Boolean values that controls whether the text layout manager attempts to hyphenate when wrapping lines.\nvar limitsLayoutForSuspiciousContents: Bool\nA Boolean value that controls internal security analysis for malicious inputs and activates defensive behaviors."
  },
  {
    "title": "textContentManager | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3810011-textcontentmanager",
    "html": "See Also\nAccessing the text storage\nvar textContainer: NSTextContainer?\nThe text container object that provides geometric information for the layout destination.\nvar textSelectionNavigation: NSTextSelectionNavigation\nReturns a text selection manager configured to have the text layout manager as its data source.\nvar textSelections: [NSTextSelection]\nAn array of text selections associated by the text layout manager.\nvar usageBoundsForTextContainer: CGRect\nReturns the usage bounds for the text container.\nfunc enumerateTextSegments(in: NSTextRange, type: NSTextLayoutManager.SegmentType, options: NSTextLayoutManager.SegmentOptions, using: (NSTextRange?, CGRect, CGFloat, NSTextContainer) -> Bool)\nEnumerates text segments of a specific type and in the text range you provide.\nfunc replace(NSTextContentManager)\nReplaces the current text content manager with a new one you provide.\nfunc replaceContents(in: NSTextRange, with: NSAttributedString)\nReplaces content at the location you specify with an attributed string you provide.\nfunc replaceContents(in: NSTextRange, with: [NSTextElement])\nReplaces content at the location you specify with the text elements string you provide."
  },
  {
    "title": "replaceContents(in:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutmanager/3810006-replacecontents",
    "html": "Parameters\nrange\n\nThe range of the content to replace.\n\nattributedString\n\nAn attribued string to replace the content at range.\n\nSee Also\nAccessing the text storage\nvar textContentManager: NSTextContentManager?\nReturns the text content manager associated with this text layout manager.\nvar textContainer: NSTextContainer?\nThe text container object that provides geometric information for the layout destination.\nvar textSelectionNavigation: NSTextSelectionNavigation\nReturns a text selection manager configured to have the text layout manager as its data source.\nvar textSelections: [NSTextSelection]\nAn array of text selections associated by the text layout manager.\nvar usageBoundsForTextContainer: CGRect\nReturns the usage bounds for the text container.\nfunc enumerateTextSegments(in: NSTextRange, type: NSTextLayoutManager.SegmentType, options: NSTextLayoutManager.SegmentOptions, using: (NSTextRange?, CGRect, CGFloat, NSTextContainer) -> Bool)\nEnumerates text segments of a specific type and in the text range you provide.\nfunc replace(NSTextContentManager)\nReplaces the current text content manager with a new one you provide.\nfunc replaceContents(in: NSTextRange, with: [NSTextElement])\nReplaces content at the location you specify with the text elements string you provide."
  },
  {
    "title": "viewportBounds | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextviewportlayoutcontroller/3824773-viewportbounds",
    "html": "See Also\nAccessing the viewport characteristics\nvar viewportRange: NSTextRange?\nReturns the text range of the current viewport layout.\nfunc adjustViewport(byVerticalOffset: CGFloat)\nAdjusts the viewport rect by the specified offset if needed.\nfunc layoutViewport()\nPerforms layout in the viewport.\nfunc relocateViewport(to: NSTextLocation) -> CGFloat\nRelocates the viewport to the location you specify."
  },
  {
    "title": "addImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/3294220-addimage",
    "html": "See Also\nGetting standard system images\nremoveImage\nThe standard image for indicating the removal of content.\nactionsImage\nThe standard image for indicating user-initiated actions.\ncheckmarkImage\nThe standard image for a checkmark on a filled-circle background.\nstrokedCheckmarkImage\nThe standard image for a checkmark on a tinted circle with a white-stroked border."
  },
  {
    "title": "viewportRange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextviewportlayoutcontroller/3824774-viewportrange",
    "html": "See Also\nAccessing the viewport characteristics\nvar viewportBounds: CGRect\nReturns the visible bounds of the view, plus the overdraw area.\nfunc adjustViewport(byVerticalOffset: CGFloat)\nAdjusts the viewport rect by the specified offset if needed.\nfunc layoutViewport()\nPerforms layout in the viewport.\nfunc relocateViewport(to: NSTextLocation) -> CGFloat\nRelocates the viewport to the location you specify."
  },
  {
    "title": "UIImageSymbolConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimagesymbolconfiguration",
    "html": "Overview\n\nSymbol image configuration objects include details such as the point size, scale, text style, weight, and font to apply to your symbol image. The system uses these details to determine which variant of the image to use and how to scale or style the image.\n\nUIImageSymbolConfiguration objects are immutable after you create them. If you use the configurationByApplyingConfiguration: method on the object, the new image attributes replace any previous attributes you supplied. After creating a symbol configuration object, assign it to the preferredSymbolConfiguration property of the UIImageView object you use to display the image. If you draw the image directly, use the imageWithConfiguration: method to create a new image that contains the new attributes.\n\nTopics\nCreating a symbol configuration\n+ configurationWithPointSize:\nCreates a configuration object with the specified point-size information.\n+ configurationWithPointSize:weight:\nCreates a configuration object with the specified point-size and weight information.\n+ configurationWithPointSize:weight:scale:\nCreates a configuration object with the specified point-size, weight, and scale information.\n+ configurationWithScale:\nCreates a configuration object with the specified scale information.\n+ configurationWithTextStyle:\nCreates a configuration object with the specified font text style information.\n+ configurationWithTextStyle:scale:\nCreates a configuration object with the specified font text style and scale information.\n+ configurationWithWeight:\nCreates a configuration object with the specified weight information.\n+ configurationWithFont:\nCreates a configuration object with the specified font information.\n+ configurationWithFont:scale:\nCreates a configuration object with the specified font and scale information.\nUIImageSymbolScale\nConstants that indicate which scale variant of a symbol image to use.\nUIImageSymbolWeight\nConstants that indicate which weight variant of a symbol image to use.\nCreating a color configuration\n+ configurationWithHierarchicalColor:\nCreates a color configuration with a color scheme that originates from one color.\n+ configurationWithPaletteColors:\nCreates a color configuration with a color scheme from a palette of multiple colors.\n+ configurationPreferringMulticolor\nCreates a color configuration that specifies that the symbol image uses its multicolor variant, if one exists.\n+ configurationPreferringMonochrome\nCreates a color configuration that specifies that the symbol image uses its monochrome variant.\nGetting an unspecified configuration\nunspecifiedConfiguration\nA symbol configuration object that contains unspecified values for all attributes.\nRemoving configuration attributes\n- configurationWithoutPointSizeAndWeight\nReturns a copy of the current symbol configuration object without point-size and weight information.\n- configurationWithoutScale\nReturns a copy of the current symbol configuration object without scale information.\n- configurationWithoutTextStyle\nReturns a copy of the current symbol configuration object without font text style information.\n- configurationWithoutWeight\nReturns a copy of the current symbol configuration object without weight information.\nComparing symbol image configurations\n- isEqualToConfiguration:\nReturns a Boolean value that indicates whether the configuration objects are equivalent.\nRelationships\nInherits From\nUIImageConfiguration\nSee Also\nRepresentations\nUIImage\nAn object that manages image data in your app.\nUIImageConfiguration\nA configuration object that contains the traits that the system uses when selecting the current image variant."
  },
  {
    "title": "leadingPadding | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutfragment/3852575-leadingpadding",
    "html": "Discussion\n\nThis is with respect to according to the primary writing direction of the paragraph and the start of the lines in the paragraph.\n\nSee Also\nDefining margins and padding\nvar bottomMargin: CGFloat\nThe amount of space reserved during paragraph layout between the bottom of the last line in the paragraph and the bottom of the text layout fragment.\nvar topMargin: CGFloat\nThe amount of space reserved during paragraph layout between the top of the text layout fragment and the top of the first line in the paragraph.\nvar trailingPadding: CGFloat\nThe amount of margin space reserved during paragraph layout between the end of the lines in the paragraph and the trailing edge of the text layout fragment."
  },
  {
    "title": "secondarySelectionLocation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselection/3801824-secondaryselectionlocation",
    "html": "Discussion\n\nSetting a non-nil location has a side effect of making isLogical to false.\n\nSee Also\nCharacteristics of a selection\nvar affinity: NSTextSelection.Affinity\nReturns the selection affinity of the text selection.\nenum NSTextSelection.Affinity\nValues that describe the visual location of the text cursor, or the direction of the non-anchored edge of the selection.\nvar anchorPositionOffset: CGFloat\nRepresents the anchor position offset from the beginning of a line fragment in the visual order for the initial tap or click location.\nvar granularity: NSTextSelection.Granularity\nThe granularity of the selection.\nenum NSTextSelection.Granularity\nValues that describe the different granularities available to make a selection.\nvar isLogical: Bool\nA Boolean value that indicates whether the framework interprets the selection as logical or visual.\nvar isTransient: Bool\nA Boolean value that indicates transient text selection during drag handling.\nprotocol NSTextLocation\nAn interface you implement that represents an abstract location inside your document’s content.\nvar textRanges: [NSTextRange]\nRepresents an array of noncontiguous logical ranges in the selection.\nvar typingAttributes: [NSAttributedString.Key : Any]\nThe template attributes the framework uses for characters that replace the contents of this selection."
  },
  {
    "title": "trailingPadding | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutfragment/3852577-trailingpadding",
    "html": "Discussion\n\nThis is with respect to the primary writing direction of the paragraph.\n\nSee Also\nDefining margins and padding\nvar bottomMargin: CGFloat\nThe amount of space reserved during paragraph layout between the bottom of the last line in the paragraph and the bottom of the text layout fragment.\nvar leadingPadding: CGFloat\nThe amount of margin space reserved during paragraph layout between the leading edge of the text layout fragment and the start of the lines in the paragraph.\nvar topMargin: CGFloat\nThe amount of space reserved during paragraph layout between the top of the text layout fragment and the top of the first line in the paragraph."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutfragment/3809965-init",
    "html": "Parameters\ncoder\n\nA coder that conforms to NSCoder.\n\nSee Also\nCreating a layout fragment\ninit(textElement: NSTextElement, range: NSTextRange?)\nCreate a new layout fragment using the provided text element and range."
  },
  {
    "title": "sourceApplication | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscene/connectionoptions/3238073-sourceapplication",
    "html": "Discussion\n\nIf the request originated from another app belonging to your team, UIKit places the bundle ID of that app in this property. If the team identifier of the originating app is different than the team identifier of the current app, this property is nil."
  },
  {
    "title": "contents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlistelement/4018411-contents",
    "html": "See Also\nAccessing the formatted string data\nvar attributedString: NSAttributedString\nAn attributed string that represents the string the framework displays for this element taking into account markers and the indentation level of the list element."
  },
  {
    "title": "compare(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlocation/3801801-compare",
    "html": "Required\n\nParameters\nlocation\n\nThe location to compare the current location to.\n\nReturn Value\n\nA ComparisonResult."
  },
  {
    "title": "cloudKitShareMetadata | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscene/connectionoptions/3238069-cloudkitsharemetadata",
    "html": "Discussion\n\nIf an invitation to share CloudKit data is available at scene-connection time, this property contains the metadata you use to accept that invitation. Use the information in the object to create and schedule a CKAcceptSharesOperation object. After your operation object finishes successfully, you can begin fetching records and incorporating the resulting data into your app."
  },
  {
    "title": "notificationResponse | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscene/connectionoptions/3238071-notificationresponse",
    "html": "Discussion\n\nWhen UIKit connects a scene in order to process a notification, it puts the response object in this property. Use the information in this object to configure your scene. If a person selected one of the notification’s actions, perform that action."
  },
  {
    "title": "urlContexts | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscene/connectionoptions/3238068-urlcontexts",
    "html": "Discussion\n\nAn empty set indicates that there are no URLs to open."
  },
  {
    "title": "systemImageNamed: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/3294233-systemimagenamed",
    "html": "Parameters\nname\n\nThe name of the system symbol image.\n\nReturn Value\n\nThe object containing the specified symbol image, or nil if no suitable image was found.\n\nDiscussion\n\nUse this method to retrieve system-defined symbol images. To retrieve a custom symbol image you store in an asset catalog, use the imageNamed: method instead.\n\nThis method checks the system caches for an image with the name you specify and returns the variant of that image that’s best suited for the main screen.\n\nIf a matching image object isn’t in the cache, this method creates the image from the specified system symbol image. The system may purge cached image data at any time to free up memory. Purging occurs only for unused images that are in the cache.\n\nTo look up the names of system symbol images, download the SF Symbols app from Apple Design Resources.\n\nSee Also\nLoading and caching images\nProviding images for different appearances\nSupply image resources appropriate for light and dark appearances and for high-contrast environments.\nConfiguring and displaying symbol images in your UI\nCreate scalable images that integrate with your app’s text, and adjust the appearance of those images dynamically.\nCreating custom symbol images for your app\nCreate, organize, and annotate symbol images using SF Symbols.\n+ imageNamed:inBundle:compatibleWithTraitCollection:\nCreates an image object using the named image asset that’s compatible with the specified trait collection.\n+ imageNamed:inBundle:withConfiguration:\nCreates an image by using the named image asset that’s compatible with the configuration you specify.\n+ imageNamed:inBundle:variableValue:withConfiguration:\nCreates an image by using the name, configuration, and variable value you specify.\n+ imageNamed:\nCreates an image object from the specified named asset.\n+ systemImageNamed:withConfiguration:\nCreates an image object that contains a system symbol image with the specified configuration.\n+ systemImageNamed:variableValue:withConfiguration:\nCreates an image object that contains a system symbol image with the configuration and variable value you specify.\n+ systemImageNamed:compatibleWithTraitCollection:\nCreates an image object that contains a system symbol image appropriate for the specified traits.\nBuilding High-Performance Lists and Collection Views\nImprove the performance of lists and collections in your app with prefetching and image preparation."
  },
  {
    "title": "imageByPreparingForDisplay | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/3750834-imagebypreparingfordisplay",
    "html": "Return Value\n\nA new version of the image object for display. If the system can’t decode the image, this method returns nil.\n\nDiscussion\n\nThe Animation Hitches instrument measures system performance for multiple stages of preparing views for display. It can show you the exact cause of an animation hitch, which appears to the user as an interruption or jump in an animation that should be smooth. If Animation Hitches indicates that decoding an image takes too long and causes hitches, use this method to move the decoding work to the background. For more information on using Instruments, see Instruments Help.\n\nAvoid using this method on the main thread unless you previously started preparing an image with prepareForDisplayWithCompletionHandler:. If you’re decoding many images, such as with a collection view, calling this method from a concurrent queue can degrade performance by demanding too many system threads. Use a serial queue instead.\n\nThis method returns a new image object for efficient display by an image view. Assign the image object created by this method to the image property of the image view. If UIImageView can render the image without decoding, this method returns a valid image without further processing. If the system can’t decode the image, such as an image created from a CIImage, the method returns nil.\n\nUIKit doesn’t associate the prepared image with the original, or with any related variants from an asset catalog. If your app environment dynamically changes display traits, listen for changes in the trait environment and prepare new images when the environment changes.\n\noverride func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {\n    guard let imageCell = cell as? ImageCell else {\n        fatalError(\"Expected `\\(ImageCell.self)` type for reuseIdentifier \\(reuseIdentifier). Check the configuration in Main.storyboard.\")\n    }\n    let item = models[indexPath.item]\n    if let image = preparedImageCache.object(forKey: item.id), imageCell.itemIdentifier == item.id {\n        // Use a cached prepared image.\n        imageCell.imageView.image = image\n    } else {\n        // If the data source didn't prefetch the cell, prepare the image on a serial dispatch queue.\n        serialQueue.async { [weak preparedImageCache, placeholderImage] in\n            item.loadAsset()\n            let preparedImage: UIImage = item.image.preparingForDisplay() ?? placeholderImage\n            preparedImageCache?.setObject(preparedImage, forKey: item.id)\n            DispatchQueue.main.async {\n                if imageCell.itemIdentifier == item.id {\n                    imageCell.imageView.image = preparedImage\n                }\n            }\n        }\n    }\n}\n\nSee Also\nLoading images for display\n- prepareForDisplayWithCompletionHandler:\nDecodes an image asynchronously and provides a new one for display in views and animations.\n- imageByPreparingThumbnailOfSize:\nReturns a new thumbnail image at the specified size.\n- prepareThumbnailOfSize:completionHandler:\nCreates a thumbnail image at the specified size asynchronously on a background thread."
  },
  {
    "title": "imageByPreparingThumbnailOfSize: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/3750835-imagebypreparingthumbnailofsize",
    "html": "Parameters\nsize\n\nThe desired size of the thumbnail.\n\nReturn Value\n\nA new thumbnail image. Returns nil if the original image isn’t backed by a CGImage or if the image data is corrupt or malformed.\n\nDiscussion\n\nWhen displaying an image in a UIImageView, you can use the view’s contentMode property to clip or scale the image automatically. But when the native image size is much larger than the bounds of the view, decoding the full size image creates unnecessary memory overhead. By creating a thumbnail image at a specified size with this method, you avoid the overhead of decoding the image at its full size.\n\n- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {\n    UICollectionViewCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:self.cellIdentifier forIndexPath:indexPath];\n    NSAssert([cell isKindOfClass:[ItemCell class]], @\"Unexpected type for cell. Check configuration.\\n\");\n    \n    Item *item = self.items[indexPath.row];\n    ItemCell *itemCell = (ItemCell *)cell;\n    itemCell.nameLabel.text = item.name;\n    UIImage *thumbnail = [item.image imageByPreparingThumbnailOfSize:self.thumbnailSize];\n    itemCell.thumbnailImageView.image = thumbnail;\n    return cell;\n}\n\n\nSee Also\nLoading images for display\n- imageByPreparingForDisplay\nDecodes an image synchronously and provides a new one for display in views and animations.\n- prepareForDisplayWithCompletionHandler:\nDecodes an image asynchronously and provides a new one for display in views and animations.\n- prepareThumbnailOfSize:completionHandler:\nCreates a thumbnail image at the specified size asynchronously on a background thread."
  },
  {
    "title": "initWithData:scale: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/1624109-initwithdata",
    "html": "Parameters\ndata\n\nThe data object containing the image data.\n\nscale\n\nThe scale factor to assume when interpreting the image data. Applying a scale factor of 1.0 results in an image whose size matches the pixel-based dimensions of the image. Applying a different scale factor changes the size of the image as reported by the size property.\n\nReturn Value\n\nAn initialized UIImage object, or nil if the method could not initialize the image from the specified data.\n\nDiscussion\n\nThe data in the data parameter must be formatted to match the file format of one of the system’s supported image types.\n\nSee Also\nCreating and initializing image objects\n+ imageWithContentsOfFile:\nCreates and returns an image object by loading the image data from the file at the specified path.\n+ imageWithData:\nCreates and returns an image object that uses the specified image data.\n+ imageWithData:scale:\nCreates and returns an image object that uses the specified image data and scale factor.\n+ imageWithCGImage:\nCreates and returns an image object representing the specified Quartz image.\n+ imageWithCGImage:scale:orientation:\nCreates and returns an image object with the specified scale and orientation factors.\n+ imageWithCIImage:\nCreates and returns an image object that contains a Core Image object.\n+ imageWithCIImage:scale:orientation:\nCreates and returns an image object based on a Core Image object and the specified attributes.\n- initWithContentsOfFile:\nInitializes and returns the image object with the contents of the specified file.\n- initWithData:\nInitializes and returns the image object with the specified data.\n- initWithCGImage:\nInitializes and returns the image object with the specified Quartz image reference.\n- initWithCGImage:scale:orientation:\nInitializes and returns an image object with the specified scale and orientation factors.\n- initWithCIImage:\nInitializes and returns an image object with the specified Core Image object.\n- initWithCIImage:scale:orientation:\nInitializes and returns an image object with the specified Core Image object and properties.\nUIImageReader\nUIImageReaderConfiguration\nThe properties that a reader uses to decode images."
  },
  {
    "title": "initWithData: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/1624106-initwithdata",
    "html": "Parameters\ndata\n\nThe data object containing the image data.\n\nReturn Value\n\nAn initialized UIImage object, or nil if the method could not initialize the image from the specified data.\n\nDiscussion\n\nThe data in the data parameter must be formatted to match the file format of one of the system’s supported image types.\n\nSee Also\nCreating and initializing image objects\n+ imageWithContentsOfFile:\nCreates and returns an image object by loading the image data from the file at the specified path.\n+ imageWithData:\nCreates and returns an image object that uses the specified image data.\n+ imageWithData:scale:\nCreates and returns an image object that uses the specified image data and scale factor.\n+ imageWithCGImage:\nCreates and returns an image object representing the specified Quartz image.\n+ imageWithCGImage:scale:orientation:\nCreates and returns an image object with the specified scale and orientation factors.\n+ imageWithCIImage:\nCreates and returns an image object that contains a Core Image object.\n+ imageWithCIImage:scale:orientation:\nCreates and returns an image object based on a Core Image object and the specified attributes.\n- initWithContentsOfFile:\nInitializes and returns the image object with the contents of the specified file.\n- initWithData:scale:\nInitializes and returns the image object with the specified data and scale factor.\n- initWithCGImage:\nInitializes and returns the image object with the specified Quartz image reference.\n- initWithCGImage:scale:orientation:\nInitializes and returns an image object with the specified scale and orientation factors.\n- initWithCIImage:\nInitializes and returns an image object with the specified Core Image object.\n- initWithCIImage:scale:orientation:\nInitializes and returns an image object with the specified Core Image object and properties.\nUIImageReader\nUIImageReaderConfiguration\nThe properties that a reader uses to decode images."
  },
  {
    "title": "imageWithData:scale: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/1624099-imagewithdata",
    "html": "Parameters\ndata\n\nThe image data. This can be data from a file or data you create programmatically.\n\nscale\n\nThe scale factor to use when interpreting the image data. Specifying a scale factor of 1.0 results in an image whose size matches the pixel-based dimensions of the image. Applying a different scale factor changes the size of the image as reported by the size property.\n\nReturn Value\n\nA new image object for the specified data, or nil if the method could not initialize the image from the specified data.\n\nDiscussion\n\nThis method does not cache the image object.\n\nSee Also\nCreating and initializing image objects\n+ imageWithContentsOfFile:\nCreates and returns an image object by loading the image data from the file at the specified path.\n+ imageWithData:\nCreates and returns an image object that uses the specified image data.\n+ imageWithCGImage:\nCreates and returns an image object representing the specified Quartz image.\n+ imageWithCGImage:scale:orientation:\nCreates and returns an image object with the specified scale and orientation factors.\n+ imageWithCIImage:\nCreates and returns an image object that contains a Core Image object.\n+ imageWithCIImage:scale:orientation:\nCreates and returns an image object based on a Core Image object and the specified attributes.\n- initWithContentsOfFile:\nInitializes and returns the image object with the contents of the specified file.\n- initWithData:\nInitializes and returns the image object with the specified data.\n- initWithData:scale:\nInitializes and returns the image object with the specified data and scale factor.\n- initWithCGImage:\nInitializes and returns the image object with the specified Quartz image reference.\n- initWithCGImage:scale:orientation:\nInitializes and returns an image object with the specified scale and orientation factors.\n- initWithCIImage:\nInitializes and returns an image object with the specified Core Image object.\n- initWithCIImage:scale:orientation:\nInitializes and returns an image object with the specified Core Image object and properties.\nUIImageReader\nUIImageReaderConfiguration\nThe properties that a reader uses to decode images."
  },
  {
    "title": "imageWithCGImage: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/1624126-imagewithcgimage",
    "html": "Parameters\ncgImage\n\nThe Quartz image object.\n\nReturn Value\n\nA new image object for the specified Quartz image, or nil if the method could not initialize the image from the specified image reference.\n\nDiscussion\n\nThis method does not cache the image object. You can use the methods of the Core Graphics framework to create a Quartz image reference.\n\nSee Also\nCreating and initializing image objects\n+ imageWithContentsOfFile:\nCreates and returns an image object by loading the image data from the file at the specified path.\n+ imageWithData:\nCreates and returns an image object that uses the specified image data.\n+ imageWithData:scale:\nCreates and returns an image object that uses the specified image data and scale factor.\n+ imageWithCGImage:scale:orientation:\nCreates and returns an image object with the specified scale and orientation factors.\n+ imageWithCIImage:\nCreates and returns an image object that contains a Core Image object.\n+ imageWithCIImage:scale:orientation:\nCreates and returns an image object based on a Core Image object and the specified attributes.\n- initWithContentsOfFile:\nInitializes and returns the image object with the contents of the specified file.\n- initWithData:\nInitializes and returns the image object with the specified data.\n- initWithData:scale:\nInitializes and returns the image object with the specified data and scale factor.\n- initWithCGImage:\nInitializes and returns the image object with the specified Quartz image reference.\n- initWithCGImage:scale:orientation:\nInitializes and returns an image object with the specified scale and orientation factors.\n- initWithCIImage:\nInitializes and returns an image object with the specified Core Image object.\n- initWithCIImage:scale:orientation:\nInitializes and returns an image object with the specified Core Image object and properties.\nUIImageReader\nUIImageReaderConfiguration\nThe properties that a reader uses to decode images."
  },
  {
    "title": "initWithCGImage: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/1624090-initwithcgimage",
    "html": "Parameters\nCGImage\n\nA Quartz image reference.\n\nReturn Value\n\nAn initialized UIImage object, or nil if the method could not initialize the image from the specified data.\n\nSee Also\nCreating and initializing image objects\n+ imageWithContentsOfFile:\nCreates and returns an image object by loading the image data from the file at the specified path.\n+ imageWithData:\nCreates and returns an image object that uses the specified image data.\n+ imageWithData:scale:\nCreates and returns an image object that uses the specified image data and scale factor.\n+ imageWithCGImage:\nCreates and returns an image object representing the specified Quartz image.\n+ imageWithCGImage:scale:orientation:\nCreates and returns an image object with the specified scale and orientation factors.\n+ imageWithCIImage:\nCreates and returns an image object that contains a Core Image object.\n+ imageWithCIImage:scale:orientation:\nCreates and returns an image object based on a Core Image object and the specified attributes.\n- initWithContentsOfFile:\nInitializes and returns the image object with the contents of the specified file.\n- initWithData:\nInitializes and returns the image object with the specified data.\n- initWithData:scale:\nInitializes and returns the image object with the specified data and scale factor.\n- initWithCGImage:scale:orientation:\nInitializes and returns an image object with the specified scale and orientation factors.\n- initWithCIImage:\nInitializes and returns an image object with the specified Core Image object.\n- initWithCIImage:scale:orientation:\nInitializes and returns an image object with the specified Core Image object and properties.\nUIImageReader\nUIImageReaderConfiguration\nThe properties that a reader uses to decode images."
  },
  {
    "title": "imageWithCIImage: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/1624111-imagewithciimage",
    "html": "Parameters\nciImage\n\nThe Core Image object to encapsulate.\n\nReturn Value\n\nA new image object.\n\nSee Also\nCreating and initializing image objects\n+ imageWithContentsOfFile:\nCreates and returns an image object by loading the image data from the file at the specified path.\n+ imageWithData:\nCreates and returns an image object that uses the specified image data.\n+ imageWithData:scale:\nCreates and returns an image object that uses the specified image data and scale factor.\n+ imageWithCGImage:\nCreates and returns an image object representing the specified Quartz image.\n+ imageWithCGImage:scale:orientation:\nCreates and returns an image object with the specified scale and orientation factors.\n+ imageWithCIImage:scale:orientation:\nCreates and returns an image object based on a Core Image object and the specified attributes.\n- initWithContentsOfFile:\nInitializes and returns the image object with the contents of the specified file.\n- initWithData:\nInitializes and returns the image object with the specified data.\n- initWithData:scale:\nInitializes and returns the image object with the specified data and scale factor.\n- initWithCGImage:\nInitializes and returns the image object with the specified Quartz image reference.\n- initWithCGImage:scale:orientation:\nInitializes and returns an image object with the specified scale and orientation factors.\n- initWithCIImage:\nInitializes and returns an image object with the specified Core Image object.\n- initWithCIImage:scale:orientation:\nInitializes and returns an image object with the specified Core Image object and properties.\nUIImageReader\nUIImageReaderConfiguration\nThe properties that a reader uses to decode images."
  },
  {
    "title": "imageWithCIImage:scale:orientation: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/1624152-imagewithciimage",
    "html": "Parameters\nciImage\n\nThe Core Image object to encapsulate.\n\nscale\n\nThe scale factor to use when interpreting the image data. Specifying a scale factor of 1.0 results in an image whose size matches the pixel-based dimensions of the image. Applying a different scale factor changes the size of the image as reported by the size property.\n\norientation\n\nThe orientation of the image data. You can use this parameter to specify any rotation factors applied to the image.\n\nReturn Value\n\nA new image object.\n\nSee Also\nCreating and initializing image objects\n+ imageWithContentsOfFile:\nCreates and returns an image object by loading the image data from the file at the specified path.\n+ imageWithData:\nCreates and returns an image object that uses the specified image data.\n+ imageWithData:scale:\nCreates and returns an image object that uses the specified image data and scale factor.\n+ imageWithCGImage:\nCreates and returns an image object representing the specified Quartz image.\n+ imageWithCGImage:scale:orientation:\nCreates and returns an image object with the specified scale and orientation factors.\n+ imageWithCIImage:\nCreates and returns an image object that contains a Core Image object.\n- initWithContentsOfFile:\nInitializes and returns the image object with the contents of the specified file.\n- initWithData:\nInitializes and returns the image object with the specified data.\n- initWithData:scale:\nInitializes and returns the image object with the specified data and scale factor.\n- initWithCGImage:\nInitializes and returns the image object with the specified Quartz image reference.\n- initWithCGImage:scale:orientation:\nInitializes and returns an image object with the specified scale and orientation factors.\n- initWithCIImage:\nInitializes and returns an image object with the specified Core Image object.\n- initWithCIImage:scale:orientation:\nInitializes and returns an image object with the specified Core Image object and properties.\nUIImageReader\nUIImageReaderConfiguration\nThe properties that a reader uses to decode images."
  },
  {
    "title": "initWithContentsOfFile: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/1624112-initwithcontentsoffile",
    "html": "Parameters\npath\n\nThe path to the file. This path should include the filename extension that identifies the type of the image data.\n\nReturn Value\n\nAn initialized UIImage object, or nil if the method could not find the file or initialize the image from its contents.\n\nDiscussion\n\nThis method loads the image data into memory and marks it as purgeable. If the data is purged and needs to be reloaded, the image object loads that data again from the specified path.\n\nSee Also\nCreating and initializing image objects\n+ imageWithContentsOfFile:\nCreates and returns an image object by loading the image data from the file at the specified path.\n+ imageWithData:\nCreates and returns an image object that uses the specified image data.\n+ imageWithData:scale:\nCreates and returns an image object that uses the specified image data and scale factor.\n+ imageWithCGImage:\nCreates and returns an image object representing the specified Quartz image.\n+ imageWithCGImage:scale:orientation:\nCreates and returns an image object with the specified scale and orientation factors.\n+ imageWithCIImage:\nCreates and returns an image object that contains a Core Image object.\n+ imageWithCIImage:scale:orientation:\nCreates and returns an image object based on a Core Image object and the specified attributes.\n- initWithData:\nInitializes and returns the image object with the specified data.\n- initWithData:scale:\nInitializes and returns the image object with the specified data and scale factor.\n- initWithCGImage:\nInitializes and returns the image object with the specified Quartz image reference.\n- initWithCGImage:scale:orientation:\nInitializes and returns an image object with the specified scale and orientation factors.\n- initWithCIImage:\nInitializes and returns an image object with the specified Core Image object.\n- initWithCIImage:scale:orientation:\nInitializes and returns an image object with the specified Core Image object and properties.\nUIImageReader\nUIImageReaderConfiguration\nThe properties that a reader uses to decode images."
  },
  {
    "title": "initWithCIImage: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/1624114-initwithciimage",
    "html": "Parameters\nciImage\n\nThe Core Image object.\n\nReturn Value\n\nAn initialized UIImage object. In Objective-C, this method returns nil if the ciImage parameter is nil.\n\nSee Also\nCreating and initializing image objects\n+ imageWithContentsOfFile:\nCreates and returns an image object by loading the image data from the file at the specified path.\n+ imageWithData:\nCreates and returns an image object that uses the specified image data.\n+ imageWithData:scale:\nCreates and returns an image object that uses the specified image data and scale factor.\n+ imageWithCGImage:\nCreates and returns an image object representing the specified Quartz image.\n+ imageWithCGImage:scale:orientation:\nCreates and returns an image object with the specified scale and orientation factors.\n+ imageWithCIImage:\nCreates and returns an image object that contains a Core Image object.\n+ imageWithCIImage:scale:orientation:\nCreates and returns an image object based on a Core Image object and the specified attributes.\n- initWithContentsOfFile:\nInitializes and returns the image object with the contents of the specified file.\n- initWithData:\nInitializes and returns the image object with the specified data.\n- initWithData:scale:\nInitializes and returns the image object with the specified data and scale factor.\n- initWithCGImage:\nInitializes and returns the image object with the specified Quartz image reference.\n- initWithCGImage:scale:orientation:\nInitializes and returns an image object with the specified scale and orientation factors.\n- initWithCIImage:scale:orientation:\nInitializes and returns an image object with the specified Core Image object and properties.\nUIImageReader\nUIImageReaderConfiguration\nThe properties that a reader uses to decode images."
  },
  {
    "title": "preferredPresentationStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscene/activationrequestoptions/3750934-preferredpresentationstyle",
    "html": "Deprecated\n\nUse placement instead.\n\nDiscussion\n\nThe presentation style determines how the system displays the new window scene relative to other scenes in the workspace. The default style is UIWindowScene.PresentationStyle.automatic."
  },
  {
    "title": "animatedImageWithImages:duration: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/1624149-animatedimagewithimages",
    "html": "Parameters\nimages\n\nAn array of UIImage objects.\n\nduration\n\nThe duration of the animation.\n\nReturn Value\n\nA new image object.\n\nDiscussion\n\nAll images included in the animated image should share the same size and scale.\n\nSee Also\nCreating animated images\n+ animatedImageNamed:duration:\nCreates and returns an animated image.\n+ animatedResizableImageNamed:capInsets:duration:\nCreates and returns an animated image with end caps.\n+ animatedResizableImageNamed:capInsets:resizingMode:duration:\nCreates and returns an animated image with end caps and a specific resizing mode."
  },
  {
    "title": "imageWithConfiguration: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/3294228-imagewithconfiguration",
    "html": "Parameters\nconfiguration\n\nThe new configuration attributes to associate with the image.\n\nReturn Value\n\nA new version of the image object that contains the specified configuration details.\n\nDiscussion\n\nThis method creates a new image object, replacing the image's current configuration with the values specified in the configuration parameter.\n\nSee Also\nChanging the image attributes\n- imageByApplyingSymbolConfiguration:\nReturns a new version of the current image, applying the specified configuration attributes on top of the current attributes.\n- imageFlippedForRightToLeftLayoutDirection\nReturns a new version of the current image that flips horizontally when it’s in a right-to-left layout.\n- imageWithHorizontallyFlippedOrientation\nReturns a new version of the image that’s a mirror of the original image.\n- imageWithRenderingMode:\nReturns a new version of the image that uses the specified rendering mode.\n- imageWithAlignmentRectInsets:\nReturns a new version of the image that uses the specified alignment insets.\n- resizableImageWithCapInsets:\nReturns a new version of the image with the specified cap insets.\n- resizableImageWithCapInsets:resizingMode:\nReturns a new version of the image with the specified cap insets and options.\n- imageWithoutBaseline\nCreates a copy of the current image object without any baseline information.\n- imageWithBaselineOffsetFromBottom:\nCreates a new image with a baseline at the specified offset from the bottom of the image.\nUIImageConfiguration\nA configuration object that contains the traits that the system uses when selecting the current image variant.\nUIImageSymbolConfiguration\nAn object that contains the specific font, size, style, and weight attributes to apply to a symbol image."
  },
  {
    "title": "imageWithHorizontallyFlippedOrientation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/2113668-imagewithhorizontallyflippedorie",
    "html": "Return Value\n\nThe new UIImage object.\n\nDiscussion\n\nThe returned image's imageOrientation property contains the mirrored version of the original image's orientation. For example, if the original orientation is UIImageOrientationLeft, the new orientation is UIImageOrientationLeftMirrored. This method does not affect the value of the flipsForRightToLeftLayoutDirection property.\n\nSee Also\nChanging the image attributes\n- imageWithConfiguration:\nReturns a new version of the current image, replacing the current configuration attributes with the specified attributes.\n- imageByApplyingSymbolConfiguration:\nReturns a new version of the current image, applying the specified configuration attributes on top of the current attributes.\n- imageFlippedForRightToLeftLayoutDirection\nReturns a new version of the current image that flips horizontally when it’s in a right-to-left layout.\n- imageWithRenderingMode:\nReturns a new version of the image that uses the specified rendering mode.\n- imageWithAlignmentRectInsets:\nReturns a new version of the image that uses the specified alignment insets.\n- resizableImageWithCapInsets:\nReturns a new version of the image with the specified cap insets.\n- resizableImageWithCapInsets:resizingMode:\nReturns a new version of the image with the specified cap insets and options.\n- imageWithoutBaseline\nCreates a copy of the current image object without any baseline information.\n- imageWithBaselineOffsetFromBottom:\nCreates a new image with a baseline at the specified offset from the bottom of the image.\nUIImageConfiguration\nA configuration object that contains the traits that the system uses when selecting the current image variant.\nUIImageSymbolConfiguration\nAn object that contains the specific font, size, style, and weight attributes to apply to a symbol image."
  },
  {
    "title": "imageByApplyingSymbolConfiguration: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/3294225-imagebyapplyingsymbolconfigurati",
    "html": "Parameters\nconfiguration\n\nThe configuration attributes to apply on top of the existing attributes. Values in this object take precedence over the image's current configuration values.\n\nReturn Value\n\nA new version of the image object that contains the merged configuration details.\n\nDiscussion\n\nThis method creates a new image object, merging the traits of configuration with the new image's traits. During the merge, this method gives precedence to explicitly set values in the configuration parameter. This method then replaces the current image-related attributes with the attributes in configuration. If an attribute in configuration contains an unspecified value, this method leaves the current image's setting intact.\n\nSee Also\nChanging the image attributes\n- imageWithConfiguration:\nReturns a new version of the current image, replacing the current configuration attributes with the specified attributes.\n- imageFlippedForRightToLeftLayoutDirection\nReturns a new version of the current image that flips horizontally when it’s in a right-to-left layout.\n- imageWithHorizontallyFlippedOrientation\nReturns a new version of the image that’s a mirror of the original image.\n- imageWithRenderingMode:\nReturns a new version of the image that uses the specified rendering mode.\n- imageWithAlignmentRectInsets:\nReturns a new version of the image that uses the specified alignment insets.\n- resizableImageWithCapInsets:\nReturns a new version of the image with the specified cap insets.\n- resizableImageWithCapInsets:resizingMode:\nReturns a new version of the image with the specified cap insets and options.\n- imageWithoutBaseline\nCreates a copy of the current image object without any baseline information.\n- imageWithBaselineOffsetFromBottom:\nCreates a new image with a baseline at the specified offset from the bottom of the image.\nUIImageConfiguration\nA configuration object that contains the traits that the system uses when selecting the current image variant.\nUIImageSymbolConfiguration\nAn object that contains the specific font, size, style, and weight attributes to apply to a symbol image."
  },
  {
    "title": "imageWithRenderingMode: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/1624153-imagewithrenderingmode",
    "html": "Parameters\nrenderingMode\n\nThe rendering mode to use for the new image.\n\nReturn Value\n\nA new image object with the specified rendering mode.\n\nSee Also\nChanging the image attributes\n- imageWithConfiguration:\nReturns a new version of the current image, replacing the current configuration attributes with the specified attributes.\n- imageByApplyingSymbolConfiguration:\nReturns a new version of the current image, applying the specified configuration attributes on top of the current attributes.\n- imageFlippedForRightToLeftLayoutDirection\nReturns a new version of the current image that flips horizontally when it’s in a right-to-left layout.\n- imageWithHorizontallyFlippedOrientation\nReturns a new version of the image that’s a mirror of the original image.\n- imageWithAlignmentRectInsets:\nReturns a new version of the image that uses the specified alignment insets.\n- resizableImageWithCapInsets:\nReturns a new version of the image with the specified cap insets.\n- resizableImageWithCapInsets:resizingMode:\nReturns a new version of the image with the specified cap insets and options.\n- imageWithoutBaseline\nCreates a copy of the current image object without any baseline information.\n- imageWithBaselineOffsetFromBottom:\nCreates a new image with a baseline at the specified offset from the bottom of the image.\nUIImageConfiguration\nA configuration object that contains the traits that the system uses when selecting the current image variant.\nUIImageSymbolConfiguration\nAn object that contains the specific font, size, style, and weight attributes to apply to a symbol image.\nRelated Documentation\nrenderingMode\nA setting that determines how the app renders an image."
  },
  {
    "title": "UIWindowScenePlacement | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowsceneplacement",
    "html": "Topics\nPositioning windows\nstatic func prominent() -> Self\nCreates a placement that indicates the system should present the window more prominently than others in the space.\nAvailable when Self is UIWindowSceneProminentPlacement.\nstatic func standard() -> Self\nCreates a placement that indicates the system should present the window using the default style of the system in the space.\nAvailable when Self is UIWindowSceneStandardPlacement.\nRelationships\nInherits From\nHashable\nConforming Types\nUIWindowSceneProminentPlacement\nUIWindowSceneStandardPlacement\nSee Also\nPositioning windows\nvar placement: (UIWindowScenePlacement)?\nThe placement you prefer when the system activates the window scene.\nstruct UIWindowSceneProminentPlacement\nA placement that indicates the system should present the window more prominently than others in the space.\nstruct UIWindowSceneStandardPlacement\nA placement that indicates the system should present the window using the default style of the system in the space."
  },
  {
    "title": "placement | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscene/activationrequestoptions/4176655-placement",
    "html": "Discussion\n\nProvide a scene placement to influence how the system positions the scene on activation. Set the value to nil to indicate that the system should determine the most appropriate placement.\n\nSee Also\nPositioning windows\nprotocol UIWindowScenePlacement\nThe placement of a window scene in the workspace.\nstruct UIWindowSceneProminentPlacement\nA placement that indicates the system should present the window more prominently than others in the space.\nstruct UIWindowSceneStandardPlacement\nA placement that indicates the system should present the window using the default style of the system in the space."
  },
  {
    "title": "allowsTextAttachmentView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextattachment/3857584-allowstextattachmentview",
    "html": "Discussion\n\nWhen true, the text attachment tries to use a text attachment view returned by viewProvider(for:location:textContainer:). Default is true.\n\nSee Also\nDefining the attachment’s contents\nvar bounds: CGRect\nThe layout bounds of the text attachment’s graphical representation in the text coordinate system.\nvar contents: Data?\nThe contents for the text attachment.\nvar fileType: String?\nThe file type of the contents for the text attachment.\nvar image: UIImage?\nAn instance of the relevant image class that represents the contents of the text attachment object.\nvar fileWrapper: FileWrapper?\nThe text attachment’s file wrapper.\nvar usesTextAttachmentView: Bool\nA Boolean value that indicates whether the text attachment uses text attachment views.\nvar lineLayoutPadding: CGFloat\nThe layout padding before and after the text attachment bounds."
  },
  {
    "title": "fileType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextattachment/1508416-filetype",
    "html": "Discussion\n\nModifying this property has the side effect of invalidating the image property.\n\nSee Also\nDefining the attachment’s contents\nvar bounds: CGRect\nThe layout bounds of the text attachment’s graphical representation in the text coordinate system.\nvar contents: Data?\nThe contents for the text attachment.\nvar image: UIImage?\nAn instance of the relevant image class that represents the contents of the text attachment object.\nvar fileWrapper: FileWrapper?\nThe text attachment’s file wrapper.\nvar allowsTextAttachmentView: Bool\nA Boolean value that determines whether the text attachment uses text attachment views.\nvar usesTextAttachmentView: Bool\nA Boolean value that indicates whether the text attachment uses text attachment views.\nvar lineLayoutPadding: CGFloat\nThe layout padding before and after the text attachment bounds."
  },
  {
    "title": "usesTextAttachmentView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextattachment/3857588-usestextattachmentview",
    "html": "See Also\nDefining the attachment’s contents\nvar bounds: CGRect\nThe layout bounds of the text attachment’s graphical representation in the text coordinate system.\nvar contents: Data?\nThe contents for the text attachment.\nvar fileType: String?\nThe file type of the contents for the text attachment.\nvar image: UIImage?\nAn instance of the relevant image class that represents the contents of the text attachment object.\nvar fileWrapper: FileWrapper?\nThe text attachment’s file wrapper.\nvar allowsTextAttachmentView: Bool\nA Boolean value that determines whether the text attachment uses text attachment views.\nvar lineLayoutPadding: CGFloat\nThe layout padding before and after the text attachment bounds."
  },
  {
    "title": "image | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextattachment/1508378-image",
    "html": "Discussion\n\nFor details about using the UIImage class to create text attachments that automatically adjust to surrounding font and color attributes, see the init(image:) initializer.\n\nSee Also\nDefining the attachment’s contents\nvar bounds: CGRect\nThe layout bounds of the text attachment’s graphical representation in the text coordinate system.\nvar contents: Data?\nThe contents for the text attachment.\nvar fileType: String?\nThe file type of the contents for the text attachment.\nvar fileWrapper: FileWrapper?\nThe text attachment’s file wrapper.\nvar allowsTextAttachmentView: Bool\nA Boolean value that determines whether the text attachment uses text attachment views.\nvar usesTextAttachmentView: Bool\nA Boolean value that indicates whether the text attachment uses text attachment views.\nvar lineLayoutPadding: CGFloat\nThe layout padding before and after the text attachment bounds."
  },
  {
    "title": "Attachment Character | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextattachment/1508411-attachment_character",
    "html": "Topics\nConstants\nclass var character: Int\nSpecifies a character that denotes an attachment."
  },
  {
    "title": "contents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextattachment/1508401-contents",
    "html": "Discussion\n\nModifying this property has the side effect of invalidating the image property.\n\nSee Also\nDefining the attachment’s contents\nvar bounds: CGRect\nThe layout bounds of the text attachment’s graphical representation in the text coordinate system.\nvar fileType: String?\nThe file type of the contents for the text attachment.\nvar image: UIImage?\nAn instance of the relevant image class that represents the contents of the text attachment object.\nvar fileWrapper: FileWrapper?\nThe text attachment’s file wrapper.\nvar allowsTextAttachmentView: Bool\nA Boolean value that determines whether the text attachment uses text attachment views.\nvar usesTextAttachmentView: Bool\nA Boolean value that indicates whether the text attachment uses text attachment views.\nvar lineLayoutPadding: CGFloat\nThe layout padding before and after the text attachment bounds."
  },
  {
    "title": "fileWrapper | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextattachment/1508398-filewrapper",
    "html": "Discussion\n\nThe file wrapper holds the contents of the attached file. In iOS, modifying this property has a side effect of invalidating the image, contents, and fileType properties.\n\nSee Also\nDefining the attachment’s contents\nvar bounds: CGRect\nThe layout bounds of the text attachment’s graphical representation in the text coordinate system.\nvar contents: Data?\nThe contents for the text attachment.\nvar fileType: String?\nThe file type of the contents for the text attachment.\nvar image: UIImage?\nAn instance of the relevant image class that represents the contents of the text attachment object.\nvar allowsTextAttachmentView: Bool\nA Boolean value that determines whether the text attachment uses text attachment views.\nvar usesTextAttachmentView: Bool\nA Boolean value that indicates whether the text attachment uses text attachment views.\nvar lineLayoutPadding: CGFloat\nThe layout padding before and after the text attachment bounds."
  },
  {
    "title": "draw(at:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutfragment/3824748-draw",
    "html": "Parameters\nrenderingOrigin\n\nThe origin as a CGPoint.\n\nctx\n\nThe rendering context.\n\nSee Also\nDrawing the fragment and attachments\nvar layoutFragmentFrame: CGRect\nThe rectangle the framework uses for tiling the layout fragment inside the target layout coordinate system.\nvar renderingSurfaceBounds: CGRect\nThe bounds defining the area required for rendering the contents.\nfunc invalidateLayout()\nInvalidates any layout information associated with the text layout fragment.\nvar textAttachmentViewProviders: [NSTextAttachmentViewProvider]\nThe attachment view provider associated with the text layout fragment.\nfunc frameForTextAttachment(at: NSTextLocation) -> CGRect\nReturns the frame in the text layout fragment coordinate system for the attachment at the location you specify."
  },
  {
    "title": "adjustViewport(byVerticalOffset:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextviewportlayoutcontroller/3852589-adjustviewport",
    "html": "Parameters\nverticalOffset\n\nA CGFloat that represents the offset amount to apply to the viewport.\n\nSee Also\nAccessing the viewport characteristics\nvar viewportBounds: CGRect\nReturns the visible bounds of the view, plus the overdraw area.\nvar viewportRange: NSTextRange?\nReturns the text range of the current viewport layout.\nfunc layoutViewport()\nPerforms layout in the viewport.\nfunc relocateViewport(to: NSTextLocation) -> CGFloat\nRelocates the viewport to the location you specify."
  },
  {
    "title": "UIImageReader.Configuration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimagereader/configuration",
    "html": "Topics\nCreating the configuration\ninit()\nCreates a new instance of the image reader configuration.\nConfiguration properties\nvar prefersHighDynamicRange: Bool\nA Boolean value that indicates whether the image reader should decode the image as HDR when the type is capable of decoding in either SDR or HDR.\nvar preparesImagesForDisplay: Bool\nA Boolean value that indicates whether the image reader prepares the image for display.\nvar preferredThumbnailSize: CGSize\nThe thumbnail size in pixels that the image reader makes the image.\nvar pixelsPerInch: Double\nThe integral scale that the image reader applies to the image.\nComparing values\nstatic func != (UIImageReader.Configuration, UIImageReader.Configuration) -> Bool\nReturns a Boolean value that indicates whether two values aren’t equal.\nstatic func == (UIImageReader.Configuration, UIImageReader.Configuration) -> Bool\nReturns a Boolean value that indicates whether two values are equal."
  },
  {
    "title": "imageWithBaselineOffsetFromBottom: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/3294227-imagewithbaselineoffsetfrombotto",
    "html": "Parameters\nbaselineOffset\n\nThe position of the baseline, relative to the bottom of the image. Specify this value in points, where positive values move the baseline up from the bottom of the image and negative values move the baseline down.\n\nReturn Value\n\nA new image object containing the baseline information.\n\nDiscussion\n\nUse this method to create an image with the specified baseline information. You might add a baseline to your custom images so that you can incorporate them into text-based layouts. You can also use this method to change the baseline information on an image.\n\nSee Also\nChanging the image attributes\n- imageWithConfiguration:\nReturns a new version of the current image, replacing the current configuration attributes with the specified attributes.\n- imageByApplyingSymbolConfiguration:\nReturns a new version of the current image, applying the specified configuration attributes on top of the current attributes.\n- imageFlippedForRightToLeftLayoutDirection\nReturns a new version of the current image that flips horizontally when it’s in a right-to-left layout.\n- imageWithHorizontallyFlippedOrientation\nReturns a new version of the image that’s a mirror of the original image.\n- imageWithRenderingMode:\nReturns a new version of the image that uses the specified rendering mode.\n- imageWithAlignmentRectInsets:\nReturns a new version of the image that uses the specified alignment insets.\n- resizableImageWithCapInsets:\nReturns a new version of the image with the specified cap insets.\n- resizableImageWithCapInsets:resizingMode:\nReturns a new version of the image with the specified cap insets and options.\n- imageWithoutBaseline\nCreates a copy of the current image object without any baseline information.\nUIImageConfiguration\nA configuration object that contains the traits that the system uses when selecting the current image variant.\nUIImageSymbolConfiguration\nAn object that contains the specific font, size, style, and weight attributes to apply to a symbol image."
  },
  {
    "title": "UIImageConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageconfiguration",
    "html": "Overview\n\nImages may contain multiple variants to account for environmental factors, such as whether the interface is light or dark. The image configuration object lets you override the current environment and render an image with specific attributes. For example, you might want to render a specific version of your image to your interface.\n\nUIImageConfiguration objects are immutable and you don't create them directly. Instead, get an existing image configuration object from a UITraitCollection or UIImage object. To add attributes to your configuration object, use the configurationByApplyingConfiguration: method to create a new object that merges the existing object's values with new values you supply. Assign the new object to the preferredSymbolConfiguration property of the UIImageView object you use to display the image. If you draw the image directly, use the imageWithConfiguration: method to create a new image that contains the new attributes.\n\nTopics\nModifying a configuration object\n- configurationByApplyingConfiguration:\nReturns a configuration object that applies the specified configuration values on top of the current object’s values.\n- configurationWithTraitCollection:\nReturns a new configuration object that merges the current traits with the traits from the specified trait collection.\nGetting the configuration traits\ntraitCollection\nThe traits associated with the image configuration.\nInitializers\n+ configurationWithLocale:\n+ configurationWithTraitCollection:\nInstance Properties\nlocale\nInstance Methods\n- configurationWithLocale:\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nRepresentations\nUIImage\nAn object that manages image data in your app.\nUIImageSymbolConfiguration\nAn object that contains the specific font, size, style, and weight attributes to apply to a symbol image."
  },
  {
    "title": "imageNamed:inBundle:variableValue:withConfiguration: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/3951380-imagenamed",
    "html": "Parameters\nname\n\nThe name of the image asset or file.\n\nbundle\n\nThe bundle that contains the image file or asset catalog.\n\nvalue\n\nThe value the system uses to customize the image content, between 0 and 1.\n\nconfiguration\n\nThe image configuration the system applies to the image.\n\nReturn Value\n\nAn object that contains the image variant that matches the configuration data; otherwise, nil if the system didn’t find a suitable image.\n\nDiscussion\n\nWhen searching the asset catalog, this method prefers an asset containing a symbol image over an asset with the same name containing a bitmap image. Because the system supports symbol images in iOS 13 or later, you may include both types of assets in the same asset catalog. In iOS 12 or earlier, the system automatically chooses the bitmap image.\n\nYou can’t use this method to load system symbol images; use the systemImageNamed:variableValue:withConfiguration: method instead.\n\nThis method checks the system caches for an image object with the name you specify, and returns the variant of that image that best matches the trait collection you specify. If a matching image object isn’t in the cache, this method creates the image from an available asset catalog or loads the image from disk.\n\nThe system may purge cached image data at any time to free up memory. Purging occurs only for unused images that are in the cache.\n\nSee Also\nLoading and caching images\nProviding images for different appearances\nSupply image resources appropriate for light and dark appearances and for high-contrast environments.\nConfiguring and displaying symbol images in your UI\nCreate scalable images that integrate with your app’s text, and adjust the appearance of those images dynamically.\nCreating custom symbol images for your app\nCreate, organize, and annotate symbol images using SF Symbols.\n+ imageNamed:inBundle:compatibleWithTraitCollection:\nCreates an image object using the named image asset that’s compatible with the specified trait collection.\n+ imageNamed:inBundle:withConfiguration:\nCreates an image by using the named image asset that’s compatible with the configuration you specify.\n+ imageNamed:\nCreates an image object from the specified named asset.\n+ systemImageNamed:withConfiguration:\nCreates an image object that contains a system symbol image with the specified configuration.\n+ systemImageNamed:variableValue:withConfiguration:\nCreates an image object that contains a system symbol image with the configuration and variable value you specify.\n+ systemImageNamed:compatibleWithTraitCollection:\nCreates an image object that contains a system symbol image appropriate for the specified traits.\n+ systemImageNamed:\nCreates an image object that contains a system symbol image.\nBuilding High-Performance Lists and Collection Views\nImprove the performance of lists and collections in your app with prefetching and image preparation."
  },
  {
    "title": "UIImage.SymbolScale.default | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/symbolscale/default",
    "html": "Discussion\n\nUIKit chooses the same scale used for similar content in other parts of the system.\n\nSee Also\nSymbol image scales\ncase unspecified\nAn unspecified scale.\ncase small\nThe small variant of the symbol image.\ncase medium\nThe medium variant of the symbol image\ncase large\nThe large variant of the symbol image."
  },
  {
    "title": "imageNamed:inBundle:compatibleWithTraitCollection: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/1624154-imagenamed",
    "html": "Parameters\nname\n\nThe name of the image asset or file.\n\nbundle\n\nThe bundle containing the image file or asset catalog. Specify nil to search the app’s main bundle.\n\ntraitCollection\n\nThe traits associated with the intended environment for the image. Use this parameter to ensure that the system loads the correct variant of the image. If you specify nil, this method uses the traits associated with the main screen.\n\nReturn Value\n\nThe image object that best matches the desired traits with the given name, or nil if no suitable image was found.\n\nDiscussion\n\nWhen searching the asset catalog, this method prefers an asset containing a symbol image over an asset with the same name containing a bitmap image. Because the system supports symbol images in iOS 13 and later, you may include both types of assets in the same asset catalog. The system automatically falls back to the bitmap image on earlier versions of iOS.\n\nYou can’t use this method to load system symbol images; use the systemImageNamed:compatibleWithTraitCollection: method instead.\n\nThis method checks the system caches for an image object with the name you specify, and returns the variant of that image that best matches the trait collection you specify. If a matching image object isn’t in the cache, this method creates the image from an available asset catalog or loads the image from disk.\n\nThe system may purge cached image data at any time to free up memory. Purging occurs only for unused images that are in the cache.\n\nIn iOS 9 and later, this method is thread safe.\n\nSee Also\nLoading and caching images\nProviding images for different appearances\nSupply image resources appropriate for light and dark appearances and for high-contrast environments.\nConfiguring and displaying symbol images in your UI\nCreate scalable images that integrate with your app’s text, and adjust the appearance of those images dynamically.\nCreating custom symbol images for your app\nCreate, organize, and annotate symbol images using SF Symbols.\n+ imageNamed:inBundle:withConfiguration:\nCreates an image by using the named image asset that’s compatible with the configuration you specify.\n+ imageNamed:inBundle:variableValue:withConfiguration:\nCreates an image by using the name, configuration, and variable value you specify.\n+ imageNamed:\nCreates an image object from the specified named asset.\n+ systemImageNamed:withConfiguration:\nCreates an image object that contains a system symbol image with the specified configuration.\n+ systemImageNamed:variableValue:withConfiguration:\nCreates an image object that contains a system symbol image with the configuration and variable value you specify.\n+ systemImageNamed:compatibleWithTraitCollection:\nCreates an image object that contains a system symbol image appropriate for the specified traits.\n+ systemImageNamed:\nCreates an image object that contains a system symbol image.\nBuilding High-Performance Lists and Collection Views\nImprove the performance of lists and collections in your app with prefetching and image preparation."
  },
  {
    "title": "imageNamed:inBundle:withConfiguration: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/3294226-imagenamed",
    "html": "Parameters\nname\n\nThe name of the image asset or file.\n\nbundle\n\nThe bundle containing the image file or asset catalog. Specify nil to search the app’s main bundle.\n\nconfiguration\n\nThe image configuration that you want. Use this parameter to specify traits and other details that define which variant of the image you want. For example, when requesting a custom symbol image, you can specify whether you want the thin, regular, or bold image variant.\n\nReturn Value\n\nAn object containing the image variant that matches the specified configuration data, or nil if no suitable image was found.\n\nDiscussion\n\nWhen searching the asset catalog, this method prefers an asset containing a symbol image over an asset with the same name containing a bitmap image. Because the system supports symbol images in iOS 13 or later, you may include both types of assets in the same asset catalog. The system automatically falls back to the bitmap image on earlier versions of iOS.\n\nYou can’t use this method to load system symbol images; use the systemImageNamed:withConfiguration: method instead.\n\nThis method checks the system caches for an image object with the name you specify, and returns the variant of that image that best matches the trait collection you specify. If a matching image object isn’t in the cache, this method creates the image from an available asset catalog or loads the image from disk.\n\nThe system may purge cached image data at any time to free up memory. Purging occurs only for unused images that are in the cache.\n\nSee Also\nLoading and caching images\nProviding images for different appearances\nSupply image resources appropriate for light and dark appearances and for high-contrast environments.\nConfiguring and displaying symbol images in your UI\nCreate scalable images that integrate with your app’s text, and adjust the appearance of those images dynamically.\nCreating custom symbol images for your app\nCreate, organize, and annotate symbol images using SF Symbols.\n+ imageNamed:inBundle:compatibleWithTraitCollection:\nCreates an image object using the named image asset that’s compatible with the specified trait collection.\n+ imageNamed:inBundle:variableValue:withConfiguration:\nCreates an image by using the name, configuration, and variable value you specify.\n+ imageNamed:\nCreates an image object from the specified named asset.\n+ systemImageNamed:withConfiguration:\nCreates an image object that contains a system symbol image with the specified configuration.\n+ systemImageNamed:variableValue:withConfiguration:\nCreates an image object that contains a system symbol image with the configuration and variable value you specify.\n+ systemImageNamed:compatibleWithTraitCollection:\nCreates an image object that contains a system symbol image appropriate for the specified traits.\n+ systemImageNamed:\nCreates an image object that contains a system symbol image.\nBuilding High-Performance Lists and Collection Views\nImprove the performance of lists and collections in your app with prefetching and image preparation."
  },
  {
    "title": "UIImage.SymbolScale.medium | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/symbolscale/medium",
    "html": "See Also\nSymbol image scales\ncase `default`\nThe default scale variant that matches the system usage.\ncase unspecified\nAn unspecified scale.\ncase small\nThe small variant of the symbol image.\ncase large\nThe large variant of the symbol image."
  },
  {
    "title": "UIImage.SymbolScale.large | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/symbolscale/large",
    "html": "See Also\nSymbol image scales\ncase `default`\nThe default scale variant that matches the system usage.\ncase unspecified\nAn unspecified scale.\ncase small\nThe small variant of the symbol image.\ncase medium\nThe medium variant of the symbol image"
  },
  {
    "title": "NSTextSelection.Granularity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselection/granularity",
    "html": "Topics\nDegrees of granularity\ncase character\nA value that represents selection by character.\ncase word\nA value that represents selection by word.\ncase paragraph\nA value that represents selection by paragraph.\ncase line\nA value that represents selection by line.\ncase sentence\nA value that represents selection by sentence.\nRelationships\nConforms To\nSendable\nSee Also\nCharacteristics of a selection\nvar affinity: NSTextSelection.Affinity\nReturns the selection affinity of the text selection.\nenum NSTextSelection.Affinity\nValues that describe the visual location of the text cursor, or the direction of the non-anchored edge of the selection.\nvar anchorPositionOffset: CGFloat\nRepresents the anchor position offset from the beginning of a line fragment in the visual order for the initial tap or click location.\nvar granularity: NSTextSelection.Granularity\nThe granularity of the selection.\nvar isLogical: Bool\nA Boolean value that indicates whether the framework interprets the selection as logical or visual.\nvar isTransient: Bool\nA Boolean value that indicates transient text selection during drag handling.\nvar secondarySelectionLocation: NSTextLocation?\nSpecifies the secondary character location when user taps or clicks at a directional boundary.\nprotocol NSTextLocation\nAn interface you implement that represents an abstract location inside your document’s content.\nvar textRanges: [NSTextRange]\nRepresents an array of noncontiguous logical ranges in the selection.\nvar typingAttributes: [NSAttributedString.Key : Any]\nThe template attributes the framework uses for characters that replace the contents of this selection."
  },
  {
    "title": "anchorPositionOffset | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselection/3801817-anchorpositionoffset",
    "html": "Discussion\n\nThat starts from the left for a horizontal line fragment, and from the top for a vertical. Navigating between lines uses this point when the current line fragment associated with the selection is shorter than the next line visited. Defaults to 0.0.\n\nSee Also\nCharacteristics of a selection\nvar affinity: NSTextSelection.Affinity\nReturns the selection affinity of the text selection.\nenum NSTextSelection.Affinity\nValues that describe the visual location of the text cursor, or the direction of the non-anchored edge of the selection.\nvar granularity: NSTextSelection.Granularity\nThe granularity of the selection.\nenum NSTextSelection.Granularity\nValues that describe the different granularities available to make a selection.\nvar isLogical: Bool\nA Boolean value that indicates whether the framework interprets the selection as logical or visual.\nvar isTransient: Bool\nA Boolean value that indicates transient text selection during drag handling.\nvar secondarySelectionLocation: NSTextLocation?\nSpecifies the secondary character location when user taps or clicks at a directional boundary.\nprotocol NSTextLocation\nAn interface you implement that represents an abstract location inside your document’s content.\nvar textRanges: [NSTextRange]\nRepresents an array of noncontiguous logical ranges in the selection.\nvar typingAttributes: [NSAttributedString.Key : Any]\nThe template attributes the framework uses for characters that replace the contents of this selection."
  },
  {
    "title": "isTransient | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselection/3801827-istransient",
    "html": "See Also\nCharacteristics of a selection\nvar affinity: NSTextSelection.Affinity\nReturns the selection affinity of the text selection.\nenum NSTextSelection.Affinity\nValues that describe the visual location of the text cursor, or the direction of the non-anchored edge of the selection.\nvar anchorPositionOffset: CGFloat\nRepresents the anchor position offset from the beginning of a line fragment in the visual order for the initial tap or click location.\nvar granularity: NSTextSelection.Granularity\nThe granularity of the selection.\nenum NSTextSelection.Granularity\nValues that describe the different granularities available to make a selection.\nvar isLogical: Bool\nA Boolean value that indicates whether the framework interprets the selection as logical or visual.\nvar secondarySelectionLocation: NSTextLocation?\nSpecifies the secondary character location when user taps or clicks at a directional boundary.\nprotocol NSTextLocation\nAn interface you implement that represents an abstract location inside your document’s content.\nvar textRanges: [NSTextRange]\nRepresents an array of noncontiguous logical ranges in the selection.\nvar typingAttributes: [NSAttributedString.Key : Any]\nThe template attributes the framework uses for characters that replace the contents of this selection."
  },
  {
    "title": "granularity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselection/3801818-granularity",
    "html": "Discussion\n\nThe default is NSTextSelection.Granularity.character. Selection extending operations modify the selection by granularity.\n\nSee Also\nCharacteristics of a selection\nvar affinity: NSTextSelection.Affinity\nReturns the selection affinity of the text selection.\nenum NSTextSelection.Affinity\nValues that describe the visual location of the text cursor, or the direction of the non-anchored edge of the selection.\nvar anchorPositionOffset: CGFloat\nRepresents the anchor position offset from the beginning of a line fragment in the visual order for the initial tap or click location.\nenum NSTextSelection.Granularity\nValues that describe the different granularities available to make a selection.\nvar isLogical: Bool\nA Boolean value that indicates whether the framework interprets the selection as logical or visual.\nvar isTransient: Bool\nA Boolean value that indicates transient text selection during drag handling.\nvar secondarySelectionLocation: NSTextLocation?\nSpecifies the secondary character location when user taps or clicks at a directional boundary.\nprotocol NSTextLocation\nAn interface you implement that represents an abstract location inside your document’s content.\nvar textRanges: [NSTextRange]\nRepresents an array of noncontiguous logical ranges in the selection.\nvar typingAttributes: [NSAttributedString.Key : Any]\nThe template attributes the framework uses for characters that replace the contents of this selection."
  },
  {
    "title": "isLogical | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselection/3801823-islogical",
    "html": "See Also\nCharacteristics of a selection\nvar affinity: NSTextSelection.Affinity\nReturns the selection affinity of the text selection.\nenum NSTextSelection.Affinity\nValues that describe the visual location of the text cursor, or the direction of the non-anchored edge of the selection.\nvar anchorPositionOffset: CGFloat\nRepresents the anchor position offset from the beginning of a line fragment in the visual order for the initial tap or click location.\nvar granularity: NSTextSelection.Granularity\nThe granularity of the selection.\nenum NSTextSelection.Granularity\nValues that describe the different granularities available to make a selection.\nvar isTransient: Bool\nA Boolean value that indicates transient text selection during drag handling.\nvar secondarySelectionLocation: NSTextLocation?\nSpecifies the secondary character location when user taps or clicks at a directional boundary.\nprotocol NSTextLocation\nAn interface you implement that represents an abstract location inside your document’s content.\nvar textRanges: [NSTextRange]\nRepresents an array of noncontiguous logical ranges in the selection.\nvar typingAttributes: [NSAttributedString.Key : Any]\nThe template attributes the framework uses for characters that replace the contents of this selection."
  },
  {
    "title": "textRanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselection/3801825-textranges",
    "html": "Discussion\n\nThe array must be logically ordered. When editing, all ranges in a text selection constitute a single insertion point.\n\nSee Also\nCharacteristics of a selection\nvar affinity: NSTextSelection.Affinity\nReturns the selection affinity of the text selection.\nenum NSTextSelection.Affinity\nValues that describe the visual location of the text cursor, or the direction of the non-anchored edge of the selection.\nvar anchorPositionOffset: CGFloat\nRepresents the anchor position offset from the beginning of a line fragment in the visual order for the initial tap or click location.\nvar granularity: NSTextSelection.Granularity\nThe granularity of the selection.\nenum NSTextSelection.Granularity\nValues that describe the different granularities available to make a selection.\nvar isLogical: Bool\nA Boolean value that indicates whether the framework interprets the selection as logical or visual.\nvar isTransient: Bool\nA Boolean value that indicates transient text selection during drag handling.\nvar secondarySelectionLocation: NSTextLocation?\nSpecifies the secondary character location when user taps or clicks at a directional boundary.\nprotocol NSTextLocation\nAn interface you implement that represents an abstract location inside your document’s content.\nvar typingAttributes: [NSAttributedString.Key : Any]\nThe template attributes the framework uses for characters that replace the contents of this selection."
  },
  {
    "title": "typingAttributes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselection/3801828-typingattributes",
    "html": "See Also\nCharacteristics of a selection\nvar affinity: NSTextSelection.Affinity\nReturns the selection affinity of the text selection.\nenum NSTextSelection.Affinity\nValues that describe the visual location of the text cursor, or the direction of the non-anchored edge of the selection.\nvar anchorPositionOffset: CGFloat\nRepresents the anchor position offset from the beginning of a line fragment in the visual order for the initial tap or click location.\nvar granularity: NSTextSelection.Granularity\nThe granularity of the selection.\nenum NSTextSelection.Granularity\nValues that describe the different granularities available to make a selection.\nvar isLogical: Bool\nA Boolean value that indicates whether the framework interprets the selection as logical or visual.\nvar isTransient: Bool\nA Boolean value that indicates transient text selection during drag handling.\nvar secondarySelectionLocation: NSTextLocation?\nSpecifies the secondary character location when user taps or clicks at a directional boundary.\nprotocol NSTextLocation\nAn interface you implement that represents an abstract location inside your document’s content.\nvar textRanges: [NSTextRange]\nRepresents an array of noncontiguous logical ranges in the selection."
  },
  {
    "title": "bottomMargin | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutfragment/3852574-bottommargin",
    "html": "See Also\nDefining margins and padding\nvar leadingPadding: CGFloat\nThe amount of margin space reserved during paragraph layout between the leading edge of the text layout fragment and the start of the lines in the paragraph.\nvar topMargin: CGFloat\nThe amount of space reserved during paragraph layout between the top of the text layout fragment and the top of the first line in the paragraph.\nvar trailingPadding: CGFloat\nThe amount of margin space reserved during paragraph layout between the end of the lines in the paragraph and the trailing edge of the text layout fragment."
  },
  {
    "title": "topMargin | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutfragment/3852576-topmargin",
    "html": "See Also\nDefining margins and padding\nvar bottomMargin: CGFloat\nThe amount of space reserved during paragraph layout between the bottom of the last line in the paragraph and the bottom of the text layout fragment.\nvar leadingPadding: CGFloat\nThe amount of margin space reserved during paragraph layout between the leading edge of the text layout fragment and the start of the lines in the paragraph.\nvar trailingPadding: CGFloat\nThe amount of margin space reserved during paragraph layout between the end of the lines in the paragraph and the trailing edge of the text layout fragment."
  },
  {
    "title": "imageWithCGImage:scale:orientation: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/1624124-imagewithcgimage",
    "html": "Parameters\nimageRef\n\nThe Quartz image object.\n\nscale\n\nThe scale factor to use when interpreting the image data. Specifying a scale factor of 1.0 results in an image whose size matches the pixel-based dimensions of the image. Applying a different scale factor changes the size of the image as reported by the size property.\n\norientation\n\nThe orientation of the image data. You can use this parameter to specify any rotation factors applied to the image.\n\nReturn Value\n\nA new image object for the specified Quartz image, or nil if the method could not initialize the image from the specified image reference.\n\nDiscussion\n\nThis method does not cache the image object. You can use the methods of the Core Graphics framework to create a Quartz image reference.\n\nSee Also\nCreating and initializing image objects\n+ imageWithContentsOfFile:\nCreates and returns an image object by loading the image data from the file at the specified path.\n+ imageWithData:\nCreates and returns an image object that uses the specified image data.\n+ imageWithData:scale:\nCreates and returns an image object that uses the specified image data and scale factor.\n+ imageWithCGImage:\nCreates and returns an image object representing the specified Quartz image.\n+ imageWithCIImage:\nCreates and returns an image object that contains a Core Image object.\n+ imageWithCIImage:scale:orientation:\nCreates and returns an image object based on a Core Image object and the specified attributes.\n- initWithContentsOfFile:\nInitializes and returns the image object with the contents of the specified file.\n- initWithData:\nInitializes and returns the image object with the specified data.\n- initWithData:scale:\nInitializes and returns the image object with the specified data and scale factor.\n- initWithCGImage:\nInitializes and returns the image object with the specified Quartz image reference.\n- initWithCGImage:scale:orientation:\nInitializes and returns an image object with the specified scale and orientation factors.\n- initWithCIImage:\nInitializes and returns an image object with the specified Core Image object.\n- initWithCIImage:scale:orientation:\nInitializes and returns an image object with the specified Core Image object and properties.\nUIImageReader\nUIImageReaderConfiguration\nThe properties that a reader uses to decode images."
  },
  {
    "title": "initWithCGImage:scale:orientation: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/1624091-initwithcgimage",
    "html": "Parameters\nimageRef\n\nThe Quartz image object.\n\nscale\n\nThe scale factor to assume when interpreting the image data. Applying a scale factor of 1.0 results in an image whose size matches the pixel-based dimensions of the image. Applying a different scale factor changes the size of the image as reported by the size property.\n\norientation\n\nThe orientation of the image data. You can use this parameter to specify any rotation factors applied to the image.\n\nReturn Value\n\nAn initialized UIImage object. In Objective-C, this method returns nil if the ciImage parameter is nil.\n\nSee Also\nCreating and initializing image objects\n+ imageWithContentsOfFile:\nCreates and returns an image object by loading the image data from the file at the specified path.\n+ imageWithData:\nCreates and returns an image object that uses the specified image data.\n+ imageWithData:scale:\nCreates and returns an image object that uses the specified image data and scale factor.\n+ imageWithCGImage:\nCreates and returns an image object representing the specified Quartz image.\n+ imageWithCGImage:scale:orientation:\nCreates and returns an image object with the specified scale and orientation factors.\n+ imageWithCIImage:\nCreates and returns an image object that contains a Core Image object.\n+ imageWithCIImage:scale:orientation:\nCreates and returns an image object based on a Core Image object and the specified attributes.\n- initWithContentsOfFile:\nInitializes and returns the image object with the contents of the specified file.\n- initWithData:\nInitializes and returns the image object with the specified data.\n- initWithData:scale:\nInitializes and returns the image object with the specified data and scale factor.\n- initWithCGImage:\nInitializes and returns the image object with the specified Quartz image reference.\n- initWithCIImage:\nInitializes and returns an image object with the specified Core Image object.\n- initWithCIImage:scale:orientation:\nInitializes and returns an image object with the specified Core Image object and properties.\nUIImageReader\nUIImageReaderConfiguration\nThe properties that a reader uses to decode images."
  },
  {
    "title": "initWithCIImage:scale:orientation: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/1624150-initwithciimage",
    "html": "Parameters\nciImage\n\nThe Core Image object.\n\nscale\n\nThe scale factor to assume when interpreting the image data. Applying a scale factor of 1.0 results in an image whose size matches the pixel-based dimensions of the image. Applying a different scale factor changes the size of the image as reported by the size property.\n\norientation\n\nThe orientation of the image data. You can use this parameter to specify any rotation factors applied to the image.\n\nReturn Value\n\nAn initialized UIImage object. In Objective-C, this method returns nil if the ciImage parameter is nil.\n\nSee Also\nCreating and initializing image objects\n+ imageWithContentsOfFile:\nCreates and returns an image object by loading the image data from the file at the specified path.\n+ imageWithData:\nCreates and returns an image object that uses the specified image data.\n+ imageWithData:scale:\nCreates and returns an image object that uses the specified image data and scale factor.\n+ imageWithCGImage:\nCreates and returns an image object representing the specified Quartz image.\n+ imageWithCGImage:scale:orientation:\nCreates and returns an image object with the specified scale and orientation factors.\n+ imageWithCIImage:\nCreates and returns an image object that contains a Core Image object.\n+ imageWithCIImage:scale:orientation:\nCreates and returns an image object based on a Core Image object and the specified attributes.\n- initWithContentsOfFile:\nInitializes and returns the image object with the contents of the specified file.\n- initWithData:\nInitializes and returns the image object with the specified data.\n- initWithData:scale:\nInitializes and returns the image object with the specified data and scale factor.\n- initWithCGImage:\nInitializes and returns the image object with the specified Quartz image reference.\n- initWithCGImage:scale:orientation:\nInitializes and returns an image object with the specified scale and orientation factors.\n- initWithCIImage:\nInitializes and returns an image object with the specified Core Image object.\nUIImageReader\nUIImageReaderConfiguration\nThe properties that a reader uses to decode images."
  },
  {
    "title": "UIWindowSceneStandardPlacement | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscenestandardplacement",
    "html": "Topics\nCreating a placement\nstatic func standard() -> UIWindowSceneStandardPlacement\nCreates a placement that indicates the system should present the window using the default style of the system in the space.\ninit()\nCreates a placement that indicates the system should present the window using the default style of the system in the space.\nComparing placements\nstatic func == (UIWindowSceneStandardPlacement, UIWindowSceneStandardPlacement) -> Bool\nAn operator for checking whether two placements are equal.\nstatic func != (UIWindowSceneStandardPlacement, UIWindowSceneStandardPlacement) -> Bool\nAn operator for checking whether two placements aren’t equal.\nvar hashValue: Int\nThe hash value of the placement option.\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nRelationships\nConforms To\nUIWindowScenePlacement\nSee Also\nPositioning windows\nvar placement: (UIWindowScenePlacement)?\nThe placement you prefer when the system activates the window scene.\nprotocol UIWindowScenePlacement\nThe placement of a window scene in the workspace.\nstruct UIWindowSceneProminentPlacement\nA placement that indicates the system should present the window more prominently than others in the space."
  },
  {
    "title": "UIWindowSceneProminentPlacement | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowsceneprominentplacement",
    "html": "Topics\nCreating a placement\nstatic func prominent() -> UIWindowSceneProminentPlacement\nCreates a placement that indicates the system should present the window more prominently than others in the space.\ninit()\nCreates a placement that indicates the system should present the window more prominently than others in the space.\nComparing placements\nstatic func == (UIWindowSceneProminentPlacement, UIWindowSceneProminentPlacement) -> Bool\nAn operator for checking whether two placements are equal.\nstatic func != (UIWindowSceneProminentPlacement, UIWindowSceneProminentPlacement) -> Bool\nAn operator for checking whether two placements aren’t equal.\nvar hashValue: Int\nThe hash value of the placement option.\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nRelationships\nConforms To\nUIWindowScenePlacement\nSee Also\nPositioning windows\nvar placement: (UIWindowScenePlacement)?\nThe placement you prefer when the system activates the window scene.\nprotocol UIWindowScenePlacement\nThe placement of a window scene in the workspace.\nstruct UIWindowSceneStandardPlacement\nA placement that indicates the system should present the window using the default style of the system in the space."
  },
  {
    "title": "addTextLayoutManager(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontentmanager/3809916-addtextlayoutmanager",
    "html": "Parameters\ntextLayoutManager\n\nThe layout manager to add.\n\nSee Also\nWorking with layout managers\nvar primaryTextLayoutManager: NSTextLayoutManager?\nThe primary text layout manager for this content.\nvar textLayoutManagers: [NSTextLayoutManager]\nThe array of text layout managers associated with this text content manager.\nvar automaticallySynchronizesTextLayoutManagers: Bool\nDetermines if the framework should automatically synchronize all text layout managers when exiting an editing transaction.\nfunc removeTextLayoutManager(NSTextLayoutManager)\nRemoves the layout manager you specifiy from the list of layout managers.\nfunc synchronizeTextLayoutManagers(((Error?) -> Void)?)\nSynchronizes changes to all nonprimary text layout managers."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscene/resizingrestrictions/4245733-hashvalue",
    "html": "Relationships\nFrom Protocol\nHashable"
  },
  {
    "title": "view | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextattachmentviewprovider/3857601-view",
    "html": "See Also\nDefining the contents\nvar location: NSTextLocation\nThe location that indicates the start of the text attachment.\nvar textAttachment: NSTextAttachment?\nThe text attachment for this view.\nvar textLayoutManager: NSTextLayoutManager?\nThe text layout manager for this view.\nvar tracksTextAttachmentViewBounds: Bool\nA Boolean value that determines the text attachment’s bounds policy."
  },
  {
    "title": "synchronizeTextLayoutManagers(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontentmanager/3809925-synchronizetextlayoutmanagers",
    "html": "Parameters\ncompletionHandler\n\nA completion handler that runs on success, or to handle error conditions.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc synchronizeTextLayoutManagers() async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nIf completionHandler is nil, this method performs the operation synchronously. The framework passes any error to the completionHandler. The method blocks (or fails, if synchronous) when there’s an active transaction.\n\nSee Also\nWorking with layout managers\nvar primaryTextLayoutManager: NSTextLayoutManager?\nThe primary text layout manager for this content.\nvar textLayoutManagers: [NSTextLayoutManager]\nThe array of text layout managers associated with this text content manager.\nvar automaticallySynchronizesTextLayoutManagers: Bool\nDetermines if the framework should automatically synchronize all text layout managers when exiting an editing transaction.\nfunc addTextLayoutManager(NSTextLayoutManager)\nAdds the layout manager you provide to the list of layout managers.\nfunc removeTextLayoutManager(NSTextLayoutManager)\nRemoves the layout manager you specifiy from the list of layout managers."
  },
  {
    "title": "UIWindowScene.ActivationAction.ConfigurationProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscene/activationaction/configurationprovider",
    "html": "Parameters\naction\n\nThe UIWindowScene.ActivationAction requesting a configuration.\n\nReturn Value\n\nAn activation configuration you can use to request a window scene.\n\nSee Also\nCreating an activation action\ninit(title: String?, subtitle: String?, image: UIImage?, identifier: UIAction.Identifier?, discoverabilityTitle: String?, attributes: UIMenuElement.Attributes, alternate: UIAction?, UIWindowScene.ActivationAction.ConfigurationProvider)\nCreates an activation action using the specified parameters."
  },
  {
    "title": "init(textElement:range:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutfragment/3809966-init",
    "html": "Parameters\ntextElement\n\nAn NSTextElement.\n\nrangeInElement\n\nA range that defines the boundaries of the text for the new layout fragment.\n\nSee Also\nCreating a layout fragment\ninit?(coder: NSCoder)\nCreates a new layout fragment with the coder you provide."
  },
  {
    "title": "layoutQueue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutfragment/3809969-layoutqueue",
    "html": "Discussion\n\nIf non-nil, the queue the framework uses for layout operations."
  },
  {
    "title": "renderingSurfaceBounds | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutfragment/3809971-renderingsurfacebounds",
    "html": "Discussion\n\nThe coordinate system is vertically flipped from the layoutFragmentFrame origin ({0,0} is at the upper-left corner). The size should be larger than layoutFragmentFrame.size. The origin could be in the negative coordinate since the rendering could stretch out of layoutFragmentFrame. Only valid when state greater than NSTextLayoutFragment.State.estimatedUsageBounds.\n\nSee Also\nDrawing the fragment and attachments\nvar layoutFragmentFrame: CGRect\nThe rectangle the framework uses for tiling the layout fragment inside the target layout coordinate system.\nfunc draw(at: CGPoint, in: CGContext)\nRenders the visual representation of this element in the specified graphics context.\nfunc invalidateLayout()\nInvalidates any layout information associated with the text layout fragment.\nvar textAttachmentViewProviders: [NSTextAttachmentViewProvider]\nThe attachment view provider associated with the text layout fragment.\nfunc frameForTextAttachment(at: NSTextLocation) -> CGRect\nReturns the frame in the text layout fragment coordinate system for the attachment at the location you specify."
  },
  {
    "title": "layoutFragmentFrame | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutfragment/3809968-layoutfragmentframe",
    "html": "See Also\nDrawing the fragment and attachments\nvar renderingSurfaceBounds: CGRect\nThe bounds defining the area required for rendering the contents.\nfunc draw(at: CGPoint, in: CGContext)\nRenders the visual representation of this element in the specified graphics context.\nfunc invalidateLayout()\nInvalidates any layout information associated with the text layout fragment.\nvar textAttachmentViewProviders: [NSTextAttachmentViewProvider]\nThe attachment view provider associated with the text layout fragment.\nfunc frameForTextAttachment(at: NSTextLocation) -> CGRect\nReturns the frame in the text layout fragment coordinate system for the attachment at the location you specify."
  },
  {
    "title": "frameForTextAttachment(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutfragment/3809964-framefortextattachment",
    "html": "Parameters\nlocation\n\nThe NSTextLocation that describes the location in the text layout fragment.\n\nReturn Value\n\nThe frame rectangle that describes the text layout fragment.\n\nDiscussion\n\nReturns CGRectZero if location isn’t with any attachment or the state isn’t NSTextLayoutFragment.State.layoutAvailable.\n\nSee Also\nDrawing the fragment and attachments\nvar layoutFragmentFrame: CGRect\nThe rectangle the framework uses for tiling the layout fragment inside the target layout coordinate system.\nvar renderingSurfaceBounds: CGRect\nThe bounds defining the area required for rendering the contents.\nfunc draw(at: CGPoint, in: CGContext)\nRenders the visual representation of this element in the specified graphics context.\nfunc invalidateLayout()\nInvalidates any layout information associated with the text layout fragment.\nvar textAttachmentViewProviders: [NSTextAttachmentViewProvider]\nThe attachment view provider associated with the text layout fragment."
  },
  {
    "title": "NSTextLayoutFragment.State | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutfragment/state",
    "html": "Topics\nConstants that describe layout bounds\ncase calculatedUsageBounds\nThe layout fragment measurements are available without text line fragments.\ncase estimatedUsageBounds\nThe text layout manager hasn’t performed a full layout yet for the region covered by this layout fragment and is returning an estimated bounds.\ncase layoutAvailable\nMeasurements for the text line fragments and layout fragment are available.\ncase none\nNo layout information is available.\nRelationships\nConforms To\nSendable\nSee Also\nGetting element information\nvar state: NSTextLayoutFragment.State\nThe layout information state.\nvar rangeInElement: NSTextRange\nThe range inside the text element relative to the document origin.\nvar textElement: NSTextElement?\nThe parent text element."
  },
  {
    "title": "textAttachmentViewProviders | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutfragment/3809973-textattachmentviewproviders",
    "html": "Discussion\n\nThe property contents are only valid with NSTextLayoutFragment.State.layoutAvailable.\n\nSee Also\nDrawing the fragment and attachments\nvar layoutFragmentFrame: CGRect\nThe rectangle the framework uses for tiling the layout fragment inside the target layout coordinate system.\nvar renderingSurfaceBounds: CGRect\nThe bounds defining the area required for rendering the contents.\nfunc draw(at: CGPoint, in: CGContext)\nRenders the visual representation of this element in the specified graphics context.\nfunc invalidateLayout()\nInvalidates any layout information associated with the text layout fragment.\nfunc frameForTextAttachment(at: NSTextLocation) -> CGRect\nReturns the frame in the text layout fragment coordinate system for the attachment at the location you specify."
  },
  {
    "title": "invalidateLayout() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutfragment/3809967-invalidatelayout",
    "html": "See Also\nDrawing the fragment and attachments\nvar layoutFragmentFrame: CGRect\nThe rectangle the framework uses for tiling the layout fragment inside the target layout coordinate system.\nvar renderingSurfaceBounds: CGRect\nThe bounds defining the area required for rendering the contents.\nfunc draw(at: CGPoint, in: CGContext)\nRenders the visual representation of this element in the specified graphics context.\nvar textAttachmentViewProviders: [NSTextAttachmentViewProvider]\nThe attachment view provider associated with the text layout fragment.\nfunc frameForTextAttachment(at: NSTextLocation) -> CGRect\nReturns the frame in the text layout fragment coordinate system for the attachment at the location you specify."
  },
  {
    "title": "state | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutfragment/3809972-state",
    "html": "Discussion\n\nThis property is KVO-compliant.\n\nSee Also\nGetting element information\nenum NSTextLayoutFragment.State\nValues that describe the possible layout states.\nvar rangeInElement: NSTextRange\nThe range inside the text element relative to the document origin.\nvar textElement: NSTextElement?\nThe parent text element."
  },
  {
    "title": "textElement | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutfragment/3809974-textelement",
    "html": "See Also\nGetting element information\nvar state: NSTextLayoutFragment.State\nThe layout information state.\nenum NSTextLayoutFragment.State\nValues that describe the possible layout states.\nvar rangeInElement: NSTextRange\nThe range inside the text element relative to the document origin."
  },
  {
    "title": "textLineFragments | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutfragment/3809976-textlinefragments",
    "html": "Discussion\n\nValid when NSTextLayoutFragment.State.layoutAvailable. This property is KVO-compliant.\n\nSee Also\nGetting line fragments\nstruct NSTextLayoutFragment.EnumerationOptions\nValues that describe options for enumerating text layout fragments.\nfunc textLineFragment(for: NSTextLocation, isUpstreamAffinity: Bool) -> NSTextLineFragment?\nReturns a text line fragment from a specific text location in the document.\nfunc textLineFragment(forVerticalOffset: CGFloat, requiresExactMatch: Bool) -> NSTextLineFragment?\nReturns the text line fragment for the vertical offset you provide, or the closest text line fragment beyond the vertical offset."
  },
  {
    "title": "textLineFragment(forVerticalOffset:requiresExactMatch:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutfragment/4240855-textlinefragment",
    "html": "Parameters\nverticalOffset\n\nA float value that indicates a vertical distance, expressed in points, from the layout fragment frame’s origin.\n\nrequiresExactMatch\n\nA Boolean value that indicates whether the method returns an exact match, or returns the closest match if there isn’t an exact match. The default value is true.\n\nReturn Value\n\nA text line fragment, or nil if there isn’t a match.\n\nDiscussion\n\nSet requiresExactMatch to true to find the text line fragment that contains the vertical offset, or set requiresExactMatch to false to find the closest text line fragment matching or beyond the vertical offset. Returns nil if there isn’t a match.\n\nSee Also\nGetting line fragments\nvar textLineFragments: [NSTextLineFragment]\nAn array of text line fragments.\nstruct NSTextLayoutFragment.EnumerationOptions\nValues that describe options for enumerating text layout fragments.\nfunc textLineFragment(for: NSTextLocation, isUpstreamAffinity: Bool) -> NSTextLineFragment?\nReturns a text line fragment from a specific text location in the document."
  },
  {
    "title": "textLineFragment(for:isUpstreamAffinity:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutfragment/4240854-textlinefragment",
    "html": "Parameters\ntextLocation\n\nA text location that a text line fragment contains.\n\nisUpstreamAffinity\n\nA Boolean value that indicates whether the text line fragment ends at the text location you provide.\n\nReturn Value\n\nThe text line fragment that contains or ends at the text location you provide, or nil if there isn’t a match.\n\nDiscussion\n\nSet isUpstreamAffinity to true to find a text fragment by its element range end location, such as when you enumerate over line fragments in reverse order. Set isUpstreamAffinity to false to find a text fragment that contains textLocation.\n\nSee Also\nGetting line fragments\nvar textLineFragments: [NSTextLineFragment]\nAn array of text line fragments.\nstruct NSTextLayoutFragment.EnumerationOptions\nValues that describe options for enumerating text layout fragments.\nfunc textLineFragment(forVerticalOffset: CGFloat, requiresExactMatch: Bool) -> NSTextLineFragment?\nReturns the text line fragment for the vertical offset you provide, or the closest text line fragment beyond the vertical offset."
  },
  {
    "title": "init(textLayoutManager:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextviewportlayoutcontroller/3824769-init",
    "html": "Parameters\ntextLayoutManager\n\nThe NSTextLayoutManager to associate with this viewport layout controller."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextviewportlayoutcontroller/3824768-delegate",
    "html": "See Also\nResponding to changes in viewport layout\nprotocol NSTextViewportLayoutControllerDelegate\nOptional methods that delegates implement to respond to viewport layout changes."
  },
  {
    "title": "layoutViewport() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextviewportlayoutcontroller/3824770-layoutviewport",
    "html": "See Also\nAccessing the viewport characteristics\nvar viewportBounds: CGRect\nReturns the visible bounds of the view, plus the overdraw area.\nvar viewportRange: NSTextRange?\nReturns the text range of the current viewport layout.\nfunc adjustViewport(byVerticalOffset: CGFloat)\nAdjusts the viewport rect by the specified offset if needed.\nfunc relocateViewport(to: NSTextLocation) -> CGFloat\nRelocates the viewport to the location you specify."
  },
  {
    "title": "init(size:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontainer/1444529-init",
    "html": "Parameters\nsize\n\nThe size of the text container’s bounding rectangle.\n\nReturn Value\n\nThe size of the text container's bounding rectangle.\n\nDiscussion\n\nThe new text container must be added to an NSLayoutManager object before it can be used. The text container must also have an associated NSTextView object for text to be displayed. This method is the designated initializer for the NSTextContainer class.\n\nSee Also\nCreating a text container\ninit(coder: NSCoder)\nCreates a text container from data in an unarchiver.\nRelated Documentation\nText Layout Programming Guide\nCocoa Text Architecture Guide\nfunc addTextContainer(NSTextContainer)\nAppends the specified text container to the series of text containers where the layout manager arranges text.\nText System Storage Layer Overview"
  },
  {
    "title": "relocateViewport(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextviewportlayoutcontroller/3852590-relocateviewport",
    "html": "Parameters\ntextLocation\n\nAn NSTextLocation.\n\nSee Also\nAccessing the viewport characteristics\nvar viewportBounds: CGRect\nReturns the visible bounds of the view, plus the overdraw area.\nvar viewportRange: NSTextRange?\nReturns the text range of the current viewport layout.\nfunc adjustViewport(byVerticalOffset: CGFloat)\nAdjusts the viewport rect by the specified offset if needed.\nfunc layoutViewport()\nPerforms layout in the viewport."
  },
  {
    "title": "attributedString | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlinefragment/3810037-attributedstring",
    "html": "See Also\nLine fragment characteristics\nvar characterRange: NSRange\nThe string range for the source attributed string that corresponds to this line fragment.\nvar glyphOrigin: CGPoint\nRendering origin for the left-most glyph in the line fragment coordinate system.\nvar typographicBounds: CGRect\nThe typographic bounds that specifies the dimensions of the line fragment for laying out line fragments to each other."
  },
  {
    "title": "init(range:affinity:granularity:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselection/3801821-init",
    "html": "Parameters\nrange\n\nThe range of the selection.\n\naffinity\n\nOne of the available NSTextSelection.Affinity options.\n\ngranularity\n\nOne of the available NSTextSelection.Granularity options.\n\nSee Also\nCreating a text selection\ninit(NSTextLocation, affinity: NSTextSelection.Affinity)\nCreates a new text selection with the location and selection affinity you provide.\ninit([NSTextRange], affinity: NSTextSelection.Affinity, granularity: NSTextSelection.Granularity)\nCreates a new text selection with the ranges, selection affinity, and granularity you provide.\ninit?(coder: NSCoder)\nCreates a test selection from data in an unarchiver."
  },
  {
    "title": "init(_:affinity:granularity:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselection/3801822-init",
    "html": "Parameters\ntextRanges\n\nAn array of text ranges.\n\naffinity\n\nOne of the available NSTextSelection.Affinity options.\n\ngranularity\n\nOne of the available NSTextSelection.Granularity options.\n\nSee Also\nCreating a text selection\ninit(NSTextLocation, affinity: NSTextSelection.Affinity)\nCreates a new text selection with the location and selection affinity you provide.\ninit(range: NSTextRange, affinity: NSTextSelection.Affinity, granularity: NSTextSelection.Granularity)\nCreates a new text selection with the range, selection affinity, and granularity you provide.\ninit?(coder: NSCoder)\nCreates a test selection from data in an unarchiver."
  },
  {
    "title": "NSTextSelection.Affinity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselection/affinity",
    "html": "Topics\nAffinities\ncase downstream\nThe value that defines the visual location of the text cursor between the head of line that contains the selection location.\ncase upstream\nThe value that defines the visual location of the text cursor to the tail of the previous line.\nRelationships\nConforms To\nSendable\nSee Also\nCharacteristics of a selection\nvar affinity: NSTextSelection.Affinity\nReturns the selection affinity of the text selection.\nvar anchorPositionOffset: CGFloat\nRepresents the anchor position offset from the beginning of a line fragment in the visual order for the initial tap or click location.\nvar granularity: NSTextSelection.Granularity\nThe granularity of the selection.\nenum NSTextSelection.Granularity\nValues that describe the different granularities available to make a selection.\nvar isLogical: Bool\nA Boolean value that indicates whether the framework interprets the selection as logical or visual.\nvar isTransient: Bool\nA Boolean value that indicates transient text selection during drag handling.\nvar secondarySelectionLocation: NSTextLocation?\nSpecifies the secondary character location when user taps or clicks at a directional boundary.\nprotocol NSTextLocation\nAn interface you implement that represents an abstract location inside your document’s content.\nvar textRanges: [NSTextRange]\nRepresents an array of noncontiguous logical ranges in the selection.\nvar typingAttributes: [NSAttributedString.Key : Any]\nThe template attributes the framework uses for characters that replace the contents of this selection."
  },
  {
    "title": "affinity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselection/3801816-affinity",
    "html": "Discussion\n\nThe affinity is NSTextSelection.Affinity.downstream by default. For a zero-length selection, it describes the visual location of the text cursor between the head of line containing the selection location (downstream) or tail of the previous line (upstream). For a selection with contents, it describes the logical direction of non-anchored edge of the selection.\n\nSee Also\nCharacteristics of a selection\nenum NSTextSelection.Affinity\nValues that describe the visual location of the text cursor, or the direction of the non-anchored edge of the selection.\nvar anchorPositionOffset: CGFloat\nRepresents the anchor position offset from the beginning of a line fragment in the visual order for the initial tap or click location.\nvar granularity: NSTextSelection.Granularity\nThe granularity of the selection.\nenum NSTextSelection.Granularity\nValues that describe the different granularities available to make a selection.\nvar isLogical: Bool\nA Boolean value that indicates whether the framework interprets the selection as logical or visual.\nvar isTransient: Bool\nA Boolean value that indicates transient text selection during drag handling.\nvar secondarySelectionLocation: NSTextLocation?\nSpecifies the secondary character location when user taps or clicks at a directional boundary.\nprotocol NSTextLocation\nAn interface you implement that represents an abstract location inside your document’s content.\nvar textRanges: [NSTextRange]\nRepresents an array of noncontiguous logical ranges in the selection.\nvar typingAttributes: [NSAttributedString.Key : Any]\nThe template attributes the framework uses for characters that replace the contents of this selection."
  },
  {
    "title": "init(_:affinity:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselection/3801820-init",
    "html": "Parameters\nlocation\n\nThe text location\n\naffinity\n\nOne of the possible NSTextSelection.Affinity options.\n\nSee Also\nCreating a text selection\ninit(range: NSTextRange, affinity: NSTextSelection.Affinity, granularity: NSTextSelection.Granularity)\nCreates a new text selection with the range, selection affinity, and granularity you provide.\ninit([NSTextRange], affinity: NSTextSelection.Affinity, granularity: NSTextSelection.Granularity)\nCreates a new text selection with the ranges, selection affinity, and granularity you provide.\ninit?(coder: NSCoder)\nCreates a test selection from data in an unarchiver."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextselection/3801819-init",
    "html": "Parameters\ncoder\n\nA coder that subclasses NSCoder.\n\nSee Also\nCreating a text selection\ninit(NSTextLocation, affinity: NSTextSelection.Affinity)\nCreates a new text selection with the location and selection affinity you provide.\ninit(range: NSTextRange, affinity: NSTextSelection.Affinity, granularity: NSTextSelection.Granularity)\nCreates a new text selection with the range, selection affinity, and granularity you provide.\ninit([NSTextRange], affinity: NSTextSelection.Affinity, granularity: NSTextSelection.Granularity)\nCreates a new text selection with the ranges, selection affinity, and granularity you provide."
  },
  {
    "title": "exclusionPaths | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontainer/1444569-exclusionpaths",
    "html": "Discussion\n\nThe default value of this property is an empty array. Depending on the platform, you can assign an array of NSBezierPath or UIBezierPath objects to exclude text from one or more regions in the text container’s bounds. When the layout manager proposes a line fragment rectangle intersecting one of the regions defined by the exclusion paths, the text container returns an adjusted line fragment rectangle excluding that region.\n\nSee Also\nDefining the container shape\nvar size: CGSize\nThe size of the text container’s bounding rectangle.\nvar lineBreakMode: NSLineBreakMode\nThe behavior of the last line inside the text container.\nvar widthTracksTextView: Bool\nA Boolean that controls whether the text container adjusts the width of its bounding rectangle when its text view resizes.\nvar heightTracksTextView: Bool\nA Boolean that controls whether the text container adjusts the height of its bounding rectangle when its text view resizes.\nRelated Documentation\nfunc lineFragmentRect(forProposedRect: CGRect, at: Int, writingDirection: NSWritingDirection, remaining: UnsafeMutablePointer<CGRect>?) -> CGRect\nReturns the bounds of a line fragment rectangle inside the text container for the proposed rectangle."
  },
  {
    "title": "screenshotService(_:generatePDFRepresentationWithCompletion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscreenshotservicedelegate/3213937-screenshotservice",
    "html": "Parameters\nscreenshotService\n\nA screenshot service object assigned to the relevant UIWindowScene object. Use the window scene to retrieve the windows of your interface, and generate the PDF content from those windows.\n\ncompletionHandler\n\nThe completion handler block to call with the resulting PDF data. You must call this handler block at the end of your implementation, and pass in the relevant data. This handler block has no return value and takes the following parameters:\n\nPDFData\n\nThe PDF data describing the content in the window scene. If you are unable to produce the PDF data, specify nil.\n\nindexOfCurrentPage\n\nThe page index to associate with the PDF data. If your app separates its data into pages of content, use this parameter to specify the current page that the user is viewing. Page indexes are 0-based, so the first page is at index 0, the second at index 1, and so on. Specify 0 if you don't divide your app's content into pages.\n\nrectInCurrentPage\n\nThe bounds rectangle in the PDF content that approximates what the user was viewing in your window. Specify this rectangle in the PDF-coordinate space, which has an origin in the bottom-left corner of the content and a y-axis that extends upward.\n\nSpecify CGRectZero if you cannot provide the visible rectangle, or if you want the system to always display the PDF content starting at the top of the page.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\noptional func screenshotServiceGeneratePDFRepresentation(_ screenshotService: UIScreenshotService) async -> (Data?, Int, CGRect)\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nWhen the user takes a screenshot of your app, UIKit calls this method to ask you for a PDF version of your content. In your implementation, create a high-fidelity PDF version of your content. At the end of your method, call completionHandler with the results."
  },
  {
    "title": "UIWindowScene.ActivationInteraction.ConfigurationProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscene/activationinteraction/configurationprovider",
    "html": "Parameters\ninteraction\n\nThe UIWindowScene.ActivationInteraction requesting a configuration.\n\nlocation\n\nThe location in the view of the interaction requesting a configuration.\n\nReturn Value\n\nAn activation configuration you can use to request a window scene.\n\nSee Also\nCreating an activation interaction\ninit(UIWindowScene.ActivationInteraction.ConfigurationProvider, errorHandler: (Error) -> Void)\nCreates an activation interaction."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscene/geometrypreferences/ios/4047538-init",
    "html": "See Also\nCreating a geometry preferences object\ninit(interfaceOrientations: UIInterfaceOrientationMask)\nInitializes a new window scene geometry preferences object with the specified interface orientations."
  },
  {
    "title": "UIWindowScene.DismissalAnimation.decline | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscene/dismissalanimation/decline",
    "html": "Discussion\n\nUse this type of animation when the scene contains changes that you don't want to save. For example, a mail app might use this animation when discarding a draft email message or saving it for later.\n\nSee Also\nAnimation styles\ncase standard\nThe standard dismissal animations.\ncase commit\nAnimations to use when saving changes."
  },
  {
    "title": "loadView() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextattachmentviewprovider/3857596-loadview",
    "html": "Discussion\n\nUse this method to create a custom view hierarchy. Don’t call this method directly, the framework calls it at the appropriate time."
  },
  {
    "title": "textLayoutManager | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextattachmentviewprovider/3857599-textlayoutmanager",
    "html": "Discussion\n\nSpecify the value of this property at initialization time using the init(textAttachment:parentView:textLayoutManager:location:) initializer.\n\nSee Also\nDefining the contents\nvar location: NSTextLocation\nThe location that indicates the start of the text attachment.\nvar textAttachment: NSTextAttachment?\nThe text attachment for this view.\nvar tracksTextAttachmentViewBounds: Bool\nA Boolean value that determines the text attachment’s bounds policy.\nvar view: UIView?\nThe text attachment’s view."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontentmanager/3809917-delegate",
    "html": "See Also\nCustomizing and validating text elements\nprotocol NSTextContentManagerDelegate\nThe optional methods that delegates of content manager objects implement for customizing or validating text elements.\nstruct NSTextContentManager.EnumerationOptions\nValues that control the order in which the framework enumerates text elements."
  },
  {
    "title": "UIImage.SymbolWeight.bold | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/symbolweight/bold",
    "html": "See Also\nSymbol image weights\ncase unspecified\nAn unspecified symbol image weight.\ncase ultraLight\nAn ultralight weight.\ncase thin\nA thin weight\ncase light\nA light weight.\ncase regular\nA regular weight.\ncase medium\nA medium weight.\ncase semibold\nA semibold weight.\ncase heavy\nA heavy weight.\ncase black\nAn ultra-heavy weight."
  },
  {
    "title": "recordEditAction(in:newTextRange:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontentmanager/3809923-recordeditaction",
    "html": "Parameters\noriginalTextRange\n\nThe range before the action.\n\nnewTextRange\n\nThe corresponding range after the action.\n\nDiscussion\n\nThe concrete subclass invokes this method for each edit action.\n\nSee Also\nPerforming transactions\nvar hasEditingTransaction: Bool\nIndicates there’s an active editing transaction from the primary text layout manager.\nfunc performEditingTransaction(() -> Void)\nPerforms an editing transaction and invokes a block upon completion."
  },
  {
    "title": "UIImage.SymbolWeight.thin | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/symbolweight/thin",
    "html": "See Also\nSymbol image weights\ncase unspecified\nAn unspecified symbol image weight.\ncase ultraLight\nAn ultralight weight.\ncase light\nA light weight.\ncase regular\nA regular weight.\ncase medium\nA medium weight.\ncase semibold\nA semibold weight.\ncase bold\nA bold weight.\ncase heavy\nA heavy weight.\ncase black\nAn ultra-heavy weight."
  },
  {
    "title": "UIImage.SymbolWeight.unspecified | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/symbolweight/unspecified",
    "html": "See Also\nSymbol image weights\ncase ultraLight\nAn ultralight weight.\ncase thin\nA thin weight\ncase light\nA light weight.\ncase regular\nA regular weight.\ncase medium\nA medium weight.\ncase semibold\nA semibold weight.\ncase bold\nA bold weight.\ncase heavy\nA heavy weight.\ncase black\nAn ultra-heavy weight."
  },
  {
    "title": "UIImage.SymbolWeight.black | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/symbolweight/black",
    "html": "See Also\nSymbol image weights\ncase unspecified\nAn unspecified symbol image weight.\ncase ultraLight\nAn ultralight weight.\ncase thin\nA thin weight\ncase light\nA light weight.\ncase regular\nA regular weight.\ncase medium\nA medium weight.\ncase semibold\nA semibold weight.\ncase bold\nA bold weight.\ncase heavy\nA heavy weight."
  },
  {
    "title": "primaryTextLayoutManager | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontentmanager/3809922-primarytextlayoutmanager",
    "html": "Discussion\n\nSetting this property to an NSTextLayoutManager not in textLayoutManagers resets it to nil. It automatically synchronizes pending edits before switching to a new primary object. The operation is synchronous.\n\nThis property is KVO-compliant.\n\nSee Also\nWorking with layout managers\nvar textLayoutManagers: [NSTextLayoutManager]\nThe array of text layout managers associated with this text content manager.\nvar automaticallySynchronizesTextLayoutManagers: Bool\nDetermines if the framework should automatically synchronize all text layout managers when exiting an editing transaction.\nfunc addTextLayoutManager(NSTextLayoutManager)\nAdds the layout manager you provide to the list of layout managers.\nfunc removeTextLayoutManager(NSTextLayoutManager)\nRemoves the layout manager you specifiy from the list of layout managers.\nfunc synchronizeTextLayoutManagers(((Error?) -> Void)?)\nSynchronizes changes to all nonprimary text layout managers."
  },
  {
    "title": "minimumSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscenesizerestrictions/3368161-minimumsize",
    "html": "See Also\nSetting the size restrictions\nvar maximumSize: CGSize\nThe maximum width and height supported by your app’s windows.\nvar allowsFullScreen: Bool\nA Boolean value that indicates whether the scene can appear full screen."
  },
  {
    "title": "removeTextLayoutManager(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontentmanager/3809924-removetextlayoutmanager",
    "html": "Parameters\ntextLayoutManager\n\nThe layout manager to remove.\n\nSee Also\nWorking with layout managers\nvar primaryTextLayoutManager: NSTextLayoutManager?\nThe primary text layout manager for this content.\nvar textLayoutManagers: [NSTextLayoutManager]\nThe array of text layout managers associated with this text content manager.\nvar automaticallySynchronizesTextLayoutManagers: Bool\nDetermines if the framework should automatically synchronize all text layout managers when exiting an editing transaction.\nfunc addTextLayoutManager(NSTextLayoutManager)\nAdds the layout manager you provide to the list of layout managers.\nfunc synchronizeTextLayoutManagers(((Error?) -> Void)?)\nSynchronizes changes to all nonprimary text layout managers."
  },
  {
    "title": "textLayoutManagers | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontentmanager/3809929-textlayoutmanagers",
    "html": "Discussion\n\nThis property is KVO-compliant.\n\nSee Also\nWorking with layout managers\nvar primaryTextLayoutManager: NSTextLayoutManager?\nThe primary text layout manager for this content.\nvar automaticallySynchronizesTextLayoutManagers: Bool\nDetermines if the framework should automatically synchronize all text layout managers when exiting an editing transaction.\nfunc addTextLayoutManager(NSTextLayoutManager)\nAdds the layout manager you provide to the list of layout managers.\nfunc removeTextLayoutManager(NSTextLayoutManager)\nRemoves the layout manager you specifiy from the list of layout managers.\nfunc synchronizeTextLayoutManagers(((Error?) -> Void)?)\nSynchronizes changes to all nonprimary text layout managers."
  },
  {
    "title": "automaticallySynchronizesTextLayoutManagers | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontentmanager/3852564-automaticallysynchronizestextlay",
    "html": "See Also\nWorking with layout managers\nvar primaryTextLayoutManager: NSTextLayoutManager?\nThe primary text layout manager for this content.\nvar textLayoutManagers: [NSTextLayoutManager]\nThe array of text layout managers associated with this text content manager.\nfunc addTextLayoutManager(NSTextLayoutManager)\nAdds the layout manager you provide to the list of layout managers.\nfunc removeTextLayoutManager(NSTextLayoutManager)\nRemoves the layout manager you specifiy from the list of layout managers.\nfunc synchronizeTextLayoutManagers(((Error?) -> Void)?)\nSynchronizes changes to all nonprimary text layout managers."
  },
  {
    "title": "textElements(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontentmanager/3809928-textelements",
    "html": "Parameters\nrange\n\nAn NSTextRange that describes the range of text to process.\n\nReturn Value\n\nAn array of NSTextElement.\n\nDiscussion\n\nThis method can return a set of elements that don’t fill the entire range if the entire range isn’t synchronously available. Uses enumerateTextElements(from:options:using:) to fill the array."
  },
  {
    "title": "NSTextContentManagerDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontentmanagerdelegate",
    "html": "Topics\nFinding a text element at a specific location\nfunc textContentManager(NSTextContentManager, textElementAt: NSTextLocation) -> NSTextElement?\nThe method the framework calls to return the text element at a specific location.\nValidating a text element\nfunc textContentManager(NSTextContentManager, shouldEnumerate: NSTextElement, options: NSTextContentManager.EnumerationOptions) -> Bool\nReturns a Boolean value that indicates whether the framework should skip this text element in the enumeration.\nRelationships\nInherits From\nNSObjectProtocol\nInherited By\nNSTextContentStorageDelegate\nSee Also\nCustomizing and validating text elements\nvar delegate: NSTextContentManagerDelegate?\nThe delegate for the content manager object.\nstruct NSTextContentManager.EnumerationOptions\nValues that control the order in which the framework enumerates text elements."
  },
  {
    "title": "init(title:subtitle:image:identifier:discoverabilityTitle:attributes:alternate:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscene/activationaction/3869656-init",
    "html": "Parameters\ntitle\n\nThe title to display for the action.\n\nsubtitle\n\nThe subtitle to display for the action.\n\nimage\n\nThe image to display next to the action’s title. Only the context menu system supports the display of an image, and only when the app is running in iOS.\n\nidentifier\n\nThe unique identifier for the action. Specify nil to let this method create a unique identifier for you.\n\ndiscoverabilityTitle\n\nAn elaborated title that explains the purpose of the action.\n\nattributes\n\nThe attributes indicating the style of the action.\n\nalternate\n\nAn alternate action to perform if the platform doesn’t support multiple scenes or if requesting a scene fails.\n\nconfiguration\n\nThe closure the system calls when the user selects the action. The closure should return a UIWindowScene.ActivationConfiguration object.\n\nSee Also\nCreating an activation action\ntypealias UIWindowScene.ActivationAction.ConfigurationProvider\nA type alias defining a closure that provides an activation configuration for the activation action."
  },
  {
    "title": "init(attributedString:range:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlinefragment/3810042-init",
    "html": "Parameters\nattributedString\n\nThe attributed string.\n\nrange\n\nAn NSRange that specifies which characters to include.\n\nSee Also\nCreating line fragments\ninit?(coder: NSCoder)\nCreates a new line fragment with from data in an unarchiver.\ninit(string: String, attributes: [NSAttributedString.Key : Any], range: NSRange)\nCreates a new line fragment using the string, attributes, and range you provide."
  },
  {
    "title": "NSTextViewportLayoutControllerDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextviewportlayoutcontrollerdelegate",
    "html": "Topics\nResponding to changes in the viewport\nfunc textViewportLayoutController(NSTextViewportLayoutController, configureRenderingSurfaceFor: NSTextLayoutFragment)\nThe method the framework calls when the layout controller lays out a text layout fragment in the UI.\n\nRequired\n\nfunc textViewportLayoutControllerDidLayout(NSTextViewportLayoutController)\nThe method the framework calls when the text viewport layout controller finishes its layout process.\nfunc textViewportLayoutControllerWillLayout(NSTextViewportLayoutController)\nThe method the framework calls before the text viewport layout controller starts its layout process.\nfunc viewportBounds(for: NSTextViewportLayoutController) -> CGRect\nReturns the current viewport, which is the view visible bounds plus the overdraw area.\n\nRequired\n\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nResponding to changes in viewport layout\nvar delegate: NSTextViewportLayoutControllerDelegate?\nThe delegate for the text layout manager object."
  },
  {
    "title": "representedURL | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uititlebar/3375823-representedurl",
    "html": "Discussion\n\nThe window shows a documentation icon in the title bar when this property isn’t nil and the URL has a non-empty path. If the URL represents a filename or other resource with a known icon, the window displays that icon as the document icon; otherwise, the window displays a default document icon.\n\nWhen the windows displays a document icon, a pop-up menu is also available by Command-clicking the area containing the icon and title. The pop-up menu displays the path components of the URL.\n\nIf representedURL is nil or the URL path is empty, the document icon and pop-up menu aren’t available.\n\nSee Also\nConfiguring the title bar\nvar separatorStyle: UITitlebarSeparatorStyle\nThe type of separator that the app displays between the title bar and content of a window.\nenum UITitlebarSeparatorStyle\nStyles that determine the type of separator displayed between the title bar and content of a window.\nvar titleVisibility: UITitlebarTitleVisibility\nA value that indicates the visibility of the title.\nenum UITitlebarTitleVisibility\nStates that determine visibility of the title in the title bar."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontainer/1444573-init",
    "html": "Parameters\ncoder\n\nA coder that implements NSCoder.\n\nSee Also\nCreating a text container\ninit(size: CGSize)\nInitializes a text container with a specified bounding rectangle."
  },
  {
    "title": "offset(from:to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextelementprovider/3809947-offset",
    "html": "Parameters\nfrom\n\nA starting location.\n\nto\n\nAn ending location.\n\nReturn Value\n\nAn Integer that represents the offset between the starting and ending locations.\n\nDiscussion\n\nThe return value could be positive or negative. This method can return NSNotFound when the method can’t represent an offset as an integer value. This can occur, for example, if the locations aren’t in the same document).\n\nSee Also\nAdjusting the range of the text element\nfunc adjustedRange(from: NSTextRange, forEditingTextSelection: Bool) -> NSTextRange?\nA method you implement if the location backing store requires manual adjustment after editing."
  },
  {
    "title": "layoutManager | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontainer/1444517-layoutmanager",
    "html": "Discussion\n\nAvoid assigning a layout manager directly through this property. Instead, use the replaceLayoutManager(_:) method when you want to replace the layout manager. The framework sets the value of this property automatically when you add a text container to your layout manager using the addTextContainer(_:) method.\n\nSee Also\nManaging text components\nvar textLayoutManager: NSTextLayoutManager?\nfunc replaceLayoutManager(NSLayoutManager)\nReplaces the layout manager for the group of text system objects that contains the text container.\nvar textView: NSTextView?\nThe text container’s text view.\nRelated Documentation\nfunc addTextContainer(NSTextContainer)\nAppends the specified text container to the series of text containers where the layout manager arranges text."
  },
  {
    "title": "fractionOfDistanceThroughGlyph(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlinefragment/3852579-fractionofdistancethroughglyph",
    "html": "Parameters\npoint\n\nA CGPoint that represents the point inside the line fragment.\n\nReturn Value\n\nThe fraction of distance from the upstream edge.\n\nSee Also\nFinding specific text\nfunc characterIndex(for: CGPoint) -> Int\nReturns character index for a point inside the line fragment coordinate system.\nfunc locationForCharacter(at: Int) -> CGPoint\nReturns the location of the character at the specified index."
  },
  {
    "title": "locationForCharacter(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlinefragment/3810045-locationforcharacter",
    "html": "Parameters\nindex\n\nAn integer that represents the position in the text.\n\nReturn Value\n\nA CGPoint that‘s on the upstream edge of the glyph. It’s in the coordinate system relative to the line fragment origin.\n\nSee Also\nFinding specific text\nfunc characterIndex(for: CGPoint) -> Int\nReturns character index for a point inside the line fragment coordinate system.\nfunc fractionOfDistanceThroughGlyph(for: CGPoint) -> CGFloat\nReturns character index for a point inside the line fragment coordinate system."
  },
  {
    "title": "lineFragmentPadding | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontainer/1444527-linefragmentpadding",
    "html": "Discussion\n\nThe padding appears at the beginning and end of the line fragment rectangles. The layout manager uses this value to determine the layout width. The default value of this property is 5.0.\n\nLine fragment padding is not designed to express text margins. Instead, you should use insets on your text view, adjust the paragraph margin attributes, or change the position of the text view within its superview.\n\nSee Also\nConstraining text layout\nvar maximumNumberOfLines: Int\nThe maximum number of lines that the text container can store.\nfunc lineFragmentRect(forProposedRect: CGRect, at: Int, writingDirection: NSWritingDirection, remaining: UnsafeMutablePointer<CGRect>?) -> CGRect\nReturns the bounds of a line fragment rectangle inside the text container for the proposed rectangle.\nvar isSimpleRectangularTextContainer: Bool\nA Boolean that indicates whether the text container’s region is a rectangle with no holes or gaps, and whose edges are parallel to the text view's coordinate system axes.\nRelated Documentation\nfunc lineFragmentRect(forProposedRect: NSRect, sweepDirection: NSLineSweepDirection, movementDirection: NSLineMovementDirection, remaining: NSRectPointer?) -> NSRect\nCalculates and returns the longest rectangle available in the proposed rectangle for displaying text."
  },
  {
    "title": "UIWindowScene.GeometryPreferences.Vision | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscene/geometrypreferences/vision",
    "html": "Topics\nInitializers\ninit(size: CGSize?, minimumSize: CGSize?, maximumSize: CGSize?, resizingRestrictions: UIWindowScene.ResizingRestrictions?)\nInstance Properties\nvar maximumSize: CGSize?\nvar minimumSize: CGSize?\nvar resizingRestrictions: UIWindowScene.ResizingRestrictions?\nvar size: CGSize?\nRelationships\nInherits From\nUIWindowScene.GeometryPreferences"
  },
  {
    "title": "layoutManager(_:shouldUse:forControlCharacterAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1403167-layoutmanager",
    "html": "Parameters\nlayoutManager\n\nThe layout manager doing the layout.\n\naction\n\nThe proposed control character action for the character at the given index. Possible values are enumerated by NSLayoutManager.ControlCharacterAction.\n\ncharIndex\n\nThe index of the control character for which the action is proposed.\n\nReturn Value\n\nThe control character action for the control character at the given index.\n\nSee Also\nInvalidating glyphs and layout\nfunc layoutManagerDidInvalidateLayout(NSLayoutManager)\nInforms the delegate when the specified layout manager invalidates layout information (not glyph information).\nfunc layoutManager(NSLayoutManager, shouldGenerateGlyphs: UnsafePointer<CGGlyph>, properties: UnsafePointer<NSLayoutManager.GlyphProperty>, characterIndexes: UnsafePointer<Int>, font: UIFont, forGlyphRange: NSRange) -> Int\nEnables customization of the initial glyph generation process.\nstruct NSLayoutManager.ControlCharacterAction\nConstants that describe actions for control characters."
  },
  {
    "title": "init(_:errorHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscene/activationinteraction/3752232-init",
    "html": "Parameters\nconfigurationProvider\n\nThe closure the system calls when the user triggers the interaction. The closure should return a UIWindowScene.ActivationConfiguration object.\n\nerrorHandler\n\nThe closure the system calls when the activation request fails.\n\nReturn Value\n\nA newly initialized activation interaction object.\n\nSee Also\nCreating an activation interaction\ntypealias UIWindowScene.ActivationInteraction.ConfigurationProvider\nA type alias defining a closure that provides an activation configuration for the activation interaction."
  },
  {
    "title": "init(interfaceOrientations:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscene/geometrypreferences/ios/4047539-init",
    "html": "See Also\nCreating a geometry preferences object\ninit()\nInitializes a new window scene geometry preferences object."
  },
  {
    "title": "interfaceOrientations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscene/geometrypreferences/ios/4047549-interfaceorientations",
    "html": "Discussion\n\nIf you specify this value, the system automatically chooses an orientation from the intersection of these preferred orientations and the supported orientations."
  },
  {
    "title": "init(textAttachment:parentView:textLayoutManager:location:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextattachmentviewprovider/3857595-init",
    "html": "Parameters\ntextAttachment\n\nThe NSTextAttachment for this view.\n\nparentView\n\nThe parent view of this attachment.\n\ntextLayoutManager\n\nThe NSTextLayoutManager for this view.\n\nlocation\n\nThe NSTextLocation that identifies the start of the text."
  },
  {
    "title": "textAttachment | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextattachmentviewprovider/3857598-textattachment",
    "html": "Discussion\n\nSpecify the value of this property at initialization time using the init(textAttachment:parentView:textLayoutManager:location:) initializer.\n\nSee Also\nDefining the contents\nvar location: NSTextLocation\nThe location that indicates the start of the text attachment.\nvar textLayoutManager: NSTextLayoutManager?\nThe text layout manager for this view.\nvar tracksTextAttachmentViewBounds: Bool\nA Boolean value that determines the text attachment’s bounds policy.\nvar view: UIView?\nThe text attachment’s view."
  },
  {
    "title": "location | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextattachmentviewprovider/3857597-location",
    "html": "Discussion\n\nSpecify the value of this property at initialization time using the init(textAttachment:parentView:textLayoutManager:location:) initializer.\n\nSee Also\nDefining the contents\nvar textAttachment: NSTextAttachment?\nThe text attachment for this view.\nvar textLayoutManager: NSTextLayoutManager?\nThe text layout manager for this view.\nvar tracksTextAttachmentViewBounds: Bool\nA Boolean value that determines the text attachment’s bounds policy.\nvar view: UIView?\nThe text attachment’s view."
  },
  {
    "title": "UIWindowScene.DismissalAnimation.standard | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscene/dismissalanimation/standard",
    "html": "Discussion\n\nUse this type of animation when you want the system to perform a standard dismissal animation. For example, you might use this animation to close a scene displaying a web page.\n\nSee Also\nAnimation styles\ncase commit\nAnimations to use when saving changes.\ncase decline\nAnimations to use when declining changes."
  },
  {
    "title": "attachmentBounds(for:location:textContainer:proposedLineFragment:position:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextattachmentviewprovider/3857594-attachmentbounds",
    "html": "Parameters\nattributes\n\nA dictionary that contains a list of key and attribute pairs that describe the customization of the string.\n\nlocation\n\nAn NSTextLocation that indicates that start of the string.\n\ntextContainer\n\nThe NSTextContainer that contains the source string.\n\nproposedLineFragment\n\nA CGRect that describes the boundaries of the line fragment.\n\nposition\n\nA CGPoint inside proposedLineFragment.\n\nReturn Value\n\nReturns a CGRect that describes the bounds of the attachment."
  },
  {
    "title": "tracksTextAttachmentViewBounds | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextattachmentviewprovider/3857600-trackstextattachmentviewbounds",
    "html": "Discussion\n\nIf true, the framework calls the textAttachment property’s attachmentBounds(for:location:textContainer:proposedLineFragment:position:)method and examines the text attachment view provider to determine the bounds instead of using the bounds property of this instance. Defaults to false.\n\nSee Also\nDefining the contents\nvar location: NSTextLocation\nThe location that indicates the start of the text attachment.\nvar textAttachment: NSTextAttachment?\nThe text attachment for this view.\nvar textLayoutManager: NSTextLayoutManager?\nThe text layout manager for this view.\nvar view: UIView?\nThe text attachment’s view."
  },
  {
    "title": "UIWindowScene.DismissalAnimation.commit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscene/dismissalanimation/commit",
    "html": "Discussion\n\nUse this type of animation when the scene contains changes that you want to save. For example, a mail app might use this animation when sending an email message displayed in a scene.\n\nSee Also\nAnimation styles\ncase standard\nThe standard dismissal animations.\ncase decline\nAnimations to use when declining changes."
  },
  {
    "title": "maximumSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscenesizerestrictions/3368160-maximumsize",
    "html": "See Also\nSetting the size restrictions\nvar minimumSize: CGSize\nThe minimum width and height supported by your app’s windows.\nvar allowsFullScreen: Bool\nA Boolean value that indicates whether the scene can appear full screen."
  },
  {
    "title": "gestureForFailureRelationships | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscenedraginteraction/4200083-gestureforfailurerelationships",
    "html": "Discussion\n\nIf your app provides other gestures in the same view hierarchy, you may want to set up failure requirements between your app’s gestures and the drag interaction’s gesture. To do this, use the require(toFail:) method to relate your gestures to this gesture. For example:\n\nwindowDragInteraction.gestureForFailureRelationships.require(toFail: swipeGesture)\n"
  },
  {
    "title": "allowsFullScreen | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscenesizerestrictions/3930380-allowsfullscreen",
    "html": "See Also\nSetting the size restrictions\nvar minimumSize: CGSize\nThe minimum width and height supported by your app’s windows.\nvar maximumSize: CGSize\nThe maximum width and height supported by your app’s windows."
  },
  {
    "title": "performEditingTransaction(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontentmanager/3809921-performeditingtransaction",
    "html": "Parameters\ntransaction\n\nThe editing transaction.\n\nDiscussion\n\nThe primary NSTextLayoutManager controlling the active editing transaction invokes this method. It’s possible to nest multiple editing transactions. The outer most transaction toggles hasEditingTransaction and sends synchronization messages if enabled after invoking a transaction.\n\nSee Also\nPerforming transactions\nvar hasEditingTransaction: Bool\nIndicates there’s an active editing transaction from the primary text layout manager.\nfunc recordEditAction(in: NSTextRange, newTextRange: NSTextRange)\nRecords information about an edit action to the transaction."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontentmanager/3809920-init",
    "html": "Parameters\ncoder\n\nAn unachiver that conforms to the NSCoder class.\n\nSee Also\nCreating a content manager\ninit()\nCreates a new content manager."
  },
  {
    "title": "UIImage.SymbolWeight.heavy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/symbolweight/heavy",
    "html": "See Also\nSymbol image weights\ncase unspecified\nAn unspecified symbol image weight.\ncase ultraLight\nAn ultralight weight.\ncase thin\nA thin weight\ncase light\nA light weight.\ncase regular\nA regular weight.\ncase medium\nA medium weight.\ncase semibold\nA semibold weight.\ncase bold\nA bold weight.\ncase black\nAn ultra-heavy weight."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontentmanager/3809919-init",
    "html": "See Also\nCreating a content manager\ninit?(coder: NSCoder)\nCreates a new content manager object from data in an unarchiver."
  },
  {
    "title": "UIImage.SymbolWeight.semibold | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/symbolweight/semibold",
    "html": "See Also\nSymbol image weights\ncase unspecified\nAn unspecified symbol image weight.\ncase ultraLight\nAn ultralight weight.\ncase thin\nA thin weight\ncase light\nA light weight.\ncase regular\nA regular weight.\ncase medium\nA medium weight.\ncase bold\nA bold weight.\ncase heavy\nA heavy weight.\ncase black\nAn ultra-heavy weight."
  },
  {
    "title": "fontWeight() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/symbolweight/3294237-fontweight",
    "html": "Parameters\nsymbolWeight\n\nThe symbol weight whose font weight you want.\n\nReturn Value\n\nThe UIFont.Weight value that matches the specified symbol weight."
  },
  {
    "title": "hasEditingTransaction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontentmanager/3809918-haseditingtransaction",
    "html": "Discussion\n\nWhen this property is true, there’s an active editing transaction from the primaryTextLayoutManager. The synchronization operations to nonprimary text layout managers and the backing store block (or fail when synchronous) while this property is true. Avoid accessing the elements from a nonprimary text layout manager while this values is true.\n\nThis property is KVO-compliant.\n\nSee Also\nPerforming transactions\nfunc performEditingTransaction(() -> Void)\nPerforms an editing transaction and invokes a block upon completion.\nfunc recordEditAction(in: NSTextRange, newTextRange: NSTextRange)\nRecords information about an edit action to the transaction."
  },
  {
    "title": "NSTextContentManager.EnumerationOptions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontentmanager/enumerationoptions",
    "html": "Topics\nCreating text element provider enumeration options\ninit(rawValue: UInt)\nCreates a new text element provider with the provided raw value.\nAccessing the enumeration setting\nstatic var reverse: NSTextContentManager.EnumerationOptions\nReturns whether enumerations start from the end of the text element.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nCustomizing and validating text elements\nvar delegate: NSTextContentManagerDelegate?\nThe delegate for the content manager object.\nprotocol NSTextContentManagerDelegate\nThe optional methods that delegates of content manager objects implement for customizing or validating text elements."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscene/resizingrestrictions/4245732-hash",
    "html": "Relationships\nFrom Protocol\nHashable"
  },
  {
    "title": "separatorStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uititlebar/3664137-separatorstyle",
    "html": "Discussion\n\nThe default value is UITitlebarSeparatorStyle.automatic.\n\nSee Also\nConfiguring the title bar\nenum UITitlebarSeparatorStyle\nStyles that determine the type of separator displayed between the title bar and content of a window.\nvar titleVisibility: UITitlebarTitleVisibility\nA value that indicates the visibility of the title.\nenum UITitlebarTitleVisibility\nStates that determine visibility of the title in the title bar.\nvar representedURL: URL?\nA URL of the file or resource represented in the window."
  },
  {
    "title": "inputLeftArrow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeycommand/1621114-inputleftarrow",
    "html": "See Also\nNavigation keys\nclass let inputUpArrow: String\nA string representing the Up Arrow key.\nclass let inputDownArrow: String\nA string representing the Down Arrow key.\nclass let inputRightArrow: String\nA string representing the Right Arrow key.\nclass let inputHome: String\nA string representing the Home key.\nclass let inputEnd: String\nA string representing the End key.\nclass let inputPageUp: String\nA string representing the Page Up key.\nclass let inputPageDown: String\nA string representing the Page Down key."
  },
  {
    "title": "sourceRect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitooltipconfiguration/3864376-sourcerect",
    "html": "Discussion\n\nTo set sourceRect, create a tooltip configuration object using the init(toolTip:in:) method.\n\nSee Also\nAccessing the configuration settings\nvar toolTip: String\nThe text to display in the tooltip."
  },
  {
    "title": "documentRange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextelementprovider/3809944-documentrange",
    "html": "Required\n\nDiscussion\n\nThe subclass could use its own implementation of a location object conforming to NSTextRange."
  },
  {
    "title": "draw(at:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlinefragment/3824754-draw",
    "html": "Parameters\npoint\n\nThe origin as a CGPoint.\n\ncontext\n\nThe drawing context.\n\nDiscussion\n\nYou can specify the origin as (NSMinX(typographicBounds) + glyphOrigin.x, NSMinY(typographicBounds) + glyphOrigin.y) relative to the line fragment group coordinate system."
  },
  {
    "title": "lineBreakMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontainer/1444519-linebreakmode",
    "html": "Discussion\n\nThe NSLineBreakMode constants specify what happens when a line is too long for its container. For example, wrapping can occur on word boundaries (the default) or character boundaries, or the line can be clipped or truncated. The default value of this property is NSLineBreakMode.byWordWrapping.\n\nSee Also\nDefining the container shape\nvar size: CGSize\nThe size of the text container’s bounding rectangle.\nvar exclusionPaths: [UIBezierPath]\nAn array of path objects that represents the regions where text doesn’t display in the text container.\nvar widthTracksTextView: Bool\nA Boolean that controls whether the text container adjusts the width of its bounding rectangle when its text view resizes.\nvar heightTracksTextView: Bool\nA Boolean that controls whether the text container adjusts the height of its bounding rectangle when its text view resizes."
  },
  {
    "title": "NSTextLayoutFragment.EnumerationOptions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutfragment/enumerationoptions",
    "html": "Topics\nCreating a layout fragment enumeration\ninit(rawValue: UInt)\nCreates an instance of the enumeration with the provided unsigned integer value.\nLayout fragment characteristics\nstatic var ensuresExtraLineFragment: NSTextLayoutFragment.EnumerationOptions\nSynthesize the extra line fragment when necessary.\nstatic var ensuresLayout: NSTextLayoutFragment.EnumerationOptions\nWhen enumerating, tell the layout fragments to layout their contents.\nstatic var estimatesSize: NSTextLayoutFragment.EnumerationOptions\nWhen enumerating, tell the layout fragments to estimate their size.\nstatic var reverse: NSTextLayoutFragment.EnumerationOptions\nCauses the enumeration to start from the last element.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nGetting line fragments\nvar textLineFragments: [NSTextLineFragment]\nAn array of text line fragments.\nfunc textLineFragment(for: NSTextLocation, isUpstreamAffinity: Bool) -> NSTextLineFragment?\nReturns a text line fragment from a specific text location in the document.\nfunc textLineFragment(forVerticalOffset: CGFloat, requiresExactMatch: Bool) -> NSTextLineFragment?\nReturns the text line fragment for the vertical offset you provide, or the closest text line fragment beyond the vertical offset."
  },
  {
    "title": "enumerateTextElements(from:options:using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextelementprovider/3809945-enumeratetextelements",
    "html": "Required\n\nParameters\ntextLocation\n\nThe NSTextLocation at which to start the enumeration.\n\noptions\n\nOne of the possible NSTextElementProviderEnumerationOptions directions.\n\nblock\n\nA block you use to evaluate whether to continue the enumeration or tell the method to stop. Return false to end the enumeration process.\n\nReturn Value\n\nAn NSTextLocation.\n\nDiscussion\n\nIf textLocation is nil, the method uses documentRange.location for forward enumeration and documentRange.endLocation for reverse enumeration. When enumerating backward, the method starts with the element preceding the one containing textLocation. If enumerated at least one element, it returns the edge of the enumerated range.\n\nThe enumerated range might not match the range of the last element returned. It enumerates the elements in the sequence, but it can skip a range (it can limit the maximum number of text elements enumerated for a single invocation or hide some elements from the layout).\n\nReturning NO or false from block breaks out of the enumeration.\n\nSee Also\nAccessing and updating the text\nstruct NSTextLayoutFragment.EnumerationOptions\nValues that describe options for enumerating text layout fragments.\nfunc location(NSTextLocation, offsetBy: Int) -> NSTextLocation?\nReturns a new location from location with offset you provide.\nfunc replaceContents(in: NSTextRange, with: [NSTextElement]?)\nReplaces the characters specified by range with the text elements you provide.\n\nRequired"
  },
  {
    "title": "replaceContents(in:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextelementprovider/3809948-replacecontents",
    "html": "Required\n\nParameters\nrange\n\nAn NSTextRange.\n\ntextElements\n\nThe elements to replace that characters at range.\n\nDiscussion\n\nIf the edges of range aren’t at existing element range boundaries, the method either splits the element if it allows the operation (for example, NSTextParagraph), or the adjusts the replacement range.\n\nNote\n\nThis method is for use by NSTextLayoutManager.\n\nSee Also\nAccessing and updating the text\nfunc enumerateTextElements(from: NSTextLocation?, options: NSTextContentManager.EnumerationOptions, using: (NSTextElement) -> Bool) -> NSTextLocation?\nEnumerates text elements starting at the text location you provide.\n\nRequired\n\nstruct NSTextLayoutFragment.EnumerationOptions\nValues that describe options for enumerating text layout fragments.\nfunc location(NSTextLocation, offsetBy: Int) -> NSTextLocation?\nReturns a new location from location with offset you provide."
  },
  {
    "title": "synchronizeToBackingStore(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextelementprovider/3809949-synchronizetobackingstore",
    "html": "Required\n\nParameters\ncompletionHandler\n\nA completion handler to run upon successful completion, or to process an error upon failure.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc synchronizeToBackingStore() async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nIf completionHandler is nil, performs the operation synchronously. The completionHandler gets passed error if the synchronization fails. It should block (or fails if synchronous) when there’s an active transaction."
  },
  {
    "title": "location(_:offsetBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextelementprovider/3809946-location",
    "html": "Parameters\nlocation\n\nAn NSTextLocation in the text element.\n\noffset\n\nAn offset of the number of characters to or from location.\n\nReturn Value\n\nAn new NSTextLocation, or nil of the offset exceeds the bounds of the text.\n\nSee Also\nAccessing and updating the text\nfunc enumerateTextElements(from: NSTextLocation?, options: NSTextContentManager.EnumerationOptions, using: (NSTextElement) -> Bool) -> NSTextLocation?\nEnumerates text elements starting at the text location you provide.\n\nRequired\n\nstruct NSTextLayoutFragment.EnumerationOptions\nValues that describe options for enumerating text layout fragments.\nfunc replaceContents(in: NSTextRange, with: [NSTextElement]?)\nReplaces the characters specified by range with the text elements you provide.\n\nRequired"
  },
  {
    "title": "adjustedRange(from:forEditingTextSelection:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextelementprovider/3852573-adjustedrange",
    "html": "Parameters\ntextRange\n\nAn NSTextRange that the method adjusts.\n\nforEditingTextSelection\n\nA Boolean value that indicates if textRange is for the text selection associated with the edit session.\n\nReturn Value\n\nWhen textRange is intersecting or following the current edited range, the method returns the range adjusted for the modification in the editing session. Returns nil, when no adjustment necessary.\n\nSee Also\nAdjusting the range of the text element\nfunc offset(from: NSTextLocation, to: NSTextLocation) -> Int\nReturns the offset between the two specified locations."
  },
  {
    "title": "init(textContentManager:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextelement/3809955-init",
    "html": "Parameters\ntextContentManager\n\nThe NSTextContentManager to apply to this text element."
  },
  {
    "title": "isRepresentedElement | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextelement/4018403-isrepresentedelement",
    "html": "See Also\nAccessing text elements\nvar parent: NSTextElement?\nA value that represents the parent element if this text element is a child of an enclosing element.\nvar childElements: [NSTextElement]\nAn array of zero or more child text elements."
  },
  {
    "title": "parent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextelement/4018404-parent",
    "html": "See Also\nAccessing text elements\nvar isRepresentedElement: Bool\nA Boolean value that indicates whether this element is in the text layout.\nvar childElements: [NSTextElement]\nAn array of zero or more child text elements."
  },
  {
    "title": "childElements | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextelement/4018402-childelements",
    "html": "See Also\nAccessing text elements\nvar isRepresentedElement: Bool\nA Boolean value that indicates whether this element is in the text layout.\nvar parent: NSTextElement?\nA value that represents the parent element if this text element is a child of an enclosing element."
  },
  {
    "title": "replaceLayoutManager(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontainer/1444545-replacelayoutmanager",
    "html": "Parameters\naLayoutManager\n\nThe new layout manager.\n\nDiscussion\n\nThe framework reassigns all text containers and text views attached to the old layout manager to the new layout manager. Unlike setting the layoutManager property directly, this method makes all the adjustments necessary to keep the text object relationships intact.\n\nSee Also\nManaging text components\nvar layoutManager: NSLayoutManager?\nThe text container’s layout manager.\nvar textLayoutManager: NSTextLayoutManager?\nvar textView: NSTextView?\nThe text container’s text view."
  },
  {
    "title": "widthTracksTextView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontainer/1444563-widthtrackstextview",
    "html": "Discussion\n\nWhen the value of this property is true, the text container adjusts its width when the width of its text view changes. The default value of this property is false.\n\nFor more information about size tracking, see Text System Storage Layer Overview.\n\nSee Also\nDefining the container shape\nvar size: CGSize\nThe size of the text container’s bounding rectangle.\nvar exclusionPaths: [UIBezierPath]\nAn array of path objects that represents the regions where text doesn’t display in the text container.\nvar lineBreakMode: NSLineBreakMode\nThe behavior of the last line inside the text container.\nvar heightTracksTextView: Bool\nA Boolean that controls whether the text container adjusts the height of its bounding rectangle when its text view resizes.\nRelated Documentation\nvar containerSize: NSSize\nThe size of the text container’s bounding rectangle."
  },
  {
    "title": "NSLayoutManager.TextLayoutOrientation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/textlayoutorientation",
    "html": "Topics\nConstants\ncase horizontal\nLines render horizontally, each line following the previous from top to bottom.\ncase vertical\nLines render vertically, each line following the previous from right to left.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "isSimpleRectangularTextContainer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontainer/1444525-issimplerectangulartextcontainer",
    "html": "Discussion\n\nThe value of this property is true when the text container’s region is a rectangle with no holes or gaps and the edges are parallel to the text view's coordinate system axes. The default value of this property is false when the exclusionPaths property contains one or more items, when the maximumNumberOfLines property is not zero, or when you override the lineFragmentRect(forProposedRect:at:writingDirection:remaining:) method. Otherwise, the default value is true.\n\nSee Also\nConstraining text layout\nvar maximumNumberOfLines: Int\nThe maximum number of lines that the text container can store.\nvar lineFragmentPadding: CGFloat\nThe value for the text inset within line fragment rectangles.\nfunc lineFragmentRect(forProposedRect: CGRect, at: Int, writingDirection: NSWritingDirection, remaining: UnsafeMutablePointer<CGRect>?) -> CGRect\nReturns the bounds of a line fragment rectangle inside the text container for the proposed rectangle."
  },
  {
    "title": "UIImage.SymbolWeight.light | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/symbolweight/light",
    "html": "See Also\nSymbol image weights\ncase unspecified\nAn unspecified symbol image weight.\ncase ultraLight\nAn ultralight weight.\ncase thin\nA thin weight\ncase regular\nA regular weight.\ncase medium\nA medium weight.\ncase semibold\nA semibold weight.\ncase bold\nA bold weight.\ncase heavy\nA heavy weight.\ncase black\nAn ultra-heavy weight."
  },
  {
    "title": "UIImage.SymbolWeight.ultraLight | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/symbolweight/ultralight",
    "html": "See Also\nSymbol image weights\ncase unspecified\nAn unspecified symbol image weight.\ncase thin\nA thin weight\ncase light\nA light weight.\ncase regular\nA regular weight.\ncase medium\nA medium weight.\ncase semibold\nA semibold weight.\ncase bold\nA bold weight.\ncase heavy\nA heavy weight.\ncase black\nAn ultra-heavy weight."
  },
  {
    "title": "UIImage.SymbolWeight.regular | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/symbolweight/regular",
    "html": "See Also\nSymbol image weights\ncase unspecified\nAn unspecified symbol image weight.\ncase ultraLight\nAn ultralight weight.\ncase thin\nA thin weight\ncase light\nA light weight.\ncase medium\nA medium weight.\ncase semibold\nA semibold weight.\ncase bold\nA bold weight.\ncase heavy\nA heavy weight.\ncase black\nAn ultra-heavy weight."
  },
  {
    "title": "UIImage.SymbolWeight.medium | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/symbolweight/medium",
    "html": "See Also\nSymbol image weights\ncase unspecified\nAn unspecified symbol image weight.\ncase ultraLight\nAn ultralight weight.\ncase thin\nA thin weight\ncase light\nA light weight.\ncase regular\nA regular weight.\ncase semibold\nA semibold weight.\ncase bold\nA bold weight.\ncase heavy\nA heavy weight.\ncase black\nAn ultra-heavy weight."
  },
  {
    "title": "UIImage.Orientation.left | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/orientation/left",
    "html": "Discussion\n\nIf an image is encoded with this orientation, then displayed by software unaware of orientation metadata, the image appears to be rotated 90° clockwise. (That is, to present the image in its intended orientation, you must rotate 90° counter-clockwise.)\n\nFigure 1 Correcting image data with left orientation for display\n\nSee Also\nImage orientations\ncase up\nThe original pixel data matches the image's intended display orientation.\ncase down\nThe image has been rotated 180° from the orientation of its original pixel data.\ncase right\nThe image has been rotated 90° clockwise from the orientation of its original pixel data.\ncase upMirrored\nThe image has been horizontally flipped from the orientation of its original pixel data.\ncase downMirrored\nThe image has been vertically flipped from the orientation of its original pixel data.\ncase leftMirrored\nThe image has been rotated 90° clockwise and flipped horizontally from the orientation of its original pixel data.\ncase rightMirrored\nThe image has been rotated 90° counterclockwise and flipped horizontally from the orientation of its original pixel data.\nRelated Documentation\ncase left\nThe encoded image data is rotated 90° clockwise from the image's intended display orientation."
  },
  {
    "title": "f6 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeycommand/3538640-f6",
    "html": "See Also\nFunction keys\nclass let f1: String\nA string representing the F1 key.\nclass let f2: String\nA string representing the F2 key.\nclass let f3: String\nA string representing the F3 key.\nclass let f4: String\nA string representing the F4 key.\nclass let f5: String\nA string representing the F5 key.\nclass let f7: String\nA string representing the F7 key.\nclass let f8: String\nA string representing the F8 key.\nclass let f9: String\nA string representing the F9 key.\nclass let f10: String\nA string representing the F10 key.\nclass let f11: String\nA string representing the F11 key.\nclass let f12: String\nA string representing the F12 key."
  },
  {
    "title": "inputEnd | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeycommand/3516403-inputend",
    "html": "See Also\nNavigation keys\nclass let inputUpArrow: String\nA string representing the Up Arrow key.\nclass let inputDownArrow: String\nA string representing the Down Arrow key.\nclass let inputLeftArrow: String\nA string representing the Left Arrow key.\nclass let inputRightArrow: String\nA string representing the Right Arrow key.\nclass let inputHome: String\nA string representing the Home key.\nclass let inputPageUp: String\nA string representing the Page Up key.\nclass let inputPageDown: String\nA string representing the Page Down key."
  },
  {
    "title": "inputUpArrow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeycommand/1621123-inputuparrow",
    "html": "See Also\nNavigation keys\nclass let inputDownArrow: String\nA string representing the Down Arrow key.\nclass let inputLeftArrow: String\nA string representing the Left Arrow key.\nclass let inputRightArrow: String\nA string representing the Right Arrow key.\nclass let inputHome: String\nA string representing the Home key.\nclass let inputEnd: String\nA string representing the End key.\nclass let inputPageUp: String\nA string representing the Page Up key.\nclass let inputPageDown: String\nA string representing the Page Down key."
  },
  {
    "title": "collectionView(_:shouldSelectItemAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/1618095-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view object that is asking whether the selection should change.\n\nindexPath\n\nThe index path of the cell to be selected.\n\nReturn Value\n\ntrue if the item should be selected or false if it should not.\n\nDiscussion\n\nThe collection view calls this method when the user tries to select an item in the collection view. It does not call this method when you programmatically set the selection.\n\nIf you do not implement this method, the default return value is true.\n\nSee Also\nManaging the selected cells\nChanging the Appearance of Selected and Highlighted Cells\nProvide visual feedback to the user about the state of a cell and the transition between states.\nSelecting multiple items with a two-finger pan gesture\nAccelerate user selection of multiple items using the multiselect gesture on table and collection views.\nfunc collectionView(UICollectionView, didSelectItemAt: IndexPath)\nTells the delegate that the item at the specified index path was selected.\nfunc collectionView(UICollectionView, shouldDeselectItemAt: IndexPath) -> Bool\nAsks the delegate if the specified item should be deselected.\nfunc collectionView(UICollectionView, didDeselectItemAt: IndexPath)\nTells the delegate that the item at the specified path was deselected.\nfunc collectionView(UICollectionView, shouldBeginMultipleSelectionInteractionAt: IndexPath) -> Bool\nAsks the delegate whether the user can select multiple items using a two-finger pan gesture in a collection view.\nfunc collectionView(UICollectionView, didBeginMultipleSelectionInteractionAt: IndexPath)\nTells the delegate when the user starts using a two-finger pan gesture to select multiple items in a collection view.\nfunc collectionViewDidEndMultipleSelectionInteraction(UICollectionView)\nTells the delegate when the user stops using a two-finger pan gesture to select multiple items in a collection view."
  },
  {
    "title": "collectionView(_:didSelectItemAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/1618032-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view object that is notifying you of the selection change.\n\nindexPath\n\nThe index path of the cell that was selected.\n\nDiscussion\n\nThe collection view calls this method when the user successfully selects an item in the collection view. It does not call this method when you programmatically set the selection.\n\nSee Also\nManaging the selected cells\nChanging the Appearance of Selected and Highlighted Cells\nProvide visual feedback to the user about the state of a cell and the transition between states.\nSelecting multiple items with a two-finger pan gesture\nAccelerate user selection of multiple items using the multiselect gesture on table and collection views.\nfunc collectionView(UICollectionView, shouldSelectItemAt: IndexPath) -> Bool\nAsks the delegate if the specified item should be selected.\nfunc collectionView(UICollectionView, shouldDeselectItemAt: IndexPath) -> Bool\nAsks the delegate if the specified item should be deselected.\nfunc collectionView(UICollectionView, didDeselectItemAt: IndexPath)\nTells the delegate that the item at the specified path was deselected.\nfunc collectionView(UICollectionView, shouldBeginMultipleSelectionInteractionAt: IndexPath) -> Bool\nAsks the delegate whether the user can select multiple items using a two-finger pan gesture in a collection view.\nfunc collectionView(UICollectionView, didBeginMultipleSelectionInteractionAt: IndexPath)\nTells the delegate when the user starts using a two-finger pan gesture to select multiple items in a collection view.\nfunc collectionViewDidEndMultipleSelectionInteraction(UICollectionView)\nTells the delegate when the user stops using a two-finger pan gesture to select multiple items in a collection view."
  },
  {
    "title": "textInput | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextinteraction/3255084-textinput",
    "html": "Discussion\n\nThe object that you assign to textInput can be different than the view that contains the text interaction. For example, you may want the gestures for the text interaction to work on a container view, such as a scroll view, while managing the text selection behavior in a contained view, such as the one drawing the text.\n\nSee Also\nHandling text input and interaction events\nvar delegate: UITextInteractionDelegate?\nThe object that receives events from the text interaction.\nprotocol UITextInteractionDelegate\nAn interface that an object implements to receive information about text interaction events."
  },
  {
    "title": "gesturesForFailureRequirements | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextinteraction/3255083-gesturesforfailurerequirements",
    "html": "Discussion\n\nIf your app provides other gestures in the same view hierarchy, you may want to set up failure requirements between your app's gestures and the gestures added by the text interaction. To do this, use the require(toFail:) method to relate your gestures to those listed in gesturesForFailureRequirements.\n\nSee Also\nGetting interaction information\nvar textInteractionMode: UITextInteractionMode\nThe mode of the text interaction.\nenum UITextInteractionMode\nModes that determine the selection behaviors that a text interaction provides."
  },
  {
    "title": "init(toolTip:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitooltipconfiguration/3858109-init",
    "html": "Parameters\ntoolTip\n\nThe text that appears in the tooltip.\n\nDiscussion\n\nCreate a configuration using this method to show the tooltip when the pointer hovers over any area of the view or control. For example, the following code listing creates a configuration that instructs the view to show the tooltip when the pointer hovers over any area of the view:\n\nlet configuration = UIToolTipConfiguration(toolTip: \"The color is \\(colorName).\")\n\n\nSee Also\nCreating a tooltip configuration\ninit(toolTip: String, in: CGRect)\nCreates a tooltip configuration, and sets the tooltip text and hover region within the view or control."
  },
  {
    "title": "UITitlebarTitleVisibility | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uititlebartitlevisibility",
    "html": "Topics\nVisibility states\ncase visible\nA state indicating that the title is visible in the title bar.\ncase hidden\nA state indicating that the title isn’t visible in the title bar.\nRelationships\nConforms To\nSendable\nSee Also\nConfiguring the title bar\nvar separatorStyle: UITitlebarSeparatorStyle\nThe type of separator that the app displays between the title bar and content of a window.\nenum UITitlebarSeparatorStyle\nStyles that determine the type of separator displayed between the title bar and content of a window.\nvar titleVisibility: UITitlebarTitleVisibility\nA value that indicates the visibility of the title.\nvar representedURL: URL?\nA URL of the file or resource represented in the window."
  },
  {
    "title": "UITitlebarSeparatorStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uititlebarseparatorstyle",
    "html": "Topics\nStyles\ncase automatic\nA style indicating that the system determines the type of separator.\ncase line\nA style indicating that the title bar separator is a line.\ncase none\nA style indicating that there’s no title bar separator.\ncase shadow\nA style indicating that the title bar separator is a shadow.\nRelationships\nConforms To\nSendable\nSee Also\nConfiguring the title bar\nvar separatorStyle: UITitlebarSeparatorStyle\nThe type of separator that the app displays between the title bar and content of a window.\nvar titleVisibility: UITitlebarTitleVisibility\nA value that indicates the visibility of the title.\nenum UITitlebarTitleVisibility\nStates that determine visibility of the title in the title bar.\nvar representedURL: URL?\nA URL of the file or resource represented in the window."
  },
  {
    "title": "UITitlebarToolbarStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uititlebartoolbarstyle",
    "html": "Topics\nStyles\ncase automatic\nA style indicating that the system determines the toolbar’s appearance and location.\ncase expanded\nA style indicating that the toolbar appears below the window title.\ncase preference\nA style indicating that the toolbar appears below the window title with toolbar items centered in the toolbar.\ncase unified\nA style indicating that the toolbar appears inline with the window title.\ncase unifiedCompact\nA style indicating that the toolbar appears inline with the window title and with reduced margins to allow more focus on the window’s contents.\nRelationships\nConforms To\nSendable\nSee Also\nConfiguring the toolbar\nvar toolbar: NSToolbar?\nThe toolbar displayed beneath or integrated with the title bar.\nvar toolbarStyle: UITitlebarToolbarStyle\nThe style of the toolbar determining its appearance and location related to the title bar.\nvar autoHidesToolbarInFullScreen: Bool\nA Boolean value that determines whether the toolbar automatically hides in full-screen windows."
  },
  {
    "title": "toolTip | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitooltipconfiguration/3858112-tooltip",
    "html": "Discussion\n\nTo set the tooltip text, create a tooltip configuration object using either the init(toolTip:) or init(toolTip:in:) methods.\n\nSee Also\nAccessing the configuration settings\nvar sourceRect: CGRect?\nThe region of the view or control where the pointer must hover to trigger the appearance of the tooltip."
  },
  {
    "title": "UIImage.Orientation.up | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/orientation/up",
    "html": "Discussion\n\nIf an image is encoded with this orientation, then displayed by software unaware of orientation metadata, the image appears correctly \"right side up\". That is, this orientation is an identity value.\n\nFigure 1 The up orientation is the default, and requires no correction\n\nSee Also\nImage orientations\ncase down\nThe image has been rotated 180° from the orientation of its original pixel data.\ncase left\nThe image has been rotated 90° counterclockwise from the orientation of its original pixel data.\ncase right\nThe image has been rotated 90° clockwise from the orientation of its original pixel data.\ncase upMirrored\nThe image has been horizontally flipped from the orientation of its original pixel data.\ncase downMirrored\nThe image has been vertically flipped from the orientation of its original pixel data.\ncase leftMirrored\nThe image has been rotated 90° clockwise and flipped horizontally from the orientation of its original pixel data.\ncase rightMirrored\nThe image has been rotated 90° counterclockwise and flipped horizontally from the orientation of its original pixel data.\nRelated Documentation\ncase up\nThe encoded image data matches the image's intended display orientation."
  },
  {
    "title": "toolbarStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uititlebar/3604076-toolbarstyle",
    "html": "Discussion\n\nThe default value is UITitlebarToolbarStyle.automatic.\n\nSee Also\nConfiguring the toolbar\nvar toolbar: NSToolbar?\nThe toolbar displayed beneath or integrated with the title bar.\nenum UITitlebarToolbarStyle\nStyles that determine the toolbar’s appearance and location related to the title bar.\nvar autoHidesToolbarInFullScreen: Bool\nA Boolean value that determines whether the toolbar automatically hides in full-screen windows."
  },
  {
    "title": "UIImage.Orientation.rightMirrored | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/orientation/rightmirrored",
    "html": "Discussion\n\nIf an image is encoded with this orientation, then displayed by software unaware of orientation metadata, the image appears to be horizontally mirrored, then rotated 90° clockwise. (That is, to present the image in its intended orientation, you can rotate 90° counter-clockwise, then flip horizontally.)\n\nFigure 1 Correcting image data with rightMirrored orientation for display\n\nSee Also\nImage orientations\ncase up\nThe original pixel data matches the image's intended display orientation.\ncase down\nThe image has been rotated 180° from the orientation of its original pixel data.\ncase left\nThe image has been rotated 90° counterclockwise from the orientation of its original pixel data.\ncase right\nThe image has been rotated 90° clockwise from the orientation of its original pixel data.\ncase upMirrored\nThe image has been horizontally flipped from the orientation of its original pixel data.\ncase downMirrored\nThe image has been vertically flipped from the orientation of its original pixel data.\ncase leftMirrored\nThe image has been rotated 90° clockwise and flipped horizontally from the orientation of its original pixel data.\nRelated Documentation\ncase rightMirrored\nThe encoded image data is horizontally flipped and rotated 90° clockwise from the image's intended display orientation."
  },
  {
    "title": "UIImagePickerController.InfoKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimagepickercontroller/infokey",
    "html": "Topics\nConstants\nstatic let cropRect: UIImagePickerController.InfoKey\nThe cropping rectangle that was applied to the original image.\nstatic let editedImage: UIImagePickerController.InfoKey\nAn image edited by the user.\nstatic let imageURL: UIImagePickerController.InfoKey\nThe URL of the image file.\nstatic let livePhoto: UIImagePickerController.InfoKey\nThe Live Photo representation of the selected or captured photo.\nstatic let mediaMetadata: UIImagePickerController.InfoKey\nMetadata for a newly-captured photograph.\nstatic let mediaType: UIImagePickerController.InfoKey\nThe media type selected by the user.\nstatic let mediaURL: UIImagePickerController.InfoKey\nThe filesystem URL for the movie.\nstatic let originalImage: UIImagePickerController.InfoKey\nThe original, uncropped image selected by the user.\nstatic let phAsset: UIImagePickerController.InfoKey\nA Photos asset for the image.\nDeprecated\nstatic let referenceURL: UIImagePickerController.InfoKey\nThe Assets Library URL for the original version of the picked item.\nDeprecated\nInitializers\ninit(rawValue: String)\nCreates a new editing information key with the specified raw value.\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable"
  },
  {
    "title": "collectionView(_:transitionLayoutForOldLayout:newLayout:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/1618100-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view whose layout object is changing.\n\nfromLayout\n\nThe current layout of the collection view. This is the starting point for the transition.\n\ntoLayout\n\nThe new layout for the collection view.\n\nReturn Value\n\nThe collection view transition layout object to use to perform the transition.\n\nDiscussion\n\nImplement this method if you want to return a custom UICollectionViewTransitionLayout object for use during the transition. A transition layout object lets you customize the behavior of cells and decoration views when transitioning from one layout to the next. Normally, transitioning between layouts causes items to animate directly from their current locations to their new locations. With a transition layout object, you can have objects follow a non linear path, use a different timing algorithm, or move according to incoming touch events.\n\nIf your delegate does not implement this method, the collection view creates a standard UICollectionViewTransitionLayout object and uses that object to manage the transition.\n\nSee Also\nHandling layout changes\nfunc collectionView(UICollectionView, targetContentOffsetForProposedContentOffset: CGPoint) -> CGPoint\nGives the delegate an opportunity to customize the content offset for layout changes and animated updates.\nfunc collectionView(UICollectionView, targetIndexPathForMoveOfItemFromOriginalIndexPath: IndexPath, atCurrentIndexPath: IndexPath, toProposedIndexPath: IndexPath) -> IndexPath\nAsks the delegate for the index path to use when moving an item."
  },
  {
    "title": "collectionView(_:targetIndexPathForMoveOfItemFromOriginalIndexPath:atCurrentIndexPath:toProposedIndexPath:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/3750828-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view making the request.\n\noriginalIndexPath\n\nThe item’s original index path. This value doesn't change as the user interactively moves the item.\n\ncurrentIndexPath\n\nThe item's current index path. This value changes as the user interactively moves the item, reflecting the item's current position in the collection view.\n\nproposedIndexPath\n\nThe proposed index path of the item.\n\nReturn Value\n\nThe index path you want to use for the item. If you don't implement this method, the collection view uses the index path in the proposedIndexPath parameter.\n\nDiscussion\n\nDuring the interactive moving of an item, the collection view calls this method to see if you want to provide a different index path than the proposed path. You might use this method to prevent the user from dropping the item in an invalid location. For example, you might prevent the user from dropping the item in a specific section.\n\nSee Also\nHandling layout changes\nfunc collectionView(UICollectionView, transitionLayoutForOldLayout: UICollectionViewLayout, newLayout: UICollectionViewLayout) -> UICollectionViewTransitionLayout\nAsks for the custom transition layout to use when moving between the specified layouts.\nfunc collectionView(UICollectionView, targetContentOffsetForProposedContentOffset: CGPoint) -> CGPoint\nGives the delegate an opportunity to customize the content offset for layout changes and animated updates."
  },
  {
    "title": "init(string:attributes:range:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlinefragment/3810044-init",
    "html": "Parameters\nstring\n\nAn attributed string.\n\nattributes\n\nA dictionary of attributes.\n\nrange\n\nThe range to use from string.\n\nSee Also\nCreating line fragments\ninit(attributedString: NSAttributedString, range: NSRange)\nCreates a new line fragment from the attributed string for the range of characters you specify.\ninit?(coder: NSCoder)\nCreates a new line fragment with from data in an unarchiver."
  },
  {
    "title": "UIImage.Orientation.leftMirrored | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/orientation/leftmirrored",
    "html": "Discussion\n\nIf an image is encoded with this orientation, then displayed by software unaware of orientation metadata, the image appears to be horizontally mirrored, then rotated 90° counter-clockwise. (That is, to present the image in its intended orientation, you can rotate it 90° clockwise, then flip horizontally.)\n\nFigure 1 Correcting image data with leftMirrored orientation for display\n\nSee Also\nImage orientations\ncase up\nThe original pixel data matches the image's intended display orientation.\ncase down\nThe image has been rotated 180° from the orientation of its original pixel data.\ncase left\nThe image has been rotated 90° counterclockwise from the orientation of its original pixel data.\ncase right\nThe image has been rotated 90° clockwise from the orientation of its original pixel data.\ncase upMirrored\nThe image has been horizontally flipped from the orientation of its original pixel data.\ncase downMirrored\nThe image has been vertically flipped from the orientation of its original pixel data.\ncase rightMirrored\nThe image has been rotated 90° counterclockwise and flipped horizontally from the orientation of its original pixel data.\nRelated Documentation\ncase leftMirrored\nThe encoded image data is horizontally flipped and rotated 90° counter-clockwise from the image's intended display orientation."
  },
  {
    "title": "imagePickerControllerDidCancel(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimagepickercontrollerdelegate/1619133-imagepickercontrollerdidcancel",
    "html": "Parameters\npicker\n\nThe controller object managing the image picker interface.\n\nDiscussion\n\nYour delegate’s implementation of this method should dismiss the picker view by calling the dismiss(animated:completion:) method of the parent view controller.\n\nImplementation of this method is optional, but expected.\n\nSee Also\nClosing the picker\nfunc imagePickerController(UIImagePickerController, didFinishPickingMediaWithInfo: [UIImagePickerController.InfoKey : Any])\nTells the delegate that the user picked a still image or movie."
  },
  {
    "title": "reorderingCadence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/2897347-reorderingcadence",
    "html": "Discussion\n\nThe default value in this property is UICollectionView.ReorderingCadence.immediate. You might specify a slower cadence when you want to prevent the reordering of items from being a distraction to the user. For example, you might slow it down if immediate reordering makes it more difficult to drop items at the correct location.\n\nSee Also\nManaging drop interactions\nvar dropDelegate: UICollectionViewDropDelegate?\nThe delegate object that manages the dropping of items into the collection view.\nprotocol UICollectionViewDropDelegate\nThe interface for handling drops in a collection view.\nvar hasActiveDrop: Bool\nA Boolean value that indicates whether the collection view is currently tracking a drop session.\nenum UICollectionView.ReorderingCadence\nConstants indicating the speed at which collection view items are reorganized during a drop."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlinefragment/3810043-init",
    "html": "Parameters\naDecoder\n\nA decoder that conforms to the NSCoder protocol.\n\nSee Also\nCreating line fragments\ninit(attributedString: NSAttributedString, range: NSRange)\nCreates a new line fragment from the attributed string for the range of characters you specify.\ninit(string: String, attributes: [NSAttributedString.Key : Any], range: NSRange)\nCreates a new line fragment using the string, attributes, and range you provide."
  },
  {
    "title": "characterRange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlinefragment/3810039-characterrange",
    "html": "See Also\nLine fragment characteristics\nvar attributedString: NSAttributedString\nThe source attributed string.\nvar glyphOrigin: CGPoint\nRendering origin for the left-most glyph in the line fragment coordinate system.\nvar typographicBounds: CGRect\nThe typographic bounds that specifies the dimensions of the line fragment for laying out line fragments to each other."
  },
  {
    "title": "glyphOrigin | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlinefragment/3810041-glyphorigin",
    "html": "See Also\nLine fragment characteristics\nvar attributedString: NSAttributedString\nThe source attributed string.\nvar characterRange: NSRange\nThe string range for the source attributed string that corresponds to this line fragment.\nvar typographicBounds: CGRect\nThe typographic bounds that specifies the dimensions of the line fragment for laying out line fragments to each other."
  },
  {
    "title": "characterIndex(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlinefragment/3852578-characterindex",
    "html": "Parameters\npoint\n\nThe distance is from the upstream edge.\n\nReturn Value\n\nAn integer that represents the character index at point.\n\nSee Also\nFinding specific text\nfunc fractionOfDistanceThroughGlyph(for: CGPoint) -> CGFloat\nReturns character index for a point inside the line fragment coordinate system.\nfunc locationForCharacter(at: Int) -> CGPoint\nReturns the location of the character at the specified index."
  },
  {
    "title": "typographicBounds | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlinefragment/3810046-typographicbounds",
    "html": "Discussion\n\nThe origin value is offset from the beginning of the line fragment group belonging to the parent layout fragment.\n\nSee Also\nLine fragment characteristics\nvar attributedString: NSAttributedString\nThe source attributed string.\nvar characterRange: NSRange\nThe string range for the source attributed string that corresponds to this line fragment.\nvar glyphOrigin: CGPoint\nRendering origin for the left-most glyph in the line fragment coordinate system."
  },
  {
    "title": "layoutManager(_:boundingBoxForControlGlyphAt:for:proposedLineFragment:glyphPosition:characterIndex:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1402922-layoutmanager",
    "html": "Parameters\nlayoutManager\n\nThe layout manager doing the layout.\n\nglyphIndex\n\nThe index of the control glyph in question.\n\ntextContainer\n\nThe text container to use to calculate the position.\n\nproposedRect\n\nThe proposed line fragment rectangle.\n\nglyphPosition\n\nThe position of the glyph in textContainer.\n\ncharIndex\n\nThe character index in textContainer.\n\nReturn Value\n\nThe bounding rectangle for the specified control glyph with the specified parameters.\n\nDiscussion\n\nSent for resolving the glyph metrics for NSControlCharacterWhitespaceAction control character.\n\nSee Also\nHandling line fragments\nfunc layoutManager(NSLayoutManager, shouldBreakLineByHyphenatingBeforeCharacterAt: Int) -> Bool\nAsks the delegate whether to break the line at the specified character.\nfunc layoutManager(NSLayoutManager, shouldBreakLineByWordBeforeCharacterAt: Int) -> Bool\nAsks the delegate whether to break the line at the specified word.\nfunc layoutManager(NSLayoutManager, lineSpacingAfterGlyphAt: Int, withProposedLineFragmentRect: CGRect) -> CGFloat\nReturns the amount of space to add to the end of a line.\nfunc layoutManager(NSLayoutManager, paragraphSpacingAfterGlyphAt: Int, withProposedLineFragmentRect: CGRect) -> CGFloat\nReturns the amount of space to add at the end of a paragraph.\nfunc layoutManager(NSLayoutManager, paragraphSpacingBeforeGlyphAt: Int, withProposedLineFragmentRect: CGRect) -> CGFloat\nReturns the amount of space to add at the beginning of a paragraph.\nfunc layoutManager(NSLayoutManager, shouldSetLineFragmentRect: UnsafeMutablePointer<CGRect>, lineFragmentUsedRect: UnsafeMutablePointer<CGRect>, baselineOffset: UnsafeMutablePointer<CGFloat>, in: NSTextContainer, forGlyphRange: NSRange) -> Bool\nCustomizes the line fragment geometry before committing it to the layout cache."
  },
  {
    "title": "layoutManager(_:shouldSetLineFragmentRect:lineFragmentUsedRect:baselineOffset:in:forGlyphRange:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1403122-layoutmanager",
    "html": "Parameters\nlayoutManager\n\nThe layout manager doing the work.\n\nlineFragmentRect\n\nThe proposed rectangle that contains the glyphs. You may modify this rectangle as needed.\n\nlineFragmentUsedRect\n\nThe portion of lineFragmentRect that actually contains glyphs or other rendered marks, including the text container's line fragment padding. This rectangle must be equal to lineFragmentRect or wholly contained by it. You may modify this rectangle as needed.\n\nbaselineOffset\n\nThe vertical distance (in pixels) from the line fragment origin to the baseline on which the glyphs align.\n\ntextContainer\n\nThe text container for the line fragments.\n\nglyphRange\n\nThe range of glyphs being laid out.\n\nReturn Value\n\ntrue if you modified the layout information and want your modifications to be used or false if the original layout information should be used.\n\nDiscussion\n\nUse this method to modify the line fragment rectangles associated with the text container. It is your responsibility to ensure that the modified rectangles remain valid and still lie within the text container.\n\nSee Also\nHandling line fragments\nfunc layoutManager(NSLayoutManager, shouldBreakLineByHyphenatingBeforeCharacterAt: Int) -> Bool\nAsks the delegate whether to break the line at the specified character.\nfunc layoutManager(NSLayoutManager, shouldBreakLineByWordBeforeCharacterAt: Int) -> Bool\nAsks the delegate whether to break the line at the specified word.\nfunc layoutManager(NSLayoutManager, lineSpacingAfterGlyphAt: Int, withProposedLineFragmentRect: CGRect) -> CGFloat\nReturns the amount of space to add to the end of a line.\nfunc layoutManager(NSLayoutManager, paragraphSpacingAfterGlyphAt: Int, withProposedLineFragmentRect: CGRect) -> CGFloat\nReturns the amount of space to add at the end of a paragraph.\nfunc layoutManager(NSLayoutManager, paragraphSpacingBeforeGlyphAt: Int, withProposedLineFragmentRect: CGRect) -> CGFloat\nReturns the amount of space to add at the beginning of a paragraph.\nfunc layoutManager(NSLayoutManager, boundingBoxForControlGlyphAt: Int, for: NSTextContainer, proposedLineFragment: CGRect, glyphPosition: CGPoint, characterIndex: Int) -> CGRect\nReturns the bounding rectangle for the specified control glyph with the specified parameters."
  },
  {
    "title": "NSLayoutManagerDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate",
    "html": "Topics\nInvalidating glyphs and layout\nfunc layoutManagerDidInvalidateLayout(NSLayoutManager)\nInforms the delegate when the specified layout manager invalidates layout information (not glyph information).\nfunc layoutManager(NSLayoutManager, shouldGenerateGlyphs: UnsafePointer<CGGlyph>, properties: UnsafePointer<NSLayoutManager.GlyphProperty>, characterIndexes: UnsafePointer<Int>, font: UIFont, forGlyphRange: NSRange) -> Int\nEnables customization of the initial glyph generation process.\nfunc layoutManager(NSLayoutManager, shouldUse: NSLayoutManager.ControlCharacterAction, forControlCharacterAt: Int) -> NSLayoutManager.ControlCharacterAction\nReturns the control character action for the control character at the specified character index.\nstruct NSLayoutManager.ControlCharacterAction\nConstants that describe actions for control characters.\nResponding to text container layout\nfunc layoutManager(NSLayoutManager, didCompleteLayoutFor: NSTextContainer?, atEnd: Bool)\nInforms the delegate when the layout manager finishes laying out text in the specified text container.\nfunc layoutManager(NSLayoutManager, textContainer: NSTextContainer, didChangeGeometryFrom: CGSize)\nInforms the delegate when the layout manager invalidates layout due to a change in the geometry of the specified text container.\nHandling line fragments\nfunc layoutManager(NSLayoutManager, shouldBreakLineByHyphenatingBeforeCharacterAt: Int) -> Bool\nAsks the delegate whether to break the line at the specified character.\nfunc layoutManager(NSLayoutManager, shouldBreakLineByWordBeforeCharacterAt: Int) -> Bool\nAsks the delegate whether to break the line at the specified word.\nfunc layoutManager(NSLayoutManager, lineSpacingAfterGlyphAt: Int, withProposedLineFragmentRect: CGRect) -> CGFloat\nReturns the amount of space to add to the end of a line.\nfunc layoutManager(NSLayoutManager, paragraphSpacingAfterGlyphAt: Int, withProposedLineFragmentRect: CGRect) -> CGFloat\nReturns the amount of space to add at the end of a paragraph.\nfunc layoutManager(NSLayoutManager, paragraphSpacingBeforeGlyphAt: Int, withProposedLineFragmentRect: CGRect) -> CGFloat\nReturns the amount of space to add at the beginning of a paragraph.\nfunc layoutManager(NSLayoutManager, boundingBoxForControlGlyphAt: Int, for: NSTextContainer, proposedLineFragment: CGRect, glyphPosition: CGPoint, characterIndex: Int) -> CGRect\nReturns the bounding rectangle for the specified control glyph with the specified parameters.\nfunc layoutManager(NSLayoutManager, shouldSetLineFragmentRect: UnsafeMutablePointer<CGRect>, lineFragmentUsedRect: UnsafeMutablePointer<CGRect>, baselineOffset: UnsafeMutablePointer<CGFloat>, in: NSTextContainer, forGlyphRange: NSRange) -> Bool\nCustomizes the line fragment geometry before committing it to the layout cache.\nManaging temporary attribute support\nfunc layoutManager(NSLayoutManager, shouldUseTemporaryAttributes: [NSAttributedString.Key : Any], forDrawingToScreen: Bool, atCharacterIndex: Int, effectiveRange: NSRangePointer?) -> [NSAttributedString.Key : Any]?\nAsks the delegate whether to use temporary attributes when drawing the text.\nDeprecated\nControl Characters\nConstants that describe actions for control characters.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nManaging the layout process\nvar delegate: NSLayoutManagerDelegate?\nThe layout manager’s delegate."
  },
  {
    "title": "lineFragmentRect(forProposedRect:at:writingDirection:remaining:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextcontainer/1444555-linefragmentrect",
    "html": "Parameters\nproposedRect\n\nA rectangle in which to lay out text proposed by the layout manager.\n\ncharacterIndex\n\nThe character location inside the text storage for the line fragment being processed.\n\nbaseWritingDirection\n\nThe direction of advancement for line fragments inside a visual horizontal line. The values passed into the method are either NSWritingDirection.leftToRight or NSWritingDirection.rightToLeft.\n\nremainingRect\n\nThe remainder of the proposed rectangle that was excluded from returned rectangle. It can be passed in as the proposed rectangle for the next iteration.\n\nDiscussion\n\nThe bounds of the line fragment rectangle are determined by the intersection of proposedRect and the text container’s bounding rectangle defined by its NSTextContainer property. The regions defined by the NSTextContainer property are excluded from the return value. It is possible that proposedRect can be divided into multiple line fragments due to exclusion paths. In that case, remainingRect returns the remainder that can be passed in as the proposed rectangle for the next iteration.\n\nThis method can be overridden by subclasses for further text container region customization.\n\nSee Also\nConstraining text layout\nvar maximumNumberOfLines: Int\nThe maximum number of lines that the text container can store.\nvar lineFragmentPadding: CGFloat\nThe value for the text inset within line fragment rectangles.\nvar isSimpleRectangularTextContainer: Bool\nA Boolean that indicates whether the text container’s region is a rectangle with no holes or gaps, and whose edges are parallel to the text view's coordinate system axes."
  },
  {
    "title": "layoutManager(_:shouldGenerateGlyphs:properties:characterIndexes:font:forGlyphRange:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1403073-layoutmanager",
    "html": "Parameters\nlayoutManager\n\nThe layout manager doing the layout.\n\nglyphs\n\nA pointer to the layout manager's glyph cache.\n\nprops\n\nA pointer to a buffer containing glyph properties for the glyphs in the cache.\n\ncharIndexes\n\nA pointer to the starting index for the characters in the text storage for which glyphs are generated.\n\naFont\n\nA font to override the font attributes in the text storage for the specified character range.\n\nglyphRange\n\nThe range of glyphs in the glyph cache to set.\n\nReturn Value\n\nThe actual glyph range stored in this method. By returning 0, it can indicate for the layout manager to do the default processing.\n\nDiscussion\n\nThis message is sent whenever the layout manager is about to store the initial glyph information via setGlyphs(_:properties:characterIndexes:font:forGlyphRange:). To customize the initial glyph generation process, this method can invoke setGlyphs(_:properties:characterIndexes:font:forGlyphRange:) with modified glyph information.\n\nNote\n\nQuerying glyph information surrounding glyphRange could lead to recursion since the data might not be available yet.\n\nSee Also\nInvalidating glyphs and layout\nfunc layoutManagerDidInvalidateLayout(NSLayoutManager)\nInforms the delegate when the specified layout manager invalidates layout information (not glyph information).\nfunc layoutManager(NSLayoutManager, shouldUse: NSLayoutManager.ControlCharacterAction, forControlCharacterAt: Int) -> NSLayoutManager.ControlCharacterAction\nReturns the control character action for the control character at the specified character index.\nstruct NSLayoutManager.ControlCharacterAction\nConstants that describe actions for control characters."
  },
  {
    "title": "init(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextinteraction/3255085-init",
    "html": "Parameters\nmode\n\nA mode determining the selection behaviors that the interaction will provide.\n\nReturn Value\n\nA newly initialized text interaction object."
  },
  {
    "title": "whitespace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutmanager/controlcharacteraction/1402984-whitespace",
    "html": "Discussion\n\nThe width for a glyph with this action is determined by the delegate method layoutManager(_:boundingBoxForControlGlyphAt:for:proposedLineFragment:glyphPosition:characterIndex:) if the method is implemented; otherwise, same as NSControlCharacterZeroAdvancementAction.\n\nSee Also\nActions\nstatic var containerBreak: NSLayoutManager.ControlCharacterAction\nAn action that triggers a break in layout for the current container.\nstatic var horizontalTab: NSLayoutManager.ControlCharacterAction\nAn action that inserts a horizontal tab.\nstatic var lineBreak: NSLayoutManager.ControlCharacterAction\nAn action that causes a line break.\nstatic var paragraphBreak: NSLayoutManager.ControlCharacterAction\nAn action that causes a paragraph break.\nstatic var zeroAdvancement: NSLayoutManager.ControlCharacterAction\nAn action that removes the glyph from layout."
  },
  {
    "title": "layoutOrientation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nstextlayoutorientationprovider/1402990-layoutorientation",
    "html": "Required\n\nDiscussion\n\nThis property contains the default layout orientation for text in the object that adopts the protocol. If the text contains an explicit verticalGlyphForm attribute, that attribute overrides the value in this property. When rendering, TextKit assumes the coordinate system is appropriately rotated.\n\nSee Also\nGetting layout orientation\nenum NSLayoutManager.TextLayoutOrientation\nConstants that describe the text layout orientation."
  },
  {
    "title": "collectionView(_:willPerformPreviewActionForMenuWith:animator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/3375794-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view that informs the delegate of this event.\n\nconfiguration\n\nThe configuration of the menu being displayed.\n\nanimator\n\nThe animations to run alongside the commit transition.\n\nSee Also\nManaging context menus\nAdding Context Menus in Your App\nProvide quick access to useful actions by adding context menus to your iOS app.\nfunc collectionView(UICollectionView, willDisplayContextMenu: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nInforms the delegate when a context menu will appear.\nfunc collectionView(UICollectionView, willEndContextMenuInteraction: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nInforms the delegate when a context menu will disappear.\nfunc collectionView(UICollectionView, contextMenuConfigurationForItemsAt: [IndexPath], point: CGPoint) -> UIContextMenuConfiguration?\nAsks the delegate for a context-menu configuration for the items at the specified index paths.\nfunc collectionView(UICollectionView, contextMenuConfiguration: UIContextMenuConfiguration, highlightPreviewForItemAt: IndexPath) -> UITargetedPreview?\nAsks the delegate for a preview of the item at the specified index path when a context-menu interaction begins.\nfunc collectionView(UICollectionView, contextMenuConfiguration: UIContextMenuConfiguration, dismissalPreviewForItemAt: IndexPath) -> UITargetedPreview?\nAsks the delegate for a preview of the item at the specified index path when a context-menu interaction ends."
  },
  {
    "title": "remembersLastFocusedIndexPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618022-rememberslastfocusedindexpath",
    "html": "Discussion\n\nWhen this property is set to true, the collection view remembers which index path was focused when focus leaves the collection view. When it receives the focus again, the collection view automatically redirects that focus back to the previously focused index path. The default value of this property is false.\n\nThe effects of this property may be ignored during or immediately after a view controller transition, such as a presentation dismissal or navigation stack pop. In such cases, the view controller attempts to restore focus to the item that was focused prior to the transition (for example, prior to the view controller being presented or pushed), which can take precedence over the effects of this property. To learn how to control or disable this behavior in the view controller, see restoresFocusAfterTransition.\n\nSee Also\nWorking with focus\nvar allowsFocus: Bool\nA Boolean value that determines whether the collection view allows its cells to become focused.\nvar allowsFocusDuringEditing: Bool\nA Boolean value that determines whether the collection view allows its cells to become focused in edit mode.\nvar selectionFollowsFocus: Bool\nA Boolean value that triggers an automatic selection when focus moves to a cell."
  },
  {
    "title": "allowsFocusDuringEditing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/3795591-allowsfocusduringediting",
    "html": "Discussion\n\nIf you implement collectionView(_:canFocusItemAt:), its return value takes precedence over the value of this property.\n\nThe system determines the default value of this property according to the platform and other properties of the collection view.\n\nSee Also\nWorking with focus\nvar allowsFocus: Bool\nA Boolean value that determines whether the collection view allows its cells to become focused.\nvar selectionFollowsFocus: Bool\nA Boolean value that triggers an automatic selection when focus moves to a cell.\nvar remembersLastFocusedIndexPath: Bool\nA Boolean value that indicates whether the collection view automatically assigns the focus to the item at the last focused index path."
  },
  {
    "title": "f5 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeycommand/3538639-f5",
    "html": "See Also\nFunction keys\nclass let f1: String\nA string representing the F1 key.\nclass let f2: String\nA string representing the F2 key.\nclass let f3: String\nA string representing the F3 key.\nclass let f4: String\nA string representing the F4 key.\nclass let f6: String\nA string representing the F6 key.\nclass let f7: String\nA string representing the F7 key.\nclass let f8: String\nA string representing the F8 key.\nclass let f9: String\nA string representing the F9 key.\nclass let f10: String\nA string representing the F10 key.\nclass let f11: String\nA string representing the F11 key.\nclass let f12: String\nA string representing the F12 key."
  },
  {
    "title": "f1 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeycommand/3538632-f1",
    "html": "See Also\nFunction keys\nclass let f2: String\nA string representing the F2 key.\nclass let f3: String\nA string representing the F3 key.\nclass let f4: String\nA string representing the F4 key.\nclass let f5: String\nA string representing the F5 key.\nclass let f6: String\nA string representing the F6 key.\nclass let f7: String\nA string representing the F7 key.\nclass let f8: String\nA string representing the F8 key.\nclass let f9: String\nA string representing the F9 key.\nclass let f10: String\nA string representing the F10 key.\nclass let f11: String\nA string representing the F11 key.\nclass let f12: String\nA string representing the F12 key."
  },
  {
    "title": "inputEscape | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeycommand/1621144-inputescape",
    "html": "See Also\nControl keys\nclass let inputDelete: String\nA string that represents the Delete key."
  },
  {
    "title": "f2 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeycommand/3538636-f2",
    "html": "See Also\nFunction keys\nclass let f1: String\nA string representing the F1 key.\nclass let f3: String\nA string representing the F3 key.\nclass let f4: String\nA string representing the F4 key.\nclass let f5: String\nA string representing the F5 key.\nclass let f6: String\nA string representing the F6 key.\nclass let f7: String\nA string representing the F7 key.\nclass let f8: String\nA string representing the F8 key.\nclass let f9: String\nA string representing the F9 key.\nclass let f10: String\nA string representing the F10 key.\nclass let f11: String\nA string representing the F11 key.\nclass let f12: String\nA string representing the F12 key."
  },
  {
    "title": "f10 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeycommand/3538633-f10",
    "html": "See Also\nFunction keys\nclass let f1: String\nA string representing the F1 key.\nclass let f2: String\nA string representing the F2 key.\nclass let f3: String\nA string representing the F3 key.\nclass let f4: String\nA string representing the F4 key.\nclass let f5: String\nA string representing the F5 key.\nclass let f6: String\nA string representing the F6 key.\nclass let f7: String\nA string representing the F7 key.\nclass let f8: String\nA string representing the F8 key.\nclass let f9: String\nA string representing the F9 key.\nclass let f11: String\nA string representing the F11 key.\nclass let f12: String\nA string representing the F12 key."
  },
  {
    "title": "f8 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeycommand/3538642-f8",
    "html": "See Also\nFunction keys\nclass let f1: String\nA string representing the F1 key.\nclass let f2: String\nA string representing the F2 key.\nclass let f3: String\nA string representing the F3 key.\nclass let f4: String\nA string representing the F4 key.\nclass let f5: String\nA string representing the F5 key.\nclass let f6: String\nA string representing the F6 key.\nclass let f7: String\nA string representing the F7 key.\nclass let f9: String\nA string representing the F9 key.\nclass let f10: String\nA string representing the F10 key.\nclass let f11: String\nA string representing the F11 key.\nclass let f12: String\nA string representing the F12 key."
  },
  {
    "title": "inputRightArrow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeycommand/1621112-inputrightarrow",
    "html": "See Also\nNavigation keys\nclass let inputUpArrow: String\nA string representing the Up Arrow key.\nclass let inputDownArrow: String\nA string representing the Down Arrow key.\nclass let inputLeftArrow: String\nA string representing the Left Arrow key.\nclass let inputHome: String\nA string representing the Home key.\nclass let inputEnd: String\nA string representing the End key.\nclass let inputPageUp: String\nA string representing the Page Up key.\nclass let inputPageDown: String\nA string representing the Page Down key."
  },
  {
    "title": "inputPageUp | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeycommand/3516406-inputpageup",
    "html": "See Also\nNavigation keys\nclass let inputUpArrow: String\nA string representing the Up Arrow key.\nclass let inputDownArrow: String\nA string representing the Down Arrow key.\nclass let inputLeftArrow: String\nA string representing the Left Arrow key.\nclass let inputRightArrow: String\nA string representing the Right Arrow key.\nclass let inputHome: String\nA string representing the Home key.\nclass let inputEnd: String\nA string representing the End key.\nclass let inputPageDown: String\nA string representing the Page Down key."
  },
  {
    "title": "f9 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeycommand/3538643-f9",
    "html": "See Also\nFunction keys\nclass let f1: String\nA string representing the F1 key.\nclass let f2: String\nA string representing the F2 key.\nclass let f3: String\nA string representing the F3 key.\nclass let f4: String\nA string representing the F4 key.\nclass let f5: String\nA string representing the F5 key.\nclass let f6: String\nA string representing the F6 key.\nclass let f7: String\nA string representing the F7 key.\nclass let f8: String\nA string representing the F8 key.\nclass let f10: String\nA string representing the F10 key.\nclass let f11: String\nA string representing the F11 key.\nclass let f12: String\nA string representing the F12 key."
  },
  {
    "title": "f7 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeycommand/3538641-f7",
    "html": "See Also\nFunction keys\nclass let f1: String\nA string representing the F1 key.\nclass let f2: String\nA string representing the F2 key.\nclass let f3: String\nA string representing the F3 key.\nclass let f4: String\nA string representing the F4 key.\nclass let f5: String\nA string representing the F5 key.\nclass let f6: String\nA string representing the F6 key.\nclass let f8: String\nA string representing the F8 key.\nclass let f9: String\nA string representing the F9 key.\nclass let f10: String\nA string representing the F10 key.\nclass let f11: String\nA string representing the F11 key.\nclass let f12: String\nA string representing the F12 key."
  },
  {
    "title": "inputDownArrow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeycommand/1621088-inputdownarrow",
    "html": "See Also\nNavigation keys\nclass let inputUpArrow: String\nA string representing the Up Arrow key.\nclass let inputLeftArrow: String\nA string representing the Left Arrow key.\nclass let inputRightArrow: String\nA string representing the Right Arrow key.\nclass let inputHome: String\nA string representing the Home key.\nclass let inputEnd: String\nA string representing the End key.\nclass let inputPageUp: String\nA string representing the Page Up key.\nclass let inputPageDown: String\nA string representing the Page Down key."
  },
  {
    "title": "inputHome | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeycommand/3516404-inputhome",
    "html": "See Also\nNavigation keys\nclass let inputUpArrow: String\nA string representing the Up Arrow key.\nclass let inputDownArrow: String\nA string representing the Down Arrow key.\nclass let inputLeftArrow: String\nA string representing the Left Arrow key.\nclass let inputRightArrow: String\nA string representing the Right Arrow key.\nclass let inputEnd: String\nA string representing the End key.\nclass let inputPageUp: String\nA string representing the Page Up key.\nclass let inputPageDown: String\nA string representing the Page Down key."
  },
  {
    "title": "inputPageDown | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeycommand/3516405-inputpagedown",
    "html": "See Also\nNavigation keys\nclass let inputUpArrow: String\nA string representing the Up Arrow key.\nclass let inputDownArrow: String\nA string representing the Down Arrow key.\nclass let inputLeftArrow: String\nA string representing the Left Arrow key.\nclass let inputRightArrow: String\nA string representing the Right Arrow key.\nclass let inputHome: String\nA string representing the Home key.\nclass let inputEnd: String\nA string representing the End key.\nclass let inputPageUp: String\nA string representing the Page Up key."
  },
  {
    "title": "UICollectionViewDelegateFlowLayout | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegateflowlayout",
    "html": "Overview\n\nThe methods of this protocol define the size of items and the spacing between items in the grid. All of the methods in this protocol are optional. If you don’t implement a particular method, the flow layout delegate uses values in its own properties for the appropriate spacing information.\n\nThe UICollectionViewFlowLayout object expects the collection view’s delegate object to adopt this protocol. Therefore, implement this protocol on the object assigned to your collection view’s delegate property.\n\nTopics\nGetting the size of items\nfunc collectionView(UICollectionView, layout: UICollectionViewLayout, sizeForItemAt: IndexPath) -> CGSize\nAsks the delegate for the size of the specified item’s cell.\nGetting the section spacing\nfunc collectionView(UICollectionView, layout: UICollectionViewLayout, insetForSectionAt: Int) -> UIEdgeInsets\nAsks the delegate for the margins to apply to content in the specified section.\nfunc collectionView(UICollectionView, layout: UICollectionViewLayout, minimumLineSpacingForSectionAt: Int) -> CGFloat\nAsks the delegate for the spacing between successive rows or columns of a section.\nfunc collectionView(UICollectionView, layout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt: Int) -> CGFloat\nAsks the delegate for the spacing between successive items in the rows or columns of a section.\nGetting the header and footer sizes\nfunc collectionView(UICollectionView, layout: UICollectionViewLayout, referenceSizeForHeaderInSection: Int) -> CGSize\nAsks the delegate for the size of the header view in the specified section.\nfunc collectionView(UICollectionView, layout: UICollectionViewLayout, referenceSizeForFooterInSection: Int) -> CGSize\nAsks the delegate for the size of the footer view in the specified section.\nRelationships\nInherits From\nUICollectionViewDelegate"
  },
  {
    "title": "collectionView(_:canPerformPrimaryActionForItemAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/3975793-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view object asking whether to perform a primary action.\n\nindexPath\n\nThe index path of the cell.\n\nReturn Value\n\ntrue if the primary action can be performed; otherwise, false. If you don’t implement this method, the default return value is true when the collection view isn’t in an editing state, and false when it is.\n\nDiscussion\n\nPrimary actions allow you to distinguish between a distinct user action and a change in selection (like a focus change or other indirect selection change). A primary action occurs when a person selects a single cell without extending an existing selection.\n\nUIKit calls this method before collectionView(_:performPrimaryActionForItemAt:).\n\nSee Also\nManaging actions for cells\nfunc collectionView(UICollectionView, performPrimaryActionForItemAt: IndexPath)\nTells the delegate to perform the primary action for the cell at the specified index path."
  },
  {
    "title": "collectionView(_:selectionFollowsFocusForItemAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/3752186-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view making the request.\n\nindexPath\n\nThe index path of the cell to determine selection and focus behavior for.\n\nReturn Value\n\ntrue if you want to automatically select the cell at the specified index path when focus moves to it; otherwise, false.\n\nDiscussion\n\nIf the collection view's selectionFollowsFocus property is true and you return false from this delegate method, focus still moves to the cell when the user selects it. However, when focus moves to the cell, the cell doesn’t automatically select.\n\nSee Also\nWorking with focus\nfunc collectionView(UICollectionView, canFocusItemAt: IndexPath) -> Bool\nAsks the delegate whether the item at the specified index path can be focused.\nfunc indexPathForPreferredFocusedView(in: UICollectionView) -> IndexPath?\nAsks the delegate for the index path of the cell that should be focused.\nfunc collectionView(UICollectionView, shouldUpdateFocusIn: UICollectionViewFocusUpdateContext) -> Bool\nAsks the delegate whether a change in focus should occur.\nfunc collectionView(UICollectionView, didUpdateFocusIn: UICollectionViewFocusUpdateContext, with: UIFocusAnimationCoordinator)\nTells the delegate that a focus update occurred."
  },
  {
    "title": "collectionView(_:canEditItemAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/3600426-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view object requesting this information.\n\nindexPath\n\nAn index path locating an item in the collection view.\n\nReturn Value\n\nReturns true if the item is editable, false if it’s not. The default value is true."
  },
  {
    "title": "collectionView(_:shouldDeselectItemAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/1618067-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view object that is asking whether the selection should change.\n\nindexPath\n\nThe index path of the cell to be deselected.\n\nReturn Value\n\ntrue if the item should be deselected or false if it should not.\n\nDiscussion\n\nThe collection view calls this method when the user tries to deselect an item in the collection view. It does not call this method when you programmatically deselect items.\n\nIf you do not implement this method, the default return value is true.\n\nSee Also\nManaging the selected cells\nChanging the Appearance of Selected and Highlighted Cells\nProvide visual feedback to the user about the state of a cell and the transition between states.\nSelecting multiple items with a two-finger pan gesture\nAccelerate user selection of multiple items using the multiselect gesture on table and collection views.\nfunc collectionView(UICollectionView, shouldSelectItemAt: IndexPath) -> Bool\nAsks the delegate if the specified item should be selected.\nfunc collectionView(UICollectionView, didSelectItemAt: IndexPath)\nTells the delegate that the item at the specified index path was selected.\nfunc collectionView(UICollectionView, didDeselectItemAt: IndexPath)\nTells the delegate that the item at the specified path was deselected.\nfunc collectionView(UICollectionView, shouldBeginMultipleSelectionInteractionAt: IndexPath) -> Bool\nAsks the delegate whether the user can select multiple items using a two-finger pan gesture in a collection view.\nfunc collectionView(UICollectionView, didBeginMultipleSelectionInteractionAt: IndexPath)\nTells the delegate when the user starts using a two-finger pan gesture to select multiple items in a collection view.\nfunc collectionViewDidEndMultipleSelectionInteraction(UICollectionView)\nTells the delegate when the user stops using a two-finger pan gesture to select multiple items in a collection view."
  },
  {
    "title": "startInteractiveTransition(to:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618098-startinteractivetransition",
    "html": "Parameters\nlayout\n\nThe new layout object for the collected views. This is the layout that you want the collection view to use after the interactive transition is done.\n\ncompletion\n\nA completion handler to execute after the transition finishes.\n\nReturn Value\n\nThe intermediate transition layout object responsible for managing the interactive transition behavior.\n\nDiscussion\n\nCall this method when you want to change the layout of your collection view using an intermediate transition. When you call this method, the collection view quietly makes the returned transition layout object its current layout object. It is your responsibility to set up a gesture recognizer or other touch-event handling code to track the transition progress. As progress changes, update the transitionProgress property of the transition layout object and invalidate the layout. Invalidating its layout causes the transition layout object to update the position of items based on the new progress value.\n\nWhen your event-handling code determines that the user has finished the transition to the new layout, call the finishInteractiveTransition() method. If your code determines that the user has canceled the transition, call the cancelInteractiveTransition() method to revert the changes instead. Calling either of these methods removes the transition layout object from the collection view and installs the appropriate target layout object.\n\nThis method returns an instance of the UICollectionViewTransitionLayout class by default. If you want it to return a custom transition object instead, implement the collectionView(_:transitionLayoutForOldLayout:newLayout:) method of your collection view delegate and use that method to return your custom object.\n\nSee Also\nChanging the layout\nvar collectionViewLayout: UICollectionViewLayout\nThe layout used to organize the collected view’s items.\nfunc setCollectionViewLayout(UICollectionViewLayout, animated: Bool)\nChanges the collection view’s layout and optionally animates the change.\nfunc setCollectionViewLayout(UICollectionViewLayout, animated: Bool, completion: ((Bool) -> Void)?)\nChanges the collection view’s layout and notifies you when the animations complete.\nfunc finishInteractiveTransition()\nTells the collection view to finish an interactive transition by installing the intended target layout.\nfunc cancelInteractiveTransition()\nTells the collection view to cancel an interactive transition and return to its original layout object.\ntypealias UICollectionView.LayoutInteractiveTransitionCompletion\nThe completion block called at the end of an interactive transition for a collection view."
  },
  {
    "title": "isPrefetchingEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1771771-isprefetchingenabled",
    "html": "Discussion\n\nWhen true, the collection view requests cells in advance of when they will be displayed, spreading the rendering over multiple layout passes. When false, the cells are requested as they are needed for display, often with multiple cells being requested in the same render loop. Setting this property to false also disables data prefetching. The default value of this property is true.\n\nNote\n\nWhen prefetching is enabled the collectionView(_:cellForItemAt:) method on the collection view delegate is called in advance of when the cell is required. To avoid inconsistencies in the visual appearance, use the collectionView(_:willDisplay:forItemAt:) delegate method to update the cell to reflect visual state such as selection.\n\nSee Also\nPrefetching collection view cells and data\nvar prefetchDataSource: UICollectionViewDataSourcePrefetching?\nThe object that acts as the prefetching data source for the collection view, receiving notifications of upcoming cell data requirements.\nprotocol UICollectionViewDataSourcePrefetching\nA protocol that provides advance warning of the data requirements for a collection view, allowing the triggering of asynchronous data load operations."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618065-init",
    "html": "See Also\nCreating a collection view\ninit(frame: CGRect, collectionViewLayout: UICollectionViewLayout)\nCreates a collection view object with the specified frame and layout."
  },
  {
    "title": "indexPath(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618094-indexpath",
    "html": "Parameters\ncell\n\nThe cell object whose index path you want.\n\nReturn Value\n\nThe index path of the cell or nil if the specified cell is not in the collection view.\n\nSee Also\nLocating items and views in the collection view\nfunc indexPathForItem(at: CGPoint) -> IndexPath?\nGets the index path of the item at the specified point in the collection view.\nvar indexPathsForVisibleItems: [IndexPath]\nAn array of the visible items in the collection view.\nfunc cellForItem(at: IndexPath) -> UICollectionViewCell?\nGets the cell object at the index path you specify.\nfunc indexPathsForVisibleSupplementaryElements(ofKind: String) -> [IndexPath]\nGets the index paths of all visible supplementary views of the specified type.\nfunc supplementaryView(forElementKind: String, at: IndexPath) -> UICollectionReusableView?\nGets the supplementary view at the specified index path.\nfunc visibleSupplementaryViews(ofKind: String) -> [UICollectionReusableView]\nGets an array of the visible supplementary views of the specified kind."
  },
  {
    "title": "indexPathsForVisibleSupplementaryElements(ofKind:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618034-indexpathsforvisiblesupplementar",
    "html": "Parameters\nelementKind\n\nThe kind of supplementary view to locate. This value is defined by the layout object. This parameter must not be nil.\n\nReturn Value\n\nAn array of NSIndexPath objects, each of which corresponds to a visible supplementary view in the collection view. If there are no visible supplementary views, this method returns an empty array.\n\nSee Also\nLocating items and views in the collection view\nfunc indexPathForItem(at: CGPoint) -> IndexPath?\nGets the index path of the item at the specified point in the collection view.\nvar indexPathsForVisibleItems: [IndexPath]\nAn array of the visible items in the collection view.\nfunc indexPath(for: UICollectionViewCell) -> IndexPath?\nGets the index path of the specified cell.\nfunc cellForItem(at: IndexPath) -> UICollectionViewCell?\nGets the cell object at the index path you specify.\nfunc supplementaryView(forElementKind: String, at: IndexPath) -> UICollectionReusableView?\nGets the supplementary view at the specified index path.\nfunc visibleSupplementaryViews(ofKind: String) -> [UICollectionReusableView]\nGets an array of the visible supplementary views of the specified kind."
  },
  {
    "title": "supplementaryView(forElementKind:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618041-supplementaryview",
    "html": "Parameters\nelementKind\n\nThe kind of supplementary view to locate. This value is defined by the layout object. This parameter must not be nil.\n\nindexPath\n\nThe index path of the supplementary view. This parameter must not be nil.\n\nReturn Value\n\nThe specified supplementary view, or nil if the view could not be found.\n\nSee Also\nLocating items and views in the collection view\nfunc indexPathForItem(at: CGPoint) -> IndexPath?\nGets the index path of the item at the specified point in the collection view.\nvar indexPathsForVisibleItems: [IndexPath]\nAn array of the visible items in the collection view.\nfunc indexPath(for: UICollectionViewCell) -> IndexPath?\nGets the index path of the specified cell.\nfunc cellForItem(at: IndexPath) -> UICollectionViewCell?\nGets the cell object at the index path you specify.\nfunc indexPathsForVisibleSupplementaryElements(ofKind: String) -> [IndexPath]\nGets the index paths of all visible supplementary views of the specified type.\nfunc visibleSupplementaryViews(ofKind: String) -> [UICollectionReusableView]\nGets an array of the visible supplementary views of the specified kind."
  },
  {
    "title": "cellForItem(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618088-cellforitem",
    "html": "Parameters\nindexPath\n\nThe index path that specifies the section and item number of the cell.\n\nReturn Value\n\nThe cell object at the corresponding index path. In versions of iOS earlier than iOS 15, this method returns nil if the cell isn't visible or if indexPath is out of range. In iOS 15 and later, this method returns a non-nil cell if the collection view retains a prepared cell at the specified index path, even if the cell isn't currently visible.\n\nDiscussion\n\nIn iOS 15 and later, the collection view retains a prepared cell in the following situations:\n\nCells that the collection view prefetches and retains in its cache of prepared cells, but that aren’t visible because the collection view hasn’t displayed them yet.\n\nCells that the collection view finishes displaying and continues to retain in its cache of prepared cells because they remain near the visible region and might scroll back into view.\n\nThe cell that contains the first responder.\n\nThe cell that has focus.\n\nSee Also\nLocating items and views in the collection view\nfunc indexPathForItem(at: CGPoint) -> IndexPath?\nGets the index path of the item at the specified point in the collection view.\nvar indexPathsForVisibleItems: [IndexPath]\nAn array of the visible items in the collection view.\nfunc indexPath(for: UICollectionViewCell) -> IndexPath?\nGets the index path of the specified cell.\nfunc indexPathsForVisibleSupplementaryElements(ofKind: String) -> [IndexPath]\nGets the index paths of all visible supplementary views of the specified type.\nfunc supplementaryView(forElementKind: String, at: IndexPath) -> UICollectionReusableView?\nGets the supplementary view at the specified index path.\nfunc visibleSupplementaryViews(ofKind: String) -> [UICollectionReusableView]\nGets an array of the visible supplementary views of the specified kind."
  },
  {
    "title": "init(title:action:modifierFlags:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicommandalternate/3175315-init",
    "html": "Parameters\ntitle\n\nThe command alternative’s title.\n\naction\n\nThe action to take after a person selects the alternative command.\n\nmodifierFlags\n\nThe bit mask of modifier keys that a person must press. You can use this parameter to specify which modifier keys (Command, Option, and so on) a person must also press. You may specify more than one modifier key. For a list of possible values, see UIKeyModifierFlags.\n\nReturn Value\n\nA command alternative object.\n\nSee Also\nCreating a command alternative\ninit?(coder: NSCoder)\nCreates a command alternative from data in an unarchiver."
  },
  {
    "title": "action | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicommandalternate/3175314-action",
    "html": "See Also\nGetting information about the alternative\nvar title: String\nThe command alternative’s title.\nvar modifierFlags: UIKeyModifierFlags\nThe bit mask of modifier keys that the user must press to invoke the action for the alternative command."
  },
  {
    "title": "allowsMultipleSelectionDuringEditing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/3600421-allowsmultipleselectionduringedi",
    "html": "Discussion\n\nThe default value is false.\n\nSee Also\nSelecting cells\nvar indexPathsForSelectedItems: [IndexPath]?\nThe index paths for the selected items.\nfunc selectItem(at: IndexPath?, animated: Bool, scrollPosition: UICollectionView.ScrollPosition)\nSelects the item at the specified index path and optionally scrolls it into view.\nfunc deselectItem(at: IndexPath, animated: Bool)\nDeselects the item at the specified index.\nvar allowsSelection: Bool\nA Boolean value that indicates whether users can select items in the collection view.\nvar allowsMultipleSelection: Bool\nA Boolean value that determines whether users can select more than one item in the collection view.\nvar allowsSelectionDuringEditing: Bool\nA Boolean value that determines whether users can select cells while the collection view is in editing mode.\nvar selectionFollowsFocus: Bool\nA Boolean value that triggers an automatic selection when focus moves to a cell."
  },
  {
    "title": "textInteractionMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextinteraction/3255086-textinteractionmode",
    "html": "See Also\nGetting interaction information\nvar gesturesForFailureRequirements: [UIGestureRecognizer]\nThe list of gestures that the text interaction adds to the view hierarchy.\nenum UITextInteractionMode\nModes that determine the selection behaviors that a text interaction provides."
  },
  {
    "title": "UITitlebarTitleVisibility.visible | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uititlebartitlevisibility/visible",
    "html": "See Also\nVisibility states\ncase hidden\nA state indicating that the title isn’t visible in the title bar."
  },
  {
    "title": "autoHidesToolbarInFullScreen | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uititlebar/3375822-autohidestoolbarinfullscreen",
    "html": "Discussion\n\nSet this property to true to automatically hide the toolbar when the window enters full-screen mode. While hidden, the user can view the toolbar and menu bar by moving the pointer to the top of the screen. Moving the pointer away from the top of the screen hides the toolbar and menu bar.\n\nThe default value is false.\n\nSee Also\nConfiguring the toolbar\nvar toolbar: NSToolbar?\nThe toolbar displayed beneath or integrated with the title bar.\nvar toolbarStyle: UITitlebarToolbarStyle\nThe style of the toolbar determining its appearance and location related to the title bar.\nenum UITitlebarToolbarStyle\nStyles that determine the toolbar’s appearance and location related to the title bar."
  },
  {
    "title": "UIGraphicsImageRendererFormat.Range.standard | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uigraphicsimagerendererformat/range/standard",
    "html": "Discussion\n\nIf you draw wide-color content into an image renderer context that uses the standard color range, you may lose color information. The system matches the colors to the standard range of their corresponding color space."
  },
  {
    "title": "UIImage.Orientation.down | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/orientation/down",
    "html": "Discussion\n\nIf an image is encoded with this orientation, then displayed by software unaware of orientation metadata, the image appears rotated 180°.\n\nFigure 1 Correcting image data with down orientation for display\n\nSee Also\nImage orientations\ncase up\nThe original pixel data matches the image's intended display orientation.\ncase left\nThe image has been rotated 90° counterclockwise from the orientation of its original pixel data.\ncase right\nThe image has been rotated 90° clockwise from the orientation of its original pixel data.\ncase upMirrored\nThe image has been horizontally flipped from the orientation of its original pixel data.\ncase downMirrored\nThe image has been vertically flipped from the orientation of its original pixel data.\ncase leftMirrored\nThe image has been rotated 90° clockwise and flipped horizontally from the orientation of its original pixel data.\ncase rightMirrored\nThe image has been rotated 90° counterclockwise and flipped horizontally from the orientation of its original pixel data.\nRelated Documentation\ncase down\nThe encoded image data is rotated 180° from the image's intended display orientation."
  },
  {
    "title": "UIImage.Orientation.upMirrored | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/orientation/upmirrored",
    "html": "Discussion\n\nIf an image is encoded with this orientation, then displayed by software unaware of orientation metadata, the image appears horizontally mirrored.\n\nFigure 1 Correcting image data with upMirrored orientation for display\n\nSee Also\nImage orientations\ncase up\nThe original pixel data matches the image's intended display orientation.\ncase down\nThe image has been rotated 180° from the orientation of its original pixel data.\ncase left\nThe image has been rotated 90° counterclockwise from the orientation of its original pixel data.\ncase right\nThe image has been rotated 90° clockwise from the orientation of its original pixel data.\ncase downMirrored\nThe image has been vertically flipped from the orientation of its original pixel data.\ncase leftMirrored\nThe image has been rotated 90° clockwise and flipped horizontally from the orientation of its original pixel data.\ncase rightMirrored\nThe image has been rotated 90° counterclockwise and flipped horizontally from the orientation of its original pixel data.\nRelated Documentation\ncase upMirrored\nThe encoded image data is horizontally flipped from the image's intended display orientation."
  },
  {
    "title": "UIGraphicsImageRendererFormat.Range.unspecified | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uigraphicsimagerendererformat/range/unspecified",
    "html": "Discussion\n\nIn general, avoid specifying this value for an image renderer format. Some color spaces that you access using the imageRendererFormat property of UIImage may use this value."
  },
  {
    "title": "UIImage.Orientation.downMirrored | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/orientation/downmirrored",
    "html": "Discussion\n\nIf an image is encoded with this orientation, then displayed by software unaware of orientation metadata, the image appears vertically flipped. (Alternatively, the image is rotated 180° and then flipped horizontally.)\n\nFigure 1 Correcting image data with downMirrored orientation for display\n\nSee Also\nImage orientations\ncase up\nThe original pixel data matches the image's intended display orientation.\ncase down\nThe image has been rotated 180° from the orientation of its original pixel data.\ncase left\nThe image has been rotated 90° counterclockwise from the orientation of its original pixel data.\ncase right\nThe image has been rotated 90° clockwise from the orientation of its original pixel data.\ncase upMirrored\nThe image has been horizontally flipped from the orientation of its original pixel data.\ncase leftMirrored\nThe image has been rotated 90° clockwise and flipped horizontally from the orientation of its original pixel data.\ncase rightMirrored\nThe image has been rotated 90° counterclockwise and flipped horizontally from the orientation of its original pixel data.\nRelated Documentation\ncase downMirrored\nThe encoded image data is vertically flipped from the image's intended display orientation."
  },
  {
    "title": "deselectItem(at:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618040-deselectitem",
    "html": "Parameters\nindexPath\n\nThe index path of the item to select. Specifying nil results in no change to the current selection.\n\nanimated\n\nSpecify true to animate the change in the selection or false to make the change without animating it.\n\nDiscussion\n\nIf the allowsSelection property is false, calling this method has no effect.\n\nThis method doesn’t cause any selection-related delegate methods to be called.\n\nSee Also\nSelecting cells\nvar indexPathsForSelectedItems: [IndexPath]?\nThe index paths for the selected items.\nfunc selectItem(at: IndexPath?, animated: Bool, scrollPosition: UICollectionView.ScrollPosition)\nSelects the item at the specified index path and optionally scrolls it into view.\nvar allowsSelection: Bool\nA Boolean value that indicates whether users can select items in the collection view.\nvar allowsMultipleSelection: Bool\nA Boolean value that determines whether users can select more than one item in the collection view.\nvar allowsSelectionDuringEditing: Bool\nA Boolean value that determines whether users can select cells while the collection view is in editing mode.\nvar allowsMultipleSelectionDuringEditing: Bool\nA Boolean value that controls whether users can select more than one cell simultaneously in editing mode.\nvar selectionFollowsFocus: Bool\nA Boolean value that triggers an automatic selection when focus moves to a cell."
  },
  {
    "title": "selectItem(at:animated:scrollPosition:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618057-selectitem",
    "html": "Parameters\nindexPath\n\nThe index path of the item to select. Specifying nil for this parameter clears the current selection.\n\nanimated\n\nSpecify true to animate the change in the selection or false to make the change without animating it.\n\nscrollPosition\n\nAn option that specifies where the item should be positioned when scrolling finishes. For a list of possible values, see UICollectionView.ScrollPosition.\n\nDiscussion\n\nIf the allowsSelection property is false, calling this method has no effect. If there’s an existing selection with a different index path and the allowsMultipleSelection property is false, calling this method replaces the previous selection.\n\nThis method doesn’t cause any selection-related delegate methods to be called.\n\nSee Also\nSelecting cells\nvar indexPathsForSelectedItems: [IndexPath]?\nThe index paths for the selected items.\nfunc deselectItem(at: IndexPath, animated: Bool)\nDeselects the item at the specified index.\nvar allowsSelection: Bool\nA Boolean value that indicates whether users can select items in the collection view.\nvar allowsMultipleSelection: Bool\nA Boolean value that determines whether users can select more than one item in the collection view.\nvar allowsSelectionDuringEditing: Bool\nA Boolean value that determines whether users can select cells while the collection view is in editing mode.\nvar allowsMultipleSelectionDuringEditing: Bool\nA Boolean value that controls whether users can select more than one cell simultaneously in editing mode.\nvar selectionFollowsFocus: Bool\nA Boolean value that triggers an automatic selection when focus moves to a cell."
  },
  {
    "title": "hasActiveDrop | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/2897433-hasactivedrop",
    "html": "See Also\nManaging drop interactions\nvar dropDelegate: UICollectionViewDropDelegate?\nThe delegate object that manages the dropping of items into the collection view.\nprotocol UICollectionViewDropDelegate\nThe interface for handling drops in a collection view.\nvar reorderingCadence: UICollectionView.ReorderingCadence\nThe speed at which items in the collection view are reordered to show potential drop locations.\nenum UICollectionView.ReorderingCadence\nConstants indicating the speed at which collection view items are reorganized during a drop."
  },
  {
    "title": "imageView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623270-imageview",
    "html": "Deprecated\n\nUse a content configuration to manage the cell’s image instead. Use defaultContentConfiguration() to get a default list content configuration, set your image to the image property of the configuration, and apply the configuration by setting it to the contentConfiguration property of the cell.\n\nDiscussion\n\nReturns the image view (UIImageView object) of the table view, which initially has no image set. If an image is set, it appears on the left side of the cell, before any label. UITableViewCell creates the image-view object when you create the cell.\n\nThis property is mutually exclusive with a content configuration. Setting a non-nil value for contentConfiguration resets this property to nil.\n\nSee Also\nDeprecated\nvar textLabel: UILabel?\nThe label to use for the main textual content of the table cell.\nDeprecated\nvar detailTextLabel: UILabel?\nThe secondary label of the table cell, if one exists.\nDeprecated\nRelated Documentation\ninit(style: UITableViewCell.CellStyle, reuseIdentifier: String?)\nInitializes a table cell with a style and a reuse identifier and returns it to the caller."
  },
  {
    "title": "textLabel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623210-textlabel",
    "html": "Deprecated\n\nUse a content configuration to manage the cell’s text instead. Use defaultContentConfiguration() to get a default list content configuration, set your primary text to the text property of the configuration, and apply the configuration by setting it to the contentConfiguration property of the cell.\n\nDiscussion\n\nThis property holds the main label of the cell. UITableViewCell adds an appropriate label when you create the cell in a particular cell style. See UITableViewCell.CellStyle for descriptions of the main label in currently defined cell styles.\n\nThis property is mutually exclusive with a content configuration. Setting a non-nil value for contentConfiguration resets this property to nil.\n\nSee Also\nDeprecated\nvar detailTextLabel: UILabel?\nThe secondary label of the table cell, if one exists.\nDeprecated\nvar imageView: UIImageView?\nThe image view of the table cell.\nDeprecated\nRelated Documentation\ninit(style: UITableViewCell.CellStyle, reuseIdentifier: String?)\nInitializes a table cell with a style and a reuse identifier and returns it to the caller."
  },
  {
    "title": "collectionView(_:contextMenuConfiguration:highlightPreviewForItemAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/4002185-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view containing the item.\n\nconfiguration\n\nThe configuration of the menu to present if the interaction proceeds.\n\nindexPath\n\nThe index path of the item where the interaction occurs.\n\nReturn Value\n\nA targeted preview object corresponding to the item at the index path to use during the menu’s highlight and presentation animation.\n\nDiscussion\n\nThe system calls this method when a context-menu interaction begins. Implement this method to override the default highlight preview that the collection view generates for the item at indexPath.\n\nSee Also\nManaging context menus\nAdding Context Menus in Your App\nProvide quick access to useful actions by adding context menus to your iOS app.\nfunc collectionView(UICollectionView, willDisplayContextMenu: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nInforms the delegate when a context menu will appear.\nfunc collectionView(UICollectionView, willEndContextMenuInteraction: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nInforms the delegate when a context menu will disappear.\nfunc collectionView(UICollectionView, willPerformPreviewActionForMenuWith: UIContextMenuConfiguration, animator: UIContextMenuInteractionCommitAnimating)\nInforms the delegate when a user triggers a commit by tapping the preview.\nfunc collectionView(UICollectionView, contextMenuConfigurationForItemsAt: [IndexPath], point: CGPoint) -> UIContextMenuConfiguration?\nAsks the delegate for a context-menu configuration for the items at the specified index paths.\nfunc collectionView(UICollectionView, contextMenuConfiguration: UIContextMenuConfiguration, dismissalPreviewForItemAt: IndexPath) -> UITargetedPreview?\nAsks the delegate for a preview of the item at the specified index path when a context-menu interaction ends."
  },
  {
    "title": "collectionView(_:willDisplayContextMenu:animator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/3601203-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view that informs the delegate of this event.\n\nconfiguration\n\nThe configuration of the menu to display.\n\nanimator\n\nThe animations to run alongside the appearance transition.\n\nSee Also\nManaging context menus\nAdding Context Menus in Your App\nProvide quick access to useful actions by adding context menus to your iOS app.\nfunc collectionView(UICollectionView, willEndContextMenuInteraction: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nInforms the delegate when a context menu will disappear.\nfunc collectionView(UICollectionView, willPerformPreviewActionForMenuWith: UIContextMenuConfiguration, animator: UIContextMenuInteractionCommitAnimating)\nInforms the delegate when a user triggers a commit by tapping the preview.\nfunc collectionView(UICollectionView, contextMenuConfigurationForItemsAt: [IndexPath], point: CGPoint) -> UIContextMenuConfiguration?\nAsks the delegate for a context-menu configuration for the items at the specified index paths.\nfunc collectionView(UICollectionView, contextMenuConfiguration: UIContextMenuConfiguration, highlightPreviewForItemAt: IndexPath) -> UITargetedPreview?\nAsks the delegate for a preview of the item at the specified index path when a context-menu interaction begins.\nfunc collectionView(UICollectionView, contextMenuConfiguration: UIContextMenuConfiguration, dismissalPreviewForItemAt: IndexPath) -> UITargetedPreview?\nAsks the delegate for a preview of the item at the specified index path when a context-menu interaction ends."
  },
  {
    "title": "hasActiveDrag | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/2897415-hasactivedrag",
    "html": "See Also\nManaging drag interactions\nvar dragDelegate: UICollectionViewDragDelegate?\nThe delegate object that manages the dragging of items from the collection view.\nprotocol UICollectionViewDragDelegate\nThe interface for initiating drags from a collection view.\nvar dragInteractionEnabled: Bool\nA Boolean value that indicates whether the collection view supports dragging content."
  },
  {
    "title": "dragDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/2897404-dragdelegate",
    "html": "See Also\nManaging drag interactions\nprotocol UICollectionViewDragDelegate\nThe interface for initiating drags from a collection view.\nvar hasActiveDrag: Bool\nA Boolean value that indicates whether items were lifted from the collection view and have not yet been dropped.\nvar dragInteractionEnabled: Bool\nA Boolean value that indicates whether the collection view supports dragging content."
  },
  {
    "title": "collectionView(_:targetContentOffsetForProposedContentOffset:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/1618007-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view making the request.\n\nproposedContentOffset\n\nThe proposed point (in the coordinate space of the collection view’s content view) for the upper-left corner of the visible content. This represents the point that the collection view has calculated as the most likely value to use for the animations or layout update.\n\nReturn Value\n\nThe content offset that you want to use instead. If you do not implement this method, the collection view uses the value in the proposedContentOffset parameter.\n\nDiscussion\n\nDuring layout updates, or when transitioning between layouts, the collection view calls this method to give you the opportunity to change the proposed content offset to use at the end of the animation. You might return a new value if the layout or animations might cause items to be positioned in a way that is not optimal for your design.\n\nThis method is called after the layout object’s targetContentOffset(forProposedContentOffset:) method. Implement this method in situations where you do not want to subclass your layout object to modify the content offset.\n\nSee Also\nHandling layout changes\nfunc collectionView(UICollectionView, transitionLayoutForOldLayout: UICollectionViewLayout, newLayout: UICollectionViewLayout) -> UICollectionViewTransitionLayout\nAsks for the custom transition layout to use when moving between the specified layouts.\nfunc collectionView(UICollectionView, targetIndexPathForMoveOfItemFromOriginalIndexPath: IndexPath, atCurrentIndexPath: IndexPath, toProposedIndexPath: IndexPath) -> IndexPath\nAsks the delegate for the index path to use when moving an item."
  },
  {
    "title": "collectionView(_:didDeselectItemAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/1618035-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view object that is notifying you of the selection change.\n\nindexPath\n\nThe index path of the cell that was deselected.\n\nDiscussion\n\nThe collection view calls this method when the user successfully deselects an item in the collection view. It does not call this method when you programmatically deselect items.\n\nSee Also\nManaging the selected cells\nChanging the Appearance of Selected and Highlighted Cells\nProvide visual feedback to the user about the state of a cell and the transition between states.\nSelecting multiple items with a two-finger pan gesture\nAccelerate user selection of multiple items using the multiselect gesture on table and collection views.\nfunc collectionView(UICollectionView, shouldSelectItemAt: IndexPath) -> Bool\nAsks the delegate if the specified item should be selected.\nfunc collectionView(UICollectionView, didSelectItemAt: IndexPath)\nTells the delegate that the item at the specified index path was selected.\nfunc collectionView(UICollectionView, shouldDeselectItemAt: IndexPath) -> Bool\nAsks the delegate if the specified item should be deselected.\nfunc collectionView(UICollectionView, shouldBeginMultipleSelectionInteractionAt: IndexPath) -> Bool\nAsks the delegate whether the user can select multiple items using a two-finger pan gesture in a collection view.\nfunc collectionView(UICollectionView, didBeginMultipleSelectionInteractionAt: IndexPath)\nTells the delegate when the user starts using a two-finger pan gesture to select multiple items in a collection view.\nfunc collectionViewDidEndMultipleSelectionInteraction(UICollectionView)\nTells the delegate when the user stops using a two-finger pan gesture to select multiple items in a collection view."
  },
  {
    "title": "collectionView(_:didUpdateFocusIn:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/1618081-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view object notifying you of the focus change.\n\ncontext\n\nThe context object containing metadata associated with the focus change. This object contains the index path of the previously focused item and the currently focused item.\n\ncoordinator\n\nThe animation coordinator to use when creating any additional animations.\n\nDiscussion\n\nThe collection view calls this method when a focus-related change occurs. You can use this method to update your app’s state information or to animate changes to your app’s visual appearance.\n\nIf you subclass UICollectionView, you can also implement the same behavior by overriding the didUpdateFocus(in:with:) method, which is defined by the UIFocusEnvironment protocol and adopted by all views.\n\nSee Also\nWorking with focus\nfunc collectionView(UICollectionView, canFocusItemAt: IndexPath) -> Bool\nAsks the delegate whether the item at the specified index path can be focused.\nfunc indexPathForPreferredFocusedView(in: UICollectionView) -> IndexPath?\nAsks the delegate for the index path of the cell that should be focused.\nfunc collectionView(UICollectionView, shouldUpdateFocusIn: UICollectionViewFocusUpdateContext) -> Bool\nAsks the delegate whether a change in focus should occur.\nfunc collectionView(UICollectionView, selectionFollowsFocusForItemAt: IndexPath) -> Bool\nAsks the delegate whether to relate selection and focus behavior for the cell at the corresponding index path.\nRelated Documentation\nfunc didUpdateFocus(in: UIFocusUpdateContext, with: UIFocusAnimationCoordinator)\nCalled immediately after the system updates the focus to a new view."
  },
  {
    "title": "collectionView(_:shouldBeginMultipleSelectionInteractionAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/3183916-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view calling this method.\n\nindexPath\n\nThe index path of the item that the user touched to start the two-finger pan gesture.\n\nReturn Value\n\ntrue to allow the user to select multiple items using a two-finger pan gesture; otherwise, false to disable the behavior. The default value is false.\n\nDiscussion\n\nWhen the system recognizes a two-finger pan gesture, it calls this method before it sets isEditing to true. If you return true from this method, the user can select multiple items using a two-finger pan gesture.\n\nUsers can select multiple items using the two-finger pan gesture on collection views that scroll either horizontally or vertically, but not both. Collection views that scroll in both directions won’t recognize the gesture or call this method.\n\nIf you don’t implement this method, the system uses the value of allowsMultipleSelectionDuringEditing to determine whether a user can select multiple items using a pan gesture.\n\nSee Also\nManaging the selected cells\nChanging the Appearance of Selected and Highlighted Cells\nProvide visual feedback to the user about the state of a cell and the transition between states.\nSelecting multiple items with a two-finger pan gesture\nAccelerate user selection of multiple items using the multiselect gesture on table and collection views.\nfunc collectionView(UICollectionView, shouldSelectItemAt: IndexPath) -> Bool\nAsks the delegate if the specified item should be selected.\nfunc collectionView(UICollectionView, didSelectItemAt: IndexPath)\nTells the delegate that the item at the specified index path was selected.\nfunc collectionView(UICollectionView, shouldDeselectItemAt: IndexPath) -> Bool\nAsks the delegate if the specified item should be deselected.\nfunc collectionView(UICollectionView, didDeselectItemAt: IndexPath)\nTells the delegate that the item at the specified path was deselected.\nfunc collectionView(UICollectionView, didBeginMultipleSelectionInteractionAt: IndexPath)\nTells the delegate when the user starts using a two-finger pan gesture to select multiple items in a collection view.\nfunc collectionViewDidEndMultipleSelectionInteraction(UICollectionView)\nTells the delegate when the user stops using a two-finger pan gesture to select multiple items in a collection view."
  },
  {
    "title": "collectionView(_:shouldHighlightItemAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/1618070-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view object that is asking about the highlight change.\n\nindexPath\n\nThe index path of the cell to be highlighted.\n\nReturn Value\n\ntrue if the item should be highlighted or false if it should not.\n\nDiscussion\n\nAs touch events arrive, the collection view highlights items in anticipation of the user selecting them. As it processes those touch events, the collection view calls this method to ask your delegate if a given cell should be highlighted. It calls this method only in response to user interactions and does not call it if you programmatically set the highlighting on a cell.\n\nIf you return false in your implementation, the cell does not get highlighted and the system bypasses the entire selection process. That is, the system does not call collectionView(_:shouldSelectItemAt:) or any other selection-related methods. If you return true, isHighlighted is set to true, collectionView(_:didHighlightItemAt:) is called, and the system begins the selection process.\n\nIf you do not implement this method, the default return value is true.\n\nSee Also\nManaging cell highlighting\nfunc collectionView(UICollectionView, didHighlightItemAt: IndexPath)\nTells the delegate that the item at the specified index path was highlighted.\nfunc collectionView(UICollectionView, didUnhighlightItemAt: IndexPath)\nTells the delegate that the highlight was removed from the item at the specified index path."
  },
  {
    "title": "collectionView(_:didHighlightItemAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/1618049-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view object that is notifying you of the highlight change.\n\nindexPath\n\nThe index path of the cell that was highlighted.\n\nDiscussion\n\nThe collection view calls this method only in response to user interactions and does not call it if you programmatically set the highlighting on a cell.\n\nSee Also\nManaging cell highlighting\nfunc collectionView(UICollectionView, shouldHighlightItemAt: IndexPath) -> Bool\nAsks the delegate if the item should be highlighted during tracking.\nfunc collectionView(UICollectionView, didUnhighlightItemAt: IndexPath)\nTells the delegate that the highlight was removed from the item at the specified index path."
  },
  {
    "title": "indexPathForPreferredFocusedView(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/1618066-indexpathforpreferredfocusedview",
    "html": "Parameters\ncollectionView\n\nThe collection view object requesting this information.\n\nReturn Value\n\nThe index path of the preferred cell. The index path you specify must correspond to a valid cell in the collection view.\n\nDiscussion\n\nWhen focus is about to change to a collection view, the collection view must pick which of its subviews should receive that focus. If the collection view’s remembersLastFocusedIndexPath property is set to true, the collection view returns the index path of the cell that was last focused. If the remembersLastFocusedIndexPath property is false, or if there is no saved index path because no cell was previously focused, the collection view calls this method so that you can specify which cell should receive focus. If you do not implement this method, the collection view returns an appropriate cell.\n\nThe effects of this method may be ignored during or immediately after a view controller transition, such as a presentation dismissal or navigation stack pop. In such cases, the view controller attempts to restore focus to the item that was focused prior to the transition (for example, prior to the view controller being presented or pushed), which can take precedence over the effects of this method. To learn how to control or disable this behavior in the view controller, see restoresFocusAfterTransition.\n\nIf you subclass UICollectionView, you can also implement the same behavior by overriding the preferredFocusEnvironments property, which is defined by the UIFocusEnvironment protocol and adopted by all views.\n\nSee Also\nWorking with focus\nfunc collectionView(UICollectionView, canFocusItemAt: IndexPath) -> Bool\nAsks the delegate whether the item at the specified index path can be focused.\nfunc collectionView(UICollectionView, shouldUpdateFocusIn: UICollectionViewFocusUpdateContext) -> Bool\nAsks the delegate whether a change in focus should occur.\nfunc collectionView(UICollectionView, didUpdateFocusIn: UICollectionViewFocusUpdateContext, with: UIFocusAnimationCoordinator)\nTells the delegate that a focus update occurred.\nfunc collectionView(UICollectionView, selectionFollowsFocusForItemAt: IndexPath) -> Bool\nAsks the delegate whether to relate selection and focus behavior for the cell at the corresponding index path.\nRelated Documentation\nvar preferredFocusedView: UIView?\nSpecifies the view that should be focused if this environment is focused."
  },
  {
    "title": "collectionView(_:shouldUpdateFocusIn:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/1618072-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view object requesting this information.\n\ncontext\n\nThe context object containing metadata associated with the focus change. This object contains the index path of the previously focused item and the item targeted to receive focus next. Use this information to determine if the focus change should occur.\n\nReturn Value\n\ntrue if the focus change should occur or false if it should not.\n\nDiscussion\n\nBefore a focus change can occur, the focus engine asks all affected views if such a change should occur. In response, the collection view calls this method to give you the opportunity to allow or prevent the change. Return this method to prevent changes that should not occur. For example, you might use it to ensure that the navigation between cells occurs in a specific order.\n\nIf you do not implement this method, the collection view assumes a return value of true.\n\nIf you subclass UICollectionView, you can also implement the same behavior by overriding the shouldUpdateFocus(in:) method, which is defined by the UIFocusEnvironment protocol and adopted by all views.\n\nSee Also\nWorking with focus\nfunc collectionView(UICollectionView, canFocusItemAt: IndexPath) -> Bool\nAsks the delegate whether the item at the specified index path can be focused.\nfunc indexPathForPreferredFocusedView(in: UICollectionView) -> IndexPath?\nAsks the delegate for the index path of the cell that should be focused.\nfunc collectionView(UICollectionView, didUpdateFocusIn: UICollectionViewFocusUpdateContext, with: UIFocusAnimationCoordinator)\nTells the delegate that a focus update occurred.\nfunc collectionView(UICollectionView, selectionFollowsFocusForItemAt: IndexPath) -> Bool\nAsks the delegate whether to relate selection and focus behavior for the cell at the corresponding index path.\nRelated Documentation\nfunc shouldUpdateFocus(in: UIFocusUpdateContext) -> Bool\nReturns a Boolean value indicating whether the focus engine should allow the focus update described by the specified context to occur."
  },
  {
    "title": "selfSizingInvalidation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/4001100-selfsizinginvalidation",
    "html": "Discussion\n\nRelated Sessions from WWDC22\n\nSession 10068: What’s new in UIKit\n\nSee Also\nResizing self-sizing cells\nenum UICollectionView.SelfSizingInvalidation\nConstants that describe modes for invalidating the size of self-sizing collection view cells."
  },
  {
    "title": "UICollectionView.SelfSizingInvalidation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/selfsizinginvalidation",
    "html": "Overview\n\nUse these constants with the selfSizingInvalidation property.\n\nTopics\nConstants\ncase disabled\nA mode that disables self-sizing invalidation.\ncase enabled\nA mode that enables manual self-sizing invalidation.\ncase enabledIncludingConstraints\nA mode that enables automatic self-sizing invalidation after Auto Layout changes.\nRelationships\nConforms To\nSendable\nSee Also\nResizing self-sizing cells\nvar selfSizingInvalidation: UICollectionView.SelfSizingInvalidation\nThe mode that the collection view uses for invalidating the size of self-sizing cells."
  },
  {
    "title": "dequeueReusableSupplementaryView(ofKind:withReuseIdentifier:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618068-dequeuereusablesupplementaryview",
    "html": "Parameters\nelementKind\n\nThe kind of supplementary view to retrieve. This value is defined by the layout object. This parameter must not be nil.\n\nidentifier\n\nThe reuse identifier for the specified view. This parameter must not be nil.\n\nindexPath\n\nThe index path specifying the location of the supplementary view in the collection view. The data source receives this information when it’s asked for the view and should just pass it along. This method uses the information to perform additional configuration based on the view’s position in the collection view.\n\nReturn Value\n\nA valid UICollectionReusableView object.\n\nDiscussion\n\nCall this method from your data source object when asked to provide a new supplementary view for the collection view. This method dequeues an existing view if one is available or creates a new one based on the class or nib file you previously registered.\n\nImportant\n\nYou must register a class or nib file using the register(_:forSupplementaryViewOfKind:withReuseIdentifier:) or register(_:forSupplementaryViewOfKind:withReuseIdentifier:) method before calling this method. You can also register a set of default supplementary views with the layout object using the register(_:forDecorationViewOfKind:) or register(_:forDecorationViewOfKind:) method.\n\nIf you registered a class for the specified identifier and a new cell must be created, this method initializes the cell by calling its init(frame:) method. For nib-based cells, this method loads the cell object from the provided nib file. If an existing cell was available for reuse, this method calls the cell’s prepareForReuse() method instead.\n\nSee Also\nCreating headers and footers\nstruct UICollectionView.SupplementaryRegistration\nA registration for the collection view’s supplementary views.\nfunc dequeueConfiguredReusableSupplementary<Supplementary>(using: UICollectionView.SupplementaryRegistration<Supplementary>, for: IndexPath) -> Supplementary\nDequeues a configured reusable supplementary view object.\nfunc register(AnyClass?, forSupplementaryViewOfKind: String, withReuseIdentifier: String)\nRegisters a class for use in creating supplementary views for the collection view.\nfunc register(UINib?, forSupplementaryViewOfKind: String, withReuseIdentifier: String)\nRegisters a nib file for use in creating supplementary views for the collection view."
  },
  {
    "title": "UICollectionView.ElementCategory | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/elementcategory",
    "html": "Topics\nConstants\ncase cell\nThe view is a cell.\ncase supplementaryView\nThe view is a supplementary view.\ncase decorationView\nThe view is a decoration view.\nRelationships\nConforms To\nSendable\nSee Also\nIdentifying collection view elements\nclass let elementKindSectionFooter: String\nA supplementary view that identifies the footer for a given section.\nclass let elementKindSectionHeader: String\nA supplementary view that identifies the header for a given section."
  },
  {
    "title": "reloadData() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618078-reloaddata",
    "html": "Discussion\n\nCall this method sparingly when you need to reload all of the items in the collection view. This causes the collection view to discard any currently visible items (including placeholders) and recreate items based on the current state of the data source object. For efficiency, the collection view only displays those cells and supplementary views that are visible. If the collection data shrinks as a result of the reload, the collection view adjusts its scrolling offsets accordingly.\n\nYou shouldn’t call this method in the middle of animation blocks where items are being inserted or deleted. Insertions and deletions automatically cause the collection’s data to be updated appropriately.\n\nSee Also\nReloading content\nvar hasUncommittedUpdates: Bool\nA Boolean value that indicates whether the collection view contains drop placeholders or is reordering its items as part of handling a drop.\nfunc reconfigureItems(at: [IndexPath])\nUpdates the data for the items at the index paths you specify, preserving the existing cells for the items.\nfunc reloadSections(IndexSet)\nReloads the data in the specified sections of the collection view.\nfunc reloadItems(at: [IndexPath])\nReloads just the items at the specified index paths."
  },
  {
    "title": "UICollectionView.SupplementaryRegistration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/supplementaryregistration",
    "html": "Overview\n\nUse a supplementary registration to register supplementary views, like headers and footers, with your collection view and configure each view for display. You create a supplementary registration with your supplementary view type and data item type as the registration’s generic parameters, passing in a registration handler to configure the view. In the registration handler, you specify how to configure the content and appearance of that type of supplementary view.\n\nThe following example creates a supplementary registration for a custom header view subclass.\n\nlet headerRegistration = UICollectionView.SupplementaryRegistration\n    <HeaderView>(elementKind: \"Header\") {\n    supplementaryView, string, indexPath in\n    supplementaryView.label.text = \"\\(string) for section \\(indexPath.section)\"\n    supplementaryView.backgroundColor = .lightGray\n}\n\n\nAfter you create a supplementary registration, you pass it in to dequeueConfiguredReusableSupplementary(using:for:), which you call from your data source’s supplementaryViewProvider.\n\ndataSource.supplementaryViewProvider = { collectionView, elementKind, indexPath in\n    return collectionView.dequeueConfiguredReusableSupplementary(using: headerRegistration,\n                                                                 for: indexPath)\n}\n\n\nYou don’t need to call register(_:forSupplementaryViewOfKind:withReuseIdentifier:) or register(_:forSupplementaryViewOfKind:withReuseIdentifier:). The registration occurs automatically when you pass the supplementary view registration to dequeueConfiguredReusableSupplementary(using:for:).\n\nImportant\n\nDon’t create your supplementary view registration inside a UICollectionViewDiffableDataSource.SupplementaryViewProvider closure; doing so prevents reuse, and generates an exception in iOS 15 and higher.\n\nTopics\nCreating a supplementary registration\ninit(elementKind: String, handler: UICollectionView.SupplementaryRegistration<Supplementary>.Handler)\nCreates a supplementary registration for the specified element kind with a registration handler.\ninit(supplementaryNib: UINib, elementKind: String, handler: UICollectionView.SupplementaryRegistration<Supplementary>.Handler)\nCreates a supplementary registration for the specified element kind with a registration handler and nib file.\ntypealias UICollectionView.SupplementaryRegistration.Handler\nA closure that handles the supplementary view registration and configuration.\nSee Also\nCreating headers and footers\nfunc dequeueConfiguredReusableSupplementary<Supplementary>(using: UICollectionView.SupplementaryRegistration<Supplementary>, for: IndexPath) -> Supplementary\nDequeues a configured reusable supplementary view object.\nfunc register(AnyClass?, forSupplementaryViewOfKind: String, withReuseIdentifier: String)\nRegisters a class for use in creating supplementary views for the collection view.\nfunc register(UINib?, forSupplementaryViewOfKind: String, withReuseIdentifier: String)\nRegisters a nib file for use in creating supplementary views for the collection view.\nfunc dequeueReusableSupplementaryView(ofKind: String, withReuseIdentifier: String, for: IndexPath) -> UICollectionReusableView\nDequeues a reusable supplementary view located by its identifier and kind."
  },
  {
    "title": "reconfigureItems(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/3801889-reconfigureitems",
    "html": "Parameters\nindexPaths\n\nAn array of NSIndexPath objects identifying the items you want to update.\n\nDiscussion\n\nTo update the contents of existing (including prefetched) cells without replacing them with new cells, use this method instead of reloadItems(at:). For optimal performance, choose to reconfigure items instead of reloading items unless you have an explicit need to replace the existing cell with a new cell.\n\nYour cell provider must dequeue the same type of cell for the provided index path, and must return the same existing cell for a given index path. Because this method reconfigures existing cells, the collection view doesn’t call prepareForReuse() for each cell dequeued. If you need to return a different type of cell for an index path, use reloadItems(at:) instead.\n\nIf your cells are self-sizing, the collection view resizes your cells after reconfiguring them.\n\nBy default, the collection view animates any size or layout changes that result from reconfiguration. To reconfigure cells without animation, use UIView’s performWithoutAnimation(_:) when you call this method. Alternatively, to avoid animations when setting specific properties, use performWithoutAnimation(_:) in your cell configuration logic.\n\nIf your collection view uses a custom implementation of UICollectionViewDataSource, use this method. If your collection view uses a diffable data source, use reconfigureItems(_:) on NSDiffableDataSourceSnapshot instead.\n\nSee Also\nReloading content\nvar hasUncommittedUpdates: Bool\nA Boolean value that indicates whether the collection view contains drop placeholders or is reordering its items as part of handling a drop.\nfunc reloadData()\nReloads all of the data for the collection view.\nfunc reloadSections(IndexSet)\nReloads the data in the specified sections of the collection view.\nfunc reloadItems(at: [IndexPath])\nReloads just the items at the specified index paths."
  },
  {
    "title": "elementKindSectionFooter | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1617697-elementkindsectionfooter",
    "html": "See Also\nIdentifying collection view elements\nenum UICollectionView.ElementCategory\nConstants specifying the type of view.\nclass let elementKindSectionHeader: String\nA supplementary view that identifies the header for a given section."
  },
  {
    "title": "UITableViewCell.StateMask | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/statemask",
    "html": "Overview\n\nThe methods that use these constants are didTransition(to:) and willTransition(to:).\n\nTopics\nConstants\nstatic var showingEditControl: UITableViewCell.StateMask\nThe state of a table view cell when the table view is in editing mode.\nstatic var showingDeleteConfirmation: UITableViewCell.StateMask\nThe state of a table view cell that shows a button requesting confirmation of a delete gesture.\nInitializers\ninit(rawValue: UInt)\nCreates a state mask with the specified raw value.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nAdjusting to state transitions\nfunc willTransition(to: UITableViewCell.StateMask)\nNotifies the cell that it’s about to transition to a new cell state.\nfunc didTransition(to: UITableViewCell.StateMask)\nNotifies the cell that it transitioned to a new cell state."
  },
  {
    "title": "UITableViewCell.SeparatorStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/separatorstyle",
    "html": "Overview\n\nYou use these constants to set the value of the separatorStyle property defined by UITableView.\n\nTopics\nConstants\ncase none\nThe separator cell has no distinct style.\ncase singleLine\nThe separator cell has a single line running across its width.\ncase singleLineEtched\nThe separator cell has double lines running across its width, giving it an etched look.\nDeprecated\nRelationships\nConforms To\nSendable\nSee Also\nManaging content indentation\nvar indentationLevel: Int\nThe indentation level of the cell’s content.\nvar indentationWidth: CGFloat\nThe width for each level of indentation of a cell’s content.\nvar shouldIndentWhileEditing: Bool\nA Boolean value that controls whether the cell background is indented when the table view is in editing mode.\nvar separatorInset: UIEdgeInsets\nThe inset values for the separator line drawn beneath the cell."
  },
  {
    "title": "reloadSections(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618092-reloadsections",
    "html": "Parameters\nsections\n\nThe indexes of the sections to reload.\n\nDiscussion\n\nCall this method to selectively reload only the items in the specified sections. This causes the collection view to discard any cells associated with those items and redisplay them. This method also discards any placeholders in the specified sections.\n\nSee Also\nReloading content\nvar hasUncommittedUpdates: Bool\nA Boolean value that indicates whether the collection view contains drop placeholders or is reordering its items as part of handling a drop.\nfunc reconfigureItems(at: [IndexPath])\nUpdates the data for the items at the index paths you specify, preserving the existing cells for the items.\nfunc reloadData()\nReloads all of the data for the collection view.\nfunc reloadItems(at: [IndexPath])\nReloads just the items at the specified index paths."
  },
  {
    "title": "reloadItems(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618055-reloaditems",
    "html": "Parameters\nindexPaths\n\nAn array of NSIndexPath objects identifying the items you want to update.\n\nDiscussion\n\nCall this method to selectively reload only the specified items. This causes the collection view to discard any cells associated with those items and redisplay them.\n\nSee Also\nReloading content\nvar hasUncommittedUpdates: Bool\nA Boolean value that indicates whether the collection view contains drop placeholders or is reordering its items as part of handling a drop.\nfunc reconfigureItems(at: [IndexPath])\nUpdates the data for the items at the index paths you specify, preserving the existing cells for the items.\nfunc reloadData()\nReloads all of the data for the collection view.\nfunc reloadSections(IndexSet)\nReloads the data in the specified sections of the collection view."
  },
  {
    "title": "f12 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeycommand/3538635-f12",
    "html": "See Also\nFunction keys\nclass let f1: String\nA string representing the F1 key.\nclass let f2: String\nA string representing the F2 key.\nclass let f3: String\nA string representing the F3 key.\nclass let f4: String\nA string representing the F4 key.\nclass let f5: String\nA string representing the F5 key.\nclass let f6: String\nA string representing the F6 key.\nclass let f7: String\nA string representing the F7 key.\nclass let f8: String\nA string representing the F8 key.\nclass let f9: String\nA string representing the F9 key.\nclass let f10: String\nA string representing the F10 key.\nclass let f11: String\nA string representing the F11 key."
  },
  {
    "title": "f3 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeycommand/3538637-f3",
    "html": "See Also\nFunction keys\nclass let f1: String\nA string representing the F1 key.\nclass let f2: String\nA string representing the F2 key.\nclass let f4: String\nA string representing the F4 key.\nclass let f5: String\nA string representing the F5 key.\nclass let f6: String\nA string representing the F6 key.\nclass let f7: String\nA string representing the F7 key.\nclass let f8: String\nA string representing the F8 key.\nclass let f9: String\nA string representing the F9 key.\nclass let f10: String\nA string representing the F10 key.\nclass let f11: String\nA string representing the F11 key.\nclass let f12: String\nA string representing the F12 key."
  },
  {
    "title": "f11 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeycommand/3538634-f11",
    "html": "See Also\nFunction keys\nclass let f1: String\nA string representing the F1 key.\nclass let f2: String\nA string representing the F2 key.\nclass let f3: String\nA string representing the F3 key.\nclass let f4: String\nA string representing the F4 key.\nclass let f5: String\nA string representing the F5 key.\nclass let f6: String\nA string representing the F6 key.\nclass let f7: String\nA string representing the F7 key.\nclass let f8: String\nA string representing the F8 key.\nclass let f9: String\nA string representing the F9 key.\nclass let f10: String\nA string representing the F10 key.\nclass let f12: String\nA string representing the F12 key."
  },
  {
    "title": "collectionView(_:contextMenuConfigurationForItemAt:point:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/3295917-collectionview",
    "html": "Deprecated\n\nUse collectionView(_:contextMenuConfigurationForItemsAt:point:) instead.\n\nParameters\ncollectionView\n\nThe collection view containing the item.\n\nindexPath\n\nThe index path of the item for which a configuration is being requested.\n\npoint\n\nThe location of the interaction in the collection view’s coordinate space.\n\nReturn Value\n\nA contextual menu configuration object describing the menu to be presented. Returning nil prevents the interaction from beginning. Returning an empty configuration object causes the interaction to begin, and then end with a cancellation effect.\n\nDiscussion\n\nYou can use the cancellation effect from returning an empty configuration to indicate to users that it’s possible for a menu to be presented from this item, but that there are no actions to present at this particular time.\n\nSee Also\nDeprecated\nfunc collectionView(UICollectionView, targetIndexPathForMoveFromItemAt: IndexPath, toProposedIndexPath: IndexPath) -> IndexPath\nAsks the delegate for the index path to use when moving an item.\nDeprecated\nfunc collectionView(UICollectionView, previewForDismissingContextMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nReturns the destination view when dismissing a context menu.\nDeprecated\nfunc collectionView(UICollectionView, previewForHighlightingContextMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nReturns a view to override the default preview the collection view created.\nDeprecated\nfunc collectionView(UICollectionView, shouldShowMenuForItemAt: IndexPath) -> Bool\nAsks the delegate if an action menu should be displayed for the specified item.\nDeprecated\nfunc collectionView(UICollectionView, canPerformAction: Selector, forItemAt: IndexPath, withSender: Any?) -> Bool\nAsks the delegate if it can perform the specified action on an item in the collection view.\nDeprecated\nfunc collectionView(UICollectionView, performAction: Selector, forItemAt: IndexPath, withSender: Any?)\nTells the delegate to perform the specified action on an item in the collection view.\nDeprecated"
  },
  {
    "title": "collectionView(_:performAction:forItemAt:withSender:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/1618073-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view object that is making the request.\n\naction\n\nThe selector representing the action to be performed.\n\nindexPath\n\nThe index path of the affected item.\n\nsender\n\nThe object that initiated the action.\n\nDiscussion\n\nIf the user taps an action in the editing menu, the collection view calls this method. Your implementation of this method should do whatever is appropriate for the action. For example, for a copy action, it should extract the relevant item content and write it to the general pasteboard or an application (private) pasteboard.\n\nFor information about how to perform pasteboard-related operations, see UIPasteboard.\n\nSee Also\nDeprecated\nfunc collectionView(UICollectionView, targetIndexPathForMoveFromItemAt: IndexPath, toProposedIndexPath: IndexPath) -> IndexPath\nAsks the delegate for the index path to use when moving an item.\nDeprecated\nfunc collectionView(UICollectionView, contextMenuConfigurationForItemAt: IndexPath, point: CGPoint) -> UIContextMenuConfiguration?\nReturns a context menu configuration for the item at a point.\nDeprecated\nfunc collectionView(UICollectionView, previewForDismissingContextMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nReturns the destination view when dismissing a context menu.\nDeprecated\nfunc collectionView(UICollectionView, previewForHighlightingContextMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nReturns a view to override the default preview the collection view created.\nDeprecated\nfunc collectionView(UICollectionView, shouldShowMenuForItemAt: IndexPath) -> Bool\nAsks the delegate if an action menu should be displayed for the specified item.\nDeprecated\nfunc collectionView(UICollectionView, canPerformAction: Selector, forItemAt: IndexPath, withSender: Any?) -> Bool\nAsks the delegate if it can perform the specified action on an item in the collection view.\nDeprecated"
  },
  {
    "title": "collectionView(_:canPerformAction:forItemAt:withSender:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/1618051-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view object that is making the request.\n\naction\n\nThe selector identifying the action to be performed.\n\nindexPath\n\nThe index path of the affected item.\n\nsender\n\nThe object that wants to initiate the action.\n\nReturn Value\n\ntrue if the command corresponding to action should appear in the editing menu or false if it should not.\n\nDiscussion\n\nThis method is invoked after the collectionView(_:shouldShowMenuForItemAt:) method. It gives you the opportunity to exclude commands from the editing menu. For example, the user might have copied some content from one item and wants to paste it into another item that cannot accept the content. In such a case, your method could return false to prevent the display of the relevant command.\n\nIf you do not implement this method, the default return value is false.\n\nSee Also\nDeprecated\nfunc collectionView(UICollectionView, targetIndexPathForMoveFromItemAt: IndexPath, toProposedIndexPath: IndexPath) -> IndexPath\nAsks the delegate for the index path to use when moving an item.\nDeprecated\nfunc collectionView(UICollectionView, contextMenuConfigurationForItemAt: IndexPath, point: CGPoint) -> UIContextMenuConfiguration?\nReturns a context menu configuration for the item at a point.\nDeprecated\nfunc collectionView(UICollectionView, previewForDismissingContextMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nReturns the destination view when dismissing a context menu.\nDeprecated\nfunc collectionView(UICollectionView, previewForHighlightingContextMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nReturns a view to override the default preview the collection view created.\nDeprecated\nfunc collectionView(UICollectionView, shouldShowMenuForItemAt: IndexPath) -> Bool\nAsks the delegate if an action menu should be displayed for the specified item.\nDeprecated\nfunc collectionView(UICollectionView, performAction: Selector, forItemAt: IndexPath, withSender: Any?)\nTells the delegate to perform the specified action on an item in the collection view.\nDeprecated"
  },
  {
    "title": "collectionView(_:shouldSpringLoadItemAt:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/2897333-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view object notifying you of the interaction.\n\nindexPath\n\nThe index path of the item for which the spring-loading behavior applies.\n\ncontext\n\nA context object containing information about the item and view on which to display the spring-loading interaction.\n\nReturn Value\n\ntrue to apply the spring-loading behavior for the item or false to suppress the behavior altogether.\n\nDiscussion\n\nIf you do not implement this method, the collection view assumes a return value of true."
  },
  {
    "title": "collectionView(_:previewForDismissingContextMenuWithConfiguration:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/3295918-collectionview",
    "html": "Deprecated\n\nUse collectionView(_:contextMenuConfiguration:dismissalPreviewForItemAt:) instead.\n\nParameters\ncollectionView\n\nThe collection view object requesting this information.\n\nconfiguration\n\nThe configuration of the menu being displayed.\n\nReturn Value\n\nA targeted preview object describing the dismissal preview. The interaction animates the presented menu to the preview. Use this method to customize the dismissal animation.\n\nSee Also\nDeprecated\nfunc collectionView(UICollectionView, targetIndexPathForMoveFromItemAt: IndexPath, toProposedIndexPath: IndexPath) -> IndexPath\nAsks the delegate for the index path to use when moving an item.\nDeprecated\nfunc collectionView(UICollectionView, contextMenuConfigurationForItemAt: IndexPath, point: CGPoint) -> UIContextMenuConfiguration?\nReturns a context menu configuration for the item at a point.\nDeprecated\nfunc collectionView(UICollectionView, previewForHighlightingContextMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nReturns a view to override the default preview the collection view created.\nDeprecated\nfunc collectionView(UICollectionView, shouldShowMenuForItemAt: IndexPath) -> Bool\nAsks the delegate if an action menu should be displayed for the specified item.\nDeprecated\nfunc collectionView(UICollectionView, canPerformAction: Selector, forItemAt: IndexPath, withSender: Any?) -> Bool\nAsks the delegate if it can perform the specified action on an item in the collection view.\nDeprecated\nfunc collectionView(UICollectionView, performAction: Selector, forItemAt: IndexPath, withSender: Any?)\nTells the delegate to perform the specified action on an item in the collection view.\nDeprecated"
  },
  {
    "title": "collectionView(_:shouldShowMenuForItemAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/1618010-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view object that is making the request.\n\nindexPath\n\nThe index path of the affected item.\n\nReturn Value\n\ntrue if the editing menu should be shown positioned near the item and pointing to it or false if it should not.\n\nDiscussion\n\nIf the user tap-holds a certain item in the collection view, this method (if implemented) is invoked first. Return true if you want to permit the editing menu to be displayed. Return false if the editing menu shouldn’t be shown—for example, you might return false if the corresponding item contains data that should not be copied or pasted over.\n\nIf you do not implement this method, the default return value is false.\n\nSee Also\nDeprecated\nfunc collectionView(UICollectionView, targetIndexPathForMoveFromItemAt: IndexPath, toProposedIndexPath: IndexPath) -> IndexPath\nAsks the delegate for the index path to use when moving an item.\nDeprecated\nfunc collectionView(UICollectionView, contextMenuConfigurationForItemAt: IndexPath, point: CGPoint) -> UIContextMenuConfiguration?\nReturns a context menu configuration for the item at a point.\nDeprecated\nfunc collectionView(UICollectionView, previewForDismissingContextMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nReturns the destination view when dismissing a context menu.\nDeprecated\nfunc collectionView(UICollectionView, previewForHighlightingContextMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nReturns a view to override the default preview the collection view created.\nDeprecated\nfunc collectionView(UICollectionView, canPerformAction: Selector, forItemAt: IndexPath, withSender: Any?) -> Bool\nAsks the delegate if it can perform the specified action on an item in the collection view.\nDeprecated\nfunc collectionView(UICollectionView, performAction: Selector, forItemAt: IndexPath, withSender: Any?)\nTells the delegate to perform the specified action on an item in the collection view.\nDeprecated"
  },
  {
    "title": "collectionView(_:targetIndexPathForMoveFromItemAt:toProposedIndexPath:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/1618052-collectionview",
    "html": "Deprecated\n\nUse collectionView(_:targetIndexPathForMoveOfItemFromOriginalIndexPath:atCurrentIndexPath:toProposedIndexPath:) instead.\n\nParameters\ncollectionView\n\nThe collection view making the request.\n\noriginalIndexPath\n\nThe item’s original index path.\n\nproposedIndexPath\n\nThe proposed index path of the item.\n\nReturn Value\n\nThe index path you want to use for the item. If you do not implement this method, the collection view uses the index path in the proposedIndexPath parameter.\n\nDiscussion\n\nDuring the interactive moving of an item, the collection view calls this method to see if you want to provide a different index path than the proposed path. You might use this method to prevent the user from dropping the item in an invalid location. For example, you might prevent the user from dropping the item in a specific section.\n\nSee Also\nDeprecated\nfunc collectionView(UICollectionView, contextMenuConfigurationForItemAt: IndexPath, point: CGPoint) -> UIContextMenuConfiguration?\nReturns a context menu configuration for the item at a point.\nDeprecated\nfunc collectionView(UICollectionView, previewForDismissingContextMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nReturns the destination view when dismissing a context menu.\nDeprecated\nfunc collectionView(UICollectionView, previewForHighlightingContextMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nReturns a view to override the default preview the collection view created.\nDeprecated\nfunc collectionView(UICollectionView, shouldShowMenuForItemAt: IndexPath) -> Bool\nAsks the delegate if an action menu should be displayed for the specified item.\nDeprecated\nfunc collectionView(UICollectionView, canPerformAction: Selector, forItemAt: IndexPath, withSender: Any?) -> Bool\nAsks the delegate if it can perform the specified action on an item in the collection view.\nDeprecated\nfunc collectionView(UICollectionView, performAction: Selector, forItemAt: IndexPath, withSender: Any?)\nTells the delegate to perform the specified action on an item in the collection view.\nDeprecated"
  },
  {
    "title": "collectionView(_:sceneActivationConfigurationForItemAt:point:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/3752185-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view.\n\nindexPath\n\nThe index path of the cell with which the user is interacting.\n\npoint\n\nThe location of the interaction in the collection view’s coordinate space.\n\nReturn Value\n\nA UIWindowScene.ActivationConfiguration object that facilitates expanding the cell into a new scene. Return nil to prevent the interaction from starting."
  },
  {
    "title": "collectionView(_:previewForHighlightingContextMenuWithConfiguration:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/3295919-collectionview",
    "html": "Deprecated\n\nUse collectionView(_:contextMenuConfiguration:highlightPreviewForItemAt:) instead.\n\nParameters\ncollectionView\n\nThe collection view object requesting this information.\n\nconfiguration\n\nThe configuration of the menu being highlighted.\n\nReturn Value\n\nA targeted preview object describing the highlight preview.\n\nSee Also\nDeprecated\nfunc collectionView(UICollectionView, targetIndexPathForMoveFromItemAt: IndexPath, toProposedIndexPath: IndexPath) -> IndexPath\nAsks the delegate for the index path to use when moving an item.\nDeprecated\nfunc collectionView(UICollectionView, contextMenuConfigurationForItemAt: IndexPath, point: CGPoint) -> UIContextMenuConfiguration?\nReturns a context menu configuration for the item at a point.\nDeprecated\nfunc collectionView(UICollectionView, previewForDismissingContextMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nReturns the destination view when dismissing a context menu.\nDeprecated\nfunc collectionView(UICollectionView, shouldShowMenuForItemAt: IndexPath) -> Bool\nAsks the delegate if an action menu should be displayed for the specified item.\nDeprecated\nfunc collectionView(UICollectionView, canPerformAction: Selector, forItemAt: IndexPath, withSender: Any?) -> Bool\nAsks the delegate if it can perform the specified action on an item in the collection view.\nDeprecated\nfunc collectionView(UICollectionView, performAction: Selector, forItemAt: IndexPath, withSender: Any?)\nTells the delegate to perform the specified action on an item in the collection view.\nDeprecated"
  },
  {
    "title": "duration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifocusanimationcontext/2887568-duration",
    "html": "Required"
  },
  {
    "title": "beginInteractiveMovementForItem(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618019-begininteractivemovementforitem",
    "html": "Parameters\nindexPath\n\nThe index path of the item you want to move.\n\nReturn Value\n\ntrue if it is possible to move the item or false if the item is not allowed to move.\n\nDiscussion\n\nCall this method when you want to begin the interactive movement of an item from its current location to a new location within the same collection view. When using a gesture recognizer to track movements of the item, call this method from your handler method when the gesture recognition process begins. When interactions with the item end, you must call either the endInteractiveMovement() or cancelInteractiveMovement() method to inform the collection view of that fact.\n\nWhen you call this method, the collection view consults its delegate to make sure the item can be moved. If the data source does not support the movement of the item, this method returns false.\n\nSee Also\nReordering items interactively\nfunc updateInteractiveMovementTargetPosition(CGPoint)\nUpdates the position of the item within the collection view’s bounds.\nfunc endInteractiveMovement()\nEnds interactive movement tracking and moves the target item to its new location.\nfunc cancelInteractiveMovement()\nEnds interactive movement tracking and returns the target item to its original location."
  },
  {
    "title": "alternate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeymodifierflags/1621102-alternate",
    "html": "See Also\nModifier flags\nstatic var alphaShift: UIKeyModifierFlags\nA modifier flag that indicates the user pressed the Caps Lock key.\nstatic var shift: UIKeyModifierFlags\nA modifier flag that indicates the user pressed the Shift key.\nstatic var control: UIKeyModifierFlags\nA modifier flag that indicates the user pressed the Control key.\nstatic var command: UIKeyModifierFlags\nA modifier flag that indicates the user pressed the Command key.\nstatic var numericPad: UIKeyModifierFlags\nA modifier flag that indicates the user pressed a key located on the numeric keypad."
  },
  {
    "title": "prefetchDataSource | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1771768-prefetchdatasource",
    "html": "Discussion\n\nAssign an object that conforms to the UICollectionViewDataSourcePrefetching protocol to facilitate prefetching of data for cells to be displayed in the near future. To disable data prefetching behavior, set this property to nil.\n\nSee Also\nPrefetching collection view cells and data\nvar isPrefetchingEnabled: Bool\nA Boolean value that indicates whether cell and data prefetching are enabled.\nprotocol UICollectionViewDataSourcePrefetching\nA protocol that provides advance warning of the data requirements for a collection view, allowing the triggering of asynchronous data load operations."
  },
  {
    "title": "indexPathsForVisibleItems | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618020-indexpathsforvisibleitems",
    "html": "Discussion\n\nThe value of this property is an unsorted array of NSIndexPath objects, each of which corresponds to a visible cell in the collection view. This array doesn’t include any supplementary views that are currently visible. If there are no visible items, the value of this property is an empty array.\n\nSee Also\nLocating items and views in the collection view\nfunc indexPathForItem(at: CGPoint) -> IndexPath?\nGets the index path of the item at the specified point in the collection view.\nfunc indexPath(for: UICollectionViewCell) -> IndexPath?\nGets the index path of the specified cell.\nfunc cellForItem(at: IndexPath) -> UICollectionViewCell?\nGets the cell object at the index path you specify.\nfunc indexPathsForVisibleSupplementaryElements(ofKind: String) -> [IndexPath]\nGets the index paths of all visible supplementary views of the specified type.\nfunc supplementaryView(forElementKind: String, at: IndexPath) -> UICollectionReusableView?\nGets the supplementary view at the specified index path.\nfunc visibleSupplementaryViews(ofKind: String) -> [UICollectionReusableView]\nGets an array of the visible supplementary views of the specified kind.\nRelated Documentation\nvar visibleCells: [UICollectionViewCell]\nAn array of visible cells currently displayed by the collection view."
  },
  {
    "title": "indexPathForItem(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618030-indexpathforitem",
    "html": "Parameters\npoint\n\nA point in the collection view’s coordinate system.\n\nReturn Value\n\nThe index path of the item at the specified point or nil if no item was found at the specified point.\n\nDiscussion\n\nThis method relies on the layout information provided by the associated layout object to determine which item contains the point.\n\nSee Also\nLocating items and views in the collection view\nvar indexPathsForVisibleItems: [IndexPath]\nAn array of the visible items in the collection view.\nfunc indexPath(for: UICollectionViewCell) -> IndexPath?\nGets the index path of the specified cell.\nfunc cellForItem(at: IndexPath) -> UICollectionViewCell?\nGets the cell object at the index path you specify.\nfunc indexPathsForVisibleSupplementaryElements(ofKind: String) -> [IndexPath]\nGets the index paths of all visible supplementary views of the specified type.\nfunc supplementaryView(forElementKind: String, at: IndexPath) -> UICollectionReusableView?\nGets the supplementary view at the specified index path.\nfunc visibleSupplementaryViews(ofKind: String) -> [UICollectionReusableView]\nGets an array of the visible supplementary views of the specified kind."
  },
  {
    "title": "allowsSelection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618009-allowsselection",
    "html": "Discussion\n\nIf the value of this property is true (the default), users can select items. If you want more fine-grained control over the selection of items, you must provide a delegate object and implement the appropriate methods of the UICollectionViewDelegate protocol.\n\nSee Also\nSelecting cells\nvar indexPathsForSelectedItems: [IndexPath]?\nThe index paths for the selected items.\nfunc selectItem(at: IndexPath?, animated: Bool, scrollPosition: UICollectionView.ScrollPosition)\nSelects the item at the specified index path and optionally scrolls it into view.\nfunc deselectItem(at: IndexPath, animated: Bool)\nDeselects the item at the specified index.\nvar allowsMultipleSelection: Bool\nA Boolean value that determines whether users can select more than one item in the collection view.\nvar allowsSelectionDuringEditing: Bool\nA Boolean value that determines whether users can select cells while the collection view is in editing mode.\nvar allowsMultipleSelectionDuringEditing: Bool\nA Boolean value that controls whether users can select more than one cell simultaneously in editing mode.\nvar selectionFollowsFocus: Bool\nA Boolean value that triggers an automatic selection when focus moves to a cell."
  },
  {
    "title": "indexPathsForSelectedItems | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618099-indexpathsforselecteditems",
    "html": "Discussion\n\nThe value of this property is an array of NSIndexPath objects, each of which corresponds to a single selected item. If there are no selected items, the value of this property is nil.\n\nSee Also\nSelecting cells\nfunc selectItem(at: IndexPath?, animated: Bool, scrollPosition: UICollectionView.ScrollPosition)\nSelects the item at the specified index path and optionally scrolls it into view.\nfunc deselectItem(at: IndexPath, animated: Bool)\nDeselects the item at the specified index.\nvar allowsSelection: Bool\nA Boolean value that indicates whether users can select items in the collection view.\nvar allowsMultipleSelection: Bool\nA Boolean value that determines whether users can select more than one item in the collection view.\nvar allowsSelectionDuringEditing: Bool\nA Boolean value that determines whether users can select cells while the collection view is in editing mode.\nvar allowsMultipleSelectionDuringEditing: Bool\nA Boolean value that controls whether users can select more than one cell simultaneously in editing mode.\nvar selectionFollowsFocus: Bool\nA Boolean value that triggers an automatic selection when focus moves to a cell."
  },
  {
    "title": "UICollectionView.ReorderingCadence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/reorderingcadence",
    "html": "Topics\nConstants\ncase immediate\nItems are reordered into place immediately.\ncase fast\nItems are reordered quickly, but with a short delay.\ncase slow\nItems are reordered after a delay.\nRelationships\nConforms To\nSendable\nSee Also\nManaging drop interactions\nvar dropDelegate: UICollectionViewDropDelegate?\nThe delegate object that manages the dropping of items into the collection view.\nprotocol UICollectionViewDropDelegate\nThe interface for handling drops in a collection view.\nvar hasActiveDrop: Bool\nA Boolean value that indicates whether the collection view is currently tracking a drop session.\nvar reorderingCadence: UICollectionView.ReorderingCadence\nThe speed at which items in the collection view are reordered to show potential drop locations."
  },
  {
    "title": "setCollectionViewLayout(_:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618086-setcollectionviewlayout",
    "html": "Parameters\nlayout\n\nThe new layout object for the collection view.\n\nanimated\n\nSpecify true if you want to animate changes from the current layout to the new layout specified by the layout parameter. Specify false to make the change without animations.\n\nDiscussion\n\nThis method makes the layout change without further interaction from the user. If you choose to animate the layout change, the animation timing and parameters are controlled by the collection view.\n\nSee Also\nChanging the layout\nvar collectionViewLayout: UICollectionViewLayout\nThe layout used to organize the collected view’s items.\nfunc setCollectionViewLayout(UICollectionViewLayout, animated: Bool, completion: ((Bool) -> Void)?)\nChanges the collection view’s layout and notifies you when the animations complete.\nfunc startInteractiveTransition(to: UICollectionViewLayout, completion: UICollectionView.LayoutInteractiveTransitionCompletion?) -> UICollectionViewTransitionLayout\nChanges the collection view’s current layout using an interactive transition effect.\nfunc finishInteractiveTransition()\nTells the collection view to finish an interactive transition by installing the intended target layout.\nfunc cancelInteractiveTransition()\nTells the collection view to cancel an interactive transition and return to its original layout object.\ntypealias UICollectionView.LayoutInteractiveTransitionCompletion\nThe completion block called at the end of an interactive transition for a collection view."
  },
  {
    "title": "dropDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/2897491-dropdelegate",
    "html": "See Also\nManaging drop interactions\nprotocol UICollectionViewDropDelegate\nThe interface for handling drops in a collection view.\nvar hasActiveDrop: Bool\nA Boolean value that indicates whether the collection view is currently tracking a drop session.\nvar reorderingCadence: UICollectionView.ReorderingCadence\nThe speed at which items in the collection view are reordered to show potential drop locations.\nenum UICollectionView.ReorderingCadence\nConstants indicating the speed at which collection view items are reorganized during a drop."
  },
  {
    "title": "deleteSections(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618102-deletesections",
    "html": "Parameters\nsections\n\nThe indexes of the sections you want to delete. This parameter must not be nil.\n\nDiscussion\n\nUse this method to remove the sections and their items from the collection view. You might do this when you remove the sections from your data source object or in response to user interactions with the collection view. The collection view updates the layout of the remaining sections and items to account for the deletions, animating the remaining items into position as needed.\n\nYou can also call this method from a block passed to the performBatchUpdates(_:completion:) method when you want to animate multiple separate changes into place at the same time. See the description of that method for more information.\n\nSee Also\nInserting, moving, and deleting sections\nfunc insertSections(IndexSet)\nInserts new sections at the specified indexes.\nfunc moveSection(Int, toSection: Int)\nMoves a section from one location to another in the collection view."
  },
  {
    "title": "visibleCells | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618056-visiblecells",
    "html": "Return Value\n\nAn array of UICollectionViewCell objects. If no cells are visible, this method returns an empty array.\n\nDiscussion\n\nThis method returns the complete list of visible cells displayed by the collection view.\n\nSee Also\nGetting the state of the collection view\nvar numberOfSections: Int\nThe number of sections displayed by the collection view.\nfunc numberOfItems(inSection: Int) -> Int\nFetches the count of items in the specified section.\nRelated Documentation\nvar indexPathsForVisibleItems: [IndexPath]\nAn array of the visible items in the collection view."
  },
  {
    "title": "moveItem(at:to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618059-moveitem",
    "html": "Parameters\nindexPath\n\nThe index path of the item you want to move. This parameter must not be nil.\n\nnewIndexPath\n\nThe index path of the item’s new location. This parameter must not be nil.\n\nDiscussion\n\nUse this method to reorganize existing data items. You might do this when you rearrange the items within your data source object or in response to user interactions with the collection view. You can move items between sections or within the same section. The collection view updates the layout as needed to account for the move, animating cells into position as needed.\n\nYou can also call this method from a block passed to the performBatchUpdates(_:completion:) method when you want to animate multiple separate changes into place at the same time. See the description of that method for more information.\n\nSee Also\nInserting, moving, and deleting Items\nfunc insertItems(at: [IndexPath])\nInserts new items at the specified index paths.\nfunc deleteItems(at: [IndexPath])\nDeletes the items at the specified index paths."
  },
  {
    "title": "userInteractionEnabledWhileDragging | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/2897414-userinteractionenabledwhiledragg",
    "html": "Discussion\n\nThe default value of this property is false.\n\nSee Also\nDragging the row\nfunc dragStateDidChange(UITableViewCell.DragState)\nNotifies the cell that its drag status changed.\nenum UITableViewCell.DragState\nConstants indicating the current state of a row involved in a drag operation."
  },
  {
    "title": "defaultContentConfiguration() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/3601058-defaultcontentconfiguration",
    "html": "Return Value\n\nA default list content configuration. The system determines default values for the configuration according to the section where the cell appears.\n\nDiscussion\n\nThe default content configuration has preconfigured default styling, but doesn’t contain any content. After you get the default configuration, you assign your content to it, customize any other properties, and assign it to the cell as the current contentConfiguration.\n\nvar content = cell.defaultContentConfiguration()\n\n\n// Configure content.\ncontent.image = UIImage(systemName: \"star\")\ncontent.text = \"Favorites\"\n\n\n// Customize appearance.\ncontent.imageProperties.tintColor = .purple\n\n\ncell.contentConfiguration = content\n\n\nSee Also\nManaging the content\nvar contentConfiguration: (UIContentConfiguration)?\nThe current content configuration of the cell.\nvar automaticallyUpdatesContentConfiguration: Bool\nA Boolean value that determines whether the cell automatically updates its content configuration when its state changes.\nvar contentView: UIView\nThe content view of the cell object."
  },
  {
    "title": "UITableViewCell.ConfigurationUpdateHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/configurationupdatehandler",
    "html": "Parameters\ncell\n\nThe table view cell to configure.\n\nstate\n\nThe new state to use for updating the cell’s configuration.\n\nSee Also\nManaging the state\nvar configurationState: UICellConfigurationState\nThe current configuration state of the cell.\nfunc setNeedsUpdateConfiguration()\nInforms the cell to update its configuration for its current state.\nfunc updateConfiguration(using: UICellConfigurationState)\nUpdates the cell’s configuration using the current state.\nvar configurationUpdateHandler: UITableViewCell.ConfigurationUpdateHandler?\nA block for handling updates to the cell’s configuration using the current state."
  },
  {
    "title": "selectionStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623221-selectionstyle",
    "html": "Discussion\n\nThe selection style is a backgroundView constant that determines the color of a cell when it’s selected. The default value is UITableViewCell.SelectionStyle.default. See UITableViewCell.SelectionStyle for a description of valid constants.\n\nSee Also\nManaging cell selection and highlighting\nenum UITableViewCell.SelectionStyle\nThe style of selected cells.\nvar isSelected: Bool\nA Boolean value that indicates whether the cell is selected.\nfunc setSelected(Bool, animated: Bool)\nSets the selected state of the cell, optionally animating the transition between states.\nvar isHighlighted: Bool\nA Boolean value that indicates whether the cell is highlighted.\nfunc setHighlighted(Bool, animated: Bool)\nSets the highlighted state of the cell, optionally animating the transition between states."
  },
  {
    "title": "showsReorderControl | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623243-showsreordercontrol",
    "html": "Discussion\n\nThe reordering control is gray, multiple horizontal bar control on the right side of the cell. Users can drag this control to reorder the cell within the table. The default value is false. If the value is true , the reordering control temporarily replaces any accessory view.\n\nFor the reordering control to appear, you must not only set this property but implement the UITableViewDataSource method tableView(_:moveRowAt:to:). In addition, if the data source implements tableView(_:canMoveRowAt:) to return false, the reordering control doesn’t appear in that designated row.\n\nSee Also\nEditing the cell\nvar isEditing: Bool\nA Boolean value that indicates whether the cell is in an editable state.\nfunc setEditing(Bool, animated: Bool)\nToggles the cell into and out of editing mode.\nvar editingStyle: UITableViewCell.EditingStyle\nThe editing style of the cell.\nenum UITableViewCell.EditingStyle\nThe editing control used by a cell.\nvar showingDeleteConfirmation: Bool\nA Boolean value that indicates whether the cell is currently showing the delete-confirmation button."
  },
  {
    "title": "collectionView(_:didEndDisplayingSupplementaryView:forElementOfKind:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/1618036-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view object that removed the supplementary view.\n\nview\n\nThe view that was removed.\n\nelementKind\n\nThe type of the supplementary view. This string is defined by the layout that presents the view.\n\nindexPath\n\nThe index path of the data item that the supplementary view represented.\n\nDiscussion\n\nUse this method to detect when a supplementary view is removed from a collection view, as opposed to monitoring the view itself to see when it appears or disappears.\n\nSee Also\nTracking the addition and removal of views\nfunc collectionView(UICollectionView, willDisplay: UICollectionViewCell, forItemAt: IndexPath)\nTells the delegate that the specified cell is about to be displayed in the collection view.\nfunc collectionView(UICollectionView, willDisplaySupplementaryView: UICollectionReusableView, forElementKind: String, at: IndexPath)\nTells the delegate that the specified supplementary view is about to be displayed in the collection view.\nfunc collectionView(UICollectionView, didEndDisplaying: UICollectionViewCell, forItemAt: IndexPath)\nTells the delegate that the specified cell was removed from the collection view."
  },
  {
    "title": "collectionView(_:didUnhighlightItemAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/1618027-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view object that is notifying you of the highlight change.\n\nindexPath\n\nThe index path of the cell that had its highlight removed.\n\nDiscussion\n\nThe collection view calls this method only in response to user interactions and does not call it if you programmatically change the highlighting on a cell.\n\nSee Also\nManaging cell highlighting\nfunc collectionView(UICollectionView, shouldHighlightItemAt: IndexPath) -> Bool\nAsks the delegate if the item should be highlighted during tracking.\nfunc collectionView(UICollectionView, didHighlightItemAt: IndexPath)\nTells the delegate that the item at the specified index path was highlighted."
  },
  {
    "title": "collectionView(_:willDisplaySupplementaryView:forElementKind:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/1618062-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view object that is adding the supplementary view.\n\nview\n\nThe view being added.\n\nelementKind\n\nThe type of the supplementary view. This string is defined by the layout that presents the view.\n\nindexPath\n\nThe index path of the data item that the supplementary view represents.\n\nDiscussion\n\nThe collection view calls this method before adding a supplementary view to its content. Use this method to detect view additions, as opposed to monitoring the view itself to see when it appears.\n\nSee Also\nTracking the addition and removal of views\nfunc collectionView(UICollectionView, willDisplay: UICollectionViewCell, forItemAt: IndexPath)\nTells the delegate that the specified cell is about to be displayed in the collection view.\nfunc collectionView(UICollectionView, didEndDisplaying: UICollectionViewCell, forItemAt: IndexPath)\nTells the delegate that the specified cell was removed from the collection view.\nfunc collectionView(UICollectionView, didEndDisplayingSupplementaryView: UICollectionReusableView, forElementOfKind: String, at: IndexPath)\nTells the delegate that the specified supplementary view was removed from the collection view."
  },
  {
    "title": "collectionView(_:didBeginMultipleSelectionInteractionAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/3183915-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view calling this method.\n\nindexPath\n\nThe index path of the item that the user touched to start the two-finger pan gesture.\n\nDiscussion\n\nYour implementation of this method is a good place to indicate, in the app’s user interface, that the user is selecting multiple items; for example, you could replace an Edit or Select button with a Done button.\n\nfunc collectionView(_ collectionView: UICollectionView, didBeginMultipleSelectionInteractionAt indexPath: IndexPath) {\n    // Replace the Select button with Done, and put the \n    // collection view into editing mode.\n    setEditing(true, animated: true)\n}\n\n\nSee Also\nManaging the selected cells\nChanging the Appearance of Selected and Highlighted Cells\nProvide visual feedback to the user about the state of a cell and the transition between states.\nSelecting multiple items with a two-finger pan gesture\nAccelerate user selection of multiple items using the multiselect gesture on table and collection views.\nfunc collectionView(UICollectionView, shouldSelectItemAt: IndexPath) -> Bool\nAsks the delegate if the specified item should be selected.\nfunc collectionView(UICollectionView, didSelectItemAt: IndexPath)\nTells the delegate that the item at the specified index path was selected.\nfunc collectionView(UICollectionView, shouldDeselectItemAt: IndexPath) -> Bool\nAsks the delegate if the specified item should be deselected.\nfunc collectionView(UICollectionView, didDeselectItemAt: IndexPath)\nTells the delegate that the item at the specified path was deselected.\nfunc collectionView(UICollectionView, shouldBeginMultipleSelectionInteractionAt: IndexPath) -> Bool\nAsks the delegate whether the user can select multiple items using a two-finger pan gesture in a collection view.\nfunc collectionViewDidEndMultipleSelectionInteraction(UICollectionView)\nTells the delegate when the user stops using a two-finger pan gesture to select multiple items in a collection view."
  },
  {
    "title": "collectionView(_:didEndDisplaying:forItemAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/1618006-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view object that removed the cell.\n\ncell\n\nThe cell object that was removed.\n\nindexPath\n\nThe index path of the data item that the cell represented.\n\nDiscussion\n\nUse this method to detect when a cell is removed from a collection view, as opposed to monitoring the view itself to see when it disappears.\n\nSee Also\nTracking the addition and removal of views\nfunc collectionView(UICollectionView, willDisplay: UICollectionViewCell, forItemAt: IndexPath)\nTells the delegate that the specified cell is about to be displayed in the collection view.\nfunc collectionView(UICollectionView, willDisplaySupplementaryView: UICollectionReusableView, forElementKind: String, at: IndexPath)\nTells the delegate that the specified supplementary view is about to be displayed in the collection view.\nfunc collectionView(UICollectionView, didEndDisplayingSupplementaryView: UICollectionReusableView, forElementOfKind: String, at: IndexPath)\nTells the delegate that the specified supplementary view was removed from the collection view."
  },
  {
    "title": "collectionViewDidEndMultipleSelectionInteraction(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/3183917-collectionviewdidendmultiplesele",
    "html": "Parameters\ncollectionView\n\nThe collection view calling this method.\n\nDiscussion\n\nThe collection view calls this method after the user lifts their finger from the device.\n\nSee Also\nManaging the selected cells\nChanging the Appearance of Selected and Highlighted Cells\nProvide visual feedback to the user about the state of a cell and the transition between states.\nSelecting multiple items with a two-finger pan gesture\nAccelerate user selection of multiple items using the multiselect gesture on table and collection views.\nfunc collectionView(UICollectionView, shouldSelectItemAt: IndexPath) -> Bool\nAsks the delegate if the specified item should be selected.\nfunc collectionView(UICollectionView, didSelectItemAt: IndexPath)\nTells the delegate that the item at the specified index path was selected.\nfunc collectionView(UICollectionView, shouldDeselectItemAt: IndexPath) -> Bool\nAsks the delegate if the specified item should be deselected.\nfunc collectionView(UICollectionView, didDeselectItemAt: IndexPath)\nTells the delegate that the item at the specified path was deselected.\nfunc collectionView(UICollectionView, shouldBeginMultipleSelectionInteractionAt: IndexPath) -> Bool\nAsks the delegate whether the user can select multiple items using a two-finger pan gesture in a collection view.\nfunc collectionView(UICollectionView, didBeginMultipleSelectionInteractionAt: IndexPath)\nTells the delegate when the user starts using a two-finger pan gesture to select multiple items in a collection view."
  },
  {
    "title": "collectionView(_:willDisplay:forItemAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/1618087-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view object that is adding the cell.\n\ncell\n\nThe cell object being added.\n\nindexPath\n\nThe index path of the data item that the cell represents.\n\nDiscussion\n\nThe collection view calls this method before adding a cell to its content. Use this method to detect cell additions, as opposed to monitoring the cell itself to see when it appears.\n\nSee Also\nTracking the addition and removal of views\nfunc collectionView(UICollectionView, willDisplaySupplementaryView: UICollectionReusableView, forElementKind: String, at: IndexPath)\nTells the delegate that the specified supplementary view is about to be displayed in the collection view.\nfunc collectionView(UICollectionView, didEndDisplaying: UICollectionViewCell, forItemAt: IndexPath)\nTells the delegate that the specified cell was removed from the collection view.\nfunc collectionView(UICollectionView, didEndDisplayingSupplementaryView: UICollectionReusableView, forElementOfKind: String, at: IndexPath)\nTells the delegate that the specified supplementary view was removed from the collection view."
  },
  {
    "title": "collectionView(_:canFocusItemAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/1618013-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view object requesting this information.\n\nindexPath\n\nThe index path of an item in the collection view.\n\nReturn Value\n\ntrue if the item can receive be focused or false if it can not.\n\nDiscussion\n\nYou can use this method, or a cell’s canBecomeFocused method, to control which items in the collection view can receive focus. The focus engine calls the cell’s canBecomeFocused method first, the default implementation of which defers to the collection view and this delegate method.\n\nIf you do not implement this method, the ability to focus on items depends on whether the collection view’s items are selectable. When the items are selectable, they can also be focused as if this method had returned true; otherwise, they do not receive focus.\n\nSee Also\nWorking with focus\nfunc indexPathForPreferredFocusedView(in: UICollectionView) -> IndexPath?\nAsks the delegate for the index path of the cell that should be focused.\nfunc collectionView(UICollectionView, shouldUpdateFocusIn: UICollectionViewFocusUpdateContext) -> Bool\nAsks the delegate whether a change in focus should occur.\nfunc collectionView(UICollectionView, didUpdateFocusIn: UICollectionViewFocusUpdateContext, with: UIFocusAnimationCoordinator)\nTells the delegate that a focus update occurred.\nfunc collectionView(UICollectionView, selectionFollowsFocusForItemAt: IndexPath) -> Bool\nAsks the delegate whether to relate selection and focus behavior for the cell at the corresponding index path.\nRelated Documentation\nvar allowsSelection: Bool\nA Boolean value that indicates whether users can select items in the collection view."
  },
  {
    "title": "collectionView(_:contextMenuConfiguration:dismissalPreviewForItemAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/4002184-collectionview",
    "html": "Parameters\ncollectionView\n\nThe collection view containing the item.\n\nconfiguration\n\nThe configuration of the menu to dismiss.\n\nindexPath\n\nThe index path of the item where the menu dismissal occurs.\n\nReturn Value\n\nA targeted preview object corresponding to the item at the index path to use during the menu’s dismissal animation.\n\nDiscussion\n\nThe system calls this method when a context menu dismisses from the collection view. Implement this method to override the default dismissal preview that the collection view generates for the item at indexPath.\n\nSee Also\nManaging context menus\nAdding Context Menus in Your App\nProvide quick access to useful actions by adding context menus to your iOS app.\nfunc collectionView(UICollectionView, willDisplayContextMenu: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nInforms the delegate when a context menu will appear.\nfunc collectionView(UICollectionView, willEndContextMenuInteraction: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nInforms the delegate when a context menu will disappear.\nfunc collectionView(UICollectionView, willPerformPreviewActionForMenuWith: UIContextMenuConfiguration, animator: UIContextMenuInteractionCommitAnimating)\nInforms the delegate when a user triggers a commit by tapping the preview.\nfunc collectionView(UICollectionView, contextMenuConfigurationForItemsAt: [IndexPath], point: CGPoint) -> UIContextMenuConfiguration?\nAsks the delegate for a context-menu configuration for the items at the specified index paths.\nfunc collectionView(UICollectionView, contextMenuConfiguration: UIContextMenuConfiguration, highlightPreviewForItemAt: IndexPath) -> UITargetedPreview?\nAsks the delegate for a preview of the item at the specified index path when a context-menu interaction begins."
  },
  {
    "title": "UIPress.PressType.downArrow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipress/presstype/downarrow",
    "html": "See Also\nNavigation\ncase upArrow\nA constant that represents the up arrow button.\ncase leftArrow\nA constant that represents the left arrow button.\ncase rightArrow\nA constant that represents the right arrow button.\ncase pageDown\nA constant that represents the page down button.\ncase pageUp\nA constant that represents the page up button."
  },
  {
    "title": "UIPress.PressType.menu | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipress/presstype/menu",
    "html": "See Also\nActions\ncase playPause\nA constant that represents the play/pause button.\ncase select\nA constant that represents the select button."
  },
  {
    "title": "UITableViewCell.DragState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/dragstate",
    "html": "Topics\nConstants\ncase none\nThe cell isn’t involved in a drag operation.\ncase lifting\nThe cell is being animated off of the table’s surface.\ncase dragging\nThe cell is currently being dragged.\nRelationships\nConforms To\nSendable\nSee Also\nDragging the row\nvar userInteractionEnabledWhileDragging: Bool\nA Boolean value indicating whether users can interact with a cell while it is being dragged.\nfunc dragStateDidChange(UITableViewCell.DragState)\nNotifies the cell that its drag status changed."
  },
  {
    "title": "dragStateDidChange(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/2897452-dragstatedidchange",
    "html": "Parameters\ndragState\n\nThe new drag state for the cell.\n\nSee Also\nDragging the row\nvar userInteractionEnabledWhileDragging: Bool\nA Boolean value indicating whether users can interact with a cell while it is being dragged.\nenum UITableViewCell.DragState\nConstants indicating the current state of a row involved in a drag operation."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623220-init",
    "html": "See Also\nCreating a table view cell\ninit(style: UITableViewCell.CellStyle, reuseIdentifier: String?)\nInitializes a table cell with a style and a reuse identifier and returns it to the caller.\nenum UITableViewCell.CellStyle\nAn enumeration for the various styles of cells."
  },
  {
    "title": "backgroundView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623260-backgroundview",
    "html": "Discussion\n\nUITableViewCell adds the background view as a subview behind all other views and uses its current frame location.\n\nA background configuration is mutually exclusive with background views, so you must use one approach or the other. Setting a non-nil value for this property resets backgroundConfiguration to nil.\n\nSee Also\nConfiguring the background\nfunc defaultBackgroundConfiguration() -> UIBackgroundConfiguration\nRetrieves a background configuration with system default values.\nvar backgroundConfiguration: UIBackgroundConfiguration?\nThe current background configuration of the cell.\nvar automaticallyUpdatesBackgroundConfiguration: Bool\nA Boolean value that determines whether the cell automatically updates its background configuration when its state changes.\nvar selectedBackgroundView: UIView?\nThe view to use as the background for a selected cell.\nvar multipleSelectionBackgroundView: UIView?\nThe background view to use for a selected cell when the table view allows multiple row selections.\nRelated Documentation\nvar contentView: UIView\nThe content view of the cell object."
  },
  {
    "title": "UICollectionViewFlowLayout | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewflowlayout",
    "html": "Overview\n\nA flow layout is a type of collection view layout. Items in the collection view flow from one row or column (depending on the scrolling direction) to the next, with each row containing as many cells as will fit. Cells can be the same sizes or different sizes.\n\nA flow layout works with the collection view’s delegate object to determine the size of items, headers, and footers in each section and grid. That delegate object must conform to the UICollectionViewDelegateFlowLayout protocol. Use of the delegate allows you to adjust layout information dynamically. For example, you use a delegate object to specify different sizes for items in the grid. If you don’t provide a delegate, the flow layout uses the default values you set in the properties of this class.\n\nFlow layouts lay out their content using a fixed distance in one direction and a scrollable distance in the other. For example, in a vertically scrolling grid, the width of the grid content is constrained to the width of the corresponding collection view while the height of the content adjusts dynamically to match the number of sections and items in the grid. The layout scrolls vertically by default, but you can configure the scrolling direction using the scrollDirection property.\n\nEach section in a flow layout can have its own custom header and footer. To configure the header or footer for a view, configure the size of the header or footer to be non-zero. Implement the appropriate delegate methods or assign appropriate values to the headerReferenceSize and footerReferenceSize properties. If the header or footer size is 0, the corresponding view isn’t added to the collection view.\n\nTopics\nConfiguring the flow layout\nprotocol UICollectionViewDelegateFlowLayout\nThe methods that let you coordinate with a flow layout object to implement a grid-based layout.\nConfiguring the scroll direction\nvar scrollDirection: UICollectionView.ScrollDirection\nThe scroll direction of the grid.\nenum UICollectionView.ScrollDirection\nConstants that indicate the direction of scrolling for the layout.\nConfiguring item spacing\nvar minimumLineSpacing: CGFloat\nThe minimum spacing to use between lines of items in the grid.\nvar minimumInteritemSpacing: CGFloat\nThe minimum spacing to use between items in the same row.\nvar itemSize: CGSize\nThe default size to use for cells.\nvar estimatedItemSize: CGSize\nThe estimated size of cells in the collection view.\nclass let automaticSize: CGSize\nA placeholder size for self-sizing cells.\nvar sectionInset: UIEdgeInsets\nThe margins used to lay out content in a section.\nvar sectionInsetReference: UICollectionViewFlowLayout.SectionInsetReference\nThe boundary that section insets are defined in relation to.\nenum UICollectionViewFlowLayout.SectionInsetReference\nConstants that describe the reference point of the section insets.\nConfiguring headers and footers\nvar headerReferenceSize: CGSize\nThe default sizes to use for section headers.\nvar footerReferenceSize: CGSize\nThe default sizes to use for section footers.\nFlow layout supplementary views\nConstants that specify the types of supplementary views that can be presented using a flow layout.\nPinning headers and footers\nvar sectionHeadersPinToVisibleBounds: Bool\nA Boolean value that indicates whether headers pin to the top of the collection view bounds during scrolling.\nvar sectionFootersPinToVisibleBounds: Bool\nA Boolean value that indicates whether footers pin to the bottom of the collection view bounds during scrolling.\nRelationships\nInherits From\nUICollectionViewLayout\nSee Also\nManual layouts\nCustomizing Collection View Layouts\nCustomize a view layout by changing the size of cells in the flow or implementing a mosaic style.\nclass UICollectionViewLayout\nAn abstract base class for generating layout information for a collection view.\nclass UICollectionViewTransitionLayout\nA special type of layout object that lets you implement behaviors when changing from one layout to another in your collection view.\nclass UICollectionViewLayoutAttributes\nA layout object that manages the layout-related attributes for a given item in a collection view.\nclass UICollectionViewFlowLayoutInvalidationContext\nA set of properties for determining whether to recompute the size of items or their position in the layout."
  },
  {
    "title": "register(_:forSupplementaryViewOfKind:withReuseIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618103-register",
    "html": "Parameters\nviewClass\n\nThe class to use for the supplementary view.\n\nelementKind\n\nThe kind of supplementary view to create. This value is defined by the layout object. This parameter must not be nil.\n\nidentifier\n\nThe reuse identifier to associate with the specified class. This parameter must not be nil and must not be an empty string.\n\nDiscussion\n\nPrior to calling the dequeueReusableSupplementaryView(ofKind:withReuseIdentifier:for:) method of the collection view, you must use this method or the register(_:forSupplementaryViewOfKind:withReuseIdentifier:) method to tell the collection view how to create a supplementary view of the given type. If a view of the specified type isn’t currently in a reuse queue, the collection view uses the provided information to create a view object automatically.\n\nIf you previously registered a class or nib file with the same element kind and reuse identifier, the class you specify in the viewClass parameter replaces the old entry. You may specify nil for viewClass if you want to unregister the class from the specified element kind and reuse identifier.\n\nSee Also\nCreating headers and footers\nstruct UICollectionView.SupplementaryRegistration\nA registration for the collection view’s supplementary views.\nfunc dequeueConfiguredReusableSupplementary<Supplementary>(using: UICollectionView.SupplementaryRegistration<Supplementary>, for: IndexPath) -> Supplementary\nDequeues a configured reusable supplementary view object.\nfunc register(UINib?, forSupplementaryViewOfKind: String, withReuseIdentifier: String)\nRegisters a nib file for use in creating supplementary views for the collection view.\nfunc dequeueReusableSupplementaryView(ofKind: String, withReuseIdentifier: String, for: IndexPath) -> UICollectionReusableView\nDequeues a reusable supplementary view located by its identifier and kind."
  },
  {
    "title": "cancelInteractiveMovement() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618076-cancelinteractivemovement",
    "html": "Discussion\n\nCall this method to cancel movement tracking and return the item to its original location. For example, when using a gesture recognizer to track interactions, call this method when the gesture is cancelled. Calling this method lets the collection view know to end the tracking process and return the item to its original location.\n\nSee Also\nReordering items interactively\nfunc beginInteractiveMovementForItem(at: IndexPath) -> Bool\nInitiates the interactive movement of the item at the specified index path.\nfunc updateInteractiveMovementTargetPosition(CGPoint)\nUpdates the position of the item within the collection view’s bounds.\nfunc endInteractiveMovement()\nEnds interactive movement tracking and moves the target item to its new location."
  },
  {
    "title": "updateInteractiveMovementTargetPosition(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618079-updateinteractivemovementtargetp",
    "html": "Parameters\ntargetPosition\n\nThe position of the item in the collection view’s coordinate system.\n\nDiscussion\n\nWhen moving an item interactively, use this method to provide the collection view with the item’s new position. When using a gesture recognizer to track user interactions with the item, call this method each time the gesture recognizer reports a location change. The collection view uses the new point to determine if the item needs to be repositioned and if the current layout needs to be updated.\n\nFor each position change, the collection view reports the change to the collectionView(_:targetIndexPathForMoveFromItemAt:toProposedIndexPath:) method of its delegate\n\nSee Also\nReordering items interactively\nfunc beginInteractiveMovementForItem(at: IndexPath) -> Bool\nInitiates the interactive movement of the item at the specified index path.\nfunc endInteractiveMovement()\nEnds interactive movement tracking and moves the target item to its new location.\nfunc cancelInteractiveMovement()\nEnds interactive movement tracking and returns the target item to its original location."
  },
  {
    "title": "UICollectionView.CellRegistration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/cellregistration",
    "html": "Overview\n\nUse a cell registration to register cells with your collection view and configure each cell for display. You create a cell registration with your cell type and data item type as the registration’s generic parameters, passing in a registration handler to configure the cell. In the registration handler, you specify how to configure the content and appearance of that type of cell.\n\nThe following example creates a cell registration for cells of type UICollectionViewListCell. It creates a content configuration with a system default style, customizes the content and appearance of the configuration, and then assigns the configuration to the cell.\n\nlet cellRegistration = UICollectionView.CellRegistration<UICollectionViewListCell, Int> { cell, indexPath, item in\n    \n    var contentConfiguration = cell.defaultContentConfiguration()\n    \n    contentConfiguration.text = \"\\(item)\"\n    contentConfiguration.textProperties.color = .lightGray\n    \n    cell.contentConfiguration = contentConfiguration\n}\n\n\nAfter you create a cell registration, you pass it in to dequeueConfiguredReusableCell(using:for:item:), which you call from your data source’s cell provider.\n\ndataSource = UICollectionViewDiffableDataSource<Section, Int>(collectionView: collectionView) {\n    (collectionView: UICollectionView, indexPath: IndexPath, itemIdentifier: Int) -> UICollectionViewCell? in\n    \n    return collectionView.dequeueConfiguredReusableCell(using: cellRegistration,\n                                                        for: indexPath,\n                                                        item: itemIdentifier)\n}\n\n\nYou don’t need to call register(_:forCellWithReuseIdentifier:) or register(_:forCellWithReuseIdentifier:). The collection view registers your cell automatically when you pass the cell registration to dequeueConfiguredReusableCell(using:for:item:).\n\nImportant\n\nDon’t create your cell registration inside a UICollectionViewDiffableDataSource.CellProvider closure; doing so prevents cell reuse, and generates an exception in iOS 15 and higher.\n\nTopics\nCreating a cell registration\ninit(handler: UICollectionView.CellRegistration<Cell, Item>.Handler)\nCreates a cell registration with the specified registration handler.\ninit(cellNib: UINib, handler: UICollectionView.CellRegistration<Cell, Item>.Handler)\nCreates a cell registration with the specified registration handler and nib file.\ntypealias UICollectionView.CellRegistration.Handler\nA closure that handles the cell registration and configuration.\nSee Also\nCreating cells\nfunc dequeueConfiguredReusableCell<Cell, Item>(using: UICollectionView.CellRegistration<Cell, Item>, for: IndexPath, item: Item?) -> Cell\nDequeues a configured reusable cell object.\nfunc register(AnyClass?, forCellWithReuseIdentifier: String)\nRegisters a class for use in creating new collection view cells.\nfunc register(UINib?, forCellWithReuseIdentifier: String)\nRegisters a nib file for use in creating new collection view cells.\nfunc dequeueReusableCell(withReuseIdentifier: String, for: IndexPath) -> UICollectionViewCell\nDequeues a reusable cell object located by its identifier."
  },
  {
    "title": "dequeueConfiguredReusableCell(using:for:item:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/3600423-dequeueconfiguredreusablecell",
    "html": "Parameters\nregistration\n\nThe cell registration for configuring the cell object. See UICollectionView.CellRegistration.\n\nindexPath\n\nThe index path that specifies the location of the cell in the collection view.\n\nitem\n\nThe item that provides data for the cell.\n\nReturn Value\n\nA configured reusable cell object.\n\nSee Also\nCreating cells\nstruct UICollectionView.CellRegistration\nA registration for the collection view’s cells.\nfunc register(AnyClass?, forCellWithReuseIdentifier: String)\nRegisters a class for use in creating new collection view cells.\nfunc register(UINib?, forCellWithReuseIdentifier: String)\nRegisters a nib file for use in creating new collection view cells.\nfunc dequeueReusableCell(withReuseIdentifier: String, for: IndexPath) -> UICollectionViewCell\nDequeues a reusable cell object located by its identifier."
  },
  {
    "title": "setCollectionViewLayout(_:animated:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618017-setcollectionviewlayout",
    "html": "Parameters\nlayout\n\nThe new layout object for the collection view.\n\nanimated\n\nSpecify true if you want to animate changes from the current layout to the new layout specified by the layout parameter. Specify false to make the change without animations.\n\ncompletion\n\nThe block that’s executed when the layout transition finishes or is terminated by the user. This block takes the following parameter:\n\nfinished\n\nA Boolean indicating whether the transition completed successfully. This parameter is true if the transition finished and the new layout is installed. It’s false if the user aborted the transition and returned to the old layout.\n\nDiscussion\n\nThis method initiates a layout change programmatically, notifying you when the transition is complete. If you choose to animate the layout change, the animation timing and parameters are controlled by the collection view.\n\nSee Also\nChanging the layout\nvar collectionViewLayout: UICollectionViewLayout\nThe layout used to organize the collected view’s items.\nfunc setCollectionViewLayout(UICollectionViewLayout, animated: Bool)\nChanges the collection view’s layout and optionally animates the change.\nfunc startInteractiveTransition(to: UICollectionViewLayout, completion: UICollectionView.LayoutInteractiveTransitionCompletion?) -> UICollectionViewTransitionLayout\nChanges the collection view’s current layout using an interactive transition effect.\nfunc finishInteractiveTransition()\nTells the collection view to finish an interactive transition by installing the intended target layout.\nfunc cancelInteractiveTransition()\nTells the collection view to cancel an interactive transition and return to its original layout object.\ntypealias UICollectionView.LayoutInteractiveTransitionCompletion\nThe completion block called at the end of an interactive transition for a collection view."
  },
  {
    "title": "endInteractiveMovement() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618082-endinteractivemovement",
    "html": "Discussion\n\nCall this method upon the successful completion of movement tracking for a item. For example, when using a gesture recognizer to track user interactions, call this method upon the successful completion of the gesture. Calling this method lets the collection view know to end tracking and move the item to its new location permanently. The collection view responds by calling the collectionView(_:moveItemAt:to:) method of its data source to ensure that your data structures are updated.\n\nSee Also\nReordering items interactively\nfunc beginInteractiveMovementForItem(at: IndexPath) -> Bool\nInitiates the interactive movement of the item at the specified index path.\nfunc updateInteractiveMovementTargetPosition(CGPoint)\nUpdates the position of the item within the collection view’s bounds.\nfunc cancelInteractiveMovement()\nEnds interactive movement tracking and returns the target item to its original location."
  },
  {
    "title": "finishInteractiveTransition() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618080-finishinteractivetransition",
    "html": "Discussion\n\nCall this method after a call to the startInteractiveTransition(to:completion:) method and after you determine through a gesture recognizer or other event-handling code that the user wants to transition to the new layout. This method removes the intermediate transition layout object from the collection view and installs the intended target layout object. It then performs any final animations to get the collection view’s items from their current positions to the positions specified by the newly installed layout object.\n\nAfter calling this method, you can also remove the gesture recognizer or event-handling code you installed to manage the interactive portions of the transition.\n\nSee Also\nChanging the layout\nvar collectionViewLayout: UICollectionViewLayout\nThe layout used to organize the collected view’s items.\nfunc setCollectionViewLayout(UICollectionViewLayout, animated: Bool)\nChanges the collection view’s layout and optionally animates the change.\nfunc setCollectionViewLayout(UICollectionViewLayout, animated: Bool, completion: ((Bool) -> Void)?)\nChanges the collection view’s layout and notifies you when the animations complete.\nfunc startInteractiveTransition(to: UICollectionViewLayout, completion: UICollectionView.LayoutInteractiveTransitionCompletion?) -> UICollectionViewTransitionLayout\nChanges the collection view’s current layout using an interactive transition effect.\nfunc cancelInteractiveTransition()\nTells the collection view to cancel an interactive transition and return to its original layout object.\ntypealias UICollectionView.LayoutInteractiveTransitionCompletion\nThe completion block called at the end of an interactive transition for a collection view."
  },
  {
    "title": "cancelInteractiveTransition() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618075-cancelinteractivetransition",
    "html": "Discussion\n\nCall this method after a call to the startInteractiveTransition(to:completion:) method and after you determine through a gesture recognizer or other event-handling code that the user wants to revert to the collection view’s original layout. This method removes the intermediate transition layout object from the collection view and reinstalls the original layout object. It then performs any final animations to get the collection view’s items from their current positions to the positions specified by the original layout object.\n\nAfter calling this method, you can also remove the gesture recognizer or event-handling code you installed to manage the interactive portions of the transition.\n\nSee Also\nChanging the layout\nvar collectionViewLayout: UICollectionViewLayout\nThe layout used to organize the collected view’s items.\nfunc setCollectionViewLayout(UICollectionViewLayout, animated: Bool)\nChanges the collection view’s layout and optionally animates the change.\nfunc setCollectionViewLayout(UICollectionViewLayout, animated: Bool, completion: ((Bool) -> Void)?)\nChanges the collection view’s layout and notifies you when the animations complete.\nfunc startInteractiveTransition(to: UICollectionViewLayout, completion: UICollectionView.LayoutInteractiveTransitionCompletion?) -> UICollectionViewTransitionLayout\nChanges the collection view’s current layout using an interactive transition effect.\nfunc finishInteractiveTransition()\nTells the collection view to finish an interactive transition by installing the intended target layout.\ntypealias UICollectionView.LayoutInteractiveTransitionCompletion\nThe completion block called at the end of an interactive transition for a collection view."
  },
  {
    "title": "layoutChanged | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibility/notification/1620186-layoutchanged",
    "html": "Discussion\n\nPost this notification using the post(notification:argument:) function. Optionally, include a parameter that contains the accessibility element for VoiceOver to move to after processing the notification.\n\nSee Also\nNotifications\nstatic var announcement: UIAccessibility.Notification\nA notification that an app posts when it needs to convey an announcement to the assistive app.\nstatic var screenChanged: UIAccessibility.Notification\nA notification that an app posts when a new view appears that occupies a major portion of the screen.\nstatic var pageScrolled: UIAccessibility.Notification\nA notification that an app posts when a scroll action completes.\nstatic var pauseAssistiveTechnology: UIAccessibility.Notification\nA notification that pauses an assistive app's operations temporarily.\nstatic var resumeAssistiveTechnology: UIAccessibility.Notification\nA notification that resumes an assistive app's operations temporarily.\nstruct UIAccessibility.AssistiveTechnologyIdentifier\nIdentifiers for assistive apps."
  },
  {
    "title": "dataSource | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618091-datasource",
    "html": "Discussion\n\nThe data source must adopt the UICollectionViewDataSource protocol. The collection view maintains a weak reference to the data source object.\n\nSee Also\nProviding the collection view data\nclass UICollectionViewDiffableDataSource\nThe object you use to manage data and provide cells for a collection view.\nprotocol UICollectionViewDataSource\nThe methods adopted by the object you use to manage data and provide cells for a collection view.\nBuilding High-Performance Lists and Collection Views\nImprove the performance of lists and collections in your app with prefetching and image preparation."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618033-delegate",
    "html": "Discussion\n\nThe delegate must adopt the UICollectionViewDelegate protocol. The delegate object is responsible for managing selection behavior and interactions with individual items.\n\nSee Also\nManaging collection view interactions\nprotocol UICollectionViewDelegate\nThe methods adopted by the object you use to manage user interactions with items in a collection view."
  },
  {
    "title": "title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicommandalternate/3175318-title",
    "html": "See Also\nGetting information about the alternative\nvar action: Selector\nThe command alternative’s action-method selector.\nvar modifierFlags: UIKeyModifierFlags\nThe bit mask of modifier keys that the user must press to invoke the action for the alternative command."
  },
  {
    "title": "init(frame:collectionViewLayout:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618053-init",
    "html": "Parameters\nframe\n\nThe frame rectangle for the collection view, measured in points. The origin of the frame is relative to the superview in which you plan to add it. This frame is passed to the superclass during initialization.\n\nlayout\n\nThe layout object to use for organizing items. The collection view stores a strong reference to the specified object. Must not be nil.\n\nReturn Value\n\nAn initialized collection view object, or nil if the object couldn’t be created.\n\nDiscussion\n\nUse this method when initializing a collection view object programmatically.\n\nThis method is the designated initializer.\n\nSee Also\nCreating a collection view\ninit?(coder: NSCoder)\nCreates a collection view object from data in a given unarchiver."
  },
  {
    "title": "modifierFlags | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicommandalternate/3175317-modifierflags",
    "html": "See Also\nGetting information about the alternative\nvar title: String\nThe command alternative’s title.\nvar action: Selector\nThe command alternative’s action-method selector."
  },
  {
    "title": "configurationState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/3601056-configurationstate",
    "html": "Discussion\n\nTo add your own custom state, see UIConfigurationStateCustomKey.\n\nSee Also\nManaging the state\nfunc setNeedsUpdateConfiguration()\nInforms the cell to update its configuration for its current state.\nfunc updateConfiguration(using: UICellConfigurationState)\nUpdates the cell’s configuration using the current state.\nvar configurationUpdateHandler: UITableViewCell.ConfigurationUpdateHandler?\nA block for handling updates to the cell’s configuration using the current state.\ntypealias UITableViewCell.ConfigurationUpdateHandler\nThe type of block for handling updates to the cell’s configuration using the current state."
  },
  {
    "title": "performBatchUpdates(_:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618045-performbatchupdates",
    "html": "Parameters\nupdates\n\nThe block that performs the relevant insert, delete, reload, or move operations.\n\ncompletion\n\nA completion handler block to execute when all of the operations finish. This block takes a single Boolean parameter that contains the value true if all of the related animations completed successfully or false if they were interrupted. This parameter may be nil.\n\nDiscussion\n\nYou can use this method in cases where you want to make multiple changes to the collection view in one single animated operation, as opposed to in several separate animations. You might use this method to insert, delete, reload, or move cells or use it to change the layout parameters associated with one or more cells. Use the block passed in the updates parameter to specify all of the operations you want to perform.\n\nIf the collection view’s layout isn’t up to date before you call this method, a reload may occur. To avoid problems, you should update your data model inside the updates block or ensure the layout is updated before you call performBatchUpdates(_:completion:).\n\nDeletes are processed before inserts in batch operations. This means the indexes for the deletions are processed relative to the indexes of the collection view’s state before the batch operation, and the indexes for the insertions are processed relative to the indexes of the state after all the deletions in the batch operation.\n\nSee Also\nRelated Documentation\nfunc deleteItems(at: [IndexPath])\nDeletes the items at the specified index paths.\nfunc moveSection(Int, toSection: Int)\nMoves a section from one location to another in the collection view.\nfunc moveItem(at: IndexPath, to: IndexPath)\nMoves an item from one location to another in the collection view.\nfunc insertItems(at: [IndexPath])\nInserts new items at the specified index paths.\nfunc insertSections(IndexSet)\nInserts new sections at the specified indexes.\nfunc deleteSections(IndexSet)\nDeletes the sections at the specified indexes."
  },
  {
    "title": "scrollToItem(at:at:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618046-scrolltoitem",
    "html": "Parameters\nindexPath\n\nThe index path of the item to scroll into view.\n\nscrollPosition\n\nAn option that specifies where the item should be positioned when scrolling finishes. For a list of possible values, see UICollectionView.ScrollPosition.\n\nanimated\n\nSpecify true to animate the scrolling behavior or false to adjust the scroll view’s visible content immediately.\n\nSee Also\nScrolling an item into view\nstruct UICollectionView.ScrollPosition\nConstants that indicate how to scroll an item into the visible portion of the collection view.\nenum UICollectionView.ScrollDirection\nConstants that indicate the direction of scrolling for the layout."
  },
  {
    "title": "hasUncommittedUpdates | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/2891094-hasuncommittedupdates",
    "html": "Discussion\n\nWhen the value of this property is true, avoid making any significant changes to the collection view. Specifically, don’t reload the collection view’s data, as doing so deletes all placeholders and recreates items from the data source.\n\nSee Also\nReloading content\nfunc reconfigureItems(at: [IndexPath])\nUpdates the data for the items at the index paths you specify, preserving the existing cells for the items.\nfunc reloadData()\nReloads all of the data for the collection view.\nfunc reloadSections(IndexSet)\nReloads the data in the specified sections of the collection view.\nfunc reloadItems(at: [IndexPath])\nReloads just the items at the specified index paths."
  },
  {
    "title": "UICollectionView.ScrollPosition | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/scrollposition",
    "html": "Topics\nConstants\nstatic var top: UICollectionView.ScrollPosition\nScroll so that the item is positioned at the top of the collection view’s bounds.\nstatic var centeredVertically: UICollectionView.ScrollPosition\nScroll so that the item is centered vertically in the collection view.\nstatic var bottom: UICollectionView.ScrollPosition\nScroll so that the item is positioned at the bottom of the collection view’s bounds.\nstatic var left: UICollectionView.ScrollPosition\nScroll so that the item is positioned at the left edge of the collection view’s bounds.\nstatic var centeredHorizontally: UICollectionView.ScrollPosition\nScroll so that the item is centered horizontally in the collection view.\nstatic var right: UICollectionView.ScrollPosition\nScroll so that the item is positioned at the right edge of the collection view’s bounds.\nInitializers\ninit(rawValue: UInt)\nCreates a scroll-position structure with the specified raw value.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nScrolling an item into view\nfunc scrollToItem(at: IndexPath, at: UICollectionView.ScrollPosition, animated: Bool)\nScrolls the collection view contents until the specified item is visible.\nenum UICollectionView.ScrollDirection\nConstants that indicate the direction of scrolling for the layout."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicommandalternate/3175316-init",
    "html": "See Also\nCreating a command alternative\ninit(title: String, action: Selector, modifierFlags: UIKeyModifierFlags)\nCreates a command alternative with the specified title, action, and modifier flags."
  },
  {
    "title": "printerPickerController(_:shouldShow:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprinterpickercontrollerdelegate/1620503-printerpickercontroller",
    "html": "Parameters\nprinterPickerController\n\nThe printer picker controller that is asking the delegate for information.\n\nprinter\n\nThe printer object for the delegate to consider.\n\nReturn Value\n\ntrue if the printer should be displayed or false if it should not.\n\nDiscussion\n\nImplement this method in your delegate if you want to filter the list of printers displayed by the printer picker interface. You might use this method to display only printers with specific capabilities. The printer picker interface calls this method once for each printer it is preparing to display, so your implementation should perform any required checks and return as quickly as possible. Do not perform any lengthy operations in this method.\n\nIf you do not implement this method, the picker interface displays all of the printers that it finds."
  },
  {
    "title": "layoutAttributesForSupplementaryElement(ofKind:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618012-layoutattributesforsupplementary",
    "html": "Parameters\nkind\n\nA string specifying the kind of supplementary view whose layout attributes you want. Layout classes are responsible for defining the kinds of supplementary views they support.\n\nindexPath\n\nThe index path of the supplementary view. The interpretation of this value depends on how the layout implements the view. For example, a view associated with a section might contain just a section value.\n\nReturn Value\n\nThe layout attributes of the supplementary view or nil if the specified supplementary view does not exist.\n\nDiscussion\n\nUse this method to retrieve the layout information for a particular supplementary view. You should always use this method instead of querying the layout object directly.\n\nSee Also\nGetting layout information\nfunc layoutAttributesForItem(at: IndexPath) -> UICollectionViewLayoutAttributes?\nGets the layout information for the item at the specified index path."
  },
  {
    "title": "UICollectionView.ScrollDirection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/scrolldirection",
    "html": "Topics\nConstants\ncase vertical\nThe layout scrolls content vertically.\ncase horizontal\nThe layout scrolls content horizontally.\nRelationships\nConforms To\nSendable\nSee Also\nScrolling an item into view\nfunc scrollToItem(at: IndexPath, at: UICollectionView.ScrollPosition, animated: Bool)\nScrolls the collection view contents until the specified item is visible.\nstruct UICollectionView.ScrollPosition\nConstants that indicate how to scroll an item into the visible portion of the collection view."
  },
  {
    "title": "visibleSupplementaryViews(ofKind:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618026-visiblesupplementaryviews",
    "html": "Parameters\nelementKind\n\nThe kind of supplementary view to locate. This value is defined by the layout object. This parameter must not be nil.\n\nReturn Value\n\nAn array of the visible supplementary views. If no supplementary views are visible, the returned array is empty.\n\nSee Also\nLocating items and views in the collection view\nfunc indexPathForItem(at: CGPoint) -> IndexPath?\nGets the index path of the item at the specified point in the collection view.\nvar indexPathsForVisibleItems: [IndexPath]\nAn array of the visible items in the collection view.\nfunc indexPath(for: UICollectionViewCell) -> IndexPath?\nGets the index path of the specified cell.\nfunc cellForItem(at: IndexPath) -> UICollectionViewCell?\nGets the cell object at the index path you specify.\nfunc indexPathsForVisibleSupplementaryElements(ofKind: String) -> [IndexPath]\nGets the index paths of all visible supplementary views of the specified type.\nfunc supplementaryView(forElementKind: String, at: IndexPath) -> UICollectionReusableView?\nGets the supplementary view at the specified index path."
  },
  {
    "title": "layoutAttributesForItem(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618093-layoutattributesforitem",
    "html": "Parameters\nindexPath\n\nThe index path of the item.\n\nReturn Value\n\nThe layout attributes for the item or nil if no item exists at the specified path.\n\nDiscussion\n\nUse this method to retrieve the layout information for a particular item. You should always use this method instead of querying the layout object directly.\n\nSee Also\nGetting layout information\nfunc layoutAttributesForSupplementaryElement(ofKind: String, at: IndexPath) -> UICollectionViewLayoutAttributes?\nGets the layout information for the specified supplementary view."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiindirectscribbleinteraction/3603390-delegate",
    "html": "See Also\nManaging indirect Scribble interactions\nvar view: UIView?\nThe view for the interaction."
  },
  {
    "title": "register(_:forSupplementaryViewOfKind:withReuseIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618101-register",
    "html": "Parameters\nnib\n\nThe nib object containing the view object. The nib file must contain only one top-level object and that object must be of the type UICollectionReusableView.\n\nkind\n\nThe kind of supplementary view to create. The layout defines the types of supplementary views it supports. The value of this string may correspond to one of the predefined kind strings or to a custom string that the layout added to support a new type of supplementary view. This parameter must not be nil.\n\nidentifier\n\nThe reuse identifier to associate with the specified nib file. This parameter must not be nil and must not be an empty string.\n\nDiscussion\n\nPrior to calling the dequeueReusableSupplementaryView(ofKind:withReuseIdentifier:for:) method of the collection view, you must use this method or the register(_:forSupplementaryViewOfKind:withReuseIdentifier:) method to tell the collection view how to create a supplementary view of the given type. If a view of the specified type isn’t currently in a reuse queue, the collection view uses the provided information to create a view object automatically.\n\nIf you previously registered a class or nib file with the same element kind and reuse identifier, the class you specify in the viewClass parameter replaces the old entry. You may specify nil for nib if you want to unregister the class from the specified element kind and reuse identifier.\n\nSee Also\nCreating headers and footers\nstruct UICollectionView.SupplementaryRegistration\nA registration for the collection view’s supplementary views.\nfunc dequeueConfiguredReusableSupplementary<Supplementary>(using: UICollectionView.SupplementaryRegistration<Supplementary>, for: IndexPath) -> Supplementary\nDequeues a configured reusable supplementary view object.\nfunc register(AnyClass?, forSupplementaryViewOfKind: String, withReuseIdentifier: String)\nRegisters a class for use in creating supplementary views for the collection view.\nfunc dequeueReusableSupplementaryView(ofKind: String, withReuseIdentifier: String, for: IndexPath) -> UICollectionReusableView\nDequeues a reusable supplementary view located by its identifier and kind."
  },
  {
    "title": "UICollectionView.LayoutInteractiveTransitionCompletion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/layoutinteractivetransitioncompletion",
    "html": "Discussion\n\nThis completion block takes the following parameters:\n\ncompleted\n\nA Boolean indicating whether the animations ran to completion.\n\nfinish\n\nA Boolean indicating whether the transition finished or was canceled. This parameter is true if the transition ran to completion and the new layout is installed. It is false if the user canceled the transition and the old layout is installed.\n\nSee Also\nChanging the layout\nvar collectionViewLayout: UICollectionViewLayout\nThe layout used to organize the collected view’s items.\nfunc setCollectionViewLayout(UICollectionViewLayout, animated: Bool)\nChanges the collection view’s layout and optionally animates the change.\nfunc setCollectionViewLayout(UICollectionViewLayout, animated: Bool, completion: ((Bool) -> Void)?)\nChanges the collection view’s layout and notifies you when the animations complete.\nfunc startInteractiveTransition(to: UICollectionViewLayout, completion: UICollectionView.LayoutInteractiveTransitionCompletion?) -> UICollectionViewTransitionLayout\nChanges the collection view’s current layout using an interactive transition effect.\nfunc finishInteractiveTransition()\nTells the collection view to finish an interactive transition by installing the intended target layout.\nfunc cancelInteractiveTransition()\nTells the collection view to cancel an interactive transition and return to its original layout object."
  },
  {
    "title": "insertSections(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618090-insertsections",
    "html": "Parameters\nsections\n\nAn index set containing the indexes of the sections you want to insert. This parameter must not be nil.\n\nDiscussion\n\nUse this method to insert one or more sections into the collection view. This method adds the sections, and it is up to your data source to report the number of items in each section when asked for the information. The collection view then uses that information to get updated layout attributes for the newly inserted sections and items. If the insertions cause a change in the collection view’s visible content, those changes are animated into place.\n\nYou can also call this method from a block passed to the performBatchUpdates(_:completion:) method when you want to animate multiple separate changes into place at the same time. See the description of that method for more information.\n\nSee Also\nInserting, moving, and deleting sections\nfunc moveSection(Int, toSection: Int)\nMoves a section from one location to another in the collection view.\nfunc deleteSections(IndexSet)\nDeletes the sections at the specified indexes."
  },
  {
    "title": "numberOfItems(inSection:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618016-numberofitems",
    "html": "Parameters\nsection\n\nThe index of the section for which you want a count of the items.\n\nReturn Value\n\nThe number of items in the specified section.\n\nSee Also\nGetting the state of the collection view\nvar numberOfSections: Int\nThe number of sections displayed by the collection view.\nvar visibleCells: [UICollectionViewCell]\nAn array of visible cells currently displayed by the collection view."
  },
  {
    "title": "moveSection(_:toSection:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618042-movesection",
    "html": "Parameters\nsection\n\nThe index of the section you want to move.\n\nnewSection\n\nThe index in the collection view that is the destination of the move for the section. The existing section at that location moves up or down to an adjoining index position to make room for it.\n\nDiscussion\n\nUse this method to reorganize existing sections and their contained items. You might do this when you rearrange sections within your data source object or in response to user interactions with the collection view. The collection view updates the layout as needed to account for the move, animating new views into position as needed.\n\nYou can also call this method from a block passed to the performBatchUpdates(_:completion:) method when you want to animate multiple separate changes into place at the same time. See the description of that method for more information.\n\nSee Also\nInserting, moving, and deleting sections\nfunc insertSections(IndexSet)\nInserts new sections at the specified indexes.\nfunc deleteSections(IndexSet)\nDeletes the sections at the specified indexes."
  },
  {
    "title": "deleteItems(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618060-deleteitems",
    "html": "Parameters\nindexPaths\n\nAn array of NSIndexPath objects, each of which contains a section index and item index for the item you want to delete from the collection view. This parameter must not be nil.\n\nDiscussion\n\nUse this method to remove items from the collection view. You might do this when you remove the items from your data source object or in response to user interactions with the collection view. The collection view updates the layout of the remaining items to account for the deletions, animating the remaining items into position as needed.\n\nYou can also call this method from a block passed to the performBatchUpdates(_:completion:) method when you want to animate multiple separate changes into place at the same time. See the description of that method for more information.\n\nSee Also\nInserting, moving, and deleting Items\nfunc insertItems(at: [IndexPath])\nInserts new items at the specified index paths.\nfunc moveItem(at: IndexPath, to: IndexPath)\nMoves an item from one location to another in the collection view."
  },
  {
    "title": "insertItems(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618097-insertitems",
    "html": "Parameters\nindexPaths\n\nAn array of NSIndexPath objects, each of which contains a section index and item index at which to insert a new cell. This parameter must not be nil.\n\nDiscussion\n\nCall this method to insert one or more new items into the collection view. You might do this when your data source object receives data for new items or in response to user interactions with the collection view. The collection view gets the layout information for the new cells as part of calling this method. And if the layout information indicates that the cells should appear onscreen, the collection view asks your data source to provide the appropriate views, animating them into position as needed.\n\nYou can also call this method from a block passed to the performBatchUpdates(_:completion:) method when you want to animate multiple separate changes into place at the same time. See the description of that method for more information.\n\nSee Also\nInserting, moving, and deleting Items\nfunc moveItem(at: IndexPath, to: IndexPath)\nMoves an item from one location to another in the collection view.\nfunc deleteItems(at: [IndexPath])\nDeletes the items at the specified index paths."
  },
  {
    "title": "numberOfSections | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618028-numberofsections",
    "html": "See Also\nGetting the state of the collection view\nfunc numberOfItems(inSection: Int) -> Int\nFetches the count of items in the specified section.\nvar visibleCells: [UICollectionViewCell]\nAn array of visible cells currently displayed by the collection view."
  },
  {
    "title": "backgroundView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618074-backgroundview",
    "html": "Discussion\n\nThe view (if any) in this property is positioned underneath all of the other content and sized automatically to fill the entire bounds of the collection view. The background view does not scroll with the collection view’s other content. The collection view maintains a strong reference to the background view object.\n\nThis property is nil by default, which displays the background color of the collection view."
  },
  {
    "title": "editingAccessoryView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623264-editingaccessoryview",
    "html": "Discussion\n\nIf the value of this property is not nil, the UITableViewCell class uses the given view for the accessory view in the table view’s editing state; it ignores the value of the editingAccessoryType property. The provided accessory view can be a framework-provided control or label or a custom view. The accessory view appears in the right side of the cell.\n\nThe accessory type cross-fades between normal and editing states if it set for both states; use the accessoryType property to set the accessory view for the cell during the table view’s normal state. If this property is not set for both states, the cell is animated to slide or out, as necessary.\n\nSee Also\nManaging accessory views\nvar accessoryType: UITableViewCell.AccessoryType\nThe type of standard accessory view for the cell to use in the table view’s normal state.\nvar accessoryView: UIView?\nThe view to use on the right side of the cell, typically as a control, in the table view’s normal state.\nvar editingAccessoryType: UITableViewCell.AccessoryType\nThe type of standard accessory view for the cell to use in the table view’s editing state.\nenum UITableViewCell.AccessoryType\nThe type of standard accessory control used by a cell.\nRelated Documentation\nfunc willTransition(to: UITableViewCell.StateMask)\nNotifies the cell that it’s about to transition to a new cell state.\nfunc didTransition(to: UITableViewCell.StateMask)\nNotifies the cell that it transitioned to a new cell state."
  },
  {
    "title": "purple | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/1621923-purple",
    "html": "See Also\nFixed colors\nclass var black: UIColor\nA color object in the sRGB color space with a grayscale value of 0.0 and an alpha value of 1.0.\nclass var blue: UIColor\nA color object with RGB values of 0.0, 0.0, and 1.0, and an alpha value of 1.0.\nclass var brown: UIColor\nA color object with RGB values of 0.6, 0.4, and 0.2, and an alpha value of 1.0.\nclass var cyan: UIColor\nA color object with RGB values of 0.0, 1.0, and 1.0, and an alpha value of 1.0.\nclass var darkGray: UIColor\nA color object with a grayscale value of 1/3 and an alpha value of 1.0.\nclass var gray: UIColor\nA color object with a grayscale value of 0.5 and an alpha value of 1.0.\nclass var green: UIColor\nA color object with RGB values of 0.0, 1.0, and 0.0, and an alpha value of 1.0.\nclass var lightGray: UIColor\nA color object with a grayscale value of 2/3 and an alpha value of 1.0.\nclass var magenta: UIColor\nA color object with RGB values of 1.0, 0.0, and 1.0, and an alpha value of 1.0.\nclass var orange: UIColor\nA color object with RGB values of 1.0, 0.5, and 0.0, and an alpha value of 1.0.\nclass var red: UIColor\nA color object with RGB values of 1.0, 0.0, and 0.0, and an alpha value of 1.0.\nclass var white: UIColor\nA color object with a grayscale value of 1.0 and an alpha value of 1.0.\nclass var yellow: UIColor\nA color object with RGB values of 1.0, 1.0, and 0.0, and an alpha value of 1.0."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaction/identifier/3335173-init",
    "html": "Parameters\nrawValue\n\nA string that uniquely identifies the action."
  },
  {
    "title": "init(dampingRatio:initialVelocity:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uispringtimingparameters/1649832-init",
    "html": "Parameters\nratio\n\nThe damping ratio to apply to the spring’s motion. To smoothly decelerate the animation without oscillation, specify a value of 1. Specify values closer to 0 to create less damping and more oscillation.\n\nvelocity\n\nThe target property’s initial rate of change at the start of the spring animation. If the target property doesn’t change, specify a vector with dx and dy components of 0.\n\nFor details about how to calculate this velocity, see initialVelocity.\n\nReturn Value\n\nAn initialized spring timing parameters object or nil if the object could not be created.\n\nSee Also\nInitializing a spring timing parameters object\ninit()\nCreates a default timing parameters object.\ninit(dampingRatio: CGFloat)\nCreates a timing parameters object with the specified damping ratio.\ninit(mass: CGFloat, stiffness: CGFloat, damping: CGFloat, initialVelocity: CGVector)\nCreates a timing parameters object with the specified spring stiffness, mass, damping coefficient, and initial velocity.\ninit?(coder: NSCoder)\nCreates a timing parameters object from data in an unarchiver."
  },
  {
    "title": "UIPress.PressType.upArrow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipress/presstype/uparrow",
    "html": "See Also\nNavigation\ncase downArrow\nA constant that represents the down arrow button.\ncase leftArrow\nA constant that represents the left arrow button.\ncase rightArrow\nA constant that represents the right arrow button.\ncase pageDown\nA constant that represents the page down button.\ncase pageUp\nA constant that represents the page up button."
  },
  {
    "title": "UIPress.PressType.rightArrow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipress/presstype/rightarrow",
    "html": "See Also\nNavigation\ncase upArrow\nA constant that represents the up arrow button.\ncase downArrow\nA constant that represents the down arrow button.\ncase leftArrow\nA constant that represents the left arrow button.\ncase pageDown\nA constant that represents the page down button.\ncase pageUp\nA constant that represents the page up button."
  },
  {
    "title": "UIPress.PressType.pageDown | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipress/presstype/pagedown",
    "html": "Discussion\n\nAdd gesture recognizers for UIPress.PressType.pageDown and UIPress.PressType.pageUp to navigate content in your app.\n\nIn an electronic program guide, select the item below the current one in response to UIPress.PressType.downArrow, and display the next screen of items in response to UIPress.PressType.pageDown. While your content plays, change the channel when your app receives UIPress.PressType.pageUp or UIPress.PressType.pageDown.\n\nFor more details on browsing multichannel content, see Providing Channel Navigation.\n\nSee Also\nNavigation\ncase upArrow\nA constant that represents the up arrow button.\ncase downArrow\nA constant that represents the down arrow button.\ncase leftArrow\nA constant that represents the left arrow button.\ncase rightArrow\nA constant that represents the right arrow button.\ncase pageUp\nA constant that represents the page up button."
  },
  {
    "title": "UIPress.PressType.pageUp | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipress/presstype/pageup",
    "html": "Discussion\n\nAdd gesture recognizers for UIPress.PressType.pageDown and UIPress.PressType.pageUp to navigate content in your app.\n\nIn an electronic program guide, select the item above the current one in response to UIPress.PressType.upArrow, and display the previous screen of items in response to UIPress.PressType.pageUp. While your content plays, change the channel when your app receives UIPress.PressType.pageUp or UIPress.PressType.pageDown.\n\nFor more details on browsing multichannel content, see Providing Channel Navigation.\n\nSee Also\nNavigation\ncase upArrow\nA constant that represents the up arrow button.\ncase downArrow\nA constant that represents the down arrow button.\ncase leftArrow\nA constant that represents the left arrow button.\ncase rightArrow\nA constant that represents the right arrow button.\ncase pageDown\nA constant that represents the page down button."
  },
  {
    "title": "focusStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623248-focusstyle",
    "html": "Discussion\n\nThe default value of this property is UITableViewCell.FocusStyle.default. For the list of possible focus styles, see UITableViewCell.FocusStyle.\n\nSee Also\nManaging focus\nenum UITableViewCell.FocusStyle\nThe style of focused cells."
  },
  {
    "title": "shouldIndentWhileEditing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623214-shouldindentwhileediting",
    "html": "Discussion\n\nThe default value is true. This property is unrelated to indentationLevel. The delegate can override this value in tableView(_:shouldIndentWhileEditingRowAt:). This property has an effect only on table views created in the grouped style (UITableView.Style.grouped); it has no effect on UITableView.Style.plain table views.\n\nSee Also\nManaging content indentation\nvar indentationLevel: Int\nThe indentation level of the cell’s content.\nvar indentationWidth: CGFloat\nThe width for each level of indentation of a cell’s content.\nvar separatorInset: UIEdgeInsets\nThe inset values for the separator line drawn beneath the cell.\nenum UITableViewCell.SeparatorStyle\nThe style for cells to use as separators."
  },
  {
    "title": "indentationWidth | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623247-indentationwidth",
    "html": "Discussion\n\nThe default indentation width is 10.0 points.\n\nSee Also\nManaging content indentation\nvar indentationLevel: Int\nThe indentation level of the cell’s content.\nvar shouldIndentWhileEditing: Bool\nA Boolean value that controls whether the cell background is indented when the table view is in editing mode.\nvar separatorInset: UIEdgeInsets\nThe inset values for the separator line drawn beneath the cell.\nenum UITableViewCell.SeparatorStyle\nThe style for cells to use as separators."
  },
  {
    "title": "indentationLevel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623252-indentationlevel",
    "html": "Discussion\n\nThe default value of the property is zero (no indentation). Assigning a positive value to this property indents the cell’s content from the left edge of the cell separator. The amount of indentation is equal to the indentation level multiplied by the value in the indentationWidth property.\n\nSee Also\nManaging content indentation\nvar indentationWidth: CGFloat\nThe width for each level of indentation of a cell’s content.\nvar shouldIndentWhileEditing: Bool\nA Boolean value that controls whether the cell background is indented when the table view is in editing mode.\nvar separatorInset: UIEdgeInsets\nThe inset values for the separator line drawn beneath the cell.\nenum UITableViewCell.SeparatorStyle\nThe style for cells to use as separators."
  },
  {
    "title": "printerPickerControllerWillPresent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprinterpickercontrollerdelegate/1620513-printerpickercontrollerwillprese",
    "html": "Parameters\nprinterPickerController\n\nThe printer picker controller object being displayed.\n\nDiscussion\n\nUse this method to perform any tasks associated with displaying the printer picker controller.\n\nSee Also\nResponding to Printer Picker Events\nfunc printerPickerControllerParentViewController(UIPrinterPickerController) -> UIViewController?\nAsks the delegate to provide the view controller to act as the parent of the printer picker.\nfunc printerPickerControllerDidPresent(UIPrinterPickerController)\nTells the delegate that the printer picker was displayed and is now visible.\nfunc printerPickerControllerWillDismiss(UIPrinterPickerController)\nTells the delegate that the printer picker is about to be dismissed.\nfunc printerPickerControllerDidDismiss(UIPrinterPickerController)\nTells the delegate that the printer picker was dismissed."
  },
  {
    "title": "willTransition(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623240-willtransition",
    "html": "Parameters\nstate\n\nA bit mask indicating the state or combination of states the cell is transitioning to.\n\nDiscussion\n\nSubclasses of UITableViewCell can implement this method to animate additional changes to a cell when it is changing state. UITableViewCell calls this method whenever a cell transitions between states, such as from a normal state (the default) to editing mode. The custom cell can set up and position any new views that appear with the new state. The cell then receives a layoutSubviews() message (UIView) in which it can position these new views in their final locations for the new state. Subclasses must always call super when overriding this method.\n\nNote that when the user swipes a cell to delete it, the cell transitions to the state identified by the showingDeleteConfirmation constant but the showingEditControl is not set.\n\nSee Also\nAdjusting to state transitions\nfunc didTransition(to: UITableViewCell.StateMask)\nNotifies the cell that it transitioned to a new cell state.\nstruct UITableViewCell.StateMask\nConstants used to determine the new state of a cell as it transitions between states.\nRelated Documentation\nvar editingAccessoryType: UITableViewCell.AccessoryType\nThe type of standard accessory view for the cell to use in the table view’s editing state.\nvar editingAccessoryView: UIView?\nThe view to use on the right side of the cell, typically as a control, in the table view’s editing state.\nvar accessoryView: UIView?\nThe view to use on the right side of the cell, typically as a control, in the table view’s normal state.\nvar accessoryType: UITableViewCell.AccessoryType\nThe type of standard accessory view for the cell to use in the table view’s normal state."
  },
  {
    "title": "didTransition(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623274-didtransition",
    "html": "Parameters\nstate\n\nA bit mask indicating the state or combination of states the cell is transitioning to.\n\nDiscussion\n\nSubclasses of UITableViewCell can implement this method to animate additional changes to a cell when it is changing state. UITableViewCell calls this method whenever a cell transitions between states, such as from a normal state (the default) to editing mode. This method is called at the end of the animation block, which gives the custom cell a chance to clean up after the state change—for example, removing the edit and reorder controls after transitioning out of editing. Subclasses must always call super when overriding this method.\n\nNote that when the user swipes a cell to delete it, the cell transitions to the state identified by the showingDeleteConfirmation constant but the showingEditControl is not set.\n\nSee Also\nAdjusting to state transitions\nfunc willTransition(to: UITableViewCell.StateMask)\nNotifies the cell that it’s about to transition to a new cell state.\nstruct UITableViewCell.StateMask\nConstants used to determine the new state of a cell as it transitions between states.\nRelated Documentation\nvar editingAccessoryType: UITableViewCell.AccessoryType\nThe type of standard accessory view for the cell to use in the table view’s editing state.\nvar editingAccessoryView: UIView?\nThe view to use on the right side of the cell, typically as a control, in the table view’s editing state.\nvar accessoryView: UIView?\nThe view to use on the right side of the cell, typically as a control, in the table view’s normal state.\nvar accessoryType: UITableViewCell.AccessoryType\nThe type of standard accessory view for the cell to use in the table view’s normal state."
  },
  {
    "title": "init(style:reuseIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623276-init",
    "html": "Parameters\nstyle\n\nA constant indicating a cell style. See UITableViewCell.CellStyle for descriptions of these constants.\n\nreuseIdentifier\n\nA string used to identify the cell object if it is to be reused for drawing multiple rows of a table view. Pass nil if the cell object is not to be reused. You should use the same reuse identifier for all cells of the same form.\n\nReturn Value\n\nAn initialized UITableViewCell object or nil if the object could not be created.\n\nDiscussion\n\nThis method is the designated initializer for the class. The reuse identifier is associated with those cells (rows) of a table view that have the same general configuration, minus cell content. In its implementation of tableView(_:cellForRowAt:), the table view's data source calls the UITableView method dequeueReusableCell(withIdentifier:), passing in a reuse identifier, to obtain the cell object to use as the basis for the current row.\n\nIf you want a table cell that has a configuration different that those defined by UITableViewCell for style, you must create your own custom cell. If you want to set the row height of cells on an individual basis, implement the delegate method tableView(_:heightForRowAt:).\n\nSee Also\nCreating a table view cell\nenum UITableViewCell.CellStyle\nAn enumeration for the various styles of cells.\ninit?(coder: NSCoder)\nCreates a table view from data in an unarchiver.\nRelated Documentation\nTable View Programming Guide for iOS"
  },
  {
    "title": "prepareForReuse() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623223-prepareforreuse",
    "html": "Discussion\n\nIf a UITableViewCell object has a reuse identifier, the table view invokes this method just before returning the object from the UITableView method dequeueReusableCell(withIdentifier:). To avoid potential performance issues, you should only reset attributes of the cell that are not related to content, for example, alpha, editing, and selection state. The table view's delegate in tableView(_:cellForRowAt:) should always reset all content when reusing a cell.\n\nThe table view doesn’t call this method if the cell object doesn’t have an associated reuse identifier, or if you use reconfigureRows(at:) to update the contents of an existing cell.\n\nIf you override this method, you must be sure to invoke the superclass implementation.\n\nSee Also\nReusing cells\nvar reuseIdentifier: String?\nA string for identifying a reusable cell.\nRelated Documentation\n- init(frame:reuseIdentifier:)\nInitializes and returns a table cell object."
  },
  {
    "title": "register(_:forCellWithReuseIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618083-register",
    "html": "Parameters\nnib\n\nThe nib object containing the cell object. The nib file must contain only one top-level object and that object must be of the type UICollectionViewCell.\n\nidentifier\n\nThe reuse identifier to associate with the specified nib file. This parameter must not be nil and must not be an empty string.\n\nDiscussion\n\nPrior to calling the dequeueReusableCell(withReuseIdentifier:for:) method of the collection view, you must use this method or the register(_:forCellWithReuseIdentifier:) method to tell the collection view how to create a new cell of the given type. If a cell of the specified type is not currently in a reuse queue, the collection view uses the provided information to create a new cell object automatically.\n\nIf you previously registered a class or nib file with the same reuse identifier, the object you specify in the nib parameter replaces the old entry. You may specify nil for nib if you want to unregister the nib file from the specified reuse identifier.\n\nSee Also\nCreating cells\nstruct UICollectionView.CellRegistration\nA registration for the collection view’s cells.\nfunc dequeueConfiguredReusableCell<Cell, Item>(using: UICollectionView.CellRegistration<Cell, Item>, for: IndexPath, item: Item?) -> Cell\nDequeues a configured reusable cell object.\nfunc register(AnyClass?, forCellWithReuseIdentifier: String)\nRegisters a class for use in creating new collection view cells.\nfunc dequeueReusableCell(withReuseIdentifier: String, for: IndexPath) -> UICollectionViewCell\nDequeues a reusable cell object located by its identifier."
  },
  {
    "title": "UITableViewCell.CellStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/cellstyle",
    "html": "Overview\n\nIn all these cell styles, the larger of the text labels is accessed using the textLabel property and the smaller using the detailTextLabel property.\n\nTopics\nCell styles\ncase `default`\nA simple style for a cell with a text label (black and left-aligned) and an optional image view.\ncase value1\nA style for a cell with a label on the left side of the cell with left-aligned and black text; on the right side is a label that has smaller blue text and is right-aligned.\ncase value2\nA style for a cell with a label on the left side of the cell with text that’s right-aligned and blue; on the right side of the cell is another label with smaller text that’s left-aligned and black.\ncase subtitle\nA style for a cell with a left-aligned label across the top and a left-aligned label below it in smaller gray text.\nRelationships\nConforms To\nSendable\nSee Also\nCreating a table view cell\ninit(style: UITableViewCell.CellStyle, reuseIdentifier: String?)\nInitializes a table cell with a style and a reuse identifier and returns it to the caller.\ninit?(coder: NSCoder)\nCreates a table view from data in an unarchiver."
  },
  {
    "title": "register(_:forCellWithReuseIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618089-register",
    "html": "Parameters\ncellClass\n\nThe class of a cell that you want to use in the collection view.\n\nidentifier\n\nThe reuse identifier to associate with the specified class. This parameter must not be nil and must not be an empty string.\n\nDiscussion\n\nPrior to calling the dequeueReusableCell(withReuseIdentifier:for:) method of the collection view, you must use this method or the register(_:forCellWithReuseIdentifier:) method to tell the collection view how to create a new cell of the given type. If a cell of the specified type is not currently in a reuse queue, the collection view uses the provided information to create a new cell object automatically.\n\nIf you previously registered a class or nib file with the same reuse identifier, the class you specify in the cellClass parameter replaces the old entry. You may specify nil for cellClass if you want to unregister the class from the specified reuse identifier.\n\nSee Also\nCreating cells\nstruct UICollectionView.CellRegistration\nA registration for the collection view’s cells.\nfunc dequeueConfiguredReusableCell<Cell, Item>(using: UICollectionView.CellRegistration<Cell, Item>, for: IndexPath, item: Item?) -> Cell\nDequeues a configured reusable cell object.\nfunc register(UINib?, forCellWithReuseIdentifier: String)\nRegisters a nib file for use in creating new collection view cells.\nfunc dequeueReusableCell(withReuseIdentifier: String, for: IndexPath) -> UICollectionViewCell\nDequeues a reusable cell object located by its identifier."
  },
  {
    "title": "backgroundConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/3601055-backgroundconfiguration",
    "html": "Discussion\n\nUITableViewCell automatically sets up a default background configuration to provide its default appearance.\n\nUsing a background configuration, you can obtain system default background styling for a variety of different cell states. Create a background configuration with one of the default system styles, customize the configuration to match your cell’s style as necessary, and assign the configuration to this property.\n\nvar backgroundConfig = UIBackgroundConfiguration.listPlainCell()\n\n\n// Set a nil background color to use the view's tint color. \nbackgroundConfig.backgroundColor = nil \n\n\ncell.backgroundConfiguration = backgroundConfig \n\n\nA background configuration is mutually exclusive with background views, so you must use one approach or the other. Setting a non-nil value for this property resets the following APIs to nil:\n\nbackgroundColor\n\nbackgroundView\n\nselectedBackgroundView\n\nmultipleSelectionBackgroundView\n\nSee Also\nConfiguring the background\nfunc defaultBackgroundConfiguration() -> UIBackgroundConfiguration\nRetrieves a background configuration with system default values.\nvar automaticallyUpdatesBackgroundConfiguration: Bool\nA Boolean value that determines whether the cell automatically updates its background configuration when its state changes.\nvar backgroundView: UIView?\nThe view to use as the background of the cell.\nvar selectedBackgroundView: UIView?\nThe view to use as the background for a selected cell.\nvar multipleSelectionBackgroundView: UIView?\nThe background view to use for a selected cell when the table view allows multiple row selections."
  },
  {
    "title": "black | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/1621929-black",
    "html": "See Also\nFixed colors\nclass var blue: UIColor\nA color object with RGB values of 0.0, 0.0, and 1.0, and an alpha value of 1.0.\nclass var brown: UIColor\nA color object with RGB values of 0.6, 0.4, and 0.2, and an alpha value of 1.0.\nclass var cyan: UIColor\nA color object with RGB values of 0.0, 1.0, and 1.0, and an alpha value of 1.0.\nclass var darkGray: UIColor\nA color object with a grayscale value of 1/3 and an alpha value of 1.0.\nclass var gray: UIColor\nA color object with a grayscale value of 0.5 and an alpha value of 1.0.\nclass var green: UIColor\nA color object with RGB values of 0.0, 1.0, and 0.0, and an alpha value of 1.0.\nclass var lightGray: UIColor\nA color object with a grayscale value of 2/3 and an alpha value of 1.0.\nclass var magenta: UIColor\nA color object with RGB values of 1.0, 0.0, and 1.0, and an alpha value of 1.0.\nclass var orange: UIColor\nA color object with RGB values of 1.0, 0.5, and 0.0, and an alpha value of 1.0.\nclass var purple: UIColor\nA color object with RGB values of 0.5, 0.0, and 0.5, and an alpha value of 1.0.\nclass var red: UIColor\nA color object with RGB values of 1.0, 0.0, and 0.0, and an alpha value of 1.0.\nclass var white: UIColor\nA color object with a grayscale value of 1.0 and an alpha value of 1.0.\nclass var yellow: UIColor\nA color object with RGB values of 1.0, 1.0, and 0.0, and an alpha value of 1.0."
  },
  {
    "title": "reuseIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623246-reuseidentifier",
    "html": "Discussion\n\nThe reuse identifier is associated with a UITableViewCell object that the table-view’s delegate creates with the intent to reuse it as the basis (for performance reasons) for multiple rows of a table view. It is assigned to the cell object in init(frame:reuseIdentifier:) and cannot be changed thereafter. A UITableView object maintains a queue (or list) of the currently reusable cells, each with its own reuse identifier, and makes them available to the delegate in the dequeueReusableCell(withIdentifier:) method.\n\nSee Also\nReusing cells\nfunc prepareForReuse()\nPrepares a reusable cell for reuse by the table view’s delegate."
  },
  {
    "title": "automaticallyUpdatesBackgroundConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/3600584-automaticallyupdatesbackgroundco",
    "html": "Discussion\n\nWhen this value is true, the cell automatically calls updated(for:) on its backgroundConfiguration when the cell’s configurationState changes, and applies the updated configuration back to the cell. The default value is true.\n\nIf you override updateConfiguration(using:) to manually update and customize the background configuration, disable automatic updates by setting this property to false.\n\nSee Also\nConfiguring the background\nfunc defaultBackgroundConfiguration() -> UIBackgroundConfiguration\nRetrieves a background configuration with system default values.\nvar backgroundConfiguration: UIBackgroundConfiguration?\nThe current background configuration of the cell.\nvar backgroundView: UIView?\nThe view to use as the background of the cell.\nvar selectedBackgroundView: UIView?\nThe view to use as the background for a selected cell.\nvar multipleSelectionBackgroundView: UIView?\nThe background view to use for a selected cell when the table view allows multiple row selections."
  },
  {
    "title": "defaultBackgroundConfiguration() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/4013362-defaultbackgroundconfiguration",
    "html": "Return Value\n\nA default background configuration. The system determines default values for the configuration according to the section where the cell appears.\n\nSee Also\nConfiguring the background\nvar backgroundConfiguration: UIBackgroundConfiguration?\nThe current background configuration of the cell.\nvar automaticallyUpdatesBackgroundConfiguration: Bool\nA Boolean value that determines whether the cell automatically updates its background configuration when its state changes.\nvar backgroundView: UIView?\nThe view to use as the background of the cell.\nvar selectedBackgroundView: UIView?\nThe view to use as the background for a selected cell.\nvar multipleSelectionBackgroundView: UIView?\nThe background view to use for a selected cell when the table view allows multiple row selections."
  },
  {
    "title": "selectedBackgroundView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623226-selectedbackgroundview",
    "html": "Discussion\n\nUITableViewCell adds the value of this property as a subview only when the cell has a selected state. It adds the selected background view as a subview directly above the background view (backgroundView) if it isn’t nil, or behind all other views. Calling setSelected(_:animated:) causes the selected background view to animate in and out with an alpha fade.\n\nA background configuration is mutually exclusive with background views, so you must use one approach or the other. Setting a non-nil value for this property resets backgroundConfiguration to nil.\n\nSee Also\nConfiguring the background\nfunc defaultBackgroundConfiguration() -> UIBackgroundConfiguration\nRetrieves a background configuration with system default values.\nvar backgroundConfiguration: UIBackgroundConfiguration?\nThe current background configuration of the cell.\nvar automaticallyUpdatesBackgroundConfiguration: Bool\nA Boolean value that determines whether the cell automatically updates its background configuration when its state changes.\nvar backgroundView: UIView?\nThe view to use as the background of the cell.\nvar multipleSelectionBackgroundView: UIView?\nThe background view to use for a selected cell when the table view allows multiple row selections."
  },
  {
    "title": "dequeueReusableCell(withReuseIdentifier:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618063-dequeuereusablecell",
    "html": "Parameters\nidentifier\n\nThe reuse identifier for the specified cell. This parameter must not be nil.\n\nindexPath\n\nThe index path specifying the location of the cell. The data source receives this information when it is asked for the cell and should just pass it along. This method uses the index path to perform additional configuration based on the cell’s position in the collection view.\n\nReturn Value\n\nA valid UICollectionReusableView object.\n\nDiscussion\n\nCall this method from your data source object when asked to provide a new cell for the collection view. This method dequeues an existing cell if one is available or creates a new one based on the class or nib file you previously registered.\n\nImportant\n\nYou must register a class or nib file using the register(_:forCellWithReuseIdentifier:) or register(_:forCellWithReuseIdentifier:) method before calling this method.\n\nIf you registered a class for the specified identifier and a new cell must be created, this method initializes the cell by calling its init(frame:) method. For nib-based cells, this method loads the cell object from the provided nib file. If an existing cell was available for reuse, this method calls the cell’s prepareForReuse() method instead.\n\nSee Also\nCreating cells\nstruct UICollectionView.CellRegistration\nA registration for the collection view’s cells.\nfunc dequeueConfiguredReusableCell<Cell, Item>(using: UICollectionView.CellRegistration<Cell, Item>, for: IndexPath, item: Item?) -> Cell\nDequeues a configured reusable cell object.\nfunc register(AnyClass?, forCellWithReuseIdentifier: String)\nRegisters a class for use in creating new collection view cells.\nfunc register(UINib?, forCellWithReuseIdentifier: String)\nRegisters a nib file for use in creating new collection view cells."
  },
  {
    "title": "collectionViewLayout | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionview/1618047-collectionviewlayout",
    "html": "Discussion\n\nAssigning a new layout object to this property causes the new layout to be applied (without animations) to the collection view’s items.\n\nFor more information, see Layouts.\n\nSee Also\nChanging the layout\nfunc setCollectionViewLayout(UICollectionViewLayout, animated: Bool)\nChanges the collection view’s layout and optionally animates the change.\nfunc setCollectionViewLayout(UICollectionViewLayout, animated: Bool, completion: ((Bool) -> Void)?)\nChanges the collection view’s layout and notifies you when the animations complete.\nfunc startInteractiveTransition(to: UICollectionViewLayout, completion: UICollectionView.LayoutInteractiveTransitionCompletion?) -> UICollectionViewTransitionLayout\nChanges the collection view’s current layout using an interactive transition effect.\nfunc finishInteractiveTransition()\nTells the collection view to finish an interactive transition by installing the intended target layout.\nfunc cancelInteractiveTransition()\nTells the collection view to cancel an interactive transition and return to its original layout object.\ntypealias UICollectionView.LayoutInteractiveTransitionCompletion\nThe completion block called at the end of an interactive transition for a collection view."
  },
  {
    "title": "printerPickerControllerDidDismiss(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprinterpickercontrollerdelegate/1620510-printerpickercontrollerdiddismis",
    "html": "Parameters\nprinterPickerController\n\nThe printer picker controller object that was dismissed.\n\nDiscussion\n\nUse this method to perform any tasks associated with displaying the printer picker controller.\n\nThis method is called when the user dismisses the picker, either by selecting a printer or by canceling the picker interface. This method is not called when you dismiss the picker programmatically using the dismiss(animated:) method.\n\nSee Also\nResponding to Printer Picker Events\nfunc printerPickerControllerParentViewController(UIPrinterPickerController) -> UIViewController?\nAsks the delegate to provide the view controller to act as the parent of the printer picker.\nfunc printerPickerControllerWillPresent(UIPrinterPickerController)\nTells the delegate that the printer picker is about to be displayed.\nfunc printerPickerControllerDidPresent(UIPrinterPickerController)\nTells the delegate that the printer picker was displayed and is now visible.\nfunc printerPickerControllerWillDismiss(UIPrinterPickerController)\nTells the delegate that the printer picker is about to be dismissed."
  },
  {
    "title": "yellow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/1621953-yellow",
    "html": "See Also\nFixed colors\nclass var black: UIColor\nA color object in the sRGB color space with a grayscale value of 0.0 and an alpha value of 1.0.\nclass var blue: UIColor\nA color object with RGB values of 0.0, 0.0, and 1.0, and an alpha value of 1.0.\nclass var brown: UIColor\nA color object with RGB values of 0.6, 0.4, and 0.2, and an alpha value of 1.0.\nclass var cyan: UIColor\nA color object with RGB values of 0.0, 1.0, and 1.0, and an alpha value of 1.0.\nclass var darkGray: UIColor\nA color object with a grayscale value of 1/3 and an alpha value of 1.0.\nclass var gray: UIColor\nA color object with a grayscale value of 0.5 and an alpha value of 1.0.\nclass var green: UIColor\nA color object with RGB values of 0.0, 1.0, and 0.0, and an alpha value of 1.0.\nclass var lightGray: UIColor\nA color object with a grayscale value of 2/3 and an alpha value of 1.0.\nclass var magenta: UIColor\nA color object with RGB values of 1.0, 0.0, and 1.0, and an alpha value of 1.0.\nclass var orange: UIColor\nA color object with RGB values of 1.0, 0.5, and 0.0, and an alpha value of 1.0.\nclass var purple: UIColor\nA color object with RGB values of 0.5, 0.0, and 0.5, and an alpha value of 1.0.\nclass var red: UIColor\nA color object with RGB values of 1.0, 0.0, and 0.0, and an alpha value of 1.0.\nclass var white: UIColor\nA color object with a grayscale value of 1.0 and an alpha value of 1.0."
  },
  {
    "title": "didMove(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiindirectscribbleinteraction/3603391-didmove",
    "html": "Parameters\nview\n\nThe destination view.\n\nRelationships\nFrom Protocol\nUIInteraction\nSee Also\nResponding to UI changes\nfunc willMove(to: UIView?)\nTells the delegate when an interaction is about to move to a new view."
  },
  {
    "title": "view | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiindirectscribbleinteraction/3603396-view",
    "html": "Relationships\nFrom Protocol\nUIInteraction\nSee Also\nManaging indirect Scribble interactions\nvar delegate: Delegate?\nThe delegate for the interaction, to supply and customize writable elements in the interaction’s view."
  },
  {
    "title": "orange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/1621956-orange",
    "html": "See Also\nFixed colors\nclass var black: UIColor\nA color object in the sRGB color space with a grayscale value of 0.0 and an alpha value of 1.0.\nclass var blue: UIColor\nA color object with RGB values of 0.0, 0.0, and 1.0, and an alpha value of 1.0.\nclass var brown: UIColor\nA color object with RGB values of 0.6, 0.4, and 0.2, and an alpha value of 1.0.\nclass var cyan: UIColor\nA color object with RGB values of 0.0, 1.0, and 1.0, and an alpha value of 1.0.\nclass var darkGray: UIColor\nA color object with a grayscale value of 1/3 and an alpha value of 1.0.\nclass var gray: UIColor\nA color object with a grayscale value of 0.5 and an alpha value of 1.0.\nclass var green: UIColor\nA color object with RGB values of 0.0, 1.0, and 0.0, and an alpha value of 1.0.\nclass var lightGray: UIColor\nA color object with a grayscale value of 2/3 and an alpha value of 1.0.\nclass var magenta: UIColor\nA color object with RGB values of 1.0, 0.0, and 1.0, and an alpha value of 1.0.\nclass var purple: UIColor\nA color object with RGB values of 0.5, 0.0, and 0.5, and an alpha value of 1.0.\nclass var red: UIColor\nA color object with RGB values of 1.0, 0.0, and 0.0, and an alpha value of 1.0.\nclass var white: UIColor\nA color object with a grayscale value of 1.0 and an alpha value of 1.0.\nclass var yellow: UIColor\nA color object with RGB values of 1.0, 1.0, and 0.0, and an alpha value of 1.0."
  },
  {
    "title": "scribbleInteractionShouldDelayFocus(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscribbleinteractiondelegate/3566754-scribbleinteractionshoulddelayfo",
    "html": "Parameters\ninteraction\n\nThe text input view asking about delaying focus.\n\nReturn Value\n\nReturn true to delay focusing the text input, false otherwise.\n\nDiscussion\n\nNormally, Scribble focuses the target input as soon as the user starts writing. If you return true from this callback, Scribble waits until the user pauses briefly while writing. This is useful in cases where the view shifts or transforms when becoming first responder, which can be disruptive to a user trying to write in the field.\n\nIt’s preferable to adjust the UI behavior and minimize these kinds transformations to avoid the layout changes. Only use this method as a last resort, since transcription happens all at once instead of incrementally.\n\nSee Also\nAllowing and controlling Scribble interactions\nfunc scribbleInteraction(UIScribbleInteraction, shouldBeginAt: CGPoint) -> Bool\nReturns a Boolean value that indicates whether the delegate should allow writing at a specific location in the view."
  },
  {
    "title": "updateConfiguration(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/3601059-updateconfiguration",
    "html": "Discussion\n\nAvoid calling this method directly. Instead, use setNeedsUpdateConfiguration() to request an update.\n\nOverride this method in a subclass to update the cell’s configuration using the provided state.\n\nSee Also\nManaging the state\nvar configurationState: UICellConfigurationState\nThe current configuration state of the cell.\nfunc setNeedsUpdateConfiguration()\nInforms the cell to update its configuration for its current state.\nvar configurationUpdateHandler: UITableViewCell.ConfigurationUpdateHandler?\nA block for handling updates to the cell’s configuration using the current state.\ntypealias UITableViewCell.ConfigurationUpdateHandler\nThe type of block for handling updates to the cell’s configuration using the current state."
  },
  {
    "title": "scribbleInteractionWillBeginWriting(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscribbleinteractiondelegate/3566755-scribbleinteractionwillbeginwrit",
    "html": "Parameters\ninteraction\n\nThe interaction where the user started writing.\n\nDiscussion\n\nUse this method to hide custom placeholders or other UI elements that can interfere with writing.\n\nSee Also\nTracking Scribble input\nfunc scribbleInteractionDidFinishWriting(UIScribbleInteraction)\nInforms the delegate that the user stops writing in the view, after Scribble transcribes and enters the last word."
  },
  {
    "title": "scribbleInteraction(_:shouldBeginAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscribbleinteractiondelegate/3566752-scribbleinteraction",
    "html": "Parameters\ninteraction\n\nThe text view asking if it can start receiving user input.\n\nlocation\n\nThe location of the text view as a CGPoint in the view’s coordinate system.\n\nReturn Value\n\nReturn false to disallow writing at the specified location; otherwise return true.\n\nDiscussion\n\nUse this callback to temporarily suppress Scribble in text input views if your app supports drawing over text or special interaction when using Apple Pencil. In cases like this, consider providing a UI for the user to toggle between drawing and handwriting.\n\nThis callback can also return false for views that handle Apple Pencil events directly, like a drawing canvas, since nearby text fields could take over the events for writing.\n\nSee Also\nAllowing and controlling Scribble interactions\nfunc scribbleInteractionShouldDelayFocus(UIScribbleInteraction) -> Bool\nTells the delegate to delay focusing the text input view."
  },
  {
    "title": "UITableViewCell.AccessoryType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/accessorytype",
    "html": "Overview\n\nUse these constants to set the value of the accessoryType property.\n\nSeveral accessory views support additional interactions. For example, a detail button conveys that there is additional information for the user to see. For information about how to respond to interactions with a specific accessory view, see the discussion for that type.\n\nTopics\nAccessory views\ncase none\nNo accessory view.\ncase disclosureIndicator\nA chevron-shaped control for presenting new content.\ncase detailDisclosureButton\nAn information button and a disclosure (chevron) control.\ncase checkmark\nA checkmark image.\ncase detailButton\nAn information button.\nRelationships\nConforms To\nSendable\nSee Also\nManaging accessory views\nvar accessoryType: UITableViewCell.AccessoryType\nThe type of standard accessory view for the cell to use in the table view’s normal state.\nvar accessoryView: UIView?\nThe view to use on the right side of the cell, typically as a control, in the table view’s normal state.\nvar editingAccessoryType: UITableViewCell.AccessoryType\nThe type of standard accessory view for the cell to use in the table view’s editing state.\nvar editingAccessoryView: UIView?\nThe view to use on the right side of the cell, typically as a control, in the table view’s editing state."
  },
  {
    "title": "editingAccessoryType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623266-editingaccessorytype",
    "html": "Discussion\n\nThe accessory view appears in the right side of the cell when the table view is in editing mode. The standard accessory views include the disclosure chevron; for a description of valid constants, see UITableViewCell.AccessoryType. The default is UITableViewCell.AccessoryType.none. If a custom accessory view for editing mode is set through the editingAccessoryView property, the value of this property is ignored. If the cell is enabled and the accessory type is UITableViewCell.AccessoryType.detailDisclosureButton, the accessory view tracks touches and, when tapped, sends the delegate object a tableView(_:accessoryButtonTappedForRowWith:) message.\n\nThe accessory type cross-fades between normal and editing states if it set for both states; use the accessoryType property to set the accessory view for the cell during the table view’s normal state. If this property is not set for both states, the cell is animated to slide or out, as necessary.\n\nSee Also\nManaging accessory views\nvar accessoryType: UITableViewCell.AccessoryType\nThe type of standard accessory view for the cell to use in the table view’s normal state.\nvar accessoryView: UIView?\nThe view to use on the right side of the cell, typically as a control, in the table view’s normal state.\nvar editingAccessoryView: UIView?\nThe view to use on the right side of the cell, typically as a control, in the table view’s editing state.\nenum UITableViewCell.AccessoryType\nThe type of standard accessory control used by a cell.\nRelated Documentation\nfunc willTransition(to: UITableViewCell.StateMask)\nNotifies the cell that it’s about to transition to a new cell state.\nfunc didTransition(to: UITableViewCell.StateMask)\nNotifies the cell that it transitioned to a new cell state."
  },
  {
    "title": "UITableViewCell.SelectionStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/selectionstyle",
    "html": "Overview\n\nYou use these constants to set the value of the selectionStyle property.\n\nTopics\nConstants\ncase none\nThe cell has no distinct style for when it’s selected.\ncase blue\nThe cell has a default background color when it’s selected.\ncase gray\nThe cell has a gray background when it’s selected.\ncase `default`\nThe cell selection style to use for tables.\nRelationships\nConforms To\nSendable\nSee Also\nManaging cell selection and highlighting\nvar selectionStyle: UITableViewCell.SelectionStyle\nThe style of selection for a cell.\nvar isSelected: Bool\nA Boolean value that indicates whether the cell is selected.\nfunc setSelected(Bool, animated: Bool)\nSets the selected state of the cell, optionally animating the transition between states.\nvar isHighlighted: Bool\nA Boolean value that indicates whether the cell is highlighted.\nfunc setHighlighted(Bool, animated: Bool)\nSets the highlighted state of the cell, optionally animating the transition between states."
  },
  {
    "title": "UITableViewCell.EditingStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/editingstyle",
    "html": "Overview\n\nUse these constants with the editingStyle property.\n\nTopics\nConstants\ncase none\nThe cell has no editing control.\ncase delete\nThe cell has the delete editing control; this control is a red circle enclosing a minus sign.\ncase insert\nThe cell has the insert editing control; this control is a green circle enclosing a plus sign.\nRelationships\nConforms To\nSendable\nSee Also\nEditing the cell\nvar isEditing: Bool\nA Boolean value that indicates whether the cell is in an editable state.\nfunc setEditing(Bool, animated: Bool)\nToggles the cell into and out of editing mode.\nvar editingStyle: UITableViewCell.EditingStyle\nThe editing style of the cell.\nvar showingDeleteConfirmation: Bool\nA Boolean value that indicates whether the cell is currently showing the delete-confirmation button.\nvar showsReorderControl: Bool\nA Boolean value that determines whether the cell shows the reordering control."
  },
  {
    "title": "editingStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623234-editingstyle",
    "html": "Discussion\n\nOne of the constants described in UITableViewCell.EditingStyle is used as the value of this property; it specifies whether the cell is in an editable state and, if it is, whether it shows an insertion or deletion control. The default value is UITableViewCell.EditingStyle.none (not editable). The delegate returns the value of this property for a particular cell in its implementation of the tableView(_:editingStyleForRowAt:) method.\n\nSee Also\nEditing the cell\nvar isEditing: Bool\nA Boolean value that indicates whether the cell is in an editable state.\nfunc setEditing(Bool, animated: Bool)\nToggles the cell into and out of editing mode.\nenum UITableViewCell.EditingStyle\nThe editing control used by a cell.\nvar showingDeleteConfirmation: Bool\nA Boolean value that indicates whether the cell is currently showing the delete-confirmation button.\nvar showsReorderControl: Bool\nA Boolean value that determines whether the cell shows the reordering control."
  },
  {
    "title": "showingDeleteConfirmation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623211-showingdeleteconfirmation",
    "html": "Discussion\n\nWhen users tap the deletion control (the red circle to the left of the cell), the cell displays a “Delete” button on the right side of the cell; this string is localized.\n\nSee Also\nEditing the cell\nvar isEditing: Bool\nA Boolean value that indicates whether the cell is in an editable state.\nfunc setEditing(Bool, animated: Bool)\nToggles the cell into and out of editing mode.\nvar editingStyle: UITableViewCell.EditingStyle\nThe editing style of the cell.\nenum UITableViewCell.EditingStyle\nThe editing control used by a cell.\nvar showsReorderControl: Bool\nA Boolean value that determines whether the cell shows the reordering control."
  },
  {
    "title": "systemGray2 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3255071-systemgray2",
    "html": "Discussion\n\nThis color adapts to the current environment. In light environments, this gray is slightly lighter than systemGray. In dark environments, this gray is slightly darker than systemGray.\n\nSee Also\nAdaptable gray colors\nclass var systemGray: UIColor\nThe standard base gray color that adapts to the environment.\nclass var systemGray3: UIColor\nA third-level shade of gray that adapts to the environment.\nclass var systemGray4: UIColor\nA fourth-level shade of gray that adapts to the environment.\nclass var systemGray5: UIColor\nA fifth-level shade of gray that adapts to the environment.\nclass var systemGray6: UIColor\nA sixth-level shade of gray that adapts to the environment."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaction/identifier/3335172-init",
    "html": "Parameters\nrawValue\n\nA string that uniquely identifies the action."
  },
  {
    "title": "UIPress.PressType.playPause | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipress/presstype/playpause",
    "html": "See Also\nActions\ncase select\nA constant that represents the select button.\ncase menu\nA constant that represents the menu button."
  },
  {
    "title": "UIPrintError.Code.noContent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprinterror/code/nocontent",
    "html": "See Also\nError codes\ncase notAvailable\nThe device doesn’t support printing.\ncase unknownImageFormat\nAn image is in a format that UIKit doesn’t recognize for printing.\ncase jobFailed\nAn internal error occurred with the print job."
  },
  {
    "title": "detailTextLabel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623273-detailtextlabel",
    "html": "Deprecated\n\nUse a content configuration to manage the cell’s text instead. Use defaultContentConfiguration() to get a default list content configuration, set your secondary text to the secondaryText property of the configuration, and apply the configuration by setting it to the contentConfiguration property of the cell.\n\nDiscussion\n\nHolds the secondary (or detail) label of the cell. UITableViewCell adds an appropriate label when you create the cell in a style that supports secondary labels. If the style doesn’t support detail labels, nil returns. See UITableViewCell.CellStyle for descriptions of the main label in currently defined cell styles.\n\nThis property is mutually exclusive with a content configuration. Setting a non-nil value for contentConfiguration resets this property to nil.\n\nSee Also\nDeprecated\nvar textLabel: UILabel?\nThe label to use for the main textual content of the table cell.\nDeprecated\nvar imageView: UIImageView?\nThe image view of the table cell.\nDeprecated\nRelated Documentation\ninit(style: UITableViewCell.CellStyle, reuseIdentifier: String?)\nInitializes a table cell with a style and a reuse identifier and returns it to the caller."
  },
  {
    "title": "init(mass:stiffness:damping:initialVelocity:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uispringtimingparameters/1649764-init",
    "html": "Parameters\nmass\n\nThe effective mass of the animated property. This value must be greater than 0.\n\nstiffness\n\nThe spring stiffness coefficient. Higher values correspond to a stiffer spring that yields a greater amount of force for moving objects.\n\ndamping\n\nThe damping force to apply to the spring’s motion. This value is used to compute the damping ratio.\n\nvelocity\n\nThe target property’s initial rate of change at the start of the spring animation. If the target property doesn’t change, specify a vector with dx and dy components of 0.\n\nFor details about how to calculate this velocity, see initialVelocity.\n\nReturn Value\n\nAn initialized spring timing parameters object or nil if the object could not be created.\n\nDiscussion\n\nThe damping ratio for the spring is computed from the formula damping / (2 * sqrt (stiffness * mass)).\n\nSee Also\nInitializing a spring timing parameters object\ninit()\nCreates a default timing parameters object.\ninit(dampingRatio: CGFloat)\nCreates a timing parameters object with the specified damping ratio.\ninit(dampingRatio: CGFloat, initialVelocity: CGVector)\nCreates a timing parameters object with the specified damping ratio and initial velocity.\ninit?(coder: NSCoder)\nCreates a timing parameters object from data in an unarchiver."
  },
  {
    "title": "UITableViewCell.FocusStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/focusstyle",
    "html": "Overview\n\nYou use these constants to set the value of the focusStyle property.\n\nTopics\nConstants\ncase `default`\nThe cell alters its appearance in a standard, system-defined way when it becomes focused.\ncase custom\nThe cell doesn’t alter its appearance automatically when it becomes focused.\nRelationships\nConforms To\nSendable\nSee Also\nManaging focus\nvar focusStyle: UITableViewCell.FocusStyle\nThe appearance of the cell when focused."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uispringtimingparameters/1649919-init",
    "html": "See Also\nInitializing a spring timing parameters object\ninit()\nCreates a default timing parameters object.\ninit(dampingRatio: CGFloat)\nCreates a timing parameters object with the specified damping ratio.\ninit(dampingRatio: CGFloat, initialVelocity: CGVector)\nCreates a timing parameters object with the specified damping ratio and initial velocity.\ninit(mass: CGFloat, stiffness: CGFloat, damping: CGFloat, initialVelocity: CGVector)\nCreates a timing parameters object with the specified spring stiffness, mass, damping coefficient, and initial velocity."
  },
  {
    "title": "UIPrintError.Code.notAvailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprinterror/code/notavailable",
    "html": "See Also\nError codes\ncase noContent\nUIKit hasn’t assigned a print formatter, page renderer, or printing item to print.\ncase unknownImageFormat\nAn image is in a format that UIKit doesn’t recognize for printing.\ncase jobFailed\nAn internal error occurred with the print job."
  },
  {
    "title": "UIPrintError.Code.unknownImageFormat | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprinterror/code/unknownimageformat",
    "html": "See Also\nError codes\ncase notAvailable\nThe device doesn’t support printing.\ncase noContent\nUIKit hasn’t assigned a print formatter, page renderer, or printing item to print.\ncase jobFailed\nAn internal error occurred with the print job."
  },
  {
    "title": "initialVelocity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uispringtimingparameters/1649909-initialvelocity",
    "html": "Discussion\n\nTo create a smooth transition from an object in motion into a spring animation, initialize the spring timing parameters with an initial velocity. One common use of this property is to animate a view to a final resting position at the end of a pan gesture.\n\nFor view position animations, both components of the initial velocity vector are considered. Each component specifies the initial rate of change along the respective x and y axes, normalized to the total distance of the animation. To calculate an initial velocity vector:\n\nStart with a velocity of the view in points per second. For example, when moving a view using a UIPanGestureRecognizer, you can use velocity(in:) for this starting value.\n\nCalculate the x and y distance, in points, from the view’s current position to the final position.\n\nSet the dx component of the initial velocity vector to the x velocity divided by the x distance. If the x distance is 0, set dx to 0.\n\nSet the dy component to the y velocity divided by the y distance. If the y distance is 0, set dy to 0.\n\nThe following example shows a function that performs this calculation using a velocity from the pan gesture recognizer and the view’s current and final positions.\n\nfunc initialAnimationVelocity(for gestureVelocity: CGPoint, from currentPosition: CGPoint, to finalPosition: CGPoint) -> CGVector {\n    var animationVelocity = CGVector.zero\n    let xDistance = finalPosition.x - currentPosition.x\n    let yDistance = finalPosition.y - currentPosition.y\n    if xDistance != 0 {\n        animationVelocity.dx = gestureVelocity.x / xDistance\n    }\n    if yDistance != 0 {\n        animationVelocity.dy = gestureVelocity.y / yDistance\n    }\n    return animationVelocity\n}\n\n\nThe following example shows how a view controller can create a property animator with spring timing parameters. The view controller passes the result of initialAnimationVelocity to the spring timing parameters’ initializer. In this example, draggedView is an outlet of the view controller. The value of destination is the final resting position of draggedView.\n\nlet panRecognizer: UIPanGestureRecognizer = ... // pan recognizer attached to draggedView\nlet velocity = panRecognizer.velocity(in: view)\nlet initialVelocity = initialAnimationVelocity(for: velocity, from: draggedView.center, to: destination)\n\n\nlet parameters = UISpringTimingParameters(dampingRatio: dampingRatio, initialVelocity: initialVelocity)\nlet animator = UIViewPropertyAnimator(duration: animationDuration, timingParameters: parameters)\n\n\nanimator.addAnimations {\n    self.draggedView.center = destination\n}\n\n\nFor other types of animations where the property value has a single dimension, such as a view’s alpha, only the dx component is considered."
  },
  {
    "title": "UIPrintError.Code.jobFailed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprinterror/code/jobfailed",
    "html": "See Also\nError codes\ncase notAvailable\nThe device doesn’t support printing.\ncase noContent\nUIKit hasn’t assigned a print formatter, page renderer, or printing item to print.\ncase unknownImageFormat\nAn image is in a format that UIKit doesn’t recognize for printing."
  },
  {
    "title": "init(dampingRatio:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uispringtimingparameters/1649835-init",
    "html": "Parameters\nratio\n\nThe damping ratio for controlling the spring’s behavior. For more damping and less oscillation, specify a value of 1. For less damping and more oscillation, specify values closer to 0.\n\nReturn Value\n\nAn initialized spring timing parameters object or nil if the object could not be created.\n\nDiscussion\n\nThis method sets the initial velocity of any animated properties to 0.0.\n\nSee Also\nInitializing a spring timing parameters object\ninit()\nCreates a default timing parameters object.\ninit(dampingRatio: CGFloat, initialVelocity: CGVector)\nCreates a timing parameters object with the specified damping ratio and initial velocity.\ninit(mass: CGFloat, stiffness: CGFloat, damping: CGFloat, initialVelocity: CGVector)\nCreates a timing parameters object with the specified spring stiffness, mass, damping coefficient, and initial velocity.\ninit?(coder: NSCoder)\nCreates a timing parameters object from data in an unarchiver."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uispringtimingparameters/1649802-init",
    "html": "Return Value\n\nAn initialized spring timing parameters object or nil if the object could not be created.\n\nDiscussion\n\nThis method sets the initial velocity of any animated properties to 0.0 and sets the damping ratio to 4.56.\n\nSee Also\nInitializing a spring timing parameters object\ninit(dampingRatio: CGFloat)\nCreates a timing parameters object with the specified damping ratio.\ninit(dampingRatio: CGFloat, initialVelocity: CGVector)\nCreates a timing parameters object with the specified damping ratio and initial velocity.\ninit(mass: CGFloat, stiffness: CGFloat, damping: CGFloat, initialVelocity: CGVector)\nCreates a timing parameters object with the specified spring stiffness, mass, damping coefficient, and initial velocity.\ninit?(coder: NSCoder)\nCreates a timing parameters object from data in an unarchiver."
  },
  {
    "title": "separatorInset | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623250-separatorinset",
    "html": "Discussion\n\nUse this property to indent the left and right edges of the separator line drawn beneath the cell. Positive inset values move the separator inward and away from edges of the cell. Negative values are treated as if the inset is set to 0.\n\nThe table view uses only the left and right inset values; it ignores the top and bottom inset values. The value assigned to this property takes precedence over any default separator insets set on the table view.\n\nSee Also\nManaging content indentation\nvar indentationLevel: Int\nThe indentation level of the cell’s content.\nvar indentationWidth: CGFloat\nThe width for each level of indentation of a cell’s content.\nvar shouldIndentWhileEditing: Bool\nA Boolean value that controls whether the cell background is indented when the table view is in editing mode.\nenum UITableViewCell.SeparatorStyle\nThe style for cells to use as separators."
  },
  {
    "title": "systemGray6 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3255075-systemgray6",
    "html": "Discussion\n\nThis color adapts to the current environment, and is close in color to systemBackground. In light environments, this gray is slightly lighter than systemGray5. In dark environments, this gray is slightly darker than systemGray5.\n\nSee Also\nAdaptable gray colors\nclass var systemGray: UIColor\nThe standard base gray color that adapts to the environment.\nclass var systemGray2: UIColor\nA second-level shade of gray that adapts to the environment.\nclass var systemGray3: UIColor\nA third-level shade of gray that adapts to the environment.\nclass var systemGray4: UIColor\nA fourth-level shade of gray that adapts to the environment.\nclass var systemGray5: UIColor\nA fifth-level shade of gray that adapts to the environment."
  },
  {
    "title": "UIPress.PressType.leftArrow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipress/presstype/leftarrow",
    "html": "See Also\nNavigation\ncase upArrow\nA constant that represents the up arrow button.\ncase downArrow\nA constant that represents the down arrow button.\ncase rightArrow\nA constant that represents the right arrow button.\ncase pageDown\nA constant that represents the page down button.\ncase pageUp\nA constant that represents the page up button."
  },
  {
    "title": "indirectScribbleInteraction(_:shouldDelayFocusForElement:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiindirectscribbleinteractiondelegate/3603406-indirectscribbleinteraction",
    "html": "Required Default implementation provided.\n\nParameters\ninteraction\n\nThe interaction asking about delaying focus.\n\nelementIdentifier\n\nThe identifier of the element the interaction is asking about.\n\nReturn Value\n\nReturn true to delay focusing the element; the default is false.\n\nDefault Implementations\nUIIndirectScribbleInteractionDelegate Implementations\nfunc indirectScribbleInteraction(UIInteraction, shouldDelayFocusForElement: Self.ElementIdentifier) -> Bool\nSee Also\nManaging Focus\nfunc indirectScribbleInteraction(UIInteraction, isElementFocused: Self.ElementIdentifier) -> Bool\nAsks the delegate if an element is currently focused, according to the internal state of the interaction’s view.\n\nRequired\n\nfunc indirectScribbleInteraction(UIInteraction, focusElementIfNeeded: Self.ElementIdentifier, referencePoint: CGPoint, completion: ((UIResponder & UITextInput)?) -> Void)\nAsks the delegate to focus an element to handle text edits.\n\nRequired"
  },
  {
    "title": "systemYellow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3173152-systemyellow",
    "html": "See Also\nAdaptable colors\nclass var systemBlue: UIColor\nA blue color that automatically adapts to the current trait environment.\nclass var systemBrown: UIColor\nA brown color that automatically adapts to the current trait environment.\nclass var systemCyan: UIColor\nA cyan color that automatically adapts to the current trait environment.\nclass var systemGreen: UIColor\nA green color that automatically adapts to the current trait environment.\nclass var systemIndigo: UIColor\nAn indigo color that automatically adapts to the current trait environment.\nclass var systemMint: UIColor\nA mint color that automatically adapts to the current trait environment.\nclass var systemOrange: UIColor\nAn orange color that automatically adapts to the current trait environment.\nclass var systemPink: UIColor\nA pink color that automatically adapts to the current trait environment.\nclass var systemPurple: UIColor\nA purple color that automatically adapts to the current trait environment.\nclass var systemRed: UIColor\nA red color that automatically adapts to the current trait environment.\nclass var systemTeal: UIColor\nA teal color that automatically adapts to the current trait environment."
  },
  {
    "title": "printerPickerControllerWillDismiss(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprinterpickercontrollerdelegate/1620519-printerpickercontrollerwilldismi",
    "html": "Parameters\nprinterPickerController\n\nThe printer picker controller object being dismissed.\n\nDiscussion\n\nUse this method to perform any tasks associated with displaying the printer picker controller.\n\nThis method is called when the user dismisses the picker, either by selecting a printer or by canceling the picker interface. This method is not called when you dismiss the picker programmatically using the dismiss(animated:) method.\n\nSee Also\nResponding to Printer Picker Events\nfunc printerPickerControllerParentViewController(UIPrinterPickerController) -> UIViewController?\nAsks the delegate to provide the view controller to act as the parent of the printer picker.\nfunc printerPickerControllerWillPresent(UIPrinterPickerController)\nTells the delegate that the printer picker is about to be displayed.\nfunc printerPickerControllerDidPresent(UIPrinterPickerController)\nTells the delegate that the printer picker was displayed and is now visible.\nfunc printerPickerControllerDidDismiss(UIPrinterPickerController)\nTells the delegate that the printer picker was dismissed."
  },
  {
    "title": "printerPickerControllerDidSelectPrinter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprinterpickercontrollerdelegate/1620504-printerpickercontrollerdidselect",
    "html": "Parameters\nprinterPickerController\n\nThe printer picker controller that is providing your delegate with information.\n\nDiscussion\n\nImplement this method if you want your delegate to be notified of the selected printer. The selected printer can be either one that the user selected or the initially selected printer that you specified when creating your UIPrinterPickerController object."
  },
  {
    "title": "scribbleInteractionDidFinishWriting(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscribbleinteractiondelegate/3566753-scribbleinteractiondidfinishwrit",
    "html": "Parameters\ninteraction\n\nThe interaction where the user finished writing.\n\nDiscussion\n\nUse this to reset placeholders or other UI elements, if appropriate, to their state from before the user started writing.\n\nSee Also\nTracking Scribble input\nfunc scribbleInteractionWillBeginWriting(UIScribbleInteraction)\nInforms the delegate when the user begins writing in the view."
  },
  {
    "title": "init(delegate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscribbleinteraction/3566749-init",
    "html": "Parameters\ndelegate\n\nThe object that acts as the delegate of this UIScribbleInteraction instance."
  },
  {
    "title": "isHandlingWriting | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscribbleinteraction/3566748-ishandlingwriting",
    "html": "Discussion\n\nThis property is true in between calls to scribbleInteractionWillBeginWriting(_:) and scribbleInteractionDidFinishWriting(_:) when the user is writing."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicubictimingparameters/1649799-init",
    "html": "Return Value\n\nAn initialized timing parameter object or nil if the object could not be created.\n\nDiscussion\n\nUse this method to create a timing curve based on the default Core Animation timing function.\n\nSee Also\nInitializing a cubic timing parameters object\ninit(animationCurve: UIView.AnimationCurve)\nInitializes the object with the specified UIKit timing curve.\ninit(controlPoint1: CGPoint, controlPoint2: CGPoint)\nInitializes the object with the specified control points for a cubic Bézier curve.\ninit?(coder: NSCoder)\nCreates a timing parameters object from data in an unarchiver."
  },
  {
    "title": "init(name:bundle:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistoryboard/1616216-init",
    "html": "Parameters\nname\n\nThe name of the storyboard resource file without the filename extension. This method raises an exception if this parameter is nil.\n\nstoryboardBundleOrNil\n\nThe bundle containing the storyboard file and its related resources. If you specify nil, this method looks in the main bundle of the current application.\n\nReturn Value\n\nA storyboard object for the specified file. If no storyboard resource file matching name exists, an exception is thrown with description: Could not find a storyboard named 'XXXXXX' in bundle....\n\nDiscussion\n\nUse this method to retrieve the storyboard object containing the view controller graph you want to access. All of the resources associated with the storyboard must be in the bundle indicated by the storyboardBundleOrNil parameter.\n\nSee Also\nRelated Documentation\nView Controller Programming Guide for iOS"
  },
  {
    "title": "init(delegate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiindirectscribbleinteraction/3603395-init",
    "html": "Parameters\ndelegate\n\nThe object that acts as the delegate of this UIIndirectScribbleInteraction instance."
  },
  {
    "title": "instantiateInitialViewController() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistoryboard/1616213-instantiateinitialviewcontroller",
    "html": "Return Value\n\nThe initial view controller in the storyboard.\n\nDiscussion\n\nEvery storyboard file has an initial view controller that represents the default view controller to create. Typically, you use the initial view controller as the root view controller for a window. However, you can also instantiate the initial view controller when transitioning to content in a new storyboard file. This method creates a new instance of the initial view controller using its init(coder:) method.\n\nWhen you specify a storyboard in the UISceneStoryboardFile or UIMainStoryboardFile key of your app's Info.plist file, UIKit loads the initial view controller from that storyboard.\n\nSee Also\nLoading the Initial View Controller\nfunc instantiateInitialViewController<ViewController>(creator: ((NSCoder) -> ViewController?)?) -> ViewController?\nCreates the initial view controller from the storyboard and initializes it using your custom initialization code."
  },
  {
    "title": "magenta | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/1621934-magenta",
    "html": "See Also\nFixed colors\nclass var black: UIColor\nA color object in the sRGB color space with a grayscale value of 0.0 and an alpha value of 1.0.\nclass var blue: UIColor\nA color object with RGB values of 0.0, 0.0, and 1.0, and an alpha value of 1.0.\nclass var brown: UIColor\nA color object with RGB values of 0.6, 0.4, and 0.2, and an alpha value of 1.0.\nclass var cyan: UIColor\nA color object with RGB values of 0.0, 1.0, and 1.0, and an alpha value of 1.0.\nclass var darkGray: UIColor\nA color object with a grayscale value of 1/3 and an alpha value of 1.0.\nclass var gray: UIColor\nA color object with a grayscale value of 0.5 and an alpha value of 1.0.\nclass var green: UIColor\nA color object with RGB values of 0.0, 1.0, and 0.0, and an alpha value of 1.0.\nclass var lightGray: UIColor\nA color object with a grayscale value of 2/3 and an alpha value of 1.0.\nclass var orange: UIColor\nA color object with RGB values of 1.0, 0.5, and 0.0, and an alpha value of 1.0.\nclass var purple: UIColor\nA color object with RGB values of 0.5, 0.0, and 0.5, and an alpha value of 1.0.\nclass var red: UIColor\nA color object with RGB values of 1.0, 0.0, and 0.0, and an alpha value of 1.0.\nclass var white: UIColor\nA color object with a grayscale value of 1.0 and an alpha value of 1.0.\nclass var yellow: UIColor\nA color object with RGB values of 1.0, 1.0, and 0.0, and an alpha value of 1.0."
  },
  {
    "title": "red | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/1621924-red",
    "html": "See Also\nFixed colors\nclass var black: UIColor\nA color object in the sRGB color space with a grayscale value of 0.0 and an alpha value of 1.0.\nclass var blue: UIColor\nA color object with RGB values of 0.0, 0.0, and 1.0, and an alpha value of 1.0.\nclass var brown: UIColor\nA color object with RGB values of 0.6, 0.4, and 0.2, and an alpha value of 1.0.\nclass var cyan: UIColor\nA color object with RGB values of 0.0, 1.0, and 1.0, and an alpha value of 1.0.\nclass var darkGray: UIColor\nA color object with a grayscale value of 1/3 and an alpha value of 1.0.\nclass var gray: UIColor\nA color object with a grayscale value of 0.5 and an alpha value of 1.0.\nclass var green: UIColor\nA color object with RGB values of 0.0, 1.0, and 0.0, and an alpha value of 1.0.\nclass var lightGray: UIColor\nA color object with a grayscale value of 2/3 and an alpha value of 1.0.\nclass var magenta: UIColor\nA color object with RGB values of 1.0, 0.0, and 1.0, and an alpha value of 1.0.\nclass var orange: UIColor\nA color object with RGB values of 1.0, 0.5, and 0.0, and an alpha value of 1.0.\nclass var purple: UIColor\nA color object with RGB values of 0.5, 0.0, and 0.5, and an alpha value of 1.0.\nclass var white: UIColor\nA color object with a grayscale value of 1.0 and an alpha value of 1.0.\nclass var yellow: UIColor\nA color object with RGB values of 1.0, 1.0, and 0.0, and an alpha value of 1.0."
  },
  {
    "title": "white | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/1621920-white",
    "html": "See Also\nFixed colors\nclass var black: UIColor\nA color object in the sRGB color space with a grayscale value of 0.0 and an alpha value of 1.0.\nclass var blue: UIColor\nA color object with RGB values of 0.0, 0.0, and 1.0, and an alpha value of 1.0.\nclass var brown: UIColor\nA color object with RGB values of 0.6, 0.4, and 0.2, and an alpha value of 1.0.\nclass var cyan: UIColor\nA color object with RGB values of 0.0, 1.0, and 1.0, and an alpha value of 1.0.\nclass var darkGray: UIColor\nA color object with a grayscale value of 1/3 and an alpha value of 1.0.\nclass var gray: UIColor\nA color object with a grayscale value of 0.5 and an alpha value of 1.0.\nclass var green: UIColor\nA color object with RGB values of 0.0, 1.0, and 0.0, and an alpha value of 1.0.\nclass var lightGray: UIColor\nA color object with a grayscale value of 2/3 and an alpha value of 1.0.\nclass var magenta: UIColor\nA color object with RGB values of 1.0, 0.0, and 1.0, and an alpha value of 1.0.\nclass var orange: UIColor\nA color object with RGB values of 1.0, 0.5, and 0.0, and an alpha value of 1.0.\nclass var purple: UIColor\nA color object with RGB values of 0.5, 0.0, and 0.5, and an alpha value of 1.0.\nclass var red: UIColor\nA color object with RGB values of 1.0, 0.0, and 0.0, and an alpha value of 1.0.\nclass var yellow: UIColor\nA color object with RGB values of 1.0, 1.0, and 0.0, and an alpha value of 1.0."
  },
  {
    "title": "lightGray | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/1621932-lightgray",
    "html": "See Also\nFixed colors\nclass var black: UIColor\nA color object in the sRGB color space with a grayscale value of 0.0 and an alpha value of 1.0.\nclass var blue: UIColor\nA color object with RGB values of 0.0, 0.0, and 1.0, and an alpha value of 1.0.\nclass var brown: UIColor\nA color object with RGB values of 0.6, 0.4, and 0.2, and an alpha value of 1.0.\nclass var cyan: UIColor\nA color object with RGB values of 0.0, 1.0, and 1.0, and an alpha value of 1.0.\nclass var darkGray: UIColor\nA color object with a grayscale value of 1/3 and an alpha value of 1.0.\nclass var gray: UIColor\nA color object with a grayscale value of 0.5 and an alpha value of 1.0.\nclass var green: UIColor\nA color object with RGB values of 0.0, 1.0, and 0.0, and an alpha value of 1.0.\nclass var magenta: UIColor\nA color object with RGB values of 1.0, 0.0, and 1.0, and an alpha value of 1.0.\nclass var orange: UIColor\nA color object with RGB values of 1.0, 0.5, and 0.0, and an alpha value of 1.0.\nclass var purple: UIColor\nA color object with RGB values of 0.5, 0.0, and 0.5, and an alpha value of 1.0.\nclass var red: UIColor\nA color object with RGB values of 1.0, 0.0, and 0.0, and an alpha value of 1.0.\nclass var white: UIColor\nA color object with a grayscale value of 1.0 and an alpha value of 1.0.\nclass var yellow: UIColor\nA color object with RGB values of 1.0, 1.0, and 0.0, and an alpha value of 1.0."
  },
  {
    "title": "systemBlue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3173141-systemblue",
    "html": "See Also\nAdaptable colors\nclass var systemBrown: UIColor\nA brown color that automatically adapts to the current trait environment.\nclass var systemCyan: UIColor\nA cyan color that automatically adapts to the current trait environment.\nclass var systemGreen: UIColor\nA green color that automatically adapts to the current trait environment.\nclass var systemIndigo: UIColor\nAn indigo color that automatically adapts to the current trait environment.\nclass var systemMint: UIColor\nA mint color that automatically adapts to the current trait environment.\nclass var systemOrange: UIColor\nAn orange color that automatically adapts to the current trait environment.\nclass var systemPink: UIColor\nA pink color that automatically adapts to the current trait environment.\nclass var systemPurple: UIColor\nA purple color that automatically adapts to the current trait environment.\nclass var systemRed: UIColor\nA red color that automatically adapts to the current trait environment.\nclass var systemTeal: UIColor\nA teal color that automatically adapts to the current trait environment.\nclass var systemYellow: UIColor\nA yellow color that automatically adapts to the current trait environment."
  },
  {
    "title": "systemBrown | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3173142-systembrown",
    "html": "See Also\nAdaptable colors\nclass var systemBlue: UIColor\nA blue color that automatically adapts to the current trait environment.\nclass var systemCyan: UIColor\nA cyan color that automatically adapts to the current trait environment.\nclass var systemGreen: UIColor\nA green color that automatically adapts to the current trait environment.\nclass var systemIndigo: UIColor\nAn indigo color that automatically adapts to the current trait environment.\nclass var systemMint: UIColor\nA mint color that automatically adapts to the current trait environment.\nclass var systemOrange: UIColor\nAn orange color that automatically adapts to the current trait environment.\nclass var systemPink: UIColor\nA pink color that automatically adapts to the current trait environment.\nclass var systemPurple: UIColor\nA purple color that automatically adapts to the current trait environment.\nclass var systemRed: UIColor\nA red color that automatically adapts to the current trait environment.\nclass var systemTeal: UIColor\nA teal color that automatically adapts to the current trait environment.\nclass var systemYellow: UIColor\nA yellow color that automatically adapts to the current trait environment."
  },
  {
    "title": "systemCyan | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3852740-systemcyan",
    "html": "See Also\nAdaptable colors\nclass var systemBlue: UIColor\nA blue color that automatically adapts to the current trait environment.\nclass var systemBrown: UIColor\nA brown color that automatically adapts to the current trait environment.\nclass var systemGreen: UIColor\nA green color that automatically adapts to the current trait environment.\nclass var systemIndigo: UIColor\nAn indigo color that automatically adapts to the current trait environment.\nclass var systemMint: UIColor\nA mint color that automatically adapts to the current trait environment.\nclass var systemOrange: UIColor\nAn orange color that automatically adapts to the current trait environment.\nclass var systemPink: UIColor\nA pink color that automatically adapts to the current trait environment.\nclass var systemPurple: UIColor\nA purple color that automatically adapts to the current trait environment.\nclass var systemRed: UIColor\nA red color that automatically adapts to the current trait environment.\nclass var systemTeal: UIColor\nA teal color that automatically adapts to the current trait environment.\nclass var systemYellow: UIColor\nA yellow color that automatically adapts to the current trait environment."
  },
  {
    "title": "systemGreen | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3173144-systemgreen",
    "html": "See Also\nAdaptable colors\nclass var systemBlue: UIColor\nA blue color that automatically adapts to the current trait environment.\nclass var systemBrown: UIColor\nA brown color that automatically adapts to the current trait environment.\nclass var systemCyan: UIColor\nA cyan color that automatically adapts to the current trait environment.\nclass var systemIndigo: UIColor\nAn indigo color that automatically adapts to the current trait environment.\nclass var systemMint: UIColor\nA mint color that automatically adapts to the current trait environment.\nclass var systemOrange: UIColor\nAn orange color that automatically adapts to the current trait environment.\nclass var systemPink: UIColor\nA pink color that automatically adapts to the current trait environment.\nclass var systemPurple: UIColor\nA purple color that automatically adapts to the current trait environment.\nclass var systemRed: UIColor\nA red color that automatically adapts to the current trait environment.\nclass var systemTeal: UIColor\nA teal color that automatically adapts to the current trait environment.\nclass var systemYellow: UIColor\nA yellow color that automatically adapts to the current trait environment."
  },
  {
    "title": "setNeedsUpdateConfiguration() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/3600590-setneedsupdateconfiguration",
    "html": "Discussion\n\nYou call this method when you need the cell to update its configuration according to the current configuration state. The system calls this method automatically when the cell’s configurationState changes, as well as in other circumstances that may require an update. The system might combine multiple requests into a single update.\n\nIf you add custom states to the cell’s configuration state, make sure to call this method every time those custom states change.\n\nSee Also\nManaging the state\nvar configurationState: UICellConfigurationState\nThe current configuration state of the cell.\nfunc updateConfiguration(using: UICellConfigurationState)\nUpdates the cell’s configuration using the current state.\nvar configurationUpdateHandler: UITableViewCell.ConfigurationUpdateHandler?\nA block for handling updates to the cell’s configuration using the current state.\ntypealias UITableViewCell.ConfigurationUpdateHandler\nThe type of block for handling updates to the cell’s configuration using the current state."
  },
  {
    "title": "configurationUpdateHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/3751735-configurationupdatehandler",
    "html": "Discussion\n\nA configuration update handler provides an alternative approach to overriding updateConfiguration(using:) in a subclass. Set a configuration update handler to update the cell’s configuration using the new state in response to a configuration state change:\n\ncell.configurationUpdateHandler = { cell, state in\n    var content = cell.defaultContentConfiguration().updated(for: state)\n    content.text = \"Hello world!\"\n    if state.isDisabled {\n        content.textProperties.color = .systemGray\n    }\n    cell.contentConfiguration = content\n}\n\n\nSetting the value of this property calls setNeedsUpdateConfiguration(). The system calls this handler after calling updateConfiguration(using:).\n\nSee Also\nManaging the state\nvar configurationState: UICellConfigurationState\nThe current configuration state of the cell.\nfunc setNeedsUpdateConfiguration()\nInforms the cell to update its configuration for its current state.\nfunc updateConfiguration(using: UICellConfigurationState)\nUpdates the cell’s configuration using the current state.\ntypealias UITableViewCell.ConfigurationUpdateHandler\nThe type of block for handling updates to the cell’s configuration using the current state."
  },
  {
    "title": "accessoryType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623228-accessorytype",
    "html": "Discussion\n\nThe accessory view appears in the right side of the cell in the table view’s normal (default) state. The standard accessory views include the disclosure chevron; for a description of valid accessoryType constants, see UITableViewCell.AccessoryType. The default is UITableViewCell.AccessoryType.none. If a custom accessory view is set through the accessoryView property, the value of this property is ignored. If the cell is enabled and the accessory type is UITableViewCell.AccessoryType.detailDisclosureButton, the accessory view tracks touches and, when tapped, sends the data-source object a tableView(_:accessoryButtonTappedForRowWith:) message.\n\nThe accessory-type image cross-fades between normal and editing states if it set for both states; use the editingAccessoryType property to set the accessory type for the cell during editing mode. If this property is not set for both states, the cell is animated to slide in or out, as necessary.\n\nSee Also\nManaging accessory views\nvar accessoryView: UIView?\nThe view to use on the right side of the cell, typically as a control, in the table view’s normal state.\nvar editingAccessoryType: UITableViewCell.AccessoryType\nThe type of standard accessory view for the cell to use in the table view’s editing state.\nvar editingAccessoryView: UIView?\nThe view to use on the right side of the cell, typically as a control, in the table view’s editing state.\nenum UITableViewCell.AccessoryType\nThe type of standard accessory control used by a cell.\nRelated Documentation\nfunc willTransition(to: UITableViewCell.StateMask)\nNotifies the cell that it’s about to transition to a new cell state.\nfunc didTransition(to: UITableViewCell.StateMask)\nNotifies the cell that it transitioned to a new cell state."
  },
  {
    "title": "accessoryView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623219-accessoryview",
    "html": "Discussion\n\nIf the value of this property is not nil, the UITableViewCell class uses the given view for the accessory view in the table view’s normal (default) state; it ignores the value of the accessoryType property. The provided accessory view can be a framework-provided control or label or a custom view. The accessory view appears in the right side of the cell.\n\nThe accessory view cross-fades between normal and editing states if it set for both states; use the editingAccessoryView property to set the accessory view for the cell during editing mode. If this property is not set for both states, the cell is animated to slide in or out, as necessary.\n\nSee Also\nManaging accessory views\nvar accessoryType: UITableViewCell.AccessoryType\nThe type of standard accessory view for the cell to use in the table view’s normal state.\nvar editingAccessoryType: UITableViewCell.AccessoryType\nThe type of standard accessory view for the cell to use in the table view’s editing state.\nvar editingAccessoryView: UIView?\nThe view to use on the right side of the cell, typically as a control, in the table view’s editing state.\nenum UITableViewCell.AccessoryType\nThe type of standard accessory control used by a cell.\nRelated Documentation\nfunc willTransition(to: UITableViewCell.StateMask)\nNotifies the cell that it’s about to transition to a new cell state.\nfunc didTransition(to: UITableViewCell.StateMask)\nNotifies the cell that it transitioned to a new cell state."
  },
  {
    "title": "multipleSelectionBackgroundView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623275-multipleselectionbackgroundview",
    "html": "Discussion\n\nIf this property isn’t nil, this view becomes the background view for a selected cell when the table view allows multiple row selections. You enable multiple row selections through the allowsMultipleSelection and allowsMultipleSelectionDuringEditing properties of UITableView.\n\nA background configuration is mutually exclusive with background views, so you must use one approach or the other. Setting a non-nil value for this property resets backgroundConfiguration to nil.\n\nSee Also\nConfiguring the background\nfunc defaultBackgroundConfiguration() -> UIBackgroundConfiguration\nRetrieves a background configuration with system default values.\nvar backgroundConfiguration: UIBackgroundConfiguration?\nThe current background configuration of the cell.\nvar automaticallyUpdatesBackgroundConfiguration: Bool\nA Boolean value that determines whether the cell automatically updates its background configuration when its state changes.\nvar backgroundView: UIView?\nThe view to use as the background of the cell.\nvar selectedBackgroundView: UIView?\nThe view to use as the background for a selected cell."
  },
  {
    "title": "automaticallyUpdatesContentConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/3600585-automaticallyupdatescontentconfi",
    "html": "Discussion\n\nWhen this value is true, the cell automatically calls updated(for:) on its contentConfiguration when the cell’s configurationState changes, and applies the updated configuration back to the cell. The default value is true.\n\nIf you override updateConfiguration(using:) to manually update and customize the content configuration, disable automatic updates by setting this property to false.\n\nSee Also\nManaging the content\nfunc defaultContentConfiguration() -> UIListContentConfiguration\nRetrieves a default list content configuration for the cell’s style.\nvar contentConfiguration: (UIContentConfiguration)?\nThe current content configuration of the cell.\nvar contentView: UIView\nThe content view of the cell object."
  },
  {
    "title": "contentConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/3601057-contentconfiguration",
    "html": "Discussion\n\nUsing a content configuration, you can set the cell’s content and styling for a variety of different cell states. You can get the default configuration using defaultContentConfiguration(), assign your content to the configuration, customize any other properties, and assign it to the view as the current contentConfiguration.\n\nSetting a content configuration replaces the existing contentView of the cell with a new content view instance from the configuration, or directly applies the configuration to the existing content view if the configuration is compatible with the existing content view type.\n\nThe default value is nil. After you set a content configuration to this property, setting this property back to nil replaces the current content view with a new, empty content view.\n\nSee Also\nManaging the content\nfunc defaultContentConfiguration() -> UIListContentConfiguration\nRetrieves a default list content configuration for the cell’s style.\nvar automaticallyUpdatesContentConfiguration: Bool\nA Boolean value that determines whether the cell automatically updates its content configuration when its state changes.\nvar contentView: UIView\nThe content view of the cell object."
  },
  {
    "title": "contentView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623229-contentview",
    "html": "Discussion\n\nThe content view of a UITableViewCell object is the default superview for content that the cell displays. If you want to customize cells by simply adding additional views, you should add them to the content view so they position appropriately as the cell transitions in to and out of editing mode.\n\nSee Also\nManaging the content\nfunc defaultContentConfiguration() -> UIListContentConfiguration\nRetrieves a default list content configuration for the cell’s style.\nvar contentConfiguration: (UIContentConfiguration)?\nThe current content configuration of the cell.\nvar automaticallyUpdatesContentConfiguration: Bool\nA Boolean value that determines whether the cell automatically updates its content configuration when its state changes.\nRelated Documentation\nvar backgroundView: UIView?\nThe view to use as the background of the cell."
  },
  {
    "title": "isHighlighted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623241-ishighlighted",
    "html": "Discussion\n\nThe highlighting affects the appearance of labels, image, and background. When the highlighted state of a cell is set to true, labels are drawn in their highlighted text color (default is white). The default value is false. If you set the highlighted state to true through this property, the transition to the new state appearance is not animated. For animated highlighted-state transitions, see the setHighlighted(_:animated:) method.\n\nNote that for highlighting to work properly, you must fetch the cell’s labels using the textLabel and detailTextLabel properties and set each label’s highlightedTextColor property; for images, get the cell’s image using the imageView property and set the UIImageView object’s highlightedImage property.\n\nSee Also\nManaging cell selection and highlighting\nvar selectionStyle: UITableViewCell.SelectionStyle\nThe style of selection for a cell.\nenum UITableViewCell.SelectionStyle\nThe style of selected cells.\nvar isSelected: Bool\nA Boolean value that indicates whether the cell is selected.\nfunc setSelected(Bool, animated: Bool)\nSets the selected state of the cell, optionally animating the transition between states.\nfunc setHighlighted(Bool, animated: Bool)\nSets the highlighted state of the cell, optionally animating the transition between states."
  },
  {
    "title": "isEditing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623268-isediting",
    "html": "Discussion\n\nWhen a cell is in an editable state, it displays the editing controls specified for it: the green insertion control, the red deletion control, or (on the right side) the reordering control. Use editingStyle and showsReorderControl to specify these controls for the cell.\n\nSee Also\nEditing the cell\nfunc setEditing(Bool, animated: Bool)\nToggles the cell into and out of editing mode.\nvar editingStyle: UITableViewCell.EditingStyle\nThe editing style of the cell.\nenum UITableViewCell.EditingStyle\nThe editing control used by a cell.\nvar showingDeleteConfirmation: Bool\nA Boolean value that indicates whether the cell is currently showing the delete-confirmation button.\nvar showsReorderControl: Bool\nA Boolean value that determines whether the cell shows the reordering control."
  },
  {
    "title": "setEditing(_:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623222-setediting",
    "html": "Parameters\nediting\n\ntrue to enter editing mode, false to leave it. The default value is false.\n\nanimated\n\ntrue to animate the appearance or disappearance of the insertion/deletion control and the reordering control, false to make the transition immediate.\n\nDiscussion\n\nWhen you call this method with the value of editing set to true, and the UITableViewCell object is configured to have controls, the cell shows an insertion (green plus) or deletion control (red minus) on the left side of each cell and a reordering control on the right side. This method is called on each visible cell when the setEditing(_:animated:) method of UITableView is invoked. Calling this method with editing set to false removes the controls from the cell.\n\nSee Also\nEditing the cell\nvar isEditing: Bool\nA Boolean value that indicates whether the cell is in an editable state.\nvar editingStyle: UITableViewCell.EditingStyle\nThe editing style of the cell.\nenum UITableViewCell.EditingStyle\nThe editing control used by a cell.\nvar showingDeleteConfirmation: Bool\nA Boolean value that indicates whether the cell is currently showing the delete-confirmation button.\nvar showsReorderControl: Bool\nA Boolean value that determines whether the cell shows the reordering control."
  },
  {
    "title": "isSelected | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623263-isselected",
    "html": "Discussion\n\nThe selection affects the appearance of labels, image, and background. When the selected state of a cell is set to true, it draws the background for selected cells with its title in white. The default value is false. If you set the selection state to true through this property, the transition to the new state appearance is not animated. For animated selected-state transitions, see the setSelected(_:animated:) method.\n\nSee Also\nManaging cell selection and highlighting\nvar selectionStyle: UITableViewCell.SelectionStyle\nThe style of selection for a cell.\nenum UITableViewCell.SelectionStyle\nThe style of selected cells.\nfunc setSelected(Bool, animated: Bool)\nSets the selected state of the cell, optionally animating the transition between states.\nvar isHighlighted: Bool\nA Boolean value that indicates whether the cell is highlighted.\nfunc setHighlighted(Bool, animated: Bool)\nSets the highlighted state of the cell, optionally animating the transition between states."
  },
  {
    "title": "setHighlighted(_:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623280-sethighlighted",
    "html": "Parameters\nhighlighted\n\ntrue to set the cell as highlighted, false to set it as unhighlighted. The default is false.\n\nanimated\n\ntrue to animate the transition between highlighted states, false to make the transition immediate.\n\nDiscussion\n\nHighlights or unhighlights the cell, animating the transition between regular and highlighted state if animated is YES. Highlighting affects the appearance of the cell’s labels, image, and background.\n\nNote that for highlighting to work properly, you must fetch the cell’s label (or labels) using the textLabel (and detailTextLabel properties and set the label’s highlightedTextColor property; for images, get the cell’s image using the imageView property and set the UIImageView object’s highlightedImage property.\n\nA custom table cell may override this method to make any transitory appearance changes.\n\nSee Also\nManaging cell selection and highlighting\nvar selectionStyle: UITableViewCell.SelectionStyle\nThe style of selection for a cell.\nenum UITableViewCell.SelectionStyle\nThe style of selected cells.\nvar isSelected: Bool\nA Boolean value that indicates whether the cell is selected.\nfunc setSelected(Bool, animated: Bool)\nSets the selected state of the cell, optionally animating the transition between states.\nvar isHighlighted: Bool\nA Boolean value that indicates whether the cell is highlighted."
  },
  {
    "title": "setSelected(_:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewcell/1623255-setselected",
    "html": "Parameters\nselected\n\ntrue to set the cell as selected, false to set it as unselected. The default is false.\n\nanimated\n\ntrue to animate the transition between selected states, false to make the transition immediate.\n\nDiscussion\n\nThe selection affects the appearance of labels, image, and background. When the selected state of a cell is true, it draws the background for selected cells (Reusing cells) with its title in white.\n\nSee Also\nManaging cell selection and highlighting\nvar selectionStyle: UITableViewCell.SelectionStyle\nThe style of selection for a cell.\nenum UITableViewCell.SelectionStyle\nThe style of selected cells.\nvar isSelected: Bool\nA Boolean value that indicates whether the cell is selected.\nvar isHighlighted: Bool\nA Boolean value that indicates whether the cell is highlighted.\nfunc setHighlighted(Bool, animated: Bool)\nSets the highlighted state of the cell, optionally animating the transition between states."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprinterror/3727769-hash",
    "html": "See Also\nComparing print errors\nstatic func == (UIPrintError, UIPrintError) -> Bool\nReturns a Boolean value that indicates whether two values are equal.\nstatic func != (UIPrintError, UIPrintError) -> Bool\nReturns a Boolean value that indicates whether two values are unequal.\nvar hashValue: Int\nThe hashed value of the error."
  },
  {
    "title": "secondarySystemGroupedBackground | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3173138-secondarysystemgroupedbackground",
    "html": "Discussion\n\nUse this color for grouped content, including table views and platter-based designs.\n\nSee Also\nGrouped content background colors\nclass var systemGroupedBackground: UIColor\nThe color for the main background of your grouped interface.\nclass var tertiarySystemGroupedBackground: UIColor\nThe color for content layered on top of secondary backgrounds of your grouped interface."
  },
  {
    "title": "secondarySystemBackground | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3173137-secondarysystembackground",
    "html": "Discussion\n\nUse this color for standard table views and designs that have a white primary background in a light environment.\n\nSee Also\nStandard content background colors\nclass var systemBackground: UIColor\nThe color for the main background of your interface.\nclass var tertiarySystemBackground: UIColor\nThe color for content layered on top of secondary backgrounds."
  },
  {
    "title": "systemBackground | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3173140-systembackground",
    "html": "Discussion\n\nUse this color for standard table views and designs that have a white primary background in a light environment.\n\nSee Also\nStandard content background colors\nclass var secondarySystemBackground: UIColor\nThe color for content layered on top of the main background.\nclass var tertiarySystemBackground: UIColor\nThe color for content layered on top of secondary backgrounds."
  },
  {
    "title": "UIKeyboardType.numberPad | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardtype/numberpad",
    "html": "Discussion\n\nThis keyboard type prominently features the numbers 0 through 9. This keyboard type does not support auto-capitalization."
  },
  {
    "title": "timingCurveType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitimingcurveprovider/1648030-timingcurvetype",
    "html": "Required\n\nDiscussion\n\nUse this property to specify the type of timing information your timing curve object supplies. The value of this property determines whether the view property animator uses the object in the cubicTimingParameters or springTimingParameters property for timing information.\n\nSee Also\nGetting the timing information\nvar cubicTimingParameters: UICubicTimingParameters?\nThe cubic timing parameters to use.\n\nRequired\n\nvar springTimingParameters: UISpringTimingParameters?\nThe spring-based timing parameters to use.\n\nRequired"
  },
  {
    "title": "gray | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/1621941-gray",
    "html": "See Also\nFixed colors\nclass var black: UIColor\nA color object in the sRGB color space with a grayscale value of 0.0 and an alpha value of 1.0.\nclass var blue: UIColor\nA color object with RGB values of 0.0, 0.0, and 1.0, and an alpha value of 1.0.\nclass var brown: UIColor\nA color object with RGB values of 0.6, 0.4, and 0.2, and an alpha value of 1.0.\nclass var cyan: UIColor\nA color object with RGB values of 0.0, 1.0, and 1.0, and an alpha value of 1.0.\nclass var darkGray: UIColor\nA color object with a grayscale value of 1/3 and an alpha value of 1.0.\nclass var green: UIColor\nA color object with RGB values of 0.0, 1.0, and 0.0, and an alpha value of 1.0.\nclass var lightGray: UIColor\nA color object with a grayscale value of 2/3 and an alpha value of 1.0.\nclass var magenta: UIColor\nA color object with RGB values of 1.0, 0.0, and 1.0, and an alpha value of 1.0.\nclass var orange: UIColor\nA color object with RGB values of 1.0, 0.5, and 0.0, and an alpha value of 1.0.\nclass var purple: UIColor\nA color object with RGB values of 0.5, 0.0, and 0.5, and an alpha value of 1.0.\nclass var red: UIColor\nA color object with RGB values of 1.0, 0.0, and 0.0, and an alpha value of 1.0.\nclass var white: UIColor\nA color object with a grayscale value of 1.0 and an alpha value of 1.0.\nclass var yellow: UIColor\nA color object with RGB values of 1.0, 1.0, and 0.0, and an alpha value of 1.0."
  },
  {
    "title": "brown | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/1621950-brown",
    "html": "See Also\nFixed colors\nclass var black: UIColor\nA color object in the sRGB color space with a grayscale value of 0.0 and an alpha value of 1.0.\nclass var blue: UIColor\nA color object with RGB values of 0.0, 0.0, and 1.0, and an alpha value of 1.0.\nclass var cyan: UIColor\nA color object with RGB values of 0.0, 1.0, and 1.0, and an alpha value of 1.0.\nclass var darkGray: UIColor\nA color object with a grayscale value of 1/3 and an alpha value of 1.0.\nclass var gray: UIColor\nA color object with a grayscale value of 0.5 and an alpha value of 1.0.\nclass var green: UIColor\nA color object with RGB values of 0.0, 1.0, and 0.0, and an alpha value of 1.0.\nclass var lightGray: UIColor\nA color object with a grayscale value of 2/3 and an alpha value of 1.0.\nclass var magenta: UIColor\nA color object with RGB values of 1.0, 0.0, and 1.0, and an alpha value of 1.0.\nclass var orange: UIColor\nA color object with RGB values of 1.0, 0.5, and 0.0, and an alpha value of 1.0.\nclass var purple: UIColor\nA color object with RGB values of 0.5, 0.0, and 0.5, and an alpha value of 1.0.\nclass var red: UIColor\nA color object with RGB values of 1.0, 0.0, and 0.0, and an alpha value of 1.0.\nclass var white: UIColor\nA color object with a grayscale value of 1.0 and an alpha value of 1.0.\nclass var yellow: UIColor\nA color object with RGB values of 1.0, 1.0, and 0.0, and an alpha value of 1.0."
  },
  {
    "title": "systemMint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3852741-systemmint",
    "html": "See Also\nAdaptable colors\nclass var systemBlue: UIColor\nA blue color that automatically adapts to the current trait environment.\nclass var systemBrown: UIColor\nA brown color that automatically adapts to the current trait environment.\nclass var systemCyan: UIColor\nA cyan color that automatically adapts to the current trait environment.\nclass var systemGreen: UIColor\nA green color that automatically adapts to the current trait environment.\nclass var systemIndigo: UIColor\nAn indigo color that automatically adapts to the current trait environment.\nclass var systemOrange: UIColor\nAn orange color that automatically adapts to the current trait environment.\nclass var systemPink: UIColor\nA pink color that automatically adapts to the current trait environment.\nclass var systemPurple: UIColor\nA purple color that automatically adapts to the current trait environment.\nclass var systemRed: UIColor\nA red color that automatically adapts to the current trait environment.\nclass var systemTeal: UIColor\nA teal color that automatically adapts to the current trait environment.\nclass var systemYellow: UIColor\nA yellow color that automatically adapts to the current trait environment."
  },
  {
    "title": "green | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/1621946-green",
    "html": "See Also\nFixed colors\nclass var black: UIColor\nA color object in the sRGB color space with a grayscale value of 0.0 and an alpha value of 1.0.\nclass var blue: UIColor\nA color object with RGB values of 0.0, 0.0, and 1.0, and an alpha value of 1.0.\nclass var brown: UIColor\nA color object with RGB values of 0.6, 0.4, and 0.2, and an alpha value of 1.0.\nclass var cyan: UIColor\nA color object with RGB values of 0.0, 1.0, and 1.0, and an alpha value of 1.0.\nclass var darkGray: UIColor\nA color object with a grayscale value of 1/3 and an alpha value of 1.0.\nclass var gray: UIColor\nA color object with a grayscale value of 0.5 and an alpha value of 1.0.\nclass var lightGray: UIColor\nA color object with a grayscale value of 2/3 and an alpha value of 1.0.\nclass var magenta: UIColor\nA color object with RGB values of 1.0, 0.0, and 1.0, and an alpha value of 1.0.\nclass var orange: UIColor\nA color object with RGB values of 1.0, 0.5, and 0.0, and an alpha value of 1.0.\nclass var purple: UIColor\nA color object with RGB values of 0.5, 0.0, and 0.5, and an alpha value of 1.0.\nclass var red: UIColor\nA color object with RGB values of 1.0, 0.0, and 0.0, and an alpha value of 1.0.\nclass var white: UIColor\nA color object with a grayscale value of 1.0 and an alpha value of 1.0.\nclass var yellow: UIColor\nA color object with RGB values of 1.0, 1.0, and 0.0, and an alpha value of 1.0."
  },
  {
    "title": "systemGray3 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3255072-systemgray3",
    "html": "Discussion\n\nThis color adapts to the current environment. In light environments, this gray is slightly lighter than systemGray2. In dark environments, this gray is slightly darker than systemGray2.\n\nSee Also\nAdaptable gray colors\nclass var systemGray: UIColor\nThe standard base gray color that adapts to the environment.\nclass var systemGray2: UIColor\nA second-level shade of gray that adapts to the environment.\nclass var systemGray4: UIColor\nA fourth-level shade of gray that adapts to the environment.\nclass var systemGray5: UIColor\nA fifth-level shade of gray that adapts to the environment.\nclass var systemGray6: UIColor\nA sixth-level shade of gray that adapts to the environment."
  },
  {
    "title": "systemGray4 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3255073-systemgray4",
    "html": "Discussion\n\nThis color adapts to the current environment. In light environments, this gray is slightly lighter than systemGray3. In dark environments, this gray is slightly darker than systemGray3.\n\nSee Also\nAdaptable gray colors\nclass var systemGray: UIColor\nThe standard base gray color that adapts to the environment.\nclass var systemGray2: UIColor\nA second-level shade of gray that adapts to the environment.\nclass var systemGray3: UIColor\nA third-level shade of gray that adapts to the environment.\nclass var systemGray5: UIColor\nA fifth-level shade of gray that adapts to the environment.\nclass var systemGray6: UIColor\nA sixth-level shade of gray that adapts to the environment."
  },
  {
    "title": "systemGray5 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3255074-systemgray5",
    "html": "Discussion\n\nThis color adapts to the current environment. In light environments, this gray is slightly lighter than systemGray4. In dark environments, this gray is slightly darker than systemGray4.\n\nSee Also\nAdaptable gray colors\nclass var systemGray: UIColor\nThe standard base gray color that adapts to the environment.\nclass var systemGray2: UIColor\nA second-level shade of gray that adapts to the environment.\nclass var systemGray3: UIColor\nA third-level shade of gray that adapts to the environment.\nclass var systemGray4: UIColor\nA fourth-level shade of gray that adapts to the environment.\nclass var systemGray6: UIColor\nA sixth-level shade of gray that adapts to the environment."
  },
  {
    "title": "endRefreshing() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uirefreshcontrol/1624848-endrefreshing",
    "html": "Discussion\n\nCall this method at the end of any refresh operation (whether it was initiated programmatically or by the user) to return the refresh control to its default state. If the refresh control is at least partially visible, calling this method also hides it. If animations are also enabled, the control is hidden using an animation.\n\nSee Also\nManaging the refresh status\nfunc beginRefreshing()\nTells the control that a refresh operation was started programmatically.\nvar isRefreshing: Bool\nA Boolean value indicating whether a refresh operation has been triggered and is in progress."
  },
  {
    "title": "groupTableViewBackground | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/1623404-grouptableviewbackground",
    "html": "Deprecated\n\nUse systemGroupedBackground instead.\n\nReturn Value\n\nThe UIColor object."
  },
  {
    "title": "notAvailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprinterror/2999431-notavailable",
    "html": "See Also\nAccessing error codes\nenum UIPrintError.Code\nConstants that specify the print error code.\nstatic var noContent: UIPrintError.Code\nUIKit hasn’t assigned a print formatter, page renderer, or printing item to print.\nstatic var unknownImageFormat: UIPrintError.Code\nAn image is in a format that UIKit doesn’t recognize for printing.\nstatic var jobFailed: UIPrintError.Code\nAn internal error occurred with the print job."
  },
  {
    "title": "unregister(imageWith:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageasset/1624973-unregister",
    "html": "Parameters\ntraitCollection\n\nA trait collection containing the traits for a previously registered image. This method matches only the trait values, so you don’t need to specify the same object you used at registration time.\n\nDiscussion\n\nThis method searches for an image whose trait collection matches the one in the traitCollection parameter. The traits in both collections must match exactly, and the matching trait collection must be associated with an image that you registered previously.\n\nSee Also\nRegistering and unregistering images\nfunc register(UIImage, with: UITraitCollection)\nRegisters an image with the specified trait collection.\nfunc register(UIImage, with: UIImage.Configuration)\nRegisters an image with the specified image configuration details.\nfunc unregisterImage(with: UIImage.Configuration)\nUnregisters the image with the specified image configuration details from the image asset."
  },
  {
    "title": "tertiaryLabel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3173153-tertiarylabel",
    "html": "See Also\nLabel colors\nclass var label: UIColor\nThe color for text labels that contain primary content.\nclass var secondaryLabel: UIColor\nThe color for text labels that contain secondary content.\nclass var quaternaryLabel: UIColor\nThe color for text labels that contain quaternary content."
  },
  {
    "title": "quaternaryLabel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3173135-quaternarylabel",
    "html": "See Also\nLabel colors\nclass var label: UIColor\nThe color for text labels that contain primary content.\nclass var secondaryLabel: UIColor\nThe color for text labels that contain secondary content.\nclass var tertiaryLabel: UIColor\nThe color for text labels that contain tertiary content."
  },
  {
    "title": "willChangeStatusBarOrientationNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/1622951-willchangestatusbarorientationno",
    "html": "Discussion\n\nThe userInfo dictionary contains an NSNumber that encapsulates a UIInterfaceOrientation value (see UIInterfaceOrientation). Use statusBarOrientationUserInfoKey to access this value.\n\nSee Also\nDeprecated notifications\nclass let willChangeStatusBarFrameNotification: NSNotification.Name\nPosted when the app is about to change the frame of the status bar.\nDeprecated\nclass let didChangeStatusBarFrameNotification: NSNotification.Name\nPosted when the frame of the status bar changes.\nDeprecated\nclass let didChangeStatusBarOrientationNotification: NSNotification.Name\nPosted when the orientation of the app’s user interface changes.\nDeprecated"
  },
  {
    "title": "init(nibName:bundle:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uinib/1614138-init",
    "html": "Parameters\nname\n\nThe name of the nib file, without any leading path information.\n\nbundleOrNil\n\nThe bundle in which to search for the nib file. If you specify nil, this method looks for the nib file in the main bundle.\n\nReturn Value\n\nThe initialized UINib object. An exception is thrown if there were errors during initialization or the nib file could not be located.\n\nDiscussion\n\nThe UINib object looks for the nib file in the bundle’s language-specific project directories first, followed by the Resources directory.\n\nSee Also\nCreating a nib object\ninit(data: Data, bundle: Bundle?)\nCreates a nib object from nib data stored in memory."
  },
  {
    "title": "printerPickerControllerDidPresent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprinterpickercontrollerdelegate/1620508-printerpickercontrollerdidpresen",
    "html": "Parameters\nprinterPickerController\n\nThe printer picker controller object being displayed.\n\nDiscussion\n\nUse this method to perform any tasks associated with displaying the printer picker controller.\n\nSee Also\nResponding to Printer Picker Events\nfunc printerPickerControllerParentViewController(UIPrinterPickerController) -> UIViewController?\nAsks the delegate to provide the view controller to act as the parent of the printer picker.\nfunc printerPickerControllerWillPresent(UIPrinterPickerController)\nTells the delegate that the printer picker is about to be displayed.\nfunc printerPickerControllerWillDismiss(UIPrinterPickerController)\nTells the delegate that the printer picker is about to be dismissed.\nfunc printerPickerControllerDidDismiss(UIPrinterPickerController)\nTells the delegate that the printer picker was dismissed."
  },
  {
    "title": "instantiateViewController(identifier:creator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistoryboard/3213989-instantiateviewcontroller",
    "html": "Parameters\nidentifier\n\nA string that uniquely identifies the view controller in the storyboard file. At design time, put this same string in the Storyboard ID attribute of your view controller in Interface Builder. This identifier is not a property of the view controller object itself. The storyboard uses it to locate the appropriate data for your view controller.\n\nIf the specified identifier does not exist in the storyboard file, this method raises an exception.\n\ncreator\n\nA block containing your custom creation code for the view controller. Use this block to create the view controller, initialize it with the provided coder object and any custom information you require, and return the result. This block returns a new view controller object and takes the following parameter:\n\ncoder\n\nThe coder object containing the storyboard data to use when configuring the view controller.\n\nIf you return nil from your block, this method creates the view controller using the default init(coder:) method.\n\nReturn Value\n\nThe view controller corresponding to the specified identifier string. If no view controller has the given identifier, this method throws an exception.\n\nDiscussion\n\nUse this method to create a view controller object to present programmatically. Each time you call this method, it creates a new instance of the view controller using the block you provide.\n\nIn your block, create the view controller using your custom initialization method and return it. Your custom initialization method must accept an NSCoder parameter and must call the inherited init(coder:) method at some point during its execution. Not doing so is a programmer error. After initializing the storyboard state, initialize your view controller's custom properties.\n\nSee Also\nInstantiating Storyboard View Controllers\nfunc instantiateViewController(withIdentifier: String) -> UIViewController\nCreates the view controller with the specified identifier and initializes it with the data from the storyboard."
  },
  {
    "title": "controlPoint2 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicubictimingparameters/1649907-controlpoint2",
    "html": "Discussion\n\nThis parameter contains the point you specified at initialization time. If you initialized the object with a UIView.AnimationCurve value instead, this property is set to CGPointZero.\n\nSee Also\nGetting the timing parameters\nvar animationCurve: UIView.AnimationCurve\nThe standard UIKit animation curve to use for timing.\nvar controlPoint1: CGPoint\nThe first control point for the cubic Bézier curve."
  },
  {
    "title": "animationCurve | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicubictimingparameters/1649841-animationcurve",
    "html": "Discussion\n\nIf you initialized this object using an animation curve, this property reflects the curve you specified. If you initialized the object using the control points for a cubic Bézier curve, the value of this property is undefined.\n\nSee Also\nGetting the timing parameters\nvar controlPoint1: CGPoint\nThe first control point for the cubic Bézier curve.\nvar controlPoint2: CGPoint\nThe second control point of the cubic Bézier curve."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicubictimingparameters/1649910-init",
    "html": "See Also\nInitializing a cubic timing parameters object\ninit()\nInitializes the object with the system’s default timing curve.\ninit(animationCurve: UIView.AnimationCurve)\nInitializes the object with the specified UIKit timing curve.\ninit(controlPoint1: CGPoint, controlPoint2: CGPoint)\nInitializes the object with the specified control points for a cubic Bézier curve."
  },
  {
    "title": "init(controlPoint1:controlPoint2:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicubictimingparameters/1649854-init",
    "html": "Parameters\npoint1\n\nThe first control point for the cubic Bézier timing curve. The x and y values of this point must be in the range 0.0 to 1.0.\n\npoint2\n\nThe second control point for the cubic Bézier timing curve. The x and y values of this point must be in the range 0.0 to 1.0.\n\nReturn Value\n\nAn initialized timing parameter object or nil if the object could not be created.\n\nDiscussion\n\nUse this method to initialize the timing curve with a custom cubic Bézier curve. The curve consists of a line whose starting point is (0, 0), whose end point is (1, 1), and whose shape is defined by point1 and point2.\n\nSee Also\nInitializing a cubic timing parameters object\ninit()\nInitializes the object with the system’s default timing curve.\ninit(animationCurve: UIView.AnimationCurve)\nInitializes the object with the specified UIKit timing curve.\ninit?(coder: NSCoder)\nCreates a timing parameters object from data in an unarchiver."
  },
  {
    "title": "init(animationCurve:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicubictimingparameters/1649749-init",
    "html": "Parameters\ncurve\n\nThe UIKit timing curve to use for the animations. You can specify a linear animation or an animation whose initial or final speed is slightly slower.\n\nReturn Value\n\nAn initialized timing parameter object or nil if the object could not be created.\n\nDiscussion\n\nUse this method to create a timing curve that uses the standard UIKit timing curves such as UIView.AnimationCurve.easeIn, UIView.AnimationCurve.easeOut, UIView.AnimationCurve.easeInOut, or UIView.AnimationCurve.linear.\n\nSee Also\nInitializing a cubic timing parameters object\ninit()\nInitializes the object with the system’s default timing curve.\ninit(controlPoint1: CGPoint, controlPoint2: CGPoint)\nInitializes the object with the specified control points for a cubic Bézier curve.\ninit?(coder: NSCoder)\nCreates a timing parameters object from data in an unarchiver."
  },
  {
    "title": "controlPoint1 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicubictimingparameters/1649914-controlpoint1",
    "html": "Discussion\n\nThis parameter contains the point you specified at initialization time. If you initialized the object with a UIView.AnimationCurve value instead, this property is set to CGPointZero.\n\nSee Also\nGetting the timing parameters\nvar animationCurve: UIView.AnimationCurve\nThe standard UIKit animation curve to use for timing.\nvar controlPoint2: CGPoint\nThe second control point of the cubic Bézier curve."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscribbleinteraction/3566747-delegate",
    "html": "Discussion\n\nThe delegate responds to events generated by the user as they interact with the canvas using Apple pencil. The delegate methods allow you to manage the focus of text views, know when writing begins and ends, and let scribble know where elements are within specific areas of the screen."
  },
  {
    "title": "willMove(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiindirectscribbleinteraction/3603397-willmove",
    "html": "Parameters\nview\n\nThe destination view.\n\nRelationships\nFrom Protocol\nUIInteraction\nSee Also\nResponding to UI changes\nfunc didMove(to: UIView?)\nTells the delegate when an interaction moves to a new view."
  },
  {
    "title": "isPencilInputExpected | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscribbleinteraction/3566750-ispencilinputexpected",
    "html": "Discussion\n\nIf set to true, adjust the layout of UI elements that aren’t optimal for direct handwriting input. This allows more room for interaction with Apple Pencil. For example, small or resizable text fields can temporarily change their height to receive input from Apple Pencil, while preserving padding along the bottom of the text field."
  },
  {
    "title": "code | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprinterror/3727768-code",
    "html": "See Also\nGetting error information\nstatic var errorDomain: String\nThe printing error domain.\nvar errorCode: Int\nThe printing error code.\nvar userInfo: [String : Any]\nThe printing error user information.\nvar errorUserInfo: [String : Any]\nThe printing error user information.\nvar localizedDescription: String\nA localized description of the printing error."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprinterror/3727770-hashvalue",
    "html": "See Also\nComparing print errors\nstatic func == (UIPrintError, UIPrintError) -> Bool\nReturns a Boolean value that indicates whether two values are equal.\nstatic func != (UIPrintError, UIPrintError) -> Bool\nReturns a Boolean value that indicates whether two values are unequal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the error by feeding them into the given hash function."
  },
  {
    "title": "tertiarySystemFill | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3255076-tertiarysystemfill",
    "html": "Discussion\n\nUse system fill colors for items situated on top of an existing background color. System fill colors incorporate transparency to allow the background color to show through.\n\nUse this color to fill large shapes, such as input fields, search bars, or buttons.\n\nSee Also\nFill colors\nclass var systemFill: UIColor\nAn overlay fill color for thin and small shapes.\nclass var secondarySystemFill: UIColor\nAn overlay fill color for medium-size shapes.\nclass var quaternarySystemFill: UIColor\nAn overlay fill color for large areas that contain complex content."
  },
  {
    "title": "secondarySystemFill | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3255069-secondarysystemfill",
    "html": "Discussion\n\nUse system fill colors for items situated on top of an existing background color. System fill colors incorporate transparency to allow the background color to show through.\n\nUse this color to fill medium-size shapes, such as the background of a switch.\n\nSee Also\nFill colors\nclass var systemFill: UIColor\nAn overlay fill color for thin and small shapes.\nclass var tertiarySystemFill: UIColor\nAn overlay fill color for large shapes.\nclass var quaternarySystemFill: UIColor\nAn overlay fill color for large areas that contain complex content."
  },
  {
    "title": "systemFill | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3255070-systemfill",
    "html": "Discussion\n\nUse system fill colors for items situated on top of an existing background color. System fill colors incorporate transparency to allow the background color to show through.\n\nUse this color to fill thin or small shapes, such as the track of a slider.\n\nSee Also\nFill colors\nclass var secondarySystemFill: UIColor\nAn overlay fill color for medium-size shapes.\nclass var tertiarySystemFill: UIColor\nAn overlay fill color for large shapes.\nclass var quaternarySystemFill: UIColor\nAn overlay fill color for large areas that contain complex content."
  },
  {
    "title": "typeIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsdataasset/1403434-typeidentifier",
    "html": "Discussion\n\nA uniform type identifier is a string for identifying the type of data. This UTI is the same as the one specified in the asset catalog. For more information, see Uniform Type Identifiers Overview.\n\nSee Also\nGetting data asset information\nvar name: NSDataAssetName\nThe name of the data set in the asset catalog.\ntypealias NSDataAssetName\nThe name of a data asset."
  },
  {
    "title": "quaternarySystemFill | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3255068-quaternarysystemfill",
    "html": "Discussion\n\nUse system fill colors for items situated on top of an existing background color. System fill colors incorporate transparency to allow the background color to show through.\n\nUse this color to fill large areas that contain complex content, such as an expanded table cell.\n\nSee Also\nFill colors\nclass var systemFill: UIColor\nAn overlay fill color for thin and small shapes.\nclass var secondarySystemFill: UIColor\nAn overlay fill color for medium-size shapes.\nclass var tertiarySystemFill: UIColor\nAn overlay fill color for large shapes."
  },
  {
    "title": "tertiarySystemBackground | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3173154-tertiarysystembackground",
    "html": "Discussion\n\nUse this color for standard table views and designs that have a white primary background in a light environment.\n\nSee Also\nStandard content background colors\nclass var systemBackground: UIColor\nThe color for the main background of your interface.\nclass var secondarySystemBackground: UIColor\nThe color for content layered on top of the main background."
  },
  {
    "title": "systemGroupedBackground | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3173145-systemgroupedbackground",
    "html": "Discussion\n\nUse this color for grouped content, including table views and platter-based designs.\n\nSee Also\nGrouped content background colors\nclass var secondarySystemGroupedBackground: UIColor\nThe color for content layered on top of the main background of your grouped interface.\nclass var tertiarySystemGroupedBackground: UIColor\nThe color for content layered on top of secondary backgrounds of your grouped interface."
  },
  {
    "title": "tertiarySystemGroupedBackground | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3173155-tertiarysystemgroupedbackground",
    "html": "Discussion\n\nUse this color for grouped content, including table views and platter-based designs.\n\nSee Also\nGrouped content background colors\nclass var systemGroupedBackground: UIColor\nThe color for the main background of your grouped interface.\nclass var secondarySystemGroupedBackground: UIColor\nThe color for content layered on top of the main background of your grouped interface."
  },
  {
    "title": "UITimingCurveType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitimingcurvetype",
    "html": "Topics\nConstants\ncase builtin\nUse the built-in UIKit timing curves. Specify this value when you want to use one of the constants in the UIView.AnimationCurve type. Specify the desired curve using the cubicTimingParameters property.\ncase cubic\nUse a custom cubic Bézier curve. Specify the curve information using the cubicTimingParameters property.\ncase spring\nUse a custom spring animation. Specify the desired curve using the springTimingParameters property.\ncase composed\nUse a combination of timing parameters. This type of curve starts with the curve defined by the cubicTimingParameters property and modifies it using the spring information in the springTimingParameters property.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "cubicTimingParameters | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitimingcurveprovider/1648036-cubictimingparameters",
    "html": "Required\n\nDiscussion\n\nImplement this property and use it to provide your custom cubic timing information. If the value of the timingCurveType property is UITimingCurveType.builtin, UITimingCurveType.cubic, or UITimingCurveType.composed, you must return an object from this property. The object you return can specify one of the built-in UIKit curves, such as UIView.AnimationCurve.linear, or it can specify a timing curve based on a custom Bézier path.\n\nFor more information about configuring this object, see UICubicTimingParameters.\n\nSee Also\nGetting the timing information\nvar timingCurveType: UITimingCurveType\nThe type of timing information to use.\n\nRequired\n\nvar springTimingParameters: UISpringTimingParameters?\nThe spring-based timing parameters to use.\n\nRequired"
  },
  {
    "title": "UIKeyboardType.URL | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardtype/url",
    "html": "Discussion\n\nThis keyboard type prominently features the period (“.”) and slash (“/”) characters and the “.com” string."
  },
  {
    "title": "UIKeyboardType.namePhonePad | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardtype/namephonepad",
    "html": "Discussion\n\nThis keyboard type does not support auto-capitalization."
  },
  {
    "title": "alphabet | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardtype/1624462-alphabet",
    "html": "Deprecated\n\nUse UIKeyboardType.asciiCapable instead."
  },
  {
    "title": "UIKeyboardType.phonePad | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardtype/phonepad",
    "html": "Discussion\n\nThis keyboard type prominently features the numbers 0 through 9 and the “*” and “#” characters. This keyboard type does not support auto-capitalization."
  },
  {
    "title": "UIKeyboardType.emailAddress | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardtype/emailaddress",
    "html": "Discussion\n\nThis keyboard type prominently features the at (“@”), period (“.”) and space characters."
  },
  {
    "title": "indirectScribbleInteraction(_:isElementFocused:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiindirectscribbleinteractiondelegate/3603404-indirectscribbleinteraction",
    "html": "Required\n\nParameters\ninteraction\n\nThe interaction asking for the focused state.\n\nelementIdentifier\n\nThe identifier of the element the interaction is asking about.\n\nReturn Value\n\nReturns true if the element is the one currently focused.\n\nSee Also\nManaging Focus\nfunc indirectScribbleInteraction(UIInteraction, focusElementIfNeeded: Self.ElementIdentifier, referencePoint: CGPoint, completion: ((UIResponder & UITextInput)?) -> Void)\nAsks the delegate to focus an element to handle text edits.\n\nRequired\n\nfunc indirectScribbleInteraction(UIInteraction, shouldDelayFocusForElement: Self.ElementIdentifier) -> Bool\nAllow the delegate to delay focusing an element.\n\nRequired Default implementation provided."
  },
  {
    "title": "indirectScribbleInteraction(_:focusElementIfNeeded:referencePoint:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiindirectscribbleinteractiondelegate/3603402-indirectscribbleinteraction",
    "html": "Required\n\nParameters\ninteraction\n\nThe interaction requesting to focus an element.\n\nelementIdentifier\n\nThe identifier of the element that should receive focus.\n\nfocusReferencePoint\n\nA CGPoint inside the element’s view.\n\ncompletion\n\nA completion handler that you must call, either synchronously or asynchronously. On success, the first parameter should be the text input that became first responder and that handles text operations for this element. On failure, call the completion with a nil parameter.\n\nReturn Value\n\nIn response to this callback, the implementation should make this element the currently focused one, and make the corresponding UITextInput become first responder.\n\nIf the element isn’t focused already, set the text selection to the character location closest to focusReferencePoint to avoid any scrolling or shifting of content.\n\nIf the element is already focused, make no changes to the selection. Before returning you must still call the completion handler with a reference to UITextInput.\n\nSee Also\nManaging Focus\nfunc indirectScribbleInteraction(UIInteraction, isElementFocused: Self.ElementIdentifier) -> Bool\nAsks the delegate if an element is currently focused, according to the internal state of the interaction’s view.\n\nRequired\n\nfunc indirectScribbleInteraction(UIInteraction, shouldDelayFocusForElement: Self.ElementIdentifier) -> Bool\nAllow the delegate to delay focusing an element.\n\nRequired Default implementation provided."
  },
  {
    "title": "systemTeal | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3173151-systemteal",
    "html": "See Also\nAdaptable colors\nclass var systemBlue: UIColor\nA blue color that automatically adapts to the current trait environment.\nclass var systemBrown: UIColor\nA brown color that automatically adapts to the current trait environment.\nclass var systemCyan: UIColor\nA cyan color that automatically adapts to the current trait environment.\nclass var systemGreen: UIColor\nA green color that automatically adapts to the current trait environment.\nclass var systemIndigo: UIColor\nAn indigo color that automatically adapts to the current trait environment.\nclass var systemMint: UIColor\nA mint color that automatically adapts to the current trait environment.\nclass var systemOrange: UIColor\nAn orange color that automatically adapts to the current trait environment.\nclass var systemPink: UIColor\nA pink color that automatically adapts to the current trait environment.\nclass var systemPurple: UIColor\nA purple color that automatically adapts to the current trait environment.\nclass var systemRed: UIColor\nA red color that automatically adapts to the current trait environment.\nclass var systemYellow: UIColor\nA yellow color that automatically adapts to the current trait environment."
  },
  {
    "title": "cyan | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/1621942-cyan",
    "html": "See Also\nFixed colors\nclass var black: UIColor\nA color object in the sRGB color space with a grayscale value of 0.0 and an alpha value of 1.0.\nclass var blue: UIColor\nA color object with RGB values of 0.0, 0.0, and 1.0, and an alpha value of 1.0.\nclass var brown: UIColor\nA color object with RGB values of 0.6, 0.4, and 0.2, and an alpha value of 1.0.\nclass var darkGray: UIColor\nA color object with a grayscale value of 1/3 and an alpha value of 1.0.\nclass var gray: UIColor\nA color object with a grayscale value of 0.5 and an alpha value of 1.0.\nclass var green: UIColor\nA color object with RGB values of 0.0, 1.0, and 0.0, and an alpha value of 1.0.\nclass var lightGray: UIColor\nA color object with a grayscale value of 2/3 and an alpha value of 1.0.\nclass var magenta: UIColor\nA color object with RGB values of 1.0, 0.0, and 1.0, and an alpha value of 1.0.\nclass var orange: UIColor\nA color object with RGB values of 1.0, 0.5, and 0.0, and an alpha value of 1.0.\nclass var purple: UIColor\nA color object with RGB values of 0.5, 0.0, and 0.5, and an alpha value of 1.0.\nclass var red: UIColor\nA color object with RGB values of 1.0, 0.0, and 0.0, and an alpha value of 1.0.\nclass var white: UIColor\nA color object with a grayscale value of 1.0 and an alpha value of 1.0.\nclass var yellow: UIColor\nA color object with RGB values of 1.0, 1.0, and 0.0, and an alpha value of 1.0."
  },
  {
    "title": "indirectScribbleInteraction(_:willBeginWritingInElement:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiindirectscribbleinteractiondelegate/3603408-indirectscribbleinteraction",
    "html": "Required Default implementation provided.\n\nParameters\ninteraction\n\nThe interaction where the user started writing.\n\nelementIdentifier\n\nThe identifier of the element that should receive focus.\n\nDiscussion\n\nUse this to hide custom placeholders or other UI elements that can interfere with writing.\n\nDefault Implementations\nUIIndirectScribbleInteractionDelegate Implementations\nfunc indirectScribbleInteraction(UIInteraction, willBeginWritingInElement: Self.ElementIdentifier)\nSee Also\nTracking Scribble Input\nfunc indirectScribbleInteraction(UIInteraction, didFinishWritingInElement: Self.ElementIdentifier)\nInforms the delegate when the user finishes writing.\n\nRequired Default implementation provided."
  },
  {
    "title": "image(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageasset/3238043-image",
    "html": "Parameters\nconfiguration\n\nThe configuration details to use when determining which image to return.\n\nReturn Value\n\nThe image object for the specified configuration.\n\nDiscussion\n\nIf this method can’t locate an image that matches the specified image configuration precisely, it returns the best match available.\n\nSee Also\nRetrieving an image from an image asset\nfunc image(with: UITraitCollection) -> UIImage\nRetrieves the variant of the image that best matches the specified trait collection."
  },
  {
    "title": "systemRed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3173150-systemred",
    "html": "See Also\nAdaptable colors\nclass var systemBlue: UIColor\nA blue color that automatically adapts to the current trait environment.\nclass var systemBrown: UIColor\nA brown color that automatically adapts to the current trait environment.\nclass var systemCyan: UIColor\nA cyan color that automatically adapts to the current trait environment.\nclass var systemGreen: UIColor\nA green color that automatically adapts to the current trait environment.\nclass var systemIndigo: UIColor\nAn indigo color that automatically adapts to the current trait environment.\nclass var systemMint: UIColor\nA mint color that automatically adapts to the current trait environment.\nclass var systemOrange: UIColor\nAn orange color that automatically adapts to the current trait environment.\nclass var systemPink: UIColor\nA pink color that automatically adapts to the current trait environment.\nclass var systemPurple: UIColor\nA purple color that automatically adapts to the current trait environment.\nclass var systemTeal: UIColor\nA teal color that automatically adapts to the current trait environment.\nclass var systemYellow: UIColor\nA yellow color that automatically adapts to the current trait environment."
  },
  {
    "title": "systemGray | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3173143-systemgray",
    "html": "Discussion\n\nThis color represents the standard system gray. It adapts to the current environment.\n\nSee Also\nAdaptable gray colors\nclass var systemGray2: UIColor\nA second-level shade of gray that adapts to the environment.\nclass var systemGray3: UIColor\nA third-level shade of gray that adapts to the environment.\nclass var systemGray4: UIColor\nA fourth-level shade of gray that adapts to the environment.\nclass var systemGray5: UIColor\nA fifth-level shade of gray that adapts to the environment.\nclass var systemGray6: UIColor\nA sixth-level shade of gray that adapts to the environment."
  },
  {
    "title": "systemPink | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3173148-systempink",
    "html": "See Also\nAdaptable colors\nclass var systemBlue: UIColor\nA blue color that automatically adapts to the current trait environment.\nclass var systemBrown: UIColor\nA brown color that automatically adapts to the current trait environment.\nclass var systemCyan: UIColor\nA cyan color that automatically adapts to the current trait environment.\nclass var systemGreen: UIColor\nA green color that automatically adapts to the current trait environment.\nclass var systemIndigo: UIColor\nAn indigo color that automatically adapts to the current trait environment.\nclass var systemMint: UIColor\nA mint color that automatically adapts to the current trait environment.\nclass var systemOrange: UIColor\nAn orange color that automatically adapts to the current trait environment.\nclass var systemPurple: UIColor\nA purple color that automatically adapts to the current trait environment.\nclass var systemRed: UIColor\nA red color that automatically adapts to the current trait environment.\nclass var systemTeal: UIColor\nA teal color that automatically adapts to the current trait environment.\nclass var systemYellow: UIColor\nA yellow color that automatically adapts to the current trait environment."
  },
  {
    "title": "image(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageasset/1624976-image",
    "html": "Parameters\ntraitCollection\n\nThe trait collection to use when determining which image to return.\n\nReturn Value\n\nThe found image.\n\nDiscussion\n\nIf this method can’t locate an image that matches the specified trait collection precisely, it returns the best match available.\n\nSee Also\nRetrieving an image from an image asset\nfunc image(with: UIImage.Configuration) -> UIImage\nRetrieves the variant of the image that best matches the specified image configuration details."
  },
  {
    "title": "systemOrange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3173147-systemorange",
    "html": "See Also\nAdaptable colors\nclass var systemBlue: UIColor\nA blue color that automatically adapts to the current trait environment.\nclass var systemBrown: UIColor\nA brown color that automatically adapts to the current trait environment.\nclass var systemCyan: UIColor\nA cyan color that automatically adapts to the current trait environment.\nclass var systemGreen: UIColor\nA green color that automatically adapts to the current trait environment.\nclass var systemIndigo: UIColor\nAn indigo color that automatically adapts to the current trait environment.\nclass var systemMint: UIColor\nA mint color that automatically adapts to the current trait environment.\nclass var systemPink: UIColor\nA pink color that automatically adapts to the current trait environment.\nclass var systemPurple: UIColor\nA purple color that automatically adapts to the current trait environment.\nclass var systemRed: UIColor\nA red color that automatically adapts to the current trait environment.\nclass var systemTeal: UIColor\nA teal color that automatically adapts to the current trait environment.\nclass var systemYellow: UIColor\nA yellow color that automatically adapts to the current trait environment."
  },
  {
    "title": "systemPurple | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3173149-systempurple",
    "html": "See Also\nAdaptable colors\nclass var systemBlue: UIColor\nA blue color that automatically adapts to the current trait environment.\nclass var systemBrown: UIColor\nA brown color that automatically adapts to the current trait environment.\nclass var systemCyan: UIColor\nA cyan color that automatically adapts to the current trait environment.\nclass var systemGreen: UIColor\nA green color that automatically adapts to the current trait environment.\nclass var systemIndigo: UIColor\nAn indigo color that automatically adapts to the current trait environment.\nclass var systemMint: UIColor\nA mint color that automatically adapts to the current trait environment.\nclass var systemOrange: UIColor\nAn orange color that automatically adapts to the current trait environment.\nclass var systemPink: UIColor\nA pink color that automatically adapts to the current trait environment.\nclass var systemRed: UIColor\nA red color that automatically adapts to the current trait environment.\nclass var systemTeal: UIColor\nA teal color that automatically adapts to the current trait environment.\nclass var systemYellow: UIColor\nA yellow color that automatically adapts to the current trait environment."
  },
  {
    "title": "blue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/1621947-blue",
    "html": "See Also\nFixed colors\nclass var black: UIColor\nA color object in the sRGB color space with a grayscale value of 0.0 and an alpha value of 1.0.\nclass var brown: UIColor\nA color object with RGB values of 0.6, 0.4, and 0.2, and an alpha value of 1.0.\nclass var cyan: UIColor\nA color object with RGB values of 0.0, 1.0, and 1.0, and an alpha value of 1.0.\nclass var darkGray: UIColor\nA color object with a grayscale value of 1/3 and an alpha value of 1.0.\nclass var gray: UIColor\nA color object with a grayscale value of 0.5 and an alpha value of 1.0.\nclass var green: UIColor\nA color object with RGB values of 0.0, 1.0, and 0.0, and an alpha value of 1.0.\nclass var lightGray: UIColor\nA color object with a grayscale value of 2/3 and an alpha value of 1.0.\nclass var magenta: UIColor\nA color object with RGB values of 1.0, 0.0, and 1.0, and an alpha value of 1.0.\nclass var orange: UIColor\nA color object with RGB values of 1.0, 0.5, and 0.0, and an alpha value of 1.0.\nclass var purple: UIColor\nA color object with RGB values of 0.5, 0.0, and 0.5, and an alpha value of 1.0.\nclass var red: UIColor\nA color object with RGB values of 1.0, 0.0, and 0.0, and an alpha value of 1.0.\nclass var white: UIColor\nA color object with a grayscale value of 1.0 and an alpha value of 1.0.\nclass var yellow: UIColor\nA color object with RGB values of 1.0, 1.0, and 0.0, and an alpha value of 1.0."
  },
  {
    "title": "darkGray | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/1621952-darkgray",
    "html": "See Also\nFixed colors\nclass var black: UIColor\nA color object in the sRGB color space with a grayscale value of 0.0 and an alpha value of 1.0.\nclass var blue: UIColor\nA color object with RGB values of 0.0, 0.0, and 1.0, and an alpha value of 1.0.\nclass var brown: UIColor\nA color object with RGB values of 0.6, 0.4, and 0.2, and an alpha value of 1.0.\nclass var cyan: UIColor\nA color object with RGB values of 0.0, 1.0, and 1.0, and an alpha value of 1.0.\nclass var gray: UIColor\nA color object with a grayscale value of 0.5 and an alpha value of 1.0.\nclass var green: UIColor\nA color object with RGB values of 0.0, 1.0, and 0.0, and an alpha value of 1.0.\nclass var lightGray: UIColor\nA color object with a grayscale value of 2/3 and an alpha value of 1.0.\nclass var magenta: UIColor\nA color object with RGB values of 1.0, 0.0, and 1.0, and an alpha value of 1.0.\nclass var orange: UIColor\nA color object with RGB values of 1.0, 0.5, and 0.0, and an alpha value of 1.0.\nclass var purple: UIColor\nA color object with RGB values of 0.5, 0.0, and 0.5, and an alpha value of 1.0.\nclass var red: UIColor\nA color object with RGB values of 1.0, 0.0, and 0.0, and an alpha value of 1.0.\nclass var white: UIColor\nA color object with a grayscale value of 1.0 and an alpha value of 1.0.\nclass var yellow: UIColor\nA color object with RGB values of 1.0, 1.0, and 0.0, and an alpha value of 1.0."
  },
  {
    "title": "unregisterImage(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageasset/3295945-unregisterimage",
    "html": "Parameters\nconfiguration\n\nAn object containing the image configuration details for a previously registered image. This method matches only the contents of the object, so you don’t need to specify the same object you used at registration time.\n\nDiscussion\n\nThis method searches for an image whose configuration details match the information in the configuration parameter. The configuration details must match exactly, and must be associated with an image that you registered previously.\n\nSee Also\nRegistering and unregistering images\nfunc register(UIImage, with: UITraitCollection)\nRegisters an image with the specified trait collection.\nfunc register(UIImage, with: UIImage.Configuration)\nRegisters an image with the specified image configuration details.\nfunc unregister(imageWith: UITraitCollection)\nUnregisters the image with the specified trait collection from the image asset."
  },
  {
    "title": "label | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3173131-label",
    "html": "See Also\nLabel colors\nclass var secondaryLabel: UIColor\nThe color for text labels that contain secondary content.\nclass var tertiaryLabel: UIColor\nThe color for text labels that contain tertiary content.\nclass var quaternaryLabel: UIColor\nThe color for text labels that contain quaternary content."
  },
  {
    "title": "register(_:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageasset/3295944-register",
    "html": "Parameters\nimage\n\nThe image you want to register with the image asset.\n\nconfiguration\n\nThe image configuration details to associate with image.\n\nDiscussion\n\nEach image in an image asset must have a unique configuration. If the asset already contains a registered image with the equivalent configuration, it replaces that image with the one in the image parameter.\n\nImportant\n\nThe trait collection in configuration must always contain an explicit value in its displayScale property. You may experience unexpected results from image(with:) if the trait collection doesn’t explicitly define the desired scale.\n\nSee Also\nRegistering and unregistering images\nfunc register(UIImage, with: UITraitCollection)\nRegisters an image with the specified trait collection.\nfunc unregister(imageWith: UITraitCollection)\nUnregisters the image with the specified trait collection from the image asset.\nfunc unregisterImage(with: UIImage.Configuration)\nUnregisters the image with the specified image configuration details from the image asset."
  },
  {
    "title": "register(_:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageasset/1624974-register",
    "html": "Parameters\nimage\n\nThe image you want to register with the image asset.\n\ntraitCollection\n\nThe traits to associate with image.\n\nDiscussion\n\nEach image in an image asset must have a unique set of traits. If the asset already contains a registered image with the equivalent traits, it replaces that image with the one in the image parameter.\n\nImportant\n\nThe trait collection must always contain an explicit value in its displayScale property. You may experience unexpected results from image(with:) if the trait collection doesn’t explicitly define the desired scale.\n\nSee Also\nRegistering and unregistering images\nfunc register(UIImage, with: UIImage.Configuration)\nRegisters an image with the specified image configuration details.\nfunc unregister(imageWith: UITraitCollection)\nUnregisters the image with the specified trait collection from the image asset.\nfunc unregisterImage(with: UIImage.Configuration)\nUnregisters the image with the specified image configuration details from the image asset."
  },
  {
    "title": "secondaryLabel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3173136-secondarylabel",
    "html": "See Also\nLabel colors\nclass var label: UIColor\nThe color for text labels that contain primary content.\nclass var tertiaryLabel: UIColor\nThe color for text labels that contain tertiary content.\nclass var quaternaryLabel: UIColor\nThe color for text labels that contain quaternary content."
  },
  {
    "title": "UIUserInterfaceIdiom.unspecified | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiuserinterfaceidiom/unspecified",
    "html": "Discussion\n\nUsed when an object has a trait collection, but it isn’t in an environment yet. For example, a view that’s created, but not put into a view hierarchy.\n\nSee Also\nIdioms\ncase phone\nAn interface designed for iPhone and iPod touch.\ncase pad\nAn interface designed for iPad.\ncase tv\nAn interface designed for tvOS and Apple TV.\ncase carPlay\nAn interface designed for an in-car experience.\ncase mac\nAn interface designed for the Mac.\ncase vision\nAn interface designed for visionOS and Apple Vision Pro."
  },
  {
    "title": "NSDataAssetName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsdataassetname",
    "html": "See Also\nGetting data asset information\nvar name: NSDataAssetName\nThe name of the data set in the asset catalog.\nvar typeIdentifier: String\nThe uniform type identifier for the data asset."
  },
  {
    "title": "init(data:bundle:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uinib/1614135-init",
    "html": "Parameters\ndata\n\nA block of memory that contains nib data.\n\nbundleOrNil\n\nThe bundle in which to search for resources referenced by the nib. If you specify nil, this method looks for the nib file in the main bundle.\n\nReturn Value\n\nThe initialized UINib object. An exception is thrown if there were errors during initialization or the nib data could not be located.\n\nDiscussion\n\nThe UINib object looks for the nib file in the bundle’s language-specific project directories first, followed by the Resources directory.\n\nThe preferred mechanism for instantiating UINib objects is with init(nibName:bundle:). A UINib object instantiated using init(data:bundle:) can’t release the cached data under low memory conditions. Your app should prepare to release the UINib object and the data under low memory conditions, recreating both the next time the app needs to instantiate the nib.\n\nSee Also\nCreating a nib object\ninit(nibName: String, bundle: Bundle?)\nReturns a nib object from the nib file in the specified bundle."
  },
  {
    "title": "init(name:bundle:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsdataasset/1403436-init",
    "html": "Parameters\nname\n\nThe name of the data set in the asset catalog.\n\nbundle\n\nThe bundle used to store the asset catalog. Pass nil for the main bundle. The bundle must be the same as the one used in the Xcode project.\n\nReturn Value\n\nThe data asset object for the named data set in the specified bundle, or nil if the data set is not found.\n\nDiscussion\n\nIf there are multiple data files in the named data set, this method returns the one with attributes that most closely match the current device available screen space.\n\nThis method looks in the asset catalog, in the bundle specified by the bundle parameter for the named data set.\n\nSee Also\nInitializing the data asset\ninit?(name: NSDataAssetName)\nInitializes and returns an object with a reference to the named data asset in an asset catalog."
  },
  {
    "title": "UINib.OptionsKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uinib/optionskey",
    "html": "Topics\nKeys\nstatic let externalObjects: UINib.OptionsKey\nThe replacements for any proxy objects in the nib file.\nInitializers\ninit(rawValue: String)\nCreates a new instance with the specified raw value.\nRelationships\nConforms To\nHashable\nRawRepresentable\nSendable\nSee Also\nRetrieving objects from the nib file\nfunc instantiate(withOwner: Any?, options: [UINib.OptionsKey : Any]?) -> [Any]\nUnarchives and instantiates the in-memory contents of the nib object’s nib file, creating a distinct object tree and set of top-level objects."
  },
  {
    "title": "sender | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistoryboardunwindseguesource/1621914-sender",
    "html": "Discussion\n\nUse this property to determine which object in your interface triggered the unwind segue.\n\nSee Also\nGetting the unwind segue attributes\nvar source: UIViewController\nThe view controller being dismissed by the unwind segue.\nvar unwindAction: Selector\nThe action method associated with the unwind segue."
  },
  {
    "title": "jobFailed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprinterror/2999428-jobfailed",
    "html": "See Also\nAccessing error codes\nenum UIPrintError.Code\nConstants that specify the print error code.\nstatic var notAvailable: UIPrintError.Code\nThe device doesn’t support printing.\nstatic var noContent: UIPrintError.Code\nUIKit hasn’t assigned a print formatter, page renderer, or printing item to print.\nstatic var unknownImageFormat: UIPrintError.Code\nAn image is in a format that UIKit doesn’t recognize for printing."
  },
  {
    "title": "unknownImageFormat | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprinterror/2999432-unknownimageformat",
    "html": "See Also\nAccessing error codes\nenum UIPrintError.Code\nConstants that specify the print error code.\nstatic var notAvailable: UIPrintError.Code\nThe device doesn’t support printing.\nstatic var noContent: UIPrintError.Code\nUIKit hasn’t assigned a print formatter, page renderer, or printing item to print.\nstatic var jobFailed: UIPrintError.Code\nAn internal error occurred with the print job."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprinterror/2999423",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable.\n\nSee Also\nComparing print errors\nstatic func == (UIPrintError, UIPrintError) -> Bool\nReturns a Boolean value that indicates whether two values are equal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the error by feeding them into the given hash function.\nvar hashValue: Int\nThe hashed value of the error."
  },
  {
    "title": "errorDomain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprinterror/2999425-errordomain",
    "html": "See Also\nGetting error information\nvar errorCode: Int\nThe printing error code.\nvar code: Code\nThe printing error code.\nvar userInfo: [String : Any]\nThe printing error user information.\nvar errorUserInfo: [String : Any]\nThe printing error user information.\nvar localizedDescription: String\nA localized description of the printing error."
  },
  {
    "title": "identifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistoryboardsegue/1621909-identifier",
    "html": "Discussion\n\nYou assign identifiers to your segues in Interface Builder. An identifier is a string that your application uses to distinguish one segue from another. For example, if you have a source view controller that can segue to two or more different destination view controllers, you’d assign different identifiers to each segue so that the source view controller’s prepare(for:sender:) method could tell them apart and prepare each segue appropriately.\n\nSee Also\nAccessing the segue attributes\nvar source: UIViewController\nThe source view controller for the segue.\nvar destination: UIViewController\nThe destination view controller for the segue."
  },
  {
    "title": "representativeItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibarbuttonitemgroup/1623563-representativeitem",
    "html": "Discussion\n\nWhen space is constrained on the bar, UIKit may display a group’s representative item in place of its actual items. The representative item is a single bar button item that’s unique from the other items in the group. Tapping the representative item calls its action method normally. If you omit that action method, UIKit responds by automatically displaying the group’s items in a standard interface.\n\nIf you don’t specify a representative item for a group, UIKit tries to display the group’s items in the bar. If space is still constrained, UIKit may modify the appearance of items in the group to make room for all of the items. For example, UIKit may truncate the titles of textual bar button items. When space is severely constrained, UIKit may not even display a group’s representative item.\n\nSee Also\nConfiguring the group\nvar barButtonItems: [UIBarButtonItem]\nThe bar button items to display on the bar.\nvar alwaysAvailable: Bool\nA Boolean value that determines whether the group is always available through the UI."
  },
  {
    "title": "UIUserInterfaceIdiom.vision | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiuserinterfaceidiom/vision",
    "html": "Discussion\n\nIf your app has existing code that runs in the UIUserInterfaceIdiom.pad idiom, you might want to reuse the same code in the UIUserInterfaceIdiom.vision idiom. The following code shows how to check for these idioms:\n\nif idiom == .pad || idiom == .vision {\n   // Code to run in the iPad or Apple Vision Pro idioms.\n} else { \n   // Code to run in other idioms.\n}\n\n\nSee Also\nIdioms\ncase unspecified\nAn unspecified idiom.\ncase phone\nAn interface designed for iPhone and iPod touch.\ncase pad\nAn interface designed for iPad.\ncase tv\nAn interface designed for tvOS and Apple TV.\ncase carPlay\nAn interface designed for an in-car experience.\ncase mac\nAn interface designed for the Mac."
  },
  {
    "title": "lightText | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/1623401-lighttext",
    "html": "Return Value\n\nThe UIColor object.\n\nDiscussion\n\nThis color doesn’t adapt to changes in the underlying trait environment.\n\nSee Also\nNonadaptable colors\nclass var darkText: UIColor\nThe nonadaptable system color for text on a light background."
  },
  {
    "title": "darkText | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/1623400-darktext",
    "html": "Return Value\n\nThe UIColor object.\n\nDiscussion\n\nThis color doesn’t adapt to changes in the underlying trait environment.\n\nSee Also\nNonadaptable colors\nclass var lightText: UIColor\nThe nonadaptable system color for text on a dark background."
  },
  {
    "title": "separator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3173139-separator",
    "html": "Discussion\n\nThis color may be partially transparent to allow the underlying content to show through. It adapts to the underlying trait environment.\n\nSee Also\nSeparator colors\nclass var opaqueSeparator: UIColor\nThe color for borders or divider lines that hides any underlying content."
  },
  {
    "title": "opaqueSeparator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolor/3173133-opaqueseparator",
    "html": "Discussion\n\nThis color is always opaque. It adapts to the underlying trait environment.\n\nSee Also\nSeparator colors\nclass var separator: UIColor\nThe color for thin borders or divider lines that allows some underlying content to be visible."
  },
  {
    "title": "springTimingParameters | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitimingcurveprovider/1648031-springtimingparameters",
    "html": "Required\n\nDiscussion\n\nImplement this property and use it to provide spring-based timing information. If the value of the timingCurveType property is UITimingCurveType.spring or UITimingCurveType.composed, you must return an object from this property.\n\nFor more information about configuring spring-based timing parameters, see UISpringTimingParameters.\n\nSee Also\nGetting the timing information\nvar timingCurveType: UITimingCurveType\nThe type of timing information to use.\n\nRequired\n\nvar cubicTimingParameters: UICubicTimingParameters?\nThe cubic timing parameters to use.\n\nRequired"
  },
  {
    "title": "documentPicker(_:didPickDocumentAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentpickerdelegate/1618680-documentpicker",
    "html": "Deprecated\n\nUse the documentPicker(_:didPickDocumentsAt:) method instead.\n\nParameters\ncontroller\n\nThe document picker that called this method.\n\nurl\n\nThe URL of the selected document or destination.\n\nDiscussion\n\nThe meaning of the provided URL varies depending on the document picker’s mode:\n\nUIDocumentPickerModeImport\n\nThe URL refers to a copy of the selected document. This document is a temporary file. It remains available only until your application terminates. To keep a permanent copy, you must move this file to a permanent location inside your sandbox.\n\nUIDocumentPickerModeOpen\n\nThe URL refers to the selected document. The provided URL is a security-scoped URL referring to a file outside your app’s sandbox. For more information on working with external, security-scoped URLs, see Requirements.\n\nUIDocumentPickerModeExportToService\n\nThe URL refers to the new copy of the exported document at the selected destination. This URL refers to a file outside your app’s sandbox. You cannot access this copy; the URL is passed only to indicate success.\n\nUIDocumentPickerModeMoveToService\n\nThe URL refers to the document’s new location. The provided URL is a security-scoped URL referring to a file outside your app’s sandbox. For more information on working with external, security-scoped URLs, see Requirements.\n\nSee Also\nResponding to user actions\nfunc documentPicker(UIDocumentPickerViewController, didPickDocumentsAt: [URL])\nTells the delegate that the user has selected one or more documents.\nfunc documentPickerWasCancelled(UIDocumentPickerViewController)\nTells the delegate that the user canceled the document picker.\nRelated Documentation\nDocument Picker Programming Guide"
  },
  {
    "title": "indirectScribbleInteraction(_:requestElementsIn:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiindirectscribbleinteractiondelegate/3795624-indirectscribbleinteraction",
    "html": "Required Default implementation provided.\n\nDefault Implementations\nUIIndirectScribbleInteractionDelegate Implementations\nfunc indirectScribbleInteraction(UIInteraction, requestElementsIn: CGRect) -> [Self.ElementIdentifier]"
  },
  {
    "title": "indirectScribbleInteraction(_:requestElementsIn:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiindirectscribbleinteractiondelegate/3603405-indirectscribbleinteraction",
    "html": "Required\n\nParameters\ninteraction\n\nThe interaction where the user finished writing.\n\nrect\n\nThe rect around the area where the user is trying to write, in the interaction’s view coordinate system. Return only the elements intersecting this rect.\n\ncompletion\n\nA completion handler that you must call, either synchronously or asynchronously. Pass an array of identifiers of the available elements, or an empty array if there are no elements.\n\nDiscussion\n\nEach rectangle returned by the completion handler represents an area where the user can start writing even if it’s not a text input field itself.\n\nSee Also\nFinding Elements and Frames\nfunc indirectScribbleInteraction(UIInteraction, frameForElement: Self.ElementIdentifier) -> CGRect\nAsks the delegate to provide the frame of an element.\n\nRequired"
  },
  {
    "title": "indirectScribbleInteraction(_:frameForElement:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiindirectscribbleinteractiondelegate/3603403-indirectscribbleinteraction",
    "html": "Required\n\nParameters\ninteraction\n\nThe interaction requesting to focus an element.\n\nelementIdentifier\n\nThe identifier of the element that should receive focus.\n\nReturn Value\n\nReturns the frame for the element, in the view coordinate system of the interaction.\n\nSee Also\nFinding Elements and Frames\nfunc indirectScribbleInteraction(UIInteraction, requestElementsIn: CGRect, completion: ([Self.ElementIdentifier]) -> Void)\nAsks the delegate to return the locations of text input elements inside the specified rectangle of the view.\n\nRequired"
  },
  {
    "title": "indirectScribbleInteraction(_:focusElementIfNeeded:referencePoint:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiindirectscribbleinteractiondelegate/3795622-indirectscribbleinteraction",
    "html": "Required Default implementation provided.\n\nDefault Implementations\nUIIndirectScribbleInteractionDelegate Implementations\nfunc indirectScribbleInteraction(UIInteraction, focusElementIfNeeded: Self.ElementIdentifier, referencePoint: CGPoint) -> (UIResponder & UITextInput)?"
  },
  {
    "title": "indirectScribbleInteraction(_:didFinishWritingInElement:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiindirectscribbleinteractiondelegate/3603400-indirectscribbleinteraction",
    "html": "Required Default implementation provided.\n\nParameters\ninteraction\n\nThe interaction where the user finished writing.\n\nelementIdentifier\n\nThe identifier of the element that should receive focus.\n\nDiscussion\n\nUse this to reset placeholders or other UI elements, if appropriate, to their state from before the user started writing.\n\nDefault Implementations\nUIIndirectScribbleInteractionDelegate Implementations\nfunc indirectScribbleInteraction(UIInteraction, didFinishWritingInElement: Self.ElementIdentifier)\nSee Also\nTracking Scribble Input\nfunc indirectScribbleInteraction(UIInteraction, willBeginWritingInElement: Self.ElementIdentifier)\nInforms the delegate when the user begins writing.\n\nRequired Default implementation provided."
  },
  {
    "title": "UIKeyboardType.webSearch | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardtype/websearch",
    "html": "Discussion\n\nThis keyboard type prominently features the space and period (“.”) characters."
  },
  {
    "title": "UITableViewDropPlaceholder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdropplaceholder",
    "html": "Overview\n\nWhen you want to insert a placeholder cell into your table, create a UITableViewDropPlaceholder object and pass it to the drop(_:to:) method of your UITableViewDropCoordinator. You use a placeholder cell to display a temporary interface while you load the cell’s contents asynchronously. For example, your placeholder cell might display a progress indicator or a message that the cell content isn’t yet available. The placeholder object contains the reuse identifier of the temporary cell you want to display in your table. It can also include a custom preview to use during the drop.\n\nYou must register the cells you use with your placeholders in advance. In your storyboard file, add a table view cell object to your table, configure its appearance, set its class to UITableViewCell (or an appropriate subclass), and assign a reuse identifier to it. When you create your UITableViewDropPlaceholder object, pass the cell’s reuse identifier to init(insertionIndexPath:reuseIdentifier:rowHeight:). The table view uses the information in your placeholder object to insert the cell into the table.\n\nSet the cellUpdateHandler to a block of code that configures the cell as a placeholder for the incoming data.\n\nFor more information, see Supporting drag and drop in table views.\n\nImportant\n\nPlaceholder cells are meant to be a temporary part of your table view. Always replace them with actual cells as soon as possible, or cancel the drop to remove them from the table. Use the methods of a UITableViewDropPlaceholderContext object to remove placeholders from your table.\n\nTopics\nProviding preview parameters\nvar previewParametersProvider: ((UITableViewCell) -> UIDragPreviewParameters?)?\nThe handler block that provides the preview parameters for the specified cell.\nRelationships\nInherits From\nUITableViewPlaceholder\nSee Also\nPlaceholder cells\nprotocol UITableViewDropPlaceholderContext\nAn object for tracking a placeholder cell that you added to your table during a drop operation.\nclass UITableViewPlaceholder\nAn object that contains information about a placeholder cell being inserted into a table."
  },
  {
    "title": "Handling row selection in a table view | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/handling_row_selection_in_a_table_view",
    "html": "Overview\n\nWhen a user taps a row of a table view, an action of some kind usually follows, such as another view sliding into place, or the row indicating the selected state with a checkmark. In order for your app to perform the action, it must know when the user taps the row and respond accordingly.\n\nConfigure row selection behavior\n\nUse the following properties to configure how row selection behaves in a table view:\n\nallowsSelection\n\nDetermines whether users can select a row when the table isn’t in editing mode. The default is true.\n\nallowsMultipleSelection\n\nDetermines whether users can select more than one row when the table isn’t in editing mode. The default is false.\n\nallowsSelectionDuringEditing\n\nDetermines whether user can select a row while the table view is in editing mode. The default is false.\n\nallowsMultipleSelectionDuringEditing\n\nDetermines whether users can select a more than one row while in editing mode. The default is false.\n\nRespond to row selections\n\nWhen the user taps a row, the table view calls the delegate method tableView(_:didSelectRowAt:). At this point, your app performs the action, such as displaying the details of the selected hiking trail:\n\nfunc tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n    let selectedTrail = trails[indexPath.row]\n    \n    if let viewController = storyboard?.instantiateViewController(identifier: \"TrailViewController\") as? TrailViewController {\n        viewController.trail = selectedTrail\n        navigationController?.pushViewController(viewController, animated: true)\n    }\n}\n\n\nIf you respond to the cell selection by pushing a new view controller onto the navigation stack, deselect the cell when the view controller pops off the stack. If you’re using a UITableViewController to display a table view, you get the behavior by setting the clearsSelectionOnViewWillAppear property to true. Otherwise, you can clear the selection in your view controller’s viewWillAppear(_:) method:\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    if let selectedIndexPath = tableView.indexPathForSelectedRow {\n        tableView.deselectRow(at: selectedIndexPath, animated: animated)\n    }\n}\n\n\nIf the row displays the detail button accessory view and the user taps it, the table view calls the tableView(_:accessoryButtonTappedForRowWith:) method instead of calling the tableView(_:didSelectRowAt:) method. To learn more about accessory views, see Configuring the cells for your table.\n\nSelect a row programmatically\n\nThe selection of a row may originate within the app itself rather than from a tap in the table view. For example, a user might add a new person to an address book, then return to the list of contacts. After returning to the contact list, the app scrolls the list to show the row of the newly added person. In this situation, use the table view method selectRow(at:animated:scrollPosition:) to select and scroll to the new row.\n\nNote\n\nSelecting a row programmatically doesn’t call the delegate methods tableView(_:willSelectRowAt:) or tableView(_:didSelectRowAt:), nor does it send selectionDidChangeNotification notifications to observers.\n\nManage selection lists\n\nYou can also use cell selection to maintain inclusive and exclusive lists of selected items. An inclusive list can have one or more selected items while an exclusive list has at most one.\n\nWhen providing a selection list in your app, don’t use the cell’s selected state to indicate the state of the item. Instead, display a checkmark or an accessory view. To indicate the state using a checkmark, implement the tableView(_:didSelectRowAt:) delegate method, then deselect the cell with deselectRow(at:animated:), followed by setting the cell’s accessoryType property to UITableViewCell.AccessoryType.checkmark.\n\nFor example, an app for backpackers may let users create a packing list—an inclusive list of camping gear like sleeping bags and tents. When the user taps an item to indicate that they packed that piece of gear, the app unselects the row, updates the item’s data model, and displays a checkmark in the row for packed items. Tapping the item again marks the item as unpacked and removes the checkmark. Here’s an example:\n\nfunc tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n    // Unselect the row, and instead, show the state with a checkmark.\n    tableView.deselectRow(at: indexPath, animated: false)\n    \n    guard let cell = tableView.cellForRow(at: indexPath) else { return }\n    \n    // Update the selected item to indicate whether the user packed it or not.\n    let item = packingList[indexPath.row]\n    let newItem = PackingItem(name: item.name, isPacked: !item.isPacked)\n    packingList.remove(at: indexPath.row)\n    packingList.insert(newItem, at: indexPath.row)\n    \n    // Show a check mark next to packed items.\n    if newItem.isPacked {\n        cell.accessoryType = .checkmark\n    } else {\n        cell.accessoryType = .none\n    }\n}\n\n\nManaging an exclusive list is similar. Deselect the row and display a checkmark or an accessory view to indicate the selected state. But unlike an inclusive list, limit the exclusive list to only one selected item at a time.\n\nFor instance, the backpacker’s app may let users filter the list of hiking trails based on a single difficulty level: easy, moderate, and hard. With this kind of exclusive list, the app must remove the checkmark from the previous selection, and display a checkmark for the current selection. The app must also remember which item is the currently selected item. For example:\n\nfunc tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n    // Unselect the row.\n    tableView.deselectRow(at: indexPath, animated: false)\n    \n    // Did the user tap on a selected filter item? If so, do nothing.\n    let selectedFilterRow = selectedFilters[indexPath.section]\n    if selectedFilterRow == indexPath.row {\n        return\n    }\n\n\n    // Remove the checkmark from the previously selected filter item.\n    if let previousCell = tableView.cellForRow(at: IndexPath(row: selectedFilterRow, section: indexPath.section)) {\n        previousCell.accessoryType = .none\n    }\n    \n    // Mark the newly selected filter item with a checkmark.\n    if let cell = tableView.cellForRow(at: indexPath) {\n        cell.accessoryType = .checkmark\n    }\n    \n    // Remember this selected filter item.\n    selectedFilters[indexPath.section] = indexPath.row\n}\n\n\nSee Also\nSelection management\nSelecting multiple items with a two-finger pan gesture\nAccelerate user selection of multiple items using the multiselect gesture on table and collection views."
  },
  {
    "title": "UITableViewDropDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdropdelegate",
    "html": "Overview\n\nImplement this protocol in the object that you use to incorporate dropped data into your table view. The only required method of this protocol is the tableView(_:performDropWith:) method, but you can implement other methods as needed to customize the drop behavior of your table view.\n\nAssign your custom delegate object to the dropDelegate property of your table view.\n\nTopics\nDeclaring support for handling drops\nfunc tableView(UITableView, canHandle: UIDropSession) -> Bool\nAsks your delegate whether it can accept the specified type of data.\nProviding a custom drop preview\nfunc tableView(UITableView, dropPreviewParametersForRowAt: IndexPath) -> UIDragPreviewParameters?\nReturns custom information about how to display the row at the specified location during the drop.\nIncorporating the dropped data\nfunc tableView(UITableView, performDropWith: UITableViewDropCoordinator)\nIncorporates the dropped data into your data structures and updates the table.\n\nRequired\n\nTracking the drag movements\nfunc tableView(UITableView, dropSessionDidUpdate: UIDropSession, withDestinationIndexPath: IndexPath?) -> UITableViewDropProposal\nProposes how to handle a drop at the specified location in the table view.\nfunc tableView(UITableView, dropSessionDidEnter: UIDropSession)\nNotifies the delegate when dragged content enters the table view’s bounds rectangle.\nfunc tableView(UITableView, dropSessionDidExit: UIDropSession)\nNotifies the delegate when dragged content exits the table view’s bounds rectangle.\nfunc tableView(UITableView, dropSessionDidEnd: UIDropSession)\nNotifies the delegate when the drag operation ends.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nDrag and drop\nSupporting drag and drop in table views\nInitiate drags and handle drops from a table view.\nAdopting Drag and Drop in a Table View\nDemonstrates how to enable and implement drag and drop for a table view.\nprotocol UITableViewDragDelegate\nThe interface for initiating drags from a table view.\nprotocol UITableViewDropCoordinator\nAn interface for coordinating your custom drop-related actions with the table view.\nprotocol UITableViewDropItem\nThe data associated with an item being dropped into the table view.\nclass UITableViewDropProposal\nYour proposed solution for handling a drop in a table view."
  },
  {
    "title": "UITableViewDiffableDataSource | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdiffabledatasource",
    "html": "Overview\n\nA diffable data source object is a specialized type of data source that works together with your table view object. It provides the behavior you need to manage updates to your table view’s data and UI in a simple, efficient way. It also conforms to the UITableViewDataSource protocol and provides implementations for all of the protocol’s methods.\n\nTo fill a table view with data:\n\nConnect a diffable data source to your table view.\n\nImplement a cell provider to configure your table view’s cells.\n\nGenerate the current state of the data.\n\nDisplay the data in the UI.\n\nTo connect a diffable data source to a table view, you create the diffable data source using its init(tableView:cellProvider:) initializer, passing in the table view you want to associate with that data source. You also pass in a cell provider, where you configure each of your cells to determine how to display your data in the UI.\n\ndataSource = UITableViewDiffableDataSource<Int, UUID>(tableView: tableView) {\n    (tableView: UITableView, indexPath: IndexPath, itemIdentifier: UUID) -> UITableViewCell? in\n    // configure and return cell\n}\n\n\nThen, you generate the current state of the data and display the data in the UI by constructing and applying a snapshot. For more information, see NSDiffableDataSourceSnapshot.\n\nImportant\n\nDo not change the dataSource on the table view after you configure it with a diffable data source. If the table view needs a new data source after you configure it initially, create and configure a new table view and diffable data source.\n\nTopics\nCreating a diffable data source\ninit(tableView: UITableView, cellProvider: UITableViewDiffableDataSource<SectionIdentifierType, ItemIdentifierType>.CellProvider)\nCreates a diffable data source with the specified cell provider, and connects it to the specified table view.\ntypealias UITableViewDiffableDataSource.CellProvider\nA closure that configures and returns a cell for a table view from its diffable data source.\nIdentifying items\nfunc itemIdentifier(for: IndexPath) -> ItemIdentifierType?\nReturns an identifier for the item at the specified index path in the table view.\nfunc indexPath(for: ItemIdentifierType) -> IndexPath?\nReturns an index path for the item with the specified identifier in the table view.\nIdentifying sections\nfunc sectionIdentifier(for: Int) -> SectionIdentifierType?\nReturns an identifier for the section at the index you specify in the table view.\nfunc index(for: SectionIdentifierType) -> Int?\nReturns an index for the section with the identifier you specify in the table view.\nUpdating data\nfunc snapshot() -> NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType>\nReturns a representation of the current state of the data in the table view.\nfunc apply(NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType>, animatingDifferences: Bool)\nUpdates the UI to reflect the state of the data in the snapshot, optionally animating the UI changes.\nfunc apply(NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType>, animatingDifferences: Bool, completion: (() -> Void)?)\nUpdates the UI to reflect the state of the data in the snapshot, optionally animating the UI changes and executing a completion handler.\nfunc applySnapshotUsingReloadData(NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType>)\nResets the UI to reflect the state of the data in the snapshot without computing a diff or animating the changes.\nfunc applySnapshotUsingReloadData(NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType>, completion: (() -> Void)?)\nResets the UI to reflect the state of the data in the snapshot without computing a diff or animating the changes, optionally executing a completion handler.\nvar defaultRowAnimation: UITableView.RowAnimation\nThe default type of animation to use when inserting or deleting rows.\nSupporting bridging\nclass UITableViewDiffableDataSourceReference\nThe Swift representation of the Objective-C object you use to manage data and provide items for a table view.\nSupporting protocol requirements\nProtocol implementations\nAccess the diffable data source’s implementations of protocol methods.\nRelationships\nInherits From\nNSObject\nConforms To\nUITableViewDataSource\nSee Also\nData\nFilling a table with data\nCreate and configure cells for your table dynamically using a data source object, or provide them statically from your storyboard.\nAsynchronously Loading Images into Table and Collection Views\nStore and fetch images asynchronously to make your app more responsive.\nprotocol UITableViewDataSource\nThe methods that an object adopts to manage data and provide cells for a table view.\nprotocol UITableViewDataSourcePrefetching\nA protocol that provides advance warning of the data requirements for a table view, allowing you to start potentially long-running data operations early.\nstruct NSDiffableDataSourceSnapshot\nA representation of the state of the data in a view at a specific point in time.\nclass UILocalizedIndexedCollation\nAn object that organizes, sorts, and localizes the data for a table view that has a section index.\nprotocol UIDataSourceTranslating\nAn advanced interface for managing a data source object.\nclass UIRefreshControl\nA standard control that can initiate the refreshing of a scroll view’s contents."
  },
  {
    "title": "UITableViewDataSourcePrefetching | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdatasourceprefetching",
    "html": "Overview\n\nYou use a prefetch data source object in conjunction with your table view’s data source to begin loading data for cells before the tableView(_:cellForRowAt:) data source method is called. The following steps are required to support a prefetch data source to your table view:\n\nCreate the table view and its regular data source.\n\nCreate an object that adopts the UITableViewDataSourcePrefetching protocol, and assign it to the prefetchDataSource property on the table view.\n\nInitiate asynchronous loading of the data required for the cells at the specified index paths in your implementation of tableView(_:prefetchRowsAt:).\n\nPrepare the cell for display using the prefetched data in your tableView(_:cellForRowAt:) data source method.\n\nCancel pending data load operations when the table view informs you that the data is no longer required in the tableView(_:cancelPrefetchingForRowsAt:) method.\n\nNote\n\nThe prefetch method isn’t necessarily called for every cell in the table view. For details about a suggested approach to loading data, see Load data asynchronously.\n\nWhen configuring the table view object, assign your prefetch data source to its prefetchDataSource property. For more information about how a table view works, see UITableView.\n\nLoad data asynchronously\n\nThe tableView(_:prefetchRowsAt:) method isn’t necessarily called for every cell in the table view. Your implementation of tableView(_:cellForRowAt:) must therefore be able to cope with the following potential situations:\n\nData has been loaded via the prefetch request, and is ready to be displayed.\n\nData is currently being prefetched, but isn’t yet available.\n\nData hasn’t yet been requested.\n\nOne approach that handles all of these situations is to use Operation to load the data for each row. You create the Operation object and store it in the prefetch method. The data source method can then either retrieve the operation and the result, or create it if it doesn’t exist. For further information about how you can use asynchronous programming models to achieve this desired behavior, see Concurrency Programming Guide.\n\nTopics\nFetching the row data\nfunc tableView(UITableView, prefetchRowsAt: [IndexPath])\nInstructs your prefetch data source object to begin preparing data for the cells at the supplied index paths.\n\nRequired\n\nfunc tableView(UITableView, cancelPrefetchingForRowsAt: [IndexPath])\nCancels a previously triggered data prefetch request.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nData\nFilling a table with data\nCreate and configure cells for your table dynamically using a data source object, or provide them statically from your storyboard.\nAsynchronously Loading Images into Table and Collection Views\nStore and fetch images asynchronously to make your app more responsive.\nprotocol UITableViewDataSource\nThe methods that an object adopts to manage data and provide cells for a table view.\nclass UITableViewDiffableDataSource\nThe object you use to manage data and provide cells for a table view.\nstruct NSDiffableDataSourceSnapshot\nA representation of the state of the data in a view at a specific point in time.\nclass UILocalizedIndexedCollation\nAn object that organizes, sorts, and localizes the data for a table view that has a section index.\nprotocol UIDataSourceTranslating\nAn advanced interface for managing a data source object.\nclass UIRefreshControl\nA standard control that can initiate the refreshing of a scroll view’s contents."
  },
  {
    "title": "data | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsdataasset/1403437-data",
    "html": "Discussion\n\nFor more information on accessing structured data, see Access the data."
  },
  {
    "title": "name | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsdataasset/1403435-name",
    "html": "See Also\nGetting data asset information\ntypealias NSDataAssetName\nThe name of a data asset.\nvar typeIdentifier: String\nThe uniform type identifier for the data asset."
  },
  {
    "title": "init(name:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsdataasset/1403439-init",
    "html": "Parameters\nname\n\nThe name of the data set in the asset catalog.\n\nReturn Value\n\nThe data asset object for the named data set, or nil if the data set is not found.\n\nDiscussion\n\nIf there are multiple data files in the named data set, this method returns the one with attributes that most closely match the current device available screen space.\n\nThis method looks in the asset catalog, in the main bundle for the named data set.\n\nSee Also\nInitializing the data asset\ninit?(name: NSDataAssetName, bundle: Bundle)\nInitializes and returns an object with a reference to the named data asset that’s in an asset catalog in the specified bundle."
  },
  {
    "title": "unwindAction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistoryboardunwindseguesource/1621915-unwindaction",
    "html": "Discussion\n\nEach unwind segue has an associated action method. The view controller that’s the destination of the unwind segue must implement this action method.\n\nSee Also\nGetting the unwind segue attributes\nvar source: UIViewController\nThe view controller being dismissed by the unwind segue.\nvar sender: Any?\nThe object that performed the unwind action."
  },
  {
    "title": "source | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistoryboardunwindseguesource/1621917-source",
    "html": "See Also\nGetting the unwind segue attributes\nvar unwindAction: Selector\nThe action method associated with the unwind segue.\nvar sender: Any?\nThe object that performed the unwind action."
  },
  {
    "title": "init(style:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiblureffect/1615060-init",
    "html": "Parameters\nstyle\n\nThe intensity of the blur effect. See UIBlurEffect.Style for valid options.\n\nReturn Value\n\nThe blur effect to be used by a UIVisualEffectView object."
  },
  {
    "title": "instantiate(withOwner:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uinib/1614137-instantiate",
    "html": "Parameters\nownerOrNil\n\nThe object to use as the owner of the nib file. If the nib file has an owner, you must specify a valid object for this parameter.\n\noptionsOrNil\n\nA dictionary containing the options to use when opening the nib file. For a list of available keys for this dictionary, see NSBundle UIKit Additions.\n\nReturn Value\n\nAn autoreleased NSArray object containing the top-level objects from the nib file.\n\nDiscussion\n\nYou can use this method to instantiate the objects in a nib and provide them to your code. This method unarchives each object, initializes it, sets its properties to their configured values, and reestablishes any connections to other objects. For detailed information about the nib-loading process, see Resource Programming Guide.\n\nIf the nib file contains any proxy objects beyond just the File’s Owner proxy object, you can specify the runtime replacement objects for those proxies using the options dictionary. In that dictionary, add the externalObjects key and set its value to a dictionary containing the names of any proxy objects (the keys) and the real objects to use in their place. The proxy object’s name is the string you assign to it in the Name field of the Interface Builder inspector window.\n\nSee Also\nRetrieving objects from the nib file\nstruct UINib.OptionsKey\nOptions that specify how to unarchive and instantiate the nib."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uirefreshcontrol/1624846-init",
    "html": "Return Value\n\nAn initialized refresh control.\n\nDiscussion\n\nThe returned refresh control is configured with a default height and width. After you assign the control to a view controller object, the frame of the control is adjusted to match and is managed thereafter."
  },
  {
    "title": "tintColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uirefreshcontrol/1624847-tintcolor",
    "html": "Discussion\n\nThe default value of this property is nil.\n\nSee Also\nAccessing the control attributes\nvar attributedTitle: NSAttributedString?\nThe styled title text to display in the refresh control."
  },
  {
    "title": "isRefreshing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uirefreshcontrol/1624844-isrefreshing",
    "html": "See Also\nManaging the refresh status\nfunc beginRefreshing()\nTells the control that a refresh operation was started programmatically.\nfunc endRefreshing()\nTells the control that a refresh operation has ended."
  },
  {
    "title": "attributedTitle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uirefreshcontrol/1624845-attributedtitle",
    "html": "Discussion\n\nThe default value of this property is nil.\n\nSee Also\nAccessing the control attributes\nvar tintColor: UIColor!\nThe tint color for the refresh control."
  },
  {
    "title": "beginRefreshing() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uirefreshcontrol/1624842-beginrefreshing",
    "html": "Discussion\n\nCall this method when an external event source triggers a programmatic refresh of your scrolling view. In a table view, for example, if you use an instance of Timer to refresh the contents of the table view periodically, you would call this method as part of your timer handler. This method updates the state of the refresh control to reflect the in-progress refresh operation. When the refresh operation ends, be sure to call the endRefreshing() method to return the control to its default state.\n\nSee Also\nManaging the refresh status\nfunc endRefreshing()\nTells the control that a refresh operation has ended.\nvar isRefreshing: Bool\nA Boolean value indicating whether a refresh operation has been triggered and is in progress."
  },
  {
    "title": "message | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivity/activitytype/1620655-message",
    "html": "Discussion\n\nWhen using this service, you can provide NSString and NSAttributedString objects as data for the activity items. You may also specify NSURL objects whose contents use the sms scheme.\n\nIf the device has MMS or FaceTime enabled, you can provide UIImage, and NSURL objects as data for the activity items.\n\nTo specify an NSData object, you must implement the UIActivityItemSource protocol, return the data object in activityViewController(_:itemForActivityType:), and return the data object’s UTI in activityViewController(_:dataTypeIdentifierForActivityType:)."
  },
  {
    "title": "UISwitch.Style.sliding | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiswitch/style/sliding",
    "html": "See Also\nStyles\ncase automatic\nA style indicating that the system chooses the appearance of the switch according to the current user interface idiom.\ncase checkbox\nA style indicating that the switch appears as a Mac-style checkbox."
  },
  {
    "title": "init(barButtonItems:representativeItem:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibarbuttonitemgroup/1623559-init",
    "html": "Parameters\nbarButtonItems\n\nThe bar button items to display on the bar. Typically, the items in a group are related to each other in some way, although that need not be the case. You must not specify an empty array.\n\nrepresentativeItem\n\nA bar button item to display when there isn’t enough room to display the items in barButtonItems. The object you specify must be distinct from the objects in the barButtonItems parameter. It’s a programmer error to specify an object that’s also in the array passed to the barButtonItems parameter. You may specify nil for this parameter.\n\nReturn Value\n\nAn initialized bar button item group.\n\nDiscussion\n\nWhen you use this initializer to create a group for a navigation bar, it produces the same result as fixedGroup(representativeItem:items:).\n\nWhen you use this initializer to create a group for the shortcuts bar, use the resulting group object to configure the leadingBarButtonGroups or trailingBarButtonGroups property of a UITextInputAssistantItem object.\n\nSee Also\nCreating a group\nclass func fixedGroup(representativeItem: UIBarButtonItem?, items: [UIBarButtonItem]) -> UIBarButtonItemGroup\nCreates a fixed group that a person can’t move or remove from the navigation bar during layout customization.\nclass func movableGroup(customizationIdentifier: String, representativeItem: UIBarButtonItem?, items: [UIBarButtonItem]) -> UIBarButtonItemGroup\nCreates a movable group that a person can move but can’t remove from the navigation bar during layout customization.\nclass func optionalGroup(customizationIdentifier: String, isInDefaultCustomization: Bool, representativeItem: UIBarButtonItem?, items: [UIBarButtonItem]) -> UIBarButtonItemGroup\nCreates an optional group that a person can move, add to, or remove from the navigation bar during layout customization.\ninit?(coder: NSCoder)\nCreates a bar button item group from data in an unarchiver."
  },
  {
    "title": "supportsAlpha | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolorwell/3600473-supportsalpha",
    "html": "Discussion\n\nIf this property is false, people can only pick fully opaque colors from the color picker.\n\nSee Also\nConfiguring color picker attributes\nvar title: String?\nThe title for the color picker.\nvar selectedColor: UIColor?\nThe selected color in the color picker."
  },
  {
    "title": "errorCode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprinterror/2999424-errorcode",
    "html": "See Also\nGetting error information\nstatic var errorDomain: String\nThe printing error domain.\nvar code: Code\nThe printing error code.\nvar userInfo: [String : Any]\nThe printing error user information.\nvar errorUserInfo: [String : Any]\nThe printing error user information.\nvar localizedDescription: String\nA localized description of the printing error."
  },
  {
    "title": "userInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprinterror/3727772-userinfo",
    "html": "See Also\nGetting error information\nstatic var errorDomain: String\nThe printing error domain.\nvar errorCode: Int\nThe printing error code.\nvar code: Code\nThe printing error code.\nvar errorUserInfo: [String : Any]\nThe printing error user information.\nvar localizedDescription: String\nA localized description of the printing error."
  },
  {
    "title": "localizedDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprinterror/2999429-localizeddescription",
    "html": "See Also\nGetting error information\nstatic var errorDomain: String\nThe printing error domain.\nvar errorCode: Int\nThe printing error code.\nvar code: Code\nThe printing error code.\nvar userInfo: [String : Any]\nThe printing error user information.\nvar errorUserInfo: [String : Any]\nThe printing error user information."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprinterror/3727767",
    "html": "See Also\nComparing print errors\nstatic func != (UIPrintError, UIPrintError) -> Bool\nReturns a Boolean value that indicates whether two values are unequal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the error by feeding them into the given hash function.\nvar hashValue: Int\nThe hashed value of the error."
  },
  {
    "title": "errorUserInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprinterror/2999427-erroruserinfo",
    "html": "See Also\nGetting error information\nstatic var errorDomain: String\nThe printing error domain.\nvar errorCode: Int\nThe printing error code.\nvar code: Code\nThe printing error code.\nvar userInfo: [String : Any]\nThe printing error user information.\nvar localizedDescription: String\nA localized description of the printing error."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibarbuttonitemgroup/1623562-init",
    "html": "See Also\nCreating a group\nclass func fixedGroup(representativeItem: UIBarButtonItem?, items: [UIBarButtonItem]) -> UIBarButtonItemGroup\nCreates a fixed group that a person can’t move or remove from the navigation bar during layout customization.\nclass func movableGroup(customizationIdentifier: String, representativeItem: UIBarButtonItem?, items: [UIBarButtonItem]) -> UIBarButtonItemGroup\nCreates a movable group that a person can move but can’t remove from the navigation bar during layout customization.\nclass func optionalGroup(customizationIdentifier: String, isInDefaultCustomization: Bool, representativeItem: UIBarButtonItem?, items: [UIBarButtonItem]) -> UIBarButtonItemGroup\nCreates an optional group that a person can move, add to, or remove from the navigation bar during layout customization.\ninit(barButtonItems: [UIBarButtonItem], representativeItem: UIBarButtonItem?)\nCreates a fixed group with the specified items."
  },
  {
    "title": "init(identifier:source:destination:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistoryboardsegue/1621908-init",
    "html": "Parameters\nidentifier\n\nThe identifier you want to associate with this particular instance of the segue. You can use this identifier to differentiate one type of segue from another at runtime.\n\nsource\n\nThe view controller visible at the start of the segue.\n\ndestination\n\nThe view controller to display after the completion of the segue.\n\nReturn Value\n\nAn initialized segue object.\n\nDiscussion\n\nThis method is the designated initializer for segue objects. If you subclass UIStoryboardSegue, you can override this method and perform any custom initialization in your implementation. Your implementation should call super first and then proceed if that method doesn’t return nil.\n\nSee Also\nRelated Documentation\nView Controller Programming Guide for iOS"
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageasset/1624978-init",
    "html": "See Also\nInitializing an image asset\ninit()\nCreates a new image asset object."
  },
  {
    "title": "source | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistoryboardsegue/1621918-source",
    "html": "Discussion\n\nThis property contains the view controller whose contents are displayed at the beginning of the segue.\n\nSee Also\nAccessing the segue attributes\nvar destination: UIViewController\nThe destination view controller for the segue.\nvar identifier: String?\nThe identifier for the segue object."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageasset/1624977-init",
    "html": "Return Value\n\nA new image asset object.\n\nSee Also\nInitializing an image asset\ninit?(coder: NSCoder)\nCreates an image asset from data in an unarchiver."
  },
  {
    "title": "init(identifier:source:destination:performHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistoryboardsegue/1621910-init",
    "html": "Parameters\nidentifier\n\nThe identifier you want to associate with this particular instance of the segue. You can use this identifier to differentiate one type of segue from another at runtime.\n\nsource\n\nThe view controller visible at the start of the segue.\n\ndestination\n\nThe view controller to display after the completion of the segue.\n\nperformHandler\n\nA block to be called when the segue’s perform() method is called.\n\nReturn Value\n\nAn initialized segue object.\n\nDiscussion\n\nYou use this method as an alternative to creating a subclass. Your perform handler should do all of the work necessary to transition between the source and destination view controllers, exactly as if you were implementing the perform() method.\n\nSee Also\nRelated Documentation\nfunc perform()\nPerforms the visual transition for the segue."
  },
  {
    "title": "UIUserInterfaceIdiom.tv | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiuserinterfaceidiom/tv",
    "html": "See Also\nIdioms\ncase unspecified\nAn unspecified idiom.\ncase phone\nAn interface designed for iPhone and iPod touch.\ncase pad\nAn interface designed for iPad.\ncase carPlay\nAn interface designed for an in-car experience.\ncase mac\nAn interface designed for the Mac.\ncase vision\nAn interface designed for visionOS and Apple Vision Pro."
  },
  {
    "title": "UITableViewDropPlaceholderContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdropplaceholdercontext",
    "html": "Overview\n\nDon’t create instances of this class yourself. Instead, call drop(_:to:) from your drop coordinator object. That method inserts a placeholder cell into the table and returns a UITableViewDropPlaceholderContext object for managing that placeholder.\n\nWhen you’re ready to swap a placeholder cell for a cell with the actual data, call the commitInsertion(dataSourceUpdates:) method of the context object. To remove the placeholder cell without providing a replacement, call deletePlaceholder() instead.\n\nTopics\nUpdating the placeholder cell\nfunc commitInsertion(dataSourceUpdates: (IndexPath) -> Void) -> Bool\nExchanges the placeholder cell for a cell with the final content.\n\nRequired\n\nRemoving the placeholder cell\nfunc deletePlaceholder() -> Bool\nRemoves an unneeded placeholder cell from the table view.\n\nRequired\n\nGetting the drag item\nvar dragItem: UIDragItem\nThe drag item represented by the placeholder cell.\n\nRequired\n\nRelationships\nInherits From\nUIDragAnimating\nSee Also\nPlaceholder cells\nclass UITableViewDropPlaceholder\nA placeholder cell that supports customizing the drop preview parameters.\nclass UITableViewPlaceholder\nAn object that contains information about a placeholder cell being inserted into a table."
  },
  {
    "title": "enabledStatusDidChangeNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilargecontentviewerinteraction/3183930-enabledstatusdidchangenotificati",
    "html": "Discussion\n\nObserve this notification to know whether to enable or disable your custom interaction behaviors. For example, if you add an interaction to a button that needs to cooperate with other gesture recognizers when the large content viewer settings are enabled. This notification lets you enable or disable the interaction accordingly.\n\nSee Also\nDetecting the large content viewer\nclass var isEnabled: Bool\nA Boolean value that indicates whether the large content viewer is enabled on the device."
  },
  {
    "title": "UITableViewPlaceholder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewplaceholder",
    "html": "Overview\n\nDuring a drop operation, create a UITableViewDropPlaceholder object (instead of this one) to insert placeholders into your table.\n\nTopics\nCreating a placeholder cell\ninit(insertionIndexPath: IndexPath, reuseIdentifier: String, rowHeight: CGFloat)\nCreates a placeholder object with the specified index path and cell-related information.\nUpdating the cell's content\nvar cellUpdateHandler: ((UITableViewCell) -> Void)?\nThe block that updates the contents of the placeholder cell.\nRelationships\nInherits From\nNSObject\nSee Also\nPlaceholder cells\nprotocol UITableViewDropPlaceholderContext\nAn object for tracking a placeholder cell that you added to your table during a drop operation.\nclass UITableViewDropPlaceholder\nA placeholder cell that supports customizing the drop preview parameters."
  },
  {
    "title": "isEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilargecontentviewerinteraction/3183923-isenabled",
    "html": "Discussion\n\nIt isn’t necessary to check this value before adding a UILargeContentViewerInteraction to a view, but it may be helpful if you need to adjust the behavior of coexisting gesture handlers. For example, a button with a long press handler might increase its long press duration so the user can read the text in the large content viewer first.\n\nSee Also\nDetecting the large content viewer\nclass let enabledStatusDidChangeNotification: NSNotification.Name\nA notification the system posts when it enables or disables the large content viewer."
  },
  {
    "title": "UITableViewHeaderFooterView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewheaderfooterview",
    "html": "Overview\n\nUse UITableViewHeaderFooterView objects to manage the header and footer content of your table’s sections efficiently. A header-footer view is a reusable view that you can subclass or use as is. To configure the content and appearance of a header-footer view, you can set its contentConfiguration and backgroundConfiguration.\n\nTo promote the reuse of your header-footer views, register them by calling the register(_:forHeaderFooterViewReuseIdentifier:) or register(_:forHeaderFooterViewReuseIdentifier:) method of the table view. In the tableView(_:viewForHeaderInSection:) or tableView(_:viewForFooterInSection:) method of your delegate object, call the table view’s dequeueReusableHeaderFooterView(withIdentifier:) method to create your view. That method returns a recycled view (if one is available) or creates a new view using the information you registered.\n\nA simple alternative to creating custom header-footer views is to implement the tableView(_:titleForHeaderInSection:) and tableView(_:titleForFooterInSection:) methods of your data source object. When you implement those methods, the table view creates a standard header or footer view and displays the text you supply.\n\nTopics\nCreating the view\ninit(reuseIdentifier: String?)\nInitializes a header-footer view with the specified reuse identifier.\ninit?(coder: NSCoder)\nCreates a header-footer view from data in an unarchiver.\nManaging view reuse\nvar reuseIdentifier: String?\nA string used to identify a reusable header or footer.\nfunc prepareForReuse()\nPrepares a reusable header or footer view for reuse by the table.\nConfiguring the background\nfunc defaultBackgroundConfiguration() -> UIBackgroundConfiguration\nRetrieves a background configuration with system default values.\nvar backgroundConfiguration: UIBackgroundConfiguration?\nThe current background configuration of the view.\nvar automaticallyUpdatesBackgroundConfiguration: Bool\nA Boolean value that determines whether the view automatically updates its background configuration when its state changes.\nvar backgroundView: UIView?\nThe background view of the header or footer.\nManaging the content\nfunc defaultContentConfiguration() -> UIListContentConfiguration\nRetrieves a default list content configuration for the view’s style.\nvar contentConfiguration: (UIContentConfiguration)?\nThe current content configuration of the view.\nvar automaticallyUpdatesContentConfiguration: Bool\nA Boolean value that determines whether the view automatically updates its content configuration when its state changes.\nvar contentView: UIView\nThe content view of the header or footer.\nManaging the state\nvar configurationState: UIViewConfigurationState\nThe current configuration state of the view.\nfunc setNeedsUpdateConfiguration()\nInforms the view to update its configuration for its current state.\nfunc updateConfiguration(using: UIViewConfigurationState)\nUpdates the view’s configuration using the current state.\nvar configurationUpdateHandler: UITableViewHeaderFooterView.ConfigurationUpdateHandler?\nA block for handling updates to the view’s configuration using the current state.\ntypealias UITableViewHeaderFooterView.ConfigurationUpdateHandler\nThe type of block for handling updates to the view’s configuration using the current state.\nDeprecated\nvar textLabel: UILabel?\nA primary text label for the view.\nDeprecated\nvar detailTextLabel: UILabel?\nA detail text label for the view.\nDeprecated\nRelationships\nInherits From\nUIView\nSee Also\nCells, headers, and footers\nConfiguring the cells for your table\nSpecify the appearance and content of your table’s rows by defining one or more prototype cells in your storyboard.\nCreating Self-Sizing Table View Cells\nCreate table view cells that support Dynamic Type and use system spacing constraints to adjust the spacing surrounding text labels.\nAdding headers and footers to table sections\nDifferentiate groups of rows visually by adding header and footer views to your table view’s sections.\nclass UITableViewCell\nThe visual representation of a single row in a table view."
  },
  {
    "title": "UIContextualAction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontextualaction",
    "html": "Overview\n\nCreate UIContextualAction objects to define the types of actions that can be performed when the user swipes left or right on a table row. Use your actions to initialize a UISwipeActionsConfiguration object in your table view delegate object.\n\nTopics\nCreating the contextual action\ninit(style: UIContextualAction.Style, title: String?, handler: UIContextualAction.Handler)\nCreates a new contextual action with the specified title and handler.\nConfiguring the appearance\nvar title: String?\nThe title displayed on the action button.\nvar backgroundColor: UIColor!\nThe background color of the action button.\nvar image: UIImage?\nThe image to display in the action button.\nGetting the configuration details\nvar handler: UIContextualAction.Handler\nThe handler block to execute when the user selects the action.\ntypealias UIContextualAction.Handler\nThe handler block to call in response to the selection of an action.\nvar style: UIContextualAction.Style\nThe style that applies to the action button.\nenum UIContextualAction.Style\nConstants indicating the style information that applies to the action button.\nRelationships\nInherits From\nNSObject\nSee Also\nRow actions\nclass UISwipeActionsConfiguration\nThe set of actions to perform when swiping on rows of a table.\nclass UITableViewRowAction\nA single action to present when the user swipes horizontally in a table row.\nDeprecated"
  },
  {
    "title": "UISwipeActionsConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiswipeactionsconfiguration",
    "html": "Overview\n\nCreate a UISwipeActionsConfiguration object to associate custom swipe actions with a row of your table view. Users swipe horizontally left or right in a table view to reveal the actions associated with a row. Each swipe-actions object contains the set of actions to display for each type of swipe.\n\nTo add custom actions to your table view’s rows, implement the tableView(_:leadingSwipeActionsConfigurationForRowAt:) or tableView(_:trailingSwipeActionsConfigurationForRowAt:) method of your table view’s delegate. In those methods, create and return the actions for the indicated row. The table displays your action buttons and executes the appropriate handler block when the user taps one of them.\n\nTopics\nInitializing the swipe actions\ninit(actions: [UIContextualAction])\nCreates a swipe action configuration object with the specified set of actions.\nGetting the swipe action information\nvar actions: [UIContextualAction]\nThe swipe actions.\nvar performsFirstActionWithFullSwipe: Bool\nA Boolean value indicating whether a full swipe automatically performs the first action.\nRelationships\nInherits From\nNSObject\nSee Also\nRow actions\nclass UIContextualAction\nAn action to display when the user swipes a table row.\nclass UITableViewRowAction\nA single action to present when the user swipes horizontally in a table row.\nDeprecated"
  },
  {
    "title": "UITableViewRowAction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewrowaction",
    "html": "Deprecated\n\nUse UISwipeActionsConfiguration instead.\n\nOverview\n\nCreate a UITableViewRowAction object to define a single, custom action for a table row. Users swipe horizontally in a table view to reveal the actions associated with a row. Each row-action object contains the text display, the action to perform, and any specific formatting to apply to that action.\n\nTo add custom actions to your table view’s rows, implement the tableView(_:editActionsForRowAt:) method in your table view’s delegate object. In that method, create and return the actions for the indicated row. The table displays your action buttons and executes the appropriate handler block when the user taps one of them.\n\nTopics\nCreating a table row action\ninit(style: UITableViewRowAction.Style, title: String?, handler: (UITableViewRowAction, IndexPath) -> Void)\nCreates and returns a new table view row action object.\nConfiguring the action’s appearance\nvar style: UITableViewRowAction.Style\nThe style applied to the action button.\nenum UITableViewRowAction.Style\nConstants that specify the appearance of action buttons.\nvar title: String?\nThe title of the action button.\nvar backgroundColor: UIColor?\nThe background color of the action button.\nvar backgroundEffect: UIVisualEffect?\nThe visual effect to apply to the button.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nSee Also\nRow actions\nclass UISwipeActionsConfiguration\nThe set of actions to perform when swiping on rows of a table.\nclass UIContextualAction\nAn action to display when the user swipes a table row."
  },
  {
    "title": "Adding headers and footers to table sections | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/views_and_controls/table_views/adding_headers_and_footers_to_table_sections",
    "html": "Overview\n\nUse header and footer views as visual markers for the beginning and end of sections. Header and footer views are optional, and you can customize them as much or as little as you want.\n\nTo create a basic header or footer with a text label, override the tableView(_:titleForHeaderInSection:) or tableView(_:titleForFooterInSection:) method of your table’s data source object. The table view creates a standard header or footer for you and inserts it into the table at the specified location.\n\n// Create a standard header that includes the returned text.\noverride func tableView(_ tableView: UITableView, titleForHeaderInSection \n                            section: Int) -> String? {\n   return \"Header \\(section)\"\n}\n\n\n// Create a standard footer that includes the returned text.\noverride func tableView(_ tableView: UITableView, titleForFooterInSection \n                            section: Int) -> String? {\n   return \"Footer \\(section)\"\n}\n\n\n\n\nNote\n\nHeaders and footers normally apply to a single section, but you can also provide a single header or footer view for the entire table by using the tableHeaderView or tableFooterView properties of your table view. The global header appears at the top of your table’s content, and the global footer appears at the bottom.\n\nCustomize the header and footer views\n\nCustom header and footer views give the sections of your table a unique appearance. With custom headers and footers, you specify the views you want and position them anywhere within the allotted space. You can also provide different header or footer views for different sections of your table.\n\nTo create custom header or footer views:\n\nUse UITableViewHeaderFooterView objects to define the appearance of your headers and footers.\n\nRegister your UITableViewHeaderFooterView objects with your table view.\n\nImplement the tableView(_:viewForHeaderInSection:) and tableView(_:viewForFooterInSection:) methods in your table view delegate object to create and configure your views.\n\nAlways use a UITableViewHeaderFooterView object for your headers and footers. That view supports the same reuse model that cells employ, allowing you to recycle views instead of creating them every time. After you register your header or footer view, use the table view’s dequeueReusableHeaderFooterView(withIdentifier:) method to request instances of that view. If recycled header or footer views are available, the table view returns those first, before creating new ones.\n\nYou can use a UITableViewHeaderFooterView object as is and add views to its contentView property, or you can subclass and add your views. Position your subviews inside the content view by using a stack view or Auto Layout constraints. To change the background behind your content, modify the backgroundView property of the header-footer view. The following example code shows a custom header view that positions the image and label views at creation time.\n\nclass MyCustomHeader: UITableViewHeaderFooterView {\n    let title = UILabel()\n    let image = UIImageView()\n\n\n    override init(reuseIdentifier: String?) {\n        super.init(reuseIdentifier: reuseIdentifier)\n        configureContents()\n    }\n\n\n    func configureContents() {\n        image.translatesAutoresizingMaskIntoConstraints = false\n        title.translatesAutoresizingMaskIntoConstraints = false\n\n\n        contentView.addSubview(image)\n        contentView.addSubview(title)\n\n\n        // Center the image vertically and place it near the leading\n        // edge of the view. Constrain its width and height to 50 points.\n        NSLayoutConstraint.activate([\n            image.leadingAnchor.constraint(equalTo: contentView.layoutMarginsGuide.leadingAnchor),\n            image.widthAnchor.constraint(equalToConstant: 50),\n            image.heightAnchor.constraint(equalToConstant: 50),\n            image.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n        \n            // Center the label vertically, and use it to fill the remaining\n            // space in the header view. \n            title.heightAnchor.constraint(equalToConstant: 30),\n            title.leadingAnchor.constraint(equalTo: image.trailingAnchor, \n                   constant: 8),\n            title.trailingAnchor.constraint(equalTo: \n                   contentView.layoutMarginsGuide.trailingAnchor),\n            title.centerYAnchor.constraint(equalTo: contentView.centerYAnchor)\n        ])\n    }\n}\n\n\nRegister your header view as part of configuring your table view.\n\noverride func viewDidLoad() {\n   super.viewDidLoad()\n   \n   // Register the custom header view.\n   tableView.register(MyCustomHeader.self, \n       forHeaderFooterViewReuseIdentifier: \"sectionHeader\")\n}\n\n\nIn your delegate’s tableView(_:viewForHeaderInSection:) method, create and configure your custom view. The following example code dequeues the registered custom header and configures its title and image properties.\n\noverride func tableView(_ tableView: UITableView, \n        viewForHeaderInSection section: Int) -> UIView? {\n   let view = tableView.dequeueReusableHeaderFooterView(withIdentifier:\n               \"sectionHeader\") as! MyCustomHeader\n   view.title.text = sections[section]\n   view.image.image = UIImage(named: sectionImages[section])\n\n\n   return view\n}\n\n\nThe following image shows the resulting headers.\n\nChange the height of headers and footers\n\nA table view tracks the height of section headers and footers separately from the views that represent them. UITableView provides default sizes for both items. If all of your headers (or all of your footers) are the same height, specify that height using the table view’s sectionHeaderHeight and sectionFooterHeight properties, or use the default values provided by the table view.\n\nIf your header or footer heights aren’t all the same, or can change dynamically, provide the heights using the tableView(_:heightForHeaderInSection:) and tableView(_:heightForFooterInSection:) methods of your delegate object. When you implement these methods, you must provide values for every header and footer in your table. The table view asks for the heights of visible headers and footers only. As the user scrolls, the table view asks you to provide the height for each one as it appears, including when it moves offscreen and then back onscreen.\n\nSee Also\nCells, headers, and footers\nConfiguring the cells for your table\nSpecify the appearance and content of your table’s rows by defining one or more prototype cells in your storyboard.\nCreating Self-Sizing Table View Cells\nCreate table view cells that support Dynamic Type and use system spacing constraints to adjust the spacing surrounding text labels.\nclass UITableViewCell\nThe visual representation of a single row in a table view.\nclass UITableViewHeaderFooterView\nA reusable view that you place at the top or bottom of a table section to display additional information for that section.\nRelated Documentation\nEstimating the height of a table's scrolling area\nProvide height estimates for your table view’s headers, footers, and rows to ensure that scrolling accurately reflects the size of your content."
  },
  {
    "title": "Configuring the cells for your table | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/views_and_controls/table_views/configuring_the_cells_for_your_table",
    "html": "Overview\n\nCells provide the visual representation of your table’s rows. For most tables, you provide only one or two different types of cells. Design your cells to ensure that the most important information stands out. Do that using a careful choice of views and view configurations in your cells.\n\nYou specify the appearance of cells at design time in your storyboard file. Xcode provides one prototype cell for each table, and you can add more prototype cells as needed. A prototype cell acts a template for your cell’s appearance. It includes the views you want to display and their arrangement within the content area of the cell. At runtime, the table’s data source object creates actual cells from the prototypes and configures them with your app’s data.\n\nFor tips on how to design the appearance of your cells, see Human Interface Guidelines.\n\nAssign a reuse identifier to each cell\n\nReuse identifiers facilitate the creation and recycling of your table’s cells. A reuse identifier is a string that you assign to each prototype cell of your table. In your storyboard, select your prototype cell and assign a nonempty value to its identifier attribute. Each cell in a table view must have a unique reuse identifier.\n\nWhen you need a cell object at runtime, call the table view’s dequeueReusableCell(withIdentifier:for:) method, passing the reuse identifier for the cell you want. The table view maintains an internal queue of already-created cells. If the queue contains a cell of the requested type, the table view returns that cell. If not, it creates a new cell using the prototype cell in your storyboard. Reusing cells improves performance by minimizing memory allocations during critical times, such as during scrolling.\n\nvar cell = tableView.dequeueReusableCell(withIdentifier: \"myCellType\", for: indexPath)\n\n\nConfigure a cell with a built-in style\n\nThe simplest way to configure a cell is to use one of the built-in styles provided by UITableViewCell. You use these styles as is; you don’t need to provide a custom subclass to manage the cell. Each style incorporates one or two labels, with the style determining the positions of the labels within the cell’s content area. Most of the styles also incorporate an image at the leading edge of the cell’s content.\n\nTo configure a prototype cell with one of the standard styles, select the cell in your storyboard and set the cell’s Style property to a value other than custom.\n\nIn your tableView(_:cellForRowAt:) method, configure the content of your cell using the textLabel, detailTextLabel, and imageView properties of UITableViewCell. Those properties contain views, but the cell object only assigns a view if the style supports the corresponding content. For example, the Basic cell style doesn’t support a detail string, so the detailTextLabel property is nil for that style. The following example code shows how to configure a cell that uses the basic cell style.\n\noverride func tableView(_ tableView: UITableView, \n             cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n   // Reuse or create a cell. \n   let cell = tableView.dequeueReusableCell(withIdentifier: \"basicStyle\", for: indexPath)\n\n\n   // For a standard cell, use the UITableViewCell properties.\n   cell.textLabel!.text = \"Title text\"\n   cell.imageView!.image = UIImage(named: \"bunny\")\n   return cell\n}\n\n\nConfigure a cell with custom views\n\nFor appearances other than the standard styles, use the custom cell style. With a custom cell, you specify the views you want in the cell, their configurations, and their sizes and positions. Static views such as labels and images make the best content for cells. Avoid views that require user interactions such as controls. Don’t include scroll views, table views, collection views, or other complex container views in cells. You may include stack views in your cells, but minimize the number of items in your stack view to improve performance.\n\nTo configure a custom cell, drag views into the prototype cell for your table. The following illustration shows a cell with a custom layout and formatting for its views. You use constraints to position your views within the cell’s content area. When setting up constraints, use the “Constrain to margins” option to preserve the gap between the content areas of your cells.\n\nFor custom cells, you need to define a UITableViewCell subclass to access your cell’s views. Add outlets to your subclass and connect those outlets to the corresponding views in your prototype cell.\n\nclass FoodCell: UITableViewCell {\n    @IBOutlet var name : UILabel?\n    @IBOutlet var plantDescription : UILabel?\n    @IBOutlet var picture : UIImageView?\n}\n\n\nIn the tableView(_:cellForRowAt:) method of your data source, use your cell’s outlets to assign values to any views.\n\noverride func tableView(_ tableView: UITableView, \n             cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n\n\n   // Reuse or create a cell of the appropriate type.\n   let cell = tableView.dequeueReusableCell(withIdentifier: \"foodCellType\", \n                         for: indexPath) as! FoodCell\n\n\n   // Fetch the data for the row.\n   let theFood = foods[indexPath.row]\n        \n   // Configure the cell’s contents with data from the fetched object.\n   cell.name?.text = theFood.name\n   cell.plantDescription?.text = theFood.description\n   cell.picture?.image = theFood.picture\n        \n   return cell\n}\n\n\nChange the height of rows\n\nA table view tracks the height of rows separately from the cells that represent them. UITableView provides default sizes for rows, but you can override the default height by assigning a custom value to the table view’s rowHeight property. Always use this property when the height of all of your rows is the same. Doing so is more efficient than returning the height values from your delegate object.\n\nIf the row heights aren’t all the same, or can change dynamically, provide the heights using the tableView(_:heightForRowAt:) method of your delegate object. When you implement this method, you must provide values for every row in your table. The following example code shows how to return a custom height for the first row of each section and use the default height for all other rows.\n\noverride func tableView(_ tableView: UITableView, \n           heightForRowAt indexPath: IndexPath) -> CGFloat {\n   // Make the first row larger to accommodate a custom cell.\n  if indexPath.row == 0 {\n      return 80\n   }\n\n\n   // Use the default size for all other rows.\n   return UITableView.automaticDimension\n}\n\n\nThe table view asks for the heights of visible rows only. As the user scrolls, the table view asks you to provide the height for each row as it appears, including when it moves offscreen and then back onscreen.\n\nRestore your cell's original appearance before reuse\n\nWhen a cell moves offscreen, the table view removes it from its view hierarchy and places it in an internally managed recycling queue. When you request a new cell using the table view’s dequeueReusableCell(withIdentifier:for:) method, the table view returns cells from the recycling queue first. If the queue is empty, the table view instantiates a new cell from your storyboard.\n\nIf you change the appearance of your custom cell’s views, implement the prepareForReuse() method of your cell subclass. In your implementation, return the appearance of your cell’s views to their original state. For example, if you change the alpha property of a view in your cell, return that property to its original value. You don’t need to clear label text, set images to nil, or do anything that would be corrected by your tableView(_:cellForRowAt:) method when configuring the cell for display.\n\nAdd an accessory view to your cell\n\nAn accessory view is an optional, system-defined view that appears at the trailing edge of a cell. You use accessory views to communicate standard cell behaviors to users. For example, you add a detail button to let the user know that tapping the row displays more information about the row.\n\nTo configure an accessory view:\n\nIn your storyboard, use the cell’s Accessory attribute to select the accessory view you want.\n\nIn your code, change the value of the cell’s accessoryType property.\n\nUsers expect accessory views to have specific behaviors when tapped. For information about how to implement those behaviors, see UITableViewCell.AccessoryType.\n\nSee Also\nCells, headers, and footers\nCreating Self-Sizing Table View Cells\nCreate table view cells that support Dynamic Type and use system spacing constraints to adjust the spacing surrounding text labels.\nAdding headers and footers to table sections\nDifferentiate groups of rows visually by adding header and footer views to your table view’s sections.\nclass UITableViewCell\nThe visual representation of a single row in a table view.\nclass UITableViewHeaderFooterView\nA reusable view that you place at the top or bottom of a table section to display additional information for that section.\nRelated Documentation\nEstimating the height of a table's scrolling area\nProvide height estimates for your table view’s headers, footers, and rows to ensure that scrolling accurately reflects the size of your content."
  },
  {
    "title": "Estimating the height of a table's scrolling area | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/views_and_controls/table_views/estimating_the_height_of_a_table_s_scrolling_area",
    "html": "Overview\n\nWhenever possible, table views use height estimates for cells, headers, and footers to improve performance and scrolling behavior. Before a table view appears onscreen, it must compute the height of its content view, because it needs that information to configure scrolling-related parameters. If you don’t provide estimated heights for items, the table view must compute the actual height of items up front, which can be expensive.\n\nImportant\n\nIf your table view includes self-sizing cells, headers, or footers, you must provide estimated heights for those items.\n\nThe table view provides default height estimates for table view items based on the standard header, footer, and row styles. If your table’s items are significantly shorter or taller than the default values, you can supply custom estimates by assigning values to your table’s estimatedRowHeight, estimatedSectionHeaderHeight, and estimatedSectionFooterHeight properties. If the height of individual items varies, provide custom estimates using the following methods of your delegate object:\n\ntableView(_:estimatedHeightForRowAt:)\n\ntableView(_:estimatedHeightForHeaderInSection:)\n\ntableView(_:estimatedHeightForFooterInSection:)\n\nWhen estimating the heights of headers, footers, and rows, speed is more important than precision. The table view asks for estimates for every item in your table, so don’t perform long-running operations in your delegate methods. Instead, generate estimates that are close enough to be useful for scrolling. The table view replaces your estimates with the actual item heights as those items appear onscreen.\n\nThe example code below computes the estimated height for table rows of different heights. The cell for the first row always uses a custom style that includes multiple rows of text. All other rows use the Basic style provided by the table view.\n\nlet cellMarginSize :CGFloat  = 4.0\noverride func tableView(_ tableView: UITableView, \n         estimatedHeightForRowAt indexPath: IndexPaDon’t CGFloat {\n   // Choose an appropriate default cell size.\n   var cellSize = UITableView.automaticDimension\n        \n   // The first cell is always a title cell. Other cells use the Basic style.\n   if indexPath.row == 0 {\n      //Title cells consist of one large title row and two body text rows.\n      let largeTitleFont = UIFont.preferredFont(forTextStyle: .largeTitle)\n      let bodyFont = UIFont.preferredFont(forTextStyle: .body)\n            \n      // Get the height of a single line of text in each font.\n      let largeTitleHeight = largeTitleFont.lineHeight + largeTitleFont.leading\n      let bodyHeight = bodyFont.lineHeight + bodyFont.leading\n            \n      // Sum the line heights plus top and bottom margins to get the final height.\n      let titleCellSize = largeTitleHeight + (bodyHeight * 2.0) + (cellMarginSize * 2)\n\n\n      // Update the estimated cell size.\n      cellSize = titleCellSize\n   }\n        \n   return cellSize\n}\n\n\nWhen the table view uses height estimates, it actively manages the contentOffset and contentSize properties inherited from its scroll view. Don’t attempt to read or modify these properties directly. Their values are meaningful only to UITableView.\n\nSee Also\nTable management\nclass UITableViewController\nA view controller that specializes in managing a table view.\nprotocol UITableViewDelegate\nMethods for managing selections, configuring section headers and footers, deleting and reordering cells, and performing other actions in a table view.\nclass UITableViewFocusUpdateContext\nA context object that provides information relevant to a specific focus update from one view to another.\nRelated Documentation\nCreating Self-Sizing Table View Cells\nCreate table view cells that support Dynamic Type and use system spacing constraints to adjust the spacing surrounding text labels."
  },
  {
    "title": "title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolorwell/3600474-title",
    "html": "Discussion\n\nUse this property to explain what kind of color to pick, like “Stroke Color” or “Fill Color”.\n\nSee Also\nConfiguring color picker attributes\nvar supportsAlpha: Bool\nA Boolean value that determines whether the color picker supports alpha values.\nvar selectedColor: UIColor?\nThe selected color in the color picker."
  },
  {
    "title": "Filling a table with data | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/views_and_controls/table_views/filling_a_table_with_data",
    "html": "Overview\n\nTable views are data-driven elements of your interface. You provide your app’s data, along with the views needed to render each piece of that data onscreen, using a data source object (an object that adopts the UITableViewDataSource protocol). The table view arranges your views onscreen and works with your data source object to keep that data up to date.\n\nTable views organize your data into rows and sections. Rows display individual data items, and sections group related rows together. Sections aren’t required, but they’re a good way to organize data that’s already hierarchical. For example, the Contacts app displays the name of each contact in a row, and groups rows into sections based on the first letter of the person’s last name.\n\nProvide the numbers of rows and sections\n\nBefore it appears onscreen, a table view asks you to specify the total number of rows and sections. Your data source object provides this information using two methods:\n\nfunc numberOfSections(in tableView: UITableView) -> Int  // Optional \nfunc tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int\n\n\nIn your implementations of these methods, return the row and section counts as quickly as possible. Doing so might require you to structure your data in a way that makes it easy to retrieve the row and section information. For example, consider using arrays to manage your table’s data. Arrays are good tools for organizing both sections and rows because they match the natural organization of the table view itself.\n\nThe example code below shows an implementation of the data source methods that return the number of rows and sections in a multisection table. In this table, each row displays a string, so the implementation stores an array of strings for each section. To manage the sections, the implementation uses an array (called hierarchicalData) of arrays. To get the number of sections, the data source returns the number of items in the hierarchicalData array. To get the number of rows in a specific section, the data source returns the number of items in the respective child array.\n\nvar hierarchicalData = [[String]]() \n \noverride func numberOfSections(in tableView: UITableView) -> Int {\n   return hierarchicalData.count\n}\n   \noverride func tableView(_ tableView: UITableView, \n                        numberOfRowsInSection section: Int) -> Int {\n   return hierarchicalData[section].count\n}\n\n\n\n\nDefine the appearance of rows\n\nYou define the appearance of your table’s rows in your storyboard file using cells. A cell is a UITableViewCell object that acts like a template for the rows of your table. Cells are views, and they can contain any subviews that you need to display your content. You can add labels, image views, and other views to their content area and arrange those views using constraints.\n\nWhen you add a table view to your app’s interface, it includes one prototype cell for you to configure. To add more prototype cells, select the table view and update its Prototype Cells attribute. Each cell has a style, which defines its appearance. You may select one of the standard styles provided by UIKit, or define your own custom styles.\n\nThe following illustration shows a table with two prototype cells, each of which uses one of the standard cell styles.\n\nIn your storyboard file, perform the following actions for each prototype cell:\n\nSet the cell style to custom, or set it to one of the standard cell styles.\n\nAssign a nonempty string to the cell’s Identifier attribute.\n\nFor custom cells, add views and constraints to the cell.\n\nSpecify the class of custom cells in the Identity inspector.\n\nWhen creating a cell with custom views, define a subclass of UITableViewCell to manage those views. In your subclass, add outlets for the custom views that display your app’s data, and connect those outlets to the actual views in your storyboard file. You’ll need these outlets to configure the cell at runtime\n\nFor more information about how to configure the appearance of your cells, see Configuring the cells for your table.\n\nCreate and configure cells for each row\n\nBefore a table view appears onscreen, it asks its data source object to provide cells for the rows in or near the visible portion of the table. Your data source object’s tableView(_:cellForRowAt:) method must respond quickly. Implement this method with the following pattern:\n\nCall the table view’s dequeueReusableCell(withIdentifier:for:) method to retrieve a cell object.\n\nConfigure the cell’s views with your app’s custom data.\n\nReturn the cell to the table view.\n\nFor standard cell styles, UITableViewCell contains properties with the views you need to configure. For custom cells, you add views to your cell at design time and outlets to access them.\n\nThe example code below shows a version of the data source method that configures a cell containing a single text label. The cell uses the Basic style, one of the standard cell styles. For Basic-style cells, the textLabel property of UITableViewCell contains a label view that you configure with your data.\n\noverride func tableView(_ tableView: UITableView,\n                        cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n   // Ask for a cell of the appropriate type.\n   let cell = tableView.dequeueReusableCell(withIdentifier: \"basicStyleCell\", for: indexPath)\n        \n   // Configure the cell’s contents with the row and section number.\n   // The Basic cell style guarantees a label view is present in textLabel.\n   cell.textLabel!.text = \"Row \\(indexPath.row)\"\n   return cell\n}\n\n\nTable views don’t ask you to create cells for each of the table’s rows. Instead, table views manage cells lazily, asking you only for those cells that are in or near the visible portion of the table. Creating cells lazily reduces the amount of memory the table uses. However, it also means your data source object must create cells quickly. Don’t use your tableView(_:cellForRowAt:) method to load your table’s data or perform lengthy operations.\n\nNote\n\nIn addition to using the standard cell styles, you can define custom cells that contain any views you want. For detailed information about configuring your cells, see Configuring the cells for your table.\n\nPrefetch data to improve performance\n\nScrolling performance for table views is critical. If fetching the data for your table involves an expensive operation, such as fetching it from a database, use a prefetching data source object—an object that adopts the UITableViewDataSourcePrefetching protocol—to begin loading that data asynchronously before it scrolls into view.\n\nFor information about how to implement a prefetching data source, see UITableViewDataSourcePrefetching.\n\nSpecify data statically in the storyboard\n\nUse static tables to save time during prototyping or when your table’s contents never change. With static tables, you specify all of your table’s data up front in your storyboard file; you don’t implement a data source object. At runtime, UIKit loads that data from your storyboard and manages it for you. Because you can’t change the data in static tables at runtime, use them sparingly in your shipping apps.\n\nConfigure static tables in your storyboard file:\n\nAdd a UITableViewController object to your storyboard.\n\nSelect the table view controller’s table view.\n\nChange the table view’s Content attribute (in the Attributes inspector) to Static Cells.\n\nSpecify the number of sections for your table using the table view’s Sections attribute.\n\nSet the Row attribute of each section to the number of rows you want.\n\nConfigure each cell with the views and content you want.\n\nImportant\n\nTable views with static data require a UITableViewController object to manage that data.\n\nDon’t use static data if there’s a chance you might want to update your table view’s content in the future. It’s a programmer error to assign a data source object to a UITableViewController whose table view contains static data.\n\nSee Also\nData\nAsynchronously Loading Images into Table and Collection Views\nStore and fetch images asynchronously to make your app more responsive.\nprotocol UITableViewDataSource\nThe methods that an object adopts to manage data and provide cells for a table view.\nprotocol UITableViewDataSourcePrefetching\nA protocol that provides advance warning of the data requirements for a table view, allowing you to start potentially long-running data operations early.\nclass UITableViewDiffableDataSource\nThe object you use to manage data and provide cells for a table view.\nstruct NSDiffableDataSourceSnapshot\nA representation of the state of the data in a view at a specific point in time.\nclass UILocalizedIndexedCollation\nAn object that organizes, sorts, and localizes the data for a table view that has a section index.\nprotocol UIDataSourceTranslating\nAn advanced interface for managing a data source object.\nclass UIRefreshControl\nA standard control that can initiate the refreshing of a scroll view’s contents."
  },
  {
    "title": "UIBlurEffect.Style | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiblureffect/style",
    "html": "Topics\nAdaptable styles\ncase systemUltraThinMaterial\nAn adaptable blur effect that creates the appearance of an ultra-thin material.\ncase systemThinMaterial\nAn adaptable blur effect that creates the appearance of a thin material.\ncase systemMaterial\nAn adaptable blur effect that creates the appearance of a material with normal thickness.\ncase systemThickMaterial\nAn adaptable blur effect that creates the appearance of a material that’s thicker than normal.\ncase systemChromeMaterial\nAn adaptable blur effect that creates the appearance of the system chrome.\nLight styles\ncase systemUltraThinMaterialLight\nA blur effect that creates the appearance of an ultra-thin material and is always light.\ncase systemThinMaterialLight\nA blur effect that creates the appearance of a thin material and is always light.\ncase systemMaterialLight\nA blur effect that creates the appearance of a material with normal thickness and is always light.\ncase systemThickMaterialLight\nA blur effect that creates the appearance of a material that’s thicker than normal and is always light.\ncase systemChromeMaterialLight\nA blur effect that creates the appearance of the system chrome and is always light.\nDark styles\ncase systemUltraThinMaterialDark\nA blur effect that creates the appearance of an ultra-thin material and is always dark.\ncase systemThinMaterialDark\nA blur effect that creates the appearance of a thin material and is always dark.\ncase systemMaterialDark\nA blur effect that creates the appearance of a material with normal thickness and is always dark.\ncase systemThickMaterialDark\nA blur effect that creates the appearance of a material that’s thicker than normal and is always dark.\ncase systemChromeMaterialDark\nA blur effect that creates the appearance of the system chrome and is always dark.\nAdditional styles\ncase extraLight\nThe area of the view is lighter than the underlying view.\ncase light\nThe area of the view is the same approximate lightness of the underlying view.\ncase dark\nThe area of the view is darker than the underlying view.\ncase extraDark\nThe area of the view is even more dark than the underlying view.\ncase regular\nA regular blur style that adapts to the user interface style.\ncase prominent\nA blur style for making content more prominent that adapts to the user interface style.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilargecontentviewerinteraction/3183922-delegate",
    "html": "See Also\nCustomizing large content viewer interactions\nvar gestureRecognizerForExclusionRelationship: UIGestureRecognizer\nA gesture recognizer that you can use to set up simultaneous recognition or failure relationships with other gesture recognizers."
  },
  {
    "title": "init(delegate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilargecontentviewerinteraction/3183925-init",
    "html": "Parameters\ndelegate\n\nAn object that implements the UILargeContentViewerInteractionDelegate protocol.\n\nDiscussion\n\nTo add the interaction to a view, use addInteraction(_:)."
  },
  {
    "title": "UIBehavioralStyle.automatic | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibehavioralstyle/automatic",
    "html": "See Also\nStyles\ncase pad\nA style that indicates that a control appears and behaves as it does in iPadOS.\ncase mac\nA style that indicates that a control appears and behaves as it does in macOS."
  },
  {
    "title": "barButtonItems | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibarbuttonitemgroup/1623565-barbuttonitems",
    "html": "Discussion\n\nYou may include any number of bar button items in a group, but you should keep the total number of items relatively small because of space considerations. The items in a group are typically related to each other, but need not be. The array must contain at least one item.\n\nItems can belong to only one group at a time. If you specify an item that’s already in a group, UIKit removes the item from its previous group before assigning it to the current group.\n\nSee Also\nConfiguring the group\nvar representativeItem: UIBarButtonItem?\nThe item to display for a group when space is constrained.\nvar alwaysAvailable: Bool\nA Boolean value that determines whether the group is always available through the UI."
  },
  {
    "title": "alwaysAvailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibarbuttonitemgroup/4063570-alwaysavailable",
    "html": "Discussion\n\nSet this property to true to ensure that the functionality in this group is available to people regardless of the customization of the groups.\n\nWhen the value is true, UIKit places the items in this group in the overflow menu for the UIUserInterfaceIdiom.phone and UIUserInterfaceIdiom.pad idioms. This property doesn’t have an effect for the UIUserInterfaceIdiom.mac idiom.\n\nSee Also\nConfiguring the group\nvar barButtonItems: [UIBarButtonItem]\nThe bar button items to display on the bar.\nvar representativeItem: UIBarButtonItem?\nThe item to display for a group when space is constrained."
  },
  {
    "title": "isHidden | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibarbuttonitemgroup/3987951-ishidden",
    "html": "Discussion\n\nSet this property to true to hide the group, or false to display the group.\n\nSee Also\nDetermining the group’s appearance\nvar isDisplayingRepresentativeItem: Bool\nA Boolean value indicating whether the representative item is showing in place of the group’s items."
  },
  {
    "title": "UIUserInterfaceIdiom.carPlay | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiuserinterfaceidiom/carplay",
    "html": "See Also\nIdioms\ncase unspecified\nAn unspecified idiom.\ncase phone\nAn interface designed for iPhone and iPod touch.\ncase pad\nAn interface designed for iPad.\ncase tv\nAn interface designed for tvOS and Apple TV.\ncase mac\nAn interface designed for the Mac.\ncase vision\nAn interface designed for visionOS and Apple Vision Pro."
  },
  {
    "title": "UIUserInterfaceIdiom.phone | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiuserinterfaceidiom/phone",
    "html": "See Also\nIdioms\ncase unspecified\nAn unspecified idiom.\ncase pad\nAn interface designed for iPad.\ncase tv\nAn interface designed for tvOS and Apple TV.\ncase carPlay\nAn interface designed for an in-car experience.\ncase mac\nAn interface designed for the Mac.\ncase vision\nAn interface designed for visionOS and Apple Vision Pro."
  },
  {
    "title": "top | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidirectionalrectedge/3042490-top",
    "html": "Deprecated\n\nUse top instead."
  },
  {
    "title": "bottom | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidirectionalrectedge/3042487-bottom",
    "html": "Deprecated\n\nUse bottom instead."
  },
  {
    "title": "encode(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uioffset/3081638-encode",
    "html": "Relationships\nFrom Protocol\nEncodable\nSee Also\nEncoding and decoding\ninit(from: Decoder)\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "trailing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidirectionalrectedge/3042491-trailing",
    "html": "Deprecated\n\nUse trailing instead."
  },
  {
    "title": "UIPress.PressType.select | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipress/presstype/select",
    "html": "See Also\nActions\ncase playPause\nA constant that represents the play/pause button.\ncase menu\nA constant that represents the menu button."
  },
  {
    "title": "UIScrollView.KeyboardDismissMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/keyboarddismissmode",
    "html": "Overview\n\nYou use these constants to set the value of the keyboardDismissMode property.\n\nTopics\nConstants\ncase none\nA mode in which a drag doesn’t dismiss the keyboard.\ncase onDrag\nA mode in which the keyboard dismisses when a drag begins.\ncase interactive\nA mode in which the keyboard follows the dragging touch offscreen, and can be pulled upward again to cancel the dismiss.\ncase onDragWithAccessory\nA mode in which the keyboard and accessory view dismiss together when a drag begins.\ncase interactiveWithAccessory\nA mode in which the keyboard and accessory view both follow the dragging touch offscreen, and can be pulled upward again to cancel the dismiss.\nRelationships\nConforms To\nSendable\nSee Also\nDismissing the keyboard\nvar keyboardDismissMode: UIScrollView.KeyboardDismissMode\nThe manner in which the system dismisses the keyboard when a drag begins in the scroll view."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitraitoverrides/4138644-subscript",
    "html": "Relationships\nFrom Protocol\nUIMutableTraits"
  },
  {
    "title": "gestureRecognizerForExclusionRelationship | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilargecontentviewerinteraction/3183924-gesturerecognizerforexclusionrel",
    "html": "See Also\nCustomizing large content viewer interactions\nvar delegate: UILargeContentViewerInteractionDelegate?\nAn object that can fine-tune the large content viewer interactions, especially in the presence of other gesture recognizers."
  },
  {
    "title": "calculationModePaced | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/keyframeanimationoptions/1622525-calculationmodepaced",
    "html": "Discussion\n\nThis option results in an evenly paced animation."
  },
  {
    "title": "UITableViewDropProposal | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdropproposal",
    "html": "Overview\n\nCreate instances of this class in the tableView(_:dropSessionDidUpdate:withDestinationIndexPath:) method of your drop delegate object. You create drop proposals to let the table view know how you intend to handle a drop at the currently specified location. The table view uses that information to provide appropriate visual feedback to the user.\n\nTopics\nCreating a drop proposal\ninit(operation: UIDropOperation, intent: UITableViewDropProposal.Intent)\nCreates a drop proposal object that specifies how to incorporate the dropped content.\nGetting the proposed drop location\nvar intent: UITableViewDropProposal.Intent\nThe option to use when incorporating dropped items into your content.\nenum UITableViewDropProposal.Intent\nConstants indicating how you intend to handle a drop.\nenum UIDropOperation\nOperation types that determine how a drag and drop activity resolves when the user drops a drag item.\nRelationships\nInherits From\nUIDropProposal\nSee Also\nDrag and drop\nSupporting drag and drop in table views\nInitiate drags and handle drops from a table view.\nAdopting Drag and Drop in a Table View\nDemonstrates how to enable and implement drag and drop for a table view.\nprotocol UITableViewDragDelegate\nThe interface for initiating drags from a table view.\nprotocol UITableViewDropDelegate\nThe interface for handling drops in a table view.\nprotocol UITableViewDropCoordinator\nAn interface for coordinating your custom drop-related actions with the table view.\nprotocol UITableViewDropItem\nThe data associated with an item being dropped into the table view."
  },
  {
    "title": "UITableViewDropItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdropitem",
    "html": "Overview\n\nWhen handling a drop, you get instances of this class from the items property of the UITableViewDropCoordinator object. Use them to retrieve the data for the items being dragged and to plan any animations related to dropping the items. You don’t create instances of this class yourself.\n\nTopics\nGetting the drag item\nvar dragItem: UIDragItem\nThe item that was dragged.\n\nRequired\n\nGetting the item information\nvar previewSize: CGSize\nThe size of the drag item’s preview.\n\nRequired\n\nvar sourceIndexPath: IndexPath?\nThe index path of the item in the table view, if any.\n\nRequired\n\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nDrag and drop\nSupporting drag and drop in table views\nInitiate drags and handle drops from a table view.\nAdopting Drag and Drop in a Table View\nDemonstrates how to enable and implement drag and drop for a table view.\nprotocol UITableViewDragDelegate\nThe interface for initiating drags from a table view.\nprotocol UITableViewDropDelegate\nThe interface for handling drops in a table view.\nprotocol UITableViewDropCoordinator\nAn interface for coordinating your custom drop-related actions with the table view.\nclass UITableViewDropProposal\nYour proposed solution for handling a drop in a table view."
  },
  {
    "title": "UITableViewDropCoordinator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdropcoordinator",
    "html": "Overview\n\nDon’t create instances of this class yourself. When a drop occurs in the table view, UIKit creates an instance of this class and passes it to your tableView(_:performDropWith:) method. Use the object to let the table view know how you want to animate the dropped items into position.\n\nTopics\nGetting the dragged items\nvar items: [UITableViewDropItem]\nThe items being dragged.\n\nRequired\n\nGetting the drop location\nvar destinationIndexPath: IndexPath?\nThe index path at which to insert the item into the table view.\n\nRequired\n\nAnimating rows to their destination\nfunc drop(UIDragItem, toRowAt: IndexPath) -> UIDragAnimating\nAnimates the item to the specified index path in the table view.\n\nRequired\n\nfunc drop(UIDragItem, intoRowAt: IndexPath, rect: CGRect) -> UIDragAnimating\n\nRequired\n\nfunc drop(UIDragItem, to: UIDragPreviewTarget) -> UIDragAnimating\nAnimates the item to an arbitrary location in your view hierarchy.\n\nRequired\n\nfunc drop(UIDragItem, to: UITableViewDropPlaceholder) -> UITableViewDropPlaceholderContext\nAnimates the item to the specified location and inserts a placeholder cell at that location.\n\nRequired\n\nGetting the session information\nvar session: UIDropSession\nThe drop session containing information about the transaction.\n\nRequired\n\nvar proposal: UITableViewDropProposal\nThe proposal for how to incorporate the dropped items.\n\nRequired\n\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nDrag and drop\nSupporting drag and drop in table views\nInitiate drags and handle drops from a table view.\nAdopting Drag and Drop in a Table View\nDemonstrates how to enable and implement drag and drop for a table view.\nprotocol UITableViewDragDelegate\nThe interface for initiating drags from a table view.\nprotocol UITableViewDropDelegate\nThe interface for handling drops in a table view.\nprotocol UITableViewDropItem\nThe data associated with an item being dropped into the table view.\nclass UITableViewDropProposal\nYour proposed solution for handling a drop in a table view."
  },
  {
    "title": "UITableViewDragDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdragdelegate",
    "html": "Overview\n\nImplement this protocol in the object that you use to initiate drags from your table view. The only required method of this protocol is the tableView(_:itemsForBeginning:at:) method, but you can implement other methods as needed to customize the drag behavior of your table view.\n\nAssign your custom delegate object to the dragDelegate property of your table view.\n\nTopics\nProviding the items to drag\nfunc tableView(UITableView, itemsForBeginning: UIDragSession, at: IndexPath) -> [UIDragItem]\nProvides the initial set of items (if any) to drag.\n\nRequired\n\nfunc tableView(UITableView, itemsForAddingTo: UIDragSession, at: IndexPath, point: CGPoint) -> [UIDragItem]\nAdds the specified items to an existing drag session.\nTracking the drag session\nfunc tableView(UITableView, dragSessionWillBegin: UIDragSession)\nSignals the start of a drag operation involving content from the specified table view.\nfunc tableView(UITableView, dragSessionDidEnd: UIDragSession)\nSignals the end of a drag operation involving content from the specified table view.\nfunc tableView(UITableView, dragSessionIsRestrictedToDraggingApplication: UIDragSession) -> Bool\nReturns a Boolean value indicating whether the dragged content must be dropped in the same app.\nfunc tableView(UITableView, dragSessionAllowsMoveOperation: UIDragSession) -> Bool\nReturns a Boolean value indicating whether your app supports a move operation for the dragged content.\nProviding a custom preview\nfunc tableView(UITableView, dragPreviewParametersForRowAt: IndexPath) -> UIDragPreviewParameters?\nReturns custom information about how to display the row at the specified location during the drag.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nDrag and drop\nSupporting drag and drop in table views\nInitiate drags and handle drops from a table view.\nAdopting Drag and Drop in a Table View\nDemonstrates how to enable and implement drag and drop for a table view.\nprotocol UITableViewDropDelegate\nThe interface for handling drops in a table view.\nprotocol UITableViewDropCoordinator\nAn interface for coordinating your custom drop-related actions with the table view.\nprotocol UITableViewDropItem\nThe data associated with an item being dropped into the table view.\nclass UITableViewDropProposal\nYour proposed solution for handling a drop in a table view."
  },
  {
    "title": "UILocalizedIndexedCollation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilocalizedindexedcollation",
    "html": "Overview\n\nUse a UILocalizedIndexedCollation object in conjunction with your table’s data source object to sort and manage the data in an indexed table view. An index is an ideal way for users to navigate a table view containing sequential content. For example, the Contacts app sorts contacts alphabetically and displays an index for navigating those contacts quickly. You use the collation object as the source of the table’s section titles and index titles in your table view. You also use it to sort items in each section of your table.\n\nTo prepare the data for a section index, create an indexed-collation object and call section(for:collationStringSelector:) for each model object to be indexed. That method determines the section in which each of these objects should appear and returns an integer that identifies the section. The table-view controller then puts each object in a local array for its section. For each section array, the controller calls the sortedArray(from:collationStringSelector:) method to sort all of the objects in the section. The indexed-collation object is now the data store that the table-view controller uses to provide section-index data to the table view, as shown in the following example code.\n\nfunc tableView(tableView: UITableView!, titleForHeaderInSection section: Int) -> String! {\n    let currentCollation = UILocalizedIndexedCollation.currentCollation() as UILocalizedIndexedCollation\n    let sectionTitles = currentCollation.sectionTitles as NSArray\n    return sectionTitles.objectAtIndex(section) as String\n}\n \nfunc sectionIndexTitlesForTableView(tableView: UITableView!) -> NSArray! {\n    let currentCollation = UILocalizedIndexedCollation.currentCollation() as UILocalizedIndexedCollation\n    return currentCollation.sectionIndexTitles as NSArray\n}\n \nfunc tableView(tableView: UITableView!, sectionForSectionIndexTitle title: String!, atIndex index: Int) -> Int {\n    let currentCollation = UILocalizedIndexedCollation.currentCollation() as UILocalizedIndexedCollation\n    return currentCollation.sectionForSectionIndexTitleAtIndex(index)\n}\n\nTopics\nGetting the shared instance\nclass func current() -> Self\nReturns an indexed-collation instance for the current table view.\nPreparing the sections and section indexes\nfunc section(for: Any, collationStringSelector: Selector) -> Int\nReturns an integer identifying the section in which a model object belongs.\nfunc sortedArray(from: [Any], collationStringSelector: Selector) -> [Any]\nSorts the objects within a section by their localized titles.\nProviding section index data to the table view\nvar sectionTitles: [String]\nReturns the list of section titles for the table view.\nvar sectionIndexTitles: [String]\nReturns the list of section-index titles for the table view.\nfunc section(forSectionIndexTitle: Int) -> Int\nReturns the section that the table view should scroll to for the given index title.\nRelationships\nInherits From\nNSObject\nSee Also\nData\nFilling a table with data\nCreate and configure cells for your table dynamically using a data source object, or provide them statically from your storyboard.\nAsynchronously Loading Images into Table and Collection Views\nStore and fetch images asynchronously to make your app more responsive.\nprotocol UITableViewDataSource\nThe methods that an object adopts to manage data and provide cells for a table view.\nprotocol UITableViewDataSourcePrefetching\nA protocol that provides advance warning of the data requirements for a table view, allowing you to start potentially long-running data operations early.\nclass UITableViewDiffableDataSource\nThe object you use to manage data and provide cells for a table view.\nstruct NSDiffableDataSourceSnapshot\nA representation of the state of the data in a view at a specific point in time.\nprotocol UIDataSourceTranslating\nAn advanced interface for managing a data source object.\nclass UIRefreshControl\nA standard control that can initiate the refreshing of a scroll view’s contents."
  },
  {
    "title": "UITableViewFocusUpdateContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewfocusupdatecontext",
    "html": "Overview\n\nA focus update context provides extra information that’s only relevant to focus updates involving table views. Instances of this class are ephemeral and are usually discarded after the update is finished.\n\nTopics\nLocating focusable items in a table view\nvar previouslyFocusedIndexPath: IndexPath?\nReturns the index path of the cell containing the context’s previously focused view.\nvar nextFocusedIndexPath: IndexPath?\nReturns the index path of the cell containing the context’s next focused view.\nRelationships\nInherits From\nUIFocusUpdateContext\nSee Also\nTable management\nEstimating the height of a table's scrolling area\nProvide height estimates for your table view’s headers, footers, and rows to ensure that scrolling accurately reflects the size of your content.\nclass UITableViewController\nA view controller that specializes in managing a table view.\nprotocol UITableViewDelegate\nMethods for managing selections, configuring section headers and footers, deleting and reordering cells, and performing other actions in a table view."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitraitoverrides/4138649-subscript",
    "html": "Relationships\nFrom Protocol\nUIMutableTraits"
  },
  {
    "title": "Asynchronously Loading Images into Table and Collection Views | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/views_and_controls/table_views/asynchronously_loading_images_into_table_and_collection_views",
    "html": "Overview\n\nCaching images can help you make the table and collection views in your app instantiate fast and respond quickly to scrolling. The app in the sample project demonstrates fetching images with URLs. The images are not part the assets catalog and instead are a part of the app bundle to simulate loading each asynchronously by URL. This ensures the user interface remains responsive. This project also supports Mac Catalyst.\n\nHandle Image Loading and Caching\n\nIn the sample, the class ImageCache.swift demonstrates a basic mechanism for image loading from a URL with URLSession and caching the downloaded images using NSCache. Views such as UITableView and UICollectionView are subclasses of UIScrollView.\n\nAs the user scrolls in a view, the app requests the same image repeatedly. This sample holds onto the relevant completion blocks until the image loads, then passes the image to all of the requesting blocks so the API only has to make one call to fetch an image for a given URL. The following code shows how the sample project consructs a basic caching and loading method:\n\n// Returns the cached image if available, otherwise asynchronously loads and caches it.\nfinal func load(url: NSURL, item: Item, completion: @escaping (Item, UIImage?) -> Swift.Void) {\n    // Check for a cached image.\n    if let cachedImage = image(url: url) {\n        DispatchQueue.main.async {\n            completion(item, cachedImage)\n        }\n        return\n    }\n    // In case there are more than one requestor for the image, we append their completion block.\n    if loadingResponses[url] != nil {\n        loadingResponses[url]?.append(completion)\n        return\n    } else {\n        loadingResponses[url] = [completion]\n    }\n    // Go fetch the image.\n    ImageURLProtocol.urlSession().dataTask(with: url as URL) { (data, response, error) in\n        // Check for the error, then data and try to create the image.\n        guard let responseData = data, let image = UIImage(data: responseData),\n            let blocks = self.loadingResponses[url], error == nil else {\n            DispatchQueue.main.async {\n                completion(item, nil)\n            }\n            return\n        }\n        // Cache the image.\n        self.cachedImages.setObject(image, forKey: url, cost: responseData.count)\n        // Iterate over each requestor for the image and pass it back.\n        for block in blocks {\n            DispatchQueue.main.async {\n                block(item, image)\n            }\n            return\n        }\n    }.resume()\n}\n\n\nUpdate Your Datasource Responsibly\n\nAn app that loads all of its data on launch risks running out of memory or terminating for taking too long to complete. Unless the app requires all data to be loaded before operation, load your images as the UI requests them.\n\nNote\n\nTo ensure items load before becoming visible on screen, make use of prefetching APIs when applicable. See Prefetching collection view data for best practices of prefetching data.\n\nGenerally the app should wait until the data source requests a cell to fetch and set an image. The sample project demonstrates one approach to fetching and displaying an image on a reusable view :\n\nvar content = cell.defaultContentConfiguration()\ncontent.image = item.image\nImageCache.publicCache.load(url: item.url as NSURL, item: item) { (fetchedItem, image) in\n    if let img = image, img != fetchedItem.image {\n        var updatedSnapshot = self.dataSource.snapshot()\n        if let datasourceIndex = updatedSnapshot.indexOfItem(fetchedItem) {\n            let item = self.imageObjects[datasourceIndex]\n            item.image = img\n            updatedSnapshot.reloadItems([item])\n            self.dataSource.apply(updatedSnapshot, animatingDifferences: true)\n        }\n    }\n}\ncell.contentConfiguration = content\n\n\nSee Also\nData\nFilling a table with data\nCreate and configure cells for your table dynamically using a data source object, or provide them statically from your storyboard.\nprotocol UITableViewDataSource\nThe methods that an object adopts to manage data and provide cells for a table view.\nprotocol UITableViewDataSourcePrefetching\nA protocol that provides advance warning of the data requirements for a table view, allowing you to start potentially long-running data operations early.\nclass UITableViewDiffableDataSource\nThe object you use to manage data and provide cells for a table view.\nstruct NSDiffableDataSourceSnapshot\nA representation of the state of the data in a view at a specific point in time.\nclass UILocalizedIndexedCollation\nAn object that organizes, sorts, and localizes the data for a table view that has a section index.\nprotocol UIDataSourceTranslating\nAn advanced interface for managing a data source object.\nclass UIRefreshControl\nA standard control that can initiate the refreshing of a scroll view’s contents."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitraitoverrides/4176650-subscript",
    "html": "Relationships\nFrom Protocol\nUIMutableTraits"
  },
  {
    "title": "copyToPasteboard | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivity/activitytype/1620654-copytopasteboard",
    "html": "Discussion\n\nWhen using this service, you can provide NSString, UIImage, NSURL, UIColor, and NSDictionary objects as data for the activity items."
  },
  {
    "title": "mail | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivity/activitytype/1620669-mail",
    "html": "Discussion\n\nWhen using this service, you can provide NSString and UIImage objects and NSURL objects pointing to local files as data for the activity items.\n\nTo specify an NSData object, you must implement the UIActivityItemSource protocol, return the data object in activityViewController(_:itemForActivityType:), and return the data object’s UTI in activityViewController(_:dataTypeIdentifierForActivityType:). Also, you may need to register the appropriate mapping so that the MIME type can be determined."
  },
  {
    "title": "postToFlickr | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivity/activitytype/1620664-posttoflickr",
    "html": "Discussion\n\nWhen using this service, you can provide UIImage and NSURL objects whose contents use the file scheme and point to an image. You can also use NSData objects whose contents are image data as data for the activity items."
  },
  {
    "title": "postToTencentWeibo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivity/activitytype/1620662-posttotencentweibo",
    "html": "Discussion\n\nWhen using this service, you can provide NSString, NSAttributedString, UIImage, and NSURL objects as data for the activity items."
  },
  {
    "title": "postToFacebook | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivity/activitytype/1620657-posttofacebook",
    "html": "Discussion\n\nWhen using this service, you can provide NSString, NSAttributedString, UIImage, and NSURL objects as data for the activity items."
  },
  {
    "title": "print | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivity/activitytype/1620684-print",
    "html": "Discussion\n\nWhen using this service, you can provide UIImage and NSData objects and NSURL objects pointing to local files as data for the activity items. You can also provide UIPrintPageRenderer, UIPrintFormatter, and UIPrintInfo objects."
  },
  {
    "title": "saveToCameraRoll | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivity/activitytype/1620681-savetocameraroll",
    "html": "Discussion\n\nWhen using this service, you can provide a UIImage object as data for image-based activity items. For image and video items, you can provide an NSURL object with a path to the video."
  },
  {
    "title": "postToVimeo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivity/activitytype/1620683-posttovimeo",
    "html": "Discussion\n\nWhen using this service, you can provide data from NSURL whose contents use the file scheme and point to a video. You can use NSData objects whose contents are video data as data for the activty items."
  },
  {
    "title": "postToWeibo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivity/activitytype/1620661-posttoweibo",
    "html": "Discussion\n\nWhen using this service, you can provide NSString, NSAttributedString, UIImage, and NSURL objects as data for the activity items."
  },
  {
    "title": "sharePlay | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivity/activitytype/3919929-shareplay",
    "html": "Discussion\n\nWhen using this service, you can use registerGroupActivity(_:) to provide an NSItemProvider with a GroupActivity object as an activity item. If no GroupActivity object is provided, the service will start a FaceTime call without an accompanying SharePlay session."
  },
  {
    "title": "fixedGroup(representativeItem:items:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibarbuttonitemgroup/3990270-fixedgroup",
    "html": "Parameters\nrepresentativeItem\n\nThe item to display for the group when space is constrained.\n\nitems\n\nThe items to include in the group.\n\nSee Also\nCreating a group\nclass func movableGroup(customizationIdentifier: String, representativeItem: UIBarButtonItem?, items: [UIBarButtonItem]) -> UIBarButtonItemGroup\nCreates a movable group that a person can move but can’t remove from the navigation bar during layout customization.\nclass func optionalGroup(customizationIdentifier: String, isInDefaultCustomization: Bool, representativeItem: UIBarButtonItem?, items: [UIBarButtonItem]) -> UIBarButtonItemGroup\nCreates an optional group that a person can move, add to, or remove from the navigation bar during layout customization.\ninit(barButtonItems: [UIBarButtonItem], representativeItem: UIBarButtonItem?)\nCreates a fixed group with the specified items.\ninit?(coder: NSCoder)\nCreates a bar button item group from data in an unarchiver."
  },
  {
    "title": "UISemanticContentAttribute.unspecified | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisemanticcontentattribute/unspecified",
    "html": "Discussion\n\nThe view is flipped when switching between left-to-right and right-to-left layouts."
  },
  {
    "title": "minimumZoomScale | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619428-minimumzoomscale",
    "html": "Discussion\n\nThis value determines how small the content can be scaled. The default value is 1.0.\n\nSee Also\nZooming and panning\nvar panGestureRecognizer: UIPanGestureRecognizer\nThe underlying gesture recognizer for pan gestures.\nvar pinchGestureRecognizer: UIPinchGestureRecognizer?\nThe underlying gesture recognizer for pinch gestures.\nfunc zoom(to: CGRect, animated: Bool)\nZooms to a specific area of the content so that it’s visible in the scroll view.\nvar zoomScale: CGFloat\nA floating-point value that specifies the current scale factor applied to the scroll view’s content.\nfunc setZoomScale(CGFloat, animated: Bool)\nA floating-point value that specifies the current zoom scale.\nvar maximumZoomScale: CGFloat\nA floating-point value that specifies the maximum scale factor that can apply to the scroll view’s content.\nvar isZoomBouncing: Bool\nA Boolean value that indicates that zooming has exceeded the scaling limits specified for the scroll view.\nvar isZooming: Bool\nA Boolean value that indicates whether the content view is currently zooming in or out.\nvar bouncesZoom: Bool\nA Boolean value that determines whether the scroll view animates the content scaling when the scaling exceeds the maximum or minimum limits."
  },
  {
    "title": "movableGroup(customizationIdentifier:representativeItem:items:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibarbuttonitemgroup/3990271-movablegroup",
    "html": "Parameters\ncustomizationIdentifier\n\nA unique string to identify the group for navigation bar layout customization.\n\nrepresentativeItem\n\nThe item to display for the group when space is constrained.\n\nitems\n\nThe items to include in the group.\n\nSee Also\nCreating a group\nclass func fixedGroup(representativeItem: UIBarButtonItem?, items: [UIBarButtonItem]) -> UIBarButtonItemGroup\nCreates a fixed group that a person can’t move or remove from the navigation bar during layout customization.\nclass func optionalGroup(customizationIdentifier: String, isInDefaultCustomization: Bool, representativeItem: UIBarButtonItem?, items: [UIBarButtonItem]) -> UIBarButtonItemGroup\nCreates an optional group that a person can move, add to, or remove from the navigation bar during layout customization.\ninit(barButtonItems: [UIBarButtonItem], representativeItem: UIBarButtonItem?)\nCreates a fixed group with the specified items.\ninit?(coder: NSCoder)\nCreates a bar button item group from data in an unarchiver."
  },
  {
    "title": "optionalGroup(customizationIdentifier:isInDefaultCustomization:representativeItem:items:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibarbuttonitemgroup/3990272-optionalgroup",
    "html": "Parameters\ncustomizationIdentifier\n\nA unique string to identify the group for navigation bar layout customization.\n\nisInDefaultCustomization\n\nA Boolean that determines whether to place the group in the navigation bar by default. Specify false if you want the group to appear in the navigation bar customization popover by default.\n\nrepresentativeItem\n\nThe item to display for the group when space is constrained.\n\nitems\n\nThe items to include in the group.\n\nSee Also\nCreating a group\nclass func fixedGroup(representativeItem: UIBarButtonItem?, items: [UIBarButtonItem]) -> UIBarButtonItemGroup\nCreates a fixed group that a person can’t move or remove from the navigation bar during layout customization.\nclass func movableGroup(customizationIdentifier: String, representativeItem: UIBarButtonItem?, items: [UIBarButtonItem]) -> UIBarButtonItemGroup\nCreates a movable group that a person can move but can’t remove from the navigation bar during layout customization.\ninit(barButtonItems: [UIBarButtonItem], representativeItem: UIBarButtonItem?)\nCreates a fixed group with the specified items.\ninit?(coder: NSCoder)\nCreates a bar button item group from data in an unarchiver."
  },
  {
    "title": "isDisplayingRepresentativeItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibarbuttonitemgroup/1623560-isdisplayingrepresentativeitem",
    "html": "Discussion\n\nThe value of this property is true when the representative item is being displayed in the shortcuts bar. The value is false when the individual bar button items are being displayed in the shortcuts bar.\n\nSee Also\nDetermining the group’s appearance\nvar isHidden: Bool\nA Boolean that determines the visibility of the group."
  },
  {
    "title": "selectedColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicolorwell/3600472-selectedcolor",
    "html": "Discussion\n\nWhen a person selects a new color in the color picker, the system generates the control event valueChanged.\n\nThis property is KVO-compliant.\n\nSee Also\nConfiguring color picker attributes\nvar title: String?\nThe title for the color picker.\nvar supportsAlpha: Bool\nA Boolean value that determines whether the color picker supports alpha values."
  },
  {
    "title": "UISemanticContentAttribute.spatial | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisemanticcontentattribute/spatial",
    "html": "Discussion\n\nThese views aren’t flipped when switching between left-to-right and right-to-left layouts."
  },
  {
    "title": "leading | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidirectionalrectedge/3042488-leading",
    "html": "Deprecated\n\nUse leading instead."
  },
  {
    "title": "UISplitViewController.BackgroundStyle.none | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisplitviewcontroller/backgroundstyle/none",
    "html": "See Also\nBackground styles\ncase sidebar\nA style that applies a blurred effect to the background of the primary view controller."
  },
  {
    "title": "segueForUnwinding(to:from:identifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontroller/1621500-segueforunwinding",
    "html": "Deprecated\n\nUse unwind(for:towards:) instead.\n\nParameters\ntoViewController\n\nThe target view controller.\n\nfromViewController\n\nThe view controller initiating the unwind action.\n\nidentifier\n\nAn identifier for the segue.\n\nReturn Value\n\nA segue object for managing the transitions between the two view controllers.\n\nDiscussion\n\nIf you implement a custom container view controller that also uses segue unwinding, you must override this method. In your custom implementation, instantiate and return a segue object that performs whatever animation and other steps that are necessary to unwind the view controllers.\n\nYou do not need to override this method for view controllers that are not containers.\n\nSee Also\nDeprecated methods\nfunc setOverrideTraitCollection(UITraitCollection?, forChild: UIViewController)\nChanges the traits assigned to the specified child view controller.\nDeprecated\nfunc overrideTraitCollection(forChild: UIViewController) -> UITraitCollection?\nRetrieves the trait collection for a child view controller.\nDeprecated\nclass func attemptRotationToDeviceOrientation()\nAttempts to rotate all windows to the orientation of the device.\nDeprecated\nfunc registerForPreviewing(with: UIViewControllerPreviewingDelegate, sourceView: UIView) -> UIViewControllerPreviewing\nRegisters a view controller to participate with 3D Touch preview (peek) and commit (pop).\nDeprecated\nfunc unregisterForPreviewing(withContext: UIViewControllerPreviewing)\nUnregisters a previously registered view controller identified by its context object.\nDeprecated\nfunc canPerformUnwindSegueAction(Selector, from: UIViewController, withSender: Any) -> Bool\nCalled on a view controller to determine whether it wants to respond to an unwind action.\nDeprecated\nfunc didRotate(from: UIInterfaceOrientation)\nSent to the view controller after the user interface rotates.\nDeprecated\nfunc dismissMoviePlayerViewControllerAnimated()\nDismisses a movie player view controller using the standard movie player transition.\nDeprecated\nfunc forUnwindSegueAction(Selector, from: UIViewController, withSender: Any?) -> UIViewController?\nCalled when an unwind segue action wants to search a container's children for a view controller to handle the unwind action.\nDeprecated\nfunc presentMoviePlayerViewControllerAnimated(MPMoviePlayerViewController!)\nPresents the movie player view controller using the standard movie player transition.\nDeprecated\nfunc rotatingFooterView() -> UIView?\nReturns the footer view to transition during an interface orientation change.\nDeprecated\nfunc rotatingHeaderView() -> UIView?\nReturns the header view to transition during an interface orientation change.\nDeprecated\nfunc shouldAutomaticallyForwardRotationMethods() -> Bool\nReturns a Boolean value indicating whether rotation methods are forwarded to child view controllers.\nDeprecated\nfunc willAnimateRotation(to: UIInterfaceOrientation, duration: TimeInterval)\nSent to the view controller before performing a one-step user interface rotation.\nDeprecated\nfunc willRotate(to: UIInterfaceOrientation, duration: TimeInterval)\nSent to the view controller just before the user interface begins rotating.\nDeprecated"
  },
  {
    "title": "UIVibrancyEffectStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uivibrancyeffectstyle",
    "html": "Topics\nLabel styles\ncase label\nA style for labels containing primary content.\ncase secondaryLabel\nA style for labels containing secondary content.\ncase tertiaryLabel\nA style for labels containing tertiary content.\ncase quaternaryLabel\nA style for labels containing quaternary content.\nFill styles\ncase fill\nA style for views with large filled areas containing primary content.\ncase secondaryFill\nA style for views with large filled areas containing secondary content.\ncase tertiaryFill\nA style for views with large filled areas containing tertiary content.\nSeparator style\ncase separator\nA style for separator lines.\nRelationships\nConforms To\nSendable\nSee Also\nCreating a vibrancy effect\ninit(blurEffect: UIBlurEffect, style: UIVibrancyEffectStyle)\nCreates a vibrancy effect with the specified blur and style values.\ninit(blurEffect: UIBlurEffect)\nCreates a vibrancy effect for a specific blur effect."
  },
  {
    "title": "interfaceOrientation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontroller/1621373-interfaceorientation",
    "html": "Deprecated\n\nUse viewWillTransition(to:with:) to make interface-based adjustments.\n\nDiscussion\n\nDo not use this property for informing layout decisions.\n\nThe possible values for the interfaceOrientation property are described in the UIInterfaceOrientation enum.\n\nSee Also\nDeprecated properties\nvar shouldAutorotate: Bool\nA Boolean value that indicates whether the view controller’s contents should autorotate.\nDeprecated\nvar previewActionItems: [UIPreviewActionItem]\nThe quick actions displayed when a user swipes upward on a 3D Touch preview.\nDeprecated\nvar automaticallyAdjustsScrollViewInsets: Bool\nA Boolean value that indicates whether the view controller should automatically adjust its scroll view insets.\nDeprecated\nvar bottomLayoutGuide: UILayoutSupport\nIndicates the lowest vertical extent for your onscreen content, for use with Auto Layout constraints.\nDeprecated\nvar isModalInPopover: Bool\nA Boolean value indicating whether the view controller should be presented modally by a popover.\nDeprecated\nvar searchDisplayController: UISearchDisplayController?\nThe search display controller associated with the view controller.\nDeprecated\nvar topLayoutGuide: UILayoutSupport\nIndicates the highest vertical extent for your onscreen content, for use with Auto Layout constraints.\nDeprecated"
  },
  {
    "title": "automaticallyAdjustsScrollIndicatorInsets | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/3198043-automaticallyadjustsscrollindica",
    "html": "Discussion\n\nThe default value is true.\n\nSee Also\nManaging the scroll indicator and refresh control\nvar indicatorStyle: UIScrollView.IndicatorStyle\nThe style of the scroll indicators.\nenum UIScrollView.IndicatorStyle\nDefines constants that represent the styles of the scroll indicators.\nvar showsHorizontalScrollIndicator: Bool\nA Boolean value that controls whether the horizontal scroll indicator is visible.\nvar showsVerticalScrollIndicator: Bool\nA Boolean value that controls whether the vertical scroll indicator is visible.\nvar horizontalScrollIndicatorInsets: UIEdgeInsets\nThe horizontal distance the scroll indicators are inset from the edge of the scroll view.\nvar verticalScrollIndicatorInsets: UIEdgeInsets\nThe vertical distance the scroll indicators are inset from the edge of the scroll view.\nfunc flashScrollIndicators()\nDisplays the scroll indicators momentarily.\nvar refreshControl: UIRefreshControl?\nThe refresh control associated with the scroll view.\nclass UIRefreshControl\nA standard control that can initiate the refreshing of a scroll view’s contents."
  },
  {
    "title": "isModalInPopover | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontroller/1619312-ismodalinpopover",
    "html": "Discussion\n\nThe default value of this property is false. Setting it to true causes an owning popover controller to disallow interactions outside this view controller while it is displayed. You can use this behavior to ensure that the popover is not dismissed by taps outside the popover controller.\n\nSee Also\nDeprecated properties\nvar shouldAutorotate: Bool\nA Boolean value that indicates whether the view controller’s contents should autorotate.\nDeprecated\nvar previewActionItems: [UIPreviewActionItem]\nThe quick actions displayed when a user swipes upward on a 3D Touch preview.\nDeprecated\nvar automaticallyAdjustsScrollViewInsets: Bool\nA Boolean value that indicates whether the view controller should automatically adjust its scroll view insets.\nDeprecated\nvar bottomLayoutGuide: UILayoutSupport\nIndicates the lowest vertical extent for your onscreen content, for use with Auto Layout constraints.\nDeprecated\nvar interfaceOrientation: UIInterfaceOrientation\nConvenience property that provides the current orientation of the interface, meaningful only if the view controller is taking up the full screen.\nDeprecated\nvar searchDisplayController: UISearchDisplayController?\nThe search display controller associated with the view controller.\nDeprecated\nvar topLayoutGuide: UILayoutSupport\nIndicates the highest vertical extent for your onscreen content, for use with Auto Layout constraints.\nDeprecated"
  },
  {
    "title": "vertical | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uioffset/1624473-vertical",
    "html": "Discussion\n\nPositive values indicate an offset downward, and negative values indicate an offset upward.\n\nSee Also\nGetting the offset values\nvar horizontal: CGFloat\nThe amount of horizontal offset from a position."
  },
  {
    "title": "calculationModeCubicPaced | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/keyframeanimationoptions/1622510-calculationmodecubicpaced",
    "html": "Discussion\n\nInstead, timing parameters are calculated implicitly to give the animation a constant velocity."
  },
  {
    "title": "calculationModeCubic | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/keyframeanimationoptions/1622546-calculationmodecubic",
    "html": "Discussion\n\nYou can’t adjust the parameters of this algorithm."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitraitoverrides/4138631-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitraitoverrides/4138648-subscript",
    "html": "Relationships\nFrom Protocol\nUIMutableTraits"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitraitoverrides/4176649-subscript",
    "html": "Relationships\nFrom Protocol\nUIMutableTraits"
  },
  {
    "title": "assignToContact | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivity/activitytype/1620682-assigntocontact",
    "html": "Discussion\n\nWhen using this service, you can provide a UIImage object as data for the activity items."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitraitoverrides/4176648-subscript",
    "html": "Relationships\nFrom Protocol\nUIMutableTraits"
  },
  {
    "title": "airDrop | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivity/activitytype/1620665-airdrop",
    "html": "Discussion\n\nWhen using this service, you can provide NSString, NSAttributedString, UIImage, and NSURL objects as data for the activity items. You may also provide NSArray or NSDictionary objects that contain the listed data types."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitraitoverrides/4138641-subscript",
    "html": "Relationships\nFrom Protocol\nUIMutableTraits"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitraitoverrides/4138640-subscript",
    "html": "Relationships\nFrom Protocol\nUIMutableTraits"
  },
  {
    "title": "addToReadingList | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivity/activitytype/1620667-addtoreadinglist",
    "html": "Discussion\n\nWhen using this service, you can provide an NSURL object whose contents uses the http or https scheme that points to the page to add."
  },
  {
    "title": "postToTwitter | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivity/activitytype/1620675-posttotwitter",
    "html": "Discussion\n\nWhen using this service, you can provide NSString, NSAttributedString, UIImage, and NSURL objects as data for the activity items."
  },
  {
    "title": "verticalScrollIndicatorInsets | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/3198045-verticalscrollindicatorinsets",
    "html": "Discussion\n\nThe default value is zero.\n\nSee Also\nManaging the scroll indicator and refresh control\nvar indicatorStyle: UIScrollView.IndicatorStyle\nThe style of the scroll indicators.\nenum UIScrollView.IndicatorStyle\nDefines constants that represent the styles of the scroll indicators.\nvar showsHorizontalScrollIndicator: Bool\nA Boolean value that controls whether the horizontal scroll indicator is visible.\nvar showsVerticalScrollIndicator: Bool\nA Boolean value that controls whether the vertical scroll indicator is visible.\nvar horizontalScrollIndicatorInsets: UIEdgeInsets\nThe horizontal distance the scroll indicators are inset from the edge of the scroll view.\nvar automaticallyAdjustsScrollIndicatorInsets: Bool\nA Boolean value that indicates whether the system automatically adjusts the scroll indicator insets.\nfunc flashScrollIndicators()\nDisplays the scroll indicators momentarily.\nvar refreshControl: UIRefreshControl?\nThe refresh control associated with the scroll view.\nclass UIRefreshControl\nA standard control that can initiate the refreshing of a scroll view’s contents."
  },
  {
    "title": "setValue(_:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uislider/1621330-setvalue",
    "html": "Parameters\nvalue\n\nThe new value to assign to the value property\n\nanimated\n\nSpecify true to animate the change in value; otherwise, specify false to update the slider’s appearance immediately. Animations are performed asynchronously and do not block the calling thread.\n\nDiscussion\n\nIf you specify a value that is beyond the minimum or maximum values, the slider limits the value to the minimum or maximum. For example, if the minimum value is 0.0 and you specify -1.0, the slider sets the value property to 0.0.\n\nSee Also\nAccessing the slider’s value\nvar value: Float\nThe slider’s current value."
  },
  {
    "title": "isContinuous | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uislider/1621340-iscontinuous",
    "html": "Discussion\n\nIf true, the slider triggers the associated target’s action method repeatedly, as the user moves the thumb. If false, the slider triggers the associated action method just once, when the user releases the slider’s thumb control to set the final value.\n\nThe default value of this property is true.\n\nSee Also\nModifying the slider’s behavior\nvar behavioralStyle: UIBehavioralStyle\nThe style that determines how the slider behaves.\nvar preferredBehavioralStyle: UIBehavioralStyle\nThe preferred behavioral style.\nenum UIBehavioralStyle\nConstants that indicate how a control behaves in apps built with Mac Catalyst."
  },
  {
    "title": "bounces | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619420-bounces",
    "html": "Discussion\n\nIf the value of this property is true, the scroll view bounces when it encounters a boundary of the content. Bouncing visually indicates that scrolling has reached an edge of the content. If the value is false, scrolling stops immediately at the content boundary without bouncing. The default value is true.\n\nSee Also\nConfiguring the scroll view\nvar isScrollEnabled: Bool\nA Boolean value that determines whether scrolling is enabled.\nvar isDirectionalLockEnabled: Bool\nA Boolean value that determines whether scrolling is disabled in a particular direction.\nvar isPagingEnabled: Bool\nA Boolean value that determines whether paging is enabled for the scroll view.\nvar scrollsToTop: Bool\nA Boolean value that controls whether the scroll-to-top gesture is enabled.\nvar alwaysBounceVertical: Bool\nA Boolean value that determines whether bouncing always occurs when vertical scrolling reaches the end of the content.\nvar alwaysBounceHorizontal: Bool\nA Boolean value that determines whether bouncing always occurs when horizontal scrolling reaches the end of the content view."
  },
  {
    "title": "adjustedContentInset | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/2902259-adjustedcontentinset",
    "html": "Discussion\n\nUse this property to obtain the adjusted area in which to draw content. The contentInsetAdjustmentBehavior property determines whether the safe area insets are included in the adjustment. The safe area insets are then added to the values in the contentInset property to obtain the final value of this property.\n\nSee Also\nManaging the content inset behavior\nvar contentInset: UIEdgeInsets\nThe custom distance that the content view is inset from the safe area or scroll view edges.\nvar contentInsetAdjustmentBehavior: UIScrollView.ContentInsetAdjustmentBehavior\nThe behavior for determining the adjusted content offsets.\nenum UIScrollView.ContentInsetAdjustmentBehavior\nConstants indicating how safe area insets are added to the adjusted content inset.\nfunc adjustedContentInsetDidChange()\nNotifies the scroll view when the adjusted content insets of the scroll view change."
  },
  {
    "title": "overrideTraitCollection(forChild:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontroller/1621486-overridetraitcollection",
    "html": "Parameters\nchildViewController\n\nThe view controller who’s trait collection is to be returned.\n\nReturn Value\n\nThe trait collection for the designated view controller.\n\nDiscussion\n\nUse this method to retrieve the trait collection for a child view controller. You can then modify the trait collection for the designated child view controller and set it using the setOverrideTraitCollection(_:forChild:) method.\n\nSee Also\nDeprecated methods\nfunc setOverrideTraitCollection(UITraitCollection?, forChild: UIViewController)\nChanges the traits assigned to the specified child view controller.\nDeprecated\nclass func attemptRotationToDeviceOrientation()\nAttempts to rotate all windows to the orientation of the device.\nDeprecated\nfunc registerForPreviewing(with: UIViewControllerPreviewingDelegate, sourceView: UIView) -> UIViewControllerPreviewing\nRegisters a view controller to participate with 3D Touch preview (peek) and commit (pop).\nDeprecated\nfunc unregisterForPreviewing(withContext: UIViewControllerPreviewing)\nUnregisters a previously registered view controller identified by its context object.\nDeprecated\nfunc canPerformUnwindSegueAction(Selector, from: UIViewController, withSender: Any) -> Bool\nCalled on a view controller to determine whether it wants to respond to an unwind action.\nDeprecated\nfunc didRotate(from: UIInterfaceOrientation)\nSent to the view controller after the user interface rotates.\nDeprecated\nfunc dismissMoviePlayerViewControllerAnimated()\nDismisses a movie player view controller using the standard movie player transition.\nDeprecated\nfunc forUnwindSegueAction(Selector, from: UIViewController, withSender: Any?) -> UIViewController?\nCalled when an unwind segue action wants to search a container's children for a view controller to handle the unwind action.\nDeprecated\nfunc presentMoviePlayerViewControllerAnimated(MPMoviePlayerViewController!)\nPresents the movie player view controller using the standard movie player transition.\nDeprecated\nfunc rotatingFooterView() -> UIView?\nReturns the footer view to transition during an interface orientation change.\nDeprecated\nfunc rotatingHeaderView() -> UIView?\nReturns the header view to transition during an interface orientation change.\nDeprecated\nfunc segueForUnwinding(to: UIViewController, from: UIViewController, identifier: String?) -> UIStoryboardSegue?\nCalled when an unwind segue action needs to transition between two view controllers.\nDeprecated\nfunc shouldAutomaticallyForwardRotationMethods() -> Bool\nReturns a Boolean value indicating whether rotation methods are forwarded to child view controllers.\nDeprecated\nfunc willAnimateRotation(to: UIInterfaceOrientation, duration: TimeInterval)\nSent to the view controller before performing a one-step user interface rotation.\nDeprecated\nfunc willRotate(to: UIInterfaceOrientation, duration: TimeInterval)\nSent to the view controller just before the user interface begins rotating.\nDeprecated"
  },
  {
    "title": "contentInset | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619406-contentinset",
    "html": "Discussion\n\nUse this property to extend the space between your content and the edges of the content view. The unit of size is points. The default value is zero.\n\nBy default, UIKit automatically adjusts the content inset to account for overlapping bars. You use this property to extend that distance even further, perhaps to accommodate your own custom content. Get the total adjustment — the safe area plus your custom insets — using the adjustedContentInset property. To change how the safe area is applied, modify the contentInsetAdjustmentBehavior property.\n\nSee Also\nManaging the content inset behavior\nvar adjustedContentInset: UIEdgeInsets\nThe insets derived from the content insets and the safe area of the scroll view.\nvar contentInsetAdjustmentBehavior: UIScrollView.ContentInsetAdjustmentBehavior\nThe behavior for determining the adjusted content offsets.\nenum UIScrollView.ContentInsetAdjustmentBehavior\nConstants indicating how safe area insets are added to the adjusted content inset.\nfunc adjustedContentInsetDidChange()\nNotifies the scroll view when the adjusted content insets of the scroll view change."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitraitoverrides/4246750-subscript",
    "html": "Relationships\nFrom Protocol\nUIMutableTraits"
  },
  {
    "title": "forUnwindSegueAction(_:from:withSender:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontroller/1621448-forunwindsegueaction",
    "html": "Deprecated\n\nOverride the allowedChildrenForUnwinding(from:) method instead.\n\nParameters\naction\n\nThe action that triggered the unwind action.\n\nfromViewController\n\nThe view controller that is the source of the unwinding action.\n\nsender\n\nThe object that initiated the action.\n\nReturn Value\n\nThe view controller that wants to handle the unwind action.\n\nDiscussion\n\nA custom container view controller should override this method and use it to search its children for a view controller to handle the unwind action. It does this by invoking the canPerformUnwindSegueAction(_:from:withSender:) method on each child. If a view controller wants to handle the action, your method should return it. If none of the container's children want to handle the unwind action, invoke the super’s implementation and return the result of that method.\n\nSee Also\nDeprecated methods\nfunc setOverrideTraitCollection(UITraitCollection?, forChild: UIViewController)\nChanges the traits assigned to the specified child view controller.\nDeprecated\nfunc overrideTraitCollection(forChild: UIViewController) -> UITraitCollection?\nRetrieves the trait collection for a child view controller.\nDeprecated\nclass func attemptRotationToDeviceOrientation()\nAttempts to rotate all windows to the orientation of the device.\nDeprecated\nfunc registerForPreviewing(with: UIViewControllerPreviewingDelegate, sourceView: UIView) -> UIViewControllerPreviewing\nRegisters a view controller to participate with 3D Touch preview (peek) and commit (pop).\nDeprecated\nfunc unregisterForPreviewing(withContext: UIViewControllerPreviewing)\nUnregisters a previously registered view controller identified by its context object.\nDeprecated\nfunc canPerformUnwindSegueAction(Selector, from: UIViewController, withSender: Any) -> Bool\nCalled on a view controller to determine whether it wants to respond to an unwind action.\nDeprecated\nfunc didRotate(from: UIInterfaceOrientation)\nSent to the view controller after the user interface rotates.\nDeprecated\nfunc dismissMoviePlayerViewControllerAnimated()\nDismisses a movie player view controller using the standard movie player transition.\nDeprecated\nfunc presentMoviePlayerViewControllerAnimated(MPMoviePlayerViewController!)\nPresents the movie player view controller using the standard movie player transition.\nDeprecated\nfunc rotatingFooterView() -> UIView?\nReturns the footer view to transition during an interface orientation change.\nDeprecated\nfunc rotatingHeaderView() -> UIView?\nReturns the header view to transition during an interface orientation change.\nDeprecated\nfunc segueForUnwinding(to: UIViewController, from: UIViewController, identifier: String?) -> UIStoryboardSegue?\nCalled when an unwind segue action needs to transition between two view controllers.\nDeprecated\nfunc shouldAutomaticallyForwardRotationMethods() -> Bool\nReturns a Boolean value indicating whether rotation methods are forwarded to child view controllers.\nDeprecated\nfunc willAnimateRotation(to: UIInterfaceOrientation, duration: TimeInterval)\nSent to the view controller before performing a one-step user interface rotation.\nDeprecated\nfunc willRotate(to: UIInterfaceOrientation, duration: TimeInterval)\nSent to the view controller just before the user interface begins rotating.\nDeprecated"
  },
  {
    "title": "attemptRotationToDeviceOrientation() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontroller/1621400-attemptrotationtodeviceorientati",
    "html": "Deprecated\n\nUse setNeedsUpdateOfSupportedInterfaceOrientations() instead.\n\nDiscussion\n\nSome view controllers may want to use app-specific conditions to determine what interface orientations are supported. If your view controller does this, when those conditions change, your app should call this class method. The system immediately attempts to rotate to the new orientation.\n\nSee Also\nDeprecated methods\nfunc setOverrideTraitCollection(UITraitCollection?, forChild: UIViewController)\nChanges the traits assigned to the specified child view controller.\nDeprecated\nfunc overrideTraitCollection(forChild: UIViewController) -> UITraitCollection?\nRetrieves the trait collection for a child view controller.\nDeprecated\nfunc registerForPreviewing(with: UIViewControllerPreviewingDelegate, sourceView: UIView) -> UIViewControllerPreviewing\nRegisters a view controller to participate with 3D Touch preview (peek) and commit (pop).\nDeprecated\nfunc unregisterForPreviewing(withContext: UIViewControllerPreviewing)\nUnregisters a previously registered view controller identified by its context object.\nDeprecated\nfunc canPerformUnwindSegueAction(Selector, from: UIViewController, withSender: Any) -> Bool\nCalled on a view controller to determine whether it wants to respond to an unwind action.\nDeprecated\nfunc didRotate(from: UIInterfaceOrientation)\nSent to the view controller after the user interface rotates.\nDeprecated\nfunc dismissMoviePlayerViewControllerAnimated()\nDismisses a movie player view controller using the standard movie player transition.\nDeprecated\nfunc forUnwindSegueAction(Selector, from: UIViewController, withSender: Any?) -> UIViewController?\nCalled when an unwind segue action wants to search a container's children for a view controller to handle the unwind action.\nDeprecated\nfunc presentMoviePlayerViewControllerAnimated(MPMoviePlayerViewController!)\nPresents the movie player view controller using the standard movie player transition.\nDeprecated\nfunc rotatingFooterView() -> UIView?\nReturns the footer view to transition during an interface orientation change.\nDeprecated\nfunc rotatingHeaderView() -> UIView?\nReturns the header view to transition during an interface orientation change.\nDeprecated\nfunc segueForUnwinding(to: UIViewController, from: UIViewController, identifier: String?) -> UIStoryboardSegue?\nCalled when an unwind segue action needs to transition between two view controllers.\nDeprecated\nfunc shouldAutomaticallyForwardRotationMethods() -> Bool\nReturns a Boolean value indicating whether rotation methods are forwarded to child view controllers.\nDeprecated\nfunc willAnimateRotation(to: UIInterfaceOrientation, duration: TimeInterval)\nSent to the view controller before performing a one-step user interface rotation.\nDeprecated\nfunc willRotate(to: UIInterfaceOrientation, duration: TimeInterval)\nSent to the view controller just before the user interface begins rotating.\nDeprecated\nRelated Documentation\nvar supportedInterfaceOrientations: UIInterfaceOrientationMask\nThe interface orientations that the view controller supports."
  },
  {
    "title": "presentMoviePlayerViewControllerAnimated(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontroller/1622347-presentmovieplayerviewcontroller",
    "html": "Parameters\nmoviePlayerViewController\n\nThe movie player view controller to present.\n\nSee Also\nDeprecated methods\nfunc setOverrideTraitCollection(UITraitCollection?, forChild: UIViewController)\nChanges the traits assigned to the specified child view controller.\nDeprecated\nfunc overrideTraitCollection(forChild: UIViewController) -> UITraitCollection?\nRetrieves the trait collection for a child view controller.\nDeprecated\nclass func attemptRotationToDeviceOrientation()\nAttempts to rotate all windows to the orientation of the device.\nDeprecated\nfunc registerForPreviewing(with: UIViewControllerPreviewingDelegate, sourceView: UIView) -> UIViewControllerPreviewing\nRegisters a view controller to participate with 3D Touch preview (peek) and commit (pop).\nDeprecated\nfunc unregisterForPreviewing(withContext: UIViewControllerPreviewing)\nUnregisters a previously registered view controller identified by its context object.\nDeprecated\nfunc canPerformUnwindSegueAction(Selector, from: UIViewController, withSender: Any) -> Bool\nCalled on a view controller to determine whether it wants to respond to an unwind action.\nDeprecated\nfunc didRotate(from: UIInterfaceOrientation)\nSent to the view controller after the user interface rotates.\nDeprecated\nfunc dismissMoviePlayerViewControllerAnimated()\nDismisses a movie player view controller using the standard movie player transition.\nDeprecated\nfunc forUnwindSegueAction(Selector, from: UIViewController, withSender: Any?) -> UIViewController?\nCalled when an unwind segue action wants to search a container's children for a view controller to handle the unwind action.\nDeprecated\nfunc rotatingFooterView() -> UIView?\nReturns the footer view to transition during an interface orientation change.\nDeprecated\nfunc rotatingHeaderView() -> UIView?\nReturns the header view to transition during an interface orientation change.\nDeprecated\nfunc segueForUnwinding(to: UIViewController, from: UIViewController, identifier: String?) -> UIStoryboardSegue?\nCalled when an unwind segue action needs to transition between two view controllers.\nDeprecated\nfunc shouldAutomaticallyForwardRotationMethods() -> Bool\nReturns a Boolean value indicating whether rotation methods are forwarded to child view controllers.\nDeprecated\nfunc willAnimateRotation(to: UIInterfaceOrientation, duration: TimeInterval)\nSent to the view controller before performing a one-step user interface rotation.\nDeprecated\nfunc willRotate(to: UIInterfaceOrientation, duration: TimeInterval)\nSent to the view controller just before the user interface begins rotating.\nDeprecated"
  },
  {
    "title": "automaticallyAdjustsScrollViewInsets | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontroller/1621372-automaticallyadjustsscrollviewin",
    "html": "Discussion\n\nThe default value of this property is true, which lets container view controllers know that they should adjust the scroll view insets of this view controller’s view to account for screen areas consumed by a status bar, search bar, navigation bar, toolbar, or tab bar. Set this property to false if your view controller implementation manages its own scroll view inset adjustments.\n\nSee Also\nDeprecated properties\nvar shouldAutorotate: Bool\nA Boolean value that indicates whether the view controller’s contents should autorotate.\nDeprecated\nvar previewActionItems: [UIPreviewActionItem]\nThe quick actions displayed when a user swipes upward on a 3D Touch preview.\nDeprecated\nvar bottomLayoutGuide: UILayoutSupport\nIndicates the lowest vertical extent for your onscreen content, for use with Auto Layout constraints.\nDeprecated\nvar interfaceOrientation: UIInterfaceOrientation\nConvenience property that provides the current orientation of the interface, meaningful only if the view controller is taking up the full screen.\nDeprecated\nvar isModalInPopover: Bool\nA Boolean value indicating whether the view controller should be presented modally by a popover.\nDeprecated\nvar searchDisplayController: UISearchDisplayController?\nThe search display controller associated with the view controller.\nDeprecated\nvar topLayoutGuide: UILayoutSupport\nIndicates the highest vertical extent for your onscreen content, for use with Auto Layout constraints.\nDeprecated"
  },
  {
    "title": "canPerformUnwindSegueAction(_:from:withSender:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontroller/1621449-canperformunwindsegueaction",
    "html": "Parameters\naction\n\nThe unwind action to invoke on your view controller.\n\nfromViewController\n\nThe view controller that initiated the unwind action.\n\nsender\n\nThe object that triggered the action.\n\nReturn Value\n\ntrue if the view controller wants to handle the unwind action, otherwise false.\n\nDiscussion\n\nWhen an unwind segue is triggered, UIKit uses this method and the allowedChildrenForUnwinding(from:) method to locate a suitable view controller to handle the unwind segue.\n\nThe default implementation of this method returns true when the current view controller implements the action method and is not the same view controller as the one in the fromViewController parameter. You can override this method as needed to change the default behavior. For example, you might return false if the current view controller does not make a suitable return target when unwinding from the specified view controller.\n\nSee Also\nDeprecated methods\nfunc setOverrideTraitCollection(UITraitCollection?, forChild: UIViewController)\nChanges the traits assigned to the specified child view controller.\nDeprecated\nfunc overrideTraitCollection(forChild: UIViewController) -> UITraitCollection?\nRetrieves the trait collection for a child view controller.\nDeprecated\nclass func attemptRotationToDeviceOrientation()\nAttempts to rotate all windows to the orientation of the device.\nDeprecated\nfunc registerForPreviewing(with: UIViewControllerPreviewingDelegate, sourceView: UIView) -> UIViewControllerPreviewing\nRegisters a view controller to participate with 3D Touch preview (peek) and commit (pop).\nDeprecated\nfunc unregisterForPreviewing(withContext: UIViewControllerPreviewing)\nUnregisters a previously registered view controller identified by its context object.\nDeprecated\nfunc didRotate(from: UIInterfaceOrientation)\nSent to the view controller after the user interface rotates.\nDeprecated\nfunc dismissMoviePlayerViewControllerAnimated()\nDismisses a movie player view controller using the standard movie player transition.\nDeprecated\nfunc forUnwindSegueAction(Selector, from: UIViewController, withSender: Any?) -> UIViewController?\nCalled when an unwind segue action wants to search a container's children for a view controller to handle the unwind action.\nDeprecated\nfunc presentMoviePlayerViewControllerAnimated(MPMoviePlayerViewController!)\nPresents the movie player view controller using the standard movie player transition.\nDeprecated\nfunc rotatingFooterView() -> UIView?\nReturns the footer view to transition during an interface orientation change.\nDeprecated\nfunc rotatingHeaderView() -> UIView?\nReturns the header view to transition during an interface orientation change.\nDeprecated\nfunc segueForUnwinding(to: UIViewController, from: UIViewController, identifier: String?) -> UIStoryboardSegue?\nCalled when an unwind segue action needs to transition between two view controllers.\nDeprecated\nfunc shouldAutomaticallyForwardRotationMethods() -> Bool\nReturns a Boolean value indicating whether rotation methods are forwarded to child view controllers.\nDeprecated\nfunc willAnimateRotation(to: UIInterfaceOrientation, duration: TimeInterval)\nSent to the view controller before performing a one-step user interface rotation.\nDeprecated\nfunc willRotate(to: UIInterfaceOrientation, duration: TimeInterval)\nSent to the view controller just before the user interface begins rotating.\nDeprecated"
  },
  {
    "title": "dismissMoviePlayerViewControllerAnimated() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontroller/1622345-dismissmovieplayerviewcontroller",
    "html": "Discussion\n\nIf the receiver’s modal property does not contain a movie player view controller, this method does nothing.\n\nSee Also\nDeprecated methods\nfunc setOverrideTraitCollection(UITraitCollection?, forChild: UIViewController)\nChanges the traits assigned to the specified child view controller.\nDeprecated\nfunc overrideTraitCollection(forChild: UIViewController) -> UITraitCollection?\nRetrieves the trait collection for a child view controller.\nDeprecated\nclass func attemptRotationToDeviceOrientation()\nAttempts to rotate all windows to the orientation of the device.\nDeprecated\nfunc registerForPreviewing(with: UIViewControllerPreviewingDelegate, sourceView: UIView) -> UIViewControllerPreviewing\nRegisters a view controller to participate with 3D Touch preview (peek) and commit (pop).\nDeprecated\nfunc unregisterForPreviewing(withContext: UIViewControllerPreviewing)\nUnregisters a previously registered view controller identified by its context object.\nDeprecated\nfunc canPerformUnwindSegueAction(Selector, from: UIViewController, withSender: Any) -> Bool\nCalled on a view controller to determine whether it wants to respond to an unwind action.\nDeprecated\nfunc didRotate(from: UIInterfaceOrientation)\nSent to the view controller after the user interface rotates.\nDeprecated\nfunc forUnwindSegueAction(Selector, from: UIViewController, withSender: Any?) -> UIViewController?\nCalled when an unwind segue action wants to search a container's children for a view controller to handle the unwind action.\nDeprecated\nfunc presentMoviePlayerViewControllerAnimated(MPMoviePlayerViewController!)\nPresents the movie player view controller using the standard movie player transition.\nDeprecated\nfunc rotatingFooterView() -> UIView?\nReturns the footer view to transition during an interface orientation change.\nDeprecated\nfunc rotatingHeaderView() -> UIView?\nReturns the header view to transition during an interface orientation change.\nDeprecated\nfunc segueForUnwinding(to: UIViewController, from: UIViewController, identifier: String?) -> UIStoryboardSegue?\nCalled when an unwind segue action needs to transition between two view controllers.\nDeprecated\nfunc shouldAutomaticallyForwardRotationMethods() -> Bool\nReturns a Boolean value indicating whether rotation methods are forwarded to child view controllers.\nDeprecated\nfunc willAnimateRotation(to: UIInterfaceOrientation, duration: TimeInterval)\nSent to the view controller before performing a one-step user interface rotation.\nDeprecated\nfunc willRotate(to: UIInterfaceOrientation, duration: TimeInterval)\nSent to the view controller just before the user interface begins rotating.\nDeprecated"
  },
  {
    "title": "rotatingFooterView() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontroller/1621402-rotatingfooterview",
    "html": "Deprecated\n\nFooter views are now animated with the rest of the view.\n\nReturn Value\n\nThe footer view.\n\nIf the view controller is a tab bar controller, returns a view containing the tab bar. If the view controller is a navigation controller, returns the top view controller's footer view. The default implementation returns nil.\n\nDiscussion\n\nIn most cases, the header view is the navigation bar and the footer view is the tab bar. If you are implementing this method in a custom view controller that has its own custom footer view, you can override this method to return that footer view. The view returned from this method should already be part of your view controller's view hierarchy.\n\nYou are responsible for adjusting the size and position of the returned view to match the target orientation. You would make such a change in your view controller's rotation methods, such as the willAnimateRotation(to:duration:) method.\n\nSee Also\nDeprecated methods\nfunc setOverrideTraitCollection(UITraitCollection?, forChild: UIViewController)\nChanges the traits assigned to the specified child view controller.\nDeprecated\nfunc overrideTraitCollection(forChild: UIViewController) -> UITraitCollection?\nRetrieves the trait collection for a child view controller.\nDeprecated\nclass func attemptRotationToDeviceOrientation()\nAttempts to rotate all windows to the orientation of the device.\nDeprecated\nfunc registerForPreviewing(with: UIViewControllerPreviewingDelegate, sourceView: UIView) -> UIViewControllerPreviewing\nRegisters a view controller to participate with 3D Touch preview (peek) and commit (pop).\nDeprecated\nfunc unregisterForPreviewing(withContext: UIViewControllerPreviewing)\nUnregisters a previously registered view controller identified by its context object.\nDeprecated\nfunc canPerformUnwindSegueAction(Selector, from: UIViewController, withSender: Any) -> Bool\nCalled on a view controller to determine whether it wants to respond to an unwind action.\nDeprecated\nfunc didRotate(from: UIInterfaceOrientation)\nSent to the view controller after the user interface rotates.\nDeprecated\nfunc dismissMoviePlayerViewControllerAnimated()\nDismisses a movie player view controller using the standard movie player transition.\nDeprecated\nfunc forUnwindSegueAction(Selector, from: UIViewController, withSender: Any?) -> UIViewController?\nCalled when an unwind segue action wants to search a container's children for a view controller to handle the unwind action.\nDeprecated\nfunc presentMoviePlayerViewControllerAnimated(MPMoviePlayerViewController!)\nPresents the movie player view controller using the standard movie player transition.\nDeprecated\nfunc rotatingHeaderView() -> UIView?\nReturns the header view to transition during an interface orientation change.\nDeprecated\nfunc segueForUnwinding(to: UIViewController, from: UIViewController, identifier: String?) -> UIStoryboardSegue?\nCalled when an unwind segue action needs to transition between two view controllers.\nDeprecated\nfunc shouldAutomaticallyForwardRotationMethods() -> Bool\nReturns a Boolean value indicating whether rotation methods are forwarded to child view controllers.\nDeprecated\nfunc willAnimateRotation(to: UIInterfaceOrientation, duration: TimeInterval)\nSent to the view controller before performing a one-step user interface rotation.\nDeprecated\nfunc willRotate(to: UIInterfaceOrientation, duration: TimeInterval)\nSent to the view controller just before the user interface begins rotating.\nDeprecated"
  },
  {
    "title": "rotatingHeaderView() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontroller/1621412-rotatingheaderview",
    "html": "Deprecated\n\nHeader views are now animated with the rest of the view.\n\nReturn Value\n\nThe header view or nil if there is no header view. If the current view controller is a tab bar controller, this method returns the header view of the view controller in the selected tab. If the current view controller is a navigation controller, this method returns the associated navigation bar.\n\nDiscussion\n\nIn most cases, the header view is the navigation bar and the footer view is the tab bar. If you are implementing this method in a custom view controller that has its own custom header view, you can override this method to return that header view. The view returned from this method should already be part of your view controller's view hierarchy.\n\nYou are responsible for adjusting the size and position of the returned view to match the target orientation. You would make such a change in your view controller's rotation methods, such as the willAnimateRotation(to:duration:) method.\n\nSee Also\nDeprecated methods\nfunc setOverrideTraitCollection(UITraitCollection?, forChild: UIViewController)\nChanges the traits assigned to the specified child view controller.\nDeprecated\nfunc overrideTraitCollection(forChild: UIViewController) -> UITraitCollection?\nRetrieves the trait collection for a child view controller.\nDeprecated\nclass func attemptRotationToDeviceOrientation()\nAttempts to rotate all windows to the orientation of the device.\nDeprecated\nfunc registerForPreviewing(with: UIViewControllerPreviewingDelegate, sourceView: UIView) -> UIViewControllerPreviewing\nRegisters a view controller to participate with 3D Touch preview (peek) and commit (pop).\nDeprecated\nfunc unregisterForPreviewing(withContext: UIViewControllerPreviewing)\nUnregisters a previously registered view controller identified by its context object.\nDeprecated\nfunc canPerformUnwindSegueAction(Selector, from: UIViewController, withSender: Any) -> Bool\nCalled on a view controller to determine whether it wants to respond to an unwind action.\nDeprecated\nfunc didRotate(from: UIInterfaceOrientation)\nSent to the view controller after the user interface rotates.\nDeprecated\nfunc dismissMoviePlayerViewControllerAnimated()\nDismisses a movie player view controller using the standard movie player transition.\nDeprecated\nfunc forUnwindSegueAction(Selector, from: UIViewController, withSender: Any?) -> UIViewController?\nCalled when an unwind segue action wants to search a container's children for a view controller to handle the unwind action.\nDeprecated\nfunc presentMoviePlayerViewControllerAnimated(MPMoviePlayerViewController!)\nPresents the movie player view controller using the standard movie player transition.\nDeprecated\nfunc rotatingFooterView() -> UIView?\nReturns the footer view to transition during an interface orientation change.\nDeprecated\nfunc segueForUnwinding(to: UIViewController, from: UIViewController, identifier: String?) -> UIStoryboardSegue?\nCalled when an unwind segue action needs to transition between two view controllers.\nDeprecated\nfunc shouldAutomaticallyForwardRotationMethods() -> Bool\nReturns a Boolean value indicating whether rotation methods are forwarded to child view controllers.\nDeprecated\nfunc willAnimateRotation(to: UIInterfaceOrientation, duration: TimeInterval)\nSent to the view controller before performing a one-step user interface rotation.\nDeprecated\nfunc willRotate(to: UIInterfaceOrientation, duration: TimeInterval)\nSent to the view controller just before the user interface begins rotating.\nDeprecated"
  },
  {
    "title": "UIImage.RenderingMode.alwaysTemplate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/renderingmode/alwaystemplate",
    "html": "See Also\nRendering modes\ncase automatic\nDraw the image using the context’s default rendering mode.\ncase alwaysOriginal\nAlways draw the original image, without treating it as a template."
  },
  {
    "title": "init(blurEffect:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uivibrancyeffect/1615064-init",
    "html": "Parameters\nblurEffect\n\nThe UIBlurEffect used by the blurred view the vibrancy effect is attached to.\n\nReturn Value\n\nThe vibrancy effect to be used by a UIVisualEffectView object.\n\nDiscussion\n\nWhen you create a new vibrancy effect, use the same UIBlurEffect that you used to create the blur view. Using a different UIBlurEffect can cause unwanted visual effect combinations.\n\nSee Also\nCreating a vibrancy effect\ninit(blurEffect: UIBlurEffect, style: UIVibrancyEffectStyle)\nCreates a vibrancy effect with the specified blur and style values.\nenum UIVibrancyEffectStyle\nConstants for the vibrancy styles."
  },
  {
    "title": "shouldAutorotate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontroller/1621419-shouldautorotate",
    "html": "Deprecated\n\nInstead, update supportedInterfaceOrientations and then call setNeedsUpdateOfSupportedInterfaceOrientations() to indicate a change to the supported interface orientations.\n\nReturn Value\n\ntrue if the content should rotate, otherwise false. This method returns true by default.\n\nSee Also\nDeprecated properties\nvar previewActionItems: [UIPreviewActionItem]\nThe quick actions displayed when a user swipes upward on a 3D Touch preview.\nDeprecated\nvar automaticallyAdjustsScrollViewInsets: Bool\nA Boolean value that indicates whether the view controller should automatically adjust its scroll view insets.\nDeprecated\nvar bottomLayoutGuide: UILayoutSupport\nIndicates the lowest vertical extent for your onscreen content, for use with Auto Layout constraints.\nDeprecated\nvar interfaceOrientation: UIInterfaceOrientation\nConvenience property that provides the current orientation of the interface, meaningful only if the view controller is taking up the full screen.\nDeprecated\nvar isModalInPopover: Bool\nA Boolean value indicating whether the view controller should be presented modally by a popover.\nDeprecated\nvar searchDisplayController: UISearchDisplayController?\nThe search display controller associated with the view controller.\nDeprecated\nvar topLayoutGuide: UILayoutSupport\nIndicates the highest vertical extent for your onscreen content, for use with Auto Layout constraints.\nDeprecated"
  },
  {
    "title": "init(blurEffect:style:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uivibrancyeffect/3229994-init",
    "html": "Parameters\nblurEffect\n\nThe UIBlurEffect used by the blurred view the vibrancy effect is attached to.\n\nstyle\n\nThe style that defines what level of vibrancy to apply to the content. For a list of possible values, see UIVibrancyEffectStyle.\n\nReturn Value\n\nThe vibrancy effect object to use in your visual effect view.\n\nDiscussion\n\nWhen you create a new vibrancy effect, use the same UIBlurEffect that you used to create the blur view. Using a different UIBlurEffect can cause unwanted visual effect combinations.\n\nSee Also\nCreating a vibrancy effect\ninit(blurEffect: UIBlurEffect)\nCreates a vibrancy effect for a specific blur effect.\nenum UIVibrancyEffectStyle\nConstants for the vibrancy styles."
  },
  {
    "title": "searchDisplayController | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontroller/1621420-searchdisplaycontroller",
    "html": "Deprecated\n\nUse the UISearchController class to integrate search results.\n\nDiscussion\n\nThis property reflects the value of the searchDisplayController outlet that you set in Interface Builder. If you create your search display controller programmatically, this property is set automatically by the search display controller when it is initialized.\n\nSee Also\nDeprecated properties\nvar shouldAutorotate: Bool\nA Boolean value that indicates whether the view controller’s contents should autorotate.\nDeprecated\nvar previewActionItems: [UIPreviewActionItem]\nThe quick actions displayed when a user swipes upward on a 3D Touch preview.\nDeprecated\nvar automaticallyAdjustsScrollViewInsets: Bool\nA Boolean value that indicates whether the view controller should automatically adjust its scroll view insets.\nDeprecated\nvar bottomLayoutGuide: UILayoutSupport\nIndicates the lowest vertical extent for your onscreen content, for use with Auto Layout constraints.\nDeprecated\nvar interfaceOrientation: UIInterfaceOrientation\nConvenience property that provides the current orientation of the interface, meaningful only if the view controller is taking up the full screen.\nDeprecated\nvar isModalInPopover: Bool\nA Boolean value indicating whether the view controller should be presented modally by a popover.\nDeprecated\nvar topLayoutGuide: UILayoutSupport\nIndicates the highest vertical extent for your onscreen content, for use with Auto Layout constraints.\nDeprecated"
  },
  {
    "title": "notificationCenter() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uivibrancyeffect/1613917-notificationcenter",
    "html": "Deprecated\n\nUse widgetPrimary() instead.\n\nReturn Value\n\nThe vibrancy effect that’s appropriate for use in Today widgets in Notification Center. To learn more about Today widgets, see Today.\n\nSee Also\nDeprecated\nclass func widgetPrimary() -> UIVibrancyEffect\nCreates a vibrancy effect suitable for use with certain supporting text and template images within a widget.\nDeprecated\nclass func widgetSecondary() -> UIVibrancyEffect\nCreates a vibrancy effect suitable for indicating the secondary importance or relevance of supporting text and template images within a widget.\nDeprecated\nclass func widgetEffect(forVibrancyStyle: UIVibrancyEffectStyle) -> UIVibrancyEffect\nCreates a vibrancy effect for the specified style.\nDeprecated"
  },
  {
    "title": "widgetPrimary() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uivibrancyeffect/1771278-widgetprimary",
    "html": "Deprecated\n\nUse init(blurEffect:style:) instead.\n\nSee Also\nDeprecated\nclass func widgetSecondary() -> UIVibrancyEffect\nCreates a vibrancy effect suitable for indicating the secondary importance or relevance of supporting text and template images within a widget.\nDeprecated\nclass func widgetEffect(forVibrancyStyle: UIVibrancyEffectStyle) -> UIVibrancyEffect\nCreates a vibrancy effect for the specified style.\nDeprecated\nclass func notificationCenter() -> UIVibrancyEffect\nCreates a vibrancy effect for use in Notification Center.\nDeprecated"
  },
  {
    "title": "widgetEffect(forVibrancyStyle:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uivibrancyeffect/3238094-widgeteffect",
    "html": "Deprecated\n\nUse init(blurEffect:style:) instead.\n\nSee Also\nDeprecated\nclass func widgetPrimary() -> UIVibrancyEffect\nCreates a vibrancy effect suitable for use with certain supporting text and template images within a widget.\nDeprecated\nclass func widgetSecondary() -> UIVibrancyEffect\nCreates a vibrancy effect suitable for indicating the secondary importance or relevance of supporting text and template images within a widget.\nDeprecated\nclass func notificationCenter() -> UIVibrancyEffect\nCreates a vibrancy effect for use in Notification Center.\nDeprecated"
  },
  {
    "title": "widgetSecondary() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uivibrancyeffect/1771277-widgetsecondary",
    "html": "Deprecated\n\nUse init(blurEffect:style:) instead.\n\nSee Also\nDeprecated\nclass func widgetPrimary() -> UIVibrancyEffect\nCreates a vibrancy effect suitable for use with certain supporting text and template images within a widget.\nDeprecated\nclass func widgetEffect(forVibrancyStyle: UIVibrancyEffectStyle) -> UIVibrancyEffect\nCreates a vibrancy effect for the specified style.\nDeprecated\nclass func notificationCenter() -> UIVibrancyEffect\nCreates a vibrancy effect for use in Notification Center.\nDeprecated"
  },
  {
    "title": "init(horizontal:vertical:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uioffset/1625055-init",
    "html": "Parameters\nhorizontal\n\nThe horizontal offset.\n\nvertical\n\nThe vertical offset.\n\nSee Also\nInitializing offsets\ninit()\nCreates an offset structure."
  },
  {
    "title": "horizontal | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uioffset/1624524-horizontal",
    "html": "Discussion\n\nPositive values indicate an offset to the right, and negative values indicate an offset to the left.\n\nSee Also\nGetting the offset values\nvar vertical: CGFloat\nThe amount of vertical offset from a position."
  },
  {
    "title": "init(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uioffset/3081639-init",
    "html": "Relationships\nFrom Protocol\nDecodable\nSee Also\nEncoding and decoding\nfunc encode(to: Encoder)\nEncodes this value into the given encoder."
  },
  {
    "title": "scrollIndicatorInsets | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619427-scrollindicatorinsets",
    "html": "Deprecated\n\nUse horizontalScrollIndicatorInsets and verticalScrollIndicatorInsets instead.\n\nDiscussion\n\nThe default value is zero."
  },
  {
    "title": "UIScrollView.IndexDisplayMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/indexdisplaymode",
    "html": "Topics\nConstants\ncase automatic\nThe index is displayed or hidden automatically.\ncase alwaysHidden\nThe index is never displayed.\nRelationships\nConforms To\nSendable\nSee Also\nManaging the index\nvar indexDisplayMode: UIScrollView.IndexDisplayMode\nThe manner in which the index appears while the user is scrolling."
  },
  {
    "title": "maximumValueImageRect(forBounds:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uislider/1621333-maximumvalueimagerect",
    "html": "Parameters\nbounds\n\nThe bounding rectangle of the slider.\n\nReturn Value\n\nThe computed drawing rectangle for the image.\n\nDiscussion\n\nYou do not call this method directly. Instead, you override it when you want to customize the rectangle in which the maximum value image is drawn, returning a different rectangle. If you make x-axis adjustments, be sure to take into account the automatic flipping of maximumValueImage in a right-to-left user interface; the maximum image is always shown at the trailing end of the slider’s track. See the Internationalization and Localization Guide for further information about supporting right-to-left languages.\n\nSee Also\nOverrides for subclasses\nfunc minimumValueImageRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the minimum value image.\nfunc trackRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the slider’s track.\nfunc thumbRect(forBounds: CGRect, trackRect: CGRect, value: Float) -> CGRect\nReturns the drawing rectangle for the slider’s thumb image."
  },
  {
    "title": "keyboardDismissMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619437-keyboarddismissmode",
    "html": "Discussion\n\nThe default value is UIScrollView.KeyboardDismissMode.none. See UIScrollView.KeyboardDismissMode for possible values.\n\nSee Also\nDismissing the keyboard\nenum UIScrollView.KeyboardDismissMode\nConstants that determine how the system dismisses the keyboard when a drag begins in the scroll view."
  },
  {
    "title": "timeZone | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidatepicker/1615976-timezone",
    "html": "Discussion\n\nThe default value is nil, which tells the date picker to use the current time zone as returned by local (NSTimeZone) or the time zone used by the date picker’s calendar.\n\nSee Also\nManaging the date and calendar\nvar calendar: Calendar!\nThe calendar to use for the date picker.\nvar date: Date\nThe date displayed by the date picker.\nvar locale: Locale?\nThe locale used by the date picker.\nfunc setDate(Date, animated: Bool)\nSets the date to display in the date picker, with an option to animate the setting."
  },
  {
    "title": "loadHTMLString(_:baseURL:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebview/1617979-loadhtmlstring",
    "html": "Parameters\nstring\n\nThe content for the main page.\n\nbaseURL\n\nThe base URL for the content.\n\nDiscussion\n\nTo help you avoid being vulnerable to security attacks, be sure to use this method to load local HTML files; don’t use loadRequest(_:).\n\nSee Also\nLoading content\nfunc load(Data, mimeType: String, textEncodingName: String, baseURL: URL)\nSets the main page contents, MIME type, content encoding, and base URL.\nDeprecated\nfunc loadRequest(URLRequest)\nConnects to a given URL by initiating an asynchronous client request.\nDeprecated\nvar request: URLRequest?\nThe URL request identifying the location of the content to load.\nDeprecated\nvar isLoading: Bool\nA Boolean value indicating whether the receiver is done loading content.\nDeprecated\nfunc stopLoading()\nStops the loading of any web content managed by the receiver.\nDeprecated\nfunc reload()\nReloads the current page.\nDeprecated"
  },
  {
    "title": "customMirror | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitraitoverrides/4138629-custommirror",
    "html": "Relationships\nFrom Protocol\nCustomReflectable"
  },
  {
    "title": "beginFromCurrentState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/keyframeanimationoptions/1622544-beginfromcurrentstate",
    "html": "Discussion\n\nIf this option isn’t present, any in-flight animations are allowed to finish before the new animation is started. If another animation isn’t in flight, this option has no effect."
  },
  {
    "title": "overrideInheritedDuration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/keyframeanimationoptions/1622569-overrideinheritedduration",
    "html": "Discussion\n\nIf this option isn’t present, the animation inherits the remaining duration of the in-flight animation, if any."
  },
  {
    "title": "autoreverse | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/keyframeanimationoptions/1622560-autoreverse",
    "html": "Discussion\n\nThis option must be combined with the repeat option."
  },
  {
    "title": "debugDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitraitoverrides/4138630-debugdescription",
    "html": "Relationships\nFrom Protocol\nCustomDebugStringConvertible"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitraitoverrides/4138647-subscript",
    "html": "Relationships\nFrom Protocol\nUIMutableTraits"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitraitoverrides/4138643-subscript",
    "html": "Relationships\nFrom Protocol\nUIMutableTraits"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitraitoverrides/4138645-subscript",
    "html": "Relationships\nFrom Protocol\nUIMutableTraits"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitraitoverrides/4138646-subscript",
    "html": "Relationships\nFrom Protocol\nUIMutableTraits"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitraitoverrides/4176647-subscript",
    "html": "Relationships\nFrom Protocol\nUIMutableTraits"
  },
  {
    "title": "stopLoading() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebview/1617974-stoploading",
    "html": "Discussion\n\nStops any content in the process of being loaded by the main frame or any of its children frames. Does nothing if no content is being loaded.\n\nSee Also\nLoading content\nfunc load(Data, mimeType: String, textEncodingName: String, baseURL: URL)\nSets the main page contents, MIME type, content encoding, and base URL.\nDeprecated\nfunc loadHTMLString(String, baseURL: URL?)\nSets the main page content and base URL.\nDeprecated\nfunc loadRequest(URLRequest)\nConnects to a given URL by initiating an asynchronous client request.\nDeprecated\nvar request: URLRequest?\nThe URL request identifying the location of the content to load.\nDeprecated\nvar isLoading: Bool\nA Boolean value indicating whether the receiver is done loading content.\nDeprecated\nfunc reload()\nReloads the current page.\nDeprecated"
  },
  {
    "title": "currentMaximumTrackImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uislider/1621343-currentmaximumtrackimage",
    "html": "Discussion\n\nSliders can have different track images for different control states. The active control state determines which maximum track image is stored in this property. To get the maximum track image for a different control state, use the maximumTrackImage(for:) method.\n\nIf no custom track images have been set using the setMaximumTrackImage(_:for:) method, this property contains the value nil. In that situation, the slider uses the default maximum track image for drawing.\n\nSee Also\nChanging the slider’s appearance\nvar minimumValueImage: UIImage?\nThe image that represents the slider’s minimum value.\nvar maximumValueImage: UIImage?\nThe image representing the slider’s maximum value.\nvar minimumTrackTintColor: UIColor?\nThe color used to tint the default minimum track images.\nvar currentMinimumTrackImage: UIImage?\nThe minimum track image currently being used to render the slider.\nfunc minimumTrackImage(for: UIControl.State) -> UIImage?\nReturns the minimum track image associated with the specified control state.\nfunc setMinimumTrackImage(UIImage?, for: UIControl.State)\nAssigns a minimum track image to the specified control states.\nvar maximumTrackTintColor: UIColor?\nThe color used to tint the default maximum track images.\nfunc maximumTrackImage(for: UIControl.State) -> UIImage?\nReturns the maximum track image associated with the specified control state.\nfunc setMaximumTrackImage(UIImage?, for: UIControl.State)\nAssigns a maximum track image to the specified control states.\nvar thumbTintColor: UIColor?\nThe color used to tint the default thumb images.\nvar currentThumbImage: UIImage?\nThe thumb image currently being used to render the slider.\nfunc thumbImage(for: UIControl.State) -> UIImage?\nReturns the thumb image associated with the specified control state.\nfunc setThumbImage(UIImage?, for: UIControl.State)\nAssigns a thumb image to the specified control states."
  },
  {
    "title": "maximumTrackImage(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uislider/1621335-maximumtrackimage",
    "html": "Parameters\nstate\n\nThe control state whose maximum track image you want to use. Specify a single control state value for this parameter.\n\nReturn Value\n\nThe maximum track image associated with the specified state, or nil if an appropriate image could not be retrieved. This method might return nil if you specify multiple control states in the state parameter. For a description of track images, see Customize the slider’s appearance.\n\nSee Also\nChanging the slider’s appearance\nvar minimumValueImage: UIImage?\nThe image that represents the slider’s minimum value.\nvar maximumValueImage: UIImage?\nThe image representing the slider’s maximum value.\nvar minimumTrackTintColor: UIColor?\nThe color used to tint the default minimum track images.\nvar currentMinimumTrackImage: UIImage?\nThe minimum track image currently being used to render the slider.\nfunc minimumTrackImage(for: UIControl.State) -> UIImage?\nReturns the minimum track image associated with the specified control state.\nfunc setMinimumTrackImage(UIImage?, for: UIControl.State)\nAssigns a minimum track image to the specified control states.\nvar maximumTrackTintColor: UIColor?\nThe color used to tint the default maximum track images.\nvar currentMaximumTrackImage: UIImage?\nContains the maximum track image currently being used to render the slider.\nfunc setMaximumTrackImage(UIImage?, for: UIControl.State)\nAssigns a maximum track image to the specified control states.\nvar thumbTintColor: UIColor?\nThe color used to tint the default thumb images.\nvar currentThumbImage: UIImage?\nThe thumb image currently being used to render the slider.\nfunc thumbImage(for: UIControl.State) -> UIImage?\nReturns the thumb image associated with the specified control state.\nfunc setThumbImage(UIImage?, for: UIControl.State)\nAssigns a thumb image to the specified control states."
  },
  {
    "title": "currentMinimumTrackImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uislider/1621339-currentminimumtrackimage",
    "html": "Discussion\n\nSliders can have different track images for different control states. The active control state determines which minimum track image is stored in this property. To get the minimum track image for a different control state, use the minimumTrackImage(for:) method.\n\nIf no custom track images have been set using the setMinimumTrackImage(_:for:) method, this property contains the value nil. In that situation, the slider uses the default minimum track image for drawing.\n\nSee Also\nChanging the slider’s appearance\nvar minimumValueImage: UIImage?\nThe image that represents the slider’s minimum value.\nvar maximumValueImage: UIImage?\nThe image representing the slider’s maximum value.\nvar minimumTrackTintColor: UIColor?\nThe color used to tint the default minimum track images.\nfunc minimumTrackImage(for: UIControl.State) -> UIImage?\nReturns the minimum track image associated with the specified control state.\nfunc setMinimumTrackImage(UIImage?, for: UIControl.State)\nAssigns a minimum track image to the specified control states.\nvar maximumTrackTintColor: UIColor?\nThe color used to tint the default maximum track images.\nvar currentMaximumTrackImage: UIImage?\nContains the maximum track image currently being used to render the slider.\nfunc maximumTrackImage(for: UIControl.State) -> UIImage?\nReturns the maximum track image associated with the specified control state.\nfunc setMaximumTrackImage(UIImage?, for: UIControl.State)\nAssigns a maximum track image to the specified control states.\nvar thumbTintColor: UIColor?\nThe color used to tint the default thumb images.\nvar currentThumbImage: UIImage?\nThe thumb image currently being used to render the slider.\nfunc thumbImage(for: UIControl.State) -> UIImage?\nReturns the thumb image associated with the specified control state.\nfunc setThumbImage(UIImage?, for: UIControl.State)\nAssigns a thumb image to the specified control states."
  },
  {
    "title": "minuteInterval | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidatepicker/1615998-minuteinterval",
    "html": "Discussion\n\nUse this property to set the interval displayed by the minutes wheel (for example, 15 minutes). The interval value must be evenly divided into 60; if it isn’t, the default value is used. The default and minimum values are 1; the maximum value is 30.\n\nSee Also\nConfiguring temporal attributes\nvar maximumDate: Date?\nThe maximum date that a date picker can show.\nvar minimumDate: Date?\nThe minimum date that a date picker can show.\nvar countDownDuration: TimeInterval\nThe value displayed by the date picker when the mode property is set to show a countdown time.\nvar roundsToMinuteInterval: Bool\nA Boolean value that determines whether the date rounds to a specific minute interval."
  },
  {
    "title": "bouncesZoom | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619410-bounceszoom",
    "html": "Discussion\n\nIf the value of this property is true and zooming exceeds either the maximum or minimum limits for scaling, the scroll view temporarily animates the content scaling just past these limits before returning to them. If this property is false, zooming stops immediately at one a scaling limits. The default value is true.\n\nSee Also\nZooming and panning\nvar panGestureRecognizer: UIPanGestureRecognizer\nThe underlying gesture recognizer for pan gestures.\nvar pinchGestureRecognizer: UIPinchGestureRecognizer?\nThe underlying gesture recognizer for pinch gestures.\nfunc zoom(to: CGRect, animated: Bool)\nZooms to a specific area of the content so that it’s visible in the scroll view.\nvar zoomScale: CGFloat\nA floating-point value that specifies the current scale factor applied to the scroll view’s content.\nfunc setZoomScale(CGFloat, animated: Bool)\nA floating-point value that specifies the current zoom scale.\nvar maximumZoomScale: CGFloat\nA floating-point value that specifies the maximum scale factor that can apply to the scroll view’s content.\nvar minimumZoomScale: CGFloat\nA floating-point value that specifies the minimum scale factor that can apply to the scroll view’s content.\nvar isZoomBouncing: Bool\nA Boolean value that indicates that zooming has exceeded the scaling limits specified for the scroll view.\nvar isZooming: Bool\nA Boolean value that indicates whether the content view is currently zooming in or out."
  },
  {
    "title": "maximumZoomScale | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619408-maximumzoomscale",
    "html": "Discussion\n\nThis value determines how large the content can be scaled. It must be greater than the minimum zoom scale for zooming to be enabled. The default value is 1.0.\n\nSee Also\nZooming and panning\nvar panGestureRecognizer: UIPanGestureRecognizer\nThe underlying gesture recognizer for pan gestures.\nvar pinchGestureRecognizer: UIPinchGestureRecognizer?\nThe underlying gesture recognizer for pinch gestures.\nfunc zoom(to: CGRect, animated: Bool)\nZooms to a specific area of the content so that it’s visible in the scroll view.\nvar zoomScale: CGFloat\nA floating-point value that specifies the current scale factor applied to the scroll view’s content.\nfunc setZoomScale(CGFloat, animated: Bool)\nA floating-point value that specifies the current zoom scale.\nvar minimumZoomScale: CGFloat\nA floating-point value that specifies the minimum scale factor that can apply to the scroll view’s content.\nvar isZoomBouncing: Bool\nA Boolean value that indicates that zooming has exceeded the scaling limits specified for the scroll view.\nvar isZooming: Bool\nA Boolean value that indicates whether the content view is currently zooming in or out.\nvar bouncesZoom: Bool\nA Boolean value that determines whether the scroll view animates the content scaling when the scaling exceeds the maximum or minimum limits."
  },
  {
    "title": "scrollViewDidEndZooming(_:with:atScale:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollviewdelegate/1619407-scrollviewdidendzooming",
    "html": "Parameters\nscrollView\n\nThe scroll-view object displaying the content view.\n\nview\n\nThe view object representing that part of the content view that needs to be scaled.\n\nscale\n\nThe scale factor to use for scaling; this value must be between the limits established by the UIScrollView properties maximumZoomScale and minimumZoomScale.\n\nDiscussion\n\nThe scroll view also calls this method after any “bounce” animations. It also calls this method after animated changes to the zoom level and after a zoom-related gesture ends (regardless of whether the gesture resulted in a change to the zoom level).\n\nSee Also\nManaging zooming\nfunc viewForZooming(in: UIScrollView) -> UIView?\nAsks the delegate for the view to scale when zooming is about to occur in the scroll view.\nfunc scrollViewWillBeginZooming(UIScrollView, with: UIView?)\nTells the delegate that zooming of the content in the scroll view is about to commence.\nfunc scrollViewDidZoom(UIScrollView)\nTells the delegate that the scroll view’s zoom factor changed."
  },
  {
    "title": "delaysContentTouches | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619398-delayscontenttouches",
    "html": "Discussion\n\nIf the value of this property is true, the scroll view delays handling the touch-down gesture until it can determine if scrolling is the intent. If the value is false , the scroll view immediately calls touchesShouldBegin(_:with:in:). The default value is true.\n\nSee the class description for a fuller discussion.\n\nSee Also\nManaging touches\nfunc touchesShouldBegin(Set<UITouch>, with: UIEvent?, in: UIView) -> Bool\nOverridden by subclasses to customize the default behavior when a finger touches down in displayed content.\nfunc touchesShouldCancel(in: UIView) -> Bool\nReturns whether to cancel touches related to the content subview and start dragging.\nvar canCancelContentTouches: Bool\nA Boolean value that controls whether touches in the content view always lead to tracking.\nvar directionalPressGestureRecognizer: UIGestureRecognizer\nThe underlying gesture recognizer for directional button presses."
  },
  {
    "title": "canCancelContentTouches | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619424-cancancelcontenttouches",
    "html": "Discussion\n\nIf the value of this property is true and a view in the content has begun tracking a finger touching it, and if the user drags the finger enough to initiate a scroll, the view receives a touchesCancelled(_:with:) message and the scroll view handles the touch as a scroll. If the value of this property is false, the scroll view doesn’t scroll regardless of finger movement once the content view starts tracking.\n\nSee Also\nManaging touches\nfunc touchesShouldBegin(Set<UITouch>, with: UIEvent?, in: UIView) -> Bool\nOverridden by subclasses to customize the default behavior when a finger touches down in displayed content.\nfunc touchesShouldCancel(in: UIView) -> Bool\nReturns whether to cancel touches related to the content subview and start dragging.\nvar delaysContentTouches: Bool\nA Boolean value that determines whether the scroll view delays the handling of touch-down gestures.\nvar directionalPressGestureRecognizer: UIGestureRecognizer\nThe underlying gesture recognizer for directional button presses."
  },
  {
    "title": "viewForZooming(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollviewdelegate/1619426-viewforzooming",
    "html": "Parameters\nscrollView\n\nThe scroll-view object displaying the content view.\n\nReturn Value\n\nA UIView object that will be scaled as a result of the zooming gesture. Return nil if you don’t want zooming to occur.\n\nSee Also\nManaging zooming\nfunc scrollViewWillBeginZooming(UIScrollView, with: UIView?)\nTells the delegate that zooming of the content in the scroll view is about to commence.\nfunc scrollViewDidEndZooming(UIScrollView, with: UIView?, atScale: CGFloat)\nTells the delegate when zooming of the content in the scroll view completed.\nfunc scrollViewDidZoom(UIScrollView)\nTells the delegate that the scroll view’s zoom factor changed."
  },
  {
    "title": "touchesShouldCancel(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619387-touchesshouldcancel",
    "html": "Parameters\nview\n\nThe view object in the content that’s being touched.\n\nReturn Value\n\ntrue to cancel further touch messages to view, false to have view continue to receive those messages. The default returned value is true if view is not a UIControl object; otherwise, it returns false.\n\nDiscussion\n\nThe scroll view calls this method just after it starts sending tracking messages to the content view. If it receives false from this method, it stops dragging and forwards the touch events to the content subview. The scroll view doesn’t call this method if the value of the canCancelContentTouches property is false.\n\nSee Also\nManaging touches\nfunc touchesShouldBegin(Set<UITouch>, with: UIEvent?, in: UIView) -> Bool\nOverridden by subclasses to customize the default behavior when a finger touches down in displayed content.\nvar canCancelContentTouches: Bool\nA Boolean value that controls whether touches in the content view always lead to tracking.\nvar delaysContentTouches: Bool\nA Boolean value that determines whether the scroll view delays the handling of touch-down gestures.\nvar directionalPressGestureRecognizer: UIGestureRecognizer\nThe underlying gesture recognizer for directional button presses."
  },
  {
    "title": "touchesShouldBegin(_:with:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619418-touchesshouldbegin",
    "html": "Parameters\ntouches\n\nA set of UITouch instances that represent the touches for the starting phase of the event represented by event.\n\nevent\n\nAn object representing the event to which the touch objects in touches belong.\n\nview\n\nThe subview in the content where the touch-down gesture occurred.\n\nReturn Value\n\nReturn false if you don’t want the scroll view to send event messages to view. If you want view to receive those messages, return true (the default).\n\nDiscussion\n\nThe default behavior of UIScrollView is to invoke the UIResponder event-handling methods of the target subview that the touches occur in.\n\nSee Also\nManaging touches\nfunc touchesShouldCancel(in: UIView) -> Bool\nReturns whether to cancel touches related to the content subview and start dragging.\nvar canCancelContentTouches: Bool\nA Boolean value that controls whether touches in the content view always lead to tracking.\nvar delaysContentTouches: Bool\nA Boolean value that determines whether the scroll view delays the handling of touch-down gestures.\nvar directionalPressGestureRecognizer: UIGestureRecognizer\nThe underlying gesture recognizer for directional button presses."
  },
  {
    "title": "refreshControl | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/2127691-refreshcontrol",
    "html": "See Also\nManaging the scroll indicator and refresh control\nvar indicatorStyle: UIScrollView.IndicatorStyle\nThe style of the scroll indicators.\nenum UIScrollView.IndicatorStyle\nDefines constants that represent the styles of the scroll indicators.\nvar showsHorizontalScrollIndicator: Bool\nA Boolean value that controls whether the horizontal scroll indicator is visible.\nvar showsVerticalScrollIndicator: Bool\nA Boolean value that controls whether the vertical scroll indicator is visible.\nvar horizontalScrollIndicatorInsets: UIEdgeInsets\nThe horizontal distance the scroll indicators are inset from the edge of the scroll view.\nvar verticalScrollIndicatorInsets: UIEdgeInsets\nThe vertical distance the scroll indicators are inset from the edge of the scroll view.\nvar automaticallyAdjustsScrollIndicatorInsets: Bool\nA Boolean value that indicates whether the system automatically adjusts the scroll indicator insets.\nfunc flashScrollIndicators()\nDisplays the scroll indicators momentarily.\nclass UIRefreshControl\nA standard control that can initiate the refreshing of a scroll view’s contents."
  },
  {
    "title": "flashScrollIndicators() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619435-flashscrollindicators",
    "html": "Discussion\n\nYou should call this method whenever you bring the scroll view to front.\n\nSee Also\nManaging the scroll indicator and refresh control\nvar indicatorStyle: UIScrollView.IndicatorStyle\nThe style of the scroll indicators.\nenum UIScrollView.IndicatorStyle\nDefines constants that represent the styles of the scroll indicators.\nvar showsHorizontalScrollIndicator: Bool\nA Boolean value that controls whether the horizontal scroll indicator is visible.\nvar showsVerticalScrollIndicator: Bool\nA Boolean value that controls whether the vertical scroll indicator is visible.\nvar horizontalScrollIndicatorInsets: UIEdgeInsets\nThe horizontal distance the scroll indicators are inset from the edge of the scroll view.\nvar verticalScrollIndicatorInsets: UIEdgeInsets\nThe vertical distance the scroll indicators are inset from the edge of the scroll view.\nvar automaticallyAdjustsScrollIndicatorInsets: Bool\nA Boolean value that indicates whether the system automatically adjusts the scroll indicator insets.\nvar refreshControl: UIRefreshControl?\nThe refresh control associated with the scroll view.\nclass UIRefreshControl\nA standard control that can initiate the refreshing of a scroll view’s contents."
  },
  {
    "title": "scrollRectToVisible(_:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619439-scrollrecttovisible",
    "html": "Parameters\nrect\n\nA rectangle defining an area of the content view. The rectangle should be in the coordinate space of the scroll view.\n\nanimated\n\ntrue if the scrolling should be animated, false if it should be immediate.\n\nDiscussion\n\nThis method scrolls the content view so that the area defined by rect is just visible inside the scroll view. If the area is already visible, the method does nothing."
  },
  {
    "title": "decelerationRate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619438-decelerationrate",
    "html": "Discussion\n\nThe default rate is normal. For possible deceleration rates, see UIScrollView.DecelerationRate.\n\nSee Also\nGetting the scrolling state\nvar isTracking: Bool\nA Boolean value that indicates whether the user has touched the content to initiate scrolling.\nvar isDragging: Bool\nA Boolean value that indicates whether the user has begun scrolling the content.\nvar isDecelerating: Bool\nA Boolean value that indicates whether the content is moving in the scroll view after the user lifted their finger.\nstruct UIScrollView.DecelerationRate\nDeceleration rates for the scroll view."
  },
  {
    "title": "horizontalScrollIndicatorInsets | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/3198044-horizontalscrollindicatorinsets",
    "html": "Discussion\n\nThe default value is zero.\n\nSee Also\nManaging the scroll indicator and refresh control\nvar indicatorStyle: UIScrollView.IndicatorStyle\nThe style of the scroll indicators.\nenum UIScrollView.IndicatorStyle\nDefines constants that represent the styles of the scroll indicators.\nvar showsHorizontalScrollIndicator: Bool\nA Boolean value that controls whether the horizontal scroll indicator is visible.\nvar showsVerticalScrollIndicator: Bool\nA Boolean value that controls whether the vertical scroll indicator is visible.\nvar verticalScrollIndicatorInsets: UIEdgeInsets\nThe vertical distance the scroll indicators are inset from the edge of the scroll view.\nvar automaticallyAdjustsScrollIndicatorInsets: Bool\nA Boolean value that indicates whether the system automatically adjusts the scroll indicator insets.\nfunc flashScrollIndicators()\nDisplays the scroll indicators momentarily.\nvar refreshControl: UIRefreshControl?\nThe refresh control associated with the scroll view.\nclass UIRefreshControl\nA standard control that can initiate the refreshing of a scroll view’s contents."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitraitoverrides/4176651-subscript",
    "html": "Relationships\nFrom Protocol\nUIMutableTraits"
  },
  {
    "title": "showsVerticalScrollIndicator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619405-showsverticalscrollindicator",
    "html": "Discussion\n\nThe default value is true. The indicator is visible while tracking is underway and fades out after tracking.\n\nSee Also\nManaging the scroll indicator and refresh control\nvar indicatorStyle: UIScrollView.IndicatorStyle\nThe style of the scroll indicators.\nenum UIScrollView.IndicatorStyle\nDefines constants that represent the styles of the scroll indicators.\nvar showsHorizontalScrollIndicator: Bool\nA Boolean value that controls whether the horizontal scroll indicator is visible.\nvar horizontalScrollIndicatorInsets: UIEdgeInsets\nThe horizontal distance the scroll indicators are inset from the edge of the scroll view.\nvar verticalScrollIndicatorInsets: UIEdgeInsets\nThe vertical distance the scroll indicators are inset from the edge of the scroll view.\nvar automaticallyAdjustsScrollIndicatorInsets: Bool\nA Boolean value that indicates whether the system automatically adjusts the scroll indicator insets.\nfunc flashScrollIndicators()\nDisplays the scroll indicators momentarily.\nvar refreshControl: UIRefreshControl?\nThe refresh control associated with the scroll view.\nclass UIRefreshControl\nA standard control that can initiate the refreshing of a scroll view’s contents."
  },
  {
    "title": "isDecelerating | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619434-isdecelerating",
    "html": "Discussion\n\nThe returned value is true if user isn’t dragging the content but scrolling is still occurring.\n\nSee Also\nGetting the scrolling state\nvar isTracking: Bool\nA Boolean value that indicates whether the user has touched the content to initiate scrolling.\nvar isDragging: Bool\nA Boolean value that indicates whether the user has begun scrolling the content.\nvar decelerationRate: UIScrollView.DecelerationRate\nA floating-point value that determines the rate of deceleration after the user lifts their finger.\nstruct UIScrollView.DecelerationRate\nDeceleration rates for the scroll view."
  },
  {
    "title": "UIScrollView.DecelerationRate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/decelerationrate",
    "html": "Overview\n\nYou use these constants to set the value of the decelerationRate property.\n\nTopics\nDeceleration rates\nstatic let normal: UIScrollView.DecelerationRate\nThe default deceleration rate for a scroll view.\nstatic let fast: UIScrollView.DecelerationRate\nA fast deceleration rate for a scroll view.\nInitializers\ninit(rawValue: CGFloat)\nCreates a deceleration rate with the specified raw value.\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable\nSee Also\nGetting the scrolling state\nvar isTracking: Bool\nA Boolean value that indicates whether the user has touched the content to initiate scrolling.\nvar isDragging: Bool\nA Boolean value that indicates whether the user has begun scrolling the content.\nvar isDecelerating: Bool\nA Boolean value that indicates whether the content is moving in the scroll view after the user lifted their finger.\nvar decelerationRate: UIScrollView.DecelerationRate\nA floating-point value that determines the rate of deceleration after the user lifts their finger."
  },
  {
    "title": "isDragging | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619384-isdragging",
    "html": "Discussion\n\nThe value held by this property might require some time or distance of scrolling before it returns true.\n\nSee Also\nGetting the scrolling state\nvar isTracking: Bool\nA Boolean value that indicates whether the user has touched the content to initiate scrolling.\nvar isDecelerating: Bool\nA Boolean value that indicates whether the content is moving in the scroll view after the user lifted their finger.\nvar decelerationRate: UIScrollView.DecelerationRate\nA floating-point value that determines the rate of deceleration after the user lifts their finger.\nstruct UIScrollView.DecelerationRate\nDeceleration rates for the scroll view."
  },
  {
    "title": "showsHorizontalScrollIndicator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619380-showshorizontalscrollindicator",
    "html": "Discussion\n\nThe default value is true. The indicator is visible while tracking is underway and fades out after tracking.\n\nSee Also\nManaging the scroll indicator and refresh control\nvar indicatorStyle: UIScrollView.IndicatorStyle\nThe style of the scroll indicators.\nenum UIScrollView.IndicatorStyle\nDefines constants that represent the styles of the scroll indicators.\nvar showsVerticalScrollIndicator: Bool\nA Boolean value that controls whether the vertical scroll indicator is visible.\nvar horizontalScrollIndicatorInsets: UIEdgeInsets\nThe horizontal distance the scroll indicators are inset from the edge of the scroll view.\nvar verticalScrollIndicatorInsets: UIEdgeInsets\nThe vertical distance the scroll indicators are inset from the edge of the scroll view.\nvar automaticallyAdjustsScrollIndicatorInsets: Bool\nA Boolean value that indicates whether the system automatically adjusts the scroll indicator insets.\nfunc flashScrollIndicators()\nDisplays the scroll indicators momentarily.\nvar refreshControl: UIRefreshControl?\nThe refresh control associated with the scroll view.\nclass UIRefreshControl\nA standard control that can initiate the refreshing of a scroll view’s contents."
  },
  {
    "title": "UIScrollView.ContentInsetAdjustmentBehavior | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/contentinsetadjustmentbehavior",
    "html": "Topics\nEnumeration Cases\ncase automatic\nAutomatically adjust the scroll view insets.\ncase scrollableAxes\nAdjust the insets only in the scrollable directions.\ncase never\nDo not adjust the scroll view insets.\ncase always\nAlways include the safe area insets in the content adjustment.\nRelationships\nConforms To\nSendable\nSee Also\nManaging the content inset behavior\nvar adjustedContentInset: UIEdgeInsets\nThe insets derived from the content insets and the safe area of the scroll view.\nvar contentInset: UIEdgeInsets\nThe custom distance that the content view is inset from the safe area or scroll view edges.\nvar contentInsetAdjustmentBehavior: UIScrollView.ContentInsetAdjustmentBehavior\nThe behavior for determining the adjusted content offsets.\nfunc adjustedContentInsetDidChange()\nNotifies the scroll view when the adjusted content insets of the scroll view change."
  },
  {
    "title": "setContentOffset(_:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619400-setcontentoffset",
    "html": "Parameters\ncontentOffset\n\nA point (expressed in points) that’s offset from the content view’s origin.\n\nanimated\n\ntrue to animate the transition at a constant velocity to the new offset, false to make the transition immediate.\n\nSee Also\nManaging the content size and offset\nvar contentSize: CGSize\nThe size of the content view.\nvar contentOffset: CGPoint\nThe point at which the origin of the content view is offset from the origin of the scroll view."
  },
  {
    "title": "contentInsetAdjustmentBehavior | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/2902261-contentinsetadjustmentbehavior",
    "html": "Discussion\n\nThis property specifies how the safe area insets are used to modify the content area of the scroll view. The default value of this property is UIScrollView.ContentInsetAdjustmentBehavior.automatic.\n\nSee Also\nManaging the content inset behavior\nvar adjustedContentInset: UIEdgeInsets\nThe insets derived from the content insets and the safe area of the scroll view.\nvar contentInset: UIEdgeInsets\nThe custom distance that the content view is inset from the safe area or scroll view edges.\nenum UIScrollView.ContentInsetAdjustmentBehavior\nConstants indicating how safe area insets are added to the adjusted content inset.\nfunc adjustedContentInsetDidChange()\nNotifies the scroll view when the adjusted content insets of the scroll view change."
  },
  {
    "title": "allowsKeyboardScrolling | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/4200080-allowskeyboardscrolling",
    "html": "Discussion\n\nWhen this value is true, the scroll view animates its content offset in response to input from hardware keyboard keys like Page Up, Page Down, Home, End, and the arrow keys. The scroll view needs to have focus or be first responder to receive these key events.\n\nThe default value is true for apps that link against iOS 17 and later. Set this value to false to disable the ability to scroll content with hardware keyboard keys."
  },
  {
    "title": "UIOffsetEqualToOffset(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/3003560-uioffsetequaltooffset",
    "html": "See Also\nComparing offsets\nstatic func == (UIOffset, UIOffset) -> Bool\nReturns a Boolean value that indicates whether two values are equal."
  },
  {
    "title": "zero | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uioffset/1624501-zero",
    "html": "Discussion\n\nThis constant represents a UIOffset structure whose horizontal and vertical fields are 0."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uioffset/2983403",
    "html": "See Also\nComparing offsets\nfunc UIOffsetEqualToOffset(UIOffset, UIOffset) -> Bool\nReturns a Boolean value that indicates whether two offsets are equal.\nDeprecated"
  },
  {
    "title": "interactionState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipagecontrol/3577678-interactionstate",
    "html": "See Also\nCustomizing the interaction state\nvar allowsContinuousInteraction: Bool\nA Boolean value that determines whether the page control allows continuous interaction.\nenum UIPageControl.InteractionState\nConstants that define the interaction states of the page control."
  },
  {
    "title": "onTintColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiswitch/1623687-ontintcolor",
    "html": "See Also\nCustomizing the appearance of the switch\nvar thumbTintColor: UIColor?\nThe color used to tint the appearance of the thumb."
  },
  {
    "title": "numberOfPages | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipagecontrol/1621232-numberofpages",
    "html": "Discussion\n\nThe value of the property is the number of pages for the page control to show as dots. The default value is 0.\n\nSee Also\nManaging pages\nvar currentPage: Int\nThe current page, shown by the page control as a white dot.\nvar hidesForSinglePage: Bool\nA Boolean value that controls whether the page control is hidden when there is only one page.\nvar defersCurrentPageDisplay: Bool\nA Boolean value that controls when the current page is displayed.\nDeprecated\nfunc updateCurrentPageDisplay()\nUpdates the page indicator to the current page.\nDeprecated"
  },
  {
    "title": "dataDetectorTypes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebview/1617965-datadetectortypes",
    "html": "Discussion\n\nUse this property to specify the types of data (phone numbers, HTTP links, email address, and so on) that should be automatically converted to clickable URLs in the web view. When clicked, the web view opens the app responsible for handling the URL type and passes it the URL.\n\nSee the UIDataDetectorTypes enumeration for the types of data available for automatic detection.\n\nSee Also\nSetting web content properties\nvar allowsLinkPreview: Bool\nA Boolean value that determines whether pressing on a link displays a preview of the destination for the link.\nDeprecated\nvar scalesPageToFit: Bool\nA Boolean value determining whether the webpage scales to fit the view and the user can change the scale.\nDeprecated\nvar scrollView: UIScrollView\nThe scroll view associated with the web view.\nDeprecated\nvar suppressesIncrementalRendering: Bool\nA Boolean value indicating whether the web view suppresses content rendering until it is fully loaded into memory.\nDeprecated\nvar keyboardDisplayRequiresUserAction: Bool\nA Boolean value indicating whether web content can programmatically display the keyboard.\nDeprecated"
  },
  {
    "title": "minimumTrackTintColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uislider/1621348-minimumtracktintcolor",
    "html": "Discussion\n\nSetting this property resets the minimum track images back to the slider’s default images; the slider releases any custom images. Setting this property to nil resets the tint color to the default and removes any custom minimum track images.\n\nImportant\n\nThis property isn’t available when the user interface idiom is UIUserInterfaceIdiom.mac and behavioralStyle is UIBehavioralStyle.mac — setting it while in this state throws an exception.\n\nSee Also\nChanging the slider’s appearance\nvar minimumValueImage: UIImage?\nThe image that represents the slider’s minimum value.\nvar maximumValueImage: UIImage?\nThe image representing the slider’s maximum value.\nvar currentMinimumTrackImage: UIImage?\nThe minimum track image currently being used to render the slider.\nfunc minimumTrackImage(for: UIControl.State) -> UIImage?\nReturns the minimum track image associated with the specified control state.\nfunc setMinimumTrackImage(UIImage?, for: UIControl.State)\nAssigns a minimum track image to the specified control states.\nvar maximumTrackTintColor: UIColor?\nThe color used to tint the default maximum track images.\nvar currentMaximumTrackImage: UIImage?\nContains the maximum track image currently being used to render the slider.\nfunc maximumTrackImage(for: UIControl.State) -> UIImage?\nReturns the maximum track image associated with the specified control state.\nfunc setMaximumTrackImage(UIImage?, for: UIControl.State)\nAssigns a maximum track image to the specified control states.\nvar thumbTintColor: UIColor?\nThe color used to tint the default thumb images.\nvar currentThumbImage: UIImage?\nThe thumb image currently being used to render the slider.\nfunc thumbImage(for: UIControl.State) -> UIImage?\nReturns the thumb image associated with the specified control state.\nfunc setThumbImage(UIImage?, for: UIControl.State)\nAssigns a thumb image to the specified control states."
  },
  {
    "title": "UIDatePicker.Mode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidatepicker/mode",
    "html": "Overview\n\nThe mode determines whether dates, times, or both dates and times are displayed. You can also use it to specify the appearance of a countdown timer. You can set and retrieve the mode value through the datePickerMode property.\n\nTopics\nConstants\ncase time\nA mode that displays the date in hours, minutes, and (optionally) an AM/PM designation. The exact items shown and their order depend upon the locale set. An example of this mode is [ 6 | 53 | PM ].\ncase date\nA mode that displays the date in months, days of the month, and years. The exact order of these items depends on the locale setting. An example of this mode is [ November | 15 | 2007 ].\ncase dateAndTime\nA mode that displays the date as unified day of the week, month, and day of the month values, plus hours, minutes, and (optionally) an AM/PM designation. The exact order and format of these items depends on the locale set. An example of this mode is [ Wed Nov 15 | 6 | 53 | PM ].\ncase countDownTimer\nA mode that displays hour and minute values, for example [ 1 | 53 ]. The application must set a timer to fire at the proper interval and set the date picker as the seconds tick down.\nRelationships\nConforms To\nSendable\nSee Also\nConfiguring the date picker mode\nvar datePickerMode: UIDatePicker.Mode\nThe mode of the date picker."
  },
  {
    "title": "thumbImage(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uislider/1621342-thumbimage",
    "html": "Parameters\nstate\n\nThe control state whose thumb image you want to use. Specify a single control state value for this parameter.\n\nReturn Value\n\nThe thumb image associated with the specified state, or nil if an appropriate image could not be retrieved. This method might return nil if you specify multiple control states in the state parameter. For a description of track and thumb images, see Customize the slider’s appearance.\n\nSee Also\nChanging the slider’s appearance\nvar minimumValueImage: UIImage?\nThe image that represents the slider’s minimum value.\nvar maximumValueImage: UIImage?\nThe image representing the slider’s maximum value.\nvar minimumTrackTintColor: UIColor?\nThe color used to tint the default minimum track images.\nvar currentMinimumTrackImage: UIImage?\nThe minimum track image currently being used to render the slider.\nfunc minimumTrackImage(for: UIControl.State) -> UIImage?\nReturns the minimum track image associated with the specified control state.\nfunc setMinimumTrackImage(UIImage?, for: UIControl.State)\nAssigns a minimum track image to the specified control states.\nvar maximumTrackTintColor: UIColor?\nThe color used to tint the default maximum track images.\nvar currentMaximumTrackImage: UIImage?\nContains the maximum track image currently being used to render the slider.\nfunc maximumTrackImage(for: UIControl.State) -> UIImage?\nReturns the maximum track image associated with the specified control state.\nfunc setMaximumTrackImage(UIImage?, for: UIControl.State)\nAssigns a maximum track image to the specified control states.\nvar thumbTintColor: UIColor?\nThe color used to tint the default thumb images.\nvar currentThumbImage: UIImage?\nThe thumb image currently being used to render the slider.\nfunc setThumbImage(UIImage?, for: UIControl.State)\nAssigns a thumb image to the specified control states."
  },
  {
    "title": "request | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebview/1617972-request",
    "html": "See Also\nLoading content\nfunc load(Data, mimeType: String, textEncodingName: String, baseURL: URL)\nSets the main page contents, MIME type, content encoding, and base URL.\nDeprecated\nfunc loadHTMLString(String, baseURL: URL?)\nSets the main page content and base URL.\nDeprecated\nfunc loadRequest(URLRequest)\nConnects to a given URL by initiating an asynchronous client request.\nDeprecated\nvar isLoading: Bool\nA Boolean value indicating whether the receiver is done loading content.\nDeprecated\nfunc stopLoading()\nStops the loading of any web content managed by the receiver.\nDeprecated\nfunc reload()\nReloads the current page.\nDeprecated"
  },
  {
    "title": "isLoading | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebview/1617978-isloading",
    "html": "Discussion\n\nIf true, the receiver is still loading content; otherwise, false.\n\nSee Also\nLoading content\nfunc load(Data, mimeType: String, textEncodingName: String, baseURL: URL)\nSets the main page contents, MIME type, content encoding, and base URL.\nDeprecated\nfunc loadHTMLString(String, baseURL: URL?)\nSets the main page content and base URL.\nDeprecated\nfunc loadRequest(URLRequest)\nConnects to a given URL by initiating an asynchronous client request.\nDeprecated\nvar request: URLRequest?\nThe URL request identifying the location of the content to load.\nDeprecated\nfunc stopLoading()\nStops the loading of any web content managed by the receiver.\nDeprecated\nfunc reload()\nReloads the current page.\nDeprecated"
  },
  {
    "title": "UIWebViewDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebviewdelegate",
    "html": "Overview\n\nImportant\n\nBefore releasing an instance of UIWebView for which you have set a delegate, you must first set the UIWebView delegate property to nil before disposing of the UIWebView instance. This can be done, for example, in the dealloc method where you dispose of the UIWebView.\n\nTopics\nLoading Content\nfunc webView(UIWebView, shouldStartLoadWith: URLRequest, navigationType: UIWebView.NavigationType) -> Bool\nSent before a web view begins loading a frame.\nDeprecated\nfunc webViewDidStartLoad(UIWebView)\nSent after a web view starts loading a frame.\nDeprecated\nfunc webViewDidFinishLoad(UIWebView)\nSent after a web view finishes loading a frame.\nDeprecated\nfunc webView(UIWebView, didFailLoadWithError: Error)\nSent if a web view failed to load a frame.\nDeprecated\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nResponding to web view changes\nvar delegate: UIWebViewDelegate?\nThe receiver’s delegate.\nDeprecated"
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebview/1617937-delegate",
    "html": "Discussion\n\nThe delegate is sent messages when content is loading. See UIWebViewDelegate for the optional methods this delegate may implement.\n\nImportant\n\nBefore releasing an instance of UIWebView for which you have set a delegate, you must first set its delegate property to nil. This can be done, for example, in your dealloc method.\n\nSee Also\nResponding to web view changes\nprotocol UIWebViewDelegate\nThe UIWebViewDelegate protocol defines methods that a delegate of a UIWebView object can optionally implement to intervene when web content is loaded.\nRelated Documentation\nText Programming Guide for iOS\nUIKit User Interface Catalog"
  },
  {
    "title": "trackRect(forBounds:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uislider/1621349-trackrect",
    "html": "Parameters\nbounds\n\nThe bounding rectangle of the slider.\n\nReturn Value\n\nThe computed drawing rectangle for the track. This rectangle corresponds to the entire length of the track between the minimum and maximum value images.\n\nDiscussion\n\nYou do not call this method directly. Instead, you override it when you want to customize the track rectangle, returning a different rectangle. The returned rectangle is used to scale the track and thumb images during drawing.\n\nSee Also\nOverrides for subclasses\nfunc maximumValueImageRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the maximum value image.\nfunc minimumValueImageRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the minimum value image.\nfunc thumbRect(forBounds: CGRect, trackRect: CGRect, value: Float) -> CGRect\nReturns the drawing rectangle for the slider’s thumb image."
  },
  {
    "title": "minimumValueImageRect(forBounds:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uislider/1621327-minimumvalueimagerect",
    "html": "Parameters\nbounds\n\nThe bounding rectangle of the slider.\n\nReturn Value\n\nThe computed drawing rectangle for the image.\n\nDiscussion\n\nYou do not call this method directly. Instead, you override it when you want to customize the rectangle in which the minimum value image is drawn, returning a different rectangle. If you make x-axis adjustments, be sure to take into account the automatic flipping of minimumValueImage in a right-to-left user interface; the minimum image is always shown at the leading end of the slider’s track. See the Internationalization and Localization Guide for further information about supporting right-to-left languages.\n\nSee Also\nOverrides for subclasses\nfunc maximumValueImageRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the maximum value image.\nfunc trackRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the slider’s track.\nfunc thumbRect(forBounds: CGRect, trackRect: CGRect, value: Float) -> CGRect\nReturns the drawing rectangle for the slider’s thumb image."
  },
  {
    "title": "thumbRect(forBounds:trackRect:value:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uislider/1621344-thumbrect",
    "html": "Parameters\nbounds\n\nThe bounding rectangle of the slider.\n\nrect\n\nThe drawing rectangle for the slider’s track, as returned by the trackRect(forBounds:) method.\n\nvalue\n\nThe current value of the slider.\n\nReturn Value\n\nThe computed drawing rectangle for the thumb image.\n\nDiscussion\n\nYou do not call this method directly. Instead, you override it when you want to customize the thumb image’s drawing rectangle, returning a different rectangle. The rectangle you return must reflect the size of your thumb image and its current position on the slider’s track.\n\nSee Also\nOverrides for subclasses\nfunc maximumValueImageRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the maximum value image.\nfunc minimumValueImageRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the minimum value image.\nfunc trackRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the slider’s track."
  },
  {
    "title": "setThumbImage(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uislider/1621336-setthumbimage",
    "html": "Parameters\nimage\n\nThe thumb image to associate with the specified states.\n\nstate\n\nThe control state with which to associate the image.\n\nDiscussion\n\nWhen you specify a custom thumb image, the slider ignores the custom thumb tint color, if any.\n\nImportant\n\nThis method isn’t available when the user interface idiom is UIUserInterfaceIdiom.mac and behavioralStyle is UIBehavioralStyle.mac — calling it while in this state throws an exception.\n\nSee Also\nChanging the slider’s appearance\nvar minimumValueImage: UIImage?\nThe image that represents the slider’s minimum value.\nvar maximumValueImage: UIImage?\nThe image representing the slider’s maximum value.\nvar minimumTrackTintColor: UIColor?\nThe color used to tint the default minimum track images.\nvar currentMinimumTrackImage: UIImage?\nThe minimum track image currently being used to render the slider.\nfunc minimumTrackImage(for: UIControl.State) -> UIImage?\nReturns the minimum track image associated with the specified control state.\nfunc setMinimumTrackImage(UIImage?, for: UIControl.State)\nAssigns a minimum track image to the specified control states.\nvar maximumTrackTintColor: UIColor?\nThe color used to tint the default maximum track images.\nvar currentMaximumTrackImage: UIImage?\nContains the maximum track image currently being used to render the slider.\nfunc maximumTrackImage(for: UIControl.State) -> UIImage?\nReturns the maximum track image associated with the specified control state.\nfunc setMaximumTrackImage(UIImage?, for: UIControl.State)\nAssigns a maximum track image to the specified control states.\nvar thumbTintColor: UIColor?\nThe color used to tint the default thumb images.\nvar currentThumbImage: UIImage?\nThe thumb image currently being used to render the slider.\nfunc thumbImage(for: UIControl.State) -> UIImage?\nReturns the thumb image associated with the specified control state."
  },
  {
    "title": "thumbTintColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uislider/1621332-thumbtintcolor",
    "html": "Discussion\n\nSetting this property resets the thumb images back to the slider’s default images; any custom images are released by the slider. Setting this property to nil resets the tint color to the default and removes any custom thumb images.\n\nImportant\n\nThis property isn’t available when the user interface idiom is UIUserInterfaceIdiom.mac and behavioralStyle is UIBehavioralStyle.mac — setting it while in this state throws an exception.\n\nSee Also\nChanging the slider’s appearance\nvar minimumValueImage: UIImage?\nThe image that represents the slider’s minimum value.\nvar maximumValueImage: UIImage?\nThe image representing the slider’s maximum value.\nvar minimumTrackTintColor: UIColor?\nThe color used to tint the default minimum track images.\nvar currentMinimumTrackImage: UIImage?\nThe minimum track image currently being used to render the slider.\nfunc minimumTrackImage(for: UIControl.State) -> UIImage?\nReturns the minimum track image associated with the specified control state.\nfunc setMinimumTrackImage(UIImage?, for: UIControl.State)\nAssigns a minimum track image to the specified control states.\nvar maximumTrackTintColor: UIColor?\nThe color used to tint the default maximum track images.\nvar currentMaximumTrackImage: UIImage?\nContains the maximum track image currently being used to render the slider.\nfunc maximumTrackImage(for: UIControl.State) -> UIImage?\nReturns the maximum track image associated with the specified control state.\nfunc setMaximumTrackImage(UIImage?, for: UIControl.State)\nAssigns a maximum track image to the specified control states.\nvar currentThumbImage: UIImage?\nThe thumb image currently being used to render the slider.\nfunc thumbImage(for: UIControl.State) -> UIImage?\nReturns the thumb image associated with the specified control state.\nfunc setThumbImage(UIImage?, for: UIControl.State)\nAssigns a thumb image to the specified control states."
  },
  {
    "title": "contentOffset | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619404-contentoffset",
    "html": "Discussion\n\nThe default value is CGPointZero.\n\nSee Also\nManaging the content size and offset\nvar contentSize: CGSize\nThe size of the content view.\nfunc setContentOffset(CGPoint, animated: Bool)\nSets the offset from the content view’s origin that corresponds to the scroll view’s origin."
  },
  {
    "title": "setMaximumTrackImage(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uislider/1621338-setmaximumtrackimage",
    "html": "Parameters\nimage\n\nThe maximum track image to associate with the specified states.\n\nstate\n\nThe control state with which to associate the image.\n\nDiscussion\n\nBecause the movement of the slider’s thumb changes the width of the area occupied by the maximum track image, the image width must change accordingly. To accommodate this requirement, specify track images as stretchable images that can grow or shrink to fill the available space. For information about how to create stretchable images, see UIImage.\n\nWhen you specify a custom maximum track image, the slider ignores the custom maximum track tint color, if any.\n\nImportant\n\nThis method isn’t available when the user interface idiom is UIUserInterfaceIdiom.mac and behavioralStyle is UIBehavioralStyle.mac — calling it while in this state throws an exception.\n\nSee Also\nChanging the slider’s appearance\nvar minimumValueImage: UIImage?\nThe image that represents the slider’s minimum value.\nvar maximumValueImage: UIImage?\nThe image representing the slider’s maximum value.\nvar minimumTrackTintColor: UIColor?\nThe color used to tint the default minimum track images.\nvar currentMinimumTrackImage: UIImage?\nThe minimum track image currently being used to render the slider.\nfunc minimumTrackImage(for: UIControl.State) -> UIImage?\nReturns the minimum track image associated with the specified control state.\nfunc setMinimumTrackImage(UIImage?, for: UIControl.State)\nAssigns a minimum track image to the specified control states.\nvar maximumTrackTintColor: UIColor?\nThe color used to tint the default maximum track images.\nvar currentMaximumTrackImage: UIImage?\nContains the maximum track image currently being used to render the slider.\nfunc maximumTrackImage(for: UIControl.State) -> UIImage?\nReturns the maximum track image associated with the specified control state.\nvar thumbTintColor: UIColor?\nThe color used to tint the default thumb images.\nvar currentThumbImage: UIImage?\nThe thumb image currently being used to render the slider.\nfunc thumbImage(for: UIControl.State) -> UIImage?\nReturns the thumb image associated with the specified control state.\nfunc setThumbImage(UIImage?, for: UIControl.State)\nAssigns a thumb image to the specified control states."
  },
  {
    "title": "minimumTrackImage(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uislider/1621328-minimumtrackimage",
    "html": "Parameters\nstate\n\nThe control state whose minimum track image you want to use. Specify a single control state value for this parameter.\n\nReturn Value\n\nThe minimum track image associated with the specified state, or nil if no image has been set. This method might also return nil if you specify multiple control states in the state parameter. For a description of track images, see Customize the slider’s appearance.\n\nSee Also\nChanging the slider’s appearance\nvar minimumValueImage: UIImage?\nThe image that represents the slider’s minimum value.\nvar maximumValueImage: UIImage?\nThe image representing the slider’s maximum value.\nvar minimumTrackTintColor: UIColor?\nThe color used to tint the default minimum track images.\nvar currentMinimumTrackImage: UIImage?\nThe minimum track image currently being used to render the slider.\nfunc setMinimumTrackImage(UIImage?, for: UIControl.State)\nAssigns a minimum track image to the specified control states.\nvar maximumTrackTintColor: UIColor?\nThe color used to tint the default maximum track images.\nvar currentMaximumTrackImage: UIImage?\nContains the maximum track image currently being used to render the slider.\nfunc maximumTrackImage(for: UIControl.State) -> UIImage?\nReturns the maximum track image associated with the specified control state.\nfunc setMaximumTrackImage(UIImage?, for: UIControl.State)\nAssigns a maximum track image to the specified control states.\nvar thumbTintColor: UIColor?\nThe color used to tint the default thumb images.\nvar currentThumbImage: UIImage?\nThe thumb image currently being used to render the slider.\nfunc thumbImage(for: UIControl.State) -> UIImage?\nReturns the thumb image associated with the specified control state.\nfunc setThumbImage(UIImage?, for: UIControl.State)\nAssigns a thumb image to the specified control states."
  },
  {
    "title": "setMinimumTrackImage(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uislider/1621331-setminimumtrackimage",
    "html": "Parameters\nimage\n\nThe minimum track image to associate with the specified states.\n\nstate\n\nThe control state with which to associate the image.\n\nDiscussion\n\nBecause the movement of the slider’s thumb changes the width of the area occupied by the minimum track image, the image width changes accordingly. To accommodate this requirement, specify track images as stretchable images that can grow or shrink to fill the available space. For information about how to create stretchable images, see UIImage.\n\nWhen you specify a custom minimum track image, the slider ignores the custom minimum track tint color, if any.\n\nImportant\n\nThis method isn’t available when the user interface idiom is UIUserInterfaceIdiom.mac and behavioralStyle is UIBehavioralStyle.mac — calling it while in this state throws an exception.\n\nSee Also\nChanging the slider’s appearance\nvar minimumValueImage: UIImage?\nThe image that represents the slider’s minimum value.\nvar maximumValueImage: UIImage?\nThe image representing the slider’s maximum value.\nvar minimumTrackTintColor: UIColor?\nThe color used to tint the default minimum track images.\nvar currentMinimumTrackImage: UIImage?\nThe minimum track image currently being used to render the slider.\nfunc minimumTrackImage(for: UIControl.State) -> UIImage?\nReturns the minimum track image associated with the specified control state.\nvar maximumTrackTintColor: UIColor?\nThe color used to tint the default maximum track images.\nvar currentMaximumTrackImage: UIImage?\nContains the maximum track image currently being used to render the slider.\nfunc maximumTrackImage(for: UIControl.State) -> UIImage?\nReturns the maximum track image associated with the specified control state.\nfunc setMaximumTrackImage(UIImage?, for: UIControl.State)\nAssigns a maximum track image to the specified control states.\nvar thumbTintColor: UIColor?\nThe color used to tint the default thumb images.\nvar currentThumbImage: UIImage?\nThe thumb image currently being used to render the slider.\nfunc thumbImage(for: UIControl.State) -> UIImage?\nReturns the thumb image associated with the specified control state.\nfunc setThumbImage(UIImage?, for: UIControl.State)\nAssigns a thumb image to the specified control states."
  },
  {
    "title": "maximumTrackTintColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uislider/1621334-maximumtracktintcolor",
    "html": "Discussion\n\nSetting this property resets the maximum track images back to the slider’s default images; any custom images are released by the slider. Setting this property to nil resets the tint color to the default and removes any custom maximum track images.\n\nImportant\n\nThis property isn’t available when the user interface idiom is UIUserInterfaceIdiom.mac and behavioralStyle is UIBehavioralStyle.mac — setting it while in this state throws an exception.\n\nSee Also\nChanging the slider’s appearance\nvar minimumValueImage: UIImage?\nThe image that represents the slider’s minimum value.\nvar maximumValueImage: UIImage?\nThe image representing the slider’s maximum value.\nvar minimumTrackTintColor: UIColor?\nThe color used to tint the default minimum track images.\nvar currentMinimumTrackImage: UIImage?\nThe minimum track image currently being used to render the slider.\nfunc minimumTrackImage(for: UIControl.State) -> UIImage?\nReturns the minimum track image associated with the specified control state.\nfunc setMinimumTrackImage(UIImage?, for: UIControl.State)\nAssigns a minimum track image to the specified control states.\nvar currentMaximumTrackImage: UIImage?\nContains the maximum track image currently being used to render the slider.\nfunc maximumTrackImage(for: UIControl.State) -> UIImage?\nReturns the maximum track image associated with the specified control state.\nfunc setMaximumTrackImage(UIImage?, for: UIControl.State)\nAssigns a maximum track image to the specified control states.\nvar thumbTintColor: UIColor?\nThe color used to tint the default thumb images.\nvar currentThumbImage: UIImage?\nThe thumb image currently being used to render the slider.\nfunc thumbImage(for: UIControl.State) -> UIImage?\nReturns the thumb image associated with the specified control state.\nfunc setThumbImage(UIImage?, for: UIControl.State)\nAssigns a thumb image to the specified control states."
  },
  {
    "title": "contentSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619399-contentsize",
    "html": "Discussion\n\nThe unit of size is points. The default size is CGSizeZero.\n\nSee Also\nManaging the content size and offset\nvar contentOffset: CGPoint\nThe point at which the origin of the content view is offset from the origin of the scroll view.\nfunc setContentOffset(CGPoint, animated: Bool)\nSets the offset from the content view’s origin that corresponds to the scroll view’s origin."
  },
  {
    "title": "roundsToMinuteInterval | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidatepicker/3791478-roundstominuteinterval",
    "html": "Discussion\n\nIf this property is true, date always rounds to the minuteInterval and only produces dates that align with the minute interval. If this property is false, changes to date ignore the minuteInterval property.\n\nThe default value is true.\n\nSee Also\nConfiguring temporal attributes\nvar maximumDate: Date?\nThe maximum date that a date picker can show.\nvar minimumDate: Date?\nThe minimum date that a date picker can show.\nvar minuteInterval: Int\nThe interval at which the date picker should display minutes.\nvar countDownDuration: TimeInterval\nThe value displayed by the date picker when the mode property is set to show a countdown time."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619430-delegate",
    "html": "Discussion\n\nThe delegate must adopt the UIScrollViewDelegate protocol. The UIScrollView class, which doesn’t retain the delegate, invokes each protocol method the delegate implements.\n\nSee Also\nResponding to scroll view interactions\nprotocol UIScrollViewDelegate\nThe interface for the delegate of a scroll view."
  },
  {
    "title": "minimumValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uislider/1621345-minimumvalue",
    "html": "Discussion\n\nUse this property to set the value that the leading end of the slider represents. If you change the value of this property, and the current value of the slider is below the new minimum, the slider adjusts the value property to match the new minimum. If you set the minimum value to a value larger than the maximum, the slider updates the maximum value to equal the minimum.\n\nThe default value of this property is 0.0.\n\nSee Also\nAccessing the slider’s value limits\nvar maximumValue: Float\nThe maximum value of the slider."
  },
  {
    "title": "maximumValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uislider/1621341-maximumvalue",
    "html": "Discussion\n\nUse this property to set the value that the trailing end of the slider represents. If you change the value of this property, and the current value of the slider is above the new maximum, the slider adjusts the value property to match the new maximum. If you set the maximum value to a value smaller than the minimum, the slider updates the minimum value to equal the maximum.\n\nThe default value of this property is 1.0.\n\nSee Also\nAccessing the slider’s value limits\nvar minimumValue: Float\nThe minimum value of the slider."
  },
  {
    "title": "countDownDuration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidatepicker/1615986-countdownduration",
    "html": "Discussion\n\nUse this property to get and set the currently selected value when the date picker’s mode property is set to UIDatePicker.Mode.countDownTimer. This property is of type TimeInterval and therefore is measured in seconds, although the date picker displays only hours and minutes. If the mode of the date picker is not UIDatePicker.Mode.countDownTimer, this value is undefined; refer instead to the date property. The default value is 0.0 and the maximum value is 23:59 (86,340 seconds).\n\nSee Also\nConfiguring temporal attributes\nvar maximumDate: Date?\nThe maximum date that a date picker can show.\nvar minimumDate: Date?\nThe minimum date that a date picker can show.\nvar minuteInterval: Int\nThe interval at which the date picker should display minutes.\nvar roundsToMinuteInterval: Bool\nA Boolean value that determines whether the date rounds to a specific minute interval."
  },
  {
    "title": "minimumDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidatepicker/1615980-minimumdate",
    "html": "Discussion\n\nUse this property to configure the minimum date that’s selected in the date picker interface. The property contains an NSDate object or nil (the default), which means no minimum date. This property, along with the maximumDate property, lets you specify a valid date range. If the minimum date value is greater than the maximum date value, both properties are ignored. The minimum and maximum dates are also ignored in the countdown-timer mode (UIDatePicker.Mode.countDownTimer).\n\nSee Also\nConfiguring temporal attributes\nvar maximumDate: Date?\nThe maximum date that a date picker can show.\nvar minuteInterval: Int\nThe interval at which the date picker should display minutes.\nvar countDownDuration: TimeInterval\nThe value displayed by the date picker when the mode property is set to show a countdown time.\nvar roundsToMinuteInterval: Bool\nA Boolean value that determines whether the date rounds to a specific minute interval."
  },
  {
    "title": "adjustable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiaccessibilitytraits/1620177-adjustable",
    "html": "Discussion\n\nUse this trait to characterize an accessibility element that users can adjust in a continuous manner, such as a slider or a picker view. If you specify this trait on an accessibility element, you must also implement the accessibilityIncrement() and accessibilityDecrement() methods in the UIAccessibilityAction protocol."
  },
  {
    "title": "zoomScale | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619419-zoomscale",
    "html": "Discussion\n\nThis value determines how much the content is currently scaled. The default value is 1.0.\n\nSee Also\nZooming and panning\nvar panGestureRecognizer: UIPanGestureRecognizer\nThe underlying gesture recognizer for pan gestures.\nvar pinchGestureRecognizer: UIPinchGestureRecognizer?\nThe underlying gesture recognizer for pinch gestures.\nfunc zoom(to: CGRect, animated: Bool)\nZooms to a specific area of the content so that it’s visible in the scroll view.\nfunc setZoomScale(CGFloat, animated: Bool)\nA floating-point value that specifies the current zoom scale.\nvar maximumZoomScale: CGFloat\nA floating-point value that specifies the maximum scale factor that can apply to the scroll view’s content.\nvar minimumZoomScale: CGFloat\nA floating-point value that specifies the minimum scale factor that can apply to the scroll view’s content.\nvar isZoomBouncing: Bool\nA Boolean value that indicates that zooming has exceeded the scaling limits specified for the scroll view.\nvar isZooming: Bool\nA Boolean value that indicates whether the content view is currently zooming in or out.\nvar bouncesZoom: Bool\nA Boolean value that determines whether the scroll view animates the content scaling when the scaling exceeds the maximum or minimum limits."
  },
  {
    "title": "setZoomScale(_:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619412-setzoomscale",
    "html": "Parameters\nscale\n\nThe new value to scale the content to.\n\nanimated\n\ntrue to animate the transition to the new scale, false to make the transition immediate.\n\nDiscussion\n\nThe new scale value should be between the minimumZoomScale and the maximumZoomScale.\n\nSee Also\nZooming and panning\nvar panGestureRecognizer: UIPanGestureRecognizer\nThe underlying gesture recognizer for pan gestures.\nvar pinchGestureRecognizer: UIPinchGestureRecognizer?\nThe underlying gesture recognizer for pinch gestures.\nfunc zoom(to: CGRect, animated: Bool)\nZooms to a specific area of the content so that it’s visible in the scroll view.\nvar zoomScale: CGFloat\nA floating-point value that specifies the current scale factor applied to the scroll view’s content.\nvar maximumZoomScale: CGFloat\nA floating-point value that specifies the maximum scale factor that can apply to the scroll view’s content.\nvar minimumZoomScale: CGFloat\nA floating-point value that specifies the minimum scale factor that can apply to the scroll view’s content.\nvar isZoomBouncing: Bool\nA Boolean value that indicates that zooming has exceeded the scaling limits specified for the scroll view.\nvar isZooming: Bool\nA Boolean value that indicates whether the content view is currently zooming in or out.\nvar bouncesZoom: Bool\nA Boolean value that determines whether the scroll view animates the content scaling when the scaling exceeds the maximum or minimum limits."
  },
  {
    "title": "UIWebView.PaginationMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebview/paginationmode",
    "html": "Topics\nConstants\ncase unpaginated\nContent appears as one long scrolling view with no distinct pages.\ncase leftToRight\nContent is broken up into pages that flow from left to right.\ncase topToBottom\nContent is broken up into pages that flow from top to bottom.\ncase bottomToTop\nContent is broken up into pages that flow from bottom to top.\ncase rightToLeft\nContent is broken up into pages that flow from right to left.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "maximumDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidatepicker/1615999-maximumdate",
    "html": "Discussion\n\nUse this property to configure the maximum date that’s selected in the date picker interface. The property contains an NSDate object or nil (the default), which means no maximum date. This property, along with the minimumDate property, lets you specify a valid date range. If the minimum date value is greater than the maximum date value, both properties are ignored. The minimum and maximum dates are also ignored in the countdown-timer mode (UIDatePicker.Mode.countDownTimer).\n\nSee Also\nConfiguring temporal attributes\nvar minimumDate: Date?\nThe minimum date that a date picker can show.\nvar minuteInterval: Int\nThe interval at which the date picker should display minutes.\nvar countDownDuration: TimeInterval\nThe value displayed by the date picker when the mode property is set to show a countdown time.\nvar roundsToMinuteInterval: Bool\nA Boolean value that determines whether the date rounds to a specific minute interval."
  },
  {
    "title": "isZoomBouncing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619423-iszoombouncing",
    "html": "Discussion\n\nThe value of this property is true if the scroll view is zooming back to a minimum or maximum zoom scaling value; otherwise, the value is false.\n\nSee Also\nZooming and panning\nvar panGestureRecognizer: UIPanGestureRecognizer\nThe underlying gesture recognizer for pan gestures.\nvar pinchGestureRecognizer: UIPinchGestureRecognizer?\nThe underlying gesture recognizer for pinch gestures.\nfunc zoom(to: CGRect, animated: Bool)\nZooms to a specific area of the content so that it’s visible in the scroll view.\nvar zoomScale: CGFloat\nA floating-point value that specifies the current scale factor applied to the scroll view’s content.\nfunc setZoomScale(CGFloat, animated: Bool)\nA floating-point value that specifies the current zoom scale.\nvar maximumZoomScale: CGFloat\nA floating-point value that specifies the maximum scale factor that can apply to the scroll view’s content.\nvar minimumZoomScale: CGFloat\nA floating-point value that specifies the minimum scale factor that can apply to the scroll view’s content.\nvar isZooming: Bool\nA Boolean value that indicates whether the content view is currently zooming in or out.\nvar bouncesZoom: Bool\nA Boolean value that determines whether the scroll view animates the content scaling when the scaling exceeds the maximum or minimum limits."
  },
  {
    "title": "directionalPressGestureRecognizer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1627702-directionalpressgesturerecognize",
    "html": "Discussion\n\nThe directionalPressGestureRecognizer is disabled by default. If you want to perform scrolling in direct response to up, down, left, and right arrow button presses, instead of scrolling indirectly in response to focus updates, enable this gesture recognizer.\n\nSee Also\nManaging touches\nfunc touchesShouldBegin(Set<UITouch>, with: UIEvent?, in: UIView) -> Bool\nOverridden by subclasses to customize the default behavior when a finger touches down in displayed content.\nfunc touchesShouldCancel(in: UIView) -> Bool\nReturns whether to cancel touches related to the content subview and start dragging.\nvar canCancelContentTouches: Bool\nA Boolean value that controls whether touches in the content view always lead to tracking.\nvar delaysContentTouches: Bool\nA Boolean value that determines whether the scroll view delays the handling of touch-down gestures."
  },
  {
    "title": "zoom(to:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619388-zoom",
    "html": "Parameters\nrect\n\nA rectangle defining an area of the content view. The rectangle should be in the coordinate space of the view returned by viewForZooming(in:).\n\nanimated\n\ntrue if the scrolling should be animated, false if it should be immediate.\n\nDiscussion\n\nThis method zooms so that the content view becomes the area defined by rect, adjusting the zoomScale as necessary.\n\nSee Also\nZooming and panning\nvar panGestureRecognizer: UIPanGestureRecognizer\nThe underlying gesture recognizer for pan gestures.\nvar pinchGestureRecognizer: UIPinchGestureRecognizer?\nThe underlying gesture recognizer for pinch gestures.\nvar zoomScale: CGFloat\nA floating-point value that specifies the current scale factor applied to the scroll view’s content.\nfunc setZoomScale(CGFloat, animated: Bool)\nA floating-point value that specifies the current zoom scale.\nvar maximumZoomScale: CGFloat\nA floating-point value that specifies the maximum scale factor that can apply to the scroll view’s content.\nvar minimumZoomScale: CGFloat\nA floating-point value that specifies the minimum scale factor that can apply to the scroll view’s content.\nvar isZoomBouncing: Bool\nA Boolean value that indicates that zooming has exceeded the scaling limits specified for the scroll view.\nvar isZooming: Bool\nA Boolean value that indicates whether the content view is currently zooming in or out.\nvar bouncesZoom: Bool\nA Boolean value that determines whether the scroll view animates the content scaling when the scaling exceeds the maximum or minimum limits."
  },
  {
    "title": "panGestureRecognizer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619425-pangesturerecognizer",
    "html": "Discussion\n\nYour application accesses this property when it wants to more precisely control which pan gestures are recognized by the scroll view.\n\nSee Also\nZooming and panning\nvar pinchGestureRecognizer: UIPinchGestureRecognizer?\nThe underlying gesture recognizer for pinch gestures.\nfunc zoom(to: CGRect, animated: Bool)\nZooms to a specific area of the content so that it’s visible in the scroll view.\nvar zoomScale: CGFloat\nA floating-point value that specifies the current scale factor applied to the scroll view’s content.\nfunc setZoomScale(CGFloat, animated: Bool)\nA floating-point value that specifies the current zoom scale.\nvar maximumZoomScale: CGFloat\nA floating-point value that specifies the maximum scale factor that can apply to the scroll view’s content.\nvar minimumZoomScale: CGFloat\nA floating-point value that specifies the minimum scale factor that can apply to the scroll view’s content.\nvar isZoomBouncing: Bool\nA Boolean value that indicates that zooming has exceeded the scaling limits specified for the scroll view.\nvar isZooming: Bool\nA Boolean value that indicates whether the content view is currently zooming in or out.\nvar bouncesZoom: Bool\nA Boolean value that determines whether the scroll view animates the content scaling when the scaling exceeds the maximum or minimum limits."
  },
  {
    "title": "isZooming | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619429-iszooming",
    "html": "Discussion\n\nThe value of this property is true if user is making a zoom gesture; otherwise, it’s false.\n\nSee Also\nZooming and panning\nvar panGestureRecognizer: UIPanGestureRecognizer\nThe underlying gesture recognizer for pan gestures.\nvar pinchGestureRecognizer: UIPinchGestureRecognizer?\nThe underlying gesture recognizer for pinch gestures.\nfunc zoom(to: CGRect, animated: Bool)\nZooms to a specific area of the content so that it’s visible in the scroll view.\nvar zoomScale: CGFloat\nA floating-point value that specifies the current scale factor applied to the scroll view’s content.\nfunc setZoomScale(CGFloat, animated: Bool)\nA floating-point value that specifies the current zoom scale.\nvar maximumZoomScale: CGFloat\nA floating-point value that specifies the maximum scale factor that can apply to the scroll view’s content.\nvar minimumZoomScale: CGFloat\nA floating-point value that specifies the minimum scale factor that can apply to the scroll view’s content.\nvar isZoomBouncing: Bool\nA Boolean value that indicates that zooming has exceeded the scaling limits specified for the scroll view.\nvar bouncesZoom: Bool\nA Boolean value that determines whether the scroll view animates the content scaling when the scaling exceeds the maximum or minimum limits."
  },
  {
    "title": "pinchGestureRecognizer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619381-pinchgesturerecognizer",
    "html": "Discussion\n\nYour application accesses this property when it wants to more precisely control which pinch gestures are recognized by the scroll view.\n\nSee Also\nZooming and panning\nvar panGestureRecognizer: UIPanGestureRecognizer\nThe underlying gesture recognizer for pan gestures.\nfunc zoom(to: CGRect, animated: Bool)\nZooms to a specific area of the content so that it’s visible in the scroll view.\nvar zoomScale: CGFloat\nA floating-point value that specifies the current scale factor applied to the scroll view’s content.\nfunc setZoomScale(CGFloat, animated: Bool)\nA floating-point value that specifies the current zoom scale.\nvar maximumZoomScale: CGFloat\nA floating-point value that specifies the maximum scale factor that can apply to the scroll view’s content.\nvar minimumZoomScale: CGFloat\nA floating-point value that specifies the minimum scale factor that can apply to the scroll view’s content.\nvar isZoomBouncing: Bool\nA Boolean value that indicates that zooming has exceeded the scaling limits specified for the scroll view.\nvar isZooming: Bool\nA Boolean value that indicates whether the content view is currently zooming in or out.\nvar bouncesZoom: Bool\nA Boolean value that determines whether the scroll view animates the content scaling when the scaling exceeds the maximum or minimum limits."
  },
  {
    "title": "trackTintColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprogressview/1619841-tracktintcolor",
    "html": "Discussion\n\nIf you set trackTintColor to nil, the track uses the tint of its parent.\n\nSee Also\nConfiguring the progress bar\nvar progressViewStyle: UIProgressView.Style\nThe current graphical style of the progress view.\nvar progressTintColor: UIColor?\nThe color shown for the portion of the progress bar that’s filled.\nvar progressImage: UIImage?\nAn image to use for the portion of the progress bar that’s filled.\nvar trackImage: UIImage?\nAn image to use for the portion of the track that isn’t filled."
  },
  {
    "title": "UIDatePickerStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidatepickerstyle",
    "html": "Overview\n\nA date picker style determines how your app displays the date picker value and its editor. For instance, a date picker with a datePickerMode of UIDatePicker.Mode.dateAndTime and datePickerStyle of UIDatePickerStyle.compact displays the date picker’s value as a label that the user can tap to view a calendar-style editor. On the other hand, the same date picker using the UIDatePickerStyle.inline style displays a view that lets the user edit the value without having to tap the label shown in the UIDatePickerStyle.compact style.\n\nTopics\nStyles\ncase automatic\nA style indicating that the system picks the concrete style based on the current platform and date picker mode.\ncase compact\nA style indicating that the date picker displays as a label that when tapped displays a calendar-style editor.\ncase inline\nA style indicating that the date pickers displays as an inline, editable field.\ncase wheels\nA style indicating that the date picker displays as a wheel picker.\nRelationships\nConforms To\nSendable\nSee Also\nConfiguring the date picker style\nvar datePickerStyle: UIDatePickerStyle\nThe current style of the date picker.\nvar preferredDatePickerStyle: UIDatePickerStyle\nThe preferred style of the date picker."
  },
  {
    "title": "UIScrollViewDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollviewdelegate",
    "html": "Overview\n\nThe methods that the UIScrollViewDelegate protocol declares allow the adopting delegate to respond to messages from the UIScrollView class. The delegate responds to and affects operations like scrolling, zooming, deceleration of scrolled content, and scrolling animations.\n\nTopics\nResponding to scrolling and dragging\nfunc scrollViewDidScroll(UIScrollView)\nTells the delegate when the user scrolls the content view within the scroll view.\nfunc scrollViewWillBeginDragging(UIScrollView)\nTells the delegate when the scroll view is about to start scrolling the content.\nfunc scrollViewWillEndDragging(UIScrollView, withVelocity: CGPoint, targetContentOffset: UnsafeMutablePointer<CGPoint>)\nTells the delegate when the user finishes scrolling the content.\nfunc scrollViewDidEndDragging(UIScrollView, willDecelerate: Bool)\nTells the delegate when dragging ended in the scroll view.\nfunc scrollViewShouldScrollToTop(UIScrollView) -> Bool\nAsks the delegate if the scroll view should scroll to the top of the content.\nfunc scrollViewDidScrollToTop(UIScrollView)\nTells the delegate that the scroll view scrolled to the top of the content.\nfunc scrollViewWillBeginDecelerating(UIScrollView)\nTells the delegate that the scroll view is starting to decelerate the scrolling movement.\nfunc scrollViewDidEndDecelerating(UIScrollView)\nTells the delegate that the scroll view ended decelerating the scrolling movement.\nManaging zooming\nfunc viewForZooming(in: UIScrollView) -> UIView?\nAsks the delegate for the view to scale when zooming is about to occur in the scroll view.\nfunc scrollViewWillBeginZooming(UIScrollView, with: UIView?)\nTells the delegate that zooming of the content in the scroll view is about to commence.\nfunc scrollViewDidEndZooming(UIScrollView, with: UIView?, atScale: CGFloat)\nTells the delegate when zooming of the content in the scroll view completed.\nfunc scrollViewDidZoom(UIScrollView)\nTells the delegate that the scroll view’s zoom factor changed.\nResponding to scrolling animations\nfunc scrollViewDidEndScrollingAnimation(UIScrollView)\nTells the delegate when a scrolling animation in the scroll view concludes.\nResponding to inset changes\nfunc scrollViewDidChangeAdjustedContentInset(UIScrollView)\nTells the delegate when the scroll view’s inset values change.\nRelationships\nInherits From\nNSObjectProtocol\nInherited By\nPKCanvasViewDelegate\nUICollectionViewDelegate\nUIScrollViewAccessibilityDelegate\nUITableViewDelegate\nUITextViewDelegate\nConforming Types\nUIWebView\nSee Also\nResponding to scroll view interactions\nvar delegate: UIScrollViewDelegate?\nThe delegate of the scroll view."
  },
  {
    "title": "init(frame:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprogressview/1619842-init",
    "html": "See Also\nCreating a progress view\ninit(progressViewStyle: UIProgressView.Style)\nCreates a progress view with the specified style.\ninit?(coder: NSCoder)\nCreates a progress view from data in an unarchiver."
  },
  {
    "title": "UIScrollView.IndicatorStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/indicatorstyle",
    "html": "Overview\n\nYou use these constants to set the value of the indicatorStyle style.\n\nTopics\nConstants\ncase `default`\nThe default style of scroll indicator, which is black with a white border.\ncase black\nA style of indicator which is black and smaller than the default style.\ncase white\nA style of indicator is white and smaller than the default style.\nRelationships\nConforms To\nSendable\nSee Also\nManaging the scroll indicator and refresh control\nvar indicatorStyle: UIScrollView.IndicatorStyle\nThe style of the scroll indicators.\nvar showsHorizontalScrollIndicator: Bool\nA Boolean value that controls whether the horizontal scroll indicator is visible.\nvar showsVerticalScrollIndicator: Bool\nA Boolean value that controls whether the vertical scroll indicator is visible.\nvar horizontalScrollIndicatorInsets: UIEdgeInsets\nThe horizontal distance the scroll indicators are inset from the edge of the scroll view.\nvar verticalScrollIndicatorInsets: UIEdgeInsets\nThe vertical distance the scroll indicators are inset from the edge of the scroll view.\nvar automaticallyAdjustsScrollIndicatorInsets: Bool\nA Boolean value that indicates whether the system automatically adjusts the scroll indicator insets.\nfunc flashScrollIndicators()\nDisplays the scroll indicators momentarily.\nvar refreshControl: UIRefreshControl?\nThe refresh control associated with the scroll view.\nclass UIRefreshControl\nA standard control that can initiate the refreshing of a scroll view’s contents."
  },
  {
    "title": "indicatorStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619433-indicatorstyle",
    "html": "Discussion\n\nThe default style is UIScrollView.IndicatorStyle.default. See UIScrollView.IndicatorStyle for descriptions of these constants.\n\nSee Also\nManaging the scroll indicator and refresh control\nenum UIScrollView.IndicatorStyle\nDefines constants that represent the styles of the scroll indicators.\nvar showsHorizontalScrollIndicator: Bool\nA Boolean value that controls whether the horizontal scroll indicator is visible.\nvar showsVerticalScrollIndicator: Bool\nA Boolean value that controls whether the vertical scroll indicator is visible.\nvar horizontalScrollIndicatorInsets: UIEdgeInsets\nThe horizontal distance the scroll indicators are inset from the edge of the scroll view.\nvar verticalScrollIndicatorInsets: UIEdgeInsets\nThe vertical distance the scroll indicators are inset from the edge of the scroll view.\nvar automaticallyAdjustsScrollIndicatorInsets: Bool\nA Boolean value that indicates whether the system automatically adjusts the scroll indicator insets.\nfunc flashScrollIndicators()\nDisplays the scroll indicators momentarily.\nvar refreshControl: UIRefreshControl?\nThe refresh control associated with the scroll view.\nclass UIRefreshControl\nA standard control that can initiate the refreshing of a scroll view’s contents."
  },
  {
    "title": "isTracking | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619413-istracking",
    "html": "Discussion\n\nThe value of this property is true if the user has touched the content view but might not have yet have started dragging it.\n\nSee Also\nGetting the scrolling state\nvar isDragging: Bool\nA Boolean value that indicates whether the user has begun scrolling the content.\nvar isDecelerating: Bool\nA Boolean value that indicates whether the content is moving in the scroll view after the user lifted their finger.\nvar decelerationRate: UIScrollView.DecelerationRate\nA floating-point value that determines the rate of deceleration after the user lifts their finger.\nstruct UIScrollView.DecelerationRate\nDeceleration rates for the scroll view."
  },
  {
    "title": "alwaysBounceVertical | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619383-alwaysbouncevertical",
    "html": "Discussion\n\nIf the value of this property is true and bounces is true, the scroll view allows vertical dragging even if the content is smaller than the bounds of the scroll view. The default value is false.\n\nSee Also\nConfiguring the scroll view\nvar isScrollEnabled: Bool\nA Boolean value that determines whether scrolling is enabled.\nvar isDirectionalLockEnabled: Bool\nA Boolean value that determines whether scrolling is disabled in a particular direction.\nvar isPagingEnabled: Bool\nA Boolean value that determines whether paging is enabled for the scroll view.\nvar scrollsToTop: Bool\nA Boolean value that controls whether the scroll-to-top gesture is enabled.\nvar bounces: Bool\nA Boolean value that controls whether the scroll view bounces past the edge of content and back again.\nvar alwaysBounceHorizontal: Bool\nA Boolean value that determines whether bouncing always occurs when horizontal scrolling reaches the end of the content view."
  },
  {
    "title": "alwaysBounceHorizontal | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619393-alwaysbouncehorizontal",
    "html": "Discussion\n\nIf the value of this property is true and bounces is true, the scroll view allows horizontal dragging even if the content is smaller than the bounds of the scroll view. The default value is false.\n\nSee Also\nConfiguring the scroll view\nvar isScrollEnabled: Bool\nA Boolean value that determines whether scrolling is enabled.\nvar isDirectionalLockEnabled: Bool\nA Boolean value that determines whether scrolling is disabled in a particular direction.\nvar isPagingEnabled: Bool\nA Boolean value that determines whether paging is enabled for the scroll view.\nvar scrollsToTop: Bool\nA Boolean value that controls whether the scroll-to-top gesture is enabled.\nvar bounces: Bool\nA Boolean value that controls whether the scroll view bounces past the edge of content and back again.\nvar alwaysBounceVertical: Bool\nA Boolean value that determines whether bouncing always occurs when vertical scrolling reaches the end of the content."
  },
  {
    "title": "isDirectionalLockEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619390-isdirectionallockenabled",
    "html": "Discussion\n\nIf this property is false, scrolling is permitted in both horizontal and vertical directions. If this property is true and the user begins dragging in one general direction (horizontally or vertically), the scroll view disables scrolling in the other direction. If the drag direction is diagonal, then scrolling doesn’t lock and the user can drag in any direction until the drag completes. The default value is false.\n\nSee Also\nConfiguring the scroll view\nvar isScrollEnabled: Bool\nA Boolean value that determines whether scrolling is enabled.\nvar isPagingEnabled: Bool\nA Boolean value that determines whether paging is enabled for the scroll view.\nvar scrollsToTop: Bool\nA Boolean value that controls whether the scroll-to-top gesture is enabled.\nvar bounces: Bool\nA Boolean value that controls whether the scroll view bounces past the edge of content and back again.\nvar alwaysBounceVertical: Bool\nA Boolean value that determines whether bouncing always occurs when vertical scrolling reaches the end of the content.\nvar alwaysBounceHorizontal: Bool\nA Boolean value that determines whether bouncing always occurs when horizontal scrolling reaches the end of the content view."
  },
  {
    "title": "frameLayoutGuide | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/2865772-framelayoutguide",
    "html": "Discussion\n\nUse this layout guide when you want to create Auto Layout constraints that explicitly involve the frame rectangle of the scroll view itself, as opposed to its content rectangle.\n\nSee Also\nGetting the layout guides\nvar contentLayoutGuide: UILayoutGuide\nThe layout guide based on the untranslated content rectangle of the scroll view."
  },
  {
    "title": "scrollsToTop | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619421-scrollstotop",
    "html": "Discussion\n\nThe scroll-to-top gesture is a tap on the status bar. When a user makes this gesture, the system asks the scroll view closest to the status bar to scroll to the top. If that scroll view has scrollsToTop set to false, its delegate returns false from scrollViewShouldScrollToTop(_:), or the content is already at the top, nothing happens.\n\nAfter the scroll view scrolls to the top of the content view, it sends the delegate a scrollViewDidScrollToTop(_:) message.\n\nThe default value of this property is true.\n\nSpecial considerations\n\nOn iPhone, the scroll-to-top gesture has no effect if there’s more than one scroll view onscreen that has scrollsToTop set to true.\n\nSee Also\nConfiguring the scroll view\nvar isScrollEnabled: Bool\nA Boolean value that determines whether scrolling is enabled.\nvar isDirectionalLockEnabled: Bool\nA Boolean value that determines whether scrolling is disabled in a particular direction.\nvar isPagingEnabled: Bool\nA Boolean value that determines whether paging is enabled for the scroll view.\nvar bounces: Bool\nA Boolean value that controls whether the scroll view bounces past the edge of content and back again.\nvar alwaysBounceVertical: Bool\nA Boolean value that determines whether bouncing always occurs when vertical scrolling reaches the end of the content.\nvar alwaysBounceHorizontal: Bool\nA Boolean value that determines whether bouncing always occurs when horizontal scrolling reaches the end of the content view."
  },
  {
    "title": "isPagingEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619432-ispagingenabled",
    "html": "Discussion\n\nIf the value of this property is true, the scroll view stops on multiples of the scroll view’s bounds when the user scrolls. The default value is false.\n\nSee Also\nConfiguring the scroll view\nvar isScrollEnabled: Bool\nA Boolean value that determines whether scrolling is enabled.\nvar isDirectionalLockEnabled: Bool\nA Boolean value that determines whether scrolling is disabled in a particular direction.\nvar scrollsToTop: Bool\nA Boolean value that controls whether the scroll-to-top gesture is enabled.\nvar bounces: Bool\nA Boolean value that controls whether the scroll view bounces past the edge of content and back again.\nvar alwaysBounceVertical: Bool\nA Boolean value that determines whether bouncing always occurs when vertical scrolling reaches the end of the content.\nvar alwaysBounceHorizontal: Bool\nA Boolean value that determines whether bouncing always occurs when horizontal scrolling reaches the end of the content view."
  },
  {
    "title": "isScrollEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/1619395-isscrollenabled",
    "html": "Discussion\n\nThe default value is true, which indicates that scrolling is enabled. Setting the value to false disables scrolling.\n\nWhen scrolling is disabled, the scroll view doesn’t accept touch events; it forwards them up the responder chain.\n\nSee Also\nConfiguring the scroll view\nvar isDirectionalLockEnabled: Bool\nA Boolean value that determines whether scrolling is disabled in a particular direction.\nvar isPagingEnabled: Bool\nA Boolean value that determines whether paging is enabled for the scroll view.\nvar scrollsToTop: Bool\nA Boolean value that controls whether the scroll-to-top gesture is enabled.\nvar bounces: Bool\nA Boolean value that controls whether the scroll view bounces past the edge of content and back again.\nvar alwaysBounceVertical: Bool\nA Boolean value that determines whether bouncing always occurs when vertical scrolling reaches the end of the content.\nvar alwaysBounceHorizontal: Bool\nA Boolean value that determines whether bouncing always occurs when horizontal scrolling reaches the end of the content view."
  },
  {
    "title": "contentLayoutGuide | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/2865870-contentlayoutguide",
    "html": "Discussion\n\nUse this layout guide when you want to create Auto Layout constraints related to the content area of a scroll view.\n\nSee Also\nGetting the layout guides\nvar frameLayoutGuide: UILayoutGuide\nThe layout guide based on the untransformed frame rectangle of the scroll view."
  },
  {
    "title": "adjustedContentInsetDidChange() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrollview/2902254-adjustedcontentinsetdidchange",
    "html": "See Also\nManaging the content inset behavior\nvar adjustedContentInset: UIEdgeInsets\nThe insets derived from the content insets and the safe area of the scroll view.\nvar contentInset: UIEdgeInsets\nThe custom distance that the content view is inset from the safe area or scroll view edges.\nvar contentInsetAdjustmentBehavior: UIScrollView.ContentInsetAdjustmentBehavior\nThe behavior for determining the adjusted content offsets.\nenum UIScrollView.ContentInsetAdjustmentBehavior\nConstants indicating how safe area insets are added to the adjusted content inset."
  },
  {
    "title": "UIHoverAutomaticEffect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uihoverautomaticeffect",
    "html": "Topics\nCreating an automatic hover effect\nstatic var automatic: UIHoverAutomaticEffect\nProvides a convenience initializer to create a system-default hover effect that automatically selects the appropriate effect based on the view to which it applies.\ninit()\nCreates a system-default hover effect that automatically selects the appropriate effect based on the view to which it applies.\nRelationships\nConforms To\nUIHoverEffect\nSee Also\nSpecifying a hover effect\nvar effect: UIHoverEffect\nThe effect to apply to the view with this style.\nstruct UIHoverHighlightEffect\nAn effect that applies a highlight to the view on hover.\nstruct UIHoverLiftEffect\nAn effect that can visually lift the view on hover where appropriate.\nprotocol UIHoverEffect\nA hover effect that can apply to a view through a hover style."
  },
  {
    "title": "currentPageIndicatorTintColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipagecontrol/1621233-currentpageindicatortintcolor",
    "html": "Discussion\n\nThe default color is an opaque white for the current page indicator dot. The current page indicator dot is used to indicate the currently visible page. Assigning a new value to this property does not automatically change the color in the pageIndicatorTintColor property because the value for these two properties is not automatically derived from the other. Both properties must be specified independently.\n\nSee Also\nColoring the page indicator\nvar pageIndicatorTintColor: UIColor?\nThe tint color to apply to the page indicator."
  },
  {
    "title": "hidesForSinglePage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipagecontrol/1621238-hidesforsinglepage",
    "html": "Discussion\n\nAssign a value of true to hide the page control when there is only one page; assign false (the default) to show the page control if there is only one page.\n\nSee Also\nManaging pages\nvar currentPage: Int\nThe current page, shown by the page control as a white dot.\nvar numberOfPages: Int\nThe number of pages the receiver shows (as dots).\nvar defersCurrentPageDisplay: Bool\nA Boolean value that controls when the current page is displayed.\nDeprecated\nfunc updateCurrentPageDisplay()\nUpdates the page indicator to the current page.\nDeprecated"
  },
  {
    "title": "offImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiswitch/1623683-offimage",
    "html": "Discussion\n\nIn iOS 7 and later, this property has no effect.\n\nIn iOS 6, this image represents the interior contents of the switch. The image you specify is composited with the switch’s rounded bezel and thumb to create the final appearance.\n\nSee Also\nDeprecated\nvar onImage: UIImage?\nThe image displayed when the switch is in the on position."
  },
  {
    "title": "UIWebView.NavigationType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebview/navigationtype",
    "html": "Topics\nConstants\ncase linkClicked\nUser tapped a link.\ncase formSubmitted\nUser submitted a form.\ncase backForward\nUser tapped the back or forward button.\ncase reload\nUser tapped the reload button.\ncase formResubmitted\nUser resubmitted a form.\ncase other\nSome other action occurred.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "paginationMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebview/1617985-paginationmode",
    "html": "Discussion\n\nThis property determines whether content in the web view is broken up into pages that fill the view one screen at a time, or shown as one long scrolling view. If set to a paginated form, this property toggles a paginated layout on the content, causing the web view to use the values of pageLength and gapBetweenPages to relayout its content.\n\nSee UIWebView.PaginationMode for possible values. The default value is UIWebView.PaginationMode.unpaginated.\n\nSee Also\nManaging pages\nvar gapBetweenPages: CGFloat\nThe size of the gap, in points, between pages.\nDeprecated\nvar pageCount: Int\nThe number of pages produced by the layout of the web view.\nDeprecated\nvar pageLength: CGFloat\nThe size of each page, in points, in the direction that the pages flow.\nDeprecated\nvar paginationBreakingMode: UIWebView.PaginationBreakingMode\nThe manner in which column- or page-breaking occurs.\nDeprecated"
  },
  {
    "title": "pageCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebview/1617968-pagecount",
    "html": "See Also\nManaging pages\nvar gapBetweenPages: CGFloat\nThe size of the gap, in points, between pages.\nDeprecated\nvar pageLength: CGFloat\nThe size of each page, in points, in the direction that the pages flow.\nDeprecated\nvar paginationBreakingMode: UIWebView.PaginationBreakingMode\nThe manner in which column- or page-breaking occurs.\nDeprecated\nvar paginationMode: UIWebView.PaginationMode\nThe layout of content in the web view.\nDeprecated"
  },
  {
    "title": "gapBetweenPages | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebview/1617943-gapbetweenpages",
    "html": "Discussion\n\nThe default value is 0.\n\nSee Also\nManaging pages\nvar pageCount: Int\nThe number of pages produced by the layout of the web view.\nDeprecated\nvar pageLength: CGFloat\nThe size of each page, in points, in the direction that the pages flow.\nDeprecated\nvar paginationBreakingMode: UIWebView.PaginationBreakingMode\nThe manner in which column- or page-breaking occurs.\nDeprecated\nvar paginationMode: UIWebView.PaginationMode\nThe layout of content in the web view.\nDeprecated"
  },
  {
    "title": "pageLength | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebview/1617980-pagelength",
    "html": "Discussion\n\nWhen paginationMode is right to left or left to right, this property represents the width of each page. When paginationMode is top to bottom or bottom to top, this property represents the height of each page.\n\nThe default value is 0, which means the layout uses the size of the viewport to determine the dimensions of the page. Adjusting the value of this property causes a relayout.\n\nSee Also\nManaging pages\nvar gapBetweenPages: CGFloat\nThe size of the gap, in points, between pages.\nDeprecated\nvar pageCount: Int\nThe number of pages produced by the layout of the web view.\nDeprecated\nvar paginationBreakingMode: UIWebView.PaginationBreakingMode\nThe manner in which column- or page-breaking occurs.\nDeprecated\nvar paginationMode: UIWebView.PaginationMode\nThe layout of content in the web view.\nDeprecated"
  },
  {
    "title": "datePickerStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidatepicker/3526123-datepickerstyle",
    "html": "Discussion\n\nThis property always returns a concrete style, never UIDatePickerStyle.automatic.\n\nSee Also\nConfiguring the date picker style\nvar preferredDatePickerStyle: UIDatePickerStyle\nThe preferred style of the date picker.\nenum UIDatePickerStyle\nStyles that determine the appearance of a date picker."
  },
  {
    "title": "keyboardDisplayRequiresUserAction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebview/1617967-keyboarddisplayrequiresuseractio",
    "html": "Discussion\n\nWhen this property is set to true, the user must explicitly tap the elements in the web view to display the keyboard (or other relevant input view) for that element. When set to false, a focus event on an element causes the input view to be displayed and associated with that element automatically.\n\nThe default value for this property is true.\n\nSee Also\nSetting web content properties\nvar allowsLinkPreview: Bool\nA Boolean value that determines whether pressing on a link displays a preview of the destination for the link.\nDeprecated\nvar scalesPageToFit: Bool\nA Boolean value determining whether the webpage scales to fit the view and the user can change the scale.\nDeprecated\nvar scrollView: UIScrollView\nThe scroll view associated with the web view.\nDeprecated\nvar suppressesIncrementalRendering: Bool\nA Boolean value indicating whether the web view suppresses content rendering until it is fully loaded into memory.\nDeprecated\nvar dataDetectorTypes: UIDataDetectorTypes\nThe types of data converted to clickable URLs in the web view’s content.\nDeprecated"
  },
  {
    "title": "locale | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidatepicker/1615995-locale",
    "html": "Discussion\n\nThe default value is the current locale as returned by the current property of NSLocale, or the locale used by the date picker’s calendar. Locales encapsulate information about facets of a language or culture, such as the way dates are formatted.\n\nSee Also\nManaging the date and calendar\nvar calendar: Calendar!\nThe calendar to use for the date picker.\nvar date: Date\nThe date displayed by the date picker.\nfunc setDate(Date, animated: Bool)\nSets the date to display in the date picker, with an option to animate the setting.\nvar timeZone: TimeZone?\nThe time zone reflected in the date displayed by the date picker."
  },
  {
    "title": "calendar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidatepicker/1615973-calendar",
    "html": "Discussion\n\nThe default value of this property corresponds to the user’s current calendar as configured in Settings. This is equivalent to the value returned by calling the NSCalendar class method current. Setting this property to nil is equivalent to setting it to its default value.\n\nCalendars specify the details of cultural systems used for reckoning time; they identify the beginning, length, and divisions of a year.\n\nSee Also\nManaging the date and calendar\nvar date: Date\nThe date displayed by the date picker.\nvar locale: Locale?\nThe locale used by the date picker.\nfunc setDate(Date, animated: Bool)\nSets the date to display in the date picker, with an option to animate the setting.\nvar timeZone: TimeZone?\nThe time zone reflected in the date displayed by the date picker."
  },
  {
    "title": "date | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidatepicker/1615975-date",
    "html": "Discussion\n\nUse this property to get and set the currently selected date. The default value of this property is the date when the UIDatePicker object is created. Setting this property animates the date picker by spinning the wheels to the new date and time; if you don’t want any animation to occur when you set the date, use the setDate(_:animated:) method, passing false for the animated parameter. This behavior of this property is undefined when the mode is set to UIDatePicker.Mode.countDownTimer; refer instead to the countDownDuration property.\n\nSee Also\nManaging the date and calendar\nvar calendar: Calendar!\nThe calendar to use for the date picker.\nvar locale: Locale?\nThe locale used by the date picker.\nfunc setDate(Date, animated: Bool)\nSets the date to display in the date picker, with an option to animate the setting.\nvar timeZone: TimeZone?\nThe time zone reflected in the date displayed by the date picker."
  },
  {
    "title": "stringByEvaluatingJavaScript(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebview/1617963-stringbyevaluatingjavascript",
    "html": "Parameters\nscript\n\nThe JavaScript script to run.\n\nReturn Value\n\nThe result of running the JavaScript script passed in the script parameter, or nil if the script fails.\n\nDiscussion\n\nNew apps should instead use the evaluateJavaScript(_:completionHandler:) method from the WKWebView class. Legacy apps should adopt that method if possible.\n\nImportant\n\nThe stringByEvaluatingJavaScript(from:) method waits synchronously for JavaScript evaluation to complete. If you load web content whose JavaScript code you have not vetted, invoking this method could hang your app. Best practice is to adopt the WKWebView class and use its evaluateJavaScript(_:completionHandler:) method instead."
  },
  {
    "title": "setDate(_:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidatepicker/1615971-setdate",
    "html": "Parameters\ndate\n\nAn NSDate object representing the new date to display in the date picker.\n\nanimated\n\ntrue to animate the setting of the new date, otherwise false. The animation rotates the wheels until the new date and time is shown under the highlight rectangle.\n\nSee Also\nManaging the date and calendar\nvar calendar: Calendar!\nThe calendar to use for the date picker.\nvar date: Date\nThe date displayed by the date picker.\nvar locale: Locale?\nThe locale used by the date picker.\nvar timeZone: TimeZone?\nThe time zone reflected in the date displayed by the date picker."
  },
  {
    "title": "canGoBack | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebview/1617931-cangoback",
    "html": "Discussion\n\nIf true, able to move backward; otherwise, false.\n\nSee Also\nMoving back and forward\nvar canGoForward: Bool\nA Boolean value indicating whether the receiver can move forward.\nDeprecated\nfunc goBack()\nLoads the previous location in the back-forward list.\nDeprecated\nfunc goForward()\nLoads the next location in the back-forward list.\nDeprecated"
  },
  {
    "title": "mediaPlaybackRequiresUserAction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebview/1617954-mediaplaybackrequiresuseraction",
    "html": "Discussion\n\nThe default value on both iPad and iPhone is true. To make media play automatically when loaded, set this property to false and ensure the <audio> or <video> element you want to play has the autoplay attribute set.\n\nSee Also\nManaging media playback\nvar allowsInlineMediaPlayback: Bool\nA Boolean value that determines whether HTML5 videos play inline or use the native full-screen controller.\nDeprecated\nvar mediaPlaybackAllowsAirPlay: Bool\nA Boolean value that determines whether Air Play is allowed from this view.\nDeprecated\nvar allowsPictureInPictureMediaPlayback: Bool\nA Boolean value that determines whether Picture in Picture playback is allowed from this view.\nDeprecated"
  },
  {
    "title": "allowsInlineMediaPlayback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebview/1617960-allowsinlinemediaplayback",
    "html": "Discussion\n\nYou must set this property to play inline video. Set this property to true to play videos inline. Set this property to false to use the native full-screen controller. When adding a video element to a HTML document on the iPhone, you must also include the playsinline attribute.\n\nThe default value for iPhone is false and the default value for iPad is true.\n\nImportant\n\nApps created before iOS 10.0 must use the webkit-playsinline attribute.\n\nSee Also\nManaging media playback\nvar mediaPlaybackRequiresUserAction: Bool\nA Boolean value that determines whether HTML5 videos can play automatically or require the user to start playing them.\nDeprecated\nvar mediaPlaybackAllowsAirPlay: Bool\nA Boolean value that determines whether Air Play is allowed from this view.\nDeprecated\nvar allowsPictureInPictureMediaPlayback: Bool\nA Boolean value that determines whether Picture in Picture playback is allowed from this view.\nDeprecated"
  },
  {
    "title": "reload() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebview/1617932-reload",
    "html": "See Also\nLoading content\nfunc load(Data, mimeType: String, textEncodingName: String, baseURL: URL)\nSets the main page contents, MIME type, content encoding, and base URL.\nDeprecated\nfunc loadHTMLString(String, baseURL: URL?)\nSets the main page content and base URL.\nDeprecated\nfunc loadRequest(URLRequest)\nConnects to a given URL by initiating an asynchronous client request.\nDeprecated\nvar request: URLRequest?\nThe URL request identifying the location of the content to load.\nDeprecated\nvar isLoading: Bool\nA Boolean value indicating whether the receiver is done loading content.\nDeprecated\nfunc stopLoading()\nStops the loading of any web content managed by the receiver.\nDeprecated"
  },
  {
    "title": "currentThumbImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uislider/1621347-currentthumbimage",
    "html": "Discussion\n\nSliders can have different thumb images for different control states. The active control state determines which thumb image is stored in this property. To get the thumb image for a different control state, use the thumbImage(for:) method.\n\nIf no custom thumb images have been set using the setThumbImage(_:for:) method, this property is nil. In that situation, the slider uses the default thumb image for drawing.\n\nSee Also\nChanging the slider’s appearance\nvar minimumValueImage: UIImage?\nThe image that represents the slider’s minimum value.\nvar maximumValueImage: UIImage?\nThe image representing the slider’s maximum value.\nvar minimumTrackTintColor: UIColor?\nThe color used to tint the default minimum track images.\nvar currentMinimumTrackImage: UIImage?\nThe minimum track image currently being used to render the slider.\nfunc minimumTrackImage(for: UIControl.State) -> UIImage?\nReturns the minimum track image associated with the specified control state.\nfunc setMinimumTrackImage(UIImage?, for: UIControl.State)\nAssigns a minimum track image to the specified control states.\nvar maximumTrackTintColor: UIColor?\nThe color used to tint the default maximum track images.\nvar currentMaximumTrackImage: UIImage?\nContains the maximum track image currently being used to render the slider.\nfunc maximumTrackImage(for: UIControl.State) -> UIImage?\nReturns the maximum track image associated with the specified control state.\nfunc setMaximumTrackImage(UIImage?, for: UIControl.State)\nAssigns a maximum track image to the specified control states.\nvar thumbTintColor: UIColor?\nThe color used to tint the default thumb images.\nfunc thumbImage(for: UIControl.State) -> UIImage?\nReturns the thumb image associated with the specified control state.\nfunc setThumbImage(UIImage?, for: UIControl.State)\nAssigns a thumb image to the specified control states."
  },
  {
    "title": "maximumValueImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uislider/1621329-maximumvalueimage",
    "html": "Discussion\n\nThe image you specify must fit within the bounding rectangle returned by the maximumValueImageRect(forBounds:) method. If it doesn’t, the slider scales the image to fit. In addition, the slider lengthens or shortens its track as needed to accommodate the image in its bounding rectangle.\n\nBecause maximum is a semantic concept, in a right-to-left interface, the slider automatically flips the image placement, always placing it at the trailing end of the slider’s track.\n\nThe default value of this property is nil.\n\nImportant\n\nThis property isn’t available when the user interface idiom is UIUserInterfaceIdiom.mac and behavioralStyle is UIBehavioralStyle.mac — setting it while in this state throws an exception.\n\nSee Also\nChanging the slider’s appearance\nvar minimumValueImage: UIImage?\nThe image that represents the slider’s minimum value.\nvar minimumTrackTintColor: UIColor?\nThe color used to tint the default minimum track images.\nvar currentMinimumTrackImage: UIImage?\nThe minimum track image currently being used to render the slider.\nfunc minimumTrackImage(for: UIControl.State) -> UIImage?\nReturns the minimum track image associated with the specified control state.\nfunc setMinimumTrackImage(UIImage?, for: UIControl.State)\nAssigns a minimum track image to the specified control states.\nvar maximumTrackTintColor: UIColor?\nThe color used to tint the default maximum track images.\nvar currentMaximumTrackImage: UIImage?\nContains the maximum track image currently being used to render the slider.\nfunc maximumTrackImage(for: UIControl.State) -> UIImage?\nReturns the maximum track image associated with the specified control state.\nfunc setMaximumTrackImage(UIImage?, for: UIControl.State)\nAssigns a maximum track image to the specified control states.\nvar thumbTintColor: UIColor?\nThe color used to tint the default thumb images.\nvar currentThumbImage: UIImage?\nThe thumb image currently being used to render the slider.\nfunc thumbImage(for: UIControl.State) -> UIImage?\nReturns the thumb image associated with the specified control state.\nfunc setThumbImage(UIImage?, for: UIControl.State)\nAssigns a thumb image to the specified control states."
  },
  {
    "title": "minimumValueImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uislider/1621337-minimumvalueimage",
    "html": "Discussion\n\nThe image you specify must fit within the bounding rectangle returned by the minimumValueImageRect(forBounds:) method. If it doesn’t, the slider scales the image to fit. In addition, the slider lengthens or shortens its track as needed to accommodate the image in its bounding rectangle.\n\nBecause minimum is a semantic concept, in a right-to-left user interface, the slider automatically flips the image placement, always placing it at the leading end of the slider’s track.\n\nThe default value of this property is nil.\n\nImportant\n\nThis property isn’t available when the user interface idiom is UIUserInterfaceIdiom.mac and behavioralStyle is UIBehavioralStyle.mac — setting it while in this state throws an exception.\n\nSee Also\nChanging the slider’s appearance\nvar maximumValueImage: UIImage?\nThe image representing the slider’s maximum value.\nvar minimumTrackTintColor: UIColor?\nThe color used to tint the default minimum track images.\nvar currentMinimumTrackImage: UIImage?\nThe minimum track image currently being used to render the slider.\nfunc minimumTrackImage(for: UIControl.State) -> UIImage?\nReturns the minimum track image associated with the specified control state.\nfunc setMinimumTrackImage(UIImage?, for: UIControl.State)\nAssigns a minimum track image to the specified control states.\nvar maximumTrackTintColor: UIColor?\nThe color used to tint the default maximum track images.\nvar currentMaximumTrackImage: UIImage?\nContains the maximum track image currently being used to render the slider.\nfunc maximumTrackImage(for: UIControl.State) -> UIImage?\nReturns the maximum track image associated with the specified control state.\nfunc setMaximumTrackImage(UIImage?, for: UIControl.State)\nAssigns a maximum track image to the specified control states.\nvar thumbTintColor: UIColor?\nThe color used to tint the default thumb images.\nvar currentThumbImage: UIImage?\nThe thumb image currently being used to render the slider.\nfunc thumbImage(for: UIControl.State) -> UIImage?\nReturns the thumb image associated with the specified control state.\nfunc setThumbImage(UIImage?, for: UIControl.State)\nAssigns a thumb image to the specified control states."
  },
  {
    "title": "behavioralStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uislider/3752182-behavioralstyle",
    "html": "Discussion\n\nUse this property to determine the actual behavior style when the preferredBehavioralStyle is UIBehavioralStyle.automatic.\n\nSee Also\nModifying the slider’s behavior\nvar isContinuous: Bool\nA Boolean value indicating whether changes in the slider’s value generate continuous update events.\nvar preferredBehavioralStyle: UIBehavioralStyle\nThe preferred behavioral style.\nenum UIBehavioralStyle\nConstants that indicate how a control behaves in apps built with Mac Catalyst."
  },
  {
    "title": "value | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uislider/1621346-value",
    "html": "Discussion\n\nUse this property to get and set the slider’s current value. To render an animated transition from the current value to the new value, use the setValue(_:animated:) method instead.\n\nIf you try to set a value that’s below the minimum or above the maximum, the minimum or maximum value is set instead. The default value of this property is 0.0.\n\nSee Also\nAccessing the slider’s value\nfunc setValue(Float, animated: Bool)\nSets the slider’s current value, allowing you to animate the change visually."
  },
  {
    "title": "numberOfComponents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipickerview/1614368-numberofcomponents",
    "html": "Discussion\n\nA UIPickerView object fetches the value of this property from the data source and caches it. The default value is 0.\n\nSee Also\nGetting the dimensions of the picker view\nfunc numberOfRows(inComponent: Int) -> Int\nReturns the number of rows for a component.\nfunc rowSize(forComponent: Int) -> CGSize\nReturns the size of a row for a component."
  },
  {
    "title": "UIView.Invalidations.Layout | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/invalidations/layout",
    "html": "Overview\n\nUse layout to create an instance of this type.\n\nTopics\nCreating the invalidation structure\nstatic var layout: UIView.Invalidations.Layout\nA change that invalidates the layout of the containing view’s subviews.\ninit()\nCreates a layout invalidation structure.\nInvalidating the view\nfunc invalidate(view: UIView)\nIndicates to the system that an aspect of a view is invalid and triggers the necessary update.\nRelationships\nConforms To\nUIViewInvalidating\nSee Also\nInvalidation types\nstruct UIView.Invalidations.Configuration\nA change that invalidates a view’s configuration.\nstruct UIView.Invalidations.Constraints\nA change that invalidates a view’s constraints.\nstruct UIView.Invalidations.Display\nA change that requires the system to redraw a view’s content.\nstruct UIView.Invalidations.IntrinsicContentSize\nA change that invalidates a view’s intrinsic size.\nstruct UIView.Invalidations.Tuple\nA change that invalidates a combination of factors covered by the other invalidation types."
  },
  {
    "title": "UIHoverHighlightEffect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uihoverhighlighteffect",
    "html": "Topics\nCreating a highlight hover effect\nstatic var highlight: UIHoverHighlightEffect\nProvides a convenience initializer to create an effect that applies a highlight to the view on hover.\ninit()\nCreates an effect that applies a highlight to the view on hover.\nRelationships\nConforms To\nUIHoverEffect\nSee Also\nSpecifying a hover effect\nvar effect: UIHoverEffect\nThe effect to apply to the view with this style.\nstruct UIHoverAutomaticEffect\nA system-default hover effect that automatically selects the appropriate effect based on the view to which it applies.\nstruct UIHoverLiftEffect\nAn effect that can visually lift the view on hover where appropriate.\nprotocol UIHoverEffect\nA hover effect that can apply to a view through a hover style."
  },
  {
    "title": "init(effect:shape:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uihoverstyle/4224537-init",
    "html": "See Also\nCreating a hover style\ninit(shape: UIShape?)\nCreates a hover style with the provided shape and an automatic hover effect."
  },
  {
    "title": "UIView.Invalidations.Display | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/invalidations/display",
    "html": "Overview\n\nUse display to create an instance of this type.\n\nTopics\nCreating the invalidation structure\nstatic var display: UIView.Invalidations.Display\nA change that requires the system to redraw a view’s content.\ninit()\nCreates a display invalidation structure.\nInvalidating the view\nfunc invalidate(view: UIView)\nIndicates to the system that an aspect of a view is invalid and triggers the necessary update.\nRelationships\nConforms To\nUIViewInvalidating\nSee Also\nInvalidation types\nstruct UIView.Invalidations.Configuration\nA change that invalidates a view’s configuration.\nstruct UIView.Invalidations.Constraints\nA change that invalidates a view’s constraints.\nstruct UIView.Invalidations.IntrinsicContentSize\nA change that invalidates a view’s intrinsic size.\nstruct UIView.Invalidations.Layout\nA change that invalidates the layout of the containing view’s subviews.\nstruct UIView.Invalidations.Tuple\nA change that invalidates a combination of factors covered by the other invalidation types."
  },
  {
    "title": "UIPickerViewDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipickerviewdelegate",
    "html": "Overview\n\nThe delegate of a UIPickerView object must adopt this protocol and implement at least some of its methods to provide the picker view with the data it needs to construct itself.\n\nThe delegate implements the required methods of this protocol to return height, width, row title, and the view content for the rows in each component. It must also provide the content for each component’s row, either as a string or a view. Typically the delegate implements other optional methods to respond to new selections or deselections of component rows.\n\nSee UIPickerView for a discussion of components, rows, row content, and row selection.\n\nTopics\nSetting the dimensions of the picker view\nfunc pickerView(UIPickerView, rowHeightForComponent: Int) -> CGFloat\nCalled by the picker view when it needs the row height to use for drawing row content.\nfunc pickerView(UIPickerView, widthForComponent: Int) -> CGFloat\nCalled by the picker view when it needs the row width to use for drawing row content.\nSetting the content of component rows\nThe methods in this group are marked @optional. However, to use a picker view, you must implement either the pickerView(_:titleForRow:forComponent:) or the pickerView(_:viewForRow:forComponent:reusing:) method to provide the content of component rows.\nfunc pickerView(UIPickerView, titleForRow: Int, forComponent: Int) -> String?\nCalled by the picker view when it needs the title to use for a given row in a given component.\nfunc pickerView(UIPickerView, attributedTitleForRow: Int, forComponent: Int) -> NSAttributedString?\nCalled by the picker view when it needs the styled title to use for a given row in a given component.\nfunc pickerView(UIPickerView, viewForRow: Int, forComponent: Int, reusing: UIView?) -> UIView\nCalled by the picker view when it needs the view to use for a given row in a given component.\nResponding to row selection\nfunc pickerView(UIPickerView, didSelectRow: Int, inComponent: Int)\nCalled by the picker view when the user selects a row in a component.\nRelationships\nInherits From\nNSObjectProtocol\nInherited By\nUIPickerViewAccessibilityDelegate\nSee Also\nCustomizing the picker behavior\nvar delegate: UIPickerViewDelegate?\nThe delegate for the picker view."
  },
  {
    "title": "UIPickerViewDataSource | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipickerviewdatasource",
    "html": "Overview\n\nThe data source of a UIPickerView object must adopt this protocol to mediate between the picker view object and your app’s data model for that picker view. The data source provides the picker view with the number of components, and the number of rows in each component, for displaying the picker view data. Both methods in this protocol are required.\n\nTopics\nProviding counts for the picker view\nfunc numberOfComponents(in: UIPickerView) -> Int\nAsks the data source for the number of components in the picker view.\n\nRequired\n\nfunc pickerView(UIPickerView, numberOfRowsInComponent: Int) -> Int\nAsks the data source for the number of rows for a specified component.\n\nRequired\n\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nProviding the picker data\nvar dataSource: UIPickerViewDataSource?\nThe data source for the picker view."
  },
  {
    "title": "observedProgress | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprogressview/1619840-observedprogress",
    "html": "Discussion\n\nWhen this property is set, the progress view updates its progress value automatically using information it receives from the Progress object. (Progress updates are animated.) Set the property to nil when you want to update the progress manually. The default value of this property is nil.\n\nFor more information about configuring a progress object to manage progress information, see Progress.\n\nSee Also\nManaging the progress bar\nvar progress: Float\nThe current progress of the progress view.\nfunc setProgress(Float, animated: Bool)\nAdjusts the current progress of the progress view, optionally animating the change."
  },
  {
    "title": "UIView.Invalidations.IntrinsicContentSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/invalidations/intrinsiccontentsize",
    "html": "Overview\n\nUse intrinsicContentSize to create an instance of this type.\n\nTopics\nCreating the invalidation structure\nstatic var intrinsicContentSize: UIView.Invalidations.IntrinsicContentSize\nA change that invalidates a view’s intrinsic size.\ninit()\nCreates an intrinsic content size invalidation structure.\nInvalidating the view\nfunc invalidate(view: UIView)\nIndicates to the system that an aspect of a view is invalid and triggers the necessary update.\nRelationships\nConforms To\nUIViewInvalidating\nSee Also\nInvalidation types\nstruct UIView.Invalidations.Configuration\nA change that invalidates a view’s configuration.\nstruct UIView.Invalidations.Constraints\nA change that invalidates a view’s constraints.\nstruct UIView.Invalidations.Display\nA change that requires the system to redraw a view’s content.\nstruct UIView.Invalidations.Layout\nA change that invalidates the layout of the containing view’s subviews.\nstruct UIView.Invalidations.Tuple\nA change that invalidates a combination of factors covered by the other invalidation types."
  },
  {
    "title": "UIPageControlTimerProgress | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipagecontroltimerprogress",
    "html": "Topics\nInitializers\ninit(preferredDuration: TimeInterval)\nInstance Properties\nvar delegate: UIPageControlTimerProgressDelegate?\nvar isRunning: Bool\nvar preferredDuration: TimeInterval\nvar resetsToInitialPageAfterEnd: Bool\nInstance Methods\nfunc duration(forPage: Int) -> TimeInterval\nfunc pauseTimer()\nfunc resumeTimer()\nfunc setDuration(TimeInterval, forPage: Int)\nRelationships\nInherits From\nUIPageControlProgress\nSee Also\nConfiguring page progress\nvar progress: UIPageControlProgress?\nclass UIPageControlProgress\nprotocol UIPageControlProgressDelegate\nprotocol UIPageControlTimerProgressDelegate"
  },
  {
    "title": "UIPageControlTimerProgressDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipagecontroltimerprogressdelegate",
    "html": "Topics\nInstance Methods\nfunc pageControlTimerProgress(UIPageControlTimerProgress, shouldAdvanceToPage: Int) -> Bool\nfunc pageControlTimerProgressDidChange(UIPageControlTimerProgress)\nRelationships\nInherits From\nUIPageControlProgressDelegate\nSee Also\nConfiguring page progress\nvar progress: UIPageControlProgress?\nclass UIPageControlProgress\nclass UIPageControlTimerProgress\nprotocol UIPageControlProgressDelegate"
  },
  {
    "title": "UIPageControlProgressDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipagecontrolprogressdelegate",
    "html": "Topics\nInstance Methods\nfunc pageControlProgress(UIPageControlProgress, initialProgressForPage: Int) -> Float\nfunc pageControlProgressVisibilityDidChange(UIPageControlProgress)\nRelationships\nInherits From\nNSObjectProtocol\nInherited By\nUIPageControlTimerProgressDelegate\nSee Also\nConfiguring page progress\nvar progress: UIPageControlProgress?\nclass UIPageControlProgress\nclass UIPageControlTimerProgress\nprotocol UIPageControlTimerProgressDelegate"
  },
  {
    "title": "size(forNumberOfPages:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipagecontrol/1621237-size",
    "html": "Parameters\npageCount\n\nThe number of pages to fit in the receiver’s bounds.\n\nReturn Value\n\nThe minimum size required to display dots for the page count.\n\nDiscussion\n\nSubclasses that customize the appearance of the page control can use this method to resize the page control when the page count changes."
  },
  {
    "title": "UIPageControlProgress | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipagecontrolprogress",
    "html": "Topics\nInstance Properties\nvar currentProgress: Float\nvar delegate: UIPageControlProgressDelegate?\nvar isProgressVisible: Bool\nRelationships\nInherits From\nNSObject\nSee Also\nConfiguring page progress\nvar progress: UIPageControlProgress?\nclass UIPageControlTimerProgress\nprotocol UIPageControlProgressDelegate\nprotocol UIPageControlTimerProgressDelegate"
  },
  {
    "title": "progress | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipagecontrol/4195442-progress",
    "html": "See Also\nConfiguring page progress\nclass UIPageControlProgress\nclass UIPageControlTimerProgress\nprotocol UIPageControlProgressDelegate\nprotocol UIPageControlTimerProgressDelegate"
  },
  {
    "title": "allowsContinuousInteraction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipagecontrol/3577675-allowscontinuousinteraction",
    "html": "See Also\nCustomizing the interaction state\nvar interactionState: UIPageControl.InteractionState\nThe interaction state when the current page changes.\nenum UIPageControl.InteractionState\nConstants that define the interaction states of the page control."
  },
  {
    "title": "UIPageControl.BackgroundStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipagecontrol/backgroundstyle",
    "html": "Topics\nConstants\ncase automatic\nThe default background style, which adapts in response to changes in the page control’s interaction state.\ncase prominent\nThe background style that shows a full background regardless of the interaction.\ncase minimal\nThe background style that shows a minimal background regardless of the interaction.\nRelationships\nConforms To\nSendable\nSee Also\nCustomizing the background style\nvar backgroundStyle: UIPageControl.BackgroundStyle\nThe preferred background style."
  },
  {
    "title": "UIPageControl.Direction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipagecontrol/direction",
    "html": "Topics\nDirections\ncase natural\nA direction that infers the lay out from the system’s locale.\ncase leftToRight\nA direction that lays out the page indicators from left to right.\ncase rightToLeft\nA direction that lays out the page indicators from right to left.\ncase topToBottom\nA direction that lays out the page indicators from top to bottom.\ncase bottomToTop\nA direction that lays out the page indicators from bottom to top.\nRelationships\nConforms To\nSendable\nSee Also\nCustomizing the layout direction\nvar direction: UIPageControl.Direction\nThe layout direction of the page indicators."
  },
  {
    "title": "pageIndicatorTintColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipagecontrol/1621239-pageindicatortintcolor",
    "html": "Discussion\n\nThe default color is a translucent white for the page indicator dot. The page indicator dot is used for all of the pages not visible on the screen. Assigning a new value to this property does not automatically change the color in the currentPageIndicatorTintColor property because the value for these two properties is not automatically derived from the other. Both properties must be specified independently. Similarly, no alpha is applied to this property for you. It is recommended (but not required) that the color you specify for this parameter contains some transparency–i.e. the alpha value should be less than 1.0.\n\nSee Also\nColoring the page indicator\nvar currentPageIndicatorTintColor: UIColor?\nThe tint color to apply to the current page indicator."
  },
  {
    "title": "preferredIndicatorImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipagecontrol/3577679-preferredindicatorimage",
    "html": "See Also\nManaging the indicator images\nfunc indicatorImage(forPage: Int) -> UIImage?\nReturns the override image for the indicator of the specified page.\nfunc setIndicatorImage(UIImage?, forPage: Int)\nRegisters an override image for the indicator of the specified page.\nvar preferredCurrentPageIndicatorImage: UIImage?\nThe preferred image for the current page indicator.\nfunc currentPageIndicatorImage(forPage: Int) -> UIImage?\nReturns the override image for the current page indicator of the specified page.\nfunc setCurrentPageIndicatorImage(UIImage?, forPage: Int)\nRegisters an override image for the current page indicator of the specified page."
  },
  {
    "title": "updateCurrentPageDisplay() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipagecontrol/1621235-updatecurrentpagedisplay",
    "html": "Discussion\n\nThis method updates the page indicator so that the current page (the white dot) matches the value returned from currentPage. The class ignores this method if the value of defersCurrentPageDisplay is false. Setting the currentPage value directly updates the indicator immediately.\n\nSee Also\nManaging pages\nvar currentPage: Int\nThe current page, shown by the page control as a white dot.\nvar numberOfPages: Int\nThe number of pages the receiver shows (as dots).\nvar hidesForSinglePage: Bool\nA Boolean value that controls whether the page control is hidden when there is only one page.\nvar defersCurrentPageDisplay: Bool\nA Boolean value that controls when the current page is displayed.\nDeprecated"
  },
  {
    "title": "defersCurrentPageDisplay | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipagecontrol/1621230-deferscurrentpagedisplay",
    "html": "Discussion\n\nSet the value of this property to true so that, when the user taps the control to go to a new page, the class defers updating the page control until it calls updateCurrentPageDisplay(). Set the value to false (the default) to have the page control updated immediately.\n\nSee Also\nManaging pages\nvar currentPage: Int\nThe current page, shown by the page control as a white dot.\nvar numberOfPages: Int\nThe number of pages the receiver shows (as dots).\nvar hidesForSinglePage: Bool\nA Boolean value that controls whether the page control is hidden when there is only one page.\nfunc updateCurrentPageDisplay()\nUpdates the page indicator to the current page.\nDeprecated"
  },
  {
    "title": "representedObject | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchtoken/3175448-representedobject",
    "html": "Discussion\n\nUse this property to keep information required to restore a search from state restoration, paste a search token, or perform the user’s search.\n\nSee Also\nCreating a search token\ninit(icon: UIImage?, text: String)\nCreates a search token with the specified text and icon (if any)."
  },
  {
    "title": "init(icon:text:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchtoken/3175449-init",
    "html": "Parameters\nicon\n\nAn image to display with the text.\n\ntext\n\nThe text to display on the search token.\n\nReturn Value\n\nA new search token.\n\nSee Also\nCreating a search token\nvar representedObject: Any?\nThe object represented by the search token."
  },
  {
    "title": "currentPage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipagecontrol/1621234-currentpage",
    "html": "Discussion\n\nThe property value is an integer specifying the current page shown minus one; thus a value of zero (the default) indicates the first page. A page control shows the current page as a white dot. Values outside the possible range are pinned to either 0 or numberOfPages minus 1.\n\nSee Also\nManaging pages\nvar numberOfPages: Int\nThe number of pages the receiver shows (as dots).\nvar hidesForSinglePage: Bool\nA Boolean value that controls whether the page control is hidden when there is only one page.\nvar defersCurrentPageDisplay: Bool\nA Boolean value that controls when the current page is displayed.\nDeprecated\nfunc updateCurrentPageDisplay()\nUpdates the page indicator to the current page.\nDeprecated"
  },
  {
    "title": "onImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiswitch/1623689-onimage",
    "html": "Discussion\n\nIn iOS 7 and later, this property has no effect.\n\nIn iOS 6, this image represents the interior contents of the switch. The image you specify is composited with the switch’s rounded bezel and thumb to create the final appearance.\n\nSee Also\nDeprecated\nvar offImage: UIImage?\nThe image displayed when the switch is in the off position."
  },
  {
    "title": "thumbTintColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiswitch/1623684-thumbtintcolor",
    "html": "See Also\nCustomizing the appearance of the switch\nvar onTintColor: UIColor?\nThe color used to tint the appearance of the switch when it’s in the on position."
  },
  {
    "title": "UISwitch.Style | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiswitch/style",
    "html": "Topics\nStyles\ncase automatic\nA style indicating that the system chooses the appearance of the switch according to the current user interface idiom.\ncase checkbox\nA style indicating that the switch appears as a Mac-style checkbox.\ncase sliding\nA style indicating that the switch appears as an on/off slider.\nRelationships\nConforms To\nSendable\nSee Also\nSetting the display style\nDisplaying a checkbox in your Mac app built with Mac Catalyst\nPresent a switch control as a Mac-style checkbox when your app runs in the Mac user interface idiom.\nvar preferredStyle: UISwitch.Style\nThe preferred display style for the switch.\nvar style: UISwitch.Style\nThe display style for the switch.\nvar title: String?\nThe title displayed next to a checkbox-style switch."
  },
  {
    "title": "preferredDatePickerStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidatepicker/3526124-preferreddatepickerstyle",
    "html": "Discussion\n\nUse this property to specify the display style that you prefer. If the style changes, the date picker may generate a layout pass to update the display.\n\nThe default style is UIDatePickerStyle.automatic. For a list of styles, see UIDatePickerStyle.\n\nSee Also\nConfiguring the date picker style\nvar datePickerStyle: UIDatePickerStyle\nThe current style of the date picker.\nenum UIDatePickerStyle\nStyles that determine the appearance of a date picker."
  },
  {
    "title": "NSRectAlignment.topLeading | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsrectalignment/topleading",
    "html": "See Also\nAlignments\ncase none\nHas no specified alignment.\ncase top\nAligns to the top edge.\ncase leading\nAligns to the leading edge.\ncase bottomLeading\nAligns to the bottom and leading edges.\ncase bottom\nAligns to the bottom edge.\ncase bottomTrailing\nAligns to the bottom and trailing edges.\ncase trailing\nAligns to the trailing edge.\ncase topTrailing\nAligns to the top and trailing edges."
  },
  {
    "title": "UIWebView.PaginationBreakingMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebview/paginationbreakingmode",
    "html": "Topics\nConstants\ncase page\nContent respects CSS properties related to page-breaking.\ncase column\nContent respects CSS properties related to column-breaking.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "UIViewAnimatingState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewanimatingstate",
    "html": "Topics\nConstants\ncase inactive\nThe animations have not yet started executing. This is the initial state of the animator object.\ncase active\nThe animator object is active and animations are either running or paused. An animator moves to this state after the first call to startAnimation() or pauseAnimation(). It stays in the active state until the animations finish naturally or until you call the stopAnimation(_:) method.\ncase stopped\nThe animation is stopped. Putting an animation into this state ends the animation and leaves any animatable properties at their current values, instead of updating them to their intended final values. An animation cannot be started while in this state.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "paginationBreakingMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebview/1617933-paginationbreakingmode",
    "html": "Discussion\n\nThis property determines whether certain CSS properties regarding column- and page-breaking are honored or ignored. When this property is set to UIWebView.PaginationBreakingMode.column, the content respects the CSS properties related to column-breaking in place of page-breaking.\n\nSee UIWebView.PaginationBreakingMode for possible values. The default value is UIWebView.PaginationBreakingMode.page.\n\nSee Also\nManaging pages\nvar gapBetweenPages: CGFloat\nThe size of the gap, in points, between pages.\nDeprecated\nvar pageCount: Int\nThe number of pages produced by the layout of the web view.\nDeprecated\nvar pageLength: CGFloat\nThe size of each page, in points, in the direction that the pages flow.\nDeprecated\nvar paginationMode: UIWebView.PaginationMode\nThe layout of content in the web view.\nDeprecated"
  },
  {
    "title": "suppressesIncrementalRendering | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebview/1617984-suppressesincrementalrendering",
    "html": "Discussion\n\nWhen set to true, the web view does not attempt to render incoming content as it arrives. Instead, the view’s current contents remain in place until all of the new content has been received, at which point the new content is rendered. This property does not affect the rendering of content retrieved after a frame finishes loading.\n\nThe value of this property is false by default.\n\nSee Also\nSetting web content properties\nvar allowsLinkPreview: Bool\nA Boolean value that determines whether pressing on a link displays a preview of the destination for the link.\nDeprecated\nvar scalesPageToFit: Bool\nA Boolean value determining whether the webpage scales to fit the view and the user can change the scale.\nDeprecated\nvar scrollView: UIScrollView\nThe scroll view associated with the web view.\nDeprecated\nvar keyboardDisplayRequiresUserAction: Bool\nA Boolean value indicating whether web content can programmatically display the keyboard.\nDeprecated\nvar dataDetectorTypes: UIDataDetectorTypes\nThe types of data converted to clickable URLs in the web view’s content.\nDeprecated"
  },
  {
    "title": "goForward() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebview/1617940-goforward",
    "html": "See Also\nMoving back and forward\nvar canGoBack: Bool\nA Boolean value indicating whether the receiver can move backward.\nDeprecated\nvar canGoForward: Bool\nA Boolean value indicating whether the receiver can move forward.\nDeprecated\nfunc goBack()\nLoads the previous location in the back-forward list.\nDeprecated"
  },
  {
    "title": "allowsLinkPreview | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebview/1617976-allowslinkpreview",
    "html": "Discussion\n\nThis property is available on devices that support 3D Touch. Default value is false.\n\nIf you set this value to true for a web view, users (with devices that support 3D Touch) can preview link destinations, and can preview detected data such as addresses, by pressing on links. Such previews are known to users as peeks. If a user presses deeper, the preview navigates (or pops, in user terminology) to the destination. Because pop navigation switches the user from your app to Safari, it is opt-in, by way of this property, rather default behavior for this class.\n\nIf you want to support link preview but also want to keep users within your app, you can switch from using the UIWebView class to the SFSafariViewController class. If you are using a web view as an in-app browser, making this change is best practice. The Safari view controller class automatically supports link previews.\n\nSee Also\nSetting web content properties\nvar scalesPageToFit: Bool\nA Boolean value determining whether the webpage scales to fit the view and the user can change the scale.\nDeprecated\nvar scrollView: UIScrollView\nThe scroll view associated with the web view.\nDeprecated\nvar suppressesIncrementalRendering: Bool\nA Boolean value indicating whether the web view suppresses content rendering until it is fully loaded into memory.\nDeprecated\nvar keyboardDisplayRequiresUserAction: Bool\nA Boolean value indicating whether web content can programmatically display the keyboard.\nDeprecated\nvar dataDetectorTypes: UIDataDetectorTypes\nThe types of data converted to clickable URLs in the web view’s content.\nDeprecated"
  },
  {
    "title": "allowsPictureInPictureMediaPlayback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebview/1617944-allowspictureinpicturemediaplayb",
    "html": "Discussion\n\nThe default value is true on devices that support Picture in Picture (PiP) mode and false on all other devices.\n\nSee Also\nManaging media playback\nvar allowsInlineMediaPlayback: Bool\nA Boolean value that determines whether HTML5 videos play inline or use the native full-screen controller.\nDeprecated\nvar mediaPlaybackRequiresUserAction: Bool\nA Boolean value that determines whether HTML5 videos can play automatically or require the user to start playing them.\nDeprecated\nvar mediaPlaybackAllowsAirPlay: Bool\nA Boolean value that determines whether Air Play is allowed from this view.\nDeprecated"
  },
  {
    "title": "scrollView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebview/1617955-scrollview",
    "html": "Discussion\n\nYour app can access the scroll view if it wants to customize the scrolling behavior of the web view.\n\nSee Also\nSetting web content properties\nvar allowsLinkPreview: Bool\nA Boolean value that determines whether pressing on a link displays a preview of the destination for the link.\nDeprecated\nvar scalesPageToFit: Bool\nA Boolean value determining whether the webpage scales to fit the view and the user can change the scale.\nDeprecated\nvar suppressesIncrementalRendering: Bool\nA Boolean value indicating whether the web view suppresses content rendering until it is fully loaded into memory.\nDeprecated\nvar keyboardDisplayRequiresUserAction: Bool\nA Boolean value indicating whether web content can programmatically display the keyboard.\nDeprecated\nvar dataDetectorTypes: UIDataDetectorTypes\nThe types of data converted to clickable URLs in the web view’s content.\nDeprecated"
  },
  {
    "title": "scalesPageToFit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebview/1617950-scalespagetofit",
    "html": "Discussion\n\nIf true, the webpage is scaled to fit and the user can zoom in and zoom out. If false, user zooming is disabled. The default value is false.\n\nSee Also\nSetting web content properties\nvar allowsLinkPreview: Bool\nA Boolean value that determines whether pressing on a link displays a preview of the destination for the link.\nDeprecated\nvar scrollView: UIScrollView\nThe scroll view associated with the web view.\nDeprecated\nvar suppressesIncrementalRendering: Bool\nA Boolean value indicating whether the web view suppresses content rendering until it is fully loaded into memory.\nDeprecated\nvar keyboardDisplayRequiresUserAction: Bool\nA Boolean value indicating whether web content can programmatically display the keyboard.\nDeprecated\nvar dataDetectorTypes: UIDataDetectorTypes\nThe types of data converted to clickable URLs in the web view’s content.\nDeprecated"
  },
  {
    "title": "load(_:mimeType:textEncodingName:baseURL:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebview/1617941-load",
    "html": "Parameters\ndata\n\nThe content for the main page.\n\nMIMEType\n\nThe MIME type of the content.\n\nencodingName\n\nThe IANA encoding name as in utf-8 or utf-16.\n\nbaseURL\n\nThe base URL for the content.\n\nSee Also\nLoading content\nfunc loadHTMLString(String, baseURL: URL?)\nSets the main page content and base URL.\nDeprecated\nfunc loadRequest(URLRequest)\nConnects to a given URL by initiating an asynchronous client request.\nDeprecated\nvar request: URLRequest?\nThe URL request identifying the location of the content to load.\nDeprecated\nvar isLoading: Bool\nA Boolean value indicating whether the receiver is done loading content.\nDeprecated\nfunc stopLoading()\nStops the loading of any web content managed by the receiver.\nDeprecated\nfunc reload()\nReloads the current page.\nDeprecated"
  },
  {
    "title": "goBack() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebview/1617975-goback",
    "html": "See Also\nMoving back and forward\nvar canGoBack: Bool\nA Boolean value indicating whether the receiver can move backward.\nDeprecated\nvar canGoForward: Bool\nA Boolean value indicating whether the receiver can move forward.\nDeprecated\nfunc goForward()\nLoads the next location in the back-forward list.\nDeprecated"
  },
  {
    "title": "canGoForward | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwebview/1617951-cangoforward",
    "html": "Discussion\n\nIf true, able to move forward; otherwise, false .\n\nSee Also\nMoving back and forward\nvar canGoBack: Bool\nA Boolean value indicating whether the receiver can move backward.\nDeprecated\nfunc goBack()\nLoads the previous location in the back-forward list.\nDeprecated\nfunc goForward()\nLoads the next location in the back-forward list.\nDeprecated"
  },
  {
    "title": "state | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewanimating/1649743-state",
    "html": "Required\n\nDiscussion\n\nThis property reflects the current state of the animation. An animator object starts in the UIViewAnimatingState.inactive state. Calling the startAnimation() or pauseAnimation() method changes the state to UIViewAnimatingState.active. Changing the fractionComplete property also moves the animator to the active state. The animator remains in the active state until its animations finish, at which point it moves back to the inactive state.\n\nCalling the stopAnimation(_:) method changes the state of the animator to UIViewAnimatingState.stopped. When in this state, the animations are stopped and cannot be restarted until you call the finishAnimation(at:) method, which returns the animator to the inactive state.\n\nSee Also\nGetting the animator’s state\nvar fractionComplete: CGFloat\nThe completion percentage of the animation.\n\nRequired\n\nvar isReversed: Bool\nA Boolean value indicating whether the animation is running in the reverse direction.\n\nRequired\n\nvar isRunning: Bool\nA Boolean value indicating whether the animation is currently running.\n\nRequired"
  },
  {
    "title": "startAnimation(afterDelay:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewanimating/2097540-startanimation",
    "html": "Required\n\nParameters\ndelay\n\nThe amount of time (in seconds) to wait before starting the animation.\n\nDiscussion\n\nCall this method to start the animations or to resume a set of paused animations after the specified time delay. This method sets the state of the animator to UIViewAnimatingState.active, if it is not already there. It is a programmer error to call this method while the state of the animator is set to UIViewAnimatingState.stopped.\n\nWhen implementing a custom animator, use this method to transition your animator to the active state and to run the animations after the specified delay. Run your animations from the progress point in the fractionComplete property. Update the state and isRunning properties, as well as any other relevant properties of your custom animator object.\n\nSee Also\nStarting and stopping the animations\nfunc startAnimation()\nStarts the animation from its current position.\n\nRequired\n\nfunc pauseAnimation()\nPauses a running animation at its current position.\n\nRequired\n\nfunc stopAnimation(Bool)\nStops the animations at their current positions.\n\nRequired\n\nfunc finishAnimation(at: UIViewAnimatingPosition)\nFinishes the animations and returns the animator to the inactive state.\n\nRequired"
  },
  {
    "title": "top | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uirectedge/1624480-top",
    "html": "See Also\nEdges\nstatic var left: UIRectEdge\nThe left edge of the rectangle.\nstatic var bottom: UIRectEdge\nThe bottom edge of the rectangle.\nstatic var right: UIRectEdge\nThe right edge of the rectangle.\nstatic var all: UIRectEdge\nAll edges of the rectangle."
  },
  {
    "title": "init(frame:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiswitch/1623682-init",
    "html": "Parameters\nframe\n\nA rectangle defining the frame of the UISwitch object. The size components of this rectangle are ignored.\n\nReturn Value\n\nAn initialized UISwitch object.\n\nDiscussion\n\nUISwitch overrides init(frame:) and enforces a size appropriate for the control.\n\nSee Also\nCreating a switch\ninit?(coder: NSCoder)\nCreates a switch control from data in an unarchiver."
  },
  {
    "title": "reloadComponent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipickerview/1614385-reloadcomponent",
    "html": "Parameters\ncomponent\n\nA zero-indexed number identifying a component of the picker view.\n\nDiscussion\n\nCalling this method causes the picker view to query the delegate for new data for the given component.\n\nSee Also\nReloading the picker view\nfunc reloadAllComponents()\nReloads all components of the picker view."
  },
  {
    "title": "rowSize(forComponent:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipickerview/1614374-rowsize",
    "html": "Parameters\ncomponent\n\nA zero-indexed number identifying a component.\n\nReturn Value\n\nThe size of rows in the given component. This is generally the size required to display the largest string or view used as a row in the component.\n\nDiscussion\n\nA picker view fetches the value of this property by calling the pickerView(_:widthForComponent:) and pickerView(_:rowHeightForComponent:) delegate methods, and caches it. The default value is (0, 0).\n\nSee Also\nGetting the dimensions of the picker view\nvar numberOfComponents: Int\nThe number of components for the picker view.\nfunc numberOfRows(inComponent: Int) -> Int\nReturns the number of rows for a component."
  },
  {
    "title": "numberOfRows(inComponent:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipickerview/1614381-numberofrows",
    "html": "Parameters\ncomponent\n\nA zero-indexed number identifying a component.\n\nReturn Value\n\nThe number of rows in the given component.\n\nDiscussion\n\nA picker view fetches the value of this property from the data source and and caches it. The default value is zero.\n\nSee Also\nGetting the dimensions of the picker view\nvar numberOfComponents: Int\nThe number of components for the picker view.\nfunc rowSize(forComponent: Int) -> CGSize\nReturns the size of a row for a component."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipickerview/1614379-delegate",
    "html": "Discussion\n\nThe delegate must adopt the UIPickerViewDelegate protocol and implement the required methods to return the drawing rectangle for rows in each component. It also provides the content for each component’s row, either as a string or a view, and it typically responds to new selections or deselections.\n\nSee Also\nCustomizing the picker behavior\nprotocol UIPickerViewDelegate\nThe interface for a picker view’s delegate."
  },
  {
    "title": "dataSource | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipickerview/1614370-datasource",
    "html": "Discussion\n\nThe data source must adopt the UIPickerViewDataSource protocol and implement the required methods to return the number of components and the number of rows in each component.\n\nSee Also\nProviding the picker data\nprotocol UIPickerViewDataSource\nThe interface for a picker view’s data source."
  },
  {
    "title": "trackImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprogressview/1619843-trackimage",
    "html": "Discussion\n\nIf you provide a custom image, the trackTintColor property is ignored.\n\nSee Also\nConfiguring the progress bar\nvar progressViewStyle: UIProgressView.Style\nThe current graphical style of the progress view.\nvar progressTintColor: UIColor?\nThe color shown for the portion of the progress bar that’s filled.\nvar progressImage: UIImage?\nAn image to use for the portion of the progress bar that’s filled.\nvar trackTintColor: UIColor?\nThe color shown for the portion of the progress bar that isn’t filled."
  },
  {
    "title": "UIProgressView.Style | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprogressview/style",
    "html": "Overview\n\nYou can set and retrieve the current style of progress view through the progressViewStyle property.\n\nTopics\nConstants\ncase `default`\nThe standard progress-view style.\ncase bar\nThe style of progress view that is used in a toolbar.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "progressImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprogressview/1619837-progressimage",
    "html": "Discussion\n\nIf you provide a custom image, the progressTintColor property is ignored.\n\nSee Also\nConfiguring the progress bar\nvar progressViewStyle: UIProgressView.Style\nThe current graphical style of the progress view.\nvar progressTintColor: UIColor?\nThe color shown for the portion of the progress bar that’s filled.\nvar trackTintColor: UIColor?\nThe color shown for the portion of the progress bar that isn’t filled.\nvar trackImage: UIImage?\nAn image to use for the portion of the track that isn’t filled."
  },
  {
    "title": "progressTintColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprogressview/1619836-progresstintcolor",
    "html": "See Also\nConfiguring the progress bar\nvar progressViewStyle: UIProgressView.Style\nThe current graphical style of the progress view.\nvar progressImage: UIImage?\nAn image to use for the portion of the progress bar that’s filled.\nvar trackTintColor: UIColor?\nThe color shown for the portion of the progress bar that isn’t filled.\nvar trackImage: UIImage?\nAn image to use for the portion of the track that isn’t filled."
  },
  {
    "title": "effect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uihoverstyle/4224536-effect",
    "html": "Discussion\n\nUse UIHoverAutomaticEffect to apply a system-default effect to the view.\n\nSee Also\nSpecifying a hover effect\nstruct UIHoverAutomaticEffect\nA system-default hover effect that automatically selects the appropriate effect based on the view to which it applies.\nstruct UIHoverHighlightEffect\nAn effect that applies a highlight to the view on hover.\nstruct UIHoverLiftEffect\nAn effect that can visually lift the view on hover where appropriate.\nprotocol UIHoverEffect\nA hover effect that can apply to a view through a hover style."
  },
  {
    "title": "UIShape | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uishape",
    "html": "Overview\n\nA UIShape can represent different types of shapes, including:\n\nA simple shape like a rectangle or circle that resolves into a concrete shape according to context (like size and position)\n\nA Bézier path\n\nA dynamic shape that resolves using a custom closure\n\nYou typically use a UIShape with APIs like UIHoverStyle to represent the shape of an effect.\n\nTopics\nCreating a hover shape\nstatic var rect: UIShape\nCreates a rectangular shape.\nstatic var capsule: UIShape\nCreates a capsule shape, a rounded rectangle with a corner radius equal to half the length of the rectangle’s smallest edge.\nstatic var circle: UIShape\nCreates a circular shape, with a radius equal to half the length of the frame rectangle’s smallest edge.\nstatic func rect(cornerRadius: CGFloat, cornerCurve: UICornerCurve, maskedCorners: UIRectCorner) -> UIShape\nCreates a rectangular shape with rounded corners, using the provided corner radius, corner curve, and rectangle corners.\nstatic func fixedRect(CGRect, cornerRadius: CGFloat, cornerCurve: UICornerCurve, maskedCorners: UIRectCorner) -> UIShape\nCreates a fixed rectangular shape that uses the provided rectangle as its shape, regardless of the frame that contains it.\nenum UICornerCurve\nThe corner curve to apply to a view.\nCreating a hover shape from a custom path\nstatic func path(UIBezierPath) -> UIShape\nCreates a shape with a custom Bézier path.\nCreating a dynamic hover shape\ninit(some UIShapeProvider)\nCreates a dynamic shape that resolves using the provided resolver closure and resolution context.\nprotocol UIShapeProvider\nAn interface for a type that provides a custom shape by resolving it dynamically based on a context.\nfunc resolve(in: UIShape.ResolutionContext) -> UIShape.Resolved\nResolves the shape in the provided context.\nstruct UIShape.ResolutionContext\nThe context for resolving a dynamic shape.\nstruct UIShape.Resolved\nA shape that has completely resolved based on a context.\nCreating a shape by applying insets\nfunc inset(by: UIEdgeInsets) -> UIShape\nCreates a new modified shape by applying the provided insets to this shape.\nfunc inset(by: CGFloat) -> UIShape\nCreates a new modified shape by applying the provided inset to this shape.\nComparing hover shapes\nstatic func == (UIShape, UIShape) -> Bool\nAn operator for checking whether two shapes are equal.\nstatic func != (UIShape, UIShape) -> Bool\nAn operator for checking whether two shapes are unequal.\nDescribing a hover shape\nvar description: String\nA textual representation of this instance.\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging.\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nUIShapeProvider\nSee Also\nSpecifying a hover shape\nvar shape: UIShape?\nThe shape to use for the hover effect."
  },
  {
    "title": "UIHoverLiftEffect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uihoverlifteffect",
    "html": "Topics\nCreating a lift hover effect\nstatic var lift: UIHoverLiftEffect\nProvides a convenience initializer to create an effect that can visually lift the view on hover where appropriate.\ninit()\nCreates an effect that can visually lift the view on hover where appropriate.\nRelationships\nConforms To\nUIHoverEffect\nSee Also\nSpecifying a hover effect\nvar effect: UIHoverEffect\nThe effect to apply to the view with this style.\nstruct UIHoverAutomaticEffect\nA system-default hover effect that automatically selects the appropriate effect based on the view to which it applies.\nstruct UIHoverHighlightEffect\nAn effect that applies a highlight to the view on hover.\nprotocol UIHoverEffect\nA hover effect that can apply to a view through a hover style."
  },
  {
    "title": "setProgress(_:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprogressview/1619846-setprogress",
    "html": "Parameters\nprogress\n\nThe new progress value.\n\nanimated\n\ntrue if the change should be animated, false if the change should happen immediately.\n\nDiscussion\n\nThe current progress is represented by a floating-point value between 0.0 and 1.0, inclusive, where 1.0 indicates the completion of the task. The default value is 0.0. Values less than 0.0 and greater than 1.0 are pinned to those limits.\n\nSee Also\nManaging the progress bar\nvar progress: Float\nThe current progress of the progress view.\nvar observedProgress: Progress?\nThe progress object to use for updating the progress view."
  },
  {
    "title": "shape | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uihoverstyle/4224539-shape",
    "html": "Discussion\n\nIf the value of this property is nil, the system chooses a default shape based on the view.\n\nSee Also\nSpecifying a hover shape\nstruct UIShape\nAn abstract representation of a shape."
  },
  {
    "title": "init(shape:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uihoverstyle/4224538-init",
    "html": "See Also\nCreating a hover style\ninit(effect: some UIHoverEffect, shape: UIShape?)\nCreates a hover style with the provided effect and shape."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprogressview/1619839-init",
    "html": "See Also\nCreating a progress view\ninit(progressViewStyle: UIProgressView.Style)\nCreates a progress view with the specified style.\ninit(frame: CGRect)\nCreates a progress view with the specified frame rectangle."
  },
  {
    "title": "UIView.Invalidations.Tuple | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/invalidations/tuple",
    "html": "Overview\n\nThe system uses this type when a change invalidates multiple aspects of a view. Use a tuple of the static values defined in UIViewInvalidating when more than one invalidation type applies to a change.\n\nTopics\nCreating the invalidation structure\ninit(Invalidation1, Invalidation2)\nCreates an invalidation structure with multiple invalidations.\nInvalidating the view\nfunc invalidate(view: UIView)\nIndicates to the system that an aspect of a view is invalid and triggers the necessary update.\nRelationships\nConforms To\nUIViewInvalidating\nSee Also\nInvalidation types\nstruct UIView.Invalidations.Configuration\nA change that invalidates a view’s configuration.\nstruct UIView.Invalidations.Constraints\nA change that invalidates a view’s constraints.\nstruct UIView.Invalidations.Display\nA change that requires the system to redraw a view’s content.\nstruct UIView.Invalidations.IntrinsicContentSize\nA change that invalidates a view’s intrinsic size.\nstruct UIView.Invalidations.Layout\nA change that invalidates the layout of the containing view’s subviews."
  },
  {
    "title": "progress | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprogressview/1619844-progress",
    "html": "Discussion\n\nThe current progress is represented by a floating-point value between 0.0 and 1.0, inclusive, where 1.0 indicates the completion of the task. The default value is 0.0. Values less than 0.0 and greater than 1.0 are pinned to those limits.\n\nSee Also\nManaging the progress bar\nfunc setProgress(Float, animated: Bool)\nAdjusts the current progress of the progress view, optionally animating the change.\nvar observedProgress: Progress?\nThe progress object to use for updating the progress view."
  },
  {
    "title": "init(progressViewStyle:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprogressview/1619833-init",
    "html": "Parameters\nstyle\n\nA constant that specifies the style of the object to be created. See UIProgressView.Style for descriptions of the style constants.\n\nReturn Value\n\nAn initialized UIProgressView object.\n\nDiscussion\n\nUIProgressView sets the height of the returned view according to the specified style. You can set and retrieve the style of a progress view through the progressViewStyle property.\n\nSee Also\nCreating a progress view\ninit(frame: CGRect)\nCreates a progress view with the specified frame rectangle.\ninit?(coder: NSCoder)\nCreates a progress view from data in an unarchiver."
  },
  {
    "title": "UIView.Invalidations.Constraints | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/invalidations/constraints",
    "html": "Overview\n\nUse constraints to create an instance of this type.\n\nTopics\nCreating the invalidation structure\nstatic var constraints: UIView.Invalidations.Constraints\nA change that invalidates a view’s constraints.\ninit()\nCreates a constraints invalidation structure.\nInvalidating the view\nfunc invalidate(view: UIView)\nIndicates to the system that an aspect of a view is invalid and triggers the necessary update.\nRelationships\nConforms To\nUIViewInvalidating\nSee Also\nInvalidation types\nstruct UIView.Invalidations.Configuration\nA change that invalidates a view’s configuration.\nstruct UIView.Invalidations.Display\nA change that requires the system to redraw a view’s content.\nstruct UIView.Invalidations.IntrinsicContentSize\nA change that invalidates a view’s intrinsic size.\nstruct UIView.Invalidations.Layout\nA change that invalidates the layout of the containing view’s subviews.\nstruct UIView.Invalidations.Tuple\nA change that invalidates a combination of factors covered by the other invalidation types."
  },
  {
    "title": "isTranslucent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitoolbar/1618001-istranslucent",
    "html": "Discussion\n\nWhen the toolbar is translucent, configure the edgesForExtendedLayout and extendedLayoutIncludesOpaqueBars properties of your view controller to display your content underneath the toolbar.\n\nIf the toolbar doesn’t have a custom background image, or if any pixel of the background image has an alpha value of less than 1.0, the default value of this property is true. If the background image is completely opaque, the default value of this property is false. If you set this property to true and the custom background image is completely opaque, UIKit applies a system-defined opacity of less than 1.0 to the image. If you set this property to false and the background image isn’t opaque, UIKit adds an opaque backdrop.\n\nSee Also\nCustomizing appearance\nvar standardAppearance: UIToolbarAppearance\nThe appearance settings to use for a standard-height toolbar.\nvar compactAppearance: UIToolbarAppearance?\nThe appearance settings to use for a compact-height toolbar.\nvar scrollEdgeAppearance: UIToolbarAppearance?\nThe appearance settings for a standard-height toolbar when the edge of scrollable content aligns with the edge of the toolbar.\nvar compactScrollEdgeAppearance: UIToolbarAppearance?\nThe appearance settings for a compact-height toolbar when the edge of any scrollable content aligns with the edge of a compact-height toolbar.\nLegacy customizations\nCustomize appearance information directly on the toolbar object."
  },
  {
    "title": "largeContentSizeImageInsets | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibaritem/2865781-largecontentsizeimageinsets",
    "html": "Discussion\n\nThe default value of this property is zero.\n\nSee Also\nGetting and setting properties\nvar title: String?\nThe title displayed on the item.\nvar image: UIImage?\nThe image used to represent the item.\nvar landscapeImagePhone: UIImage?\nThe image to use to represent the item in landscape orientation when using the iPhone appearance idiom.\nvar largeContentSizeImage: UIImage?\nThe image to display for users who are blind or have low vision.\nvar imageInsets: UIEdgeInsets\nThe image inset or outset for each edge.\nvar landscapeImagePhoneInsets: UIEdgeInsets\nThe image inset or outset for each edge of the image in landscape orientation when using the iPhone appearance idiom.\nvar isEnabled: Bool\nA Boolean value indicating whether the item is enabled.\nvar tag: Int\nThe bar item’s tag, an app-supplied integer that you can use to identify bar item objects in your app."
  },
  {
    "title": "intrinsicContentSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewinvalidating/3853140-intrinsiccontentsize",
    "html": "Discussion\n\nUse this type of invalidation type to call invalidateIntrinsicContentSize() when a change in property value invalidates the containing view’s intrinsic content size. When you use this type, the constraint-based layout system accounts for the change the next time it updates the layout.\n\nSee Also\nSpecifying invalidation types\nstatic var configuration: UIView.Invalidations.Configuration\nA change that invalidates a view’s configuration.\nAvailable when Self is UIView.Invalidations.Configuration.\nstatic var constraints: UIView.Invalidations.Constraints\nA change that invalidates a view’s constraints.\nAvailable when Self is UIView.Invalidations.Constraints.\nstatic var display: UIView.Invalidations.Display\nA change that requires the system to redraw a view’s content.\nAvailable when Self is UIView.Invalidations.Display.\nstatic var layout: UIView.Invalidations.Layout\nA change that invalidates the layout of the containing view’s subviews.\nAvailable when Self is UIView.Invalidations.Layout."
  },
  {
    "title": "constraints | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewinvalidating/3853138-constraints",
    "html": "Discussion\n\nUse this invalidation type to call setNeedsUpdateConstraints() when a change in property value should cause the containing view to update constraints.\n\nSee Also\nSpecifying invalidation types\nstatic var configuration: UIView.Invalidations.Configuration\nA change that invalidates a view’s configuration.\nAvailable when Self is UIView.Invalidations.Configuration.\nstatic var display: UIView.Invalidations.Display\nA change that requires the system to redraw a view’s content.\nAvailable when Self is UIView.Invalidations.Display.\nstatic var intrinsicContentSize: UIView.Invalidations.IntrinsicContentSize\nA change that invalidates a view’s intrinsic size.\nAvailable when Self is UIView.Invalidations.IntrinsicContentSize.\nstatic var layout: UIView.Invalidations.Layout\nA change that invalidates the layout of the containing view’s subviews.\nAvailable when Self is UIView.Invalidations.Layout."
  },
  {
    "title": "landscapeImagePhoneInsets | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibaritem/1616420-landscapeimagephoneinsets",
    "html": "Discussion\n\nThe default value is zero.\n\nSee Also\nGetting and setting properties\nvar title: String?\nThe title displayed on the item.\nvar image: UIImage?\nThe image used to represent the item.\nvar landscapeImagePhone: UIImage?\nThe image to use to represent the item in landscape orientation when using the iPhone appearance idiom.\nvar largeContentSizeImage: UIImage?\nThe image to display for users who are blind or have low vision.\nvar imageInsets: UIEdgeInsets\nThe image inset or outset for each edge.\nvar largeContentSizeImageInsets: UIEdgeInsets\nThe insets to apply to the bar item’s large image when displaying the image in an assistive UI.\nvar isEnabled: Bool\nA Boolean value indicating whether the item is enabled.\nvar tag: Int\nThe bar item’s tag, an app-supplied integer that you can use to identify bar item objects in your app."
  },
  {
    "title": "landscapeImagePhone | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibaritem/1616421-landscapeimagephone",
    "html": "Discussion\n\nThis image can be used to create other images to represent this item on the bar—for example, a selected and unselected image may be derived from this image. You should set this property before adding the item to a bar. The default value is nil.\n\nSee Also\nGetting and setting properties\nvar title: String?\nThe title displayed on the item.\nvar image: UIImage?\nThe image used to represent the item.\nvar largeContentSizeImage: UIImage?\nThe image to display for users who are blind or have low vision.\nvar imageInsets: UIEdgeInsets\nThe image inset or outset for each edge.\nvar landscapeImagePhoneInsets: UIEdgeInsets\nThe image inset or outset for each edge of the image in landscape orientation when using the iPhone appearance idiom.\nvar largeContentSizeImageInsets: UIEdgeInsets\nThe insets to apply to the bar item’s large image when displaying the image in an assistive UI.\nvar isEnabled: Bool\nA Boolean value indicating whether the item is enabled.\nvar tag: Int\nThe bar item’s tag, an app-supplied integer that you can use to identify bar item objects in your app."
  },
  {
    "title": "indicatorImage(forPage:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipagecontrol/3577677-indicatorimage",
    "html": "Parameters\npage\n\nThe index of the page. A value that’s greater than or equal to 0 and less than numberOfPages.\n\nReturn Value\n\nThe override image, or nil if you haven’t overidden the image for the specified page number.\n\nSee Also\nManaging the indicator images\nvar preferredIndicatorImage: UIImage?\nThe preferred image for indicators.\nfunc setIndicatorImage(UIImage?, forPage: Int)\nRegisters an override image for the indicator of the specified page.\nvar preferredCurrentPageIndicatorImage: UIImage?\nThe preferred image for the current page indicator.\nfunc currentPageIndicatorImage(forPage: Int) -> UIImage?\nReturns the override image for the current page indicator of the specified page.\nfunc setCurrentPageIndicatorImage(UIImage?, forPage: Int)\nRegisters an override image for the current page indicator of the specified page."
  },
  {
    "title": "direction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipagecontrol/3930362-direction",
    "html": "Discussion\n\nThe default value of this property is UIPageControl.Direction.natural.\n\nSee Also\nCustomizing the layout direction\nenum UIPageControl.Direction\nDecribes the layout direction of a page control’s indicators."
  },
  {
    "title": "setCurrentPageIndicatorImage(_:forPage:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipagecontrol/3930364-setcurrentpageindicatorimage",
    "html": "Parameters\nimage\n\nThe image to use instead of the preferred image. Use nil to reset the image to preferredCurrentPageIndicatorImage.\n\npage\n\nThe index of the page. A value that’s greater than or equal to 0 and less than numberOfPages.\n\nSee Also\nManaging the indicator images\nvar preferredIndicatorImage: UIImage?\nThe preferred image for indicators.\nfunc indicatorImage(forPage: Int) -> UIImage?\nReturns the override image for the indicator of the specified page.\nfunc setIndicatorImage(UIImage?, forPage: Int)\nRegisters an override image for the indicator of the specified page.\nvar preferredCurrentPageIndicatorImage: UIImage?\nThe preferred image for the current page indicator.\nfunc currentPageIndicatorImage(forPage: Int) -> UIImage?\nReturns the override image for the current page indicator of the specified page."
  },
  {
    "title": "currentPageIndicatorImage(forPage:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipagecontrol/3930361-currentpageindicatorimage",
    "html": "Parameters\npage\n\nThe index of the page. A value that’s greater than or equal to 0 and less than numberOfPages.\n\nReturn Value\n\nThe override image, or nil if you haven’t overidden the image for the specified page number.\n\nSee Also\nManaging the indicator images\nvar preferredIndicatorImage: UIImage?\nThe preferred image for indicators.\nfunc indicatorImage(forPage: Int) -> UIImage?\nReturns the override image for the indicator of the specified page.\nfunc setIndicatorImage(UIImage?, forPage: Int)\nRegisters an override image for the indicator of the specified page.\nvar preferredCurrentPageIndicatorImage: UIImage?\nThe preferred image for the current page indicator.\nfunc setCurrentPageIndicatorImage(UIImage?, forPage: Int)\nRegisters an override image for the current page indicator of the specified page."
  },
  {
    "title": "setIndicatorImage(_:forPage:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipagecontrol/3577680-setindicatorimage",
    "html": "Parameters\nimage\n\nThe image to use instead of the preferred image. Use nil to reset the image to preferredIndicatorImage.\n\npage\n\nThe index of the page. A value that’s greater than or equal to 0 and less than numberOfPages.\n\nSee Also\nManaging the indicator images\nvar preferredIndicatorImage: UIImage?\nThe preferred image for indicators.\nfunc indicatorImage(forPage: Int) -> UIImage?\nReturns the override image for the indicator of the specified page.\nvar preferredCurrentPageIndicatorImage: UIImage?\nThe preferred image for the current page indicator.\nfunc currentPageIndicatorImage(forPage: Int) -> UIImage?\nReturns the override image for the current page indicator of the specified page.\nfunc setCurrentPageIndicatorImage(UIImage?, forPage: Int)\nRegisters an override image for the current page indicator of the specified page."
  },
  {
    "title": "preferredCurrentPageIndicatorImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipagecontrol/3930363-preferredcurrentpageindicatorima",
    "html": "Discussion\n\nWhen nil, the page control uses preferredIndicatorImage as its current page indicator.\n\nThe default value of this property is nil.\n\nSee Also\nManaging the indicator images\nvar preferredIndicatorImage: UIImage?\nThe preferred image for indicators.\nfunc indicatorImage(forPage: Int) -> UIImage?\nReturns the override image for the indicator of the specified page.\nfunc setIndicatorImage(UIImage?, forPage: Int)\nRegisters an override image for the indicator of the specified page.\nfunc currentPageIndicatorImage(forPage: Int) -> UIImage?\nReturns the override image for the current page indicator of the specified page.\nfunc setCurrentPageIndicatorImage(UIImage?, forPage: Int)\nRegisters an override image for the current page indicator of the specified page."
  },
  {
    "title": "backgroundStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipagecontrol/3577676-backgroundstyle",
    "html": "See Also\nCustomizing the background style\nenum UIPageControl.BackgroundStyle\nConstants that define the background styles of the page control."
  },
  {
    "title": "destinationURL | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uieventattribution/3727312-destinationurl",
    "html": "Discussion\n\nThis property contains the URL associated with the event; for example, the destinationURL for an advertisement contains the external link opened when the user taps the ad.\n\nThis field corresponds to the attributed_on_site field of a web attribution.\n\nSee Also\nSetting attribution details\nvar purchaser: String\nThe entity that purchased the ad or content.\nvar reportEndpoint: URL?\nThe URL that receives attribution data.\nvar sourceDescription: String\nA string describing the source tapped to launch the external link.\nvar sourceIdentifier: UInt8\nA number that identifies the source of the attribution."
  },
  {
    "title": "layout | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewinvalidating/3853142-layout",
    "html": "Discussion\n\nUse this invalidation type to call setNeedsLayout() when a change in property value should cause an update to the layout of the containing view’s subviews.\n\nSee Also\nSpecifying invalidation types\nstatic var configuration: UIView.Invalidations.Configuration\nA change that invalidates a view’s configuration.\nAvailable when Self is UIView.Invalidations.Configuration.\nstatic var constraints: UIView.Invalidations.Constraints\nA change that invalidates a view’s constraints.\nAvailable when Self is UIView.Invalidations.Constraints.\nstatic var display: UIView.Invalidations.Display\nA change that requires the system to redraw a view’s content.\nAvailable when Self is UIView.Invalidations.Display.\nstatic var intrinsicContentSize: UIView.Invalidations.IntrinsicContentSize\nA change that invalidates a view’s intrinsic size.\nAvailable when Self is UIView.Invalidations.IntrinsicContentSize."
  },
  {
    "title": "finishAnimation(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewanimating/1649796-finishanimation",
    "html": "Required\n\nParameters\nfinalPosition\n\nThe final position for any view properties. Specify UIViewAnimatingPosition.current to leave the view properties unchanged from their current values.\n\nDiscussion\n\nAfter putting the animator object into the UIViewAnimatingState.stopped state, call this method to perform any final cleanup tasks. It is a programmer error to call this method at any time except after a call to the stopAnimation(_:) method where you pass false for the withoutFinishing parameter. Calling this method is not required, but is recommended in cases where you want to ensure that completion blocks or other final tasks are performed.\n\nImplementations of this method are responsible for setting the state of the animator object to UIViewAnimatingState.inactive and for performing any final cleanup tasks, such as executing completion blocks.\n\nSee Also\nStarting and stopping the animations\nfunc startAnimation()\nStarts the animation from its current position.\n\nRequired\n\nfunc startAnimation(afterDelay: TimeInterval)\nStarts the animation after the specified delay.\n\nRequired\n\nfunc pauseAnimation()\nPauses a running animation at its current position.\n\nRequired\n\nfunc stopAnimation(Bool)\nStops the animations at their current positions.\n\nRequired"
  },
  {
    "title": "stopAnimation(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewanimating/1649750-stopanimation",
    "html": "Required\n\nParameters\nwithoutFinishing\n\nA Boolean indicating whether any final actions should be performed. Specify true to clear any animations and move the animator directly to the UIViewAnimatingState.inactive state without performing any final actions. Specify false to put the animator into the UIViewAnimatingState.stopped state.\n\nDiscussion\n\nCall this method when you want to end the animations at their current position. This method removes all of the associated animations from the execution stack and sets the values of any animatable properties to their current values. This method also updates the state of the animator object based on the value of the withoutFinishing parameter.\n\nIf you specify false for the withoutFinishing parameter, you can subsequently call the finishAnimation(at:) method to perform the animator’s final actions. For example, a UIViewPropertyAnimator object executes its completion blocks when you call this method. You do not have to call the finishAnimation(at:) method right away, or at all, and you can perform other animations before calling that method.\n\nSee Also\nStarting and stopping the animations\nfunc startAnimation()\nStarts the animation from its current position.\n\nRequired\n\nfunc startAnimation(afterDelay: TimeInterval)\nStarts the animation after the specified delay.\n\nRequired\n\nfunc pauseAnimation()\nPauses a running animation at its current position.\n\nRequired\n\nfunc finishAnimation(at: UIViewAnimatingPosition)\nFinishes the animations and returns the animator to the inactive state.\n\nRequired"
  },
  {
    "title": "isRunning | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewanimating/1649785-isrunning",
    "html": "Required\n\nDiscussion\n\nThis property reflects whether the animation is running either in the forward or reverse direction. The value of this property is true only after a call to the startAnimation() method. The value is false when the animator is paused or stopped.\n\nSee Also\nGetting the animator’s state\nvar fractionComplete: CGFloat\nThe completion percentage of the animation.\n\nRequired\n\nvar isReversed: Bool\nA Boolean value indicating whether the animation is running in the reverse direction.\n\nRequired\n\nvar state: UIViewAnimatingState\nThe current state of the animation.\n\nRequired"
  },
  {
    "title": "UIViewAnimatingPosition | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewanimatingposition",
    "html": "Topics\nConstants\ncase end\nThe end point of the animation. Use this constant when you want the final values for any animatable properties—that is, you want to refer to the values you specified in your animation blocks.\ncase start\nThe beginning of the animation. Use this constant when you want the starting values for any animatable properties—that is, the values of the properties before you applied any animations.\ncase current\nThe current position. Use this constant when you want the most recent value set by an animator object.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "setAnimationDuration(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/1622617-setanimationduration",
    "html": "Parameters\nduration\n\nThe period over which the animation occurs, measured in seconds.\n\nDiscussion\n\nIf you specify your animations using begin/commit set of methods, you use this method to specify the duration of the animations. This method does nothing if called from outside of an animation block. It must be called between calls to the beginAnimations(_:context:) and commitAnimations() methods. And you must call this method prior to changing the animatable properties of your views. The default value is 0.2 seconds.\n\nUse of this method is discouraged in iOS 4.0 and later. Instead, you should use any of the block-based animation methods to specify your animations and their duration.\n\nSee Also\nDeprecated methods\nclass func beginAnimations(String?, context: UnsafeMutableRawPointer?)\nMarks the beginning of a begin/commit animation block.\nDeprecated\nclass func commitAnimations()\nMarks the end of a begin/commit animation block and schedules the animations for execution.\nDeprecated\nclass func setAnimationStart(Date)\nSets the start time for the current animation block.\nDeprecated\nclass func setAnimationsEnabled(Bool)\nSets whether animations are enabled.\nclass func setAnimationDelegate(Any?)\nSets the delegate for any animation messages.\nDeprecated\nclass func setAnimationWillStart(Selector?)\nSets the message to send to the animation delegate when the animation starts.\nDeprecated\nclass func setAnimationDidStop(Selector?)\nSets the message to send to the animation delegate when animation stops.\nDeprecated\nclass func setAnimationDelay(TimeInterval)\nSets the amount of time (in seconds) to wait before animating property changes within an animation block.\nDeprecated\nclass func setAnimationCurve(UIView.AnimationCurve)\nSets the curve to use when animating property changes within an animation block.\nDeprecated\nclass func setAnimationRepeatCount(Float)\nSets the number of times animations within an animation block repeat.\nDeprecated\nclass func setAnimationRepeatAutoreverses(Bool)\nSets whether the animations within an animation block automatically reverse themselves.\nDeprecated\nclass func setAnimationBeginsFromCurrentState(Bool)\nSets whether the animation should begin playing from the current state.\nDeprecated\nclass func setAnimationTransition(UIView.AnimationTransition, for: UIView, cache: Bool)\nSets a transition to apply to a view during an animation block.\nDeprecated\nclass var areAnimationsEnabled: Bool\nReturns a Boolean value indicating whether animations are enabled.\nfunc forBaselineLayout() -> UIView\nReturns a view used to satisfy baseline constraints.\nDeprecated"
  },
  {
    "title": "tokens(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchtextfield/3175444-tokens",
    "html": "Parameters\ntextRange\n\nThe range specifying a subset of the tokens.\n\nReturn Value\n\nThe tokens contained within the provided range.\n\nDiscussion\n\nUse this method to find out which tokens are included in the user’s current selection. You can provide a range that spans a mixture of tokens and text.\n\nSee Also\nCustomizing token behavior\nvar tokenBackgroundColor: UIColor!\nThe background color for all tokens in the search text field.\nfunc positionOfToken(at: Int) -> UITextPosition\nConverts a token index into a text position."
  },
  {
    "title": "areAnimationsEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/1622571-areanimationsenabled",
    "html": "Return Value\n\ntrue if animations are enabled; otherwise, false.\n\nDiscussion\n\nThe value of this property is true if animations are enabled; otherwise, it is false.\n\nSee Also\nDeprecated methods\nclass func beginAnimations(String?, context: UnsafeMutableRawPointer?)\nMarks the beginning of a begin/commit animation block.\nDeprecated\nclass func commitAnimations()\nMarks the end of a begin/commit animation block and schedules the animations for execution.\nDeprecated\nclass func setAnimationStart(Date)\nSets the start time for the current animation block.\nDeprecated\nclass func setAnimationsEnabled(Bool)\nSets whether animations are enabled.\nclass func setAnimationDelegate(Any?)\nSets the delegate for any animation messages.\nDeprecated\nclass func setAnimationWillStart(Selector?)\nSets the message to send to the animation delegate when the animation starts.\nDeprecated\nclass func setAnimationDidStop(Selector?)\nSets the message to send to the animation delegate when animation stops.\nDeprecated\nclass func setAnimationDuration(TimeInterval)\nSets the duration (measured in seconds) of the animations in an animation block.\nDeprecated\nclass func setAnimationDelay(TimeInterval)\nSets the amount of time (in seconds) to wait before animating property changes within an animation block.\nDeprecated\nclass func setAnimationCurve(UIView.AnimationCurve)\nSets the curve to use when animating property changes within an animation block.\nDeprecated\nclass func setAnimationRepeatCount(Float)\nSets the number of times animations within an animation block repeat.\nDeprecated\nclass func setAnimationRepeatAutoreverses(Bool)\nSets whether the animations within an animation block automatically reverse themselves.\nDeprecated\nclass func setAnimationBeginsFromCurrentState(Bool)\nSets whether the animation should begin playing from the current state.\nDeprecated\nclass func setAnimationTransition(UIView.AnimationTransition, for: UIView, cache: Bool)\nSets a transition to apply to a view during an animation block.\nDeprecated\nfunc forBaselineLayout() -> UIView\nReturns a view used to satisfy baseline constraints.\nDeprecated\nRelated Documentation\nclass func performWithoutAnimation(() -> Void)\nDisables a view transition animation."
  },
  {
    "title": "right | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uirectedge/1624496-right",
    "html": "See Also\nEdges\nstatic var top: UIRectEdge\nThe top edge of the rectangle.\nstatic var left: UIRectEdge\nThe left edge of the rectangle.\nstatic var bottom: UIRectEdge\nThe bottom edge of the rectangle.\nstatic var all: UIRectEdge\nAll edges of the rectangle."
  },
  {
    "title": "bottom | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uirectedge/1624487-bottom",
    "html": "See Also\nEdges\nstatic var top: UIRectEdge\nThe top edge of the rectangle.\nstatic var left: UIRectEdge\nThe left edge of the rectangle.\nstatic var right: UIRectEdge\nThe right edge of the rectangle.\nstatic var all: UIRectEdge\nAll edges of the rectangle."
  },
  {
    "title": "left | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uirectedge/1624495-left",
    "html": "See Also\nEdges\nstatic var top: UIRectEdge\nThe top edge of the rectangle.\nstatic var bottom: UIRectEdge\nThe bottom edge of the rectangle.\nstatic var right: UIRectEdge\nThe right edge of the rectangle.\nstatic var all: UIRectEdge\nAll edges of the rectangle."
  },
  {
    "title": "showsSelectionIndicator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipickerview/1614373-showsselectionindicator",
    "html": "Deprecated\n\nIn iOS 7 and later, you can’t customize the picker view’s selection indicator. The selection indicator is always shown, so setting this property to false has no effect.\n\nDiscussion\n\nIf the value of the property is true, the picker view shows a clear overlay across the current row. The default value of this property is false."
  },
  {
    "title": "setOn(_:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiswitch/1623686-seton",
    "html": "Parameters\non\n\ntrue if the switch should be turned to the on position; false if it should be turned to the off position. If the switch is already in the designated position, nothing happens.\n\nanimated\n\ntrue to animate the “flipping” of the switch; otherwise false.\n\nDiscussion\n\nSetting the switch to either position doesn’t result in an action message being sent.\n\nSee Also\nSetting the on/off state\nvar isOn: Bool\nA Boolean value that determines whether the switch is in the on or off position."
  },
  {
    "title": "selectedRow(inComponent:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipickerview/1614369-selectedrow",
    "html": "Parameters\ncomponent\n\nA zero-indexed number identifying a component of the picker view.\n\nReturn Value\n\nA zero-indexed number identifying the selected row, or -1 if no row is selected.\n\nSee Also\nSelecting rows in the view picker\nfunc selectRow(Int, inComponent: Int, animated: Bool)\nSelects a row in a specified component of the picker view."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiswitch/1623685-init",
    "html": "Parameters\ncoder\n\nAn object containing data used to initialize the switch control.\n\nSee Also\nCreating a switch\ninit(frame: CGRect)\nCreates a switch control."
  },
  {
    "title": "isOn | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiswitch/1623690-ison",
    "html": "Discussion\n\nThis property allows you to retrieve and set (without animation) a value determining whether the UISwitch object is on or off.\n\nSee Also\nSetting the on/off state\nfunc setOn(Bool, animated: Bool)\nSets the state of the switch to the on or off position, optionally animating the transition."
  },
  {
    "title": "view(forRow:forComponent:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipickerview/1614372-view",
    "html": "Parameters\nrow\n\nThe zero-indexed number of a row of the picker view.\n\ncomponent\n\nThe zero-indexed number of a component of the picker view.\n\nReturn Value\n\nThe view provided by the delegate in the pickerView(_:viewForRow:forComponent:reusing:) method. Returns nil if the specified row of the component is not visible or if the delegate does not implement pickerView:viewForRow:forComponent:reusingView:."
  },
  {
    "title": "style | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiswitch/3621875-style",
    "html": "Discussion\n\nThis property returns the resolved style based on the user interface idiom, and never returns UISwitch.Style.automatic.\n\nSee Also\nSetting the display style\nDisplaying a checkbox in your Mac app built with Mac Catalyst\nPresent a switch control as a Mac-style checkbox when your app runs in the Mac user interface idiom.\nvar preferredStyle: UISwitch.Style\nThe preferred display style for the switch.\nenum UISwitch.Style\nStyles that determine the appearance of the switch.\nvar title: String?\nThe title displayed next to a checkbox-style switch."
  },
  {
    "title": "selectRow(_:inComponent:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipickerview/1614382-selectrow",
    "html": "Parameters\nrow\n\nA zero-indexed number identifying a row of component.\n\ncomponent\n\nA zero-indexed number identifying a component of the picker view.\n\nanimated\n\ntrue to animate the selection by spinning the wheel (component) to the new value; if you specify false, the new selection is shown immediately.\n\nSee Also\nSelecting rows in the view picker\nfunc selectedRow(inComponent: Int) -> Int\nReturns the index of the selected row in a given component."
  },
  {
    "title": "reloadAllComponents() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipickerview/1614380-reloadallcomponents",
    "html": "Discussion\n\nCalling this method causes the picker view to query the delegate for new data for all components.\n\nSee Also\nReloading the picker view\nfunc reloadComponent(Int)\nReloads a particular component of the picker view."
  },
  {
    "title": "configuration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewinvalidating/3853137-configuration",
    "html": "Discussion\n\nUse this invalidation type to call setNeedsUpdateConfiguration() when a change in property value should cause the containing view to update the configuration.\n\nNote\n\nYou only use this invalidation type on UIView subclasses that support a configuration pattern, using setNeedsUpdateConfiguration() and updateConfiguration() pattern. For example, use this type on UIButton, UICollectionViewCell, UITableViewCell, or UITableViewHeaderFooterView. This type has no effect on UIView subclasses that don’t use a configuration pattern.\n\nSee Also\nSpecifying invalidation types\nstatic var constraints: UIView.Invalidations.Constraints\nA change that invalidates a view’s constraints.\nAvailable when Self is UIView.Invalidations.Constraints.\nstatic var display: UIView.Invalidations.Display\nA change that requires the system to redraw a view’s content.\nAvailable when Self is UIView.Invalidations.Display.\nstatic var intrinsicContentSize: UIView.Invalidations.IntrinsicContentSize\nA change that invalidates a view’s intrinsic size.\nAvailable when Self is UIView.Invalidations.IntrinsicContentSize.\nstatic var layout: UIView.Invalidations.Layout\nA change that invalidates the layout of the containing view’s subviews.\nAvailable when Self is UIView.Invalidations.Layout."
  },
  {
    "title": "display | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewinvalidating/3853139-display",
    "html": "Discussion\n\nUse this invalidation type to call setNeedsDisplay() when a change in property value should cause the system to redraw the containing view’s content.\n\nSee Also\nSpecifying invalidation types\nstatic var configuration: UIView.Invalidations.Configuration\nA change that invalidates a view’s configuration.\nAvailable when Self is UIView.Invalidations.Configuration.\nstatic var constraints: UIView.Invalidations.Constraints\nA change that invalidates a view’s constraints.\nAvailable when Self is UIView.Invalidations.Constraints.\nstatic var intrinsicContentSize: UIView.Invalidations.IntrinsicContentSize\nA change that invalidates a view’s intrinsic size.\nAvailable when Self is UIView.Invalidations.IntrinsicContentSize.\nstatic var layout: UIView.Invalidations.Layout\nA change that invalidates the layout of the containing view’s subviews.\nAvailable when Self is UIView.Invalidations.Layout."
  },
  {
    "title": "progressViewStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprogressview/1619845-progressviewstyle",
    "html": "Discussion\n\nThe value of this property is a constant that specifies the style of the progress view. The default style is UIProgressView.Style.default. For more on these constants, see UIProgressView.Style.\n\nSee Also\nConfiguring the progress bar\nvar progressTintColor: UIColor?\nThe color shown for the portion of the progress bar that’s filled.\nvar progressImage: UIImage?\nAn image to use for the portion of the progress bar that’s filled.\nvar trackTintColor: UIColor?\nThe color shown for the portion of the progress bar that isn’t filled.\nvar trackImage: UIImage?\nAn image to use for the portion of the track that isn’t filled."
  },
  {
    "title": "UIView.Invalidations.Configuration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/invalidations/configuration",
    "html": "Overview\n\nUse configuration to create an instance of this type.\n\nTopics\nCreating the invalidation structure\nstatic var configuration: UIView.Invalidations.Configuration\nA change that invalidates a view’s configuration.\ninit()\nCreates a configuration invalidation structure.\nInvalidating the view\nfunc invalidate(view: UIView)\nIndicates to the system that an aspect of a view is invalid and triggers the necessary update.\nRelationships\nConforms To\nUIViewInvalidating\nSee Also\nInvalidation types\nstruct UIView.Invalidations.Constraints\nA change that invalidates a view’s constraints.\nstruct UIView.Invalidations.Display\nA change that requires the system to redraw a view’s content.\nstruct UIView.Invalidations.IntrinsicContentSize\nA change that invalidates a view’s intrinsic size.\nstruct UIView.Invalidations.Layout\nA change that invalidates the layout of the containing view’s subviews.\nstruct UIView.Invalidations.Tuple\nA change that invalidates a combination of factors covered by the other invalidation types."
  },
  {
    "title": "standardAppearance | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitoolbar/3198081-standardappearance",
    "html": "Discussion\n\nThe default value of this property is an appearance object containing the system’s default appearance settings.\n\nSee Also\nCustomizing appearance\nvar compactAppearance: UIToolbarAppearance?\nThe appearance settings to use for a compact-height toolbar.\nvar scrollEdgeAppearance: UIToolbarAppearance?\nThe appearance settings for a standard-height toolbar when the edge of scrollable content aligns with the edge of the toolbar.\nvar compactScrollEdgeAppearance: UIToolbarAppearance?\nThe appearance settings for a compact-height toolbar when the edge of any scrollable content aligns with the edge of a compact-height toolbar.\nvar isTranslucent: Bool\nA Boolean value that indicates whether the toolbar is translucent.\nLegacy customizations\nCustomize appearance information directly on the toolbar object."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibaritem/1616411-init",
    "html": "Return Value\n\nAn initialized bar item or nil if the item could not be initialized.\n\nSee Also\nCreating a bar item\ninit?(coder: NSCoder)\nCreates a bar item from data in an unarchiver."
  },
  {
    "title": "encode(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiedgeinsets/3081636-encode",
    "html": "Relationships\nFrom Protocol\nEncodable\nSee Also\nEncoding and decoding\ninit(from: Decoder)\nCreates an edge insets structure by decoding from the specified decoder."
  },
  {
    "title": "UISearchBarDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchbardelegate",
    "html": "Overview\n\nA UISearchBar object provides the user interface for a search field on a bar, but it’s the application’s responsibility to implement the actions when buttons are tapped. At a minimum, the delegate needs to perform the actual search when text is entered in the text field.\n\nTopics\nManaging the search text\nfunc searchBar(UISearchBar, textDidChange: String)\nTells the delegate that the user changed the search text.\nfunc searchBar(UISearchBar, shouldChangeTextIn: NSRange, replacementText: String) -> Bool\nAsk the delegate if text in a specified range should be replaced with given text.\nfunc searchBarShouldBeginEditing(UISearchBar) -> Bool\nAsks the delegate if editing should begin in the specified search bar.\nfunc searchBarTextDidBeginEditing(UISearchBar)\nTells the delegate when the user begins editing the search text.\nfunc searchBarShouldEndEditing(UISearchBar) -> Bool\nAsks the delegate if editing should stop in the specified search bar.\nfunc searchBarTextDidEndEditing(UISearchBar)\nTells the delegate that the user finished editing the search text.\nResponding to clicks in search controls\nfunc searchBarBookmarkButtonClicked(UISearchBar)\nTells the delegate that the bookmark button was tapped.\nfunc searchBarCancelButtonClicked(UISearchBar)\nTells the delegate that the cancel button was tapped.\nfunc searchBarSearchButtonClicked(UISearchBar)\nTells the delegate that the search button was tapped.\nfunc searchBarResultsListButtonClicked(UISearchBar)\nTells the delegate that the search results list button was tapped.\nResponding to scope button changes\nfunc searchBar(UISearchBar, selectedScopeButtonIndexDidChange: Int)\nTells the delegate that the scope button selection changed.\nRelationships\nInherits From\nUIBarPositioningDelegate\nSee Also\nHandling search bar interactions\nvar delegate: UISearchBarDelegate?\nThe search bar’s delegate object."
  },
  {
    "title": "bottom | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiedgeinsets/1624528-bottom",
    "html": "See Also\nGetting the edge values\nvar left: CGFloat\nThe left edge inset value.\nvar right: CGFloat\nThe right edge inset value.\nvar top: CGFloat\nThe top edge inset value."
  },
  {
    "title": "right | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiedgeinsets/1624490-right",
    "html": "See Also\nGetting the edge values\nvar bottom: CGFloat\nThe bottom edge inset value.\nvar left: CGFloat\nThe left edge inset value.\nvar top: CGFloat\nThe top edge inset value."
  },
  {
    "title": "top | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiedgeinsets/1624516-top",
    "html": "See Also\nGetting the edge values\nvar bottom: CGFloat\nThe bottom edge inset value.\nvar left: CGFloat\nThe left edge inset value.\nvar right: CGFloat\nThe right edge inset value."
  },
  {
    "title": "UIEdgeInsetsEqualToEdgeInsets(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/3003559-uiedgeinsetsequaltoedgeinsets",
    "html": "See Also\nComparing edge insets\nstatic func == (UIEdgeInsets, UIEdgeInsets) -> Bool\nAn operator for checking whether two edge insets are equal."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiedgeinsets/2983402",
    "html": "See Also\nComparing edge insets\nfunc UIEdgeInsetsEqualToEdgeInsets(UIEdgeInsets, UIEdgeInsets) -> Bool\nReturns a Boolean value indicating whether the two edge insets are the same.\nDeprecated"
  },
  {
    "title": "init(top:leading:bottom:trailing:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsdirectionaledgeinsets/2865790-init",
    "html": "Parameters\ntop\n\nThe inset on the top of an object.\n\nleading\n\nThe inset on the leading edge of an object. In a left-to-right system, the left edge is the leading edge. In a right-to-left system, the right edge is the leading edge.\n\nbottom\n\nThe inset on the bottom of an object.\n\ntrailing\n\nThe inset on the trailing edge of an object. In a left-to-right system, the right edge is the trailing edge. In a right-to-left system, the left edge is the trailing edge.\n\nReturn Value\n\nAn initialized inset structure.\n\nSee Also\nCreating directional edge insets\ninit()\nCreates a directional edge insets structure that contains default values.\ninit(EdgeInsets)\nCreates a directional edge insets structure from a SwiftUI edge insets structure."
  },
  {
    "title": "init(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsdirectionaledgeinsets/3081635-init",
    "html": "Relationships\nFrom Protocol\nDecodable\nSee Also\nEncoding and decoding\nfunc encode(to: Encoder)\nEncodes the directional edge insets structure into the specified encoder."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsdirectionaledgeinsets/2866025-init",
    "html": "Return Value\n\nAn initialized inset structure.\n\nDiscussion\n\nThis method sets all inset margins to 0.0.\n\nSee Also\nCreating directional edge insets\ninit(top: CGFloat, leading: CGFloat, bottom: CGFloat, trailing: CGFloat)\nCreates a directional edge insets structure that contains the specified values.\ninit(EdgeInsets)\nCreates a directional edge insets structure from a SwiftUI edge insets structure."
  },
  {
    "title": "NSRectAlignment.leading | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsrectalignment/leading",
    "html": "See Also\nAlignments\ncase none\nHas no specified alignment.\ncase top\nAligns to the top edge.\ncase topLeading\nAligns to the top and leading edges.\ncase bottomLeading\nAligns to the bottom and leading edges.\ncase bottom\nAligns to the bottom edge.\ncase bottomTrailing\nAligns to the bottom and trailing edges.\ncase trailing\nAligns to the trailing edge.\ncase topTrailing\nAligns to the top and trailing edges."
  },
  {
    "title": "top | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsdirectionaledgeinsets/2865909-top",
    "html": "See Also\nGetting the edge values\nvar bottom: CGFloat\nThe bottom edge inset value.\nvar leading: CGFloat\nThe leading edge inset value.\nvar trailing: CGFloat\nThe trailing edge inset value."
  },
  {
    "title": "trailing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsdirectionaledgeinsets/2865833-trailing",
    "html": "See Also\nGetting the edge values\nvar bottom: CGFloat\nThe bottom edge inset value.\nvar leading: CGFloat\nThe leading edge inset value.\nvar top: CGFloat\nThe top edge inset value."
  },
  {
    "title": "NSRectAlignment.none | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsrectalignment/none",
    "html": "See Also\nAlignments\ncase top\nAligns to the top edge.\ncase topLeading\nAligns to the top and leading edges.\ncase leading\nAligns to the leading edge.\ncase bottomLeading\nAligns to the bottom and leading edges.\ncase bottom\nAligns to the bottom edge.\ncase bottomTrailing\nAligns to the bottom and trailing edges.\ncase trailing\nAligns to the trailing edge.\ncase topTrailing\nAligns to the top and trailing edges."
  },
  {
    "title": "NSRectAlignment.top | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsrectalignment/top",
    "html": "See Also\nAlignments\ncase none\nHas no specified alignment.\ncase topLeading\nAligns to the top and leading edges.\ncase leading\nAligns to the leading edge.\ncase bottomLeading\nAligns to the bottom and leading edges.\ncase bottom\nAligns to the bottom edge.\ncase bottomTrailing\nAligns to the bottom and trailing edges.\ncase trailing\nAligns to the trailing edge.\ncase topTrailing\nAligns to the top and trailing edges."
  },
  {
    "title": "NSRectAlignment.bottomLeading | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsrectalignment/bottomleading",
    "html": "See Also\nAlignments\ncase none\nHas no specified alignment.\ncase top\nAligns to the top edge.\ncase topLeading\nAligns to the top and leading edges.\ncase leading\nAligns to the leading edge.\ncase bottom\nAligns to the bottom edge.\ncase bottomTrailing\nAligns to the bottom and trailing edges.\ncase trailing\nAligns to the trailing edge.\ncase topTrailing\nAligns to the top and trailing edges."
  },
  {
    "title": "reportEndpoint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uieventattribution/3727315-reportendpoint",
    "html": "Discussion\n\nThis read-only property contains the URL that recieves the event attribution data. Your app sets this value by reading it from its Info.plist using the NSAdvertisingAttributionReportEndpoint key.\n\nSpecify the desired value in your Xcode project’s Info.plist file. Your app uses the value you set in all PCM attribution requests. You can’t change the value at runtime.\n\nThis field corresponds to the source_site field of a web attribution.\n\nSee Also\nSetting attribution details\nvar destinationURL: URL\nThe destination URL to attribute.\nvar purchaser: String\nThe entity that purchased the ad or content.\nvar sourceDescription: String\nA string describing the source tapped to launch the external link.\nvar sourceIdentifier: UInt8\nA number that identifies the source of the attribution."
  },
  {
    "title": "NSRectAlignment.bottomTrailing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsrectalignment/bottomtrailing",
    "html": "See Also\nAlignments\ncase none\nHas no specified alignment.\ncase top\nAligns to the top edge.\ncase topLeading\nAligns to the top and leading edges.\ncase leading\nAligns to the leading edge.\ncase bottomLeading\nAligns to the bottom and leading edges.\ncase bottom\nAligns to the bottom edge.\ncase trailing\nAligns to the trailing edge.\ncase topTrailing\nAligns to the top and trailing edges."
  },
  {
    "title": "NSRectAlignment.trailing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsrectalignment/trailing",
    "html": "See Also\nAlignments\ncase none\nHas no specified alignment.\ncase top\nAligns to the top edge.\ncase topLeading\nAligns to the top and leading edges.\ncase leading\nAligns to the leading edge.\ncase bottomLeading\nAligns to the bottom and leading edges.\ncase bottom\nAligns to the bottom edge.\ncase bottomTrailing\nAligns to the bottom and trailing edges.\ncase topTrailing\nAligns to the top and trailing edges."
  },
  {
    "title": "purchaser | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uieventattribution/3727314-purchaser",
    "html": "Discussion\n\nThis property contains the name of the party that purchased the ad or other content. For example, for an in-app ad, this would contain the name of the company or individual that purchased the advertisement. The system may truncate this field if it’s longer than 100 characters.\n\nSee Also\nSetting attribution details\nvar destinationURL: URL\nThe destination URL to attribute.\nvar reportEndpoint: URL?\nThe URL that receives attribution data.\nvar sourceDescription: String\nA string describing the source tapped to launch the external link.\nvar sourceIdentifier: UInt8\nA number that identifies the source of the attribution."
  },
  {
    "title": "sourceDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uieventattribution/3727316-sourcedescription",
    "html": "Discussion\n\nThis property contains a description of the attribution source. For example, for an ad, sourceDescription describes the content of the advertisement that the user tapped.\n\nThe system may truncate this field if it’s longer than 100 characters.\n\nSee Also\nSetting attribution details\nvar destinationURL: URL\nThe destination URL to attribute.\nvar purchaser: String\nThe entity that purchased the ad or content.\nvar reportEndpoint: URL?\nThe URL that receives attribution data.\nvar sourceIdentifier: UInt8\nA number that identifies the source of the attribution."
  },
  {
    "title": "sourceIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uieventattribution/3727317-sourceidentifier",
    "html": "Discussion\n\nThis property contains an integer, between 0 and 255, that identifies the source of the attribution. For example, for an ad, sourceIdentifier might contain a campaign identifier so the advertiser can measure the effectiveness of different advertising campaigns.\n\nThis field corresponds to the source_id field of a web attribution.\n\nSee Also\nSetting attribution details\nvar destinationURL: URL\nThe destination URL to attribute.\nvar purchaser: String\nThe entity that purchased the ad or content.\nvar reportEndpoint: URL?\nThe URL that receives attribution data.\nvar sourceDescription: String\nA string describing the source tapped to launch the external link."
  },
  {
    "title": "barPosition | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibarpositioning/1624857-barposition",
    "html": "Required"
  },
  {
    "title": "largeContentViewerInteraction(_:didEndOn:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilargecontentviewerinteractiondelegate/3183927-largecontentviewerinteraction",
    "html": "Parameters\ninteraction\n\nThe large content viewer interaction associated with the view that the user interacted with.\n\nitem\n\nThe item that the user interacted with in the large content viewer.\n\npoint\n\nThe point where the user’s interaction ended, in the coordinate space of the item’s view.\n\nDiscussion\n\nIf you don’t implement this method and are using standard UIKit controls, the system performs a default action, such as sending a touchUpInside event to the control. If you’re using a custom view with its own tap gesture recognizer, implement this method to handle the interaction. For example, to perform the action that would have occurred if the user tapped on that item.\n\nUIKit only calls this method if the gesture ends successfully, not if it fails or gets canceled.\n\nSee Also\nCustomizing large content viewer interactions\nfunc largeContentViewerInteraction(UILargeContentViewerInteraction, itemAt: CGPoint) -> UILargeContentViewerItem?\nIdentifies the large content viewer item for the specified interaction and location.\nfunc viewController(for: UILargeContentViewerInteraction) -> UIViewController\nSpecifies which view controller should display the large content viewer."
  },
  {
    "title": "viewController(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilargecontentviewerinteractiondelegate/3183929-viewcontroller",
    "html": "Parameters\ninteraction\n\nThe large content viewer that the system is displaying.\n\nReturn Value\n\nA view controller that the system uses to present the large content viewer in.\n\nDiscussion\n\nBy default, UIKit uses a view controller that contains the view you added the interaction to. If this default choice doesn’t work for your app, implement this method to specify a different view controller.\n\nSee Also\nCustomizing large content viewer interactions\nfunc largeContentViewerInteraction(UILargeContentViewerInteraction, didEndOn: UILargeContentViewerItem?, at: CGPoint)\nPerforms an action when the large content viewer gesture ends at the location of the specified item.\nfunc largeContentViewerInteraction(UILargeContentViewerInteraction, itemAt: CGPoint) -> UILargeContentViewerItem?\nIdentifies the large content viewer item for the specified interaction and location."
  },
  {
    "title": "largeContentViewerInteraction(_:itemAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilargecontentviewerinteractiondelegate/3183928-largecontentviewerinteraction",
    "html": "Parameters\ninteraction\n\nThe large content viewer interaction that needs an item.\n\npoint\n\nThe point where the user’s interaction is taking place, in the coordinate space of the view that contains the interaction.\n\nDiscussion\n\nBy default, UIKit finds the item for the interaction by calling point(inside:with:) recursively on your view hierarchy. If you’re not using views, implement this method to identify the item for an interaction at a given point.\n\nSee Also\nCustomizing large content viewer interactions\nfunc largeContentViewerInteraction(UILargeContentViewerInteraction, didEndOn: UILargeContentViewerItem?, at: CGPoint)\nPerforms an action when the large content viewer gesture ends at the location of the specified item.\nfunc viewController(for: UILargeContentViewerInteraction) -> UIViewController\nSpecifies which view controller should display the large content viewer."
  },
  {
    "title": "overrideInheritedCurve | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/animationoptions/1622514-overrideinheritedcurve",
    "html": "Discussion\n\nIf this key is not present, the animation inherits the curve of the in-flight animation, if any."
  },
  {
    "title": "invalidate(view:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewinvalidating/3853141-invalidate",
    "html": "Required\n\nParameters\nview\n\nThe view that requires invalidating.\n\nDiscussion\n\nA type that conforms to UIViewInvalidating implements this method to perform any actions necessary to notify the system that an aspect of your view is invalid. For more info, see UIView.Invalidating.\n\nSee Also\nInvalidating the view\nenum UIView.Invalidations\nChanges that cause an aspect of a view to be invalid and require an update."
  },
  {
    "title": "UIView.Invalidations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/invalidations",
    "html": "Topics\nInvalidation types\nstruct UIView.Invalidations.Configuration\nA change that invalidates a view’s configuration.\nstruct UIView.Invalidations.Constraints\nA change that invalidates a view’s constraints.\nstruct UIView.Invalidations.Display\nA change that requires the system to redraw a view’s content.\nstruct UIView.Invalidations.IntrinsicContentSize\nA change that invalidates a view’s intrinsic size.\nstruct UIView.Invalidations.Layout\nA change that invalidates the layout of the containing view’s subviews.\nstruct UIView.Invalidations.Tuple\nA change that invalidates a combination of factors covered by the other invalidation types.\nSee Also\nInvalidating the view\nfunc invalidate(view: UIView)\nIndicates to the system that an aspect of a view is invalid and triggers the necessary update.\n\nRequired"
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiedgeinsets/1625050-init",
    "html": "Return Value\n\nAn initialized inset structure.\n\nDiscussion\n\nThis initializer sets all inset margins to 0.0.\n\nSee Also\nCreating edge insets\ninit(top: CGFloat, left: CGFloat, bottom: CGFloat, right: CGFloat)\nCreates an edge insets structure with the specified edges."
  },
  {
    "title": "fittingSizeLevel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilayoutpriority/1622248-fittingsizelevel",
    "html": "Discussion\n\nWhen you send a systemLayoutSizeFitting(_:) message to a view, the size fitting most closely to the target size is computed. This priority is quite low. It’s generally not appropriate to make a constraint at exactly this priority. You want to be higher or lower."
  },
  {
    "title": "init(top:left:bottom:right:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiedgeinsets/1625042-init",
    "html": "Parameters\ntop\n\nThe inset on the top of an object.\n\nleft\n\nThe inset on the left of an object.\n\nbottom\n\nThe inset on the bottom of an object.\n\nright\n\nThe inset on the right of an object.\n\nReturn Value\n\nAn initialized inset structure.\n\nDiscussion\n\nAn inset is a margin around a rectangle. Positive values represent margins closer to the center of the rectangle, while negative values represent margins further from the center.\n\nSee Also\nCreating edge insets\ninit()\nInitializes the edge insets structure to default values."
  },
  {
    "title": "replaceTextualPortion(of:with:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchtextfield/3175440-replacetextualportion",
    "html": "Parameters\ntextRange\n\nThe text to remove.\n\ntoken\n\nThe token to add.\n\ntokenIndex\n\nThe location for the added token.\n\nDiscussion\n\nThis method removes any text in the specified range, inserts the provided token at the specified index, and selects the newly inserted token. Prefer using this convenience method over performing each step with other methods. When your app calls replaceTextualPortion(of:with:at:), UIKit commits any marked text before modifying the text, and creates a single undo group.\n\nThis method doesn’t remove any tokens in the textRange, so you don’t have to manually trim the selectedTextRange before you use it in this method.\n\nSee Also\nConverting text into tokens\nvar textualRange: UITextRange\nThe range of the field’s text content."
  },
  {
    "title": "setAnimationDidStop(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/1622539-setanimationdidstop",
    "html": "Parameters\nselector\n\nThe message sent to the animation delegate after animations end. The default value is NULL. The selector should be of the form: - (void)animationDidStop:(NSString *)animationID finished:(NSNumber *)finished context:(void *)context. Your method must take the following arguments:\n\nanimationID\n\nAn NSString containing an optional application-supplied identifier. This is the identifier that is passed to the beginAnimations(_:context:) method. This argument can be nil.\n\nfinished\n\nAn NSNumber object containing a Boolean value. The value is true if the animation ran to completion before it stopped or false if it did not.\n\ncontext\n\nAn optional application-supplied context. This is the context data passed to the beginAnimations(_:context:) method. This argument can be nil.\n\nDiscussion\n\nIf you specify an animation delegate for a begin/commit set of animations, you use this method to specify the selector to call after the animations end. This method does nothing if called from outside of an animation block. It must be called between calls to the beginAnimations(_:context:) and commitAnimations() methods. This selector is set to NULL by default.\n\nNote\n\nYour stop selector is still called even if animations are disabled.\n\nUse of this method is discouraged in iOS 4.0 and later. If you are using the block-based animation methods, you can include your delegate’s end code directly inside your block.\n\nSee Also\nDeprecated methods\nclass func beginAnimations(String?, context: UnsafeMutableRawPointer?)\nMarks the beginning of a begin/commit animation block.\nDeprecated\nclass func commitAnimations()\nMarks the end of a begin/commit animation block and schedules the animations for execution.\nDeprecated\nclass func setAnimationStart(Date)\nSets the start time for the current animation block.\nDeprecated\nclass func setAnimationsEnabled(Bool)\nSets whether animations are enabled.\nclass func setAnimationDelegate(Any?)\nSets the delegate for any animation messages.\nDeprecated\nclass func setAnimationWillStart(Selector?)\nSets the message to send to the animation delegate when the animation starts.\nDeprecated\nclass func setAnimationDuration(TimeInterval)\nSets the duration (measured in seconds) of the animations in an animation block.\nDeprecated\nclass func setAnimationDelay(TimeInterval)\nSets the amount of time (in seconds) to wait before animating property changes within an animation block.\nDeprecated\nclass func setAnimationCurve(UIView.AnimationCurve)\nSets the curve to use when animating property changes within an animation block.\nDeprecated\nclass func setAnimationRepeatCount(Float)\nSets the number of times animations within an animation block repeat.\nDeprecated\nclass func setAnimationRepeatAutoreverses(Bool)\nSets whether the animations within an animation block automatically reverse themselves.\nDeprecated\nclass func setAnimationBeginsFromCurrentState(Bool)\nSets whether the animation should begin playing from the current state.\nDeprecated\nclass func setAnimationTransition(UIView.AnimationTransition, for: UIView, cache: Bool)\nSets a transition to apply to a view during an animation block.\nDeprecated\nclass var areAnimationsEnabled: Bool\nReturns a Boolean value indicating whether animations are enabled.\nfunc forBaselineLayout() -> UIView\nReturns a view used to satisfy baseline constraints.\nDeprecated"
  },
  {
    "title": "compactScrollEdgeAppearance | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitoolbar/3752213-compactscrolledgeappearance",
    "html": "Discussion\n\nWhen a navigation controller contains a toolbar and a scroll view, part of the scroll view’s content appears underneath the toolbar. If the edge of the scrolled content reaches the toolbar, UIKit applies the appearance settings in this property.\n\nThis property applies to compact-height toolbars. If the value of this property is nil, UIKit uses the value of the scrollEdgeAppearance property. If no navigation controller manages your toolbar, UIKit ignores this property and uses the value of the compactAppearance property.\n\nSee Also\nCustomizing appearance\nvar standardAppearance: UIToolbarAppearance\nThe appearance settings to use for a standard-height toolbar.\nvar compactAppearance: UIToolbarAppearance?\nThe appearance settings to use for a compact-height toolbar.\nvar scrollEdgeAppearance: UIToolbarAppearance?\nThe appearance settings for a standard-height toolbar when the edge of scrollable content aligns with the edge of the toolbar.\nvar isTranslucent: Bool\nA Boolean value that indicates whether the toolbar is translucent.\nLegacy customizations\nCustomize appearance information directly on the toolbar object."
  },
  {
    "title": "setItems(_:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitoolbar/1617999-setitems",
    "html": "Parameters\nitems\n\nThe items to display on the toolbar.\n\nanimated\n\nA Boolean value if set to true animates the transition to the items; otherwise, does not.\n\nDiscussion\n\nIf animated is true, the changes are dissolved or the reordering is animated—for example, removed items fade out and new items fade in. This method also adjusts the spacing between items.\n\nSee Also\nConfiguring toolbar items\nvar items: [UIBarButtonItem]?\nThe items displayed on the toolbar."
  },
  {
    "title": "landscapePhone | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibarmetrics/1624859-landscapephone",
    "html": "Deprecated\n\nUse UIBarMetrics.compact instead."
  },
  {
    "title": "items | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitoolbar/1617997-items",
    "html": "Discussion\n\nThe items, instances of UIBarButtonItem, that are visible on the toolbar in the order they appear in this array. Any changes to this property aren’t animated. Use the setItems(_:animated:) method to animate changes.\n\nThe default value is nil.\n\nSee Also\nConfiguring toolbar items\nfunc setItems([UIBarButtonItem]?, animated: Bool)\nSets the items on the toolbar by animating the changes."
  },
  {
    "title": "tintColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitoolbar/1617995-tintcolor",
    "html": "Discussion\n\nIn iOS 7 and later, all subclasses of UIView derive their behavior for tintColor from the base class. See the discussion of tintColor at the UIView level for more information."
  },
  {
    "title": "scrollEdgeAppearance | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitoolbar/3752214-scrolledgeappearance",
    "html": "Discussion\n\nWhen a navigation controller contains a toolbar and a scroll view, part of the scroll view’s content appears underneath the toolbar. If the edge of the scrolled content reaches the toolbar, UIKit applies the appearance settings in this property.\n\nThis property applies to standard-height toolbars. If the value of this property is nil, UIKit uses the value of the standardAppearance property, modified to have a transparent background. If no navigation controller manages your toolbar, UIKit ignores this property and uses the tool bar’s standard appearance.\n\nSee Also\nCustomizing appearance\nvar standardAppearance: UIToolbarAppearance\nThe appearance settings to use for a standard-height toolbar.\nvar compactAppearance: UIToolbarAppearance?\nThe appearance settings to use for a compact-height toolbar.\nvar compactScrollEdgeAppearance: UIToolbarAppearance?\nThe appearance settings for a compact-height toolbar when the edge of any scrollable content aligns with the edge of a compact-height toolbar.\nvar isTranslucent: Bool\nA Boolean value that indicates whether the toolbar is translucent.\nLegacy customizations\nCustomize appearance information directly on the toolbar object."
  },
  {
    "title": "Legacy customizations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitoolbar/legacy_customizations",
    "html": "Overview\n\nIn iOS 13 and later, customize your toolbar using the standardAppearance and compactAppearance properties. You may continue to use these legacy accessors to customize your toolbar’s appearance directly, but you must update the appearance for different bar configurations yourself.\n\nTopics\nSetting the bar’s style\nvar barStyle: UIBarStyle\nThe toolbar style that specifies its appearance.\nenum UIBarStyle\nDefines the stylistic appearance of different types of views.\nConfiguring bar button items\nvar tintColor: UIColor!\nThe tint color to apply to the bar button items.\nChanging the background\nvar barTintColor: UIColor?\nThe tint color to apply to the toolbar background.\nfunc backgroundImage(forToolbarPosition: UIBarPosition, barMetrics: UIBarMetrics) -> UIImage?\nReturns the image to use for the background in a given position and with given metrics.\nfunc setBackgroundImage(UIImage?, forToolbarPosition: UIBarPosition, barMetrics: UIBarMetrics)\nSets the image to use for the background in a given position and with given metrics.\nAdding a shadow\nfunc shadowImage(forToolbarPosition: UIBarPosition) -> UIImage?\nReturns the image to use for the toolbar shadow in a given position.\nfunc setShadowImage(UIImage?, forToolbarPosition: UIBarPosition)\nSets the image to use for the toolbar shadow in a given position.\nSee Also\nCustomizing appearance\nvar standardAppearance: UIToolbarAppearance\nThe appearance settings to use for a standard-height toolbar.\nvar compactAppearance: UIToolbarAppearance?\nThe appearance settings to use for a compact-height toolbar.\nvar scrollEdgeAppearance: UIToolbarAppearance?\nThe appearance settings for a standard-height toolbar when the edge of scrollable content aligns with the edge of the toolbar.\nvar compactScrollEdgeAppearance: UIToolbarAppearance?\nThe appearance settings for a compact-height toolbar when the edge of any scrollable content aligns with the edge of a compact-height toolbar.\nvar isTranslucent: Bool\nA Boolean value that indicates whether the toolbar is translucent."
  },
  {
    "title": "compactAppearance | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitoolbar/3198080-compactappearance",
    "html": "Discussion\n\nIf the value of this property is nil, UIKit uses the same settings found in the standardAppearance property.\n\nSee Also\nCustomizing appearance\nvar standardAppearance: UIToolbarAppearance\nThe appearance settings to use for a standard-height toolbar.\nvar scrollEdgeAppearance: UIToolbarAppearance?\nThe appearance settings for a standard-height toolbar when the edge of scrollable content aligns with the edge of the toolbar.\nvar compactScrollEdgeAppearance: UIToolbarAppearance?\nThe appearance settings for a compact-height toolbar when the edge of any scrollable content aligns with the edge of a compact-height toolbar.\nvar isTranslucent: Bool\nA Boolean value that indicates whether the toolbar is translucent.\nLegacy customizations\nCustomize appearance information directly on the toolbar object."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibaritem/1616416-init",
    "html": "See Also\nCreating a bar item\ninit()\nInitializes the bar item to its default state."
  },
  {
    "title": "largeContentSizeImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibaritem/2865917-largecontentsizeimage",
    "html": "Discussion\n\nUse this property to specify a high-resolution version of the item’s image. When displaying an assistive interface for users who are blind or have low vision, UIKit displays this image instead of the standard image. The default value of this property is nil.\n\nIf you don’t specify an image for this property, UIKit scales the image that you specified in the image property.\n\nSee Also\nGetting and setting properties\nvar title: String?\nThe title displayed on the item.\nvar image: UIImage?\nThe image used to represent the item.\nvar landscapeImagePhone: UIImage?\nThe image to use to represent the item in landscape orientation when using the iPhone appearance idiom.\nvar imageInsets: UIEdgeInsets\nThe image inset or outset for each edge.\nvar landscapeImagePhoneInsets: UIEdgeInsets\nThe image inset or outset for each edge of the image in landscape orientation when using the iPhone appearance idiom.\nvar largeContentSizeImageInsets: UIEdgeInsets\nThe insets to apply to the bar item’s large image when displaying the image in an assistive UI.\nvar isEnabled: Bool\nA Boolean value indicating whether the item is enabled.\nvar tag: Int\nThe bar item’s tag, an app-supplied integer that you can use to identify bar item objects in your app."
  },
  {
    "title": "title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibaritem/1616412-title",
    "html": "Discussion\n\nYou should set this property before adding the item to a bar. The default value is nil.\n\nSee Also\nGetting and setting properties\nvar image: UIImage?\nThe image used to represent the item.\nvar landscapeImagePhone: UIImage?\nThe image to use to represent the item in landscape orientation when using the iPhone appearance idiom.\nvar largeContentSizeImage: UIImage?\nThe image to display for users who are blind or have low vision.\nvar imageInsets: UIEdgeInsets\nThe image inset or outset for each edge.\nvar landscapeImagePhoneInsets: UIEdgeInsets\nThe image inset or outset for each edge of the image in landscape orientation when using the iPhone appearance idiom.\nvar largeContentSizeImageInsets: UIEdgeInsets\nThe insets to apply to the bar item’s large image when displaying the image in an assistive UI.\nvar isEnabled: Bool\nA Boolean value indicating whether the item is enabled.\nvar tag: Int\nThe bar item’s tag, an app-supplied integer that you can use to identify bar item objects in your app."
  },
  {
    "title": "image | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibaritem/1616415-image",
    "html": "Discussion\n\nThis image can be used to create other images to represent this item on the bar—for example, a selected and unselected image may be derived from this image. You should set this property before adding the item to a bar. The default value is nil.\n\nSee Also\nGetting and setting properties\nvar title: String?\nThe title displayed on the item.\nvar landscapeImagePhone: UIImage?\nThe image to use to represent the item in landscape orientation when using the iPhone appearance idiom.\nvar largeContentSizeImage: UIImage?\nThe image to display for users who are blind or have low vision.\nvar imageInsets: UIEdgeInsets\nThe image inset or outset for each edge.\nvar landscapeImagePhoneInsets: UIEdgeInsets\nThe image inset or outset for each edge of the image in landscape orientation when using the iPhone appearance idiom.\nvar largeContentSizeImageInsets: UIEdgeInsets\nThe insets to apply to the bar item’s large image when displaying the image in an assistive UI.\nvar isEnabled: Bool\nA Boolean value indicating whether the item is enabled.\nvar tag: Int\nThe bar item’s tag, an app-supplied integer that you can use to identify bar item objects in your app."
  },
  {
    "title": "tag | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibaritem/1616419-tag",
    "html": "Discussion\n\nThe default value is 0.\n\nSee Also\nGetting and setting properties\nvar title: String?\nThe title displayed on the item.\nvar image: UIImage?\nThe image used to represent the item.\nvar landscapeImagePhone: UIImage?\nThe image to use to represent the item in landscape orientation when using the iPhone appearance idiom.\nvar largeContentSizeImage: UIImage?\nThe image to display for users who are blind or have low vision.\nvar imageInsets: UIEdgeInsets\nThe image inset or outset for each edge.\nvar landscapeImagePhoneInsets: UIEdgeInsets\nThe image inset or outset for each edge of the image in landscape orientation when using the iPhone appearance idiom.\nvar largeContentSizeImageInsets: UIEdgeInsets\nThe insets to apply to the bar item’s large image when displaying the image in an assistive UI.\nvar isEnabled: Bool\nA Boolean value indicating whether the item is enabled."
  },
  {
    "title": "bottom | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsdirectionaledgeinsets/2865791-bottom",
    "html": "See Also\nGetting the edge values\nvar leading: CGFloat\nThe leading edge inset value.\nvar top: CGFloat\nThe top edge inset value.\nvar trailing: CGFloat\nThe trailing edge inset value."
  },
  {
    "title": "isEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibaritem/1616418-isenabled",
    "html": "Discussion\n\nIf false, the item is drawn partially dimmed to indicate it’s disabled. The default value is true.\n\nSee Also\nGetting and setting properties\nvar title: String?\nThe title displayed on the item.\nvar image: UIImage?\nThe image used to represent the item.\nvar landscapeImagePhone: UIImage?\nThe image to use to represent the item in landscape orientation when using the iPhone appearance idiom.\nvar largeContentSizeImage: UIImage?\nThe image to display for users who are blind or have low vision.\nvar imageInsets: UIEdgeInsets\nThe image inset or outset for each edge.\nvar landscapeImagePhoneInsets: UIEdgeInsets\nThe image inset or outset for each edge of the image in landscape orientation when using the iPhone appearance idiom.\nvar largeContentSizeImageInsets: UIEdgeInsets\nThe insets to apply to the bar item’s large image when displaying the image in an assistive UI.\nvar tag: Int\nThe bar item’s tag, an app-supplied integer that you can use to identify bar item objects in your app."
  },
  {
    "title": "init(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiedgeinsets/3081637-init",
    "html": "Relationships\nFrom Protocol\nDecodable\nSee Also\nEncoding and decoding\nfunc encode(to: Encoder)\nEncodes the edge insets structure into the specified encoder."
  },
  {
    "title": "setTitleTextAttributes(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibaritem/1616414-settitletextattributes",
    "html": "Parameters\nattributes\n\nA dictionary containing key-value pairs for text attributes.\n\nYou can specify the font, text color, text shadow color, and text shadow offset using the keys listed in NSString UIKit Additions Reference.\n\nstate\n\nThe control state for which you want to set the text attributes for the title.\n\nSee Also\nCustomizing appearance\nfunc titleTextAttributes(for: UIControl.State) -> [NSAttributedString.Key : Any]?\nReturns the title’s text attributes for a given control state."
  },
  {
    "title": "titleTextAttributes(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibaritem/1616422-titletextattributes",
    "html": "Parameters\nstate\n\nThe control state for which you want to know the text attributes for the title.\n\nReturn Value\n\nThe title’s text attributes for state.\n\nDiscussion\n\nThe dictionary may contain key-value pairs for text attributes for the font, text color, text shadow color, and text shadow offset using the keys listed in NSString UIKit Additions Reference.\n\nSee Also\nCustomizing appearance\nfunc setTitleTextAttributes([NSAttributedString.Key : Any]?, for: UIControl.State)\nSets the title’s text attributes for a given control state."
  },
  {
    "title": "UIToolbarDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitoolbardelegate",
    "html": "Overview\n\nThis protocol declares no methods of its own, but conforms to the UIBarPositioningDelegate protocol to support the positioning of a toolbar when it’s moved to a window.\n\nRelationships\nInherits From\nUIBarPositioningDelegate\nSee Also\nManaging toolbar changes\nvar delegate: UIToolbarDelegate?\nThe toolbar’s delegate object."
  },
  {
    "title": "init(frame:primaryAction:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/3600494-init",
    "html": "See Also\nCreating a control\ninit(frame: CGRect)\nCreates a control with the specified frame.\ninit?(coder: NSCoder)\nCreates a control from data in an unarchiver."
  },
  {
    "title": "encode(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsdirectionaledgeinsets/3081634-encode",
    "html": "Relationships\nFrom Protocol\nEncodable\nSee Also\nEncoding and decoding\ninit(from: Decoder)\nCreates a directional edge insets structure by decoding from the specified decoder."
  },
  {
    "title": "NSRectAlignment.bottom | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsrectalignment/bottom",
    "html": "See Also\nAlignments\ncase none\nHas no specified alignment.\ncase top\nAligns to the top edge.\ncase topLeading\nAligns to the top and leading edges.\ncase leading\nAligns to the leading edge.\ncase bottomLeading\nAligns to the bottom and leading edges.\ncase bottomTrailing\nAligns to the bottom and trailing edges.\ncase trailing\nAligns to the trailing edge.\ncase topTrailing\nAligns to the top and trailing edges."
  },
  {
    "title": "init(sourceIdentifier:destinationURL:sourceDescription:purchaser:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uieventattribution/3727313-init",
    "html": "Parameters\nsourceIdentifier\n\nAn 8-bit number that identifies the source of the click for attribution. Value must be between 0 and 255.\n\ndestinationURL\n\nThe destination URL of the attribution.\n\nsourceDescription\n\nA description of the source of the attribution.\n\npurchaser\n\nA string that describes the entity that purchased the attributed content."
  },
  {
    "title": "eventAttribution | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/openurloptionskey/3727307-eventattribution",
    "html": "See Also\nAccessing open-URL options\nstatic let sourceApplication: UIApplication.OpenURLOptionsKey\nA key containing the bundle ID of the app that sent the open-URL request to your app.\nstatic let annotation: UIApplication.OpenURLOptionsKey\nA key containing the information passed to a document interaction controller object’s annotation property.\nstatic let openInPlace: UIApplication.OpenURLOptionsKey\nA key containing a flag that indicates whether a document must be copied before you use it."
  },
  {
    "title": "addAction(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/3600490-addaction",
    "html": "See Also\nManaging the control’s targets and actions\nfunc addTarget(Any?, action: Selector, for: UIControl.Event)\nAssociates a target object and action method with the control.\nfunc removeTarget(Any?, action: Selector?, for: UIControl.Event)\nStops the delivery of events to the specified target object.\nvar allTargets: Set<AnyHashable>\nReturns all target objects associated with the control.\nfunc removeAction(UIAction, for: UIControl.Event)\nfunc removeAction(identifiedBy: UIAction.Identifier, for: UIControl.Event)\nfunc actions(forTarget: Any?, forControlEvent: UIControl.Event) -> [String]?\nReturns the actions performed on a target object when the specified event occurs.\nvar allControlEvents: UIControl.Event\nReturns the events for which the control has associated actions.\nfunc enumerateEventHandlers((UIAction?, (Any?, Selector)?, UIControl.Event, inout Bool) -> Void)"
  },
  {
    "title": "largeContentImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilargecontentvieweritem/3183932-largecontentimage",
    "html": "Required\n\nDiscussion\n\nTo present content in the large content viewer, you can provide either largeContentTitle or largeContentImage, or both.\n\nThis property defaults to an appropriate value for UIKit classes, otherwise nil.\n\nSee Also\nConfiguring display properties\nvar largeContentTitle: String?\nA string that describes an item to display in the large content viewer.\n\nRequired\n\nvar largeContentImageInsets: UIEdgeInsets\nInsets to adjust the position of the item’s image so it appears visually centered in the large content viewer.\n\nRequired\n\nvar scalesLargeContentImage: Bool\nA Boolean value that indicates whether the view scales the item’s image to a larger size or not.\n\nRequired"
  },
  {
    "title": "NSRectAlignment.topTrailing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsrectalignment/toptrailing",
    "html": "See Also\nAlignments\ncase none\nHas no specified alignment.\ncase top\nAligns to the top edge.\ncase topLeading\nAligns to the top and leading edges.\ncase leading\nAligns to the leading edge.\ncase bottomLeading\nAligns to the bottom and leading edges.\ncase bottom\nAligns to the bottom edge.\ncase bottomTrailing\nAligns to the bottom and trailing edges.\ncase trailing\nAligns to the trailing edge."
  },
  {
    "title": "searchTextField(_:didSelect:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchtextfielddelegate/3979297-searchtextfield",
    "html": "Parameters\nsearchTextField\n\nThe search text field displaying search suggestions.\n\nsuggestion\n\nThe suggestion a person selects.\n\nDiscussion\n\nImplement this method to execute any necessary updates when a person chooses a search suggestion."
  },
  {
    "title": "effect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uivisualeffectview/1615072-effect",
    "html": "Discussion\n\nThe effect is either a UIBlurEffect or a UIVibrancyEffect.\n\nSee Also\nRetrieving view information\nvar contentView: UIView\nA view object that can have a visual effect view added to it."
  },
  {
    "title": "largeContentTitle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilargecontentvieweritem/3183934-largecontenttitle",
    "html": "Required\n\nDiscussion\n\nTo present content in the large content viewer, you can provide either largeContentTitle or largeContentImage, or both.\n\nThis property defaults to an appropriate value for UIKit classes, otherwise nil.\n\nSee Also\nConfiguring display properties\nvar largeContentImage: UIImage?\nAn image that represents an item to display in the large content viewer.\n\nRequired\n\nvar largeContentImageInsets: UIEdgeInsets\nInsets to adjust the position of the item’s image so it appears visually centered in the large content viewer.\n\nRequired\n\nvar scalesLargeContentImage: Bool\nA Boolean value that indicates whether the view scales the item’s image to a larger size or not.\n\nRequired"
  },
  {
    "title": "contextMenuInteraction(_:willEndFor:animator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/3601220-contextmenuinteraction",
    "html": "See Also\nManaging context menus\nAdding Context Menus in Your App\nProvide quick access to useful actions by adding context menus to your iOS app.\nvar contextMenuInteraction: UIContextMenuInteraction?\nA context menu interaction for the control.\nvar isContextMenuInteractionEnabled: Bool\nA Boolean value that determines whether the control enables its context menu interaction.\nvar showsMenuAsPrimaryAction: Bool\nA Boolean value that determines whether the context menu interaction is the control’s primary action.\nfunc contextMenuInteraction(UIContextMenuInteraction, configurationForMenuAtLocation: CGPoint) -> UIContextMenuConfiguration?\nfunc contextMenuInteraction(UIContextMenuInteraction, previewForDismissingMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nfunc contextMenuInteraction(UIContextMenuInteraction, previewForHighlightingMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nfunc contextMenuInteraction(UIContextMenuInteraction, willDisplayMenuFor: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nfunc menuAttachmentPoint(for: UIContextMenuConfiguration) -> CGPoint"
  },
  {
    "title": "position(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibarpositioningdelegate/1624872-position",
    "html": "Parameters\nbar\n\nThe bar that was added to the window.\n\nReturn Value\n\nThe position of the bar.\n\nDiscussion\n\nIf your interface has a custom bar with a delegate, that delegate can implement this method and use it to specify the position of the bar that has been added to a window.\n\nDelegates for the UINavigationBar and UISearchBar classes return the value UIBarPosition.top by default. The delegate of the UIToolbar class returns the value UIBarPosition.bottom by default.\n\nSee Also\nRelated Documentation\nprotocol UIBarPositioning\nA set of methods for defining the positioning of bars in iOS apps."
  },
  {
    "title": "tokens | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchtextfield/3175443-tokens",
    "html": "Discussion\n\nUse this property to access existing tokens, or to replace all tokens at once. To convert text in the search field into a token, use replaceTextualPortion(of:with:at:).\n\nSee Also\nAdding and removing tokens\nfunc insertToken(UISearchToken, at: Int)\nAdds a search token at a specific index.\nfunc removeToken(at: Int)\nRemoves a particular search token from the search text field."
  },
  {
    "title": "forBaselineLayout() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/1622439-forbaselinelayout",
    "html": "Deprecated\n\nUse the forFirstBaselineLayout or forLastBaselineLayout property instead.\n\nReturn Value\n\nThe view the constraint system should use to satisfy baseline constraints\n\nDiscussion\n\nWhen you make a constraint to a view’s baseline attribute, Auto Layout uses the baseline of the view returned by this method. If that view does not have a baseline, Auto Layout uses the view’s bottom edge.\n\nOverride this method to return a text-based subview (for example, UILabel or a nonscrolling UITextView). If you override this method, the returned view must be a subview of the receiver. The default implementation returns the receiving view.\n\nSee Also\nDeprecated methods\nclass func beginAnimations(String?, context: UnsafeMutableRawPointer?)\nMarks the beginning of a begin/commit animation block.\nDeprecated\nclass func commitAnimations()\nMarks the end of a begin/commit animation block and schedules the animations for execution.\nDeprecated\nclass func setAnimationStart(Date)\nSets the start time for the current animation block.\nDeprecated\nclass func setAnimationsEnabled(Bool)\nSets whether animations are enabled.\nclass func setAnimationDelegate(Any?)\nSets the delegate for any animation messages.\nDeprecated\nclass func setAnimationWillStart(Selector?)\nSets the message to send to the animation delegate when the animation starts.\nDeprecated\nclass func setAnimationDidStop(Selector?)\nSets the message to send to the animation delegate when animation stops.\nDeprecated\nclass func setAnimationDuration(TimeInterval)\nSets the duration (measured in seconds) of the animations in an animation block.\nDeprecated\nclass func setAnimationDelay(TimeInterval)\nSets the amount of time (in seconds) to wait before animating property changes within an animation block.\nDeprecated\nclass func setAnimationCurve(UIView.AnimationCurve)\nSets the curve to use when animating property changes within an animation block.\nDeprecated\nclass func setAnimationRepeatCount(Float)\nSets the number of times animations within an animation block repeat.\nDeprecated\nclass func setAnimationRepeatAutoreverses(Bool)\nSets whether the animations within an animation block automatically reverse themselves.\nDeprecated\nclass func setAnimationBeginsFromCurrentState(Bool)\nSets whether the animation should begin playing from the current state.\nDeprecated\nclass func setAnimationTransition(UIView.AnimationTransition, for: UIView, cache: Bool)\nSets a transition to apply to a view during an animation block.\nDeprecated\nclass var areAnimationsEnabled: Bool\nReturns a Boolean value indicating whether animations are enabled."
  },
  {
    "title": "insertToken(_:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchtextfield/3175437-inserttoken",
    "html": "Parameters\ntoken\n\nThe search token to be inserted.\n\ntokenIndex\n\nWithin the tokens array, the index at which to insert the token.\n\nDiscussion\n\nIf you’re converting part of the search field’s text into a token, use replaceTextualPortion(of:with:at:).\n\nSee Also\nAdding and removing tokens\nvar tokens: [UISearchToken]\nThe collection of tokens in the search text field.\nfunc removeToken(at: Int)\nRemoves a particular search token from the search text field."
  },
  {
    "title": "positionOfToken(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchtextfield/3175438-positionoftoken",
    "html": "Parameters\ntokenIndex\n\nThe array index of the token.\n\nReturn Value\n\nThe text position of the token.\n\nDiscussion\n\nUse this method to convert a token’s index in the tokens array into the token’s UITextPosition in the overall contents of the text field. Many UITextInput methods for interacting with text take a UITextPosition or UITextRange (constructed from two text positions) as a parameter.\n\nTo select a search token, assign a UITextRange that contains the token’s position to the selectedTextRange property.\n\nSee Also\nCustomizing token behavior\nvar tokenBackgroundColor: UIColor!\nThe background color for all tokens in the search text field.\nfunc tokens(in: UITextRange) -> [UISearchToken]\nReturns the search field’s tokens that are within a given range."
  },
  {
    "title": "setAnimationBeginsFromCurrentState(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/1622446-setanimationbeginsfromcurrentsta",
    "html": "Parameters\nfromCurrentState\n\nSpecify true if animations should begin from their currently visible state; otherwise, false.\n\nDiscussion\n\nIf set to true when an animation is in flight, the current view position of the in-flight animation is used as the starting state for the new animation. If set to false, the in-flight animation ends before the new animation begins using the last view position as the starting state. This method does nothing if an animation is not in flight or invoked outside of an animation block. Use the beginAnimations(_:context:) class method to start and the commitAnimations() class method to end an animation block. The default value is false.\n\nUse of this method is discouraged in iOS 4.0 and later. Instead, you should use theanimate(withDuration:delay:options:animations:completion:) method to specify your animations and the animation options.\n\nSee Also\nDeprecated methods\nclass func beginAnimations(String?, context: UnsafeMutableRawPointer?)\nMarks the beginning of a begin/commit animation block.\nDeprecated\nclass func commitAnimations()\nMarks the end of a begin/commit animation block and schedules the animations for execution.\nDeprecated\nclass func setAnimationStart(Date)\nSets the start time for the current animation block.\nDeprecated\nclass func setAnimationsEnabled(Bool)\nSets whether animations are enabled.\nclass func setAnimationDelegate(Any?)\nSets the delegate for any animation messages.\nDeprecated\nclass func setAnimationWillStart(Selector?)\nSets the message to send to the animation delegate when the animation starts.\nDeprecated\nclass func setAnimationDidStop(Selector?)\nSets the message to send to the animation delegate when animation stops.\nDeprecated\nclass func setAnimationDuration(TimeInterval)\nSets the duration (measured in seconds) of the animations in an animation block.\nDeprecated\nclass func setAnimationDelay(TimeInterval)\nSets the amount of time (in seconds) to wait before animating property changes within an animation block.\nDeprecated\nclass func setAnimationCurve(UIView.AnimationCurve)\nSets the curve to use when animating property changes within an animation block.\nDeprecated\nclass func setAnimationRepeatCount(Float)\nSets the number of times animations within an animation block repeat.\nDeprecated\nclass func setAnimationRepeatAutoreverses(Bool)\nSets whether the animations within an animation block automatically reverse themselves.\nDeprecated\nclass func setAnimationTransition(UIView.AnimationTransition, for: UIView, cache: Bool)\nSets a transition to apply to a view during an animation block.\nDeprecated\nclass var areAnimationsEnabled: Bool\nReturns a Boolean value indicating whether animations are enabled.\nfunc forBaselineLayout() -> UIView\nReturns a view used to satisfy baseline constraints.\nDeprecated"
  },
  {
    "title": "setAnimationTransition(_:for:cache:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/1622528-setanimationtransition",
    "html": "Parameters\ntransition\n\nA transition to apply to view. Possible values are described in UIView.AnimationTransition.\n\nview\n\nThe view to apply the transition to.\n\ncache\n\nIf true, the before and after images of view are rendered once and used to create the frames in the animation. Caching can improve performance but if you set this parameter to true, you must not update the view or its subviews during the transition. Updating the view and its subviews may interfere with the caching behaviors and cause the view contents to be rendered incorrectly (or in the wrong location) during the animation. You must wait until the transition ends to update the view.\n\nIf false, the view and its contents must be updated for each frame of the transition animation, which may noticeably affect the frame rate.\n\nDiscussion\n\nIf you want to change the appearance of a view during a transition—for example, flip from one view to another—then use a container view, an instance of UIView, as follows:\n\nBegin an animation block.\n\nSet the transition on the container view.\n\nRemove the subview from the container view.\n\nAdd the new subview to the container view.\n\nCommit the animation block.\n\nUse of this method is discouraged in iOS 4.0 and later. You should use the transition(with:duration:options:animations:completion:) method to perform transitions instead.\n\nSee Also\nDeprecated methods\nclass func beginAnimations(String?, context: UnsafeMutableRawPointer?)\nMarks the beginning of a begin/commit animation block.\nDeprecated\nclass func commitAnimations()\nMarks the end of a begin/commit animation block and schedules the animations for execution.\nDeprecated\nclass func setAnimationStart(Date)\nSets the start time for the current animation block.\nDeprecated\nclass func setAnimationsEnabled(Bool)\nSets whether animations are enabled.\nclass func setAnimationDelegate(Any?)\nSets the delegate for any animation messages.\nDeprecated\nclass func setAnimationWillStart(Selector?)\nSets the message to send to the animation delegate when the animation starts.\nDeprecated\nclass func setAnimationDidStop(Selector?)\nSets the message to send to the animation delegate when animation stops.\nDeprecated\nclass func setAnimationDuration(TimeInterval)\nSets the duration (measured in seconds) of the animations in an animation block.\nDeprecated\nclass func setAnimationDelay(TimeInterval)\nSets the amount of time (in seconds) to wait before animating property changes within an animation block.\nDeprecated\nclass func setAnimationCurve(UIView.AnimationCurve)\nSets the curve to use when animating property changes within an animation block.\nDeprecated\nclass func setAnimationRepeatCount(Float)\nSets the number of times animations within an animation block repeat.\nDeprecated\nclass func setAnimationRepeatAutoreverses(Bool)\nSets whether the animations within an animation block automatically reverse themselves.\nDeprecated\nclass func setAnimationBeginsFromCurrentState(Bool)\nSets whether the animation should begin playing from the current state.\nDeprecated\nclass var areAnimationsEnabled: Bool\nReturns a Boolean value indicating whether animations are enabled.\nfunc forBaselineLayout() -> UIView\nReturns a view used to satisfy baseline constraints.\nDeprecated"
  },
  {
    "title": "setAnimationRepeatCount(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/1622419-setanimationrepeatcount",
    "html": "Parameters\nrepeatCount\n\nThe number of times animations repeat. This value can be a fraction. If you specify the value 0, the animation is performed once without repeating.\n\nDiscussion\n\nUse this method to specify the number of times to repeat the specified animations. This method does nothing if called from outside of an animation block. You can use this method in conjunction with either the block-based methods or the begin/commit methods for defining an animation block. If you do not explicitly set a repeat count, the animation is not repeated.\n\nIf you pass the repeat option to the animate(withDuration:delay:options:animations:completion:) method without setting an explicit repeat count, the animation repeats indefinitely. If you want the animation to repeat a finite number of times, call this method from inside your block.\n\nSee Also\nDeprecated methods\nclass func beginAnimations(String?, context: UnsafeMutableRawPointer?)\nMarks the beginning of a begin/commit animation block.\nDeprecated\nclass func commitAnimations()\nMarks the end of a begin/commit animation block and schedules the animations for execution.\nDeprecated\nclass func setAnimationStart(Date)\nSets the start time for the current animation block.\nDeprecated\nclass func setAnimationsEnabled(Bool)\nSets whether animations are enabled.\nclass func setAnimationDelegate(Any?)\nSets the delegate for any animation messages.\nDeprecated\nclass func setAnimationWillStart(Selector?)\nSets the message to send to the animation delegate when the animation starts.\nDeprecated\nclass func setAnimationDidStop(Selector?)\nSets the message to send to the animation delegate when animation stops.\nDeprecated\nclass func setAnimationDuration(TimeInterval)\nSets the duration (measured in seconds) of the animations in an animation block.\nDeprecated\nclass func setAnimationDelay(TimeInterval)\nSets the amount of time (in seconds) to wait before animating property changes within an animation block.\nDeprecated\nclass func setAnimationCurve(UIView.AnimationCurve)\nSets the curve to use when animating property changes within an animation block.\nDeprecated\nclass func setAnimationRepeatAutoreverses(Bool)\nSets whether the animations within an animation block automatically reverse themselves.\nDeprecated\nclass func setAnimationBeginsFromCurrentState(Bool)\nSets whether the animation should begin playing from the current state.\nDeprecated\nclass func setAnimationTransition(UIView.AnimationTransition, for: UIView, cache: Bool)\nSets a transition to apply to a view during an animation block.\nDeprecated\nclass var areAnimationsEnabled: Bool\nReturns a Boolean value indicating whether animations are enabled.\nfunc forBaselineLayout() -> UIView\nReturns a view used to satisfy baseline constraints.\nDeprecated"
  },
  {
    "title": "setAnimationRepeatAutoreverses(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/1622501-setanimationrepeatautoreverses",
    "html": "Parameters\nrepeatAutoreverses\n\nSpecify true to enable autoreversing or false to disable it.\n\nDiscussion\n\nIf you enable autoreversing, a single animation cycle changes the properties being animated to their new values and then back to their original values. At the end of the animations, the affected views are then updated immediately to reflect the new values. This method does nothing if called from outside of an animation block. By default, autoreversing is disabled.\n\nIf you combine autoreversing with a repeat count (settable using the setAnimationRepeatCount(_:) method), you can create animations that shift back and forth between the old and new values the specified number of times. However, remember that the repeat count indicates the number of complete cycles. If you specify an integral value such as 2.0, the animation ends on the old value, which is followed by the view immediately updating itself to show the new value, which might be jarring. If you want the animation to end on the new value (instead of the old value), add 0.5 to the repeat count value. This adds an extra half cycle to the animation.\n\nUse of this method is discouraged in iOS 4.0 and later. Instead, you should use theanimate(withDuration:delay:options:animations:completion:) method to specify your animations and the animation options.\n\nSee Also\nDeprecated methods\nclass func beginAnimations(String?, context: UnsafeMutableRawPointer?)\nMarks the beginning of a begin/commit animation block.\nDeprecated\nclass func commitAnimations()\nMarks the end of a begin/commit animation block and schedules the animations for execution.\nDeprecated\nclass func setAnimationStart(Date)\nSets the start time for the current animation block.\nDeprecated\nclass func setAnimationsEnabled(Bool)\nSets whether animations are enabled.\nclass func setAnimationDelegate(Any?)\nSets the delegate for any animation messages.\nDeprecated\nclass func setAnimationWillStart(Selector?)\nSets the message to send to the animation delegate when the animation starts.\nDeprecated\nclass func setAnimationDidStop(Selector?)\nSets the message to send to the animation delegate when animation stops.\nDeprecated\nclass func setAnimationDuration(TimeInterval)\nSets the duration (measured in seconds) of the animations in an animation block.\nDeprecated\nclass func setAnimationDelay(TimeInterval)\nSets the amount of time (in seconds) to wait before animating property changes within an animation block.\nDeprecated\nclass func setAnimationCurve(UIView.AnimationCurve)\nSets the curve to use when animating property changes within an animation block.\nDeprecated\nclass func setAnimationRepeatCount(Float)\nSets the number of times animations within an animation block repeat.\nDeprecated\nclass func setAnimationBeginsFromCurrentState(Bool)\nSets whether the animation should begin playing from the current state.\nDeprecated\nclass func setAnimationTransition(UIView.AnimationTransition, for: UIView, cache: Bool)\nSets a transition to apply to a view during an animation block.\nDeprecated\nclass var areAnimationsEnabled: Bool\nReturns a Boolean value indicating whether animations are enabled.\nfunc forBaselineLayout() -> UIView\nReturns a view used to satisfy baseline constraints.\nDeprecated"
  },
  {
    "title": "setAnimationCurve(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/1622588-setanimationcurve",
    "html": "Discussion\n\nIf you specify your animations using begin/commit set of methods, you use this method to specify the type of curve you want to use for the animation. This method does nothing if called from outside of an animation block. It must be called between calls to the beginAnimations(_:context:) and commitAnimations() methods. And you must call this method prior to changing the animatable properties of your views. The default value is UIView.AnimationCurve.easeInOut.\n\nUse of this method is discouraged in iOS 4.0 and later. Instead, you should use theanimate(withDuration:delay:options:animations:completion:) method to specify your animations and the animation curve options.\n\nSee Also\nDeprecated methods\nclass func beginAnimations(String?, context: UnsafeMutableRawPointer?)\nMarks the beginning of a begin/commit animation block.\nDeprecated\nclass func commitAnimations()\nMarks the end of a begin/commit animation block and schedules the animations for execution.\nDeprecated\nclass func setAnimationStart(Date)\nSets the start time for the current animation block.\nDeprecated\nclass func setAnimationsEnabled(Bool)\nSets whether animations are enabled.\nclass func setAnimationDelegate(Any?)\nSets the delegate for any animation messages.\nDeprecated\nclass func setAnimationWillStart(Selector?)\nSets the message to send to the animation delegate when the animation starts.\nDeprecated\nclass func setAnimationDidStop(Selector?)\nSets the message to send to the animation delegate when animation stops.\nDeprecated\nclass func setAnimationDuration(TimeInterval)\nSets the duration (measured in seconds) of the animations in an animation block.\nDeprecated\nclass func setAnimationDelay(TimeInterval)\nSets the amount of time (in seconds) to wait before animating property changes within an animation block.\nDeprecated\nclass func setAnimationRepeatCount(Float)\nSets the number of times animations within an animation block repeat.\nDeprecated\nclass func setAnimationRepeatAutoreverses(Bool)\nSets whether the animations within an animation block automatically reverse themselves.\nDeprecated\nclass func setAnimationBeginsFromCurrentState(Bool)\nSets whether the animation should begin playing from the current state.\nDeprecated\nclass func setAnimationTransition(UIView.AnimationTransition, for: UIView, cache: Bool)\nSets a transition to apply to a view during an animation block.\nDeprecated\nclass var areAnimationsEnabled: Bool\nReturns a Boolean value indicating whether animations are enabled.\nfunc forBaselineLayout() -> UIView\nReturns a view used to satisfy baseline constraints.\nDeprecated"
  },
  {
    "title": "preferredFramesPerSecond60 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/animationoptions/2806816-preferredframespersecond60",
    "html": "Discussion\n\nSpecify this value to request a preferred frame rate. It's recommended that you use the default value unless you have identified a specific need for an explicit rate."
  },
  {
    "title": "setAnimationDelay(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/1622472-setanimationdelay",
    "html": "Discussion\n\nIf you specify your animations using begin/commit set of methods, you use this method to specify the amount of time to wait before starting the animations. This method does nothing if called from outside of an animation block. It must be called between calls to the beginAnimations(_:context:) and commitAnimations() methods. And you must call this method prior to changing the animatable properties of your views. The default value is 0.0 seconds.\n\nUse of this method is discouraged in iOS 4.0 and later. Instead, you should use theanimate(withDuration:delay:options:animations:completion:) method to specify your animations and the starting delay.\n\nSee Also\nDeprecated methods\nclass func beginAnimations(String?, context: UnsafeMutableRawPointer?)\nMarks the beginning of a begin/commit animation block.\nDeprecated\nclass func commitAnimations()\nMarks the end of a begin/commit animation block and schedules the animations for execution.\nDeprecated\nclass func setAnimationStart(Date)\nSets the start time for the current animation block.\nDeprecated\nclass func setAnimationsEnabled(Bool)\nSets whether animations are enabled.\nclass func setAnimationDelegate(Any?)\nSets the delegate for any animation messages.\nDeprecated\nclass func setAnimationWillStart(Selector?)\nSets the message to send to the animation delegate when the animation starts.\nDeprecated\nclass func setAnimationDidStop(Selector?)\nSets the message to send to the animation delegate when animation stops.\nDeprecated\nclass func setAnimationDuration(TimeInterval)\nSets the duration (measured in seconds) of the animations in an animation block.\nDeprecated\nclass func setAnimationCurve(UIView.AnimationCurve)\nSets the curve to use when animating property changes within an animation block.\nDeprecated\nclass func setAnimationRepeatCount(Float)\nSets the number of times animations within an animation block repeat.\nDeprecated\nclass func setAnimationRepeatAutoreverses(Bool)\nSets whether the animations within an animation block automatically reverse themselves.\nDeprecated\nclass func setAnimationBeginsFromCurrentState(Bool)\nSets whether the animation should begin playing from the current state.\nDeprecated\nclass func setAnimationTransition(UIView.AnimationTransition, for: UIView, cache: Bool)\nSets a transition to apply to a view during an animation block.\nDeprecated\nclass var areAnimationsEnabled: Bool\nReturns a Boolean value indicating whether animations are enabled.\nfunc forBaselineLayout() -> UIView\nReturns a view used to satisfy baseline constraints.\nDeprecated"
  },
  {
    "title": "preferredFramesPerSecond30 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/animationoptions/2806817-preferredframespersecond30",
    "html": "Discussion\n\nSpecify this value to request a preferred frame rate. It's recommended that you use the default value unless you have identified a specific need for an explicit rate."
  },
  {
    "title": "setAnimationWillStart(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/1622649-setanimationwillstart",
    "html": "Parameters\nselector\n\nThe message to send to the animation delegate before animations start. The default value is NULL. This selector should be of the form: - (void)animationDidStart:(NSString *)animationID context:(void *)context. Your method must take the following arguments:\n\nanimationID\n\nAn NSString containing an optional application-supplied identifier. This is the identifier string that is passed to the beginAnimations(_:context:) method. This argument can be nil.\n\ncontext\n\nAn optional application-supplied context. This is the context data passed to the beginAnimations(_:context:) method. This argument can be nil.\n\nDiscussion\n\nIf you specify an animation delegate for a begin/commit set of animations, you use this method to specify the selector to call before the animations begin. This method does nothing if called from outside of an animation block. It must be called between calls to the beginAnimations(_:context:) and commitAnimations() methods. This selector is set to NULL by default.\n\nNote\n\nYour start selector is not called if animations are disabled.\n\nUse of this method is discouraged in iOS 4.0 and later. If you are using the block-based animation methods, you can include your delegate’s start code directly inside your block.\n\nSee Also\nDeprecated methods\nclass func beginAnimations(String?, context: UnsafeMutableRawPointer?)\nMarks the beginning of a begin/commit animation block.\nDeprecated\nclass func commitAnimations()\nMarks the end of a begin/commit animation block and schedules the animations for execution.\nDeprecated\nclass func setAnimationStart(Date)\nSets the start time for the current animation block.\nDeprecated\nclass func setAnimationsEnabled(Bool)\nSets whether animations are enabled.\nclass func setAnimationDelegate(Any?)\nSets the delegate for any animation messages.\nDeprecated\nclass func setAnimationDidStop(Selector?)\nSets the message to send to the animation delegate when animation stops.\nDeprecated\nclass func setAnimationDuration(TimeInterval)\nSets the duration (measured in seconds) of the animations in an animation block.\nDeprecated\nclass func setAnimationDelay(TimeInterval)\nSets the amount of time (in seconds) to wait before animating property changes within an animation block.\nDeprecated\nclass func setAnimationCurve(UIView.AnimationCurve)\nSets the curve to use when animating property changes within an animation block.\nDeprecated\nclass func setAnimationRepeatCount(Float)\nSets the number of times animations within an animation block repeat.\nDeprecated\nclass func setAnimationRepeatAutoreverses(Bool)\nSets whether the animations within an animation block automatically reverse themselves.\nDeprecated\nclass func setAnimationBeginsFromCurrentState(Bool)\nSets whether the animation should begin playing from the current state.\nDeprecated\nclass func setAnimationTransition(UIView.AnimationTransition, for: UIView, cache: Bool)\nSets a transition to apply to a view during an animation block.\nDeprecated\nclass var areAnimationsEnabled: Bool\nReturns a Boolean value indicating whether animations are enabled.\nfunc forBaselineLayout() -> UIView\nReturns a view used to satisfy baseline constraints.\nDeprecated"
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitoolbar/1617992-delegate",
    "html": "Discussion\n\nThe delegate should conform to the UIToolbarDelegate protocol. You may not set the delegate when the toolbar is managed by a navigation controller. The default value is nil.\n\nSee Also\nManaging toolbar changes\nprotocol UIToolbarDelegate\nThe interface that toolbar delegate objects implement to manage the toolbar behavior."
  },
  {
    "title": "wraps | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistepper/1624068-wraps",
    "html": "Discussion\n\nIf true, incrementing beyond maximumValue sets value to minimumValue; likewise, decrementing below minimumValue sets value to maximumValue. If false, the stepper doesn’t increment beyond maximumValue nor does it decrement below minimumValue but rather holds at those values.\n\nThe default value for this property is false.\n\nSee Also\nConfiguring the stepper\nvar isContinuous: Bool\nA Boolean value that determines whether to send value changes during user interaction or after user interaction ends.\nvar autorepeat: Bool\nA Boolean value that determines whether to repeatedly change the stepper’s value as the user presses and holds a stepper button.\nvar minimumValue: Double\nThe lowest possible numeric value for the stepper.\nvar maximumValue: Double\nThe highest possible numeric value for the stepper.\nvar stepValue: Double\nThe step, or increment, value for the stepper."
  },
  {
    "title": "backgroundImage(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistepper/1624069-backgroundimage",
    "html": "Parameters\nstate\n\nThe control state in which the image is displayed.\n\nReturn Value\n\nThe background image used by the control when it is in the specified state.\n\nSee Also\nCustomizing appearance\nfunc setBackgroundImage(UIImage?, for: UIControl.State)\nSets the background image for the control when it’s in the specified state.\nfunc decrementImage(for: UIControl.State) -> UIImage?\nReturns the image used for the decrement glyph of the control.\nfunc setDecrementImage(UIImage?, for: UIControl.State)\nSets the image to use for the decrement glyph of the control.\nfunc dividerImage(forLeftSegmentState: UIControl.State, rightSegmentState: UIControl.State) -> UIImage?\nReturns the divider image for the given combination of left and right states.\nfunc setDividerImage(UIImage?, forLeftSegmentState: UIControl.State, rightSegmentState: UIControl.State)\nSets the image to use for the given combination of left and right states.\nfunc incrementImage(for: UIControl.State) -> UIImage?\nReturns the image used for the increment glyph of the control.\nfunc setIncrementImage(UIImage?, for: UIControl.State)\nSets the image to use for the increment glyph of the control."
  },
  {
    "title": "endTracking(_:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/1618234-endtracking",
    "html": "Parameters\ntouch\n\nThe touch object containing the final touch information.\n\nevent\n\nThe event object containing the touch event.\n\nDiscussion\n\nThis method is called at the end of a sequence of touch events inside the control’s bounds. Subclasses can override this method and use it to perform any actions relevant to the completion of the touch sequence. You should also use it to perform any cleanup associated with tracking the event.\n\nIf you override this method, you must call super at some point in your implementation. The default implementation updates the isTracking property of the control.\n\nSee Also\nTracking touches and redrawing controls\nfunc beginTracking(UITouch, with: UIEvent?) -> Bool\nNotifies the control when a touch event enters the control’s bounds.\nfunc continueTracking(UITouch, with: UIEvent?) -> Bool\nNotifies the control when a touch event for the control updates.\nfunc cancelTracking(with: UIEvent?)\nNotifies the control to cancel tracking related to the specified event.\nvar isTracking: Bool\nA Boolean value that indicates whether the control is currently tracking touch events.\nvar isTouchInside: Bool\nA Boolean value that indicates whether a tracked touch event is currently inside the control’s bounds."
  },
  {
    "title": "init(configuration:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentunavailableview/4176592-init",
    "html": "Parameters\nconfiguration\n\nThe configuration describing the view’s appearance and behavior."
  },
  {
    "title": "imageInsets | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uibaritem/1616413-imageinsets",
    "html": "Discussion\n\nThe default value is zero.\n\nSee Also\nGetting and setting properties\nvar title: String?\nThe title displayed on the item.\nvar image: UIImage?\nThe image used to represent the item.\nvar landscapeImagePhone: UIImage?\nThe image to use to represent the item in landscape orientation when using the iPhone appearance idiom.\nvar largeContentSizeImage: UIImage?\nThe image to display for users who are blind or have low vision.\nvar landscapeImagePhoneInsets: UIEdgeInsets\nThe image inset or outset for each edge of the image in landscape orientation when using the iPhone appearance idiom.\nvar largeContentSizeImageInsets: UIEdgeInsets\nThe insets to apply to the bar item’s large image when displaying the image in an assistive UI.\nvar isEnabled: Bool\nA Boolean value indicating whether the item is enabled.\nvar tag: Int\nThe bar item’s tag, an app-supplied integer that you can use to identify bar item objects in your app."
  },
  {
    "title": "contextMenuInteraction(_:previewForDismissingMenuWithConfiguration:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/3601217-contextmenuinteraction",
    "html": "See Also\nManaging context menus\nAdding Context Menus in Your App\nProvide quick access to useful actions by adding context menus to your iOS app.\nvar contextMenuInteraction: UIContextMenuInteraction?\nA context menu interaction for the control.\nvar isContextMenuInteractionEnabled: Bool\nA Boolean value that determines whether the control enables its context menu interaction.\nvar showsMenuAsPrimaryAction: Bool\nA Boolean value that determines whether the context menu interaction is the control’s primary action.\nfunc contextMenuInteraction(UIContextMenuInteraction, configurationForMenuAtLocation: CGPoint) -> UIContextMenuConfiguration?\nfunc contextMenuInteraction(UIContextMenuInteraction, previewForHighlightingMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nfunc contextMenuInteraction(UIContextMenuInteraction, willDisplayMenuFor: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nfunc contextMenuInteraction(UIContextMenuInteraction, willEndFor: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nfunc menuAttachmentPoint(for: UIContextMenuConfiguration) -> CGPoint"
  },
  {
    "title": "showsMenuAsPrimaryAction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/3601223-showsmenuasprimaryaction",
    "html": "Discussion\n\nIf this value is true, the contextMenuInteraction becomes the primary action of the control, and the menu shows in response to the touchDown event.\n\nThe default value is false.\n\nSee Also\nManaging context menus\nAdding Context Menus in Your App\nProvide quick access to useful actions by adding context menus to your iOS app.\nvar contextMenuInteraction: UIContextMenuInteraction?\nA context menu interaction for the control.\nvar isContextMenuInteractionEnabled: Bool\nA Boolean value that determines whether the control enables its context menu interaction.\nfunc contextMenuInteraction(UIContextMenuInteraction, configurationForMenuAtLocation: CGPoint) -> UIContextMenuConfiguration?\nfunc contextMenuInteraction(UIContextMenuInteraction, previewForDismissingMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nfunc contextMenuInteraction(UIContextMenuInteraction, previewForHighlightingMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nfunc contextMenuInteraction(UIContextMenuInteraction, willDisplayMenuFor: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nfunc contextMenuInteraction(UIContextMenuInteraction, willEndFor: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nfunc menuAttachmentPoint(for: UIContextMenuConfiguration) -> CGPoint"
  },
  {
    "title": "contextMenuInteraction(_:previewForHighlightingMenuWithConfiguration:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/3601218-contextmenuinteraction",
    "html": "See Also\nManaging context menus\nAdding Context Menus in Your App\nProvide quick access to useful actions by adding context menus to your iOS app.\nvar contextMenuInteraction: UIContextMenuInteraction?\nA context menu interaction for the control.\nvar isContextMenuInteractionEnabled: Bool\nA Boolean value that determines whether the control enables its context menu interaction.\nvar showsMenuAsPrimaryAction: Bool\nA Boolean value that determines whether the context menu interaction is the control’s primary action.\nfunc contextMenuInteraction(UIContextMenuInteraction, configurationForMenuAtLocation: CGPoint) -> UIContextMenuConfiguration?\nfunc contextMenuInteraction(UIContextMenuInteraction, previewForDismissingMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nfunc contextMenuInteraction(UIContextMenuInteraction, willDisplayMenuFor: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nfunc contextMenuInteraction(UIContextMenuInteraction, willEndFor: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nfunc menuAttachmentPoint(for: UIContextMenuConfiguration) -> CGPoint"
  },
  {
    "title": "contextMenuInteraction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/3601215-contextmenuinteraction",
    "html": "Discussion\n\nThis property returns a UIContextMenuInteraction with the control set as its delegate. Before constructing the context menu interaction, the control verifies that it can serve as a viable delegate.\n\nSee Also\nManaging context menus\nAdding Context Menus in Your App\nProvide quick access to useful actions by adding context menus to your iOS app.\nvar isContextMenuInteractionEnabled: Bool\nA Boolean value that determines whether the control enables its context menu interaction.\nvar showsMenuAsPrimaryAction: Bool\nA Boolean value that determines whether the context menu interaction is the control’s primary action.\nfunc contextMenuInteraction(UIContextMenuInteraction, configurationForMenuAtLocation: CGPoint) -> UIContextMenuConfiguration?\nfunc contextMenuInteraction(UIContextMenuInteraction, previewForDismissingMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nfunc contextMenuInteraction(UIContextMenuInteraction, previewForHighlightingMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nfunc contextMenuInteraction(UIContextMenuInteraction, willDisplayMenuFor: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nfunc contextMenuInteraction(UIContextMenuInteraction, willEndFor: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nfunc menuAttachmentPoint(for: UIContextMenuConfiguration) -> CGPoint"
  },
  {
    "title": "init(frame:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/3600493-init",
    "html": "See Also\nCreating a control\ninit(frame: CGRect, primaryAction: UIAction?)\nCreates a control with the specified frame and primary action.\ninit?(coder: NSCoder)\nCreates a control from data in an unarchiver."
  },
  {
    "title": "state | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/1618245-state",
    "html": "Discussion\n\nThe value of this property is a bitmask of the constants in the UIControl.State type. A control can be in more than one state at a time. For example, it can be focused and highlighted at the same time. You can also get the values for individual states using the properties of this class.\n\nSee Also\nManaging state\nstruct UIControl.State\nConstants describing the state of a control.\nvar isEnabled: Bool\nA Boolean value indicating whether the control is in the enabled state.\nvar isSelected: Bool\nA Boolean value indicating whether the control is in the selected state.\nvar isHighlighted: Bool\nA Boolean value indicating whether the control draws a highlight."
  },
  {
    "title": "isSelected | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/1618203-isselected",
    "html": "Discussion\n\nSet the value of this property to true to select it or false to deselect it. Most controls don’t modify their appearance or behavior when selected, but some do. For example, the UISegmentedControl class tracks whether a segment is selected and draws it differently when it is.\n\nThe default value of this property is false for a newly created control. You can set a control’s initial selected state in your storyboard file.\n\nSee Also\nManaging state\nvar state: UIControl.State\nThe state of the control, specified as a bit mask value.\nstruct UIControl.State\nConstants describing the state of a control.\nvar isEnabled: Bool\nA Boolean value indicating whether the control is in the enabled state.\nvar isHighlighted: Bool\nA Boolean value indicating whether the control draws a highlight."
  },
  {
    "title": "removeAction(identifiedBy:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/3600496-removeaction",
    "html": "See Also\nManaging the control’s targets and actions\nfunc addTarget(Any?, action: Selector, for: UIControl.Event)\nAssociates a target object and action method with the control.\nfunc removeTarget(Any?, action: Selector?, for: UIControl.Event)\nStops the delivery of events to the specified target object.\nvar allTargets: Set<AnyHashable>\nReturns all target objects associated with the control.\nfunc addAction(UIAction, for: UIControl.Event)\nfunc removeAction(UIAction, for: UIControl.Event)\nfunc actions(forTarget: Any?, forControlEvent: UIControl.Event) -> [String]?\nReturns the actions performed on a target object when the specified event occurs.\nvar allControlEvents: UIControl.Event\nReturns the events for which the control has associated actions.\nfunc enumerateEventHandlers((UIAction?, (Any?, Selector)?, UIControl.Event, inout Bool) -> Void)"
  },
  {
    "title": "beginFromCurrentState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/animationoptions/1622575-beginfromcurrentstate",
    "html": "Discussion\n\nIf this key is not present, all in-flight animations are allowed to finish before the new animation is started. If another animation is not in flight, this key has no effect."
  },
  {
    "title": "beginAnimations(_:context:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/1622463-beginanimations",
    "html": "Parameters\nanimationID\n\nAn application-supplied identifier for the animations.\n\ncontext\n\nCustom data that you want to associate with this set of animations. information that is passed to the animation delegate messages—the selectors set using the setAnimationWillStart(_:) and setAnimationDidStop(_:) methods.\n\nDiscussion\n\nThis method signals to the system that you want to specify one or more animations to perform. After calling this method, configure the animation options (using the setAnimation… class methods) and then change the desired animatable properties of your views. When you are done changing your view properties, call the commitAnimations() method to close the set and schedule the animations.\n\nYou can nest sets of animations (by calling this method again before committing a previous set of animations) as needed. Nesting animations groups them together and allows you to set different animation options for the nested group.\n\nIf you install a start or stop selector using the setAnimationWillStart(_:) or setAnimationDidStop(_:) method, the values you specify for the animationID and context parameters are passed to your selectors at runtime. You can use these parameters to pass additional information to those selectors.\n\nUse of this method is discouraged in iOS 4.0 and later. You should use the block-based animation methods to specify your animations instead.\n\nSee Also\nDeprecated methods\nclass func commitAnimations()\nMarks the end of a begin/commit animation block and schedules the animations for execution.\nDeprecated\nclass func setAnimationStart(Date)\nSets the start time for the current animation block.\nDeprecated\nclass func setAnimationsEnabled(Bool)\nSets whether animations are enabled.\nclass func setAnimationDelegate(Any?)\nSets the delegate for any animation messages.\nDeprecated\nclass func setAnimationWillStart(Selector?)\nSets the message to send to the animation delegate when the animation starts.\nDeprecated\nclass func setAnimationDidStop(Selector?)\nSets the message to send to the animation delegate when animation stops.\nDeprecated\nclass func setAnimationDuration(TimeInterval)\nSets the duration (measured in seconds) of the animations in an animation block.\nDeprecated\nclass func setAnimationDelay(TimeInterval)\nSets the amount of time (in seconds) to wait before animating property changes within an animation block.\nDeprecated\nclass func setAnimationCurve(UIView.AnimationCurve)\nSets the curve to use when animating property changes within an animation block.\nDeprecated\nclass func setAnimationRepeatCount(Float)\nSets the number of times animations within an animation block repeat.\nDeprecated\nclass func setAnimationRepeatAutoreverses(Bool)\nSets whether the animations within an animation block automatically reverse themselves.\nDeprecated\nclass func setAnimationBeginsFromCurrentState(Bool)\nSets whether the animation should begin playing from the current state.\nDeprecated\nclass func setAnimationTransition(UIView.AnimationTransition, for: UIView, cache: Bool)\nSets a transition to apply to a view during an animation block.\nDeprecated\nclass var areAnimationsEnabled: Bool\nReturns a Boolean value indicating whether animations are enabled.\nfunc forBaselineLayout() -> UIView\nReturns a view used to satisfy baseline constraints.\nDeprecated"
  },
  {
    "title": "showHideTransitionViews | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/animationoptions/1622462-showhidetransitionviews",
    "html": "Discussion\n\nWhen present, this key causes views to be hidden or shown (instead of removed or added) when performing a view transition. Both views must already be present in the parent view’s hierarchy when using this key. If this key is not present, the to-view in a transition is added to, and the from-view is removed from, the parent view’s list of subviews."
  },
  {
    "title": "overrideInheritedDuration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/animationoptions/1622434-overrideinheritedduration",
    "html": "Discussion\n\nIf this key is not present, the animation inherits the remaining duration of the in-flight animation, if any."
  },
  {
    "title": "contentView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uivisualeffectview/1615068-contentview",
    "html": "Discussion\n\nAdd subviews to the contentView and not to UIVisualEffectView directly.\n\nSee Also\nRetrieving view information\nvar effect: UIVisualEffect?\nThe visual effect provided by the view."
  },
  {
    "title": "largeContentImageInsets | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilargecontentvieweritem/3183933-largecontentimageinsets",
    "html": "Required\n\nDiscussion\n\nThis property defaults to zero.\n\nSee Also\nConfiguring display properties\nvar largeContentTitle: String?\nA string that describes an item to display in the large content viewer.\n\nRequired\n\nvar largeContentImage: UIImage?\nAn image that represents an item to display in the large content viewer.\n\nRequired\n\nvar scalesLargeContentImage: Bool\nA Boolean value that indicates whether the view scales the item’s image to a larger size or not.\n\nRequired"
  },
  {
    "title": "allowsCopyingTokens | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchtextfield/3175435-allowscopyingtokens",
    "html": "Discussion\n\nThe default value for this property is true.\n\nTo support copying tokens, allowsCopyingTokens must be true and the search field’s delegate must also implement searchTextField(_:itemProviderForCopying:).\n\nUISearchTextField enables the Copy command when a user selects text, even if the selection also includes tokens and allowsCopyingTokens is false.\n\nSee Also\nSupporting token interactions\nvar allowsDeletingTokens: Bool\nA Boolean that indicates whether the user can remove tokens from the search field.\nvar delegate: UITextFieldDelegate?\nThe text field’s delegate.\nprotocol UISearchTextFieldDelegate\nThe interface for the delegate of a search field.\nprotocol UISearchTextFieldPasteItem\nA protocol that supports pasting tokens."
  },
  {
    "title": "searchTextField(_:itemProviderForCopying:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchtextfielddelegate/3175446-searchtextfield",
    "html": "Parameters\nsearchTextField\n\nThe search field that contains the token the user is copying or dragging.\n\ntoken\n\nThe token the user is copying or dragging.\n\nReturn Value\n\nAn item provider that provides a token if the user pastes or drops the token.\n\nDiscussion\n\nTo support drag and drop and the Cut and Copy commands, your delegate must implement this method and return an NSItemProvider for the requested token. Your delegate can provide a plain text representation for pasting in other contexts, but should register a custom type identifier so it can recognize and reconstruct the token when pasted into the same field.\n\nThe system only calls this delegate method if either allowsCopyingTokens or allowsDeletingTokens is true."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uivisualeffectview/1615054-init",
    "html": "See Also\nCreating a visual effect view\ninit(effect: UIVisualEffect?)\nCreates a new visual effect view with the designated visual effect."
  },
  {
    "title": "init(effect:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uivisualeffectview/1615051-init",
    "html": "Parameters\neffect\n\nThe UIVisualEffect you provide for the view. This can be a UIBlurEffect or a UIVibrancyEffect.\n\nReturn Value\n\nThe new view containing the designated visual effect.\n\nSee Also\nCreating a visual effect view\ninit?(coder: NSCoder)\nCreates a visual effect view from data in an unarchiver."
  },
  {
    "title": "showsLargeContentViewer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilargecontentvieweritem/3183936-showslargecontentviewer",
    "html": "Required\n\nDiscussion\n\nFor this property to take effect, the item or an ancestor view must have a UILargeContentViewerInteraction."
  },
  {
    "title": "menuAttachmentPoint(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/3656349-menuattachmentpoint",
    "html": "See Also\nManaging context menus\nAdding Context Menus in Your App\nProvide quick access to useful actions by adding context menus to your iOS app.\nvar contextMenuInteraction: UIContextMenuInteraction?\nA context menu interaction for the control.\nvar isContextMenuInteractionEnabled: Bool\nA Boolean value that determines whether the control enables its context menu interaction.\nvar showsMenuAsPrimaryAction: Bool\nA Boolean value that determines whether the context menu interaction is the control’s primary action.\nfunc contextMenuInteraction(UIContextMenuInteraction, configurationForMenuAtLocation: CGPoint) -> UIContextMenuConfiguration?\nfunc contextMenuInteraction(UIContextMenuInteraction, previewForDismissingMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nfunc contextMenuInteraction(UIContextMenuInteraction, previewForHighlightingMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nfunc contextMenuInteraction(UIContextMenuInteraction, willDisplayMenuFor: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nfunc contextMenuInteraction(UIContextMenuInteraction, willEndFor: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)"
  },
  {
    "title": "removeToken(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchtextfield/3175439-removetoken",
    "html": "Parameters\ntokenIndex\n\nWithin the tokens array, the index of the token you want to remove.\n\nSee Also\nAdding and removing tokens\nvar tokens: [UISearchToken]\nThe collection of tokens in the search text field.\nfunc insertToken(UISearchToken, at: Int)\nAdds a search token at a specific index."
  },
  {
    "title": "textualRange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchtextfield/3175441-textualrange",
    "html": "Discussion\n\nBoth tokens and text are included in the range from beginningOfDocument to endOfDocument. This property provides convenient access to just the text.\n\nSee Also\nConverting text into tokens\nfunc replaceTextualPortion(of: UITextRange, with: UISearchToken, at: Int)\nConverts text in a search field into a search token."
  },
  {
    "title": "allowsDeletingTokens | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchtextfield/3175436-allowsdeletingtokens",
    "html": "Discussion\n\nThe default value for this property is true.\n\nYou can always remove tokens programmatically. When this value is true, the user can also delete tokens and your app needs to handle tokens being re-added to the field with Undo.\n\nSee Also\nSupporting token interactions\nvar allowsCopyingTokens: Bool\nA Boolean that indicates whether the user can copy or drag tokens from the search field.\nvar delegate: UITextFieldDelegate?\nThe text field’s delegate.\nprotocol UISearchTextFieldDelegate\nThe interface for the delegate of a search field.\nprotocol UISearchTextFieldPasteItem\nA protocol that supports pasting tokens."
  },
  {
    "title": "tokenBackgroundColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchtextfield/3175442-tokenbackgroundcolor",
    "html": "Discussion\n\nIf you set this property to nil, the search field reverts to the default token background color.\n\nSee Also\nCustomizing token behavior\nfunc tokens(in: UITextRange) -> [UISearchToken]\nReturns the search field’s tokens that are within a given range.\nfunc positionOfToken(at: Int) -> UITextPosition\nConverts a token index into a text position."
  },
  {
    "title": "setAnimationsEnabled(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/1622420-setanimationsenabled",
    "html": "Parameters\nenabled\n\nSpecify true to enable animations or false to disable them.\n\nDiscussion\n\nAnimations are enabled by default. If you disable animations, code inside subsequent animation blocks is still executed but no animations actually occur. Thus, any changes you make inside an animation block are reflected immediately instead of being animated. This is true whether you use the block-based animation methods or the begin/commit animation methods.\n\nThis method affects only those animations that are submitted after it is called. If you call this method while existing animations are running, those animations continue running until they reach their natural end point.\n\nSee Also\nDeprecated methods\nclass func beginAnimations(String?, context: UnsafeMutableRawPointer?)\nMarks the beginning of a begin/commit animation block.\nDeprecated\nclass func commitAnimations()\nMarks the end of a begin/commit animation block and schedules the animations for execution.\nDeprecated\nclass func setAnimationStart(Date)\nSets the start time for the current animation block.\nDeprecated\nclass func setAnimationDelegate(Any?)\nSets the delegate for any animation messages.\nDeprecated\nclass func setAnimationWillStart(Selector?)\nSets the message to send to the animation delegate when the animation starts.\nDeprecated\nclass func setAnimationDidStop(Selector?)\nSets the message to send to the animation delegate when animation stops.\nDeprecated\nclass func setAnimationDuration(TimeInterval)\nSets the duration (measured in seconds) of the animations in an animation block.\nDeprecated\nclass func setAnimationDelay(TimeInterval)\nSets the amount of time (in seconds) to wait before animating property changes within an animation block.\nDeprecated\nclass func setAnimationCurve(UIView.AnimationCurve)\nSets the curve to use when animating property changes within an animation block.\nDeprecated\nclass func setAnimationRepeatCount(Float)\nSets the number of times animations within an animation block repeat.\nDeprecated\nclass func setAnimationRepeatAutoreverses(Bool)\nSets whether the animations within an animation block automatically reverse themselves.\nDeprecated\nclass func setAnimationBeginsFromCurrentState(Bool)\nSets whether the animation should begin playing from the current state.\nDeprecated\nclass func setAnimationTransition(UIView.AnimationTransition, for: UIView, cache: Bool)\nSets a transition to apply to a view during an animation block.\nDeprecated\nclass var areAnimationsEnabled: Bool\nReturns a Boolean value indicating whether animations are enabled.\nfunc forBaselineLayout() -> UIView\nReturns a view used to satisfy baseline constraints.\nDeprecated\nRelated Documentation\nclass func performWithoutAnimation(() -> Void)\nDisables a view transition animation."
  },
  {
    "title": "setAnimationStart(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/1622466-setanimationstart",
    "html": "Parameters\nstartTime\n\nThe time to begin the animations.\n\nDiscussion\n\nCall this method between the beginAnimations(_:context:) and commitAnimations() methods to specify the start time for that set of animations. And call this method prior to changing the animatable properties of your views. (Do not call this method in conjunction with a block-based animation.) If you do not call this method, the start time is set to the value returned by the CFAbsoluteTimeGetCurrent() function, which begins the animations as soon as possible.\n\nUse of this method is discouraged in iOS 4.0 and later. You should use the block-based animation methods to specify your animations instead.\n\nSee Also\nDeprecated methods\nclass func beginAnimations(String?, context: UnsafeMutableRawPointer?)\nMarks the beginning of a begin/commit animation block.\nDeprecated\nclass func commitAnimations()\nMarks the end of a begin/commit animation block and schedules the animations for execution.\nDeprecated\nclass func setAnimationsEnabled(Bool)\nSets whether animations are enabled.\nclass func setAnimationDelegate(Any?)\nSets the delegate for any animation messages.\nDeprecated\nclass func setAnimationWillStart(Selector?)\nSets the message to send to the animation delegate when the animation starts.\nDeprecated\nclass func setAnimationDidStop(Selector?)\nSets the message to send to the animation delegate when animation stops.\nDeprecated\nclass func setAnimationDuration(TimeInterval)\nSets the duration (measured in seconds) of the animations in an animation block.\nDeprecated\nclass func setAnimationDelay(TimeInterval)\nSets the amount of time (in seconds) to wait before animating property changes within an animation block.\nDeprecated\nclass func setAnimationCurve(UIView.AnimationCurve)\nSets the curve to use when animating property changes within an animation block.\nDeprecated\nclass func setAnimationRepeatCount(Float)\nSets the number of times animations within an animation block repeat.\nDeprecated\nclass func setAnimationRepeatAutoreverses(Bool)\nSets whether the animations within an animation block automatically reverse themselves.\nDeprecated\nclass func setAnimationBeginsFromCurrentState(Bool)\nSets whether the animation should begin playing from the current state.\nDeprecated\nclass func setAnimationTransition(UIView.AnimationTransition, for: UIView, cache: Bool)\nSets a transition to apply to a view during an animation block.\nDeprecated\nclass var areAnimationsEnabled: Bool\nReturns a Boolean value indicating whether animations are enabled.\nfunc forBaselineLayout() -> UIView\nReturns a view used to satisfy baseline constraints.\nDeprecated"
  },
  {
    "title": "setAnimationDelegate(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/1622509-setanimationdelegate",
    "html": "Parameters\ndelegate\n\nAn object that defines the methods registered using the setAnimationWillStart(_:) and setAnimationDidStop(_:) methods. The view maintains a strong reference to this object for the duration of the animation.\n\nDiscussion\n\nYou can specify an animation delegate in cases where you want to receive messages when the animation starts or stops. After calling this method, you should call the setAnimationWillStart(_:) and setAnimationDidStop(_:) methods as needed to register appropriate selectors. By default, the animation delegate is set to nil.\n\nYou primarily use this method to set the delegate for animation blocks created using the begin/commit animation methods. Calling this method from outside an animation block does nothing.\n\nUse of this method is discouraged in iOS 4.0 and later. If you are using the block-based animation methods, you can include your delegate’s start and end code directly inside your block.\n\nSee Also\nDeprecated methods\nclass func beginAnimations(String?, context: UnsafeMutableRawPointer?)\nMarks the beginning of a begin/commit animation block.\nDeprecated\nclass func commitAnimations()\nMarks the end of a begin/commit animation block and schedules the animations for execution.\nDeprecated\nclass func setAnimationStart(Date)\nSets the start time for the current animation block.\nDeprecated\nclass func setAnimationsEnabled(Bool)\nSets whether animations are enabled.\nclass func setAnimationWillStart(Selector?)\nSets the message to send to the animation delegate when the animation starts.\nDeprecated\nclass func setAnimationDidStop(Selector?)\nSets the message to send to the animation delegate when animation stops.\nDeprecated\nclass func setAnimationDuration(TimeInterval)\nSets the duration (measured in seconds) of the animations in an animation block.\nDeprecated\nclass func setAnimationDelay(TimeInterval)\nSets the amount of time (in seconds) to wait before animating property changes within an animation block.\nDeprecated\nclass func setAnimationCurve(UIView.AnimationCurve)\nSets the curve to use when animating property changes within an animation block.\nDeprecated\nclass func setAnimationRepeatCount(Float)\nSets the number of times animations within an animation block repeat.\nDeprecated\nclass func setAnimationRepeatAutoreverses(Bool)\nSets whether the animations within an animation block automatically reverse themselves.\nDeprecated\nclass func setAnimationBeginsFromCurrentState(Bool)\nSets whether the animation should begin playing from the current state.\nDeprecated\nclass func setAnimationTransition(UIView.AnimationTransition, for: UIView, cache: Bool)\nSets a transition to apply to a view during an animation block.\nDeprecated\nclass var areAnimationsEnabled: Bool\nReturns a Boolean value indicating whether animations are enabled.\nfunc forBaselineLayout() -> UIView\nReturns a view used to satisfy baseline constraints.\nDeprecated"
  },
  {
    "title": "hidesWhenStopped | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivityindicatorview/1622837-hideswhenstopped",
    "html": "Discussion\n\nIf the value of this property is true (the default), the receiver sets its isHidden property (UIView) to true when receiver is not animating. If the hidesWhenStopped property is false, the receiver is not hidden when animation stops. You stop an animating progress indicator with the stopAnimating() method.\n\nSee Also\nManaging an activity indicator\nfunc startAnimating()\nStarts the animation of the progress indicator.\nfunc stopAnimating()\nStops the animation of the progress indicator.\nvar isAnimating: Bool\nA Boolean value indicating whether the activity indicator is currently running its animation."
  },
  {
    "title": "UICalendarViewDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicalendarviewdelegate",
    "html": "Topics\nProviding calendar view decorations\nfunc calendarView(UICalendarView, decorationFor: DateComponents) -> UICalendarView.Decoration?\nCreates a calendar view decoration for the date represented by the date components you provide.\nInstance Methods\nfunc calendarView(UICalendarView, didChangeVisibleDateComponentsFrom: DateComponents)\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nCustomizing the calendar display\nvar fontDesign: UIFontDescriptor.SystemDesign\nA font design that the calendar view uses for displaying calendar text.\nvar delegate: UICalendarViewDelegate?\nA delegate object the calendar view calls for decoration views.\nclass UICalendarView.Decoration\nA view that a calendar view displays for a specific date.\nenum UICalendarView.DecorationSize\nConstants that indicate the relative size of a decoration in a calendar view.\nvar wantsDateDecorations: Bool\nA Boolean value that indicates whether the calendar view displays date decorations.\nfunc reloadDecorations(forDateComponents: [DateComponents], animated: Bool)\nReloads the decorations for the dates you provide, with an option to animate the decoration reload."
  },
  {
    "title": "UICollectionViewDropProposal | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdropproposal",
    "html": "Overview\n\nCreate instances of this class in the collectionView(_:dropSessionDidUpdate:withDestinationIndexPath:) method of your drop delegate object. You create drop proposals to let the collection view know how you intend to handle a drop at the currently specified location. The collection view uses that information to provide appropriate visual feedback to the user.\n\nTopics\nCreating a Drop Proposal\ninit(operation: UIDropOperation, intent: UICollectionViewDropProposal.Intent)\nCreates a drop proposal object that specifies how to incorporate the dropped content.\nGetting the Proposed Drop Location\nvar intent: UICollectionViewDropProposal.Intent\nThe option to use when incorporating the dropped items into your content.\nenum UICollectionViewDropProposal.Intent\nConstants indicating how you intend to handle a drop.\nenum UIDropOperation\nOperation types that determine how a drag and drop activity resolves when the user drops a drag item.\nRelationships\nInherits From\nUIDropProposal\nSee Also\nDrag and drop\nSupporting Drag and Drop in Collection Views\nInitiate drags and handle drops from a collection view.\nprotocol UICollectionViewDragDelegate\nThe interface for initiating drags from a collection view.\nprotocol UICollectionViewDropDelegate\nThe interface for handling drops in a collection view.\nprotocol UICollectionViewDropCoordinator\nAn interface for coordinating your custom drop-related actions with the collection view.\nclass UICollectionViewDropPlaceholder\nA placeholder for an item dropped on a collection view.\nprotocol UICollectionViewDropItem\nThe data associated with an item being dropped into the collection view.\nprotocol UICollectionViewDropPlaceholderContext\nAn object that contains information about a placeholder in the collection view.\nprotocol UIDataSourceTranslating\nAn advanced interface for managing a data source object.\nclass UICollectionViewPlaceholder\nA placeholder for an item dragged or dropped on a collection view."
  },
  {
    "title": "UICollectionViewDropItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdropitem",
    "html": "Overview\n\nWhen handling a drop, you get instances of this class from the items property of the UICollectionViewDropCoordinator object. Use them to retrieve the data for the items being dragged and to plan any animations related to dropping the items. You do not create instances of this class yourself.\n\nTopics\nGetting the Drag Item\nvar dragItem: UIDragItem\nThe item that was dragged.\n\nRequired\n\nGetting the Item Information\nvar previewSize: CGSize\nThe size of the drag item's preview.\n\nRequired\n\nvar sourceIndexPath: IndexPath?\nThe index path of the item in the collection view, if any.\n\nRequired\n\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nDrag and drop\nSupporting Drag and Drop in Collection Views\nInitiate drags and handle drops from a collection view.\nprotocol UICollectionViewDragDelegate\nThe interface for initiating drags from a collection view.\nprotocol UICollectionViewDropDelegate\nThe interface for handling drops in a collection view.\nprotocol UICollectionViewDropCoordinator\nAn interface for coordinating your custom drop-related actions with the collection view.\nclass UICollectionViewDropPlaceholder\nA placeholder for an item dropped on a collection view.\nclass UICollectionViewDropProposal\nYour proposed solution for handling a drop in a collection view.\nprotocol UICollectionViewDropPlaceholderContext\nAn object that contains information about a placeholder in the collection view.\nprotocol UIDataSourceTranslating\nAn advanced interface for managing a data source object.\nclass UICollectionViewPlaceholder\nA placeholder for an item dragged or dropped on a collection view."
  },
  {
    "title": "isContinuous | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistepper/1624082-iscontinuous",
    "html": "Discussion\n\nIf true, the stepper sends value change events immediately as the value changes during user interaction. If false, the stepper sends a value change event after user interaction ends.\n\nThe default value for this property is true.\n\nSee Also\nConfiguring the stepper\nvar autorepeat: Bool\nA Boolean value that determines whether to repeatedly change the stepper’s value as the user presses and holds a stepper button.\nvar wraps: Bool\nA Boolean value that determines whether the stepper can wrap its value to the minimum or maximum value when incrementing and decrementing the value.\nvar minimumValue: Double\nThe lowest possible numeric value for the stepper.\nvar maximumValue: Double\nThe highest possible numeric value for the stepper.\nvar stepValue: Double\nThe step, or increment, value for the stepper."
  },
  {
    "title": "contextMenuInteraction(_:willDisplayMenuFor:animator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/3601219-contextmenuinteraction",
    "html": "See Also\nManaging context menus\nAdding Context Menus in Your App\nProvide quick access to useful actions by adding context menus to your iOS app.\nvar contextMenuInteraction: UIContextMenuInteraction?\nA context menu interaction for the control.\nvar isContextMenuInteractionEnabled: Bool\nA Boolean value that determines whether the control enables its context menu interaction.\nvar showsMenuAsPrimaryAction: Bool\nA Boolean value that determines whether the context menu interaction is the control’s primary action.\nfunc contextMenuInteraction(UIContextMenuInteraction, configurationForMenuAtLocation: CGPoint) -> UIContextMenuConfiguration?\nfunc contextMenuInteraction(UIContextMenuInteraction, previewForDismissingMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nfunc contextMenuInteraction(UIContextMenuInteraction, previewForHighlightingMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nfunc contextMenuInteraction(UIContextMenuInteraction, willEndFor: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nfunc menuAttachmentPoint(for: UIContextMenuConfiguration) -> CGPoint"
  },
  {
    "title": "contextMenuInteraction(_:configurationForMenuAtLocation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/3601216-contextmenuinteraction",
    "html": "See Also\nManaging context menus\nAdding Context Menus in Your App\nProvide quick access to useful actions by adding context menus to your iOS app.\nvar contextMenuInteraction: UIContextMenuInteraction?\nA context menu interaction for the control.\nvar isContextMenuInteractionEnabled: Bool\nA Boolean value that determines whether the control enables its context menu interaction.\nvar showsMenuAsPrimaryAction: Bool\nA Boolean value that determines whether the context menu interaction is the control’s primary action.\nfunc contextMenuInteraction(UIContextMenuInteraction, previewForDismissingMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nfunc contextMenuInteraction(UIContextMenuInteraction, previewForHighlightingMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nfunc contextMenuInteraction(UIContextMenuInteraction, willDisplayMenuFor: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nfunc contextMenuInteraction(UIContextMenuInteraction, willEndFor: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nfunc menuAttachmentPoint(for: UIContextMenuConfiguration) -> CGPoint"
  },
  {
    "title": "isContextMenuInteractionEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/3601222-iscontextmenuinteractionenabled",
    "html": "Discussion\n\nThe default value is false.\n\nSee Also\nManaging context menus\nAdding Context Menus in Your App\nProvide quick access to useful actions by adding context menus to your iOS app.\nvar contextMenuInteraction: UIContextMenuInteraction?\nA context menu interaction for the control.\nvar showsMenuAsPrimaryAction: Bool\nA Boolean value that determines whether the context menu interaction is the control’s primary action.\nfunc contextMenuInteraction(UIContextMenuInteraction, configurationForMenuAtLocation: CGPoint) -> UIContextMenuConfiguration?\nfunc contextMenuInteraction(UIContextMenuInteraction, previewForDismissingMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nfunc contextMenuInteraction(UIContextMenuInteraction, previewForHighlightingMenuWithConfiguration: UIContextMenuConfiguration) -> UITargetedPreview?\nfunc contextMenuInteraction(UIContextMenuInteraction, willDisplayMenuFor: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nfunc contextMenuInteraction(UIContextMenuInteraction, willEndFor: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)\nfunc menuAttachmentPoint(for: UIContextMenuConfiguration) -> CGPoint"
  },
  {
    "title": "UIControl.State | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/state",
    "html": "Overview\n\nA control can have more than one state at a time. Controls can have different configurations according to their state. For example, a UIButton object can display one image when it’s in its normal state and a different image when it’s highlighted.\n\nTopics\nConstants\nstatic var normal: UIControl.State\nThe normal, or default, state of a control where the control is enabled but neither selected nor highlighted.\nstatic var highlighted: UIControl.State\nThe highlighted state of a control.\nstatic var disabled: UIControl.State\nThe disabled state of a control.\nstatic var selected: UIControl.State\nThe selected state of a control.\nstatic var focused: UIControl.State\nThe focused state of a control.\nstatic var application: UIControl.State\nAdditional control-state flags available for app use.\nstatic var reserved: UIControl.State\nControl-state flags reserved for internal framework use.\nInitializers\ninit(rawValue: UInt)\nCreates a control state with the specified raw value.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nManaging state\nvar state: UIControl.State\nThe state of the control, specified as a bit mask value.\nvar isEnabled: Bool\nA Boolean value indicating whether the control is in the enabled state.\nvar isSelected: Bool\nA Boolean value indicating whether the control is in the selected state.\nvar isHighlighted: Bool\nA Boolean value indicating whether the control draws a highlight."
  },
  {
    "title": "isEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/1618217-isenabled",
    "html": "Discussion\n\nSet the value of this property to true to enable the control or false to disable it. An enabled control is capable of responding to user interactions, whereas a disabled control ignores touch events and may draw itself differently. Setting this property to false adds the disabled flag to the control’s state bitmask; enabling the control again removes that flag.\n\nThe default value of this property is true for a newly created control. You can set a control’s initial enabled state in your storyboard file.\n\nSee Also\nManaging state\nvar state: UIControl.State\nThe state of the control, specified as a bit mask value.\nstruct UIControl.State\nConstants describing the state of a control.\nvar isSelected: Bool\nA Boolean value indicating whether the control is in the selected state.\nvar isHighlighted: Bool\nA Boolean value indicating whether the control draws a highlight."
  },
  {
    "title": "commitAnimations() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/1622664-commitanimations",
    "html": "Discussion\n\nIf the current animation set is the outermost set, this method starts the animations when the application returns to the run loop. If the current animation set is nested inside another set, this method waits until the outermost set of animations is committed, at which point it commits all of the animations together.\n\nAnimations run in a separate thread to avoid blocking the application. In this way, multiple animations can be piled on top of one another. See setAnimationBeginsFromCurrentState(_:) for how to start animations while others are in progress.\n\nUse of this method is discouraged in iOS 4.0 and later. You should use the block-based animation methods to specify your animations instead.\n\nSee Also\nDeprecated methods\nclass func beginAnimations(String?, context: UnsafeMutableRawPointer?)\nMarks the beginning of a begin/commit animation block.\nDeprecated\nclass func setAnimationStart(Date)\nSets the start time for the current animation block.\nDeprecated\nclass func setAnimationsEnabled(Bool)\nSets whether animations are enabled.\nclass func setAnimationDelegate(Any?)\nSets the delegate for any animation messages.\nDeprecated\nclass func setAnimationWillStart(Selector?)\nSets the message to send to the animation delegate when the animation starts.\nDeprecated\nclass func setAnimationDidStop(Selector?)\nSets the message to send to the animation delegate when animation stops.\nDeprecated\nclass func setAnimationDuration(TimeInterval)\nSets the duration (measured in seconds) of the animations in an animation block.\nDeprecated\nclass func setAnimationDelay(TimeInterval)\nSets the amount of time (in seconds) to wait before animating property changes within an animation block.\nDeprecated\nclass func setAnimationCurve(UIView.AnimationCurve)\nSets the curve to use when animating property changes within an animation block.\nDeprecated\nclass func setAnimationRepeatCount(Float)\nSets the number of times animations within an animation block repeat.\nDeprecated\nclass func setAnimationRepeatAutoreverses(Bool)\nSets whether the animations within an animation block automatically reverse themselves.\nDeprecated\nclass func setAnimationBeginsFromCurrentState(Bool)\nSets whether the animation should begin playing from the current state.\nDeprecated\nclass func setAnimationTransition(UIView.AnimationTransition, for: UIView, cache: Bool)\nSets a transition to apply to a view during an animation block.\nDeprecated\nclass var areAnimationsEnabled: Bool\nReturns a Boolean value indicating whether animations are enabled.\nfunc forBaselineLayout() -> UIView\nReturns a view used to satisfy baseline constraints.\nDeprecated"
  },
  {
    "title": "beginTracking(_:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/1618227-begintracking",
    "html": "Parameters\ntouch\n\nThe object containing information about the touch event.\n\nevent\n\nThe event object containing the touch event.\n\nReturn Value\n\ntrue if the control should continue tracking touch events or false if it should stop. This value is used to update the isTracking property of the control.\n\nDiscussion\n\nThe default implementation of this method always returns true. Subclasses can override this method and use it to respond to events. Use the provided event information to detect which part of your control was hit and to set up any initial state information. If you want to continue tracking the touch event, return true. If you want to stop tracking the touch event, return false.\n\nSee Also\nTracking touches and redrawing controls\nfunc continueTracking(UITouch, with: UIEvent?) -> Bool\nNotifies the control when a touch event for the control updates.\nfunc endTracking(UITouch?, with: UIEvent?)\nNotifies the control when a touch event associated with the control ends.\nfunc cancelTracking(with: UIEvent?)\nNotifies the control to cancel tracking related to the specified event.\nvar isTracking: Bool\nA Boolean value that indicates whether the control is currently tracking touch events.\nvar isTouchInside: Bool\nA Boolean value that indicates whether a tracked touch event is currently inside the control’s bounds."
  },
  {
    "title": "allControlEvents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/1618225-allcontrolevents",
    "html": "Return Value\n\nA bitmask of constants indicating the events for which this control has associated actions. For a list of possible constants, see the UIControl.Event type.\n\nDiscussion\n\nYou can use this method to ascertain which control events trigger actions. More than one action method may be called for a given event.\n\nSee Also\nManaging the control’s targets and actions\nfunc addTarget(Any?, action: Selector, for: UIControl.Event)\nAssociates a target object and action method with the control.\nfunc removeTarget(Any?, action: Selector?, for: UIControl.Event)\nStops the delivery of events to the specified target object.\nvar allTargets: Set<AnyHashable>\nReturns all target objects associated with the control.\nfunc addAction(UIAction, for: UIControl.Event)\nfunc removeAction(UIAction, for: UIControl.Event)\nfunc removeAction(identifiedBy: UIAction.Identifier, for: UIControl.Event)\nfunc actions(forTarget: Any?, forControlEvent: UIControl.Event) -> [String]?\nReturns the actions performed on a target object when the specified event occurs.\nfunc enumerateEventHandlers((UIAction?, (Any?, Selector)?, UIControl.Event, inout Bool) -> Void)"
  },
  {
    "title": "allTargets | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/1618207-alltargets",
    "html": "Return Value\n\nA set of all target objects associated with the control. The returned set may include one or more NSNull objects to indicate actions that are dispatched to the responder chain.\n\nSee Also\nManaging the control’s targets and actions\nfunc addTarget(Any?, action: Selector, for: UIControl.Event)\nAssociates a target object and action method with the control.\nfunc removeTarget(Any?, action: Selector?, for: UIControl.Event)\nStops the delivery of events to the specified target object.\nfunc addAction(UIAction, for: UIControl.Event)\nfunc removeAction(UIAction, for: UIControl.Event)\nfunc removeAction(identifiedBy: UIAction.Identifier, for: UIControl.Event)\nfunc actions(forTarget: Any?, forControlEvent: UIControl.Event) -> [String]?\nReturns the actions performed on a target object when the specified event occurs.\nvar allControlEvents: UIControl.Event\nReturns the events for which the control has associated actions.\nfunc enumerateEventHandlers((UIAction?, (Any?, Selector)?, UIControl.Event, inout Bool) -> Void)"
  },
  {
    "title": "actions(forTarget:forControlEvent:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/1618251-actions",
    "html": "Parameters\ntarget\n\nThe target object—that is, an object that has an action method associated with this control. You must pass an explicit object for this method to return a meaningful result. Specifying nil always returns nil.\n\ncontrolEvent\n\nA single control event constant representing the event for which you want the list of action methods. For a list of possible constants, see UIControl.Event\n\nReturn Value\n\nAn array NSString objects containing the selector names of the corresponding action methods, or nil if there are no action methods associated with the specified target object and control event.\n\nDiscussion\n\nUse this method to determine what action methods are called on the specified object in response to a particular control event. You can use the NSSelectorFromString(_:) function to convert the returned strings to valid selectors, as needed.\n\nSee Also\nManaging the control’s targets and actions\nfunc addTarget(Any?, action: Selector, for: UIControl.Event)\nAssociates a target object and action method with the control.\nfunc removeTarget(Any?, action: Selector?, for: UIControl.Event)\nStops the delivery of events to the specified target object.\nvar allTargets: Set<AnyHashable>\nReturns all target objects associated with the control.\nfunc addAction(UIAction, for: UIControl.Event)\nfunc removeAction(UIAction, for: UIControl.Event)\nfunc removeAction(identifiedBy: UIAction.Identifier, for: UIControl.Event)\nvar allControlEvents: UIControl.Event\nReturns the events for which the control has associated actions.\nfunc enumerateEventHandlers((UIAction?, (Any?, Selector)?, UIControl.Event, inout Bool) -> Void)\nRelated Documentation\nfunc sendAction(Selector, to: Any?, for: UIEvent?)\nCalls the specified action method.\nfunc sendActions(for: UIControl.Event)\nCalls the action methods associated with the specified events."
  },
  {
    "title": "pasteDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextpasteconfigurationsupporting/2887494-pastedelegate",
    "html": "Required"
  },
  {
    "title": "scalesLargeContentImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilargecontentvieweritem/3183935-scaleslargecontentimage",
    "html": "Required\n\nDiscussion\n\nIf false, the viewer displays the image at its intrinsic size.\n\nTip\n\nFor best results when scaling, use a PDF asset with the Preserve Vector Data checked in the asset catalog.\n\nSee Also\nConfiguring display properties\nvar largeContentTitle: String?\nA string that describes an item to display in the large content viewer.\n\nRequired\n\nvar largeContentImage: UIImage?\nAn image that represents an item to display in the large content viewer.\n\nRequired\n\nvar largeContentImageInsets: UIEdgeInsets\nInsets to adjust the position of the item’s image so it appears visually centered in the large content viewer.\n\nRequired"
  },
  {
    "title": "isAnimating | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivityindicatorview/2097554-isanimating",
    "html": "See Also\nManaging an activity indicator\nfunc startAnimating()\nStarts the animation of the progress indicator.\nfunc stopAnimating()\nStops the animation of the progress indicator.\nvar hidesWhenStopped: Bool\nA Boolean value that controls whether the activity indicator is hidden when the animation is stopped."
  },
  {
    "title": "reloadDecorations(forDateComponents:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicalendarview/3972044-reloaddecorations",
    "html": "Parameters\ndates\n\nAn array of dates to reload that you provide as date components.\n\nanimated\n\nA Boolean value that indicates whether the calendar view should animate the decoration reload.\n\nSee Also\nCustomizing the calendar display\nvar fontDesign: UIFontDescriptor.SystemDesign\nA font design that the calendar view uses for displaying calendar text.\nvar delegate: UICalendarViewDelegate?\nA delegate object the calendar view calls for decoration views.\nprotocol UICalendarViewDelegate\nAn object that a calendar view uses to display decorations for dates.\nclass UICalendarView.Decoration\nA view that a calendar view displays for a specific date.\nenum UICalendarView.DecorationSize\nConstants that indicate the relative size of a decoration in a calendar view.\nvar wantsDateDecorations: Bool\nA Boolean value that indicates whether the calendar view displays date decorations."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicalendarview/3972039-delegate",
    "html": "See Also\nCustomizing the calendar display\nvar fontDesign: UIFontDescriptor.SystemDesign\nA font design that the calendar view uses for displaying calendar text.\nprotocol UICalendarViewDelegate\nAn object that a calendar view uses to display decorations for dates.\nclass UICalendarView.Decoration\nA view that a calendar view displays for a specific date.\nenum UICalendarView.DecorationSize\nConstants that indicate the relative size of a decoration in a calendar view.\nvar wantsDateDecorations: Bool\nA Boolean value that indicates whether the calendar view displays date decorations.\nfunc reloadDecorations(forDateComponents: [DateComponents], animated: Bool)\nReloads the decorations for the dates you provide, with an option to animate the decoration reload."
  },
  {
    "title": "UICollectionViewDiffableDataSource | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdiffabledatasource",
    "html": "Overview\n\nA diffable data source object is a specialized type of data source that works together with your collection view object. It provides the behavior you need to manage updates to your collection view’s data and UI in a simple, efficient way. It also conforms to the UICollectionViewDataSource protocol and provides implementations for all of the protocol’s methods.\n\nTo fill a collection view with data:\n\nConnect a diffable data source to your collection view.\n\nImplement a cell provider to configure your collection view’s cells.\n\nGenerate the current state of the data.\n\nDisplay the data in the UI.\n\nTo connect a diffable data source to a collection view, you create the diffable data source using its init(collectionView:cellProvider:) initializer, passing in the collection view you want to associate with that data source. You also pass in a cell provider, where you configure each of your cells to determine how to display your data in the UI.\n\ndataSource = UICollectionViewDiffableDataSource<Int, UUID>(collectionView: collectionView) {\n    (collectionView: UICollectionView, indexPath: IndexPath, itemIdentifier: UUID) -> UICollectionViewCell? in\n    // Configure and return cell.\n}\n\n\nThen, you generate the current state of the data and display the data in the UI by constructing and applying a snapshot. For more information, see NSDiffableDataSourceSnapshot.\n\nImportant\n\nDon’t change the dataSource on the collection view after you configure it with a diffable data source. If the collection view needs a new data source after you configure it initially, create and configure a new collection view and diffable data source.\n\nTopics\nCreating a diffable data source\ninit(collectionView: UICollectionView, cellProvider: UICollectionViewDiffableDataSource<SectionIdentifierType, ItemIdentifierType>.CellProvider)\nCreates a diffable data source with the specified cell provider, and connects it to the specified collection view.\ntypealias UICollectionViewDiffableDataSource.CellProvider\nA closure that configures and returns a cell for a collection view from its diffable data source.\nCreating supplementary views\nvar supplementaryViewProvider: UICollectionViewDiffableDataSource<SectionIdentifierType, ItemIdentifierType>.SupplementaryViewProvider?\nThe closure that configures and returns the collection view’s supplementary views, such as headers and footers, from the diffable data source.\ntypealias UICollectionViewDiffableDataSource.SupplementaryViewProvider\nA closure that configures and returns a collection view’s supplementary view, such as a header or footer, from a diffable data source.\nIdentifying items\nfunc itemIdentifier(for: IndexPath) -> ItemIdentifierType?\nReturns an identifier for the item at the specified index path in the collection view.\nfunc indexPath(for: ItemIdentifierType) -> IndexPath?\nReturns an index path for the item with the specified identifier in the collection view.\nIdentifying sections\nfunc sectionIdentifier(for: Int) -> SectionIdentifierType?\nReturns an identifier for the section at the index you specify in the collection view.\nfunc index(for: SectionIdentifierType) -> Int?\nReturns an index for the section with the identifier you specify in the collection view.\nUpdating data\nfunc snapshot() -> NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType>\nReturns a representation of the current state of the data in the collection view.\nfunc apply(NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType>, animatingDifferences: Bool)\nUpdates the UI to reflect the state of the data in the snapshot, optionally animating the UI changes.\nfunc apply(NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType>, animatingDifferences: Bool, completion: (() -> Void)?)\nUpdates the UI to reflect the state of the data in the snapshot, optionally animating the UI changes and executing a completion handler.\nfunc applySnapshotUsingReloadData(NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType>)\nResets the UI to reflect the state of the data in the snapshot without computing a diff or animating the changes.\nfunc applySnapshotUsingReloadData(NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType>, completion: (() -> Void)?)\nResets the UI to reflect the state of the data in the snapshot without computing a diff or animating the changes, optionally executing a completion handler.\nUpdating section data\nfunc snapshot(for: SectionIdentifierType) -> NSDiffableDataSourceSectionSnapshot<ItemIdentifierType>\nReturns a representation of the current state of the data in the specified section of the collection view.\nfunc apply(NSDiffableDataSourceSectionSnapshot<ItemIdentifierType>, to: SectionIdentifierType, animatingDifferences: Bool, completion: (() -> Void)?)\nUpdates the section UI to reflect the state of the data in the specified snapshot, optionally animating the UI changes and executing a completion handler.\nfunc apply(NSDiffableDataSourceSectionSnapshot<ItemIdentifierType>, to: SectionIdentifierType, animatingDifferences: Bool)\nUpdates the section UI to reflect the state of the data in the specified snapshot, optionally animating the UI changes.\nSupporting reordering\nvar reorderingHandlers: UICollectionViewDiffableDataSource<SectionIdentifierType, ItemIdentifierType>.ReorderingHandlers\nThe diffable data source’s handlers for reordering items.\nstruct UICollectionViewDiffableDataSource.ReorderingHandlers\nHandlers for reordering items.\nstruct NSDiffableDataSourceTransaction\nA transaction that describes the changes after reordering the items in the view.\nstruct NSDiffableDataSourceSectionTransaction\nA transaction that describes the changes after reordering the items in a section.\nSupporting expanding and collapsing\nvar sectionSnapshotHandlers: UICollectionViewDiffableDataSource<SectionIdentifierType, ItemIdentifierType>.SectionSnapshotHandlers<ItemIdentifierType>\nThe diffable data source’s handlers for expanding and collapsing items.\nstruct UICollectionViewDiffableDataSource.SectionSnapshotHandlers\nHandlers for expanding and collapsing items.\nSupporting protocol requirements\nProtocol implementations\nAccess the diffable data source’s implementations of protocol methods.\nSupporting bridging\nclass UICollectionViewDiffableDataSourceReference\nThe Swift representation of the Objective-C object you use to manage data and provide items for a collection view.\nRelationships\nInherits From\nNSObject\nConforms To\nUICollectionViewDataSource\nSee Also\nData\nUpdating Collection Views Using Diffable Data Sources\nStreamline the display and update of data in a collection view using a diffable data source that contains identifiers.\nImplementing Modern Collection Views\nBring compositional layouts to your app and simplify updating your user interface with diffable data sources.\nBuilding High-Performance Lists and Collection Views\nImprove the performance of lists and collections in your app with prefetching and image preparation.\nprotocol UICollectionViewDataSource\nThe methods adopted by the object you use to manage data and provide cells for a collection view.\nprotocol UICollectionViewDataSourcePrefetching\nA protocol that provides advance warning of the data requirements for a collection view, allowing the triggering of asynchronous data load operations.\nstruct NSDiffableDataSourceSnapshot\nA representation of the state of the data in a view at a specific point in time.\nstruct NSDiffableDataSourceSectionSnapshot\nA representation of the state of the data in a layout section at a specific point in time.\nclass UIRefreshControl\nA standard control that can initiate the refreshing of a scroll view’s contents."
  },
  {
    "title": "Implementing Modern Collection Views | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/views_and_controls/collection_views/implementing_modern_collection_views",
    "html": "Overview\n\nCollection views let you present a set of data in flexible visual arrangements. This sample app shows how to create various types of layouts and manage data in collection views. The sample focuses on two key technologies:\n\nCompositional layout, a type of collection view layout that’s composable, flexible, and fast, letting you build any kind of visual arrangement for your content.\n\nDiffable data source, a specialized type of data source that provides the behavior you need to simply and efficiently manage updates to your collection view’s data and user interface.\n\nConfigure the Sample Code Project\n\nTo run the sample code project in Xcode, first choose whether to view the examples in iOS or macOS.\n\nTo view examples in iOS:\n\nChoose the Modern Collection Views target.\n\nIn the Scheme menu, choose an iOS simulator to run the app.\n\nTo view examples in macOS:\n\nChoose the Modern Collection Views Mac target.\n\nIn the Scheme menu, choose My Mac.\n\nIn Build Settings for the target, under Signing & Capabilities > Signing Certificate, choose Sign to Run Locally.\n\nRun the app, and navigate to the examples from the Example menu.\n\nThe code examples shown here are from the iOS target, but you can find macOS-equivalent examples in the .swift files for the macOS target.\n\nCreate a Grid Layout\n\nThe Grid example shows how to create a grid layout by using fractional sizing to make a row of five equally sized items. It creates a horizontal group with items that are each 20% of the width of the group by using .fractionalWidth(0.2). Each row of five items is repeated multiple times in a single section to create a grid.\n\nlet itemSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(0.2),\n                                     heightDimension: .fractionalHeight(1.0))\nlet item = NSCollectionLayoutItem(layoutSize: itemSize)\n\n\nlet groupSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1.0),\n                                      heightDimension: .fractionalWidth(0.2))\nlet group = NSCollectionLayoutGroup.horizontal(layoutSize: groupSize,\n                                                 subitems: [item])\n\n\nlet section = NSCollectionLayoutSection(group: group)\n\n\nlet layout = UICollectionViewCompositionalLayout(section: section)\nreturn layout\n\n\nAdd Spacing Around Items\n\nThe Inset Items Grid example builds on the layout from the Grid example, showing how to add spacing around items by using the contentInsets property. Here, this property applies even spacing around the edges of each item.\n\nlet itemSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(0.2),\n                                     heightDimension: .fractionalHeight(1.0))\nlet item = NSCollectionLayoutItem(layoutSize: itemSize)\nitem.contentInsets = NSDirectionalEdgeInsets(top: 5, leading: 5, bottom: 5, trailing: 5)\n\n\nCreate a Column Layout\n\nThe Two-Column Grid example shows how to create a two-column layout by making a group with the exact number of items specified in the count parameter of horizontal(layoutSize:subitem:count:). This approach simplifies specifying exactly how many items a group contains. In this case, the count parameter takes precedence over itemSize, and item size is computed automatically to fit the specified number of items.\n\nlet itemSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1.0),\n                                     heightDimension: .fractionalHeight(1.0))\nlet item = NSCollectionLayoutItem(layoutSize: itemSize)\n\n\nlet groupSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1.0),\n                                      heightDimension: .absolute(44))\nlet group = NSCollectionLayoutGroup.horizontal(layoutSize: groupSize, subitem: item, count: 2)\nlet spacing = CGFloat(10)\ngroup.interItemSpacing = .fixed(spacing)\n\n\nDisplay Distinct Layouts Per Section\n\nThe Distinct Sections example shows how to display different layout arrangements in different sections of the same collection view layout. Creating a layout with different sections requires a compositional layout with a section provider. The code in the section provider accesses the section’s index (sectionIndex) to determine which section it’s configuring, and displays a different layout for each section.\n\nlet layout = UICollectionViewCompositionalLayout { (sectionIndex: Int,\n    layoutEnvironment: NSCollectionLayoutEnvironment) -> NSCollectionLayoutSection? in\n\n\n    guard let sectionLayoutKind = SectionLayoutKind(rawValue: sectionIndex) else { return nil }\n    let columns = sectionLayoutKind.columnCount\n\n\n    // The group auto-calculates the actual item width to make\n    // the requested number of columns fit, so this widthDimension is ignored.\n    let itemSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1.0),\n                                         heightDimension: .fractionalHeight(1.0))\n    let item = NSCollectionLayoutItem(layoutSize: itemSize)\n    item.contentInsets = NSDirectionalEdgeInsets(top: 2, leading: 2, bottom: 2, trailing: 2)\n\n\n    let groupHeight = columns == 1 ?\n        NSCollectionLayoutDimension.absolute(44) :\n        NSCollectionLayoutDimension.fractionalWidth(0.2)\n    let groupSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1.0),\n                                          heightDimension: groupHeight)\n    let group = NSCollectionLayoutGroup.horizontal(layoutSize: groupSize, subitem: item, count: columns)\n\n\n    let section = NSCollectionLayoutSection(group: group)\n    section.contentInsets = NSDirectionalEdgeInsets(top: 20, leading: 20, bottom: 20, trailing: 20)\n    return section\n}\nreturn layout\n\n\nDisplay Distinct Layouts in Different Environments\n\nThe Adaptive Sections example shows how to create a layout that adapts to the environment it’s displayed in. In this example, the number of columns shown changes based on the available screen size. Creating a layout that adapts to a new environment requires a compositional layout with a section provider. The code in the section provider accesses the amount of available space in the current layout environment (layoutEnvironment.container.effectiveContentSize), and displays a different number of columns based on the available width.\n\nlet layout = UICollectionViewCompositionalLayout {\n    (sectionIndex: Int, layoutEnvironment: NSCollectionLayoutEnvironment) -> NSCollectionLayoutSection? in\n    guard let layoutKind = SectionLayoutKind(rawValue: sectionIndex) else { return nil }\n\n\n    let columns = layoutKind.columnCount(for: layoutEnvironment.container.effectiveContentSize.width)\n\n\n    let itemSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(0.2),\n                                         heightDimension: .fractionalHeight(1.0))\n    let item = NSCollectionLayoutItem(layoutSize: itemSize)\n    item.contentInsets = NSDirectionalEdgeInsets(top: 2, leading: 2, bottom: 2, trailing: 2)\n\n\n    let groupHeight = layoutKind == .list ?\n        NSCollectionLayoutDimension.absolute(44) : NSCollectionLayoutDimension.fractionalWidth(0.2)\n    let groupSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1.0),\n                                           heightDimension: groupHeight)\n    let group = NSCollectionLayoutGroup.horizontal(layoutSize: groupSize, subitem: item, count: columns)\n\n\n    let section = NSCollectionLayoutSection(group: group)\n    section.contentInsets = NSDirectionalEdgeInsets(top: 20, leading: 20, bottom: 20, trailing: 20)\n    return section\n}\nreturn layout\n\n\nAdd Badges to Items\n\nThe Item Badges example shows how to add supplementary views like badges to the items in a collection view. It creates and adds a badge to the top trailing corner of each item by creating a supplementary item for the badge, and passing in that supplementary item when creating the item itself. The data source configures each badge in its supplementaryViewProvider.\n\nlet badgeAnchor = NSCollectionLayoutAnchor(edges: [.top, .trailing], fractionalOffset: CGPoint(x: 0.3, y: -0.3))\nlet badgeSize = NSCollectionLayoutSize(widthDimension: .absolute(20),\n                                      heightDimension: .absolute(20))\nlet badge = NSCollectionLayoutSupplementaryItem(\n    layoutSize: badgeSize,\n    elementKind: ItemBadgeSupplementaryViewController.badgeElementKind,\n    containerAnchor: badgeAnchor)\n\n\nlet itemSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(0.25),\n                                     heightDimension: .fractionalHeight(1.0))\nlet item = NSCollectionLayoutItem(layoutSize: itemSize, supplementaryItems: [badge])\nitem.contentInsets = NSDirectionalEdgeInsets(top: 5, leading: 5, bottom: 5, trailing: 5)\n\n\nAdd Headers and Footers to Sections\n\nThe Section Headers/Footers example shows how to add headers and footers to each section of the collection view. It creates boundary supplementary items to represent the header and the footer, and sets them as the section’s boundarySupplementaryItems.\n\nlet headerFooterSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1.0),\n                                             heightDimension: .estimated(44))\nlet sectionHeader = NSCollectionLayoutBoundarySupplementaryItem(\n    layoutSize: headerFooterSize,\n    elementKind: SectionHeadersFootersViewController.sectionHeaderElementKind, alignment: .top)\nlet sectionFooter = NSCollectionLayoutBoundarySupplementaryItem(\n    layoutSize: headerFooterSize,\n    elementKind: SectionHeadersFootersViewController.sectionFooterElementKind, alignment: .bottom)\nsection.boundarySupplementaryItems = [sectionHeader, sectionFooter]\n\n\nThe example uses supplementary registrations for the header and footer to configure their content and appearance.\n\nlet headerRegistration = UICollectionView.SupplementaryRegistration\n<TitleSupplementaryView>(elementKind: SectionHeadersFootersViewController.sectionHeaderElementKind) {\n    (supplementaryView, string, indexPath) in\n    supplementaryView.label.text = \"\\(string) for section \\(indexPath.section)\"\n    supplementaryView.backgroundColor = .lightGray\n    supplementaryView.layer.borderColor = UIColor.black.cgColor\n    supplementaryView.layer.borderWidth = 1.0\n}\n\n\nThe collection view uses these supplementary registrations to dequeue the configured headers and footers in the diffable data source’s supplementaryViewProvider.\n\ndataSource.supplementaryViewProvider = { (view, kind, index) in\n    return self.collectionView.dequeueConfiguredReusableSupplementary(\n        using: kind == SectionHeadersFootersViewController.sectionHeaderElementKind ? headerRegistration : footerRegistration, for: index)\n}\n\n\nPin Section Headers to Sections\n\nThe Pinned Section Headers example shows how to pin a section header to its section. This way, the header shows while any portion of the section it’s attached to is visible during scrolling, and the footer stays in place. This example sets the header’s pinToVisibleBounds property to true and increases its zIndex to a value greater than 1 so the header appears on top of the section during scrolling.\n\nlet sectionHeader = NSCollectionLayoutBoundarySupplementaryItem(\n    layoutSize: NSCollectionLayoutSize(widthDimension: .fractionalWidth(1.0),\n                                      heightDimension: .estimated(44)),\n    elementKind: PinnedSectionHeaderFooterViewController.sectionHeaderElementKind,\n    alignment: .top)\nlet sectionFooter = NSCollectionLayoutBoundarySupplementaryItem(\n    layoutSize: NSCollectionLayoutSize(widthDimension: .fractionalWidth(1.0),\n                                      heightDimension: .estimated(44)),\n    elementKind: PinnedSectionHeaderFooterViewController.sectionFooterElementKind,\n    alignment: .bottom)\nsectionHeader.pinToVisibleBounds = true\nsectionHeader.zIndex = 2\nsection.boundarySupplementaryItems = [sectionHeader, sectionFooter]\n\n\nThe example uses supplementary registrations for the header and footer to configure their content and appearance. The collection view uses these supplementary registrations to dequeue the configured headers and footers in the diffable data source’s supplementaryViewProvider.\n\ndataSource.supplementaryViewProvider = { (view, kind, index) in\n    return self.collectionView.dequeueConfiguredReusableSupplementary(\n        using: kind == PinnedSectionHeaderFooterViewController.sectionHeaderElementKind ? headerRegistration : footerRegistration, for: index)\n}\n\n\nDecorate Sections with Backgrounds\n\nThe Section Background Decoration example shows how to distinguish sections by adding section backgrounds. It creates a section background by making a decoration item using background(elementKind:). It then sets that decoration item as the section’s decorationItems property.\n\nlet sectionBackgroundDecoration = NSCollectionLayoutDecorationItem.background(\n    elementKind: SectionDecorationViewController.sectionBackgroundDecorationElementKind)\nsectionBackgroundDecoration.contentInsets = NSDirectionalEdgeInsets(top: 5, leading: 5, bottom: 5, trailing: 5)\nsection.decorationItems = [sectionBackgroundDecoration]\n\n\nThe following code then registers the background view with the layout by using register(_:forDecorationViewOfKind:).\n\nlet layout = UICollectionViewCompositionalLayout(section: section)\nlayout.register(\n    SectionBackgroundDecorationView.self,\n    forDecorationViewOfKind: SectionDecorationViewController.sectionBackgroundDecorationElementKind)\nreturn layout\n\n\nCreate Custom Layouts by Nesting Groups\n\nThe Nested Groups example shows how to create flexible layout arrangements by nesting groups inside of other groups. It creates a vertical group with two items, and combines the vertical group with an item in a horizontal parent group.\n\nlet leadingItem = NSCollectionLayoutItem(\n    layoutSize: NSCollectionLayoutSize(widthDimension: .fractionalWidth(0.7),\n                                      heightDimension: .fractionalHeight(1.0)))\nleadingItem.contentInsets = NSDirectionalEdgeInsets(top: 10, leading: 10, bottom: 10, trailing: 10)\n\n\nlet trailingItem = NSCollectionLayoutItem(\n    layoutSize: NSCollectionLayoutSize(widthDimension: .fractionalWidth(1.0),\n                                      heightDimension: .fractionalHeight(0.3)))\ntrailingItem.contentInsets = NSDirectionalEdgeInsets(top: 10, leading: 10, bottom: 10, trailing: 10)\nlet trailingGroup = NSCollectionLayoutGroup.vertical(\n    layoutSize: NSCollectionLayoutSize(widthDimension: .fractionalWidth(0.3),\n                                      heightDimension: .fractionalHeight(1.0)),\n    subitem: trailingItem, count: 2)\n\n\nlet nestedGroup = NSCollectionLayoutGroup.horizontal(\n    layoutSize: NSCollectionLayoutSize(widthDimension: .fractionalWidth(1.0),\n                                      heightDimension: .fractionalHeight(0.4)),\n    subitems: [leadingItem, trailingGroup])\n\n\nScroll Sections Horizontally\n\nThe Orthogonal Sections example shows how to create a section that scrolls horizontally in an otherwise vertically scrolling layout. Setting a section’s orthogonalScrollingBehavior property to a value other than UICollectionLayoutSectionOrthogonalScrollingBehavior.none causes the section to lay out its contents perpendicular to the main layout axis. In this case, because the layout scrolls vertically by default, the section scrolls horizontally.\n\nsection.orthogonalScrollingBehavior = .continuous\n\n\nChoose Horizontal Scrolling and Paging Behavior\n\nThe Orthogonal Section Behaviors example shows each of the options for UICollectionLayoutSectionOrthogonalScrollingBehavior. Each section of the layout demonstrates a different orthogonal scrolling behavior, showcasing the differences between the scrolling and paging options. In this case, because the layout scrolls vertically by default, the sections themselves scroll horizontally.\n\ncase continuous, continuousGroupLeadingBoundary, paging, groupPaging, groupPagingCentered, none\nfunc orthogonalScrollingBehavior() -> UICollectionLayoutSectionOrthogonalScrollingBehavior {\n    switch self {\n    case .none:\n        return UICollectionLayoutSectionOrthogonalScrollingBehavior.none\n    case .continuous:\n        return UICollectionLayoutSectionOrthogonalScrollingBehavior.continuous\n    case .continuousGroupLeadingBoundary:\n        return UICollectionLayoutSectionOrthogonalScrollingBehavior.continuousGroupLeadingBoundary\n    case .paging:\n        return UICollectionLayoutSectionOrthogonalScrollingBehavior.paging\n    case .groupPaging:\n        return UICollectionLayoutSectionOrthogonalScrollingBehavior.groupPaging\n    case .groupPagingCentered:\n        return UICollectionLayoutSectionOrthogonalScrollingBehavior.groupPagingCentered\n    }\n}\n\n\nUpdate Data in a Collection View\n\nThe Mountains Search example shows how to update the data and the user interface in a collection view when a user filters the data. It shows a list of mountain names, and allows the user to type text into a search bar to filter based on the mountain names.\n\nThis collection view, mountainsCollectionView, contains a single section with items created from a list of raw data about each mountain. This example encapsulates each piece of that data in a Mountain structure, defined in MountainsController. To manage the data, this example uses a diffable data source that contains a single section and items of type Mountain. When that diffable data source is created, it connects to mountainsCollectionView and registers a cell type of LabelCell to display the name of the mountain in the collection view. Then, it configures that cell with the name of the mountain.\n\nThe performQuery(with:) method updates the data and the user interface. The method takes the currently typed filter text and generates a list of mountains that contain that text in their names. Then, it constructs a representation of the newly filtered data using a snapshot. The snapshot contains the same single section as before, but now, instead of containing items representing every mountain, it only contains the filtered mountains.\n\nThe method then calls apply(_:animatingDifferences:completion:), applying the data from the snapshot to the diffable data source. The diffable data source stores the data from the snapshot as the new state of data, calculates the difference between the previous state and the new state, and triggers the user interface to display the new state.\n\nfunc performQuery(with filter: String?) {\n    let mountains = mountainsController.filteredMountains(with: filter).sorted { $0.name < $1.name }\n\n\n    var snapshot = NSDiffableDataSourceSnapshot<Section, MountainsController.Mountain>()\n    snapshot.appendSections([.main])\n    snapshot.appendItems(mountains)\n    dataSource.apply(snapshot, animatingDifferences: true)\n}\n\n\nUpdate Data in Multiple Sections\n\nThe Settings: Wi-Fi example shows how to update the data and the user interface in a table view that uses multiple kinds of sections and items. It recreates the Wi-Fi page in iOS Settings, letting the user toggle the Wi-Fi switch on and off to view the available and current Wi-Fi networks.\n\nThe updateUI(animated:) method determines which sections and items to display based on whether Wi-Fi is enabled. If Wi-Fi is disabled, the method adds only the .config section and its items to the snapshot. If Wi-Fi is enabled, the method adds the .networks section and its items as well.\n\nlet configItems = configurationItems.filter { !($0.type == .currentNetwork && !controller.wifiEnabled) }\n\n\ncurrentSnapshot = NSDiffableDataSourceSnapshot<Section, Item>()\n\n\ncurrentSnapshot.appendSections([.config])\ncurrentSnapshot.appendItems(configItems, toSection: .config)\n\n\nif controller.wifiEnabled {\n    let sortedNetworks = controller.availableNetworks.sorted { $0.name < $1.name }\n    let networkItems = sortedNetworks.map { Item(network: $0) }\n    currentSnapshot.appendSections([.networks])\n    currentSnapshot.appendItems(networkItems, toSection: .networks)\n}\n\n\nself.dataSource.apply(currentSnapshot, animatingDifferences: animated)\n\n\nUpdate Data Incrementally\n\nThe Insertion Sort Visualization example shows how to update data incrementally, displaying the visible progress as the data changes from an initial state to a final state. It shows rows of color swatches, originally in a random order, that it then iteratively sorts into spectral order.\n\nThe key difference between this example and the other diffable data source examples is that this example doesn’t create an empty snapshot to update the state of the data. Instead, the performSortStep() method retrieves the current state of the collection view’s data by using dataSource.snapshot(). Then, it modifies only one part of that snapshot to perform the visual sorting step by step.\n\n// Get the current state of the UI from the data source.\nvar updatedSnapshot = dataSource.snapshot()\n\n\n// For each section, if needed, step through and perform the next sorting step.\nupdatedSnapshot.sectionIdentifiers.forEach {\n    let section = $0\n    if !section.isSorted {\n\n\n        // Step the sort algorithm.\n        section.sortNext()\n        let items = section.values\n\n\n        // Replace the items for this section with the newly sorted items.\n        updatedSnapshot.deleteItems(items)\n        updatedSnapshot.appendItems(items, toSection: section)\n\n\n        sectionCountNeedingSort += 1\n    }\n}\n\n\nCreate a Simple List Layout\n\nThe Simple List example shows how to create a basic list layout that adapts to any screen size. It creates a configuration with one of the system-defined list appearances. Then, it creates a list layout by passing the configuration to list(using:). This approach generates a compositional layout with a single section styled as a list.\n\nlet config = UICollectionLayoutListConfiguration(appearance: .insetGrouped)\nreturn UICollectionViewCompositionalLayout.list(using: config)\n\n\nChoose a List Appearance\n\nThe List Appearances example shows each of the options for UICollectionLayoutListConfiguration.Appearance. Tapping the name of the appearance in the navigation bar changes the list to another appearance, showcasing each of the list styles. Each list uses the UICollectionLayoutListConfiguration.HeaderMode.firstItemInSection header mode, which makes each section of the list expandable and collapsible.\n\nvar config = UICollectionLayoutListConfiguration(appearance: self.appearance)\nconfig.headerMode = .firstItemInSection\n\n\nCustomize List Cells\n\nThe List with Custom Cells example shows how to configure a custom list cell subclass. The example focuses on CustomListCell, a custom subclass of UICollectionViewListCell that combines several kinds of subviews into one cell. It sets the appearance and content of these views using content configurations.\n\nThe updateConfiguration(using:) method sets up the cell’s initial appearance and content. The system calls this method every time the cell’s configuration state changes to update the cell’s appearance for that new state. To configure the list content view, it fetches the default list content configuration for the current state.\n\nvar content = defaultListContentConfiguration().updated(for: state)\n\n\nThen, it customizes the configuration’s values and assigns that configuration to the configuration property of listContentView.\n\nFor the image view and label, the updateConfiguration(using:) method fetches a default value cell configuration for the current state and stores it in valueConfiguration. It copies the preconfigured default styling and metrics from this configuration into the custom views to ensure consistency with the system styles.\n\ncategoryIconView.tintColor = valueConfiguration.imageProperties.resolvedTintColor(for: tintColor)\ncategoryIconView.preferredSymbolConfiguration = .init(font: valueConfiguration.secondaryTextProperties.font, scale: .small)\n\n\nTo register the custom cell subclass with the collection view, this example uses a cell registration. The cell registration configures each cell with the data from its corresponding item. It also adds a disclosure indicator cell accessory to the cell.\n\nlet cellRegistration = UICollectionView.CellRegistration<CustomListCell, Item> { (cell, indexPath, item) in\n    cell.updateWithItem(item)\n    cell.accessories = [.disclosureIndicator()]\n}\n\n\nThe diffable data source uses that cell registration when it dequeues the cell.\n\nreturn collectionView.dequeueConfiguredReusableCell(using: cellRegistration, for: indexPath, item: item)\n\n\nBuild a Layout with Multiple Section Types\n\nThe Emoji Explorer example shows how to create a compositional layout with multiple types of sections. The example contains an orthogonally scrolling section, an outline section, and a list section in one compositional layout. The createLayout() method defines a section provider to supply each section.\n\nFor the top section, it enables horizontal scrolling by setting the orthogonalScrollingBehavior property.\n\nsection.orthogonalScrollingBehavior = .continuousGroupLeadingBoundary\n\n\nThe outline section uses the UICollectionLayoutListConfiguration.Appearance.sidebar list appearance. It’s populated using a section snapshot to create a hierarchical data structure.\n\nlet rootItem = Item(title: String(describing: category), hasChildren: true)\noutlineSnapshot.append([rootItem])\nlet outlineItems = category.emojis.map { Item(emoji: $0) }\noutlineSnapshot.append(outlineItems, to: rootItem)\n\n\nThe list section uses the UICollectionLayoutListConfiguration.Appearance.insetGrouped list appearance. The configuration for this section adds a swipe action to each cell that lets the cell be marked as Favorite.\n\nconfiguration.leadingSwipeActionsConfigurationProvider = { [weak self] (indexPath) in\n    guard let self = self else { return nil }\n    guard let item = self.dataSource.itemIdentifier(for: indexPath) else { return nil }\n    return self.leadingSwipeActionConfigurationForListCellItem(item)\n}\n\n\nEach section has a corresponding cell registration to configure its own type of cell. The collection view uses those registrations to dequeue the configured cells to display in each section.\n\nswitch section {\ncase .recents:\n    return collectionView.dequeueConfiguredReusableCell(using: gridCellRegistration, for: indexPath, item: item.emoji)\ncase .list:\n    return collectionView.dequeueConfiguredReusableCell(using: listCellRegistration, for: indexPath, item: item)\ncase .outline:\n    if item.hasChildren {\n        return collectionView.dequeueConfiguredReusableCell(using: outlineHeaderCellRegistration, for: indexPath, item: item.title!)\n    } else {\n        return collectionView.dequeueConfiguredReusableCell(using: outlineCellRegistration, for: indexPath, item: item.emoji)\n    }\n}\n\n\nCreate a Value Cell List\n\nThe Emoji Explorer - List example shows how to create a list with cells that use the value cell style. It applies a content configuration with the default value cell style to each of the cells in the list.\n\nvar contentConfiguration = UIListContentConfiguration.valueCell()\ncontentConfiguration.text = emoji.text\ncontentConfiguration.secondaryText = String(describing: emoji.category)\ncell.contentConfiguration = contentConfiguration\n\n\nSee Also\nLayouts\nclass NSCollectionViewFlowLayout\nA layout that organizes items into a flexible and configurable arrangement.\nprotocol NSCollectionViewDelegateFlowLayout\nA set of methods that a delegate implements to provide layout information to a flow layout object in a collection view.\nclass NSCollectionViewGridLayout\nA layout that displays a single section of items in a row and column grid.\nclass NSCollectionViewTransitionLayout\nAn object that implements custom behaviors when changing from one layout to another in a collection view.\nclass NSCollectionViewLayoutAttributes\nAn object that contains layout-related attributes for an element in a collection view.\nclass NSCollectionViewLayout\nAn abstract base class that you subclass and use to generate layout information for a collection view.\nclass NSCollectionViewCompositionalLayout\nA layout object that lets you combine items in highly adaptive and flexible visual arrangements.\nclass NSCollectionViewCompositionalLayoutConfiguration\nAn object that defines scroll direction, section spacing, and headers or footers for the layout.\ntypealias NSCollectionViewCompositionalLayoutSectionProvider\nA closure that creates and returns each of the layout's sections.\nenum NSCollectionLayoutSectionOrthogonalScrollingBehavior\nThe scrolling behavior of the layout's sections in relation to the main layout axis."
  },
  {
    "title": "isTouchInside | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/1618229-istouchinside",
    "html": "Return Value\n\ntrue if the location of the most recent touch event is inside the control’s bounds or false if it is not.\n\nDiscussion\n\nWhile tracking of a touch event is ongoing, the control updates the value of this property to indicate whether the most recent touch is still inside the control’s bounds. The control uses this information to trigger specific events. For example, touch events entering or exiting a control trigger appropriate drag events.\n\nSee Also\nTracking touches and redrawing controls\nfunc beginTracking(UITouch, with: UIEvent?) -> Bool\nNotifies the control when a touch event enters the control’s bounds.\nfunc continueTracking(UITouch, with: UIEvent?) -> Bool\nNotifies the control when a touch event for the control updates.\nfunc endTracking(UITouch?, with: UIEvent?)\nNotifies the control when a touch event associated with the control ends.\nfunc cancelTracking(with: UIEvent?)\nNotifies the control to cancel tracking related to the specified event.\nvar isTracking: Bool\nA Boolean value that indicates whether the control is currently tracking touch events."
  },
  {
    "title": "locale | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicalendarview/3972041-locale",
    "html": "Discussion\n\nDefaults to current.\n\nSee Also\nSetting calendar details\nvar calendar: Calendar\nThe calendar that the calendar view illustrates.\nvar timeZone: TimeZone?\nThe time zone from the date the calendar view displays."
  },
  {
    "title": "isTracking | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/1618210-istracking",
    "html": "Discussion\n\nWhile tracking of a touch event is in progress, the control sets the value of this property to true. When tracking ends or is canceled for any reason, it sets this property to false.\n\nSee Also\nTracking touches and redrawing controls\nfunc beginTracking(UITouch, with: UIEvent?) -> Bool\nNotifies the control when a touch event enters the control’s bounds.\nfunc continueTracking(UITouch, with: UIEvent?) -> Bool\nNotifies the control when a touch event for the control updates.\nfunc endTracking(UITouch?, with: UIEvent?)\nNotifies the control when a touch event associated with the control ends.\nfunc cancelTracking(with: UIEvent?)\nNotifies the control to cancel tracking related to the specified event.\nvar isTouchInside: Bool\nA Boolean value that indicates whether a tracked touch event is currently inside the control’s bounds."
  },
  {
    "title": "style | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivityindicatorview/1622847-style",
    "html": "Discussion\n\nSee UIActivityIndicatorView.Style for the available styles. The default value is UIActivityIndicatorView.Style.medium.\n\nSee Also\nConfiguring the activity indicator appearance\nvar color: UIColor!\nThe color of the activity indicator."
  },
  {
    "title": "stepValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistepper/1624083-stepvalue",
    "html": "Discussion\n\nMust be numerically greater than 0. If you attempt to set this property’s value to 0 or to a negative number, the system raises an invalidArgumentException exception.\n\nThe default value for this property is 1.\n\nSee Also\nConfiguring the stepper\nvar isContinuous: Bool\nA Boolean value that determines whether to send value changes during user interaction or after user interaction ends.\nvar autorepeat: Bool\nA Boolean value that determines whether to repeatedly change the stepper’s value as the user presses and holds a stepper button.\nvar wraps: Bool\nA Boolean value that determines whether the stepper can wrap its value to the minimum or maximum value when incrementing and decrementing the value.\nvar minimumValue: Double\nThe lowest possible numeric value for the stepper.\nvar maximumValue: Double\nThe highest possible numeric value for the stepper."
  },
  {
    "title": "maximumValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistepper/1624075-maximumvalue",
    "html": "Discussion\n\nMust be numerically greater than minimumValue. If you attempt to set a value equal to or lower than minimumValue, the system raises an invalidArgumentException exception.\n\nThe default value of this property is 100.\n\nSee Also\nConfiguring the stepper\nvar isContinuous: Bool\nA Boolean value that determines whether to send value changes during user interaction or after user interaction ends.\nvar autorepeat: Bool\nA Boolean value that determines whether to repeatedly change the stepper’s value as the user presses and holds a stepper button.\nvar wraps: Bool\nA Boolean value that determines whether the stepper can wrap its value to the minimum or maximum value when incrementing and decrementing the value.\nvar minimumValue: Double\nThe lowest possible numeric value for the stepper.\nvar stepValue: Double\nThe step, or increment, value for the stepper."
  },
  {
    "title": "value | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistepper/1624076-value",
    "html": "Discussion\n\nWhen the value changes, the stepper sends the valueChanged flag to its target (see addTarget(_:action:for:)). Refer to the description of the isContinuous property for information about whether value change events are sent continuously or when user interaction ends.\n\nThe default value for this property is 0. This property is clamped at its lower extreme to minimumValue and is clamped at its upper extreme to maximumValue."
  },
  {
    "title": "minimumValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistepper/1624078-minimumvalue",
    "html": "Discussion\n\nMust be numerically less than maximumValue. If you attempt to set a value equal to or greater than maximumValue, the system raises an invalidArgumentException exception.\n\nThe default value for this property is 0.\n\nSee Also\nConfiguring the stepper\nvar isContinuous: Bool\nA Boolean value that determines whether to send value changes during user interaction or after user interaction ends.\nvar autorepeat: Bool\nA Boolean value that determines whether to repeatedly change the stepper’s value as the user presses and holds a stepper button.\nvar wraps: Bool\nA Boolean value that determines whether the stepper can wrap its value to the minimum or maximum value when incrementing and decrementing the value.\nvar maximumValue: Double\nThe highest possible numeric value for the stepper.\nvar stepValue: Double\nThe step, or increment, value for the stepper."
  },
  {
    "title": "setBackgroundImage(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistepper/1624081-setbackgroundimage",
    "html": "Parameters\nimage\n\nThe background image to use for the specified state.\n\nstate\n\nThe control state in which you want to display the image.\n\nDiscussion\n\nFor good results, image must be a stretchable image.\n\nSee Also\nCustomizing appearance\nfunc backgroundImage(for: UIControl.State) -> UIImage?\nReturns the background image associated with the specified control state.\nfunc decrementImage(for: UIControl.State) -> UIImage?\nReturns the image used for the decrement glyph of the control.\nfunc setDecrementImage(UIImage?, for: UIControl.State)\nSets the image to use for the decrement glyph of the control.\nfunc dividerImage(forLeftSegmentState: UIControl.State, rightSegmentState: UIControl.State) -> UIImage?\nReturns the divider image for the given combination of left and right states.\nfunc setDividerImage(UIImage?, forLeftSegmentState: UIControl.State, rightSegmentState: UIControl.State)\nSets the image to use for the given combination of left and right states.\nfunc incrementImage(for: UIControl.State) -> UIImage?\nReturns the image used for the increment glyph of the control.\nfunc setIncrementImage(UIImage?, for: UIControl.State)\nSets the image to use for the increment glyph of the control."
  },
  {
    "title": "dividerImage(forLeftSegmentState:rightSegmentState:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistepper/1624072-dividerimage",
    "html": "Parameters\nleftState\n\nThe state of the left side of the control.\n\nrightState\n\nThe state of the right side of the control.\n\nReturn Value\n\nThe image used for the specified combination of left and right states.\n\nSee Also\nCustomizing appearance\nfunc backgroundImage(for: UIControl.State) -> UIImage?\nReturns the background image associated with the specified control state.\nfunc setBackgroundImage(UIImage?, for: UIControl.State)\nSets the background image for the control when it’s in the specified state.\nfunc decrementImage(for: UIControl.State) -> UIImage?\nReturns the image used for the decrement glyph of the control.\nfunc setDecrementImage(UIImage?, for: UIControl.State)\nSets the image to use for the decrement glyph of the control.\nfunc setDividerImage(UIImage?, forLeftSegmentState: UIControl.State, rightSegmentState: UIControl.State)\nSets the image to use for the given combination of left and right states.\nfunc incrementImage(for: UIControl.State) -> UIImage?\nReturns the image used for the increment glyph of the control.\nfunc setIncrementImage(UIImage?, for: UIControl.State)\nSets the image to use for the increment glyph of the control."
  },
  {
    "title": "decrementImage(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistepper/1624077-decrementimage",
    "html": "Parameters\nstate\n\nThe control state in which the image is displayed.\n\nReturn Value\n\nThe image used for the decrement glyph of the control.\n\nSee Also\nCustomizing appearance\nfunc backgroundImage(for: UIControl.State) -> UIImage?\nReturns the background image associated with the specified control state.\nfunc setBackgroundImage(UIImage?, for: UIControl.State)\nSets the background image for the control when it’s in the specified state.\nfunc setDecrementImage(UIImage?, for: UIControl.State)\nSets the image to use for the decrement glyph of the control.\nfunc dividerImage(forLeftSegmentState: UIControl.State, rightSegmentState: UIControl.State) -> UIImage?\nReturns the divider image for the given combination of left and right states.\nfunc setDividerImage(UIImage?, forLeftSegmentState: UIControl.State, rightSegmentState: UIControl.State)\nSets the image to use for the given combination of left and right states.\nfunc incrementImage(for: UIControl.State) -> UIImage?\nReturns the image used for the increment glyph of the control.\nfunc setIncrementImage(UIImage?, for: UIControl.State)\nSets the image to use for the increment glyph of the control."
  },
  {
    "title": "UIDataSourceTranslating | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidatasourcetranslating",
    "html": "Overview\n\nUse the methods of this protocol to map between the positions of items and sections in your data source object and the positions of those same items and sections in your presented layout. Objects that adopt this protocol do so because the position of items in their data source object don’t always match the corresponding positions in their presented layout.\n\nUITableView and UICollectionView adopt this protocol and use it in conjunction with drag and drop operations. For example, UITableView must account for the presence of placeholder cells, which appear as rows in the table but don’t have a corresponding entry in the data source object. Typically, you don’t adopt this protocol in your own classes.\n\nTopics\nManaging item positions\nfunc presentationIndexPath(forDataSourceIndexPath: IndexPath?) -> IndexPath?\nTranslates an index in your data source object to the equivalent index in your presented layout.\n\nRequired\n\nfunc dataSourceIndexPath(forPresentationIndexPath: IndexPath?) -> IndexPath?\nTranslates an index in your presented layout to the equivalent index in your data source object.\n\nRequired\n\nManaging section positions\nfunc presentationSectionIndex(forDataSourceSectionIndex: Int) -> Int\nTranslates a section index in your data source object to the equivalent section index in your presented layout.\n\nRequired\n\nfunc dataSourceSectionIndex(forPresentationSectionIndex: Int) -> Int\nTranslates a section index in your presented layout to the equivalent section index in your data source object.\n\nRequired\n\nPerforming actions\nfunc performUsingPresentationValues(() -> Void)\nPerforms actions on the current object using index paths that are relative to the presentation layer of that object.\n\nRequired\n\nRelationships\nInherits From\nNSObjectProtocol\nConforming Types\nUICollectionView\nUITableView\nSee Also\nDrag and drop\nSupporting Drag and Drop in Collection Views\nInitiate drags and handle drops from a collection view.\nprotocol UICollectionViewDragDelegate\nThe interface for initiating drags from a collection view.\nprotocol UICollectionViewDropDelegate\nThe interface for handling drops in a collection view.\nprotocol UICollectionViewDropCoordinator\nAn interface for coordinating your custom drop-related actions with the collection view.\nclass UICollectionViewDropPlaceholder\nA placeholder for an item dropped on a collection view.\nclass UICollectionViewDropProposal\nYour proposed solution for handling a drop in a collection view.\nprotocol UICollectionViewDropItem\nThe data associated with an item being dropped into the collection view.\nprotocol UICollectionViewDropPlaceholderContext\nAn object that contains information about a placeholder in the collection view.\nclass UICollectionViewPlaceholder\nA placeholder for an item dragged or dropped on a collection view."
  },
  {
    "title": "UICollectionViewPlaceholder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewplaceholder",
    "html": "Topics\nInitializing a Placeholder\ninit(insertionIndexPath: IndexPath, reuseIdentifier: String)\nCreates a placeholder object with the specified index path and reuse identifier.\nUpdating the Cell's Content\nvar cellUpdateHandler: ((UICollectionViewCell) -> Void)?\nThe block that updates the contents of the placeholder cell.\nRelationships\nInherits From\nNSObject\nSee Also\nDrag and drop\nSupporting Drag and Drop in Collection Views\nInitiate drags and handle drops from a collection view.\nprotocol UICollectionViewDragDelegate\nThe interface for initiating drags from a collection view.\nprotocol UICollectionViewDropDelegate\nThe interface for handling drops in a collection view.\nprotocol UICollectionViewDropCoordinator\nAn interface for coordinating your custom drop-related actions with the collection view.\nclass UICollectionViewDropPlaceholder\nA placeholder for an item dropped on a collection view.\nclass UICollectionViewDropProposal\nYour proposed solution for handling a drop in a collection view.\nprotocol UICollectionViewDropItem\nThe data associated with an item being dropped into the collection view.\nprotocol UICollectionViewDropPlaceholderContext\nAn object that contains information about a placeholder in the collection view.\nprotocol UIDataSourceTranslating\nAn advanced interface for managing a data source object."
  },
  {
    "title": "supports(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentunavailableview/4176593-supports",
    "html": "Relationships\nFrom Protocol\nUIContentView"
  },
  {
    "title": "configuration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentunavailableview/4176591-configuration",
    "html": "Relationships\nFrom Protocol\nUIContentView"
  },
  {
    "title": "isScrollEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontentunavailableview/4173128-isscrollenabled",
    "html": "Discussion\n\nThe default is NO."
  },
  {
    "title": "UICollectionViewDropPlaceholderContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdropplaceholdercontext",
    "html": "Overview\n\nYou do not create instances of this class yourself. For each placeholder cell that you insert into the collection view, the drop coordinator provides you with an instance of this class. You use this context object later to remove the placeholder cell, either by committing the actual data to your data source object or by deleting the placeholder cell.\n\nTopics\nUpdating the Placeholder Cell\nfunc commitInsertion(dataSourceUpdates: (IndexPath) -> Void) -> Bool\nExchanges the placeholder cell for a cell with the final content.\n\nRequired\n\nfunc setNeedsCellUpdate()\nUpdates the contents of the placeholder cell.\n\nRequired\n\nRemoving the Placeholder Cell\nfunc deletePlaceholder() -> Bool\nRemoves an unneeded placeholder cell altogether from the collection view.\n\nRequired\n\nGetting the Drag Item\nvar dragItem: UIDragItem\nThe drag item being represented by the placeholder cell.\n\nRequired\n\nRelationships\nInherits From\nUIDragAnimating\nSee Also\nDrag and drop\nSupporting Drag and Drop in Collection Views\nInitiate drags and handle drops from a collection view.\nprotocol UICollectionViewDragDelegate\nThe interface for initiating drags from a collection view.\nprotocol UICollectionViewDropDelegate\nThe interface for handling drops in a collection view.\nprotocol UICollectionViewDropCoordinator\nAn interface for coordinating your custom drop-related actions with the collection view.\nclass UICollectionViewDropPlaceholder\nA placeholder for an item dropped on a collection view.\nclass UICollectionViewDropProposal\nYour proposed solution for handling a drop in a collection view.\nprotocol UICollectionViewDropItem\nThe data associated with an item being dropped into the collection view.\nprotocol UIDataSourceTranslating\nAn advanced interface for managing a data source object.\nclass UICollectionViewPlaceholder\nA placeholder for an item dragged or dropped on a collection view."
  },
  {
    "title": "contentHorizontalAlignment | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/1618213-contenthorizontalalignment",
    "html": "Parameters\ncontentAlignment\n\nA constant that specifies the horizontal alignment of text or images within the control. For a list of possible values, see UIControl.ContentHorizontalAlignment.\n\nDiscussion\n\nFor controls that contain configurable text or image content, use this property to align that content appropriately inside the control’s bounds. Not all control subclasses have content that can be aligned, and it’s the responsibility of the subclass to determine how to apply this value. The default value of this property is UIControl.ContentHorizontalAlignment.center.\n\nSee Also\nSpecifying content alignment\nvar contentVerticalAlignment: UIControl.ContentVerticalAlignment\nThe vertical alignment of content within the control’s bounds.\nenum UIControl.ContentVerticalAlignment\nConstants for specifying the vertical alignment of content (text and images) in a control.\nvar effectiveContentHorizontalAlignment: UIControl.ContentHorizontalAlignment\nThe horizontal alignment currently in effect for the control.\nenum UIControl.ContentHorizontalAlignment\nThe horizontal alignment of content (text and images) within a control."
  },
  {
    "title": "effectiveContentHorizontalAlignment | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/2866070-effectivecontenthorizontalalignm",
    "html": "Discussion\n\nThis property always contains the value UIControl.ContentHorizontalAlignment.left or UIControl.ContentHorizontalAlignment.right, even when the actual horizontal alignment is UIControl.ContentHorizontalAlignment.leading or UIControl.ContentHorizontalAlignment.trailing.\n\nSee Also\nSpecifying content alignment\nvar contentVerticalAlignment: UIControl.ContentVerticalAlignment\nThe vertical alignment of content within the control’s bounds.\nenum UIControl.ContentVerticalAlignment\nConstants for specifying the vertical alignment of content (text and images) in a control.\nvar contentHorizontalAlignment: UIControl.ContentHorizontalAlignment\nThe horizontal alignment of content within the control’s bounds.\nenum UIControl.ContentHorizontalAlignment\nThe horizontal alignment of content (text and images) within a control."
  },
  {
    "title": "contentVerticalAlignment | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/1618249-contentverticalalignment",
    "html": "Parameters\ncontentAlignment\n\nA constant that specifies the vertical alignment of text or images within the control. For a list of possible values, see UIControl.ContentVerticalAlignment.\n\nDiscussion\n\nFor controls that contain configurable text or image content, use this property to align that content appropriately inside the control’s bounds. Not all control subclasses have content that can be aligned, and it’s the responsibility of the subclass to determine how to apply this value. The default value of this property is UIControl.ContentVerticalAlignment.top.\n\nSee Also\nSpecifying content alignment\nenum UIControl.ContentVerticalAlignment\nConstants for specifying the vertical alignment of content (text and images) in a control.\nvar contentHorizontalAlignment: UIControl.ContentHorizontalAlignment\nThe horizontal alignment of content within the control’s bounds.\nvar effectiveContentHorizontalAlignment: UIControl.ContentHorizontalAlignment\nThe horizontal alignment currently in effect for the control.\nenum UIControl.ContentHorizontalAlignment\nThe horizontal alignment of content (text and images) within a control."
  },
  {
    "title": "UIControl.ContentHorizontalAlignment | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/contenthorizontalalignment",
    "html": "Overview\n\nYou use these constants as the value of the contentHorizontalAlignment property.\n\nTopics\nConstants\ncase center\nAligns the content horizontally in the center of the control.\ncase left\nAligns the content horizontally from the left of the control (the default).\ncase right\nAligns the content horizontally from the right of the control.\ncase fill\nAligns the content horizontally to fill the content rectangles; text may wrap and images may be stretched.\ncase leading\nAligns the content horizontally from the leading edge of the control.\ncase trailing\nAligns the content horizontally from the trailing edge of the control.\nRelationships\nConforms To\nSendable\nSee Also\nSpecifying content alignment\nvar contentVerticalAlignment: UIControl.ContentVerticalAlignment\nThe vertical alignment of content within the control’s bounds.\nenum UIControl.ContentVerticalAlignment\nConstants for specifying the vertical alignment of content (text and images) in a control.\nvar contentHorizontalAlignment: UIControl.ContentHorizontalAlignment\nThe horizontal alignment of content within the control’s bounds.\nvar effectiveContentHorizontalAlignment: UIControl.ContentHorizontalAlignment\nThe horizontal alignment currently in effect for the control."
  },
  {
    "title": "UIControl.ContentVerticalAlignment | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/contentverticalalignment",
    "html": "Overview\n\nYou use these constants as the value of the contentVerticalAlignment property.\n\nTopics\nConstants\ncase center\nAligns the content vertically in the center of the control.\ncase top\nAligns the content vertically at the top in the control (the default).\ncase bottom\nAligns the content vertically at the bottom in the control.\ncase fill\nAligns the content vertically to fill the content rectangle; images may be stretched.\nRelationships\nConforms To\nSendable\nSee Also\nSpecifying content alignment\nvar contentVerticalAlignment: UIControl.ContentVerticalAlignment\nThe vertical alignment of content within the control’s bounds.\nvar contentHorizontalAlignment: UIControl.ContentHorizontalAlignment\nThe horizontal alignment of content within the control’s bounds.\nvar effectiveContentHorizontalAlignment: UIControl.ContentHorizontalAlignment\nThe horizontal alignment currently in effect for the control.\nenum UIControl.ContentHorizontalAlignment\nThe horizontal alignment of content (text and images) within a control."
  },
  {
    "title": "removeTarget(_:action:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/1618248-removetarget",
    "html": "Parameters\ntarget\n\nA target object registered with the control. Specify nil to remove the specified control events for all target objects.\n\naction\n\nA selector identifying a registered action method. You may specify nil for this parameter.\n\ncontrolEvents\n\nA bitmask specifying the control events that you want to remove for the specified target object. For a list of possible constants, see UIControl.Event.\n\nDiscussion\n\nUse this method to prevent the delivery of control events to target objects associated with control. If you specify a valid object in the target parameter, this method stops the delivery of the specified events to all action methods associated with that object. If you specify nil for the target parameter, this method prevents the delivery of those events to all action methods of all target objects.\n\nAlthough the action parameter is not considered when stopping the delivery of events, you should specify an appropriate value anyway. If the specified target/action combination no longer has any valid control events associated with it, the control cleans up its corresponding internal data structures. Doing so can affect the set of objects returned by the allTargets method.\n\nSee Also\nManaging the control’s targets and actions\nfunc addTarget(Any?, action: Selector, for: UIControl.Event)\nAssociates a target object and action method with the control.\nvar allTargets: Set<AnyHashable>\nReturns all target objects associated with the control.\nfunc addAction(UIAction, for: UIControl.Event)\nfunc removeAction(UIAction, for: UIControl.Event)\nfunc removeAction(identifiedBy: UIAction.Identifier, for: UIControl.Event)\nfunc actions(forTarget: Any?, forControlEvent: UIControl.Event) -> [String]?\nReturns the actions performed on a target object when the specified event occurs.\nvar allControlEvents: UIControl.Event\nReturns the events for which the control has associated actions.\nfunc enumerateEventHandlers((UIAction?, (Any?, Selector)?, UIControl.Event, inout Bool) -> Void)"
  },
  {
    "title": "isHighlighted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/1618231-ishighlighted",
    "html": "Discussion\n\nWhen the value of this property is true, the control draws a highlight; otherwise, the control doesn’t draw a highlight. Controls automatically set and clear this state in response to appropriate touch events. You can change the value of this property as needed to apply or remove a highlight programmatically\n\nThe default value of this property is false for a newly created control. You can set a control’s initial selected state in your storyboard file.\n\nSee Also\nManaging state\nvar state: UIControl.State\nThe state of the control, specified as a bit mask value.\nstruct UIControl.State\nConstants describing the state of a control.\nvar isEnabled: Bool\nA Boolean value indicating whether the control is in the enabled state.\nvar isSelected: Bool\nA Boolean value indicating whether the control is in the selected state."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/3600492-init",
    "html": "See Also\nCreating a control\ninit(frame: CGRect, primaryAction: UIAction?)\nCreates a control with the specified frame and primary action.\ninit(frame: CGRect)\nCreates a control with the specified frame."
  },
  {
    "title": "sendAction(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/3600497-sendaction",
    "html": "See Also\nTriggering actions\nfunc sendAction(Selector, to: Any?, for: UIEvent?)\nCalls the specified action method.\nfunc sendActions(for: UIControl.Event)\nCalls the action methods associated with the specified events."
  },
  {
    "title": "sendActions(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/1618211-sendactions",
    "html": "Parameters\ncontrolEvents\n\nA bitmask whose set flags specify the control events for which action messages are sent. See UIControl.Event for bitmask constants.\n\nDiscussion\n\nYou call this method when you want the control to perform the actions associated with the specified events. This method iterates over the control’s registered targets and action methods and calls the sendAction(_:to:for:) method for each one that is associated with an event in the controlEvents parameter.\n\nSee Also\nTriggering actions\nfunc sendAction(UIAction)\nfunc sendAction(Selector, to: Any?, for: UIEvent?)\nCalls the specified action method.\nRelated Documentation\nfunc addTarget(Any?, action: Selector, for: UIControl.Event)\nAssociates a target object and action method with the control."
  },
  {
    "title": "continueTracking(_:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/1618216-continuetracking",
    "html": "Parameters\ntouch\n\nThe touch object containing updated information.\n\nevent\n\nThe event object containing the touch event.\n\nReturn Value\n\ntrue if the control should continue tracking touch events or false if it should stop. This value is used to update the isTracking property of the control.\n\nDiscussion\n\nThis method is called repeatedly while a touch event is being tracked inside the control’s bounds. The default implementation of this method always returns true. Subclasses can override this method and use it to update their state based on changes to the touch event. If you want to continue tracking the touch event, return true. If you want to stop tracking the touch event, return false.\n\nSee Also\nTracking touches and redrawing controls\nfunc beginTracking(UITouch, with: UIEvent?) -> Bool\nNotifies the control when a touch event enters the control’s bounds.\nfunc endTracking(UITouch?, with: UIEvent?)\nNotifies the control when a touch event associated with the control ends.\nfunc cancelTracking(with: UIEvent?)\nNotifies the control to cancel tracking related to the specified event.\nvar isTracking: Bool\nA Boolean value that indicates whether the control is currently tracking touch events.\nvar isTouchInside: Bool\nA Boolean value that indicates whether a tracked touch event is currently inside the control’s bounds."
  },
  {
    "title": "enumerateEventHandlers(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/3600987-enumerateeventhandlers",
    "html": "See Also\nManaging the control’s targets and actions\nfunc addTarget(Any?, action: Selector, for: UIControl.Event)\nAssociates a target object and action method with the control.\nfunc removeTarget(Any?, action: Selector?, for: UIControl.Event)\nStops the delivery of events to the specified target object.\nvar allTargets: Set<AnyHashable>\nReturns all target objects associated with the control.\nfunc addAction(UIAction, for: UIControl.Event)\nfunc removeAction(UIAction, for: UIControl.Event)\nfunc removeAction(identifiedBy: UIAction.Identifier, for: UIControl.Event)\nfunc actions(forTarget: Any?, forControlEvent: UIControl.Event) -> [String]?\nReturns the actions performed on a target object when the specified event occurs.\nvar allControlEvents: UIControl.Event\nReturns the events for which the control has associated actions."
  },
  {
    "title": "sendAction(_:to:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/1618237-sendaction",
    "html": "Parameters\naction\n\nA selector identifying the action method to call. This parameter must not be nil.\n\ntarget\n\nThe target object—that is, the object that implements the specified action. Specify nil if you want the app to search the responder chain for an object capable of performing the action.\n\nevent\n\nThe event that triggered the calling of the action method. You may specify nil for this parameter if you are calling this method directly, instead of in response to an event. For example, you might specify nil when changing the value of a control programmatically.\n\nDiscussion\n\nThis method takes the provided information and forwards it to the singleton UIApplication object for dispatching. If a valid target object was supplied, the app calls the action method on that target object. If the target object is nil, the app searches the responder chain for an object that defines the method.\n\nSubclasses may override this method and use it to observe or modify the action dispatching behavior. Implementations should call super when they want to continue with the execution of the action method.\n\nSee Also\nTriggering actions\nfunc sendAction(UIAction)\nfunc sendActions(for: UIControl.Event)\nCalls the action methods associated with the specified events.\nRelated Documentation\nfunc addTarget(Any?, action: Selector, for: UIControl.Event)\nAssociates a target object and action method with the control."
  },
  {
    "title": "NSLayoutConstraint.Attribute.firstBaseline | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutconstraint/attribute/firstbaseline",
    "html": "Discussion\n\nFor objects with more than one line of text, this is the baseline for the topmost line of text."
  },
  {
    "title": "constraint(equalToSystemSpacingBelow:multiplier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutyaxisanchor/2866022-constraint",
    "html": "Parameters\nanchor\n\nThe anchor to use as the starting point for the constraint.\n\nmultiplier\n\nThe multiple of the system spacing to use as the distance between the two anchors.\n\nReturn Value\n\nAn NSLayoutConstraint object that imposes a specific distance between the current anchor and the object in the anchor parameter.\n\nDiscussion\n\nThe constraint causes the current anchor to be positioned below the object in the anchor parameter. The distance between the two anchors is determined by multiplying the system spacing by the value in the multiplier parameter. The value of the system spacing is determined from information available from the anchors. For example, if the anchors represent text baselines, the spacing is determined by the fonts used at those baselines.\n\nSee Also\nBuilding system spacing constraints\nfunc constraint(greaterThanOrEqualToSystemSpacingBelow: NSLayoutYAxisAnchor, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the minimum distance by which the current anchor is positioned below the specified anchor.\nfunc constraint(lessThanOrEqualToSystemSpacingBelow: NSLayoutYAxisAnchor, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the maximum distance by which the current anchor is positioned below the specified anchor.\nCreating Self-Sizing Table View Cells\nCreate table view cells that support Dynamic Type and use system spacing constraints to adjust the spacing surrounding text labels."
  },
  {
    "title": "continuous | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrolltypemask/3538984-continuous",
    "html": "See Also\nScroll types\nstatic var all: UIScrollTypeMask\nA scroll type that’s either discrete or continuous.\nstatic var discrete: UIScrollTypeMask\nA discrete scroll type from a device, like a mouse."
  },
  {
    "title": "UICollectionViewDropPlaceholder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdropplaceholder",
    "html": "Overview\n\nWhen you want to insert a placeholder cell into your collection view, create a UICollectionViewDropPlaceholder object and pass it to the drop(_:to:) method of your UICollectionViewDropCoordinator. You use a placeholder cell to display a temporary interface while you load the cell’s contents asynchronously. For example, your placeholder cell might display a progress indicator or a message that the cell content isn’t yet available. The placeholder object contains the reuse identifier of the temporary cell you want to display in your collection view. It can also include a custom preview to use during the drop.\n\nYou must register the cells you use with your placeholders in advance. In your storyboard file, add a collection view cell object to your collection view, configure its appearance, set its class to UICollectionViewCell (or an appropriate subclass), and assign a reuse identifier to it. When you create your UICollectionViewDropPlaceholder object, pass the cell’s reuse identifier to init(insertionIndexPath:reuseIdentifier:). The collection view uses the information in your placeholder object to insert the cell into the collection view.\n\nSet the cellUpdateHandler to a block of code that configures the cell as a placeholder for the incoming data.\n\nFor more information, see Supporting Drag and Drop in Collection Views.\n\nImportant\n\nPlaceholder cells are meant to be a temporary part of your collection view. Always replace them with actual cells as soon as possible, or cancel the drop to remove them from the collection view. Use the methods of a UICollectionViewDropPlaceholderContext object to remove placeholders from your collection view.\n\nTopics\nProviding a Custom Preview\nvar previewParametersProvider: ((UICollectionViewCell) -> UIDragPreviewParameters?)?\nThe object that provides the preview parameters for a drag item.\nRelationships\nInherits From\nUICollectionViewPlaceholder\nSee Also\nDrag and drop\nSupporting Drag and Drop in Collection Views\nInitiate drags and handle drops from a collection view.\nprotocol UICollectionViewDragDelegate\nThe interface for initiating drags from a collection view.\nprotocol UICollectionViewDropDelegate\nThe interface for handling drops in a collection view.\nprotocol UICollectionViewDropCoordinator\nAn interface for coordinating your custom drop-related actions with the collection view.\nclass UICollectionViewDropProposal\nYour proposed solution for handling a drop in a collection view.\nprotocol UICollectionViewDropItem\nThe data associated with an item being dropped into the collection view.\nprotocol UICollectionViewDropPlaceholderContext\nAn object that contains information about a placeholder in the collection view.\nprotocol UIDataSourceTranslating\nAn advanced interface for managing a data source object.\nclass UICollectionViewPlaceholder\nA placeholder for an item dragged or dropped on a collection view."
  },
  {
    "title": "NSDiffableDataSourceSnapshot | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsdiffabledatasourcesnapshot",
    "html": "Overview\n\nDiffable data sources use snapshots to provide data for collection views and table views. You use a snapshot to set up the initial state of the data that a view displays, and you use snapshots to reflect changes to the data that the view displays.\n\nThe data in a snapshot is made up of the sections and items you want to display, in the order you that you determine. You configure what to display by adding, deleting, or moving the sections and items.\n\nImportant\n\nEach of your sections and items must have unique identifiers that conform to the Hashable protocol. Use struct or enum Swift value types for your identifiers, including built-in types such as Int, String, or UUID. If you use a Swift class for your identifiers, your class must be a subclass of NSObject.\n\nTo display data in a view using a snapshot:\n\nCreate a snapshot and populate it with the state of the data you want to display.\n\nApply the snapshot to reflect the changes in the UI.\n\nYou can create and configure a snapshot in one of these ways:\n\nCreate an empty snapshot, then append sections and items to it.\n\nGet the current snapshot by calling the diffable data source’s snapshot() method, then modify that snapshot to reflect the new state of the data that you want to display.\n\nFor example, the following code creates an empty snapshot and populates it with a single section with three items. Then, the code applies the snapshot, animating the UI updates between the previous state and the new state.\n\n// Create a snapshot.\nvar snapshot = NSDiffableDataSourceSnapshot<Int, UUID>()        \n\n\n// Populate the snapshot.\nsnapshot.appendSections([0])\nsnapshot.appendItems([UUID(), UUID(), UUID()])\n\n\n// Apply the snapshot.\ndataSource.apply(snapshot, animatingDifferences: true)\n\n\nFor more information, see the diffable data source types:\n\nUICollectionViewDiffableDataSource\n\nUITableViewDiffableDataSource\n\nNSCollectionViewDiffableDataSource\n\nBridging\n\nYou can bridge from an NSDiffableDataSourceSnapshotReference object to this type:\n\nlet snapshot = snapshotReference as NSDiffableDataSourceSnapshot<Int, UUID>\n\n\nTopics\nCreating a snapshot\ninit()\nCreates an empty snapshot.\nfunc appendSections([SectionIdentifierType])\nAdds the sections with the specified identifiers to the snapshot.\nfunc appendItems([ItemIdentifierType], toSection: SectionIdentifierType?)\nAdds the items with the specified identifiers to the specified section of the snapshot.\nGetting item and section metrics\nvar numberOfItems: Int\nThe number of items in the snapshot.\nvar numberOfSections: Int\nThe number of sections in the snapshot.\nfunc numberOfItems(inSection: SectionIdentifierType) -> Int\nReturns the number of items in the specified section of the snapshot.\nIdentifying items and sections\nvar itemIdentifiers: [ItemIdentifierType]\nThe identifiers of all of the items in the snapshot.\nvar sectionIdentifiers: [SectionIdentifierType]\nThe identifiers of all of the sections in the snapshot.\nfunc indexOfItem(ItemIdentifierType) -> Int?\nReturns the index of the item in the snapshot with the specified identifier.\nfunc indexOfSection(SectionIdentifierType) -> Int?\nReturns the index of the section of the snapshot with the specified identifier.\nfunc itemIdentifiers(inSection: SectionIdentifierType) -> [ItemIdentifierType]\nReturns the identifiers of all of the items in the specified section of the snapshot.\nfunc sectionIdentifier(containingItem: ItemIdentifierType) -> SectionIdentifierType?\nReturns the identifier of the section containing the specified item in the snapshot.\nInserting items and sections\nfunc insertItems([ItemIdentifierType], afterItem: ItemIdentifierType)\nInserts the provided items immediately after the item with the specified identifier in the snapshot.\nfunc insertItems([ItemIdentifierType], beforeItem: ItemIdentifierType)\nInserts the provided items immediately before the item with the specified identifier in the snapshot.\nfunc insertSections([SectionIdentifierType], afterSection: SectionIdentifierType)\nInserts the provided sections immediately after the section with the specified identifier in the snapshot.\nfunc insertSections([SectionIdentifierType], beforeSection: SectionIdentifierType)\nInserts the provided sections immediately before the section with the specified identifier in the snapshot.\nRemoving items and sections\nfunc deleteAllItems()\nDeletes all of the items from the snapshot.\nfunc deleteItems([ItemIdentifierType])\nDeletes the items with the specified identifiers from the snapshot.\nfunc deleteSections([SectionIdentifierType])\nDeletes the sections with the specified identifiers from the snapshot.\nReordering items and sections\nfunc moveItem(ItemIdentifierType, afterItem: ItemIdentifierType)\nMoves the item from its current position in the snapshot to the position immediately after the specified item.\nfunc moveItem(ItemIdentifierType, beforeItem: ItemIdentifierType)\nMoves the item from its current position in the snapshot to the position immediately before the specified item.\nfunc moveSection(SectionIdentifierType, afterSection: SectionIdentifierType)\nMoves the section from its current position in the snapshot to the position immediately after the specified section.\nfunc moveSection(SectionIdentifierType, beforeSection: SectionIdentifierType)\nMoves the section from its current position in the snapshot to the position immediately before the specified section.\nReloading data\nfunc reconfigureItems([ItemIdentifierType])\nUpdates the data for the items you specify in the snapshot, preserving the existing cells for the items.\nvar reconfiguredItemIdentifiers: [ItemIdentifierType]\nIdentifies the items reconfigured by the changes to the snapshot.\nfunc reloadItems([ItemIdentifierType])\nReloads the data within the specified items in the snapshot.\nvar reloadedItemIdentifiers: [ItemIdentifierType]\nIdentifies the items reloaded by the changes to the snapshot.\nfunc reloadSections([SectionIdentifierType])\nReloads the data within the specified sections of the snapshot.\nvar reloadedSectionIdentifiers: [SectionIdentifierType]\nIdentifies the sections reloaded by the changes to the snapshot.\nSupporting bridging\nclass NSDiffableDataSourceSnapshotReference\nThe Swift representation of the Objective-C object you use to represent the state of the data in a view at a specific point in time.\nRelationships\nConforms To\nSendable\nSee Also\nData\nUpdating Collection Views Using Diffable Data Sources\nStreamline the display and update of data in a collection view using a diffable data source that contains identifiers.\nImplementing Modern Collection Views\nBring compositional layouts to your app and simplify updating your user interface with diffable data sources.\nBuilding High-Performance Lists and Collection Views\nImprove the performance of lists and collections in your app with prefetching and image preparation.\nclass UICollectionViewDiffableDataSource\nThe object you use to manage data and provide cells for a collection view.\nprotocol UICollectionViewDataSource\nThe methods adopted by the object you use to manage data and provide cells for a collection view.\nprotocol UICollectionViewDataSourcePrefetching\nA protocol that provides advance warning of the data requirements for a collection view, allowing the triggering of asynchronous data load operations.\nstruct NSDiffableDataSourceSectionSnapshot\nA representation of the state of the data in a layout section at a specific point in time.\nclass UIRefreshControl\nA standard control that can initiate the refreshing of a scroll view’s contents."
  },
  {
    "title": "NSDiffableDataSourceSectionSnapshot | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsdiffabledatasourcesectionsnapshot",
    "html": "Overview\n\nA section snapshot represents the data for a single section in a collection view. Through a section snapshot, you set up the initial state of the data that displays in an individual section of your view, and later update that data.\n\nYou can use section snapshots with or instead of an NSDiffableDataSourceSnapshot, which represents the data in the entire view. Use a section snapshot when you need precise management of the data in a section of your layout, such as when the sections of your layout acquire their data from different sources. You can also use a section snapshot to represent data with a hierarchical structure, such as an outline with expandable items.\n\nThe following example creates a section snapshot with one root item that contains three child items:\n\nfor section in Section.allCases {\n    // Create a section snapshot\n    var sectionSnapshot = NSDiffableDataSourceSectionSnapshot<String>()\n    \n    // Populate the section snapshot\n    sectionSnapshot.append([\"Food\", \"Drinks\"])\n    sectionSnapshot.append([\"🍏\", \"🍓\", \"🥐\"], to: \"Food\")\n    \n    // Apply the section snapshot\n    dataSource.apply(sectionSnapshot,\n                     to: section,\n                     animatingDifferences: true)\n}\n\n\nTopics\nCreating a section snapshot\ninit()\nCreates an empty section snapshot.\ninit(NSDiffableDataSourceSectionSnapshot<ItemIdentifierType>)\nCreates a copy of the provided section snapshot.\nfunc snapshot(of: ItemIdentifierType, includingParent: Bool) -> NSDiffableDataSourceSectionSnapshot<ItemIdentifierType>\nCreates a section snapshot that contains the child items of the specified parent item, optionally including the parent item.\nfunc append([ItemIdentifierType], to: ItemIdentifierType?)\nAdds the specified items as child items of the specified parent item in the section snapshot.\nAccessing items\nvar items: [ItemIdentifierType]\nThe identifiers of all items in the section snapshot.\nvar rootItems: [ItemIdentifierType]\nThe identifiers of the items at the top level of the section snapshot’s hierarchy.\nvar visibleItems: [ItemIdentifierType]\nThe identifiers of the currently visible items in the section snapshot.\nGetting item metrics\nfunc index(of: ItemIdentifierType) -> Int?\nFinds the index of the specified item in the section snapshot.\nfunc level(of: ItemIdentifierType) -> Int\nFinds the hierarchical level of the specified item in the section snapshot.\nfunc parent(of: ItemIdentifierType) -> ItemIdentifierType?\nFinds the parent item of the specified item in the section snapshot.\nfunc contains(ItemIdentifierType) -> Bool\nIndicates whether the section snapshot contains the specified item.\nfunc isVisible(ItemIdentifierType) -> Bool\nIndicates whether the specified item is currently visible onscreen.\nInserting items\nfunc insert([ItemIdentifierType], after: ItemIdentifierType)\nInserts the provided items immediately after the item with the specified identifier in the section snapshot.\nfunc insert(NSDiffableDataSourceSectionSnapshot<ItemIdentifierType>, after: (ItemIdentifierType))\nInserts the provided section snapshot immediately after the item with the specified identifier in the section snapshot.\nfunc insert([ItemIdentifierType], before: ItemIdentifierType)\nInserts the provided items immediately before the item with the specified identifier in the section snapshot.\nfunc insert(NSDiffableDataSourceSectionSnapshot<ItemIdentifierType>, before: (ItemIdentifierType))\nInserts the provided section snapshot immediately before the item with the specified identifier in the section snapshot.\nRemoving items\nfunc delete([ItemIdentifierType])\nDeletes the items with the specified identifiers, and any of their child items, from the section snapshot.\nfunc deleteAll()\nDeletes all of the items from the section snapshot.\nReplacing items\nfunc replace(childrenOf: ItemIdentifierType, using: NSDiffableDataSourceSectionSnapshot<ItemIdentifierType>)\nReplaces all child items of the specified parent item with the provided section snapshot.\nExpanding and collapsing items\nfunc isExpanded(ItemIdentifierType) -> Bool\nIndicates whether the item with the specified identifier is in an expanded state.\nfunc expand([ItemIdentifierType])\nExpands the specified items in the section snapshot.\nfunc collapse([ItemIdentifierType])\nCollapses the specified items in the section snapshot.\nDebugging section snapshots\nfunc visualDescription() -> String\nReturns a string with an ASCII representation of the section snapshot.\nSupporting bridging\nclass NSDiffableDataSourceSectionSnapshotReference\nThe Swift representation of the Objective-C object you use to represent the state of the data in a layout section at a specific point in time.\nRelationships\nConforms To\nSendable\nSee Also\nData\nUpdating Collection Views Using Diffable Data Sources\nStreamline the display and update of data in a collection view using a diffable data source that contains identifiers.\nImplementing Modern Collection Views\nBring compositional layouts to your app and simplify updating your user interface with diffable data sources.\nBuilding High-Performance Lists and Collection Views\nImprove the performance of lists and collections in your app with prefetching and image preparation.\nclass UICollectionViewDiffableDataSource\nThe object you use to manage data and provide cells for a collection view.\nprotocol UICollectionViewDataSource\nThe methods adopted by the object you use to manage data and provide cells for a collection view.\nprotocol UICollectionViewDataSourcePrefetching\nA protocol that provides advance warning of the data requirements for a collection view, allowing the triggering of asynchronous data load operations.\nstruct NSDiffableDataSourceSnapshot\nA representation of the state of the data in a view at a specific point in time.\nclass UIRefreshControl\nA standard control that can initiate the refreshing of a scroll view’s contents."
  },
  {
    "title": "Layouts | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/views_and_controls/collection_views/layouts",
    "html": "Overview\n\nA collection view layout defines the visual arrangement of the content in your collection. Layouts are designed to be flexible to let you create any kind of arrangement you need for your content, from simple to complex. The simplest type of collection view layout displays its items in a grid, but you can define layouts to arrange items however you like. For example, you might create a layout where items are arranged in a circle or vary in size. You can also change layouts dynamically at runtime whenever you need to present items differently, such as when a user rotates the device.\n\nCollection view layouts are customizable and highly visual. For example, the App Store app uses a single collection view with custom layouts per section to showcase different kinds of content.\n\nFor design guidance, see Human Interface Guidelines.\n\nTopics\nEssentials\nImplementing Modern Collection Views\nBring compositional layouts to your app and simplify updating your user interface with diffable data sources.\nclass UICollectionViewCompositionalLayout\nA layout object that lets you combine items in highly adaptive and flexible visual arrangements.\nComponents\nclass NSCollectionLayoutItem\nThe most basic component of a collection view’s layout.\nclass NSCollectionLayoutGroup\nA container for a set of items that lays out the items along a path.\nclass NSCollectionLayoutSection\nA container that combines a set of groups into distinct visual groupings.\nSize and spacing\nclass NSCollectionLayoutDimension\nAn individual dimension representing an item’s width or height in a collection view.\nclass NSCollectionLayoutSize\nThe width and the height of an item in a collection view.\nclass NSCollectionLayoutSpacing\nAn object that defines the space between or around items in a collection view.\nclass NSCollectionLayoutEdgeSpacing\nAn object that defines the space around the edges of items in a collection view.\nprotocol NSCollectionLayoutContainer\nA protocol used to provide information about the size and content insets of a layout’s container.\nConfiguration\nclass UICollectionViewCompositionalLayoutConfiguration\nAn object that defines scroll direction, section spacing, and headers or footers for the layout.\ntypealias UICollectionViewCompositionalLayoutSectionProvider\nA closure that creates and returns each of the layout’s sections.\nprotocol NSCollectionLayoutEnvironment\nA protocol used to provide information about the layout’s container and environment traits, such as size classes and display scale factor.\nInteraction\nenum UICollectionLayoutSectionOrthogonalScrollingBehavior\nThe scrolling behavior of the layout’s sections in relation to the main layout axis.\nAppearance\nclass NSCollectionLayoutAnchor\nAn object that defines how to attach a supplementary item to an item in a collection view.\nclass NSCollectionLayoutSupplementaryItem\nAn object used to add an extra visual decoration to an item in a collection view.\nclass NSCollectionLayoutBoundarySupplementaryItem\nAn object used to add headers or footers to a collection view.\nclass NSCollectionLayoutDecorationItem\nAn object used to add a background to a section of a collection view.\nAdvanced layouts\nclass NSCollectionLayoutGroupCustomItem\nAn item used in a group with a custom layout arrangement.\ntypealias NSCollectionLayoutGroupCustomItemProvider\nA closure that creates and returns each of the custom group’s items.\nLayout updates\nprotocol NSCollectionLayoutVisibleItem\nAn item that’s currently visible within the bounds of a section.\ntypealias NSCollectionLayoutSectionVisibleItemsInvalidationHandler\nA closure called before each layout cycle to allow modification of items in a section immediately before they’re displayed.\nclass UICollectionViewUpdateItem\nAn object that describes a single change to make to an item in a collection view.\nclass UICollectionViewFocusUpdateContext\nA context object that stores information specific to a focus update in a collection view.\nclass UICollectionViewLayoutInvalidationContext\nA context object that declares which parts of your layout need to be updated when the layout is invalidated.\nManual layouts\nCustomizing Collection View Layouts\nCustomize a view layout by changing the size of cells in the flow or implementing a mosaic style.\nclass UICollectionViewLayout\nAn abstract base class for generating layout information for a collection view.\nclass UICollectionViewFlowLayout\nA layout object that organizes items into a grid with optional header and footer views for each section.\nclass UICollectionViewTransitionLayout\nA special type of layout object that lets you implement behaviors when changing from one layout to another in your collection view.\nclass UICollectionViewLayoutAttributes\nA layout object that manages the layout-related attributes for a given item in a collection view.\nclass UICollectionViewFlowLayoutInvalidationContext\nA set of properties for determining whether to recompute the size of items or their position in the layout.\nData\nstruct NSDiffableDataSourceSnapshot\nA representation of the state of the data in a view at a specific point in time.\nSee Also\nLayouts\nImplementing Modern Collection Views\nBring compositional layouts to your app and simplify updating your user interface with diffable data sources."
  },
  {
    "title": "UICollectionViewDropDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdropdelegate",
    "html": "Overview\n\nImplement this protocol in the object that you use to incorporate dropped data into your collection view. The only required method of this protocol is the collectionView(_:performDropWith:) method, but you can implement other methods as needed to customize the drop behavior of your collection view.\n\nAssign your custom delegate object to the dropDelegate property of your collection view.\n\nTopics\nDeclaring support for handling drops\nfunc collectionView(UICollectionView, canHandle: UIDropSession) -> Bool\nAsks your delegate whether the collection view can accept a drop with the specified type of data.\nIncorporating the dropped data\nfunc collectionView(UICollectionView, performDropWith: UICollectionViewDropCoordinator)\nTells your delegate to incorporate the drop data into the collection view.\n\nRequired\n\nTracking the drag movements\nfunc collectionView(UICollectionView, dropSessionDidUpdate: UIDropSession, withDestinationIndexPath: IndexPath?) -> UICollectionViewDropProposal\nTells your delegate that the position of the dragged data over the collection view changed.\nfunc collectionView(UICollectionView, dropSessionDidEnter: UIDropSession)\nNotifies you when dragged content enters the collection view’s bounds rectangle.\nfunc collectionView(UICollectionView, dropSessionDidExit: UIDropSession)\nNotifies you when dragged content exits the collection view’s bounds rectangle.\nfunc collectionView(UICollectionView, dropSessionDidEnd: UIDropSession)\nNotifies you when the drag operation ends.\nProviding a custom preview\nfunc collectionView(UICollectionView, dropPreviewParametersForItemAt: IndexPath) -> UIDragPreviewParameters?\nReturns custom information about how to display the item at the specified location during the drop.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nDrag and drop\nSupporting Drag and Drop in Collection Views\nInitiate drags and handle drops from a collection view.\nprotocol UICollectionViewDragDelegate\nThe interface for initiating drags from a collection view.\nprotocol UICollectionViewDropCoordinator\nAn interface for coordinating your custom drop-related actions with the collection view.\nclass UICollectionViewDropPlaceholder\nA placeholder for an item dropped on a collection view.\nclass UICollectionViewDropProposal\nYour proposed solution for handling a drop in a collection view.\nprotocol UICollectionViewDropItem\nThe data associated with an item being dropped into the collection view.\nprotocol UICollectionViewDropPlaceholderContext\nAn object that contains information about a placeholder in the collection view.\nprotocol UIDataSourceTranslating\nAn advanced interface for managing a data source object.\nclass UICollectionViewPlaceholder\nA placeholder for an item dragged or dropped on a collection view."
  },
  {
    "title": "UICalendarSelectionSingleDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicalendarselectionsingledate",
    "html": "Topics\nCreating a single date selection\ninit(delegate: UICalendarSelectionSingleDateDelegate?)\nCreates an object that tracks a date a user selects from a calendar view, with an optional delegate to manage selectable dates and selection changes.\nSetting the selection delegate\nvar delegate: UICalendarSelectionSingleDateDelegate?\nA delegate object that a calendar view asks about selectable dates and informs of changes to the selection of a single date.\nprotocol UICalendarSelectionSingleDateDelegate\nA set of methods you implement to provide selectable dates and handle changes to the selection of a single date.\nUpdating the selected date\nvar selectedDate: DateComponents?\nA date component object that represents a selected date in a calendar view.\nfunc setSelected(DateComponents?, animated: Bool)\nUpdates the date component object that represents a selected date in a calendar view, with an option to animate the change.\nRelationships\nInherits From\nUICalendarSelection\nSee Also\nHandling date selections\nvar selectionBehavior: UICalendarSelection?\nThe current date selection method of the calendar view.\nclass UICalendarSelectionMultiDate\nAn object that tracks multiple dates the user selects from a calendar view.\nclass UICalendarSelection\nA base object that tracks one or more dates a user selects from a calendar view."
  },
  {
    "title": "UICollectionViewDropCoordinator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdropcoordinator",
    "html": "Overview\n\nYou don’t create instances of this class yourself. When a drop occurs in the collection view, UIKit creates an instance of this class and passes it to your collectionView(_:performDropWith:) method. Use the object to let the collection view know how you want to animate the dropped items into position.\n\nTopics\nGetting the Dragged Items\nvar items: [UICollectionViewDropItem]\nThe items being dragged.\n\nRequired\n\nGetting the Drop Location\nvar destinationIndexPath: IndexPath?\nThe index path at which to insert the item in the collection view.\n\nRequired\n\nAnimating Items to Their Destination\nfunc drop(UIDragItem, toItemAt: IndexPath) -> UIDragAnimating\nAnimates the item to the specified index path in the collection view.\n\nRequired\n\nfunc drop(UIDragItem, intoItemAt: IndexPath, rect: CGRect) -> UIDragAnimating\nAnimates the item to the specified rectangle in the collection view.\n\nRequired\n\nfunc drop(UIDragItem, to: UIDragPreviewTarget) -> UIDragAnimating\nAnimates the item to an arbitrary location in your view hierarchy.\n\nRequired\n\nfunc drop(UIDragItem, to: UICollectionViewDropPlaceholder) -> UICollectionViewDropPlaceholderContext\nAnimates the item to the specified location and inserts a placeholder cell at that location.\n\nRequired\n\nGetting the Session Information\nvar session: UIDropSession\nThe drop session containing information about the transaction.\n\nRequired\n\nvar proposal: UICollectionViewDropProposal\nThe current proposal for how to incorporate the dropped items.\n\nRequired\n\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nDrag and drop\nSupporting Drag and Drop in Collection Views\nInitiate drags and handle drops from a collection view.\nprotocol UICollectionViewDragDelegate\nThe interface for initiating drags from a collection view.\nprotocol UICollectionViewDropDelegate\nThe interface for handling drops in a collection view.\nclass UICollectionViewDropPlaceholder\nA placeholder for an item dropped on a collection view.\nclass UICollectionViewDropProposal\nYour proposed solution for handling a drop in a collection view.\nprotocol UICollectionViewDropItem\nThe data associated with an item being dropped into the collection view.\nprotocol UICollectionViewDropPlaceholderContext\nAn object that contains information about a placeholder in the collection view.\nprotocol UIDataSourceTranslating\nAn advanced interface for managing a data source object.\nclass UICollectionViewPlaceholder\nA placeholder for an item dragged or dropped on a collection view."
  },
  {
    "title": "UICollectionViewDragDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdragdelegate",
    "html": "Overview\n\nImplement this protocol in the object that you use to initiate drags from your collection view. The only required method of this protocol is the collectionView(_:itemsForBeginning:at:) method, but you can implement other methods as needed to customize the drag behavior of your collection view.\n\nAssign your custom delegate object to the dragDelegate property of your collection view.\n\nTopics\nProviding the items to drag\nfunc collectionView(UICollectionView, itemsForBeginning: UIDragSession, at: IndexPath) -> [UIDragItem]\nProvides the initial set of items (if any) to drag.\n\nRequired\n\nfunc collectionView(UICollectionView, itemsForAddingTo: UIDragSession, at: IndexPath, point: CGPoint) -> [UIDragItem]\nAdds the specified items to an existing drag session.\nTracking the drag session\nfunc collectionView(UICollectionView, dragSessionWillBegin: UIDragSession)\nNotifies you that a drag session is about to begin for the collection view.\nfunc collectionView(UICollectionView, dragSessionDidEnd: UIDragSession)\nNotifies you that a drag session ended for the collection view.\nProviding a custom preview\nfunc collectionView(UICollectionView, dragPreviewParametersForItemAt: IndexPath) -> UIDragPreviewParameters?\nReturns custom information about how to display the item at the specified location during the drag.\nControlling the drag session\nfunc collectionView(UICollectionView, dragSessionAllowsMoveOperation: UIDragSession) -> Bool\nReturns a Boolean value that determines whether a move operation is allowed for a drag session.\nfunc collectionView(UICollectionView, dragSessionIsRestrictedToDraggingApplication: UIDragSession) -> Bool\nReturns a Boolean value that determines whether the source app and destination app must be the same for a drag session.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nDrag and drop\nSupporting Drag and Drop in Collection Views\nInitiate drags and handle drops from a collection view.\nprotocol UICollectionViewDropDelegate\nThe interface for handling drops in a collection view.\nprotocol UICollectionViewDropCoordinator\nAn interface for coordinating your custom drop-related actions with the collection view.\nclass UICollectionViewDropPlaceholder\nA placeholder for an item dropped on a collection view.\nclass UICollectionViewDropProposal\nYour proposed solution for handling a drop in a collection view.\nprotocol UICollectionViewDropItem\nThe data associated with an item being dropped into the collection view.\nprotocol UICollectionViewDropPlaceholderContext\nAn object that contains information about a placeholder in the collection view.\nprotocol UIDataSourceTranslating\nAn advanced interface for managing a data source object.\nclass UICollectionViewPlaceholder\nA placeholder for an item dragged or dropped on a collection view."
  },
  {
    "title": "Changing the Appearance of Selected and Highlighted Cells | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/changing_the_appearance_of_selected_and_highlighted_cells",
    "html": "Overview\n\nThis sample app shows how to change the appearance of collection view cells as they transition between unselected, highlighted, and selected states. As a user taps a cell, the app determines the state of the cell and changes the cell’s appearance to indicate the transition between states.\n\nThe collection view in this sample supports single-item selection, which is the default for collection views. You can also configure collection views to support multiple-item selection, or disable selection altogether.\n\nDetermine the State of a Cell\n\nThe collection view in this sample determines the state of a cell by detecting the taps inside its bounds. It then sets the isSelected and isHighlighted properties of the corresponding cell to indicate the current state. The collection view provides this behavior because its allowsSelection property is set to true.\n\nWhen touching an unselected cell, the initial touch-down event causes the collection view to change the isHighlighted property of the cell to true. The final touch-up event causes the highlighted state to return to false. If the touch-up event occurs inside the cell, the collection view sets the cell’s isSelected property to true; otherwise, the property value remains unchanged.\n\nChange the Cell’s Visual Appearance\n\nThe cell’s backgroundView property references the view to display as the background of the cell when it loads for the first time and when it isn’t highlighted or selected. When the cell’s state changes to highlighted or selected, the collection view modifies the properties of a cell to indicate the new state. It doesn’t, however, automatically change the visual appearance of the cell. That is, unless you set the cell’s selectedBackgroundView property to a view.\n\nSetting the selectedBackgroundView to a view causes the collection view to replace the default background with the selected background when highlighting or selecting a cell. Your app doesn’t need to do anything else. The collection view changes the cell’s visual appearance automatically as the cell’s state changes. For example, the sample app uses the selectedBackgroundView property to change the cell’s background color from red to blue when selecting the cell.\n\noverride func awakeFromNib() {\n    super.awakeFromNib()\n    \n    let redView = UIView(frame: bounds)\n    redView.backgroundColor = #colorLiteral(red: 1, green: 0, blue: 0, alpha: 1)\n    self.backgroundView = redView\n\n\n    let blueView = UIView(frame: bounds)\n    blueView.backgroundColor = #colorLiteral(red: 0, green: 0, blue: 1, alpha: 1)\n    self.selectedBackgroundView = blueView\n}\n\n\nProvide Additional Visual Indication of State Changes\n\nProviding a selected background view in a cell is an easy way to have the collection view change the cell’s appearance based on its state, but you can do more than just changing the background. You can, for example, display a checkmark icon in selected cells or distinguish between highlighted and selected states visually.\n\nThe collection view’s delegate has methods that provide you many opportunities to tweak the selection and highlighting appearance of your collection view. For example, if you prefer to draw the selection state of the cell yourself, you can leave the selectedBackgroundView property set to nil. Then apply any visual changes to the cell in the collectionView(_:didSelectItemAt:) delegate method. The sample app uses this method, along with the selected background, to show a star in the selected cell. The app removes the star in the collectionView(_:didDeselectItemAt:) delegate method.\n\nfunc collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {\n    if let cell = collectionView.cellForItem(at: indexPath) as? CustomCollectionViewCell {\n        cell.showIcon()\n    }\n}\n\n\nfunc collectionView(_ collectionView: UICollectionView, didDeselectItemAt indexPath: IndexPath) {\n    if let cell = collectionView.cellForItem(at: indexPath) as? CustomCollectionViewCell {\n        cell.hideIcon()\n    }\n}\n\n\nIf you prefer to draw the highlight state, use the collectionView(_:didHighlightItemAt:) and collectionView(_:didUnhighlightItemAt:) delegate methods. The sample app uses these two methods to display a different shade of red as the highlighted background color. Because cells in this app use the blue view for their selectedBackgroundView, the delegate must apply its changes to the content view of the cells to ensure the changes are visible.\n\nfunc collectionView(_ collectionView: UICollectionView, didHighlightItemAt indexPath: IndexPath) {\n    if let cell = collectionView.cellForItem(at: indexPath) {\n        cell.contentView.backgroundColor = #colorLiteral(red: 1, green: 0.4932718873, blue: 0.4739984274, alpha: 1)\n    }\n}\n\n\nfunc collectionView(_ collectionView: UICollectionView, didUnhighlightItemAt indexPath: IndexPath) {\n    if let cell = collectionView.cellForItem(at: indexPath) {\n        cell.contentView.backgroundColor = nil\n    }\n}\n\n\nSee Also\nSelection management\nSelecting multiple items with a two-finger pan gesture\nAccelerate user selection of multiple items using the multiselect gesture on table and collection views."
  },
  {
    "title": "all | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrolltypemask/3538983-all",
    "html": "See Also\nScroll types\nstatic var continuous: UIScrollTypeMask\nA continuous scroll type from a device, like a trackpad.\nstatic var discrete: UIScrollTypeMask\nA discrete scroll type from a device, like a mouse."
  },
  {
    "title": "UICollectionViewDataSourcePrefetching | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdatasourceprefetching",
    "html": "Overview\n\nYou use a prefetch data source object in conjunction with your collection view’s data source to begin loading data for cells before the collectionView(_:cellForItemAt:) data source method is called.\n\nFollow these steps to add a prefetch data source to your collection view:\n\nCreate the collection view and its data source.\n\nCreate an object that adopts the UICollectionViewDataSourcePrefetching protocol, and assign it to the prefetchDataSource property on the collection view.\n\nInitiate asynchronous loading of the data required for the cells at the specified index paths in your implementation of collectionView(_:prefetchItemsAt:).\n\nPrepare the cell for display using the prefetched data in your implementation of the collectionView(_:cellForItemAt:) data source method.\n\nCancel pending data load operations when the collection view informs you that the data is no longer required in the collectionView(_:cancelPrefetchingForItemsAt:) method.\n\nNote\n\nThe prefetch method isn’t necessarily called for every cell in the collection view. See Load data asynchronously for details on a suggested approach to loading data.\n\nFor more information, see UICollectionView.\n\nLoad data asynchronously\n\nThe collectionView(_:prefetchItemsAt:) method isn’t necessarily called for every cell in the collection view. Your implementation of collectionView(_:cellForItemAt:) must therefore be able to cope with the following potential situations:\n\nData has been loaded via the prefetch request, and is ready to be displayed.\n\nData is currently being prefetched, but isn’t yet available.\n\nData hasn’t yet been requested.\n\nOne approach that handles all of these situations is to use Operation to load the data for each row. You create the Operation object and store it in the prefetch method. The data source method can then either retrieve the operation and the result, or create it if it doesn’t exist. For further information about how you can use asynchronous programming models to achieve this desired behavior, see Concurrency Programming Guide.\n\nTopics\nManaging data prefetching\nPrefetching collection view data\nLoad data for collection view cells before they display.\nfunc collectionView(UICollectionView, prefetchItemsAt: [IndexPath])\nTells your prefetch data source object to begin preparing data for the cells at the supplied index paths.\n\nRequired\n\nfunc collectionView(UICollectionView, cancelPrefetchingForItemsAt: [IndexPath])\nCancels a previously triggered data prefetch request.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nData\nUpdating Collection Views Using Diffable Data Sources\nStreamline the display and update of data in a collection view using a diffable data source that contains identifiers.\nImplementing Modern Collection Views\nBring compositional layouts to your app and simplify updating your user interface with diffable data sources.\nBuilding High-Performance Lists and Collection Views\nImprove the performance of lists and collections in your app with prefetching and image preparation.\nclass UICollectionViewDiffableDataSource\nThe object you use to manage data and provide cells for a collection view.\nprotocol UICollectionViewDataSource\nThe methods adopted by the object you use to manage data and provide cells for a collection view.\nstruct NSDiffableDataSourceSnapshot\nA representation of the state of the data in a view at a specific point in time.\nstruct NSDiffableDataSourceSectionSnapshot\nA representation of the state of the data in a layout section at a specific point in time.\nclass UIRefreshControl\nA standard control that can initiate the refreshing of a scroll view’s contents."
  },
  {
    "title": "UICalendarSelectionMultiDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicalendarselectionmultidate",
    "html": "Topics\nCreating a multiple date selection\ninit(delegate: UICalendarSelectionMultiDateDelegate?)\nCreates an object that tracks multiple dates a user selects from a calendar view, with an optional delegate to manage selectable dates and selection changes.\nSetting the selection delegate\nvar delegate: UICalendarSelectionMultiDateDelegate?\nA delegate object that a calendar view asks for selectable dates and informs of changes to the selection of multiple dates.\nprotocol UICalendarSelectionMultiDateDelegate\nA set of methods you implement to provide selectable dates and handle changes to the selection of multiple dates.\nUpdating the selected dates\nvar selectedDates: [DateComponents]\nAn array of date component objects that represent selected dates in a calendar view.\nfunc setSelectedDates([DateComponents], animated: Bool)\nUpdates the array of date component objects that represent selected dates in a calendar view, with an option to animate the change.\nRelationships\nInherits From\nUICalendarSelection\nSee Also\nHandling date selections\nvar selectionBehavior: UICalendarSelection?\nThe current date selection method of the calendar view.\nclass UICalendarSelectionSingleDate\nAn object that tracks a date the user selects from a calendar view.\nclass UICalendarSelection\nA base object that tracks one or more dates a user selects from a calendar view."
  },
  {
    "title": "init(style:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivityindicatorview/1622840-init",
    "html": "Parameters\nstyle\n\nA constant that specifies the style of the object to be created. See UIActivityIndicatorView.Style for descriptions of the style constants.\n\nReturn Value\n\nAn initialized UIActivityIndicatorView object.\n\nDiscussion\n\nUIActivityIndicatorView sizes the returned instance according to the specified style. You can set and retrieve the style of an activity indicator through the style property.\n\nSee Also\nCreating an activity indicator\ninit(frame: CGRect)\nCreates an activity indicator with the specified frame rectangle.\ninit(coder: NSCoder)\nCreates an activity indicator from data in an unarchiver."
  },
  {
    "title": "UICalendarView.DecorationSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicalendarview/decorationsize",
    "html": "Topics\nDecoration View Sizes\ncase large\nA large relative decoration size in a calendar view.\ncase medium\nA medium relative decoration size in a calendar view.\ncase small\nA small relative decoration size in a calendar view.\nRelationships\nConforms To\nSendable\nSee Also\nCustomizing the calendar display\nvar fontDesign: UIFontDescriptor.SystemDesign\nA font design that the calendar view uses for displaying calendar text.\nvar delegate: UICalendarViewDelegate?\nA delegate object the calendar view calls for decoration views.\nprotocol UICalendarViewDelegate\nAn object that a calendar view uses to display decorations for dates.\nclass UICalendarView.Decoration\nA view that a calendar view displays for a specific date.\nvar wantsDateDecorations: Bool\nA Boolean value that indicates whether the calendar view displays date decorations.\nfunc reloadDecorations(forDateComponents: [DateComponents], animated: Bool)\nReloads the decorations for the dates you provide, with an option to animate the decoration reload."
  },
  {
    "title": "UICalendarView.Decoration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicalendarview/decoration",
    "html": "Topics\nCreating a Default Decoration View\ninit()\nCreates a default calendar view decoration with a filled circle image, using the system fill color and medium size.\nstatic func `default`(color: UIColor?, size: UICalendarView.DecorationSize) -> UICalendarView.Decoration\nCreates a default calendar view decoration with a filled circle image, using the color and size you specify.\nCreating a Custom Decoration View\nclass func customView(() -> UIView) -> Self\nCreates a new calendar view decoration with a custom view, using your view provider.\nCreating Image Decoration Views\nstatic func image(UIImage?, color: UIColor?, size: UICalendarView.DecorationSize) -> UICalendarView.Decoration\nCreates a new calendar view decoration with the image, color, and size that you specify.\nRelationships\nInherits From\nNSObject\nSee Also\nCustomizing the calendar display\nvar fontDesign: UIFontDescriptor.SystemDesign\nA font design that the calendar view uses for displaying calendar text.\nvar delegate: UICalendarViewDelegate?\nA delegate object the calendar view calls for decoration views.\nprotocol UICalendarViewDelegate\nAn object that a calendar view uses to display decorations for dates.\nenum UICalendarView.DecorationSize\nConstants that indicate the relative size of a decoration in a calendar view.\nvar wantsDateDecorations: Bool\nA Boolean value that indicates whether the calendar view displays date decorations.\nfunc reloadDecorations(forDateComponents: [DateComponents], animated: Bool)\nReloads the decorations for the dates you provide, with an option to animate the decoration reload."
  },
  {
    "title": "UIActivityIndicatorView.Style | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivityindicatorview/style",
    "html": "Overview\n\nYou set the value of the style property with these constants.\n\nTopics\nConstants\ncase large\nThe large style of indicator.\ncase medium\nThe default activity indicator style.\ncase whiteLarge\nThe large white style of indicator.\nDeprecated\ncase white\nThe standard white style of indicator.\nDeprecated\ncase gray\nThe standard gray style of indicator.\nDeprecated\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "color | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivityindicatorview/1622836-color",
    "html": "Discussion\n\nIf you set a color for an activity indicator, it overrides the color provided by the style property.\n\nSee Also\nConfiguring the activity indicator appearance\nvar style: UIActivityIndicatorView.Style\nThe basic appearance of the activity indicator."
  },
  {
    "title": "stopAnimating() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivityindicatorview/1622842-stopanimating",
    "html": "Discussion\n\nCall this method to stop the animation of the progress indicator started with a call to startAnimating(). When animating is stopped, the indicator is hidden, unless hidesWhenStopped is false.\n\nSee Also\nManaging an activity indicator\nfunc startAnimating()\nStarts the animation of the progress indicator.\nvar isAnimating: Bool\nA Boolean value indicating whether the activity indicator is currently running its animation.\nvar hidesWhenStopped: Bool\nA Boolean value that controls whether the activity indicator is hidden when the animation is stopped."
  },
  {
    "title": "startAnimating() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivityindicatorview/1622835-startanimating",
    "html": "Discussion\n\nWhen the progress indicator is animated, the gear spins to indicate indeterminate progress. The indicator is animated until stopAnimating() is called.\n\nSee Also\nManaging an activity indicator\nfunc stopAnimating()\nStops the animation of the progress indicator.\nvar isAnimating: Bool\nA Boolean value indicating whether the activity indicator is currently running its animation.\nvar hidesWhenStopped: Bool\nA Boolean value that controls whether the activity indicator is hidden when the animation is stopped."
  },
  {
    "title": "cancelTracking(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicontrol/1618219-canceltracking",
    "html": "Parameters\nevent\n\nAn event object related to touches that occurred in the control. This parameter might be nil, indicating that the cancelation was caused by something other than an event, such as the view being removed from the window.\n\nDiscussion\n\nThe control calls this method when a control-related touch event is canceled. The default implementation cancels any ongoing tracking and updates the control’s state information. Subclasses can override this method and use it to perform any actions relevant to the cancellation of the touch sequence. You should also use it to perform any cleanup associated with tracking the event.\n\nIf you override this method, you must call super at some point in your implementation.\n\nSee Also\nTracking touches and redrawing controls\nfunc beginTracking(UITouch, with: UIEvent?) -> Bool\nNotifies the control when a touch event enters the control’s bounds.\nfunc continueTracking(UITouch, with: UIEvent?) -> Bool\nNotifies the control when a touch event for the control updates.\nfunc endTracking(UITouch?, with: UIEvent?)\nNotifies the control when a touch event associated with the control ends.\nvar isTracking: Bool\nA Boolean value that indicates whether the control is currently tracking touch events.\nvar isTouchInside: Bool\nA Boolean value that indicates whether a tracked touch event is currently inside the control’s bounds."
  },
  {
    "title": "setIncrementImage(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistepper/1624070-setincrementimage",
    "html": "Parameters\nimage\n\nThe image to use for the increment glyph.\n\nstate\n\nThe control state.\n\nDiscussion\n\nThe image you specify is used as a template image to create the final control. If you don’t specify a custom image, a plus (+) glyph is used.\n\nSee Also\nCustomizing appearance\nfunc backgroundImage(for: UIControl.State) -> UIImage?\nReturns the background image associated with the specified control state.\nfunc setBackgroundImage(UIImage?, for: UIControl.State)\nSets the background image for the control when it’s in the specified state.\nfunc decrementImage(for: UIControl.State) -> UIImage?\nReturns the image used for the decrement glyph of the control.\nfunc setDecrementImage(UIImage?, for: UIControl.State)\nSets the image to use for the decrement glyph of the control.\nfunc dividerImage(forLeftSegmentState: UIControl.State, rightSegmentState: UIControl.State) -> UIImage?\nReturns the divider image for the given combination of left and right states.\nfunc setDividerImage(UIImage?, forLeftSegmentState: UIControl.State, rightSegmentState: UIControl.State)\nSets the image to use for the given combination of left and right states.\nfunc incrementImage(for: UIControl.State) -> UIImage?\nReturns the image used for the increment glyph of the control."
  },
  {
    "title": "incrementImage(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistepper/1624080-incrementimage",
    "html": "Parameters\nstate\n\nThe control state in which the image is displayed.\n\nReturn Value\n\nThe image used for the increment glyph of the control.\n\nSee Also\nCustomizing appearance\nfunc backgroundImage(for: UIControl.State) -> UIImage?\nReturns the background image associated with the specified control state.\nfunc setBackgroundImage(UIImage?, for: UIControl.State)\nSets the background image for the control when it’s in the specified state.\nfunc decrementImage(for: UIControl.State) -> UIImage?\nReturns the image used for the decrement glyph of the control.\nfunc setDecrementImage(UIImage?, for: UIControl.State)\nSets the image to use for the decrement glyph of the control.\nfunc dividerImage(forLeftSegmentState: UIControl.State, rightSegmentState: UIControl.State) -> UIImage?\nReturns the divider image for the given combination of left and right states.\nfunc setDividerImage(UIImage?, forLeftSegmentState: UIControl.State, rightSegmentState: UIControl.State)\nSets the image to use for the given combination of left and right states.\nfunc setIncrementImage(UIImage?, for: UIControl.State)\nSets the image to use for the increment glyph of the control."
  },
  {
    "title": "setDividerImage(_:forLeftSegmentState:rightSegmentState:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistepper/1624071-setdividerimage",
    "html": "Parameters\nimage\n\nThe divider image to use.\n\nleftState\n\nThe state of the left side of the control.\n\nrightState\n\nThe state of the right side of the control.\n\nSee Also\nCustomizing appearance\nfunc backgroundImage(for: UIControl.State) -> UIImage?\nReturns the background image associated with the specified control state.\nfunc setBackgroundImage(UIImage?, for: UIControl.State)\nSets the background image for the control when it’s in the specified state.\nfunc decrementImage(for: UIControl.State) -> UIImage?\nReturns the image used for the decrement glyph of the control.\nfunc setDecrementImage(UIImage?, for: UIControl.State)\nSets the image to use for the decrement glyph of the control.\nfunc dividerImage(forLeftSegmentState: UIControl.State, rightSegmentState: UIControl.State) -> UIImage?\nReturns the divider image for the given combination of left and right states.\nfunc incrementImage(for: UIControl.State) -> UIImage?\nReturns the image used for the increment glyph of the control.\nfunc setIncrementImage(UIImage?, for: UIControl.State)\nSets the image to use for the increment glyph of the control."
  },
  {
    "title": "right | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiswipegesturerecognizer/direction/1619180-right",
    "html": "Discussion\n\nThis direction is the default."
  },
  {
    "title": "init(wrappedValue:_:_:_:_:_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/invalidating/3853110-init",
    "html": "Parameters\nwrappedValue\n\nThe underlying value referenced by the invalidating variable.\n\ninvalidation1\n\nA type of invalidation.\n\ninvalidation2\n\nA type of invalidation.\n\ninvalidation3\n\nA type of invalidation.\n\ninvalidation4\n\nA type of invalidation.\n\ninvalidation5\n\nA type of invalidation.\n\ninvalidation6\n\nA type of invalidation.\n\ninvalidation7\n\nA type of invalidation.\n\ninvalidation8\n\nA type of invalidation.\n\ninvalidation9\n\nA type of invalidation.\n\ninvalidation10\n\nA type of invalidation.\n\nSee Also\nCreating an Invalidating Property Wrapper\ninit(wrappedValue: Value, InvalidationType)\nCreates a property wrapper that notifies the system when a change in the property value invalidates an aspect of the containing view.\ninit<InvalidationType1, InvalidationType2>(wrappedValue: Value, InvalidationType1, InvalidationType2)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view."
  },
  {
    "title": "widthAnchor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilayoutguide/1619653-widthanchor",
    "html": "Discussion\n\nUse this anchor to create constraints with the layout guide’s width. You can combine this anchor only with other NSLayoutDimension anchors. For more information, see NSLayoutAnchor.\n\nSee Also\nCreating constraints using layout anchors\nvar bottomAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the bottom edge of the layout guide’s frame.\nvar centerXAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the horizontal center of the layout guide’s frame.\nvar centerYAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the vertical center of the layout guide’s frame.\nvar heightAnchor: NSLayoutDimension\nA layout anchor representing the height of the layout guide’s frame.\nvar leadingAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the leading edge of the layout guide’s frame.\nvar leftAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the left edge of the layout guide’s frame.\nvar rightAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the right edge of the layout guide’s frame.\nvar topAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the top edge of the layout guide’s frame.\nvar trailingAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the trailing edge of the layout guide’s frame."
  },
  {
    "title": "NSLayoutConstraint.Attribute | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutconstraint/attribute",
    "html": "Topics\nConstants\ncase left\nThe left side of the object’s alignment rectangle.\ncase right\nThe right side of the object’s alignment rectangle.\ncase top\nThe top of the object’s alignment rectangle.\ncase bottom\nThe bottom of the object’s alignment rectangle.\ncase leading\nThe leading edge of the object’s alignment rectangle.\ncase trailing\nThe trailing edge of the object’s alignment rectangle.\ncase width\nThe width of the object’s alignment rectangle.\ncase height\nThe height of the object’s alignment rectangle.\ncase centerX\nThe center along the x-axis of the object’s alignment rectangle.\ncase centerY\nThe center along the y-axis of the object’s alignment rectangle.\ncase lastBaseline\nThe object’s baseline.\ncase firstBaseline\nThe object’s baseline.\ncase leftMargin\nThe object’s left margin.\ncase rightMargin\nThe object’s right margin.\ncase topMargin\nThe object’s top margin.\ncase bottomMargin\nThe object’s bottom margin.\ncase leadingMargin\nThe object’s leading margin.\ncase trailingMargin\nThe object’s trailing margin.\ncase centerXWithinMargins\nThe center along the x-axis between the object’s left and right margin.\ncase centerYWithinMargins\nThe center along the y-axis between the object’s top and bottom margin.\ncase notAnAttribute\nA placeholder value for indicating that the constraint’s second item and second attribute aren’t used in any calculations.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "UILayoutPriority | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilayoutpriority",
    "html": "Topics\nConstants\nstatic let required: UILayoutPriority\nA required constraint.\nstatic let defaultHigh: UILayoutPriority\nThe priority level with which a button resists compressing its content.\nstatic let dragThatCanResizeScene: UILayoutPriority\nThe priority level for a drag that may end up resizing the window’s scene.\nstatic let sceneSizeStayPut: UILayoutPriority\nThe priority level at which the window’s scene prefers to stay the same size.\nstatic let dragThatCannotResizeScene: UILayoutPriority\nThe priority level for a drag that won’t resize the window’s scene.\nstatic let defaultLow: UILayoutPriority\nThe priority level at which a button hugs its contents horizontally.\nstatic let fittingSizeLevel: UILayoutPriority\nThe priority level with which the view wants to conform to the target size in that computation.\nInitializers\ninit(Float)\nCreates a layout priority structure.\ninit(rawValue: Float)\nCreates a layout priority structure with the specified raw value.\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable\nSee Also\nGetting the layout priority\nvar priority: UILayoutPriority\nThe priority of the constraint.\nstruct NSLayoutConstraint.Priority\nLayout priority used to indicate the relative importance of constraints, allowing Auto Layout to make appropriate tradeoffs when satisfying the constraints of the system as a whole."
  },
  {
    "title": "NSLayoutConstraint.FormatOptions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutconstraint/formatoptions",
    "html": "Topics\nConstants\nstatic var alignAllLeft: NSLayoutConstraint.FormatOptions\nAlign all specified interface elements using NSLayoutConstraint.Attribute.left on each.\nstatic var alignAllRight: NSLayoutConstraint.FormatOptions\nAlign all specified interface elements using NSLayoutConstraint.Attribute.right on each.\nstatic var alignAllTop: NSLayoutConstraint.FormatOptions\nAlign all specified interface elements using NSLayoutConstraint.Attribute.top on each.\nstatic var alignAllBottom: NSLayoutConstraint.FormatOptions\nAlign all specified interface elements using NSLayoutConstraint.Attribute.bottom on each.\nstatic var alignAllLeading: NSLayoutConstraint.FormatOptions\nAlign all specified interface elements using NSLayoutConstraint.Attribute.leading on each.\nstatic var alignAllTrailing: NSLayoutConstraint.FormatOptions\nAlign all specified interface elements using NSLayoutConstraint.Attribute.trailing on each.\nstatic var alignAllCenterX: NSLayoutConstraint.FormatOptions\nAlign all specified interface elements using NSLayoutConstraint.Attribute.centerX on each.\nstatic var alignAllCenterY: NSLayoutConstraint.FormatOptions\nAlign all specified interface elements using NSLayoutConstraint.Attribute.centerY on each.\nstatic var alignAllLastBaseline: NSLayoutConstraint.FormatOptions\nAlign all specified interface elements using the last baseline of each one.\nstatic var alignAllFirstBaseline: NSLayoutConstraint.FormatOptions\nAlign all specified interface elements using the first baseline of each one.\nstatic var alignmentMask: NSLayoutConstraint.FormatOptions\nBit mask that can be combined with a NSLayoutConstraint.FormatOptions variable to yield only the alignment portion of the format options.\nstatic var directionLeadingToTrailing: NSLayoutConstraint.FormatOptions\nArrange objects in order based on the normal text flow for the current user interface language. In left-to-right languages (like English), this arrangement results in the first object being placed farthest to the left, the next one to its right, and so on. In right-to-left languages (like Arabic or Hebrew), the ordering is reversed.\nstatic var directionLeftToRight: NSLayoutConstraint.FormatOptions\nArrange objects in order from left to right.\nstatic var directionRightToLeft: NSLayoutConstraint.FormatOptions\nArrange objects in order from right to left.\nstatic var directionMask: NSLayoutConstraint.FormatOptions\nA bit mask that can be combined with an NSLayoutConstraint.FormatOptions variable to yield only the direction portion of the format options.\nstatic var spacingBaselineToBaseline: NSLayoutConstraint.FormatOptions\nAlign elements vertically according to their baseline positions.\nstatic var spacingMask: NSLayoutConstraint.FormatOptions\nA bit mask that can be combined with an NSLayoutConstraint.FormatOptions variable to yield only the spacing baseline spacing portion of the format options.\nInitializers\ninit(rawValue: UInt)\nCreates a formatting-options structure with the specified raw value.\nRelationships\nConforms To\nOptionSet\nSendable"
  },
  {
    "title": "leadingAnchor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilayoutguide/1619658-leadinganchor",
    "html": "Discussion\n\nUse this anchor to create constraints with the layout guide’s leading edge. You can combine this anchor only with a subset of the NSLayoutXAxisAnchor anchors. You can combine a leadingAnchor with another leadingAnchor, a trailingAnchor, or a centerXAnchor. For more information, see NSLayoutAnchor.\n\nSee Also\nCreating constraints using layout anchors\nvar bottomAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the bottom edge of the layout guide’s frame.\nvar centerXAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the horizontal center of the layout guide’s frame.\nvar centerYAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the vertical center of the layout guide’s frame.\nvar heightAnchor: NSLayoutDimension\nA layout anchor representing the height of the layout guide’s frame.\nvar leftAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the left edge of the layout guide’s frame.\nvar rightAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the right edge of the layout guide’s frame.\nvar topAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the top edge of the layout guide’s frame.\nvar trailingAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the trailing edge of the layout guide’s frame.\nvar widthAnchor: NSLayoutDimension\nA layout anchor representing the width of the layout guide’s frame."
  },
  {
    "title": "constraint(greaterThanOrEqualTo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutanchor/1500936-constraint",
    "html": "Parameters\nanchor\n\nA layout anchor from a UIView, NSView, or UILayoutGuide object. You must use a subclass of NSLayoutAnchor that matches the current anchor. For example, if you call this method on an NSLayoutXAxisAnchor object, this parameter must be another NSLayoutXAxisAnchor.\n\nReturn Value\n\nAn NSLayoutConstraint object that defines the attribute represented by this layout anchor as greater than or equal to the attribute represented by the anchor parameter.\n\nDiscussion\n\nThis method creates a relationship where first attribute >= second attribute. Where first attribute is the layout attribute represented by the anchor receiving this method call, and second attribute is the layout attribute represented by the anchor parameter. All values are measured in points; however, these values can be interpreted in different ways, depending on the type of layout anchor.\n\nFor leading or trailing anchors, the values increase as you move in the current language’s reading direction. In English, for example, values increase as you move to the right.\n\nFor left and right anchors, the values increase as you move to the right.\n\nFor NSLayoutYAxisAnchor objects, the values increase as you move down.\n\nFor NSLayoutDimension objects, the values increase as the items increase in size.\n\nThe constraints produced by the following two examples are identical.\n\n// Creating a constraint using NSLayoutConstraint\nNSLayoutConstraint(item: subview,\n                   attribute: .Leading,\n                   relatedBy: .GreaterThanOrEqual,\n                   toItem: view,\n                   attribute: .LeadingMargin,\n                   multiplier: 1.0,\n                   constant: 0.0).isActive = true\n \n// Creating the same constraint using constraintGreaterThanOrEqualToAnchor:\nlet margins = view.layoutMarginsGuide\nsubview.leadingAnchor.constraintGreaterThanOrEqualToAnchor(margins.leadingAnchor).isActive = true\n\nSee Also\nBuilding constraints\nfunc constraint(equalTo: NSLayoutAnchor<AnchorType>) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as equal to another.\nfunc constraint(equalTo: NSLayoutAnchor<AnchorType>, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as equal to another item’s attribute plus a constant offset.\nfunc constraint(greaterThanOrEqualTo: NSLayoutAnchor<AnchorType>, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as greater than or equal to another item’s attribute plus a constant offset.\nfunc constraint(lessThanOrEqualTo: NSLayoutAnchor<AnchorType>) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as less than or equal to another.\nfunc constraint(lessThanOrEqualTo: NSLayoutAnchor<AnchorType>, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as less than or equal to another item’s attribute plus a constant offset."
  },
  {
    "title": "constraint(greaterThanOrEqualTo:constant:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutanchor/1500948-constraint",
    "html": "Parameters\nanchor\n\nA layout anchor from a UIView, NSView, or UILayoutGuide object. You must use a subclass of NSLayoutAnchor that matches the current anchor. For example, if you call this method on an NSLayoutXAxisAnchor object, this parameter must be another NSLayoutXAxisAnchor.\n\nc\n\nThe constant offset for the constraint.\n\nReturn Value\n\nAn NSLayoutConstraint object that defines the attribute represented by this layout anchor as greater than or equal to the attribute represented by the anchor parameter plus a constant offset.\n\nDiscussion\n\nThis method defines the relationship first attribute >= second attribute + c. Where first attribute is the layout attribute represented by the anchor receiving this method call, and second attribute is the layout attribute represented by the anchor parameter. The value c, represents a constant offset. All values are measured in points; however, these values can be interpreted in different ways, depending on the type of layout anchor.\n\nFor NSLayoutXAxisAnchor objects, the first attribute is positioned c points after the second attribute. When using leading or trailing attributes, values increase as you move in the language’s reading direction. In English, for example, values increase as you move to the right. For left and right attributes, values always increase as you move right.\n\nFor NSLayoutYAxisAnchor objects, the first attribute is positioned c points below the second attribute. Values increase as you move down.\n\nFor NSLayoutDimension objects, the size of the first attribute is c points larger than the size of the second attribute. Values increase as items increase in size.\n\nThe constraints produced by the following two examples are identical.\n\n// Creating a constraint using NSLayoutConstraint\n \nNSLayoutConstraint(item: textField,\n                   attribute: .Leading,\n                   relatedBy: .GreaterThanOrEqual,\n                   toItem: label,\n                   attribute: .Trailing,\n                   multiplier: 1.0,\n                   constant: 8.0).isActive = true\n \n// Creating the same constraint using constraintGreaterThanOrEqualToAnchor:constant:\ntextField.leadingAnchor.constraintGreaterThanOrEqualToAnchor(label.trailingAnchor, constant: 8.0).isActive = true\n\nSee Also\nBuilding constraints\nfunc constraint(equalTo: NSLayoutAnchor<AnchorType>) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as equal to another.\nfunc constraint(equalTo: NSLayoutAnchor<AnchorType>, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as equal to another item’s attribute plus a constant offset.\nfunc constraint(greaterThanOrEqualTo: NSLayoutAnchor<AnchorType>) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as greater than or equal to another.\nfunc constraint(lessThanOrEqualTo: NSLayoutAnchor<AnchorType>) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as less than or equal to another.\nfunc constraint(lessThanOrEqualTo: NSLayoutAnchor<AnchorType>, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as less than or equal to another item’s attribute plus a constant offset."
  },
  {
    "title": "identifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilayoutguide/1619655-identifier",
    "html": "Discussion\n\nBy default, the identifier property is an empty string. Assign a nonempty string to identify this layout guide. This string appears as part of the guide’s description when the guide is printed to the console. You can also use the identifier to find a particular layout guide from among the guides owned by a view.\n\nIdentifiers starting with “NS” or “UI” are reserved by the system. The system may assign these identifiers to the guides it creates.\n\nSee Also\nWorking with layout guides\nvar layoutFrame: CGRect\nThe layout guide’s frame in its owning view’s coordinate system.\nvar owningView: UIView?\nThe view that owns this layout guide."
  },
  {
    "title": "constraint(equalToSystemSpacingAfter:multiplier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutxaxisanchor/2866112-constraint",
    "html": "Parameters\nanchor\n\nThe anchor to use as the starting point for the constraint.\n\nmultiplier\n\nThe multiple of the system spacing to use as the distance between the two anchors.\n\nReturn Value\n\nAn NSLayoutConstraint object that imposes a specific distance between the current anchor and the object in the anchor parameter.\n\nDiscussion\n\nThe constraint causes the current anchor to trail the object in the anchor parameter. For example, in a left-to-right layout, the current anchor is to the right of anchor, but in a right-to-left layout, it’s to the left of anchor.\n\nThe distance between the two anchors is determined by multiplying the system spacing by the value in the multiplier parameter. The value of the system space is determined from information available from the anchors.\n\nSee Also\nBuilding system spacing constraints\nfunc constraint(greaterThanOrEqualToSystemSpacingAfter: NSLayoutXAxisAnchor, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the minimum amount by which the current anchor trails the specified anchor.\nfunc constraint(lessThanOrEqualToSystemSpacingAfter: NSLayoutXAxisAnchor, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the maximum amount by which the current anchor trails the specified anchor.\nCreating Self-Sizing Table View Cells\nCreate table view cells that support Dynamic Type and use system spacing constraints to adjust the spacing surrounding text labels."
  },
  {
    "title": "allowAnimatedContent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/animationoptions/1622470-allowanimatedcontent",
    "html": "Discussion\n\nIf this key is not present, the views are animated using a snapshot image."
  },
  {
    "title": "NSLayoutConstraint.Attribute.lastBaseline | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutconstraint/attribute/lastbaseline",
    "html": "Discussion\n\nFor objects with more than one line of text, this is the baseline for the bottommost line of text."
  },
  {
    "title": "UIUserInterfaceLayoutDirection.rightToLeft | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiuserinterfacelayoutdirection/righttoleft",
    "html": "Discussion\n\nThis value is appropriate when running with localizations such as Arabic or Hebrew that should have the user interface layout origin on the right edge of the coordinate system."
  },
  {
    "title": "init(wrappedValue:_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/invalidating/3853106-init",
    "html": "Parameters\nwrappedValue\n\nThe underlying value referenced by the invalidating variable.\n\ninvalidation1\n\nA type of invalidation.\n\ninvalidation2\n\nA type of invalidation.\n\ninvalidation3\n\nA type of invalidation.\n\ninvalidation4\n\nA type of invalidation.\n\ninvalidation5\n\nA type of invalidation.\n\ninvalidation6\n\nA type of invalidation.\n\nSee Also\nCreating an Invalidating Property Wrapper\ninit(wrappedValue: Value, InvalidationType)\nCreates a property wrapper that notifies the system when a change in the property value invalidates an aspect of the containing view.\ninit<InvalidationType1, InvalidationType2>(wrappedValue: Value, InvalidationType1, InvalidationType2)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9, InvalidationType10>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9, InvalidationType10)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view."
  },
  {
    "title": "init(wrappedValue:_:_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/invalidating/3853107-init",
    "html": "Parameters\nwrappedValue\n\nThe underlying value referenced by the invalidating variable.\n\ninvalidation1\n\nA type of invalidation.\n\ninvalidation2\n\nA type of invalidation.\n\ninvalidation3\n\nA type of invalidation.\n\ninvalidation4\n\nA type of invalidation.\n\ninvalidation5\n\nA type of invalidation.\n\ninvalidation6\n\nA type of invalidation.\n\ninvalidation7\n\nA type of invalidation.\n\nSee Also\nCreating an Invalidating Property Wrapper\ninit(wrappedValue: Value, InvalidationType)\nCreates a property wrapper that notifies the system when a change in the property value invalidates an aspect of the containing view.\ninit<InvalidationType1, InvalidationType2>(wrappedValue: Value, InvalidationType1, InvalidationType2)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9, InvalidationType10>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9, InvalidationType10)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view."
  },
  {
    "title": "init(wrappedValue:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/invalidating/3853104-init",
    "html": "Parameters\nwrappedValue\n\nThe underlying value referenced by the invalidating variable.\n\ninvalidation1\n\nA type of invalidation.\n\ninvalidation2\n\nA type of invalidation.\n\ninvalidation3\n\nA type of invalidation.\n\ninvalidation4\n\nA type of invalidation.\n\nSee Also\nCreating an Invalidating Property Wrapper\ninit(wrappedValue: Value, InvalidationType)\nCreates a property wrapper that notifies the system when a change in the property value invalidates an aspect of the containing view.\ninit<InvalidationType1, InvalidationType2>(wrappedValue: Value, InvalidationType1, InvalidationType2)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9, InvalidationType10>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9, InvalidationType10)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view."
  },
  {
    "title": "init(wrappedValue:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/invalidating/3853105-init",
    "html": "Parameters\nwrappedValue\n\nThe underlying value referenced by the invalidating variable.\n\ninvalidation1\n\nA type of invalidation.\n\ninvalidation2\n\nA type of invalidation.\n\ninvalidation3\n\nA type of invalidation.\n\ninvalidation4\n\nA type of invalidation.\n\ninvalidation5\n\nA type of invalidation.\n\nSee Also\nCreating an Invalidating Property Wrapper\ninit(wrappedValue: Value, InvalidationType)\nCreates a property wrapper that notifies the system when a change in the property value invalidates an aspect of the containing view.\ninit<InvalidationType1, InvalidationType2>(wrappedValue: Value, InvalidationType1, InvalidationType2)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9, InvalidationType10>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9, InvalidationType10)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view."
  },
  {
    "title": "Selecting multiple items with a two-finger pan gesture | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdelegate/selecting_multiple_items_with_a_two-finger_pan_gesture",
    "html": "Overview\n\nIn iOS 13 and later, you can provide users of your app with the ability to select multiple items using a two-finger pan gesture on table and collection views. Apps that opt-in to this feature make it possible for users to select multiple items quickly. For instance, when a table view recognizes the two-finger pan gesture, an app can automatically put the table view in edit mode, and the user doesn’t need to tap an Edit or Select button.\n\nTo select multiple items, drag two fingers over the items you want to select. When the view recognizes the two-finger pan gesture, it changes to edit mode, allowing you to select more than one item.\n\nThe selected items don’t have to be contiguous. Use two fingers to select a few items, scroll the view, and use your two fingers again to select more items. You can also use the same two-finger pan gesture to unselect multiple items. Just drag your two fingers over the selected items, and both the table and collection views will deselect the items.\n\nThis sample shows you how to support this feature in your app. The sample app displays a table view and a collection view. When the sample is run on iPad, the app displays the two views side-by-side using a spit view. When you run the app on iPhone, the app displays a tab bar that lets you switch between the table and collection views.\n\nSupport multiple item selection in a table view\n\nTo enable the two-finger pan gesture in a table view, implement the delegate method tableView(_:shouldBeginMultipleSelectionInteractionAt:), and return true. The table view calls this method when it detects the two-finger touch to determine whether the app supports the multiple-selection gesture.\n\noverride func tableView(_ tableView: UITableView, shouldBeginMultipleSelectionInteractionAt indexPath: IndexPath) -> Bool {\n    return true\n}\n\n\nAfter returning true, the table view calls the tableView(_:didBeginMultipleSelectionInteractionAt:) delegate method. The sample app uses this opportunity to switch the table view into edit mode without requiring the user to tap the Edit button. The table view also selects the current row. The user pans their two fingers up or down on the table view to select additional rows.\n\noverride func tableView(_ tableView: UITableView, didBeginMultipleSelectionInteractionAt indexPath: IndexPath) {\n    // Replace the Edit button with Done, and put the\n    // table view into editing mode.\n    self.setEditing(true, animated: true)\n}\n\n\nWhen the user lifts their two fingers off the device, the table view calls the tableViewDidEndMultipleSelectionInteraction(_:) delegate method. This is the app’s indication that the user is no longer using the two-finger pan gesture. The sample app’s implementation of this method doesn’t perform any action, which gives the user the opportunity to select more items using the two-finger pan gesture. The user can also select more items by moving a single finger along the edge of the table where it displays the selection checkboxes.\n\noverride func tableViewDidEndMultipleSelectionInteraction(_ tableView: UITableView) {\n    print(\"\\(#function)\")\n}\n\n\nSupport multiple item selection in a collection view\n\nProviding the same multiselect behavior in a collection view is similar to the implementation for a table view. Start by implementing the collection view delegate method collectionView(_:shouldBeginMultipleSelectionInteractionAt:), which determines whether the gesture should be available to the user. The sample app returns true in this method.\n\nNext, implement the delegate method collectionView(_:didBeginMultipleSelectionInteractionAt:). As with the table view delegate variant, the sample app implementation of this method puts the collection view into edit mode.\n\nThe third and last delegate method to implement is collectionViewDidEndMultipleSelectionInteraction(_:). Here the sample app doesn’t perform any action so that the user can continue selecting items with either a tap or another pan gesture using two fingers.\n\nfunc collectionView(_ collectionView: UICollectionView, shouldBeginMultipleSelectionInteractionAt indexPath: IndexPath) -> Bool {\n    // Returning `true` automatically sets `collectionView.isEditing`\n    // to `true`. The app sets it to `false` after the user taps the Done button.\n    return true\n}\n\n\nfunc collectionView(_ collectionView: UICollectionView, didBeginMultipleSelectionInteractionAt indexPath: IndexPath) {\n    // Replace the Select button with Done, and put the\n    // collection view into editing mode.\n    setEditing(true, animated: true)\n}\n\n\nfunc collectionViewDidEndMultipleSelectionInteraction(_ collectionView: UICollectionView) {\n    print(\"\\(#function)\")\n}\n\n\nThe user can also pan a single finger along the constrained axis to select more items. For instance, if the collection view scrolls vertically, the user can pan one finger horizontally to select more items.\n\nSee Also\nSelection management\nChanging the Appearance of Selected and Highlighted Cells\nProvide visual feedback to the user about the state of a cell and the transition between states."
  },
  {
    "title": "secondAttribute | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutconstraint/1526941-secondattribute",
    "html": "See Also\nAccessing constraint data\nvar firstItem: AnyObject?\nThe first object participating in the constraint.\nvar firstAttribute: NSLayoutConstraint.Attribute\nThe attribute of the first object participating in the constraint.\nvar relation: NSLayoutConstraint.Relation\nThe relation between the two attributes in the constraint.\nvar secondItem: AnyObject?\nThe second object participating in the constraint.\nvar multiplier: CGFloat\nThe multiplier applied to the second attribute participating in the constraint.\nvar constant: CGFloat\nThe constant added to the multiplied second attribute participating in the constraint.\nvar firstAnchor: NSLayoutAnchor<AnyObject>\nThe first anchor that defines the constraint.\nvar secondAnchor: NSLayoutAnchor<AnyObject>?\nThe second anchor that defines the constraint."
  },
  {
    "title": "UICollectionReusableView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionreusableview",
    "html": "Overview\n\nReusable views are so named because the collection view places them on a reuse queue rather than deleting them when they’re scrolled out of the visible bounds. Such a view can then be retrieved and repurposed for a different set of content.\n\nSubclassing notes\n\nThis class is intended to be subclassed. Most methods defined by this class have minimal or no implementations. You aren’t required to override any of the methods but can do so in cases where you want to respond to changes in the view’s usage or layout.\n\nTopics\nReusing cells\nvar reuseIdentifier: String?\nA string that identifies the purpose of the view.\nfunc prepareForReuse()\nPerforms any clean up necessary to prepare the view for use again.\nManaging layout changes\nfunc preferredLayoutAttributesFitting(UICollectionViewLayoutAttributes) -> UICollectionViewLayoutAttributes\nGives the cell a chance to modify the attributes provided by the layout object.\nfunc apply(UICollectionViewLayoutAttributes)\nApplies the specified layout attributes to the view.\nfunc willTransition(from: UICollectionViewLayout, to: UICollectionViewLayout)\nTells your view that the layout object of the collection view is about to change.\nfunc didTransition(from: UICollectionViewLayout, to: UICollectionViewLayout)\nTells your view that the layout object of the collection view changed.\nRelationships\nInherits From\nUIView\nSee Also\nCells\nclass UICollectionViewCell\nA single data item when that item is within the collection view’s visible bounds.\nclass UICollectionViewListCell\nA collection view cell that provides list features and default styling."
  },
  {
    "title": "UICollectionViewListCell | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewlistcell",
    "html": "Overview\n\nA list cell represents an individual item that might appear in a list. List cells provide built-in support for indentation, and the ability to add cell accessories (UICellAccessory) for visual adornment or to support user interactions with the cell.\n\nYou can use a list cell in any type of layout. Using a list cell inside a list enables additional list-specific behavior for the cells. For example, in a list section or layout, you can define separator alignment between list cells, and configure swipe actions for each cell’s leading and trailing edges. You create an individual list section using list(using:layoutEnvironment:), or a full list layout using list(using:).\n\nYou can use a list cell’s defaultContentConfiguration() to get a list content configuration that has preconfigured default styling. After you get the default configuration, you assign your content to it, customize any other properties, and assign it to the cell as the current content configuration. For customization options, see UIListContentConfiguration.\n\nvar content = cell.defaultContentConfiguration()\n\n\n// Configure content.\ncontent.image = UIImage(systemName: \"star\")\ncontent.text = \"Favorites\"\n\n\n// Customize appearance.\ncontent.imageProperties.tintColor = .purple\n\n\ncell.contentConfiguration = content\n\n\nAlternatively, you can set your content through your own custom subviews using the cell’s contentView.\n\nTopics\nGetting a configuration\nfunc defaultContentConfiguration() -> UIListContentConfiguration\nRetrieves a default list content configuration for the cell’s style.\nManaging cell accessories\nvar accessories: [UICellAccessory]\nAn array of the accessories that decorate the cell.\nstruct UICellAccessory\nAn accessory in a collection view list cell.\nCustomizing layout\nvar indentationLevel: Int\nThe level of indentation for the cell.\nvar indentationWidth: CGFloat\nThe width of an indentation level.\nvar indentsAccessories: Bool\nA Boolean value that detemines whether the cell indents accessories on the leading side.\nvar separatorLayoutGuide: UILayoutGuide\nA guide for laying out separators in relation to the primary content in the cell.\nRelationships\nInherits From\nUICollectionViewCell\nSee Also\nCells\nclass UICollectionViewCell\nA single data item when that item is within the collection view’s visible bounds.\nclass UICollectionReusableView\nA view that defines the behavior for all cells and supplementary views presented by a collection view."
  },
  {
    "title": "UICalendarSelection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicalendarselection",
    "html": "Overview\n\nDon’t use this object directly in your calendar view to track date selection. Use the subclass UICalendarSelectionSingleDate to track a single date selection, or UICalendarSelectionMultiDate to track multiple date selections.\n\nTopics\nUpdating selectable dates\nfunc updateSelectableDates()\nInforms the calendar view to update the view for selectable dates.\nRelationships\nInherits From\nNSObject\nSee Also\nHandling date selections\nvar selectionBehavior: UICalendarSelection?\nThe current date selection method of the calendar view.\nclass UICalendarSelectionSingleDate\nAn object that tracks a date the user selects from a calendar view.\nclass UICalendarSelectionMultiDate\nAn object that tracks multiple dates the user selects from a calendar view."
  },
  {
    "title": "discrete | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscrolltypemask/3538985-discrete",
    "html": "See Also\nScroll types\nstatic var all: UIScrollTypeMask\nA scroll type that’s either discrete or continuous.\nstatic var continuous: UIScrollTypeMask\nA continuous scroll type from a device, like a trackpad."
  },
  {
    "title": "Updating Collection Views Using Diffable Data Sources | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/views_and_controls/collection_views/updating_collection_views_using_diffable_data_sources",
    "html": "Overview\n\nA collection view presents data in the form of sections and items, and an app that displays data in a collection view inserts those sections and items into the view. The app may also need to handle deleting or moving sections and items. For instance, the sample app in this project displays recipes in a collection view, and people using the app can add and delete recipes, and mark recipes as favorites. To support these actions, the sample app handles inserting, deleting, moving, and updating data within a collection view.\n\nWhen populating a collection view in an app, you can create a custom data source that adopts the UICollectionViewDataSource protocol. To keep the information in the collection view current, you determine what data changed and perform a batch update based on those changes, a process that requires careful coordination of inserts, deletes, and moves.\n\nTo avoid the complexity of that process, the sample app uses a UICollectionViewDiffableDataSource object. A diffable data source stores a list of section and item identifiers, which represents the identity of each section and item contained in a collection view. These identifiers are stable, meaning they don’t change. In contrast, a custom data source that conforms to UICollectionViewDataSource uses indices and index paths, which aren’t stable. They represent the location of sections and items, which can change as the data source adds, removes, and rearranges the contents of a collection view. However, with identifiers a diffable data source can refer to a section or item without knowledge of its location within a collection view.\n\nNote\n\nThis sample uses collection views to display data, but the concepts covered in this sample apply to table views as well. For more information about using a diffable data source with a table view, see UITableViewDiffableDataSource.\n\nTo use a value as an identifier, its data type must conform to the Hashable protocol. Hashing allows data collections such as Set, Dictionary, and snapshots — instances of NSDiffableDataSourceSnapshot and NSDiffableDataSourceSectionSnapshot — to use values as keys, providing quick and efficient lookups. Hashable types also conform to the Equatable protocol, so your identifiers must properly implement equality. For more information, see Equatable.\n\nBecause identifiers are hashable and equatable, a diffable data source can determine the differences between its current snapshot and another snapshot. Then it can insert, delete, and move sections and items within a collection view for you based on those differences, eliminating the need for custom code that performs batch updates.\n\nImportant\n\nTwo identifiers that are equal must always have the same hash value. However, the converse isn’t true; two values with the same hash value aren’t required to be equal. This situation is called a hash collision. To increase efficiency, try to ensure that unequal identifiers have different hash values. The occasional hash collision is okay when it’s unavoidable, but keep the number of collisions to a minimum. Otherwise, the performance of lookups in the data collection may suffer.\n\nDefine the Diffable Data Source\n\nIn this sample project, RecipeListViewController displays a list of recipes in a collection view. Before the controller can display the recipes, it defines an instance variable to store a diffable data source.\n\nprivate var recipeListDataSource: UICollectionViewDiffableDataSource<RecipeListSection, Recipe.ID>!\n\n\nRecipeListViewController declares recipeListDataSource with RecipeListSection as the section identifier type, and Recipe.ID as the item identifier type. These identifier types tell the data source the type of values it contains.\n\nFor the section identifier type, recipeListDataSource uses RecipeListSection, an enumeration with a raw value of type Int (in Swift, Int is hashable). Each enumeration case identifies a section of the collection view. In the sample, there’s only one section, main, which displays a list of recipes.\n\nprivate enum RecipeListSection: Int {\n    case main\n}\n\n\nFor the item identifier type, recipeListDataSource uses Recipe.ID. This type comes from the Recipe structure, defined as:\n\nstruct Recipe: Identifiable, Codable {\n    var id: Int\n    var title: String\n    var prepTime: Int   // In seconds.\n    var cookTime: Int   // In seconds.\n    var servings: String\n    var ingredients: String\n    var directions: String\n    var isFavorite: Bool\n    var collections: [String]\n    fileprivate var addedOn: Date? = Date()\n    fileprivate var imageNames: [String]\n}\n\n\nThis structure conforms to the Identifiable protocol, which requires the structure to include an id property. By conforming to Identifiable, the Recipe structure automatically exposes the associated type ID, which is a type determined based on the declaration of the id property in the structure. And because this type must be hashable, the sample app can use Recipe.ID as the item identifier type.\n\nNote\n\nThe Recipe structure doesn’t conform to the Hashable protocol. The structure doesn’t have to be hashable because the items stored in the diffable data source and the snapshots are recipe identifiers (Recipe.ID values the backing data store provides for each recipe), not complete recipe structures.\n\nUsing the Recipe.ID as the item identifier type for the recipeListDataSource means that the data source, and any snapshots applied to it, contains only Recipe.ID values and not the complete recipe data. This approach optimizes the diffable data source for peak performance when displaying recipes in a collection view because the identifier type is a simple, hashable type.\n\nConfigure the Diffable Data Source\n\nBefore populating a collection view with data from a diffable data source, the sample app configures the data source. The app creates an instance of UICollectionViewDiffableDataSource and sets its cell provider, a closure that configures and returns a cell for the collection view.\n\nRecipeListViewController configures recipeListDataSource in a helper method named configureDataSource(). The view controller calls this method in its viewDidLoad() method.\n\nThe configureDataSource() method creates a cell registration and provides a handler closure that configures each cell with data from a recipe. The closure receives an instance of Recipe, which it uses to configure the cell.\n\nNote\n\nThe item type for a cell registration doesn’t have to match the item identifier type that the diffable data source uses.\n\nNext, configureDataSource() creates an instance of UICollectionViewDiffableDataSource and defines the cell provider closure. The closure receives the identifier of a recipe. It then retrieves the recipe from the backing data store (using the identifier) and passes the recipe structure to the cell registration’s handler closure.\n\nprivate func configureDataSource() {\n    // Create a cell registration that the diffable data source will use.\n    let recipeCellRegistration = UICollectionView.CellRegistration<UICollectionViewListCell, Recipe> { cell, indexPath, recipe in\n        var contentConfiguration = UIListContentConfiguration.subtitleCell()\n        contentConfiguration.text = recipe.title\n        contentConfiguration.secondaryText = recipe.subtitle\n        contentConfiguration.image = recipe.smallImage\n        contentConfiguration.imageProperties.cornerRadius = 4\n        contentConfiguration.imageProperties.maximumSize = CGSize(width: 60, height: 60)\n        \n        cell.contentConfiguration = contentConfiguration\n        \n        if recipe.isFavorite {\n            let image = UIImage(systemName: \"heart.fill\")\n            let accessoryConfiguration = UICellAccessory.CustomViewConfiguration(customView: UIImageView(image: image),\n                                                                                 placement: .trailing(displayed: .always),\n                                                                                 tintColor: .secondaryLabel)\n            cell.accessories = [.customView(configuration: accessoryConfiguration)]\n        } else {\n            cell.accessories = []\n        }\n    }\n\n\n    // Create the diffable data source and its cell provider.\n    recipeListDataSource = UICollectionViewDiffableDataSource(collectionView: collectionView) {\n        collectionView, indexPath, identifier -> UICollectionViewCell in\n        // `identifier` is an instance of `Recipe.ID`. Use it to\n        // retrieve the recipe from the backing data store.\n        let recipe = dataStore.recipe(with: identifier)!\n        return collectionView.dequeueConfiguredReusableCell(using: recipeCellRegistration, for: indexPath, item: recipe)\n    }\n}\n\n\nLoad the Diffable Data Source with Identifiers\n\nWith the diffable data source configured, RecipeListViewController calls its helper method loadRecipeData() to perform an initial load of data into the data source, which in turn populates a collection view with recipes. This method retrieves a list of recipe identifiers and creates an instance of NSDiffableDataSourceSnapshot. Then it adds the main section and recipe identifiers to the snapshot. Lastly, the method calls applySnapshotUsingReloadData(_:) to apply the snapshot to the data source, resetting the collection view to reflect the state of the data in the snapshot without computing a diff or animating the changes.\n\nprivate func loadRecipeData() {\n    // Retrieve the list of recipe identifiers determined based on a\n    // selected sidebar item such as All Recipes or Favorites.\n    guard let recipeIds = recipeSplitViewController.selectedRecipes?.recipeIds()\n    else { return }\n    \n    // Update the collection view by adding the recipe identifiers to\n    // a new snapshot, and apply the snapshot to the diffable data source.\n    var snapshot = NSDiffableDataSourceSnapshot<RecipeListSection, Recipe.ID>()\n    snapshot.appendSections([.main])\n    snapshot.appendItems(recipeIds, toSection: .main)\n    recipeListDataSource.applySnapshotUsingReloadData(snapshot)\n}\n\n\nImportant\n\nEach item identifier must be unique within a snapshot. As a result, an item identifier can’t appear in multiple locations within a snapshot. The same is true of section identifiers; they must be unique and can’t exist in multiple places within a snapshot.\n\nInsert, Delete, and Move Items\n\nPeople using the sample app can make two types of changes to the recipe data:\n\nChanges to the collection of data itself, like adding or removing recipes, or reordering them.\n\nChanges to the properties of existing items, like changing the name of a recipe or marking one as a favorite.\n\nTo handle changes to a data collection, the app creates a new snapshot that represents the current state of the data collection and applies it to the diffable data source. The data source compares its current snapshot with the new snapshot to determine the changes. Then it performs the necessary inserts, deletes, and moves into the collection view based on those changes.\n\nWhile a diffable data source can determine the changes between its current snapshot and a new one, it doesn’t monitor the data collection for changes. Instead, it’s the responsibility of the app to detect data changes and tell the diffable data source about those changes, by applying a new snapshot.\n\nNote\n\nAn app can use different mechanisms, such as NotificationCenter and Combine, to report data changes to other parts of the app. This sample uses NotificationCenter.\n\nTo inform other parts of the app that the list of recipes changed — for instance, after someone adds or removes a recipe — the sample uses a notification center to send a selectedRecipesDidChange notification. To receive the notification, RecipeListViewController adds a notification observer with selectedRecipesDidChange(_:) as its selector.\n\nNotificationCenter.default.addObserver(\n    self,\n    selector: #selector(selectedRecipesDidChange(_:)),\n    name: .selectedRecipesDidChange,\n    object: nil\n)\n\n\nselectedRecipesDidChange(_:) is similar to loadRecipeData() but it uses apply(_:animatingDifferences:) to apply the list of selected recipe identifiers that the notification provides instead of using applySnapshotUsingReloadData(_:). The apply(_:animatingDifferences:) method performs incremental updates to the collection view instead of entirely resetting the data displayed. And because animatingDifferences is true, the collection view animates the changes as they appear.\n\n@objc\nprivate func selectedRecipesDidChange(_ notification: Notification) {\n    // Create a snapshot of the selected recipe identifiers from the notification's\n    // `userInfo` dictionary, and apply it to the diffable data source.\n    guard\n        let userInfo = notification.userInfo,\n        let selectedRecipeIds = userInfo[NotificationKeys.selectedRecipeIds] as? [Recipe.ID]\n    else { return }\n    \n    var snapshot = NSDiffableDataSourceSnapshot<RecipeListSection, Recipe.ID>()\n    snapshot.appendSections([.main])\n    snapshot.appendItems(selectedRecipeIds, toSection: .main)\n    recipeListDataSource.apply(snapshot, animatingDifferences: true)\n\n\n    // The design of this sample app makes it possible for the selected\n    // recipe displayed in the secondary (detail) view controller to exist\n    // in the new snapshot but not exist in the collection view prior to\n    // applying the snapshot. For instance, while displaying the list of\n    // favorite recipes, a person can unfavorite the selected recipe by tapping\n    // the `isFavorite` button. This removes the selected recipe from the\n    // favorites list. Tap the button again and the recipe reappears in the\n    // list. In this scenario, the app needs to re-select the recipe so it\n    // appears as selected in the collection view.\n    selectRecipeIfNeeded()\n}\n\n\nUpdate Existing Items\n\nTo handle changes to the properties of an existing item, an app retrieves the current snapshot from the diffable data source and calls either reconfigureItems(_:) or reloadItems(_:) on the snapshot. Then it applies the snapshot to the diffable data source, which updates the display of the specified items.\n\nAgain, the app, not the diffable data source, detects the data changes.\n\nTo tell others parts of the app about a change to a recipe — for instance, when a person marks a recipe as a favorite — the sample sends a recipeDidChange notification. RecipeListViewController receives the notification using an observer with recipeDidChange(_:) as the selector.\n\nNotificationCenter.default.addObserver(\n    self,\n    selector: #selector(recipeDidChange(_:)),\n    name: .recipeDidChange,\n    object: nil\n)\n\n\nThe recipeDidChange notification indicates that data for a single recipe changed. Because only one recipe changed, there’s no need to update the entire list of recipes shown in the collection view. Instead, the sample only updates the cell that displays the recipe that changed. For instance, when a person marks a recipe as a favorite, an icon of a heart appears beside that recipe. And when the person unmarks the recipe as a favorite, the heart disappears.\n\nTo update the cell with the latest recipe data, the recipeDidChange(_:) method confirms that the diffable data source contains the recipe identifier that the notification provides. Then the method retrieves the current snapshot from the data source and calls reconfigureItems(_:), passing in the recipe identifier. This call tells the data source to update the data displayed in the cell identified by the recipe identifier. Finally, recipeDidChange(_:) applies the updated snapshot to the data source.\n\n@objc\nprivate func recipeDidChange(_ notification: Notification) {\n    guard\n        // Get `recipeId` from from the `userInfo` dictionary.\n        let userInfo = notification.userInfo,\n        let recipeId = userInfo[NotificationKeys.recipeId] as? Recipe.ID,\n        // Confirm that the data source contains the recipe.\n        recipeListDataSource.indexPath(for: recipeId) != nil\n    else { return }\n    \n    // Get the diffable data source's current snapshot.\n    var snapshot = recipeListDataSource.snapshot()\n    // Update the recipe's data displayed in the collection view.\n    snapshot.reconfigureItems([recipeId])\n    recipeListDataSource.apply(snapshot, animatingDifferences: true)\n}\n\n\nThe diffable data source compares the updated snapshot to its current snapshot and applies the difference — in this instance, a request to reconfigure the item that displays the recipe that changed. To fulfill the request, the data source invokes its cell provider closure, which retrieves the updated recipe and configures the cell with the latest recipe data. And because animatingDifferences is true when applying the snapshot, the collection view animates the visual change of the cell by showing or hiding the heart icon.\n\nPopulate Snapshots with Lightweight Data Structures\n\nAn alternative approach to storing identifiers involves populating diffable data sources and snapshots with lightweight data structures. While the data structure approach is convenient and can be a good fit in some circumstances — like for quick prototyping, or displaying a collection of static items with properties that don’t change — it carries significant limitations and tradeoffs. For instance, the Hashable and Equatable implementations must incorporate all properties of the structure that can change. Any changes to the data in the structure cause it to no longer be equal to the previous version, which the diffable data source uses to determine what changed when applying a new snapshot.\n\nThe sample uses this approach to show items in a sidebar. In SidebarViewController, the custom structure SidebarItem defines the properties of a sidebar item, which are title and type.\n\nprivate struct SidebarItem: Hashable {\n    let title: String\n    let type: SidebarItemType\n    \n    enum SidebarItemType {\n        case standard, collection, expandableHeader\n    }\n}\n\n\nThe combination of these properties determine the hashing value for each sidebar item, and because the property values don’t change, populating the snapshot with this SidebarItem structure instead of identifiers is an acceptable use case.\n\nprivate func createSnapshotOfStandardItems() -> NSDiffableDataSourceSectionSnapshot<SidebarItem> {\n    let items = [\n        SidebarItem(title: StandardSidebarItem.all.rawValue, type: .standard),\n        SidebarItem(title: StandardSidebarItem.favorites.rawValue, type: .standard),\n        SidebarItem(title: StandardSidebarItem.recents.rawValue, type: .standard)\n    ]\n    return createSidebarItemSnapshot(.standardItems, items: items)\n}\n\n\nThe downside of this approach is that the diffable data source can no longer track identity. Any time an existing item changes, the diffable data source sees the change as a delete of the old item and an insert of a new item. As a result, the collection view loses important state tied to the item. For instance, a selected item becomes unselected when any property of the item changes because, from the diffable data source’s perspective, the app deleted the item and added a new one to take its place.\n\nAlso, if animatingDifferences is true when applying the snapshot, every change requires the process of animating out the old cell and animating in a new cell, which can be detrimental to performance and cause loss of UI state, including animations, within the cell.\n\nAdditionally, this strategy precludes using the reconfigureItems(_:) or reloadItems(_:) methods when populating a snapshot with data structures, because those methods require the use of proper identifiers. The only mechanism to update the data for existing items is to apply a new snapshot containing the new data structures, which causes the diffable data source to perform a delete and an insert for each changed item.\n\nStoring data structures directly into diffable data sources and snapshots isn’t a robust solution for many real-world use cases because the data source loses the ability to track identity. Only use this approach for simple use cases in which items don’t change, like the sidebar items in this sample, or when the identity of an item isn’t important. For all other use cases, or when in doubt as to which approach to use, populate diffable data sources and snapshots with proper identifiers.\n\nSee Also\nData\nImplementing Modern Collection Views\nBring compositional layouts to your app and simplify updating your user interface with diffable data sources.\nBuilding High-Performance Lists and Collection Views\nImprove the performance of lists and collections in your app with prefetching and image preparation.\nclass UICollectionViewDiffableDataSource\nThe object you use to manage data and provide cells for a collection view.\nprotocol UICollectionViewDataSource\nThe methods adopted by the object you use to manage data and provide cells for a collection view.\nprotocol UICollectionViewDataSourcePrefetching\nA protocol that provides advance warning of the data requirements for a collection view, allowing the triggering of asynchronous data load operations.\nstruct NSDiffableDataSourceSnapshot\nA representation of the state of the data in a view at a specific point in time.\nstruct NSDiffableDataSourceSectionSnapshot\nA representation of the state of the data in a layout section at a specific point in time.\nclass UIRefreshControl\nA standard control that can initiate the refreshing of a scroll view’s contents."
  },
  {
    "title": "selectionBehavior | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicalendarview/3972045-selectionbehavior",
    "html": "See Also\nHandling date selections\nclass UICalendarSelectionSingleDate\nAn object that tracks a date the user selects from a calendar view.\nclass UICalendarSelectionMultiDate\nAn object that tracks multiple dates the user selects from a calendar view.\nclass UICalendarSelection\nA base object that tracks one or more dates a user selects from a calendar view."
  },
  {
    "title": "calendarView(_:decorationFor:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicalendarviewdelegate/3972051-calendarview",
    "html": "Parameters\ncalendarView\n\nThe calendar view object requesting the decoration.\n\ndateComponents\n\nDate components that represent the date for the calendar view to display a decoration.\n\nReturn Value\n\nA calendar view decoration."
  },
  {
    "title": "fontDesign | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicalendarview/3972040-fontdesign",
    "html": "Discussion\n\nDefaults to default.\n\nSee Also\nCustomizing the calendar display\nvar delegate: UICalendarViewDelegate?\nA delegate object the calendar view calls for decoration views.\nprotocol UICalendarViewDelegate\nAn object that a calendar view uses to display decorations for dates.\nclass UICalendarView.Decoration\nA view that a calendar view displays for a specific date.\nenum UICalendarView.DecorationSize\nConstants that indicate the relative size of a decoration in a calendar view.\nvar wantsDateDecorations: Bool\nA Boolean value that indicates whether the calendar view displays date decorations.\nfunc reloadDecorations(forDateComponents: [DateComponents], animated: Bool)\nReloads the decorations for the dates you provide, with an option to animate the decoration reload."
  },
  {
    "title": "timeZone | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicalendarview/3972047-timezone",
    "html": "See Also\nSetting calendar details\nvar calendar: Calendar\nThe calendar that the calendar view illustrates.\nvar locale: Locale\nThe locale the calendar view uses for calendar conventions."
  },
  {
    "title": "calendar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicalendarview/3972038-calendar",
    "html": "Discussion\n\nDefaults to current, which is the user’s current calendar set in Settings.\n\nSee Also\nSetting calendar details\nvar locale: Locale\nThe locale the calendar view uses for calendar conventions.\nvar timeZone: TimeZone?\nThe time zone from the date the calendar view displays."
  },
  {
    "title": "availableDateRange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicalendarview/3987955-availabledaterange",
    "html": "Discussion\n\nSet availableDateRange to restrict the earliest or latest dates that the calendar view displays. The default date range starts with distantPast and ends with distantFuture.\n\nSee Also\nSetting the visible date and range\nvar visibleDateComponents: DateComponents\nThe date components that represent the visible date in the calendar view.\nfunc setVisibleDateComponents(DateComponents, animated: Bool)\nSets the date components that represent the date for the calendar view to make visible, with an option to animate the date change."
  },
  {
    "title": "visibleDateComponents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicalendarview/3972048-visibledatecomponents",
    "html": "Discussion\n\nIf visibleDateComponents.calendar is nil or isn’t equal to calendar, the calendar view uses calendar, which may result in an invalid date from the date components.\n\nSee Also\nSetting the visible date and range\nfunc setVisibleDateComponents(DateComponents, animated: Bool)\nSets the date components that represent the date for the calendar view to make visible, with an option to animate the date change.\nvar availableDateRange: DateInterval\nThe range of dates that the calendar view displays."
  },
  {
    "title": "wantsDateDecorations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicalendarview/3972049-wantsdatedecorations",
    "html": "Discussion\n\nDefaults to true. You must implement UICalendarDateDelegate’s calendarView(_:decorationFor:) to provide decorations that the calendar view shows.\n\nSee Also\nCustomizing the calendar display\nvar fontDesign: UIFontDescriptor.SystemDesign\nA font design that the calendar view uses for displaying calendar text.\nvar delegate: UICalendarViewDelegate?\nA delegate object the calendar view calls for decoration views.\nprotocol UICalendarViewDelegate\nAn object that a calendar view uses to display decorations for dates.\nclass UICalendarView.Decoration\nA view that a calendar view displays for a specific date.\nenum UICalendarView.DecorationSize\nConstants that indicate the relative size of a decoration in a calendar view.\nfunc reloadDecorations(forDateComponents: [DateComponents], animated: Bool)\nReloads the decorations for the dates you provide, with an option to animate the decoration reload."
  },
  {
    "title": "setVisibleDateComponents(_:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicalendarview/3972046-setvisibledatecomponents",
    "html": "Parameters\ndateComponents\n\nDate components that represent the date for the calendar view to display.\n\nanimated\n\nA Boolean value that indicates whether the calendar view animates the date change.\n\nDiscussion\n\nThe date that dateComponents represents must be within the dates that availableDateRange represents.\n\nIf dateComponents.calendar is nil or isn’t equal to calendar, the calendar view uses calendar, which may result in an invalid date from the date components.\n\nSee Also\nSetting the visible date and range\nvar visibleDateComponents: DateComponents\nThe date components that represent the visible date in the calendar view.\nvar availableDateRange: DateInterval\nThe range of dates that the calendar view displays."
  },
  {
    "title": "init(duration:timingParameters:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewpropertyanimator/1648362-init",
    "html": "Parameters\nduration\n\nThe duration of the animation, in seconds.\n\nparameters\n\nThe object providing the timing information. This object must adopt the UITimingCurveProvider protocol.\n\nReturn Value\n\nAn initialized animator object or nil if the object could not be created.\n\nDiscussion\n\nUse this method to initialize the animator with a custom timing curve. After initializing the animator, you must add one or more animation blocks before calling starting the animations.\n\nThe animator object returned by this method begins in the UIViewAnimatingState.inactive state. You must explicitly start the animations by calling the startAnimation() method.\n\nSee Also\nInitializing a property animator\ninit(duration: TimeInterval, curve: UIView.AnimationCurve, animations: (() -> Void)?)\nInitializes the animator with a built-in UIKit timing curve.\ninit(duration: TimeInterval, controlPoint1: CGPoint, controlPoint2: CGPoint, animations: (() -> Void)?)\nInitializes the animator object with a cubic Bézier timing curve.\ninit(duration: TimeInterval, dampingRatio: CGFloat, animations: (() -> Void)?)\nInitializes the animator object with spring-based timing information.\nclass func runningPropertyAnimator(withDuration: TimeInterval, delay: TimeInterval, options: UIView.AnimationOptions, animations: () -> Void, completion: ((UIViewAnimatingPosition) -> Void)?) -> Self\nCreates and returns an animator object that begins running its animations immediately."
  },
  {
    "title": "init(frame:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivityindicatorview/1622841-init",
    "html": "Parameters\nframe\n\nThe frame rectangle for the view, specified in points.\n\nSee Also\nCreating an activity indicator\ninit(style: UIActivityIndicatorView.Style)\nCreates an activity indicator.\ninit(coder: NSCoder)\nCreates an activity indicator from data in an unarchiver."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivityindicatorview/1622844-init",
    "html": "Parameters\ncoder\n\nAn unarchiver object.\n\nSee Also\nCreating an activity indicator\ninit(style: UIActivityIndicatorView.Style)\nCreates an activity indicator.\ninit(frame: CGRect)\nCreates an activity indicator with the specified frame rectangle."
  },
  {
    "title": "secondItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutconstraint/1526868-seconditem",
    "html": "See Also\nAccessing constraint data\nvar firstItem: AnyObject?\nThe first object participating in the constraint.\nvar firstAttribute: NSLayoutConstraint.Attribute\nThe attribute of the first object participating in the constraint.\nvar relation: NSLayoutConstraint.Relation\nThe relation between the two attributes in the constraint.\nvar secondAttribute: NSLayoutConstraint.Attribute\nThe attribute of the second object participating in the constraint.\nvar multiplier: CGFloat\nThe multiplier applied to the second attribute participating in the constraint.\nvar constant: CGFloat\nThe constant added to the multiplied second attribute participating in the constraint.\nvar firstAnchor: NSLayoutAnchor<AnyObject>\nThe first anchor that defines the constraint.\nvar secondAnchor: NSLayoutAnchor<AnyObject>?\nThe second anchor that defines the constraint."
  },
  {
    "title": "init(wrappedValue:_:_:_:_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/invalidating/3853109-init",
    "html": "Parameters\nwrappedValue\n\nThe underlying value referenced by the invalidating variable.\n\ninvalidation1\n\nA type of invalidation.\n\ninvalidation2\n\nA type of invalidation.\n\ninvalidation3\n\nA type of invalidation.\n\ninvalidation4\n\nA type of invalidation.\n\ninvalidation5\n\nA type of invalidation.\n\ninvalidation6\n\nA type of invalidation.\n\ninvalidation7\n\nA type of invalidation.\n\ninvalidation8\n\nA type of invalidation.\n\ninvalidation9\n\nA type of invalidation.\n\nSee Also\nCreating an Invalidating Property Wrapper\ninit(wrappedValue: Value, InvalidationType)\nCreates a property wrapper that notifies the system when a change in the property value invalidates an aspect of the containing view.\ninit<InvalidationType1, InvalidationType2>(wrappedValue: Value, InvalidationType1, InvalidationType2)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9, InvalidationType10>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9, InvalidationType10)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view."
  },
  {
    "title": "willMove(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidynamicbehavior/1618488-willmove",
    "html": "Parameters\ndynamicAnimator\n\nThe dynamic animator that the behavior is being added to, or nil if being removed from an animator.\n\nDiscussion\n\nUse this method as the override point for responding to changes in the UIKit Dynamics behavior tree that involve the dynamic behavior.\n\nSee Also\nResponding to changes in the behavior tree\nvar dynamicAnimator: UIDynamicAnimator?\nThe dynamic animator that the dynamic behavior is associated with."
  },
  {
    "title": "didMove(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiinteraction/2891009-didmove",
    "html": "Required\n\nParameters\nview\n\nThe view that owns and contains the interaction in its interaction array. If the view is nil, the interaction's owner removed the interaction from its interactions array.\n\nSee Also\nTracking the Movements\nfunc willMove(to: UIView?)\nTells the interaction that a view will add or remove it from the view's interactions array.\n\nRequired"
  },
  {
    "title": "UIPencilPreferredAction.ignore | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipencilpreferredaction/ignore",
    "html": "Discussion\n\nThe system returns this action if any of the following conditions are true:\n\nThe Apple Pencil doesn’t have a configured preferred action.\n\nThe iPad’s accessibility settings disable Apple Pencil interactions.\n\nSee Also\nPreferred actions\ncase switchEraser\nAn action that switches between the current tool and the eraser.\ncase switchPrevious\nAn action that switches between the current tool and the last used tool.\ncase showColorPalette\nAn action that toggles the display of the color palette.\ncase showInkAttributes\nAn action that toggles the display of the selected tool’s ink attributes."
  },
  {
    "title": "UIPencilPreferredAction.showInkAttributes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipencilpreferredaction/showinkattributes",
    "html": "See Also\nPreferred actions\ncase ignore\nAn action that does nothing.\ncase switchEraser\nAn action that switches between the current tool and the eraser.\ncase switchPrevious\nAn action that switches between the current tool and the last used tool.\ncase showColorPalette\nAn action that toggles the display of the color palette."
  },
  {
    "title": "view | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiinteraction/2890990-view",
    "html": "Required"
  },
  {
    "title": "willMove(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiinteraction/2891039-willmove",
    "html": "Required\n\nParameters\nview\n\nThe view that will contain, and own, the interaction in its interactions array. If the view is nil, the interaction's owner will remove the interaction from its interactions array.\n\nSee Also\nTracking the Movements\nfunc didMove(to: UIView?)\nTells the interaction that a view added or removed it from the view's interactions array.\n\nRequired"
  },
  {
    "title": "UIPencilPreferredAction.showColorPalette | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipencilpreferredaction/showcolorpalette",
    "html": "See Also\nPreferred actions\ncase ignore\nAn action that does nothing.\ncase switchEraser\nAn action that switches between the current tool and the eraser.\ncase switchPrevious\nAn action that switches between the current tool and the last used tool.\ncase showInkAttributes\nAn action that toggles the display of the selected tool’s ink attributes."
  },
  {
    "title": "constraint(lessThanOrEqualToSystemSpacingBelow:multiplier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutyaxisanchor/2865829-constraint",
    "html": "Parameters\nanchor\n\nThe anchor to use as the starting point for the constraint.\n\nmultiplier\n\nThe multiple of the system spacing to use as the distance between the two anchors.\n\nReturn Value\n\nAn NSLayoutConstraint object that imposes a minimum distance between the current anchor and the object in the anchor parameter.\n\nDiscussion\n\nThe constraint causes the current anchor to be positioned below the object in the anchor parameter. The maximum distance between the two anchors is determined by multiplying the system spacing by the value in the multiplier parameter. The value of the system spacing is determined from information available from the anchors. For example, if the anchors represent text baselines, the spacing is determined by the fonts used at those baselines.\n\nSee Also\nBuilding system spacing constraints\nfunc constraint(equalToSystemSpacingBelow: NSLayoutYAxisAnchor, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the specific distance at which the current anchor is positioned below the specified anchor.\nfunc constraint(greaterThanOrEqualToSystemSpacingBelow: NSLayoutYAxisAnchor, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the minimum distance by which the current anchor is positioned below the specified anchor.\nCreating Self-Sizing Table View Cells\nCreate table view cells that support Dynamic Type and use system spacing constraints to adjust the spacing surrounding text labels."
  },
  {
    "title": "anchorWithOffset(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutyaxisanchor/2865935-anchorwithoffset",
    "html": "Parameters\notherAnchor\n\nThe second anchor to use when creating the layout dimension.\n\nReturn Value\n\nThe NSLayoutDimension object represented by the two anchors.\n\nDiscussion\n\nUse the returned object to define constraints relative to the space between the current anchor and the object in the otherAnchor parameter."
  },
  {
    "title": "constraint(equalTo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutanchor/1500946-constraint",
    "html": "Parameters\nanchor\n\nA layout anchor from a UIView, NSView, or UILayoutGuide object. You must use a subclass of NSLayoutAnchor that matches the current anchor. For example, if you call this method on an NSLayoutXAxisAnchor object, this parameter must be another NSLayoutXAxisAnchor.\n\nReturn Value\n\nAn NSLayoutConstraint object that defines an equal relationship between the attributes represented by the two layout anchors.\n\nDiscussion\n\nThis method defines the relationship first attribute = second attribute. Where first attribute is the layout attribute represented by the anchor receiving this method call, and second attribute is the layout attribute represented by the anchor parameter.\n\nThe constraints produced by the following two examples are identical.\n\n// Creating a constraint using NSLayoutConstraint\nNSLayoutConstraint(item: subview,\n                   attribute: .Leading,\n                   relatedBy: .Equal,\n                   toItem: view,\n                   attribute: .LeadingMargin,\n                   multiplier: 1.0,\n                   constant: 0.0).isActive = true\n \n// Creating the same constraint using constraintEqualToAnchor:\nlet margins = view.layoutMarginsGuide\nsubview.leadingAnchor.constraintEqualToAnchor(margins.leadingAnchor).isActive = true\n\nSee Also\nBuilding constraints\nfunc constraint(equalTo: NSLayoutAnchor<AnchorType>, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as equal to another item’s attribute plus a constant offset.\nfunc constraint(greaterThanOrEqualTo: NSLayoutAnchor<AnchorType>) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as greater than or equal to another.\nfunc constraint(greaterThanOrEqualTo: NSLayoutAnchor<AnchorType>, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as greater than or equal to another item’s attribute plus a constant offset.\nfunc constraint(lessThanOrEqualTo: NSLayoutAnchor<AnchorType>) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as less than or equal to another.\nfunc constraint(lessThanOrEqualTo: NSLayoutAnchor<AnchorType>, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as less than or equal to another item’s attribute plus a constant offset.\nRelated Documentation\nclass NSLayoutConstraint\nThe relationship between two user interface objects that must be satisfied by the constraint-based layout system.\nAuto Layout Guide"
  },
  {
    "title": "constraint(equalTo:constant:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutanchor/1500937-constraint",
    "html": "Parameters\nanchor\n\nA layout anchor from a UIView, NSView, or UILayoutGuide object. You must use a subclass of NSLayoutAnchor that matches the current anchor. For example, if you call this method on an NSLayoutXAxisAnchor object, this parameter must be another NSLayoutXAxisAnchor.\n\nc\n\nThe constant offset for the constraint.\n\nReturn Value\n\nAn NSLayoutConstraint object that defines an equal relationship between the attributes represented by the two layout anchors plus a constant offset.\n\nDiscussion\n\nThis method defines the relationship first attribute = second attribute + c. Where first attribute is the layout attribute represented by the anchor receiving this method call, and second attribute is the layout attribute represented by the anchor parameter. The value c, represents a constant offset. All values are measured in points; however, these values can be interpreted in different ways, depending on the type of layout anchor.\n\nFor NSLayoutXAxisAnchor objects, the first attribute is positioned c points after the second attribute. When using leading or trailing attributes, values increase as you move in the language’s reading direction. In English, for example, values increase as you move to the right. For left and right attributes, values always increase as you move right.\n\nFor NSLayoutYAxisAnchor objects, the first attribute is positioned c points below the second attribute. Values increase as you move down.\n\nFor NSLayoutDimension objects, the size of the first attribute is c points larger than the size of the second attribute. Values increase as items increase in size.\n\nThe constraints produced by the following two examples are identical.\n\n// Creating a constraint using NSLayoutConstraint\n \nNSLayoutConstraint(item: textField,\n                   attribute: .Leading,\n                   relatedBy: .Equal,\n                   toItem: label,\n                   attribute: .Trailing,\n                   multiplier: 1.0,\n                   constant: 8.0).isActive = true\n \n// Creating the same constraint using constraintEqualToAnchor:constant:\ntextField.leadingAnchor.constraintEqualToAnchor(label.trailingAnchor, constant: 8.0).isActive = true\n\nSee Also\nBuilding constraints\nfunc constraint(equalTo: NSLayoutAnchor<AnchorType>) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as equal to another.\nfunc constraint(greaterThanOrEqualTo: NSLayoutAnchor<AnchorType>) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as greater than or equal to another.\nfunc constraint(greaterThanOrEqualTo: NSLayoutAnchor<AnchorType>, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as greater than or equal to another item’s attribute plus a constant offset.\nfunc constraint(lessThanOrEqualTo: NSLayoutAnchor<AnchorType>) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as less than or equal to another.\nfunc constraint(lessThanOrEqualTo: NSLayoutAnchor<AnchorType>, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as less than or equal to another item’s attribute plus a constant offset."
  },
  {
    "title": "constraint(greaterThanOrEqualToSystemSpacingBelow:multiplier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutyaxisanchor/2866086-constraint",
    "html": "Parameters\nanchor\n\nThe anchor to use as the starting point for the constraint.\n\nmultiplier\n\nThe multiple of the system spacing to use as the distance between the two anchors.\n\nReturn Value\n\nAn NSLayoutConstraint object that imposes a minimum distance between the current anchor and the object in the anchor parameter.\n\nDiscussion\n\nThe constraint causes the current anchor to be positioned below the object in the anchor parameter. The minimum distance between the two anchors is determined by multiplying the system spacing by the value in the multiplier parameter. The value of the system spacing is determined from information available from the anchors. For example, if the anchors represent text baselines, the spacing is determined by the fonts used at those baselines.\n\nSee Also\nBuilding system spacing constraints\nfunc constraint(equalToSystemSpacingBelow: NSLayoutYAxisAnchor, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the specific distance at which the current anchor is positioned below the specified anchor.\nfunc constraint(lessThanOrEqualToSystemSpacingBelow: NSLayoutYAxisAnchor, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the maximum distance by which the current anchor is positioned below the specified anchor.\nCreating Self-Sizing Table View Cells\nCreate table view cells that support Dynamic Type and use system spacing constraints to adjust the spacing surrounding text labels."
  },
  {
    "title": "init(wrappedValue:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/invalidating/3853102-init",
    "html": "Parameters\nwrappedValue\n\nThe underlying value referenced by the invalidating variable.\n\ninvalidation1\n\nA type of invalidation.\n\ninvalidation2\n\nA type of invalidation.\n\nSee Also\nCreating an Invalidating Property Wrapper\ninit(wrappedValue: Value, InvalidationType)\nCreates a property wrapper that notifies the system when a change in the property value invalidates an aspect of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9, InvalidationType10>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9, InvalidationType10)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view."
  },
  {
    "title": "init(wrappedValue:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/invalidating/3853101-init",
    "html": "Parameters\nwrappedValue\n\nThe underlying value referenced by the invalidating variable.\n\ninvalidation\n\nA type of invalidation.\n\nSee Also\nCreating an Invalidating Property Wrapper\ninit<InvalidationType1, InvalidationType2>(wrappedValue: Value, InvalidationType1, InvalidationType2)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9, InvalidationType10>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9, InvalidationType10)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view."
  },
  {
    "title": "constraint(lessThanOrEqualTo:constant:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutanchor/1500959-constraint",
    "html": "Parameters\nanchor\n\nA layout anchor from a UIView, NSView, or UILayoutGuide object. You must use a subclass of NSLayoutAnchor that matches the current anchor. For example, if you call this method on an NSLayoutXAxisAnchor object, this parameter must be another NSLayoutXAxisAnchor.\n\nc\n\nThe constant offset for the constraint.\n\nReturn Value\n\nAn NSLayoutConstraint object that defines the attribute represented by this layout anchor as less than or equal to the attribute represented by the anchor parameter plus a constant offset.\n\nDiscussion\n\nThis method defines the relationship first attribute <= second attribute + c. Where first attribute is the layout attribute represented by the anchor receiving this method call, and second attribute is the layout attribute represented by the anchor parameter. The value c, represents a constant offset. All values are measured in points; however, these values can be interpreted in different ways, depending on the type of layout anchor.\n\nFor NSLayoutXAxisAnchor objects, the first attribute is positioned c points after the second attribute. When using leading or trailing attributes, values increase as you move in the language’s reading direction. In English, for example, values increase as you move to the right. For left and right attributes, values always increase as you move right.\n\nFor NSLayoutYAxisAnchor objects, the first attribute is positioned c points below the second attribute. Values increase as you move down.\n\nFor NSLayoutDimension objects, the size of the first attribute is c points larger than the size of the second attribute. Values increase as items increase in size.\n\nThe constraints produced by the following two examples are identical.\n\n// Creating a constraint using NSLayoutConstraint\n \nNSLayoutConstraint(item: textField,\n                   attribute: .Leading,\n                   relatedBy: .LessThanOrEqual,\n                   toItem: label,\n                   attribute: .Trailing,\n                   multiplier: 1.0,\n                   constant: 8.0).isActive = true\n \n// Creating the same constraint using constraintLessThanOrEqualToAnchor:constant:\ntextField.leadingAnchor.constraintLessThanOrEqualToAnchor(label.trailingAnchor, constant: 8.0).isActive = true\n\nSee Also\nBuilding constraints\nfunc constraint(equalTo: NSLayoutAnchor<AnchorType>) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as equal to another.\nfunc constraint(equalTo: NSLayoutAnchor<AnchorType>, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as equal to another item’s attribute plus a constant offset.\nfunc constraint(greaterThanOrEqualTo: NSLayoutAnchor<AnchorType>) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as greater than or equal to another.\nfunc constraint(greaterThanOrEqualTo: NSLayoutAnchor<AnchorType>, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as greater than or equal to another item’s attribute plus a constant offset.\nfunc constraint(lessThanOrEqualTo: NSLayoutAnchor<AnchorType>) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as less than or equal to another."
  },
  {
    "title": "constraint(lessThanOrEqualTo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutanchor/1500953-constraint",
    "html": "Parameters\nanchor\n\nA layout anchor from a UIView, NSView, or UILayoutGuide object. You must use a subclass of NSLayoutAnchor that matches the current anchor. For example, if you call this method on an NSLayoutXAxisAnchor object, this parameter must be another NSLayoutXAxisAnchor.\n\nReturn Value\n\nAn NSLayoutConstraint object that defines the attribute represented by this layout anchor as less than or equal to the attribute represented by the anchor parameter.\n\nDiscussion\n\nThis method defines the relationship first attribute <= second attribute. Where first attribute is the layout attribute represented by the anchor receiving this method call, and second attribute is the layout attribute represented by the anchor parameter. All values are measured in points; however, these values can be interpreted in different ways, depending on the type of layout anchor.\n\nFor leading or trailing anchors, the values increase as you move in the current language’s reading direction. For English, values increase as you move to the right.\n\nFor left and right anchors, the values increase as you move to the right.\n\nFor NSLayoutYAxisAnchor objects, the values increase as you move down.\n\nFor NSLayoutDimension objects, the values increase as the items increase in size.\n\nThe constraints produced by the following two examples are identical.\n\n// Creating a constraint using NSLayoutConstraint\nNSLayoutConstraint(item: subview,\n                   attribute: .Leading,\n                   relatedBy: .LessThanOrEqual,\n                   toItem: view,\n                   attribute: .LeadingMargin,\n                   multiplier: 1.0,\n                   constant: 0.0).isActive = true\n \n// Creating the same constraint using constraintLessThanOrEqualToAnchor:\nlet margins = view.layoutMarginsGuide\nsubview.leadingAnchor.constraintLessThanOrEqualToAnchor(margins.leadingAnchor).isActive = true\n\nSee Also\nBuilding constraints\nfunc constraint(equalTo: NSLayoutAnchor<AnchorType>) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as equal to another.\nfunc constraint(equalTo: NSLayoutAnchor<AnchorType>, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as equal to another item’s attribute plus a constant offset.\nfunc constraint(greaterThanOrEqualTo: NSLayoutAnchor<AnchorType>) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as greater than or equal to another.\nfunc constraint(greaterThanOrEqualTo: NSLayoutAnchor<AnchorType>, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as greater than or equal to another item’s attribute plus a constant offset.\nfunc constraint(lessThanOrEqualTo: NSLayoutAnchor<AnchorType>, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines one item’s attribute as less than or equal to another item’s attribute plus a constant offset."
  },
  {
    "title": "heightAnchor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilayoutguide/1619652-heightanchor",
    "html": "Discussion\n\nUse this anchor to create constraints with the layout guide’s height. You can combine this anchor only with other NSLayoutDimension anchors. For more information, see NSLayoutAnchor.\n\nSee Also\nCreating constraints using layout anchors\nvar bottomAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the bottom edge of the layout guide’s frame.\nvar centerXAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the horizontal center of the layout guide’s frame.\nvar centerYAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the vertical center of the layout guide’s frame.\nvar leadingAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the leading edge of the layout guide’s frame.\nvar leftAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the left edge of the layout guide’s frame.\nvar rightAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the right edge of the layout guide’s frame.\nvar topAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the top edge of the layout guide’s frame.\nvar trailingAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the trailing edge of the layout guide’s frame.\nvar widthAnchor: NSLayoutDimension\nA layout anchor representing the width of the layout guide’s frame."
  },
  {
    "title": "UISemanticContentAttribute.playback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisemanticcontentattribute/playback",
    "html": "Discussion\n\nThese views aren’t flipped when switching between left-to-right and right-to-left layouts."
  },
  {
    "title": "NSLayoutConstraint.Relation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutconstraint/relation",
    "html": "Topics\nConstants\ncase lessThanOrEqual\nThe constraint requires the first attribute to be less than or equal to the modified second attribute.\ncase equal\nThe constraint requires the first attribute to be exactly equal to the modified second attribute.\ncase greaterThanOrEqual\nThe constraint requires the first attribute to be greater than or equal to the modified second attribute.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "shouldBeArchived | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutconstraint/1525647-shouldbearchived",
    "html": "Discussion\n\nWhen a view is archived, it archives some but not all constraints in its constraints array. The value of shouldBeArchived informs the view if a particular constraint should be archived by the view.\n\nIf a constraint is created at runtime in response to the state of the object, it isn't appropriate to archive the constraint. Instead you archive the state that gives rise to the constraint. The default value for this property is false."
  },
  {
    "title": "centerXAnchor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilayoutguide/1619654-centerxanchor",
    "html": "Discussion\n\nUse this anchor to create constraints with the layout guide’s horizontal center. You can combine this anchor only with other NSLayoutXAxisAnchor anchors. For more information, see NSLayoutAnchor.\n\nSee Also\nCreating constraints using layout anchors\nvar bottomAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the bottom edge of the layout guide’s frame.\nvar centerYAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the vertical center of the layout guide’s frame.\nvar heightAnchor: NSLayoutDimension\nA layout anchor representing the height of the layout guide’s frame.\nvar leadingAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the leading edge of the layout guide’s frame.\nvar leftAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the left edge of the layout guide’s frame.\nvar rightAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the right edge of the layout guide’s frame.\nvar topAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the top edge of the layout guide’s frame.\nvar trailingAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the trailing edge of the layout guide’s frame.\nvar widthAnchor: NSLayoutDimension\nA layout anchor representing the width of the layout guide’s frame."
  },
  {
    "title": "owningView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilayoutguide/1619648-owningview",
    "html": "Discussion\n\nBy default, this property is nil. To participate in Auto Layout, the layout guide must be added to a view by calling its addLayoutGuide(_:) method. Do not modify this property directly. Instead, use the view’s addLayoutGuide(_:) and removeLayoutGuide(_:) methods, which update this property as necessary.\n\nSee Also\nWorking with layout guides\nvar identifier: String\nA string used to identify the layout guide.\nvar layoutFrame: CGRect\nThe layout guide’s frame in its owning view’s coordinate system."
  },
  {
    "title": "layoutFrame | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilayoutguide/1619657-layoutframe",
    "html": "Discussion\n\nThe layout guide defines a rectangular space in its owning view’s coordinate system. This property contains a valid CGRect value by the time its owning view’s layoutSubviews() method is called.\n\nSee Also\nWorking with layout guides\nvar identifier: String\nA string used to identify the layout guide.\nvar owningView: UIView?\nThe view that owns this layout guide.\nRelated Documentation\nfunc layoutSubviews()\nLays out subviews."
  },
  {
    "title": "bottomAnchor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilayoutguide/1619661-bottomanchor",
    "html": "Discussion\n\nUse this anchor to create constraints with the layout guide’s bottom edge. You can combine this anchor only with other NSLayoutYAxisAnchor anchors. For more information, see NSLayoutAnchor.\n\nSee Also\nCreating constraints using layout anchors\nvar centerXAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the horizontal center of the layout guide’s frame.\nvar centerYAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the vertical center of the layout guide’s frame.\nvar heightAnchor: NSLayoutDimension\nA layout anchor representing the height of the layout guide’s frame.\nvar leadingAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the leading edge of the layout guide’s frame.\nvar leftAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the left edge of the layout guide’s frame.\nvar rightAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the right edge of the layout guide’s frame.\nvar topAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the top edge of the layout guide’s frame.\nvar trailingAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the trailing edge of the layout guide’s frame.\nvar widthAnchor: NSLayoutDimension\nA layout anchor representing the width of the layout guide’s frame."
  },
  {
    "title": "identifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutconstraint/1526879-identifier",
    "html": "Discussion\n\nA constraint’s identifier is available in its description. Identifiers that start with NS are reserved by the system."
  },
  {
    "title": "secondAnchor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutconstraint/1644260-secondanchor",
    "html": "See Also\nAccessing constraint data\nvar firstItem: AnyObject?\nThe first object participating in the constraint.\nvar firstAttribute: NSLayoutConstraint.Attribute\nThe attribute of the first object participating in the constraint.\nvar relation: NSLayoutConstraint.Relation\nThe relation between the two attributes in the constraint.\nvar secondItem: AnyObject?\nThe second object participating in the constraint.\nvar secondAttribute: NSLayoutConstraint.Attribute\nThe attribute of the second object participating in the constraint.\nvar multiplier: CGFloat\nThe multiplier applied to the second attribute participating in the constraint.\nvar constant: CGFloat\nThe constant added to the multiplied second attribute participating in the constraint.\nvar firstAnchor: NSLayoutAnchor<AnyObject>\nThe first anchor that defines the constraint."
  },
  {
    "title": "priority | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutconstraint/1526946-priority",
    "html": "Discussion\n\nBy default, all constraints are required; this property is set to required in macOS or UILayoutPriorityRequired in iOS.\n\nIf a constraint's priority level is less than required in macOS or UILayoutPriorityRequired in iOS, then it is optional. Higher priority constraints are satisfied before lower priority constraints; however, optional constraint satisfaction is not all or nothing. If a constraint a == b is optional, the constraint-based layout system will attempt to minimize abs(a-b).\n\nPriorities may not change from nonrequired to required, or from required to nonrequired. An exception will be thrown if a priority of required in macOS or UILayoutPriorityRequired in iOS is changed to a lower priority, or if a lower priority is changed to a required priority after the constraints is added to a view. Changing from one optional priority to another optional priority is allowed even after the constraint is installed on a view.\n\nPriorities must be greater than 0 and less than or equal to required in macOS or UILayoutPriorityRequired in iOS.\n\nSee Also\nGetting the layout priority\nstruct UILayoutPriority\nThe layout priority is used to indicate to the constraint-based layout system which constraints are more important, allowing the system to make appropriate tradeoffs when satisfying the constraints of the system as a whole.\nstruct NSLayoutConstraint.Priority\nLayout priority used to indicate the relative importance of constraints, allowing Auto Layout to make appropriate tradeoffs when satisfying the constraints of the system as a whole."
  },
  {
    "title": "firstAnchor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutconstraint/1644261-firstanchor",
    "html": "See Also\nAccessing constraint data\nvar firstItem: AnyObject?\nThe first object participating in the constraint.\nvar firstAttribute: NSLayoutConstraint.Attribute\nThe attribute of the first object participating in the constraint.\nvar relation: NSLayoutConstraint.Relation\nThe relation between the two attributes in the constraint.\nvar secondItem: AnyObject?\nThe second object participating in the constraint.\nvar secondAttribute: NSLayoutConstraint.Attribute\nThe attribute of the second object participating in the constraint.\nvar multiplier: CGFloat\nThe multiplier applied to the second attribute participating in the constraint.\nvar constant: CGFloat\nThe constant added to the multiplied second attribute participating in the constraint.\nvar secondAnchor: NSLayoutAnchor<AnyObject>?\nThe second anchor that defines the constraint."
  },
  {
    "title": "UIUserInterfaceStyle.unspecified | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiuserinterfacestyle/unspecified",
    "html": "Discussion\n\nChoose this option when you want to follow the system's interface style.\n\nSee Also\nInterface styles\ncase light\nThe light interface style.\ncase dark\nThe dark interface style."
  },
  {
    "title": "slidingAttachment(with:attachmentAnchor:axisOfTranslation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiattachmentbehavior/1621314-slidingattachment",
    "html": "Parameters\nitem\n\nThe dynamic item connected by the attachment behavior.\n\npoint\n\nThe initial anchor point for the item. Specify this point in the coordinate system of the dynamic animator’s reference view. For more information about coordinate systems, see UIDynamicAnimator.\n\naxis\n\nThe axis of translation, along which the item’s anchor point slides. The magnitude of the vector is ignored. Use the attachmentRange property to define the distance that the anchor point can travel along the vector.\n\nReturn Value\n\nA new attachment object or nil if the object could not be created.\n\nDiscussion\n\nThe behavior created by this method acts like a solid rod between item and the anchor point whose initial position you specify using the point parameter. As forces are applied to the item, the item’s anchor point slides along the specified axis, causing the item to move with it. The item does not rotate relative to the axis of translation or anchor point.\n\nThe axis of translation is infinitely long initially, but you can change the length by assigning a new value to the attachmentRange property. When specifying a new attachment range, remember that the value in point represents the value 0 on the axis. Any new range you specify must include 0.\n\nYou can use this behavior to create an effect of an item sliding in a specific direction in response to other forces. For example, using the vector (0.0, 1.0) would cause the item to slide only vertically.\n\nSee Also\nCreating and initializing attachment behavior objects\nclass func slidingAttachment(with: UIDynamicItem, attachedTo: UIDynamicItem, attachmentAnchor: CGPoint, axisOfTranslation: CGVector) -> Self\nCreates and returns an attachment behavior where two items are fixed to points that slide along the specified axis.\nclass func fixedAttachment(with: UIDynamicItem, attachedTo: UIDynamicItem, attachmentAnchor: CGPoint) -> Self\nCreates and returns an attachment behavior where the two items are fixed together through the specified anchor point.\nclass func limitAttachment(with: UIDynamicItem, offsetFromCenter: UIOffset, attachedTo: UIDynamicItem, offsetFromCenter: UIOffset) -> Self\nCreates and returns an attachment behavior object where two items are constrained by a maximum distance from one another.\nclass func pinAttachment(with: UIDynamicItem, attachedTo: UIDynamicItem, attachmentAnchor: CGPoint) -> Self\nCreates and returns an attachment behavior where the two items are pinned to, and move around, an anchor point\ninit(item: UIDynamicItem, attachedToAnchor: CGPoint)\nInitializes a behavior where the center of a dynamic item is attached to the specified anchor point.\ninit(item: UIDynamicItem, attachedTo: UIDynamicItem)\nInitializes a behavior where the centers of two dynamic items are attached to each other.\ninit(item: UIDynamicItem, offsetFromCenter: UIOffset, attachedToAnchor: CGPoint)\nInitializes a behavior where the specified point in a dynamic item is attached to an anchor point.\ninit(item: UIDynamicItem, offsetFromCenter: UIOffset, attachedTo: UIDynamicItem, offsetFromCenter: UIOffset)\nInitializes an attachment behavior that connects a specified point in one dynamic item to a specified point in another dynamic item."
  },
  {
    "title": "leading | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nsdirectionaledgeinsets/2866012-leading",
    "html": "See Also\nGetting the edge values\nvar bottom: CGFloat\nThe bottom edge inset value.\nvar top: CGFloat\nThe top edge inset value.\nvar trailing: CGFloat\nThe trailing edge inset value."
  },
  {
    "title": "axis | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistackview/1616223-axis",
    "html": "Discussion\n\nThis property determines the orientation of the arranged views. Assigning the NSLayoutConstraint.Axis.vertical value creates a column of views. Assigning the NSLayoutConstraint.Axis.horizontal value creates a row. The default value is NSLayoutConstraint.Axis.horizontal.\n\nSee Also\nConfiguring the layout\nvar alignment: UIStackView.Alignment\nThe alignment of the arranged subviews perpendicular to the stack view’s axis.\nvar distribution: UIStackView.Distribution\nThe distribution of the arranged views along the stack view’s axis.\nvar spacing: CGFloat\nThe distance in points between the adjacent edges of the stack view’s arranged views.\nvar isBaselineRelativeArrangement: Bool\nA Boolean value that determines whether the vertical spacing between views is measured from their baselines.\nvar isLayoutMarginsRelativeArrangement: Bool\nA Boolean value that determines whether the stack view lays out its arranged views relative to its layout margins."
  },
  {
    "title": "alignment | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistackview/1616243-alignment",
    "html": "Discussion\n\nThis property determines how the stack view lays out its arranged views perpendicularly to its axis. The default value is UIStackView.Alignment.fill. For a list of possible values, see UIStackView.Alignment.\n\nSee Also\nConfiguring the layout\nvar axis: NSLayoutConstraint.Axis\nThe axis along which the arranged views lay out.\nvar distribution: UIStackView.Distribution\nThe distribution of the arranged views along the stack view’s axis.\nvar spacing: CGFloat\nThe distance in points between the adjacent edges of the stack view’s arranged views.\nvar isBaselineRelativeArrangement: Bool\nA Boolean value that determines whether the vertical spacing between views is measured from their baselines.\nvar isLayoutMarginsRelativeArrangement: Bool\nA Boolean value that determines whether the stack view lays out its arranged views relative to its layout margins."
  },
  {
    "title": "multiplier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutconstraint/1526920-multiplier",
    "html": "See Also\nAccessing constraint data\nvar firstItem: AnyObject?\nThe first object participating in the constraint.\nvar firstAttribute: NSLayoutConstraint.Attribute\nThe attribute of the first object participating in the constraint.\nvar relation: NSLayoutConstraint.Relation\nThe relation between the two attributes in the constraint.\nvar secondItem: AnyObject?\nThe second object participating in the constraint.\nvar secondAttribute: NSLayoutConstraint.Attribute\nThe attribute of the second object participating in the constraint.\nvar constant: CGFloat\nThe constant added to the multiplied second attribute participating in the constraint.\nvar firstAnchor: NSLayoutAnchor<AnyObject>\nThe first anchor that defines the constraint.\nvar secondAnchor: NSLayoutAnchor<AnyObject>?\nThe second anchor that defines the constraint."
  },
  {
    "title": "relation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutconstraint/1526549-relation",
    "html": "See Also\nAccessing constraint data\nvar firstItem: AnyObject?\nThe first object participating in the constraint.\nvar firstAttribute: NSLayoutConstraint.Attribute\nThe attribute of the first object participating in the constraint.\nvar secondItem: AnyObject?\nThe second object participating in the constraint.\nvar secondAttribute: NSLayoutConstraint.Attribute\nThe attribute of the second object participating in the constraint.\nvar multiplier: CGFloat\nThe multiplier applied to the second attribute participating in the constraint.\nvar constant: CGFloat\nThe constant added to the multiplied second attribute participating in the constraint.\nvar firstAnchor: NSLayoutAnchor<AnyObject>\nThe first anchor that defines the constraint.\nvar secondAnchor: NSLayoutAnchor<AnyObject>?\nThe second anchor that defines the constraint."
  },
  {
    "title": "constraints(withVisualFormat:options:metrics:views:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutconstraint/1526944-constraints",
    "html": "Parameters\nformat\n\nThe format specification for the constraints. For more information, see Auto Layout Cookbook in Auto Layout Guide.\n\nopts\n\nOptions describing the attribute and the direction of layout for all objects in the visual format string.\n\nmetrics\n\nA dictionary of constants that appear in the visual format string. The dictionary’s keys must be the string values used in the visual format string. Their values must be NSNumber objects.\n\nviews\n\nA dictionary of views that appear in the visual format string. The keys must be the string values used in the visual format string, and the values must be the view objects.\n\nReturn Value\n\nAn array of constraints that, combined, express the constraints between the provided views and their parent view as described by the visual format string. The constraints are returned in the same order they were specified in the visual format string.\n\nDiscussion\n\nThe language used for the visual format string is described in Auto Layout Cookbook in Auto Layout Guide.\n\nSee Also\nCreating constraints\ninit(item: Any, attribute: NSLayoutConstraint.Attribute, relatedBy: NSLayoutConstraint.Relation, toItem: Any?, attribute: NSLayoutConstraint.Attribute, multiplier: CGFloat, constant: CGFloat)\nCreates a constraint that defines the relationship between the specified attributes of the given views.\nRelated Documentation\nAuto Layout Guide"
  },
  {
    "title": "deactivate(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutconstraint/1526066-deactivate",
    "html": "Parameters\nconstraints\n\nAn array of constraints to deactivate.\n\nDiscussion\n\nThis is a convenience method that provides an easy way to deactivate a set of constraints with one call. The effect of this method is the same as setting the isActive property of each constraint to false. Typically, using this method is more efficient than deactivating each constraint individually.\n\nSee Also\nActivating and deactivating constraints\nvar isActive: Bool\nThe active state of the constraint.\nclass func activate([NSLayoutConstraint])\nActivates each constraint in the specified array."
  },
  {
    "title": "init(item:attribute:relatedBy:toItem:attribute:multiplier:constant:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutconstraint/1526954-init",
    "html": "Parameters\nview1\n\nThe view for the left side of the constraint.\n\nattr1\n\nThe attribute of the view for the left side of the constraint.\n\nrelation\n\nThe relationship between the left side of the constraint and the right side of the constraint.\n\nview2\n\nThe view for the right side of the constraint.\n\nattr2\n\nThe attribute of the view for the right side of the constraint.\n\nmultiplier\n\nThe constant multiplied with the attribute on the right side of the constraint as part of getting the modified attribute.\n\nc\n\nThe constant added to the multiplied attribute value on the right side of the constraint to yield the final modified attribute.\n\nReturn Value\n\nA constraint object relating the two provided views with the specified relation, attributes, multiplier, and constant.\n\nDiscussion\n\nConstraints represent linear equations of the form view1.attr1 <relation> multiplier × view2.attr2 + c. If the constraint you wish to express does not have a second view and attribute, use nil and NSLayoutConstraint.Attribute.notAnAttribute.\n\nNote\n\nThis method throws an invalidArgumentException exception if it is used to create an invalid constraint (for example, view1.top == 0.0 x nil.NotAnAttribute + 200.0 or view1.top == 1.0 x view2.height + 20.0).\n\nIn general, you should use the layout anchor API to programmatically create constraints. This API includes additional type information that can catch many invalid constraints at build time. For more information, see Creating Constraints Using Layout Anchors in NSView or UIView.\n\nSee Also\nCreating constraints\nclass func constraints(withVisualFormat: String, options: NSLayoutConstraint.FormatOptions, metrics: [String : Any]?, views: [String : Any]) -> [NSLayoutConstraint]\nCreates constraints described by an ASCII art-like visual format string."
  },
  {
    "title": "isActive | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutconstraint/1527000-isactive",
    "html": "Discussion\n\nYou can activate or deactivate a constraint by changing this property. Note that only active constraints affect the calculated layout. If you try to activate a constraint whose items have no common ancestor, an exception is thrown. For newly created constraints, the isActive property is false by default.\n\nActivating or deactivating the constraint calls addConstraint(_:) and removeConstraint(_:) on the view that is the closest common ancestor of the items managed by this constraint. Use this property instead of calling addConstraint(_:) or removeConstraint(_:) directly.\n\nSee Also\nActivating and deactivating constraints\nclass func activate([NSLayoutConstraint])\nActivates each constraint in the specified array.\nclass func deactivate([NSLayoutConstraint])\nDeactivates each constraint in the specified array."
  },
  {
    "title": "init(wrappedValue:_:_:_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiview/invalidating/3853108-init",
    "html": "Parameters\nwrappedValue\n\nThe underlying value referenced by the invalidating variable.\n\ninvalidation1\n\nA type of invalidation.\n\ninvalidation2\n\nA type of invalidation.\n\ninvalidation3\n\nA type of invalidation.\n\ninvalidation4\n\nA type of invalidation.\n\ninvalidation5\n\nA type of invalidation.\n\ninvalidation6\n\nA type of invalidation.\n\ninvalidation7\n\nA type of invalidation.\n\ninvalidation8\n\nA type of invalidation.\n\nSee Also\nCreating an Invalidating Property Wrapper\ninit(wrappedValue: Value, InvalidationType)\nCreates a property wrapper that notifies the system when a change in the property value invalidates an aspect of the containing view.\ninit<InvalidationType1, InvalidationType2>(wrappedValue: Value, InvalidationType1, InvalidationType2)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view.\ninit<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9, InvalidationType10>(wrappedValue: Value, InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9, InvalidationType10)\nCreates a property wrapper that notifies the system when a change in the property value invalidates aspects of the containing view."
  },
  {
    "title": "constraint(lessThanOrEqualTo:multiplier:constant:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutdimension/1500957-constraint",
    "html": "Parameters\nanchor\n\nA dimension anchor from a UIView, NSView, or UILayoutGuide object.\n\nm\n\nThe multiplier constant for the constraint.\n\nc\n\nThe constant offset for this relationship.\n\nReturn Value\n\nAn NSLayoutConstraint object that defines the attribute represented by this layout anchor as less than or equal to the attribute represented by the anchor parameter multiplied by the m constant plus the constant c.\n\nDiscussion\n\nThis method defines the relationship first attribute <= (m * second attribute) + c. Where first attribute is the layout attribute represented by the anchor receiving this method call, and second attribute is the layout attribute represented by the anchor parameter.\n\nThe constraints produced by the following two examples are identical.\n\n// Creating a constraint using NSLayoutConstraint\nNSLayoutConstraint(item: button,\n                   attribute: .Width,\n                   relatedBy: .LessThanOrEqual,\n                   toItem: button,\n                   attribute: .Height,\n                   multiplier: 2.0,\n                   constant: 40.0).isActive = true\n \n// Creating the same constraint using constraintLessThanOrEqualToAnchor:multiplier:constant:\nbutton.widthAnchor.constraintLessThanOrEqualToAnchor(button.heightAnchor, multiplier: 2.0, constant: 40.0).isActive = true\n\nSee Also\nBuilding constraints\nfunc constraint(equalTo: NSLayoutDimension, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as equal to the specified anchor multiplied by the constant.\nfunc constraint(equalTo: NSLayoutDimension, multiplier: CGFloat, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as equal to the specified size attribute multiplied by a constant plus an offset.\nfunc constraint(equalToConstant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines a constant size for the anchor’s size attribute.\nfunc constraint(greaterThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as greater than or equal to the specified anchor multiplied by the constant.\nfunc constraint(greaterThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as greater than or equal to the specified anchor multiplied by the constant plus an offset.\nfunc constraint(greaterThanOrEqualToConstant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the minimum size for the anchor’s size attribute.\nfunc constraint(lessThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as less than or equal to the specified anchor multiplied by the constant.\nfunc constraint(lessThanOrEqualToConstant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the maximum size for the anchor’s size attribute."
  },
  {
    "title": "UIPencilPreferredAction.switchEraser | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipencilpreferredaction/switcheraser",
    "html": "See Also\nPreferred actions\ncase ignore\nAn action that does nothing.\ncase switchPrevious\nAn action that switches between the current tool and the last used tool.\ncase showColorPalette\nAn action that toggles the display of the color palette.\ncase showInkAttributes\nAn action that toggles the display of the selected tool’s ink attributes."
  },
  {
    "title": "constraint(lessThanOrEqualToConstant:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutdimension/1500963-constraint",
    "html": "Parameters\nc\n\nA constant representing the maximum size of the attribute associated with this dimension anchor.\n\nReturn Value\n\nAn NSLayoutConstraint object that defines a maximum size for the attribute associated with this dimension anchor.\n\nDiscussion\n\nThis method defines the relationship first attribute <= c. Where first attribute is the layout attribute represented by the anchor receiving this method call.\n\nThe constraints produced by the following two examples are identical.\n\n// Creating a constraint using NSLayoutConstraint\nNSLayoutConstraint(item: button,\n                   attribute: .Width,\n                   relatedBy: .LessThanOrEqual,\n                   toItem: nil,\n                   attribute: .NotAnAttribute,\n                   multiplier: 1.0,\n                   constant: 40.0).isActive = true\n \n// Creating the same constraint using constraintLessThanOrEqualToConstant:\nbutton.widthAnchor.constraintLessThanOrEqualToConstant(40.0).isActive = true\n\nSee Also\nBuilding constraints\nfunc constraint(equalTo: NSLayoutDimension, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as equal to the specified anchor multiplied by the constant.\nfunc constraint(equalTo: NSLayoutDimension, multiplier: CGFloat, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as equal to the specified size attribute multiplied by a constant plus an offset.\nfunc constraint(equalToConstant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines a constant size for the anchor’s size attribute.\nfunc constraint(greaterThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as greater than or equal to the specified anchor multiplied by the constant.\nfunc constraint(greaterThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as greater than or equal to the specified anchor multiplied by the constant plus an offset.\nfunc constraint(greaterThanOrEqualToConstant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the minimum size for the anchor’s size attribute.\nfunc constraint(lessThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as less than or equal to the specified anchor multiplied by the constant.\nfunc constraint(lessThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as greater than or equal to the specified anchor multiplied by the constant plus an offset."
  },
  {
    "title": "constraint(greaterThanOrEqualTo:multiplier:constant:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutdimension/1500965-constraint",
    "html": "Parameters\nanchor\n\nA dimension anchor from a UIView, NSView, or UILayoutGuide object.\n\nm\n\nThe multiplier constant for the constraint.\n\nc\n\nThe constant offset for this relationship.\n\nReturn Value\n\nAn NSLayoutConstraint object that defines the attribute represented by this layout anchor as greater than or equal to the attribute represented by the anchor parameter multiplied by the m constant plus the constant c.\n\nDiscussion\n\nThis method defines the relationship first attribute >= (m * second attribute) + c. Where first attribute is the layout attribute represented by the anchor receiving this method call, and second attribute is the layout attribute represented by the anchor parameter.\n\nThe constraints produced by the following two examples are identical.\n\n// Creating a constraint using NSLayoutConstraint\nNSLayoutConstraint(item: button,\n                   attribute: .Width,\n                   relatedBy: .GreaterThanOrEqual,\n                   toItem: button,\n                   attribute: .Height,\n                   multiplier: 2.0,\n                   constant: 40.0).isActive = true\n \n// Creating the same constraint using constraintGreaterThanOrEqualToAnchor:multiplier:constant:\nbutton.widthAnchor.constraintGreaterThanOrEqualToAnchor(button.heightAnchor, multiplier: 2.0, constant: 40.0).isActive = true\n\nSee Also\nBuilding constraints\nfunc constraint(equalTo: NSLayoutDimension, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as equal to the specified anchor multiplied by the constant.\nfunc constraint(equalTo: NSLayoutDimension, multiplier: CGFloat, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as equal to the specified size attribute multiplied by a constant plus an offset.\nfunc constraint(equalToConstant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines a constant size for the anchor’s size attribute.\nfunc constraint(greaterThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as greater than or equal to the specified anchor multiplied by the constant.\nfunc constraint(greaterThanOrEqualToConstant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the minimum size for the anchor’s size attribute.\nfunc constraint(lessThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as less than or equal to the specified anchor multiplied by the constant.\nfunc constraint(lessThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as greater than or equal to the specified anchor multiplied by the constant plus an offset.\nfunc constraint(lessThanOrEqualToConstant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the maximum size for the anchor’s size attribute."
  },
  {
    "title": "motionEffects | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimotioneffectgroup/1622374-motioneffects",
    "html": "Discussion\n\nThe array contains one or more UIMotionEffect objects. When the viewer offset changes, each object in the group is asked for its key paths and updated values. Those values are then applied simultaneously."
  },
  {
    "title": "constraint(greaterThanOrEqualToConstant:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutdimension/1500939-constraint",
    "html": "Parameters\nc\n\nA constant representing the minimum size of the attribute associated with this dimension anchor.\n\nReturn Value\n\nAn NSLayoutConstraint object that defines a minimum size for the attribute associated with this dimension anchor.\n\nDiscussion\n\nThis method defines the relationship first attribute >= c. Where first attribute is the layout attribute represented by the anchor receiving this method call.\n\nThe constraints produced by the following two examples are identical.\n\n// Creating a constraint using NSLayoutConstraint\nNSLayoutConstraint(item: button,\n                   attribute: .Width,\n                   relatedBy: .GreaterThanOrEqual,\n                   toItem: nil,\n                   attribute: .NotAnAttribute,\n                   multiplier: 1.0,\n                   constant: 40.0).isActive = true\n \n// Creating the same constraint using constraintGreaterThanOrEqualToConstant:\nbutton.widthAnchor.constraintGreaterThanOrEqualToConstant(40.0).isActive = true\n\nSee Also\nBuilding constraints\nfunc constraint(equalTo: NSLayoutDimension, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as equal to the specified anchor multiplied by the constant.\nfunc constraint(equalTo: NSLayoutDimension, multiplier: CGFloat, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as equal to the specified size attribute multiplied by a constant plus an offset.\nfunc constraint(equalToConstant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines a constant size for the anchor’s size attribute.\nfunc constraint(greaterThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as greater than or equal to the specified anchor multiplied by the constant.\nfunc constraint(greaterThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as greater than or equal to the specified anchor multiplied by the constant plus an offset.\nfunc constraint(lessThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as less than or equal to the specified anchor multiplied by the constant.\nfunc constraint(lessThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as greater than or equal to the specified anchor multiplied by the constant plus an offset.\nfunc constraint(lessThanOrEqualToConstant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the maximum size for the anchor’s size attribute."
  },
  {
    "title": "constraint(lessThanOrEqualTo:multiplier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutdimension/1500943-constraint",
    "html": "Parameters\nanchor\n\nA dimension anchor from a UIView, NSView, or UILayoutGuide object.\n\nm\n\nThe multiplier constant for the constraint.\n\nReturn Value\n\nAn NSLayoutConstraint object that defines the attribute represented by this layout anchor as less than or equal to the attribute represented by the anchor parameter multiplied by the m constant.\n\nDiscussion\n\nThis method defines the relationship first attribute <= m * second attribute . Where first attribute is the layout attribute represented by the anchor receiving this method call, and second attribute is the layout attribute represented by the anchor parameter.\n\nThe constraints produced by the following two examples are identical.\n\n// Creating a constraint using NSLayoutConstraint\nNSLayoutConstraint(item: saveButton,\n                   attribute: .Width,\n                   relatedBy: .LessThanOrEqual,\n                   toItem: cancelButton,\n                   attribute: .Width,\n                   multiplier: 2.0,\n                   constant: 0.0).isActive = true\n \n// Creating the same constraint using constraintLessThanOrEqualToAnchor:multiplier:\nsaveButton.widthAnchor.constraintLessThanOrEqualToAnchor(cancelButton.widthAnchor, multiplier: 2.0).isActive = true\n\nSee Also\nBuilding constraints\nfunc constraint(equalTo: NSLayoutDimension, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as equal to the specified anchor multiplied by the constant.\nfunc constraint(equalTo: NSLayoutDimension, multiplier: CGFloat, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as equal to the specified size attribute multiplied by a constant plus an offset.\nfunc constraint(equalToConstant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines a constant size for the anchor’s size attribute.\nfunc constraint(greaterThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as greater than or equal to the specified anchor multiplied by the constant.\nfunc constraint(greaterThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as greater than or equal to the specified anchor multiplied by the constant plus an offset.\nfunc constraint(greaterThanOrEqualToConstant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the minimum size for the anchor’s size attribute.\nfunc constraint(lessThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as greater than or equal to the specified anchor multiplied by the constant plus an offset.\nfunc constraint(lessThanOrEqualToConstant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the maximum size for the anchor’s size attribute."
  },
  {
    "title": "trailingAnchor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilayoutguide/1619660-trailinganchor",
    "html": "Discussion\n\nUse this anchor to create constraints with the layout guide’s trailing edge. You can only combine this anchor with a subset of the NSLayoutXAxisAnchor anchors. You can combine a trailingAnchor with another trailingAnchor, a leadingAnchor, or a centerXAnchor. For more information, see NSLayoutAnchor.\n\nSee Also\nCreating constraints using layout anchors\nvar bottomAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the bottom edge of the layout guide’s frame.\nvar centerXAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the horizontal center of the layout guide’s frame.\nvar centerYAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the vertical center of the layout guide’s frame.\nvar heightAnchor: NSLayoutDimension\nA layout anchor representing the height of the layout guide’s frame.\nvar leadingAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the leading edge of the layout guide’s frame.\nvar leftAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the left edge of the layout guide’s frame.\nvar rightAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the right edge of the layout guide’s frame.\nvar topAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the top edge of the layout guide’s frame.\nvar widthAnchor: NSLayoutDimension\nA layout anchor representing the width of the layout guide’s frame."
  },
  {
    "title": "leftAnchor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilayoutguide/1619656-leftanchor",
    "html": "Discussion\n\nUse this anchor to create constraints with the layout guide’s left edge. You can combine this anchor only with a subset of the NSLayoutXAxisAnchor anchors. You can combine a leftAnchor with another leftAnchor, a rightAnchor, or a centerXAnchor. For more information, see NSLayoutAnchor.\n\nSee Also\nCreating constraints using layout anchors\nvar bottomAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the bottom edge of the layout guide’s frame.\nvar centerXAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the horizontal center of the layout guide’s frame.\nvar centerYAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the vertical center of the layout guide’s frame.\nvar heightAnchor: NSLayoutDimension\nA layout anchor representing the height of the layout guide’s frame.\nvar leadingAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the leading edge of the layout guide’s frame.\nvar rightAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the right edge of the layout guide’s frame.\nvar topAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the top edge of the layout guide’s frame.\nvar trailingAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the trailing edge of the layout guide’s frame.\nvar widthAnchor: NSLayoutDimension\nA layout anchor representing the width of the layout guide’s frame."
  },
  {
    "title": "anchorWithOffset(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutxaxisanchor/2866024-anchorwithoffset",
    "html": "Parameters\notherAnchor\n\nThe second anchor to use when creating the layout dimension.\n\nReturn Value\n\nThe NSLayoutDimension object represented by the two anchors.\n\nDiscussion\n\nUse the returned object to define constraints relative to the space between the current anchor and the object in the otherAnchor parameter."
  },
  {
    "title": "hasAmbiguousLayout | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilayoutguide/1648533-hasambiguouslayout",
    "html": "See Also\nDebugging the layout guide\nfunc constraintsAffectingLayout(for: NSLayoutConstraint.Axis) -> [NSLayoutConstraint]\nThe constraints that impact the layout of the guide."
  },
  {
    "title": "constraint(lessThanOrEqualToSystemSpacingAfter:multiplier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutxaxisanchor/2866018-constraint",
    "html": "Parameters\nanchor\n\nThe anchor to use as the starting point for the constraint.\n\nmultiplier\n\nThe multiple of the system spacing to use as the maximum distance between the two anchors.\n\nReturn Value\n\nAn NSLayoutConstraint object that imposes a maximum distance between the current anchor and the object in the anchor parameter.\n\nDiscussion\n\nThe constraint causes the current anchor to trail the object in the anchor parameter. For example, in a left-to-right layout, the current anchor is to the right of anchor, but in a right-to-left layout, it’s to the left of anchor.\n\nThe maximum distance between the two anchors is determined by multiplying the system spacing by the value in the multiplier parameter. (The actual distance must be less than or equal to that value.) The value of the system space is determined from information available from the anchors.\n\nSee Also\nBuilding system spacing constraints\nfunc constraint(equalToSystemSpacingAfter: NSLayoutXAxisAnchor, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines by how much the current anchor trails the specified anchor.\nfunc constraint(greaterThanOrEqualToSystemSpacingAfter: NSLayoutXAxisAnchor, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the minimum amount by which the current anchor trails the specified anchor.\nCreating Self-Sizing Table View Cells\nCreate table view cells that support Dynamic Type and use system spacing constraints to adjust the spacing surrounding text labels."
  },
  {
    "title": "constraintsAffectingLayout(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilayoutguide/1648534-constraintsaffectinglayout",
    "html": "See Also\nDebugging the layout guide\nvar hasAmbiguousLayout: Bool\nA Boolean value indicating whether the constraints impacting the layout guide specify its location ambiguously."
  },
  {
    "title": "rightAnchor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilayoutguide/1619649-rightanchor",
    "html": "Discussion\n\nUse this anchor to create constraints with the layout guide’s right edge. You can only combine this anchor with a subset of the NSLayoutXAxisAnchor anchors. You can combine a rightAnchor with another rightAnchor, a leftAnchor, or a centerXAnchor. For more information, see NSLayoutAnchor.\n\nSee Also\nCreating constraints using layout anchors\nvar bottomAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the bottom edge of the layout guide’s frame.\nvar centerXAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the horizontal center of the layout guide’s frame.\nvar centerYAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the vertical center of the layout guide’s frame.\nvar heightAnchor: NSLayoutDimension\nA layout anchor representing the height of the layout guide’s frame.\nvar leadingAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the leading edge of the layout guide’s frame.\nvar leftAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the left edge of the layout guide’s frame.\nvar topAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the top edge of the layout guide’s frame.\nvar trailingAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the trailing edge of the layout guide’s frame.\nvar widthAnchor: NSLayoutDimension\nA layout anchor representing the width of the layout guide’s frame."
  },
  {
    "title": "topAnchor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilayoutguide/1619650-topanchor",
    "html": "Discussion\n\nUse this anchor to create constraints with the layout guide’s top edge. You can combine this anchor only with other NSLayoutYAxisAnchor anchors. For more information, see NSLayoutAnchor.\n\nSee Also\nCreating constraints using layout anchors\nvar bottomAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the bottom edge of the layout guide’s frame.\nvar centerXAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the horizontal center of the layout guide’s frame.\nvar centerYAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the vertical center of the layout guide’s frame.\nvar heightAnchor: NSLayoutDimension\nA layout anchor representing the height of the layout guide’s frame.\nvar leadingAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the leading edge of the layout guide’s frame.\nvar leftAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the left edge of the layout guide’s frame.\nvar rightAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the right edge of the layout guide’s frame.\nvar trailingAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the trailing edge of the layout guide’s frame.\nvar widthAnchor: NSLayoutDimension\nA layout anchor representing the width of the layout guide’s frame."
  },
  {
    "title": "constraint(greaterThanOrEqualToSystemSpacingAfter:multiplier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutxaxisanchor/2865871-constraint",
    "html": "Parameters\nanchor\n\nThe anchor to use as the starting point for the constraint.\n\nmultiplier\n\nThe multiple of the system spacing to use as the minimum distance between the two anchors.\n\nReturn Value\n\nAn NSLayoutConstraint object that imposes a minimum distance between the current anchor and the object in the anchor parameter.\n\nDiscussion\n\nThe constraint causes the current anchor to trail the object in the anchor parameter. For example, in a left-to-right layout, the current anchor is to the right of anchor, but in a right-to-left layout, it’s to the left of anchor.\n\nThe minimum distance between the two anchors is determined by multiplying the system spacing by the value in the multiplier parameter. (The actual distance must be greater than or equal to that value.) The value of the system space is determined from information available from the anchors.\n\nSee Also\nBuilding system spacing constraints\nfunc constraint(equalToSystemSpacingAfter: NSLayoutXAxisAnchor, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines by how much the current anchor trails the specified anchor.\nfunc constraint(lessThanOrEqualToSystemSpacingAfter: NSLayoutXAxisAnchor, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the maximum amount by which the current anchor trails the specified anchor.\nCreating Self-Sizing Table View Cells\nCreate table view cells that support Dynamic Type and use system spacing constraints to adjust the spacing surrounding text labels."
  },
  {
    "title": "centerYAnchor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilayoutguide/1619659-centeryanchor",
    "html": "Discussion\n\nUse this anchor to create constraints with the layout guide’s vertical center. You can combine this anchor only with other NSLayoutYAxisAnchor anchors. For more information, see NSLayoutAnchor.\n\nSee Also\nCreating constraints using layout anchors\nvar bottomAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the bottom edge of the layout guide’s frame.\nvar centerXAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the horizontal center of the layout guide’s frame.\nvar heightAnchor: NSLayoutDimension\nA layout anchor representing the height of the layout guide’s frame.\nvar leadingAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the leading edge of the layout guide’s frame.\nvar leftAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the left edge of the layout guide’s frame.\nvar rightAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the right edge of the layout guide’s frame.\nvar topAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the top edge of the layout guide’s frame.\nvar trailingAnchor: NSLayoutXAxisAnchor\nA layout anchor representing the trailing edge of the layout guide’s frame.\nvar widthAnchor: NSLayoutDimension\nA layout anchor representing the width of the layout guide’s frame."
  },
  {
    "title": "UICollisionBehavior.Mode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollisionbehavior/mode",
    "html": "Topics\nConstants\nstatic var items: UICollisionBehavior.Mode\nSpecifies that the dynamic items, associated with the collision behavior, collide only with each other and not with specified collision boundaries.\nstatic var boundaries: UICollisionBehavior.Mode\nSpecifies that the dynamic items, associated with the collision behavior, collide only with specified collision boundaries and don’t collide with each other.\nstatic var everything: UICollisionBehavior.Mode\nSpecifies that the dynamic items, associated with the collision behavior, collide with each other and with specified collision boundaries.\nInitializers\ninit(rawValue: UInt)\nCreates a collision behavior mode structure with the specified raw value.\nRelationships\nConforms To\nOptionSet\nSendable"
  },
  {
    "title": "focusedItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscreen/1649175-focuseditem",
    "html": "Discussion\n\nIf this item is not a view, the focusedView property is set to the view that contains the item.\n\nSee Also\nDeprecated properties\nclass var main: UIScreen\nReturns the screen object representing the device’s screen.\nDeprecated\nclass var screens: [UIScreen]\nReturns an array containing all of the screens attached to the device.\nDeprecated\nvar applicationFrame: CGRect\nThe frame rectangle for the app window, measured in points.\nDeprecated\nvar focusedView: UIView?\nThe view that is currently focused.\nDeprecated\nvar supportsFocus: Bool\nA Boolean value that indicates whether the screen supports focus-based inputs.\nDeprecated"
  },
  {
    "title": "constraint(equalToConstant:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutdimension/1500941-constraint",
    "html": "Parameters\nc\n\nA constant representing the size of the attribute associated with this dimension anchor.\n\nReturn Value\n\nAn NSLayoutConstraint object that defines a constant size for the attribute associated with this dimension anchor.\n\nDiscussion\n\nThis method defines the relationship first attribute = c. Where first attribute is the layout attribute represented by the anchor receiving this method call.\n\nThe constraints produced by the following two examples are identical.\n\n// Creating a constraint using NSLayoutConstraint\nNSLayoutConstraint(item: button,\n                   attribute: .Width,\n                   relatedBy: .Equal,\n                   toItem: nil,\n                   attribute: .NotAnAttribute,\n                   multiplier: 1.0,\n                   constant: 40.0).isActive = true\n \n// Creating the same constraint using constraintEqualToConstant:\nbutton.widthAnchor.constraintEqualToConstant(40.0).isActive = true\n\nSee Also\nBuilding constraints\nfunc constraint(equalTo: NSLayoutDimension, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as equal to the specified anchor multiplied by the constant.\nfunc constraint(equalTo: NSLayoutDimension, multiplier: CGFloat, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as equal to the specified size attribute multiplied by a constant plus an offset.\nfunc constraint(greaterThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as greater than or equal to the specified anchor multiplied by the constant.\nfunc constraint(greaterThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as greater than or equal to the specified anchor multiplied by the constant plus an offset.\nfunc constraint(greaterThanOrEqualToConstant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the minimum size for the anchor’s size attribute.\nfunc constraint(lessThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as less than or equal to the specified anchor multiplied by the constant.\nfunc constraint(lessThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as greater than or equal to the specified anchor multiplied by the constant plus an offset.\nfunc constraint(lessThanOrEqualToConstant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the maximum size for the anchor’s size attribute."
  },
  {
    "title": "UICollisionBehaviorDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollisionbehaviordelegate",
    "html": "Overview\n\nThe delegate is notified of collisions that occur between the behavior’s dynamic items, or between a dynamic item and a boundary, depending on the behavior’s mode (as set with its collisionMode property). In the case of a collision between an item and the boundary defined by a reference view, the identifier passed to the delegate method is nil. (For more on the reference view and the different ways to initialize a dynamic animator, read the Overview in UIDynamicAnimator.)\n\nTopics\nResponding to UIKit Dynamics collisions\nfunc collisionBehavior(UICollisionBehavior, beganContactFor: UIDynamicItem, withBoundaryIdentifier: NSCopying?, at: CGPoint)\nCalled when a collision, between a dynamic item and a collision boundary, has begun.\nfunc collisionBehavior(UICollisionBehavior, beganContactFor: UIDynamicItem, with: UIDynamicItem, at: CGPoint)\nCalled when a collision between two dynamic items has begun.\nfunc collisionBehavior(UICollisionBehavior, endedContactFor: UIDynamicItem, withBoundaryIdentifier: NSCopying?)\nCalled when a collision between a dynamic item and a boundary has ended.\nfunc collisionBehavior(UICollisionBehavior, endedContactFor: UIDynamicItem, with: UIDynamicItem)\nCalled when a collision between two dynamic items has ended.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nCustomizing the collision behavior\nvar collisionDelegate: UICollisionBehaviorDelegate?\nThe delegate object that you want to respond to collisions for the collision behavior."
  },
  {
    "title": "removeArrangedSubview(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistackview/1616235-removearrangedsubview",
    "html": "Parameters\nview\n\nThe view to be removed from the array of views arranged by the stack.\n\nDiscussion\n\nThis method removes the provided view from the stack’s arrangedSubviews array. The stack view no longer manages the view’s position and size. However, this method doesn’t remove the provided view from the stack’s subviews array; therefore, the view is still displayed as part of the view hierarchy.\n\nTo prevent the view from appearing on screen after calling the stack’s removeArrangedSubview(_:) method, explicitly remove the view from the subviews array by calling the view’s removeFromSuperview() method, or set the view’s isHidden property to true.\n\nSee Also\nManaging arranged subviews\nfunc addArrangedSubview(UIView)\nAdds a view to the end of the arranged subviews array.\nvar arrangedSubviews: [UIView]\nThe list of views arranged by the stack view.\nfunc insertArrangedSubview(UIView, at: Int)\nAdds the provided view to the array of arranged subviews at the specified index.\nRelated Documentation\nfunc removeFromSuperview()\nUnlinks the view from its superview and its window, and removes it from the responder chain.\ninit(arrangedSubviews: [UIView])\nReturns a new stack view object that manages the provided views."
  },
  {
    "title": "insertArrangedSubview(_:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistackview/1616237-insertarrangedsubview",
    "html": "Parameters\nview\n\nThe view to add to the array of views arranged by the stack.\n\nstackIndex\n\nThe index where the stack inserts the new view in its arrangedSubviews array. This value must not be greater than the number of views currently in this array. If the index is out of bounds, this method throws an internalInconsistencyException exception.\n\nDiscussion\n\nIf index is already occupied, the stack view increases the size of the arrangedSubviews array and shifts all of its contents at the index and above to the next higher space in the array. Then the stack view stores the provided view at the index.\n\nThe stack view also ensures that the arrangedSubviews array is always a subset of its subviews array. This method automatically adds the provided view as a subview of the stack view, if it isn’t already. When adding subviews, the stack view appends the view to the end of its subviews array. The index only affects the order of views in the arrangedSubviews array. It doesn’t affect the ordering of views in the subviews array.\n\nSee Also\nManaging arranged subviews\nfunc addArrangedSubview(UIView)\nAdds a view to the end of the arranged subviews array.\nvar arrangedSubviews: [UIView]\nThe list of views arranged by the stack view.\nfunc removeArrangedSubview(UIView)\nRemoves the provided view from the stack’s array of arranged subviews.\nRelated Documentation\nfunc removeFromSuperview()\nUnlinks the view from its superview and its window, and removes it from the responder chain.\ninit(arrangedSubviews: [UIView])\nReturns a new stack view object that manages the provided views."
  },
  {
    "title": "scrubsLinearly | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewpropertyanimator/2873966-scrubslinearly",
    "html": "Discussion\n\nThe default value of this property is true, which causes the animator to use a linear timing function during scrubbing. Setting the property to false causes the animator to use its specified timing curve.\n\nSee Also\nAccessing the animation parameters\nvar duration: TimeInterval\nThe total duration (in seconds) of the main animations.\nvar delay: TimeInterval\nThe delay (in seconds) after which the animations begin.\nvar timingParameters: UITimingCurveProvider?\nThe information used to determine the timing curve for the animation.\nvar isInterruptible: Bool\nA Boolean value indicating whether the animator is interruptible and can be paused or stopped.\nvar isUserInteractionEnabled: Bool\nA Boolean value indicating whether views receive touch events while animations are running.\nvar isManualHitTestingEnabled: Bool\nA Boolean value indicating whether your app manages hit-testing while animations are in progress.\nvar pausesOnCompletion: Bool\nA Boolean value that indicates whether a completed animation remains in the active state."
  },
  {
    "title": "addArrangedSubview(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistackview/1616227-addarrangedsubview",
    "html": "Parameters\nview\n\nThe view to add to the array of views arranged by the stack.\n\nDiscussion\n\nThe stack view ensures that the arrangedSubviews array is always a subset of its subviews array. This method automatically adds the provided view as a subview of the stack view, if it isn’t already. If the view is already a subview, this operation doesn’t alter the subview ordering.\n\nSee Also\nManaging arranged subviews\nvar arrangedSubviews: [UIView]\nThe list of views arranged by the stack view.\nfunc insertArrangedSubview(UIView, at: Int)\nAdds the provided view to the array of arranged subviews at the specified index.\nfunc removeArrangedSubview(UIView)\nRemoves the provided view from the stack’s array of arranged subviews.\nRelated Documentation\nfunc removeFromSuperview()\nUnlinks the view from its superview and its window, and removes it from the responder chain.\ninit(arrangedSubviews: [UIView])\nReturns a new stack view object that manages the provided views."
  },
  {
    "title": "arrangedSubviews | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistackview/1616232-arrangedsubviews",
    "html": "Discussion\n\nThe stack view ensures that the arrangedSubviews array is always a subset of its subviews array. Therefore, whenever the addArrangedSubview(_:) method is called, the stack view adds the view as a subview, if it isn’t already. Whenever an arranged view’s removeFromSuperview() method is called, the stack view removes the view from its arrangedSubviews array.\n\nSee Also\nManaging arranged subviews\nfunc addArrangedSubview(UIView)\nAdds a view to the end of the arranged subviews array.\nfunc insertArrangedSubview(UIView, at: Int)\nAdds the provided view to the array of arranged subviews at the specified index.\nfunc removeArrangedSubview(UIView)\nRemoves the provided view from the stack’s array of arranged subviews.\nRelated Documentation\nfunc removeFromSuperview()\nUnlinks the view from its superview and its window, and removes it from the responder chain.\ninit(arrangedSubviews: [UIView])\nReturns a new stack view object that manages the provided views."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistackview/2097541-init",
    "html": "See Also\nInitializing a stack view\ninit(arrangedSubviews: [UIView])\nReturns a new stack view object that manages the provided views.\ninit(frame: CGRect)\nCreates a stack view with the specified frame."
  },
  {
    "title": "init(frame:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistackview/2097542-init",
    "html": "See Also\nInitializing a stack view\ninit(arrangedSubviews: [UIView])\nReturns a new stack view object that manages the provided views.\ninit(coder: NSCoder)\nCreates a stack view from data in an unarchiver."
  },
  {
    "title": "isReversed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewanimating/1649804-isreversed",
    "html": "Required\n\nDiscussion\n\nWhen the value of this property is true, animations run in the reverse direction—that is, view properties animate back to their original values. When the value is false, view properties animate to their intended final values.\n\nWhen implementing this property, changes should cause the animation to reverse direction. If you allow changes while the animation is running, it is best to pause the animation briefly and then start it again in the opposite direction. Once the animation transitions to the UIViewAnimatingState.stopped state, you can ignore changes to this property.\n\nSee Also\nGetting the animator’s state\nvar fractionComplete: CGFloat\nThe completion percentage of the animation.\n\nRequired\n\nvar state: UIViewAnimatingState\nThe current state of the animation.\n\nRequired\n\nvar isRunning: Bool\nA Boolean value indicating whether the animation is currently running.\n\nRequired"
  },
  {
    "title": "startAnimation() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewanimating/1649786-startanimation",
    "html": "Required\n\nDiscussion\n\nCall this method to start the animations or to resume the animation after they were paused. This method sets the state of the animator to UIViewAnimatingState.active, if it isn’t already there. It’s a programmer error to call this method while the state of the animator is set to UIViewAnimatingState.stopped.\n\nWhen implementing a custom animator, use this method to transition your animator to the active state and to run the animations. Run your animations from the progress point in the fractionComplete property. Update the state and isRunning properties, as well as any other relevant properties of your custom animator object.\n\nSee Also\nStarting and stopping the animations\nfunc startAnimation(afterDelay: TimeInterval)\nStarts the animation after the specified delay.\n\nRequired\n\nfunc pauseAnimation()\nPauses a running animation at its current position.\n\nRequired\n\nfunc stopAnimation(Bool)\nStops the animations at their current positions.\n\nRequired\n\nfunc finishAnimation(at: UIViewAnimatingPosition)\nFinishes the animations and returns the animator to the inactive state.\n\nRequired"
  },
  {
    "title": "init(arrangedSubviews:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistackview/1616240-init",
    "html": "Parameters\nviews\n\nThe views to be arranged by the stack view.\n\nReturn Value\n\nA new stack view object. This stack view contains and lays out the provided views in a single stack. You can modify the orientation or appearance of this stack, using the stack view’s properties.\n\nDiscussion\n\nThe stack view adds all the arranged views to its arrangedSubviews array. It also adds these views as subviews. If any view contained in the arrangedSubviews array receives a removeFromSuperview() method call, the stack view also removes it from the arrangedSubviews.\n\nSee Also\nInitializing a stack view\ninit(frame: CGRect)\nCreates a stack view with the specified frame.\ninit(coder: NSCoder)\nCreates a stack view from data in an unarchiver.\nRelated Documentation\nfunc insertArrangedSubview(UIView, at: Int)\nAdds the provided view to the array of arranged subviews at the specified index.\nfunc removeFromSuperview()\nUnlinks the view from its superview and its window, and removes it from the responder chain.\nvar arrangedSubviews: [UIView]\nThe list of views arranged by the stack view.\nfunc addArrangedSubview(UIView)\nAdds a view to the end of the arranged subviews array.\nfunc removeArrangedSubview(UIView)\nRemoves the provided view from the stack’s array of arranged subviews."
  },
  {
    "title": "isManualHitTestingEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewpropertyanimator/2097548-ismanualhittestingenabled",
    "html": "Discussion\n\nThe default value of this property is false.\n\nSee Also\nAccessing the animation parameters\nvar duration: TimeInterval\nThe total duration (in seconds) of the main animations.\nvar delay: TimeInterval\nThe delay (in seconds) after which the animations begin.\nvar timingParameters: UITimingCurveProvider?\nThe information used to determine the timing curve for the animation.\nvar isInterruptible: Bool\nA Boolean value indicating whether the animator is interruptible and can be paused or stopped.\nvar isUserInteractionEnabled: Bool\nA Boolean value indicating whether views receive touch events while animations are running.\nvar scrubsLinearly: Bool\nA Boolean value indicating whether a paused animation scrubs linearly or uses its specified timing information.\nvar pausesOnCompletion: Bool\nA Boolean value that indicates whether a completed animation remains in the active state."
  },
  {
    "title": "isUserInteractionEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewpropertyanimator/1648365-isuserinteractionenabled",
    "html": "Discussion\n\nWhen the value of this property is true, touch events are delivered to views normally. Setting this property to false causes touch events to be ignored in animated views for the duration of the animations. The default value of this property is true.\n\nSee Also\nAccessing the animation parameters\nvar duration: TimeInterval\nThe total duration (in seconds) of the main animations.\nvar delay: TimeInterval\nThe delay (in seconds) after which the animations begin.\nvar timingParameters: UITimingCurveProvider?\nThe information used to determine the timing curve for the animation.\nvar isInterruptible: Bool\nA Boolean value indicating whether the animator is interruptible and can be paused or stopped.\nvar isManualHitTestingEnabled: Bool\nA Boolean value indicating whether your app manages hit-testing while animations are in progress.\nvar scrubsLinearly: Bool\nA Boolean value indicating whether a paused animation scrubs linearly or uses its specified timing information.\nvar pausesOnCompletion: Bool\nA Boolean value that indicates whether a completed animation remains in the active state."
  },
  {
    "title": "timingParameters | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewpropertyanimator/1648363-timingparameters",
    "html": "Discussion\n\nThe timing curve defines the speed of the animation at different points during its execution. For a linear animation, the speed of the animation is constant over the total duration. For animations that follow a curve, the animation speeds up or slows down based on the slope of the curve. You specify the curve parameters at initialization time and can use this property to get those parameters later.\n\nSee Also\nAccessing the animation parameters\nvar duration: TimeInterval\nThe total duration (in seconds) of the main animations.\nvar delay: TimeInterval\nThe delay (in seconds) after which the animations begin.\nvar isInterruptible: Bool\nA Boolean value indicating whether the animator is interruptible and can be paused or stopped.\nvar isUserInteractionEnabled: Bool\nA Boolean value indicating whether views receive touch events while animations are running.\nvar isManualHitTestingEnabled: Bool\nA Boolean value indicating whether your app manages hit-testing while animations are in progress.\nvar scrubsLinearly: Bool\nA Boolean value indicating whether a paused animation scrubs linearly or uses its specified timing information.\nvar pausesOnCompletion: Bool\nA Boolean value that indicates whether a completed animation remains in the active state."
  },
  {
    "title": "isInterruptible | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewpropertyanimator/1648372-isinterruptible",
    "html": "Discussion\n\nWhen the value of this property is true, you can use the pauseAnimation() and stopAnimation(_:) methods to interrupt the animations and make changes. When the value of this property is false, the animations run to completion (and without interruption) after you call the startAnimation() method. If you use a view property animator object to implement an interruptible view controller transition, this property must be true.\n\nIt is a programmer error to change this property if the animator’s state property is not set to UIViewAnimatingState.inactive.\n\nSee Also\nAccessing the animation parameters\nvar duration: TimeInterval\nThe total duration (in seconds) of the main animations.\nvar delay: TimeInterval\nThe delay (in seconds) after which the animations begin.\nvar timingParameters: UITimingCurveProvider?\nThe information used to determine the timing curve for the animation.\nvar isUserInteractionEnabled: Bool\nA Boolean value indicating whether views receive touch events while animations are running.\nvar isManualHitTestingEnabled: Bool\nA Boolean value indicating whether your app manages hit-testing while animations are in progress.\nvar scrubsLinearly: Bool\nA Boolean value indicating whether a paused animation scrubs linearly or uses its specified timing information.\nvar pausesOnCompletion: Bool\nA Boolean value that indicates whether a completed animation remains in the active state."
  },
  {
    "title": "delay | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewpropertyanimator/2097549-delay",
    "html": "Discussion\n\nThe default value of this property is 0. When the value is greater than 0, the start of any animations is delayed by the specified amount of time.\n\nTo set a value for this property, use the startAnimation(afterDelay:) method when starting your animations.\n\nSee Also\nAccessing the animation parameters\nvar duration: TimeInterval\nThe total duration (in seconds) of the main animations.\nvar timingParameters: UITimingCurveProvider?\nThe information used to determine the timing curve for the animation.\nvar isInterruptible: Bool\nA Boolean value indicating whether the animator is interruptible and can be paused or stopped.\nvar isUserInteractionEnabled: Bool\nA Boolean value indicating whether views receive touch events while animations are running.\nvar isManualHitTestingEnabled: Bool\nA Boolean value indicating whether your app manages hit-testing while animations are in progress.\nvar scrubsLinearly: Bool\nA Boolean value indicating whether a paused animation scrubs linearly or uses its specified timing information.\nvar pausesOnCompletion: Bool\nA Boolean value that indicates whether a completed animation remains in the active state."
  },
  {
    "title": "addCompletion(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewpropertyanimator/1648373-addcompletion",
    "html": "Parameters\ncompletion\n\nA block to execute when the animations finish. This block has no return value and takes the following parameter:\n\nfinalPosition\n\nThe ending position of the animations. Use this value to determine whether the animations stopped at the beginning, end, or somewhere in the middle.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc addCompletion() async -> UIViewAnimatingPosition\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nCompletion blocks are executed after the animations finish normally. If you call the stopAnimation(_:) method, the completion blocks are not called if you specify true for the method’s parameter. If you specify false for the parameter, the animator executes the completion blocks normally after you call the its finishAnimation(at:) method.\n\nYou may add completion blocks to an animator at any time, including while it is stopped.\n\nSee Also\nModifying animations\nfunc addAnimations(() -> Void)\nAdds the specified animation block to the animator.\nfunc addAnimations(() -> Void, delayFactor: CGFloat)\nAdds the specified animation block with a delay.\nfunc continueAnimation(withTimingParameters: UITimingCurveProvider?, durationFactor: CGFloat)\nAdjusts the timing and duration of a paused animation."
  },
  {
    "title": "addAnimations(_:delayFactor:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewpropertyanimator/1648370-addanimations",
    "html": "Parameters\nanimation\n\nA block containing the animations you want to add to the animator object. This block has no return value and takes no parameters. This parameter must not be nil.\n\ndelayFactor\n\nThe factor to use for delaying the start of the animations. The value you specify must be between 0.0 and 1.0. This value is multiplied by the animator’s remaining duration to determine the actual delay in seconds. For example, specifying the value 0.5 when the duration is 2.0 results in a one second delay for the start of the animations.\n\nDiscussion\n\nUse this method to add new animation blocks to the animator. The animations in the new block run alongside any previously configured animations after the specified delay. Blocks added while the animator’s state is UIViewAnimatingState.inactive are executed over the time specified by the duration property minus any delay. Blocks added while the animator’s state is UIViewAnimatingState.active are executed over the remaining portion of the total run time minus the delay. For example, if the duration is 2.0 and you add an animation block with a delay factor of 0.25 to a running animator whose fractionComplete property is 0.25, the animations run for 1.0 second.\n\nIf the animation block modifies a property that is being modified by a different property animator, then the animators combine their changes in the most appropriate way. For many properties, the changes from each animator are added together to yield a new intermediate value. If a property cannot be modified in this additive manner, the new animations take over as if the beginFromCurrentState option had been specified for a view-based animation.\n\nYou can call this method multiple times to add multiple blocks to the animator. It is a programmer error to call this method when the animator’s state property is set to UIViewAnimatingState.stopped.\n\nSee Also\nModifying animations\nfunc addAnimations(() -> Void)\nAdds the specified animation block to the animator.\nfunc addCompletion((UIViewAnimatingPosition) -> Void)\nAdds the specified completion block to the animator.\nfunc continueAnimation(withTimingParameters: UITimingCurveProvider?, durationFactor: CGFloat)\nAdjusts the timing and duration of a paused animation."
  },
  {
    "title": "continueAnimation(withTimingParameters:durationFactor:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewpropertyanimator/1648371-continueanimation",
    "html": "Parameters\nparameters\n\nThe new timing information to apply to the animation. The animator may transition from the previous timing curve to the new timing curve over time to keep the transition from becoming too jarring. For example, if the previous timing curve used a spring animation, the animator may add some of spring behavior to the new animation.\n\ndurationFactor\n\nA multiplying factor to apply to the animation’s original duration. The value of this parameter is multiplied by the original duration value to obtain the new duration for the animations.\n\nDiscussion\n\nThis method overrides the timing and duration parameters for the current animations. When calling this method, the animator must be active and currently paused. It’s a programmer error to call this method when the animator is inactive, running, or its isInterruptible property is set to false.\n\nThis method overrides the original timing and duration values only until the current animations finish. The original timing and duration values are restored when the animator transitions back to the inactive state.\n\nSee Also\nModifying animations\nfunc addAnimations(() -> Void)\nAdds the specified animation block to the animator.\nfunc addAnimations(() -> Void, delayFactor: CGFloat)\nAdds the specified animation block with a delay.\nfunc addCompletion((UIViewAnimatingPosition) -> Void)\nAdds the specified completion block to the animator.\nRelated Documentation\nfunc pauseAnimation()\nPauses a running animation at its current position."
  },
  {
    "title": "addAnimations(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewpropertyanimator/1648374-addanimations",
    "html": "Parameters\nanimation\n\nA block containing the animations you want to add to the animator object. This block has no return value and takes no parameters. This parameter must not be nil.\n\nDiscussion\n\nUse this method to add new animation blocks to the animator. The animations in the new block run alongside any previously configured animations. Blocks added while the animator’s state is UIViewAnimatingState.inactive are executed over the time specified by the duration property. Blocks added while the animator’s state is UIViewAnimatingState.active are executed over the remaining portion of the total run time. For example, if the duration is 2.0 and you add an animation block to a running animator whose fractionComplete property is 0.5, the animations run for 1.0 second. Any blocks you add while the animator is running begin executing immediately.\n\nIf the animation block modifies a property that’s being modified by a different property animator, then the animators combine their changes in the most appropriate way. For many properties, the changes from each animator are added together to yield a new intermediate value. If a property can’t be modified in this additive manner, the new animations take over as if the beginFromCurrentState option had been specified for a view-based animation.\n\nYou can call this method multiple times to add multiple blocks to the animator. It’s a programmer error to call this method when the animator’s state property is set to UIViewAnimatingState.stopped.\n\nSee Also\nModifying animations\nfunc addAnimations(() -> Void, delayFactor: CGFloat)\nAdds the specified animation block with a delay.\nfunc addCompletion((UIViewAnimatingPosition) -> Void)\nAdds the specified completion block to the animator.\nfunc continueAnimation(withTimingParameters: UITimingCurveProvider?, durationFactor: CGFloat)\nAdjusts the timing and duration of a paused animation."
  },
  {
    "title": "runningPropertyAnimator(withDuration:delay:options:animations:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewpropertyanimator/1648367-runningpropertyanimator",
    "html": "Parameters\nduration\n\nThe duration of the animation, in seconds.\n\ndelay\n\nThe number of seconds to wait before starting the animations. Specify 0 to begin the animations immediately.\n\noptions\n\nThe options to apply to the animations. You can specify most options, but transition-related options and options related to the animation direction are ignored. For a list of options, see UIView.AnimationOptions.\n\nanimations\n\nThe block containing the animations. This block has no return value and takes no parameters. Use this block to modify any animatable properties of your view. Those properties are animated from their current values to the new values using the specified animation parameters.\n\ncompletion\n\nThe block to execute when the animations finish. You can use this block to perform any final actions. This block has no return value and takes the following parameter:\n\nfinalPosition\n\nThe ending position of the animations. Use this value to determine whether the animations stopped at the beginning, end, or somewhere in the middle.\n\nReturn Value\n\nAn initialized animator object or nil if the object could not be created.\n\nDiscussion\n\nThis method creates the property animator object, configures it, and calls its startAnimation() method after the specified delay. If you don’t specify an animation curve in the options parameter, this method uses the curveEaseInOut option.\n\nSee Also\nInitializing a property animator\ninit(duration: TimeInterval, curve: UIView.AnimationCurve, animations: (() -> Void)?)\nInitializes the animator with a built-in UIKit timing curve.\ninit(duration: TimeInterval, controlPoint1: CGPoint, controlPoint2: CGPoint, animations: (() -> Void)?)\nInitializes the animator object with a cubic Bézier timing curve.\ninit(duration: TimeInterval, dampingRatio: CGFloat, animations: (() -> Void)?)\nInitializes the animator object with spring-based timing information.\ninit(duration: TimeInterval, timingParameters: UITimingCurveProvider)\nInitializes the animator object with a custom timing curve object."
  },
  {
    "title": "init(duration:dampingRatio:animations:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewpropertyanimator/1648369-init",
    "html": "Parameters\nduration\n\nThe duration of the animation, in seconds.\n\nratio\n\nThe damping ratio to apply to the initial acceleration and oscillation. To smoothly decelerate the animation without oscillation, specify a value of 1. Specify values closer to 0 to create less damping and more oscillation.\n\nanimations\n\nThe block containing the animations. This block has no return value and takes no parameters. Use this block to modify any animatable view properties. When you start the animations, those properties are animated from their current values to the new values using the specified animation parameters.\n\nReturn Value\n\nAn initialized animator object or nil if the object could not be created.\n\nDiscussion\n\nSpring-based animations cause the value of a property to accelerate initially toward its new value and then oscillate around that value until before finally coming to rest on the value. The initial amount of acceleration is proportional to the difference between the start and end values of the property. In other words, the greater the difference between the start and end values, the greater the initial acceleration. The ratio parameter determines the amount of damping applied to the initial acceleration. Lower damping values correspond to less resistance to the acceleration and more oscillation before coming to rest. Higher damping values correspond to more resistance and less oscillation.\n\nThe animator object returned by this method begins in the UIViewAnimatingState.inactive state. You must explicitly start the animations by calling the startAnimation() method.\n\nSee Also\nInitializing a property animator\ninit(duration: TimeInterval, curve: UIView.AnimationCurve, animations: (() -> Void)?)\nInitializes the animator with a built-in UIKit timing curve.\ninit(duration: TimeInterval, controlPoint1: CGPoint, controlPoint2: CGPoint, animations: (() -> Void)?)\nInitializes the animator object with a cubic Bézier timing curve.\ninit(duration: TimeInterval, timingParameters: UITimingCurveProvider)\nInitializes the animator object with a custom timing curve object.\nclass func runningPropertyAnimator(withDuration: TimeInterval, delay: TimeInterval, options: UIView.AnimationOptions, animations: () -> Void, completion: ((UIViewAnimatingPosition) -> Void)?) -> Self\nCreates and returns an animator object that begins running its animations immediately."
  },
  {
    "title": "constant | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutconstraint/1526928-constant",
    "html": "Discussion\n\nUnlike the other properties, the constant can be modified after constraint creation. Setting the constant on an existing constraint performs much better than removing the constraint and adding a new one that's exactly like the old except that it has a different constant.\n\nSee Also\nAccessing constraint data\nvar firstItem: AnyObject?\nThe first object participating in the constraint.\nvar firstAttribute: NSLayoutConstraint.Attribute\nThe attribute of the first object participating in the constraint.\nvar relation: NSLayoutConstraint.Relation\nThe relation between the two attributes in the constraint.\nvar secondItem: AnyObject?\nThe second object participating in the constraint.\nvar secondAttribute: NSLayoutConstraint.Attribute\nThe attribute of the second object participating in the constraint.\nvar multiplier: CGFloat\nThe multiplier applied to the second attribute participating in the constraint.\nvar firstAnchor: NSLayoutAnchor<AnyObject>\nThe first anchor that defines the constraint.\nvar secondAnchor: NSLayoutAnchor<AnyObject>?\nThe second anchor that defines the constraint."
  },
  {
    "title": "init(duration:curve:animations:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewpropertyanimator/1648366-init",
    "html": "Parameters\nduration\n\nThe duration of the animation, in seconds.\n\ncurve\n\nThe UIKit timing curve to apply to the animation.\n\nanimations\n\nThe block containing the animations. This block has no return value and takes no parameters. Use this block to modify any animatable view properties. When you start the animations, those properties are animated from their current values to the new values using the specified animation parameters.\n\nReturn Value\n\nAn initialized animator object or nil if the object could not be created.\n\nDiscussion\n\nUse this method to create an animator object that uses the existing UIKit timing curves to control the animation behavior. Standard UIKit timing curves include UIView.AnimationCurve.linear and UIView.AnimationCurve.easeInOut among others.\n\nThe animator object returned by this method begins in the UIViewAnimatingState.inactive state. You must explicitly start the animations by calling the startAnimation() method.\n\nSee Also\nInitializing a property animator\ninit(duration: TimeInterval, controlPoint1: CGPoint, controlPoint2: CGPoint, animations: (() -> Void)?)\nInitializes the animator object with a cubic Bézier timing curve.\ninit(duration: TimeInterval, dampingRatio: CGFloat, animations: (() -> Void)?)\nInitializes the animator object with spring-based timing information.\ninit(duration: TimeInterval, timingParameters: UITimingCurveProvider)\nInitializes the animator object with a custom timing curve object.\nclass func runningPropertyAnimator(withDuration: TimeInterval, delay: TimeInterval, options: UIView.AnimationOptions, animations: () -> Void, completion: ((UIViewAnimatingPosition) -> Void)?) -> Self\nCreates and returns an animator object that begins running its animations immediately."
  },
  {
    "title": "init(duration:controlPoint1:controlPoint2:animations:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewpropertyanimator/1648368-init",
    "html": "Parameters\nduration\n\nThe duration of the animation, in seconds.\n\npoint1\n\nThe first control point for the cubic Bézier timing curve.\n\npoint2\n\nThe second control point for the cubic Bézier timing curve.\n\nanimations\n\nThe block containing the animations. This block has no return value and takes no parameters. Use this block to modify any animatable view properties. When you start the animations, those properties are animated from their current values to the new values using the specified animation parameters.\n\nReturn Value\n\nAn initialized animator object or nil if the object could not be created.\n\nDiscussion\n\nUse this method to create an animator object using a cubic timing curve whose starting point is (0, 0) and whose end point is (1, 1). The point1 and point2 parameters are the control points that define the shape of the resulting Bezier curve. The slope of the curve defines the speed of the animation at different times. Steep slopes cause animations to appear to run faster and shallower slopes cause them to appear to run slower. Figure 1 shows a timing curve where the animations start fast and finish fast but run more slowly through the middle section.\n\nFigure 1 A cubic Bézier timing curve\n\nThe animator object returned by this method begins in the UIViewAnimatingState.inactive state. You must explicitly start the animations by calling the startAnimation() method.\n\nSee Also\nInitializing a property animator\ninit(duration: TimeInterval, curve: UIView.AnimationCurve, animations: (() -> Void)?)\nInitializes the animator with a built-in UIKit timing curve.\ninit(duration: TimeInterval, dampingRatio: CGFloat, animations: (() -> Void)?)\nInitializes the animator object with spring-based timing information.\ninit(duration: TimeInterval, timingParameters: UITimingCurveProvider)\nInitializes the animator object with a custom timing curve object.\nclass func runningPropertyAnimator(withDuration: TimeInterval, delay: TimeInterval, options: UIView.AnimationOptions, animations: () -> Void, completion: ((UIViewAnimatingPosition) -> Void)?) -> Self\nCreates and returns an animator object that begins running its animations immediately."
  },
  {
    "title": "electricField() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifieldbehavior/1625004-electricfield",
    "html": "Return Value\n\nAn field behavior object that applies an electric field to charged items.\n\nDiscussion\n\nThe amount of force applied by the field is proportional to the charge of the item and is modeled after the first part of the Lorentz equation (F = qE). This equation means that the force equals the charge of the object multiplied by the strength of the electric field at the item’s current location in that field.\n\nYou can use electric fields as a way to apply forces to an object that are based on charge instead of mass. You can use electric fields to repel or attract items in your interface, with opposite charges attracting each other and similar charges repelling each other. In other words, an item with a positive charge value is attracted to fields whose strength value is negative and repelled by fields whose strength value is positive.\n\nSee Also\nGetting the field behaviors\nclass func dragField() -> Self\nCreates and returns a field behavior for slowing an object’s velocity.\nclass func springField() -> Self\nCreates and returns a spring field behavior.\nclass func velocityField(direction: CGVector) -> Self\nCreates and returns a field behavior object that applies a directional velocity to items.\nclass func magneticField() -> Self\nCreates and returns a field behavior that interacts with charged items.\nclass func radialGravityField(position: CGPoint) -> Self\nCreates and returns a field behavior object that models a radial gravitational force.\nclass func linearGravityField(direction: CGVector) -> Self\nCreates and returns a field behavior object that models a linear gravitational force.\nclass func vortexField() -> Self\nCreates and returns a field behavior object that applies a rotational force relative to the field’s position.\nclass func noiseField(smoothness: CGFloat, animationSpeed: CGFloat) -> Self\nCreates and returns a field behavior object that applies random noise to other forces.\nclass func turbulenceField(smoothness: CGFloat, animationSpeed: CGFloat) -> Self\nCreates and returns a field behavior object that applies noise to an item in motion.\nclass func field(evaluationBlock: (UIFieldBehavior, CGPoint, CGVector, CGFloat, CGFloat, TimeInterval) -> CGVector) -> Self\nCreates and returns a field behavior object that applies an app-specified field to items."
  },
  {
    "title": "bottomLayoutGuide | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontroller/1621504-bottomlayoutguide",
    "html": "Deprecated\n\nUse the safeAreaLayoutGuide property of UIView instead.\n\nDiscussion\n\nThe bottomLayoutGuide property comes into play when a view controller is frontmost onscreen. It indicates the lowest vertical extent for content that you don't want to appear behind a translucent or transparent UIKit bar (such as a tab bar or toolbar). This property implements the UILayoutSupport protocol and you can employ it as a constraint item when using the NSLayoutConstraint class.\n\nThe value of this property is, specifically, the value of the length property of the object returned when you query this property. This value is constrained by either the view controller or by its enclosing container view controller (such as a navigation or tab bar controller), as follows:\n\nA view controller not within a container view controller constrains this property to indicate the top of the tab bar or toolbar, if one of these is visible, or else to indicate the bottom edge of the view controller's view.\n\nA view controller within a container view controller does not set this property’s value. Instead, the container view controller constrains the value to indicate the top of the tab bar or toolbar, if one of these is visible, or else to indicate the bottom edge of the view controller's view.\n\nIf a container view controller's toolbar or tab bar is visible and opaque, the container lays out the frontmost view controller's view so its bottom edge abuts the top of the bar. In this case, the value of this property is 0.\n\nQuery this property within your implementation of the viewDidLayoutSubviews() method.\n\nWhen laying out a storyboard scene, the Bottom Layout Guide object is available in the Interface Builder outline view as a child of the View Controller object. Adding a bottom layout guide using Interface Builder provides backward layout compatibility to iOS 6.\n\nAs an example of how to programmatically use this property with Auto Layout, say you want to position a control such that its bottom edge is 20 points above the bottom layout guide. This scenario applies to any of the scenarios listed above. Use code similar to the following:\n\n[button setTranslatesAutoresizingMaskIntoConstraints: NO];\nid bottomGuide = myViewController.bottomLayoutGuide;\nNSDictionary *viewsDictionary = NSDictionaryOfVariableBindings (button, bottomGuide);\n[myViewController.view addConstraints:\n    [NSLayoutConstraint constraintsWithVisualFormat: @\"V: [button]-20-[bottomGuide]\"\n                                                 options: 0\n                                                 metrics: nil\n                                                   views: viewsDictionary]];\n[self.view layoutSubviews]; // You must call this method here or the system raises an exception\n\n\nImportant\n\nIf you define Auto Layout constraints in a storyboard file as well as programmatically, it is your responsibility to ensure the constraints do not conflict. If they do conflict, the system may throw a runtime exception.\n\nTo use a bottom layout guide without using constraints, obtain the guide’s position relative to the bottom bound of the containing view. In the case of using a view controller subclass, obtain the numbers you need as follows:\n\n- (void) viewDidLayoutSubviews {\n    CGRect viewBounds = self.view.bounds;\n    CGFloat bottomBarOffset = self.bottomLayoutGuide.length;\n}\n\n\nIn the case of using a view subclass, obtain the numbers you need as follows:\n\n- (void) layoutSubviews {\n    [super layoutSubviews]; // You must call super here or the system raises an exception\n    CGRect bounds = self.bounds;\n    CGFloat bottomBarOffset = myVCReference.bottomLayoutGuide.length;\n}\n\nSee Also\nDeprecated properties\nvar shouldAutorotate: Bool\nA Boolean value that indicates whether the view controller’s contents should autorotate.\nDeprecated\nvar previewActionItems: [UIPreviewActionItem]\nThe quick actions displayed when a user swipes upward on a 3D Touch preview.\nDeprecated\nvar automaticallyAdjustsScrollViewInsets: Bool\nA Boolean value that indicates whether the view controller should automatically adjust its scroll view insets.\nDeprecated\nvar interfaceOrientation: UIInterfaceOrientation\nConvenience property that provides the current orientation of the interface, meaningful only if the view controller is taking up the full screen.\nDeprecated\nvar isModalInPopover: Bool\nA Boolean value indicating whether the view controller should be presented modally by a popover.\nDeprecated\nvar searchDisplayController: UISearchDisplayController?\nThe search display controller associated with the view controller.\nDeprecated\nvar topLayoutGuide: UILayoutSupport\nIndicates the highest vertical extent for your onscreen content, for use with Auto Layout constraints.\nDeprecated"
  },
  {
    "title": "left | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiedgeinsets/1624510-left",
    "html": "See Also\nGetting the edge values\nvar bottom: CGFloat\nThe bottom edge inset value.\nvar right: CGFloat\nThe right edge inset value.\nvar top: CGFloat\nThe top edge inset value."
  },
  {
    "title": "firstAttribute | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutconstraint/1525204-firstattribute",
    "html": "See Also\nAccessing constraint data\nvar firstItem: AnyObject?\nThe first object participating in the constraint.\nvar relation: NSLayoutConstraint.Relation\nThe relation between the two attributes in the constraint.\nvar secondItem: AnyObject?\nThe second object participating in the constraint.\nvar secondAttribute: NSLayoutConstraint.Attribute\nThe attribute of the second object participating in the constraint.\nvar multiplier: CGFloat\nThe multiplier applied to the second attribute participating in the constraint.\nvar constant: CGFloat\nThe constant added to the multiplied second attribute participating in the constraint.\nvar firstAnchor: NSLayoutAnchor<AnyObject>\nThe first anchor that defines the constraint.\nvar secondAnchor: NSLayoutAnchor<AnyObject>?\nThe second anchor that defines the constraint."
  },
  {
    "title": "firstItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutconstraint/1526860-firstitem",
    "html": "See Also\nAccessing constraint data\nvar firstAttribute: NSLayoutConstraint.Attribute\nThe attribute of the first object participating in the constraint.\nvar relation: NSLayoutConstraint.Relation\nThe relation between the two attributes in the constraint.\nvar secondItem: AnyObject?\nThe second object participating in the constraint.\nvar secondAttribute: NSLayoutConstraint.Attribute\nThe attribute of the second object participating in the constraint.\nvar multiplier: CGFloat\nThe multiplier applied to the second attribute participating in the constraint.\nvar constant: CGFloat\nThe constant added to the multiplied second attribute participating in the constraint.\nvar firstAnchor: NSLayoutAnchor<AnyObject>\nThe first anchor that defines the constraint.\nvar secondAnchor: NSLayoutAnchor<AnyObject>?\nThe second anchor that defines the constraint."
  },
  {
    "title": "activate(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutconstraint/1526955-activate",
    "html": "Parameters\nconstraints\n\nAn array of constraints to activate.\n\nDiscussion\n\nThis convenience method provides an easy way to activate a set of constraints with one call. The effect of this method is the same as setting the isActive property of each constraint to true. Typically, using this method is more efficient than activating each constraint individually.\n\nSee Also\nActivating and deactivating constraints\nvar isActive: Bool\nThe active state of the constraint.\nclass func deactivate([NSLayoutConstraint])\nDeactivates each constraint in the specified array."
  },
  {
    "title": "topAnchor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilayoutsupport/1622255-topanchor",
    "html": "Required\n\nDiscussion\n\nUse this anchor to create constraints with the guide’s top edge. You can only combine this anchor with other NSLayoutYAxisAnchor anchors. For more information, see NSLayoutAnchor.\n\nSee Also\nCreating constraints using layout anchors\nvar bottomAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the guide’s bottom edge.\n\nRequired\n\nvar heightAnchor: NSLayoutDimension\nA layout anchor representing the guide’s height.\n\nRequired"
  },
  {
    "title": "heightAnchor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilayoutsupport/1622236-heightanchor",
    "html": "Required\n\nDiscussion\n\nUse this anchor to create constraints with the guide’s height. You can only combine this anchor with other NSLayoutDimension anchors. For more information, see NSLayoutAnchor.\n\nSee Also\nCreating constraints using layout anchors\nvar bottomAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the guide’s bottom edge.\n\nRequired\n\nvar topAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the guide’s top edge.\n\nRequired"
  },
  {
    "title": "length | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilayoutsupport/1622253-length",
    "html": "Required\n\nDiscussion\n\nIn iOS 7 and later, a view controller’s view occupies the full height of the screen when there are no opaque UIKit bars (such as opaque navigation or tab bars). To keep your content within the area of a view that is not overlaid by translucent or transparent UIKit bars, employ the topLayoutGuide and bottomLayoutGuide properties in the UIViewController class and take advantage of Auto Layout. Query these properties within your implementation of the UIViewController method viewDidLayoutSubviews().\n\nThe guides work as follows:\n\nThe top layout guide indicates the distance, in points, between the top of a view controller’s view and the bottom of the bottommost bar that overlays the view\n\nThe bottom layout guide indicates the distance, in points, between the bottom of a view controller’s view and the top the bar (such as a tab bar) that overlays the view.\n\nIf you are not using Auto Layout, you can make use of the length property and perform layout calculations yourself. Refer to the code snippets in the descriptions for the topLayoutGuide and bottomLayoutGuide properties, which explain how to obtain the numbers you need."
  },
  {
    "title": "dynamicAnimator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidynamicbehavior/1618501-dynamicanimator",
    "html": "Discussion\n\nIf the dynamic behavior is not associated with a dynamic animator, the value of this property is nil.\n\nSee Also\nResponding to changes in the behavior tree\nfunc willMove(to: UIDynamicAnimator?)\nCalled when the dynamic behavior is added to, or removed from, a dynamic animator."
  },
  {
    "title": "removeChildBehavior(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidynamicbehavior/1618486-removechildbehavior",
    "html": "Parameters\nbehavior\n\nThe child dynamic behavior you want to remove.\n\nThe parent behavior ignores your use of this method if you:\n\nProvide a nil value\n\nProvide a behavior instance that is not a child of the parent behavior\n\nDiscussion\n\nThis method applies only to custom subclasses of the UIDynamicBehavior class. UIKit concrete dynamic behaviors (such as an instance of UICollisionBehavior) cannot have child behaviors.\n\nSee Also\nConfiguring a dynamic behavior\nvar action: (() -> Void)?\nThe block you want to execute during dynamic animation.\nfunc addChildBehavior(UIDynamicBehavior)\nAdds a dynamic behavior, as a child, to a custom dynamic behavior.\nvar childBehaviors: [UIDynamicBehavior]\nReturns the array of dynamic behaviors that are children of a custom dynamic behavior."
  },
  {
    "title": "childBehaviors | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidynamicbehavior/1618482-childbehaviors",
    "html": "Discussion\n\nOnly custom subclasses of the class can have child behaviors.\n\nSee Also\nConfiguring a dynamic behavior\nvar action: (() -> Void)?\nThe block you want to execute during dynamic animation.\nfunc addChildBehavior(UIDynamicBehavior)\nAdds a dynamic behavior, as a child, to a custom dynamic behavior.\nfunc removeChildBehavior(UIDynamicBehavior)\nRemoves a child dynamic behavior from a custom dynamic behavior."
  },
  {
    "title": "bottomAnchor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilayoutsupport/1622239-bottomanchor",
    "html": "Required\n\nDiscussion\n\nUse this anchor to create constraints with the guide’s bottom edge. You can only combine this anchor with other NSLayoutYAxisAnchor anchors. For more information, see NSLayoutAnchor.\n\nSee Also\nCreating constraints using layout anchors\nvar heightAnchor: NSLayoutDimension\nA layout anchor representing the guide’s height.\n\nRequired\n\nvar topAnchor: NSLayoutYAxisAnchor\nA layout anchor representing the guide’s top edge.\n\nRequired"
  },
  {
    "title": "removeAllBoundaries() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollisionbehavior/1624827-removeallboundaries",
    "html": "See Also\nConfiguring a collision behavior\nfunc addBoundary(withIdentifier: NSCopying, for: UIBezierPath)\nAdds a collision boundary, specified as a Bezier path, to the collision behavior.\nfunc addBoundary(withIdentifier: NSCopying, from: CGPoint, to: CGPoint)\nAdds a collision boundary, specified as a line segment, to the collision behavior.\nvar boundaryIdentifiers: [NSCopying]?\nThe set of boundary identifiers that you’ve added to the collision behavior.\nfunc boundary(withIdentifier: NSCopying) -> UIBezierPath?\nReturns a specified Bezier-path boundary.\nvar collisionMode: UICollisionBehavior.Mode\nThe type of edges that participate in collisions for the collision behavior.\nfunc removeBoundary(withIdentifier: NSCopying)\nRemoves a specific collision boundary from the collision behavior.\nfunc setTranslatesReferenceBoundsIntoBoundary(with: UIEdgeInsets)\nSpecifies a collision boundary based on the bounds of the animation reference system, with optional insets.\nvar translatesReferenceBoundsIntoBoundary: Bool\nSpecifies whether a boundary based on the reference system is active."
  },
  {
    "title": "strength | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifieldbehavior/1624997-strength",
    "html": "Discussion\n\nThe default value of this property is 1.0. The effect of this value is dependent on the type of field. In practice, the best approach for determining the strength of the field you want is to experiment with different values until you get the behavior you want.\n\nSee Also\nConfiguring the field attributes\nvar position: CGPoint\nThe position of the field in the reference coordinate system.\nvar region: UIRegion\nThe shape of the field.\nvar falloff: CGFloat\nThe rate of decay for the field strength.\nvar minimumRadius: CGFloat\nThe minimum distance at which to start calculating new values for the field.\nvar direction: CGVector\nThe direction of motion for a linear field.\nvar smoothness: CGFloat\nThe smoothness of the noise used to generate the field.\nvar animationSpeed: CGFloat\nThe rate at which the animation should proceed."
  },
  {
    "title": "UITouch.Phase.regionEntered | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitouch/phase/regionentered",
    "html": "Discussion\n\nThe UITouch.Phase.regionEntered, UITouch.Phase.regionMoved, and UITouch.Phase.regionExited phases don’t always align with the state property of a UIHoverGestureRecognizer. States of the hover gesture recognizer only apply within the context of the gesture’s view, whereas the touch states apply within the window."
  },
  {
    "title": "falloff | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifieldbehavior/1624988-falloff",
    "html": "Discussion\n\nThis property defines how quickly the field strength diminishes as the distance from the field’s center increases. Falloff is not applied until the distance between objects is greater than the value in the minimumRadius property.\n\nThe default value of the property is 0, which yields a uniform field that does not diminish over distance.\n\nSee Also\nConfiguring the field attributes\nvar position: CGPoint\nThe position of the field in the reference coordinate system.\nvar region: UIRegion\nThe shape of the field.\nvar strength: CGFloat\nThe strength of the field.\nvar minimumRadius: CGFloat\nThe minimum distance at which to start calculating new values for the field.\nvar direction: CGVector\nThe direction of motion for a linear field.\nvar smoothness: CGFloat\nThe smoothness of the noise used to generate the field.\nvar animationSpeed: CGFloat\nThe rate at which the animation should proceed."
  },
  {
    "title": "UITouch.Phase.regionMoved | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitouch/phase/regionmoved",
    "html": "Discussion\n\nThe UITouch.Phase.regionEntered, UITouch.Phase.regionMoved, and UITouch.Phase.regionExited phases don’t always align with the state property of a UIHoverGestureRecognizer. States of the hover gesture recognizer only apply within the context of the gesture’s view, whereas the touch states apply within the window."
  },
  {
    "title": "elasticity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidynamicitembehavior/1624387-elasticity",
    "html": "Discussion\n\nDefault value is 0.0. Valid range is from 0.0 for no bounce upon collision, to 1.0 for completely elastic collisions.\n\nSee Also\nConfiguring a dynamic item behavior\nfunc addAngularVelocity(CGFloat, for: UIDynamicItem)\nAdds a specified angular velocity to a dynamic item.\nfunc addLinearVelocity(CGPoint, for: UIDynamicItem)\nAdds a specified linear velocity to a dynamic item.\nvar allowsRotation: Bool\nSpecifies whether rotation is allowed for the behavior’s dynamic items.\nvar angularResistance: CGFloat\nThe angular resistance for the behavior’s dynamic items.\nfunc angularVelocity(for: UIDynamicItem) -> CGFloat\nReturns the angular velocity for a specified dynamic item.\nfunc linearVelocity(for: UIDynamicItem) -> CGPoint\nReturns the linear velocity for a specified dynamic item.\nvar density: CGFloat\nThe relative mass density of the behavior’s dynamic items.\nvar friction: CGFloat\nThe linear resistance for the behavior’s dynamic items when two slide against each other.\nvar resistance: CGFloat\nThe linear resistance for the behavior’s dynamic items, which reduces their linear velocity over time.\nvar charge: CGFloat\nThe charge associated with the item.\nvar isAnchored: Bool\nA Boolean value indicating whether the item is anchored to its current position."
  },
  {
    "title": "allowsSimultaneousRecognitionDuringLift | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidraginteraction/2919986-allowssimultaneousrecognitiondur",
    "html": "Discussion\n\nIf you set the allowsSimultaneousRecognitionDuringLift property to true, the interaction is canceled when another gesture is recognized. If you set this property to false (the default value), competing gesture recognizers fail.\n\nNote\n\nUILongPressGestureRecognizer instances are always delayed and happen simultaneously during the lift activity.\n\nSee Also\nManaging drag interactions\nvar delegate: UIDragInteractionDelegate?\nAn object that configures and controls a drag interaction.\nprotocol UIDragInteractionDelegate\nThe interface for configuring and controlling a drag interaction."
  },
  {
    "title": "canLoadObjects(ofClass:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidragdropsession/2903561-canloadobjects",
    "html": "Required Default implementation provided.\n\nParameters\nofClass\n\nA class conforming to the NSItemProviderReading protocol.\n\nReturn Value\n\ntrue if at least one drag item in the session can create an instance of the specified class; otherwise, false.\n\nDefault Implementations\nUIDragDropSession Implementations\nfunc canLoadObjects<T>(ofClass: T.Type) -> Bool\nSee Also\nChecking for drag items\nfunc hasItemsConforming(toTypeIdentifiers: [String]) -> Bool\nReturns a Boolean value that indicates whether at least one drag item in the session conforms to at least one of the specified UTIs.\n\nRequired\n\nvar items: [UIDragItem]\nAn array of drag items in the drag session or drop session.\n\nRequired"
  },
  {
    "title": "removeItem(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidynamicitembehavior/1624385-removeitem",
    "html": "Parameters\nitem\n\nThe dynamic item that you want to remove.\n\nDiscussion\n\nSee Also\nInitializing and managing a dynamic item behavior\nfunc addItem(UIDynamicItem)\nAdds a dynamic item to the dynamic item behavior’s item array.\ninit(items: [UIDynamicItem])\nInitializes a dynamic item behavior with an array of dynamic items.\nvar items: [UIDynamicItem]\nReturns the set of dynamic items you’ve added to the dynamic item behavior."
  },
  {
    "title": "allowsRotation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidynamicitembehavior/1624386-allowsrotation",
    "html": "Discussion\n\nDefault value is true. To disable rotation, set this property to false.\n\nSee Also\nConfiguring a dynamic item behavior\nfunc addAngularVelocity(CGFloat, for: UIDynamicItem)\nAdds a specified angular velocity to a dynamic item.\nfunc addLinearVelocity(CGPoint, for: UIDynamicItem)\nAdds a specified linear velocity to a dynamic item.\nvar angularResistance: CGFloat\nThe angular resistance for the behavior’s dynamic items.\nfunc angularVelocity(for: UIDynamicItem) -> CGFloat\nReturns the angular velocity for a specified dynamic item.\nfunc linearVelocity(for: UIDynamicItem) -> CGPoint\nReturns the linear velocity for a specified dynamic item.\nvar density: CGFloat\nThe relative mass density of the behavior’s dynamic items.\nvar elasticity: CGFloat\nThe amount of elasticity applied to collisions for the behavior’s dynamic items.\nvar friction: CGFloat\nThe linear resistance for the behavior’s dynamic items when two slide against each other.\nvar resistance: CGFloat\nThe linear resistance for the behavior’s dynamic items, which reduces their linear velocity over time.\nvar charge: CGFloat\nThe charge associated with the item.\nvar isAnchored: Bool\nA Boolean value indicating whether the item is anchored to its current position."
  },
  {
    "title": "Float range constants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiattachmentbehavior/float_range_constants",
    "html": "Topics\nConstants\nstatic let zero: UIFloatRange\nA range whose minimum and maximum are both 0.0.\nstatic let infinite: UIFloatRange\nA range whose range is minus infinity to infinity."
  },
  {
    "title": "UIFloatRange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifloatrange",
    "html": "Topics\nCreating a float range\ninit()\ninit(minimum: CGFloat, maximum: CGFloat)\nReturns a new float range structure from the given components.\nstatic let infinite: UIFloatRange\nA range whose range is minus infinity to infinity.\nstatic let zero: UIFloatRange\nA range whose minimum and maximum are both 0.0.\nEncoding and decoding\ninit(from: Decoder)\nCreates a new instance by decoding from the given decoder.\nfunc encode(to: Encoder)\nEncodes this value into the given encoder.\nGetting the range values\nvar maximum: CGFloat\nThe maximum range of motion for sliding and pin attachments.\nvar minimum: CGFloat\nThe minimum range of motion for sliding and pin attachments.\nTesting the range values\nvar isInfinite: Bool\nReturns a Boolean indicating whether the specified float range is infinitely large.\nfunc UIFloatRangeIsEqualToRange(UIFloatRange, UIFloatRange) -> Bool\nReturns a Boolean indicating whether two float ranges are equivalent.\nDeprecated\nstatic func == (UIFloatRange, UIFloatRange) -> Bool\nReturns a Boolean indicating whether two float ranges are equivalent.\nRelationships\nConforms To\nDecodable\nEncodable\nSendable"
  },
  {
    "title": "setTranslatesReferenceBoundsIntoBoundary(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollisionbehavior/1624818-settranslatesreferenceboundsinto",
    "html": "Parameters\ninsets\n\nInsets to apply to the reference system’s bounds when defining the collision boundary.\n\nDiscussion\n\nThe result of using this method depends on how you’ve initialized the dynamic animator (of class UIDynamicAnimator) that you’ve added the collision behavior to. See the overview in UIDynamicAnimator for a discussion of initialization options and modes for animators.\n\nHere is how the dynamic animator’s initialization impacts use of this method:\n\nFor a view-only dynamic animator, the reference bounds are those of the reference view\n\nFor a collection-view dynamic animator, the reference bounds are those of the collection view layout\n\nFor a dynamic-item dynamic animator, there are no reference bounds.\n\nFor a collision behavior added to a view-only or collection-view dynamic animator, activate a reference-system-based collision boundary by setting the translatesReferenceBoundsIntoBoundary property to true.\n\nSee Also\nConfiguring a collision behavior\nfunc addBoundary(withIdentifier: NSCopying, for: UIBezierPath)\nAdds a collision boundary, specified as a Bezier path, to the collision behavior.\nfunc addBoundary(withIdentifier: NSCopying, from: CGPoint, to: CGPoint)\nAdds a collision boundary, specified as a line segment, to the collision behavior.\nvar boundaryIdentifiers: [NSCopying]?\nThe set of boundary identifiers that you’ve added to the collision behavior.\nfunc boundary(withIdentifier: NSCopying) -> UIBezierPath?\nReturns a specified Bezier-path boundary.\nvar collisionMode: UICollisionBehavior.Mode\nThe type of edges that participate in collisions for the collision behavior.\nfunc removeAllBoundaries()\nRemoves all previously-specified collision boundaries from the collision behavior.\nfunc removeBoundary(withIdentifier: NSCopying)\nRemoves a specific collision boundary from the collision behavior.\nvar translatesReferenceBoundsIntoBoundary: Bool\nSpecifies whether a boundary based on the reference system is active."
  },
  {
    "title": "frictionTorque | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiattachmentbehavior/1621307-frictiontorque",
    "html": "Discussion\n\nFor attachments where each item rotates around an anchor point, use this property to specify the resistance to that rotation. The default value of this property is 0.0, which causes items to rotate freely with even very small impulses. Higher torque values increase the amount of force needed to cause rotation.\n\nThis property has no formal units, so you need to experiment with values to get the behavior that you want.\n\nSee Also\nConfiguring an attachment behavior\nvar anchorPoint: CGPoint\nThe anchor point for the attachment behavior, if any.\nvar attachedBehaviorType: UIAttachmentBehavior.AttachmentType\nThe type of the attachment behavior.\nvar damping: CGFloat\nThe amount of damping to apply to the attachment behavior.\nvar frequency: CGFloat\nThe frequency of oscillation for the attachment behavior.\nvar length: CGFloat\nThe distance, in points, between the two attachment points of the attachment behavior.\nvar attachmentRange: UIFloatRange\nThe range of motion for the attachment behavior."
  },
  {
    "title": "length | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiattachmentbehavior/1621304-length",
    "html": "Discussion\n\nUse this property to adjust the attachment length, if you want to, after creating an attachment. The system sets initial length automatically based on how you initialize the attachment.\n\nSee Also\nConfiguring an attachment behavior\nvar anchorPoint: CGPoint\nThe anchor point for the attachment behavior, if any.\nvar attachedBehaviorType: UIAttachmentBehavior.AttachmentType\nThe type of the attachment behavior.\nvar damping: CGFloat\nThe amount of damping to apply to the attachment behavior.\nvar frequency: CGFloat\nThe frequency of oscillation for the attachment behavior.\nvar frictionTorque: CGFloat\nThe amount of force needed to overcome rotational forces around an anchor point.\nvar attachmentRange: UIFloatRange\nThe range of motion for the attachment behavior."
  },
  {
    "title": "init(item:offsetFromCenter:attachedTo:offsetFromCenter:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiattachmentbehavior/1621298-init",
    "html": "Parameters\nitem1\n\nThe first of two dynamic items connected by the attachment behavior.\n\np1\n\nThe offset from the center of item1 at which to create the attachment. Specifying zero creates the attachment at the center of item1.\n\nitem2\n\nThe second of two dynamic items connected by the attachment behavior.\n\np2\n\nThe offset from the center of item2 at which to create the attachment. Specifying zero creates the attachment at the center of item2.\n\nReturn Value\n\nThe initialized attachment behavior, or nil if there was a problem initializing the object.\n\nDiscussion\n\nThe behavior created by this method acts like a solid rod connecting the two items at the specified offsets from their center points. Forces applied to one item push or pull the other item accordingly. The items are free to rotate around each other but always remain the same distance apart.\n\nThe attachment object returned by this method is of type UIAttachmentBehavior.AttachmentType.items.\n\nSee Also\nCreating and initializing attachment behavior objects\nclass func slidingAttachment(with: UIDynamicItem, attachmentAnchor: CGPoint, axisOfTranslation: CGVector) -> Self\nCreates and returns an attachment behavior where one item slides along the specified axis.\nclass func slidingAttachment(with: UIDynamicItem, attachedTo: UIDynamicItem, attachmentAnchor: CGPoint, axisOfTranslation: CGVector) -> Self\nCreates and returns an attachment behavior where two items are fixed to points that slide along the specified axis.\nclass func fixedAttachment(with: UIDynamicItem, attachedTo: UIDynamicItem, attachmentAnchor: CGPoint) -> Self\nCreates and returns an attachment behavior where the two items are fixed together through the specified anchor point.\nclass func limitAttachment(with: UIDynamicItem, offsetFromCenter: UIOffset, attachedTo: UIDynamicItem, offsetFromCenter: UIOffset) -> Self\nCreates and returns an attachment behavior object where two items are constrained by a maximum distance from one another.\nclass func pinAttachment(with: UIDynamicItem, attachedTo: UIDynamicItem, attachmentAnchor: CGPoint) -> Self\nCreates and returns an attachment behavior where the two items are pinned to, and move around, an anchor point\ninit(item: UIDynamicItem, attachedToAnchor: CGPoint)\nInitializes a behavior where the center of a dynamic item is attached to the specified anchor point.\ninit(item: UIDynamicItem, attachedTo: UIDynamicItem)\nInitializes a behavior where the centers of two dynamic items are attached to each other.\ninit(item: UIDynamicItem, offsetFromCenter: UIOffset, attachedToAnchor: CGPoint)\nInitializes a behavior where the specified point in a dynamic item is attached to an anchor point."
  },
  {
    "title": "init(item:offsetFromCenter:attachedToAnchor:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiattachmentbehavior/1621301-init",
    "html": "Parameters\nitem\n\nThe dynamic item to attach to the specified point.\n\np1\n\nThe offset from the center of item at which to create the attachment. Specifying zero creates the attachment at the center of item.\n\npoint\n\nThe anchor point for the item. Specify this point in the coordinate system of the dynamic animator’s reference view. For more information about coordinate systems, see UIDynamicAnimator.\n\nReturn Value\n\nThe initialized attachment behavior, or nil if there was a problem initializing the object.\n\nDiscussion\n\nThe behavior created by this method acts like a solid rod connecting the item to the specified anchor point. The item is free to rotate around the anchor point, but its distance to the anchor point remains fixed. If you specify a nonzero offset value, the item is connected at the specified point instead of the center of the item.\n\nThe attachment object returned by this method is of type UIAttachmentBehavior.AttachmentType.anchor.\n\nSee Also\nCreating and initializing attachment behavior objects\nclass func slidingAttachment(with: UIDynamicItem, attachmentAnchor: CGPoint, axisOfTranslation: CGVector) -> Self\nCreates and returns an attachment behavior where one item slides along the specified axis.\nclass func slidingAttachment(with: UIDynamicItem, attachedTo: UIDynamicItem, attachmentAnchor: CGPoint, axisOfTranslation: CGVector) -> Self\nCreates and returns an attachment behavior where two items are fixed to points that slide along the specified axis.\nclass func fixedAttachment(with: UIDynamicItem, attachedTo: UIDynamicItem, attachmentAnchor: CGPoint) -> Self\nCreates and returns an attachment behavior where the two items are fixed together through the specified anchor point.\nclass func limitAttachment(with: UIDynamicItem, offsetFromCenter: UIOffset, attachedTo: UIDynamicItem, offsetFromCenter: UIOffset) -> Self\nCreates and returns an attachment behavior object where two items are constrained by a maximum distance from one another.\nclass func pinAttachment(with: UIDynamicItem, attachedTo: UIDynamicItem, attachmentAnchor: CGPoint) -> Self\nCreates and returns an attachment behavior where the two items are pinned to, and move around, an anchor point\ninit(item: UIDynamicItem, attachedToAnchor: CGPoint)\nInitializes a behavior where the center of a dynamic item is attached to the specified anchor point.\ninit(item: UIDynamicItem, attachedTo: UIDynamicItem)\nInitializes a behavior where the centers of two dynamic items are attached to each other.\ninit(item: UIDynamicItem, offsetFromCenter: UIOffset, attachedTo: UIDynamicItem, offsetFromCenter: UIOffset)\nInitializes an attachment behavior that connects a specified point in one dynamic item to a specified point in another dynamic item."
  },
  {
    "title": "init(item:attachedTo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiattachmentbehavior/1621309-init",
    "html": "Parameters\nitem1\n\nThe first of two dynamic items connected by the attachment behavior.\n\nitem2\n\nThe second of two dynamic items connected by the attachment behavior.\n\nReturn Value\n\nThe initialized attachment behavior, or nil if there was a problem initializing the object\n\nDiscussion\n\nThe behavior created by this method acts like a solid rod connecting the two items at their center points. Forces applied to one item push or pull the other item accordingly. The items are free to rotate around each other but always remain the same distance apart.\n\nThe attachment object returned by this method is of type UIAttachmentBehavior.AttachmentType.items.\n\nSee Also\nCreating and initializing attachment behavior objects\nclass func slidingAttachment(with: UIDynamicItem, attachmentAnchor: CGPoint, axisOfTranslation: CGVector) -> Self\nCreates and returns an attachment behavior where one item slides along the specified axis.\nclass func slidingAttachment(with: UIDynamicItem, attachedTo: UIDynamicItem, attachmentAnchor: CGPoint, axisOfTranslation: CGVector) -> Self\nCreates and returns an attachment behavior where two items are fixed to points that slide along the specified axis.\nclass func fixedAttachment(with: UIDynamicItem, attachedTo: UIDynamicItem, attachmentAnchor: CGPoint) -> Self\nCreates and returns an attachment behavior where the two items are fixed together through the specified anchor point.\nclass func limitAttachment(with: UIDynamicItem, offsetFromCenter: UIOffset, attachedTo: UIDynamicItem, offsetFromCenter: UIOffset) -> Self\nCreates and returns an attachment behavior object where two items are constrained by a maximum distance from one another.\nclass func pinAttachment(with: UIDynamicItem, attachedTo: UIDynamicItem, attachmentAnchor: CGPoint) -> Self\nCreates and returns an attachment behavior where the two items are pinned to, and move around, an anchor point\ninit(item: UIDynamicItem, attachedToAnchor: CGPoint)\nInitializes a behavior where the center of a dynamic item is attached to the specified anchor point.\ninit(item: UIDynamicItem, offsetFromCenter: UIOffset, attachedToAnchor: CGPoint)\nInitializes a behavior where the specified point in a dynamic item is attached to an anchor point.\ninit(item: UIDynamicItem, offsetFromCenter: UIOffset, attachedTo: UIDynamicItem, offsetFromCenter: UIOffset)\nInitializes an attachment behavior that connects a specified point in one dynamic item to a specified point in another dynamic item."
  },
  {
    "title": "attachmentRange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiattachmentbehavior/1621294-attachmentrange",
    "html": "Discussion\n\nFor sliding attachments, this property defines the range of motion (measured in points) supported along the given axis of translation. The specified range must always contain the value 0, which represents the starting point of movement for items. Items slide along the axis between the minimum and maximum values you specify. Setting this property to zero prevents items from sliding at all along their axis of translation.\n\nFor pin attachments, this property defines the amount of rotation (measured in radians) supported in the counter-clockwise and clockwise directions. The specified range must contain the value 0, which represents the starting angle of each item. Items rotate around the anchor point between the minimum and maximum values you specify. Setting this property to zero prevents items from rotating at all.\n\nThe default value of this property is infinite.\n\nSee Also\nConfiguring an attachment behavior\nvar anchorPoint: CGPoint\nThe anchor point for the attachment behavior, if any.\nvar attachedBehaviorType: UIAttachmentBehavior.AttachmentType\nThe type of the attachment behavior.\nvar damping: CGFloat\nThe amount of damping to apply to the attachment behavior.\nvar frequency: CGFloat\nThe frequency of oscillation for the attachment behavior.\nvar length: CGFloat\nThe distance, in points, between the two attachment points of the attachment behavior.\nvar frictionTorque: CGFloat\nThe amount of force needed to overcome rotational forces around an anchor point."
  },
  {
    "title": "damping | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiattachmentbehavior/1621302-damping",
    "html": "See Also\nConfiguring an attachment behavior\nvar anchorPoint: CGPoint\nThe anchor point for the attachment behavior, if any.\nvar attachedBehaviorType: UIAttachmentBehavior.AttachmentType\nThe type of the attachment behavior.\nvar frequency: CGFloat\nThe frequency of oscillation for the attachment behavior.\nvar length: CGFloat\nThe distance, in points, between the two attachment points of the attachment behavior.\nvar frictionTorque: CGFloat\nThe amount of force needed to overcome rotational forces around an anchor point.\nvar attachmentRange: UIFloatRange\nThe range of motion for the attachment behavior."
  },
  {
    "title": "attachedBehaviorType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiattachmentbehavior/1621312-attachedbehaviortype",
    "html": "Discussion\n\nThe available types for attachment behaviors are described in the UIAttachmentBehavior.AttachmentType enum.\n\nSee Also\nConfiguring an attachment behavior\nvar anchorPoint: CGPoint\nThe anchor point for the attachment behavior, if any.\nvar damping: CGFloat\nThe amount of damping to apply to the attachment behavior.\nvar frequency: CGFloat\nThe frequency of oscillation for the attachment behavior.\nvar length: CGFloat\nThe distance, in points, between the two attachment points of the attachment behavior.\nvar frictionTorque: CGFloat\nThe amount of force needed to overcome rotational forces around an anchor point.\nvar attachmentRange: UIFloatRange\nThe range of motion for the attachment behavior."
  },
  {
    "title": "screens | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscreen/1617812-screens",
    "html": "Deprecated\n\nUse openSessions on the shared app object to find scenes for other screens.\n\nReturn Value\n\nAn array of UIScreen objects.\n\nDiscussion\n\nThe returned array includes the main screen plus any additional screens connected to the device. The main screen is always at index 0.\n\nNot all devices support external displays. iPhone and iPod touch devices with Retina displays and iPads support external displays. Older devices, such as the iPhone 3GS, don’t support external displays.\n\nSee Also\nDeprecated properties\nclass var main: UIScreen\nReturns the screen object representing the device’s screen.\nDeprecated\nvar applicationFrame: CGRect\nThe frame rectangle for the app window, measured in points.\nDeprecated\nvar focusedItem: UIFocusItem?\nThe item that is currently focused.\nDeprecated\nvar focusedView: UIView?\nThe view that is currently focused.\nDeprecated\nvar supportsFocus: Bool\nA Boolean value that indicates whether the screen supports focus-based inputs.\nDeprecated"
  },
  {
    "title": "items | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiattachmentbehavior/1621311-items",
    "html": "Discussion\n\nContains two elements when used for an attachment behavior of type UIAttachmentBehavior.AttachmentType.items; contains one element when used for an attachment behavior of type UIAttachmentBehavior.AttachmentType.anchor."
  },
  {
    "title": "focusedView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscreen/1617831-focusedview",
    "html": "Discussion\n\nWhen a view has focus, this property contains that view. When the focus is on an item that is not a view, the view in this property is the one that contains the item. This property is nil when nothing is currently focused on the screen.\n\nSee Also\nDeprecated properties\nclass var main: UIScreen\nReturns the screen object representing the device’s screen.\nDeprecated\nclass var screens: [UIScreen]\nReturns an array containing all of the screens attached to the device.\nDeprecated\nvar applicationFrame: CGRect\nThe frame rectangle for the app window, measured in points.\nDeprecated\nvar focusedItem: UIFocusItem?\nThe item that is currently focused.\nDeprecated\nvar supportsFocus: Bool\nA Boolean value that indicates whether the screen supports focus-based inputs.\nDeprecated"
  },
  {
    "title": "didDisconnectNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscreen/1617837-diddisconnectnotification",
    "html": "Deprecated\n\nUse the sceneDidDisconnect(_:) method on a scene delegate or didDisconnectNotification to recieve notification of disconnecting scenes from other screens.\n\nDiscussion\n\nThe object of the notification is the UIScreen object that represented the now-disconnected screen. There’s no userInfo dictionary.\n\nSee Also\nDeprecated notifications\nclass let didConnectNotification: NSNotification.Name\nA notification the system posts when a new screen connects to the device.\nDeprecated"
  },
  {
    "title": "pinAttachment(with:attachedTo:attachmentAnchor:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiattachmentbehavior/1621322-pinattachment",
    "html": "Parameters\nitem1\n\nThe first of two dynamic items connected by the attachment behavior.\n\nitem2\n\nThe second of two dynamic items connected by the attachment behavior.\n\npoint\n\nThe initial anchor point for each item. Specify this point in the coordinate system of the dynamic animator’s reference view. For more information about coordinate systems, see UIDynamicAnimator.\n\nReturn Value\n\nA new attachment object or nil if the object could not be created.\n\nDiscussion\n\nThe behavior created by this method acts like a solid rod connecting each item to the specified anchor point. Each item is free to rotate around the anchor point, inscribing a circle whose radius is the defined at creation time by the distance between point and the item’s center. When forces act on one or both items, the anchor point and other item also move accordingly. The anchor point of the attachment does not interact with collision boundaries.\n\nUse the frictionTorque property to control the rotational behavior of the items. When the value of that property is 0, items rotate freely in response to almost any impulse. Adding torque increases the amount of force that must be applied to an item before it rotates.\n\nUse the attachmentRange property to limit the amount of rotation for each item. This property lets you specify the minimum and maximum amount of rotation of the items from their starting positions.\n\nSee Also\nCreating and initializing attachment behavior objects\nclass func slidingAttachment(with: UIDynamicItem, attachmentAnchor: CGPoint, axisOfTranslation: CGVector) -> Self\nCreates and returns an attachment behavior where one item slides along the specified axis.\nclass func slidingAttachment(with: UIDynamicItem, attachedTo: UIDynamicItem, attachmentAnchor: CGPoint, axisOfTranslation: CGVector) -> Self\nCreates and returns an attachment behavior where two items are fixed to points that slide along the specified axis.\nclass func fixedAttachment(with: UIDynamicItem, attachedTo: UIDynamicItem, attachmentAnchor: CGPoint) -> Self\nCreates and returns an attachment behavior where the two items are fixed together through the specified anchor point.\nclass func limitAttachment(with: UIDynamicItem, offsetFromCenter: UIOffset, attachedTo: UIDynamicItem, offsetFromCenter: UIOffset) -> Self\nCreates and returns an attachment behavior object where two items are constrained by a maximum distance from one another.\ninit(item: UIDynamicItem, attachedToAnchor: CGPoint)\nInitializes a behavior where the center of a dynamic item is attached to the specified anchor point.\ninit(item: UIDynamicItem, attachedTo: UIDynamicItem)\nInitializes a behavior where the centers of two dynamic items are attached to each other.\ninit(item: UIDynamicItem, offsetFromCenter: UIOffset, attachedToAnchor: CGPoint)\nInitializes a behavior where the specified point in a dynamic item is attached to an anchor point.\ninit(item: UIDynamicItem, offsetFromCenter: UIOffset, attachedTo: UIDynamicItem, offsetFromCenter: UIOffset)\nInitializes an attachment behavior that connects a specified point in one dynamic item to a specified point in another dynamic item."
  },
  {
    "title": "limitAttachment(with:offsetFromCenter:attachedTo:offsetFromCenter:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiattachmentbehavior/1621320-limitattachment",
    "html": "Parameters\nitem1\n\nThe first of two dynamic items connected by the attachment behavior.\n\noffset1\n\nThe offset from the center of item1 that corresponds to the attachment point. Use an offset value to create rotational torque on the item. To pull the item from its center, specify zero.\n\nitem2\n\nThe second of two dynamic items connected by the attachment behavior.\n\noffset2\n\nThe offset from the center of item2 that corresponds to the attachment point. Use an offset value to create rotational torque on the item. To pull the item from its center, specify zero.\n\nReturn Value\n\nA new attachment object or nil if the object could not be created.\n\nDiscussion\n\nThe behavior created by this method is like connecting two items with a rope. The only constraint between the items is the maximum distance between them, which corresponds to the moment when the rope is taut. At other times, the objects move freely relative to one another.\n\nThe initial maximum distance between the items is set using the current position of the items. You can change the maximum distance by modifying the length property.\n\nSee Also\nCreating and initializing attachment behavior objects\nclass func slidingAttachment(with: UIDynamicItem, attachmentAnchor: CGPoint, axisOfTranslation: CGVector) -> Self\nCreates and returns an attachment behavior where one item slides along the specified axis.\nclass func slidingAttachment(with: UIDynamicItem, attachedTo: UIDynamicItem, attachmentAnchor: CGPoint, axisOfTranslation: CGVector) -> Self\nCreates and returns an attachment behavior where two items are fixed to points that slide along the specified axis.\nclass func fixedAttachment(with: UIDynamicItem, attachedTo: UIDynamicItem, attachmentAnchor: CGPoint) -> Self\nCreates and returns an attachment behavior where the two items are fixed together through the specified anchor point.\nclass func pinAttachment(with: UIDynamicItem, attachedTo: UIDynamicItem, attachmentAnchor: CGPoint) -> Self\nCreates and returns an attachment behavior where the two items are pinned to, and move around, an anchor point\ninit(item: UIDynamicItem, attachedToAnchor: CGPoint)\nInitializes a behavior where the center of a dynamic item is attached to the specified anchor point.\ninit(item: UIDynamicItem, attachedTo: UIDynamicItem)\nInitializes a behavior where the centers of two dynamic items are attached to each other.\ninit(item: UIDynamicItem, offsetFromCenter: UIOffset, attachedToAnchor: CGPoint)\nInitializes a behavior where the specified point in a dynamic item is attached to an anchor point.\ninit(item: UIDynamicItem, offsetFromCenter: UIOffset, attachedTo: UIDynamicItem, offsetFromCenter: UIOffset)\nInitializes an attachment behavior that connects a specified point in one dynamic item to a specified point in another dynamic item."
  },
  {
    "title": "init(item:attachedToAnchor:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiattachmentbehavior/1621297-init",
    "html": "Parameters\nitem\n\nThe dynamic item to attach to the specified point.\n\npoint\n\nThe anchor point for the item. Specify this point in the coordinate system of the dynamic animator’s reference view. For more information about coordinate systems, see UIDynamicAnimator.\n\nReturn Value\n\nThe initialized attachment behavior, or nil if there was a problem initializing the object.\n\nDiscussion\n\nThe behavior created by this method acts like a solid rod connecting the item to the specified anchor point. The item is free to rotate around the anchor point, but its distance to the anchor point remains fixed.\n\nThe attachment object returned by this method is of type UIAttachmentBehavior.AttachmentType.anchor.\n\nSee Also\nCreating and initializing attachment behavior objects\nclass func slidingAttachment(with: UIDynamicItem, attachmentAnchor: CGPoint, axisOfTranslation: CGVector) -> Self\nCreates and returns an attachment behavior where one item slides along the specified axis.\nclass func slidingAttachment(with: UIDynamicItem, attachedTo: UIDynamicItem, attachmentAnchor: CGPoint, axisOfTranslation: CGVector) -> Self\nCreates and returns an attachment behavior where two items are fixed to points that slide along the specified axis.\nclass func fixedAttachment(with: UIDynamicItem, attachedTo: UIDynamicItem, attachmentAnchor: CGPoint) -> Self\nCreates and returns an attachment behavior where the two items are fixed together through the specified anchor point.\nclass func limitAttachment(with: UIDynamicItem, offsetFromCenter: UIOffset, attachedTo: UIDynamicItem, offsetFromCenter: UIOffset) -> Self\nCreates and returns an attachment behavior object where two items are constrained by a maximum distance from one another.\nclass func pinAttachment(with: UIDynamicItem, attachedTo: UIDynamicItem, attachmentAnchor: CGPoint) -> Self\nCreates and returns an attachment behavior where the two items are pinned to, and move around, an anchor point\ninit(item: UIDynamicItem, attachedTo: UIDynamicItem)\nInitializes a behavior where the centers of two dynamic items are attached to each other.\ninit(item: UIDynamicItem, offsetFromCenter: UIOffset, attachedToAnchor: CGPoint)\nInitializes a behavior where the specified point in a dynamic item is attached to an anchor point.\ninit(item: UIDynamicItem, offsetFromCenter: UIOffset, attachedTo: UIDynamicItem, offsetFromCenter: UIOffset)\nInitializes an attachment behavior that connects a specified point in one dynamic item to a specified point in another dynamic item."
  },
  {
    "title": "slidingAttachment(with:attachedTo:attachmentAnchor:axisOfTranslation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiattachmentbehavior/1621318-slidingattachment",
    "html": "Parameters\nitem1\n\nThe first of two dynamic items connected by the attachment behavior.\n\nitem2\n\nThe second of two dynamic items connected by the attachment behavior.\n\npoint\n\nThe initial anchor point for both items. Specify this point in the coordinate system of the dynamic animator’s reference view. For more information about coordinate systems, see UIDynamicAnimator.\n\naxis\n\nThe axis of translation, along which the anchor points of the items slide.\n\nReturn Value\n\nA new attachment object or nil if the object could not be created.\n\nDiscussion\n\nFor this behavior, each item acts like it is at the end of a solid rod attached to its anchor point. Both items start with the same anchor point, but as animations progress, each item’s anchor point is allowed to slide along the specified axis of translation independently. So if one item moves, it pushes the translation axis and the other item with it. The items do not rotate relative to the axis of translation or to each other, but the proximity of the items to one another varies depending on the movement of each item’s anchor point along the translation axis.\n\nThe axis of translation is infinitely long initially, but you can change the length by assigning a new value to the attachmentRange property. When specifying a new attachment range, remember that the value in point represents the value 0 on the axis. Any new range you specify must include 0.\n\nSee Also\nCreating and initializing attachment behavior objects\nclass func slidingAttachment(with: UIDynamicItem, attachmentAnchor: CGPoint, axisOfTranslation: CGVector) -> Self\nCreates and returns an attachment behavior where one item slides along the specified axis.\nclass func fixedAttachment(with: UIDynamicItem, attachedTo: UIDynamicItem, attachmentAnchor: CGPoint) -> Self\nCreates and returns an attachment behavior where the two items are fixed together through the specified anchor point.\nclass func limitAttachment(with: UIDynamicItem, offsetFromCenter: UIOffset, attachedTo: UIDynamicItem, offsetFromCenter: UIOffset) -> Self\nCreates and returns an attachment behavior object where two items are constrained by a maximum distance from one another.\nclass func pinAttachment(with: UIDynamicItem, attachedTo: UIDynamicItem, attachmentAnchor: CGPoint) -> Self\nCreates and returns an attachment behavior where the two items are pinned to, and move around, an anchor point\ninit(item: UIDynamicItem, attachedToAnchor: CGPoint)\nInitializes a behavior where the center of a dynamic item is attached to the specified anchor point.\ninit(item: UIDynamicItem, attachedTo: UIDynamicItem)\nInitializes a behavior where the centers of two dynamic items are attached to each other.\ninit(item: UIDynamicItem, offsetFromCenter: UIOffset, attachedToAnchor: CGPoint)\nInitializes a behavior where the specified point in a dynamic item is attached to an anchor point.\ninit(item: UIDynamicItem, offsetFromCenter: UIOffset, attachedTo: UIDynamicItem, offsetFromCenter: UIOffset)\nInitializes an attachment behavior that connects a specified point in one dynamic item to a specified point in another dynamic item."
  },
  {
    "title": "boundary(withIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollisionbehavior/1624825-boundary",
    "html": "Parameters\nidentifier\n\nA boundary identifier that you’ve previously added to the collision behavior.\n\nReturn Value\n\nA Bezier-path boundary.\n\nSee Also\nConfiguring a collision behavior\nfunc addBoundary(withIdentifier: NSCopying, for: UIBezierPath)\nAdds a collision boundary, specified as a Bezier path, to the collision behavior.\nfunc addBoundary(withIdentifier: NSCopying, from: CGPoint, to: CGPoint)\nAdds a collision boundary, specified as a line segment, to the collision behavior.\nvar boundaryIdentifiers: [NSCopying]?\nThe set of boundary identifiers that you’ve added to the collision behavior.\nvar collisionMode: UICollisionBehavior.Mode\nThe type of edges that participate in collisions for the collision behavior.\nfunc removeAllBoundaries()\nRemoves all previously-specified collision boundaries from the collision behavior.\nfunc removeBoundary(withIdentifier: NSCopying)\nRemoves a specific collision boundary from the collision behavior.\nfunc setTranslatesReferenceBoundsIntoBoundary(with: UIEdgeInsets)\nSpecifies a collision boundary based on the bounds of the animation reference system, with optional insets.\nvar translatesReferenceBoundsIntoBoundary: Bool\nSpecifies whether a boundary based on the reference system is active."
  },
  {
    "title": "fixedAttachment(with:attachedTo:attachmentAnchor:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiattachmentbehavior/1621308-fixedattachment",
    "html": "Parameters\nitem1\n\nThe first of two dynamic items connected by the attachment behavior.\n\nitem2\n\nThe second of two dynamic items connected by the attachment behavior.\n\npoint\n\nThe anchor point for both items. Specify this point in the coordinate system of the dynamic animator’s reference view. For more information about coordinate systems, see UIDynamicAnimator.\n\nReturn Value\n\nA new attachment object or nil if the object could not be created.\n\nDiscussion\n\nThe behavior created by this method acts like a solid rod connecting each item to the specified anchor point. The position of the items relative to each other does not change. Forces acting on the items move them together as if they were a single unit.\n\nSee Also\nCreating and initializing attachment behavior objects\nclass func slidingAttachment(with: UIDynamicItem, attachmentAnchor: CGPoint, axisOfTranslation: CGVector) -> Self\nCreates and returns an attachment behavior where one item slides along the specified axis.\nclass func slidingAttachment(with: UIDynamicItem, attachedTo: UIDynamicItem, attachmentAnchor: CGPoint, axisOfTranslation: CGVector) -> Self\nCreates and returns an attachment behavior where two items are fixed to points that slide along the specified axis.\nclass func limitAttachment(with: UIDynamicItem, offsetFromCenter: UIOffset, attachedTo: UIDynamicItem, offsetFromCenter: UIOffset) -> Self\nCreates and returns an attachment behavior object where two items are constrained by a maximum distance from one another.\nclass func pinAttachment(with: UIDynamicItem, attachedTo: UIDynamicItem, attachmentAnchor: CGPoint) -> Self\nCreates and returns an attachment behavior where the two items are pinned to, and move around, an anchor point\ninit(item: UIDynamicItem, attachedToAnchor: CGPoint)\nInitializes a behavior where the center of a dynamic item is attached to the specified anchor point.\ninit(item: UIDynamicItem, attachedTo: UIDynamicItem)\nInitializes a behavior where the centers of two dynamic items are attached to each other.\ninit(item: UIDynamicItem, offsetFromCenter: UIOffset, attachedToAnchor: CGPoint)\nInitializes a behavior where the specified point in a dynamic item is attached to an anchor point.\ninit(item: UIDynamicItem, offsetFromCenter: UIOffset, attachedTo: UIDynamicItem, offsetFromCenter: UIOffset)\nInitializes an attachment behavior that connects a specified point in one dynamic item to a specified point in another dynamic item."
  },
  {
    "title": "constraint(greaterThanOrEqualTo:multiplier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutdimension/1500961-constraint",
    "html": "Parameters\nanchor\n\nA dimension anchor from a UIView, NSView, or UILayoutGuide object.\n\nm\n\nThe multiplier constant for the constraint.\n\nReturn Value\n\nAn NSLayoutConstraint object that defines the attribute represented by this layout anchor as greater than or equal to the attribute represented by the anchor parameter multiplied by the m constant.\n\nDiscussion\n\nThis method defines the relationship first attribute >= m * second attribute. Where first attribute is the layout attribute represented by the anchor receiving this method call, and second attribute is the layout attribute represented by the anchor parameter.\n\nThe constraints produced by the following two examples are identical.\n\n// Creating a constraint using NSLayoutConstraint\nNSLayoutConstraint(item: saveButton,\n                   attribute: .Width,\n                   relatedBy: .GreaterThanOrEqual,\n                   toItem: cancelButton,\n                   attribute: .Width,\n                   multiplier: 2.0,\n                   constant: 0.0).isActive = true\n \n// Creating the same constraint using constraintGreaterThanOrEqualToAnchor:multiplier:\nsaveButton.widthAnchor.constraintGreaterThanOrEqualToAnchor(cancelButton.widthAnchor, multiplier: 2.0).isActive = true\n\nSee Also\nBuilding constraints\nfunc constraint(equalTo: NSLayoutDimension, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as equal to the specified anchor multiplied by the constant.\nfunc constraint(equalTo: NSLayoutDimension, multiplier: CGFloat, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as equal to the specified size attribute multiplied by a constant plus an offset.\nfunc constraint(equalToConstant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines a constant size for the anchor’s size attribute.\nfunc constraint(greaterThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as greater than or equal to the specified anchor multiplied by the constant plus an offset.\nfunc constraint(greaterThanOrEqualToConstant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the minimum size for the anchor’s size attribute.\nfunc constraint(lessThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as less than or equal to the specified anchor multiplied by the constant.\nfunc constraint(lessThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as greater than or equal to the specified anchor multiplied by the constant plus an offset.\nfunc constraint(lessThanOrEqualToConstant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the maximum size for the anchor’s size attribute."
  },
  {
    "title": "constraint(equalTo:multiplier:constant:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutdimension/1500934-constraint",
    "html": "Parameters\nanchor\n\nA dimension anchor from a UIView, NSView, or UILayoutGuide object.\n\nm\n\nThe multiplier constant for the constraint.\n\nc\n\nThe offset constant for this relationship.\n\nReturn Value\n\nAn NSLayoutConstraint object that defines the attribute represented by this layout anchor as equal to the attribute represented by the anchor parameter multiplied by the m constant plus the constant c.\n\nDiscussion\n\nThis method defines the relationship first attribute = (m * second attribute) + c. Where first attribute is the layout attribute represented by the anchor receiving this method call, and second attribute is the layout attribute represented by the anchor parameter.\n\nThe constraints produced by the following two examples are identical.\n\n// Creating a constraint using NSLayoutConstraint\nNSLayoutConstraint(item: button,\n                   attribute: .Width,\n                   relatedBy: .Equal,\n                   toItem: button,\n                   attribute: .Height,\n                   multiplier: 2.0,\n                   constant: 40.0).isActive = true\n \n// Creating the same constraint using constraintEqualToAnchor:multiplier:constant:\nbutton.widthAnchor.constraintEqualToAnchor(button.heightAnchor, multiplier: 2.0, constant: 40.0).isActive = true\n\nSee Also\nBuilding constraints\nfunc constraint(equalTo: NSLayoutDimension, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as equal to the specified anchor multiplied by the constant.\nfunc constraint(equalToConstant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines a constant size for the anchor’s size attribute.\nfunc constraint(greaterThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as greater than or equal to the specified anchor multiplied by the constant.\nfunc constraint(greaterThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as greater than or equal to the specified anchor multiplied by the constant plus an offset.\nfunc constraint(greaterThanOrEqualToConstant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the minimum size for the anchor’s size attribute.\nfunc constraint(lessThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as less than or equal to the specified anchor multiplied by the constant.\nfunc constraint(lessThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as greater than or equal to the specified anchor multiplied by the constant plus an offset.\nfunc constraint(lessThanOrEqualToConstant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the maximum size for the anchor’s size attribute."
  },
  {
    "title": "UIStackView.Alignment | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistackview/alignment",
    "html": "Topics\nConstants\ncase fill\nA layout where the stack view resizes its arranged views so that they fill the available space perpendicular to the stack view’s axis.\ncase center\nA layout where the stack view aligns the center of its arranged views with its center along its axis.\ncase leading\nA layout for vertical stacks where the stack view aligns the leading edge of its arranged views along its leading edge.\ncase trailing\nA layout for vertical stacks where the stack view aligns the trailing edge of its arranged views along its trailing edge.\nstatic var top: UIStackView.Alignment\nA layout for horizontal stacks where the stack view aligns the top edge of its arranged views along its top edge.\nstatic var bottom: UIStackView.Alignment\nA layout for horizontal stacks where the stack view aligns the bottom edge of its arranged views along its bottom edge.\ncase firstBaseline\nA layout for horizontal stacks where the stack view aligns its arranged views based on their first baseline.\ncase lastBaseline\nA layout for horizontal stacks where the stack view aligns its arranged views based on their last baseline.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "UIStackView.Alignment.fill | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistackview/alignment/fill",
    "html": "Discussion\n\nThe following image shows an example of a horizontal stack view that uses the UIStackView.Alignment.fill alignment."
  },
  {
    "title": "UIStackView.Distribution | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistackview/distribution",
    "html": "Topics\nConstants\ncase fill\nA layout where the stack view resizes its arranged views so that they fill the available space along the stack view’s axis.\ncase fillEqually\nA layout where the stack view resizes its arranged views so that they fill the available space along the stack view’s axis.\ncase fillProportionally\nA layout where the stack view resizes its arranged views so that they fill the available space along the stack view’s axis.\ncase equalSpacing\nA layout where the stack view positions its arranged views so that they fill the available space along the stack view’s axis.\ncase equalCentering\nA layout that attempts to position the arranged views with equal center-to-center spacing along the stack view’s axis, while maintaining the spacing property’s distance between views.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "setCustomSpacing(_:after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistackview/2866023-setcustomspacing",
    "html": "See Also\nAdding space between items\nfunc customSpacing(after: UIView) -> CGFloat\nReturns the custom spacing after the specified view.\nclass let spacingUseDefault: CGFloat\nThe default spacing for subviews within a stack view.\nclass let spacingUseSystem: CGFloat\nThe system-defined spacing to the neighboring view."
  },
  {
    "title": "spacingUseDefault | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistackview/2866085-spacingusedefault",
    "html": "See Also\nAdding space between items\nfunc customSpacing(after: UIView) -> CGFloat\nReturns the custom spacing after the specified view.\nfunc setCustomSpacing(CGFloat, after: UIView)\nApplies custom spacing after the specified view.\nclass let spacingUseSystem: CGFloat\nThe system-defined spacing to the neighboring view."
  },
  {
    "title": "spacing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistackview/1616225-spacing",
    "html": "Discussion\n\nThis property defines a strict spacing between arranged views for the UIStackView.Distribution.fillProportionally distributions. It represents the minimum spacing for the UIStackView.Distribution.equalSpacing and UIStackView.Distribution.equalCentering distributions. Use negative values to allow overlap. The default value is 0.0.\n\nSee Also\nConfiguring the layout\nvar axis: NSLayoutConstraint.Axis\nThe axis along which the arranged views lay out.\nvar alignment: UIStackView.Alignment\nThe alignment of the arranged subviews perpendicular to the stack view’s axis.\nvar distribution: UIStackView.Distribution\nThe distribution of the arranged views along the stack view’s axis.\nvar isBaselineRelativeArrangement: Bool\nA Boolean value that determines whether the vertical spacing between views is measured from their baselines.\nvar isLayoutMarginsRelativeArrangement: Bool\nA Boolean value that determines whether the stack view lays out its arranged views relative to its layout margins."
  },
  {
    "title": "isBaselineRelativeArrangement | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistackview/1616224-isbaselinerelativearrangement",
    "html": "Discussion\n\nIf YES, the vertical space between views are measured from the last baseline of a text-based view, to the first baseline of the view below it. Top and bottom views are also positioned so that their closest baseline is the specified distance away from the stack view’s edge. This property is only used by vertical stack views. Use the alignment property to baseline align views in a horizontal stack view.\n\nThe default value is false.\n\nSee Also\nConfiguring the layout\nvar axis: NSLayoutConstraint.Axis\nThe axis along which the arranged views lay out.\nvar alignment: UIStackView.Alignment\nThe alignment of the arranged subviews perpendicular to the stack view’s axis.\nvar distribution: UIStackView.Distribution\nThe distribution of the arranged views along the stack view’s axis.\nvar spacing: CGFloat\nThe distance in points between the adjacent edges of the stack view’s arranged views.\nvar isLayoutMarginsRelativeArrangement: Bool\nA Boolean value that determines whether the stack view lays out its arranged views relative to its layout margins."
  },
  {
    "title": "customSpacing(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistackview/2865827-customspacing",
    "html": "See Also\nAdding space between items\nfunc setCustomSpacing(CGFloat, after: UIView)\nApplies custom spacing after the specified view.\nclass let spacingUseDefault: CGFloat\nThe default spacing for subviews within a stack view.\nclass let spacingUseSystem: CGFloat\nThe system-defined spacing to the neighboring view."
  },
  {
    "title": "UIStackView.Distribution.fillEqually | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistackview/distribution/fillequally",
    "html": "Discussion\n\nThe views resize so that they’re all the same size along the stack view’s axis.\n\nThe following image shows an example of a horizontal stack view that uses the UIStackView.Distribution.fillEqually distribution."
  },
  {
    "title": "distribution | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistackview/1616233-distribution",
    "html": "Discussion\n\nThis property determines how the stack view lays out its arranged views along its axis. The default value is UIStackView.Distribution.fill. For a list of possible values, see UIStackView.Distribution.\n\nSee Also\nConfiguring the layout\nvar axis: NSLayoutConstraint.Axis\nThe axis along which the arranged views lay out.\nvar alignment: UIStackView.Alignment\nThe alignment of the arranged subviews perpendicular to the stack view’s axis.\nvar spacing: CGFloat\nThe distance in points between the adjacent edges of the stack view’s arranged views.\nvar isBaselineRelativeArrangement: Bool\nA Boolean value that determines whether the vertical spacing between views is measured from their baselines.\nvar isLayoutMarginsRelativeArrangement: Bool\nA Boolean value that determines whether the stack view lays out its arranged views relative to its layout margins."
  },
  {
    "title": "spacingUseSystem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistackview/2866021-spacingusesystem",
    "html": "See Also\nAdding space between items\nfunc customSpacing(after: UIView) -> CGFloat\nReturns the custom spacing after the specified view.\nfunc setCustomSpacing(CGFloat, after: UIView)\nApplies custom spacing after the specified view.\nclass let spacingUseDefault: CGFloat\nThe default spacing for subviews within a stack view."
  },
  {
    "title": "isLayoutMarginsRelativeArrangement | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistackview/1616220-islayoutmarginsrelativearrangeme",
    "html": "Discussion\n\nIf true, the stack view will layout its arranged views relative to its layout margins. If false, it lays out the arranged views relative to its bounds. The default is false.\n\nSee Also\nConfiguring the layout\nvar axis: NSLayoutConstraint.Axis\nThe axis along which the arranged views lay out.\nvar alignment: UIStackView.Alignment\nThe alignment of the arranged subviews perpendicular to the stack view’s axis.\nvar distribution: UIStackView.Distribution\nThe distribution of the arranged views along the stack view’s axis.\nvar spacing: CGFloat\nThe distance in points between the adjacent edges of the stack view’s arranged views.\nvar isBaselineRelativeArrangement: Bool\nA Boolean value that determines whether the vertical spacing between views is measured from their baselines."
  },
  {
    "title": "constraint(equalTo:multiplier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nslayoutdimension/1500951-constraint",
    "html": "Parameters\nanchor\n\nA dimension anchor from a UIView, NSView, or UILayoutGuide object.\n\nm\n\nThe multiplier constant for the constraint.\n\nReturn Value\n\nAn NSLayoutConstraint object that defines the attribute represented by this layout anchor as equal to the attribute represented by the anchor parameter multiplied by the m constant.\n\nDiscussion\n\nThis method defines the relationship first attribute = m * second attribute. Where first attribute is the layout attribute represented by the anchor receiving this method call, and second attribute is the layout attribute represented by the anchor parameter.\n\nThe constraints produced by the following two examples are identical.\n\n// Creating a constraint using NSLayoutConstraint\nNSLayoutConstraint(item: saveButton,\n                   attribute: .Width,\n                   relatedBy: .Equal,\n                   toItem: cancelButton,\n                   attribute: .Width,\n                   multiplier: 2.0,\n                   constant: 0.0).isActive = true\n \n// Creating the same constraint using constraintEqualToAnchor:multiplier:\nsaveButton.widthAnchor.constraintEqualToAnchor(cancelButton.widthAnchor, multiplier: 2.0).isActive = true\n\nSee Also\nBuilding constraints\nfunc constraint(equalTo: NSLayoutDimension, multiplier: CGFloat, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as equal to the specified size attribute multiplied by a constant plus an offset.\nfunc constraint(equalToConstant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines a constant size for the anchor’s size attribute.\nfunc constraint(greaterThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as greater than or equal to the specified anchor multiplied by the constant.\nfunc constraint(greaterThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as greater than or equal to the specified anchor multiplied by the constant plus an offset.\nfunc constraint(greaterThanOrEqualToConstant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the minimum size for the anchor’s size attribute.\nfunc constraint(lessThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as less than or equal to the specified anchor multiplied by the constant.\nfunc constraint(lessThanOrEqualTo: NSLayoutDimension, multiplier: CGFloat, constant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the anchor’s size attribute as greater than or equal to the specified anchor multiplied by the constant plus an offset.\nfunc constraint(lessThanOrEqualToConstant: CGFloat) -> NSLayoutConstraint\nReturns a constraint that defines the maximum size for the anchor’s size attribute.\nRelated Documentation\nclass NSLayoutConstraint\nThe relationship between two user interface objects that must be satisfied by the constraint-based layout system.\nAuto Layout Guide\nclass NSLayoutAnchor\nA factory class for creating layout constraint objects using a fluent API."
  },
  {
    "title": "duration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewpropertyanimator/1648375-duration",
    "html": "Discussion\n\nYou set the duration value when creating the animator and cannot change it later. Animations added while the animator is in the inactive state are run for the specified duration. Animations added later run only for the remaining time, which is determined by the formula (1.0 - fractionComplete) * duration.\n\nSee Also\nAccessing the animation parameters\nvar delay: TimeInterval\nThe delay (in seconds) after which the animations begin.\nvar timingParameters: UITimingCurveProvider?\nThe information used to determine the timing curve for the animation.\nvar isInterruptible: Bool\nA Boolean value indicating whether the animator is interruptible and can be paused or stopped.\nvar isUserInteractionEnabled: Bool\nA Boolean value indicating whether views receive touch events while animations are running.\nvar isManualHitTestingEnabled: Bool\nA Boolean value indicating whether your app manages hit-testing while animations are in progress.\nvar scrubsLinearly: Bool\nA Boolean value indicating whether a paused animation scrubs linearly or uses its specified timing information.\nvar pausesOnCompletion: Bool\nA Boolean value that indicates whether a completed animation remains in the active state."
  },
  {
    "title": "addItem(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifieldbehavior/1624996-additem",
    "html": "Parameters\nitem\n\nThe dynamic item whose behavior you want to modify.\n\nDiscussion\n\nUse this method to apply a field to a dynamic item in your interface. This method adds the specified dynamic item to the field behavior’s list of dynamic items.\n\nSee Also\nManaging the associated dynamic items\nfunc removeItem(UIDynamicItem)\nRemoves the field behavior from the specified dynamic item.\nvar items: [UIDynamicItem]\nThe dynamic items associated with the current field behavior."
  },
  {
    "title": "smoothness | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifieldbehavior/1624998-smoothness",
    "html": "Discussion\n\nFor noise and turbulence fields, this value specifies the amount of noise or turbulence. The value of this property is in the range 0.0 to 1.0, where 0.0 represents the maximum noise or turbulence and 1.0 represents the least amount of noise or turbulence.\n\nSee Also\nConfiguring the field attributes\nvar position: CGPoint\nThe position of the field in the reference coordinate system.\nvar region: UIRegion\nThe shape of the field.\nvar strength: CGFloat\nThe strength of the field.\nvar falloff: CGFloat\nThe rate of decay for the field strength.\nvar minimumRadius: CGFloat\nThe minimum distance at which to start calculating new values for the field.\nvar direction: CGVector\nThe direction of motion for a linear field.\nvar animationSpeed: CGFloat\nThe rate at which the animation should proceed."
  },
  {
    "title": "region | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifieldbehavior/1625005-region",
    "html": "Discussion\n\nThis property defines the shape of the field centered on the point in the position property. A field does not exert any force on items that lie outside of the specified region.\n\nSee Also\nConfiguring the field attributes\nvar position: CGPoint\nThe position of the field in the reference coordinate system.\nvar strength: CGFloat\nThe strength of the field.\nvar falloff: CGFloat\nThe rate of decay for the field strength.\nvar minimumRadius: CGFloat\nThe minimum distance at which to start calculating new values for the field.\nvar direction: CGVector\nThe direction of motion for a linear field.\nvar smoothness: CGFloat\nThe smoothness of the noise used to generate the field.\nvar animationSpeed: CGFloat\nThe rate at which the animation should proceed."
  },
  {
    "title": "UITouch.Phase.regionExited | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitouch/phase/regionexited",
    "html": "Discussion\n\nThe UITouch.Phase.regionEntered, UITouch.Phase.regionMoved, and UITouch.Phase.regionExited phases don’t always align with the state property of a UIHoverGestureRecognizer. States of the hover gesture recognizer only apply within the context of the gesture’s view, whereas the touch states apply within the window."
  },
  {
    "title": "isAnchored | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidynamicitembehavior/1624394-isanchored",
    "html": "Discussion\n\nAn anchored item participates in collisions but is not affected by those collisions. Instead, the item behaves like a collision boundary. The default value of this property is false.\n\nSee Also\nConfiguring a dynamic item behavior\nfunc addAngularVelocity(CGFloat, for: UIDynamicItem)\nAdds a specified angular velocity to a dynamic item.\nfunc addLinearVelocity(CGPoint, for: UIDynamicItem)\nAdds a specified linear velocity to a dynamic item.\nvar allowsRotation: Bool\nSpecifies whether rotation is allowed for the behavior’s dynamic items.\nvar angularResistance: CGFloat\nThe angular resistance for the behavior’s dynamic items.\nfunc angularVelocity(for: UIDynamicItem) -> CGFloat\nReturns the angular velocity for a specified dynamic item.\nfunc linearVelocity(for: UIDynamicItem) -> CGPoint\nReturns the linear velocity for a specified dynamic item.\nvar density: CGFloat\nThe relative mass density of the behavior’s dynamic items.\nvar elasticity: CGFloat\nThe amount of elasticity applied to collisions for the behavior’s dynamic items.\nvar friction: CGFloat\nThe linear resistance for the behavior’s dynamic items when two slide against each other.\nvar resistance: CGFloat\nThe linear resistance for the behavior’s dynamic items, which reduces their linear velocity over time.\nvar charge: CGFloat\nThe charge associated with the item."
  },
  {
    "title": "isRestrictedToDraggingApplication | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidragdropsession/2890983-isrestrictedtodraggingapplicatio",
    "html": "Required\n\nDiscussion\n\nThe value for this property is set by the source app's drag interaction delegate method dragInteraction(_:sessionIsRestrictedToDraggingApplication:). If the value is true, the drag session is restricted to the app that started the drag operation.\n\nSee Also\nChecking for drag and drop session restrictions\nvar allowsMoveOperation: Bool\nA Boolean value that indicates whether the drag session permits moving drag items within the same app.\n\nRequired"
  },
  {
    "title": "allowsMoveOperation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidragdropsession/2891062-allowsmoveoperation",
    "html": "Required\n\nDiscussion\n\nA move operation can be applied only within the same app. Drag items shared with another app are always copied.\n\nThe allowsMoveOperation value is determined by the return value of the source app's drag interaction delegate's dragInteraction(_:sessionAllowsMoveOperation:) method. If allowsMoveOperation is true, the source app's drop interaction delegate's dropInteraction(_:sessionDidUpdate:) method can return a drop proposal for a UIDropOperation.move operation.\n\nSee Also\nChecking for drag and drop session restrictions\nvar isRestrictedToDraggingApplication: Bool\nA Boolean value that indicates whether the drag session is confined to the app that started the drag activity.\n\nRequired"
  },
  {
    "title": "linearVelocity(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidynamicitembehavior/1624388-linearvelocity",
    "html": "Parameters\nitem\n\nThe dynamic item whose linear velocity you want to get.\n\nReturn Value\n\nThe linear velocity of the specified dynamic item, in points per second.\n\nSee Also\nConfiguring a dynamic item behavior\nfunc addAngularVelocity(CGFloat, for: UIDynamicItem)\nAdds a specified angular velocity to a dynamic item.\nfunc addLinearVelocity(CGPoint, for: UIDynamicItem)\nAdds a specified linear velocity to a dynamic item.\nvar allowsRotation: Bool\nSpecifies whether rotation is allowed for the behavior’s dynamic items.\nvar angularResistance: CGFloat\nThe angular resistance for the behavior’s dynamic items.\nfunc angularVelocity(for: UIDynamicItem) -> CGFloat\nReturns the angular velocity for a specified dynamic item.\nvar density: CGFloat\nThe relative mass density of the behavior’s dynamic items.\nvar elasticity: CGFloat\nThe amount of elasticity applied to collisions for the behavior’s dynamic items.\nvar friction: CGFloat\nThe linear resistance for the behavior’s dynamic items when two slide against each other.\nvar resistance: CGFloat\nThe linear resistance for the behavior’s dynamic items, which reduces their linear velocity over time.\nvar charge: CGFloat\nThe charge associated with the item.\nvar isAnchored: Bool\nA Boolean value indicating whether the item is anchored to its current position."
  },
  {
    "title": "hasItemsConforming(toTypeIdentifiers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidragdropsession/2891006-hasitemsconforming",
    "html": "Required\n\nParameters\ntoTypeIdentifiers\n\nAn array of uniform type identifier (UTI) strings.\n\nReturn Value\n\ntrue if a drag item in the session conforms to any UTI in the specified array; otherwise, false.\n\nSee Also\nChecking for drag items\nfunc canLoadObjects(ofClass: NSItemProviderReading.Type) -> Bool\nReturns a Boolean value that indicates whether at least one drag item in the session can create an instance of the specified class.\n\nRequired Default implementation provided.\n\nvar items: [UIDragItem]\nAn array of drag items in the drag session or drop session.\n\nRequired"
  },
  {
    "title": "popoverPresentationControllerDidDismissPopover(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipopoverpresentationcontrollerdelegate/1622322-popoverpresentationcontrollerdid",
    "html": "Parameters\npopoverPresentationController\n\nThe popover presentation controller that is managing the popover interface.\n\nDiscussion\n\nThe popover presentation controller calls this method after dismissing the popover to let you know that it is no longer onscreen. The presentation controller calls this method only in response to user actions. It does not call this method if you dismiss the popover programmatically.\n\nUse this method to incorporate any changes from the popover’s content view controller back into your app.\n\nSee Also\nPresenting and dismissing the popover\nfunc prepareForPopoverPresentation(UIPopoverPresentationController)\nNotifies the delegate that the popover is about to be presented.\nfunc popoverPresentationControllerShouldDismissPopover(UIPopoverPresentationController) -> Bool\nAsks the delegate if the popover should be dismissed.\nDeprecated"
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidraginteraction/2891021-delegate",
    "html": "See Also\nManaging drag interactions\nvar allowsSimultaneousRecognitionDuringLift: Bool\nA Boolean value that determines whether the interaction allows recognition of other gestures during the lift activity.\nprotocol UIDragInteractionDelegate\nThe interface for configuring and controlling a drag interaction."
  },
  {
    "title": "isEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidraginteraction/2891015-isenabled",
    "html": "See Also\nEnabling the interactions\nclass var isEnabledByDefault: Bool\nA device-dependent Boolean value that indicates whether a newly-instantiated drag interaction is allowed to participate in a drag activity."
  },
  {
    "title": "items | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidragdropsession/2891030-items",
    "html": "Required\n\nDiscussion\n\nThe drag item's NSItemProvider object doesn't load the data for the item until the drop interaction happens. However, before the interaction happens, you can get the item's registered type identifiers and metadata. The data is available to you only in the drop interaction delegate's dropInteraction(_:performDrop:) method.\n\nSee Also\nChecking for drag items\nfunc canLoadObjects(ofClass: NSItemProviderReading.Type) -> Bool\nReturns a Boolean value that indicates whether at least one drag item in the session can create an instance of the specified class.\n\nRequired Default implementation provided.\n\nfunc hasItemsConforming(toTypeIdentifiers: [String]) -> Bool\nReturns a Boolean value that indicates whether at least one drag item in the session conforms to at least one of the specified UTIs.\n\nRequired"
  },
  {
    "title": "NSCollectionLayoutVisibleItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/nscollectionlayoutvisibleitem",
    "html": "Overview\n\nA visible item represents an item in a collection view that’s currently visible onscreen, such as a cell, supplementary view, or decoration. You access a specific section’s visible items in its visible item invalidation handler (NSCollectionLayoutSectionVisibleItemsInvalidationHandler), stored in the visibleItemsInvalidationHandler property. The handler is called before each layout cycle, any time an animation occurs in that section due to changes such as adding or removing items, scrolling the section, or rotating the device.\n\nTopics\nIdentifying the item\nvar name: String\nThe name of the item.\n\nRequired\n\nvar representedElementKind: String?\nA string that identifies the type of item.\n\nRequired\n\nvar representedElementCategory: UICollectionView.ElementCategory\nA category that identifies the item, such as decoration or supplementary view.\n\nRequired\n\nGetting the index path\nvar indexPath: IndexPath\nThe index path of the item.\n\nRequired\n\nConfiguring appearance\nvar alpha: CGFloat\nThe transparency of the item.\n\nRequired\n\nvar isHidden: Bool\nA Boolean value that determines whether the item is hidden.\n\nRequired\n\nConfiguring position\nvar frame: CGRect\nThe frame rectangle, which describes the item's location and size in its section's coordinate system.\n\nRequired\n\nvar bounds: CGRect\nThe bounds rectangle, which describes the item's location and size in its own coordinate system.\n\nRequired\n\nvar center: CGPoint\nThe center point of the item's frame rectangle.\n\nRequired\n\nvar transform: CGAffineTransform\nThe transform applied to the item, relative to the center of its bounds.\n\nRequired\n\nvar transform3D: CATransform3D\nThe 3D transform applied to the item.\n\nRequired\n\nSpecifying stacking order\nvar zIndex: Int\nThe vertical stacking order of the item in relation to other items in the section.\n\nRequired\n\nRelationships\nInherits From\nNSObjectProtocol\nUIDynamicItem\nSee Also\nLayout updates\ntypealias NSCollectionLayoutSectionVisibleItemsInvalidationHandler\nA closure called before each layout cycle to allow modification of items in a section immediately before they’re displayed.\nclass UICollectionViewUpdateItem\nAn object that describes a single change to make to an item in a collection view.\nclass UICollectionViewFocusUpdateContext\nA context object that stores information specific to a focus update in a collection view.\nclass UICollectionViewLayoutInvalidationContext\nA context object that declares which parts of your layout need to be updated when the layout is invalidated."
  },
  {
    "title": "addAngularVelocity(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidynamicitembehavior/1624384-addangularvelocity",
    "html": "Parameters\nvelocity\n\nThe angular velocity, expressed in radians per second, that you want to add to the specified dynamic item. Default value is 0. Applying a negative value reduces the angular velocity by the specified amount.\n\nitem\n\nThe dynamic item whose angular velocity you want to increase (or decrease).\n\nSee Also\nConfiguring a dynamic item behavior\nfunc addLinearVelocity(CGPoint, for: UIDynamicItem)\nAdds a specified linear velocity to a dynamic item.\nvar allowsRotation: Bool\nSpecifies whether rotation is allowed for the behavior’s dynamic items.\nvar angularResistance: CGFloat\nThe angular resistance for the behavior’s dynamic items.\nfunc angularVelocity(for: UIDynamicItem) -> CGFloat\nReturns the angular velocity for a specified dynamic item.\nfunc linearVelocity(for: UIDynamicItem) -> CGPoint\nReturns the linear velocity for a specified dynamic item.\nvar density: CGFloat\nThe relative mass density of the behavior’s dynamic items.\nvar elasticity: CGFloat\nThe amount of elasticity applied to collisions for the behavior’s dynamic items.\nvar friction: CGFloat\nThe linear resistance for the behavior’s dynamic items when two slide against each other.\nvar resistance: CGFloat\nThe linear resistance for the behavior’s dynamic items, which reduces their linear velocity over time.\nvar charge: CGFloat\nThe charge associated with the item.\nvar isAnchored: Bool\nA Boolean value indicating whether the item is anchored to its current position."
  },
  {
    "title": "translatesReferenceBoundsIntoBoundary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollisionbehavior/1624826-translatesreferenceboundsintobou",
    "html": "Discussion\n\nTo specify a collision boundary based on the reference system, use the setTranslatesReferenceBoundsIntoBoundary(with:) method.\n\nSee Also\nConfiguring a collision behavior\nfunc addBoundary(withIdentifier: NSCopying, for: UIBezierPath)\nAdds a collision boundary, specified as a Bezier path, to the collision behavior.\nfunc addBoundary(withIdentifier: NSCopying, from: CGPoint, to: CGPoint)\nAdds a collision boundary, specified as a line segment, to the collision behavior.\nvar boundaryIdentifiers: [NSCopying]?\nThe set of boundary identifiers that you’ve added to the collision behavior.\nfunc boundary(withIdentifier: NSCopying) -> UIBezierPath?\nReturns a specified Bezier-path boundary.\nvar collisionMode: UICollisionBehavior.Mode\nThe type of edges that participate in collisions for the collision behavior.\nfunc removeAllBoundaries()\nRemoves all previously-specified collision boundaries from the collision behavior.\nfunc removeBoundary(withIdentifier: NSCopying)\nRemoves a specific collision boundary from the collision behavior.\nfunc setTranslatesReferenceBoundsIntoBoundary(with: UIEdgeInsets)\nSpecifies a collision boundary based on the bounds of the animation reference system, with optional insets."
  },
  {
    "title": "removeBoundary(withIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollisionbehavior/1624823-removeboundary",
    "html": "Parameters\nidentifier\n\nThe identifier of the boundary you want to remove.\n\nSee Also\nConfiguring a collision behavior\nfunc addBoundary(withIdentifier: NSCopying, for: UIBezierPath)\nAdds a collision boundary, specified as a Bezier path, to the collision behavior.\nfunc addBoundary(withIdentifier: NSCopying, from: CGPoint, to: CGPoint)\nAdds a collision boundary, specified as a line segment, to the collision behavior.\nvar boundaryIdentifiers: [NSCopying]?\nThe set of boundary identifiers that you’ve added to the collision behavior.\nfunc boundary(withIdentifier: NSCopying) -> UIBezierPath?\nReturns a specified Bezier-path boundary.\nvar collisionMode: UICollisionBehavior.Mode\nThe type of edges that participate in collisions for the collision behavior.\nfunc removeAllBoundaries()\nRemoves all previously-specified collision boundaries from the collision behavior.\nfunc setTranslatesReferenceBoundsIntoBoundary(with: UIEdgeInsets)\nSpecifies a collision boundary based on the bounds of the animation reference system, with optional insets.\nvar translatesReferenceBoundsIntoBoundary: Bool\nSpecifies whether a boundary based on the reference system is active."
  },
  {
    "title": "init(items:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidynamicitembehavior/1624397-init",
    "html": "Parameters\nitems\n\nThe dynamic items that you want to be subject to the dynamic item behavior.\n\nReturn Value\n\nThe initialized dynamic item behavior, or nil if there was a problem initializing the object.\n\nDiscussion\n\nSee Also\nInitializing and managing a dynamic item behavior\nfunc addItem(UIDynamicItem)\nAdds a dynamic item to the dynamic item behavior’s item array.\nfunc removeItem(UIDynamicItem)\nRemoves a specific dynamic item from the dynamic item behavior.\nvar items: [UIDynamicItem]\nReturns the set of dynamic items you’ve added to the dynamic item behavior."
  },
  {
    "title": "UIDynamicItemCollisionBoundsType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidynamicitemcollisionboundstype",
    "html": "Topics\nConstants\ncase rectangle\nRectangular collision bounds.\ncase ellipse\nElliptical collision bounds. The shape of the ellipse is determined by the width and height of the item’s bounds property.\ncase path\nPath-based collision bounds. For this type, the shape is a UIBezierPath object stored in the item’s collisionBoundingPath property. See the description of that property for information about how to configure the path itself.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "items | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidynamicitembehavior/1624400-items",
    "html": "Discussion\n\nSee Also\nInitializing and managing a dynamic item behavior\nfunc addItem(UIDynamicItem)\nAdds a dynamic item to the dynamic item behavior’s item array.\ninit(items: [UIDynamicItem])\nInitializes a dynamic item behavior with an array of dynamic items.\nfunc removeItem(UIDynamicItem)\nRemoves a specific dynamic item from the dynamic item behavior."
  },
  {
    "title": "transform | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidynamicitem/1618483-transform",
    "html": "Required\n\nDiscussion\n\nUIKit Dynamics makes use only of the rotation value in this property.\n\nThe dynamic animator (that the item is associated with) calls this method when it has computed a new rotation value for the item.\n\nSee Also\nParticipating in dynamic animation\nvar bounds: CGRect\nCalled when a dynamic animator needs the bounds of the dynamic item.\n\nRequired\n\nvar center: CGPoint\nThe center point of the dynamic item.\n\nRequired\n\nvar collisionBoundsType: UIDynamicItemCollisionBoundsType\nThe type of collision bounds associated with the item.\nvar collisionBoundingPath: UIBezierPath\nThe path-based shape to use for the collision bounds."
  },
  {
    "title": "bounds | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidynamicitem/1618495-bounds",
    "html": "Required\n\nSee Also\nParticipating in dynamic animation\nvar center: CGPoint\nThe center point of the dynamic item.\n\nRequired\n\nvar transform: CGAffineTransform\nThe rotation of the dynamic item.\n\nRequired\n\nvar collisionBoundsType: UIDynamicItemCollisionBoundsType\nThe type of collision bounds associated with the item.\nvar collisionBoundingPath: UIBezierPath\nThe path-based shape to use for the collision bounds."
  },
  {
    "title": "collisionBoundingPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidynamicitem/1618494-collisionboundingpath",
    "html": "Discussion\n\nWhen the collisionBoundsType property is UIDynamicItemCollisionBoundsType.path, the object in this property is used as the collision bounds. If your dynamic item implements the collisionBoundsType property, you must also implement this property.\n\nThe path object you create must represent a convex polygon with counter-clockwise or clockwise winding, and the path must not intersect itself. The (0, 0) point of the path must be located at the center point of the corresponding dynamic item. If the center point does not match the path’s origin, collision behaviors may not work as expected.\n\nSee Also\nParticipating in dynamic animation\nvar bounds: CGRect\nCalled when a dynamic animator needs the bounds of the dynamic item.\n\nRequired\n\nvar center: CGPoint\nThe center point of the dynamic item.\n\nRequired\n\nvar transform: CGAffineTransform\nThe rotation of the dynamic item.\n\nRequired\n\nvar collisionBoundsType: UIDynamicItemCollisionBoundsType\nThe type of collision bounds associated with the item."
  },
  {
    "title": "UIAttachmentBehavior.AttachmentType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiattachmentbehavior/attachmenttype",
    "html": "Topics\nConstants\ncase items\nDesignates an attachment behavior that connects a dynamic item to another dynamic item.\ncase anchor\nDesignates an attachment behavior that connects a dynamic item to an anchor point.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "addItem(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidynamicitembehavior/1624393-additem",
    "html": "Parameters\nitem\n\nThe dynamic item to add to the item array.\n\nDiscussion\n\nYou can add a dynamic item to one or more dynamic item behaviors. For example, you could add a dynamic item to one dynamic item behavior to configure the item’s elasticity and to a second dynamic item behavior to configure its density. This is especially useful when you are defining custom, combined behaviors for your dynamic items.\n\nSee Also\nInitializing and managing a dynamic item behavior\ninit(items: [UIDynamicItem])\nInitializes a dynamic item behavior with an array of dynamic items.\nfunc removeItem(UIDynamicItem)\nRemoves a specific dynamic item from the dynamic item behavior.\nvar items: [UIDynamicItem]\nReturns the set of dynamic items you’ve added to the dynamic item behavior."
  },
  {
    "title": "center | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidynamicitem/1618491-center",
    "html": "Required\n\nDiscussion\n\nThe dynamic animator (that the item is associated with) calls this method when it has computed a new center point for the item.\n\nSee Also\nParticipating in dynamic animation\nvar bounds: CGRect\nCalled when a dynamic animator needs the bounds of the dynamic item.\n\nRequired\n\nvar transform: CGAffineTransform\nThe rotation of the dynamic item.\n\nRequired\n\nvar collisionBoundsType: UIDynamicItemCollisionBoundsType\nThe type of collision bounds associated with the item.\nvar collisionBoundingPath: UIBezierPath\nThe path-based shape to use for the collision bounds."
  },
  {
    "title": "collisionBoundsType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidynamicitem/1618493-collisionboundstype",
    "html": "Discussion\n\nThe dynamics system uses this property to determine how to evaluate collisions with the dynamic item. Rectangular and elliptical bounds are defined by the bounds property of the item. For custom collision bounds, the shape of the bounds are in the collisionBoundingPath property.\n\nIf you implement this property in your dynamic item and set its value to UIDynamicItemCollisionBoundsType.path, you must also implement the collisionBoundingPath property and provide a valid path. Failure to do so is a programmer error.\n\nThe default value of this property is UIDynamicItemCollisionBoundsType.rectangle.\n\nSee Also\nParticipating in dynamic animation\nvar bounds: CGRect\nCalled when a dynamic animator needs the bounds of the dynamic item.\n\nRequired\n\nvar center: CGPoint\nThe center point of the dynamic item.\n\nRequired\n\nvar transform: CGAffineTransform\nThe rotation of the dynamic item.\n\nRequired\n\nvar collisionBoundingPath: UIBezierPath\nThe path-based shape to use for the collision bounds."
  },
  {
    "title": "anchorPoint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiattachmentbehavior/1621315-anchorpoint",
    "html": "Discussion\n\nThe anchor point is relative to the coordinate system for the behavior’s associated dynamic animator. For attachment types without an anchor point, the value in this property is CGPointZero. For more information about the coordinate system of the reference view, see UIDynamicAnimator.\n\nSee Also\nConfiguring an attachment behavior\nvar attachedBehaviorType: UIAttachmentBehavior.AttachmentType\nThe type of the attachment behavior.\nvar damping: CGFloat\nThe amount of damping to apply to the attachment behavior.\nvar frequency: CGFloat\nThe frequency of oscillation for the attachment behavior.\nvar length: CGFloat\nThe distance, in points, between the two attachment points of the attachment behavior.\nvar frictionTorque: CGFloat\nThe amount of force needed to overcome rotational forces around an anchor point.\nvar attachmentRange: UIFloatRange\nThe range of motion for the attachment behavior."
  },
  {
    "title": "frequency | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiattachmentbehavior/1621321-frequency",
    "html": "See Also\nConfiguring an attachment behavior\nvar anchorPoint: CGPoint\nThe anchor point for the attachment behavior, if any.\nvar attachedBehaviorType: UIAttachmentBehavior.AttachmentType\nThe type of the attachment behavior.\nvar damping: CGFloat\nThe amount of damping to apply to the attachment behavior.\nvar length: CGFloat\nThe distance, in points, between the two attachment points of the attachment behavior.\nvar frictionTorque: CGFloat\nThe amount of force needed to overcome rotational forces around an anchor point.\nvar attachmentRange: UIFloatRange\nThe range of motion for the attachment behavior."
  },
  {
    "title": "applicationFrame | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscreen/1617835-applicationframe",
    "html": "Discussion\n\nThis property contains the bounds rectangle used by the app window, which may be different than the screen bounds themselves. This rectangle is specified in the current coordinate space, which takes into account any interface rotations in effect for the device. Therefore, the value of this property may change when the device rotates between portrait and landscape orientations.\n\nSee Also\nDeprecated properties\nclass var main: UIScreen\nReturns the screen object representing the device’s screen.\nDeprecated\nclass var screens: [UIScreen]\nReturns an array containing all of the screens attached to the device.\nDeprecated\nvar focusedItem: UIFocusItem?\nThe item that is currently focused.\nDeprecated\nvar focusedView: UIView?\nThe view that is currently focused.\nDeprecated\nvar supportsFocus: Bool\nA Boolean value that indicates whether the screen supports focus-based inputs.\nDeprecated"
  },
  {
    "title": "didConnectNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscreen/1617826-didconnectnotification",
    "html": "Deprecated\n\nUse the scene(_:willConnectTo:options:) method on a scene delegate or willConnectNotification to recieve notification of connecting scenes from other screens.\n\nDiscussion\n\nConnection notifications aren’t sent for screens that are already present when the app launches. The app can instead use the screens method to get the current set of screens at launch time.\n\nThe object of the notification is the UIScreen object representing the new screen. There’s no userInfo dictionary.\n\nSee Also\nDeprecated notifications\nclass let didDisconnectNotification: NSNotification.Name\nA notification the system posts when a screen disconnects from the device.\nDeprecated"
  },
  {
    "title": "gravityDirection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uigravitybehavior/1620423-gravitydirection",
    "html": "Discussion\n\nThe gravity vector is expressed as an x, y pair that represents the relative motion along the x and y axes of the reference view. A value of 1.0 corresponds to an acceleration of 1000 points / second², which is referred to as UIKit gravity and approximates the Earth’s own gravitational force. A value of -1.0 represents the same amount of force, but in the opposite direction of the corresponding axis.\n\nThe default value of this property is the vector (0.0, 1.0), which represents a downward force in the reference view. Changing the angle or magnitude values also changes the value of this property.\n\nSee Also\nConfiguring a gravity behavior\nvar angle: CGFloat\nThe direction of the gravity vector, expressed in radians in the reference coordinate system.\nvar magnitude: CGFloat\nThe magnitude of the gravity vector.\nfunc setAngle(CGFloat, magnitude: CGFloat)\nSets the angle and magnitude of the gravity vector for the behavior."
  },
  {
    "title": "containerView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollercontexttransitioning/1622045-containerview",
    "html": "Required\n\nReturn Value\n\nThe view that contains both views involved in the transition.\n\nDiscussion\n\nThe container view acts as the superview of all other views (including those of the presenting and presented view controllers) during the animation sequence. UIKit sets this view for you and automatically adds the view of the presenting view controller to it. The animator object is responsible for adding the view of the presented view controller, and the animator object or presentation controller must use this view as the container for all other views involved in the transition.\n\nSee Also\nAccessing the transition objects\nfunc viewController(forKey: UITransitionContextViewControllerKey) -> UIViewController?\nReturns a view controller involved in the transition.\n\nRequired\n\nfunc view(forKey: UITransitionContextViewKey) -> UIView?\nReturns the specified view involved in the transition.\n\nRequired"
  },
  {
    "title": "UICollectionViewLayoutAttributes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewlayoutattributes",
    "html": "Overview\n\nLayout objects create instances of this class when asked to do so by the collection view. In turn, the collection view uses the layout information to position cells and supplementary views inside its bounds.\n\nSubclassing notes\n\nIn most cases, you use this class as-is. If you want to supplement the base layout attributes with custom layout attributes, you can subclass and define whatever properties you want to store the additional layout data. Because layout attribute objects may be copied by the collection view, make sure your subclass conforms to the NSCopying protocol by implementing any methods appropriate for copying your custom attributes to new instances of your subclass. In addition to defining your subclass, your UICollectionReusableView objects need to implement the apply(_:) method so that they can apply any custom attributes at layout time.\n\nIf you subclass and implement any custom layout attributes, you must also override the inherited isEqual: method to compare the values of your properties. In iOS 7 and later, the collection view doesn’t apply layout attributes if those attributes have not changed. It determines whether the attributes have changed by comparing the old and new attribute objects using the isEqual: method. Because the default implementation of this method checks only the existing properties of this class, you must implement your own version of the method to compare any additional properties. If your custom properties are all equal, call super and return the resulting value at the end of your implementation.\n\nTopics\nCreating layout attributes\ninit(forCellWith: IndexPath)\nCreates and returns a layout attributes object that represents a cell with the specified index path.\ninit(forSupplementaryViewOfKind: String, with: IndexPath)\nCreates and returns a layout attributes object that represents the specified supplementary view.\ninit(forDecorationViewOfKind: String, with: IndexPath)\nCreates and returns a layout attributes object that represents the specified decoration view.\nIdentifying the referenced item\nvar indexPath: IndexPath\nThe index path of the item in the collection view.\nvar representedElementKind: String?\nThe layout-specific identifier for the target view.\nvar representedElementCategory: UICollectionView.ElementCategory\nThe type of the item.\nenum UICollectionView.ElementCategory\nConstants specifying the type of view.\nAccessing the layout attributes\nvar frame: CGRect\nThe frame rectangle of the item.\nvar bounds: CGRect\nThe bounds of the item.\nvar center: CGPoint\nThe center point of the item.\nvar size: CGSize\nThe size of the item.\nvar transform3D: CATransform3D\nThe 3D transform of the item.\nvar transform: CGAffineTransform\nThe affine transform of the item.\nvar alpha: CGFloat\nThe transparency of the item.\nvar zIndex: Int\nSpecifies the item’s position on the z axis.\nvar isHidden: Bool\nDetermines whether the item is currently displayed.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nUIDynamicItem\nSee Also\nManual layouts\nCustomizing Collection View Layouts\nCustomize a view layout by changing the size of cells in the flow or implementing a mosaic style.\nclass UICollectionViewLayout\nAn abstract base class for generating layout information for a collection view.\nclass UICollectionViewFlowLayout\nA layout object that organizes items into a grid with optional header and footer views for each section.\nclass UICollectionViewTransitionLayout\nA special type of layout object that lets you implement behaviors when changing from one layout to another in your collection view.\nclass UICollectionViewFlowLayoutInvalidationContext\nA set of properties for determining whether to recompute the size of items or their position in the layout."
  },
  {
    "title": "setAngle(_:magnitude:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipushbehavior/1623335-setangle",
    "html": "Parameters\nangle\n\nThe angle, in radians, of the force vector for the push behavior.\n\nThe default angle is 0 radians, using standard UIKit geometry.\n\nmagnitude\n\nThe magnitude of the force vector for the push behavior.\n\nThe default magnitude is nil, equivalent to no force. A force vector with a magnitude of 1.0, applied to a 100 point x 100 point view whose density value is 1.0, results in view acceleration of 100 points / second².\n\nSetting the magnitude parameter to a negative value reverses the direction of the force.\n\nDiscussion\n\nWhether you express a push behavior’s force direction in terms of radian angle or with x, y components, the alternate, equivalent values update automatically.\n\nSee Also\nConfiguring a push behavior\nvar angle: CGFloat\nThe angle, in radians, of the force vector for the behavior.\nvar magnitude: CGFloat\nThe magnitude of the force vector for the push behavior.\nvar mode: UIPushBehavior.Mode\nReturns the force mode for the push behavior.\nfunc setTargetOffsetFromCenter(UIOffset, for: UIDynamicItem)\nSets the offset, from the center of a dynamic item, at which to apply the push behavior’s force vector.\nfunc targetOffsetFromCenter(for: UIDynamicItem) -> UIOffset\nReturns the offset, from the center of a dynamic item, at which the push behavior’s force vector is applied.\nvar pushDirection: CGVector\nThe direction of the force vector for the behavior, expressed as x and y components and using standard UIKit geometry."
  },
  {
    "title": "init(radius:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiregion/1621889-init",
    "html": "Parameters\nradius\n\nThe radius of the circular area, specified in points.\n\nReturn Value\n\nA circular region with the specified radius.\n\nDiscussion\n\nThe center of the circle is the origin of the region’s coordinate system.\n\nSee Also\nCreating and initializing regions\nclass var infinite: UIRegion\nReturns the region that encloses all points.\ninit(size: CGSize)\nInitializes and returns a rectangular region of the specified size."
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiregion/1621893-contains",
    "html": "Parameters\npoint\n\nThe point to test. The specified point must be in the region’s coordinate system.\n\nReturn Value\n\ntrue if the point is in the current region or false if it is not.\n\nDiscussion\n\nUIKit Dynamics normally calls this method when it needs to determine the interactions between two objects. If you call this method yourself, remember that the origin of the region object itself is at the center of the region’s shape and you might need to adjust the value of point accordingly."
  },
  {
    "title": "addBoundary(withIdentifier:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollisionbehavior/1624822-addboundary",
    "html": "Parameters\nidentifier\n\nAn arbitrary identifier for the boundary you are adding.\n\nbezierPath\n\nAn arbitrary Bezier path that specifies the collision boundary you are adding.\n\nThe coordinate system and origin point for the path depend on how you’ve initialized the dynamic animator (that you’re adding the behavior to). See the overview in UIDynamicAnimator for more information.\n\nSee Also\nConfiguring a collision behavior\nfunc addBoundary(withIdentifier: NSCopying, from: CGPoint, to: CGPoint)\nAdds a collision boundary, specified as a line segment, to the collision behavior.\nvar boundaryIdentifiers: [NSCopying]?\nThe set of boundary identifiers that you’ve added to the collision behavior.\nfunc boundary(withIdentifier: NSCopying) -> UIBezierPath?\nReturns a specified Bezier-path boundary.\nvar collisionMode: UICollisionBehavior.Mode\nThe type of edges that participate in collisions for the collision behavior.\nfunc removeAllBoundaries()\nRemoves all previously-specified collision boundaries from the collision behavior.\nfunc removeBoundary(withIdentifier: NSCopying)\nRemoves a specific collision boundary from the collision behavior.\nfunc setTranslatesReferenceBoundsIntoBoundary(with: UIEdgeInsets)\nSpecifies a collision boundary based on the bounds of the animation reference system, with optional insets.\nvar translatesReferenceBoundsIntoBoundary: Bool\nSpecifies whether a boundary based on the reference system is active."
  },
  {
    "title": "presentationStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollertransitioncoordinatorcontext/1619287-presentationstyle",
    "html": "Required\n\nReturn Value\n\nThe modal presentation style associated with the transition or UIModalPresentationStyle.none if the transition is not a modal presentation or dismissal. For a list of possible values, see “Modal Presentation Styles” in UIViewController.\n\nDiscussion\n\nWhen presenting or dismissing a view controller modally, this method returns the presentation style used for that transition. For interface rotations and other events that don’t involve a specific transition between view controllers, this method returns UIModalPresentationStyle.none.\n\nSee Also\nGetting the behavior attributes\nvar transitionDuration: TimeInterval\nReturns the noninteractive duration of a transition.\n\nRequired\n\nvar completionCurve: UIView.AnimationCurve\nReturns the completion curve associated with the transition.\n\nRequired\n\nvar completionVelocity: CGFloat\nReturns the starting velocity to use for any final animations.\n\nRequired\n\nvar percentComplete: CGFloat\nReturns the percentage of completion for an interactive transition when it moves to its noninteractive phase.\n\nRequired"
  },
  {
    "title": "init(items:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollisionbehavior/1624820-init",
    "html": "Parameters\nitems\n\nThe dynamic items that you want to participate in the collision behavior.\n\nReturn Value\n\nThe initialized collision behavior, or nil if there was a problem initializing the object.\n\nSee Also\nInitializing and managing a collision behavior\nfunc addItem(UIDynamicItem)\nAdds a dynamic item to the collision behavior’s item array.\nfunc removeItem(UIDynamicItem)\nRemoves a specific dynamic item from the collision behavior.\nvar items: [UIDynamicItem]\nReturns the set of dynamic items you’ve added to the collision behavior."
  },
  {
    "title": "addItem(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollisionbehavior/1624829-additem",
    "html": "Parameters\nitem\n\nThe dynamic item to add to the item array.\n\nDiscussion\n\nYou can add a dynamic item to one or more collision behaviors. For example, you can use two collision behaviors to specify that item A can collide with item B and that item C can collide with item D, but that items A and B ignore items C and D.\n\nThere is no hard limit to the number of dynamic items you can add to a collision behavior. However, adding a large number of items might result in a performance impact. Be sure to test your behaviors on the device configurations you are targeting.\n\nSee Also\nInitializing and managing a collision behavior\ninit(items: [UIDynamicItem])\nInitializes a collision behavior with an array of dynamic items.\nfunc removeItem(UIDynamicItem)\nRemoves a specific dynamic item from the collision behavior.\nvar items: [UIDynamicItem]\nReturns the set of dynamic items you’ve added to the collision behavior."
  },
  {
    "title": "springField() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifieldbehavior/1624995-springfield",
    "html": "Return Value\n\nA field behavior object that applies spring effects to items.\n\nDiscussion\n\nA spring field behavior object uses Hooke’s law to calculate the force applied to objects in the field. With this law, the amount of force is linearly proportional to the distance from the center of the field. An item entering this field oscillates with a period proportional to the inverse of its density. You can use this field behavior to keep items confined to a particular region. Use the item’s resistance to reduce its linear velocity (and thus the amount of oscillation) over time.\n\nAn item in a spring field oscillates continuously unless the spring forces are damped by friction or the item is affected by other fields.\n\nSee Also\nGetting the field behaviors\nclass func dragField() -> Self\nCreates and returns a field behavior for slowing an object’s velocity.\nclass func velocityField(direction: CGVector) -> Self\nCreates and returns a field behavior object that applies a directional velocity to items.\nclass func electricField() -> Self\nCreates and returns a field behavior object that interacts with charged items.\nclass func magneticField() -> Self\nCreates and returns a field behavior that interacts with charged items.\nclass func radialGravityField(position: CGPoint) -> Self\nCreates and returns a field behavior object that models a radial gravitational force.\nclass func linearGravityField(direction: CGVector) -> Self\nCreates and returns a field behavior object that models a linear gravitational force.\nclass func vortexField() -> Self\nCreates and returns a field behavior object that applies a rotational force relative to the field’s position.\nclass func noiseField(smoothness: CGFloat, animationSpeed: CGFloat) -> Self\nCreates and returns a field behavior object that applies random noise to other forces.\nclass func turbulenceField(smoothness: CGFloat, animationSpeed: CGFloat) -> Self\nCreates and returns a field behavior object that applies noise to an item in motion.\nclass func field(evaluationBlock: (UIFieldBehavior, CGPoint, CGVector, CGFloat, CGFloat, TimeInterval) -> CGVector) -> Self\nCreates and returns a field behavior object that applies an app-specified field to items."
  },
  {
    "title": "magneticField() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifieldbehavior/1625007-magneticfield",
    "html": "Return Value\n\nA field behavior object that applies a magnetic field to charged items.\n\nDiscussion\n\nThe magnetic field behavior models a uniform magnetic field in the positive-z direction—that is, coming out of the screen. The amount of force applied by the field is modeled after the second part of the Lorentz equation (F = qvB). When the velocity of a charged item is perpendicular to the uniform magnetic field, the item feels a force normal to both the velocity and the field, resulting in a counter-clockwise rotation. Specifying a negative value for the strength of the field results in a clockwise rotation.\n\nYou can use magnetic fields as a way to apply forces to an object that are based on charge instead of mass.\n\nSee Also\nGetting the field behaviors\nclass func dragField() -> Self\nCreates and returns a field behavior for slowing an object’s velocity.\nclass func springField() -> Self\nCreates and returns a spring field behavior.\nclass func velocityField(direction: CGVector) -> Self\nCreates and returns a field behavior object that applies a directional velocity to items.\nclass func electricField() -> Self\nCreates and returns a field behavior object that interacts with charged items.\nclass func radialGravityField(position: CGPoint) -> Self\nCreates and returns a field behavior object that models a radial gravitational force.\nclass func linearGravityField(direction: CGVector) -> Self\nCreates and returns a field behavior object that models a linear gravitational force.\nclass func vortexField() -> Self\nCreates and returns a field behavior object that applies a rotational force relative to the field’s position.\nclass func noiseField(smoothness: CGFloat, animationSpeed: CGFloat) -> Self\nCreates and returns a field behavior object that applies random noise to other forces.\nclass func turbulenceField(smoothness: CGFloat, animationSpeed: CGFloat) -> Self\nCreates and returns a field behavior object that applies noise to an item in motion.\nclass func field(evaluationBlock: (UIFieldBehavior, CGPoint, CGVector, CGFloat, CGFloat, TimeInterval) -> CGVector) -> Self\nCreates and returns a field behavior object that applies an app-specified field to items."
  },
  {
    "title": "dragField() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifieldbehavior/1624990-dragfield",
    "html": "Return Value\n\nA field behavior object that applies a drag force to items.\n\nDiscussion\n\nThis field simulates the force of friction on an item. The force is applied in the opposite direction of the affected item’s velocity vector and has a magnitude that is proportional to the field’s strength property and the item’s current velocity.\n\nSee Also\nGetting the field behaviors\nclass func springField() -> Self\nCreates and returns a spring field behavior.\nclass func velocityField(direction: CGVector) -> Self\nCreates and returns a field behavior object that applies a directional velocity to items.\nclass func electricField() -> Self\nCreates and returns a field behavior object that interacts with charged items.\nclass func magneticField() -> Self\nCreates and returns a field behavior that interacts with charged items.\nclass func radialGravityField(position: CGPoint) -> Self\nCreates and returns a field behavior object that models a radial gravitational force.\nclass func linearGravityField(direction: CGVector) -> Self\nCreates and returns a field behavior object that models a linear gravitational force.\nclass func vortexField() -> Self\nCreates and returns a field behavior object that applies a rotational force relative to the field’s position.\nclass func noiseField(smoothness: CGFloat, animationSpeed: CGFloat) -> Self\nCreates and returns a field behavior object that applies random noise to other forces.\nclass func turbulenceField(smoothness: CGFloat, animationSpeed: CGFloat) -> Self\nCreates and returns a field behavior object that applies noise to an item in motion.\nclass func field(evaluationBlock: (UIFieldBehavior, CGPoint, CGVector, CGFloat, CGFloat, TimeInterval) -> CGVector) -> Self\nCreates and returns a field behavior object that applies an app-specified field to items."
  },
  {
    "title": "velocityField(direction:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifieldbehavior/1624989-velocityfield",
    "html": "Parameters\ndirection\n\nThe vector indicating the direction of the velocity force. You can change this value later by modifying the direction property.\n\nReturn Value\n\nA field behavior object that applies a velocity to items.\n\nDiscussion\n\nVelocity fields apply their velocity to the item, overriding any other acceleration forces currently on the item. The vector in the direction parameter is combined with the field strength to determine the velocity of items in the field.\n\nSee Also\nGetting the field behaviors\nclass func dragField() -> Self\nCreates and returns a field behavior for slowing an object’s velocity.\nclass func springField() -> Self\nCreates and returns a spring field behavior.\nclass func electricField() -> Self\nCreates and returns a field behavior object that interacts with charged items.\nclass func magneticField() -> Self\nCreates and returns a field behavior that interacts with charged items.\nclass func radialGravityField(position: CGPoint) -> Self\nCreates and returns a field behavior object that models a radial gravitational force.\nclass func linearGravityField(direction: CGVector) -> Self\nCreates and returns a field behavior object that models a linear gravitational force.\nclass func vortexField() -> Self\nCreates and returns a field behavior object that applies a rotational force relative to the field’s position.\nclass func noiseField(smoothness: CGFloat, animationSpeed: CGFloat) -> Self\nCreates and returns a field behavior object that applies random noise to other forces.\nclass func turbulenceField(smoothness: CGFloat, animationSpeed: CGFloat) -> Self\nCreates and returns a field behavior object that applies noise to an item in motion.\nclass func field(evaluationBlock: (UIFieldBehavior, CGPoint, CGVector, CGFloat, CGFloat, TimeInterval) -> CGVector) -> Self\nCreates and returns a field behavior object that applies an app-specified field to items."
  },
  {
    "title": "position | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifieldbehavior/1625003-position",
    "html": "Discussion\n\nThis property defines the center point of the field. The shape of the field around this point is defined by the region property.\n\nSee Also\nConfiguring the field attributes\nvar region: UIRegion\nThe shape of the field.\nvar strength: CGFloat\nThe strength of the field.\nvar falloff: CGFloat\nThe rate of decay for the field strength.\nvar minimumRadius: CGFloat\nThe minimum distance at which to start calculating new values for the field.\nvar direction: CGVector\nThe direction of motion for a linear field.\nvar smoothness: CGFloat\nThe smoothness of the noise used to generate the field.\nvar animationSpeed: CGFloat\nThe rate at which the animation should proceed."
  },
  {
    "title": "vortexField() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifieldbehavior/1625000-vortexfield",
    "html": "Return Value\n\nA field behavior object that applies a rotational force around the field’s origin.\n\nDiscussion\n\nThis forces created by this field rotate in a circle around the center point of the field. Items entering the field are pushed perpendicular to the imaginary line between the item and the center of the field. Combine this field with a radial gravity field to create a field that pulls items into a spinning vortex.\n\nWhen setting the strength of the vortex field, positive values create a counter-clockwise rotation and negative values create a clockwise rotation. The amount of force is proportional to the item’s mass and the item’s distance from the field’s origin.\n\nSee Also\nGetting the field behaviors\nclass func dragField() -> Self\nCreates and returns a field behavior for slowing an object’s velocity.\nclass func springField() -> Self\nCreates and returns a spring field behavior.\nclass func velocityField(direction: CGVector) -> Self\nCreates and returns a field behavior object that applies a directional velocity to items.\nclass func electricField() -> Self\nCreates and returns a field behavior object that interacts with charged items.\nclass func magneticField() -> Self\nCreates and returns a field behavior that interacts with charged items.\nclass func radialGravityField(position: CGPoint) -> Self\nCreates and returns a field behavior object that models a radial gravitational force.\nclass func linearGravityField(direction: CGVector) -> Self\nCreates and returns a field behavior object that models a linear gravitational force.\nclass func noiseField(smoothness: CGFloat, animationSpeed: CGFloat) -> Self\nCreates and returns a field behavior object that applies random noise to other forces.\nclass func turbulenceField(smoothness: CGFloat, animationSpeed: CGFloat) -> Self\nCreates and returns a field behavior object that applies noise to an item in motion.\nclass func field(evaluationBlock: (UIFieldBehavior, CGPoint, CGVector, CGFloat, CGFloat, TimeInterval) -> CGVector) -> Self\nCreates and returns a field behavior object that applies an app-specified field to items."
  },
  {
    "title": "minimumRadius | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifieldbehavior/1624994-minimumradius",
    "html": "Discussion\n\nUse this property to modify the behavior of distance-based effects when objects are close to the center of the field. Distances that are less than the minimum value are treated as if they are equal to the minimum value. In addition, effects such as falloff are not applied until the minimum distance is reached.\n\nThe default value of this property is very small, but not zero.\n\nSee Also\nConfiguring the field attributes\nvar position: CGPoint\nThe position of the field in the reference coordinate system.\nvar region: UIRegion\nThe shape of the field.\nvar strength: CGFloat\nThe strength of the field.\nvar falloff: CGFloat\nThe rate of decay for the field strength.\nvar direction: CGVector\nThe direction of motion for a linear field.\nvar smoothness: CGFloat\nThe smoothness of the noise used to generate the field.\nvar animationSpeed: CGFloat\nThe rate at which the animation should proceed."
  },
  {
    "title": "noiseField(smoothness:animationSpeed:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifieldbehavior/1625006-noisefield",
    "html": "Parameters\nsmoothness\n\nThe smoothness of the field. Specify a value between 0.0 and 1.0, where 0.0 indicates the maximum amount of randomness in the generated field and 1.0 indicates the least amount of randomness.\n\nspeed\n\nThe frequency at which the noise field changes, measured in Hertz (Hz). Specify 0.0 to create a noise field that does not change over time.\n\nReturn Value\n\nA field behavior object that applies noise to other fields in the same area.\n\nDiscussion\n\nA noise field creates a differentiable Perlin simplex noise field that varies over time. You can combine a noise field with other fields to add some variability to the behavior of those fields. The smoothness of the field defines how random the changes are from one point to the next point. A smooth field still adds noise but does so in a more predictable way. This field ignores the mass of the item.\n\nSee Also\nGetting the field behaviors\nclass func dragField() -> Self\nCreates and returns a field behavior for slowing an object’s velocity.\nclass func springField() -> Self\nCreates and returns a spring field behavior.\nclass func velocityField(direction: CGVector) -> Self\nCreates and returns a field behavior object that applies a directional velocity to items.\nclass func electricField() -> Self\nCreates and returns a field behavior object that interacts with charged items.\nclass func magneticField() -> Self\nCreates and returns a field behavior that interacts with charged items.\nclass func radialGravityField(position: CGPoint) -> Self\nCreates and returns a field behavior object that models a radial gravitational force.\nclass func linearGravityField(direction: CGVector) -> Self\nCreates and returns a field behavior object that models a linear gravitational force.\nclass func vortexField() -> Self\nCreates and returns a field behavior object that applies a rotational force relative to the field’s position.\nclass func turbulenceField(smoothness: CGFloat, animationSpeed: CGFloat) -> Self\nCreates and returns a field behavior object that applies noise to an item in motion.\nclass func field(evaluationBlock: (UIFieldBehavior, CGPoint, CGVector, CGFloat, CGFloat, TimeInterval) -> CGVector) -> Self\nCreates and returns a field behavior object that applies an app-specified field to items."
  },
  {
    "title": "turbulenceField(smoothness:animationSpeed:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifieldbehavior/1624992-turbulencefield",
    "html": "Parameters\nsmoothness\n\nThe smoothness of the turbulence field. Specify a value between 0.0 and 1.0, where 0.0 indicates the maximum amount of randomness in the generated field and 1.0 indicates the least amount of randomness.\n\nspeed\n\nThe frequency at which the turbulence field changes, measured in Hertz (Hz). Specify 0.0 to create a turbulence field that does not change over time.\n\nReturn Value\n\nA field behavior object that applies turbulence to an item in motion.\n\nDiscussion\n\nThe strength of the noise generated by this field is proportional to the velocity of the item in the field.\n\nSee Also\nGetting the field behaviors\nclass func dragField() -> Self\nCreates and returns a field behavior for slowing an object’s velocity.\nclass func springField() -> Self\nCreates and returns a spring field behavior.\nclass func velocityField(direction: CGVector) -> Self\nCreates and returns a field behavior object that applies a directional velocity to items.\nclass func electricField() -> Self\nCreates and returns a field behavior object that interacts with charged items.\nclass func magneticField() -> Self\nCreates and returns a field behavior that interacts with charged items.\nclass func radialGravityField(position: CGPoint) -> Self\nCreates and returns a field behavior object that models a radial gravitational force.\nclass func linearGravityField(direction: CGVector) -> Self\nCreates and returns a field behavior object that models a linear gravitational force.\nclass func vortexField() -> Self\nCreates and returns a field behavior object that applies a rotational force relative to the field’s position.\nclass func noiseField(smoothness: CGFloat, animationSpeed: CGFloat) -> Self\nCreates and returns a field behavior object that applies random noise to other forces.\nclass func field(evaluationBlock: (UIFieldBehavior, CGPoint, CGVector, CGFloat, CGFloat, TimeInterval) -> CGVector) -> Self\nCreates and returns a field behavior object that applies an app-specified field to items."
  },
  {
    "title": "field(evaluationBlock:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifieldbehavior/1625001-field",
    "html": "Parameters\nblock\n\nThe block to execute to compute the instantaneous force of the field on an item. This block returns a CGVector object that reflects the direction and magnitude of the force to apply. The block takes the following parameters:\n\nfield\n\nThe field behavior object being evaluated.\n\nposition\n\nThe point at which to compute the force value, in the reference coordinate system. The position corresponds to the location of an item in the field.\n\nvelocity\n\nThe velocity to be considered during evaluation of the force. Usually, this is the velocity of an item in the field. The vector reflects both the direction and magnitude of the velocity.\n\nmass\n\nThe mass value to be used in any force computations. Use this value in fields where the applied forces vary with the mass of the object.\n\ncharge\n\nThe charge value to be used in any force computations. Use this value in fields where the applied forces vary with the charge of the object.\n\ndeltaTime\n\nThe amount of time that has passed since the last time the force value for this item was computed.\n\nReturn Value\n\nA field behavior object that applies forces based on the custom algorithm you provided.\n\nDiscussion\n\nUse this method to define a custom field for your app. The block you provide is called many times during the course of animations, so your implementation should be reasonably fast. Use the provided field object to retrieve values associated with the field itself, such as the field’s position and strength. The other parameters reflect information about the dynamic item affected by the field.\n\nSee Also\nGetting the field behaviors\nclass func dragField() -> Self\nCreates and returns a field behavior for slowing an object’s velocity.\nclass func springField() -> Self\nCreates and returns a spring field behavior.\nclass func velocityField(direction: CGVector) -> Self\nCreates and returns a field behavior object that applies a directional velocity to items.\nclass func electricField() -> Self\nCreates and returns a field behavior object that interacts with charged items.\nclass func magneticField() -> Self\nCreates and returns a field behavior that interacts with charged items.\nclass func radialGravityField(position: CGPoint) -> Self\nCreates and returns a field behavior object that models a radial gravitational force.\nclass func linearGravityField(direction: CGVector) -> Self\nCreates and returns a field behavior object that models a linear gravitational force.\nclass func vortexField() -> Self\nCreates and returns a field behavior object that applies a rotational force relative to the field’s position.\nclass func noiseField(smoothness: CGFloat, animationSpeed: CGFloat) -> Self\nCreates and returns a field behavior object that applies random noise to other forces.\nclass func turbulenceField(smoothness: CGFloat, animationSpeed: CGFloat) -> Self\nCreates and returns a field behavior object that applies noise to an item in motion."
  },
  {
    "title": "animationSpeed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifieldbehavior/1624986-animationspeed",
    "html": "Discussion\n\nFor noise and turbulence fields, this property contains the speed at which to animate the field. For all other fields, the value of this property is always 0.0.\n\nA value of 1.0 means the field animations occur at normal speed. Values less than 1.0 result in animations that are slower than normal, and values greater than 1.0 result in animations that are faster than normal. A value of 0.0 means that the field does not animate at all.\n\nSee Also\nConfiguring the field attributes\nvar position: CGPoint\nThe position of the field in the reference coordinate system.\nvar region: UIRegion\nThe shape of the field.\nvar strength: CGFloat\nThe strength of the field.\nvar falloff: CGFloat\nThe rate of decay for the field strength.\nvar minimumRadius: CGFloat\nThe minimum distance at which to start calculating new values for the field.\nvar direction: CGVector\nThe direction of motion for a linear field.\nvar smoothness: CGFloat\nThe smoothness of the noise used to generate the field."
  },
  {
    "title": "direction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifieldbehavior/1624987-direction",
    "html": "Discussion\n\nUse this property to specify the direction of motion for velocity and linear gravity fields. For nondirectional fields, the default value of this property is a zero vector.\n\nSee Also\nConfiguring the field attributes\nvar position: CGPoint\nThe position of the field in the reference coordinate system.\nvar region: UIRegion\nThe shape of the field.\nvar strength: CGFloat\nThe strength of the field.\nvar falloff: CGFloat\nThe rate of decay for the field strength.\nvar minimumRadius: CGFloat\nThe minimum distance at which to start calculating new values for the field.\nvar smoothness: CGFloat\nThe smoothness of the noise used to generate the field.\nvar animationSpeed: CGFloat\nThe rate at which the animation should proceed."
  },
  {
    "title": "isEnabledByDefault | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidraginteraction/2891051-isenabledbydefault",
    "html": "See Also\nEnabling the interactions\nvar isEnabled: Bool\nA Boolean value that specifies whether the drag interaction responds to touches and is allowed to participate in a drag activity."
  },
  {
    "title": "UIModalPresentationStyle.formSheet | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimodalpresentationstyle/formsheet",
    "html": "Discussion\n\nIn a regular-width, regular-height size class, the system adds a dimming layer over the background content and centers the view controller’s content on top of this layer. The default content size is smaller than that of the UIModalPresentationStyle.pageSheet style. A part of the background content always remains visible.\n\nTo provide a custom content size, use the modal view controller’s preferredContentSize property.\n\nIn a compact-width, regular-height size class, the system displays the view controller as a sheet with part of the background content visible near the top of the screen.\n\nIn a compact-height size class, the behavior is the same as UIModalPresentationStyle.fullScreen.\n\nWhere the background content remains visible, the system doesn’t call the presenting view controller’s viewWillDisappear(_:) and viewDidDisappear(_:) methods.\n\nSee Also\nPresentations\ncase automatic\nThe default presentation style chosen by the system.\ncase none\nA presentation style that indicates no adaptations should be made.\ncase fullScreen\nA presentation style in which the presented view covers the screen.\ncase pageSheet\nA presentation style that partially covers the underlying content.\ncase currentContext\nA presentation style where the content is displayed over another view controller’s content.\ncase custom\nA custom view presentation style that is managed by a custom presentation controller and one or more custom animator objects.\ncase overFullScreen\nA view presentation style in which the presented view covers the screen.\ncase overCurrentContext\nA presentation style where the content is displayed over another view controller’s content.\ncase popover\nA presentation style where the content is displayed in a popover view.\ncase blurOverFullScreen\nA presentation style that blurs the underlying content before displaying new content in a full-screen presentation."
  },
  {
    "title": "init(items:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uigravitybehavior/1620416-init",
    "html": "Parameters\nitems\n\nThe dynamic items that you want to be subject to the gravity behavior.\n\nReturn Value\n\nThe initialized gravity behavior, or nil if there was a problem initializing the object."
  },
  {
    "title": "stylus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitouch/touchtype/1618124-stylus",
    "html": "Deprecated\n\nUse UITouch.TouchType.pencil instead."
  },
  {
    "title": "init(delegate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidraginteraction/2890982-init",
    "html": "Parameters\ndelegate\n\nThe object that configures and controls a drag interaction.\n\nReturn Value\n\nA drag interaction that has a delegate."
  },
  {
    "title": "location(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidragdropsession/2891049-location",
    "html": "Required\n\nParameters\nview\n\nThe view whose coordinate system is used to get the location.\n\nReturn Value\n\nThe location point of the drag activity, in the coordinate system of the specified view."
  },
  {
    "title": "angularResistance | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidynamicitembehavior/1624396-angularresistance",
    "html": "Discussion\n\nValid range is 0 through CGFLOAT_MAX. The greater the value, the greater the angular damping and the faster rotation slows to a stop.\n\nSee Also\nConfiguring a dynamic item behavior\nfunc addAngularVelocity(CGFloat, for: UIDynamicItem)\nAdds a specified angular velocity to a dynamic item.\nfunc addLinearVelocity(CGPoint, for: UIDynamicItem)\nAdds a specified linear velocity to a dynamic item.\nvar allowsRotation: Bool\nSpecifies whether rotation is allowed for the behavior’s dynamic items.\nfunc angularVelocity(for: UIDynamicItem) -> CGFloat\nReturns the angular velocity for a specified dynamic item.\nfunc linearVelocity(for: UIDynamicItem) -> CGPoint\nReturns the linear velocity for a specified dynamic item.\nvar density: CGFloat\nThe relative mass density of the behavior’s dynamic items.\nvar elasticity: CGFloat\nThe amount of elasticity applied to collisions for the behavior’s dynamic items.\nvar friction: CGFloat\nThe linear resistance for the behavior’s dynamic items when two slide against each other.\nvar resistance: CGFloat\nThe linear resistance for the behavior’s dynamic items, which reduces their linear velocity over time.\nvar charge: CGFloat\nThe charge associated with the item.\nvar isAnchored: Bool\nA Boolean value indicating whether the item is anchored to its current position."
  },
  {
    "title": "charge | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidynamicitembehavior/1624390-charge",
    "html": "Discussion\n\nCharge determines the degree to which the item interacts with electric and magnetic fields. The value in this property has no units, so it is up to you to set the charge and field strengths to appropriate values for your interface. The default value of this property is 0.0.\n\nSee Also\nConfiguring a dynamic item behavior\nfunc addAngularVelocity(CGFloat, for: UIDynamicItem)\nAdds a specified angular velocity to a dynamic item.\nfunc addLinearVelocity(CGPoint, for: UIDynamicItem)\nAdds a specified linear velocity to a dynamic item.\nvar allowsRotation: Bool\nSpecifies whether rotation is allowed for the behavior’s dynamic items.\nvar angularResistance: CGFloat\nThe angular resistance for the behavior’s dynamic items.\nfunc angularVelocity(for: UIDynamicItem) -> CGFloat\nReturns the angular velocity for a specified dynamic item.\nfunc linearVelocity(for: UIDynamicItem) -> CGPoint\nReturns the linear velocity for a specified dynamic item.\nvar density: CGFloat\nThe relative mass density of the behavior’s dynamic items.\nvar elasticity: CGFloat\nThe amount of elasticity applied to collisions for the behavior’s dynamic items.\nvar friction: CGFloat\nThe linear resistance for the behavior’s dynamic items when two slide against each other.\nvar resistance: CGFloat\nThe linear resistance for the behavior’s dynamic items, which reduces their linear velocity over time.\nvar isAnchored: Bool\nA Boolean value indicating whether the item is anchored to its current position."
  },
  {
    "title": "resistance | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidynamicitembehavior/1624399-resistance",
    "html": "Discussion\n\nDefault value is 0.0. Valid range is from 0.0 for no velocity damping, to CGFLOAT_MAX for complete velocity damping. If you set this property to 1.0, a dynamic item’s motion stops as soon as there is no force applied to it.\n\nSee Also\nConfiguring a dynamic item behavior\nfunc addAngularVelocity(CGFloat, for: UIDynamicItem)\nAdds a specified angular velocity to a dynamic item.\nfunc addLinearVelocity(CGPoint, for: UIDynamicItem)\nAdds a specified linear velocity to a dynamic item.\nvar allowsRotation: Bool\nSpecifies whether rotation is allowed for the behavior’s dynamic items.\nvar angularResistance: CGFloat\nThe angular resistance for the behavior’s dynamic items.\nfunc angularVelocity(for: UIDynamicItem) -> CGFloat\nReturns the angular velocity for a specified dynamic item.\nfunc linearVelocity(for: UIDynamicItem) -> CGPoint\nReturns the linear velocity for a specified dynamic item.\nvar density: CGFloat\nThe relative mass density of the behavior’s dynamic items.\nvar elasticity: CGFloat\nThe amount of elasticity applied to collisions for the behavior’s dynamic items.\nvar friction: CGFloat\nThe linear resistance for the behavior’s dynamic items when two slide against each other.\nvar charge: CGFloat\nThe charge associated with the item.\nvar isAnchored: Bool\nA Boolean value indicating whether the item is anchored to its current position."
  },
  {
    "title": "angularVelocity(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidynamicitembehavior/1624389-angularvelocity",
    "html": "Parameters\nitem\n\nThe dynamic item whose angular velocity you want to get.\n\nReturn Value\n\nThe angular velocity of the specified dynamic item, in radians per second.\n\nSee Also\nConfiguring a dynamic item behavior\nfunc addAngularVelocity(CGFloat, for: UIDynamicItem)\nAdds a specified angular velocity to a dynamic item.\nfunc addLinearVelocity(CGPoint, for: UIDynamicItem)\nAdds a specified linear velocity to a dynamic item.\nvar allowsRotation: Bool\nSpecifies whether rotation is allowed for the behavior’s dynamic items.\nvar angularResistance: CGFloat\nThe angular resistance for the behavior’s dynamic items.\nfunc linearVelocity(for: UIDynamicItem) -> CGPoint\nReturns the linear velocity for a specified dynamic item.\nvar density: CGFloat\nThe relative mass density of the behavior’s dynamic items.\nvar elasticity: CGFloat\nThe amount of elasticity applied to collisions for the behavior’s dynamic items.\nvar friction: CGFloat\nThe linear resistance for the behavior’s dynamic items when two slide against each other.\nvar resistance: CGFloat\nThe linear resistance for the behavior’s dynamic items, which reduces their linear velocity over time.\nvar charge: CGFloat\nThe charge associated with the item.\nvar isAnchored: Bool\nA Boolean value indicating whether the item is anchored to its current position."
  },
  {
    "title": "density | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidynamicitembehavior/1624395-density",
    "html": "Discussion\n\nA dynamic item’s relative density, along with its size, determines its effective mass when it participates in UIKit Dynamics behaviors—including friction, collisions, pushes, and so on. For example, say you have two dynamic items with the same density but different sizes: item one is 100 x 100 points and item two is 100 x 200 points. In this example, item two has twice the effective mass of item one. In an elastic collision, these items exhibit a natural conservation of momentum according to their relative masses.\n\nA 100 x 100 point dynamic item with a density of 1.0, to which you apply a force (via a push behavior) of magnitude 1.0, accelerates at 100 points per second².\n\nSee Also\nConfiguring a dynamic item behavior\nfunc addAngularVelocity(CGFloat, for: UIDynamicItem)\nAdds a specified angular velocity to a dynamic item.\nfunc addLinearVelocity(CGPoint, for: UIDynamicItem)\nAdds a specified linear velocity to a dynamic item.\nvar allowsRotation: Bool\nSpecifies whether rotation is allowed for the behavior’s dynamic items.\nvar angularResistance: CGFloat\nThe angular resistance for the behavior’s dynamic items.\nfunc angularVelocity(for: UIDynamicItem) -> CGFloat\nReturns the angular velocity for a specified dynamic item.\nfunc linearVelocity(for: UIDynamicItem) -> CGPoint\nReturns the linear velocity for a specified dynamic item.\nvar elasticity: CGFloat\nThe amount of elasticity applied to collisions for the behavior’s dynamic items.\nvar friction: CGFloat\nThe linear resistance for the behavior’s dynamic items when two slide against each other.\nvar resistance: CGFloat\nThe linear resistance for the behavior’s dynamic items, which reduces their linear velocity over time.\nvar charge: CGFloat\nThe charge associated with the item.\nvar isAnchored: Bool\nA Boolean value indicating whether the item is anchored to its current position."
  },
  {
    "title": "friction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidynamicitembehavior/1624392-friction",
    "html": "Discussion\n\nDefault value is 0.0, which corresponds to no friction. Use a value of 1.0 to apply strong friction. To apply an even stronger friction, you can use higher numbers.\n\nSee Also\nConfiguring a dynamic item behavior\nfunc addAngularVelocity(CGFloat, for: UIDynamicItem)\nAdds a specified angular velocity to a dynamic item.\nfunc addLinearVelocity(CGPoint, for: UIDynamicItem)\nAdds a specified linear velocity to a dynamic item.\nvar allowsRotation: Bool\nSpecifies whether rotation is allowed for the behavior’s dynamic items.\nvar angularResistance: CGFloat\nThe angular resistance for the behavior’s dynamic items.\nfunc angularVelocity(for: UIDynamicItem) -> CGFloat\nReturns the angular velocity for a specified dynamic item.\nfunc linearVelocity(for: UIDynamicItem) -> CGPoint\nReturns the linear velocity for a specified dynamic item.\nvar density: CGFloat\nThe relative mass density of the behavior’s dynamic items.\nvar elasticity: CGFloat\nThe amount of elasticity applied to collisions for the behavior’s dynamic items.\nvar resistance: CGFloat\nThe linear resistance for the behavior’s dynamic items, which reduces their linear velocity over time.\nvar charge: CGFloat\nThe charge associated with the item.\nvar isAnchored: Bool\nA Boolean value indicating whether the item is anchored to its current position."
  },
  {
    "title": "popoverPresentationControllerShouldDismissPopover(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipopoverpresentationcontrollerdelegate/1622321-popoverpresentationcontrollersho",
    "html": "Parameters\npopoverPresentationController\n\nThe popover presentation controller that is managing the popover interface.\n\nReturn Value\n\ntrue if the popover should be dismissed or false if it should not.\n\nDiscussion\n\nThe popover presentation controller calls this method in response to user-initiated attempts to dismiss the popover. It is not called when you dismiss the popover programmatically using the dismissModalViewController(animated:) method.\n\nIf you do not implement this method in your delegate, the default return value is assumed to be true.\n\nSee Also\nPresenting and dismissing the popover\nfunc prepareForPopoverPresentation(UIPopoverPresentationController)\nNotifies the delegate that the popover is about to be presented.\nfunc popoverPresentationControllerDidDismissPopover(UIPopoverPresentationController)\nTells the delegate that the popover was dismissed.\nDeprecated"
  },
  {
    "title": "popoverPresentationController(_:willRepositionPopoverTo:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipopoverpresentationcontrollerdelegate/1622326-popoverpresentationcontroller",
    "html": "Parameters\npopoverPresentationController\n\nThe popover presentation controller that’s managing the popover interface.\n\nrect\n\nOn input, the new rectangle for the popover. This popover is in the coordinate space of the view in the view parameter. If you want to propose a different rectangle for the popover, put the new value in this parameter.\n\nview\n\nOn input, the new view for containing the popover. If you want to propose a different view for the popover, put that view in this parameter.\n\nDiscussion\n\nThe popover presentation controller calls this method in response to interface changes that require a new size for the popover. For example, UIKit calls this method when the popover must be resized to make room for the keyboard. You can use this method to obtain the new size of the popover and optionally to make changes to the proposed view and rectangle.\n\nIf you don’t implement this method in your delegate, UIKit resizes the popover to the specified rectangle and moves it (as needed) to the specified view."
  },
  {
    "title": "addLinearVelocity(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidynamicitembehavior/1624391-addlinearvelocity",
    "html": "Parameters\nvelocity\n\nThe linear velocity, expressed in points per second, that you want to add to the specified dynamic item. Default value is 0. Applying a negative value reduces the linear velocity by the specified amount.\n\nitem\n\nThe dynamic item whose linear velocity you want to increase (or decrease).\n\nSee Also\nConfiguring a dynamic item behavior\nfunc addAngularVelocity(CGFloat, for: UIDynamicItem)\nAdds a specified angular velocity to a dynamic item.\nvar allowsRotation: Bool\nSpecifies whether rotation is allowed for the behavior’s dynamic items.\nvar angularResistance: CGFloat\nThe angular resistance for the behavior’s dynamic items.\nfunc angularVelocity(for: UIDynamicItem) -> CGFloat\nReturns the angular velocity for a specified dynamic item.\nfunc linearVelocity(for: UIDynamicItem) -> CGPoint\nReturns the linear velocity for a specified dynamic item.\nvar density: CGFloat\nThe relative mass density of the behavior’s dynamic items.\nvar elasticity: CGFloat\nThe amount of elasticity applied to collisions for the behavior’s dynamic items.\nvar friction: CGFloat\nThe linear resistance for the behavior’s dynamic items when two slide against each other.\nvar resistance: CGFloat\nThe linear resistance for the behavior’s dynamic items, which reduces their linear velocity over time.\nvar charge: CGFloat\nThe charge associated with the item.\nvar isAnchored: Bool\nA Boolean value indicating whether the item is anchored to its current position."
  },
  {
    "title": "view(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollercontexttransitioning/1622055-view",
    "html": "Required\n\nParameters\nkey\n\nThe key identifying the view you want. For a list of possible keys, see View Transition Keys.\n\nReturn Value\n\nThe view object for the specified key or nil if the view could not be found.\n\nDiscussion\n\nThe view returned by this method may or may not be the root view of the corresponding view controller. A situation where the views may not be the same is when a system-provided presentation controller installs another view underneath the presented view controller’s view.\n\nSee Also\nAccessing the transition objects\nvar containerView: UIView\nThe view that acts as the superview for the views involved in the transition.\n\nRequired\n\nfunc viewController(forKey: UITransitionContextViewControllerKey) -> UIViewController?\nReturns a view controller involved in the transition.\n\nRequired"
  },
  {
    "title": "viewController(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollercontexttransitioning/1622043-viewcontroller",
    "html": "Required\n\nParameters\nkey\n\nThe key identifying the view controller you want. For a list of possible keys, see View Controller Transition Keys.\n\nReturn Value\n\nThe view controller object for the specified key or nil if the view controller could not be found.\n\nSee Also\nAccessing the transition objects\nvar containerView: UIView\nThe view that acts as the superview for the views involved in the transition.\n\nRequired\n\nfunc view(forKey: UITransitionContextViewKey) -> UIView?\nReturns the specified view involved in the transition.\n\nRequired"
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidropinteraction/2890890-delegate",
    "html": "See Also\nManaging drop interactions\nprotocol UIDropInteractionDelegate\nThe interface for configuring and controlling a drop interaction."
  },
  {
    "title": "UIPushBehavior.Mode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipushbehavior/mode",
    "html": "Topics\nConstants\ncase continuous\nOption for continuous force.\ncase instantaneous\nOption for instantaneous force.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "init(for:title:target:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitargeteddragpreview/2902368-init",
    "html": "Parameters\nurl\n\nAn Internet address referencing a remote resource, such as a webpage.\n\ntitle\n\nA title for the URL.\n\ntarget\n\nA drag item preview target.\n\nReturn Value\n\nA drag preview for a URL with a title based on the specified drag item preview target.\n\nDiscussion\n\nThis method creates a two-line drag item preview, with the title displayed on the first line. The second line is a textual representation of the URL that might not show the full URL string. Don't use a file URL. Passing nil for the title is the same as calling init(for:target:).\n\nSee Also\nInitializing a targeted drag item preview\ninit(for: URL, target: UIDragPreviewTarget)\nInitializes a new targeted drag item preview with a URL and a drag item preview."
  },
  {
    "title": "items | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uigravitybehavior/1620420-items",
    "html": "See Also\nManaging a gravity behavior’s items\nfunc addItem(UIDynamicItem)\nAssociates the specified dynamic item with the gravity behavior.\nfunc removeItem(UIDynamicItem)\nRemoves the specified dynamic item from the gravity behavior."
  },
  {
    "title": "addItem(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipushbehavior/1623333-additem",
    "html": "Parameters\nitem\n\nThe dynamic item to add to the item array.\n\nDiscussion\n\nAll the dynamic items added to a push behavior are subject to the same force vector.\n\nSee Also\nInitializing and managing a push behavior\nvar active: Bool\nThe state of the push behavior’s force: either active or inactive.\ninit(items: [UIDynamicItem], mode: UIPushBehavior.Mode)\nInitializes a push behavior with an array of dynamic items.\nfunc removeItem(UIDynamicItem)\nRemoves a specific dynamic item from the behavior.\nvar items: [UIDynamicItem]\nReturns the set of dynamic items you’ve added to the push behavior."
  },
  {
    "title": "angle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uigravitybehavior/1620417-angle",
    "html": "Discussion\n\nModify this property when you want to change the angle of the gravity vector separately from the magnitude of that vector. The value in this property is tied to the value in the gravityDirection property, so changes in one affect the other.\n\nThe default angle is pi / 2 radians, which represents a downward force in the reference view. A value of 0 represents a force that moves items toward the right side of the reference view.\n\nSee Also\nConfiguring a gravity behavior\nvar gravityDirection: CGVector\nThe direction and magnitude of the gravitational force, expressed as a vector.\nvar magnitude: CGFloat\nThe magnitude of the gravity vector.\nfunc setAngle(CGFloat, magnitude: CGFloat)\nSets the angle and magnitude of the gravity vector for the behavior."
  },
  {
    "title": "mode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipushbehavior/1623340-mode",
    "html": "Discussion\n\nThe mode is one of the values available in the UIPushBehavior.Mode enumeration. Set the mode when you call the init(items:mode:) method.\n\nSee Also\nConfiguring a push behavior\nfunc setAngle(CGFloat, magnitude: CGFloat)\nSets the angle and magnitude of the force vector for the behavior.\nvar angle: CGFloat\nThe angle, in radians, of the force vector for the behavior.\nvar magnitude: CGFloat\nThe magnitude of the force vector for the push behavior.\nfunc setTargetOffsetFromCenter(UIOffset, for: UIDynamicItem)\nSets the offset, from the center of a dynamic item, at which to apply the push behavior’s force vector.\nfunc targetOffsetFromCenter(for: UIDynamicItem) -> UIOffset\nReturns the offset, from the center of a dynamic item, at which the push behavior’s force vector is applied.\nvar pushDirection: CGVector\nThe direction of the force vector for the behavior, expressed as x and y components and using standard UIKit geometry."
  },
  {
    "title": "angle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipushbehavior/1623332-angle",
    "html": "Discussion\n\nThe default angle is 0 radians, using standard UIKit geometry. To configure the force vector for a push behavior, set the magnitude property as well as the angle property.\n\nAlternatively, you can express the direction of force by using x and y components with the pushDirection property. Whichever approach you use, the alternate, equivalent values update automatically.\n\nSee Also\nConfiguring a push behavior\nfunc setAngle(CGFloat, magnitude: CGFloat)\nSets the angle and magnitude of the force vector for the behavior.\nvar magnitude: CGFloat\nThe magnitude of the force vector for the push behavior.\nvar mode: UIPushBehavior.Mode\nReturns the force mode for the push behavior.\nfunc setTargetOffsetFromCenter(UIOffset, for: UIDynamicItem)\nSets the offset, from the center of a dynamic item, at which to apply the push behavior’s force vector.\nfunc targetOffsetFromCenter(for: UIDynamicItem) -> UIOffset\nReturns the offset, from the center of a dynamic item, at which the push behavior’s force vector is applied.\nvar pushDirection: CGVector\nThe direction of the force vector for the behavior, expressed as x and y components and using standard UIKit geometry."
  },
  {
    "title": "init(size:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiregion/1621891-init",
    "html": "Parameters\nsize\n\nThe size of the region, specified in points.\n\nReturn Value\n\nA rectangular region of the specified size.\n\nDiscussion\n\nThe center of the rectangle is the origin of the region’s coordinate system.\n\nSee Also\nCreating and initializing regions\nclass var infinite: UIRegion\nReturns the region that encloses all points.\ninit(radius: CGFloat)\nInitializes and returns a region with a circular shape of the specified radius."
  },
  {
    "title": "inverse() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiregion/1621894-inverse",
    "html": "Return Value\n\nA new region whose contents include all points that are not in the current region.\n\nDiscussion\n\nThe inverse of the infinite region is an empty region.\n\nSee Also\nCreating complex regions\nfunc byDifference(from: UIRegion) -> Self\nReturns a new region created by subtracting the specified region from the current region.\nfunc byIntersection(with: UIRegion) -> Self\nReturns a new region containing only the area occupied by both the specified region and current region.\nfunc byUnion(with: UIRegion) -> Self\nReturns a new region containing the combined areas of the specified region and the current region."
  },
  {
    "title": "pushDirection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipushbehavior/1623331-pushdirection",
    "html": "Discussion\n\nThe default x and y values of the push direction vector are each 0.0. A value for either component of 1.0, applied to a 100 point x 100 point view, whose density value is 1.0, results in view acceleration of 100 points / second² in the positive direction for the component.\n\nSetting either direction component to a negative value reverses the direction of force for the component.\n\nWhether you express a push behavior’s push direction in terms of x, y components or with an angle (by using the angle property), the alternate, equivalent value updates automatically.\n\nSee Also\nConfiguring a push behavior\nfunc setAngle(CGFloat, magnitude: CGFloat)\nSets the angle and magnitude of the force vector for the behavior.\nvar angle: CGFloat\nThe angle, in radians, of the force vector for the behavior.\nvar magnitude: CGFloat\nThe magnitude of the force vector for the push behavior.\nvar mode: UIPushBehavior.Mode\nReturns the force mode for the push behavior.\nfunc setTargetOffsetFromCenter(UIOffset, for: UIDynamicItem)\nSets the offset, from the center of a dynamic item, at which to apply the push behavior’s force vector.\nfunc targetOffsetFromCenter(for: UIDynamicItem) -> UIOffset\nReturns the offset, from the center of a dynamic item, at which the push behavior’s force vector is applied."
  },
  {
    "title": "action | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidynamicbehavior/1618499-action",
    "html": "Discussion\n\nThe dynamic animator calls the action block on every animation step.\n\nSee Also\nConfiguring a dynamic behavior\nfunc addChildBehavior(UIDynamicBehavior)\nAdds a dynamic behavior, as a child, to a custom dynamic behavior.\nvar childBehaviors: [UIDynamicBehavior]\nReturns the array of dynamic behaviors that are children of a custom dynamic behavior.\nfunc removeChildBehavior(UIDynamicBehavior)\nRemoves a child dynamic behavior from a custom dynamic behavior.\nRelated Documentation\nfunc willMove(to: UIDynamicAnimator?)\nCalled when the dynamic behavior is added to, or removed from, a dynamic animator."
  },
  {
    "title": "byUnion(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiregion/1621890-byunion",
    "html": "Parameters\nregion\n\nThe region to be combined with the current region.\n\nReturn Value\n\nA new region that contains the points from both the current region and the shape specified by the region parameter.\n\nDiscussion\n\nCombining any region with the infinite region returns the infinite region.\n\nSee Also\nCreating complex regions\nfunc inverse() -> Self\nReturns a new region that’s the mathematical inverse of the current region.\nfunc byDifference(from: UIRegion) -> Self\nReturns a new region created by subtracting the specified region from the current region.\nfunc byIntersection(with: UIRegion) -> Self\nReturns a new region containing only the area occupied by both the specified region and current region."
  },
  {
    "title": "UIModalPresentationStyle.blurOverFullScreen | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimodalpresentationstyle/bluroverfullscreen",
    "html": "See Also\nPresentations\ncase automatic\nThe default presentation style chosen by the system.\ncase none\nA presentation style that indicates no adaptations should be made.\ncase fullScreen\nA presentation style in which the presented view covers the screen.\ncase pageSheet\nA presentation style that partially covers the underlying content.\ncase formSheet\nA presentation style that displays the content centered in the screen.\ncase currentContext\nA presentation style where the content is displayed over another view controller’s content.\ncase custom\nA custom view presentation style that is managed by a custom presentation controller and one or more custom animator objects.\ncase overFullScreen\nA view presentation style in which the presented view covers the screen.\ncase overCurrentContext\nA presentation style where the content is displayed over another view controller’s content.\ncase popover\nA presentation style where the content is displayed in a popover view."
  },
  {
    "title": "completionVelocity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollertransitioncoordinatorcontext/1619282-completionvelocity",
    "html": "Required\n\nReturn Value\n\nThe completion velocity for the view controller transition. A value of 1.0 corresponds to an animation that would complete in the duration returned by the transitionDuration method. Higher values cause the animations to move faster by the corresponding factor and lower values cause it to move slower. The value of this property is always greater than 0.0.\n\nDiscussion\n\nThe completion velocity provides the starting speed to use at the end of an interactive animation. Setting the initial speed of your animations ensures that views don’t change velocity abruptly. This value is usually obtained from the completionVelocity property of the interactive animator object.\n\nSee Also\nGetting the behavior attributes\nvar presentationStyle: UIModalPresentationStyle\nThe presentation style to use for the transition.\n\nRequired\n\nvar transitionDuration: TimeInterval\nReturns the noninteractive duration of a transition.\n\nRequired\n\nvar completionCurve: UIView.AnimationCurve\nReturns the completion curve associated with the transition.\n\nRequired\n\nvar percentComplete: CGFloat\nReturns the percentage of completion for an interactive transition when it moves to its noninteractive phase.\n\nRequired"
  },
  {
    "title": "UIDropOperation.copy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidropoperation/copy",
    "html": "Discussion\n\nThis operation is used most often. When the user performs a drop activity, the dropInteraction(_:performDrop:) delegate method is called. Your implementation of this delegate method should copy the data from the drag items to the destination view.\n\nSee Also\nDrop operation types\ncase cancel\nA drop operation type specifying that no data should be transferred, thereby canceling the drag.\ncase forbidden\nA drop operation type specifying that, although a move or copy operation is typically legitimate in this scenario, the drop activity isn’t allowed.\ncase move\nA drop operation type specifying that the data represented by the drag items should be moved, not copied."
  },
  {
    "title": "UIDropOperation.move | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidropoperation/move",
    "html": "Discussion\n\nYou may use this operation only if the drop session’s allowsMoveOperation property is true; otherwise, it’s treated as a UIDropOperation.cancel operation. A move operation is allowed only within same app. Data shared with another app must be copied.\n\nThe system gives no special meaning to this operation. The UIDragInteractionDelegate object and the UIDropInteractionDelegate object must cooperate to produce the correct move results. For instance, the drop interaction delegate might insert the data in a new location while the drag interaction delegate removes the data from the old location.\n\nSee Also\nDrop operation types\ncase cancel\nA drop operation type specifying that no data should be transferred, thereby canceling the drag.\ncase forbidden\nA drop operation type specifying that, although a move or copy operation is typically legitimate in this scenario, the drop activity isn’t allowed.\ncase copy\nA drop operation type specifying that the data represented by the drag items should be copied to the destination view."
  },
  {
    "title": "percentComplete | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollertransitioncoordinatorcontext/1619290-percentcomplete",
    "html": "Required\n\nReturn Value\n\nThe percentage of completion when an interactive transition moves to its noninteractive completion phase.\n\nDiscussion\n\nUse this value to determine how much of the interactive transition completed before the transition was canceled or moved to its final animations.\n\nSee Also\nGetting the behavior attributes\nvar presentationStyle: UIModalPresentationStyle\nThe presentation style to use for the transition.\n\nRequired\n\nvar transitionDuration: TimeInterval\nReturns the noninteractive duration of a transition.\n\nRequired\n\nvar completionCurve: UIView.AnimationCurve\nReturns the completion curve associated with the transition.\n\nRequired\n\nvar completionVelocity: CGFloat\nReturns the starting velocity to use for any final animations.\n\nRequired"
  },
  {
    "title": "collisionDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollisionbehavior/1624828-collisiondelegate",
    "html": "See Also\nCustomizing the collision behavior\nprotocol UICollisionBehaviorDelegate\nTo respond to UIKit dynamic item collisions, configure a custom class to adopt the UICollisionBehaviorDelegate protocol. Then, in a collision behavior (an instance of the UICollisionBehavior class), set the delegate to be an instance of your custom class."
  },
  {
    "title": "addBoundary(withIdentifier:from:to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollisionbehavior/1624821-addboundary",
    "html": "Parameters\nidentifier\n\nAn arbitrary identifier for the boundary you are adding.\n\np1\n\nThe starting point for the boundary line segment.\n\np2\n\nThe ending point for the boundary line segment.\n\nDiscussion\n\nThis is a convenience method based on the addBoundary(withIdentifier:for:) method. The coordinate system and origin point for the p1 and p2 parameters depend on how you’ve initialized the dynamic animator (that you’re adding the behavior to). See the overview in UIDynamicAnimator for more information.\n\nSee Also\nConfiguring a collision behavior\nfunc addBoundary(withIdentifier: NSCopying, for: UIBezierPath)\nAdds a collision boundary, specified as a Bezier path, to the collision behavior.\nvar boundaryIdentifiers: [NSCopying]?\nThe set of boundary identifiers that you’ve added to the collision behavior.\nfunc boundary(withIdentifier: NSCopying) -> UIBezierPath?\nReturns a specified Bezier-path boundary.\nvar collisionMode: UICollisionBehavior.Mode\nThe type of edges that participate in collisions for the collision behavior.\nfunc removeAllBoundaries()\nRemoves all previously-specified collision boundaries from the collision behavior.\nfunc removeBoundary(withIdentifier: NSCopying)\nRemoves a specific collision boundary from the collision behavior.\nfunc setTranslatesReferenceBoundsIntoBoundary(with: UIEdgeInsets)\nSpecifies a collision boundary based on the bounds of the animation reference system, with optional insets.\nvar translatesReferenceBoundsIntoBoundary: Bool\nSpecifies whether a boundary based on the reference system is active."
  },
  {
    "title": "collisionMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollisionbehavior/1624832-collisionmode",
    "html": "Discussion\n\nTo specify collisionMode, use one of the values in the UICollisionBehavior.Mode enum. The default value is everything.\n\nSee Also\nConfiguring a collision behavior\nfunc addBoundary(withIdentifier: NSCopying, for: UIBezierPath)\nAdds a collision boundary, specified as a Bezier path, to the collision behavior.\nfunc addBoundary(withIdentifier: NSCopying, from: CGPoint, to: CGPoint)\nAdds a collision boundary, specified as a line segment, to the collision behavior.\nvar boundaryIdentifiers: [NSCopying]?\nThe set of boundary identifiers that you’ve added to the collision behavior.\nfunc boundary(withIdentifier: NSCopying) -> UIBezierPath?\nReturns a specified Bezier-path boundary.\nfunc removeAllBoundaries()\nRemoves all previously-specified collision boundaries from the collision behavior.\nfunc removeBoundary(withIdentifier: NSCopying)\nRemoves a specific collision boundary from the collision behavior.\nfunc setTranslatesReferenceBoundsIntoBoundary(with: UIEdgeInsets)\nSpecifies a collision boundary based on the bounds of the animation reference system, with optional insets.\nvar translatesReferenceBoundsIntoBoundary: Bool\nSpecifies whether a boundary based on the reference system is active."
  },
  {
    "title": "isAnimated | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollertransitioncoordinatorcontext/2097566-isanimated",
    "html": "Required\n\nDiscussion\n\nThe value of this property is false for custom transitions — transitions where the view controller’s modalPresentationStyle property is set to UIModalPresentationStyle.custom — even when the transition is started by a call to the animateTransition(using:) method. In nearly all other cases, the value of this property is true.\n\nSee Also\nGetting the transition state\nvar initiallyInteractive: Bool\nA Boolean value indicating whether the transition started as an interactive transition.\n\nRequired\n\nvar isInteractive: Bool\nA Boolean value indicating whether the transition is currently interactive.\n\nRequired\n\nvar isCancelled: Bool\nA Boolean value indicating whether an interactive transition was canceled.\n\nRequired\n\nvar isInterruptible: Bool\nA Boolean value indicating whether the transition animations can be interrupted.\n\nRequired"
  },
  {
    "title": "boundaryIdentifiers | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollisionbehavior/1624812-boundaryidentifiers",
    "html": "Discussion\n\nIf you haven’t added any boundary identifiers to the collision behavior, this property’s value is nil.\n\nSee Also\nConfiguring a collision behavior\nfunc addBoundary(withIdentifier: NSCopying, for: UIBezierPath)\nAdds a collision boundary, specified as a Bezier path, to the collision behavior.\nfunc addBoundary(withIdentifier: NSCopying, from: CGPoint, to: CGPoint)\nAdds a collision boundary, specified as a line segment, to the collision behavior.\nfunc boundary(withIdentifier: NSCopying) -> UIBezierPath?\nReturns a specified Bezier-path boundary.\nvar collisionMode: UICollisionBehavior.Mode\nThe type of edges that participate in collisions for the collision behavior.\nfunc removeAllBoundaries()\nRemoves all previously-specified collision boundaries from the collision behavior.\nfunc removeBoundary(withIdentifier: NSCopying)\nRemoves a specific collision boundary from the collision behavior.\nfunc setTranslatesReferenceBoundsIntoBoundary(with: UIEdgeInsets)\nSpecifies a collision boundary based on the bounds of the animation reference system, with optional insets.\nvar translatesReferenceBoundsIntoBoundary: Bool\nSpecifies whether a boundary based on the reference system is active."
  },
  {
    "title": "viewController(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollertransitioncoordinatorcontext/1619293-viewcontroller",
    "html": "Required\n\nParameters\nkey\n\nThe key indicating which view controller you want. For a list of possible values, see UITransitionContextViewControllerKey.\n\nReturn Value\n\nThe view controller associated with the key.\n\nDiscussion\n\nThe view controller associated with the from key corresponds to the view controller that’s already onscreen. The view controller associated with the to key corresponds to the view controller that’s to be animated onscreen.\n\nSee Also\nGetting the views and view controllers\nfunc view(forKey: UITransitionContextViewKey) -> UIView?\nReturns the specified view involved in the transition.\n\nRequired\n\nvar containerView: UIView\nReturns the view in which the transition takes place.\n\nRequired"
  },
  {
    "title": "completionSpeed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollerinteractivetransitioning/1622031-completionspeed",
    "html": "Return Value\n\nDefault value is 1.0, which corresponds to the total (noninteractive) transition duration scaled by the percentage of the transition remaining. Value must be greater than 0.0.\n\nSee Also\nProviding a transition’s completion characteristics\nvar completionCurve: UIView.AnimationCurve\nCalled when the system needs the animation completion curve for an interactive view controller transition."
  },
  {
    "title": "radialGravityField(position:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifieldbehavior/1624985-radialgravityfield",
    "html": "Parameters\nposition\n\nThe location of the gravitation force in the reference coordinate system. You can change this value later by modifying the position property.\n\nReturn Value\n\nA field behavior object that applies a gravitational force to items with mass.\n\nDiscussion\n\nThis field creates a gravitational force at the specified point in the referenced coordinate system. Dynamic items with mass are attracted to the specified point with a force that is proportional to their distance from the point.\n\nWhen setting the strength of the field, positive values attract items to the field’s position and negative values repel items. The force on the object can be determined by the equation F = ma. The force equals the mass of the object multiplied by the acceleration imposed by the gravitational field, which is determined by the strength of the field and the distance of the item from the field’s origin.\n\nSee Also\nGetting the field behaviors\nclass func dragField() -> Self\nCreates and returns a field behavior for slowing an object’s velocity.\nclass func springField() -> Self\nCreates and returns a spring field behavior.\nclass func velocityField(direction: CGVector) -> Self\nCreates and returns a field behavior object that applies a directional velocity to items.\nclass func electricField() -> Self\nCreates and returns a field behavior object that interacts with charged items.\nclass func magneticField() -> Self\nCreates and returns a field behavior that interacts with charged items.\nclass func linearGravityField(direction: CGVector) -> Self\nCreates and returns a field behavior object that models a linear gravitational force.\nclass func vortexField() -> Self\nCreates and returns a field behavior object that applies a rotational force relative to the field’s position.\nclass func noiseField(smoothness: CGFloat, animationSpeed: CGFloat) -> Self\nCreates and returns a field behavior object that applies random noise to other forces.\nclass func turbulenceField(smoothness: CGFloat, animationSpeed: CGFloat) -> Self\nCreates and returns a field behavior object that applies noise to an item in motion.\nclass func field(evaluationBlock: (UIFieldBehavior, CGPoint, CGVector, CGFloat, CGFloat, TimeInterval) -> CGVector) -> Self\nCreates and returns a field behavior object that applies an app-specified field to items."
  },
  {
    "title": "completionCurve | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollerinteractivetransitioning/1622027-completioncurve",
    "html": "Return Value\n\nDefault value is UIView.AnimationCurve.easeInOut, with other possible values described in the UIView.AnimationCurve type definition.\n\nSee Also\nProviding a transition’s completion characteristics\nvar completionSpeed: CGFloat\nCalled when the system needs the speed at which to complete an interactive transition, after the interactive portion is finished."
  },
  {
    "title": "startInteractiveTransition(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollerinteractivetransitioning/1622028-startinteractivetransition",
    "html": "Required\n\nParameters\ntransitionContext\n\nThe context object containing information about the transition.\n\nDiscussion\n\nYour implementation of this method should use the data in the transitionContext parameter to configure user interactivity for the transition and then start the animations. While tracking user interactions, your event handling code should regularly call the context object’s updateInteractiveTransition(_:) method to report on how much of the transition is now complete. If events indicate that the user has canceled the transition, call the cancelInteractiveTransition() method. If events indicate that the transition has finished, call the finishInteractiveTransition() method.\n\nSee Also\nStarting an interactive transition\nvar wantsInteractiveStart: Bool\nA Boolean value indicating whether the transition is interactive when it starts."
  },
  {
    "title": "removeItem(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifieldbehavior/1624993-removeitem",
    "html": "Parameters\nitem\n\nThe dynamic item whose behavior you want to modify.\n\nDiscussion\n\nUse this method to remove a field from a dynamic item in your interface. This method removes the specified dynamic item from the field behavior’s list of dynamic item.\n\nSee Also\nManaging the associated dynamic items\nfunc addItem(UIDynamicItem)\nAssociates the field behavior with the specified dynamic item.\nvar items: [UIDynamicItem]\nThe dynamic items associated with the current field behavior."
  },
  {
    "title": "linearGravityField(direction:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifieldbehavior/1624991-lineargravityfield",
    "html": "Parameters\ndirection\n\nThe vector indicating the direction of the gravitational force. You can change this value later by modifying the direction property.\n\nReturn Value\n\nA field behavior object that applies a directional gravitation force to items with mass.\n\nDiscussion\n\nThis field creates a directional gravitational force that applies uniformly to all dynamic items with mass. When setting the strength of the field, positive values attract items in the direction of the vector and negative values repel items. The force on a given item can be determined by the equation F = ma, where force equals the mass of the item multiplied by the acceleration imposed by the gravitational field, which with this type of field is constant.\n\nSee Also\nGetting the field behaviors\nclass func dragField() -> Self\nCreates and returns a field behavior for slowing an object’s velocity.\nclass func springField() -> Self\nCreates and returns a spring field behavior.\nclass func velocityField(direction: CGVector) -> Self\nCreates and returns a field behavior object that applies a directional velocity to items.\nclass func electricField() -> Self\nCreates and returns a field behavior object that interacts with charged items.\nclass func magneticField() -> Self\nCreates and returns a field behavior that interacts with charged items.\nclass func radialGravityField(position: CGPoint) -> Self\nCreates and returns a field behavior object that models a radial gravitational force.\nclass func vortexField() -> Self\nCreates and returns a field behavior object that applies a rotational force relative to the field’s position.\nclass func noiseField(smoothness: CGFloat, animationSpeed: CGFloat) -> Self\nCreates and returns a field behavior object that applies random noise to other forces.\nclass func turbulenceField(smoothness: CGFloat, animationSpeed: CGFloat) -> Self\nCreates and returns a field behavior object that applies noise to an item in motion.\nclass func field(evaluationBlock: (UIFieldBehavior, CGPoint, CGVector, CGFloat, CGFloat, TimeInterval) -> CGVector) -> Self\nCreates and returns a field behavior object that applies an app-specified field to items."
  },
  {
    "title": "items | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifieldbehavior/1625002-items",
    "html": "Discussion\n\nWhen it is enabled, the current field applies its behavior to all of the items in the array.\n\nSee Also\nManaging the associated dynamic items\nfunc addItem(UIDynamicItem)\nAssociates the field behavior with the specified dynamic item.\nfunc removeItem(UIDynamicItem)\nRemoves the field behavior from the specified dynamic item."
  },
  {
    "title": "removeItem(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollisionbehavior/1624830-removeitem",
    "html": "Parameters\nitem\n\nThe dynamic item that you want to remove.\n\nSee Also\nInitializing and managing a collision behavior\nfunc addItem(UIDynamicItem)\nAdds a dynamic item to the collision behavior’s item array.\ninit(items: [UIDynamicItem])\nInitializes a collision behavior with an array of dynamic items.\nvar items: [UIDynamicItem]\nReturns the set of dynamic items you’ve added to the collision behavior."
  },
  {
    "title": "items | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollisionbehavior/1624819-items",
    "html": "See Also\nInitializing and managing a collision behavior\nfunc addItem(UIDynamicItem)\nAdds a dynamic item to the collision behavior’s item array.\ninit(items: [UIDynamicItem])\nInitializes a collision behavior with an array of dynamic items.\nfunc removeItem(UIDynamicItem)\nRemoves a specific dynamic item from the collision behavior."
  },
  {
    "title": "main | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscreen/1617815-main",
    "html": "Return Value\n\nThe screen object for the device.\n\nDiscussion\n\nApple discourages the use of this symbol. Use a UIScreen instance found through context instead. For example, reference the screen that displays a view through the screen property on the window scene managing the window containing the view.\n\nSee Also\nDeprecated properties\nclass var screens: [UIScreen]\nReturns an array containing all of the screens attached to the device.\nDeprecated\nvar applicationFrame: CGRect\nThe frame rectangle for the app window, measured in points.\nDeprecated\nvar focusedItem: UIFocusItem?\nThe item that is currently focused.\nDeprecated\nvar focusedView: UIView?\nThe view that is currently focused.\nDeprecated\nvar supportsFocus: Bool\nA Boolean value that indicates whether the screen supports focus-based inputs.\nDeprecated"
  },
  {
    "title": "UIScreen.ReferenceDisplayModeStatus.enabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscreen/referencedisplaymodestatus/enabled",
    "html": "See Also\nStatuses\ncase notSupported\nA status that indicates the screen doesn’t provide a reference display mode.\ncase notEnabled\nA status that indicates the screen provides a reference display mode but it’s in a disabled state.\ncase limited\nA status that indicates the screen’s in a limited reference display mode."
  },
  {
    "title": "dragInteraction(_:sessionDidTransferItems:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidraginteractiondelegate/2891014-draginteraction",
    "html": "Parameters\ninteraction\n\nThe interaction that called this method.\n\nsession\n\nThe drag session that has ended.\n\nDiscussion\n\nImplement this method if you need to clean up resources related to the drag items or their item provider objects.\n\nSee Also\nMonitoring drag progress\nfunc dragInteraction(UIDragInteraction, sessionWillBegin: UIDragSession)\nTells the delegate the lift animation has finished and the user is starting to move the items across the screen.\nfunc dragInteraction(UIDragInteraction, session: UIDragSession, willAdd: [UIDragItem], for: UIDragInteraction)\nTells the delegate an interaction is about to add items to a drag session.\nfunc dragInteraction(UIDragInteraction, sessionDidMove: UIDragSession)\nTells the delegate the user moved the drag items to a new location on the screen.\nfunc dragInteraction(UIDragInteraction, session: UIDragSession, willEndWith: UIDropOperation)\nTells the delegate the drag activity will end with the specified operation.\nfunc dragInteraction(UIDragInteraction, session: UIDragSession, didEndWith: UIDropOperation)\nTells the delegate the drag activity and its related animations have finished."
  },
  {
    "title": "dragInteraction(_:sessionDidMove:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidraginteractiondelegate/2890988-draginteraction",
    "html": "Parameters\ninteraction\n\nThe interaction that called this method.\n\nsession\n\nThe current drag session.\n\nDiscussion\n\nTo get the new location, call the drag session's location(in:) method.\n\nSee Also\nMonitoring drag progress\nfunc dragInteraction(UIDragInteraction, sessionWillBegin: UIDragSession)\nTells the delegate the lift animation has finished and the user is starting to move the items across the screen.\nfunc dragInteraction(UIDragInteraction, session: UIDragSession, willAdd: [UIDragItem], for: UIDragInteraction)\nTells the delegate an interaction is about to add items to a drag session.\nfunc dragInteraction(UIDragInteraction, session: UIDragSession, willEndWith: UIDropOperation)\nTells the delegate the drag activity will end with the specified operation.\nfunc dragInteraction(UIDragInteraction, session: UIDragSession, didEndWith: UIDropOperation)\nTells the delegate the drag activity and its related animations have finished.\nfunc dragInteraction(UIDragInteraction, sessionDidTransferItems: UIDragSession)\nTells the delegate the destination view has received the data for the drag items."
  },
  {
    "title": "dragInteraction(_:previewForCancelling:withDefault:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidraginteractiondelegate/2890967-draginteraction",
    "html": "Parameters\ninteraction\n\nThe interaction that called this method.\n\nitem\n\nThe drag item represented by the preview.\n\ndefaultPreview\n\nA targeted drag preview provided by the system.\n\nReturn Value\n\nThe default preview provided by the system.\n\nA targeted drag item preview you create.\n\nThe preview returned after moving to a new preview target (using the defaultPreview's retargetedPreview(with:) method).\n\nnil to fade the preview that is currently displayed to the user, which is the same behavior as not implementing this method.\n\nDiscussion\n\nThe system calls this method multiple times, once for each visible drag item.\n\nWhen you return a preview, the system shows it during the cancellation animation in order to visually \"move\" the drag item to the location of the preview's associated view.\n\nSee Also\nProviding drag previews\nfunc dragInteraction(UIDragInteraction, previewForLifting: UIDragItem, session: UIDragSession) -> UITargetedDragPreview?\nAsks the delegate for the targeted drag item preview that will appear during the lift animation.\nfunc dragInteraction(UIDragInteraction, prefersFullSizePreviewsFor: UIDragSession) -> Bool\nAsks the delegate whether the preview should appear in its original size or a scaled size."
  },
  {
    "title": "dragInteraction(_:previewForLifting:session:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidraginteractiondelegate/2891057-draginteraction",
    "html": "Parameters\ninteraction\n\nThe interaction that called this method.\n\nitem\n\nThe drag item represented by the preview.\n\nsession\n\nThe current drag session.\n\nReturn Value\n\nA targeted drag item preview you create, or nil to tell the system not to display the lift animation.\n\nDiscussion\n\nIf you don't provide this method, the system creates a preview based on the view owned by the drag interaction.\n\nSee Also\nProviding drag previews\nfunc dragInteraction(UIDragInteraction, previewForCancelling: UIDragItem, withDefault: UITargetedDragPreview) -> UITargetedDragPreview?\nAsks the delegate for the targeted drag item preview to show during the cancellation animation.\nfunc dragInteraction(UIDragInteraction, prefersFullSizePreviewsFor: UIDragSession) -> Bool\nAsks the delegate whether the preview should appear in its original size or a scaled size."
  },
  {
    "title": "removeItem(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipushbehavior/1623343-removeitem",
    "html": "Parameters\nitem\n\nThe dynamic item that you want to remove.\n\nSee Also\nInitializing and managing a push behavior\nvar active: Bool\nThe state of the push behavior’s force: either active or inactive.\nfunc addItem(UIDynamicItem)\nAdds a dynamic item to the behavior’s dynamic item array.\ninit(items: [UIDynamicItem], mode: UIPushBehavior.Mode)\nInitializes a push behavior with an array of dynamic items.\nvar items: [UIDynamicItem]\nReturns the set of dynamic items you’ve added to the push behavior."
  },
  {
    "title": "prefersFullSizePreview | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidropproposal/2890884-prefersfullsizepreview",
    "html": "Discussion\n\nSet prefersFullSizePreview to true to show the preview at its original size, not scaled down to a smaller size. For example, you might set this property to true when the user moves items from a nearby view and scaling down the preview is distracting.\n\nThis property applies only to drag and drop activities performed within the same app.\n\nSee Also\nConfiguring a drop proposal\nvar isPrecise: Bool\nA Boolean value that proposes that the drop interaction define the drop location precisely, such as at a specific point within existing text."
  },
  {
    "title": "dragInteraction(_:willAnimateLiftWith:session:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidraginteractiondelegate/2891005-draginteraction",
    "html": "Parameters\ninteraction\n\nThe interaction that called this method.\n\nanimator\n\nThe animator that provides custom animations to run alongside the system's lift animation. You can also use it to add a completion block that runs after the animations have finished.\n\nsession\n\nThe current drag session.\n\nDiscussion\n\nTo add a custom animation block that runs during the lift animation, pass the block to the animator's addAnimations(_:) method.\n\nTo add a completion block that runs after the lift animation has finished, pass the block to the animator's addCompletion(_:) method.\n\nSee Also\nAnimating the drag behaviors\nfunc dragInteraction(UIDragInteraction, item: UIDragItem, willAnimateCancelWith: UIDragAnimating)\nTells the delegate the system's cancellation animation is about to start."
  },
  {
    "title": "shouldAllow(_:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uispringloadedinteractionbehavior/2897297-shouldallow",
    "html": "Required\n\nParameters\ninteraction\n\nThe spring-loaded interaction requesting the information.\n\ncontext\n\nAn object that provides information about the current drag operation.\n\nReturn Value\n\ntrue if the spring-loaded interaction should begin or continue; otherwise, false."
  },
  {
    "title": "animate(alongsideTransition:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollertransitioncoordinator/1619300-animate",
    "html": "Required\n\nParameters\nanimation\n\nA block containing the animations you want to perform. These animations run in the same context as the transition animations and therefore have the same default attributes. You may specify nil for this parameter.\n\nThe block has no return value and takes the following parameter:\n\ncontext\n\nThe contextual information for performing the animations. Use this object to get the animation-related information, including the container view in which to run your animations. For more information, see UIViewControllerTransitionCoordinatorContext.\n\nThe animation you specify must take place in a view descended from the container view.\n\ncompletion\n\nThe block of code to execute after the transition finishes. You may specify nil for this parameter. The block has no return value and takes the following parameter:\n\ncontext\n\nThe contextual information for performing the animations. Use this object to get the animation-related information, including the container view in which to run your animations. For more information, see UIViewControllerTransitionCoordinatorContext.\n\nReturn Value\n\ntrue if the animations were successfully queued to run or false if they were not.\n\nDiscussion\n\nUse this method to perform animations that aren’t handled by the animator objects themselves. All of the animations you specify must occur inside the animation context’s container view (or one of its descendants). Use the containerView property of the context object to get the container view. To perform animations in a view that doesn’t descend from the container view, use the animateAlongsideTransition(in:animation:completion:) method instead.\n\nThe animations in the animation parameter are normally performed concurrently with the view controller transition animations. That behavior applies when the animator object’s animateTransition(using:) method is implemented using UIView-based animations. If the animator object uses Core Animation to animate the layer contents directly, your animations are run shortly after the animateTransition: method returns.\n\nThis method returns false when the block in the animation parameter can’t be queued to run. The completion block can still run even when this method returns false.\n\nSee Also\nResponding to view controller transition progress\nfunc animateAlongsideTransition(in: UIView?, animation: ((UIViewControllerTransitionCoordinatorContext) -> Void)?, completion: ((UIViewControllerTransitionCoordinatorContext) -> Void)?) -> Bool\nRuns the specified animations in a view that’s outside of the designated container view.\n\nRequired\n\nfunc notifyWhenInteractionChanges((UIViewControllerTransitionCoordinatorContext) -> Void)\nRegisters a block to be executed when a transition changes from interactive to non-interactive.\n\nRequired\n\nfunc notifyWhenInteractionEnds((UIViewControllerTransitionCoordinatorContext) -> Void)\nRegisters a block to be executed when a transition changes from interactive to non-interactive.\n\nRequired\n\nDeprecated"
  },
  {
    "title": "presentationStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollercontexttransitioning/1622049-presentationstyle",
    "html": "Required\n\nReturn Value\n\nThe presentation style to use when presenting the final view controller.\n\nSee Also\nGetting the transition behaviors\nvar isAnimated: Bool\nA Boolean value indicating whether the transition should be animated.\n\nRequired\n\nvar isInteractive: Bool\nA Boolean value indicating whether the transition is currently interactive.\n\nRequired"
  },
  {
    "title": "pauseInteractiveTransition() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollercontexttransitioning/1829437-pauseinteractivetransition",
    "html": "Required\n\nDiscussion\n\nYou can call this method in the middle of an interruptible animation to pause it.\n\nSee Also\nReporting the transition progress\nfunc completeTransition(Bool)\nNotifies the system that the transition animation is done.\n\nRequired\n\nfunc updateInteractiveTransition(CGFloat)\nUpdates the completion percentage of the transition.\n\nRequired\n\nfunc finishInteractiveTransition()\nNotifies the system that user interactions signaled the completion of the transition.\n\nRequired\n\nfunc cancelInteractiveTransition()\nNotifies the system that user interactions canceled the transition.\n\nRequired\n\nvar transitionWasCancelled: Bool\nReturns a Boolean value indicating whether the transition was canceled.\n\nRequired"
  },
  {
    "title": "UITransitionContextViewControllerKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitransitioncontextviewcontrollerkey",
    "html": "Topics\nKeys\nstatic let from: UITransitionContextViewControllerKey\nA key that identifies the view controller that’s visible at the beginning of the transition, or at the end of a canceled transition.\nstatic let to: UITransitionContextViewControllerKey\nA key that identifies the view controller that’s visible at the end of a completed transition.\nInitializers\ninit(rawValue: String)\nCreates a key to identify the view controllers in a transition.\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable"
  },
  {
    "title": "UIModalPresentationStyle.fullScreen | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimodalpresentationstyle/fullscreen",
    "html": "Discussion\n\nThe views belonging to the presenting view controller are removed after the presentation completes.\n\nSee Also\nPresentations\ncase automatic\nThe default presentation style chosen by the system.\ncase none\nA presentation style that indicates no adaptations should be made.\ncase pageSheet\nA presentation style that partially covers the underlying content.\ncase formSheet\nA presentation style that displays the content centered in the screen.\ncase currentContext\nA presentation style where the content is displayed over another view controller’s content.\ncase custom\nA custom view presentation style that is managed by a custom presentation controller and one or more custom animator objects.\ncase overFullScreen\nA view presentation style in which the presented view covers the screen.\ncase overCurrentContext\nA presentation style where the content is displayed over another view controller’s content.\ncase popover\nA presentation style where the content is displayed in a popover view.\ncase blurOverFullScreen\nA presentation style that blurs the underlying content before displaying new content in a full-screen presentation."
  },
  {
    "title": "cancel() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipercentdriveninteractivetransition/1622026-cancel",
    "html": "Discussion\n\nThis is a convenience method that calls through to the cancelInteractiveTransition() method of the context object.\n\nWhile tracking user interactions, your gesture recognizer or event-handling code would call this method when interactions suggest that the user wants to cancel or abort the view controller transition. For example, if the user reverses the swipe direction and then touch events end, suggesting that the user decided against the transition, you would call this method.\n\nSee Also\nManaging a transition\nfunc update(CGFloat)\nUpdates the completion percentage of the transition.\nfunc pause()\nPauses an interruptible transition animation.\nfunc finish()\nNotifies the system that user interactions signaled the completion of the transition."
  },
  {
    "title": "UITransitionContextViewKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitransitioncontextviewkey",
    "html": "Topics\nKeys\nstatic let from: UITransitionContextViewKey\nA key that identifies the view shown at the beginning of the transition, or at the end of a canceled transition.\nstatic let to: UITransitionContextViewKey\nA key that identifies the view shown at the end of a completed transition.\nInitializers\ninit(rawValue: String)\nCreates a key to identify the views in a transition.\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable"
  },
  {
    "title": "UIModalPresentationStyle.overFullScreen | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimodalpresentationstyle/overfullscreen",
    "html": "Discussion\n\nThe views beneath the presented content are not removed from the view hierarchy when the presentation finishes. So if the presented view controller does not fill the screen with opaque content, the underlying content shows through.\n\nSee Also\nPresentations\ncase automatic\nThe default presentation style chosen by the system.\ncase none\nA presentation style that indicates no adaptations should be made.\ncase fullScreen\nA presentation style in which the presented view covers the screen.\ncase pageSheet\nA presentation style that partially covers the underlying content.\ncase formSheet\nA presentation style that displays the content centered in the screen.\ncase currentContext\nA presentation style where the content is displayed over another view controller’s content.\ncase custom\nA custom view presentation style that is managed by a custom presentation controller and one or more custom animator objects.\ncase overCurrentContext\nA presentation style where the content is displayed over another view controller’s content.\ncase popover\nA presentation style where the content is displayed in a popover view.\ncase blurOverFullScreen\nA presentation style that blurs the underlying content before displaying new content in a full-screen presentation."
  },
  {
    "title": "location(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uispringloadedinteractioncontext/2897468-location",
    "html": "Required\n\nParameters\nview\n\nThe view that is used to determine the location of the drag activity.\n\nReturn Value\n\nA point in the local coordinate system of view.\n\nDiscussion\n\nTo get the location of the drag activity within the window, use nil for the view."
  },
  {
    "title": "UIDropSessionProgressIndicatorStyle.none | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidropsessionprogressindicatorstyle/none",
    "html": "See Also\nProgress indicator styles\ncase `default`\nThe indicator style for using the system’s default drop-progress indication."
  },
  {
    "title": "setTargetOffsetFromCenter(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipushbehavior/1623341-settargetoffsetfromcenter",
    "html": "Parameters\no\n\nThe offset, from the center of the dynamic item, at which to apply the push behavior’s force vector.\n\nitem\n\nThe dynamic item for which you’re setting a target offset.\n\nDiscussion\n\nIf you don’t set a target offset for a dynamic item, a push behavior’s force vector is applied at the item center.\n\nSee Also\nConfiguring a push behavior\nfunc setAngle(CGFloat, magnitude: CGFloat)\nSets the angle and magnitude of the force vector for the behavior.\nvar angle: CGFloat\nThe angle, in radians, of the force vector for the behavior.\nvar magnitude: CGFloat\nThe magnitude of the force vector for the push behavior.\nvar mode: UIPushBehavior.Mode\nReturns the force mode for the push behavior.\nfunc targetOffsetFromCenter(for: UIDynamicItem) -> UIOffset\nReturns the offset, from the center of a dynamic item, at which the push behavior’s force vector is applied.\nvar pushDirection: CGVector\nThe direction of the force vector for the behavior, expressed as x and y components and using standard UIKit geometry."
  },
  {
    "title": "magnitude | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uigravitybehavior/1620418-magnitude",
    "html": "Discussion\n\nModify this property when you want to change the magnitude of the gravity vector separately from the angle of that vector. A magnitude value of 1.0 represents an acceleration of 1000 points / second² at the specified angle, which roughly approximates the force of Earth’s gravity. The value in this property is tied to the value in the gravityDirection property, so changes in one affect the other.\n\nThe default value of this property is 1.0.\n\nImportant\n\nSetting the value of this property to 0.0 creates the vector (0.0, 0.0) and resets the angle property to 0.0 radians. If you make subsequent changes to this property, also remember to update the angle property.\n\nSee Also\nConfiguring a gravity behavior\nvar gravityDirection: CGVector\nThe direction and magnitude of the gravitational force, expressed as a vector.\nvar angle: CGFloat\nThe direction of the gravity vector, expressed in radians in the reference coordinate system.\nfunc setAngle(CGFloat, magnitude: CGFloat)\nSets the angle and magnitude of the gravity vector for the behavior."
  },
  {
    "title": "removeItem(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uigravitybehavior/1620422-removeitem",
    "html": "Parameters\nitem\n\nThe dynamic item that you want to remove. If the specified item is not associated with the behavior, this method does nothing.\n\nDiscussion\n\nIf the gravity behavior has an associated dynamic animator, this method notifies the dynamic animator of the removal of the item so that it can stop any associated animations.\n\nSee Also\nManaging a gravity behavior’s items\nvar items: [UIDynamicItem]\nThe set of dynamic items associated with the gravity behavior.\nfunc addItem(UIDynamicItem)\nAssociates the specified dynamic item with the gravity behavior."
  },
  {
    "title": "addItem(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uigravitybehavior/1620415-additem",
    "html": "Parameters\nitem\n\nThe dynamic item to add to the item array. If the specified item is already associated with the gravity behavior, this method does nothing.\n\nDiscussion\n\nUse this method to add new dynamic items to the gravity behavior after initialization. All the dynamic items added to a gravity behavior are subject to the same gravity vector.\n\nIf the gravity behavior has an associated dynamic animator, this method notifies the dynamic animator of the presence of the new item so that it can initiate any needed animations.\n\nSee Also\nManaging a gravity behavior’s items\nvar items: [UIDynamicItem]\nThe set of dynamic items associated with the gravity behavior.\nfunc removeItem(UIDynamicItem)\nRemoves the specified dynamic item from the gravity behavior."
  },
  {
    "title": "active | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipushbehavior/1623336-active",
    "html": "Discussion\n\nAfter you’ve added a push behavior to a dynamic animator, use this property to activate or deactivate the behavior’s force (rather than removing and then re-adding the behavior to the animator).\n\nSee Also\nInitializing and managing a push behavior\nfunc addItem(UIDynamicItem)\nAdds a dynamic item to the behavior’s dynamic item array.\ninit(items: [UIDynamicItem], mode: UIPushBehavior.Mode)\nInitializes a push behavior with an array of dynamic items.\nfunc removeItem(UIDynamicItem)\nRemoves a specific dynamic item from the behavior.\nvar items: [UIDynamicItem]\nReturns the set of dynamic items you’ve added to the push behavior."
  },
  {
    "title": "targetOffsetFromCenter(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipushbehavior/1623338-targetoffsetfromcenter",
    "html": "Parameters\nitem\n\nThe dynamic item for which you’re retrieving the target offset.\n\nReturn Value\n\nThe offset, from the center of the dynamic item, at which the push behavior’s force vector is applied. If you haven’t set a target offset, returns the center of the dynamic item.\n\nSee Also\nConfiguring a push behavior\nfunc setAngle(CGFloat, magnitude: CGFloat)\nSets the angle and magnitude of the force vector for the behavior.\nvar angle: CGFloat\nThe angle, in radians, of the force vector for the behavior.\nvar magnitude: CGFloat\nThe magnitude of the force vector for the push behavior.\nvar mode: UIPushBehavior.Mode\nReturns the force mode for the push behavior.\nfunc setTargetOffsetFromCenter(UIOffset, for: UIDynamicItem)\nSets the offset, from the center of a dynamic item, at which to apply the push behavior’s force vector.\nvar pushDirection: CGVector\nThe direction of the force vector for the behavior, expressed as x and y components and using standard UIKit geometry."
  },
  {
    "title": "magnitude | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipushbehavior/1623330-magnitude",
    "html": "Discussion\n\nThe default magnitude is 0.0, equivalent to no force. A continuous force vector with a magnitude of 1.0, applied to a 100 point x 100 point view whose density value is 1.0, results in view acceleration of 100 points / second² in the direction indicated by the angle or pushDirection property.\n\nSetting the magnitude parameter to a negative value reverses the direction of the force.\n\nSee Also\nConfiguring a push behavior\nfunc setAngle(CGFloat, magnitude: CGFloat)\nSets the angle and magnitude of the force vector for the behavior.\nvar angle: CGFloat\nThe angle, in radians, of the force vector for the behavior.\nvar mode: UIPushBehavior.Mode\nReturns the force mode for the push behavior.\nfunc setTargetOffsetFromCenter(UIOffset, for: UIDynamicItem)\nSets the offset, from the center of a dynamic item, at which to apply the push behavior’s force vector.\nfunc targetOffsetFromCenter(for: UIDynamicItem) -> UIOffset\nReturns the offset, from the center of a dynamic item, at which the push behavior’s force vector is applied.\nvar pushDirection: CGVector\nThe direction of the force vector for the behavior, expressed as x and y components and using standard UIKit geometry."
  },
  {
    "title": "items | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipushbehavior/1623339-items",
    "html": "See Also\nInitializing and managing a push behavior\nvar active: Bool\nThe state of the push behavior’s force: either active or inactive.\nfunc addItem(UIDynamicItem)\nAdds a dynamic item to the behavior’s dynamic item array.\ninit(items: [UIDynamicItem], mode: UIPushBehavior.Mode)\nInitializes a push behavior with an array of dynamic items.\nfunc removeItem(UIDynamicItem)\nRemoves a specific dynamic item from the behavior."
  },
  {
    "title": "init(items:mode:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipushbehavior/1623329-init",
    "html": "Parameters\nitems\n\nThe dynamic items that you want to be subject to the push behavior.\n\nmode\n\nThe mode for the new push behavior; one of the values defined in the UIPushBehavior.Mode enumeration. You must supply a value.\n\nReturn Value\n\nThe initialized push behavior, or nil if there was a problem initializing the object.\n\nSee Also\nInitializing and managing a push behavior\nvar active: Bool\nThe state of the push behavior’s force: either active or inactive.\nfunc addItem(UIDynamicItem)\nAdds a dynamic item to the behavior’s dynamic item array.\nfunc removeItem(UIDynamicItem)\nRemoves a specific dynamic item from the behavior.\nvar items: [UIDynamicItem]\nReturns the set of dynamic items you’ve added to the push behavior."
  },
  {
    "title": "infinite | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiregion/1621896-infinite",
    "html": "Return Value\n\nA shared region object that encompasses an infinite area.\n\nSee Also\nCreating and initializing regions\ninit(size: CGSize)\nInitializes and returns a rectangular region of the specified size.\ninit(radius: CGFloat)\nInitializes and returns a region with a circular shape of the specified radius."
  },
  {
    "title": "byDifference(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiregion/1621892-bydifference",
    "html": "Parameters\nregion\n\nThe region to be subtracted from the current region.\n\nReturn Value\n\nA new region that contains the points that are in the current region and not in the area defined by the region parameter.\n\nSee Also\nCreating complex regions\nfunc inverse() -> Self\nReturns a new region that’s the mathematical inverse of the current region.\nfunc byIntersection(with: UIRegion) -> Self\nReturns a new region containing only the area occupied by both the specified region and current region.\nfunc byUnion(with: UIRegion) -> Self\nReturns a new region containing the combined areas of the specified region and the current region."
  },
  {
    "title": "byIntersection(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiregion/1621895-byintersection",
    "html": "Parameters\nregion\n\nThe region to be intersected with the current region.\n\nReturn Value\n\nA new region that contains only the points that are in both the current region and the shape specified by the region parameter.\n\nSee Also\nCreating complex regions\nfunc inverse() -> Self\nReturns a new region that’s the mathematical inverse of the current region.\nfunc byDifference(from: UIRegion) -> Self\nReturns a new region created by subtracting the specified region from the current region.\nfunc byUnion(with: UIRegion) -> Self\nReturns a new region containing the combined areas of the specified region and the current region."
  },
  {
    "title": "addChildBehavior(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidynamicbehavior/1618496-addchildbehavior",
    "html": "Parameters\nbehavior\n\nThe dynamic behavior you want to add as a child.\n\nThe parent behavior ignores your use of this method if you:\n\nProvide a nil value\n\nProvide a behavior instance that you’ve already added to the behavior\n\nDiscussion\n\nCall this method only on custom subclasses of the UIDynamicBehavior class.\n\nSee Also\nConfiguring a dynamic behavior\nvar action: (() -> Void)?\nThe block you want to execute during dynamic animation.\nvar childBehaviors: [UIDynamicBehavior]\nReturns the array of dynamic behaviors that are children of a custom dynamic behavior.\nfunc removeChildBehavior(UIDynamicBehavior)\nRemoves a child dynamic behavior from a custom dynamic behavior."
  },
  {
    "title": "addBehavior(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidynamicanimator/1621189-addbehavior",
    "html": "Parameters\nbehavior\n\nThe dynamic behavior instance you are adding.\n\nThe dynamic animator ignores your use of this method if you:\n\nProvide a nil value\n\nProvide a behavior instance that you’ve already added to the animator at the same level in the behavior hierarchy\n\nImportant\n\nThe dynamic animator raises an exception if you provide a behavior instance that you’ve already added to the animator at a different level in the behavior hierarchy.\n\nSee Also\nInitializing and managing a dynamic animator\ninit(referenceView: UIView)\nInitializes a dynamic animator with a specified view as its reference view.\ninit(collectionViewLayout: UICollectionViewLayout)\nInitializes a dynamic animator with a specified collection view layout.\nfunc items(in: CGRect) -> [UIDynamicItem]\nReturns the dynamic items, from the animator’s behaviors, that intersect a specified rectangle.\nfunc removeBehavior(UIDynamicBehavior)\nRemoves a specified dynamic behavior from a dynamic animator.\nfunc removeAllBehaviors()\nRemoves all of the dynamic behaviors from a dynamic animator."
  },
  {
    "title": "damping | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisnapbehavior/1621012-damping",
    "html": "Discussion\n\nThe valid range for damping extends from 0.0, for maximum oscillation, through 1.0, for minimum oscillation. The default value is 0.5.\n\nSee Also\nConfiguring a snap behavior\nvar snapPoint: CGPoint\nThe point to which to snap."
  },
  {
    "title": "snapPoint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisnapbehavior/1621013-snappoint",
    "html": "Discussion\n\nThe initial value of this property is the value you passed in to the init(item:snapTo:) method. Changing this value updates the dynamic item and potentially puts it in motion again.\n\nThe coordinate system of the point depends on how you initialized the underlying dynamic animator, as described in the overview of UIDynamicAnimator.\n\nSee Also\nConfiguring a snap behavior\nvar damping: CGFloat\nThe amount of oscillation of a dynamic item during the conclusion of a snap."
  },
  {
    "title": "init(item:snapTo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisnapbehavior/1621011-init",
    "html": "Parameters\nitem\n\nThe dynamic item that you want to apply a snap behavior to.\n\npoint\n\nThe point that you want the dynamic item to snap to. The coordinate system for the point parameter depends on how you initialize the dynamic animator you’re adding the snap behavior to, as described in the overview of UIDynamicAnimator.\n\nReturn Value\n\nThe initialized snap behavior, or nil if there was a problem initializing the object.\n\nDiscussion\n\nAt the conclusion of a snap, the rotation value (as indicated by the transform property) for a dynamic item is 0."
  },
  {
    "title": "keyPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiinterpolatingmotioneffect/1622378-keypath",
    "html": "Discussion\n\nThis property must correspond to an animatable property of the view to which the motion effect is attached.\n\nSee Also\nAccessing the motion attributes\nvar type: UIInterpolatingMotionEffect.EffectType\nThe tilt direction to monitor.\nvar minimumRelativeValue: Any?\nThe value that maps to the minimum viewer offset.\nvar maximumRelativeValue: Any?\nThe value that maps to the maximum viewer offset."
  },
  {
    "title": "UIInterpolatingMotionEffect.EffectType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiinterpolatingmotioneffect/effecttype",
    "html": "Topics\nConstants\ncase tiltAlongHorizontalAxis\nInterpolate values along the horizontal axis, which involves the device facing left or right of the user’s viewpoint.\ncase tiltAlongVerticalAxis\nInterpolate values along the vertical axis, which involves the device facing above or below the user’s viewpoint.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "init(keyPath:type:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiinterpolatingmotioneffect/1622372-init",
    "html": "Parameters\nkeyPath\n\nThe key path of the view that you want to modify. This path must correspond to an animatable property of the view on which this motion effect is applied. For example, to update the center property of the view, specify the string “center”.\n\ntype\n\nThe type of motion to track. You can track horizontal or vertical tilt. For a list of possible values, see UIInterpolatingMotionEffect.EffectType.\n\nReturn Value\n\nAn initialized interpolating motion effect object.\n\nSee Also\nInitializing a motion effect\ninit?(coder: NSCoder)\nCreates a motion effect from data in an unarchiver."
  },
  {
    "title": "keyPathsAndRelativeValues(forViewerOffset:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimotioneffect/1622380-keypathsandrelativevalues",
    "html": "Parameters\nviewerOffset\n\nThe direction that the device is facing relative to the viewer. The range of each offset value is -1 to 1. When the device’s screen is pointed directly at the user, the offset values are (0, 0). Rotating the phone so that the screen points down or to the right of the viewer yields a positive value. Rotating the phone so that the screen points above the user or to the user’s left yields a negative value.\n\nReturn Value\n\nA dictionary containing one or more key path strings representing the properties of the view to modify. The value associated with each key path string is the value to add to the given property—that is, it is the amount by which to change the current value of the property. Specify each key path relative to the view containing the motion effect object.\n\nDiscussion\n\nSubclasses must override this method and use it to return the values to apply to a view when the user changes the relative orientation of the device’s screen. iOS computes the viewer offset values and calls this method so that subclassers can decide how that offset affects the underlying views. For example, you might use this method to modify the position of the view and its layer to give the view some visual depth.\n\nNSDictionary* dict = @{\n                         @\"center\" : [NSValue valueWithCGPoint:CGPointMake(3.4, 1.2)],                           @\"layer.shadowOffset.width\" : @(-1.1)\n                      };\n\n\nThe key paths you return in the dictionary must refer to animatable properties. The motion effect object uses the returned information to animate the view’s properties to the new values. You can animate properties of the view, its layer, or any subviews that are accessible from the view’s properties."
  },
  {
    "title": "type | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiinterpolatingmotioneffect/1622377-type",
    "html": "See Also\nAccessing the motion attributes\nvar keyPath: String\nThe key path you want to modify on the view.\nvar minimumRelativeValue: Any?\nThe value that maps to the minimum viewer offset.\nvar maximumRelativeValue: Any?\nThe value that maps to the maximum viewer offset."
  },
  {
    "title": "maximumRelativeValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiinterpolatingmotioneffect/1622376-maximumrelativevalue",
    "html": "Discussion\n\nThe value in this property is the value returned when the viewer offset value along the given axis is 1.\n\nSee Also\nAccessing the motion attributes\nvar keyPath: String\nThe key path you want to modify on the view.\nvar type: UIInterpolatingMotionEffect.EffectType\nThe tilt direction to monitor.\nvar minimumRelativeValue: Any?\nThe value that maps to the minimum viewer offset."
  },
  {
    "title": "minimumRelativeValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiinterpolatingmotioneffect/1622365-minimumrelativevalue",
    "html": "Discussion\n\nThe value in this property is the value returned when the viewer offset value along the given axis is -1.\n\nSee Also\nAccessing the motion attributes\nvar keyPath: String\nThe key path you want to modify on the view.\nvar type: UIInterpolatingMotionEffect.EffectType\nThe tilt direction to monitor.\nvar maximumRelativeValue: Any?\nThe value that maps to the maximum viewer offset."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiinterpolatingmotioneffect/1622368-init",
    "html": "See Also\nInitializing a motion effect\ninit(keyPath: String, type: UIInterpolatingMotionEffect.EffectType)\nInitializes and returns an interpolating motion effect object configured for the specific tilt direction."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimotioneffect/1622371-init",
    "html": "See Also\nInitializing a motion effect\ninit()\nInitializes the motion effect to its default state."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimotioneffect/1622375-init",
    "html": "See Also\nInitializing a motion effect\ninit?(coder: NSCoder)\nCreates a motion effect from data in an unarchiver."
  },
  {
    "title": "wantsInteractiveStart | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollerinteractivetransitioning/1829433-wantsinteractivestart",
    "html": "Discussion\n\nThe value of this property is true when the transition is interactive from the moment it starts. The property is false when the transition starts off as noninteractive. However, even a transition that starts off as noninteractive may become interactive later if it implements the interruptibleAnimator(using:) method of the UIViewControllerAnimatedTransitioning protocol.\n\nSee Also\nStarting an interactive transition\nfunc startInteractiveTransition(UIViewControllerContextTransitioning)\nCalled when the system needs to set up the interactive portions of a view controller transition and start the animations.\n\nRequired"
  },
  {
    "title": "duration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipercentdriveninteractivetransition/1622029-duration",
    "html": "Discussion\n\nThis property reflects the duration of the transition animation if it were to occur without user interactions. It is obtained from the standard animator object returned by your delegate. The actual duration can vary depending on the user interactions you are tracking and responding to.\n\nSee Also\nAccessing transition attributes\nvar timingCurve: UITimingCurveProvider?\nThe timing curve to use when driving the animations.\nvar completionCurve: UIView.AnimationCurve\nIndicates the animation completion curve for an interactive transition.\nvar percentComplete: CGFloat\nThe amount of the transition (specified as a percentage of the overall duration) that’s complete.\nvar completionSpeed: CGFloat\nThe speed of the transition animation.\nvar wantsInteractiveStart: Bool\nA Boolean value indicating whether the animations are interactive initially.\nRelated Documentation\nfunc transitionDuration(using: UIViewControllerContextTransitioning?) -> TimeInterval\nAsks your animator object for the duration (in seconds) of the transition animation."
  },
  {
    "title": "timingCurve | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipercentdriveninteractivetransition/1829439-timingcurve",
    "html": "See Also\nAccessing transition attributes\nvar completionCurve: UIView.AnimationCurve\nIndicates the animation completion curve for an interactive transition.\nvar duration: CGFloat\nThe overall duration (in seconds) of the transition animation.\nvar percentComplete: CGFloat\nThe amount of the transition (specified as a percentage of the overall duration) that’s complete.\nvar completionSpeed: CGFloat\nThe speed of the transition animation.\nvar wantsInteractiveStart: Bool\nA Boolean value indicating whether the animations are interactive initially."
  },
  {
    "title": "containerView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollertransitioncoordinatorcontext/1619280-containerview",
    "html": "Required\n\nReturn Value\n\nThe container view for the transition animation.\n\nDiscussion\n\nThe container view acts as the host view for any animations between the transitioning view controllers. When animating your own custom views, add them to the container view if you want them to interoperate with the view controllers’ views.\n\nSee Also\nGetting the views and view controllers\nfunc viewController(forKey: UITransitionContextViewControllerKey) -> UIViewController?\nReturns the view controllers involved in the transition.\n\nRequired\n\nfunc view(forKey: UITransitionContextViewKey) -> UIView?\nReturns the specified view involved in the transition.\n\nRequired"
  },
  {
    "title": "UIScreen.ReferenceDisplayModeStatus.notSupported | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscreen/referencedisplaymodestatus/notsupported",
    "html": "See Also\nStatuses\ncase notEnabled\nA status that indicates the screen provides a reference display mode but it’s in a disabled state.\ncase limited\nA status that indicates the screen’s in a limited reference display mode.\ncase enabled\nA status that indicates the screen’s in an accurate reference display mode."
  },
  {
    "title": "UIScreen.ReferenceDisplayModeStatus.limited | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscreen/referencedisplaymodestatus/limited",
    "html": "Discussion\n\nThe screen may be unable to provide an accurate reference display mode due to thermal or power constraints.\n\nSee Also\nStatuses\ncase notSupported\nA status that indicates the screen doesn’t provide a reference display mode.\ncase notEnabled\nA status that indicates the screen provides a reference display mode but it’s in a disabled state.\ncase enabled\nA status that indicates the screen’s in an accurate reference display mode."
  },
  {
    "title": "localContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidragsession/2891033-localcontext",
    "html": "Required"
  },
  {
    "title": "dragInteraction(_:session:didEndWith:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidraginteractiondelegate/2891012-draginteraction",
    "html": "Parameters\ninteraction\n\nThe interaction that called this method.\n\nsession\n\nThe current drag session.\n\noperation\n\nA type that describes the drop operation. If the operation is UIDropOperation.copy or UIDropOperation.move, the data transfer begins.\n\nDiscussion\n\nSince the session has ended, your app should return to its normal appearance.\n\nSee Also\nMonitoring drag progress\nfunc dragInteraction(UIDragInteraction, sessionWillBegin: UIDragSession)\nTells the delegate the lift animation has finished and the user is starting to move the items across the screen.\nfunc dragInteraction(UIDragInteraction, session: UIDragSession, willAdd: [UIDragItem], for: UIDragInteraction)\nTells the delegate an interaction is about to add items to a drag session.\nfunc dragInteraction(UIDragInteraction, sessionDidMove: UIDragSession)\nTells the delegate the user moved the drag items to a new location on the screen.\nfunc dragInteraction(UIDragInteraction, session: UIDragSession, willEndWith: UIDropOperation)\nTells the delegate the drag activity will end with the specified operation.\nfunc dragInteraction(UIDragInteraction, sessionDidTransferItems: UIDragSession)\nTells the delegate the destination view has received the data for the drag items."
  },
  {
    "title": "dragInteraction(_:item:willAnimateCancelWith:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidraginteractiondelegate/2891027-draginteraction",
    "html": "Parameters\ninteraction\n\nThe interaction that called this method.\n\nitem\n\nThe current drag item.\n\nanimator\n\nThe animator that provides custom animations to run alongside the system's animation. You can also use it to add a completion block that runs after the animations have finished.\n\nDiscussion\n\nThis method is called for each drag item, whether it is visible or not.\n\nTo add a custom animation block that runs during the cancellation animation, pass the block to the animator's addAnimations(_:) method.\n\nTo add a completion block that runs after the cancellation animation has finished, pass the block to the animator's addCompletion(_:) method.\n\nSee Also\nAnimating the drag behaviors\nfunc dragInteraction(UIDragInteraction, willAnimateLiftWith: UIDragAnimating, session: UIDragSession)\nTells the delegate the system's lift animation is about to start."
  },
  {
    "title": "dragInteraction(_:session:willAdd:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidraginteractiondelegate/2890993-draginteraction",
    "html": "Parameters\ninteraction\n\nThe interaction that called this method.\n\nsession\n\nThe current drag session.\n\nitems\n\nThe drag items the interaction will add to the session.\n\naddingInteraction\n\nThe interaction adding the drag items.\n\nSee Also\nMonitoring drag progress\nfunc dragInteraction(UIDragInteraction, sessionWillBegin: UIDragSession)\nTells the delegate the lift animation has finished and the user is starting to move the items across the screen.\nfunc dragInteraction(UIDragInteraction, sessionDidMove: UIDragSession)\nTells the delegate the user moved the drag items to a new location on the screen.\nfunc dragInteraction(UIDragInteraction, session: UIDragSession, willEndWith: UIDropOperation)\nTells the delegate the drag activity will end with the specified operation.\nfunc dragInteraction(UIDragInteraction, session: UIDragSession, didEndWith: UIDropOperation)\nTells the delegate the drag activity and its related animations have finished.\nfunc dragInteraction(UIDragInteraction, sessionDidTransferItems: UIDragSession)\nTells the delegate the destination view has received the data for the drag items."
  },
  {
    "title": "dragInteraction(_:session:willEndWith:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidraginteractiondelegate/2891032-draginteraction",
    "html": "Parameters\ninteraction\n\nThe interaction that called this method.\n\nsession\n\nThe drag session that will end.\n\noperation\n\nA type that describes the drop operation. If the operation is UIDropOperation.cancel or UIDropOperation.forbidden, update your view so it has the corresponding appearance before the cancellation animation begins.\n\nSee Also\nMonitoring drag progress\nfunc dragInteraction(UIDragInteraction, sessionWillBegin: UIDragSession)\nTells the delegate the lift animation has finished and the user is starting to move the items across the screen.\nfunc dragInteraction(UIDragInteraction, session: UIDragSession, willAdd: [UIDragItem], for: UIDragInteraction)\nTells the delegate an interaction is about to add items to a drag session.\nfunc dragInteraction(UIDragInteraction, sessionDidMove: UIDragSession)\nTells the delegate the user moved the drag items to a new location on the screen.\nfunc dragInteraction(UIDragInteraction, session: UIDragSession, didEndWith: UIDropOperation)\nTells the delegate the drag activity and its related animations have finished.\nfunc dragInteraction(UIDragInteraction, sessionDidTransferItems: UIDragSession)\nTells the delegate the destination view has received the data for the drag items."
  },
  {
    "title": "UIDropSessionProgressIndicatorStyle.default | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidropsessionprogressindicatorstyle/default",
    "html": "See Also\nProgress indicator styles\ncase none\nThe indicator style for no drop-progress indication."
  },
  {
    "title": "dragInteraction(_:sessionIsRestrictedToDraggingApplication:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidraginteractiondelegate/2891063-draginteraction",
    "html": "Parameters\ninteraction\n\nThe interaction that called this method.\n\nsession\n\nThe drag session to restrict or not restrict.\n\nReturn Value\n\ntrue if you want to restrict the drag session to the app that started it; otherwise false, which is the default if you don't provide this method.\n\nDiscussion\n\nIf you return true and the user attempts to drop the drag items onto another app, the system cancels the session.\n\nNote\n\nThe system calls this method only on devices that support dragging across apps.\n\nSee Also\nRestricting the drag behavior\nfunc dragInteraction(UIDragInteraction, sessionAllowsMoveOperation: UIDragSession) -> Bool\nAsks the delegate whether the session allows the move operation."
  },
  {
    "title": "interactionDidFinish(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uispringloadedinteractionbehavior/2897322-interactiondidfinish",
    "html": "Parameters\ninteraction\n\nThe spring-loaded interaction requesting the information."
  },
  {
    "title": "UISceneError.Code.multipleScenesNotSupported | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisceneerror/code/multiplescenesnotsupported",
    "html": "Discussion\n\nThis error code indicates that the app doesn’t support multiple scenes, or the system was unable to display multiple scenes for your app.\n\nSee Also\nError codes\ncase requestDenied\nAn error that indicates the request was denied.\ncase geometryRequestUnsupported\nAn error that indicates the geometry request is invalid or unsupported.\ncase geometryRequestDenied\nAn error that indicates the geometry request is valid but the system denied the request."
  },
  {
    "title": "UIModalPresentationStyle.none | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimodalpresentationstyle/none",
    "html": "Discussion\n\nDo not use this style to present a view controller. Instead, return it from the adaptivePresentationStyle(for:) method of an adaptive delegate when you do not want a presentation controller to adapt the style of an already presented view controller.\n\nSee Also\nPresentations\ncase automatic\nThe default presentation style chosen by the system.\ncase fullScreen\nA presentation style in which the presented view covers the screen.\ncase pageSheet\nA presentation style that partially covers the underlying content.\ncase formSheet\nA presentation style that displays the content centered in the screen.\ncase currentContext\nA presentation style where the content is displayed over another view controller’s content.\ncase custom\nA custom view presentation style that is managed by a custom presentation controller and one or more custom animator objects.\ncase overFullScreen\nA view presentation style in which the presented view covers the screen.\ncase overCurrentContext\nA presentation style where the content is displayed over another view controller’s content.\ncase popover\nA presentation style where the content is displayed in a popover view.\ncase blurOverFullScreen\nA presentation style that blurs the underlying content before displaying new content in a full-screen presentation."
  },
  {
    "title": "isPrecise | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidropproposal/2890897-isprecise",
    "html": "See Also\nConfiguring a drop proposal\nvar prefersFullSizePreview: Bool\nA Boolean value that indicates that the drag item preview should be shown at its full, original size."
  },
  {
    "title": "init(delegate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidropinteraction/2890891-init",
    "html": "Parameters\ndelegate\n\nAn object that conforms to the UIDropInteractionDelegate protocol.\n\nReturn Value\n\nA drop interaction that has a delegate."
  },
  {
    "title": "operation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidropproposal/2890877-operation",
    "html": "See Also\nInitializing a drop proposal\ninit(operation: UIDropOperation)\nInitializes a new drop proposal with a drop operation type."
  },
  {
    "title": "init(operation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidropproposal/2890886-init",
    "html": "Parameters\noperation\n\nThe operation that the drop interaction proposes to perform.\n\nReturn Value\n\nA drop proposal that has a drop operation.\n\nSee Also\nInitializing a drop proposal\nvar operation: UIDropOperation\nThe drop operation that the drop interaction proposes to perform."
  },
  {
    "title": "finishInteractiveTransition() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollercontexttransitioning/1622056-finishinteractivetransition",
    "html": "Required\n\nDiscussion\n\nWhile tracking user interactions, gesture recognizers or your interactive animator object should call this method when the interactions suggest that the transition is now complete. For example, if the user swipes a finger, and the touch events indicate that the swipe distance crossed the threshold needed to complete the gesture, call this method when the corresponding touch events end to let the system know that it can now complete the transition.\n\nAlways follow calls to this method with a call to the completeTransition(_:) method to finalize the transition.\n\nSee Also\nReporting the transition progress\nfunc completeTransition(Bool)\nNotifies the system that the transition animation is done.\n\nRequired\n\nfunc updateInteractiveTransition(CGFloat)\nUpdates the completion percentage of the transition.\n\nRequired\n\nfunc pauseInteractiveTransition()\nTells the system to pause the animations.\n\nRequired\n\nfunc cancelInteractiveTransition()\nNotifies the system that user interactions canceled the transition.\n\nRequired\n\nvar transitionWasCancelled: Bool\nReturns a Boolean value indicating whether the transition was canceled.\n\nRequired"
  },
  {
    "title": "transitionWasCancelled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollercontexttransitioning/1622039-transitionwascancelled",
    "html": "Required\n\nReturn Value\n\ntrue if the transition was canceled or false if it is ongoing or finished normally.\n\nDiscussion\n\nYou can call this method from your animator object to determine whether the transition has been canceled. Calling the cancelInteractiveTransition() method causes this method to return true.\n\nSee Also\nReporting the transition progress\nfunc completeTransition(Bool)\nNotifies the system that the transition animation is done.\n\nRequired\n\nfunc updateInteractiveTransition(CGFloat)\nUpdates the completion percentage of the transition.\n\nRequired\n\nfunc pauseInteractiveTransition()\nTells the system to pause the animations.\n\nRequired\n\nfunc finishInteractiveTransition()\nNotifies the system that user interactions signaled the completion of the transition.\n\nRequired\n\nfunc cancelInteractiveTransition()\nNotifies the system that user interactions canceled the transition.\n\nRequired"
  },
  {
    "title": "animateAlongsideTransition(in:animation:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollertransitioncoordinator/1619295-animatealongsidetransition",
    "html": "Required\n\nParameters\nview\n\nThe view (or one of its ancestors) in which the specified animations take place. This parameter must not be nil.\n\nanimation\n\nA block containing the animations you want to perform. These animations run in the same context as the transition animations and therefore have the same default attributes. You may specify nil for this parameter.\n\nThe block has no return value and takes the following parameter:\n\ncontext\n\nThe contextual information for performing the animations. Use this object to get the animation-related information. For more information, see UIViewControllerTransitionCoordinatorContext.\n\ncompletion\n\nThe block of code to execute after the transition finishes. You may specify nil for this parameter. The block has no return value and takes the following parameter:\n\ncontext\n\nThe contextual information for performing the animations. Use this object to get the animation-related information. For more information, see UIViewControllerTransitionCoordinatorContext.\n\nReturn Value\n\ntrue if the specified animation is successfully queued to run; otherwise false.\n\nDiscussion\n\nUse this method to perform animations that aren’t handled by the animator objects themselves. The animations you specify in the animation parameter must all take place in a view descended from the view you specify in the view parameter.\n\nThe animations in the animation parameter are normally performed concurrently with the view controller transition animations. That behavior applies when the animator object’s animateTransition(using:) method is implemented using UIView-based animations. If the animator object uses Core Animation to animate the layer contents directly, your animations are run shortly after the animateTransition: method returns.\n\nThis method returns false when the block in the animation parameter can’t be queued to run. The completion block can still run even when this method returns false.\n\nSee Also\nResponding to view controller transition progress\nfunc animate(alongsideTransition: ((UIViewControllerTransitionCoordinatorContext) -> Void)?, completion: ((UIViewControllerTransitionCoordinatorContext) -> Void)?) -> Bool\nRuns the specified animations at the same time as the view controller transition animations.\n\nRequired\n\nfunc notifyWhenInteractionChanges((UIViewControllerTransitionCoordinatorContext) -> Void)\nRegisters a block to be executed when a transition changes from interactive to non-interactive.\n\nRequired\n\nfunc notifyWhenInteractionEnds((UIViewControllerTransitionCoordinatorContext) -> Void)\nRegisters a block to be executed when a transition changes from interactive to non-interactive.\n\nRequired\n\nDeprecated"
  },
  {
    "title": "notifyWhenInteractionChanges(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollertransitioncoordinator/1829391-notifywheninteractionchanges",
    "html": "Required\n\nParameters\nhandler\n\nThe block to execute when the transition changes from interactive to noninteractive. The block has no return value and takes the following parameter:\n\nDiscussion\n\nYour handler block is executed any time the transition changes from interactive to noninteractive, including when the transition ends or is canceled. When the user cancels a transition, UIKit executes your context block, calls the viewWillDisappear(_:) method on the presented view controller, and finally calls the viewWillAppear(_:) method on the original view controller to signal that it’s once again visible.\n\nUse the isInteractive property of the context object to determine the current interactivity of the transition. You can also use the value of the isCancelled property to determine an appropriate course of action. For example, if the transition was canceled, you might remove any extra views that were added to the view hierarchy by a previous call to animate(alongsideTransition:completion:) or animateAlongsideTransition(in:animation:completion:).\n\nYou can call this method multiple times to register multiple blocks. All of the registered blocks are executed when the transition state changes.\n\nSee Also\nResponding to view controller transition progress\nfunc animate(alongsideTransition: ((UIViewControllerTransitionCoordinatorContext) -> Void)?, completion: ((UIViewControllerTransitionCoordinatorContext) -> Void)?) -> Bool\nRuns the specified animations at the same time as the view controller transition animations.\n\nRequired\n\nfunc animateAlongsideTransition(in: UIView?, animation: ((UIViewControllerTransitionCoordinatorContext) -> Void)?, completion: ((UIViewControllerTransitionCoordinatorContext) -> Void)?) -> Bool\nRuns the specified animations in a view that’s outside of the designated container view.\n\nRequired\n\nfunc notifyWhenInteractionEnds((UIViewControllerTransitionCoordinatorContext) -> Void)\nRegisters a block to be executed when a transition changes from interactive to non-interactive.\n\nRequired\n\nDeprecated"
  },
  {
    "title": "notifyWhenInteractionEnds(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollertransitioncoordinator/1619292-notifywheninteractionends",
    "html": "Required\n\nParameters\nhandler\n\nThe block to execute when the transition changes from interactive to noninteractive. The block has no return value and takes the following parameter:\n\ncontext\n\nThe contextual information for performing the animations. Use this object to get the animation-related information. For more information, see UIViewControllerTransitionCoordinatorContext.\n\nDiscussion\n\nYour block is executed both when the transition completes normally and when the user cancels the transition. In the case where the user cancels the transition, UIKit executes your context block, calls the viewWillDisappear(_:) method on the presented view controller, and finally calls the viewWillAppear(_:) method on the original view controller to signal that it’s once again visible.\n\nInside your block, you can get the value of the isCancelled() method of the transition coordinator context and use that value to determine the appropriate course of action. For example, if the transition was canceled, you might use this block to remove any extra views that were added to the view hierarchy by a previous call to animate(alongsideTransition:completion:) or animateAlongsideTransition(in:animation:completion:).\n\nYou can call this method multiple times to register multiple blocks. All of the registered blocks are executed when the transition state changes.\n\nSee Also\nResponding to view controller transition progress\nfunc animate(alongsideTransition: ((UIViewControllerTransitionCoordinatorContext) -> Void)?, completion: ((UIViewControllerTransitionCoordinatorContext) -> Void)?) -> Bool\nRuns the specified animations at the same time as the view controller transition animations.\n\nRequired\n\nfunc animateAlongsideTransition(in: UIView?, animation: ((UIViewControllerTransitionCoordinatorContext) -> Void)?, completion: ((UIViewControllerTransitionCoordinatorContext) -> Void)?) -> Bool\nRuns the specified animations in a view that’s outside of the designated container view.\n\nRequired\n\nfunc notifyWhenInteractionChanges((UIViewControllerTransitionCoordinatorContext) -> Void)\nRegisters a block to be executed when a transition changes from interactive to non-interactive.\n\nRequired"
  },
  {
    "title": "initialFrame(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollercontexttransitioning/1622033-initialframe",
    "html": "Required\n\nParameters\nvc\n\nThe view controller whose frame rectangle you want.\n\nReturn Value\n\nThe frame rectangle for the view or CGRectZero if the frame rectangle is not known or the view is not visible.\n\nDiscussion\n\nThe rectangle returned by this method represents the size of the corresponding view at the beginning of the transition. For the view controller that is already onscreen, this rectangle typically matches the frame rectangle of the container view. For the view controller being presented, the value returned by this method is typically CGRectZero because the view is not yet on screen.\n\nSee Also\nGetting the transition frame rectangles\nfunc finalFrame(for: UIViewController) -> CGRect\nReturns the ending frame rectangle for the specified view controller’s view.\n\nRequired"
  },
  {
    "title": "cancelInteractiveTransition() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollercontexttransitioning/1622038-cancelinteractivetransition",
    "html": "Required\n\nDiscussion\n\nWhile tracking user interactions, gesture recognizers or your interactive animator object should call this method when interactions suggest that the user wants to cancel or abort the view controller transition. For example, if the user reverses the swipe direction and touch events end, suggesting that the user decided against the transition, you would call this method.\n\nAlways follow calls to this method with a call to the completeTransition(_:) method to finalize the transition.\n\nSee Also\nReporting the transition progress\nfunc completeTransition(Bool)\nNotifies the system that the transition animation is done.\n\nRequired\n\nfunc updateInteractiveTransition(CGFloat)\nUpdates the completion percentage of the transition.\n\nRequired\n\nfunc pauseInteractiveTransition()\nTells the system to pause the animations.\n\nRequired\n\nfunc finishInteractiveTransition()\nNotifies the system that user interactions signaled the completion of the transition.\n\nRequired\n\nvar transitionWasCancelled: Bool\nReturns a Boolean value indicating whether the transition was canceled.\n\nRequired"
  },
  {
    "title": "finalFrame(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollercontexttransitioning/1622024-finalframe",
    "html": "Required\n\nParameters\nvc\n\nThe view controller whose frame rectangle you want.\n\nReturn Value\n\nThe frame rectangle for the view or CGRectZero if the frame rectangle is not known or the view is not visible.\n\nDiscussion\n\nThe rectangle returned by this method represents the size of the corresponding view at the end of the transition. For the view being covered during the presentation, the value returned by this method might be CGRectZero but it might also be a valid frame rectangle.\n\nSee Also\nGetting the transition frame rectangles\nfunc initialFrame(for: UIViewController) -> CGRect\nReturns the starting frame rectangle for the specified view controller’s view.\n\nRequired"
  },
  {
    "title": "isAnimated | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollercontexttransitioning/2097569-isanimated",
    "html": "Required\n\nDiscussion\n\nThe value of this property is always true for modal presentation styles other than the UIModalPresentationStyle.custom style. When the modal presentation style is UIModalPresentationStyle.custom, the value is true if the transition should be animated or false if it should not. Use this value to determine whether you need to animate a custom transition into place, or whether you should install the final views into the container without animating the changes.\n\nSee Also\nGetting the transition behaviors\nvar isInteractive: Bool\nA Boolean value indicating whether the transition is currently interactive.\n\nRequired\n\nvar presentationStyle: UIModalPresentationStyle\nReturns the presentation style for the view controller transition.\n\nRequired"
  },
  {
    "title": "completeTransition(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollercontexttransitioning/1622042-completetransition",
    "html": "Required\n\nParameters\ndidComplete\n\ntrue if the transition to the presented view controller completed successfully or false if the original view controller is still being displayed.\n\nDiscussion\n\nYou must call this method after your animations have completed to notify the system that the transition animation is done. The parameter you pass must indicate whether the animations completed successfully. For interactive animations, you must call this method in addition to the finishInteractiveTransition() or cancelInteractiveTransition() method. The best place to call this method is in the completion block of your animations.\n\nThe default implementation of this method calls the animator object’s animationEnded(_:) method to give it a chance to perform any last minute cleanup.\n\nSee Also\nReporting the transition progress\nfunc updateInteractiveTransition(CGFloat)\nUpdates the completion percentage of the transition.\n\nRequired\n\nfunc pauseInteractiveTransition()\nTells the system to pause the animations.\n\nRequired\n\nfunc finishInteractiveTransition()\nNotifies the system that user interactions signaled the completion of the transition.\n\nRequired\n\nfunc cancelInteractiveTransition()\nNotifies the system that user interactions canceled the transition.\n\nRequired\n\nvar transitionWasCancelled: Bool\nReturns a Boolean value indicating whether the transition was canceled.\n\nRequired"
  },
  {
    "title": "targetTransform | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollercontexttransitioning/1622036-targettransform",
    "html": "Required\n\nReturn Value\n\nAn affine transform indicating the amount of rotation being applied to the interface. This transform is the identity transform when no rotation is applied; otherwise, it is a transform that applies a 90 degree, -90 degree, or 180 degree rotation."
  },
  {
    "title": "isInteractive | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollercontexttransitioning/2097570-isinteractive",
    "html": "Required\n\nDiscussion\n\nA transition is interactive only if the view controller’s delegate provides a corresponding interactive animator object.\n\nInteractive transitions are drive by user-generated events. One common scenario is to use a gesture recognizer to report on the current progress of the animation. The gesture recognizer calls methods of this context object that indicate the completion percentage of the transition or indicate that the transition was canceled or completed by the user.\n\nSee Also\nGetting the transition behaviors\nvar isAnimated: Bool\nA Boolean value indicating whether the transition should be animated.\n\nRequired\n\nvar presentationStyle: UIModalPresentationStyle\nReturns the presentation style for the view controller transition.\n\nRequired"
  },
  {
    "title": "registerUserNotificationSettings(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/1622932-registerusernotificationsettings",
    "html": "Deprecated\n\nUse requestAuthorization(options:completionHandler:) and setNotificationCategories(_:) instead.\n\nParameters\nnotificationSettings\n\nThe types of notifications that your app wants to use. You also use this object to specify custom actions that can be initiated by the user from an alert displayed in response to a local or remote notification.\n\nDiscussion\n\nIf your app displays alerts, play sounds, or badges its icon, you must call this method during your launch cycle to request permission to alert the user in these ways. (You must also make this request if you want to set the applicationIconBadgeNumber property directly.) Typically, you make this request if your app uses local or remote notifications to alert the user to new information involving your app. The first time your app launches and calls this method, the system asks the user whether your app should be allowed to deliver notifications and stores the response. Thereafter, the system uses the stored response to determine the actual types of notifications you may use.\n\nAfter calling this method, the app calls the application(_:didRegister:) method of its app delegate to report the results. You can use that method to determine if your request was granted or denied by the user.\n\nIt is recommended that you call this method before you schedule any local notifications or register with the push notification service. Apps that support custom actions must include all of their supported actions in the notificationSettings object.\n\nSee Also\nDeprecated methods\nfunc requestSceneSessionActivation(UISceneSession?, userActivity: NSUserActivity?, options: UIScene.ActivationRequestOptions?, errorHandler: ((Error) -> Void)?)\nAsks the system to activate an existing scene, or create a new scene and associate it with your app.\nDeprecated\nfunc beginIgnoringInteractionEvents()\nTells the receiver to suspend the handling of touch-related events.\nDeprecated\nfunc endIgnoringInteractionEvents()\nTells the receiver to resume the handling of touch-related events.\nDeprecated\nfunc setMinimumBackgroundFetchInterval(TimeInterval)\nSpecifies the minimum amount of time that must elapse between background fetch operations.\nDeprecated\nfunc scheduleLocalNotification(UILocalNotification)\nSchedules a local notification for delivery at its encapsulated date and time.\nDeprecated\nfunc presentLocalNotificationNow(UILocalNotification)\nPresents a local notification immediately.\nDeprecated\nfunc cancelLocalNotification(UILocalNotification)\nCancels the delivery of the specified scheduled local notification.\nDeprecated\nfunc cancelAllLocalNotifications()\nCancels the delivery of all scheduled local notifications.\nDeprecated\nfunc setKeepAliveTimeout(TimeInterval, handler: (() -> Void)?) -> Bool\nConfigures a periodic handler for VoIP apps in older versions of iOS.\nDeprecated\nlet UIMinimumKeepAliveTimeout: TimeInterval\nThe minimum amount of time (measured in seconds) an app may run a critical background task in the background.\nDeprecated\nfunc clearKeepAliveTimeout()\nRemoves a previously installed periodic handler block.\nDeprecated\nfunc setStatusBarHidden(Bool, with: UIStatusBarAnimation)\nHides or shows the status bar, optionally animating the transition.\nDeprecated\nfunc setStatusBarStyle(UIStatusBarStyle, animated: Bool)\nSets the style of the status bar, optionally animating the transition to the new style.\nDeprecated\nfunc setStatusBarOrientation(UIInterfaceOrientation, animated: Bool)\nSets the app's status bar to the specified orientation, optionally animating the transition.\nDeprecated\nfunc registerForRemoteNotifications(matching: UIRemoteNotificationType)\nRegister to receive remote notifications of the specified types via Apple Push Notification service.\nDeprecated\nfunc enabledRemoteNotificationTypes() -> UIRemoteNotificationType\nReturns the types of notifications the app accepts.\nDeprecated\nstruct UIRemoteNotificationType\nConstants indicating the types of notifications the app may display to the user.\nDeprecated\nfunc openURL(URL) -> Bool\nAttempts to open the resource at the specified URL.\nDeprecated\nfunc setNewsstandIconImage(UIImage?)\nSets the icon of a Newsstand app to an image depicting the current issue of a publication.\nDeprecated\nRelated Documentation\nvar currentUserNotificationSettings: UIUserNotificationSettings?\nReturns the user notification settings for the app."
  },
  {
    "title": "updateInteractiveTransition(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollercontexttransitioning/1622025-updateinteractivetransition",
    "html": "Required\n\nDiscussion\n\nWhile tracking user events, gesture recognizers or your interactive animator objects should call this method regularly to update the progress toward completing the transition. If, during tracking, the interactions cross a threshold that you consider signifies the completion or cancellation of the transition, stop tracking events and call the finishInteractiveTransition() or cancelInteractiveTransition() method.\n\nSee Also\nReporting the transition progress\nfunc completeTransition(Bool)\nNotifies the system that the transition animation is done.\n\nRequired\n\nfunc pauseInteractiveTransition()\nTells the system to pause the animations.\n\nRequired\n\nfunc finishInteractiveTransition()\nNotifies the system that user interactions signaled the completion of the transition.\n\nRequired\n\nfunc cancelInteractiveTransition()\nNotifies the system that user interactions canceled the transition.\n\nRequired\n\nvar transitionWasCancelled: Bool\nReturns a Boolean value indicating whether the transition was canceled.\n\nRequired"
  },
  {
    "title": "errorUserInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisceneerror/3197977-erroruserinfo",
    "html": "See Also\nInspecting error information\nvar code: Code\nA code that indicates the cause of the error.\nvar errorCode: Int\nAn integer value for an error.\nvar userInfo: [String : Any]\nThe user info dictionary.\nvar localizedDescription: String\nA localized string describing the error.\nstatic var errorDomain: String\nThe domain for scene-related errors."
  },
  {
    "title": "localDragSession | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidropsession/2890985-localdragsession",
    "html": "Required\n\nDiscussion\n\nThe local drag session is nil if the drag activity started in a different app."
  },
  {
    "title": "completionSpeed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipercentdriveninteractivetransition/1622052-completionspeed",
    "html": "Discussion\n\nThe default value of this property is 1.0, which yields an animation that proceeds in real time. You typically change this value to speed up or slow down the animation at specific points in the transition. For example, you might change the animation speed at the end of a transition or when canceling it, in which case you would set the speed when you stop tracking user events and are about to call the cancel() or finish() method.\n\nThe speed acts as a multiplier to the current animation speed, so values greater than 1.0 speed up the animation and values less than 1.0 slow it down. The value in this property must always be greater than 0.0.\n\nSee Also\nAccessing transition attributes\nvar timingCurve: UITimingCurveProvider?\nThe timing curve to use when driving the animations.\nvar completionCurve: UIView.AnimationCurve\nIndicates the animation completion curve for an interactive transition.\nvar duration: CGFloat\nThe overall duration (in seconds) of the transition animation.\nvar percentComplete: CGFloat\nThe amount of the transition (specified as a percentage of the overall duration) that’s complete.\nvar wantsInteractiveStart: Bool\nA Boolean value indicating whether the animations are interactive initially."
  },
  {
    "title": "pause() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipercentdriveninteractivetransition/1829435-pause",
    "html": "Discussion\n\nThis is a convenience method that calls through to the pauseInteractiveTransition() method of the context object. You might call this method so that you can begin driving an animation interactively. For example, when the user’s finger touches the screen, your gesture handler would call this method to stop the animation and then use changes to the touch location to update the percentComplete property.\n\nSee Also\nManaging a transition\nfunc update(CGFloat)\nUpdates the completion percentage of the transition.\nfunc cancel()\nNotifies the system that user interactions canceled the transition.\nfunc finish()\nNotifies the system that user interactions signaled the completion of the transition."
  },
  {
    "title": "update(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipercentdriveninteractivetransition/1622051-update",
    "html": "Parameters\npercentComplete\n\nThe percentage of the transition that is currently complete, specified as a floating-point number in the range 0.0 to 1.0. If you specify a value less than 0.0, this method changes it to 0.0. Specifying a value greater than 1.0 would cause the animation to appear complete already.\n\nDiscussion\n\nThis is a convenience method that calls through to the updateInteractiveTransition(_:) method of the context object.\n\nWhile tracking user events, your code should call this method regularly to update the current progress toward completing the transition. If, during tracking, the interactions cross a threshold that you consider signifies the completion or cancellation of the transition, stop tracking events and call the finish() or cancel() method.\n\nSee Also\nManaging a transition\nfunc pause()\nPauses an interruptible transition animation.\nfunc cancel()\nNotifies the system that user interactions canceled the transition.\nfunc finish()\nNotifies the system that user interactions signaled the completion of the transition."
  },
  {
    "title": "percentComplete | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipercentdriveninteractivetransition/1622053-percentcomplete",
    "html": "Discussion\n\nThe value in this property reflects the last value passed to the update(_:) method.\n\nSee Also\nAccessing transition attributes\nvar timingCurve: UITimingCurveProvider?\nThe timing curve to use when driving the animations.\nvar completionCurve: UIView.AnimationCurve\nIndicates the animation completion curve for an interactive transition.\nvar duration: CGFloat\nThe overall duration (in seconds) of the transition animation.\nvar completionSpeed: CGFloat\nThe speed of the transition animation.\nvar wantsInteractiveStart: Bool\nA Boolean value indicating whether the animations are interactive initially.\nRelated Documentation\nfunc update(CGFloat)\nUpdates the completion percentage of the transition."
  },
  {
    "title": "completionCurve | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipercentdriveninteractivetransition/1622048-completioncurve",
    "html": "Discussion\n\nWhen the interactive part of a view controller transition is complete, you can set this property to indicate a desired animation completion curve. Default value is UIView.AnimationCurve.easeInOut.\n\nDuring the interactive portion of a view controller transition, the animation curve is linear.\n\nSee Also\nAccessing transition attributes\nvar timingCurve: UITimingCurveProvider?\nThe timing curve to use when driving the animations.\nvar duration: CGFloat\nThe overall duration (in seconds) of the transition animation.\nvar percentComplete: CGFloat\nThe amount of the transition (specified as a percentage of the overall duration) that’s complete.\nvar completionSpeed: CGFloat\nThe speed of the transition animation.\nvar wantsInteractiveStart: Bool\nA Boolean value indicating whether the animations are interactive initially."
  },
  {
    "title": "continueAnimation(withTimingParameters:durationFactor:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewimplicitlyanimating/1829444-continueanimation",
    "html": "Parameters\nparameters\n\nThe new timing information to apply to the animation. Your custom animator determines how to transition from any current animations to the new animations specified by this parameter.\n\ndurationFactor\n\nA multiplying factor to apply to the animation’s original duration. Multiply this value by your animation’s original duration value to obtain the new duration for the animations.\n\nDiscussion\n\nUse this method to change the timing and duration parameters for the current animations temporarily. You define the conditions for which it’s safe to call this method, but typically it’s an error to call this method on an animator that’s inactive, running, or not interruptible. You should retain the original timing and duration values and restore them when your animator transitions back to the inactive state.\n\nSee Also\nModifying animations\nfunc addAnimations(() -> Void)\nAdds the specified animation block to the animator.\nfunc addAnimations(() -> Void, delayFactor: CGFloat)\nAdds the specified animation block to the animator with a delay.\nfunc addCompletion((UIViewAnimatingPosition) -> Void)\nAdds the specified completion block to the animator.\nRelated Documentation\nfunc pauseAnimation()\nPauses a running animation at its current position."
  },
  {
    "title": "addAnimations(_:delayFactor:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewimplicitlyanimating/1829428-addanimations",
    "html": "Parameters\nanimation\n\nA block containing the animations to add to the animator object. This block has no return value and takes no parameters.\n\ndelayFactor\n\nThe factor to use for delaying the start of the animations. The value must be between 0.0 and 1.0. Multiply this value by the animator’s remaining duration to determine the actual delay in seconds. For example, if the value 0.5 and the animator’s duration is 2.0, delay the start of the animations by one second.\n\nDiscussion\n\nUse this method to add new animation blocks to your custom animator object. The animations in the new block should run alongside any previously configured animations, starting after the specified delay and finishing at the same time as any original animations. Your implementation must be able to handle multiple calls to this method.\n\nSee Also\nModifying animations\nfunc addAnimations(() -> Void)\nAdds the specified animation block to the animator.\nfunc addCompletion((UIViewAnimatingPosition) -> Void)\nAdds the specified completion block to the animator.\nfunc continueAnimation(withTimingParameters: UITimingCurveProvider?, durationFactor: CGFloat)\nAdjusts the final timing and duration of a paused animation."
  },
  {
    "title": "animationEnded(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrolleranimatedtransitioning/1622059-animationended",
    "html": "Parameters\ntransitionCompleted\n\nContains the value true if the transition completed successfully and the new view controller is now displayed or false if the transition was canceled and the original view controller is still visible.\n\nDiscussion\n\nUIKit calls this method at the end of a transition to let you know the results. Use this method to perform any final cleanup operations required by your transition animator when the transition finishes.\n\nSee Also\nPerforming a transition\nfunc animateTransition(using: UIViewControllerContextTransitioning)\nTells your animator object to perform the transition animations.\n\nRequired\n\nRelated Documentation\nfunc completeTransition(Bool)\nNotifies the system that the transition animation is done."
  },
  {
    "title": "transitionDuration(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrolleranimatedtransitioning/1622032-transitionduration",
    "html": "Required\n\nParameters\ntransitionContext\n\nThe context object containing information to use during the transition.\n\nReturn Value\n\nThe duration, in seconds, of your custom transition animation.\n\nDiscussion\n\nUIKit calls this method to obtain the timing information for your animations. The value you provide should be the same value that you use when configuring the animations in your animateTransition(using:) method. UIKit uses the value to synchronize the actions of other objects that might be involved in the transition. For example, a navigation controller uses the value to synchronize changes to the navigation bar.\n\nWhen determining the value to return, assume there will be no user interaction during the transition—even if you plan to support user interactions at runtime."
  },
  {
    "title": "addAnimations(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewimplicitlyanimating/1829436-addanimations",
    "html": "Parameters\nanimation\n\nA block containing the animations to add to the animator object. This block has no return value and takes no parameters.\n\nDiscussion\n\nUse this method to add new animation blocks to your custom animator object. The animations in the specified block should run alongside any previously configured animations, starting at the current time and finishing at the same time as any original animations. Your implementation must be able to handle multiple calls to this method.\n\nSee Also\nModifying animations\nfunc addAnimations(() -> Void, delayFactor: CGFloat)\nAdds the specified animation block to the animator with a delay.\nfunc addCompletion((UIViewAnimatingPosition) -> Void)\nAdds the specified completion block to the animator.\nfunc continueAnimation(withTimingParameters: UITimingCurveProvider?, durationFactor: CGFloat)\nAdjusts the final timing and duration of a paused animation."
  },
  {
    "title": "addCompletion(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewimplicitlyanimating/1829432-addcompletion",
    "html": "Parameters\ncompletion\n\nA block to execute when the animations finish. This block has no return value and takes the following parameter:\n\nfinalPosition\n\nThe position where the animations stopped. Use this value to specify whether the animations stopped at their starting point, their end point, or their current position.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\noptional func addCompletion() async -> UIViewAnimatingPosition\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nUse this method to add the completion blocks to your custom animator object. Completion blocks should execute after the animations finish successfully. If the stopAnimation(_:) method is called, do not execute any completion blocks if the withoutFinishing parameter for that method contains the value true. If the parameter is false and the client subsequent calls the finishAnimation(at:) method, execute the completion blocks in your implementation of that method. Your implementation must be able to handle multiple calls to this method.\n\nSee Also\nModifying animations\nfunc addAnimations(() -> Void)\nAdds the specified animation block to the animator.\nfunc addAnimations(() -> Void, delayFactor: CGFloat)\nAdds the specified animation block to the animator with a delay.\nfunc continueAnimation(withTimingParameters: UITimingCurveProvider?, durationFactor: CGFloat)\nAdjusts the final timing and duration of a paused animation."
  },
  {
    "title": "userInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisceneerror/3727229-userinfo",
    "html": "See Also\nInspecting error information\nvar code: Code\nA code that indicates the cause of the error.\nvar errorCode: Int\nAn integer value for an error.\nvar errorUserInfo: [String : Any]\nThe error user info dictionary.\nvar localizedDescription: String\nA localized string describing the error.\nstatic var errorDomain: String\nThe domain for scene-related errors."
  },
  {
    "title": "animateTransition(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrolleranimatedtransitioning/1622061-animatetransition",
    "html": "Required\n\nParameters\ntransitionContext\n\nThe context object containing information about the transition.\n\nDiscussion\n\nUIKit calls this method when presenting or dismissing a view controller. Use this method to configure the animations associated with your custom transition. You can use view-based animations or Core Animation to configure your animations.\n\nAll animations must take place in the view specified by the containerView property of transitionContext. Add the view being presented (or revealed if the transition involves dismissing a view controller) to the container view’s hierarchy and set up any animations you want to make that view move into position. If you want to draw to the screen directly without a view, use this method to configure a CADisplayLink object instead.\n\nYou can retrieve the view controllers involved in the transition from the viewController(forKey:) method of transitionContext. For more information about the information provided by the context object, see UIViewControllerContextTransitioning.\n\nSee Also\nPerforming a transition\nfunc animationEnded(Bool)\nTells your animator object that the transition animations have finished."
  },
  {
    "title": "presentationController(forPresented:presenting:source:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollertransitioningdelegate/1622057-presentationcontroller",
    "html": "Parameters\npresented\n\nThe view controller being presented.\n\npresenting\n\nThe view controller that is presenting the view controller in the presented parameter. The object in this parameter could be the root view controller of the window, a parent view controller that is marked as defining the current context, or the last view controller that was presented. This view controller may or may not be the same as the one in the source parameter. This parameter may also be nil to indicate that the presenting view controller will be determined later.\n\nsource\n\nThe view controller whose present(_:animated:completion:) method was called to initiate the presentation process.\n\nReturn Value\n\nThe custom presentation controller for managing the modal presentation.\n\nDiscussion\n\nWhen you present a view controller using the UIModalPresentationStyle.custom presentation style, the system calls this method and asks for the presentation controller that manages your custom style. If you implement this method, use it to create and return the custom presentation controller object that you want to use to manage the presentation process.\n\nIf you don’t implement this method, or if your implementation of this method returns nil, the system uses a default presentation controller object. The default presentation controller doesn’t add any views or content to the view hierarchy."
  },
  {
    "title": "UIDropOperation.forbidden | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidropoperation/forbidden",
    "html": "Discussion\n\nYou use this operation to signal that the drop activity isn’t allowed at this specific time and place. The drag operation is canceled.\n\nSee Also\nDrop operation types\ncase cancel\nA drop operation type specifying that no data should be transferred, thereby canceling the drag.\ncase copy\nA drop operation type specifying that the data represented by the drag items should be copied to the destination view.\ncase move\nA drop operation type specifying that the data represented by the drag items should be moved, not copied."
  },
  {
    "title": "UIScreen.ReferenceDisplayModeStatus.notEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscreen/referencedisplaymodestatus/notenabled",
    "html": "See Also\nStatuses\ncase notSupported\nA status that indicates the screen doesn’t provide a reference display mode.\ncase limited\nA status that indicates the screen’s in a limited reference display mode.\ncase enabled\nA status that indicates the screen’s in an accurate reference display mode."
  },
  {
    "title": "isInterruptible | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollertransitioncoordinatorcontext/1829390-isinterruptible",
    "html": "Required\n\nSee Also\nGetting the transition state\nvar initiallyInteractive: Bool\nA Boolean value indicating whether the transition started as an interactive transition.\n\nRequired\n\nvar isInteractive: Bool\nA Boolean value indicating whether the transition is currently interactive.\n\nRequired\n\nvar isAnimated: Bool\nA Boolean value indicating whether the transition is explicitly animated.\n\nRequired\n\nvar isCancelled: Bool\nA Boolean value indicating whether an interactive transition was canceled.\n\nRequired"
  },
  {
    "title": "targetTransform | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollertransitioncoordinatorcontext/1619289-targettransform",
    "html": "Required\n\nReturn Value\n\nAn affine transform indicating the amount of rotation being applied to the interface. This transform is the identity transform when no rotation is applied; otherwise, it is a transform that applies a 90 degree, -90 degree, or 180 degree rotation."
  },
  {
    "title": "isCancelled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollertransitioncoordinatorcontext/2097568-iscancelled",
    "html": "Required\n\nSee Also\nGetting the transition state\nvar initiallyInteractive: Bool\nA Boolean value indicating whether the transition started as an interactive transition.\n\nRequired\n\nvar isInteractive: Bool\nA Boolean value indicating whether the transition is currently interactive.\n\nRequired\n\nvar isAnimated: Bool\nA Boolean value indicating whether the transition is explicitly animated.\n\nRequired\n\nvar isInterruptible: Bool\nA Boolean value indicating whether the transition animations can be interrupted.\n\nRequired"
  },
  {
    "title": "view(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollertransitioncoordinatorcontext/1619302-view",
    "html": "Required\n\nParameters\nkey\n\nThe key identifying the view you want. For a list of possible keys, see UITransitionContextViewKey.\n\nReturn Value\n\nThe view object for the specified key or nil if the view could not be found.\n\nSee Also\nGetting the views and view controllers\nfunc viewController(forKey: UITransitionContextViewControllerKey) -> UIViewController?\nReturns the view controllers involved in the transition.\n\nRequired\n\nvar containerView: UIView\nReturns the view in which the transition takes place.\n\nRequired"
  },
  {
    "title": "transitionDuration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollertransitioncoordinatorcontext/1619286-transitionduration",
    "html": "Required\n\nReturn Value\n\nThe expected duration, in seconds, of the view controller transition, if it proceeds noninteractively.\n\nDiscussion\n\nThe transition duration defines the time for the main transition to finish. Use this value when configuring your own animations if you want them to end at the same time as the main transition.\n\nSee Also\nGetting the behavior attributes\nvar presentationStyle: UIModalPresentationStyle\nThe presentation style to use for the transition.\n\nRequired\n\nvar completionCurve: UIView.AnimationCurve\nReturns the completion curve associated with the transition.\n\nRequired\n\nvar completionVelocity: CGFloat\nReturns the starting velocity to use for any final animations.\n\nRequired\n\nvar percentComplete: CGFloat\nReturns the percentage of completion for an interactive transition when it moves to its noninteractive phase.\n\nRequired"
  },
  {
    "title": "completionCurve | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollertransitioncoordinatorcontext/1619299-completioncurve",
    "html": "Required\n\nReturn Value\n\nThe completion curve for the view controller transition. For a list of possible values, see the UIView.AnimationCurve type.\n\nDiscussion\n\nThe completion curve defines the timing of the animations. For interactive transitions, this value is usually obtained from the completionCurve property of the interactive animator object. Use this value when configuring your own animations if you want the same timing as the main transition.\n\nSee Also\nGetting the behavior attributes\nvar presentationStyle: UIModalPresentationStyle\nThe presentation style to use for the transition.\n\nRequired\n\nvar transitionDuration: TimeInterval\nReturns the noninteractive duration of a transition.\n\nRequired\n\nvar completionVelocity: CGFloat\nReturns the starting velocity to use for any final animations.\n\nRequired\n\nvar percentComplete: CGFloat\nReturns the percentage of completion for an interactive transition when it moves to its noninteractive phase.\n\nRequired"
  },
  {
    "title": "dragInteraction(_:sessionAllowsMoveOperation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidraginteractiondelegate/2890978-draginteraction",
    "html": "Parameters\ninteraction\n\nThe interaction that called this method.\n\nsession\n\nThe drag session that should, or should not, allow the move operation.\n\nReturn Value\n\ntrue if the session allows moving drag items to the destination view; otherwise false. The default is true if you don't provide this method.\n\nDiscussion\n\nThe UIDropOperation.move operation only applies to drop activities within the same app. Drag items dropped onto another app are always copied.\n\nSee Also\nRestricting the drag behavior\nfunc dragInteraction(UIDragInteraction, sessionIsRestrictedToDraggingApplication: UIDragSession) -> Bool\nAsks the delegate whether the system should restrict the drag session to the app that started the session."
  },
  {
    "title": "dragInteraction(_:prefersFullSizePreviewsFor:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidraginteractiondelegate/2891028-draginteraction",
    "html": "Parameters\ninteraction\n\nThe interaction that called this method.\n\nsession\n\nThe current drag session.\n\nReturn Value\n\ntrue to tell the system the preview should appear in its original size; otherwise false, which is the default if you don’t provide this method.\n\nDiscussion\n\nThe return value is a recommendation to the system. The system may choose to scale the preview to a smaller size, according to its own rules, even if you return true.\n\nSee Also\nProviding drag previews\nfunc dragInteraction(UIDragInteraction, previewForLifting: UIDragItem, session: UIDragSession) -> UITargetedDragPreview?\nAsks the delegate for the targeted drag item preview that will appear during the lift animation.\nfunc dragInteraction(UIDragInteraction, previewForCancelling: UIDragItem, withDefault: UITargetedDragPreview) -> UITargetedDragPreview?\nAsks the delegate for the targeted drag item preview to show during the cancellation animation."
  },
  {
    "title": "dragInteraction(_:itemsForAddingTo:withTouchAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidraginteractiondelegate/2890968-draginteraction",
    "html": "Parameters\ninteraction\n\nThe interaction that called this method.\n\nsession\n\nThe current drag session.\n\npoint\n\nThe location of the user's touch in the interaction's view. The touch point is in the view's coordinate system.\n\nReturn Value\n\nAn array of drag items to add to the drag session, or an empty array if there are no items to add to the session.\n\nDiscussion\n\nNot implementing this method is the same as always returning an empty array.\n\nSee Also\nPerforming the drag\nfunc dragInteraction(UIDragInteraction, itemsForBeginning: UIDragSession) -> [UIDragItem]\nAsks the delegate for the array of drag items for an impending drag interaction.\n\nRequired\n\nfunc dragInteraction(UIDragInteraction, sessionForAddingItems: [UIDragSession], withTouchAt: CGPoint) -> UIDragSession?\nAsks the delegate which drag session to add drag items to when there is more than one in-progress session."
  },
  {
    "title": "dragInteraction(_:sessionWillBegin:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidraginteractiondelegate/2891055-draginteraction",
    "html": "Parameters\ninteraction\n\nThe interaction that called this method.\n\nsession\n\nThe current drag session.\n\nDiscussion\n\nImplement this method when you need to perform some action after the user starts dragging the items; for instance, dimming the view to show that its contents are being dragged.\n\nSee Also\nMonitoring drag progress\nfunc dragInteraction(UIDragInteraction, session: UIDragSession, willAdd: [UIDragItem], for: UIDragInteraction)\nTells the delegate an interaction is about to add items to a drag session.\nfunc dragInteraction(UIDragInteraction, sessionDidMove: UIDragSession)\nTells the delegate the user moved the drag items to a new location on the screen.\nfunc dragInteraction(UIDragInteraction, session: UIDragSession, willEndWith: UIDropOperation)\nTells the delegate the drag activity will end with the specified operation.\nfunc dragInteraction(UIDragInteraction, session: UIDragSession, didEndWith: UIDropOperation)\nTells the delegate the drag activity and its related animations have finished.\nfunc dragInteraction(UIDragInteraction, sessionDidTransferItems: UIDragSession)\nTells the delegate the destination view has received the data for the drag items."
  },
  {
    "title": "dragInteraction(_:sessionForAddingItems:withTouchAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidraginteractiondelegate/2891004-draginteraction",
    "html": "Parameters\ninteraction\n\nThe interaction that called this method.\n\nsessions\n\nAn array of in-progress drag sessions.\n\npoint\n\nThe location of the user's touch in the view. The touch point is in the view's coordinate system.\n\nReturn Value\n\nThe drag session to add drag items to, or nil to continue without adding drag items to any drag session.\n\nDiscussion\n\nIf more than one drag session exists, the session used to add drag items may not be apparent to the user. Therefore, by default, no items are added to any session. If you want to change this behavior, implement this method and return the appropriate session. Return nil to continue without adding items.\n\nSee Also\nPerforming the drag\nfunc dragInteraction(UIDragInteraction, itemsForBeginning: UIDragSession) -> [UIDragItem]\nAsks the delegate for the array of drag items for an impending drag interaction.\n\nRequired\n\nfunc dragInteraction(UIDragInteraction, itemsForAddingTo: UIDragSession, withTouchAt: CGPoint) -> [UIDragItem]\nAsks the delegate for the drag items to add to an in-progress drag session, in response to a user gesture to add the items."
  },
  {
    "title": "requestDenied | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisceneerror/3197980-requestdenied",
    "html": "See Also\nIdentifying an error cause\nstatic var multipleScenesNotSupported: UISceneError.Code\nAn error that indicates multiple scenes aren’t supported.\nstatic var geometryRequestUnsupported: UISceneError.Code\nAn error that indicates the geometry request is invalid or unsupported.\nstatic var geometryRequestDenied: UISceneError.Code\nAn error that indicates the geometry request is valid but the system denied the request.\nenum UISceneError.Code\nError codes for issues with scenes."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisceneerror/3727226-hash",
    "html": "See Also\nComparing scene errors\nstatic func == (UISceneError, UISceneError) -> Bool\nAn operator for checking whether two scene errors are equal.\nstatic func != (UISceneError, UISceneError) -> Bool\nAn operator for checking whether two scene errors are unequal.\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "errorDomain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisceneerror/3197976-errordomain",
    "html": "See Also\nInspecting error information\nvar code: Code\nA code that indicates the cause of the error.\nvar errorCode: Int\nAn integer value for an error.\nvar userInfo: [String : Any]\nThe user info dictionary.\nvar errorUserInfo: [String : Any]\nThe error user info dictionary.\nvar localizedDescription: String\nA localized string describing the error."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisceneerror/3727224",
    "html": "See Also\nComparing scene errors\nstatic func != (UISceneError, UISceneError) -> Bool\nAn operator for checking whether two scene errors are unequal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the error by feeding them into the given hasher.\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "UISceneError.Code.geometryRequestUnsupported | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisceneerror/code/geometryrequestunsupported",
    "html": "See Also\nError codes\ncase multipleScenesNotSupported\nAn error that indicates multiple scenes aren’t supported.\ncase requestDenied\nAn error that indicates the request was denied.\ncase geometryRequestDenied\nAn error that indicates the geometry request is valid but the system denied the request."
  },
  {
    "title": "UISceneError.Code.geometryRequestDenied | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisceneerror/code/geometryrequestdenied",
    "html": "See Also\nError codes\ncase multipleScenesNotSupported\nAn error that indicates multiple scenes aren’t supported.\ncase requestDenied\nAn error that indicates the request was denied.\ncase geometryRequestUnsupported\nAn error that indicates the geometry request is invalid or unsupported."
  },
  {
    "title": "geometryRequestUnsupported | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisceneerror/3976718-geometryrequestunsupported",
    "html": "See Also\nIdentifying an error cause\nstatic var multipleScenesNotSupported: UISceneError.Code\nAn error that indicates multiple scenes aren’t supported.\nstatic var requestDenied: UISceneError.Code\nAn error that indicates the request was denied.\nstatic var geometryRequestDenied: UISceneError.Code\nAn error that indicates the geometry request is valid but the system denied the request.\nenum UISceneError.Code\nError codes for issues with scenes."
  },
  {
    "title": "progressIndicatorStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidropsession/2890980-progressindicatorstyle",
    "html": "Required\n\nDiscussion\n\nThis property determines the type of progress indicator displayed when the drop operation takes a significant amount of time. The UIDropSessionProgressIndicatorStyle.default style indicates that a progress indicator is shown by the system. If you prefer to show your own progress indicator, set this property to UIDropSessionProgressIndicatorStyle.none."
  },
  {
    "title": "init(image:highlightedImage:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageview/1621064-init",
    "html": "Parameters\nimage\n\nThe initial image to display in the image view. You may specify an image object that contains an animated sequence of images.\n\nhighlightedImage\n\nThe image to display when the image view is highlighted. You may specify an image object that contains an animated sequence of images.\n\nReturn Value\n\nAn initialized image view object.\n\nDiscussion\n\nThe images you specify are used to configure the initial size of the image view itself. Use constraints and the image view’s content mode to adjust the image view’s final size onscreen. This method disables user interactions for the image view by setting the isUserInteractionEnabled property to false.\n\nIf you specify an animated image whose duration is greater than 0, the image view automatically starts playing the animation.\n\nSee Also\nCreating an image view\ninit(image: UIImage?)\nReturns an image view initialized with the specified image."
  },
  {
    "title": "preferredPresentationSizeForItemProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiitemproviderpresentationsizeproviding/2921674-preferredpresentationsizeforitem",
    "html": "Required"
  },
  {
    "title": "animationController(forDismissed:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollertransitioningdelegate/1622047-animationcontroller",
    "html": "Parameters\ndismissed\n\nThe view controller object that is about to be dismissed.\n\nReturn Value\n\nThe animator object to use when dismissing the view controller or nil if you do not want to dismiss the view controller using a custom transition. The object you return should be capable of performing a fixed-length animation that is not interactive.\n\nDiscussion\n\nUse this method to create and return an object that implements the methods of the UIViewControllerAnimatedTransitioning protocol. Your implementation of that protocol must animate the disappearance of the dismissed view controller’s view from the screen. Use the dismissed parameter to initialize your object or perform any tasks necessary to prepare the transition animations. You may return nil from this method if you do not want to implement a custom transition animation when dismissing view controllers.\n\nNote\n\nYou must implement this method if you also plan to use an interactive animator object to manage the disappearance of the view controller. The animator object returned by this method is responsible for executing the animations. The interactive animator object manages only the timing of the animation, not the animations themselves.\n\nFor more information on implementing a transition animator object, see UIViewControllerAnimatedTransitioning.\n\nSee Also\nGetting the transition animator objects\nfunc animationController(forPresented: UIViewController, presenting: UIViewController, source: UIViewController) -> UIViewControllerAnimatedTransitioning?\nAsks your delegate for the transition animator object to use when presenting a view controller."
  },
  {
    "title": "interactionControllerForPresentation(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollertransitioningdelegate/1622050-interactioncontrollerforpresenta",
    "html": "Parameters\nanimator\n\nThe transition animator object returned by your animationController(forPresented:presenting:source:) method.\n\nReturn Value\n\nThe interactive animator object to use to manage the timing of the transition or nil if you do not want to support interactive transitions.\n\nDiscussion\n\nUse this method to create and return an object that implements the methods of the UIViewControllerInteractiveTransitioning protocol. The implementation of that protocol should configure the event-handling code required to manage the appearance of the target view controller. You may return nil from this method if you do not want to the animations to be interactive.\n\nImportant\n\nIf you implement this method, you must also implement the animationController(forPresented:presenting:source:) method and use it to return a custom transition animator object. If the animationController(forPresented:presenting:source:) method returns nil, UIKit does not call this method.\n\nFor more information on implementing an interactive animator object, see UIViewControllerInteractiveTransitioning.\n\nSee Also\nGetting the interactive animator objects\nfunc interactionControllerForDismissal(using: UIViewControllerAnimatedTransitioning) -> UIViewControllerInteractiveTransitioning?\nAsks your delegate for the interactive animator object to use when dismissing a view controller."
  },
  {
    "title": "animationController(forPresented:presenting:source:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollertransitioningdelegate/1622037-animationcontroller",
    "html": "Parameters\npresented\n\nThe view controller object that is about to be presented onscreen.\n\npresenting\n\nThe view controller that is presenting the view controller in the presented parameter. The object in this parameter could be the root view controller of the window, a parent view controller that is marked as defining the current context, or the last view controller that was presented. This view controller may or may not be the same as the one in the source parameter.\n\nsource\n\nThe view controller whose present(_:animated:completion:) method was called.\n\nReturn Value\n\nThe animator object to use when presenting the view controller or nil if you do not want to present the view controller using a custom transition. The object you return should be capable of performing a fixed-length animation that is not interactive.\n\nDiscussion\n\nUse this method to create and return an object that implements the methods of the UIViewControllerAnimatedTransitioning protocol. Your implementation of that protocol must animate the appearance of the presented view controller’s view onscreen. Use the presented, presenting, and source parameters to initialize your animator object or perform any tasks necessary to prepare the transition animations. You may return nil from this method if you do not want to implement a custom transition animation for the specified set of view controllers.\n\nNote\n\nYou must implement this method if you also plan to use an interactive animator object to manage the appearance of the view controller. The animator object returned by this method is responsible for executing the animations. The interactive animator object manages only the timing of the animation, not the animations themselves.\n\nFor information on implementing your transition animator object, see UIViewControllerAnimatedTransitioning.\n\nSee Also\nGetting the transition animator objects\nfunc animationController(forDismissed: UIViewController) -> UIViewControllerAnimatedTransitioning?\nAsks your delegate for the transition animator object to use when dismissing a view controller."
  },
  {
    "title": "init(interactionBehavior:interactionEffect:activationHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uispringloadedinteraction/2897337-init",
    "html": "Parameters\ninteractionBehavior\n\nThe interaction behavior object controlling the spring-loaded interaction activation. If the value is nil, the default behavior is used.\n\ninteractionEffect\n\nThe interaction effect object styling the interaction's view. If the value is nil, the default effect is used.\n\nhandler\n\nThe handler that is invoked when the spring-loaded interaction is activated.\n\nReturn Value\n\nA spring-loaded interaction that has a specific behavior, visual effect, and activation handler block.\n\nSee Also\nInitializing a spring-loaded interaction\ninit(activationHandler: (UISpringLoadedInteraction, UISpringLoadedInteractionContext) -> Void)\nInitializes a new spring-loaded interaction with a specified activation handler block, employing the default behavior and visual effect."
  },
  {
    "title": "focusedFrameGuide | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageview/1627691-focusedframeguide",
    "html": "Discussion\n\nThe layout guide in this property represents the display frame of the image view when it’s focused. You can use this property to align other elements of your interface to the image view or to adjust the constraints of your interface.\n\nWhen the adjustsImageWhenAncestorFocused property is set to true, the image view automatically applies this layout guide when the image view becomes focused.\n\nSee Also\nManaging focus-related behaviors\nvar adjustsImageWhenAncestorFocused: Bool\nAllows UIImageView to respond when an ancestor becomes focused.\nvar masksFocusEffectToContents: Bool\nA Boolean value indicating whether the floating focused appearance uses the image’s alpha channel."
  },
  {
    "title": "imageDynamicRange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageview/4173132-imagedynamicrange",
    "html": "See Also\nSpecifying the dynamic range\nvar preferredImageDynamicRange: UIImage.DynamicRange\nenum UIImage.DynamicRange"
  },
  {
    "title": "init(activationHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uispringloadedinteraction/2897354-init",
    "html": "Parameters\nhandler\n\nThe handler that is invoked when the spring-loaded interaction is activated.\n\nReturn Value\n\nA spring-loaded interaction that has a specific activation handler block and a default behavior and visual effect.\n\nSee Also\nInitializing a spring-loaded interaction\ninit(interactionBehavior: UISpringLoadedInteractionBehavior?, interactionEffect: UISpringLoadedInteractionEffect?, activationHandler: (UISpringLoadedInteraction, UISpringLoadedInteractionContext) -> Void)\nInitializes a new spring-loaded interaction with a specific behavior, visual effect, and activation handler block."
  },
  {
    "title": "overlayContentView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageview/2882128-overlaycontentview",
    "html": "Discussion\n\nUse this view to host content that you want layered on top of the image view. This view is managed by the image view itself and is automatically sized to fill the image view’s frame rectangle. Add your subviews and use layout constraints to position them within the view. When the adjustsImageWhenAncestorFocused property is true, the overlay view receives the same floating effects as the image view when it’s focused.\n\nThe view in this property clips its subviews to its bounds rectangle by default, but you can change that behavior using the clipsToBounds property."
  },
  {
    "title": "UISymbolEffectCompletion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisymboleffectcompletion",
    "html": "See Also\nConfiguring symbol effects\nfunc addSymbolEffect(some IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nAdds a discrete symbol effect to the image view with the specified options and animation.\nfunc addSymbolEffect(some DiscreteSymbolEffect & IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nAdds a discrete, indefinite symbol effect to the image view with the specified options and animation.\nfunc addSymbolEffect(some DiscreteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nAdds an indefinite symbol effect to the image view with the specified options and animation.\nfunc setSymbolImage(UIImage, contentTransition: some ContentTransitionSymbolEffect & SymbolEffect, options: SymbolEffectOptions, completion: UISymbolEffectCompletion?)\nSets a symbol image using the specified content-transition effect, options, and completion handler.\nfunc removeSymbolEffect(ofType: some IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nRemoves the symbol effect that matches the specified indefinite effect type, using the specified options and animation setting.\nfunc removeSymbolEffect(ofType: some DiscreteSymbolEffect & IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nRemoves the symbol effect that matches the specified discrete, indefinite effect type, using the specified options and animation setting.\nfunc removeSymbolEffect(ofType: some DiscreteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nRemoves the symbol effect that matches the specified discrete effect type, using the specified options and animation setting.\nfunc removeAllSymbolEffects(options: SymbolEffectOptions, animated: Bool)\nRemoves all symbol effects from the image view, using the specified options and animation setting.\nstruct UISymbolEffectCompletionContext\nInformation about a symbol effect’s addition or removal."
  },
  {
    "title": "UISymbolEffectCompletionContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisymboleffectcompletioncontext",
    "html": "Topics\nDetermining completion status\nvar effect: SymbolEffect\nThe symbol effect that completed.\nvar isFinished: Bool\nA Boolean value that indicates whether the symbol effect finished completely.\nvar sender: AnyObject?\nThe object, an image view or bar button item, that received the symbol effect.\nSee Also\nConfiguring symbol effects\nfunc addSymbolEffect(some IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nAdds a discrete symbol effect to the image view with the specified options and animation.\nfunc addSymbolEffect(some DiscreteSymbolEffect & IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nAdds a discrete, indefinite symbol effect to the image view with the specified options and animation.\nfunc addSymbolEffect(some DiscreteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nAdds an indefinite symbol effect to the image view with the specified options and animation.\nfunc setSymbolImage(UIImage, contentTransition: some ContentTransitionSymbolEffect & SymbolEffect, options: SymbolEffectOptions, completion: UISymbolEffectCompletion?)\nSets a symbol image using the specified content-transition effect, options, and completion handler.\nfunc removeSymbolEffect(ofType: some IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nRemoves the symbol effect that matches the specified indefinite effect type, using the specified options and animation setting.\nfunc removeSymbolEffect(ofType: some DiscreteSymbolEffect & IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nRemoves the symbol effect that matches the specified discrete, indefinite effect type, using the specified options and animation setting.\nfunc removeSymbolEffect(ofType: some DiscreteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nRemoves the symbol effect that matches the specified discrete effect type, using the specified options and animation setting.\nfunc removeAllSymbolEffects(options: SymbolEffectOptions, animated: Bool)\nRemoves all symbol effects from the image view, using the specified options and animation setting.\ntypealias UISymbolEffectCompletion\nA completion handler for adding and removing symbol effects and transitions."
  },
  {
    "title": "adjustsImageWhenAncestorFocused | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageview/1627692-adjustsimagewhenancestorfocused",
    "html": "Discussion\n\nWhen the value of this property is true and an ancestor of the image view becomes focused, the image view adjusts the frame of its image using the focusedFrameGuide property. The default value of this property is false.\n\nSee Also\nManaging focus-related behaviors\nvar focusedFrameGuide: UILayoutGuide\nThe layout guide to use when the image view is focused.\nvar masksFocusEffectToContents: Bool\nA Boolean value indicating whether the floating focused appearance uses the image’s alpha channel."
  },
  {
    "title": "dropInteraction(_:previewForDropping:withDefault:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidropinteractiondelegate/2890870-dropinteraction",
    "html": "Parameters\ninteraction\n\nThe interaction that called this method.\n\nitem\n\nThe drag item represented by the preview.\n\ndefaultPreview\n\nA targeted drag preview provided by the system.\n\nReturn Value\n\nThe default preview, which is the same behavior as not implementing this method.\n\nA targeted drag item preview that you create.\n\nThe preview returned after moving to a new preview target (using the defaultPreview's retargetedPreview(with:) method).\n\nnil to fade the preview that is currently displayed to the user.\n\nDiscussion\n\nThe system calls this method multiple times, once for each visible drag item. It shows the preview during the drop animation in order to visually “drop” the drag item into place.\n\nSee Also\nAnimating the drop\nfunc dropInteraction(UIDropInteraction, item: UIDragItem, willAnimateDropWith: UIDragAnimating)\nTells the delegate the system's drop animation is about to start.\nfunc dropInteraction(UIDropInteraction, concludeDrop: UIDropSession)\nTells the delegate the drop activity and its related animations have finished."
  },
  {
    "title": "masksFocusEffectToContents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageview/2920037-masksfocuseffecttocontents",
    "html": "Discussion\n\nSet this property to false when using multi-layer images or when using images that are completely opaque. Set this property to true only when the image view contains a single-layer image with transparency. When set to true, the system uses the image’s alpha channel to create an appropriate floating focused appearance. For example, the system masks the shadow based on the alpha channel of the image.\n\nThe aspect ratio of the image view and its displayed image must be the same. Rendering with transparency affects performance, so enable this option only when needed.\n\nSee Also\nManaging focus-related behaviors\nvar adjustsImageWhenAncestorFocused: Bool\nAllows UIImageView to respond when an ancestor becomes focused.\nvar focusedFrameGuide: UILayoutGuide\nThe layout guide to use when the image view is focused."
  },
  {
    "title": "targetItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uispringloadedinteractioncontext/2897330-targetitem",
    "html": "Required\n\nSee Also\nManaging state\nvar state: UISpringLoadedInteractionEffectState\nThe current view style for the spring-loaded interaction.\n\nRequired\n\nvar targetView: UIView?\nThe view to which the current spring-loaded interaction view style is applied.\n\nRequired\n\nenum UISpringLoadedInteractionEffectState\nThe spring-loaded interaction states that determine the style of the interaction view."
  },
  {
    "title": "dropInteraction(_:sessionDidEnd:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidropinteractiondelegate/2890879-dropinteraction",
    "html": "Parameters\ninteraction\n\nThe interaction that called this method.\n\nsession\n\nThe drop session that ended.\n\nDiscussion\n\nImplement this method if you need to clean up resources you created during the session.\n\nSee Also\nTracking the drop movements\nfunc dropInteraction(UIDropInteraction, sessionDidEnter: UIDropSession)\nTells the delegate the drop session has moved into the drop interaction’s view.\nfunc dropInteraction(UIDropInteraction, sessionDidUpdate: UIDropSession) -> UIDropProposal\nTells the delegate the drop session has changed.\nfunc dropInteraction(UIDropInteraction, sessionDidExit: UIDropSession)\nTells the delegate the drop session has moved out of the drop interaction’s view."
  },
  {
    "title": "interactionEffect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uispringloadedinteraction/2897379-interactioneffect",
    "html": "See Also\nGetting information about the spring-loaded interaction\nvar interactionBehavior: UISpringLoadedInteractionBehavior\nThe behavior for the spring-loaded interaction."
  },
  {
    "title": "interactionBehavior | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uispringloadedinteraction/2897325-interactionbehavior",
    "html": "See Also\nGetting information about the spring-loaded interaction\nvar interactionEffect: UISpringLoadedInteractionEffect\nThe visual effect for the spring-loaded interaction."
  },
  {
    "title": "state | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uispringloadedinteractioncontext/2897357-state",
    "html": "Required\n\nSee Also\nManaging state\nvar targetItem: Any?\nThe specific subview, or associated model object, of the target view to use for the spring-loaded interaction.\n\nRequired\n\nvar targetView: UIView?\nThe view to which the current spring-loaded interaction view style is applied.\n\nRequired\n\nenum UISpringLoadedInteractionEffectState\nThe spring-loaded interaction states that determine the style of the interaction view."
  },
  {
    "title": "dropInteraction(_:concludeDrop:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidropinteractiondelegate/2890898-dropinteraction",
    "html": "Parameters\ninteraction\n\nThe interaction that called this method.\n\nsession\n\nThe drop session that has finished.\n\nDiscussion\n\nWhen the interaction calls this method, update the interaction’s view with its post-drop appearance.\n\nSee Also\nAnimating the drop\nfunc dropInteraction(UIDropInteraction, item: UIDragItem, willAnimateDropWith: UIDragAnimating)\nTells the delegate the system's drop animation is about to start.\nfunc dropInteraction(UIDropInteraction, previewForDropping: UIDragItem, withDefault: UITargetedDragPreview) -> UITargetedDragPreview?\nAsks the delegate for the targeted drag item preview to show during the drop animation."
  },
  {
    "title": "finish() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipercentdriveninteractivetransition/1622035-finish",
    "html": "Discussion\n\nThis is a convenience method that calls through to the finishInteractiveTransition() method of the context object.\n\nWhile tracking user interactions, your gesture recognizer or event-handling code should call this methods when the interactions suggest that the transition is now complete. For example, if the user swipes a finger, and the touch events indicate that the swipe distance crossed the threshold needed to complete the gesture, call this method when the corresponding touch events end to let the system know that it can now complete the transition.\n\nSee Also\nManaging a transition\nfunc update(CGFloat)\nUpdates the completion percentage of the transition.\nfunc pause()\nPauses an interruptible transition animation.\nfunc cancel()\nNotifies the system that user interactions canceled the transition."
  },
  {
    "title": "dropInteraction(_:item:willAnimateDropWith:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidropinteractiondelegate/2890896-dropinteraction",
    "html": "Parameters\ninteraction\n\nThe interaction that called this method.\n\nitem\n\nThe current drag item.\n\nanimator\n\nThe animator that provides custom animations to run alongside the system's drop animation. You can also use it to add a completion block that runs after the animations have finished.\n\nDiscussion\n\nThis method is called for each drag item in the session, whether the item's visible or not.\n\nSee Also\nAnimating the drop\nfunc dropInteraction(UIDropInteraction, previewForDropping: UIDragItem, withDefault: UITargetedDragPreview) -> UITargetedDragPreview?\nAsks the delegate for the targeted drag item preview to show during the drop animation.\nfunc dropInteraction(UIDropInteraction, concludeDrop: UIDropSession)\nTells the delegate the drop activity and its related animations have finished."
  },
  {
    "title": "dropInteraction(_:sessionDidExit:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidropinteractiondelegate/2890893-dropinteraction",
    "html": "Parameters\ninteraction\n\nThe interaction that called this method.\n\nsession\n\nThe drop session that has moved out of the interaction’s view.\n\nSee Also\nTracking the drop movements\nfunc dropInteraction(UIDropInteraction, sessionDidEnter: UIDropSession)\nTells the delegate the drop session has moved into the drop interaction’s view.\nfunc dropInteraction(UIDropInteraction, sessionDidUpdate: UIDropSession) -> UIDropProposal\nTells the delegate the drop session has changed.\nfunc dropInteraction(UIDropInteraction, sessionDidEnd: UIDropSession)\nTells the delegate the drop session has ended."
  },
  {
    "title": "wantsInteractiveStart | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipercentdriveninteractivetransition/1829427-wantsinteractivestart",
    "html": "Discussion\n\nWhen the value of this property is true, interactive animations start as paused, allowing you to drive the animations yourself from the start. You might set this property to false when you want to start your animations without interactivity. The default value of this property is true.\n\nSee Also\nAccessing transition attributes\nvar timingCurve: UITimingCurveProvider?\nThe timing curve to use when driving the animations.\nvar completionCurve: UIView.AnimationCurve\nIndicates the animation completion curve for an interactive transition.\nvar duration: CGFloat\nThe overall duration (in seconds) of the transition animation.\nvar percentComplete: CGFloat\nThe amount of the transition (specified as a percentage of the overall duration) that’s complete.\nvar completionSpeed: CGFloat\nThe speed of the transition animation."
  },
  {
    "title": "interruptibleAnimator(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrolleranimatedtransitioning/1829434-interruptibleanimator",
    "html": "Parameters\ntransitionContext\n\nThe context object containing information to use during the transition.\n\nReturn Value\n\nAn animator object that supports the modification of its running animations.\n\nDiscussion\n\nImplement this method when you want to perform your transitions using an interruptible animator object, such as a UIViewPropertyAnimator object. You must return the same animator object for the duration of the transition."
  },
  {
    "title": "retargetedPreview(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitargeteddragpreview/2890950-retargetedpreview",
    "html": "Parameters\nnewTarget\n\nA new drag item preview target.\n\nReturn Value\n\nA new targeted drag preview.\n\nDiscussion\n\nYou can use this method in the drop interaction delegate's implementation of the dropInteraction(_:previewForDropping:withDefault:) method to replace the current targeted drag item preview with a different one."
  },
  {
    "title": "init(for:target:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitargeteddragpreview/2902370-init",
    "html": "Parameters\nurl\n\nAn Internet address referencing a remote resource, such as a webpage.\n\ntarget\n\nA drag item preview target.\n\nReturn Value\n\nA targeted drag preview for a URL based on the drag item preview target.\n\nDiscussion\n\nThis method creates a targeted drag item preview of the URL. The URL preview is a one-line, textual representation that might not show the full URL string. Don't use a file URL.\n\nSee Also\nInitializing a targeted drag item preview\ninit(for: URL, title: String?, target: UIDragPreviewTarget)\nInitializes a new targeted drag item preview with a URL, a title, and a drag item preview."
  },
  {
    "title": "actions(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiusernotificationcategory/1615374-actions",
    "html": "Parameters\ncontext\n\nThe context in which the notification is displayed. Notifications can have a default context or a minimal context depending on whether the notification was just delivered or the user is looking at it in more detail.\n\nReturn Value\n\nAn array of UIUserNotificationAction objects to be displayed in the specified context. The order of the objects in the array represents the order that they are displayed in the resulting notification.\n\nDiscussion\n\nThis method returns the actions associated with the specified display context. To set the actions for a given context, you must create a UIMutableUserNotificationCategory object and use its setActions:forContext: method to specify your actions.\n\nSee Also\nGetting the group configuration\nvar identifier: String?\nThe name of the action group.\nDeprecated"
  },
  {
    "title": "title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenuitem/1622827-title",
    "html": "Discussion\n\nThe title cannot be nil.\n\nSee Also\nAccessing menu-item attributes\nvar action: Selector\nA selector identifying the method of the responder object to invoke for handling of the menu command.\nDeprecated"
  },
  {
    "title": "removeSymbolEffect(ofType:options:animated:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageview/4213123-removesymboleffect",
    "html": "Parameters\neffect\n\nThe symbol effect to match for removal.\n\noptions\n\nThe options to use when removing the symbol effect.\n\nanimated\n\nA Boolean value that indicates whether to animate the removal of a scale, appear, or disappear effect.\n\ncompletion\n\nA completion handler the system calls after the removal is complete.\n\nSee Also\nConfiguring symbol effects\nfunc addSymbolEffect(some IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nAdds a discrete symbol effect to the image view with the specified options and animation.\nfunc addSymbolEffect(some DiscreteSymbolEffect & IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nAdds a discrete, indefinite symbol effect to the image view with the specified options and animation.\nfunc addSymbolEffect(some DiscreteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nAdds an indefinite symbol effect to the image view with the specified options and animation.\nfunc setSymbolImage(UIImage, contentTransition: some ContentTransitionSymbolEffect & SymbolEffect, options: SymbolEffectOptions, completion: UISymbolEffectCompletion?)\nSets a symbol image using the specified content-transition effect, options, and completion handler.\nfunc removeSymbolEffect(ofType: some IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nRemoves the symbol effect that matches the specified indefinite effect type, using the specified options and animation setting.\nfunc removeSymbolEffect(ofType: some DiscreteSymbolEffect & IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nRemoves the symbol effect that matches the specified discrete, indefinite effect type, using the specified options and animation setting.\nfunc removeAllSymbolEffects(options: SymbolEffectOptions, animated: Bool)\nRemoves all symbol effects from the image view, using the specified options and animation setting.\ntypealias UISymbolEffectCompletion\nA completion handler for adding and removing symbol effects and transitions.\nstruct UISymbolEffectCompletionContext\nInformation about a symbol effect’s addition or removal."
  },
  {
    "title": "startAnimating() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageview/1621061-startanimating",
    "html": "Discussion\n\nThis method always starts the animation from the first image in the list.\n\nSee Also\nAnimating a sequence of images\nvar animationImages: [UIImage]?\nAn array of UIImage objects to use for an animation.\nvar highlightedAnimationImages: [UIImage]?\nAn array of UIImage objects to use for an animation when the view is highlighted.\nvar animationDuration: TimeInterval\nThe amount of time it takes to go through one cycle of the images.\nvar animationRepeatCount: Int\nSpecifies the number of times to repeat the animation.\nfunc stopAnimating()\nStops animating the images in the receiver.\nvar isAnimating: Bool\nReturns a Boolean value indicating whether the animation is running."
  },
  {
    "title": "removeSymbolEffect(ofType:options:animated:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageview/4213122-removesymboleffect",
    "html": "Parameters\neffect\n\nThe symbol effect to match for removal.\n\noptions\n\nThe options to use when removing the symbol effect.\n\nanimated\n\nA Boolean value that indicates whether to animate the removal of a scale, appear, or disappear effect.\n\ncompletion\n\nA completion handler the system calls after the removal is complete.\n\nSee Also\nConfiguring symbol effects\nfunc addSymbolEffect(some IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nAdds a discrete symbol effect to the image view with the specified options and animation.\nfunc addSymbolEffect(some DiscreteSymbolEffect & IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nAdds a discrete, indefinite symbol effect to the image view with the specified options and animation.\nfunc addSymbolEffect(some DiscreteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nAdds an indefinite symbol effect to the image view with the specified options and animation.\nfunc setSymbolImage(UIImage, contentTransition: some ContentTransitionSymbolEffect & SymbolEffect, options: SymbolEffectOptions, completion: UISymbolEffectCompletion?)\nSets a symbol image using the specified content-transition effect, options, and completion handler.\nfunc removeSymbolEffect(ofType: some IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nRemoves the symbol effect that matches the specified indefinite effect type, using the specified options and animation setting.\nfunc removeSymbolEffect(ofType: some DiscreteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nRemoves the symbol effect that matches the specified discrete effect type, using the specified options and animation setting.\nfunc removeAllSymbolEffects(options: SymbolEffectOptions, animated: Bool)\nRemoves all symbol effects from the image view, using the specified options and animation setting.\ntypealias UISymbolEffectCompletion\nA completion handler for adding and removing symbol effects and transitions.\nstruct UISymbolEffectCompletionContext\nInformation about a symbol effect’s addition or removal."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisceneactivationconditions/3238065-init",
    "html": "Return Value\n\nA new activation conditions object.\n\nSee Also\nCreating an activation conditions object\ninit?(coder: NSCoder)\nRestores an activation conditions object from the specified archive."
  },
  {
    "title": "removeAllSymbolEffects(options:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageview/4213120-removeallsymboleffects",
    "html": "Parameters\noptions\n\nThe options to use when removing the symbol effects.\n\nanimated\n\nA Boolean value that indicates whether to animate the removal of a scale, appear, or disappear effects.\n\nSee Also\nConfiguring symbol effects\nfunc addSymbolEffect(some IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nAdds a discrete symbol effect to the image view with the specified options and animation.\nfunc addSymbolEffect(some DiscreteSymbolEffect & IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nAdds a discrete, indefinite symbol effect to the image view with the specified options and animation.\nfunc addSymbolEffect(some DiscreteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nAdds an indefinite symbol effect to the image view with the specified options and animation.\nfunc setSymbolImage(UIImage, contentTransition: some ContentTransitionSymbolEffect & SymbolEffect, options: SymbolEffectOptions, completion: UISymbolEffectCompletion?)\nSets a symbol image using the specified content-transition effect, options, and completion handler.\nfunc removeSymbolEffect(ofType: some IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nRemoves the symbol effect that matches the specified indefinite effect type, using the specified options and animation setting.\nfunc removeSymbolEffect(ofType: some DiscreteSymbolEffect & IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nRemoves the symbol effect that matches the specified discrete, indefinite effect type, using the specified options and animation setting.\nfunc removeSymbolEffect(ofType: some DiscreteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nRemoves the symbol effect that matches the specified discrete effect type, using the specified options and animation setting.\ntypealias UISymbolEffectCompletion\nA completion handler for adding and removing symbol effects and transitions.\nstruct UISymbolEffectCompletionContext\nInformation about a symbol effect’s addition or removal."
  },
  {
    "title": "isHighlighted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageview/1621060-ishighlighted",
    "html": "Discussion\n\nThis property determines whether the regular or highlighted images are used. When isHighlighted is set to true, a non-animated image will use the highlightedImage property and an animated image will use the highlightedAnimationImages. If both of those properties are set to nil or if isHighlighted is set to false, it will use the image and animationImages properties.\n\nSee Also\nConfiguring the image view\nvar isUserInteractionEnabled: Bool\nA Boolean value that determines whether user events are ignored and removed from the event queue.\nvar tintColor: UIColor!\nA color used to tint template images in the view hierarchy."
  },
  {
    "title": "interactionControllerForDismissal(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollertransitioningdelegate/1622030-interactioncontrollerfordismissa",
    "html": "Parameters\nanimator\n\nThe transition animator object returned by your animationController(forDismissed:) method.\n\nReturn Value\n\nThe animator object that implements the code needed specifically to manage interactive transitions or nil if you do not want to support interactive transitions.\n\nDiscussion\n\nUse this method to create and return an object that implements the methods of the UIViewControllerInteractiveTransitioning protocol. The implementation of that protocol should configure the event-handling code required to manage the disappearance of the target view controller. You may return nil from this method if you do not want to the animations to be interactive.\n\nImportant\n\nIf you implement this method, you must also implement the animationController(forDismissed:) method and use it to return a custom transition animator object. If the animationController(forDismissed:) method returns nil, UIKit does not call this method.\n\nFor more information on implementing an interactive animator object, see UIViewControllerInteractiveTransitioning.\n\nSee Also\nGetting the interactive animator objects\nfunc interactionControllerForPresentation(using: UIViewControllerAnimatedTransitioning) -> UIViewControllerInteractiveTransitioning?\nAsks your delegate for the interactive animator object to use when presenting a view controller."
  },
  {
    "title": "animationDuration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageview/1621058-animationduration",
    "html": "Discussion\n\nThe time duration is measured in seconds. The default value of this property is 0.0, which causes the image view to use a duration equal to the number of images multiplied by 1/30th of a second. Thus, if you had 30 images, the duration would be 1 second.\n\nSee Also\nAnimating a sequence of images\nvar animationImages: [UIImage]?\nAn array of UIImage objects to use for an animation.\nvar highlightedAnimationImages: [UIImage]?\nAn array of UIImage objects to use for an animation when the view is highlighted.\nvar animationRepeatCount: Int\nSpecifies the number of times to repeat the animation.\nfunc startAnimating()\nStarts animating the images in the receiver.\nfunc stopAnimating()\nStops animating the images in the receiver.\nvar isAnimating: Bool\nReturns a Boolean value indicating whether the animation is running."
  },
  {
    "title": "highlightedAnimationImages | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageview/1621065-highlightedanimationimages",
    "html": "Discussion\n\nThe array must contain UIImage objects. You may use the same image object more than once in the array. Setting this property to a value other than nil hides the image represented by the highlightedImage property. The value of this property is nil by default.\n\nSee Also\nAnimating a sequence of images\nvar animationImages: [UIImage]?\nAn array of UIImage objects to use for an animation.\nvar animationDuration: TimeInterval\nThe amount of time it takes to go through one cycle of the images.\nvar animationRepeatCount: Int\nSpecifies the number of times to repeat the animation.\nfunc startAnimating()\nStarts animating the images in the receiver.\nfunc stopAnimating()\nStops animating the images in the receiver.\nvar isAnimating: Bool\nReturns a Boolean value indicating whether the animation is running.\nRelated Documentation\nvar highlightedImage: UIImage?\nThe highlighted image displayed in the image view."
  },
  {
    "title": "removeSymbolEffect(ofType:options:animated:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageview/4213121-removesymboleffect",
    "html": "Parameters\neffect\n\nThe symbol effect to match for removal.\n\noptions\n\nThe options to use when removing the symbol effect.\n\nanimated\n\nA Boolean value that indicates whether to animate the removal of a scale, appear, or disappear effect.\n\ncompletion\n\nA completion handler the system calls after the removal is complete.\n\nSee Also\nConfiguring symbol effects\nfunc addSymbolEffect(some IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nAdds a discrete symbol effect to the image view with the specified options and animation.\nfunc addSymbolEffect(some DiscreteSymbolEffect & IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nAdds a discrete, indefinite symbol effect to the image view with the specified options and animation.\nfunc addSymbolEffect(some DiscreteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nAdds an indefinite symbol effect to the image view with the specified options and animation.\nfunc setSymbolImage(UIImage, contentTransition: some ContentTransitionSymbolEffect & SymbolEffect, options: SymbolEffectOptions, completion: UISymbolEffectCompletion?)\nSets a symbol image using the specified content-transition effect, options, and completion handler.\nfunc removeSymbolEffect(ofType: some DiscreteSymbolEffect & IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nRemoves the symbol effect that matches the specified discrete, indefinite effect type, using the specified options and animation setting.\nfunc removeSymbolEffect(ofType: some DiscreteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nRemoves the symbol effect that matches the specified discrete effect type, using the specified options and animation setting.\nfunc removeAllSymbolEffects(options: SymbolEffectOptions, animated: Bool)\nRemoves all symbol effects from the image view, using the specified options and animation setting.\ntypealias UISymbolEffectCompletion\nA completion handler for adding and removing symbol effects and transitions.\nstruct UISymbolEffectCompletionContext\nInformation about a symbol effect’s addition or removal."
  },
  {
    "title": "addSymbolEffect(_:options:animated:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageview/4213118-addsymboleffect",
    "html": "Parameters\neffect\n\nThe symbol effect to add.\n\noptions\n\nThe options for the symbol effect.\n\nanimated\n\nA Boolean value that indicates whether to animate the addition of a scale, appear, or disappear effect.\n\ncompletion\n\nA completion handler the system calls after the effect’s addition is complete.\n\nSee Also\nConfiguring symbol effects\nfunc addSymbolEffect(some IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nAdds a discrete symbol effect to the image view with the specified options and animation.\nfunc addSymbolEffect(some DiscreteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nAdds an indefinite symbol effect to the image view with the specified options and animation.\nfunc setSymbolImage(UIImage, contentTransition: some ContentTransitionSymbolEffect & SymbolEffect, options: SymbolEffectOptions, completion: UISymbolEffectCompletion?)\nSets a symbol image using the specified content-transition effect, options, and completion handler.\nfunc removeSymbolEffect(ofType: some IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nRemoves the symbol effect that matches the specified indefinite effect type, using the specified options and animation setting.\nfunc removeSymbolEffect(ofType: some DiscreteSymbolEffect & IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nRemoves the symbol effect that matches the specified discrete, indefinite effect type, using the specified options and animation setting.\nfunc removeSymbolEffect(ofType: some DiscreteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nRemoves the symbol effect that matches the specified discrete effect type, using the specified options and animation setting.\nfunc removeAllSymbolEffects(options: SymbolEffectOptions, animated: Bool)\nRemoves all symbol effects from the image view, using the specified options and animation setting.\ntypealias UISymbolEffectCompletion\nA completion handler for adding and removing symbol effects and transitions.\nstruct UISymbolEffectCompletionContext\nInformation about a symbol effect’s addition or removal."
  },
  {
    "title": "animationRepeatCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageview/1621070-animationrepeatcount",
    "html": "Discussion\n\nThe default value is 0, which specifies to repeat the animation indefinitely.\n\nSee Also\nAnimating a sequence of images\nvar animationImages: [UIImage]?\nAn array of UIImage objects to use for an animation.\nvar highlightedAnimationImages: [UIImage]?\nAn array of UIImage objects to use for an animation when the view is highlighted.\nvar animationDuration: TimeInterval\nThe amount of time it takes to go through one cycle of the images.\nfunc startAnimating()\nStarts animating the images in the receiver.\nfunc stopAnimating()\nStops animating the images in the receiver.\nvar isAnimating: Bool\nReturns a Boolean value indicating whether the animation is running."
  },
  {
    "title": "addSymbolEffect(_:options:animated:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageview/4213119-addsymboleffect",
    "html": "Parameters\neffect\n\nThe symbol effect to add.\n\noptions\n\nThe options for the symbol effect.\n\nanimated\n\nA Boolean value that indicates whether to animate the addition of a scale, appear, or disappear effect.\n\ncompletion\n\nA completion handler the system calls after the effect’s addition is complete.\n\nSee Also\nConfiguring symbol effects\nfunc addSymbolEffect(some IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nAdds a discrete symbol effect to the image view with the specified options and animation.\nfunc addSymbolEffect(some DiscreteSymbolEffect & IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nAdds a discrete, indefinite symbol effect to the image view with the specified options and animation.\nfunc setSymbolImage(UIImage, contentTransition: some ContentTransitionSymbolEffect & SymbolEffect, options: SymbolEffectOptions, completion: UISymbolEffectCompletion?)\nSets a symbol image using the specified content-transition effect, options, and completion handler.\nfunc removeSymbolEffect(ofType: some IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nRemoves the symbol effect that matches the specified indefinite effect type, using the specified options and animation setting.\nfunc removeSymbolEffect(ofType: some DiscreteSymbolEffect & IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nRemoves the symbol effect that matches the specified discrete, indefinite effect type, using the specified options and animation setting.\nfunc removeSymbolEffect(ofType: some DiscreteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nRemoves the symbol effect that matches the specified discrete effect type, using the specified options and animation setting.\nfunc removeAllSymbolEffects(options: SymbolEffectOptions, animated: Bool)\nRemoves all symbol effects from the image view, using the specified options and animation setting.\ntypealias UISymbolEffectCompletion\nA completion handler for adding and removing symbol effects and transitions.\nstruct UISymbolEffectCompletionContext\nInformation about a symbol effect’s addition or removal."
  },
  {
    "title": "setSymbolImage(_:contentTransition:options:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageview/4213124-setsymbolimage",
    "html": "Parameters\nsymbolImage\n\nThe symbol image to set.\n\ntransition\n\nThe content transition to use when setting the symbol image.\n\noptions\n\nThe options to use when setting the symbol image.\n\ncompletion\n\nA completion handler the system calls after setting the symbol image.\n\nSee Also\nConfiguring symbol effects\nfunc addSymbolEffect(some IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nAdds a discrete symbol effect to the image view with the specified options and animation.\nfunc addSymbolEffect(some DiscreteSymbolEffect & IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nAdds a discrete, indefinite symbol effect to the image view with the specified options and animation.\nfunc addSymbolEffect(some DiscreteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nAdds an indefinite symbol effect to the image view with the specified options and animation.\nfunc removeSymbolEffect(ofType: some IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nRemoves the symbol effect that matches the specified indefinite effect type, using the specified options and animation setting.\nfunc removeSymbolEffect(ofType: some DiscreteSymbolEffect & IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nRemoves the symbol effect that matches the specified discrete, indefinite effect type, using the specified options and animation setting.\nfunc removeSymbolEffect(ofType: some DiscreteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nRemoves the symbol effect that matches the specified discrete effect type, using the specified options and animation setting.\nfunc removeAllSymbolEffects(options: SymbolEffectOptions, animated: Bool)\nRemoves all symbol effects from the image view, using the specified options and animation setting.\ntypealias UISymbolEffectCompletion\nA completion handler for adding and removing symbol effects and transitions.\nstruct UISymbolEffectCompletionContext\nInformation about a symbol effect’s addition or removal."
  },
  {
    "title": "imageWithData: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimage/1624137-imagewithdata",
    "html": "Parameters\ndata\n\nThe image data. This can be data from a file or data you create programmatically.\n\nReturn Value\n\nA new image object for the specified data, or nil if the method could not initialize the image from the specified data.\n\nDiscussion\n\nThis method does not cache the image object.\n\nSee Also\nCreating and initializing image objects\n+ imageWithContentsOfFile:\nCreates and returns an image object by loading the image data from the file at the specified path.\n+ imageWithData:scale:\nCreates and returns an image object that uses the specified image data and scale factor.\n+ imageWithCGImage:\nCreates and returns an image object representing the specified Quartz image.\n+ imageWithCGImage:scale:orientation:\nCreates and returns an image object with the specified scale and orientation factors.\n+ imageWithCIImage:\nCreates and returns an image object that contains a Core Image object.\n+ imageWithCIImage:scale:orientation:\nCreates and returns an image object based on a Core Image object and the specified attributes.\n- initWithContentsOfFile:\nInitializes and returns the image object with the contents of the specified file.\n- initWithData:\nInitializes and returns the image object with the specified data.\n- initWithData:scale:\nInitializes and returns the image object with the specified data and scale factor.\n- initWithCGImage:\nInitializes and returns the image object with the specified Quartz image reference.\n- initWithCGImage:scale:orientation:\nInitializes and returns an image object with the specified scale and orientation factors.\n- initWithCIImage:\nInitializes and returns an image object with the specified Core Image object.\n- initWithCIImage:scale:orientation:\nInitializes and returns an image object with the specified Core Image object and properties.\nUIImageReader\nUIImageReaderConfiguration\nThe properties that a reader uses to decode images."
  },
  {
    "title": "isUserInteractionEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageview/1621063-isuserinteractionenabled",
    "html": "Discussion\n\nThis property is inherited from the UIView parent class. This class changes the default value of this property to false.\n\nSee Also\nConfiguring the image view\nvar isHighlighted: Bool\nA Boolean value that determines whether the image is highlighted.\nvar tintColor: UIColor!\nA color used to tint template images in the view hierarchy."
  },
  {
    "title": "animationImages | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageview/1621068-animationimages",
    "html": "Discussion\n\nThe array must contain UIImage objects. You may use the same image object more than once in the array. Setting this property to a value other than nil hides the image represented by the image property. The value of this property is nil by default.\n\nSee Also\nAnimating a sequence of images\nvar highlightedAnimationImages: [UIImage]?\nAn array of UIImage objects to use for an animation when the view is highlighted.\nvar animationDuration: TimeInterval\nThe amount of time it takes to go through one cycle of the images.\nvar animationRepeatCount: Int\nSpecifies the number of times to repeat the animation.\nfunc startAnimating()\nStarts animating the images in the receiver.\nfunc stopAnimating()\nStops animating the images in the receiver.\nvar isAnimating: Bool\nReturns a Boolean value indicating whether the animation is running.\nRelated Documentation\nvar image: UIImage?\nThe image displayed in the image view."
  },
  {
    "title": "errorCode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisceneerror/3197975-errorcode",
    "html": "See Also\nInspecting error information\nvar code: Code\nA code that indicates the cause of the error.\nvar userInfo: [String : Any]\nThe user info dictionary.\nvar errorUserInfo: [String : Any]\nThe error user info dictionary.\nvar localizedDescription: String\nA localized string describing the error.\nstatic var errorDomain: String\nThe domain for scene-related errors."
  },
  {
    "title": "tintColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageview/1621059-tintcolor",
    "html": "Discussion\n\nThe default is nil. If a non-nil value is specified, the color is applied to any template images attached to the image view. For more information, see the renderingMode property on the UIImage class.\n\nSee Also\nConfiguring the image view\nvar isUserInteractionEnabled: Bool\nA Boolean value that determines whether user events are ignored and removed from the event queue.\nvar isHighlighted: Bool\nA Boolean value that determines whether the image is highlighted."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisceneerror/3727227-hashvalue",
    "html": "See Also\nComparing scene errors\nstatic func == (UISceneError, UISceneError) -> Bool\nAn operator for checking whether two scene errors are equal.\nstatic func != (UISceneError, UISceneError) -> Bool\nAn operator for checking whether two scene errors are unequal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the error by feeding them into the given hasher."
  },
  {
    "title": "multipleScenesNotSupported | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisceneerror/3197979-multiplescenesnotsupported",
    "html": "Discussion\n\nThis error code indicates that the app doesn’t support multiple scenes or the system was unable to display multiple scenes for your app.\n\nSee Also\nIdentifying an error cause\nstatic var requestDenied: UISceneError.Code\nAn error that indicates the request was denied.\nstatic var geometryRequestUnsupported: UISceneError.Code\nAn error that indicates the geometry request is invalid or unsupported.\nstatic var geometryRequestDenied: UISceneError.Code\nAn error that indicates the geometry request is valid but the system denied the request.\nenum UISceneError.Code\nError codes for issues with scenes."
  },
  {
    "title": "localizedDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisceneerror/3197978-localizeddescription",
    "html": "See Also\nInspecting error information\nvar code: Code\nA code that indicates the cause of the error.\nvar errorCode: Int\nAn integer value for an error.\nvar userInfo: [String : Any]\nThe user info dictionary.\nvar errorUserInfo: [String : Any]\nThe error user info dictionary.\nstatic var errorDomain: String\nThe domain for scene-related errors."
  },
  {
    "title": "canActivateForTargetContentIdentifierPredicate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisceneactivationconditions/3238064-canactivatefortargetcontentident",
    "html": "Discussion\n\nUse this property to specify the tasks your scene can handle, if needed. UIKit evaluates your predicate against the targetContentIdentifier property of the object causing the activation of the scene. Many different objects contain target content identifiers, including NSUserActivity, UNNotificationContent, and UIApplicationShortcutItem.\n\nUIKit must be able to evaluate your predicate’s conditions outside the scope of your app, so don’t include conditions that require dynamic evaluation. For example, don’t include key paths in your predicate and don’t create predicates that evaluate conditions using selectors or blocks. The default value of this property is a predicate that always evaluates to the value true.\n\nSee Also\nSpecifying the conditions\nvar prefersToActivateForTargetContentIdentifierPredicate: NSPredicate\nThe set of conditions for which UIKit chooses to activate this scene over others."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisceneerror/3197974",
    "html": "See Also\nComparing scene errors\nstatic func == (UISceneError, UISceneError) -> Bool\nAn operator for checking whether two scene errors are equal.\nfunc hash(into: inout Hasher)\nHashes the essential components of the error by feeding them into the given hasher.\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "code | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisceneerror/3727225-code",
    "html": "See Also\nInspecting error information\nvar errorCode: Int\nAn integer value for an error.\nvar userInfo: [String : Any]\nThe user info dictionary.\nvar errorUserInfo: [String : Any]\nThe error user info dictionary.\nvar localizedDescription: String\nA localized string describing the error.\nstatic var errorDomain: String\nThe domain for scene-related errors."
  },
  {
    "title": "geometryRequestDenied | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisceneerror/3976717-geometryrequestdenied",
    "html": "See Also\nIdentifying an error cause\nstatic var multipleScenesNotSupported: UISceneError.Code\nAn error that indicates multiple scenes aren’t supported.\nstatic var requestDenied: UISceneError.Code\nAn error that indicates the request was denied.\nstatic var geometryRequestUnsupported: UISceneError.Code\nAn error that indicates the geometry request is invalid or unsupported.\nenum UISceneError.Code\nError codes for issues with scenes."
  },
  {
    "title": "types | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiusernotificationsettings/1615321-types",
    "html": "Discussion\n\nWhen you create a new settings object, this property contains all of the types you specified. After you register your request with the app, the app provides you with a new settings object that contains only the types that your app is allowed to use.\n\nSee Also\nGetting the configured settings\nvar categories: Set<UIUserNotificationCategory>?\nThe app’s registered groups of actions.\nDeprecated\nRelated Documentation\nclass UIUserNotificationSettings\nThe types of notifications that can be displayed to the user by your app."
  },
  {
    "title": "init(types:categories:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiusernotificationsettings/1615401-init",
    "html": "Parameters\nallowedUserNotificationTypes\n\nThe notification types that your app supports. For a list of possible values, see the constants for the UIUserNotificationType type.\n\nactionSettings\n\nA set of UIUserNotificationCategory objects that define the groups of actions a notification may include.\n\nReturn Value\n\nA new user notification settings object that you can register with the UIApplication object.\n\nDiscussion\n\nUse this method to create a new settings object that you intend to register with the app. When calling this method, specify the types of notifications you intend to deliver to the user such as alerts or sounds. If you intend to display custom actions in your notifications, use this method to register those actions as well.\n\nAfter creating a new settings object, register that object by calling the registerUserNotificationSettings(_:) method of the shared UIApplication object."
  },
  {
    "title": "collectionJoinBehavior | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscene/activationrequestoptions/3623235-collectionjoinbehavior",
    "html": "Discussion\n\nA scene collection is a group of scenes that display together. In apps built with Mac Catalyst, you use this behavior to add windows to an NSWindowTabGroup.\n\nSee Also\nSpecifying collection join behavior\nenum UISceneCollectionJoinBehavior\nA set of behaviors that specify how a new scene joins a scene collection."
  },
  {
    "title": "UISceneCollectionJoinBehavior | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscenecollectionjoinbehavior",
    "html": "Topics\nConstants\ncase automatic\nA behavior that uses the system preferences for joining collections.\ncase preferred\nA behavior that adds the new scene to the requesting scene’s collection and activate it, or attempts to join a compatible collection.\ncase preferredWithoutActivating\nA behavior that adds the new scene to the requesting scene’s collection without activating it, or attempts to join a compatible collection.\ncase disallowed\nA behavior that creates a new collection for the new scene, ignoring system preferences.\nRelationships\nConforms To\nSendable\nSee Also\nSpecifying collection join behavior\nvar collectionJoinBehavior: UISceneCollectionJoinBehavior\nThe behavior that specifies how a new scene joins a scene collection."
  },
  {
    "title": "preferredImageDynamicRange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageview/4173133-preferredimagedynamicrange",
    "html": "See Also\nSpecifying the dynamic range\nvar imageDynamicRange: UIImage.DynamicRange\nenum UIImage.DynamicRange"
  },
  {
    "title": "targetView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uispringloadedinteractioncontext/2897394-targetview",
    "html": "Required\n\nSee Also\nManaging state\nvar state: UISpringLoadedInteractionEffectState\nThe current view style for the spring-loaded interaction.\n\nRequired\n\nvar targetItem: Any?\nThe specific subview, or associated model object, of the target view to use for the spring-loaded interaction.\n\nRequired\n\nenum UISpringLoadedInteractionEffectState\nThe spring-loaded interaction states that determine the style of the interaction view."
  },
  {
    "title": "UISpringLoadedInteractionEffectState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uispringloadedinteractioneffectstate",
    "html": "Topics\nStates\ncase activated\nAn interaction state that indicates that the view was spring loaded.\ncase activating\nAn interaction state that indicates that spring loading is about to start.\ncase inactive\nAn interaction state that indicates that spring loading is not engaged.\ncase possible\nAn interaction state that indicates that spring loading is available.\nRelationships\nConforms To\nSendable\nSee Also\nManaging state\nvar state: UISpringLoadedInteractionEffectState\nThe current view style for the spring-loaded interaction.\n\nRequired\n\nvar targetItem: Any?\nThe specific subview, or associated model object, of the target view to use for the spring-loaded interaction.\n\nRequired\n\nvar targetView: UIView?\nThe view to which the current spring-loaded interaction view style is applied.\n\nRequired"
  },
  {
    "title": "UIDocumentMenuOrder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentmenuorder",
    "html": "Topics\nConstants\ncase first\nThe top item in the document menu.\ncase last\nThe bottom item in the document menu.\nRelationships\nConforms To\nSendable\nSee Also\nConfiguring a document menu\nfunc addOption(withTitle: String, image: UIImage?, order: UIDocumentMenuOrder, handler: () -> Void)\nAdds a custom menu item to the list of document pickers.\nDeprecated"
  },
  {
    "title": "init(name:size:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifontdescriptor/1616674-init",
    "html": "Parameters\nfontName\n\nThe value for name.\n\nsize\n\nThe value for size.\n\nReturn Value\n\nThe new font descriptor.\n\nSee Also\nCreating a font descriptor\nclass func preferredFontDescriptor(withTextStyle: UIFont.TextStyle) -> UIFontDescriptor\nReturns a font descriptor that contains the specified text style and the user’s selected content size category.\nclass func preferredFontDescriptor(withTextStyle: UIFont.TextStyle, compatibleWith: UITraitCollection?) -> UIFontDescriptor\nReturns a font descriptor that contains the text style and the content size category that the provided trait collection specifies.\ninit(name: String, matrix: CGAffineTransform)\nReturns a font descriptor with the specified values for the name and matrix dictionary attributes.\nfunc addingAttributes([UIFontDescriptor.AttributeName : Any]) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing descriptor, but with the specified attributes taking precedence over the existing ones.\nfunc withDesign(UIFontDescriptor.SystemDesign) -> UIFontDescriptor?\nReturns a new font descriptor that’s the same as the existing descriptor, but with the specified design.\nfunc withFamily(String) -> UIFontDescriptor\nReturns a new font descriptor whose attributes are the same as the existing font descriptor, but from the specified family.\nfunc withFace(String) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified face.\nfunc withMatrix(CGAffineTransform) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified matrix.\nfunc withSize(CGFloat) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified point size.\nfunc withSymbolicTraits(UIFontDescriptor.SymbolicTraits) -> UIFontDescriptor?\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified symbolic traits.\nRelated Documentation\n+ fontDescriptorWithFontAttributes:\nReturns a font descriptor with a dictionary of attributes."
  },
  {
    "title": "fontDescriptorWithFontAttributes: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifontdescriptor/1616717-fontdescriptorwithfontattributes",
    "html": "Parameters\nattributes\n\nThe attributes for the font descriptor. If nil, the font descriptor’s dictionary will be empty.\n\nReturn Value\n\nThe new font descriptor.\n\nSee Also\nCreating a font descriptor\n+ preferredFontDescriptorWithTextStyle:\nReturns a font descriptor that contains the specified text style and the user’s selected content size category.\n+ preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:\nReturns a font descriptor that contains the text style and the content size category that the provided trait collection specifies.\n+ fontDescriptorWithName:matrix:\nReturns a font descriptor with the specified values for the name and matrix dictionary attributes.\n+ fontDescriptorWithName:size:\nReturns a font descriptor with the specified values for the name and size dictionary attributes.\n- fontDescriptorByAddingAttributes:\nReturns a new font descriptor that’s the same as the existing descriptor, but with the specified attributes taking precedence over the existing ones.\n- fontDescriptorWithDesign:\nReturns a new font descriptor that’s the same as the existing descriptor, but with the specified design.\n- fontDescriptorWithFamily:\nReturns a new font descriptor whose attributes are the same as the existing font descriptor, but from the specified family.\n- fontDescriptorWithFace:\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified face.\n- fontDescriptorWithMatrix:\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified matrix.\n- fontDescriptorWithSize:\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified point size.\n- fontDescriptorWithSymbolicTraits:\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified symbolic traits."
  },
  {
    "title": "UIGraphicsPDFRenderer.DrawingActions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uigraphicspdfrenderer/drawingactions",
    "html": "Discussion\n\nUIGraphicsPDFDrawingActions defines a block type that takes a UIGraphicsPDFRendererContext object as an argument and has no return value.\n\nYou provide a block of this type as an argument to the PDF drawing methods on UIGraphicsPDFRenderer. Your block should use the provided PDF renderer context to perform the drawing operations you want the renderer to execute.\n\nSee Creating a PDF with a PDF renderer for an example use of a UIGraphicsPDFDrawingActions block.\n\nSee Also\nManaging the PDF data\nfunc pdfData(actions: (UIGraphicsPDFRendererContext) -> Void) -> Data\nCreates a PDF from a set of drawing instructions and returns it as a data object.\nfunc writePDF(to: URL, withActions: (UIGraphicsPDFRendererContext) -> Void)\nCreates a PDF from a set of drawing instructions and saves it to a specified URL."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiusernotificationcategory/1615391-init",
    "html": "See Also\nCreating the action group\ninit()\nCreates an action group.\nDeprecated"
  },
  {
    "title": "popoverController | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistoryboardpopoversegue/1624759-popovercontroller",
    "html": "See Also\nRelated Documentation\nView Controller Programming Guide for iOS"
  },
  {
    "title": "addOption(withTitle:image:order:handler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentmenuviewcontroller/1614193-addoption",
    "html": "Parameters\ntitle\n\nThe custom menu item’s title.\n\nimage\n\nThe custom menu item’s image.\n\norder\n\nThe position of this menu item. See UIDocumentMenuOrder for possible values.\n\nhandler\n\nA block that is called when the user selects this custom menu item.\n\nSee Also\nConfiguring a document menu\nenum UIDocumentMenuOrder\nThe insertion point for custom menu items.\nDeprecated"
  },
  {
    "title": "preferredFontDescriptor(withTextStyle:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifontdescriptor/1616705-preferredfontdescriptor",
    "html": "Parameters\nstyle\n\nThe text style for which to return a font descriptor.\n\nReturn Value\n\nThe new font descriptor.\n\nSee Also\nCreating a font descriptor\nclass func preferredFontDescriptor(withTextStyle: UIFont.TextStyle, compatibleWith: UITraitCollection?) -> UIFontDescriptor\nReturns a font descriptor that contains the text style and the content size category that the provided trait collection specifies.\ninit(name: String, matrix: CGAffineTransform)\nReturns a font descriptor with the specified values for the name and matrix dictionary attributes.\ninit(name: String, size: CGFloat)\nReturns a font descriptor with the specified values for the name and size dictionary attributes.\nfunc addingAttributes([UIFontDescriptor.AttributeName : Any]) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing descriptor, but with the specified attributes taking precedence over the existing ones.\nfunc withDesign(UIFontDescriptor.SystemDesign) -> UIFontDescriptor?\nReturns a new font descriptor that’s the same as the existing descriptor, but with the specified design.\nfunc withFamily(String) -> UIFontDescriptor\nReturns a new font descriptor whose attributes are the same as the existing font descriptor, but from the specified family.\nfunc withFace(String) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified face.\nfunc withMatrix(CGAffineTransform) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified matrix.\nfunc withSize(CGFloat) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified point size.\nfunc withSymbolicTraits(UIFontDescriptor.SymbolicTraits) -> UIFontDescriptor?\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified symbolic traits."
  },
  {
    "title": "eventAttribution | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscene/openexternalurloptions/3727336-eventattribution",
    "html": "Discussion\n\nFor more information about preparing event attribution data, see UIEventAttribution."
  },
  {
    "title": "destination | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistoryboardsegue/1621916-destination",
    "html": "Discussion\n\nThis property contains the view controller whose contents should be displayed at the end of the segue.\n\nSee Also\nAccessing the segue attributes\nvar source: UIViewController\nThe source view controller for the segue.\nvar identifier: String?\nThe identifier for the segue object."
  },
  {
    "title": "searchDisplayController(_:didLoadSearchResultsTableView:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchdisplaydelegate/1620398-searchdisplaycontroller",
    "html": "Parameters\ncontroller\n\nThe search display controller for which the receiver is the delegate.\n\ntableView\n\nThe search display controller’s table view.\n\nSee Also\nLoading and unloading the table view\nfunc searchDisplayController(UISearchDisplayController, willUnloadSearchResultsTableView: UITableView)\nTells the delegate that the controller is about to unload its table view.\nDeprecated"
  },
  {
    "title": "searchDisplayController(_:willUnloadSearchResultsTableView:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchdisplaydelegate/1620401-searchdisplaycontroller",
    "html": "Parameters\ncontroller\n\nThe search display controller for which the receiver is the delegate.\n\ntableView\n\nThe search display controller’s table view.\n\nSee Also\nLoading and unloading the table view\nfunc searchDisplayController(UISearchDisplayController, didLoadSearchResultsTableView: UITableView)\nTells the delegate that the controller has loaded its table view.\nDeprecated"
  },
  {
    "title": "addSymbolEffect(_:options:animated:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageview/4213117-addsymboleffect",
    "html": "Parameters\neffect\n\nThe symbol effect to add.\n\noptions\n\nThe options for the symbol effect.\n\nanimated\n\nA Boolean value that indicates whether to animate the addition of a scale, appear, or disappear effect.\n\ncompletion\n\nA completion handler the system calls after the effect’s addition is complete.\n\nSee Also\nConfiguring symbol effects\nfunc addSymbolEffect(some DiscreteSymbolEffect & IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nAdds a discrete, indefinite symbol effect to the image view with the specified options and animation.\nfunc addSymbolEffect(some DiscreteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nAdds an indefinite symbol effect to the image view with the specified options and animation.\nfunc setSymbolImage(UIImage, contentTransition: some ContentTransitionSymbolEffect & SymbolEffect, options: SymbolEffectOptions, completion: UISymbolEffectCompletion?)\nSets a symbol image using the specified content-transition effect, options, and completion handler.\nfunc removeSymbolEffect(ofType: some IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nRemoves the symbol effect that matches the specified indefinite effect type, using the specified options and animation setting.\nfunc removeSymbolEffect(ofType: some DiscreteSymbolEffect & IndefiniteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nRemoves the symbol effect that matches the specified discrete, indefinite effect type, using the specified options and animation setting.\nfunc removeSymbolEffect(ofType: some DiscreteSymbolEffect & SymbolEffect, options: SymbolEffectOptions, animated: Bool, completion: UISymbolEffectCompletion?)\nRemoves the symbol effect that matches the specified discrete effect type, using the specified options and animation setting.\nfunc removeAllSymbolEffects(options: SymbolEffectOptions, animated: Bool)\nRemoves all symbol effects from the image view, using the specified options and animation setting.\ntypealias UISymbolEffectCompletion\nA completion handler for adding and removing symbol effects and transitions.\nstruct UISymbolEffectCompletionContext\nInformation about a symbol effect’s addition or removal."
  },
  {
    "title": "isAnimating | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageview/2097534-isanimating",
    "html": "Return Value\n\ntrue if the animation is running; otherwise, false.\n\nSee Also\nAnimating a sequence of images\nvar animationImages: [UIImage]?\nAn array of UIImage objects to use for an animation.\nvar highlightedAnimationImages: [UIImage]?\nAn array of UIImage objects to use for an animation when the view is highlighted.\nvar animationDuration: TimeInterval\nThe amount of time it takes to go through one cycle of the images.\nvar animationRepeatCount: Int\nSpecifies the number of times to repeat the animation.\nfunc startAnimating()\nStarts animating the images in the receiver.\nfunc stopAnimating()\nStops animating the images in the receiver."
  },
  {
    "title": "highlightedImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageview/1621066-highlightedimage",
    "html": "Discussion\n\nThe image in this property is displayed when the image view’s isHighlighted property is true. If the highlightedAnimationImages property contains a valid set of images, those image are used instead.\n\nThis property is set to the image (if any) you specified at initialization time. If you did not use the init(image:highlightedImage:) method to initialize your image view, the initial value of this property is nil.\n\nSee Also\nAccessing the displayed images\nvar image: UIImage?\nThe image displayed in the image view.\nRelated Documentation\nvar highlightedAnimationImages: [UIImage]?\nAn array of objects to use for an animation when the view is highlighted."
  },
  {
    "title": "init(image:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageview/1621062-init",
    "html": "Parameters\nimage\n\nThe initial image to display in the image view. You may specify an image object that contains an animated sequence of images.\n\nReturn Value\n\nAn initialized image view object.\n\nDiscussion\n\nThe image you specified is used to configure the initial size of the image view itself. Use constraints and the image view’s content mode to adjust the image view’s final size onscreen. This method disables user interactions for the image view by setting the isUserInteractionEnabled property to false.\n\nIf you specify an animated image whose duration is greater than 0, the image view automatically starts playing the animation.\n\nSee Also\nCreating an image view\ninit(image: UIImage?, highlightedImage: UIImage?)\nReturns an image view initialized with the specified regular and highlighted images."
  },
  {
    "title": "UISceneError.Code.requestDenied | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisceneerror/code/requestdenied",
    "html": "See Also\nError codes\ncase multipleScenesNotSupported\nAn error that indicates multiple scenes aren’t supported.\ncase geometryRequestUnsupported\nAn error that indicates the geometry request is invalid or unsupported.\ncase geometryRequestDenied\nAn error that indicates the geometry request is valid but the system denied the request."
  },
  {
    "title": "stopAnimating() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageview/1621057-stopanimating",
    "html": "See Also\nAnimating a sequence of images\nvar animationImages: [UIImage]?\nAn array of UIImage objects to use for an animation.\nvar highlightedAnimationImages: [UIImage]?\nAn array of UIImage objects to use for an animation when the view is highlighted.\nvar animationDuration: TimeInterval\nThe amount of time it takes to go through one cycle of the images.\nvar animationRepeatCount: Int\nSpecifies the number of times to repeat the animation.\nfunc startAnimating()\nStarts animating the images in the receiver.\nvar isAnimating: Bool\nReturns a Boolean value indicating whether the animation is running."
  },
  {
    "title": "prepareForPopoverPresentation(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipopoverpresentationcontrollerdelegate/1622317-prepareforpopoverpresentation",
    "html": "Parameters\npopoverPresentationController\n\nThe popover presentation controller that is about to display the popover.\n\nDiscussion\n\nUse this method to perform any last minute customizations of the popover appearance and behavior. At the time this method is called, the popover is not yet on the screen. You can use this method to modify the configuration of the popover presentation controller or perform any other actions that your app requires.\n\nSee Also\nPresenting and dismissing the popover\nfunc popoverPresentationControllerShouldDismissPopover(UIPopoverPresentationController) -> Bool\nAsks the delegate if the popover should be dismissed.\nDeprecated\nfunc popoverPresentationControllerDidDismissPopover(UIPopoverPresentationController)\nTells the delegate that the popover was dismissed.\nDeprecated"
  },
  {
    "title": "image | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiimageview/1621069-image",
    "html": "Discussion\n\nThis property contains the main image displayed by the image view. This image is displayed when the image view is in its natural state. When highlighted, the image view displays the image in its highlightedImage property instead. If that property is set to nil, the image view applies a default highlight to this image. If the animationImages property contains a valid set of images, those images are used instead.\n\nChanging the image in this property does not automatically change the size of the image view. After setting the image, call the sizeToFit() method to recompute the image view’s size based on the new image and the active constraints.\n\nThis property is set to the image you specified at initialization time. If you did not use the init(image:) or init(image:highlightedImage:) method to initialize your image view, the initial value of this property is nil.\n\nSee Also\nAccessing the displayed images\nvar highlightedImage: UIImage?\nThe highlighted image displayed in the image view.\nRelated Documentation\nvar animationImages: [UIImage]?\nAn array of objects to use for an animation."
  },
  {
    "title": "application(_:didRegister:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623022-application",
    "html": "Deprecated\n\nUse requestAuthorization(options:completionHandler:) instead.\n\nParameters\napplication\n\nThe app object that registered the user notification settings.\n\nnotificationSettings\n\nThe user’s specified notification settings for your app. The settings in this object may be different than the ones you originally requested.\n\nDiscussion\n\nApps that use local or remote notifications to alert the user to new information must register the types of notifications they want to use by calling the registerUserNotificationSettings(_:) method of the app object. The system compares your app’s request with the user’s preferences to determine the types of local and remote notifications allowed, and returns the results to your app by calling this method. Check the contents of the notificationSettings parameter whenever this method is called.\n\nBecause the user can change notification settings in the Settings app at any time, call the currentUserNotificationSettings method before your app performs work to prepare a notification for presentation.\n\nThe first time you register your app’s preferred notification types, the system asks the user whether your app should be allowed to deliver notifications and stores the user’s response. The system does not prompt the user on subsequent calls to the registerUserNotificationSettings(_:) method, but the user can always change notification preferences using Settings.\n\nA user’s notification settings control only whether the system displays local or remote notifications onscreen. Regardless of the notification settings, local and remote notifications are delivered to your app at the appropriate times.\n\nSee Also\nDeprecated\nfunc application(UIApplication, didReceive: UILocalNotification)\nSent to the delegate when a running app receives a local notification.\nDeprecated\nfunc application(UIApplication, didReceiveRemoteNotification: [AnyHashable : Any])\nCalled when your app has received a remote notification.\nDeprecated\nfunc application(UIApplication, handleActionWithIdentifier: String?, for: UILocalNotification, completionHandler: () -> Void)\nCalled when your app has been activated because user selected a custom action from the alert panel of a local notification.\nDeprecated\nfunc application(UIApplication, handleActionWithIdentifier: String?, for: UILocalNotification, withResponseInfo: [AnyHashable : Any], completionHandler: () -> Void)\nCalled when your app has been activated by the user selecting an action from a local notification.\nDeprecated\nfunc application(UIApplication, handleActionWithIdentifier: String?, forRemoteNotification: [AnyHashable : Any], completionHandler: () -> Void)\nTells the app delegate to perform the custom action specified by a remote notification.\nDeprecated\nfunc application(UIApplication, handleActionWithIdentifier: String?, forRemoteNotification: [AnyHashable : Any], withResponseInfo: [AnyHashable : Any], completionHandler: () -> Void)\nCalled when your app has been activated by the user selecting an action from a remote notification.\nDeprecated\nfunc application(UIApplication, handleOpen: URL) -> Bool\nAsks the delegate to open a resource identified by URL.\nDeprecated\nfunc application(UIApplication, open: URL, sourceApplication: String?, annotation: Any) -> Bool\nAsks the delegate to open a resource identified by a URL.\nDeprecated\nfunc application(UIApplication, willChangeStatusBarOrientation: UIInterfaceOrientation, duration: TimeInterval)\nTells the delegate when the interface orientation of the status bar is about to change.\nDeprecated\nfunc application(UIApplication, didChangeStatusBarOrientation: UIInterfaceOrientation)\nTells the delegate when the interface orientation of the status bar has changed.\nDeprecated\nfunc application(UIApplication, willChangeStatusBarFrame: CGRect)\nTells the delegate when the frame of the status bar is about to change.\nDeprecated\nfunc application(UIApplication, didChangeStatusBarFrame: CGRect)\nTells the delegate when the frame of the status bar has changed.\nDeprecated\nfunc application(UIApplication, handle: INIntent, completionHandler: (INIntentResponse) -> Void)\nAsks the delegate to handle the specified SiriKit intent directly.\nDeprecated\nfunc application(UIApplication, performFetchWithCompletionHandler: (UIBackgroundFetchResult) -> Void)\nTells the app that it can begin a fetch operation if it has data to download.\nDeprecated\nfunc application(UIApplication, shouldSaveApplicationState: NSCoder) -> Bool\nAsks the delegate whether to preserve the app’s state.\nDeprecated\nfunc application(UIApplication, shouldRestoreApplicationState: NSCoder) -> Bool\nAsks the delegate whether to restore the app’s saved state.\nDeprecated"
  },
  {
    "title": "withFace(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifontdescriptor/1616681-withface",
    "html": "Parameters\nnewFace\n\nThe new font face.\n\nReturn Value\n\nThe new font descriptor.\n\nSee Also\nCreating a font descriptor\nclass func preferredFontDescriptor(withTextStyle: UIFont.TextStyle) -> UIFontDescriptor\nReturns a font descriptor that contains the specified text style and the user’s selected content size category.\nclass func preferredFontDescriptor(withTextStyle: UIFont.TextStyle, compatibleWith: UITraitCollection?) -> UIFontDescriptor\nReturns a font descriptor that contains the text style and the content size category that the provided trait collection specifies.\ninit(name: String, matrix: CGAffineTransform)\nReturns a font descriptor with the specified values for the name and matrix dictionary attributes.\ninit(name: String, size: CGFloat)\nReturns a font descriptor with the specified values for the name and size dictionary attributes.\nfunc addingAttributes([UIFontDescriptor.AttributeName : Any]) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing descriptor, but with the specified attributes taking precedence over the existing ones.\nfunc withDesign(UIFontDescriptor.SystemDesign) -> UIFontDescriptor?\nReturns a new font descriptor that’s the same as the existing descriptor, but with the specified design.\nfunc withFamily(String) -> UIFontDescriptor\nReturns a new font descriptor whose attributes are the same as the existing font descriptor, but from the specified family.\nfunc withMatrix(CGAffineTransform) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified matrix.\nfunc withSize(CGFloat) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified point size.\nfunc withSymbolicTraits(UIFontDescriptor.SymbolicTraits) -> UIFontDescriptor?\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified symbolic traits.\nRelated Documentation\n+ fontDescriptorWithFontAttributes:\nReturns a font descriptor with a dictionary of attributes."
  },
  {
    "title": "textField(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uialertview/1620757-textfield",
    "html": "Parameters\ntextFieldIndex\n\nThe index of the text field. The text field indices start at 0.\n\nReturn Value\n\nThe text field specified by index textFieldIndex.\n\nDiscussion\n\nThe number of text fields present in an alert is dependent on the style of the alert.\n\nAlert Style\n\n\t\n\nText Fields\n\n\n\n\nUIAlertViewStyle.default\n\n\t\n\nNo user-editable text fields.\n\n\n\n\nUIAlertViewStyle.secureTextInput\n\n\t\n\nA single text field at index 0.\n\n\n\n\nUIAlertViewStyle.plainTextInput\n\n\t\n\nA single text field at index 0.\n\n\n\n\nUIAlertViewStyle.loginAndPasswordInput\n\n\t\n\nThe login field is at index 0. The password field is at index 1.\n\nIf your application attempts to retrieve a text field with an index that is out of bounds, the alert raises an rangeException.\n\nSee Also\nConfiguring buttons\nfunc addButton(withTitle: String?) -> Int\nAdds a button to the receiver with the given title.\nDeprecated\nvar numberOfButtons: Int\nThe number of buttons on the alert view.\nDeprecated\nfunc buttonTitle(at: Int) -> String?\nReturns the title of the button at the given index.\nDeprecated\nvar cancelButtonIndex: Int\nThe index number of the cancel button.\nDeprecated\nvar firstOtherButtonIndex: Int\nThe index of the first other button.\nDeprecated"
  },
  {
    "title": "withSymbolicTraits(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifontdescriptor/1616665-withsymbolictraits",
    "html": "Parameters\nsymbolicTraits\n\nThe new symbolic traits.\n\nReturn Value\n\nThe new font descriptor.\n\nSee Also\nCreating a font descriptor\nclass func preferredFontDescriptor(withTextStyle: UIFont.TextStyle) -> UIFontDescriptor\nReturns a font descriptor that contains the specified text style and the user’s selected content size category.\nclass func preferredFontDescriptor(withTextStyle: UIFont.TextStyle, compatibleWith: UITraitCollection?) -> UIFontDescriptor\nReturns a font descriptor that contains the text style and the content size category that the provided trait collection specifies.\ninit(name: String, matrix: CGAffineTransform)\nReturns a font descriptor with the specified values for the name and matrix dictionary attributes.\ninit(name: String, size: CGFloat)\nReturns a font descriptor with the specified values for the name and size dictionary attributes.\nfunc addingAttributes([UIFontDescriptor.AttributeName : Any]) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing descriptor, but with the specified attributes taking precedence over the existing ones.\nfunc withDesign(UIFontDescriptor.SystemDesign) -> UIFontDescriptor?\nReturns a new font descriptor that’s the same as the existing descriptor, but with the specified design.\nfunc withFamily(String) -> UIFontDescriptor\nReturns a new font descriptor whose attributes are the same as the existing font descriptor, but from the specified family.\nfunc withFace(String) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified face.\nfunc withMatrix(CGAffineTransform) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified matrix.\nfunc withSize(CGFloat) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified point size.\nRelated Documentation\n+ fontDescriptorWithFontAttributes:\nReturns a font descriptor with a dictionary of attributes."
  },
  {
    "title": "viewController(withRestorationIdentifierPath:coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontrollerrestoration/1616859-viewcontroller",
    "html": "Required\n\nParameters\nidentifierComponents\n\nAn array of NSString objects corresponding to the restoration identifiers of the desired view controller and all of its ancestors in the view controller hierarchy. The last value in the array is the restoration identifier of the desired view controller. Earlier entries represent the restoration identifiers of its ancestors.\n\ncoder\n\nThe keyed archiver containing the app’s saved state information.\n\nReturn Value\n\nThe view controller object to use or nil if you do not want to restore this view controller now.\n\nDiscussion\n\nYour implementation of this method should create (or find) the corresponding view controller object and return it. If your restoration class determines that it doesn’t make sense to display this view controller now, it may return nil from this method to prevent that view controller (and its children) from being added to your interface during the restoration process.\n\nYou use the strings in the identifierComponents parameter to identify the view controller being requested. The view controllers in your app form a hierarchy. At the root of this hierarchy is the window’s root view controller, which itself may present or embed other view controllers. Those presented or embedded view controllers may themselves present and embed other view controllers. The result is a hierarchy of view controller relationships, with each presented or embedded view controller becoming a child of the view controller that presented or embedded it. The strings in the identifierComponents array identify the path through this hierarchy from the root view controller to the desired view controller.\n\nIt isn’t always necessary to create a new view controller object in your implementation of this method. You can also return an existing view controller object that was created by another means. For example, if the view controller had already been loaded from a storyboard file, you’d return that object rather than create a new one.\n\nYour implementation of this method may use any data in the provided coder to assist in the restoration process. However, you don’t need to restore the entire state of the view controller at this point. During a later pass, view controllers that define a decodeRestorableState(with:) method are given a chance to restore their state from the same coder object.\n\nNote\n\nIf you return an object whose class doesn’t match the class of the originally preserved object, or whose class isn’t a direct subclass of the original, the restoration system doesn’t call the decodeRestorableState(with:) method of the view controller."
  },
  {
    "title": "previewProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidragitem/2890972-previewprovider",
    "html": "Discussion\n\nAs the user drags an item across the screen, a preview of the item is displayed. You can change the preview by setting previewProvider to a block that returns a UIDragPreview object. The system invokes the block if and when it needs the drag item preview.\n\nTo use the default preview, set previewProvider to nil. To hide the preview, set previewProvider to a block that returns nil."
  },
  {
    "title": "withSize(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifontdescriptor/1616675-withsize",
    "html": "Parameters\nnewPointSize\n\nThe new point size.\n\nReturn Value\n\nThe new font descriptor.\n\nSee Also\nCreating a font descriptor\nclass func preferredFontDescriptor(withTextStyle: UIFont.TextStyle) -> UIFontDescriptor\nReturns a font descriptor that contains the specified text style and the user’s selected content size category.\nclass func preferredFontDescriptor(withTextStyle: UIFont.TextStyle, compatibleWith: UITraitCollection?) -> UIFontDescriptor\nReturns a font descriptor that contains the text style and the content size category that the provided trait collection specifies.\ninit(name: String, matrix: CGAffineTransform)\nReturns a font descriptor with the specified values for the name and matrix dictionary attributes.\ninit(name: String, size: CGFloat)\nReturns a font descriptor with the specified values for the name and size dictionary attributes.\nfunc addingAttributes([UIFontDescriptor.AttributeName : Any]) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing descriptor, but with the specified attributes taking precedence over the existing ones.\nfunc withDesign(UIFontDescriptor.SystemDesign) -> UIFontDescriptor?\nReturns a new font descriptor that’s the same as the existing descriptor, but with the specified design.\nfunc withFamily(String) -> UIFontDescriptor\nReturns a new font descriptor whose attributes are the same as the existing font descriptor, but from the specified family.\nfunc withFace(String) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified face.\nfunc withMatrix(CGAffineTransform) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified matrix.\nfunc withSymbolicTraits(UIFontDescriptor.SymbolicTraits) -> UIFontDescriptor?\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified symbolic traits.\nRelated Documentation\n+ fontDescriptorWithFontAttributes:\nReturns a font descriptor with a dictionary of attributes."
  },
  {
    "title": "itemProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidragitem/2890975-itemprovider",
    "html": "Discussion\n\nThe item provider conveys the data, or file, that's shared between processes during the drag and drop activity. The property is set when the UIDragItem instance is created. For more information, see init(itemProvider:).\n\nSee Also\nAccessing the drag item’s data\nvar localObject: Any?\nA custom object associated with the drag item."
  },
  {
    "title": "searchDisplayController(_:shouldReloadTableForSearchScope:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchdisplaydelegate/1620409-searchdisplaycontroller",
    "html": "Parameters\ncontroller\n\nThe search display controller for which the receiver is the delegate.\n\nsearchOption\n\nThe index of the selected scope button in the search bar.\n\nReturn Value\n\ntrue if the display controller should reload the data in its table view, otherwise false.\n\nDiscussion\n\nIf you don’t implement this method, then the results table is reloaded as soon as the scope button selection changes.\n\nYou might implement this method if you want to perform an asynchronous search: you would initiate the search in this method, then return false, and reload the table when you have results.\n\nSee Also\nResponding to changes in search criteria\nfunc searchDisplayController(UISearchDisplayController, shouldReloadTableForSearch: String?) -> Bool\nAsks the delegate if the table view should be reloaded for a given search string.\nDeprecated\nRelated Documentation\nvar selectedScopeButtonIndex: Int\nThe index of the selected scope button."
  },
  {
    "title": "interaction(_:didChangeWith:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uispringloadedinteractioneffect/2897374-interaction",
    "html": "Required\n\nParameters\ninteraction\n\nThe spring-loaded interaction providing the state change information.\n\ncontext\n\nAn object that provides information about the current spring-loaded state."
  },
  {
    "title": "aspectRatio | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilayoutguideaspectfitting/3987975-aspectratio",
    "html": "Required\n\nDiscussion\n\nThis property represents the ratio of the content’s width to its height. The value of this property must be greater than 0.0 and less than or equal to 100.0. The default value is 1.0."
  },
  {
    "title": "init(name:sessionRole:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisceneconfiguration/3197949-init",
    "html": "Parameters\nname\n\nThe app-specific name you want to assign to the scene. For scenes you specify in your Info.plist file, this value corresponds to the string assigned to the UISceneConfigurationName key.\n\nsessionRole\n\nThe role of the scene. For a list of possible roles, see UISceneSession.Role.\n\nReturn Value\n\nA new scene-configuration object.\n\nDiscussion\n\nAfter creating a scene-configuration object, supply values for the sceneClass, delegateClass, and storyboard properties."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentmenuviewcontroller/1614182-init",
    "html": "See Also\nCreating a document menu\ninit(documentTypes: [String], in: UIDocumentPickerMode)\nInitializes and returns a document menu to import or open the given file types.\nDeprecated\ninit(url: URL, in: UIDocumentPickerMode)\nInitializes and returns a document menu to export or move the given document.\nDeprecated"
  },
  {
    "title": "identifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiusernotificationcategory/1615383-identifier",
    "html": "Discussion\n\nWhen generating a notification that includes these custom actions, you must use this string to initialize the notification. For local notifications, assign the string to the category property of the UILocalNotification object. For push notifications, use the string as the value of the category key in the push notification’s payload.\n\nSee Also\nGetting the group configuration\nfunc actions(for: UIUserNotificationActionContext) -> [UIUserNotificationAction]?\nReturns the actions to be displayed for the given notification context.\nDeprecated"
  },
  {
    "title": "init(documentTypes:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentmenuviewcontroller/1614187-init",
    "html": "Parameters\nallowedUTIs\n\nAn array of uniform type identifiers. UTIs are strings that uniquely identify a file’s type. For more information, see Uniform Type Identifiers Overview.\n\nmode\n\nThe type of file transfer operation the document picker performs. This argument accepts only the UIDocumentPickerModeImport or UIDocumentPickerModeOpen mode.\n\nReturn Value\n\nReturns an initialized UIDocumentMenuViewController object, or nil if the object could not be successfully initialized.\n\nDiscussion\n\nThe UTI array defines the type of documents that can be imported or opened. The resulting document menu displays all the document pickers appropriate for the given document types and mode.\n\nSee Also\nCreating a document menu\ninit(url: URL, in: UIDocumentPickerMode)\nInitializes and returns a document menu to export or move the given document.\nDeprecated\ninit?(coder: NSCoder)\nCreates a document menu from data in an unarchiver.\nDeprecated\nRelated Documentation\nDocument Picker Programming Guide"
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiusernotificationcategory/1615327-init",
    "html": "See Also\nCreating the action group\ninit?(coder: NSCoder)\nCreates an action group from data in an unarchiver.\nDeprecated"
  },
  {
    "title": "UIUserNotificationActionContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiusernotificationactioncontext",
    "html": "Topics\nConstants\ncase `default`\nThe default context for displaying the alert.\ncase minimal\nA notification where space is minimal.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "UIDocumentMenuDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentmenudelegate",
    "html": "Overview\n\nThe document menu calls the methods of this protocol when the user selects a document picker or dismisses the menu. If the user selects a document picker, set the picker’s delegate and present it.\n\nTopics\nResponding to user actions\nfunc documentMenu(UIDocumentMenuViewController, didPickDocumentPicker: UIDocumentPickerViewController)\nTells the delegate that the user has selected a document picker from the menu.\n\nRequired\n\nfunc documentMenuWasCancelled(UIDocumentMenuViewController)\nTells the delegate that the user dismissed the document menu.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nGetting the user-selected document picker\nvar delegate: UIDocumentMenuDelegate?\nThe document menu’s delegate.\nDeprecated"
  },
  {
    "title": "init(title:action:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenuitem/1622824-init",
    "html": "Parameters\ntitle\n\nThe title of the menu item.\n\naction\n\nA selector identifying the method of the responder object to invoke for handling the command represented by the menu item.\n\nReturn Value\n\nAn initialized UIMenuItem object, or nil if there was a problem creating the object."
  },
  {
    "title": "addingAttributes(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifontdescriptor/1616666-addingattributes",
    "html": "Parameters\nattributes\n\nThe new attributes.\n\nReturn Value\n\nThe new font descriptor.\n\nSee Also\nCreating a font descriptor\nclass func preferredFontDescriptor(withTextStyle: UIFont.TextStyle) -> UIFontDescriptor\nReturns a font descriptor that contains the specified text style and the user’s selected content size category.\nclass func preferredFontDescriptor(withTextStyle: UIFont.TextStyle, compatibleWith: UITraitCollection?) -> UIFontDescriptor\nReturns a font descriptor that contains the text style and the content size category that the provided trait collection specifies.\ninit(name: String, matrix: CGAffineTransform)\nReturns a font descriptor with the specified values for the name and matrix dictionary attributes.\ninit(name: String, size: CGFloat)\nReturns a font descriptor with the specified values for the name and size dictionary attributes.\nfunc withDesign(UIFontDescriptor.SystemDesign) -> UIFontDescriptor?\nReturns a new font descriptor that’s the same as the existing descriptor, but with the specified design.\nfunc withFamily(String) -> UIFontDescriptor\nReturns a new font descriptor whose attributes are the same as the existing font descriptor, but from the specified family.\nfunc withFace(String) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified face.\nfunc withMatrix(CGAffineTransform) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified matrix.\nfunc withSize(CGFloat) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified point size.\nfunc withSymbolicTraits(UIFontDescriptor.SymbolicTraits) -> UIFontDescriptor?\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified symbolic traits.\nRelated Documentation\n+ fontDescriptorWithFontAttributes:\nReturns a font descriptor with a dictionary of attributes."
  },
  {
    "title": "action | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenuitem/1622817-action",
    "html": "Discussion\n\nThe action selector cannot be NULL.\n\nSee Also\nAccessing menu-item attributes\nvar title: String\nThe title of the menu item.\nDeprecated"
  },
  {
    "title": "preferredFontDescriptor(withTextStyle:compatibleWith:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifontdescriptor/1771750-preferredfontdescriptor",
    "html": "Parameters\nstyle\n\nThe text style for which to return a font descriptor.\n\ntraitCollection\n\nThe trait collection containing the content size category information.\n\nReturn Value\n\nThe new font descriptor.\n\nSee Also\nCreating a font descriptor\nclass func preferredFontDescriptor(withTextStyle: UIFont.TextStyle) -> UIFontDescriptor\nReturns a font descriptor that contains the specified text style and the user’s selected content size category.\ninit(name: String, matrix: CGAffineTransform)\nReturns a font descriptor with the specified values for the name and matrix dictionary attributes.\ninit(name: String, size: CGFloat)\nReturns a font descriptor with the specified values for the name and size dictionary attributes.\nfunc addingAttributes([UIFontDescriptor.AttributeName : Any]) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing descriptor, but with the specified attributes taking precedence over the existing ones.\nfunc withDesign(UIFontDescriptor.SystemDesign) -> UIFontDescriptor?\nReturns a new font descriptor that’s the same as the existing descriptor, but with the specified design.\nfunc withFamily(String) -> UIFontDescriptor\nReturns a new font descriptor whose attributes are the same as the existing font descriptor, but from the specified family.\nfunc withFace(String) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified face.\nfunc withMatrix(CGAffineTransform) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified matrix.\nfunc withSize(CGFloat) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified point size.\nfunc withSymbolicTraits(UIFontDescriptor.SymbolicTraits) -> UIFontDescriptor?\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified symbolic traits."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscene/3197909-delegate",
    "html": "Discussion\n\nThe system creates a default delegate object based on the the class name you provide in your app's Info.plist file, or that your app delegate specifies when configuring the scene. You can change this default delegate object later, as needed.\n\nSee Also\nManaging the life cycle of a scene\nprotocol UISceneDelegate\nThe core methods you use to respond to life-cycle events occurring within a scene."
  },
  {
    "title": "init(name:matrix:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifontdescriptor/1616670-init",
    "html": "Parameters\nfontName\n\nThe value for name.\n\nmatrix\n\nThe value for matrix.\n\nReturn Value\n\nThe new font descriptor.\n\nSee Also\nCreating a font descriptor\nclass func preferredFontDescriptor(withTextStyle: UIFont.TextStyle) -> UIFontDescriptor\nReturns a font descriptor that contains the specified text style and the user’s selected content size category.\nclass func preferredFontDescriptor(withTextStyle: UIFont.TextStyle, compatibleWith: UITraitCollection?) -> UIFontDescriptor\nReturns a font descriptor that contains the text style and the content size category that the provided trait collection specifies.\ninit(name: String, size: CGFloat)\nReturns a font descriptor with the specified values for the name and size dictionary attributes.\nfunc addingAttributes([UIFontDescriptor.AttributeName : Any]) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing descriptor, but with the specified attributes taking precedence over the existing ones.\nfunc withDesign(UIFontDescriptor.SystemDesign) -> UIFontDescriptor?\nReturns a new font descriptor that’s the same as the existing descriptor, but with the specified design.\nfunc withFamily(String) -> UIFontDescriptor\nReturns a new font descriptor whose attributes are the same as the existing font descriptor, but from the specified family.\nfunc withFace(String) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified face.\nfunc withMatrix(CGAffineTransform) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified matrix.\nfunc withSize(CGFloat) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified point size.\nfunc withSymbolicTraits(UIFontDescriptor.SymbolicTraits) -> UIFontDescriptor?\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified symbolic traits.\nRelated Documentation\n+ fontDescriptorWithFontAttributes:\nReturns a font descriptor with a dictionary of attributes."
  },
  {
    "title": "withDesign(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifontdescriptor/3151797-withdesign",
    "html": "Parameters\ndesign\n\nThe new system font design.\n\nReturn Value\n\nThe new font descriptor, if the original font descriptor is from a system UI font; otherwise, nil.\n\nDiscussion\n\nThis method changes the design of an existing font descriptor that describes a system UI font — for example, a font descriptor created by methods such as systemFont(ofSize:), preferredFont(forTextStyle:), or preferredFontDescriptor(withTextStyle:). If the original font descriptor doesn’t describe a system font, this method returns nil.\n\nSee Also\nCreating a font descriptor\nclass func preferredFontDescriptor(withTextStyle: UIFont.TextStyle) -> UIFontDescriptor\nReturns a font descriptor that contains the specified text style and the user’s selected content size category.\nclass func preferredFontDescriptor(withTextStyle: UIFont.TextStyle, compatibleWith: UITraitCollection?) -> UIFontDescriptor\nReturns a font descriptor that contains the text style and the content size category that the provided trait collection specifies.\ninit(name: String, matrix: CGAffineTransform)\nReturns a font descriptor with the specified values for the name and matrix dictionary attributes.\ninit(name: String, size: CGFloat)\nReturns a font descriptor with the specified values for the name and size dictionary attributes.\nfunc addingAttributes([UIFontDescriptor.AttributeName : Any]) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing descriptor, but with the specified attributes taking precedence over the existing ones.\nfunc withFamily(String) -> UIFontDescriptor\nReturns a new font descriptor whose attributes are the same as the existing font descriptor, but from the specified family.\nfunc withFace(String) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified face.\nfunc withMatrix(CGAffineTransform) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified matrix.\nfunc withSize(CGFloat) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified point size.\nfunc withSymbolicTraits(UIFontDescriptor.SymbolicTraits) -> UIFontDescriptor?\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified symbolic traits.\nRelated Documentation\n+ fontDescriptorWithFontAttributes:\nReturns a font descriptor with a dictionary of attributes."
  },
  {
    "title": "withFamily(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifontdescriptor/1616676-withfamily",
    "html": "Parameters\nnewFamily\n\nThe new font family.\n\nReturn Value\n\nThe new font descriptor.\n\nSee Also\nCreating a font descriptor\nclass func preferredFontDescriptor(withTextStyle: UIFont.TextStyle) -> UIFontDescriptor\nReturns a font descriptor that contains the specified text style and the user’s selected content size category.\nclass func preferredFontDescriptor(withTextStyle: UIFont.TextStyle, compatibleWith: UITraitCollection?) -> UIFontDescriptor\nReturns a font descriptor that contains the text style and the content size category that the provided trait collection specifies.\ninit(name: String, matrix: CGAffineTransform)\nReturns a font descriptor with the specified values for the name and matrix dictionary attributes.\ninit(name: String, size: CGFloat)\nReturns a font descriptor with the specified values for the name and size dictionary attributes.\nfunc addingAttributes([UIFontDescriptor.AttributeName : Any]) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing descriptor, but with the specified attributes taking precedence over the existing ones.\nfunc withDesign(UIFontDescriptor.SystemDesign) -> UIFontDescriptor?\nReturns a new font descriptor that’s the same as the existing descriptor, but with the specified design.\nfunc withFace(String) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified face.\nfunc withMatrix(CGAffineTransform) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified matrix.\nfunc withSize(CGFloat) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified point size.\nfunc withSymbolicTraits(UIFontDescriptor.SymbolicTraits) -> UIFontDescriptor?\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified symbolic traits.\nRelated Documentation\n+ fontDescriptorWithFontAttributes:\nReturns a font descriptor with a dictionary of attributes."
  },
  {
    "title": "perform() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uistoryboardsegue/1621912-perform",
    "html": "Discussion\n\nSubclasses override this method and use it to perform the animations from the views in source to the views in destination. Typically, you use UIKit or Core Animation to set up an animation from one set of views to the next. For more complex animations, you might take a snapshot image of the two view hierarchies and manipulate the images instead of the actual view objects.\n\nRegardless of how you perform the animation, at the end of it, you’re responsible for installing the destination view controller (and its views) in the right place so that it can handle events. For example, if you were to implement a custom modal transition, you might perform your animations using snapshot images and then at the end call the presentModalViewController(_:animated:) method (with animations disabled) to set up the appropriate modal relationship between the source and destination view controllers."
  },
  {
    "title": "categories | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiusernotificationsettings/1615365-categories",
    "html": "Discussion\n\nThis property contains the UIUserNotificationCategory objects that you specified when creating the settings object. Each object corresponds to a group of actions that may be displayed in conjunction with a push notification. After registration, this property contains the set of actions you specified in your initial request.\n\nSee Also\nGetting the configured settings\nvar types: UIUserNotificationType\nA bitmask of the notification types that your app is allowed to use.\nDeprecated\nRelated Documentation\ninit(types: UIUserNotificationType, categories: Set<UIUserNotificationCategory>?)\nCreates and returns a settings object that you can use to register your requested notification and action types."
  },
  {
    "title": "UIUserNotificationType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiusernotificationtype",
    "html": "Topics\nConstants\nstatic var badge: UIUserNotificationType\nThe app badges its icon.\nstatic var sound: UIUserNotificationType\nThe app plays a sound.\nstatic var alert: UIUserNotificationType\nThe app posts an alert.\nInitializers\ninit(rawValue: UInt)\nCreates a notification type with the specified raw value.\nRelationships\nConforms To\nOptionSet\nSendable"
  },
  {
    "title": "searchDisplayControllerWillBeginSearch(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchdisplaydelegate/1620399-searchdisplaycontrollerwillbegin",
    "html": "Parameters\ncontroller\n\nThe search display controller for which the receiver is the delegate.\n\nSee Also\nResponding to search state change\nfunc searchDisplayControllerDidBeginSearch(UISearchDisplayController)\nTells the delegate that the controller has started searching.\nDeprecated\nfunc searchDisplayControllerWillEndSearch(UISearchDisplayController)\nTells the delegate that the controller is about to end searching.\nDeprecated\nfunc searchDisplayControllerDidEndSearch(UISearchDisplayController)\nTells the delegate that the controller has finished searching.\nDeprecated"
  },
  {
    "title": "searchDisplayControllerWillEndSearch(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchdisplaydelegate/1620389-searchdisplaycontrollerwillendse",
    "html": "Parameters\ncontroller\n\nThe search display controller for which the receiver is the delegate.\n\nSee Also\nResponding to search state change\nfunc searchDisplayControllerWillBeginSearch(UISearchDisplayController)\nTells the delegate that the controller is about to begin searching.\nDeprecated\nfunc searchDisplayControllerDidBeginSearch(UISearchDisplayController)\nTells the delegate that the controller has started searching.\nDeprecated\nfunc searchDisplayControllerDidEndSearch(UISearchDisplayController)\nTells the delegate that the controller has finished searching.\nDeprecated"
  },
  {
    "title": "url | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiopenurlcontext/3238053-url",
    "html": "See Also\nGetting the URL\nvar options: UIScene.OpenURLOptions\nAdditional information for determining how to open the URL.\nclass UIScene.OpenURLOptions\nOptions that UIKit provides when asking your app to open a URL."
  },
  {
    "title": "init(url:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidocumentmenuviewcontroller/1614191-init",
    "html": "Parameters\nurl\n\nThe document to be exported or moved.\n\nmode\n\nThe type of file-transfer operation that the document picker performs. This argument accepts only the UIDocumentPickerModeExportToService or UIDocumentPickerModeMoveToService mode.\n\nReturn Value\n\nReturns an initialized UIDocumentMenuViewController object, or nil if the object could not be successfully initialized.\n\nDiscussion\n\nThe resulting document menu displays all the document pickers appropriate for the given mode.\n\nSee Also\nCreating a document menu\ninit(documentTypes: [String], in: UIDocumentPickerMode)\nInitializes and returns a document menu to import or open the given file types.\nDeprecated\ninit?(coder: NSCoder)\nCreates a document menu from data in an unarchiver.\nDeprecated"
  },
  {
    "title": "options | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiopenurlcontext/3238054-options",
    "html": "See Also\nGetting the URL\nvar url: URL\nThe URL to open.\nclass UIScene.OpenURLOptions\nOptions that UIKit provides when asking your app to open a URL."
  },
  {
    "title": "searchDisplayControllerDidEndSearch(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchdisplaydelegate/1620402-searchdisplaycontrollerdidendsea",
    "html": "Parameters\ncontroller\n\nThe search display controller for which the receiver is the delegate.\n\nSee Also\nResponding to search state change\nfunc searchDisplayControllerWillBeginSearch(UISearchDisplayController)\nTells the delegate that the controller is about to begin searching.\nDeprecated\nfunc searchDisplayControllerDidBeginSearch(UISearchDisplayController)\nTells the delegate that the controller has started searching.\nDeprecated\nfunc searchDisplayControllerWillEndSearch(UISearchDisplayController)\nTells the delegate that the controller is about to end searching.\nDeprecated"
  },
  {
    "title": "prefersToActivateForTargetContentIdentifierPredicate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisceneactivationconditions/3238067-preferstoactivatefortargetconten",
    "html": "Discussion\n\nUse this property to specify which tasks you want this scene to handle. UIKit evaluates your predicate against the targetContentIdentifier property of the object causing the activation of the scene. Many different objects contain target content identifiers, including NSUserActivity, UNNotificationContent, and UIApplicationShortcutItem.\n\nUIKit must be able to evaluate your predicate’s conditions outside the scope of your app, so don’t include conditions that require dynamic evaluation. For example, don’t include key paths in your predicate and don’t create predicates that evaluate conditions using selectors or blocks. The default value of this property is a predicate that always evaluates to the value false.\n\nSee Also\nSpecifying the conditions\nvar canActivateForTargetContentIdentifierPredicate: NSPredicate\nConditions for which UIKit can activate the scene if a better alternative doesn’t exist."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisceneactivationconditions/3238066-init",
    "html": "Return Value\n\nAn activation conditions object containing the archived condition information.\n\nSee Also\nCreating an activation conditions object\ninit()\nCreates a new activation conditions object."
  },
  {
    "title": "searchDisplayControllerDidBeginSearch(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchdisplaydelegate/1620410-searchdisplaycontrollerdidbegins",
    "html": "Parameters\ncontroller\n\nThe search display controller for which the receiver is the delegate.\n\nSee Also\nResponding to search state change\nfunc searchDisplayControllerWillBeginSearch(UISearchDisplayController)\nTells the delegate that the controller is about to begin searching.\nDeprecated\nfunc searchDisplayControllerWillEndSearch(UISearchDisplayController)\nTells the delegate that the controller is about to end searching.\nDeprecated\nfunc searchDisplayControllerDidEndSearch(UISearchDisplayController)\nTells the delegate that the controller has finished searching.\nDeprecated"
  },
  {
    "title": "windowDismissalAnimation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindowscenedestructionrequestoptions/3197964-windowdismissalanimation",
    "html": "See Also\nConfiguring the dismissal animation\nenum UIWindowScene.DismissalAnimation\nConstants that indicate the types of animations available for dismissing a scene’s windows."
  },
  {
    "title": "searchDisplayController(_:willShowSearchResultsTableView:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchdisplaydelegate/1620391-searchdisplaycontroller",
    "html": "Parameters\ncontroller\n\nThe search display controller for which the receiver is the delegate.\n\ntableView\n\nThe search display controller’s table view.\n\nSee Also\nShowing and hiding the table view\nfunc searchDisplayController(UISearchDisplayController, didShowSearchResultsTableView: UITableView)\nTells the delegate that the controller just displayed its table view.\nDeprecated\nfunc searchDisplayController(UISearchDisplayController, willHideSearchResultsTableView: UITableView)\nTells the delegate that the controller is about to hide its table view.\nDeprecated\nfunc searchDisplayController(UISearchDisplayController, didHideSearchResultsTableView: UITableView)\nTells the delegate that the controller just hid its table view.\nDeprecated"
  },
  {
    "title": "searchDisplayController(_:didShowSearchResultsTableView:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchdisplaydelegate/1620396-searchdisplaycontroller",
    "html": "Parameters\ncontroller\n\nThe search display controller for which the receiver is the delegate.\n\ntableView\n\nThe search display controller’s table view.\n\nSee Also\nShowing and hiding the table view\nfunc searchDisplayController(UISearchDisplayController, willShowSearchResultsTableView: UITableView)\nTells the delegate that the controller is about to display its table view.\nDeprecated\nfunc searchDisplayController(UISearchDisplayController, willHideSearchResultsTableView: UITableView)\nTells the delegate that the controller is about to hide its table view.\nDeprecated\nfunc searchDisplayController(UISearchDisplayController, didHideSearchResultsTableView: UITableView)\nTells the delegate that the controller just hid its table view.\nDeprecated"
  },
  {
    "title": "searchDisplayController(_:willHideSearchResultsTableView:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchdisplaydelegate/1620407-searchdisplaycontroller",
    "html": "Parameters\ncontroller\n\nThe search display controller for which the receiver is the delegate.\n\ntableView\n\nThe search display controller’s table view.\n\nSee Also\nShowing and hiding the table view\nfunc searchDisplayController(UISearchDisplayController, willShowSearchResultsTableView: UITableView)\nTells the delegate that the controller is about to display its table view.\nDeprecated\nfunc searchDisplayController(UISearchDisplayController, didShowSearchResultsTableView: UITableView)\nTells the delegate that the controller just displayed its table view.\nDeprecated\nfunc searchDisplayController(UISearchDisplayController, didHideSearchResultsTableView: UITableView)\nTells the delegate that the controller just hid its table view.\nDeprecated"
  },
  {
    "title": "searchDisplayController(_:didHideSearchResultsTableView:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchdisplaydelegate/1620395-searchdisplaycontroller",
    "html": "Parameters\ncontroller\n\nThe search display controller for which the receiver is the delegate.\n\ntableView\n\nThe search display controller’s table view.\n\nSee Also\nShowing and hiding the table view\nfunc searchDisplayController(UISearchDisplayController, willShowSearchResultsTableView: UITableView)\nTells the delegate that the controller is about to display its table view.\nDeprecated\nfunc searchDisplayController(UISearchDisplayController, didShowSearchResultsTableView: UITableView)\nTells the delegate that the controller just displayed its table view.\nDeprecated\nfunc searchDisplayController(UISearchDisplayController, willHideSearchResultsTableView: UITableView)\nTells the delegate that the controller is about to hide its table view.\nDeprecated"
  },
  {
    "title": "searchDisplayController(_:shouldReloadTableForSearch:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchdisplaydelegate/1620403-searchdisplaycontroller",
    "html": "Parameters\ncontroller\n\nThe search display controller for which the receiver is the delegate.\n\nsearchString\n\nThe string in the search bar.\n\nReturn Value\n\ntrue if the display controller should reload the data in its table view, otherwise false.\n\nDiscussion\n\nIf you don’t implement this method, then the results table is reloaded as soon as the search string changes.\n\nYou might implement this method if you want to perform an asynchronous search. You would initiate the search in this method, then return false. You would reload the table when you have results.\n\nSee Also\nResponding to changes in search criteria\nfunc searchDisplayController(UISearchDisplayController, shouldReloadTableForSearchScope: Int) -> Bool\nAsks the delegate if the table view should be reloaded for a given scope.\nDeprecated"
  },
  {
    "title": "Supporting drag and drop in table views | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/views_and_controls/table_views/supporting_drag_and_drop_in_table_views",
    "html": "Overview\n\nTable views support drag and drop through a specialized API that works with the rows being displayed. To support drags, define a drag delegate object (an object that adopts the UITableViewDragDelegate protocol) and assign it to the dragDelegate property of your table view. To handle drops, define a drop delegate object (an object that adopts the UITableViewDropDelegate protocol) and assign it to the dropDelegate property of your table view.\n\nDragging rows from the table view\n\nThe table view manages most drag-related interactions, but you need to specify which rows to drag. When the drag gesture occurs, the table view creates a drag session and calls the tableView(_:itemsForBeginning:at:) method of your drag delegate object. (When the user drags a selected row, this method is called once for each row in the selection. If no rows are selected, the method is called only once for the underlying row.) If you return a non empty array, the table view begins dragging the rows that you specify. Return an empty array when you don’t allow the user to drag content from the specified index path.\n\nNote\n\nUse the other methods of the UITableViewDragDelegate protocol to manage additional drag-related interactions. For example, you can customize the appearance of the rows being dragged and let the user add items to the current drag session.\n\nIn your implementation of the tableView(_:itemsForBeginning:at:) method, do the following:\n\nCreate one or more NSItemProvider objects. Use the item providers to represent the data for your table’s rows.\n\nWrap each item provider object in a UIDragItem object.\n\nConsider assigning a value to the localObject property of each drag item. This step is optional but makes it faster to drag and drop content within the same app.\n\nReturn the drag items from your method.\n\nUse the provided index path to determine the row for which to create a drag item. If the target row is one of the currently selected rows, the table view automatically drags all of the selected rows. If the row isn’t part of the current selection, the table view adds it to the already active drag operation.\n\nFor more information about initiating drags, see UITableViewDragDelegate.\n\nReceiving dropped content\n\nWhen content is dragged inside its bounds, a table view consults its drop delegate to determine whether it can receive the dragged data. Initially, the table view calls only the tableView(_:canHandle:) method of the drop delegate to determine whether you can incorporate the specified data into your data source. If you can incorporate the data, the table view begins calling other methods to determine where the data can be dropped.\n\nAs the user’s finger moves, the table view tracks the potential drop location and notifies your delegate by calling its tableView(_:dropSessionDidUpdate:withDestinationIndexPath:) method for each change. Implementing this method is optional but recommended, because it lets the table view display visual feedback about how dragged content will be incorporated. In your implementation, create a UITableViewDropProposal object with information about how you’d respond to a drop at the specified index path. For example, you might want to insert the content as a new row into your data source or you might add the data into the existing row at the specified index path. Because the method is called frequently, return your proposal as quickly as possible. If you don’t implement this method, the table view doesn’t provide visual feedback about how it handles the drop.\n\nWhen the user commits the drop by lifting the associated finger from the screen, the table view calls the tableView(_:performDropWith:) method of your drop delegate. You must implement this method to handle the dropped data. In your implementation, fetch the dragged data, update your table view’s data source, and insert any needed rows into the table view itself. If the content originated from the table view, you can delete the dragged rows from their current location and insert them at their new location using the existing table view APIs. For content that came from outside the table view, use the localObject property (for content that originated inside your app) or the NSItemProvider object to fetch the data and insert it.\n\nIn your implementation of the tableView(_:performDropWith:) method, do the following:\n\nIterate over the items property in the provided drop coordinator object.\n\nFor each item, determine how you want to handle its content:\n\nIf the sourceIndexPath of the item contains a value, the item originated in the table view. Use a batch update to delete the item from its current location and insert it at the new index path.\n\nIf the localObject property of the drag item is set, the content originated from elsewhere in your app so you must insert a row or update an existing item.\n\nIf no other option is available, use the NSItemProvider in the drag item’s itemProvider property to fetch the data asynchronously and insert or update the item.\n\nUpdate your data source and insert or move the necessary items in the table view.\n\nFor content that’s already local to your app, you can usually update your table view’s data source and interface directly. For example, you might use a batch update to delete and then insert rows that dragged within the table view. When finished, call the drop(_:toRowAt:) method of the drop coordinator to animate the insertion of the dragged content into the table view.\n\nFor data that must be retrieved using an NSItemProvider object, insert a placeholder into the table view until you’re able to retrieve the actual data. Inserting a placeholder is necessary only when inserting new rows into the table view. The placeholder acts as a temporary row, presenting the default content you want to display until the actual data becomes available. For example, you might provide a placeholder row with a text field stating that the content is currently loading.\n\nTo insert a placeholder into the table view, do the following:\n\nCall the drop(_:toPlaceholderInsertedAt:withReuseIdentifier:rowHeight:cellUpdateHandler:) method of the provided UITableViewDropCoordinator object to insert your placeholder row into the table view. Use the block in the cellUpdateHandler parameter to configure the contents of your placeholder cell.\n\nBegin loading the data asynchronously from the NSItemProvider object.\n\nWhen the NSItemProvider object returns the actual data, commit the insertion and exchange the placeholder cell for the final cell. Specifically, call the commitInsertion(dataSourceUpdates:) method of the context object you received after creating the placeholder. In the block that you pass to that method, update your model object and your table view’s data source. When this method returns, the table view automatically deletes the placeholder and inserts the final row, which causes your updated data to be reflected in a new cellInsert placeholders at the location specified by the destinationIndexPath property of the drop coordinator.\n\nSee Also\nDrag and drop\nAdopting Drag and Drop in a Table View\nDemonstrates how to enable and implement drag and drop for a table view.\nprotocol UITableViewDragDelegate\nThe interface for initiating drags from a table view.\nprotocol UITableViewDropDelegate\nThe interface for handling drops in a table view.\nprotocol UITableViewDropCoordinator\nAn interface for coordinating your custom drop-related actions with the table view.\nprotocol UITableViewDropItem\nThe data associated with an item being dropped into the table view.\nclass UITableViewDropProposal\nYour proposed solution for handling a drop in a table view."
  },
  {
    "title": "customShape | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextselectionhandleview/4195479-customshape",
    "html": "Required"
  },
  {
    "title": "isVisible | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactionsheet/1622885-isvisible",
    "html": "Discussion\n\nIf true, the receiver is displayed; otherwise, false.\n\nSee Also\nSetting properties\nvar delegate: UIActionSheetDelegate?\nThe receiver’s delegate or nil if it doesn’t have a delegate.\nDeprecated\nvar title: String\nThe string that appears in the receiver’s title bar.\nDeprecated\nvar actionSheetStyle: UIActionSheetStyle\nThe receiver’s presentation style.\nDeprecated"
  },
  {
    "title": "dropInteraction(_:performDrop:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidropinteractiondelegate/2890889-dropinteraction",
    "html": "Parameters\ninteraction\n\nThe interaction that called this method.\n\nsession\n\nThe session containing the drag items.\n\nDiscussion\n\nYou can request a drag item's itemProvider data within the scope of this method only and not at any other time.\n\nTo request the data, iterate over the session items calling loadObject(ofClass:completionHandler:) on each item’s item provider. For example, if you are expecting the drag items to be images, here's how you can load each image:\n\nfunc dropInteraction(_ interaction: UIDropInteraction, performDrop session: UIDropSession) {\n    for item in session.items {\n        let itemProvider = item.itemProvider\n        guard itemProvider.canLoadObject(ofClass: UIImage.self) \n        else {continue}\n\n\n        itemProvider.loadObject(ofClass: UIImage.self, completionHandler: { (object, error) in\n            if let image = object as? UIImage {\n                DispatchQueue.main.async {\n                    self.imageView.image = image\n                }\n            }\n        })\n    }\n}\n\n\nIf you need to be more specific about the type of data to load, use one of the following methods to specify the desired data type using its uniform type identifier (UTI):\n\nloadDataRepresentation(forTypeIdentifier:completionHandler:)\n\nloadFileRepresentation(forTypeIdentifier:completionHandler:)\n\nloadInPlaceFileRepresentation(forTypeIdentifier:completionHandler:)\n\nIf you want only JPEG images, use the UTI for the JPEG image type:\n\nimport MobileCoreServices // for kUTTypeJPEG\nfunc dropInteraction(_ interaction: UIDropInteraction, performDrop session: UIDropSession) {\n    for item in session.items {\n        let itemProvider = item.itemProvider\n        itemProvider.loadDataRepresentation(forTypeIdentifier: kUTTypeJPEG as String, completionHandler: { (data, error) in\n            guard\n                let data = data,\n                let image = UIImage(data: data)\n                else {return}\n            \n            DispatchQueue.main.async {\n                self.imageView.image = image\n            }        \n        })\n    }\n}\n\n\nYou can also use the session’s convenience method loadObjects(ofClass:completion:) to load the data for an item. Note that the completion handler for this method is called on the main thread, which is not true when loading the data from the item provider.\n\nfunc dropInteraction(_ interaction: UIDropInteraction, performDrop session: UIDropSession) {\n    session.loadObjects(ofClass: UIImage.self) { objects in\n        guard let images = objects as? [UIImage] else {return}\n        for image in images {\n            self.imageView.image = image\n        }\n    }\n}\n\n\nWhen you ask the session or item provider to load its data, it gives you a Progress object. You can also get the progress for the session at a later time from its progress property.\n\nThe Progress object tells you how much of the data transfer is complete and if the transfer has finished. What’s more, it can be used to cancel, pause, and resume the data-load process.\n\nSee Also\nHandling the drop\nfunc dropInteraction(UIDropInteraction, canHandle: UIDropSession) -> Bool\nAsks the delegate whether it can handle the session’s drag items."
  },
  {
    "title": "withMatrix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifontdescriptor/1616731-withmatrix",
    "html": "Parameters\nmatrix\n\nThe new font matrix.\n\nReturn Value\n\nThe new font descriptor.\n\nSee Also\nCreating a font descriptor\nclass func preferredFontDescriptor(withTextStyle: UIFont.TextStyle) -> UIFontDescriptor\nReturns a font descriptor that contains the specified text style and the user’s selected content size category.\nclass func preferredFontDescriptor(withTextStyle: UIFont.TextStyle, compatibleWith: UITraitCollection?) -> UIFontDescriptor\nReturns a font descriptor that contains the text style and the content size category that the provided trait collection specifies.\ninit(name: String, matrix: CGAffineTransform)\nReturns a font descriptor with the specified values for the name and matrix dictionary attributes.\ninit(name: String, size: CGFloat)\nReturns a font descriptor with the specified values for the name and size dictionary attributes.\nfunc addingAttributes([UIFontDescriptor.AttributeName : Any]) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing descriptor, but with the specified attributes taking precedence over the existing ones.\nfunc withDesign(UIFontDescriptor.SystemDesign) -> UIFontDescriptor?\nReturns a new font descriptor that’s the same as the existing descriptor, but with the specified design.\nfunc withFamily(String) -> UIFontDescriptor\nReturns a new font descriptor whose attributes are the same as the existing font descriptor, but from the specified family.\nfunc withFace(String) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified face.\nfunc withSize(CGFloat) -> UIFontDescriptor\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified point size.\nfunc withSymbolicTraits(UIFontDescriptor.SymbolicTraits) -> UIFontDescriptor?\nReturns a new font descriptor that’s the same as the existing font descriptor, but with the specified symbolic traits.\nRelated Documentation\n+ fontDescriptorWithFontAttributes:\nReturns a font descriptor with a dictionary of attributes."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifontdescriptor/1616662-init",
    "html": "See Also\nInitializing a font descriptor\ninit(fontAttributes: [UIFontDescriptor.AttributeName : Any])\nCreates a font descriptor with the specified attributes.\ninit()\nCreates a font descriptor."
  },
  {
    "title": "cancelButtonIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uialertview/1620766-cancelbuttonindex",
    "html": "Discussion\n\nThe button indices start at 0. If -1, then the index is not set.\n\nSee Also\nConfiguring buttons\nfunc addButton(withTitle: String?) -> Int\nAdds a button to the receiver with the given title.\nDeprecated\nvar numberOfButtons: Int\nThe number of buttons on the alert view.\nDeprecated\nfunc buttonTitle(at: Int) -> String?\nReturns the title of the button at the given index.\nDeprecated\nfunc textField(at: Int) -> UITextField?\nReturns the text field at the given index\nDeprecated\nvar firstOtherButtonIndex: Int\nThe index of the first other button.\nDeprecated"
  },
  {
    "title": "userInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilocalnotification/1616657-userinfo",
    "html": "Discussion\n\nYou may add arbitrary key-value pairs to this dictionary. However, the keys and values must be valid Property list; if any are not, an exception is raised.\n\nSee Also\nConfiguring other parts of the notification\nvar applicationIconBadgeNumber: Int\nThe number to display as the app’s icon badge.\nDeprecated\nvar soundName: String?\nThe name of the file containing the sound to play when an alert is displayed.\nDeprecated"
  },
  {
    "title": "message | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uialertview/1620758-message",
    "html": "See Also\nSetting properties\nvar delegate: AnyObject?\nThe receiver’s delegate or nil if it doesn’t have a delegate.\nDeprecated\nvar alertViewStyle: UIAlertViewStyle\nThe kind of alert displayed to the user.\nDeprecated\nvar title: String\nThe string that appears in the receiver’s title bar.\nDeprecated\nvar isVisible: Bool\nA Boolean value that indicates whether the receiver is displayed.\nDeprecated"
  },
  {
    "title": "firstOtherButtonIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uialertview/1620771-firstotherbuttonindex",
    "html": "Discussion\n\nThe button indices start at 0. If -1, then the index is not set. This property is ignored if there are no other buttons. The default value is -1.\n\nSee Also\nConfiguring buttons\nfunc addButton(withTitle: String?) -> Int\nAdds a button to the receiver with the given title.\nDeprecated\nvar numberOfButtons: Int\nThe number of buttons on the alert view.\nDeprecated\nfunc buttonTitle(at: Int) -> String?\nReturns the title of the button at the given index.\nDeprecated\nfunc textField(at: Int) -> UITextField?\nReturns the text field at the given index\nDeprecated\nvar cancelButtonIndex: Int\nThe index number of the cancel button.\nDeprecated"
  },
  {
    "title": "init(view:parameters:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidragpreview/2890918-init",
    "html": "Parameters\nview\n\nA UIView object representing the drag item.\n\nparameters\n\nA UIDragPreviewParameters object containing appearance parameters for the drag item preview.\n\nReturn Value\n\nA drag preview that is based on the specified view and has specific appearance parameters.\n\nDiscussion\n\nUse this method to display a custom drag item preview based on the provided view and appearance parameters. The appearance parameters specify display options for the preview, such as a background color and a Bézier path of the visible area of the provided view. The appearance parameters affect only the display of the preview, and not the provided view. The drag item preview uses a snapshot of the view for the display, and it never changes or moves the view.\n\nSee Also\nInitializing a drag item preview\ninit(view: UIView)\nInitializes a new drag item preview with a view, using the default appearance parameters.\ninit(for: URL)\nInitializes a new drag item preview with a URL.\ninit(for: URL, title: String?)\nInitializes a drag item preview with a URL and title."
  },
  {
    "title": "collectionView(_:itemsForBeginning:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uicollectionviewdragdelegate/2897389-collectionview",
    "html": "Required\n\nParameters\ncollectionView\n\nThe collection view from which the drag operation originated.\n\nsession\n\nThe current drag session object.\n\nindexPath\n\nThe index path of the item to drag.\n\nReturn Value\n\nAn array of UIDragItem objects containing the details of the items to drag. Return an empty array to prevent the item from being dragged.\n\nDiscussion\n\nYou must implement this method to allow the dragging of items from your collection view. In your implementation, create one or more UIDragItem objects for the item at the specified indexPath. Normally, you return only one drag item, but if the specified item has children or can’t be dragged without one or more associated items, include those items as well.\n\nThe collection view calls this method one or more times when a new drag begins within its bounds. Specifically, if the user begins the drag from a selected item, the collection view calls this method once for each item that’s part of the selection. If the user begins the drag from an unselected item, the collection view calls the method only once for that item.\n\nSee Also\nProviding the items to drag\nfunc collectionView(UICollectionView, itemsForAddingTo: UIDragSession, at: IndexPath, point: CGPoint) -> [UIDragItem]\nAdds the specified items to an existing drag session."
  },
  {
    "title": "UITextItem.Content | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextitem/content",
    "html": "Topics\nEnumeration Cases\ncase link(URL)\ncase tag(String)\ncase textAttachment(NSTextAttachment)\nSee Also\nSpecifying the content type\nvar content: UITextItem.Content"
  },
  {
    "title": "content | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextitem/4176620-content",
    "html": "See Also\nSpecifying the content type\nenum UITextItem.Content"
  },
  {
    "title": "setActions(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimutableusernotificationcategory/1615397-setactions",
    "html": "Parameters\nactions\n\nAn array of UIUserNotificationAction objects representing the actions to display for the given context. When displaying the notification to the user, the system displays the action buttons using the same order as the items in this array. If you specify nil or an empty array, this method removes the actions for the specified context.\n\ncontext\n\nThe context in which the alert is displayed. For a list of possible values, see UIUserNotificationActionContext.\n\nDiscussion\n\nUse this method to set or change the actions associated with a specific context.\n\nSee Also\nModifying the action settings\nvar identifier: String?\nThe name of the action group.\nDeprecated"
  },
  {
    "title": "localObject | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidragitem/2890981-localobject",
    "html": "Discussion\n\nThe localObject property gives you the option to associate a custom object, such as a model object, with the drag item. The local object is available only to the app that initiates the drag activity.\n\nSee Also\nAccessing the drag item’s data\nvar itemProvider: NSItemProvider\nThe item provider associated with the drag item."
  },
  {
    "title": "identifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimutableusernotificationcategory/1615376-identifier",
    "html": "Discussion\n\nThis property is a writable version of the one declared by the parent class.\n\nWhen generating a notification that includes these custom actions, you must use this string to initialize the notification. For local notifications, assign the string to the category property of the UILocalNotification object. For push notifications, use the string as the value of the category key in the push notification’s payload.\n\nSee Also\nModifying the action settings\nfunc setActions([UIUserNotificationAction]?, for: UIUserNotificationActionContext)\nSets the actions to display for different alert styles.\nDeprecated"
  },
  {
    "title": "UITextItem.MenuConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextitem/menuconfiguration",
    "html": "Topics\nCreating a menu configuration\ninit(preview: UITextItem.MenuConfiguration.Preview?, menu: UIMenu)\nenum UITextItem.MenuConfiguration.Preview\nRelationships\nInherits From\nNSObject"
  },
  {
    "title": "init(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidragpreview/2902369-init",
    "html": "Parameters\nurl\n\nAn Internet address referencing a remote resource, such as a webpage.\n\nReturn Value\n\nA drag preview for a URL.\n\nDiscussion\n\nThis method creates a drag item preview of the URL. The URL preview is a one-line, textual representation that might not show the full URL string. Don't use a file URL.\n\nSee Also\nInitializing a drag item preview\ninit(view: UIView)\nInitializes a new drag item preview with a view, using the default appearance parameters.\ninit(view: UIView, parameters: UIDragPreviewParameters)\nInitializes a new drag item preview with a view and with a set of appearance parameters.\ninit(for: URL, title: String?)\nInitializes a drag item preview with a URL and title."
  },
  {
    "title": "view | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidragpreview/2890924-view",
    "html": "Discussion\n\nThe drag item preview uses the view to create a visual snapshot that's displayed while the user drags the item across the screen. Changes you make to the view don't appear in the preview after the snapshot is taken, and the preview doesn't make changes or move the view. Any visual changes or movement made by the preview are applied to the snapshot only."
  },
  {
    "title": "init(view:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidragpreview/2890915-init",
    "html": "Parameters\nview\n\nA UIView object representing the drag item.\n\nReturn Value\n\nA drag preview that is based on the specified view.\n\nDiscussion\n\nUse this method to display a drag item preview based on a view that you provide. The preview displays a snapshot of the provided view. Changes to the view don't appear after the preview is shown, and the preview doesn't change or move the view.\n\nSee Also\nInitializing a drag item preview\ninit(view: UIView, parameters: UIDragPreviewParameters)\nInitializes a new drag item preview with a view and with a set of appearance parameters.\ninit(for: URL)\nInitializes a new drag item preview with a URL.\ninit(for: URL, title: String?)\nInitializes a drag item preview with a URL and title."
  },
  {
    "title": "init(for:title:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidragpreview/2902371-init",
    "html": "Parameters\nurl\n\nAn Internet address referencing a remote resource, such as a webpage.\n\ntitle\n\nA title for the URL.\n\nReturn Value\n\nA drag preview for a URL that has a title.\n\nDiscussion\n\nThis method creates a two-line drag item preview, with the title displayed on the first line. The second line is a textual representation of the URL that might not show the full URL string. Don't use a file URL. Passing nil for the title is the same as calling init(for:).\n\nSee Also\nInitializing a drag item preview\ninit(view: UIView)\nInitializes a new drag item preview with a view, using the default appearance parameters.\ninit(view: UIView, parameters: UIDragPreviewParameters)\nInitializes a new drag item preview with a view and with a set of appearance parameters.\ninit(for: URL)\nInitializes a new drag item preview with a URL."
  },
  {
    "title": "init(itemProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidragitem/2890994-init",
    "html": "Parameters\nitemProvider\n\nAn instance of NSItemProvider conveying the data or file to share during the drag and drop activity.\n\nReturn Value\n\nA drag item initialized with the specified item provider.\n\nDiscussion\n\nProvide an NSItemProvider object to create a new drag item. The item provider communicates the data that's shared between processes during the drag and drop activity."
  },
  {
    "title": "init(session:connectionOptions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiscene/3197910-init",
    "html": "Parameters\nsession\n\nA session object containing the configuration details for the scene. The system creates the session object and passes it to this initialization method.\n\nconnectionOptions\n\nAn object containing additional options for connecting the scene to your app.\n\nReturn Value\n\nAn initialized scene object.\n\nDiscussion\n\nSubclasses call this method to initialize the scene details."
  },
  {
    "title": "Extending your app’s background execution time | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_background/extending_your_app_s_background_execution_time",
    "html": "Overview\n\nExtending your app’s background execution time ensures that you have adequate time to perform critical tasks. For tasks that require more background time, use Background Tasks.\n\nWhen your app moves to the background, the system calls your app delegate’s applicationDidEnterBackground(_:) method. That method has five seconds to perform any tasks and return. Shortly after that method returns, the system puts your app into the suspended state. For most apps, five seconds is enough to perform any crucial tasks, but if you need more time, you can ask UIKit to extend your app’s runtime.\n\nYou extend your app’s runtime by calling the beginBackgroundTask(withName:expirationHandler:) method. Calling this method gives you extra time to perform important tasks. (You can find out the maximum background time available using the backgroundTimeRemaining property.) When you finish your tasks, call the endBackgroundTask(_:) method right away to let the system know that you’re done. If you don’t end your tasks in a timely manner, the system terminates your app.\n\nNote\n\nDon’t wait until your app moves to the background to call the beginBackgroundTask(withName:expirationHandler:) method. Call the method before performing any long-running task.\n\nThe following code shows an example that configures a background task so that the app may save data to its server, which could take longer than five seconds. The beginBackgroundTask(withName:expirationHandler:) method returns an identifier that you must save and pass to the endBackgroundTask(_:) method.\n\nfunc sendDataToServer( data : NSData ) {\n   // Perform the task on a background queue.\n   DispatchQueue.global().async {\n      // Request the task assertion and save the ID.\n      self.backgroundTaskID = UIApplication.shared.\n                 beginBackgroundTask (withName: \"Finish Network Tasks\") {\n         // End the task if time expires.\n         UIApplication.shared.endBackgroundTask(self.backgroundTaskID!)\n         self.backgroundTaskID = UIBackgroundTaskInvalid\n      }\n            \n      // Send the data synchronously.\n      self.sendAppDataToServer( data: data)\n            \n      // End the task assertion.\n      UIApplication.shared.endBackgroundTask(self.backgroundTaskID!)\n      self.backgroundTaskID = UIBackgroundTaskInvalid\n   }\n}\n\n\nNote\n\nThe beginBackgroundTask(withName:expirationHandler:) method can’t be called from an app extension. To request extra execution time from your app extension, call the performExpiringActivity(withReason:using:) method of ProcessInfo instead.\n\nSee Also\nBackground execution\nUsing background tasks to update your app\nConfigure your app to perform tasks in the background to make efficient use of processing time and power.\nAbout the background execution sequence\nLearn the order in which your custom code is executed when your app moves to the background."
  },
  {
    "title": "About the background execution sequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_background/about_the_background_execution_sequence",
    "html": "Overview\n\nAn app may enter the background from one of several different starting points. System events can cause a suspended app to be returned to the background, or cause a not running app to be launched directly into the background. A foreground app transitions to the background when another app is launched or when the user returns to the Home screen.\n\nHandle background events\n\nFor apps that support one of the Background Modes capabilities, the system launches or resumes the app in the background to handle events associated with those capabilities. For example, the system might launch or resume the app to respond to a location update or to perform a background fetch.\n\nIf your app isn’t running when an event arrives, the system launches the app and moves it directly to the background, following this sequence:\n\nThe system launches the app and follows the initialization sequence described in About the app launch sequence.\n\nUIKit calls the app delegate’s applicationDidEnterBackground(_:) method.\n\nUIKit delivers the event that caused the launch.\n\nThe app’s snapshot is taken.\n\nThe app may be suspended again.\n\nIf your app is in memory and suspended when an event arrives, the system resumes the app in the background, following this sequence:\n\nThe system resumes the app.\n\nUIKit calls the app delegate’s applicationDidEnterBackground(_:) method.\n\nUIKit delivers the event that caused the launch.\n\nThe app’s snapshot is taken.\n\nThe app may be suspended again.\n\nTransition from the foreground\n\nWhen another app is launched or the user returns to the Home screen, the foreground app moves to the background, following this sequence:\n\nThe user exits the running app.\n\nUIKit calls the app delegate’s applicationWillResignActive(_:) method.\n\nUIKit calls the app delegate’s applicationDidEnterBackground(_:) method.\n\nThe app’s snapshot is taken.\n\nThe app may be suspended again.\n\nSee Also\nBackground execution\nUsing background tasks to update your app\nConfigure your app to perform tasks in the background to make efficient use of processing time and power.\nExtending your app’s background execution time\nEnsure that critical tasks finish when your app moves to the background."
  },
  {
    "title": "Processing queued notifications | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_foreground/processing_queued_notifications",
    "html": "Overview\n\nWhen settings or device conditions change, the system generates notifications so that apps can respond accordingly. These notifications are delivered immediately to apps that are running, but their delivery is delayed for apps that are suspended. For a suspended app, pending notifications are delivered as soon after the app begins running again (either in the foreground or in the background).\n\nThe following table lists the notifications that apps can receive after they start running again. You must explicitly add an observer to these notifications to receive them. The system coalesces multiple related notifications so that the app receives only one notification with the net changes.\n\nEvent\n\n\t\n\nNotifications\n\n\n\n\nThe user changed your app’s preferences\n\n\t\n\ndidChangeNotification\n\n\n\n\nThe current language or locale settings changed\n\n\t\n\ncurrentLocaleDidChangeNotification\n\n\n\n\nThe screen mode of a display changes\n\n\t\n\nmodeDidChangeNotification\n\n\n\n\nAn external display is connected or disconnected\n\n\t\n\ndidConnectNotification\n\ndidDisconnectNotification\n\n\n\n\nAn accessory is connected or disconnected\n\n\t\n\nEAAccessoryDidConnect\n\nEAAccessoryDidDisconnect\n\n\n\n\nThe status of the user’s iCloud account changed\n\n\t\n\nNSUbiquityIdentityDidChange\n\n\n\n\nThe device orientation changed\n\n\t\n\norientationDidChangeNotification\n\n(UIKit automatically updates the interface orientation of your view controllers when appropriate.)\n\n\n\n\nThere was a significant time change\n\n\t\n\nsignificantTimeChangeNotification\n\n\n\n\nThe battery level or battery state changed\n\n\t\n\nbatteryLevelDidChangeNotification\n\nbatteryStateDidChangeNotification\n\n\n\n\nThe device’s proximity to the user changed\n\n\t\n\nproximityStateDidChangeNotification\n\nWhen a suspended app starts running again, the system delivers any queued notifications on the app’s main thread before it delivers any touch events or user input. Handle all notifications as quickly as possible."
  },
  {
    "title": "Using background tasks to update your app | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_background/using_background_tasks_to_update_your_app",
    "html": "Overview\n\nA task is a standalone activity that an app performs, often on a recurring basis. Examples of tasks include performing maintenance on a database, refining a machine learning model, or updating displayed data. You can configure your app to launch and run tasks in the background to take advantage of processing time when the device isn’t used.\n\nTo schedule a task to run in the background, enable the background modes in Xcode, identify the specific tasks that you need, and then register the tasks with the BGTaskScheduler object.\n\nEnable and schedule background tasks\n\nTo configure your app to allow background tasks, enable the background capabilities that you need, and then create a list of unique identifiers for each task.\n\nThere are two types of background tasks: BGAppRefreshTask and BGProcessingTask. BGAppRefreshTask is for short-duration tasks that expect quick results, such as downloading a stock quote. BGProcessingTask is for tasks that might be time-consuming, such as downloading a large file or synchronizing data. Your app can use one or both of these.\n\nTo add the capabilities:\n\nOpen the project editor and select the desired target.\n\nClick Signing & Capabilities.\n\nExpand the Background Modes section. If the target doesn’t have a Background Modes section, click + Capability, and then select Background Modes.\n\nIf you’re using BGAppRefreshTask, select ”Background fetch.“\n\nIf you’re using BGProcessingTask, select ”Background processing.“\n\nYou control which tasks run in the background by registering a list of permitted task identifiers. To create this list, add the identifiers to the Info.plist file.\n\nOpen the project navigator and select your target.\n\nClick Info and expand Custom iOS Target Properties.\n\nAdd a new item to the list and choose ”Permitted background task scheduler identifiers,“ which corresponds to the BGTaskSchedulerPermittedIdentifiers array.\n\nAdd the string for each authorized task identifier as a separate item in the array.\n\nIn iOS 13 and later, adding a BGTaskSchedulerPermittedIdentifiers key to the Info.plist disables the application(_:performFetchWithCompletionHandler:) and setMinimumBackgroundFetchInterval(_:) methods.\n\nRegister, schedule, and run tasks\n\nFor each task, provide the BGTaskScheduler object with a launch handler — a small block of code that runs the task — and a unique identifier. Register all of the tasks before the end of the app launch sequence. For more information, see About the app launch sequence.\n\nNote\n\nAn extension can schedule a task, but your main app must register the task. The system launches the app to run the task.\n\nThe following code registers a handler, handleAppRefresh(task:), that’s called when the system runs a task request with the identifier com.example.apple-samplecode.ColorFeed.refresh.\n\nBGTaskScheduler.shared.register(forTaskWithIdentifier: \"com.example.apple-samplecode.ColorFeed.refresh\", using: nil) { task in\n     self.handleAppRefresh(task: task as! BGAppRefreshTask)\n}\n\n\nTo submit a task request for the system to launch your app in the background at a later time, use submit(_:). When you resubmit a task, the new submission replaces the previous submission.\n\nThe code below schedules a refresh task request for the task identifier com.example.apple-samplecode.ColorFeed.refresh that you previously registered.\n\nfunc scheduleAppRefresh() {\n   let request = BGAppRefreshTaskRequest(identifier: \"com.example.apple-samplecode.ColorFeed.refresh\")\n   // Fetch no earlier than 15 minutes from now.\n   request.earliestBeginDate = Date(timeIntervalSinceNow: 15 * 60)\n        \n   do {\n      try BGTaskScheduler.shared.submit(request)\n   } catch {\n      print(\"Could not schedule app refresh: \\(error)\")\n   }\n}\n\n\nWhen the system opens your app in the background, it calls the launch handler to run the task.\n\nYour task provides an expiration handler that the system calls if it needs to terminate your task. You also add code to inform the system if the task completes successfully.\n\nfunc handleAppRefresh(task: BGAppRefreshTask) {\n   // Schedule a new refresh task.\n   scheduleAppRefresh()\n\n\n   // Create an operation that performs the main part of the background task.\n   let operation = RefreshAppContentsOperation()\n   \n   // Provide the background task with an expiration handler that cancels the operation.\n   task.expirationHandler = {\n      operation.cancel()\n   }\n\n\n   // Inform the system that the background task is complete\n   // when the operation completes.\n   operation.completionBlock = {\n      task.setTaskCompleted(success: !operation.isCancelled)\n   }\n\n\n   // Start the operation.\n   operationQueue.addOperation(operation)\n }\n\n\nSee Also\nBackground execution\nExtending your app’s background execution time\nEnsure that critical tasks finish when your app moves to the background.\nAbout the background execution sequence\nLearn the order in which your custom code is executed when your app moves to the background."
  },
  {
    "title": "tableView(_:itemsForBeginning:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdragdelegate/2897492-tableview",
    "html": "Required\n\nParameters\ntableView\n\nThe table view from which the drag operation originated.\n\nsession\n\nThe drag session object providing context for the drag operation.\n\nindexPath\n\nThe index path of the row being dragged.\n\nReturn Value\n\nAn array of UIDragItem objects representing the contents of the specified row. Return an empty array if you do not want the user to drag the specified row.\n\nDiscussion\n\nYou must implement this method to allow the dragging of rows from your table view. In your implementation, use the specified indexPath to identify which row is being dragged. In response, create one or more UIDragItem objects representing the content for that row. Normally, you return only one drag item, but you may return more than one item if the specified row represents a container for other content. Return an empty array to indicate that you don’t want the specified row to be dragged.\n\nThe table view calls this method one or more times when a new drag begins within its bounds. Specifically, it calls the method once for each row that’s part of the initial drag. For example, if three rows were selected when the user began the drag operation, the table view calls this method three times. If the user begins a drag operation from an unselected row, this method is called only once for that row.\n\nSee Also\nProviding the items to drag\nfunc tableView(UITableView, itemsForAddingTo: UIDragSession, at: IndexPath, point: CGPoint) -> [UIDragItem]\nAdds the specified items to an existing drag session."
  },
  {
    "title": "loadObjects(ofClass:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidropsession/2891058-loadobjects",
    "html": "Required Default implementation provided.\n\nParameters\naClass\n\nA class conforming to the NSItemProviderReading protocol.\n\ncompletion\n\nThe block that is executed after all objects are loaded.\n\nReturn Value\n\nAn aggregate of the load progress for each object that is loaded.\n\nDiscussion\n\nYou can use this method only in the drop interaction delegate's implementation of the dropInteraction(_:performDrop:) method. This method is called after the user drops the items into the destination view.\n\nThe completion handler is called on the main queue. It provides an array of all objects created, in the same order that the drag items were added to the drag session.\n\nDefault Implementations\nUIDropSession Implementations\nfunc loadObjects<T>(ofClass: T.Type, completion: ([T]) -> Void) -> Progress"
  },
  {
    "title": "tableView(_:canHandle:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdropdelegate/2897434-tableview",
    "html": "Parameters\ntableView\n\nThe table view that’s attempting to handle the drop.\n\nsession\n\nThe drop session object containing information about the data being dragged.\n\nReturn Value\n\ntrue if the table view can accept the dragged data, or false if it can’t.\n\nDiscussion\n\nImplement this method when you want to dynamically determine whether to accept dropped data in your table view. In your implementation, check the type of the dragged data and return a Boolean value indicating whether you can accept the drop. For example, you might call the hasItemsConforming(toTypeIdentifier:) method of the session object to determine whether it contains data that your app can accept.\n\nIf you don’t implement this method, the table view assumes a return value of true. If you return false from this method, the table view doesn’t call any more methods of your drop delegate for the given session."
  },
  {
    "title": "UIDropOperation.cancel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidropoperation/cancel",
    "html": "Discussion\n\nIf the user attempts a drop activity, the drag operation is canceled and the dropInteraction(_:performDrop:) delegate method isn’t called.\n\nSee Also\nDrop operation types\ncase forbidden\nA drop operation type specifying that, although a move or copy operation is typically legitimate in this scenario, the drop activity isn’t allowed.\ncase copy\nA drop operation type specifying that the data represented by the drag items should be copied to the destination view.\ncase move\nA drop operation type specifying that the data represented by the drag items should be moved, not copied."
  },
  {
    "title": "dropInteraction(_:sessionDidEnter:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidropinteractiondelegate/2890880-dropinteraction",
    "html": "Parameters\ninteraction\n\nThe interaction that called this method.\n\nsession\n\nThe drop session that has moved into the interaction’s view.\n\nSee Also\nTracking the drop movements\nfunc dropInteraction(UIDropInteraction, sessionDidUpdate: UIDropSession) -> UIDropProposal\nTells the delegate the drop session has changed.\nfunc dropInteraction(UIDropInteraction, sessionDidExit: UIDropSession)\nTells the delegate the drop session has moved out of the drop interaction’s view.\nfunc dropInteraction(UIDropInteraction, sessionDidEnd: UIDropSession)\nTells the delegate the drop session has ended."
  },
  {
    "title": "tableView(_:canMoveRowAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdatasource/1614927-tableview",
    "html": "Parameters\ntableView\n\nThe table-view object requesting this information.\n\nindexPath\n\nAn index path locating a row in tableView.\n\nReturn Value\n\ntrue if the row can be moved; otherwise, false.\n\nDiscussion\n\nThis method allows the data source to specify that the reordering control for the specified row not be shown. By default, the reordering control is shown if the data source implements the tableView(_:moveRowAt:to:) method.\n\nSee Also\nReordering table rows\nfunc tableView(UITableView, moveRowAt: IndexPath, to: IndexPath)\nTells the data source to move a row at a specific location in the table view to another location."
  },
  {
    "title": "tableView(_:moveRowAt:to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitableviewdatasource/1614867-tableview",
    "html": "Parameters\ntableView\n\nThe table-view object requesting this action.\n\nsourceIndexPath\n\nAn index path locating the row to be moved in tableView.\n\ndestinationIndexPath\n\nAn index path locating the row in tableView that’s the destination of the move.\n\nDiscussion\n\nThe UITableView object sends this message to the data source when the user presses the reorder control in the row at sourceIndexPath.\n\nSee Also\nReordering table rows\nfunc tableView(UITableView, canMoveRowAt: IndexPath) -> Bool\nAsks the data source whether a given row can move to another location in the table view.\nRelated Documentation\nfunc tableView(UITableView, commit: UITableViewCell.EditingStyle, forRowAt: IndexPath)\nAsks the data source to commit the insertion or deletion of a specified row."
  },
  {
    "title": "dropInteraction(_:canHandle:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidropinteractiondelegate/2890887-dropinteraction",
    "html": "Parameters\ninteraction\n\nThe interaction that called this method.\n\nsession\n\nThe current drop session.\n\nReturn Value\n\ntrue if the interaction supports the drag items in the sessions; otherwise, false.\n\nDiscussion\n\nReturning true doesn't mean the interaction will accept the drop. Instead, it tells the system that the interaction has interest in, and can handle, the drop session.\n\nTo determine if the interaction can handle the session, check the data type of session's drag items. For instance, if you're interested in drop activities that contain images, you can do the following:\n\nfunc dropInteraction(_ interaction: UIDropInteraction, canHandle session: UIDropSession) -> Bool {\n    // Ensure the drop session has an object of the appropriate type\n    return session.canLoadObjects(ofClass: UIImage.self)\n}\n\n\nYou can also be more specific by using a uniform type identifier (UTI) for the data type. For instance, if you’re interested in only PNG images, use the UTI for PNG files:\n\nimport MobileCoreServices // for kUTTypePNG\n\n\nfunc dropInteraction(_ interaction: UIDropInteraction, canHandle session: UIDropSession) -> Bool {\n    return session.hasItemsConforming(toTypeIdentifiers: [kUTTypePNG as String])\n}\n\n\nNote\n\nYou can't check the actual data the user is dragging because it isn’t available when the interaction calls this method. Only the data type is available inside this method.\n\nSee Also\nHandling the drop\nfunc dropInteraction(UIDropInteraction, performDrop: UIDropSession)\nTells the delegate it can request the item provider data from the session’s drag items."
  },
  {
    "title": "printInteractionControllerDidDismissPrinterOptions(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprintinteractioncontrollerdelegate/1618175-printinteractioncontrollerdiddis",
    "html": "Parameters\nprintInteractionController\n\nThe shared instance of UIPrintInteractionController that is managing the print job.\n\nDiscussion\n\nThis message is sent both when the user taps Print on the printing-options view and when the user dismisses the view by tapping outside it.\n\nSee Also\nResponding to the Presentation and Dismissal of the Printing Interface\nfunc printInteractionControllerWillPresentPrinterOptions(UIPrintInteractionController)\nTells the delegate that the device is about to display the printing-options user interface.\nfunc printInteractionControllerDidPresentPrinterOptions(UIPrintInteractionController)\nTells the delegate that the device has presented the printing-options user interface.\nfunc printInteractionControllerWillDismissPrinterOptions(UIPrintInteractionController)\nTells the delegate that the device is about to dismiss the printing-options user interface."
  },
  {
    "title": "dropInteraction(_:sessionDidUpdate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidropinteractiondelegate/2890888-dropinteraction",
    "html": "Parameters\ninteraction\n\nThe interaction that called this method.\n\nsession\n\nThe drop session that has changed.\n\nReturn Value\n\nA drop proposal that contains the operation the delegate intends to perform. You may return a proposal containing the UIDropOperation.move operation only if the session’s allowsMoveOperation is true.\n\nDiscussion\n\nYou must implement this method if the drop interaction’s view can accept drop activities. If you don’t provide this method, the view cannot accept any drop activities.\n\nThe interaction calls this method when one of the following happens:\n\nThe session enters the area of the drop interaction’s view.\n\nThe session moves inside the area of the drop interaction’s view.\n\nThe user adds a drag item to the session that within the area of the drop interaction’s view.\n\nTo get the location of the drop session after it has moved, call the session’s location(in:) method.\n\nSee Also\nTracking the drop movements\nfunc dropInteraction(UIDropInteraction, sessionDidEnter: UIDropSession)\nTells the delegate the drop session has moved into the drop interaction’s view.\nfunc dropInteraction(UIDropInteraction, sessionDidExit: UIDropSession)\nTells the delegate the drop session has moved out of the drop interaction’s view.\nfunc dropInteraction(UIDropInteraction, sessionDidEnd: UIDropSession)\nTells the delegate the drop session has ended."
  },
  {
    "title": "printInteractionControllerWillStartJob(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprintinteractioncontrollerdelegate/1618185-printinteractioncontrollerwillst",
    "html": "Parameters\nprintInteractionController\n\nThe shared instance of UIPrintInteractionController that is managing the print job.\n\nDiscussion\n\nYou can implement this method to do set-up tasks related to the print job. For example, an application that needs to do intensive rendering could implement this method to pause animations. This method is called before drawing begins but after the printing user interface is dismissed.\n\nSee Also\nResponding to the Start and End of a Print Job\nfunc printInteractionControllerDidFinishJob(UIPrintInteractionController)\nTells the delegate that the print job has ended.\nRelated Documentation\nfunc printInteractionControllerDidDismissPrinterOptions(UIPrintInteractionController)\nTells the delegate that the device is dismissing the printing-options user interface."
  },
  {
    "title": "printInteractionControllerDidFinishJob(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprintinteractioncontrollerdelegate/1618154-printinteractioncontrollerdidfin",
    "html": "Parameters\nprintInteractionController\n\nThe shared instance of UIPrintInteractionController that is managing the print job.\n\nDiscussion\n\nYou can implement this method to do clean-up tasks related to the print job. This method is called after the last page of the print job is generated but before the completion handler (a block handler of type UIPrintInteractionController.CompletionHandler) is called.\n\nSee Also\nResponding to the Start and End of a Print Job\nfunc printInteractionControllerWillStartJob(UIPrintInteractionController)\nTells the delegate that the print job is about to start."
  },
  {
    "title": "printInteractionController(_:cutLengthFor:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprintinteractioncontrollerdelegate/1618179-printinteractioncontroller",
    "html": "Parameters\nprintInteractionController\n\nThe shared instance of UIPrintInteractionController that is managing the print job.\n\npaper\n\nA UIPrintPaper that specifies the maximum physical and printable areas of the page.\n\nReturn Value\n\nThe physical length of the page in points.\n\nDiscussion\n\nSome printers can cut a roll of print paper at a particular length. If you implement this method in your delegate, then it may be called during a print job. Your delegate should determine the length in which the content fits and return this value. When printed, the paper will be cut to this length.\n\nSee Also\nChoosing a Paper Size for the Print Job\nfunc printInteractionController(UIPrintInteractionController, choosePaper: [UIPrintPaper]) -> UIPrintPaper\nAsks the delegate for an object that encapsulates the paper size and printing area for the print job.\nfunc printInteractionController(UIPrintInteractionController, chooseCutterBehavior: [Any]) -> UIPrinter.CutterBehavior\nAsks the delegate for the cutter behavior for the print job."
  },
  {
    "title": "searchBar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchdisplaycontroller/1620387-searchbar",
    "html": "See Also\nConfiguring a search bar\nvar delegate: UISearchDisplayDelegate?\nThe controller’s delegate.\nDeprecated\nvar searchContentsController: UIViewController\nThe view controller that manages the contents being searched.\nDeprecated\nvar searchResultsTableView: UITableView\nThe table view in which the search results are displayed.\nDeprecated\nvar searchResultsDataSource: UITableViewDataSource?\nThe data source for the table view in which the search results are displayed.\nDeprecated\nvar searchResultsDelegate: UITableViewDelegate?\nThe delegate for the table view in which the search results are displayed.\nDeprecated\nvar searchResultsTitle: String?\nThe title for the search results view.\nDeprecated\nvar displaysSearchBarInNavigationBar: Bool\nSpecifies that the navigation bar contains a search bar.\nDeprecated\nvar navigationItem: UINavigationItem?\nRepresents the search display controller in a navigation controller’s navigation bar.\nDeprecated"
  },
  {
    "title": "printInteractionController(_:chooseCutterBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprintinteractioncontrollerdelegate/1618178-printinteractioncontroller",
    "html": "Parameters\nprintInteractionController\n\nThe shared instance of UIPrintInteractionController that is managing the print job.\n\navailableBehaviors\n\nAn array of NSNumber objects identifying the printer’s available cutter behaviors. Each number corresponds to one of the constants defined in UIPrinter.CutterBehavior.\n\nReturn Value\n\nThe cutter behavior to use for the print job. The value must correspond to one of the constants in the availableBehaviors parameter.\n\nDiscussion\n\nSome roll-fed printers support different options for cutting the paper. If you implement this method in your delegate, then it may be called during a print job. Your delegate method should determine when to make cuts and return the appropriate value.\n\nSee Also\nChoosing a Paper Size for the Print Job\nfunc printInteractionController(UIPrintInteractionController, choosePaper: [UIPrintPaper]) -> UIPrintPaper\nAsks the delegate for an object that encapsulates the paper size and printing area for the print job.\nfunc printInteractionController(UIPrintInteractionController, cutLengthFor: UIPrintPaper) -> CGFloat\nAsks the delegate for a length to use when cutting the page."
  },
  {
    "title": "dragInteraction(_:itemsForBeginning:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uidraginteractiondelegate/2891010-draginteraction",
    "html": "Required\n\nParameters\ninteraction\n\nThe interaction asking for the drag items.\n\nsession\n\nThe current drag session.\n\nReturn Value\n\nAn array of drag items to include in the drag session, or an empty array if there are no drag items for the session.\n\nDiscussion\n\nAs part of enabling dragging from a view, implement this method to return an array of one or more drag items. The system calls this method and uses this array to populate the drag session’s items property.\n\nIf the drag items represent model objects in your app that are shown in a linear order, return them in the natural first-to-last order that users expect. The system handles any order-flipping required for right-to-left scripts.\n\nTypically, the system shows multiple dragged items as a stack of images, with the array’s first element on top. If you return an empty array, the system does not start a drag interaction.\n\nSee Also\nPerforming the drag\nfunc dragInteraction(UIDragInteraction, itemsForAddingTo: UIDragSession, withTouchAt: CGPoint) -> [UIDragItem]\nAsks the delegate for the drag items to add to an in-progress drag session, in response to a user gesture to add the items.\nfunc dragInteraction(UIDragInteraction, sessionForAddingItems: [UIDragSession], withTouchAt: CGPoint) -> UIDragSession?\nAsks the delegate which drag session to add drag items to when there is more than one in-progress session."
  },
  {
    "title": "printInteractionControllerDidPresentPrinterOptions(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprintinteractioncontrollerdelegate/1618158-printinteractioncontrollerdidpre",
    "html": "Parameters\nprintInteractionController\n\nThe shared instance of UIPrintInteractionController that is managing the print job.\n\nSee Also\nResponding to the Presentation and Dismissal of the Printing Interface\nfunc printInteractionControllerWillPresentPrinterOptions(UIPrintInteractionController)\nTells the delegate that the device is about to display the printing-options user interface.\nfunc printInteractionControllerWillDismissPrinterOptions(UIPrintInteractionController)\nTells the delegate that the device is about to dismiss the printing-options user interface.\nfunc printInteractionControllerDidDismissPrinterOptions(UIPrintInteractionController)\nTells the delegate that the device is dismissing the printing-options user interface."
  },
  {
    "title": "selectionRects | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextselectionhighlightview/4195484-selectionrects",
    "html": "Required"
  },
  {
    "title": "trailingBarButtonGroups | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextinputassistantitem/1614532-trailingbarbuttongroups",
    "html": "Discussion\n\nAssigning a value to this property installs the corresponding bar button items so that they trail the typing suggestions. (In a left-to-right environment, leading items are placed to the right of the typing suggestions.) If there is not enough room to display all of the items, UIKit may display a group’s representative item instead, if one was provided.\n\nSee Also\nConfiguring the shortcuts bar\nvar leadingBarButtonGroups: [UIBarButtonItemGroup]\nThe array of button item groups to display before the typing suggestions.\nvar allowsHidingShortcuts: Bool\nA Boolean value that indicates whether the user can hide the shortcuts bar."
  },
  {
    "title": "menuItems | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenucontroller/1622811-menuitems",
    "html": "Discussion\n\nThe default value is nil (no custom menu items). Each menu item is an instance of the UIMenuItem class. You may create your own menu items, each with its own title and action selector, and add them to the editing menu through this property. Custom items appear in the menu after any system menu items."
  },
  {
    "title": "allowsHidingShortcuts | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextinputassistantitem/1614529-allowshidingshortcuts",
    "html": "Discussion\n\nWhen the value of this property is true, the user may hide the shortcuts bar when the keyboard is visible. When the value is false, the shortcuts bar remains visible while the keyboard is visible. The default value of this property is true.\n\nSee Also\nConfiguring the shortcuts bar\nvar leadingBarButtonGroups: [UIBarButtonItemGroup]\nThe array of button item groups to display before the typing suggestions.\nvar trailingBarButtonGroups: [UIBarButtonItemGroup]\nThe array of button item groups to display after the typing suggestions."
  },
  {
    "title": "interactionShouldBegin(_:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextinteractiondelegate/3255089-interactionshouldbegin",
    "html": "Parameters\ninteraction\n\nThe text interaction that called this method.\n\npoint\n\nThe position on the screen where the user is touching.\n\nReturn Value\n\nA Boolean value indicating whether the interaction should begin. Return true to let the interaction begin; otherwise, return false to prevent the interaction from beginning.\n\nSee Also\nHandling text interaction events\nfunc interactionWillBegin(UITextInteraction)\nTells the delegate that the text interaction will begin.\nfunc interactionDidEnd(UITextInteraction)\nTells the delegate that the text interaction ended."
  },
  {
    "title": "isVertical | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextselectionhandleview/4195482-isvertical",
    "html": "Required"
  },
  {
    "title": "preferredFrame(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextselectionhandleview/4195481-preferredframe",
    "html": "Required"
  },
  {
    "title": "alert | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindow/level/1621624-alert",
    "html": "Discussion\n\nWindows at this level appear on top of the status bar.\n\nSee Also\nWindow levels\nstatic let normal: UIWindow.Level\nThe default level.\nstatic let statusBar: UIWindow.Level\nThe level for a status window."
  },
  {
    "title": "statusBar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindow/level/1621592-statusbar",
    "html": "Discussion\n\nWindows at this level appear on top of your app's main window, but below alerts.\n\nSee Also\nWindow levels\nstatic let normal: UIWindow.Level\nThe default level.\nstatic let alert: UIWindow.Level\nThe level for an alert view."
  },
  {
    "title": "update() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenucontroller/1622815-update",
    "html": "Discussion\n\nBy default, UIMenuController calls this method just before the editing menu is made visible and when touches occur in the menu. As a result, a responder object in the application enables or disables menu commands depending on the context; for example, if the pasteboard holds no data of a compatible type, the Paste command would be disabled. You can call this method to force an update of the editing menu. You may also override this method to add any custom behavior."
  },
  {
    "title": "normal | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiwindow/level/1621595-normal",
    "html": "Discussion\n\nUse this level for the majority of your content, including for your app’s main window.\n\nSee Also\nWindow levels\nstatic let statusBar: UIWindow.Level\nThe level for a status window.\nstatic let alert: UIWindow.Level\nThe level for an alert view."
  },
  {
    "title": "passthroughViews | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipopovercontroller/1624654-passthroughviews",
    "html": "Discussion\n\nWhen a popover is active, interactions with other views are normally disabled until the popover is dismissed. Assigning an array of views to this property allows taps outside of the popover to be handled by the corresponding views.\n\nSee Also\nConfiguring the popover content\nvar contentViewController: UIViewController\nThe view controller responsible for the content portion of the popover.\nDeprecated\nfunc setContentView(UIViewController, animated: Bool)\nSets the view controller responsible for the content portion of the popover.\nDeprecated\nvar contentSize: CGSize\nThe size of the popover’s content view.\nDeprecated\nfunc setContentSize(CGSize, animated: Bool)\nChanges the size of the popover’s content view.\nDeprecated"
  },
  {
    "title": "setTargetRect(_:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenucontroller/1622812-settargetrect",
    "html": "Parameters\ntargetRect\n\nA rectangle that defines the area that is to be the target of the menu commands.\n\ntargetView\n\nThe view in which targetRect appears.\n\nDiscussion\n\nThis target rectangle (targetRect) is usually the bounding rectangle of a selection. UIMenuController positions the editing menu above this rectangle; if there is not enough space for the menu there, it positions it below the rectangle. The menu’s pointer is placed at the center of the top or bottom of the target rectangle as appropriate. Note that if you make the width or height of the target rectangle zero, UIMenuController treats the target area as a line or point for positioning (for example, an insertion caret or a single point).\n\nOnce it is set, the target rectangle does not track the view; if the view moves (such as would happen in a scroll view), you must update the target rectangle accordingly.\n\nSee Also\nPositioning the menu\nvar menuFrame: CGRect\nReturns the frame of the editing menu.\nDeprecated\nvar arrowDirection: UIMenuController.ArrowDirection\nThe direction the arrow of the editing menu is pointing.\nDeprecated\nenum UIMenuController.ArrowDirection\nThe direction the arrow of the editing menu is pointing.\nDeprecated"
  },
  {
    "title": "isPopoverVisible | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipopovercontroller/1624656-ispopovervisible",
    "html": "Discussion\n\nYou must present the popover to make it visible.\n\nSee Also\nGetting the popover attributes\nvar arrowDirection: UIPopoverArrowDirection\nThe direction of the popover’s arrow.\nDeprecated"
  },
  {
    "title": "handler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipreviewaction/1621447-handler",
    "html": "Discussion\n\nThe handler is set when the peek quick action is instantiated; it is immutable.\n\nSee Also\nCreating a peek quick action\ninit(title: String, style: UIPreviewAction.Style, handler: (UIPreviewAction, UIViewController) -> Void)\nCreates a peek quick action using a specified title, style, and handler.\nDeprecated\nenum UIPreviewAction.Style\nThe style for a peek quick action.\nDeprecated"
  },
  {
    "title": "init(fontAttributes:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifontdescriptor/1616679-init",
    "html": "Parameters\nattributes\n\nThe attributes for the new font descriptor. If nil, the font descriptor’s attribute dictionary will be empty.\n\nReturn Value\n\nThe new font descriptor.\n\nSee Also\nInitializing a font descriptor\ninit()\nCreates a font descriptor.\ninit?(coder: NSCoder)\nCreates a font descriptor from data in an unarchiver.\nRelated Documentation\n+ fontDescriptorWithFontAttributes:\nReturns a font descriptor with a dictionary of attributes."
  },
  {
    "title": "repeatInterval | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilocalnotification/1616643-repeatinterval",
    "html": "Discussion\n\nIf you assign a calendar unit such as weekly (weekOfYear) or yearly (year), the system reschedules the notification for delivery at the specified interval. Note that intervals of less than one minute are not supported. The default value is 0, which means that the system fires the notification once and then discards it.\n\nSee Also\nScheduling a local notification\nvar fireDate: Date?\nThe date and time when the system should deliver the notification.\nDeprecated\nvar timeZone: TimeZone?\nThe time zone of the notification’s fire date.\nDeprecated\nvar repeatCalendar: Calendar?\nThe calendar the system should refer to when it reschedules a repeating notification.\nDeprecated\nvar region: CLRegion?\nThe geographic region that triggers the notification.\nDeprecated\nvar regionTriggersOnce: Bool\nA Boolean value indicating whether crossing a geographic region boundary delivers only one notification.\nDeprecated"
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uifontdescriptor/1616667-init",
    "html": "See Also\nInitializing a font descriptor\ninit(fontAttributes: [UIFontDescriptor.AttributeName : Any])\nCreates a font descriptor with the specified attributes.\ninit?(coder: NSCoder)\nCreates a font descriptor from data in an unarchiver."
  },
  {
    "title": "show(from:in:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactionsheet/1622892-show",
    "html": "Parameters\nrect\n\nThe portion of view from which to originate the action sheet.\n\nview\n\nThe view from which to originate the action sheet.\n\nanimated\n\nSpecify true to animate the presentation of the action sheet or false to present it immediately without any animation effects.\n\nDiscussion\n\nOn iPad, this method displays the action sheet in a popover whose arrow points to the specified rectangle of the view. The popover does not overlap the specified rectangle.\n\nSee Also\nPresenting the action sheet\nfunc show(from: UITabBar)\nDisplays an action sheet that originates from the specified tab bar.\nDeprecated\nfunc show(from: UIToolbar)\nDisplays an action sheet that originates from the specified toolbar.\nDeprecated\nfunc show(in: UIView)\nDisplays an action sheet that originates from the specified view.\nDeprecated\nfunc show(from: UIBarButtonItem, animated: Bool)\nDisplays an action sheet that originates from the specified bar button item.\nDeprecated"
  },
  {
    "title": "dismiss(withClickedButtonIndex:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uialertview/1620754-dismiss",
    "html": "Parameters\nbuttonIndex\n\nThe index of the button that was clicked just before invoking this method. The button indices start at 0.\n\nanimated\n\ntrue if the receiver should be removed by animating it first; otherwise, false if it should be removed immediately with no animation.\n\nDiscussion\n\nIn iOS 4.0, you may want to call this method whenever your application moves to the background. An alert view is not dismissed automatically when an application moves to the background. This behavior differs from previous versions of the operating system, where they were canceled automatically when the application was terminated. Dismissing the alert view gives your application a chance to save changes or abort the operation and perform any necessary cleanup in case your application is terminated later."
  },
  {
    "title": "dismiss(withClickedButtonIndex:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactionsheet/1622888-dismiss",
    "html": "Parameters\nbuttonIndex\n\nThe index of the button that was clicked. Button indices start at 0.\n\nanimated\n\nSpecify true to animate the dismissal of the action sheet or false to remove the action sheet without an animation.\n\nDiscussion\n\nYou can use this method to dismiss the action sheet programmatically as needed. The action sheet also calls this method itself in response to the user tapping one of the buttons in the action sheet.\n\nIn iOS 4.0, you may want to call this method whenever your application moves to the background. An action sheet is not dismissed automatically when an application moves to the background. This behavior differs from previous versions of the operating system, where they were canceled automatically when the application was terminated. Dismissing the action sheet gives your application a chance to save changes or abort the operation and perform any necessary cleanup in case your application is terminated later."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchdisplaycontroller/1620388-delegate",
    "html": "See Also\nConfiguring a search bar\nvar searchBar: UISearchBar\nThe search bar.\nDeprecated\nvar searchContentsController: UIViewController\nThe view controller that manages the contents being searched.\nDeprecated\nvar searchResultsTableView: UITableView\nThe table view in which the search results are displayed.\nDeprecated\nvar searchResultsDataSource: UITableViewDataSource?\nThe data source for the table view in which the search results are displayed.\nDeprecated\nvar searchResultsDelegate: UITableViewDelegate?\nThe delegate for the table view in which the search results are displayed.\nDeprecated\nvar searchResultsTitle: String?\nThe title for the search results view.\nDeprecated\nvar displaysSearchBarInNavigationBar: Bool\nSpecifies that the navigation bar contains a search bar.\nDeprecated\nvar navigationItem: UINavigationItem?\nRepresents the search display controller in a navigation controller’s navigation bar.\nDeprecated"
  },
  {
    "title": "init(searchBar:contentsController:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchdisplaycontroller/1620411-init",
    "html": "Parameters\nsearchBar\n\nA search bar.\n\nThe search bar must not currently be associated with another search display controller.\n\nviewController\n\nThe view controller that manages display of the original contents that are to be searched.\n\nThe view controller must not currently be associated with another search display controller.\n\nReturn Value\n\nA search display controller initialized with the given search bar and contents controller."
  },
  {
    "title": "repeatCalendar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilocalnotification/1616656-repeatcalendar",
    "html": "Discussion\n\nThe default value is nil, which indicates that the current user calendar is used. (The current user calendar is returned by the current class method of NSCalendar.)\n\nSee Also\nScheduling a local notification\nvar fireDate: Date?\nThe date and time when the system should deliver the notification.\nDeprecated\nvar timeZone: TimeZone?\nThe time zone of the notification’s fire date.\nDeprecated\nvar repeatInterval: NSCalendar.Unit\nThe calendar interval at which to reschedule the notification.\nDeprecated\nvar region: CLRegion?\nThe geographic region that triggers the notification.\nDeprecated\nvar regionTriggersOnce: Bool\nA Boolean value indicating whether crossing a geographic region boundary delivers only one notification.\nDeprecated"
  },
  {
    "title": "searchResultsTableView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchdisplaycontroller/1620400-searchresultstableview",
    "html": "Discussion\n\nThis method creates a new table view if one does not already exist.\n\nSee Also\nConfiguring a search bar\nvar delegate: UISearchDisplayDelegate?\nThe controller’s delegate.\nDeprecated\nvar searchBar: UISearchBar\nThe search bar.\nDeprecated\nvar searchContentsController: UIViewController\nThe view controller that manages the contents being searched.\nDeprecated\nvar searchResultsDataSource: UITableViewDataSource?\nThe data source for the table view in which the search results are displayed.\nDeprecated\nvar searchResultsDelegate: UITableViewDelegate?\nThe delegate for the table view in which the search results are displayed.\nDeprecated\nvar searchResultsTitle: String?\nThe title for the search results view.\nDeprecated\nvar displaysSearchBarInNavigationBar: Bool\nSpecifies that the navigation bar contains a search bar.\nDeprecated\nvar navigationItem: UINavigationItem?\nRepresents the search display controller in a navigation controller’s navigation bar.\nDeprecated"
  },
  {
    "title": "isVisible | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uialertview/1620764-isvisible",
    "html": "Discussion\n\nIf true, the receiver is displayed; otherwise, false.\n\nSee Also\nSetting properties\nvar delegate: AnyObject?\nThe receiver’s delegate or nil if it doesn’t have a delegate.\nDeprecated\nvar alertViewStyle: UIAlertViewStyle\nThe kind of alert displayed to the user.\nDeprecated\nvar title: String\nThe string that appears in the receiver’s title bar.\nDeprecated\nvar message: String?\nDescriptive text that provides more details than the title.\nDeprecated"
  },
  {
    "title": "buttonTitle(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uialertview/1620756-buttontitle",
    "html": "Parameters\nbuttonIndex\n\nThe index of the button. The button indices start at 0.\n\nReturn Value\n\nThe title of the button specified by index buttonIndex.\n\nSee Also\nConfiguring buttons\nfunc addButton(withTitle: String?) -> Int\nAdds a button to the receiver with the given title.\nDeprecated\nvar numberOfButtons: Int\nThe number of buttons on the alert view.\nDeprecated\nfunc textField(at: Int) -> UITextField?\nReturns the text field at the given index\nDeprecated\nvar cancelButtonIndex: Int\nThe index number of the cancel button.\nDeprecated\nvar firstOtherButtonIndex: Int\nThe index of the first other button.\nDeprecated\nRelated Documentation\nDisplaying"
  },
  {
    "title": "menuFrame | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenucontroller/1622822-menuframe",
    "html": "Discussion\n\nThe property value is the bounding rectangle of the menu in screen coordinates. The property has a value of CGRectZero if the menu is not visible. You can use this property to adjust any user-interface objects away from the menu after displaying the menu.\n\nSee Also\nPositioning the menu\nvar arrowDirection: UIMenuController.ArrowDirection\nThe direction the arrow of the editing menu is pointing.\nDeprecated\nenum UIMenuController.ArrowDirection\nThe direction the arrow of the editing menu is pointing.\nDeprecated\nfunc setTargetRect(CGRect, in: UIView)\nSets the area in a view above or below which the editing menu is positioned.\nDeprecated"
  },
  {
    "title": "isActive | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchdisplaycontroller/1620406-isactive",
    "html": "Discussion\n\nThe default value is false.\n\nIf you set this value directly, any change is performed without animation. Use setActive(_:animated:) if a change in state should be animated.\n\nWhen the user focus in the search field of a managed search bar, the search display controller automatically displays the search interface. You can use this property to force the search interface to appear.\n\nSee Also\nDisplaying the search Interface\nfunc setActive(Bool, animated: Bool)\nDisplays or hides the search interface, optionally with animation.\nDeprecated"
  },
  {
    "title": "alertViewStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uialertview/1620780-alertviewstyle",
    "html": "See Also\nSetting properties\nvar delegate: AnyObject?\nThe receiver’s delegate or nil if it doesn’t have a delegate.\nDeprecated\nvar title: String\nThe string that appears in the receiver’s title bar.\nDeprecated\nvar message: String?\nDescriptive text that provides more details than the title.\nDeprecated\nvar isVisible: Bool\nA Boolean value that indicates whether the receiver is displayed.\nDeprecated"
  },
  {
    "title": "title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uialertview/1620768-title",
    "html": "See Also\nSetting properties\nvar delegate: AnyObject?\nThe receiver’s delegate or nil if it doesn’t have a delegate.\nDeprecated\nvar alertViewStyle: UIAlertViewStyle\nThe kind of alert displayed to the user.\nDeprecated\nvar message: String?\nDescriptive text that provides more details than the title.\nDeprecated\nvar isVisible: Bool\nA Boolean value that indicates whether the receiver is displayed.\nDeprecated"
  },
  {
    "title": "init(title:message:delegate:cancelButtonTitle:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uialertview/1620765-init",
    "html": "Parameters\ntitle\n\nThe string that appears in the receiver’s title bar.\n\nmessage\n\nDescriptive text that provides more details than the title.\n\ndelegate\n\nThe receiver’s delegate or nil if it doesn’t have a delegate.\n\ncancelButtonTitle\n\nThe title of the cancel button or nil if there’s no cancel button.\n\nUsing this argument is equivalent to setting the cancel button index to the value returned by invoking addButton(withTitle:) specifying this title.\n\notherButtonTitles\n\nThe title of another button.\n\nUsing this argument is equivalent to invoking addButton(withTitle:) with this title to add more buttons.\n\nToo many buttons can cause the alert view to scroll. For guidelines on the best ways to use an alert in an app, see Human Interface Guidelines.\n\n...\n\nTitles of additional buttons to add to the receiver, terminated with nil.\n\nReturn Value\n\nNewly initialized alert view.\n\nSee Also\nCreating alert views\ninit(title: String, message: String, delegate: (UIAlertViewDelegate)?, cancelButtonTitle: String?, otherButtonTitles: String, String...)\nCreates an alert view with the specified values.\nDeprecated\ninit(frame: CGRect)\nCreates an alert view with the specified frame.\nDeprecated\ninit?(coder: NSCoder)\nCreates an alert view from data in an unarchiver.\nDeprecated\nRelated Documentation\nfunc addButton(withTitle: String?) -> Int\nAdds a button to the receiver with the given title."
  },
  {
    "title": "init(title:message:delegate:cancelButtonTitle:otherButtonTitles:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uialertview/1625046-init",
    "html": "See Also\nCreating alert views\ninit(title: String?, message: String?, delegate: Any?, cancelButtonTitle: String?)\nConvenience method for initializing an alert view.\nDeprecated\ninit(frame: CGRect)\nCreates an alert view with the specified frame.\nDeprecated\ninit?(coder: NSCoder)\nCreates an alert view from data in an unarchiver.\nDeprecated"
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchbar/1624291-delegate",
    "html": "Discussion\n\nThe delegate should conform to the UISearchBarDelegate protocol. Set this property to further modify the behavior. The default value is nil.\n\nSee Also\nHandling search bar interactions\nprotocol UISearchBarDelegate\nA collection of optional methods that you implement to make a search bar control functional."
  },
  {
    "title": "printInteractionControllerWillPresentPrinterOptions(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprintinteractioncontrollerdelegate/1618168-printinteractioncontrollerwillpr",
    "html": "Parameters\nprintInteractionController\n\nThe shared instance of UIPrintInteractionController that is managing the print job.\n\nSee Also\nResponding to the Presentation and Dismissal of the Printing Interface\nfunc printInteractionControllerDidPresentPrinterOptions(UIPrintInteractionController)\nTells the delegate that the device has presented the printing-options user interface.\nfunc printInteractionControllerWillDismissPrinterOptions(UIPrintInteractionController)\nTells the delegate that the device is about to dismiss the printing-options user interface.\nfunc printInteractionControllerDidDismissPrinterOptions(UIPrintInteractionController)\nTells the delegate that the device is dismissing the printing-options user interface."
  },
  {
    "title": "printInteractionControllerParentViewController(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiprintinteractioncontrollerdelegate/1618162-printinteractioncontrollerparent",
    "html": "Parameters\nprintInteractionController\n\nThe shared instance of UIPrintInteractionController that is managing the print job.\n\nReturn Value\n\nThe view controller that is to be the parent of the print-interaction controller managing the printing-options view. Return nil for the standard presentation behavior.\n\nDiscussion\n\nThis method allows an application to present the print-options view from a view controller of their own choosing. The parent view controller returned must be a UIViewController object, such as a UINavigationController object or a generic view controller. A common strategy for embedding is to create a UINavigationController object as the content view controller (contentViewController property) of a UIPopoverController object and return that. UIKit can push the returned view controller onto the stack if its parent is a navigation controller or present it modally if it isn’t.\n\nThis method is invoked in any of the present... methods of the UIPrintInteractionController class (for example, present(animated:completionHandler:)).\n\nSee Also\nRelated Documentation\nDrawing and Printing Guide for iOS"
  },
  {
    "title": "direction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextselectionhandleview/4195480-direction",
    "html": "Required"
  },
  {
    "title": "interactionWillBegin(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextinteractiondelegate/3255090-interactionwillbegin",
    "html": "Parameters\ninteraction\n\nThe text interaction that called this method.\n\nSee Also\nHandling text interaction events\nfunc interactionShouldBegin(UITextInteraction, at: CGPoint) -> Bool\nAsks the delegate whether the text interaction should begin.\nfunc interactionDidEnd(UITextInteraction)\nTells the delegate that the text interaction ended."
  },
  {
    "title": "interactionDidEnd(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextinteractiondelegate/3255088-interactiondidend",
    "html": "Parameters\ninteraction\n\nThe text interaction that called this method.\n\nSee Also\nHandling text interaction events\nfunc interactionShouldBegin(UITextInteraction, at: CGPoint) -> Bool\nAsks the delegate whether the text interaction should begin.\nfunc interactionWillBegin(UITextInteraction)\nTells the delegate that the text interaction will begin."
  },
  {
    "title": "identifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimutableusernotificationaction/1615379-identifier",
    "html": "Discussion\n\nThe system passes this string to the application(_:handleActionWithIdentifier:for:completionHandler:) or application(_:handleActionWithIdentifier:forRemoteNotification:completionHandler:) method of the app delegate when the user chooses the action.\n\nSee Also\nGetting the action information\nvar title: String?\nThe localized string to use as the button title for the action.\nDeprecated"
  },
  {
    "title": "Notification sound | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilocalnotification/notification_sound",
    "html": "Topics\nConstants\nlet UILocalNotificationDefaultSoundName: String\nIdentifies the default system sound to play when a notification alert is displayed.\nDeprecated"
  },
  {
    "title": "leadingBarButtonGroups | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextinputassistantitem/1614575-leadingbarbuttongroups",
    "html": "Discussion\n\nAssigning a value to this property installs the corresponding bar button items so that they lead the typing suggestions. (In a left-to-right environment, leading items are placed to the left of the typing suggestions.) If there is not enough room to display all of the items, UIKit may display a group’s representative item instead, if one was provided.\n\nSee Also\nConfiguring the shortcuts bar\nvar trailingBarButtonGroups: [UIBarButtonItemGroup]\nThe array of button item groups to display after the typing suggestions.\nvar allowsHidingShortcuts: Bool\nA Boolean value that indicates whether the user can hide the shortcuts bar."
  },
  {
    "title": "init(textInput:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextinputstringtokenizer/1614469-init",
    "html": "Parameters\ntextInput\n\nThe document object in the application that adopts the UITextInput protocol for the purposes of communicating with the text input system.\n\nReturn Value\n\nAn instance of a subclass of UITextInputStringTokenizer, or nil if the object couldn’t be created.\n\nDiscussion\n\nThe subclass of UITextInputStringTokenizer shouldn’t retain textInput; the tokenizer should always have a lifetime bounded by that of the UITextInput-conforming object and a retaining reference would create a retain cycle."
  },
  {
    "title": "setActive(_:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchdisplaycontroller/1620397-setactive",
    "html": "Parameters\nvisible\n\ntrue to display the search interface if it is not already displayed; false to hide the search interface if it is currently displayed.\n\nanimated;\n\ntrue to use animation for a change in visible state, otherwise false.\n\nDiscussion\n\nWhen the user focus in the search field of a managed search bar, the search display controller automatically displays the search interface. You can use this method to force the search interface to appear.\n\nSee Also\nDisplaying the search Interface\nvar isActive: Bool\nThe visibility state of the search interface.\nDeprecated"
  },
  {
    "title": "searchResultsTitle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchdisplaycontroller/1620386-searchresultstitle",
    "html": "Discussion\n\nThe default value is nil.\n\nIf the value is nil, the controller uses the default title string.\n\nSee Also\nConfiguring a search bar\nvar delegate: UISearchDisplayDelegate?\nThe controller’s delegate.\nDeprecated\nvar searchBar: UISearchBar\nThe search bar.\nDeprecated\nvar searchContentsController: UIViewController\nThe view controller that manages the contents being searched.\nDeprecated\nvar searchResultsTableView: UITableView\nThe table view in which the search results are displayed.\nDeprecated\nvar searchResultsDataSource: UITableViewDataSource?\nThe data source for the table view in which the search results are displayed.\nDeprecated\nvar searchResultsDelegate: UITableViewDelegate?\nThe delegate for the table view in which the search results are displayed.\nDeprecated\nvar displaysSearchBarInNavigationBar: Bool\nSpecifies that the navigation bar contains a search bar.\nDeprecated\nvar navigationItem: UINavigationItem?\nRepresents the search display controller in a navigation controller’s navigation bar.\nDeprecated"
  },
  {
    "title": "searchResultsDataSource | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchdisplaycontroller/1620390-searchresultsdatasource",
    "html": "Discussion\n\nThe default is nil.\n\nSee Also\nConfiguring a search bar\nvar delegate: UISearchDisplayDelegate?\nThe controller’s delegate.\nDeprecated\nvar searchBar: UISearchBar\nThe search bar.\nDeprecated\nvar searchContentsController: UIViewController\nThe view controller that manages the contents being searched.\nDeprecated\nvar searchResultsTableView: UITableView\nThe table view in which the search results are displayed.\nDeprecated\nvar searchResultsDelegate: UITableViewDelegate?\nThe delegate for the table view in which the search results are displayed.\nDeprecated\nvar searchResultsTitle: String?\nThe title for the search results view.\nDeprecated\nvar displaysSearchBarInNavigationBar: Bool\nSpecifies that the navigation bar contains a search bar.\nDeprecated\nvar navigationItem: UINavigationItem?\nRepresents the search display controller in a navigation controller’s navigation bar.\nDeprecated"
  },
  {
    "title": "searchResultsDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchdisplaycontroller/1620404-searchresultsdelegate",
    "html": "Discussion\n\nThe default is nil.\n\nSee Also\nConfiguring a search bar\nvar delegate: UISearchDisplayDelegate?\nThe controller’s delegate.\nDeprecated\nvar searchBar: UISearchBar\nThe search bar.\nDeprecated\nvar searchContentsController: UIViewController\nThe view controller that manages the contents being searched.\nDeprecated\nvar searchResultsTableView: UITableView\nThe table view in which the search results are displayed.\nDeprecated\nvar searchResultsDataSource: UITableViewDataSource?\nThe data source for the table view in which the search results are displayed.\nDeprecated\nvar searchResultsTitle: String?\nThe title for the search results view.\nDeprecated\nvar displaysSearchBarInNavigationBar: Bool\nSpecifies that the navigation bar contains a search bar.\nDeprecated\nvar navigationItem: UINavigationItem?\nRepresents the search display controller in a navigation controller’s navigation bar.\nDeprecated"
  },
  {
    "title": "navigationItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchdisplaycontroller/1620408-navigationitem",
    "html": "Discussion\n\nYou can configure the navigation item as described in the UINavigationItem, with the exception of configuring the title view.\n\nImportant\n\nThe system raises an exception if you attempt to set the titleView property for a search display controller’s navigation item.\n\nSee Also\nConfiguring a search bar\nvar delegate: UISearchDisplayDelegate?\nThe controller’s delegate.\nDeprecated\nvar searchBar: UISearchBar\nThe search bar.\nDeprecated\nvar searchContentsController: UIViewController\nThe view controller that manages the contents being searched.\nDeprecated\nvar searchResultsTableView: UITableView\nThe table view in which the search results are displayed.\nDeprecated\nvar searchResultsDataSource: UITableViewDataSource?\nThe data source for the table view in which the search results are displayed.\nDeprecated\nvar searchResultsDelegate: UITableViewDelegate?\nThe delegate for the table view in which the search results are displayed.\nDeprecated\nvar searchResultsTitle: String?\nThe title for the search results view.\nDeprecated\nvar displaysSearchBarInNavigationBar: Bool\nSpecifies that the navigation bar contains a search bar.\nDeprecated"
  },
  {
    "title": "cancelAllLocalNotifications() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/1622990-cancelalllocalnotifications",
    "html": "Deprecated\n\nUse the UNUserNotificationCenter class to schedule local notifications instead.\n\nSee Also\nDeprecated methods\nfunc requestSceneSessionActivation(UISceneSession?, userActivity: NSUserActivity?, options: UIScene.ActivationRequestOptions?, errorHandler: ((Error) -> Void)?)\nAsks the system to activate an existing scene, or create a new scene and associate it with your app.\nDeprecated\nfunc beginIgnoringInteractionEvents()\nTells the receiver to suspend the handling of touch-related events.\nDeprecated\nfunc endIgnoringInteractionEvents()\nTells the receiver to resume the handling of touch-related events.\nDeprecated\nfunc setMinimumBackgroundFetchInterval(TimeInterval)\nSpecifies the minimum amount of time that must elapse between background fetch operations.\nDeprecated\nfunc scheduleLocalNotification(UILocalNotification)\nSchedules a local notification for delivery at its encapsulated date and time.\nDeprecated\nfunc presentLocalNotificationNow(UILocalNotification)\nPresents a local notification immediately.\nDeprecated\nfunc cancelLocalNotification(UILocalNotification)\nCancels the delivery of the specified scheduled local notification.\nDeprecated\nfunc setKeepAliveTimeout(TimeInterval, handler: (() -> Void)?) -> Bool\nConfigures a periodic handler for VoIP apps in older versions of iOS.\nDeprecated\nlet UIMinimumKeepAliveTimeout: TimeInterval\nThe minimum amount of time (measured in seconds) an app may run a critical background task in the background.\nDeprecated\nfunc clearKeepAliveTimeout()\nRemoves a previously installed periodic handler block.\nDeprecated\nfunc setStatusBarHidden(Bool, with: UIStatusBarAnimation)\nHides or shows the status bar, optionally animating the transition.\nDeprecated\nfunc setStatusBarStyle(UIStatusBarStyle, animated: Bool)\nSets the style of the status bar, optionally animating the transition to the new style.\nDeprecated\nfunc setStatusBarOrientation(UIInterfaceOrientation, animated: Bool)\nSets the app's status bar to the specified orientation, optionally animating the transition.\nDeprecated\nfunc registerUserNotificationSettings(UIUserNotificationSettings)\nRegisters your preferred options for notifying the user.\nDeprecated\nfunc registerForRemoteNotifications(matching: UIRemoteNotificationType)\nRegister to receive remote notifications of the specified types via Apple Push Notification service.\nDeprecated\nfunc enabledRemoteNotificationTypes() -> UIRemoteNotificationType\nReturns the types of notifications the app accepts.\nDeprecated\nstruct UIRemoteNotificationType\nConstants indicating the types of notifications the app may display to the user.\nDeprecated\nfunc openURL(URL) -> Bool\nAttempts to open the resource at the specified URL.\nDeprecated\nfunc setNewsstandIconImage(UIImage?)\nSets the icon of a Newsstand app to an image depicting the current issue of a publication.\nDeprecated"
  },
  {
    "title": "presentLocalNotificationNow(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/1622931-presentlocalnotificationnow",
    "html": "Deprecated\n\nUse the UNUserNotificationCenter class to schedule local notifications instead.\n\nParameters\nnotification\n\nA local notification that the operating system presents for the app immediately, regardless of the value of the notification’s fireDate property. Apps running in the background state can immediately present local notifications when there are incoming chats, messages, or updates. Because the operating system copies notification, you may release it once you have scheduled it.\n\nDiscussion\n\nPrior to scheduling any local notifications, you must call the registerUserNotificationSettings(_:) method to let the system know what types of alerts, if any, you plan to display to the user.\n\nSee Also\nDeprecated methods\nfunc requestSceneSessionActivation(UISceneSession?, userActivity: NSUserActivity?, options: UIScene.ActivationRequestOptions?, errorHandler: ((Error) -> Void)?)\nAsks the system to activate an existing scene, or create a new scene and associate it with your app.\nDeprecated\nfunc beginIgnoringInteractionEvents()\nTells the receiver to suspend the handling of touch-related events.\nDeprecated\nfunc endIgnoringInteractionEvents()\nTells the receiver to resume the handling of touch-related events.\nDeprecated\nfunc setMinimumBackgroundFetchInterval(TimeInterval)\nSpecifies the minimum amount of time that must elapse between background fetch operations.\nDeprecated\nfunc scheduleLocalNotification(UILocalNotification)\nSchedules a local notification for delivery at its encapsulated date and time.\nDeprecated\nfunc cancelLocalNotification(UILocalNotification)\nCancels the delivery of the specified scheduled local notification.\nDeprecated\nfunc cancelAllLocalNotifications()\nCancels the delivery of all scheduled local notifications.\nDeprecated\nfunc setKeepAliveTimeout(TimeInterval, handler: (() -> Void)?) -> Bool\nConfigures a periodic handler for VoIP apps in older versions of iOS.\nDeprecated\nlet UIMinimumKeepAliveTimeout: TimeInterval\nThe minimum amount of time (measured in seconds) an app may run a critical background task in the background.\nDeprecated\nfunc clearKeepAliveTimeout()\nRemoves a previously installed periodic handler block.\nDeprecated\nfunc setStatusBarHidden(Bool, with: UIStatusBarAnimation)\nHides or shows the status bar, optionally animating the transition.\nDeprecated\nfunc setStatusBarStyle(UIStatusBarStyle, animated: Bool)\nSets the style of the status bar, optionally animating the transition to the new style.\nDeprecated\nfunc setStatusBarOrientation(UIInterfaceOrientation, animated: Bool)\nSets the app's status bar to the specified orientation, optionally animating the transition.\nDeprecated\nfunc registerUserNotificationSettings(UIUserNotificationSettings)\nRegisters your preferred options for notifying the user.\nDeprecated\nfunc registerForRemoteNotifications(matching: UIRemoteNotificationType)\nRegister to receive remote notifications of the specified types via Apple Push Notification service.\nDeprecated\nfunc enabledRemoteNotificationTypes() -> UIRemoteNotificationType\nReturns the types of notifications the app accepts.\nDeprecated\nstruct UIRemoteNotificationType\nConstants indicating the types of notifications the app may display to the user.\nDeprecated\nfunc openURL(URL) -> Bool\nAttempts to open the resource at the specified URL.\nDeprecated\nfunc setNewsstandIconImage(UIImage?)\nSets the icon of a Newsstand app to an image depicting the current issue of a publication.\nDeprecated"
  },
  {
    "title": "title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactionsheet/1622882-title",
    "html": "See Also\nSetting properties\nvar delegate: UIActionSheetDelegate?\nThe receiver’s delegate or nil if it doesn’t have a delegate.\nDeprecated\nvar isVisible: Bool\nA Boolean value that indicates whether the receiver is displayed.\nDeprecated\nvar actionSheetStyle: UIActionSheetStyle\nThe receiver’s presentation style.\nDeprecated"
  },
  {
    "title": "timeZone | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilocalnotification/1616659-timezone",
    "html": "Discussion\n\nThe date specified in fireDate is interpreted according to the value of this property. If you specify nil (the default), the fire date is interpreted as an absolute GMT time, which is suitable for cases such as countdown timers. If you assign a valid NSTimeZone object to this property, the fire date is interpreted as a wall-clock time that is automatically adjusted when there are changes in time zones; an example suitable for this case is an an alarm clock.\n\nSee Also\nScheduling a local notification\nvar fireDate: Date?\nThe date and time when the system should deliver the notification.\nDeprecated\nvar repeatInterval: NSCalendar.Unit\nThe calendar interval at which to reschedule the notification.\nDeprecated\nvar repeatCalendar: Calendar?\nThe calendar the system should refer to when it reschedules a repeating notification.\nDeprecated\nvar region: CLRegion?\nThe geographic region that triggers the notification.\nDeprecated\nvar regionTriggersOnce: Bool\nA Boolean value indicating whether crossing a geographic region boundary delivers only one notification.\nDeprecated"
  },
  {
    "title": "region | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilocalnotification/1616644-region",
    "html": "Discussion\n\nAssigning a value to this property causes the local notification to be delivered when the user crosses the region’s boundary. The region object itself defines whether the notification is triggered when the user enters or exits the region. The default value of this property is nil.\n\nYou may specify a value for this property or the fireDate property but not both. Attempting to schedule a local notification that contains both a region and fire date raises an exception.\n\nApps are limited in the total number of regions they may monitor at any given time, and local notifications configured with a region value count against that total. In addition, the user must grant permission for your app to use location-related information for the delivery of region-based local notifications to work. If the user denies your app’s request to use location services, local notifications configured with a region will not be delivered.\n\nSee Also\nScheduling a local notification\nvar fireDate: Date?\nThe date and time when the system should deliver the notification.\nDeprecated\nvar timeZone: TimeZone?\nThe time zone of the notification’s fire date.\nDeprecated\nvar repeatInterval: NSCalendar.Unit\nThe calendar interval at which to reschedule the notification.\nDeprecated\nvar repeatCalendar: Calendar?\nThe calendar the system should refer to when it reschedules a repeating notification.\nDeprecated\nvar regionTriggersOnce: Bool\nA Boolean value indicating whether crossing a geographic region boundary delivers only one notification.\nDeprecated"
  },
  {
    "title": "category | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilocalnotification/1616655-category",
    "html": "Discussion\n\nThe value of this property is the category name associated with a registered UIUserNotificationSettings object. When the alert for the local notification is displayed, the system uses the string you specify to look up the group and retrieve its actions. It then adds a button to the alert for each action defined by the group. When the user taps one of those buttons, the app is woken up (or launched) and given a chance to perform the designated action. If the specified category name does not belong to a registered group of actions, the alert does not display any additional action buttons.\n\nSpecifying custom actions is optional. The value of this property is nil by default.\n\nSee Also\nComposing the alert\nvar alertBody: String?\nThe message displayed in the notification alert.\nDeprecated\nvar alertAction: String?\nThe title of the action button or slider.\nDeprecated\nvar alertTitle: String?\nA short description of the reason for the alert.\nDeprecated\nvar hasAction: Bool\nA Boolean value that controls whether the notification shows or hides the alert action.\nDeprecated\nvar alertLaunchImage: String?\nIdentifies the image used as the launch image when the user taps (or slides) the action button (or slider).\nDeprecated"
  },
  {
    "title": "hasAction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilocalnotification/1616649-hasaction",
    "html": "Discussion\n\nAssign false to this property to hide the alert button or slider. (This effect requires alertBody to be non-nil.) The default value is true.\n\nSee Also\nComposing the alert\nvar alertBody: String?\nThe message displayed in the notification alert.\nDeprecated\nvar alertAction: String?\nThe title of the action button or slider.\nDeprecated\nvar alertTitle: String?\nA short description of the reason for the alert.\nDeprecated\nvar alertLaunchImage: String?\nIdentifies the image used as the launch image when the user taps (or slides) the action button (or slider).\nDeprecated\nvar category: String?\nThe name of a group of actions to display in the alert.\nDeprecated"
  },
  {
    "title": "alertTitle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilocalnotification/1616647-alerttitle",
    "html": "Discussion\n\nUse this property to provide a short description of the reason for the alert. You may specify a string with the text you want to display or you may specify a string to use as a lookup key in your app’s Localizable.strings file. The default value of this property is nil.\n\nTitle strings should be short, usually only a couple of words describing the reason for the notification. Apple Watch displays the title string as part of the short look notification interface, which has limited space.\n\nSee Also\nComposing the alert\nvar alertBody: String?\nThe message displayed in the notification alert.\nDeprecated\nvar alertAction: String?\nThe title of the action button or slider.\nDeprecated\nvar hasAction: Bool\nA Boolean value that controls whether the notification shows or hides the alert action.\nDeprecated\nvar alertLaunchImage: String?\nIdentifies the image used as the launch image when the user taps (or slides) the action button (or slider).\nDeprecated\nvar category: String?\nThe name of a group of actions to display in the alert.\nDeprecated"
  },
  {
    "title": "applicationIconBadgeNumber | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilocalnotification/1616658-applicationiconbadgenumber",
    "html": "Discussion\n\nThe default value of this property is 0, which means that no badge is displayed.\n\nSee Also\nConfiguring other parts of the notification\nvar soundName: String?\nThe name of the file containing the sound to play when an alert is displayed.\nDeprecated\nvar userInfo: [AnyHashable : Any]?\nA dictionary for passing custom information to the notified app.\nDeprecated"
  },
  {
    "title": "alertLaunchImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilocalnotification/1616660-alertlaunchimage",
    "html": "Discussion\n\nThe string is a filename of an image file in the app bundle. This image is a launching image specified for a given notification; when the user taps the action button (for example, “View”) or moves the action slider, the image is used in place of the default launching image. If the value of this property is nil (the default), the system either uses the previous snapshot, uses the image identified by the UILaunchImageFile key in the app’s Info.plist file, or falls back to Default.png.\n\nThe value of this key has the exact same semantics as UILaunchImageFile. For more about this key, see the Information Property List Key Reference.\n\nSee Also\nComposing the alert\nvar alertBody: String?\nThe message displayed in the notification alert.\nDeprecated\nvar alertAction: String?\nThe title of the action button or slider.\nDeprecated\nvar alertTitle: String?\nA short description of the reason for the alert.\nDeprecated\nvar hasAction: Bool\nA Boolean value that controls whether the notification shows or hides the alert action.\nDeprecated\nvar category: String?\nThe name of a group of actions to display in the alert.\nDeprecated"
  },
  {
    "title": "init(title:delegate:cancelButtonTitle:destructiveButtonTitle:otherButtonTitles:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactionsheet/1625032-init",
    "html": "See Also\nCreating action sheets\ninit(title: String?, delegate: UIActionSheetDelegate?, cancelButtonTitle: String?, destructiveButtonTitle: String?)\nInitializes the action sheet using the specified starting parameters.\nDeprecated"
  },
  {
    "title": "numberOfButtons | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactionsheet/1622891-numberofbuttons",
    "html": "See Also\nConfiguring buttons\nfunc addButton(withTitle: String?) -> Int\nAdds a custom button to the action sheet.\nDeprecated\nfunc buttonTitle(at: Int) -> String?\nReturns the title of the button at the specified index.\nDeprecated\nvar cancelButtonIndex: Int\nThe index number of the cancel button.\nDeprecated\nvar destructiveButtonIndex: Int\nThe index number of the destructive button.\nDeprecated\nvar firstOtherButtonIndex: Int\nThe index of the first custom button.\nDeprecated"
  },
  {
    "title": "soundName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilocalnotification/1616651-soundname",
    "html": "Discussion\n\nFor this property, specify the filename (including extension) of a sound resource in the app’s main bundle or UILocalNotificationDefaultSoundName to request the default system sound. When the system displays an alert for a local notification or badges an app icon, it plays this sound. The default value is nil (no sound). Sounds that last longer than 30 seconds are not supported. If you specify a file with a sound that plays over 30 seconds, the default sound is played instead.\n\nFor information on valid sound resources, see Registering, Scheduling, and Handling User Notifications in Local and Remote Notification Programming Guide.\n\nSee Also\nConfiguring other parts of the notification\nvar applicationIconBadgeNumber: Int\nThe number to display as the app’s icon badge.\nDeprecated\nvar userInfo: [AnyHashable : Any]?\nA dictionary for passing custom information to the notified app.\nDeprecated"
  },
  {
    "title": "UIAlertViewStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uialertviewstyle",
    "html": "Topics\nConstants\ncase `default`\nA standard alert.\ncase secureTextInput\nAn alert that allows the user to enter text. The text field is obscured.\ncase plainTextInput\nAn alert that allows the user to enter text.\ncase loginAndPasswordInput\nAn alert that allows the user to enter a login identifier and password.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "destructiveButtonIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactionsheet/1622863-destructivebuttonindex",
    "html": "Discussion\n\nButton indices start at 0. The default value of this property is normally -1, which indicates that no destructive button has been set. However, a destructive button may be created and set automatically by the init(title:delegate:cancelButtonTitle:destructiveButtonTitle:) method. If you use that method to create a destructive button, you should not change the value of this property.\n\nSee Also\nConfiguring buttons\nfunc addButton(withTitle: String?) -> Int\nAdds a custom button to the action sheet.\nDeprecated\nvar numberOfButtons: Int\nThe number of buttons on the action sheet.\nDeprecated\nfunc buttonTitle(at: Int) -> String?\nReturns the title of the button at the specified index.\nDeprecated\nvar cancelButtonIndex: Int\nThe index number of the cancel button.\nDeprecated\nvar firstOtherButtonIndex: Int\nThe index of the first custom button.\nDeprecated"
  },
  {
    "title": "show(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactionsheet/1622886-show",
    "html": "Parameters\nview\n\nThe view from which the action sheet originates.\n\nDiscussion\n\nThe appearance of the action sheet is animated.\n\nOn iPad, this method centers the action sheet in the middle of the screen. Generally, if you want to present an action sheet in an iPad application, you should use the show(from:in:animated:) method to display the action sheet instead.\n\nSee Also\nPresenting the action sheet\nfunc show(from: UITabBar)\nDisplays an action sheet that originates from the specified tab bar.\nDeprecated\nfunc show(from: UIToolbar)\nDisplays an action sheet that originates from the specified toolbar.\nDeprecated\nfunc show(from: UIBarButtonItem, animated: Bool)\nDisplays an action sheet that originates from the specified bar button item.\nDeprecated\nfunc show(from: CGRect, in: UIView, animated: Bool)\nDisplays an action sheet that originates from the specified view.\nDeprecated"
  },
  {
    "title": "show(from:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactionsheet/1622869-show",
    "html": "Parameters\nitem\n\nThe bar button item from which the action sheet originates.\n\nanimated\n\nSpecify true to animate the presentation of the action sheet or false to present it immediately without any animation effects.\n\nDiscussion\n\nOn iPad, this method presents the action sheet in a popover and adds the toolbar that owns the button to the popover’s list of passthrough views. Thus, taps in the toolbar result in the action methods of the corresponding toolbar items being called. If you want the popover to be dismissed when a different toolbar item is tapped, you must implement that behavior in your action handler methods.\n\nSee Also\nPresenting the action sheet\nfunc show(from: UITabBar)\nDisplays an action sheet that originates from the specified tab bar.\nDeprecated\nfunc show(from: UIToolbar)\nDisplays an action sheet that originates from the specified toolbar.\nDeprecated\nfunc show(in: UIView)\nDisplays an action sheet that originates from the specified view.\nDeprecated\nfunc show(from: CGRect, in: UIView, animated: Bool)\nDisplays an action sheet that originates from the specified view.\nDeprecated"
  },
  {
    "title": "cancelButtonIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactionsheet/1622866-cancelbuttonindex",
    "html": "Discussion\n\nButton indices start at 0. The default value of this property is normally -1, which indicates that no cancel button has been set. However, a cancel button may be created and set automatically by the init(title:delegate:cancelButtonTitle:destructiveButtonTitle:) method. If you use that method to create a cancel button, you should not change the value of this property.\n\nWhen presenting an action sheet on an iPad, there are times when you should not include a cancel button. For more information on when you should include a cancel button, see the class overview or iOS Human Interface Guidelines.\n\nSee Also\nConfiguring buttons\nfunc addButton(withTitle: String?) -> Int\nAdds a custom button to the action sheet.\nDeprecated\nvar numberOfButtons: Int\nThe number of buttons on the action sheet.\nDeprecated\nfunc buttonTitle(at: Int) -> String?\nReturns the title of the button at the specified index.\nDeprecated\nvar destructiveButtonIndex: Int\nThe index number of the destructive button.\nDeprecated\nvar firstOtherButtonIndex: Int\nThe index of the first custom button.\nDeprecated"
  },
  {
    "title": "show(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactionsheet/1622872-show",
    "html": "Parameters\nview\n\nThe tab bar from which the action sheet originates.\n\nDiscussion\n\nThe appearance of the action sheet is animated.\n\nOn iPad, this method centers the action sheet in the middle of the screen. Generally, if you want to present an action sheet relative to a tab bar in an iPad application, you should use the show(from:in:animated:) method instead.\n\nSee Also\nPresenting the action sheet\nfunc show(from: UIToolbar)\nDisplays an action sheet that originates from the specified toolbar.\nDeprecated\nfunc show(in: UIView)\nDisplays an action sheet that originates from the specified view.\nDeprecated\nfunc show(from: UIBarButtonItem, animated: Bool)\nDisplays an action sheet that originates from the specified bar button item.\nDeprecated\nfunc show(from: CGRect, in: UIView, animated: Bool)\nDisplays an action sheet that originates from the specified view.\nDeprecated"
  },
  {
    "title": "showMenu(from:rect:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenucontroller/3044217-showmenu",
    "html": "See Also\nShowing and hiding the menu\nfunc hideMenu(from: UIView)\nDeprecated\nfunc hideMenu()\nDeprecated\nvar isMenuVisible: Bool\nThe visibility of the editing menu.\nDeprecated\nfunc setMenuVisible(Bool, animated: Bool)\nShows or hides the editing menu, optionally animating the action.\nDeprecated"
  },
  {
    "title": "addButton(withTitle:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactionsheet/1622864-addbutton",
    "html": "Parameters\ntitle\n\nThe title of the new button.\n\nReturn Value\n\nThe index of the new button. Button indices start at 0 and increase in the order they are added.\n\nSee Also\nConfiguring buttons\nvar numberOfButtons: Int\nThe number of buttons on the action sheet.\nDeprecated\nfunc buttonTitle(at: Int) -> String?\nReturns the title of the button at the specified index.\nDeprecated\nvar cancelButtonIndex: Int\nThe index number of the cancel button.\nDeprecated\nvar destructiveButtonIndex: Int\nThe index number of the destructive button.\nDeprecated\nvar firstOtherButtonIndex: Int\nThe index of the first custom button.\nDeprecated\nRelated Documentation\nclass UIActionSheet\nA view that presents a set of alternatives for how to proceed with a task."
  },
  {
    "title": "buttonTitle(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactionsheet/1622871-buttontitle",
    "html": "Parameters\nbuttonIndex\n\nThe index of the button. The button indices start at 0.\n\nReturn Value\n\nThe title of the button specified by index buttonIndex.\n\nSee Also\nConfiguring buttons\nfunc addButton(withTitle: String?) -> Int\nAdds a custom button to the action sheet.\nDeprecated\nvar numberOfButtons: Int\nThe number of buttons on the action sheet.\nDeprecated\nvar cancelButtonIndex: Int\nThe index number of the cancel button.\nDeprecated\nvar destructiveButtonIndex: Int\nThe index number of the destructive button.\nDeprecated\nvar firstOtherButtonIndex: Int\nThe index of the first custom button.\nDeprecated\nRelated Documentation\nfunc show(in: UIView)\nDisplays an action sheet that originates from the specified view."
  },
  {
    "title": "show(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactionsheet/1622874-show",
    "html": "Parameters\nview\n\nThe toolbar from which the action sheet originates.\n\nDiscussion\n\nThe appearance of the action sheet is animated.\n\nOn iPad, this method centers the action sheet in the middle of the screen. Generally, if you want to present an action sheet relative to a toolbar in an iPad application, you should use the show(from:animated:) method instead.\n\nSee Also\nPresenting the action sheet\nfunc show(from: UITabBar)\nDisplays an action sheet that originates from the specified tab bar.\nDeprecated\nfunc show(in: UIView)\nDisplays an action sheet that originates from the specified view.\nDeprecated\nfunc show(from: UIBarButtonItem, animated: Bool)\nDisplays an action sheet that originates from the specified bar button item.\nDeprecated\nfunc show(from: CGRect, in: UIView, animated: Bool)\nDisplays an action sheet that originates from the specified view.\nDeprecated"
  },
  {
    "title": "actionSheetStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactionsheet/1622881-actionsheetstyle",
    "html": "Discussion\n\nThis property determines how the action sheet looks when it is presented. For a list of possible values, see the UIActionSheetStyle constants.\n\nSee Also\nSetting properties\nvar delegate: UIActionSheetDelegate?\nThe receiver’s delegate or nil if it doesn’t have a delegate.\nDeprecated\nvar title: String\nThe string that appears in the receiver’s title bar.\nDeprecated\nvar isVisible: Bool\nA Boolean value that indicates whether the receiver is displayed.\nDeprecated"
  },
  {
    "title": "UIMenuController.ArrowDirection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenucontroller/arrowdirection",
    "html": "Topics\nConstants\ncase `default`\nThe arrow is pointing up or down at the object of focus based on its location in the screen.\ncase up\nThe arrow is pointing up at the object of focus.\ncase down\nThe arrow is pointing down at the object of focus.\ncase left\nThe arrow is pointing left at the object of focus.\ncase right\nThe arrow is pointing right at the object of focus.\nRelationships\nConforms To\nSendable\nSee Also\nPositioning the menu\nvar menuFrame: CGRect\nReturns the frame of the editing menu.\nDeprecated\nvar arrowDirection: UIMenuController.ArrowDirection\nThe direction the arrow of the editing menu is pointing.\nDeprecated\nfunc setTargetRect(CGRect, in: UIView)\nSets the area in a view above or below which the editing menu is positioned.\nDeprecated"
  },
  {
    "title": "shared | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenucontroller/1622831-shared",
    "html": "Return Value\n\nThe shared UIMenuController instance."
  },
  {
    "title": "isMenuVisible | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenucontroller/1622833-ismenuvisible",
    "html": "Discussion\n\nSetting this property displays or hides the menu immediately, without animation. For animating the showing or hiding of the menu, use the setMenuVisible(_:animated:) method. Before showing the menu, be sure to position it relative to the selection.\n\nSee Also\nShowing and hiding the menu\nfunc showMenu(from: UIView, rect: CGRect)\nDeprecated\nfunc hideMenu(from: UIView)\nDeprecated\nfunc hideMenu()\nDeprecated\nfunc setMenuVisible(Bool, animated: Bool)\nShows or hides the editing menu, optionally animating the action.\nDeprecated"
  },
  {
    "title": "hideMenu() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenucontroller/3044215-hidemenu",
    "html": "See Also\nShowing and hiding the menu\nfunc showMenu(from: UIView, rect: CGRect)\nDeprecated\nfunc hideMenu(from: UIView)\nDeprecated\nvar isMenuVisible: Bool\nThe visibility of the editing menu.\nDeprecated\nfunc setMenuVisible(Bool, animated: Bool)\nShows or hides the editing menu, optionally animating the action.\nDeprecated"
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardMenu | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardmenu",
    "html": "See Also\nOther keys\ncase keyboardAgain\nThe raw DEC usage code 121.\ncase keyboardAlternateErase\nThe raw DEC usage code 153.\ncase keyboardApplication\nThe raw DEC usage code 101.\ncase keyboardCancel\nThe raw DEC usage code 155.\ncase keyboardClear\nThe raw DEC usage code 156.\ncase keyboardClearOrAgain\nThe raw DEC usage code 162.\ncase keyboardCopy\nThe raw DEC usage code 124.\ncase keyboardCrSelOrProps\nThe raw DEC usage code 163.\ncase keyboardCut\nThe raw DEC usage code 129.\ncase keyboardExSel\nThe raw DEC usage code 164.\ncase keyboardExecute\nThe raw DEC usage code 116.\ncase keyboardFind\nThe raw DEC usage code 126.\ncase keyboardGraveAccentAndTilde\nThe raw DEC usage code 53.\ncase keyboardHelp\nThe raw DEC usage code 117.\ncase keyboardLeftGUI\nThe raw DEC usage code 227.\ncase keyboardOper\nThe raw DEC usage code 161.\ncase keyboardOut\nThe raw DEC usage code 160.\ncase keyboardPOSTFail\nThe raw DEC usage code 2.\ncase keyboardPaste\nThe raw DEC usage code 125.\ncase keyboardPower\nThe raw DEC usage code 102.\ncase keyboardPrintScreen\nThe raw DEC usage code 70.\ncase keyboardPrior\nThe raw DEC usage code 157.\ncase keyboardReturnOrEnter\nThe raw DEC usage code 40.\ncase keyboardRightGUI\nThe raw DEC usage code 231.\ncase keyboardSelect\nThe raw DEC usage code 119.\ncase keyboardSysReqOrAttention\nThe raw DEC usage code 154.\ncase keyboardUndo\nThe raw DEC usage code 122.\ncase keyboard_Reserved\nThe raw DEC usage code 65535."
  },
  {
    "title": "UIActionSheetStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactionsheetstyle",
    "html": "Topics\nConstants\ncase automatic\nTakes the appearance of the bottom bar if specified; otherwise, same as UIActionSheetStyle.default.\ncase `default`\nThe default style.\ncase blackTranslucent\nA black translucent style.\ncase blackOpaque\nA black opaque style.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "arrowDirection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenucontroller/1622821-arrowdirection",
    "html": "Discussion\n\nYou can set the direction editing-menu arrow points by assigning a UIMenuController.ArrowDirection enum constant to this property. The default behavior (UIMenuController.ArrowDirection.default) is to point up or down at the object of focus based on its location on the screen.\n\nSee Also\nPositioning the menu\nvar menuFrame: CGRect\nReturns the frame of the editing menu.\nDeprecated\nenum UIMenuController.ArrowDirection\nThe direction the arrow of the editing menu is pointing.\nDeprecated\nfunc setTargetRect(CGRect, in: UIView)\nSets the area in a view above or below which the editing menu is positioned.\nDeprecated"
  },
  {
    "title": "setMenuVisible(_:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenucontroller/1622819-setmenuvisible",
    "html": "Parameters\nmenuVisible\n\ntrue if the menu should be shown, false if it should be hidden.\n\nanimated\n\ntrue if the showing or hiding of the menu should be animated, otherwise false.\n\nDiscussion\n\nBefore showing the menu, be sure to position it relative to the selection. See setTargetRect(_:in:) for details. If you do not set the target rect before displaying the menu, it appears at screen coordinates (0.0, 0.0).\n\nSee Also\nShowing and hiding the menu\nfunc showMenu(from: UIView, rect: CGRect)\nDeprecated\nfunc hideMenu(from: UIView)\nDeprecated\nfunc hideMenu()\nDeprecated\nvar isMenuVisible: Bool\nThe visibility of the editing menu.\nDeprecated"
  },
  {
    "title": "addButton(withTitle:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uialertview/1620761-addbutton",
    "html": "Parameters\ntitle\n\nThe title of the new button.\n\nReturn Value\n\nThe index of the new button. Button indices start at 0 and increase in the order they are added.\n\nDiscussion\n\nAdding too many buttons can cause the alert view to scroll. For guidelines on the best ways to use an alert in an app, see Temporary Views.\n\nSee Also\nConfiguring buttons\nvar numberOfButtons: Int\nThe number of buttons on the alert view.\nDeprecated\nfunc buttonTitle(at: Int) -> String?\nReturns the title of the button at the given index.\nDeprecated\nfunc textField(at: Int) -> UITextField?\nReturns the text field at the given index\nDeprecated\nvar cancelButtonIndex: Int\nThe index number of the cancel button.\nDeprecated\nvar firstOtherButtonIndex: Int\nThe index of the first other button.\nDeprecated\nRelated Documentation\nvar message: String?\nDescriptive text that provides more details than the title."
  },
  {
    "title": "numberOfButtons | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uialertview/1620753-numberofbuttons",
    "html": "See Also\nConfiguring buttons\nfunc addButton(withTitle: String?) -> Int\nAdds a button to the receiver with the given title.\nDeprecated\nfunc buttonTitle(at: Int) -> String?\nReturns the title of the button at the given index.\nDeprecated\nfunc textField(at: Int) -> UITextField?\nReturns the text field at the given index\nDeprecated\nvar cancelButtonIndex: Int\nThe index number of the cancel button.\nDeprecated\nvar firstOtherButtonIndex: Int\nThe index of the first other button.\nDeprecated"
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uialertview/1620779-init",
    "html": "See Also\nCreating alert views\ninit(title: String?, message: String?, delegate: Any?, cancelButtonTitle: String?)\nConvenience method for initializing an alert view.\nDeprecated\ninit(title: String, message: String, delegate: (UIAlertViewDelegate)?, cancelButtonTitle: String?, otherButtonTitles: String, String...)\nCreates an alert view with the specified values.\nDeprecated\ninit(frame: CGRect)\nCreates an alert view with the specified frame.\nDeprecated"
  },
  {
    "title": "init(frame:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uialertview/1620759-init",
    "html": "See Also\nCreating alert views\ninit(title: String?, message: String?, delegate: Any?, cancelButtonTitle: String?)\nConvenience method for initializing an alert view.\nDeprecated\ninit(title: String, message: String, delegate: (UIAlertViewDelegate)?, cancelButtonTitle: String?, otherButtonTitles: String, String...)\nCreates an alert view with the specified values.\nDeprecated\ninit?(coder: NSCoder)\nCreates an alert view from data in an unarchiver.\nDeprecated"
  },
  {
    "title": "UIPopoverArrowDirection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipopoverarrowdirection",
    "html": "Topics\nConstants\nstatic var up: UIPopoverArrowDirection\nAn arrow that points upward.\nstatic var down: UIPopoverArrowDirection\nAn arrow that points downward.\nstatic var left: UIPopoverArrowDirection\nAn arrow that points toward the left.\nstatic var right: UIPopoverArrowDirection\nAn arrow that points toward the right.\nstatic var any: UIPopoverArrowDirection\nAn arrow that points in any direction.\nstatic var unknown: UIPopoverArrowDirection\nThe status of the arrow is currently unknown.\nInitializers\ninit(rawValue: UInt)\nCreates a popover arrow direction with the specified raw value.\nRelationships\nConforms To\nOptionSet\nSendable"
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardInternational3 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardinternational3",
    "html": "See Also\nInput method keys\nstatic var keyboardKanaSwitch: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Japanese language keyboards from Apple.\nstatic var keyboardHangul: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Korean language keyboards.\nstatic var keyboardAlphanumericSwitch: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Japanese language keyboards from Apple.\nstatic var keyboardHanja: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Korean language keyboards.\nstatic var keyboardKatakana: UIKeyboardHIDUsage\nAn alias for the LANG3 key on Japanese language keyboards.\nstatic var keyboardHiragana: UIKeyboardHIDUsage\nAn alias for the LANG4 key on Japanese language keyboards.\nstatic var keyboardZenkakuHankakuKanji: UIKeyboardHIDUsage\nAn alias for the LANG5 key on Japanese language keyboards.\ncase keyboardLANG1\nThe raw DEC usage code 144.\ncase keyboardLANG2\nThe raw DEC usage code 145.\ncase keyboardLANG3\nThe raw DEC usage code 146.\ncase keyboardLANG4\nThe raw DEC usage code 147.\ncase keyboardLANG5\nThe raw DEC usage code 148.\ncase keyboardLANG6\nThe raw DEC usage code 149.\ncase keyboardLANG7\nThe raw DEC usage code 150.\ncase keyboardLANG8\nThe raw DEC usage code 151.\ncase keyboardLANG9\nThe raw DEC usage code 152.\ncase keyboardInternational1\nThe raw DEC usage code 135.\ncase keyboardInternational2\nThe raw DEC usage code 136.\ncase keyboardInternational4\nThe raw DEC usage code 138.\ncase keyboardInternational5\nThe raw DEC usage code 139.\ncase keyboardInternational6\nThe raw DEC usage code 140.\ncase keyboardInternational7\nThe raw DEC usage code 141.\ncase keyboardInternational8\nThe raw DEC usage code 142.\ncase keyboardInternational9\nThe raw DEC usage code 143."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uialertview/1620769-delegate",
    "html": "Discussion\n\nSee UIAlertViewDelegate for the methods this delegate should implement.\n\nSee Also\nSetting properties\nvar alertViewStyle: UIAlertViewStyle\nThe kind of alert displayed to the user.\nDeprecated\nvar title: String\nThe string that appears in the receiver’s title bar.\nDeprecated\nvar message: String?\nDescriptive text that provides more details than the title.\nDeprecated\nvar isVisible: Bool\nA Boolean value that indicates whether the receiver is displayed.\nDeprecated"
  },
  {
    "title": "UIKeyboardHIDUsage.keyboard_Reserved | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboard_reserved",
    "html": "See Also\nOther keys\ncase keyboardAgain\nThe raw DEC usage code 121.\ncase keyboardAlternateErase\nThe raw DEC usage code 153.\ncase keyboardApplication\nThe raw DEC usage code 101.\ncase keyboardCancel\nThe raw DEC usage code 155.\ncase keyboardClear\nThe raw DEC usage code 156.\ncase keyboardClearOrAgain\nThe raw DEC usage code 162.\ncase keyboardCopy\nThe raw DEC usage code 124.\ncase keyboardCrSelOrProps\nThe raw DEC usage code 163.\ncase keyboardCut\nThe raw DEC usage code 129.\ncase keyboardExSel\nThe raw DEC usage code 164.\ncase keyboardExecute\nThe raw DEC usage code 116.\ncase keyboardFind\nThe raw DEC usage code 126.\ncase keyboardGraveAccentAndTilde\nThe raw DEC usage code 53.\ncase keyboardHelp\nThe raw DEC usage code 117.\ncase keyboardLeftGUI\nThe raw DEC usage code 227.\ncase keyboardMenu\nThe raw DEC usage code 118.\ncase keyboardOper\nThe raw DEC usage code 161.\ncase keyboardOut\nThe raw DEC usage code 160.\ncase keyboardPOSTFail\nThe raw DEC usage code 2.\ncase keyboardPaste\nThe raw DEC usage code 125.\ncase keyboardPower\nThe raw DEC usage code 102.\ncase keyboardPrintScreen\nThe raw DEC usage code 70.\ncase keyboardPrior\nThe raw DEC usage code 157.\ncase keyboardReturnOrEnter\nThe raw DEC usage code 40.\ncase keyboardRightGUI\nThe raw DEC usage code 231.\ncase keyboardSelect\nThe raw DEC usage code 119.\ncase keyboardSysReqOrAttention\nThe raw DEC usage code 154.\ncase keyboardUndo\nThe raw DEC usage code 122."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardPrior | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardprior",
    "html": "See Also\nOther keys\ncase keyboardAgain\nThe raw DEC usage code 121.\ncase keyboardAlternateErase\nThe raw DEC usage code 153.\ncase keyboardApplication\nThe raw DEC usage code 101.\ncase keyboardCancel\nThe raw DEC usage code 155.\ncase keyboardClear\nThe raw DEC usage code 156.\ncase keyboardClearOrAgain\nThe raw DEC usage code 162.\ncase keyboardCopy\nThe raw DEC usage code 124.\ncase keyboardCrSelOrProps\nThe raw DEC usage code 163.\ncase keyboardCut\nThe raw DEC usage code 129.\ncase keyboardExSel\nThe raw DEC usage code 164.\ncase keyboardExecute\nThe raw DEC usage code 116.\ncase keyboardFind\nThe raw DEC usage code 126.\ncase keyboardGraveAccentAndTilde\nThe raw DEC usage code 53.\ncase keyboardHelp\nThe raw DEC usage code 117.\ncase keyboardLeftGUI\nThe raw DEC usage code 227.\ncase keyboardMenu\nThe raw DEC usage code 118.\ncase keyboardOper\nThe raw DEC usage code 161.\ncase keyboardOut\nThe raw DEC usage code 160.\ncase keyboardPOSTFail\nThe raw DEC usage code 2.\ncase keyboardPaste\nThe raw DEC usage code 125.\ncase keyboardPower\nThe raw DEC usage code 102.\ncase keyboardPrintScreen\nThe raw DEC usage code 70.\ncase keyboardReturnOrEnter\nThe raw DEC usage code 40.\ncase keyboardRightGUI\nThe raw DEC usage code 231.\ncase keyboardSelect\nThe raw DEC usage code 119.\ncase keyboardSysReqOrAttention\nThe raw DEC usage code 154.\ncase keyboardUndo\nThe raw DEC usage code 122.\ncase keyboard_Reserved\nThe raw DEC usage code 65535."
  },
  {
    "title": "activationMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimutableusernotificationaction/1615372-activationmode",
    "html": "Discussion\n\nIf the value in this property is UIMutableUserNotificationAction, the value of the isAuthenticationRequired property is assumed to be true regardless of its actual value.\n\nSee Also\nConfiguring the action’s behavior\nvar isAuthenticationRequired: Bool\nA Boolean value indicating whether the user must unlock the device before the action is performed.\nDeprecated\nvar isDestructive: Bool\nA Boolean value indicating whether the action is destructive.\nDeprecated\nvar behavior: UIUserNotificationActionBehavior\nThe custom behavior (if any) that the action supports.\nDeprecated\nvar parameters: [AnyHashable : Any]\nA dictionary of additional parameters to include with the action.\nDeprecated"
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactionsheet/1622878-delegate",
    "html": "Discussion\n\nFor a list of methods your delegate object can implement, see UIActionSheetDelegate.\n\nSee Also\nSetting properties\nvar title: String\nThe string that appears in the receiver’s title bar.\nDeprecated\nvar isVisible: Bool\nA Boolean value that indicates whether the receiver is displayed.\nDeprecated\nvar actionSheetStyle: UIActionSheetStyle\nThe receiver’s presentation style.\nDeprecated"
  },
  {
    "title": "title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimutableusernotificationaction/1615370-title",
    "html": "See Also\nGetting the action information\nvar identifier: String?\nThe string that you use internally to identify the action.\nDeprecated"
  },
  {
    "title": "actionSheetCancel(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactionsheetdelegate/1622867-actionsheetcancel",
    "html": "Parameters\nactionSheet\n\nThe action sheet that will be canceled.\n\nDiscussion\n\nIf the action sheet’s delegate does not implement this method, clicking the cancel button is simulated and the action sheet is dismissed. Implement this method if you need to perform some actions before an action sheet is canceled. An action sheet can be canceled at any time by the system—for example, when the user taps the Home button. The actionSheet(_:willDismissWithButtonIndex:) and actionSheet(_:didDismissWithButtonIndex:) methods are invoked after this method."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardSysReqOrAttention | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardsysreqorattention",
    "html": "See Also\nOther keys\ncase keyboardAgain\nThe raw DEC usage code 121.\ncase keyboardAlternateErase\nThe raw DEC usage code 153.\ncase keyboardApplication\nThe raw DEC usage code 101.\ncase keyboardCancel\nThe raw DEC usage code 155.\ncase keyboardClear\nThe raw DEC usage code 156.\ncase keyboardClearOrAgain\nThe raw DEC usage code 162.\ncase keyboardCopy\nThe raw DEC usage code 124.\ncase keyboardCrSelOrProps\nThe raw DEC usage code 163.\ncase keyboardCut\nThe raw DEC usage code 129.\ncase keyboardExSel\nThe raw DEC usage code 164.\ncase keyboardExecute\nThe raw DEC usage code 116.\ncase keyboardFind\nThe raw DEC usage code 126.\ncase keyboardGraveAccentAndTilde\nThe raw DEC usage code 53.\ncase keyboardHelp\nThe raw DEC usage code 117.\ncase keyboardLeftGUI\nThe raw DEC usage code 227.\ncase keyboardMenu\nThe raw DEC usage code 118.\ncase keyboardOper\nThe raw DEC usage code 161.\ncase keyboardOut\nThe raw DEC usage code 160.\ncase keyboardPOSTFail\nThe raw DEC usage code 2.\ncase keyboardPaste\nThe raw DEC usage code 125.\ncase keyboardPower\nThe raw DEC usage code 102.\ncase keyboardPrintScreen\nThe raw DEC usage code 70.\ncase keyboardPrior\nThe raw DEC usage code 157.\ncase keyboardReturnOrEnter\nThe raw DEC usage code 40.\ncase keyboardRightGUI\nThe raw DEC usage code 231.\ncase keyboardSelect\nThe raw DEC usage code 119.\ncase keyboardUndo\nThe raw DEC usage code 122.\ncase keyboard_Reserved\nThe raw DEC usage code 65535."
  },
  {
    "title": "isAuthenticationRequired | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimutableusernotificationaction/1615389-isauthenticationrequired",
    "html": "Discussion\n\nThe value of this property is ignored and treated as a value of true when the value of the activationMode property is set to UIMutableUserNotificationAction.\n\nIf your app uses data protection to encrypt data on disk, consider the data needs of the corresponding action before setting this property to false. For many data protection classes, data remains encrypted and unavailable while the device is locked. If your app needs to access encrypted data to perform a task, you likely need to set this property to true to ensure that the data is accessible.\n\nSee Also\nConfiguring the action’s behavior\nvar activationMode: UIUserNotificationActivationMode\nThe mode in which to run the app when the action is performed.\nDeprecated\nvar isDestructive: Bool\nA Boolean value indicating whether the action is destructive.\nDeprecated\nvar behavior: UIUserNotificationActionBehavior\nThe custom behavior (if any) that the action supports.\nDeprecated\nvar parameters: [AnyHashable : Any]\nA dictionary of additional parameters to include with the action.\nDeprecated"
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardReturnOrEnter | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardreturnorenter",
    "html": "See Also\nOther keys\ncase keyboardAgain\nThe raw DEC usage code 121.\ncase keyboardAlternateErase\nThe raw DEC usage code 153.\ncase keyboardApplication\nThe raw DEC usage code 101.\ncase keyboardCancel\nThe raw DEC usage code 155.\ncase keyboardClear\nThe raw DEC usage code 156.\ncase keyboardClearOrAgain\nThe raw DEC usage code 162.\ncase keyboardCopy\nThe raw DEC usage code 124.\ncase keyboardCrSelOrProps\nThe raw DEC usage code 163.\ncase keyboardCut\nThe raw DEC usage code 129.\ncase keyboardExSel\nThe raw DEC usage code 164.\ncase keyboardExecute\nThe raw DEC usage code 116.\ncase keyboardFind\nThe raw DEC usage code 126.\ncase keyboardGraveAccentAndTilde\nThe raw DEC usage code 53.\ncase keyboardHelp\nThe raw DEC usage code 117.\ncase keyboardLeftGUI\nThe raw DEC usage code 227.\ncase keyboardMenu\nThe raw DEC usage code 118.\ncase keyboardOper\nThe raw DEC usage code 161.\ncase keyboardOut\nThe raw DEC usage code 160.\ncase keyboardPOSTFail\nThe raw DEC usage code 2.\ncase keyboardPaste\nThe raw DEC usage code 125.\ncase keyboardPower\nThe raw DEC usage code 102.\ncase keyboardPrintScreen\nThe raw DEC usage code 70.\ncase keyboardPrior\nThe raw DEC usage code 157.\ncase keyboardRightGUI\nThe raw DEC usage code 231.\ncase keyboardSelect\nThe raw DEC usage code 119.\ncase keyboardSysReqOrAttention\nThe raw DEC usage code 154.\ncase keyboardUndo\nThe raw DEC usage code 122.\ncase keyboard_Reserved\nThe raw DEC usage code 65535."
  },
  {
    "title": "isDestructive | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimutableusernotificationaction/1615322-isdestructive",
    "html": "Discussion\n\nUse this property to signal to the user whether the action causes destructive behavior to the user’s data or the app. When the value of this property is true, the system displays the corresponding button differently to indicate that the action is destructive.\n\nThe default value of this property is false.\n\nSee Also\nConfiguring the action’s behavior\nvar activationMode: UIUserNotificationActivationMode\nThe mode in which to run the app when the action is performed.\nDeprecated\nvar isAuthenticationRequired: Bool\nA Boolean value indicating whether the user must unlock the device before the action is performed.\nDeprecated\nvar behavior: UIUserNotificationActionBehavior\nThe custom behavior (if any) that the action supports.\nDeprecated\nvar parameters: [AnyHashable : Any]\nA dictionary of additional parameters to include with the action.\nDeprecated"
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardOut | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardout",
    "html": "See Also\nOther keys\ncase keyboardAgain\nThe raw DEC usage code 121.\ncase keyboardAlternateErase\nThe raw DEC usage code 153.\ncase keyboardApplication\nThe raw DEC usage code 101.\ncase keyboardCancel\nThe raw DEC usage code 155.\ncase keyboardClear\nThe raw DEC usage code 156.\ncase keyboardClearOrAgain\nThe raw DEC usage code 162.\ncase keyboardCopy\nThe raw DEC usage code 124.\ncase keyboardCrSelOrProps\nThe raw DEC usage code 163.\ncase keyboardCut\nThe raw DEC usage code 129.\ncase keyboardExSel\nThe raw DEC usage code 164.\ncase keyboardExecute\nThe raw DEC usage code 116.\ncase keyboardFind\nThe raw DEC usage code 126.\ncase keyboardGraveAccentAndTilde\nThe raw DEC usage code 53.\ncase keyboardHelp\nThe raw DEC usage code 117.\ncase keyboardLeftGUI\nThe raw DEC usage code 227.\ncase keyboardMenu\nThe raw DEC usage code 118.\ncase keyboardOper\nThe raw DEC usage code 161.\ncase keyboardPOSTFail\nThe raw DEC usage code 2.\ncase keyboardPaste\nThe raw DEC usage code 125.\ncase keyboardPower\nThe raw DEC usage code 102.\ncase keyboardPrintScreen\nThe raw DEC usage code 70.\ncase keyboardPrior\nThe raw DEC usage code 157.\ncase keyboardReturnOrEnter\nThe raw DEC usage code 40.\ncase keyboardRightGUI\nThe raw DEC usage code 231.\ncase keyboardSelect\nThe raw DEC usage code 119.\ncase keyboardSysReqOrAttention\nThe raw DEC usage code 154.\ncase keyboardUndo\nThe raw DEC usage code 122.\ncase keyboard_Reserved\nThe raw DEC usage code 65535."
  },
  {
    "title": "behavior | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimutableusernotificationaction/1615395-behavior",
    "html": "Discussion\n\nThe default value of this property is UIUserNotificationActionBehaviorDefault.\n\nSee Also\nConfiguring the action’s behavior\nvar activationMode: UIUserNotificationActivationMode\nThe mode in which to run the app when the action is performed.\nDeprecated\nvar isAuthenticationRequired: Bool\nA Boolean value indicating whether the user must unlock the device before the action is performed.\nDeprecated\nvar isDestructive: Bool\nA Boolean value indicating whether the action is destructive.\nDeprecated\nvar parameters: [AnyHashable : Any]\nA dictionary of additional parameters to include with the action.\nDeprecated"
  },
  {
    "title": "alertView(_:didDismissWithButtonIndex:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uialertviewdelegate/1620772-alertview",
    "html": "Parameters\nalertView\n\nThe alert view that was dismissed.\n\nbuttonIndex\n\nThe index of the button that was clicked. The button indices start at 0. If this is the cancel button index, the alert view is canceling. If -1, the cancel button index is not set.\n\nDiscussion\n\nThis method is invoked after the animation ends and the view is hidden.\n\nSee Also\nCustomizing behavior\nfunc alertViewShouldEnableFirstOtherButton(UIAlertView) -> Bool\nSent to the delegate to determine whether the first non-cancel button in the alert should be enabled.\nDeprecated\nfunc willPresent(UIAlertView)\nSent to the delegate before a model view is presented to the user.\nDeprecated\nfunc didPresent(UIAlertView)\nSent to the delegate after an alert view is presented to the user.\nDeprecated\nfunc alertView(UIAlertView, willDismissWithButtonIndex: Int)\nSent to the delegate before an alert view is dismissed.\nDeprecated"
  },
  {
    "title": "didPresent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uialertviewdelegate/1620750-didpresent",
    "html": "Parameters\nalertView\n\nThe alert view that was displayed.\n\nSee Also\nCustomizing behavior\nfunc alertViewShouldEnableFirstOtherButton(UIAlertView) -> Bool\nSent to the delegate to determine whether the first non-cancel button in the alert should be enabled.\nDeprecated\nfunc willPresent(UIAlertView)\nSent to the delegate before a model view is presented to the user.\nDeprecated\nfunc alertView(UIAlertView, willDismissWithButtonIndex: Int)\nSent to the delegate before an alert view is dismissed.\nDeprecated\nfunc alertView(UIAlertView, didDismissWithButtonIndex: Int)\nSent to the delegate after an alert view is dismissed from the screen.\nDeprecated"
  },
  {
    "title": "alertViewShouldEnableFirstOtherButton(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uialertviewdelegate/1620774-alertviewshouldenablefirstotherb",
    "html": "Parameters\nalertView\n\nThe alert view that is being configured.\n\nReturn Value\n\ntrue if the button should be enabled, no if the button should be disabled.\n\nSee Also\nCustomizing behavior\nfunc willPresent(UIAlertView)\nSent to the delegate before a model view is presented to the user.\nDeprecated\nfunc didPresent(UIAlertView)\nSent to the delegate after an alert view is presented to the user.\nDeprecated\nfunc alertView(UIAlertView, willDismissWithButtonIndex: Int)\nSent to the delegate before an alert view is dismissed.\nDeprecated\nfunc alertView(UIAlertView, didDismissWithButtonIndex: Int)\nSent to the delegate after an alert view is dismissed from the screen.\nDeprecated"
  },
  {
    "title": "willPresent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactionsheetdelegate/1622865-willpresent",
    "html": "Parameters\nactionSheet\n\nThe action sheet that is about to be displayed.\n\nSee Also\nCustomizing behavior\nfunc didPresent(UIActionSheet)\nSent to the delegate after an action sheet is presented to the user.\nDeprecated\nfunc actionSheet(UIActionSheet, willDismissWithButtonIndex: Int)\nSent to the delegate before an action sheet is dismissed.\nDeprecated\nfunc actionSheet(UIActionSheet, didDismissWithButtonIndex: Int)\nSent to the delegate after an action sheet is dismissed from the screen.\nDeprecated"
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardPaste | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardpaste",
    "html": "See Also\nOther keys\ncase keyboardAgain\nThe raw DEC usage code 121.\ncase keyboardAlternateErase\nThe raw DEC usage code 153.\ncase keyboardApplication\nThe raw DEC usage code 101.\ncase keyboardCancel\nThe raw DEC usage code 155.\ncase keyboardClear\nThe raw DEC usage code 156.\ncase keyboardClearOrAgain\nThe raw DEC usage code 162.\ncase keyboardCopy\nThe raw DEC usage code 124.\ncase keyboardCrSelOrProps\nThe raw DEC usage code 163.\ncase keyboardCut\nThe raw DEC usage code 129.\ncase keyboardExSel\nThe raw DEC usage code 164.\ncase keyboardExecute\nThe raw DEC usage code 116.\ncase keyboardFind\nThe raw DEC usage code 126.\ncase keyboardGraveAccentAndTilde\nThe raw DEC usage code 53.\ncase keyboardHelp\nThe raw DEC usage code 117.\ncase keyboardLeftGUI\nThe raw DEC usage code 227.\ncase keyboardMenu\nThe raw DEC usage code 118.\ncase keyboardOper\nThe raw DEC usage code 161.\ncase keyboardOut\nThe raw DEC usage code 160.\ncase keyboardPOSTFail\nThe raw DEC usage code 2.\ncase keyboardPower\nThe raw DEC usage code 102.\ncase keyboardPrintScreen\nThe raw DEC usage code 70.\ncase keyboardPrior\nThe raw DEC usage code 157.\ncase keyboardReturnOrEnter\nThe raw DEC usage code 40.\ncase keyboardRightGUI\nThe raw DEC usage code 231.\ncase keyboardSelect\nThe raw DEC usage code 119.\ncase keyboardSysReqOrAttention\nThe raw DEC usage code 154.\ncase keyboardUndo\nThe raw DEC usage code 122.\ncase keyboard_Reserved\nThe raw DEC usage code 65535."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardLeftGUI | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardleftgui",
    "html": "See Also\nOther keys\ncase keyboardAgain\nThe raw DEC usage code 121.\ncase keyboardAlternateErase\nThe raw DEC usage code 153.\ncase keyboardApplication\nThe raw DEC usage code 101.\ncase keyboardCancel\nThe raw DEC usage code 155.\ncase keyboardClear\nThe raw DEC usage code 156.\ncase keyboardClearOrAgain\nThe raw DEC usage code 162.\ncase keyboardCopy\nThe raw DEC usage code 124.\ncase keyboardCrSelOrProps\nThe raw DEC usage code 163.\ncase keyboardCut\nThe raw DEC usage code 129.\ncase keyboardExSel\nThe raw DEC usage code 164.\ncase keyboardExecute\nThe raw DEC usage code 116.\ncase keyboardFind\nThe raw DEC usage code 126.\ncase keyboardGraveAccentAndTilde\nThe raw DEC usage code 53.\ncase keyboardHelp\nThe raw DEC usage code 117.\ncase keyboardMenu\nThe raw DEC usage code 118.\ncase keyboardOper\nThe raw DEC usage code 161.\ncase keyboardOut\nThe raw DEC usage code 160.\ncase keyboardPOSTFail\nThe raw DEC usage code 2.\ncase keyboardPaste\nThe raw DEC usage code 125.\ncase keyboardPower\nThe raw DEC usage code 102.\ncase keyboardPrintScreen\nThe raw DEC usage code 70.\ncase keyboardPrior\nThe raw DEC usage code 157.\ncase keyboardReturnOrEnter\nThe raw DEC usage code 40.\ncase keyboardRightGUI\nThe raw DEC usage code 231.\ncase keyboardSelect\nThe raw DEC usage code 119.\ncase keyboardSysReqOrAttention\nThe raw DEC usage code 154.\ncase keyboardUndo\nThe raw DEC usage code 122.\ncase keyboard_Reserved\nThe raw DEC usage code 65535."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardCrSelOrProps | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardcrselorprops",
    "html": "See Also\nOther keys\ncase keyboardAgain\nThe raw DEC usage code 121.\ncase keyboardAlternateErase\nThe raw DEC usage code 153.\ncase keyboardApplication\nThe raw DEC usage code 101.\ncase keyboardCancel\nThe raw DEC usage code 155.\ncase keyboardClear\nThe raw DEC usage code 156.\ncase keyboardClearOrAgain\nThe raw DEC usage code 162.\ncase keyboardCopy\nThe raw DEC usage code 124.\ncase keyboardCut\nThe raw DEC usage code 129.\ncase keyboardExSel\nThe raw DEC usage code 164.\ncase keyboardExecute\nThe raw DEC usage code 116.\ncase keyboardFind\nThe raw DEC usage code 126.\ncase keyboardGraveAccentAndTilde\nThe raw DEC usage code 53.\ncase keyboardHelp\nThe raw DEC usage code 117.\ncase keyboardLeftGUI\nThe raw DEC usage code 227.\ncase keyboardMenu\nThe raw DEC usage code 118.\ncase keyboardOper\nThe raw DEC usage code 161.\ncase keyboardOut\nThe raw DEC usage code 160.\ncase keyboardPOSTFail\nThe raw DEC usage code 2.\ncase keyboardPaste\nThe raw DEC usage code 125.\ncase keyboardPower\nThe raw DEC usage code 102.\ncase keyboardPrintScreen\nThe raw DEC usage code 70.\ncase keyboardPrior\nThe raw DEC usage code 157.\ncase keyboardReturnOrEnter\nThe raw DEC usage code 40.\ncase keyboardRightGUI\nThe raw DEC usage code 231.\ncase keyboardSelect\nThe raw DEC usage code 119.\ncase keyboardSysReqOrAttention\nThe raw DEC usage code 154.\ncase keyboardUndo\nThe raw DEC usage code 122.\ncase keyboard_Reserved\nThe raw DEC usage code 65535."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardCut | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardcut",
    "html": "See Also\nOther keys\ncase keyboardAgain\nThe raw DEC usage code 121.\ncase keyboardAlternateErase\nThe raw DEC usage code 153.\ncase keyboardApplication\nThe raw DEC usage code 101.\ncase keyboardCancel\nThe raw DEC usage code 155.\ncase keyboardClear\nThe raw DEC usage code 156.\ncase keyboardClearOrAgain\nThe raw DEC usage code 162.\ncase keyboardCopy\nThe raw DEC usage code 124.\ncase keyboardCrSelOrProps\nThe raw DEC usage code 163.\ncase keyboardExSel\nThe raw DEC usage code 164.\ncase keyboardExecute\nThe raw DEC usage code 116.\ncase keyboardFind\nThe raw DEC usage code 126.\ncase keyboardGraveAccentAndTilde\nThe raw DEC usage code 53.\ncase keyboardHelp\nThe raw DEC usage code 117.\ncase keyboardLeftGUI\nThe raw DEC usage code 227.\ncase keyboardMenu\nThe raw DEC usage code 118.\ncase keyboardOper\nThe raw DEC usage code 161.\ncase keyboardOut\nThe raw DEC usage code 160.\ncase keyboardPOSTFail\nThe raw DEC usage code 2.\ncase keyboardPaste\nThe raw DEC usage code 125.\ncase keyboardPower\nThe raw DEC usage code 102.\ncase keyboardPrintScreen\nThe raw DEC usage code 70.\ncase keyboardPrior\nThe raw DEC usage code 157.\ncase keyboardReturnOrEnter\nThe raw DEC usage code 40.\ncase keyboardRightGUI\nThe raw DEC usage code 231.\ncase keyboardSelect\nThe raw DEC usage code 119.\ncase keyboardSysReqOrAttention\nThe raw DEC usage code 154.\ncase keyboardUndo\nThe raw DEC usage code 122.\ncase keyboard_Reserved\nThe raw DEC usage code 65535."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardPOSTFail | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardpostfail",
    "html": "See Also\nOther keys\ncase keyboardAgain\nThe raw DEC usage code 121.\ncase keyboardAlternateErase\nThe raw DEC usage code 153.\ncase keyboardApplication\nThe raw DEC usage code 101.\ncase keyboardCancel\nThe raw DEC usage code 155.\ncase keyboardClear\nThe raw DEC usage code 156.\ncase keyboardClearOrAgain\nThe raw DEC usage code 162.\ncase keyboardCopy\nThe raw DEC usage code 124.\ncase keyboardCrSelOrProps\nThe raw DEC usage code 163.\ncase keyboardCut\nThe raw DEC usage code 129.\ncase keyboardExSel\nThe raw DEC usage code 164.\ncase keyboardExecute\nThe raw DEC usage code 116.\ncase keyboardFind\nThe raw DEC usage code 126.\ncase keyboardGraveAccentAndTilde\nThe raw DEC usage code 53.\ncase keyboardHelp\nThe raw DEC usage code 117.\ncase keyboardLeftGUI\nThe raw DEC usage code 227.\ncase keyboardMenu\nThe raw DEC usage code 118.\ncase keyboardOper\nThe raw DEC usage code 161.\ncase keyboardOut\nThe raw DEC usage code 160.\ncase keyboardPaste\nThe raw DEC usage code 125.\ncase keyboardPower\nThe raw DEC usage code 102.\ncase keyboardPrintScreen\nThe raw DEC usage code 70.\ncase keyboardPrior\nThe raw DEC usage code 157.\ncase keyboardReturnOrEnter\nThe raw DEC usage code 40.\ncase keyboardRightGUI\nThe raw DEC usage code 231.\ncase keyboardSelect\nThe raw DEC usage code 119.\ncase keyboardSysReqOrAttention\nThe raw DEC usage code 154.\ncase keyboardUndo\nThe raw DEC usage code 122.\ncase keyboard_Reserved\nThe raw DEC usage code 65535."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardF6 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardf6",
    "html": "See Also\nFunction keys\ncase keyboardF1\nThe raw DEC usage code 58.\ncase keyboardF2\nThe raw DEC usage code 59.\ncase keyboardF3\nThe raw DEC usage code 60.\ncase keyboardF4\nThe raw DEC usage code 61.\ncase keyboardF5\nThe raw DEC usage code 62.\ncase keyboardF7\nThe raw DEC usage code 64.\ncase keyboardF8\nThe raw DEC usage code 65.\ncase keyboardF9\nThe raw DEC usage code 66.\ncase keyboardF10\nThe raw DEC usage code 67.\ncase keyboardF11\nThe raw DEC usage code 68.\ncase keyboardF12\nThe raw DEC usage code 69.\ncase keyboardF13\nThe raw DEC usage code 104.\ncase keyboardF14\nThe raw DEC usage code 105.\ncase keyboardF15\nThe raw DEC usage code 106.\ncase keyboardF16\nThe raw DEC usage code 107.\ncase keyboardF17\nThe raw DEC usage code 108.\ncase keyboardF18\nThe raw DEC usage code 109.\ncase keyboardF19\nThe raw DEC usage code 110.\ncase keyboardF20\nThe raw DEC usage code 111.\ncase keyboardF21\nThe raw DEC usage code 112.\ncase keyboardF22\nThe raw DEC usage code 113.\ncase keyboardF23\nThe raw DEC usage code 114.\ncase keyboardF24\nThe raw DEC usage code 115."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardF5 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardf5",
    "html": "See Also\nFunction keys\ncase keyboardF1\nThe raw DEC usage code 58.\ncase keyboardF2\nThe raw DEC usage code 59.\ncase keyboardF3\nThe raw DEC usage code 60.\ncase keyboardF4\nThe raw DEC usage code 61.\ncase keyboardF6\nThe raw DEC usage code 63.\ncase keyboardF7\nThe raw DEC usage code 64.\ncase keyboardF8\nThe raw DEC usage code 65.\ncase keyboardF9\nThe raw DEC usage code 66.\ncase keyboardF10\nThe raw DEC usage code 67.\ncase keyboardF11\nThe raw DEC usage code 68.\ncase keyboardF12\nThe raw DEC usage code 69.\ncase keyboardF13\nThe raw DEC usage code 104.\ncase keyboardF14\nThe raw DEC usage code 105.\ncase keyboardF15\nThe raw DEC usage code 106.\ncase keyboardF16\nThe raw DEC usage code 107.\ncase keyboardF17\nThe raw DEC usage code 108.\ncase keyboardF18\nThe raw DEC usage code 109.\ncase keyboardF19\nThe raw DEC usage code 110.\ncase keyboardF20\nThe raw DEC usage code 111.\ncase keyboardF21\nThe raw DEC usage code 112.\ncase keyboardF22\nThe raw DEC usage code 113.\ncase keyboardF23\nThe raw DEC usage code 114.\ncase keyboardF24\nThe raw DEC usage code 115."
  },
  {
    "title": "UIPreviewAction.Style | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipreviewaction/style",
    "html": "Overview\n\nUse these styles with instances of the UIPreviewAction and UIPreviewActionGroup classes.\n\nTopics\nConstants\ncase `default`\nThe default style.\ncase selected\nThe style for a selected peek quick action.\ncase destructive\nThe style for a peek quick action that changes or deletes data.\nRelationships\nConforms To\nSendable\nSee Also\nCreating a peek quick action\ninit(title: String, style: UIPreviewAction.Style, handler: (UIPreviewAction, UIViewController) -> Void)\nCreates a peek quick action using a specified title, style, and handler.\nDeprecated\nvar handler: (UIPreviewActionItem, UIViewController) -> Void\nThe block called when the peek quick action is selected by the user.\nDeprecated"
  },
  {
    "title": "init(title:style:handler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipreviewaction/1621445-init",
    "html": "Parameters\ntitle\n\nThe quick action’s title.\n\nstyle\n\nThe quick action’s style. For a complete list of styles, see the UIPreviewActionStyle enumeration in UIPreviewActionItem Protocol Reference.\n\nhandler\n\nA block that is called when the user selects the peek quick action. The block takes the following parameters:\n\naction\n\nThe peek quick action selected by the user.\n\npreviewViewController\n\nThe view controller displayed as the peek.\n\nReturn Value\n\nA newly-created peek quick action.\n\nSee Also\nCreating a peek quick action\nvar handler: (UIPreviewActionItem, UIViewController) -> Void\nThe block called when the peek quick action is selected by the user.\nDeprecated\nenum UIPreviewAction.Style\nThe style for a peek quick action.\nDeprecated"
  },
  {
    "title": "application(_:didReceive:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622930-application",
    "html": "Deprecated\n\nUse userNotificationCenter(_:willPresent:withCompletionHandler:) instead.\n\nParameters\napplication\n\nThe app object that received the local notification.\n\nnotification\n\nA local notification that encapsulates details about the notification, potentially including custom data.\n\nDiscussion\n\nLocal notifications are similar to remote notifications, but differ in that they are scheduled, displayed, and received entirely on the same device. An app can create and schedule a local notification, and the operating system then delivers it at the scheduled date and time. If the app is not active in the foreground when the notification fires, the system uses the information in the UILocalNotification object to determine whether it should display an alert, badge the app icon, or play a sound. If the app is running in the foreground, the system calls this method directly without alerting the user in any way.\n\nYou might implement this method in your delegate if you want to be notified that a local notification occurred. For example, a calendar app might use local notifications to alert the user to upcoming events.\n\nIf the user chooses to open the app when a local notification occurs, the launch options dictionary passed to the application(_:willFinishLaunchingWithOptions:) and application(_:didFinishLaunchingWithOptions:) methods contains the localNotification key. This method is called at some point after your delegate’s application(_:didFinishLaunchingWithOptions:) method.\n\nSee Also\nDeprecated\nfunc application(UIApplication, didRegister: UIUserNotificationSettings)\nCalled to tell the delegate the types of local and remote notifications that can be used to get the user’s attention.\nDeprecated\nfunc application(UIApplication, didReceiveRemoteNotification: [AnyHashable : Any])\nCalled when your app has received a remote notification.\nDeprecated\nfunc application(UIApplication, handleActionWithIdentifier: String?, for: UILocalNotification, completionHandler: () -> Void)\nCalled when your app has been activated because user selected a custom action from the alert panel of a local notification.\nDeprecated\nfunc application(UIApplication, handleActionWithIdentifier: String?, for: UILocalNotification, withResponseInfo: [AnyHashable : Any], completionHandler: () -> Void)\nCalled when your app has been activated by the user selecting an action from a local notification.\nDeprecated\nfunc application(UIApplication, handleActionWithIdentifier: String?, forRemoteNotification: [AnyHashable : Any], completionHandler: () -> Void)\nTells the app delegate to perform the custom action specified by a remote notification.\nDeprecated\nfunc application(UIApplication, handleActionWithIdentifier: String?, forRemoteNotification: [AnyHashable : Any], withResponseInfo: [AnyHashable : Any], completionHandler: () -> Void)\nCalled when your app has been activated by the user selecting an action from a remote notification.\nDeprecated\nfunc application(UIApplication, handleOpen: URL) -> Bool\nAsks the delegate to open a resource identified by URL.\nDeprecated\nfunc application(UIApplication, open: URL, sourceApplication: String?, annotation: Any) -> Bool\nAsks the delegate to open a resource identified by a URL.\nDeprecated\nfunc application(UIApplication, willChangeStatusBarOrientation: UIInterfaceOrientation, duration: TimeInterval)\nTells the delegate when the interface orientation of the status bar is about to change.\nDeprecated\nfunc application(UIApplication, didChangeStatusBarOrientation: UIInterfaceOrientation)\nTells the delegate when the interface orientation of the status bar has changed.\nDeprecated\nfunc application(UIApplication, willChangeStatusBarFrame: CGRect)\nTells the delegate when the frame of the status bar is about to change.\nDeprecated\nfunc application(UIApplication, didChangeStatusBarFrame: CGRect)\nTells the delegate when the frame of the status bar has changed.\nDeprecated\nfunc application(UIApplication, handle: INIntent, completionHandler: (INIntentResponse) -> Void)\nAsks the delegate to handle the specified SiriKit intent directly.\nDeprecated\nfunc application(UIApplication, performFetchWithCompletionHandler: (UIBackgroundFetchResult) -> Void)\nTells the app that it can begin a fetch operation if it has data to download.\nDeprecated\nfunc application(UIApplication, shouldSaveApplicationState: NSCoder) -> Bool\nAsks the delegate whether to preserve the app’s state.\nDeprecated\nfunc application(UIApplication, shouldRestoreApplicationState: NSCoder) -> Bool\nAsks the delegate whether to restore the app’s saved state.\nDeprecated"
  },
  {
    "title": "dismiss(animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipopovercontroller/1624662-dismiss",
    "html": "Parameters\nanimated\n\nSpecify true to animate the dismissal of the popover or false to dismiss it immediately.\n\nDiscussion\n\nYou can use this method to dismiss the popover programmatically in response to taps inside the popover window. Taps outside of the popover’s contents automatically dismiss the popover.\n\nSee Also\nPresenting and dismissing the popover\nfunc present(from: CGRect, in: UIView, permittedArrowDirections: UIPopoverArrowDirection, animated: Bool)\nDisplays the popover and anchors it to the specified location in the view.\nDeprecated\nfunc present(from: UIBarButtonItem, permittedArrowDirections: UIPopoverArrowDirection, animated: Bool)\nDisplays the popover and anchors it to the specified bar button item.\nDeprecated"
  },
  {
    "title": "searchContentsController | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchdisplaycontroller/1620393-searchcontentscontroller",
    "html": "Discussion\n\nThis is typically an instance of UITableViewController.\n\nSee Also\nConfiguring a search bar\nvar delegate: UISearchDisplayDelegate?\nThe controller’s delegate.\nDeprecated\nvar searchBar: UISearchBar\nThe search bar.\nDeprecated\nvar searchResultsTableView: UITableView\nThe table view in which the search results are displayed.\nDeprecated\nvar searchResultsDataSource: UITableViewDataSource?\nThe data source for the table view in which the search results are displayed.\nDeprecated\nvar searchResultsDelegate: UITableViewDelegate?\nThe delegate for the table view in which the search results are displayed.\nDeprecated\nvar searchResultsTitle: String?\nThe title for the search results view.\nDeprecated\nvar displaysSearchBarInNavigationBar: Bool\nSpecifies that the navigation bar contains a search bar.\nDeprecated\nvar navigationItem: UINavigationItem?\nRepresents the search display controller in a navigation controller’s navigation bar.\nDeprecated"
  },
  {
    "title": "alertBody | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilocalnotification/1616646-alertbody",
    "html": "Discussion\n\nAssign a string or, preferably, a localized-string key (using NSLocalizedString) as the value of the message. If the value of this property is non-nil, an alert is displayed. The default value is nil (no alert). Printf style escape characters are stripped from the string prior to display; to include a percent symbol (%) in the message, use two percent symbols (%%).\n\nSee Also\nComposing the alert\nvar alertAction: String?\nThe title of the action button or slider.\nDeprecated\nvar alertTitle: String?\nA short description of the reason for the alert.\nDeprecated\nvar hasAction: Bool\nA Boolean value that controls whether the notification shows or hides the alert action.\nDeprecated\nvar alertLaunchImage: String?\nIdentifies the image used as the launch image when the user taps (or slides) the action button (or slider).\nDeprecated\nvar category: String?\nThe name of a group of actions to display in the alert.\nDeprecated"
  },
  {
    "title": "applicationIconBadgeNumber | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/1622918-applicationiconbadgenumber",
    "html": "Deprecated\n\nUse setBadgeCount(_:withCompletionHandler:) instead.\n\nDiscussion\n\nSet to 0 (zero) to hide the badge number. The default value of this property is 0.\n\nSee Also\nDeprecated properties\nclass let statusBarFrameUserInfoKey: String\nA key whose value is an NSValue object that encapsulates a CGRect structure expressing the location and size of the new status bar frame. This key is used with didChangeStatusBarFrameNotification and willChangeStatusBarFrameNotification notifications.\nDeprecated\nclass let statusBarOrientationUserInfoKey: String\nA key whose value is an NSNumber object that encapsulates a UIInterfaceOrientation value indicating the current orientation (see UIInterfaceOrientation). This key is used with didChangeStatusBarOrientationNotification and willChangeStatusBarOrientationNotification notifications.\nDeprecated\nvar currentUserNotificationSettings: UIUserNotificationSettings?\nReturns the user notification settings for the app.\nDeprecated\nvar isIgnoringInteractionEvents: Bool\nA Boolean value that indicates whether the receiver is ignoring events initiated by touches on the screen.\nDeprecated\nvar isNetworkActivityIndicatorVisible: Bool\nA Boolean value that turns an indicator of network activity on or off.\nDeprecated\nvar isStatusBarHidden: Bool\nA Boolean value that determines whether the status bar is hidden.\nDeprecated\nvar keyWindow: UIWindow?\nThe app's key window.\nDeprecated\nvar scheduledLocalNotifications: [UILocalNotification]?\nAll currently scheduled local notifications.\nDeprecated\nvar statusBarFrame: CGRect\nThe frame rectangle defining the area of the status bar.\nDeprecated\nvar statusBarOrientation: UIInterfaceOrientation\nThe current orientation of the app’s status bar.\nDeprecated\nvar statusBarOrientationAnimationDuration: TimeInterval\nThe animation duration in seconds for the status bar during a 90 degree orientation change.\nDeprecated\nvar statusBarStyle: UIStatusBarStyle\nThe current style of the status bar.\nDeprecated\nvar windows: [UIWindow]\nThe app’s visible and hidden windows.\nDeprecated"
  },
  {
    "title": "regionTriggersOnce | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilocalnotification/1616654-regiontriggersonce",
    "html": "Discussion\n\nWhen the value of this property is true, the user is notified only upon the first crossing the boundary of the target region. After the first crossing, the local notification is unscheduled. When the value of this property is false, notifications are delivered with each boundary crossing. The default value of this property is true.\n\nThe region object itself defines whether the notification is triggered when the user enters or exits the region.\n\nSee Also\nScheduling a local notification\nvar fireDate: Date?\nThe date and time when the system should deliver the notification.\nDeprecated\nvar timeZone: TimeZone?\nThe time zone of the notification’s fire date.\nDeprecated\nvar repeatInterval: NSCalendar.Unit\nThe calendar interval at which to reschedule the notification.\nDeprecated\nvar repeatCalendar: Calendar?\nThe calendar the system should refer to when it reschedules a repeating notification.\nDeprecated\nvar region: CLRegion?\nThe geographic region that triggers the notification.\nDeprecated"
  },
  {
    "title": "displaysSearchBarInNavigationBar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uisearchdisplaycontroller/1620394-displayssearchbarinnavigationbar",
    "html": "Discussion\n\nWhen you return true to display the search bar in a navigation bar, the system uses the search display controller’s navigationItem property and ignores the navigation item, if set, of the searchContentsController view controller. The displayed search field occupies as much width in the navigation bar as possible.\n\nA search bar displayed in a navigation bar cannot have a scope bar.\n\nImportant\n\nThe system raises an exception if you set the showsScopeBar property to true in a search bar that is displayed in a navigation bar.\n\nSee Also\nConfiguring a search bar\nvar delegate: UISearchDisplayDelegate?\nThe controller’s delegate.\nDeprecated\nvar searchBar: UISearchBar\nThe search bar.\nDeprecated\nvar searchContentsController: UIViewController\nThe view controller that manages the contents being searched.\nDeprecated\nvar searchResultsTableView: UITableView\nThe table view in which the search results are displayed.\nDeprecated\nvar searchResultsDataSource: UITableViewDataSource?\nThe data source for the table view in which the search results are displayed.\nDeprecated\nvar searchResultsDelegate: UITableViewDelegate?\nThe delegate for the table view in which the search results are displayed.\nDeprecated\nvar searchResultsTitle: String?\nThe title for the search results view.\nDeprecated\nvar navigationItem: UINavigationItem?\nRepresents the search display controller in a navigation controller’s navigation bar.\nDeprecated"
  },
  {
    "title": "localNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiapplication/launchoptionskey/1623045-localnotification",
    "html": "Deprecated\n\nUse userNotificationCenter(_:didReceive:withCompletionHandler:) instead.\n\nDiscussion\n\nThe value of this key is the UILocalNotification object that was triggered. For additional information about handling local notifications, see the application(_:didReceive:) method.\n\nThis key is also used to access the same value in the userInfo dictionary of the notification named didFinishLaunchingNotification.\n\nSee Also\nAccessing launch options\nstatic let bluetoothCentrals: UIApplication.LaunchOptionsKey\nA key indicating that the app was relaunched to handle Bluetooth-related events.\nstatic let bluetoothPeripherals: UIApplication.LaunchOptionsKey\nA key indicating that the app should continue actions associated with its Bluetooth peripheral objects.\nstatic let cloudKitShareMetadata: UIApplication.LaunchOptionsKey\nA key indicating that the app received a CloudKit share invitation.\nstatic let eventAttribution: UIApplication.LaunchOptionsKey\nstatic let location: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched to handle an incoming location event.\nstatic let newsstandDownloads: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched to process newly downloaded Newsstand assets.\nstatic let remoteNotification: UIApplication.LaunchOptionsKey\nA key indicating that a remote notification is available for the app to process.\nstatic let shortcutItem: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched in response to the user selecting a Home screen quick action.\nstatic let sourceApplication: UIApplication.LaunchOptionsKey\nA key indicating that another app requested the launch of your app.\nstatic let url: UIApplication.LaunchOptionsKey\nA key indicating that the app was launched so that it could open the specified URL.\nstatic let userActivityDictionary: UIApplication.LaunchOptionsKey\nA key indicating a dictionary associated with an activity that the user wants to continue.\nstatic let userActivityType: UIApplication.LaunchOptionsKey\nA key indicating the type of user activity that the user wants to continue.\nstatic let annotation: UIApplication.LaunchOptionsKey\nA key indicating that the URL passed to your app contained custom annotation data from the source app.\nDeprecated"
  },
  {
    "title": "alertAction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilocalnotification/1616648-alertaction",
    "html": "Discussion\n\nAssign a string or, preferably, a localized-string key (using NSLocalizedString) as the value. The alert action is the title of the right button of the alert or the value of the unlock slider, where the value replaces “unlock” in “slide to unlock”. If you specify nil, and alertBody is non-nil, “View” (localized to the preferred language) is used as the default value.\n\nSee Also\nComposing the alert\nvar alertBody: String?\nThe message displayed in the notification alert.\nDeprecated\nvar alertTitle: String?\nA short description of the reason for the alert.\nDeprecated\nvar hasAction: Bool\nA Boolean value that controls whether the notification shows or hides the alert action.\nDeprecated\nvar alertLaunchImage: String?\nIdentifies the image used as the launch image when the user taps (or slides) the action button (or slider).\nDeprecated\nvar category: String?\nThe name of a group of actions to display in the alert.\nDeprecated"
  },
  {
    "title": "fireDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uilocalnotification/1616650-firedate",
    "html": "Discussion\n\nThe fire date is interpreted according to the value specified in the timeZone property. If the specified value is nil or is a date in the past, the notification is delivered immediately.\n\nYou may specify a value for this property or the region property but not both. Attempting to schedule a local notification that contains both a region and fire date raises an exception.\n\nSee Also\nScheduling a local notification\nvar timeZone: TimeZone?\nThe time zone of the notification’s fire date.\nDeprecated\nvar repeatInterval: NSCalendar.Unit\nThe calendar interval at which to reschedule the notification.\nDeprecated\nvar repeatCalendar: Calendar?\nThe calendar the system should refer to when it reschedules a repeating notification.\nDeprecated\nvar region: CLRegion?\nThe geographic region that triggers the notification.\nDeprecated\nvar regionTriggersOnce: Bool\nA Boolean value indicating whether crossing a geographic region boundary delivers only one notification.\nDeprecated\nRelated Documentation\nLocal and Remote Notification Programming Guide"
  },
  {
    "title": "init(title:delegate:cancelButtonTitle:destructiveButtonTitle:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactionsheet/1622875-init",
    "html": "Parameters\ntitle\n\nA string to display in the title area of the action sheet. Pass nil if you don’t want to display any text in the title area.\n\ndelegate\n\nThe receiver’s delegate object. Although this parameter may be nil, the delegate is used to respond to taps in the action sheet and should usually be provided.\n\ncancelButtonTitle\n\nThe title of the cancel button. This button is added to the action sheet automatically and assigned an appropriate index, which is available from the cancelButtonIndex property. This button is displayed in black to indicate that it represents the cancel action. Specify nil if you don’t want a cancel button or are presenting the action sheet on an iPad.\n\ndestructiveButtonTitle\n\nThe title of the destructive button. This button is added to the action sheet automatically and assigned an appropriate index, which is available from the destructiveButtonIndex property. This button is displayed in red to indicate that it represents a destructive behavior. Specify nil if you don’t want a destructive button.\n\notherButtonTitles, ...\n\nThe titles of any additional buttons you want to add. This parameter consists of a nil-terminated, comma-separated list of strings. For example, to specify two additional buttons, you could specify the value @\"Button 1\", @\"Button 2\", nil.\n\nReturn Value\n\nA newly initialized action sheet.\n\nDiscussion\n\nThe action sheet automatically sets the appearance of the destructive and cancel buttons. If the action sheet contains only one button, it doesn’t apply the custom colors associated with the destructive and cancel buttons.\n\nSee Also\nCreating action sheets\ninit(title: String?, delegate: (UIActionSheetDelegate)?, cancelButtonTitle: String?, destructiveButtonTitle: String?, otherButtonTitles: String, String...)\nCreates an action sheet with the specified values.\nDeprecated"
  },
  {
    "title": "firstOtherButtonIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactionsheet/1622870-firstotherbuttonindex",
    "html": "Discussion\n\nButton indices start at 0. The default value of this property is -1, which indicates that there are no other custom buttons.\n\nSee Also\nConfiguring buttons\nfunc addButton(withTitle: String?) -> Int\nAdds a custom button to the action sheet.\nDeprecated\nvar numberOfButtons: Int\nThe number of buttons on the action sheet.\nDeprecated\nfunc buttonTitle(at: Int) -> String?\nReturns the title of the button at the specified index.\nDeprecated\nvar cancelButtonIndex: Int\nThe index number of the cancel button.\nDeprecated\nvar destructiveButtonIndex: Int\nThe index number of the destructive button.\nDeprecated"
  },
  {
    "title": "hideMenu(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenucontroller/3044216-hidemenu",
    "html": "See Also\nShowing and hiding the menu\nfunc showMenu(from: UIView, rect: CGRect)\nDeprecated\nfunc hideMenu()\nDeprecated\nvar isMenuVisible: Bool\nThe visibility of the editing menu.\nDeprecated\nfunc setMenuVisible(Bool, animated: Bool)\nShows or hides the editing menu, optionally animating the action.\nDeprecated"
  },
  {
    "title": "UIKeyboardHIDUsage.keypadComma | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keypadcomma",
    "html": "See Also\nKeypad keys\ncase keypad0\nThe raw DEC usage code 98.\ncase keypad1\nThe raw DEC usage code 89.\ncase keypad2\nThe raw DEC usage code 90.\ncase keypad3\nThe raw DEC usage code 91.\ncase keypad4\nThe raw DEC usage code 92.\ncase keypad5\nThe raw DEC usage code 93.\ncase keypad6\nThe raw DEC usage code 94.\ncase keypad7\nThe raw DEC usage code 95.\ncase keypad8\nThe raw DEC usage code 96.\ncase keypad9\nThe raw DEC usage code 97.\ncase keypadAsterisk\nThe raw DEC usage code 85.\ncase keypadEnter\nThe raw DEC usage code 88.\ncase keypadEqualSign\nThe raw DEC usage code 103.\ncase keypadEqualSignAS400\nThe raw DEC usage code 134.\ncase keypadHyphen\nThe raw DEC usage code 86.\ncase keypadNumLock\nThe raw DEC usage code 83.\ncase keypadPeriod\nThe raw DEC usage code 99.\ncase keypadPlus\nThe raw DEC usage code 87.\ncase keypadSlash\nThe raw DEC usage code 84."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardInternational4 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardinternational4",
    "html": "See Also\nInput method keys\nstatic var keyboardKanaSwitch: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Japanese language keyboards from Apple.\nstatic var keyboardHangul: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Korean language keyboards.\nstatic var keyboardAlphanumericSwitch: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Japanese language keyboards from Apple.\nstatic var keyboardHanja: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Korean language keyboards.\nstatic var keyboardKatakana: UIKeyboardHIDUsage\nAn alias for the LANG3 key on Japanese language keyboards.\nstatic var keyboardHiragana: UIKeyboardHIDUsage\nAn alias for the LANG4 key on Japanese language keyboards.\nstatic var keyboardZenkakuHankakuKanji: UIKeyboardHIDUsage\nAn alias for the LANG5 key on Japanese language keyboards.\ncase keyboardLANG1\nThe raw DEC usage code 144.\ncase keyboardLANG2\nThe raw DEC usage code 145.\ncase keyboardLANG3\nThe raw DEC usage code 146.\ncase keyboardLANG4\nThe raw DEC usage code 147.\ncase keyboardLANG5\nThe raw DEC usage code 148.\ncase keyboardLANG6\nThe raw DEC usage code 149.\ncase keyboardLANG7\nThe raw DEC usage code 150.\ncase keyboardLANG8\nThe raw DEC usage code 151.\ncase keyboardLANG9\nThe raw DEC usage code 152.\ncase keyboardInternational1\nThe raw DEC usage code 135.\ncase keyboardInternational2\nThe raw DEC usage code 136.\ncase keyboardInternational3\nThe raw DEC usage code 137.\ncase keyboardInternational5\nThe raw DEC usage code 139.\ncase keyboardInternational6\nThe raw DEC usage code 140.\ncase keyboardInternational7\nThe raw DEC usage code 141.\ncase keyboardInternational8\nThe raw DEC usage code 142.\ncase keyboardInternational9\nThe raw DEC usage code 143."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardScrollLock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardscrolllock",
    "html": "See Also\nModifier keys\ncase keyboardCapsLock\nThe raw DEC usage code 57.\ncase keyboardLeftAlt\nThe raw DEC usage code 226.\ncase keyboardLeftControl\nThe raw DEC usage code 224.\ncase keyboardLeftShift\nThe raw DEC usage code 225.\ncase keyboardLockingCapsLock\nThe raw DEC usage code 130.\ncase keyboardLockingNumLock\nThe raw DEC usage code 131.\ncase keyboardLockingScrollLock\nThe raw DEC usage code 132.\ncase keyboardRightAlt\nThe raw DEC usage code 230.\ncase keyboardRightControl\nThe raw DEC usage code 228.\ncase keyboardRightShift\nThe raw DEC usage code 229."
  },
  {
    "title": "layoutMargins | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipopovercontroller/1624657-layoutmargins",
    "html": "Discussion\n\nThe edge inset values are measured in points from the edges of the screen, relative to the current device orientation. Thus, the top-edge inset always reflects the top edge of the device from the user’s perspective, which changes depending on whether the user is holding the device in a portrait or landscape orientation. Remember that the device orientation is not always the same as the interface orientation—that is, the orientation of your window and views. Window orientations are typically fixed and view orientations are controlled by the owning view controller. In addition, if the rotation lock option is engaged, the interface does not change orientation at all, even when the device orientation changes.\n\nThe default edge insets are 10 points along each edge. The popover controller automatically subtracts the status bar from the viable area when determining where to display the popover, so you do not need to factor the status bar height into your insets.\n\nSee Also\nCustomizing the popover appearance\nvar backgroundViewClass: AnyClass?\nThe class to use for displaying the popover background content.\nDeprecated\nvar backgroundColor: UIColor?\nThe color of the popover’s backdrop view.\nDeprecated"
  },
  {
    "title": "backgroundColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipopovercontroller/1624673-backgroundcolor",
    "html": "Discussion\n\nUse this property to customize the background color of your popover. Changing the value of this property while the popover is visible triggers an animated changeover to the new color. The default value of this property is nil, which corresponds to the default background color.\n\nSee Also\nCustomizing the popover appearance\nvar layoutMargins: UIEdgeInsets\nThe margins that define the portion of the screen in which it is permissible to display the popover.\nDeprecated\nvar backgroundViewClass: AnyClass?\nThe class to use for displaying the popover background content.\nDeprecated"
  },
  {
    "title": "alertView(_:clickedButtonAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uialertviewdelegate/1620752-alertview",
    "html": "Parameters\nalertView\n\nThe alert view containing the button.\n\nbuttonIndex\n\nThe index of the button that was clicked. The button indices start at 0.\n\nDiscussion\n\nThe receiver is automatically dismissed after this method is invoked."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardRightGUI | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardrightgui",
    "html": "See Also\nOther keys\ncase keyboardAgain\nThe raw DEC usage code 121.\ncase keyboardAlternateErase\nThe raw DEC usage code 153.\ncase keyboardApplication\nThe raw DEC usage code 101.\ncase keyboardCancel\nThe raw DEC usage code 155.\ncase keyboardClear\nThe raw DEC usage code 156.\ncase keyboardClearOrAgain\nThe raw DEC usage code 162.\ncase keyboardCopy\nThe raw DEC usage code 124.\ncase keyboardCrSelOrProps\nThe raw DEC usage code 163.\ncase keyboardCut\nThe raw DEC usage code 129.\ncase keyboardExSel\nThe raw DEC usage code 164.\ncase keyboardExecute\nThe raw DEC usage code 116.\ncase keyboardFind\nThe raw DEC usage code 126.\ncase keyboardGraveAccentAndTilde\nThe raw DEC usage code 53.\ncase keyboardHelp\nThe raw DEC usage code 117.\ncase keyboardLeftGUI\nThe raw DEC usage code 227.\ncase keyboardMenu\nThe raw DEC usage code 118.\ncase keyboardOper\nThe raw DEC usage code 161.\ncase keyboardOut\nThe raw DEC usage code 160.\ncase keyboardPOSTFail\nThe raw DEC usage code 2.\ncase keyboardPaste\nThe raw DEC usage code 125.\ncase keyboardPower\nThe raw DEC usage code 102.\ncase keyboardPrintScreen\nThe raw DEC usage code 70.\ncase keyboardPrior\nThe raw DEC usage code 157.\ncase keyboardReturnOrEnter\nThe raw DEC usage code 40.\ncase keyboardSelect\nThe raw DEC usage code 119.\ncase keyboardSysReqOrAttention\nThe raw DEC usage code 154.\ncase keyboardUndo\nThe raw DEC usage code 122.\ncase keyboard_Reserved\nThe raw DEC usage code 65535."
  },
  {
    "title": "willPresent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uialertviewdelegate/1620767-willpresent",
    "html": "Parameters\nalertView\n\nThe alert view that is about to be displayed.\n\nSee Also\nCustomizing behavior\nfunc alertViewShouldEnableFirstOtherButton(UIAlertView) -> Bool\nSent to the delegate to determine whether the first non-cancel button in the alert should be enabled.\nDeprecated\nfunc didPresent(UIAlertView)\nSent to the delegate after an alert view is presented to the user.\nDeprecated\nfunc alertView(UIAlertView, willDismissWithButtonIndex: Int)\nSent to the delegate before an alert view is dismissed.\nDeprecated\nfunc alertView(UIAlertView, didDismissWithButtonIndex: Int)\nSent to the delegate after an alert view is dismissed from the screen.\nDeprecated"
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardSelect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardselect",
    "html": "See Also\nOther keys\ncase keyboardAgain\nThe raw DEC usage code 121.\ncase keyboardAlternateErase\nThe raw DEC usage code 153.\ncase keyboardApplication\nThe raw DEC usage code 101.\ncase keyboardCancel\nThe raw DEC usage code 155.\ncase keyboardClear\nThe raw DEC usage code 156.\ncase keyboardClearOrAgain\nThe raw DEC usage code 162.\ncase keyboardCopy\nThe raw DEC usage code 124.\ncase keyboardCrSelOrProps\nThe raw DEC usage code 163.\ncase keyboardCut\nThe raw DEC usage code 129.\ncase keyboardExSel\nThe raw DEC usage code 164.\ncase keyboardExecute\nThe raw DEC usage code 116.\ncase keyboardFind\nThe raw DEC usage code 126.\ncase keyboardGraveAccentAndTilde\nThe raw DEC usage code 53.\ncase keyboardHelp\nThe raw DEC usage code 117.\ncase keyboardLeftGUI\nThe raw DEC usage code 227.\ncase keyboardMenu\nThe raw DEC usage code 118.\ncase keyboardOper\nThe raw DEC usage code 161.\ncase keyboardOut\nThe raw DEC usage code 160.\ncase keyboardPOSTFail\nThe raw DEC usage code 2.\ncase keyboardPaste\nThe raw DEC usage code 125.\ncase keyboardPower\nThe raw DEC usage code 102.\ncase keyboardPrintScreen\nThe raw DEC usage code 70.\ncase keyboardPrior\nThe raw DEC usage code 157.\ncase keyboardReturnOrEnter\nThe raw DEC usage code 40.\ncase keyboardRightGUI\nThe raw DEC usage code 231.\ncase keyboardSysReqOrAttention\nThe raw DEC usage code 154.\ncase keyboardUndo\nThe raw DEC usage code 122.\ncase keyboard_Reserved\nThe raw DEC usage code 65535."
  },
  {
    "title": "popoverControllerDidDismissPopover(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipopovercontrollerdelegate/1624671-popovercontrollerdiddismisspopov",
    "html": "Parameters\npopoverController\n\nThe popover controller that was dismissed.\n\nDiscussion\n\nThe popover controller does not call this method in response to programmatic calls to the dismiss(animated:) method. If you dismiss the popover programmatically, you should perform any cleanup actions immediately after calling the dismiss(animated:) method.\n\nYou can use this method to incorporate any changes from the popover’s content view controller back into your application. If you do not plan to use the object in the popoverController parameter again, it is safe to release it from this method.\n\nSee Also\nManaging the popover’s dismissal\nfunc popoverControllerShouldDismissPopover(UIPopoverController) -> Bool\nAsks the delegate if the popover should be dismissed.\nDeprecated"
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardUndo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardundo",
    "html": "See Also\nOther keys\ncase keyboardAgain\nThe raw DEC usage code 121.\ncase keyboardAlternateErase\nThe raw DEC usage code 153.\ncase keyboardApplication\nThe raw DEC usage code 101.\ncase keyboardCancel\nThe raw DEC usage code 155.\ncase keyboardClear\nThe raw DEC usage code 156.\ncase keyboardClearOrAgain\nThe raw DEC usage code 162.\ncase keyboardCopy\nThe raw DEC usage code 124.\ncase keyboardCrSelOrProps\nThe raw DEC usage code 163.\ncase keyboardCut\nThe raw DEC usage code 129.\ncase keyboardExSel\nThe raw DEC usage code 164.\ncase keyboardExecute\nThe raw DEC usage code 116.\ncase keyboardFind\nThe raw DEC usage code 126.\ncase keyboardGraveAccentAndTilde\nThe raw DEC usage code 53.\ncase keyboardHelp\nThe raw DEC usage code 117.\ncase keyboardLeftGUI\nThe raw DEC usage code 227.\ncase keyboardMenu\nThe raw DEC usage code 118.\ncase keyboardOper\nThe raw DEC usage code 161.\ncase keyboardOut\nThe raw DEC usage code 160.\ncase keyboardPOSTFail\nThe raw DEC usage code 2.\ncase keyboardPaste\nThe raw DEC usage code 125.\ncase keyboardPower\nThe raw DEC usage code 102.\ncase keyboardPrintScreen\nThe raw DEC usage code 70.\ncase keyboardPrior\nThe raw DEC usage code 157.\ncase keyboardReturnOrEnter\nThe raw DEC usage code 40.\ncase keyboardRightGUI\nThe raw DEC usage code 231.\ncase keyboardSelect\nThe raw DEC usage code 119.\ncase keyboardSysReqOrAttention\nThe raw DEC usage code 154.\ncase keyboard_Reserved\nThe raw DEC usage code 65535."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardPower | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardpower",
    "html": "See Also\nOther keys\ncase keyboardAgain\nThe raw DEC usage code 121.\ncase keyboardAlternateErase\nThe raw DEC usage code 153.\ncase keyboardApplication\nThe raw DEC usage code 101.\ncase keyboardCancel\nThe raw DEC usage code 155.\ncase keyboardClear\nThe raw DEC usage code 156.\ncase keyboardClearOrAgain\nThe raw DEC usage code 162.\ncase keyboardCopy\nThe raw DEC usage code 124.\ncase keyboardCrSelOrProps\nThe raw DEC usage code 163.\ncase keyboardCut\nThe raw DEC usage code 129.\ncase keyboardExSel\nThe raw DEC usage code 164.\ncase keyboardExecute\nThe raw DEC usage code 116.\ncase keyboardFind\nThe raw DEC usage code 126.\ncase keyboardGraveAccentAndTilde\nThe raw DEC usage code 53.\ncase keyboardHelp\nThe raw DEC usage code 117.\ncase keyboardLeftGUI\nThe raw DEC usage code 227.\ncase keyboardMenu\nThe raw DEC usage code 118.\ncase keyboardOper\nThe raw DEC usage code 161.\ncase keyboardOut\nThe raw DEC usage code 160.\ncase keyboardPOSTFail\nThe raw DEC usage code 2.\ncase keyboardPaste\nThe raw DEC usage code 125.\ncase keyboardPrintScreen\nThe raw DEC usage code 70.\ncase keyboardPrior\nThe raw DEC usage code 157.\ncase keyboardReturnOrEnter\nThe raw DEC usage code 40.\ncase keyboardRightGUI\nThe raw DEC usage code 231.\ncase keyboardSelect\nThe raw DEC usage code 119.\ncase keyboardSysReqOrAttention\nThe raw DEC usage code 154.\ncase keyboardUndo\nThe raw DEC usage code 122.\ncase keyboard_Reserved\nThe raw DEC usage code 65535."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardPrintScreen | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardprintscreen",
    "html": "See Also\nOther keys\ncase keyboardAgain\nThe raw DEC usage code 121.\ncase keyboardAlternateErase\nThe raw DEC usage code 153.\ncase keyboardApplication\nThe raw DEC usage code 101.\ncase keyboardCancel\nThe raw DEC usage code 155.\ncase keyboardClear\nThe raw DEC usage code 156.\ncase keyboardClearOrAgain\nThe raw DEC usage code 162.\ncase keyboardCopy\nThe raw DEC usage code 124.\ncase keyboardCrSelOrProps\nThe raw DEC usage code 163.\ncase keyboardCut\nThe raw DEC usage code 129.\ncase keyboardExSel\nThe raw DEC usage code 164.\ncase keyboardExecute\nThe raw DEC usage code 116.\ncase keyboardFind\nThe raw DEC usage code 126.\ncase keyboardGraveAccentAndTilde\nThe raw DEC usage code 53.\ncase keyboardHelp\nThe raw DEC usage code 117.\ncase keyboardLeftGUI\nThe raw DEC usage code 227.\ncase keyboardMenu\nThe raw DEC usage code 118.\ncase keyboardOper\nThe raw DEC usage code 161.\ncase keyboardOut\nThe raw DEC usage code 160.\ncase keyboardPOSTFail\nThe raw DEC usage code 2.\ncase keyboardPaste\nThe raw DEC usage code 125.\ncase keyboardPower\nThe raw DEC usage code 102.\ncase keyboardPrior\nThe raw DEC usage code 157.\ncase keyboardReturnOrEnter\nThe raw DEC usage code 40.\ncase keyboardRightGUI\nThe raw DEC usage code 231.\ncase keyboardSelect\nThe raw DEC usage code 119.\ncase keyboardSysReqOrAttention\nThe raw DEC usage code 154.\ncase keyboardUndo\nThe raw DEC usage code 122.\ncase keyboard_Reserved\nThe raw DEC usage code 65535."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardHelp | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardhelp",
    "html": "See Also\nOther keys\ncase keyboardAgain\nThe raw DEC usage code 121.\ncase keyboardAlternateErase\nThe raw DEC usage code 153.\ncase keyboardApplication\nThe raw DEC usage code 101.\ncase keyboardCancel\nThe raw DEC usage code 155.\ncase keyboardClear\nThe raw DEC usage code 156.\ncase keyboardClearOrAgain\nThe raw DEC usage code 162.\ncase keyboardCopy\nThe raw DEC usage code 124.\ncase keyboardCrSelOrProps\nThe raw DEC usage code 163.\ncase keyboardCut\nThe raw DEC usage code 129.\ncase keyboardExSel\nThe raw DEC usage code 164.\ncase keyboardExecute\nThe raw DEC usage code 116.\ncase keyboardFind\nThe raw DEC usage code 126.\ncase keyboardGraveAccentAndTilde\nThe raw DEC usage code 53.\ncase keyboardLeftGUI\nThe raw DEC usage code 227.\ncase keyboardMenu\nThe raw DEC usage code 118.\ncase keyboardOper\nThe raw DEC usage code 161.\ncase keyboardOut\nThe raw DEC usage code 160.\ncase keyboardPOSTFail\nThe raw DEC usage code 2.\ncase keyboardPaste\nThe raw DEC usage code 125.\ncase keyboardPower\nThe raw DEC usage code 102.\ncase keyboardPrintScreen\nThe raw DEC usage code 70.\ncase keyboardPrior\nThe raw DEC usage code 157.\ncase keyboardReturnOrEnter\nThe raw DEC usage code 40.\ncase keyboardRightGUI\nThe raw DEC usage code 231.\ncase keyboardSelect\nThe raw DEC usage code 119.\ncase keyboardSysReqOrAttention\nThe raw DEC usage code 154.\ncase keyboardUndo\nThe raw DEC usage code 122.\ncase keyboard_Reserved\nThe raw DEC usage code 65535."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardOper | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardoper",
    "html": "See Also\nOther keys\ncase keyboardAgain\nThe raw DEC usage code 121.\ncase keyboardAlternateErase\nThe raw DEC usage code 153.\ncase keyboardApplication\nThe raw DEC usage code 101.\ncase keyboardCancel\nThe raw DEC usage code 155.\ncase keyboardClear\nThe raw DEC usage code 156.\ncase keyboardClearOrAgain\nThe raw DEC usage code 162.\ncase keyboardCopy\nThe raw DEC usage code 124.\ncase keyboardCrSelOrProps\nThe raw DEC usage code 163.\ncase keyboardCut\nThe raw DEC usage code 129.\ncase keyboardExSel\nThe raw DEC usage code 164.\ncase keyboardExecute\nThe raw DEC usage code 116.\ncase keyboardFind\nThe raw DEC usage code 126.\ncase keyboardGraveAccentAndTilde\nThe raw DEC usage code 53.\ncase keyboardHelp\nThe raw DEC usage code 117.\ncase keyboardLeftGUI\nThe raw DEC usage code 227.\ncase keyboardMenu\nThe raw DEC usage code 118.\ncase keyboardOut\nThe raw DEC usage code 160.\ncase keyboardPOSTFail\nThe raw DEC usage code 2.\ncase keyboardPaste\nThe raw DEC usage code 125.\ncase keyboardPower\nThe raw DEC usage code 102.\ncase keyboardPrintScreen\nThe raw DEC usage code 70.\ncase keyboardPrior\nThe raw DEC usage code 157.\ncase keyboardReturnOrEnter\nThe raw DEC usage code 40.\ncase keyboardRightGUI\nThe raw DEC usage code 231.\ncase keyboardSelect\nThe raw DEC usage code 119.\ncase keyboardSysReqOrAttention\nThe raw DEC usage code 154.\ncase keyboardUndo\nThe raw DEC usage code 122.\ncase keyboard_Reserved\nThe raw DEC usage code 65535."
  },
  {
    "title": "present(from:in:permittedArrowDirections:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipopovercontroller/1624660-present",
    "html": "Parameters\nrect\n\nThe rectangle in view at which to anchor the popover window.\n\nview\n\nThe view containing the anchor rectangle for the popover.\n\narrowDirections\n\nThe arrow directions the popover is permitted to use. You can use this value to force the popover to be positioned on a specific side of the rectangle. However, it is generally better to specify any and let the popover decide the best placement. You must not specify unknown for this parameter.\n\nanimated\n\nSpecify true to animate the presentation of the popover or false to display it immediately.\n\nSee Also\nPresenting and dismissing the popover\nfunc present(from: UIBarButtonItem, permittedArrowDirections: UIPopoverArrowDirection, animated: Bool)\nDisplays the popover and anchors it to the specified bar button item.\nDeprecated\nfunc dismiss(animated: Bool)\nDismisses the popover programmatically.\nDeprecated"
  },
  {
    "title": "contentViewController | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipopovercontroller/1624672-contentviewcontroller",
    "html": "Discussion\n\nThis property is initially set to the view controller passed to the init(contentViewController:) method. You can change the value of this property later to reflect a new set of content. Changing the value of this property swaps the new view controller in for the old one immediately and does not trigger an animation. If you want to animate the change, use the setContentView(_:animated:) method instead.\n\nSee Also\nConfiguring the popover content\nfunc setContentView(UIViewController, animated: Bool)\nSets the view controller responsible for the content portion of the popover.\nDeprecated\nvar contentSize: CGSize\nThe size of the popover’s content view.\nDeprecated\nfunc setContentSize(CGSize, animated: Bool)\nChanges the size of the popover’s content view.\nDeprecated\nvar passthroughViews: [UIView]?\nAn array of views that the user can interact with while the popover is visible.\nDeprecated"
  },
  {
    "title": "menuFrameDidChangeNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenucontroller/1622834-menuframedidchangenotification",
    "html": "Deprecated\n\nUse UIEditMenuInteraction instead.\n\nDiscussion\n\nThere is no userInfo dictionary.\n\nSee Also\nNotifications\nclass let willShowMenuNotification: NSNotification.Name\nPosted by the menu controller just before it shows the menu.\nDeprecated\nclass let didShowMenuNotification: NSNotification.Name\nPosted by the menu controller just after it shows the menu.\nDeprecated\nclass let willHideMenuNotification: NSNotification.Name\nPosted by the menu controller just before it hides the menu.\nDeprecated\nclass let didHideMenuNotification: NSNotification.Name\nPosted by the menu controller just after it hides the menu.\nDeprecated"
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardFind | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardfind",
    "html": "See Also\nOther keys\ncase keyboardAgain\nThe raw DEC usage code 121.\ncase keyboardAlternateErase\nThe raw DEC usage code 153.\ncase keyboardApplication\nThe raw DEC usage code 101.\ncase keyboardCancel\nThe raw DEC usage code 155.\ncase keyboardClear\nThe raw DEC usage code 156.\ncase keyboardClearOrAgain\nThe raw DEC usage code 162.\ncase keyboardCopy\nThe raw DEC usage code 124.\ncase keyboardCrSelOrProps\nThe raw DEC usage code 163.\ncase keyboardCut\nThe raw DEC usage code 129.\ncase keyboardExSel\nThe raw DEC usage code 164.\ncase keyboardExecute\nThe raw DEC usage code 116.\ncase keyboardGraveAccentAndTilde\nThe raw DEC usage code 53.\ncase keyboardHelp\nThe raw DEC usage code 117.\ncase keyboardLeftGUI\nThe raw DEC usage code 227.\ncase keyboardMenu\nThe raw DEC usage code 118.\ncase keyboardOper\nThe raw DEC usage code 161.\ncase keyboardOut\nThe raw DEC usage code 160.\ncase keyboardPOSTFail\nThe raw DEC usage code 2.\ncase keyboardPaste\nThe raw DEC usage code 125.\ncase keyboardPower\nThe raw DEC usage code 102.\ncase keyboardPrintScreen\nThe raw DEC usage code 70.\ncase keyboardPrior\nThe raw DEC usage code 157.\ncase keyboardReturnOrEnter\nThe raw DEC usage code 40.\ncase keyboardRightGUI\nThe raw DEC usage code 231.\ncase keyboardSelect\nThe raw DEC usage code 119.\ncase keyboardSysReqOrAttention\nThe raw DEC usage code 154.\ncase keyboardUndo\nThe raw DEC usage code 122.\ncase keyboard_Reserved\nThe raw DEC usage code 65535."
  },
  {
    "title": "willHideMenuNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenucontroller/1622818-willhidemenunotification",
    "html": "Deprecated\n\nUse UIEditMenuInteraction instead.\n\nDiscussion\n\nThere is no userInfo dictionary.\n\nSee Also\nNotifications\nclass let willShowMenuNotification: NSNotification.Name\nPosted by the menu controller just before it shows the menu.\nDeprecated\nclass let didShowMenuNotification: NSNotification.Name\nPosted by the menu controller just after it shows the menu.\nDeprecated\nclass let didHideMenuNotification: NSNotification.Name\nPosted by the menu controller just after it hides the menu.\nDeprecated\nclass let menuFrameDidChangeNotification: NSNotification.Name\nPosted when the frame of a visible menu changes.\nDeprecated"
  },
  {
    "title": "didHideMenuNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenucontroller/1622825-didhidemenunotification",
    "html": "Deprecated\n\nUse UIEditMenuInteraction instead.\n\nDiscussion\n\nThere is no userInfo dictionary.\n\nSee Also\nNotifications\nclass let willShowMenuNotification: NSNotification.Name\nPosted by the menu controller just before it shows the menu.\nDeprecated\nclass let didShowMenuNotification: NSNotification.Name\nPosted by the menu controller just after it shows the menu.\nDeprecated\nclass let willHideMenuNotification: NSNotification.Name\nPosted by the menu controller just before it hides the menu.\nDeprecated\nclass let menuFrameDidChangeNotification: NSNotification.Name\nPosted when the frame of a visible menu changes.\nDeprecated"
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardExecute | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardexecute",
    "html": "See Also\nOther keys\ncase keyboardAgain\nThe raw DEC usage code 121.\ncase keyboardAlternateErase\nThe raw DEC usage code 153.\ncase keyboardApplication\nThe raw DEC usage code 101.\ncase keyboardCancel\nThe raw DEC usage code 155.\ncase keyboardClear\nThe raw DEC usage code 156.\ncase keyboardClearOrAgain\nThe raw DEC usage code 162.\ncase keyboardCopy\nThe raw DEC usage code 124.\ncase keyboardCrSelOrProps\nThe raw DEC usage code 163.\ncase keyboardCut\nThe raw DEC usage code 129.\ncase keyboardExSel\nThe raw DEC usage code 164.\ncase keyboardFind\nThe raw DEC usage code 126.\ncase keyboardGraveAccentAndTilde\nThe raw DEC usage code 53.\ncase keyboardHelp\nThe raw DEC usage code 117.\ncase keyboardLeftGUI\nThe raw DEC usage code 227.\ncase keyboardMenu\nThe raw DEC usage code 118.\ncase keyboardOper\nThe raw DEC usage code 161.\ncase keyboardOut\nThe raw DEC usage code 160.\ncase keyboardPOSTFail\nThe raw DEC usage code 2.\ncase keyboardPaste\nThe raw DEC usage code 125.\ncase keyboardPower\nThe raw DEC usage code 102.\ncase keyboardPrintScreen\nThe raw DEC usage code 70.\ncase keyboardPrior\nThe raw DEC usage code 157.\ncase keyboardReturnOrEnter\nThe raw DEC usage code 40.\ncase keyboardRightGUI\nThe raw DEC usage code 231.\ncase keyboardSelect\nThe raw DEC usage code 119.\ncase keyboardSysReqOrAttention\nThe raw DEC usage code 154.\ncase keyboardUndo\nThe raw DEC usage code 122.\ncase keyboard_Reserved\nThe raw DEC usage code 65535."
  },
  {
    "title": "present(from:permittedArrowDirections:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipopovercontroller/1624668-present",
    "html": "Parameters\nitem\n\nThe bar button item on which to anchor the popover.\n\narrowDirections\n\nThe arrow directions the popover is permitted to use. You can use this value to force the popover to be positioned on a specific side of the bar button item. However, it is generally better to specify any and let the popover decide the best placement. You must not specify unknown for this parameter.\n\nanimated\n\nSpecify true to animate the presentation of the popover or false to display it immediately.\n\nDiscussion\n\nWhen presenting the popover, this method adds the toolbar that owns the button to the popover’s list of passthrough views. Thus, taps in the toolbar result in the action methods of the corresponding toolbar items being called. If you want the popover to be dismissed when a different toolbar item is tapped, you must implement that behavior in your action handler methods.\n\nSee Also\nPresenting and dismissing the popover\nfunc present(from: CGRect, in: UIView, permittedArrowDirections: UIPopoverArrowDirection, animated: Bool)\nDisplays the popover and anchors it to the specified location in the view.\nDeprecated\nfunc dismiss(animated: Bool)\nDismisses the popover programmatically.\nDeprecated"
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardGraveAccentAndTilde | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardgraveaccentandtilde",
    "html": "See Also\nOther keys\ncase keyboardAgain\nThe raw DEC usage code 121.\ncase keyboardAlternateErase\nThe raw DEC usage code 153.\ncase keyboardApplication\nThe raw DEC usage code 101.\ncase keyboardCancel\nThe raw DEC usage code 155.\ncase keyboardClear\nThe raw DEC usage code 156.\ncase keyboardClearOrAgain\nThe raw DEC usage code 162.\ncase keyboardCopy\nThe raw DEC usage code 124.\ncase keyboardCrSelOrProps\nThe raw DEC usage code 163.\ncase keyboardCut\nThe raw DEC usage code 129.\ncase keyboardExSel\nThe raw DEC usage code 164.\ncase keyboardExecute\nThe raw DEC usage code 116.\ncase keyboardFind\nThe raw DEC usage code 126.\ncase keyboardHelp\nThe raw DEC usage code 117.\ncase keyboardLeftGUI\nThe raw DEC usage code 227.\ncase keyboardMenu\nThe raw DEC usage code 118.\ncase keyboardOper\nThe raw DEC usage code 161.\ncase keyboardOut\nThe raw DEC usage code 160.\ncase keyboardPOSTFail\nThe raw DEC usage code 2.\ncase keyboardPaste\nThe raw DEC usage code 125.\ncase keyboardPower\nThe raw DEC usage code 102.\ncase keyboardPrintScreen\nThe raw DEC usage code 70.\ncase keyboardPrior\nThe raw DEC usage code 157.\ncase keyboardReturnOrEnter\nThe raw DEC usage code 40.\ncase keyboardRightGUI\nThe raw DEC usage code 231.\ncase keyboardSelect\nThe raw DEC usage code 119.\ncase keyboardSysReqOrAttention\nThe raw DEC usage code 154.\ncase keyboardUndo\nThe raw DEC usage code 122.\ncase keyboard_Reserved\nThe raw DEC usage code 65535."
  },
  {
    "title": "init(contentViewController:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipopovercontroller/1624669-init",
    "html": "Parameters\nviewController\n\nThe view controller for managing the popover’s content. This parameter must not be nil.\n\nReturn Value\n\nAn initialized popover controller object.\n\nDiscussion\n\nWhen initializing a popover controller, you must specify the view controller object whose content is to be displayed in the popover. You can change this view controller later by modifying the contentViewController property.\n\nSee Also\nRelated Documentation\nView Controller Catalog for iOS"
  },
  {
    "title": "setContentView(_:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipopovercontroller/1624655-setcontentview",
    "html": "Parameters\nviewController\n\nThe new view controller whose content should be displayed by the popover.\n\nanimated\n\nSpecify true if the change of view controllers should be animated or false if the change should occur immediately.\n\nSee Also\nConfiguring the popover content\nvar contentViewController: UIViewController\nThe view controller responsible for the content portion of the popover.\nDeprecated\nvar contentSize: CGSize\nThe size of the popover’s content view.\nDeprecated\nfunc setContentSize(CGSize, animated: Bool)\nChanges the size of the popover’s content view.\nDeprecated\nvar passthroughViews: [UIView]?\nAn array of views that the user can interact with while the popover is visible.\nDeprecated"
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardExSel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardexsel",
    "html": "See Also\nOther keys\ncase keyboardAgain\nThe raw DEC usage code 121.\ncase keyboardAlternateErase\nThe raw DEC usage code 153.\ncase keyboardApplication\nThe raw DEC usage code 101.\ncase keyboardCancel\nThe raw DEC usage code 155.\ncase keyboardClear\nThe raw DEC usage code 156.\ncase keyboardClearOrAgain\nThe raw DEC usage code 162.\ncase keyboardCopy\nThe raw DEC usage code 124.\ncase keyboardCrSelOrProps\nThe raw DEC usage code 163.\ncase keyboardCut\nThe raw DEC usage code 129.\ncase keyboardExecute\nThe raw DEC usage code 116.\ncase keyboardFind\nThe raw DEC usage code 126.\ncase keyboardGraveAccentAndTilde\nThe raw DEC usage code 53.\ncase keyboardHelp\nThe raw DEC usage code 117.\ncase keyboardLeftGUI\nThe raw DEC usage code 227.\ncase keyboardMenu\nThe raw DEC usage code 118.\ncase keyboardOper\nThe raw DEC usage code 161.\ncase keyboardOut\nThe raw DEC usage code 160.\ncase keyboardPOSTFail\nThe raw DEC usage code 2.\ncase keyboardPaste\nThe raw DEC usage code 125.\ncase keyboardPower\nThe raw DEC usage code 102.\ncase keyboardPrintScreen\nThe raw DEC usage code 70.\ncase keyboardPrior\nThe raw DEC usage code 157.\ncase keyboardReturnOrEnter\nThe raw DEC usage code 40.\ncase keyboardRightGUI\nThe raw DEC usage code 231.\ncase keyboardSelect\nThe raw DEC usage code 119.\ncase keyboardSysReqOrAttention\nThe raw DEC usage code 154.\ncase keyboardUndo\nThe raw DEC usage code 122.\ncase keyboard_Reserved\nThe raw DEC usage code 65535."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardCopy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardcopy",
    "html": "See Also\nOther keys\ncase keyboardAgain\nThe raw DEC usage code 121.\ncase keyboardAlternateErase\nThe raw DEC usage code 153.\ncase keyboardApplication\nThe raw DEC usage code 101.\ncase keyboardCancel\nThe raw DEC usage code 155.\ncase keyboardClear\nThe raw DEC usage code 156.\ncase keyboardClearOrAgain\nThe raw DEC usage code 162.\ncase keyboardCrSelOrProps\nThe raw DEC usage code 163.\ncase keyboardCut\nThe raw DEC usage code 129.\ncase keyboardExSel\nThe raw DEC usage code 164.\ncase keyboardExecute\nThe raw DEC usage code 116.\ncase keyboardFind\nThe raw DEC usage code 126.\ncase keyboardGraveAccentAndTilde\nThe raw DEC usage code 53.\ncase keyboardHelp\nThe raw DEC usage code 117.\ncase keyboardLeftGUI\nThe raw DEC usage code 227.\ncase keyboardMenu\nThe raw DEC usage code 118.\ncase keyboardOper\nThe raw DEC usage code 161.\ncase keyboardOut\nThe raw DEC usage code 160.\ncase keyboardPOSTFail\nThe raw DEC usage code 2.\ncase keyboardPaste\nThe raw DEC usage code 125.\ncase keyboardPower\nThe raw DEC usage code 102.\ncase keyboardPrintScreen\nThe raw DEC usage code 70.\ncase keyboardPrior\nThe raw DEC usage code 157.\ncase keyboardReturnOrEnter\nThe raw DEC usage code 40.\ncase keyboardRightGUI\nThe raw DEC usage code 231.\ncase keyboardSelect\nThe raw DEC usage code 119.\ncase keyboardSysReqOrAttention\nThe raw DEC usage code 154.\ncase keyboardUndo\nThe raw DEC usage code 122.\ncase keyboard_Reserved\nThe raw DEC usage code 65535."
  },
  {
    "title": "didShowMenuNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenucontroller/1622814-didshowmenunotification",
    "html": "Deprecated\n\nUse UIEditMenuInteraction instead.\n\nDiscussion\n\nThere is no userInfo dictionary.\n\nSee Also\nNotifications\nclass let willShowMenuNotification: NSNotification.Name\nPosted by the menu controller just before it shows the menu.\nDeprecated\nclass let willHideMenuNotification: NSNotification.Name\nPosted by the menu controller just before it hides the menu.\nDeprecated\nclass let didHideMenuNotification: NSNotification.Name\nPosted by the menu controller just after it hides the menu.\nDeprecated\nclass let menuFrameDidChangeNotification: NSNotification.Name\nPosted when the frame of a visible menu changes.\nDeprecated"
  },
  {
    "title": "willShowMenuNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimenucontroller/1622830-willshowmenunotification",
    "html": "Deprecated\n\nUse UIEditMenuInteraction instead.\n\nDiscussion\n\nThere is no userInfo dictionary.\n\nSee Also\nNotifications\nclass let didShowMenuNotification: NSNotification.Name\nPosted by the menu controller just after it shows the menu.\nDeprecated\nclass let willHideMenuNotification: NSNotification.Name\nPosted by the menu controller just before it hides the menu.\nDeprecated\nclass let didHideMenuNotification: NSNotification.Name\nPosted by the menu controller just after it hides the menu.\nDeprecated\nclass let menuFrameDidChangeNotification: NSNotification.Name\nPosted when the frame of a visible menu changes.\nDeprecated"
  },
  {
    "title": "contentSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipopovercontroller/1624667-contentsize",
    "html": "Discussion\n\nThis property represents the size of the content view that is managed by the view controller in the contentViewController property. The initial value of this property is set to value in the view controller’s contentSizeForViewInPopover property. Changing the value of this property overrides the default value of the current view controller. The overridden value persists until you assign a new content view controller to the receiver. Thus, if you want to keep your overridden value, you must reassign it after changing the content view controller.\n\nWhen changing the value of this property, the width value you specify must be at least 320 points and no more than 600 points. There are no restrictions on the height value. However, both the width and height values you specify may be adjusted to ensure the popup fits on screen and is not covered by the keyboard. If you change the value of this property while the popover is visible, the size change is animated.\n\nSee Also\nConfiguring the popover content\nvar contentViewController: UIViewController\nThe view controller responsible for the content portion of the popover.\nDeprecated\nfunc setContentView(UIViewController, animated: Bool)\nSets the view controller responsible for the content portion of the popover.\nDeprecated\nfunc setContentSize(CGSize, animated: Bool)\nChanges the size of the popover’s content view.\nDeprecated\nvar passthroughViews: [UIView]?\nAn array of views that the user can interact with while the popover is visible.\nDeprecated"
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardLANG1 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardlang1",
    "html": "Discussion\n\nOn Japanese language keyboards from Apple, the UIKeyboardHIDUsage.keyboardLANG1 key is the Kana switch (かな) key. On Korean language keyboards, it’s the Hangul/English toggle key.\n\nSee Also\nInput method keys\nstatic var keyboardKanaSwitch: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Japanese language keyboards from Apple.\nstatic var keyboardHangul: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Korean language keyboards.\nstatic var keyboardAlphanumericSwitch: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Japanese language keyboards from Apple.\nstatic var keyboardHanja: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Korean language keyboards.\nstatic var keyboardKatakana: UIKeyboardHIDUsage\nAn alias for the LANG3 key on Japanese language keyboards.\nstatic var keyboardHiragana: UIKeyboardHIDUsage\nAn alias for the LANG4 key on Japanese language keyboards.\nstatic var keyboardZenkakuHankakuKanji: UIKeyboardHIDUsage\nAn alias for the LANG5 key on Japanese language keyboards.\ncase keyboardLANG2\nThe raw DEC usage code 145.\ncase keyboardLANG3\nThe raw DEC usage code 146.\ncase keyboardLANG4\nThe raw DEC usage code 147.\ncase keyboardLANG5\nThe raw DEC usage code 148.\ncase keyboardLANG6\nThe raw DEC usage code 149.\ncase keyboardLANG7\nThe raw DEC usage code 150.\ncase keyboardLANG8\nThe raw DEC usage code 151.\ncase keyboardLANG9\nThe raw DEC usage code 152.\ncase keyboardInternational1\nThe raw DEC usage code 135.\ncase keyboardInternational2\nThe raw DEC usage code 136.\ncase keyboardInternational3\nThe raw DEC usage code 137.\ncase keyboardInternational4\nThe raw DEC usage code 138.\ncase keyboardInternational5\nThe raw DEC usage code 139.\ncase keyboardInternational6\nThe raw DEC usage code 140.\ncase keyboardInternational7\nThe raw DEC usage code 141.\ncase keyboardInternational8\nThe raw DEC usage code 142.\ncase keyboardInternational9\nThe raw DEC usage code 143."
  },
  {
    "title": "keyboardZenkakuHankakuKanji | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/3526293-keyboardzenkakuhankakukanji",
    "html": "See Also\nInput method keys\nstatic var keyboardKanaSwitch: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Japanese language keyboards from Apple.\nstatic var keyboardHangul: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Korean language keyboards.\nstatic var keyboardAlphanumericSwitch: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Japanese language keyboards from Apple.\nstatic var keyboardHanja: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Korean language keyboards.\nstatic var keyboardKatakana: UIKeyboardHIDUsage\nAn alias for the LANG3 key on Japanese language keyboards.\nstatic var keyboardHiragana: UIKeyboardHIDUsage\nAn alias for the LANG4 key on Japanese language keyboards.\ncase keyboardLANG1\nThe raw DEC usage code 144.\ncase keyboardLANG2\nThe raw DEC usage code 145.\ncase keyboardLANG3\nThe raw DEC usage code 146.\ncase keyboardLANG4\nThe raw DEC usage code 147.\ncase keyboardLANG5\nThe raw DEC usage code 148.\ncase keyboardLANG6\nThe raw DEC usage code 149.\ncase keyboardLANG7\nThe raw DEC usage code 150.\ncase keyboardLANG8\nThe raw DEC usage code 151.\ncase keyboardLANG9\nThe raw DEC usage code 152.\ncase keyboardInternational1\nThe raw DEC usage code 135.\ncase keyboardInternational2\nThe raw DEC usage code 136.\ncase keyboardInternational3\nThe raw DEC usage code 137.\ncase keyboardInternational4\nThe raw DEC usage code 138.\ncase keyboardInternational5\nThe raw DEC usage code 139.\ncase keyboardInternational6\nThe raw DEC usage code 140.\ncase keyboardInternational7\nThe raw DEC usage code 141.\ncase keyboardInternational8\nThe raw DEC usage code 142.\ncase keyboardInternational9\nThe raw DEC usage code 143."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardLANG2 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardlang2",
    "html": "Discussion\n\nOn Japanese language keyboards from Apple, the UIKeyboardHIDUsage.keyboardLANG2 key is the alphanumeric (英数) key. On Korean language keyboards, it’s the Hanja conversion key.\n\nSee Also\nInput method keys\nstatic var keyboardKanaSwitch: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Japanese language keyboards from Apple.\nstatic var keyboardHangul: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Korean language keyboards.\nstatic var keyboardAlphanumericSwitch: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Japanese language keyboards from Apple.\nstatic var keyboardHanja: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Korean language keyboards.\nstatic var keyboardKatakana: UIKeyboardHIDUsage\nAn alias for the LANG3 key on Japanese language keyboards.\nstatic var keyboardHiragana: UIKeyboardHIDUsage\nAn alias for the LANG4 key on Japanese language keyboards.\nstatic var keyboardZenkakuHankakuKanji: UIKeyboardHIDUsage\nAn alias for the LANG5 key on Japanese language keyboards.\ncase keyboardLANG1\nThe raw DEC usage code 144.\ncase keyboardLANG3\nThe raw DEC usage code 146.\ncase keyboardLANG4\nThe raw DEC usage code 147.\ncase keyboardLANG5\nThe raw DEC usage code 148.\ncase keyboardLANG6\nThe raw DEC usage code 149.\ncase keyboardLANG7\nThe raw DEC usage code 150.\ncase keyboardLANG8\nThe raw DEC usage code 151.\ncase keyboardLANG9\nThe raw DEC usage code 152.\ncase keyboardInternational1\nThe raw DEC usage code 135.\ncase keyboardInternational2\nThe raw DEC usage code 136.\ncase keyboardInternational3\nThe raw DEC usage code 137.\ncase keyboardInternational4\nThe raw DEC usage code 138.\ncase keyboardInternational5\nThe raw DEC usage code 139.\ncase keyboardInternational6\nThe raw DEC usage code 140.\ncase keyboardInternational7\nThe raw DEC usage code 141.\ncase keyboardInternational8\nThe raw DEC usage code 142.\ncase keyboardInternational9\nThe raw DEC usage code 143."
  },
  {
    "title": "keyboardHanja | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/3526204-keyboardhanja",
    "html": "See Also\nInput method keys\nstatic var keyboardKanaSwitch: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Japanese language keyboards from Apple.\nstatic var keyboardHangul: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Korean language keyboards.\nstatic var keyboardAlphanumericSwitch: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Japanese language keyboards from Apple.\nstatic var keyboardKatakana: UIKeyboardHIDUsage\nAn alias for the LANG3 key on Japanese language keyboards.\nstatic var keyboardHiragana: UIKeyboardHIDUsage\nAn alias for the LANG4 key on Japanese language keyboards.\nstatic var keyboardZenkakuHankakuKanji: UIKeyboardHIDUsage\nAn alias for the LANG5 key on Japanese language keyboards.\ncase keyboardLANG1\nThe raw DEC usage code 144.\ncase keyboardLANG2\nThe raw DEC usage code 145.\ncase keyboardLANG3\nThe raw DEC usage code 146.\ncase keyboardLANG4\nThe raw DEC usage code 147.\ncase keyboardLANG5\nThe raw DEC usage code 148.\ncase keyboardLANG6\nThe raw DEC usage code 149.\ncase keyboardLANG7\nThe raw DEC usage code 150.\ncase keyboardLANG8\nThe raw DEC usage code 151.\ncase keyboardLANG9\nThe raw DEC usage code 152.\ncase keyboardInternational1\nThe raw DEC usage code 135.\ncase keyboardInternational2\nThe raw DEC usage code 136.\ncase keyboardInternational3\nThe raw DEC usage code 137.\ncase keyboardInternational4\nThe raw DEC usage code 138.\ncase keyboardInternational5\nThe raw DEC usage code 139.\ncase keyboardInternational6\nThe raw DEC usage code 140.\ncase keyboardInternational7\nThe raw DEC usage code 141.\ncase keyboardInternational8\nThe raw DEC usage code 142.\ncase keyboardInternational9\nThe raw DEC usage code 143."
  },
  {
    "title": "keyboardHangul | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/3526203-keyboardhangul",
    "html": "See Also\nInput method keys\nstatic var keyboardKanaSwitch: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Japanese language keyboards from Apple.\nstatic var keyboardAlphanumericSwitch: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Japanese language keyboards from Apple.\nstatic var keyboardHanja: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Korean language keyboards.\nstatic var keyboardKatakana: UIKeyboardHIDUsage\nAn alias for the LANG3 key on Japanese language keyboards.\nstatic var keyboardHiragana: UIKeyboardHIDUsage\nAn alias for the LANG4 key on Japanese language keyboards.\nstatic var keyboardZenkakuHankakuKanji: UIKeyboardHIDUsage\nAn alias for the LANG5 key on Japanese language keyboards.\ncase keyboardLANG1\nThe raw DEC usage code 144.\ncase keyboardLANG2\nThe raw DEC usage code 145.\ncase keyboardLANG3\nThe raw DEC usage code 146.\ncase keyboardLANG4\nThe raw DEC usage code 147.\ncase keyboardLANG5\nThe raw DEC usage code 148.\ncase keyboardLANG6\nThe raw DEC usage code 149.\ncase keyboardLANG7\nThe raw DEC usage code 150.\ncase keyboardLANG8\nThe raw DEC usage code 151.\ncase keyboardLANG9\nThe raw DEC usage code 152.\ncase keyboardInternational1\nThe raw DEC usage code 135.\ncase keyboardInternational2\nThe raw DEC usage code 136.\ncase keyboardInternational3\nThe raw DEC usage code 137.\ncase keyboardInternational4\nThe raw DEC usage code 138.\ncase keyboardInternational5\nThe raw DEC usage code 139.\ncase keyboardInternational6\nThe raw DEC usage code 140.\ncase keyboardInternational7\nThe raw DEC usage code 141.\ncase keyboardInternational8\nThe raw DEC usage code 142.\ncase keyboardInternational9\nThe raw DEC usage code 143."
  },
  {
    "title": "UIKeyboardHIDUsage.keypadNumLock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keypadnumlock",
    "html": "See Also\nKeypad keys\ncase keypad0\nThe raw DEC usage code 98.\ncase keypad1\nThe raw DEC usage code 89.\ncase keypad2\nThe raw DEC usage code 90.\ncase keypad3\nThe raw DEC usage code 91.\ncase keypad4\nThe raw DEC usage code 92.\ncase keypad5\nThe raw DEC usage code 93.\ncase keypad6\nThe raw DEC usage code 94.\ncase keypad7\nThe raw DEC usage code 95.\ncase keypad8\nThe raw DEC usage code 96.\ncase keypad9\nThe raw DEC usage code 97.\ncase keypadAsterisk\nThe raw DEC usage code 85.\ncase keypadComma\nThe raw DEC usage code 133.\ncase keypadEnter\nThe raw DEC usage code 88.\ncase keypadEqualSign\nThe raw DEC usage code 103.\ncase keypadEqualSignAS400\nThe raw DEC usage code 134.\ncase keypadHyphen\nThe raw DEC usage code 86.\ncase keypadPeriod\nThe raw DEC usage code 99.\ncase keypadPlus\nThe raw DEC usage code 87.\ncase keypadSlash\nThe raw DEC usage code 84."
  },
  {
    "title": "UIKeyboardHIDUsage.keypadHyphen | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keypadhyphen",
    "html": "See Also\nKeypad keys\ncase keypad0\nThe raw DEC usage code 98.\ncase keypad1\nThe raw DEC usage code 89.\ncase keypad2\nThe raw DEC usage code 90.\ncase keypad3\nThe raw DEC usage code 91.\ncase keypad4\nThe raw DEC usage code 92.\ncase keypad5\nThe raw DEC usage code 93.\ncase keypad6\nThe raw DEC usage code 94.\ncase keypad7\nThe raw DEC usage code 95.\ncase keypad8\nThe raw DEC usage code 96.\ncase keypad9\nThe raw DEC usage code 97.\ncase keypadAsterisk\nThe raw DEC usage code 85.\ncase keypadComma\nThe raw DEC usage code 133.\ncase keypadEnter\nThe raw DEC usage code 88.\ncase keypadEqualSign\nThe raw DEC usage code 103.\ncase keypadEqualSignAS400\nThe raw DEC usage code 134.\ncase keypadNumLock\nThe raw DEC usage code 83.\ncase keypadPeriod\nThe raw DEC usage code 99.\ncase keypadPlus\nThe raw DEC usage code 87.\ncase keypadSlash\nThe raw DEC usage code 84."
  },
  {
    "title": "UIKeyboardHIDUsage.keypadEnter | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keypadenter",
    "html": "See Also\nKeypad keys\ncase keypad0\nThe raw DEC usage code 98.\ncase keypad1\nThe raw DEC usage code 89.\ncase keypad2\nThe raw DEC usage code 90.\ncase keypad3\nThe raw DEC usage code 91.\ncase keypad4\nThe raw DEC usage code 92.\ncase keypad5\nThe raw DEC usage code 93.\ncase keypad6\nThe raw DEC usage code 94.\ncase keypad7\nThe raw DEC usage code 95.\ncase keypad8\nThe raw DEC usage code 96.\ncase keypad9\nThe raw DEC usage code 97.\ncase keypadAsterisk\nThe raw DEC usage code 85.\ncase keypadComma\nThe raw DEC usage code 133.\ncase keypadEqualSign\nThe raw DEC usage code 103.\ncase keypadEqualSignAS400\nThe raw DEC usage code 134.\ncase keypadHyphen\nThe raw DEC usage code 86.\ncase keypadNumLock\nThe raw DEC usage code 83.\ncase keypadPeriod\nThe raw DEC usage code 99.\ncase keypadPlus\nThe raw DEC usage code 87.\ncase keypadSlash\nThe raw DEC usage code 84."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardCloseBracket | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardclosebracket",
    "html": "See Also\nSymbol keys\ncase keyboardBackslash\nThe raw DEC usage code 49.\ncase keyboardComma\nThe raw DEC usage code 54.\ncase keyboardEqualSign\nThe raw DEC usage code 46.\ncase keyboardHyphen\nThe raw DEC usage code 45.\ncase keyboardNonUSBackslash\nThe raw DEC usage code 100.\ncase keyboardNonUSPound\nThe raw DEC usage code 50.\ncase keyboardOpenBracket\nThe raw DEC usage code 47.\ncase keyboardPeriod\nThe raw DEC usage code 55.\ncase keyboardQuote\nThe raw DEC usage code 52.\ncase keyboardSemicolon\nThe raw DEC usage code 51.\ncase keyboardSeparator\nThe raw DEC usage code 159.\ncase keyboardSlash\nThe raw DEC usage code 56.\ncase keyboardSpacebar\nThe raw DEC usage code 44."
  },
  {
    "title": "UIKeyboardHIDUsage.keypad7 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keypad7",
    "html": "See Also\nKeypad keys\ncase keypad0\nThe raw DEC usage code 98.\ncase keypad1\nThe raw DEC usage code 89.\ncase keypad2\nThe raw DEC usage code 90.\ncase keypad3\nThe raw DEC usage code 91.\ncase keypad4\nThe raw DEC usage code 92.\ncase keypad5\nThe raw DEC usage code 93.\ncase keypad6\nThe raw DEC usage code 94.\ncase keypad8\nThe raw DEC usage code 96.\ncase keypad9\nThe raw DEC usage code 97.\ncase keypadAsterisk\nThe raw DEC usage code 85.\ncase keypadComma\nThe raw DEC usage code 133.\ncase keypadEnter\nThe raw DEC usage code 88.\ncase keypadEqualSign\nThe raw DEC usage code 103.\ncase keypadEqualSignAS400\nThe raw DEC usage code 134.\ncase keypadHyphen\nThe raw DEC usage code 86.\ncase keypadNumLock\nThe raw DEC usage code 83.\ncase keypadPeriod\nThe raw DEC usage code 99.\ncase keypadPlus\nThe raw DEC usage code 87.\ncase keypadSlash\nThe raw DEC usage code 84."
  },
  {
    "title": "UIKeyboardHIDUsage.keypad8 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keypad8",
    "html": "See Also\nKeypad keys\ncase keypad0\nThe raw DEC usage code 98.\ncase keypad1\nThe raw DEC usage code 89.\ncase keypad2\nThe raw DEC usage code 90.\ncase keypad3\nThe raw DEC usage code 91.\ncase keypad4\nThe raw DEC usage code 92.\ncase keypad5\nThe raw DEC usage code 93.\ncase keypad6\nThe raw DEC usage code 94.\ncase keypad7\nThe raw DEC usage code 95.\ncase keypad9\nThe raw DEC usage code 97.\ncase keypadAsterisk\nThe raw DEC usage code 85.\ncase keypadComma\nThe raw DEC usage code 133.\ncase keypadEnter\nThe raw DEC usage code 88.\ncase keypadEqualSign\nThe raw DEC usage code 103.\ncase keypadEqualSignAS400\nThe raw DEC usage code 134.\ncase keypadHyphen\nThe raw DEC usage code 86.\ncase keypadNumLock\nThe raw DEC usage code 83.\ncase keypadPeriod\nThe raw DEC usage code 99.\ncase keypadPlus\nThe raw DEC usage code 87.\ncase keypadSlash\nThe raw DEC usage code 84."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboard8 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboard8",
    "html": "See Also\nNumerical keys\ncase keyboard0\nThe raw DEC usage code 39.\ncase keyboard1\nThe raw DEC usage code 30.\ncase keyboard2\nThe raw DEC usage code 31.\ncase keyboard3\nThe raw DEC usage code 32.\ncase keyboard4\nThe raw DEC usage code 33.\ncase keyboard5\nThe raw DEC usage code 34.\ncase keyboard6\nThe raw DEC usage code 35.\ncase keyboard7\nThe raw DEC usage code 36.\ncase keyboard9\nThe raw DEC usage code 38."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardAlternateErase | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardalternateerase",
    "html": "See Also\nOther keys\ncase keyboardAgain\nThe raw DEC usage code 121.\ncase keyboardApplication\nThe raw DEC usage code 101.\ncase keyboardCancel\nThe raw DEC usage code 155.\ncase keyboardClear\nThe raw DEC usage code 156.\ncase keyboardClearOrAgain\nThe raw DEC usage code 162.\ncase keyboardCopy\nThe raw DEC usage code 124.\ncase keyboardCrSelOrProps\nThe raw DEC usage code 163.\ncase keyboardCut\nThe raw DEC usage code 129.\ncase keyboardExSel\nThe raw DEC usage code 164.\ncase keyboardExecute\nThe raw DEC usage code 116.\ncase keyboardFind\nThe raw DEC usage code 126.\ncase keyboardGraveAccentAndTilde\nThe raw DEC usage code 53.\ncase keyboardHelp\nThe raw DEC usage code 117.\ncase keyboardLeftGUI\nThe raw DEC usage code 227.\ncase keyboardMenu\nThe raw DEC usage code 118.\ncase keyboardOper\nThe raw DEC usage code 161.\ncase keyboardOut\nThe raw DEC usage code 160.\ncase keyboardPOSTFail\nThe raw DEC usage code 2.\ncase keyboardPaste\nThe raw DEC usage code 125.\ncase keyboardPower\nThe raw DEC usage code 102.\ncase keyboardPrintScreen\nThe raw DEC usage code 70.\ncase keyboardPrior\nThe raw DEC usage code 157.\ncase keyboardReturnOrEnter\nThe raw DEC usage code 40.\ncase keyboardRightGUI\nThe raw DEC usage code 231.\ncase keyboardSelect\nThe raw DEC usage code 119.\ncase keyboardSysReqOrAttention\nThe raw DEC usage code 154.\ncase keyboardUndo\nThe raw DEC usage code 122.\ncase keyboard_Reserved\nThe raw DEC usage code 65535."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardOpenBracket | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardopenbracket",
    "html": "See Also\nSymbol keys\ncase keyboardBackslash\nThe raw DEC usage code 49.\ncase keyboardCloseBracket\nThe raw DEC usage code 48.\ncase keyboardComma\nThe raw DEC usage code 54.\ncase keyboardEqualSign\nThe raw DEC usage code 46.\ncase keyboardHyphen\nThe raw DEC usage code 45.\ncase keyboardNonUSBackslash\nThe raw DEC usage code 100.\ncase keyboardNonUSPound\nThe raw DEC usage code 50.\ncase keyboardPeriod\nThe raw DEC usage code 55.\ncase keyboardQuote\nThe raw DEC usage code 52.\ncase keyboardSemicolon\nThe raw DEC usage code 51.\ncase keyboardSeparator\nThe raw DEC usage code 159.\ncase keyboardSlash\nThe raw DEC usage code 56.\ncase keyboardSpacebar\nThe raw DEC usage code 44."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardInternational7 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardinternational7",
    "html": "See Also\nInput method keys\nstatic var keyboardKanaSwitch: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Japanese language keyboards from Apple.\nstatic var keyboardHangul: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Korean language keyboards.\nstatic var keyboardAlphanumericSwitch: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Japanese language keyboards from Apple.\nstatic var keyboardHanja: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Korean language keyboards.\nstatic var keyboardKatakana: UIKeyboardHIDUsage\nAn alias for the LANG3 key on Japanese language keyboards.\nstatic var keyboardHiragana: UIKeyboardHIDUsage\nAn alias for the LANG4 key on Japanese language keyboards.\nstatic var keyboardZenkakuHankakuKanji: UIKeyboardHIDUsage\nAn alias for the LANG5 key on Japanese language keyboards.\ncase keyboardLANG1\nThe raw DEC usage code 144.\ncase keyboardLANG2\nThe raw DEC usage code 145.\ncase keyboardLANG3\nThe raw DEC usage code 146.\ncase keyboardLANG4\nThe raw DEC usage code 147.\ncase keyboardLANG5\nThe raw DEC usage code 148.\ncase keyboardLANG6\nThe raw DEC usage code 149.\ncase keyboardLANG7\nThe raw DEC usage code 150.\ncase keyboardLANG8\nThe raw DEC usage code 151.\ncase keyboardLANG9\nThe raw DEC usage code 152.\ncase keyboardInternational1\nThe raw DEC usage code 135.\ncase keyboardInternational2\nThe raw DEC usage code 136.\ncase keyboardInternational3\nThe raw DEC usage code 137.\ncase keyboardInternational4\nThe raw DEC usage code 138.\ncase keyboardInternational5\nThe raw DEC usage code 139.\ncase keyboardInternational6\nThe raw DEC usage code 140.\ncase keyboardInternational8\nThe raw DEC usage code 142.\ncase keyboardInternational9\nThe raw DEC usage code 143."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardAgain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardagain",
    "html": "See Also\nOther keys\ncase keyboardAlternateErase\nThe raw DEC usage code 153.\ncase keyboardApplication\nThe raw DEC usage code 101.\ncase keyboardCancel\nThe raw DEC usage code 155.\ncase keyboardClear\nThe raw DEC usage code 156.\ncase keyboardClearOrAgain\nThe raw DEC usage code 162.\ncase keyboardCopy\nThe raw DEC usage code 124.\ncase keyboardCrSelOrProps\nThe raw DEC usage code 163.\ncase keyboardCut\nThe raw DEC usage code 129.\ncase keyboardExSel\nThe raw DEC usage code 164.\ncase keyboardExecute\nThe raw DEC usage code 116.\ncase keyboardFind\nThe raw DEC usage code 126.\ncase keyboardGraveAccentAndTilde\nThe raw DEC usage code 53.\ncase keyboardHelp\nThe raw DEC usage code 117.\ncase keyboardLeftGUI\nThe raw DEC usage code 227.\ncase keyboardMenu\nThe raw DEC usage code 118.\ncase keyboardOper\nThe raw DEC usage code 161.\ncase keyboardOut\nThe raw DEC usage code 160.\ncase keyboardPOSTFail\nThe raw DEC usage code 2.\ncase keyboardPaste\nThe raw DEC usage code 125.\ncase keyboardPower\nThe raw DEC usage code 102.\ncase keyboardPrintScreen\nThe raw DEC usage code 70.\ncase keyboardPrior\nThe raw DEC usage code 157.\ncase keyboardReturnOrEnter\nThe raw DEC usage code 40.\ncase keyboardRightGUI\nThe raw DEC usage code 231.\ncase keyboardSelect\nThe raw DEC usage code 119.\ncase keyboardSysReqOrAttention\nThe raw DEC usage code 154.\ncase keyboardUndo\nThe raw DEC usage code 122.\ncase keyboard_Reserved\nThe raw DEC usage code 65535."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardLANG9 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardlang9",
    "html": "See Also\nInput method keys\nstatic var keyboardKanaSwitch: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Japanese language keyboards from Apple.\nstatic var keyboardHangul: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Korean language keyboards.\nstatic var keyboardAlphanumericSwitch: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Japanese language keyboards from Apple.\nstatic var keyboardHanja: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Korean language keyboards.\nstatic var keyboardKatakana: UIKeyboardHIDUsage\nAn alias for the LANG3 key on Japanese language keyboards.\nstatic var keyboardHiragana: UIKeyboardHIDUsage\nAn alias for the LANG4 key on Japanese language keyboards.\nstatic var keyboardZenkakuHankakuKanji: UIKeyboardHIDUsage\nAn alias for the LANG5 key on Japanese language keyboards.\ncase keyboardLANG1\nThe raw DEC usage code 144.\ncase keyboardLANG2\nThe raw DEC usage code 145.\ncase keyboardLANG3\nThe raw DEC usage code 146.\ncase keyboardLANG4\nThe raw DEC usage code 147.\ncase keyboardLANG5\nThe raw DEC usage code 148.\ncase keyboardLANG6\nThe raw DEC usage code 149.\ncase keyboardLANG7\nThe raw DEC usage code 150.\ncase keyboardLANG8\nThe raw DEC usage code 151.\ncase keyboardInternational1\nThe raw DEC usage code 135.\ncase keyboardInternational2\nThe raw DEC usage code 136.\ncase keyboardInternational3\nThe raw DEC usage code 137.\ncase keyboardInternational4\nThe raw DEC usage code 138.\ncase keyboardInternational5\nThe raw DEC usage code 139.\ncase keyboardInternational6\nThe raw DEC usage code 140.\ncase keyboardInternational7\nThe raw DEC usage code 141.\ncase keyboardInternational8\nThe raw DEC usage code 142.\ncase keyboardInternational9\nThe raw DEC usage code 143."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardInternational6 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardinternational6",
    "html": "See Also\nInput method keys\nstatic var keyboardKanaSwitch: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Japanese language keyboards from Apple.\nstatic var keyboardHangul: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Korean language keyboards.\nstatic var keyboardAlphanumericSwitch: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Japanese language keyboards from Apple.\nstatic var keyboardHanja: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Korean language keyboards.\nstatic var keyboardKatakana: UIKeyboardHIDUsage\nAn alias for the LANG3 key on Japanese language keyboards.\nstatic var keyboardHiragana: UIKeyboardHIDUsage\nAn alias for the LANG4 key on Japanese language keyboards.\nstatic var keyboardZenkakuHankakuKanji: UIKeyboardHIDUsage\nAn alias for the LANG5 key on Japanese language keyboards.\ncase keyboardLANG1\nThe raw DEC usage code 144.\ncase keyboardLANG2\nThe raw DEC usage code 145.\ncase keyboardLANG3\nThe raw DEC usage code 146.\ncase keyboardLANG4\nThe raw DEC usage code 147.\ncase keyboardLANG5\nThe raw DEC usage code 148.\ncase keyboardLANG6\nThe raw DEC usage code 149.\ncase keyboardLANG7\nThe raw DEC usage code 150.\ncase keyboardLANG8\nThe raw DEC usage code 151.\ncase keyboardLANG9\nThe raw DEC usage code 152.\ncase keyboardInternational1\nThe raw DEC usage code 135.\ncase keyboardInternational2\nThe raw DEC usage code 136.\ncase keyboardInternational3\nThe raw DEC usage code 137.\ncase keyboardInternational4\nThe raw DEC usage code 138.\ncase keyboardInternational5\nThe raw DEC usage code 139.\ncase keyboardInternational7\nThe raw DEC usage code 141.\ncase keyboardInternational8\nThe raw DEC usage code 142.\ncase keyboardInternational9\nThe raw DEC usage code 143."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardInternational5 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardinternational5",
    "html": "See Also\nInput method keys\nstatic var keyboardKanaSwitch: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Japanese language keyboards from Apple.\nstatic var keyboardHangul: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Korean language keyboards.\nstatic var keyboardAlphanumericSwitch: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Japanese language keyboards from Apple.\nstatic var keyboardHanja: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Korean language keyboards.\nstatic var keyboardKatakana: UIKeyboardHIDUsage\nAn alias for the LANG3 key on Japanese language keyboards.\nstatic var keyboardHiragana: UIKeyboardHIDUsage\nAn alias for the LANG4 key on Japanese language keyboards.\nstatic var keyboardZenkakuHankakuKanji: UIKeyboardHIDUsage\nAn alias for the LANG5 key on Japanese language keyboards.\ncase keyboardLANG1\nThe raw DEC usage code 144.\ncase keyboardLANG2\nThe raw DEC usage code 145.\ncase keyboardLANG3\nThe raw DEC usage code 146.\ncase keyboardLANG4\nThe raw DEC usage code 147.\ncase keyboardLANG5\nThe raw DEC usage code 148.\ncase keyboardLANG6\nThe raw DEC usage code 149.\ncase keyboardLANG7\nThe raw DEC usage code 150.\ncase keyboardLANG8\nThe raw DEC usage code 151.\ncase keyboardLANG9\nThe raw DEC usage code 152.\ncase keyboardInternational1\nThe raw DEC usage code 135.\ncase keyboardInternational2\nThe raw DEC usage code 136.\ncase keyboardInternational3\nThe raw DEC usage code 137.\ncase keyboardInternational4\nThe raw DEC usage code 138.\ncase keyboardInternational6\nThe raw DEC usage code 140.\ncase keyboardInternational7\nThe raw DEC usage code 141.\ncase keyboardInternational8\nThe raw DEC usage code 142.\ncase keyboardInternational9\nThe raw DEC usage code 143."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardInternational9 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardinternational9",
    "html": "See Also\nInput method keys\nstatic var keyboardKanaSwitch: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Japanese language keyboards from Apple.\nstatic var keyboardHangul: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Korean language keyboards.\nstatic var keyboardAlphanumericSwitch: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Japanese language keyboards from Apple.\nstatic var keyboardHanja: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Korean language keyboards.\nstatic var keyboardKatakana: UIKeyboardHIDUsage\nAn alias for the LANG3 key on Japanese language keyboards.\nstatic var keyboardHiragana: UIKeyboardHIDUsage\nAn alias for the LANG4 key on Japanese language keyboards.\nstatic var keyboardZenkakuHankakuKanji: UIKeyboardHIDUsage\nAn alias for the LANG5 key on Japanese language keyboards.\ncase keyboardLANG1\nThe raw DEC usage code 144.\ncase keyboardLANG2\nThe raw DEC usage code 145.\ncase keyboardLANG3\nThe raw DEC usage code 146.\ncase keyboardLANG4\nThe raw DEC usage code 147.\ncase keyboardLANG5\nThe raw DEC usage code 148.\ncase keyboardLANG6\nThe raw DEC usage code 149.\ncase keyboardLANG7\nThe raw DEC usage code 150.\ncase keyboardLANG8\nThe raw DEC usage code 151.\ncase keyboardLANG9\nThe raw DEC usage code 152.\ncase keyboardInternational1\nThe raw DEC usage code 135.\ncase keyboardInternational2\nThe raw DEC usage code 136.\ncase keyboardInternational3\nThe raw DEC usage code 137.\ncase keyboardInternational4\nThe raw DEC usage code 138.\ncase keyboardInternational5\nThe raw DEC usage code 139.\ncase keyboardInternational6\nThe raw DEC usage code 140.\ncase keyboardInternational7\nThe raw DEC usage code 141.\ncase keyboardInternational8\nThe raw DEC usage code 142."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardLANG6 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardlang6",
    "html": "See Also\nInput method keys\nstatic var keyboardKanaSwitch: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Japanese language keyboards from Apple.\nstatic var keyboardHangul: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Korean language keyboards.\nstatic var keyboardAlphanumericSwitch: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Japanese language keyboards from Apple.\nstatic var keyboardHanja: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Korean language keyboards.\nstatic var keyboardKatakana: UIKeyboardHIDUsage\nAn alias for the LANG3 key on Japanese language keyboards.\nstatic var keyboardHiragana: UIKeyboardHIDUsage\nAn alias for the LANG4 key on Japanese language keyboards.\nstatic var keyboardZenkakuHankakuKanji: UIKeyboardHIDUsage\nAn alias for the LANG5 key on Japanese language keyboards.\ncase keyboardLANG1\nThe raw DEC usage code 144.\ncase keyboardLANG2\nThe raw DEC usage code 145.\ncase keyboardLANG3\nThe raw DEC usage code 146.\ncase keyboardLANG4\nThe raw DEC usage code 147.\ncase keyboardLANG5\nThe raw DEC usage code 148.\ncase keyboardLANG7\nThe raw DEC usage code 150.\ncase keyboardLANG8\nThe raw DEC usage code 151.\ncase keyboardLANG9\nThe raw DEC usage code 152.\ncase keyboardInternational1\nThe raw DEC usage code 135.\ncase keyboardInternational2\nThe raw DEC usage code 136.\ncase keyboardInternational3\nThe raw DEC usage code 137.\ncase keyboardInternational4\nThe raw DEC usage code 138.\ncase keyboardInternational5\nThe raw DEC usage code 139.\ncase keyboardInternational6\nThe raw DEC usage code 140.\ncase keyboardInternational7\nThe raw DEC usage code 141.\ncase keyboardInternational8\nThe raw DEC usage code 142.\ncase keyboardInternational9\nThe raw DEC usage code 143."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardRightAlt | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardrightalt",
    "html": "See Also\nModifier keys\ncase keyboardCapsLock\nThe raw DEC usage code 57.\ncase keyboardLeftAlt\nThe raw DEC usage code 226.\ncase keyboardLeftControl\nThe raw DEC usage code 224.\ncase keyboardLeftShift\nThe raw DEC usage code 225.\ncase keyboardLockingCapsLock\nThe raw DEC usage code 130.\ncase keyboardLockingNumLock\nThe raw DEC usage code 131.\ncase keyboardLockingScrollLock\nThe raw DEC usage code 132.\ncase keyboardRightControl\nThe raw DEC usage code 228.\ncase keyboardRightShift\nThe raw DEC usage code 229.\ncase keyboardScrollLock\nThe raw DEC usage code 71."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardPageUp | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardpageup",
    "html": "See Also\nNavigation keys\ncase keyboardLeftArrow\nThe raw DEC usage code 80.\ncase keyboardRightArrow\nThe raw DEC usage code 79.\ncase keyboardUpArrow\nThe raw DEC usage code 82.\ncase keyboardDownArrow\nThe raw DEC usage code 81.\ncase keyboardPageDown\nThe raw DEC usage code 78.\ncase keyboardHome\nThe raw DEC usage code 74.\ncase keyboardEnd\nThe raw DEC usage code 77.\ncase keyboardDeleteForward\nThe raw DEC usage code 76.\ncase keyboardDeleteOrBackspace\nThe raw DEC usage code 42.\ncase keyboardEscape\nThe raw DEC usage code 41.\ncase keyboardInsert\nThe raw DEC usage code 73.\ncase keyboardReturn\nThe raw DEC usage code 158.\ncase keyboardTab\nThe raw DEC usage code 43."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardLockingScrollLock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardlockingscrolllock",
    "html": "See Also\nModifier keys\ncase keyboardCapsLock\nThe raw DEC usage code 57.\ncase keyboardLeftAlt\nThe raw DEC usage code 226.\ncase keyboardLeftControl\nThe raw DEC usage code 224.\ncase keyboardLeftShift\nThe raw DEC usage code 225.\ncase keyboardLockingCapsLock\nThe raw DEC usage code 130.\ncase keyboardLockingNumLock\nThe raw DEC usage code 131.\ncase keyboardRightAlt\nThe raw DEC usage code 230.\ncase keyboardRightControl\nThe raw DEC usage code 228.\ncase keyboardRightShift\nThe raw DEC usage code 229.\ncase keyboardScrollLock\nThe raw DEC usage code 71."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardB | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardb",
    "html": "See Also\nAlphabetical keys\ncase keyboardA\nThe raw DEC usage code 4.\ncase keyboardC\nThe raw DEC usage code 6.\ncase keyboardD\nThe raw DEC usage code 7.\ncase keyboardE\nThe raw DEC usage code 8.\ncase keyboardF\nThe raw DEC usage code 9.\ncase keyboardG\nThe raw DEC usage code 10.\ncase keyboardH\nThe raw DEC usage code 11.\ncase keyboardI\nThe raw DEC usage code 12.\ncase keyboardJ\nThe raw DEC usage code 13.\ncase keyboardK\nThe raw DEC usage code 14.\ncase keyboardL\nThe raw DEC usage code 15.\ncase keyboardM\nThe raw DEC usage code 16.\ncase keyboardN\nThe raw DEC usage code 17.\ncase keyboardO\nThe raw DEC usage code 18.\ncase keyboardP\nThe raw DEC usage code 19.\ncase keyboardQ\nThe raw DEC usage code 20.\ncase keyboardR\nThe raw DEC usage code 21.\ncase keyboardS\nThe raw DEC usage code 22.\ncase keyboardT\nThe raw DEC usage code 23.\ncase keyboardU\nThe raw DEC usage code 24.\ncase keyboardV\nThe raw DEC usage code 25.\ncase keyboardW\nThe raw DEC usage code 26.\ncase keyboardX\nThe raw DEC usage code 27.\ncase keyboardY\nThe raw DEC usage code 28.\ncase keyboardZ\nThe raw DEC usage code 29."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardInsert | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardinsert",
    "html": "See Also\nNavigation keys\ncase keyboardLeftArrow\nThe raw DEC usage code 80.\ncase keyboardRightArrow\nThe raw DEC usage code 79.\ncase keyboardUpArrow\nThe raw DEC usage code 82.\ncase keyboardDownArrow\nThe raw DEC usage code 81.\ncase keyboardPageUp\nThe raw DEC usage code 75.\ncase keyboardPageDown\nThe raw DEC usage code 78.\ncase keyboardHome\nThe raw DEC usage code 74.\ncase keyboardEnd\nThe raw DEC usage code 77.\ncase keyboardDeleteForward\nThe raw DEC usage code 76.\ncase keyboardDeleteOrBackspace\nThe raw DEC usage code 42.\ncase keyboardEscape\nThe raw DEC usage code 41.\ncase keyboardReturn\nThe raw DEC usage code 158.\ncase keyboardTab\nThe raw DEC usage code 43."
  },
  {
    "title": "arrowDirection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipopovercontroller/1624665-arrowdirection",
    "html": "Discussion\n\nThe default value of this property is unknown. When you present the popover, the value changes to reflect the actual direction of the arrow being used by the popover. When the popover is subsequently dismissed, the value of this property returns to unknown.\n\nSee Also\nGetting the popover attributes\nvar isPopoverVisible: Bool\nA Boolean value indicating whether the popover is currently visible.\nDeprecated"
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipopovercontroller/1624666-delegate",
    "html": "Discussion\n\nThe popover controller uses its delegate to determine whether it should dismiss the popover and provides a notification when such an event occurs. For more information about the methods you can implement in your delegate, see UIPopoverControllerDelegate."
  },
  {
    "title": "backgroundViewClass | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipopovercontroller/1624659-backgroundviewclass",
    "html": "Discussion\n\nThe default value of this property is nil, which indicates that the popover controller should use the default popover appearance. Setting this property to a value other than nil causes the popover controller to use the specified class to draw the popover’s background content. The class you specify must be a subclass of UIPopoverBackgroundView.\n\nSee Also\nCustomizing the popover appearance\nvar layoutMargins: UIEdgeInsets\nThe margins that define the portion of the screen in which it is permissible to display the popover.\nDeprecated\nvar backgroundColor: UIColor?\nThe color of the popover’s backdrop view.\nDeprecated"
  },
  {
    "title": "parameters | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uimutableusernotificationaction/1615354-parameters",
    "html": "Discussion\n\nUse this dictionary to specify any behavior-specific data for the action. For example, the UIUserNotificationActionBehaviorTextInput behavior supports the UIUserNotificationTextInputActionButtonTitleKey key, which lets you customize the title of the button displayed by the text input interface.\n\nSee Also\nConfiguring the action’s behavior\nvar activationMode: UIUserNotificationActivationMode\nThe mode in which to run the app when the action is performed.\nDeprecated\nvar isAuthenticationRequired: Bool\nA Boolean value indicating whether the user must unlock the device before the action is performed.\nDeprecated\nvar isDestructive: Bool\nA Boolean value indicating whether the action is destructive.\nDeprecated\nvar behavior: UIUserNotificationActionBehavior\nThe custom behavior (if any) that the action supports.\nDeprecated"
  },
  {
    "title": "perItemMetadataProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivityitemsconfiguration/3368126-peritemmetadataprovider",
    "html": "See Also\nManaging the Configuration\nvar localObject: Any?\nA local object that represents the configuration.\nvar metadataProvider: ((UIActivityItemsConfigurationMetadataKey) -> Any?)?\nA closure that provides metadata for the activity items.\nvar applicationActivitiesProvider: (() -> [UIActivity])?\nA closure that provides application acitivites for the activity items.\nstruct UIActivityItemsConfigurationMetadataKey\nA structure that defines keys for the metadata associated with an activity items configuration."
  },
  {
    "title": "metadataProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivityitemsconfiguration/3368125-metadataprovider",
    "html": "See Also\nManaging the Configuration\nvar localObject: Any?\nA local object that represents the configuration.\nvar perItemMetadataProvider: ((Int, UIActivityItemsConfigurationMetadataKey) -> Any?)?\nA closure that provides metadata for each activity item.\nvar applicationActivitiesProvider: (() -> [UIActivity])?\nA closure that provides application acitivites for the activity items.\nstruct UIActivityItemsConfigurationMetadataKey\nA structure that defines keys for the metadata associated with an activity items configuration."
  },
  {
    "title": "previewProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivityitemsconfiguration/3368127-previewprovider",
    "html": "See Also\nManaging Previews\nstruct UIActivityItemsConfigurationPreviewIntent\nA structure that specifies the types of activity item previews."
  },
  {
    "title": "init(objects:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivityitemsconfiguration/3368123-init",
    "html": "See Also\nCreating an Activity Items Configuration\ninit(itemProviders: [NSItemProvider])\nInitializes and returns an activity items configuration with the specified item providers."
  },
  {
    "title": "alertView(_:willDismissWithButtonIndex:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uialertviewdelegate/1620763-alertview",
    "html": "Parameters\nalertView\n\nThe alert view that is about to be dismissed.\n\nbuttonIndex\n\nThe index of the button that was clicked. The button indices start at 0. If this is the cancel button index, the alert view is canceling. If -1, the cancel button index is not set.\n\nDiscussion\n\nThis method is invoked before the animation begins and the view is hidden.\n\nSee Also\nCustomizing behavior\nfunc alertViewShouldEnableFirstOtherButton(UIAlertView) -> Bool\nSent to the delegate to determine whether the first non-cancel button in the alert should be enabled.\nDeprecated\nfunc willPresent(UIAlertView)\nSent to the delegate before a model view is presented to the user.\nDeprecated\nfunc didPresent(UIAlertView)\nSent to the delegate after an alert view is presented to the user.\nDeprecated\nfunc alertView(UIAlertView, didDismissWithButtonIndex: Int)\nSent to the delegate after an alert view is dismissed from the screen.\nDeprecated"
  },
  {
    "title": "alertViewCancel(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uialertviewdelegate/1620778-alertviewcancel",
    "html": "Parameters\nalertView\n\nThe alert view that will be canceled.\n\nDiscussion\n\nIf the alert view’s delegate does not implement this method, clicking the cancel button is simulated and the alert view is dismissed. Implement this method if you need to perform some actions before an alert view is canceled. An alert view can be canceled at any time by the system—for example, when the user taps the Home button. The alertView(_:willDismissWithButtonIndex:) and alertView(_:didDismissWithButtonIndex:) methods are invoked after this method."
  },
  {
    "title": "actionSheet(_:clickedButtonAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactionsheetdelegate/1622876-actionsheet",
    "html": "Parameters\nactionSheet\n\nThe action sheet containing the button.\n\nbuttonIndex\n\nThe position of the clicked button. The button indices start at 0.\n\nDiscussion\n\nThe receiver is automatically dismissed after this method is invoked."
  },
  {
    "title": "init(title:style:actions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipreviewactiongroup/1621514-init",
    "html": "Parameters\ntitle\n\nThe peek quick action group’s title\n\nstyle\n\nThe style for the peek quick action group.\n\nWhen the system presents the group’s submenu, each child quick action is displayed using its own style. The available styles are described in the UIPreviewActionStyle enumeration in UIPreviewActionItem.\n\nactions\n\nAn array of UIPreviewAction objects, displayed as the child quick actions for the peek quick action group.\n\nReturn Value\n\nA newly initialized peek quick action group with your specified title, style, and submenu of peek quick actions."
  },
  {
    "title": "didPresent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactionsheetdelegate/1622877-didpresent",
    "html": "Parameters\nactionSheet\n\nThe action sheet that was displayed.\n\nSee Also\nCustomizing behavior\nfunc willPresent(UIActionSheet)\nSent to the delegate before an action sheet is presented to the user.\nDeprecated\nfunc actionSheet(UIActionSheet, willDismissWithButtonIndex: Int)\nSent to the delegate before an action sheet is dismissed.\nDeprecated\nfunc actionSheet(UIActionSheet, didDismissWithButtonIndex: Int)\nSent to the delegate after an action sheet is dismissed from the screen.\nDeprecated"
  },
  {
    "title": "localObject | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivityitemsconfiguration/3368124-localobject",
    "html": "See Also\nManaging the Configuration\nvar metadataProvider: ((UIActivityItemsConfigurationMetadataKey) -> Any?)?\nA closure that provides metadata for the activity items.\nvar perItemMetadataProvider: ((Int, UIActivityItemsConfigurationMetadataKey) -> Any?)?\nA closure that provides metadata for each activity item.\nvar applicationActivitiesProvider: (() -> [UIActivity])?\nA closure that provides application acitivites for the activity items.\nstruct UIActivityItemsConfigurationMetadataKey\nA structure that defines keys for the metadata associated with an activity items configuration."
  },
  {
    "title": "popoverController(_:willRepositionPopoverTo:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uipopovercontrollerdelegate/1624664-popovercontroller",
    "html": "Parameters\npopoverController\n\nThe popover controller changing the position of its content.\n\nrect\n\nOn input, the proposed rectangle for the popover. This popover is in the coordinate space of the view in the view parameter. If you want to propose a different rectangle for the popover, put the new value in this parameter.\n\nview\n\nOn input, the proposed view for containing the popover. If you want to propose a different view for the popover, put the new view in this parameter.\n\nDiscussion\n\nFor popovers that were presented using the present(from:in:permittedArrowDirections:animated:) method, the popover controller calls this method when the interface orientation changes. Your delegate can use this method to adjust the proposed position of the popover. The popover controller does not call this method if you presented the popover from a bar button item.\n\nSee Also\nRelated Documentation\nView Controller Catalog for iOS"
  },
  {
    "title": "supportedInteractions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivityitemsconfiguration/3368128-supportedinteractions",
    "html": "Discussion\n\nThe default value is all known interactions.\n\nSee Also\nManaging Supported Interactions\nstruct UIActivityItemsConfigurationInteraction\nA structure that describes types of interactions."
  },
  {
    "title": "actionSheet(_:willDismissWithButtonIndex:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactionsheetdelegate/1622884-actionsheet",
    "html": "Parameters\nactionSheet\n\nThe action sheet that is about to be dismissed.\n\nbuttonIndex\n\nThe index of the button that was clicked. If this is the cancel button index, the action sheet is canceling. If -1, the cancel button index is not set.\n\nDiscussion\n\nThis method is invoked before the animation begins and the view is hidden.\n\nSee Also\nCustomizing behavior\nfunc willPresent(UIActionSheet)\nSent to the delegate before an action sheet is presented to the user.\nDeprecated\nfunc didPresent(UIActionSheet)\nSent to the delegate after an action sheet is presented to the user.\nDeprecated\nfunc actionSheet(UIActionSheet, didDismissWithButtonIndex: Int)\nSent to the delegate after an action sheet is dismissed from the screen.\nDeprecated"
  },
  {
    "title": "actionSheet(_:didDismissWithButtonIndex:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactionsheetdelegate/1622879-actionsheet",
    "html": "Parameters\nactionSheet\n\nThe action sheet that was dismissed.\n\nbuttonIndex\n\nThe index of the button that was clicked. The button indices start at 0. If this is the cancel button index, the action sheet is canceling. If -1, the cancel button index is not set.\n\nDiscussion\n\nThis method is invoked after the animation ends and the view is hidden.\n\nSee Also\nCustomizing behavior\nfunc willPresent(UIActionSheet)\nSent to the delegate before an action sheet is presented to the user.\nDeprecated\nfunc didPresent(UIActionSheet)\nSent to the delegate after an action sheet is presented to the user.\nDeprecated\nfunc actionSheet(UIActionSheet, willDismissWithButtonIndex: Int)\nSent to the delegate before an action sheet is dismissed.\nDeprecated"
  },
  {
    "title": "applicationActivitiesProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivityitemsconfiguration/3368121-applicationactivitiesprovider",
    "html": "See Also\nManaging the Configuration\nvar localObject: Any?\nA local object that represents the configuration.\nvar metadataProvider: ((UIActivityItemsConfigurationMetadataKey) -> Any?)?\nA closure that provides metadata for the activity items.\nvar perItemMetadataProvider: ((Int, UIActivityItemsConfigurationMetadataKey) -> Any?)?\nA closure that provides metadata for each activity item.\nstruct UIActivityItemsConfigurationMetadataKey\nA structure that defines keys for the metadata associated with an activity items configuration."
  },
  {
    "title": "init(itemProviders:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uiactivityitemsconfiguration/3368122-init",
    "html": "See Also\nCreating an Activity Items Configuration\ninit(objects: [NSItemProviderWriting])\nInitializes and returns an activity items configuration with the specified objects."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardLANG4 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardlang4",
    "html": "Discussion\n\nThe UIKeyboardHIDUsage.keyboardLANG4 key is the Hiragana key on Japanese language keyboards.\n\nSee Also\nInput method keys\nstatic var keyboardKanaSwitch: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Japanese language keyboards from Apple.\nstatic var keyboardHangul: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Korean language keyboards.\nstatic var keyboardAlphanumericSwitch: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Japanese language keyboards from Apple.\nstatic var keyboardHanja: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Korean language keyboards.\nstatic var keyboardKatakana: UIKeyboardHIDUsage\nAn alias for the LANG3 key on Japanese language keyboards.\nstatic var keyboardHiragana: UIKeyboardHIDUsage\nAn alias for the LANG4 key on Japanese language keyboards.\nstatic var keyboardZenkakuHankakuKanji: UIKeyboardHIDUsage\nAn alias for the LANG5 key on Japanese language keyboards.\ncase keyboardLANG1\nThe raw DEC usage code 144.\ncase keyboardLANG2\nThe raw DEC usage code 145.\ncase keyboardLANG3\nThe raw DEC usage code 146.\ncase keyboardLANG5\nThe raw DEC usage code 148.\ncase keyboardLANG6\nThe raw DEC usage code 149.\ncase keyboardLANG7\nThe raw DEC usage code 150.\ncase keyboardLANG8\nThe raw DEC usage code 151.\ncase keyboardLANG9\nThe raw DEC usage code 152.\ncase keyboardInternational1\nThe raw DEC usage code 135.\ncase keyboardInternational2\nThe raw DEC usage code 136.\ncase keyboardInternational3\nThe raw DEC usage code 137.\ncase keyboardInternational4\nThe raw DEC usage code 138.\ncase keyboardInternational5\nThe raw DEC usage code 139.\ncase keyboardInternational6\nThe raw DEC usage code 140.\ncase keyboardInternational7\nThe raw DEC usage code 141.\ncase keyboardInternational8\nThe raw DEC usage code 142.\ncase keyboardInternational9\nThe raw DEC usage code 143."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardLANG3 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardlang3",
    "html": "Discussion\n\nThe UIKeyboardHIDUsage.keyboardLANG3 key is the Katakana key on Japanese language keyboards.\n\nSee Also\nInput method keys\nstatic var keyboardKanaSwitch: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Japanese language keyboards from Apple.\nstatic var keyboardHangul: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Korean language keyboards.\nstatic var keyboardAlphanumericSwitch: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Japanese language keyboards from Apple.\nstatic var keyboardHanja: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Korean language keyboards.\nstatic var keyboardKatakana: UIKeyboardHIDUsage\nAn alias for the LANG3 key on Japanese language keyboards.\nstatic var keyboardHiragana: UIKeyboardHIDUsage\nAn alias for the LANG4 key on Japanese language keyboards.\nstatic var keyboardZenkakuHankakuKanji: UIKeyboardHIDUsage\nAn alias for the LANG5 key on Japanese language keyboards.\ncase keyboardLANG1\nThe raw DEC usage code 144.\ncase keyboardLANG2\nThe raw DEC usage code 145.\ncase keyboardLANG4\nThe raw DEC usage code 147.\ncase keyboardLANG5\nThe raw DEC usage code 148.\ncase keyboardLANG6\nThe raw DEC usage code 149.\ncase keyboardLANG7\nThe raw DEC usage code 150.\ncase keyboardLANG8\nThe raw DEC usage code 151.\ncase keyboardLANG9\nThe raw DEC usage code 152.\ncase keyboardInternational1\nThe raw DEC usage code 135.\ncase keyboardInternational2\nThe raw DEC usage code 136.\ncase keyboardInternational3\nThe raw DEC usage code 137.\ncase keyboardInternational4\nThe raw DEC usage code 138.\ncase keyboardInternational5\nThe raw DEC usage code 139.\ncase keyboardInternational6\nThe raw DEC usage code 140.\ncase keyboardInternational7\nThe raw DEC usage code 141.\ncase keyboardInternational8\nThe raw DEC usage code 142.\ncase keyboardInternational9\nThe raw DEC usage code 143."
  },
  {
    "title": "keyboardKatakana | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/3526223-keyboardkatakana",
    "html": "See Also\nInput method keys\nstatic var keyboardKanaSwitch: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Japanese language keyboards from Apple.\nstatic var keyboardHangul: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Korean language keyboards.\nstatic var keyboardAlphanumericSwitch: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Japanese language keyboards from Apple.\nstatic var keyboardHanja: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Korean language keyboards.\nstatic var keyboardHiragana: UIKeyboardHIDUsage\nAn alias for the LANG4 key on Japanese language keyboards.\nstatic var keyboardZenkakuHankakuKanji: UIKeyboardHIDUsage\nAn alias for the LANG5 key on Japanese language keyboards.\ncase keyboardLANG1\nThe raw DEC usage code 144.\ncase keyboardLANG2\nThe raw DEC usage code 145.\ncase keyboardLANG3\nThe raw DEC usage code 146.\ncase keyboardLANG4\nThe raw DEC usage code 147.\ncase keyboardLANG5\nThe raw DEC usage code 148.\ncase keyboardLANG6\nThe raw DEC usage code 149.\ncase keyboardLANG7\nThe raw DEC usage code 150.\ncase keyboardLANG8\nThe raw DEC usage code 151.\ncase keyboardLANG9\nThe raw DEC usage code 152.\ncase keyboardInternational1\nThe raw DEC usage code 135.\ncase keyboardInternational2\nThe raw DEC usage code 136.\ncase keyboardInternational3\nThe raw DEC usage code 137.\ncase keyboardInternational4\nThe raw DEC usage code 138.\ncase keyboardInternational5\nThe raw DEC usage code 139.\ncase keyboardInternational6\nThe raw DEC usage code 140.\ncase keyboardInternational7\nThe raw DEC usage code 141.\ncase keyboardInternational8\nThe raw DEC usage code 142.\ncase keyboardInternational9\nThe raw DEC usage code 143."
  },
  {
    "title": "keyboardAlphanumericSwitch | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/3526147-keyboardalphanumericswitch",
    "html": "See Also\nInput method keys\nstatic var keyboardKanaSwitch: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Japanese language keyboards from Apple.\nstatic var keyboardHangul: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Korean language keyboards.\nstatic var keyboardHanja: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Korean language keyboards.\nstatic var keyboardKatakana: UIKeyboardHIDUsage\nAn alias for the LANG3 key on Japanese language keyboards.\nstatic var keyboardHiragana: UIKeyboardHIDUsage\nAn alias for the LANG4 key on Japanese language keyboards.\nstatic var keyboardZenkakuHankakuKanji: UIKeyboardHIDUsage\nAn alias for the LANG5 key on Japanese language keyboards.\ncase keyboardLANG1\nThe raw DEC usage code 144.\ncase keyboardLANG2\nThe raw DEC usage code 145.\ncase keyboardLANG3\nThe raw DEC usage code 146.\ncase keyboardLANG4\nThe raw DEC usage code 147.\ncase keyboardLANG5\nThe raw DEC usage code 148.\ncase keyboardLANG6\nThe raw DEC usage code 149.\ncase keyboardLANG7\nThe raw DEC usage code 150.\ncase keyboardLANG8\nThe raw DEC usage code 151.\ncase keyboardLANG9\nThe raw DEC usage code 152.\ncase keyboardInternational1\nThe raw DEC usage code 135.\ncase keyboardInternational2\nThe raw DEC usage code 136.\ncase keyboardInternational3\nThe raw DEC usage code 137.\ncase keyboardInternational4\nThe raw DEC usage code 138.\ncase keyboardInternational5\nThe raw DEC usage code 139.\ncase keyboardInternational6\nThe raw DEC usage code 140.\ncase keyboardInternational7\nThe raw DEC usage code 141.\ncase keyboardInternational8\nThe raw DEC usage code 142.\ncase keyboardInternational9\nThe raw DEC usage code 143."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardStop | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardstop",
    "html": "See Also\nMedia keys\ncase keyboardPause\nThe raw DEC usage code 72.\ncase keyboardMute\nThe raw DEC usage code 127.\ncase keyboardVolumeUp\nThe raw DEC usage code 128.\ncase keyboardVolumeDown\nThe raw DEC usage code 129."
  },
  {
    "title": "keyboardKanaSwitch | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/3526222-keyboardkanaswitch",
    "html": "See Also\nInput method keys\nstatic var keyboardHangul: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Korean language keyboards.\nstatic var keyboardAlphanumericSwitch: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Japanese language keyboards from Apple.\nstatic var keyboardHanja: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Korean language keyboards.\nstatic var keyboardKatakana: UIKeyboardHIDUsage\nAn alias for the LANG3 key on Japanese language keyboards.\nstatic var keyboardHiragana: UIKeyboardHIDUsage\nAn alias for the LANG4 key on Japanese language keyboards.\nstatic var keyboardZenkakuHankakuKanji: UIKeyboardHIDUsage\nAn alias for the LANG5 key on Japanese language keyboards.\ncase keyboardLANG1\nThe raw DEC usage code 144.\ncase keyboardLANG2\nThe raw DEC usage code 145.\ncase keyboardLANG3\nThe raw DEC usage code 146.\ncase keyboardLANG4\nThe raw DEC usage code 147.\ncase keyboardLANG5\nThe raw DEC usage code 148.\ncase keyboardLANG6\nThe raw DEC usage code 149.\ncase keyboardLANG7\nThe raw DEC usage code 150.\ncase keyboardLANG8\nThe raw DEC usage code 151.\ncase keyboardLANG9\nThe raw DEC usage code 152.\ncase keyboardInternational1\nThe raw DEC usage code 135.\ncase keyboardInternational2\nThe raw DEC usage code 136.\ncase keyboardInternational3\nThe raw DEC usage code 137.\ncase keyboardInternational4\nThe raw DEC usage code 138.\ncase keyboardInternational5\nThe raw DEC usage code 139.\ncase keyboardInternational6\nThe raw DEC usage code 140.\ncase keyboardInternational7\nThe raw DEC usage code 141.\ncase keyboardInternational8\nThe raw DEC usage code 142.\ncase keyboardInternational9\nThe raw DEC usage code 143."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardMute | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardmute",
    "html": "See Also\nMedia keys\ncase keyboardPause\nThe raw DEC usage code 72.\ncase keyboardStop\nThe raw DEC usage code 120.\ncase keyboardVolumeUp\nThe raw DEC usage code 128.\ncase keyboardVolumeDown\nThe raw DEC usage code 129."
  },
  {
    "title": "UIKeyboardHIDUsage.keypadPeriod | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keypadperiod",
    "html": "See Also\nKeypad keys\ncase keypad0\nThe raw DEC usage code 98.\ncase keypad1\nThe raw DEC usage code 89.\ncase keypad2\nThe raw DEC usage code 90.\ncase keypad3\nThe raw DEC usage code 91.\ncase keypad4\nThe raw DEC usage code 92.\ncase keypad5\nThe raw DEC usage code 93.\ncase keypad6\nThe raw DEC usage code 94.\ncase keypad7\nThe raw DEC usage code 95.\ncase keypad8\nThe raw DEC usage code 96.\ncase keypad9\nThe raw DEC usage code 97.\ncase keypadAsterisk\nThe raw DEC usage code 85.\ncase keypadComma\nThe raw DEC usage code 133.\ncase keypadEnter\nThe raw DEC usage code 88.\ncase keypadEqualSign\nThe raw DEC usage code 103.\ncase keypadEqualSignAS400\nThe raw DEC usage code 134.\ncase keypadHyphen\nThe raw DEC usage code 86.\ncase keypadNumLock\nThe raw DEC usage code 83.\ncase keypadPlus\nThe raw DEC usage code 87.\ncase keypadSlash\nThe raw DEC usage code 84."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardVolumeDown | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardvolumedown",
    "html": "See Also\nMedia keys\ncase keyboardPause\nThe raw DEC usage code 72.\ncase keyboardStop\nThe raw DEC usage code 120.\ncase keyboardMute\nThe raw DEC usage code 127.\ncase keyboardVolumeUp\nThe raw DEC usage code 128."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardPause | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardpause",
    "html": "See Also\nMedia keys\ncase keyboardStop\nThe raw DEC usage code 120.\ncase keyboardMute\nThe raw DEC usage code 127.\ncase keyboardVolumeUp\nThe raw DEC usage code 128.\ncase keyboardVolumeDown\nThe raw DEC usage code 129."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardVolumeUp | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardvolumeup",
    "html": "See Also\nMedia keys\ncase keyboardPause\nThe raw DEC usage code 72.\ncase keyboardStop\nThe raw DEC usage code 120.\ncase keyboardMute\nThe raw DEC usage code 127.\ncase keyboardVolumeDown\nThe raw DEC usage code 129."
  },
  {
    "title": "UIKeyboardHIDUsage.keypad4 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keypad4",
    "html": "See Also\nKeypad keys\ncase keypad0\nThe raw DEC usage code 98.\ncase keypad1\nThe raw DEC usage code 89.\ncase keypad2\nThe raw DEC usage code 90.\ncase keypad3\nThe raw DEC usage code 91.\ncase keypad5\nThe raw DEC usage code 93.\ncase keypad6\nThe raw DEC usage code 94.\ncase keypad7\nThe raw DEC usage code 95.\ncase keypad8\nThe raw DEC usage code 96.\ncase keypad9\nThe raw DEC usage code 97.\ncase keypadAsterisk\nThe raw DEC usage code 85.\ncase keypadComma\nThe raw DEC usage code 133.\ncase keypadEnter\nThe raw DEC usage code 88.\ncase keypadEqualSign\nThe raw DEC usage code 103.\ncase keypadEqualSignAS400\nThe raw DEC usage code 134.\ncase keypadHyphen\nThe raw DEC usage code 86.\ncase keypadNumLock\nThe raw DEC usage code 83.\ncase keypadPeriod\nThe raw DEC usage code 99.\ncase keypadPlus\nThe raw DEC usage code 87.\ncase keypadSlash\nThe raw DEC usage code 84."
  },
  {
    "title": "UIKeyboardHIDUsage.keypadSlash | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keypadslash",
    "html": "See Also\nKeypad keys\ncase keypad0\nThe raw DEC usage code 98.\ncase keypad1\nThe raw DEC usage code 89.\ncase keypad2\nThe raw DEC usage code 90.\ncase keypad3\nThe raw DEC usage code 91.\ncase keypad4\nThe raw DEC usage code 92.\ncase keypad5\nThe raw DEC usage code 93.\ncase keypad6\nThe raw DEC usage code 94.\ncase keypad7\nThe raw DEC usage code 95.\ncase keypad8\nThe raw DEC usage code 96.\ncase keypad9\nThe raw DEC usage code 97.\ncase keypadAsterisk\nThe raw DEC usage code 85.\ncase keypadComma\nThe raw DEC usage code 133.\ncase keypadEnter\nThe raw DEC usage code 88.\ncase keypadEqualSign\nThe raw DEC usage code 103.\ncase keypadEqualSignAS400\nThe raw DEC usage code 134.\ncase keypadHyphen\nThe raw DEC usage code 86.\ncase keypadNumLock\nThe raw DEC usage code 83.\ncase keypadPeriod\nThe raw DEC usage code 99.\ncase keypadPlus\nThe raw DEC usage code 87."
  },
  {
    "title": "UIKeyboardHIDUsage.keypadPlus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keypadplus",
    "html": "See Also\nKeypad keys\ncase keypad0\nThe raw DEC usage code 98.\ncase keypad1\nThe raw DEC usage code 89.\ncase keypad2\nThe raw DEC usage code 90.\ncase keypad3\nThe raw DEC usage code 91.\ncase keypad4\nThe raw DEC usage code 92.\ncase keypad5\nThe raw DEC usage code 93.\ncase keypad6\nThe raw DEC usage code 94.\ncase keypad7\nThe raw DEC usage code 95.\ncase keypad8\nThe raw DEC usage code 96.\ncase keypad9\nThe raw DEC usage code 97.\ncase keypadAsterisk\nThe raw DEC usage code 85.\ncase keypadComma\nThe raw DEC usage code 133.\ncase keypadEnter\nThe raw DEC usage code 88.\ncase keypadEqualSign\nThe raw DEC usage code 103.\ncase keypadEqualSignAS400\nThe raw DEC usage code 134.\ncase keypadHyphen\nThe raw DEC usage code 86.\ncase keypadNumLock\nThe raw DEC usage code 83.\ncase keypadPeriod\nThe raw DEC usage code 99.\ncase keypadSlash\nThe raw DEC usage code 84."
  },
  {
    "title": "UIKeyboardHIDUsage.keypadEqualSignAS400 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keypadequalsignas400",
    "html": "See Also\nKeypad keys\ncase keypad0\nThe raw DEC usage code 98.\ncase keypad1\nThe raw DEC usage code 89.\ncase keypad2\nThe raw DEC usage code 90.\ncase keypad3\nThe raw DEC usage code 91.\ncase keypad4\nThe raw DEC usage code 92.\ncase keypad5\nThe raw DEC usage code 93.\ncase keypad6\nThe raw DEC usage code 94.\ncase keypad7\nThe raw DEC usage code 95.\ncase keypad8\nThe raw DEC usage code 96.\ncase keypad9\nThe raw DEC usage code 97.\ncase keypadAsterisk\nThe raw DEC usage code 85.\ncase keypadComma\nThe raw DEC usage code 133.\ncase keypadEnter\nThe raw DEC usage code 88.\ncase keypadEqualSign\nThe raw DEC usage code 103.\ncase keypadHyphen\nThe raw DEC usage code 86.\ncase keypadNumLock\nThe raw DEC usage code 83.\ncase keypadPeriod\nThe raw DEC usage code 99.\ncase keypadPlus\nThe raw DEC usage code 87.\ncase keypadSlash\nThe raw DEC usage code 84."
  },
  {
    "title": "Style dictionary keys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextinput/style_dictionary_keys",
    "html": "Overview\n\nThe style NSDictionary object is used for providing styling information for marked text (markedTextStyle property) and for providing text-styling information at a certain position (textStyling(at:in:) method).\n\nTopics\nConstants\nlet UITextInputTextBackgroundColorKey: String\nThe background color of the text.\nDeprecated\nlet UITextInputTextColorKey: String\nThe color of the text.\nDeprecated\nlet UITextInputTextFontKey: String\nThe font of the text.\nDeprecated\nSee Also\nDeprecated\ntypealias UITextWritingDirection\nThe writing direction of the text for the language.\nDeprecated"
  },
  {
    "title": "UIKeyboardHIDUsage.keypad9 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keypad9",
    "html": "See Also\nKeypad keys\ncase keypad0\nThe raw DEC usage code 98.\ncase keypad1\nThe raw DEC usage code 89.\ncase keypad2\nThe raw DEC usage code 90.\ncase keypad3\nThe raw DEC usage code 91.\ncase keypad4\nThe raw DEC usage code 92.\ncase keypad5\nThe raw DEC usage code 93.\ncase keypad6\nThe raw DEC usage code 94.\ncase keypad7\nThe raw DEC usage code 95.\ncase keypad8\nThe raw DEC usage code 96.\ncase keypadAsterisk\nThe raw DEC usage code 85.\ncase keypadComma\nThe raw DEC usage code 133.\ncase keypadEnter\nThe raw DEC usage code 88.\ncase keypadEqualSign\nThe raw DEC usage code 103.\ncase keypadEqualSignAS400\nThe raw DEC usage code 134.\ncase keypadHyphen\nThe raw DEC usage code 86.\ncase keypadNumLock\nThe raw DEC usage code 83.\ncase keypadPeriod\nThe raw DEC usage code 99.\ncase keypadPlus\nThe raw DEC usage code 87.\ncase keypadSlash\nThe raw DEC usage code 84."
  },
  {
    "title": "UIKeyboardHIDUsage.keypad1 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keypad1",
    "html": "See Also\nKeypad keys\ncase keypad0\nThe raw DEC usage code 98.\ncase keypad2\nThe raw DEC usage code 90.\ncase keypad3\nThe raw DEC usage code 91.\ncase keypad4\nThe raw DEC usage code 92.\ncase keypad5\nThe raw DEC usage code 93.\ncase keypad6\nThe raw DEC usage code 94.\ncase keypad7\nThe raw DEC usage code 95.\ncase keypad8\nThe raw DEC usage code 96.\ncase keypad9\nThe raw DEC usage code 97.\ncase keypadAsterisk\nThe raw DEC usage code 85.\ncase keypadComma\nThe raw DEC usage code 133.\ncase keypadEnter\nThe raw DEC usage code 88.\ncase keypadEqualSign\nThe raw DEC usage code 103.\ncase keypadEqualSignAS400\nThe raw DEC usage code 134.\ncase keypadHyphen\nThe raw DEC usage code 86.\ncase keypadNumLock\nThe raw DEC usage code 83.\ncase keypadPeriod\nThe raw DEC usage code 99.\ncase keypadPlus\nThe raw DEC usage code 87.\ncase keypadSlash\nThe raw DEC usage code 84."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardF14 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardf14",
    "html": "See Also\nFunction keys\ncase keyboardF1\nThe raw DEC usage code 58.\ncase keyboardF2\nThe raw DEC usage code 59.\ncase keyboardF3\nThe raw DEC usage code 60.\ncase keyboardF4\nThe raw DEC usage code 61.\ncase keyboardF5\nThe raw DEC usage code 62.\ncase keyboardF6\nThe raw DEC usage code 63.\ncase keyboardF7\nThe raw DEC usage code 64.\ncase keyboardF8\nThe raw DEC usage code 65.\ncase keyboardF9\nThe raw DEC usage code 66.\ncase keyboardF10\nThe raw DEC usage code 67.\ncase keyboardF11\nThe raw DEC usage code 68.\ncase keyboardF12\nThe raw DEC usage code 69.\ncase keyboardF13\nThe raw DEC usage code 104.\ncase keyboardF15\nThe raw DEC usage code 106.\ncase keyboardF16\nThe raw DEC usage code 107.\ncase keyboardF17\nThe raw DEC usage code 108.\ncase keyboardF18\nThe raw DEC usage code 109.\ncase keyboardF19\nThe raw DEC usage code 110.\ncase keyboardF20\nThe raw DEC usage code 111.\ncase keyboardF21\nThe raw DEC usage code 112.\ncase keyboardF22\nThe raw DEC usage code 113.\ncase keyboardF23\nThe raw DEC usage code 114.\ncase keyboardF24\nThe raw DEC usage code 115."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardF13 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardf13",
    "html": "See Also\nFunction keys\ncase keyboardF1\nThe raw DEC usage code 58.\ncase keyboardF2\nThe raw DEC usage code 59.\ncase keyboardF3\nThe raw DEC usage code 60.\ncase keyboardF4\nThe raw DEC usage code 61.\ncase keyboardF5\nThe raw DEC usage code 62.\ncase keyboardF6\nThe raw DEC usage code 63.\ncase keyboardF7\nThe raw DEC usage code 64.\ncase keyboardF8\nThe raw DEC usage code 65.\ncase keyboardF9\nThe raw DEC usage code 66.\ncase keyboardF10\nThe raw DEC usage code 67.\ncase keyboardF11\nThe raw DEC usage code 68.\ncase keyboardF12\nThe raw DEC usage code 69.\ncase keyboardF14\nThe raw DEC usage code 105.\ncase keyboardF15\nThe raw DEC usage code 106.\ncase keyboardF16\nThe raw DEC usage code 107.\ncase keyboardF17\nThe raw DEC usage code 108.\ncase keyboardF18\nThe raw DEC usage code 109.\ncase keyboardF19\nThe raw DEC usage code 110.\ncase keyboardF20\nThe raw DEC usage code 111.\ncase keyboardF21\nThe raw DEC usage code 112.\ncase keyboardF22\nThe raw DEC usage code 113.\ncase keyboardF23\nThe raw DEC usage code 114.\ncase keyboardF24\nThe raw DEC usage code 115."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardF8 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardf8",
    "html": "See Also\nFunction keys\ncase keyboardF1\nThe raw DEC usage code 58.\ncase keyboardF2\nThe raw DEC usage code 59.\ncase keyboardF3\nThe raw DEC usage code 60.\ncase keyboardF4\nThe raw DEC usage code 61.\ncase keyboardF5\nThe raw DEC usage code 62.\ncase keyboardF6\nThe raw DEC usage code 63.\ncase keyboardF7\nThe raw DEC usage code 64.\ncase keyboardF9\nThe raw DEC usage code 66.\ncase keyboardF10\nThe raw DEC usage code 67.\ncase keyboardF11\nThe raw DEC usage code 68.\ncase keyboardF12\nThe raw DEC usage code 69.\ncase keyboardF13\nThe raw DEC usage code 104.\ncase keyboardF14\nThe raw DEC usage code 105.\ncase keyboardF15\nThe raw DEC usage code 106.\ncase keyboardF16\nThe raw DEC usage code 107.\ncase keyboardF17\nThe raw DEC usage code 108.\ncase keyboardF18\nThe raw DEC usage code 109.\ncase keyboardF19\nThe raw DEC usage code 110.\ncase keyboardF20\nThe raw DEC usage code 111.\ncase keyboardF21\nThe raw DEC usage code 112.\ncase keyboardF22\nThe raw DEC usage code 113.\ncase keyboardF23\nThe raw DEC usage code 114.\ncase keyboardF24\nThe raw DEC usage code 115."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardF9 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardf9",
    "html": "See Also\nFunction keys\ncase keyboardF1\nThe raw DEC usage code 58.\ncase keyboardF2\nThe raw DEC usage code 59.\ncase keyboardF3\nThe raw DEC usage code 60.\ncase keyboardF4\nThe raw DEC usage code 61.\ncase keyboardF5\nThe raw DEC usage code 62.\ncase keyboardF6\nThe raw DEC usage code 63.\ncase keyboardF7\nThe raw DEC usage code 64.\ncase keyboardF8\nThe raw DEC usage code 65.\ncase keyboardF10\nThe raw DEC usage code 67.\ncase keyboardF11\nThe raw DEC usage code 68.\ncase keyboardF12\nThe raw DEC usage code 69.\ncase keyboardF13\nThe raw DEC usage code 104.\ncase keyboardF14\nThe raw DEC usage code 105.\ncase keyboardF15\nThe raw DEC usage code 106.\ncase keyboardF16\nThe raw DEC usage code 107.\ncase keyboardF17\nThe raw DEC usage code 108.\ncase keyboardF18\nThe raw DEC usage code 109.\ncase keyboardF19\nThe raw DEC usage code 110.\ncase keyboardF20\nThe raw DEC usage code 111.\ncase keyboardF21\nThe raw DEC usage code 112.\ncase keyboardF22\nThe raw DEC usage code 113.\ncase keyboardF23\nThe raw DEC usage code 114.\ncase keyboardF24\nThe raw DEC usage code 115."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardF4 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardf4",
    "html": "See Also\nFunction keys\ncase keyboardF1\nThe raw DEC usage code 58.\ncase keyboardF2\nThe raw DEC usage code 59.\ncase keyboardF3\nThe raw DEC usage code 60.\ncase keyboardF5\nThe raw DEC usage code 62.\ncase keyboardF6\nThe raw DEC usage code 63.\ncase keyboardF7\nThe raw DEC usage code 64.\ncase keyboardF8\nThe raw DEC usage code 65.\ncase keyboardF9\nThe raw DEC usage code 66.\ncase keyboardF10\nThe raw DEC usage code 67.\ncase keyboardF11\nThe raw DEC usage code 68.\ncase keyboardF12\nThe raw DEC usage code 69.\ncase keyboardF13\nThe raw DEC usage code 104.\ncase keyboardF14\nThe raw DEC usage code 105.\ncase keyboardF15\nThe raw DEC usage code 106.\ncase keyboardF16\nThe raw DEC usage code 107.\ncase keyboardF17\nThe raw DEC usage code 108.\ncase keyboardF18\nThe raw DEC usage code 109.\ncase keyboardF19\nThe raw DEC usage code 110.\ncase keyboardF20\nThe raw DEC usage code 111.\ncase keyboardF21\nThe raw DEC usage code 112.\ncase keyboardF22\nThe raw DEC usage code 113.\ncase keyboardF23\nThe raw DEC usage code 114.\ncase keyboardF24\nThe raw DEC usage code 115."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardF3 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardf3",
    "html": "See Also\nFunction keys\ncase keyboardF1\nThe raw DEC usage code 58.\ncase keyboardF2\nThe raw DEC usage code 59.\ncase keyboardF4\nThe raw DEC usage code 61.\ncase keyboardF5\nThe raw DEC usage code 62.\ncase keyboardF6\nThe raw DEC usage code 63.\ncase keyboardF7\nThe raw DEC usage code 64.\ncase keyboardF8\nThe raw DEC usage code 65.\ncase keyboardF9\nThe raw DEC usage code 66.\ncase keyboardF10\nThe raw DEC usage code 67.\ncase keyboardF11\nThe raw DEC usage code 68.\ncase keyboardF12\nThe raw DEC usage code 69.\ncase keyboardF13\nThe raw DEC usage code 104.\ncase keyboardF14\nThe raw DEC usage code 105.\ncase keyboardF15\nThe raw DEC usage code 106.\ncase keyboardF16\nThe raw DEC usage code 107.\ncase keyboardF17\nThe raw DEC usage code 108.\ncase keyboardF18\nThe raw DEC usage code 109.\ncase keyboardF19\nThe raw DEC usage code 110.\ncase keyboardF20\nThe raw DEC usage code 111.\ncase keyboardF21\nThe raw DEC usage code 112.\ncase keyboardF22\nThe raw DEC usage code 113.\ncase keyboardF23\nThe raw DEC usage code 114.\ncase keyboardF24\nThe raw DEC usage code 115."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardF7 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardf7",
    "html": "See Also\nFunction keys\ncase keyboardF1\nThe raw DEC usage code 58.\ncase keyboardF2\nThe raw DEC usage code 59.\ncase keyboardF3\nThe raw DEC usage code 60.\ncase keyboardF4\nThe raw DEC usage code 61.\ncase keyboardF5\nThe raw DEC usage code 62.\ncase keyboardF6\nThe raw DEC usage code 63.\ncase keyboardF8\nThe raw DEC usage code 65.\ncase keyboardF9\nThe raw DEC usage code 66.\ncase keyboardF10\nThe raw DEC usage code 67.\ncase keyboardF11\nThe raw DEC usage code 68.\ncase keyboardF12\nThe raw DEC usage code 69.\ncase keyboardF13\nThe raw DEC usage code 104.\ncase keyboardF14\nThe raw DEC usage code 105.\ncase keyboardF15\nThe raw DEC usage code 106.\ncase keyboardF16\nThe raw DEC usage code 107.\ncase keyboardF17\nThe raw DEC usage code 108.\ncase keyboardF18\nThe raw DEC usage code 109.\ncase keyboardF19\nThe raw DEC usage code 110.\ncase keyboardF20\nThe raw DEC usage code 111.\ncase keyboardF21\nThe raw DEC usage code 112.\ncase keyboardF22\nThe raw DEC usage code 113.\ncase keyboardF23\nThe raw DEC usage code 114.\ncase keyboardF24\nThe raw DEC usage code 115."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardComma | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardcomma",
    "html": "See Also\nSymbol keys\ncase keyboardBackslash\nThe raw DEC usage code 49.\ncase keyboardCloseBracket\nThe raw DEC usage code 48.\ncase keyboardEqualSign\nThe raw DEC usage code 46.\ncase keyboardHyphen\nThe raw DEC usage code 45.\ncase keyboardNonUSBackslash\nThe raw DEC usage code 100.\ncase keyboardNonUSPound\nThe raw DEC usage code 50.\ncase keyboardOpenBracket\nThe raw DEC usage code 47.\ncase keyboardPeriod\nThe raw DEC usage code 55.\ncase keyboardQuote\nThe raw DEC usage code 52.\ncase keyboardSemicolon\nThe raw DEC usage code 51.\ncase keyboardSeparator\nThe raw DEC usage code 159.\ncase keyboardSlash\nThe raw DEC usage code 56.\ncase keyboardSpacebar\nThe raw DEC usage code 44."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardF1 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardf1",
    "html": "See Also\nFunction keys\ncase keyboardF2\nThe raw DEC usage code 59.\ncase keyboardF3\nThe raw DEC usage code 60.\ncase keyboardF4\nThe raw DEC usage code 61.\ncase keyboardF5\nThe raw DEC usage code 62.\ncase keyboardF6\nThe raw DEC usage code 63.\ncase keyboardF7\nThe raw DEC usage code 64.\ncase keyboardF8\nThe raw DEC usage code 65.\ncase keyboardF9\nThe raw DEC usage code 66.\ncase keyboardF10\nThe raw DEC usage code 67.\ncase keyboardF11\nThe raw DEC usage code 68.\ncase keyboardF12\nThe raw DEC usage code 69.\ncase keyboardF13\nThe raw DEC usage code 104.\ncase keyboardF14\nThe raw DEC usage code 105.\ncase keyboardF15\nThe raw DEC usage code 106.\ncase keyboardF16\nThe raw DEC usage code 107.\ncase keyboardF17\nThe raw DEC usage code 108.\ncase keyboardF18\nThe raw DEC usage code 109.\ncase keyboardF19\nThe raw DEC usage code 110.\ncase keyboardF20\nThe raw DEC usage code 111.\ncase keyboardF21\nThe raw DEC usage code 112.\ncase keyboardF22\nThe raw DEC usage code 113.\ncase keyboardF23\nThe raw DEC usage code 114.\ncase keyboardF24\nThe raw DEC usage code 115."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardNonUSPound | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardnonuspound",
    "html": "See Also\nSymbol keys\ncase keyboardBackslash\nThe raw DEC usage code 49.\ncase keyboardCloseBracket\nThe raw DEC usage code 48.\ncase keyboardComma\nThe raw DEC usage code 54.\ncase keyboardEqualSign\nThe raw DEC usage code 46.\ncase keyboardHyphen\nThe raw DEC usage code 45.\ncase keyboardNonUSBackslash\nThe raw DEC usage code 100.\ncase keyboardOpenBracket\nThe raw DEC usage code 47.\ncase keyboardPeriod\nThe raw DEC usage code 55.\ncase keyboardQuote\nThe raw DEC usage code 52.\ncase keyboardSemicolon\nThe raw DEC usage code 51.\ncase keyboardSeparator\nThe raw DEC usage code 159.\ncase keyboardSlash\nThe raw DEC usage code 56.\ncase keyboardSpacebar\nThe raw DEC usage code 44."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardPeriod | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardperiod",
    "html": "See Also\nSymbol keys\ncase keyboardBackslash\nThe raw DEC usage code 49.\ncase keyboardCloseBracket\nThe raw DEC usage code 48.\ncase keyboardComma\nThe raw DEC usage code 54.\ncase keyboardEqualSign\nThe raw DEC usage code 46.\ncase keyboardHyphen\nThe raw DEC usage code 45.\ncase keyboardNonUSBackslash\nThe raw DEC usage code 100.\ncase keyboardNonUSPound\nThe raw DEC usage code 50.\ncase keyboardOpenBracket\nThe raw DEC usage code 47.\ncase keyboardQuote\nThe raw DEC usage code 52.\ncase keyboardSemicolon\nThe raw DEC usage code 51.\ncase keyboardSeparator\nThe raw DEC usage code 159.\ncase keyboardSlash\nThe raw DEC usage code 56.\ncase keyboardSpacebar\nThe raw DEC usage code 44."
  },
  {
    "title": "position(from:in:offset:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextinput/1614515-position",
    "html": "Required\n\nParameters\nposition\n\nA custom UITextPosition object that represents a location in a document.\n\ndirection\n\nA UITextLayoutDirection constant that represents the direction of the offset from position. Return nil if the computed text position is less than 0 or greater than the length of the backing string.\n\noffset\n\nA character offset from position.\n\nDiscussion\n\nFor an example of an implementation of the related method, position(from:offset:), see Using Text Kit to Draw and Manage Text in Text Programming Guide for iOS.\n\nSee Also\nComputing text ranges and text positions\nfunc textRange(from: UITextPosition, to: UITextPosition) -> UITextRange?\nReturns the range between two text positions.\n\nRequired\n\nfunc position(from: UITextPosition, offset: Int) -> UITextPosition?\nReturns the text position at a specified offset from another text position.\n\nRequired\n\nvar beginningOfDocument: UITextPosition\nThe text position for the beginning of a document.\n\nRequired\n\nvar endOfDocument: UITextPosition\nThe text position for the end of a document.\n\nRequired"
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardQuote | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardquote",
    "html": "See Also\nSymbol keys\ncase keyboardBackslash\nThe raw DEC usage code 49.\ncase keyboardCloseBracket\nThe raw DEC usage code 48.\ncase keyboardComma\nThe raw DEC usage code 54.\ncase keyboardEqualSign\nThe raw DEC usage code 46.\ncase keyboardHyphen\nThe raw DEC usage code 45.\ncase keyboardNonUSBackslash\nThe raw DEC usage code 100.\ncase keyboardNonUSPound\nThe raw DEC usage code 50.\ncase keyboardOpenBracket\nThe raw DEC usage code 47.\ncase keyboardPeriod\nThe raw DEC usage code 55.\ncase keyboardSemicolon\nThe raw DEC usage code 51.\ncase keyboardSeparator\nThe raw DEC usage code 159.\ncase keyboardSlash\nThe raw DEC usage code 56.\ncase keyboardSpacebar\nThe raw DEC usage code 44."
  },
  {
    "title": "selectedTextRange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextinput/1614541-selectedtextrange",
    "html": "Required\n\nDiscussion\n\nIf the text range has a length, it indicates the currently selected text. If it has zero length, it indicates the caret (insertion point). If the text-range object is nil, it indicates that there is no current selection.\n\nSee Also\nWorking with marked and selected text\nvar markedTextRange: UITextRange?\nThe range of currently marked text in a document.\n\nRequired\n\nvar markedTextStyle: [NSAttributedString.Key : Any]?\nA dictionary of attributes that describes how to draw marked text.\n\nRequired\n\nfunc setMarkedText(String?, selectedRange: NSRange)\nInserts the provided text and marks it to indicate that it is part of an active input session.\n\nRequired\n\nfunc setAttributedMarkedText(NSAttributedString?, selectedRange: NSRange)\nInserts the provided styled text and marks it to indicate that it is part of an active input session.\nfunc unmarkText()\nUnmarks the currently marked text.\n\nRequired\n\nvar selectionAffinity: UITextStorageDirection\nThe desired location for the insertion point.\nRelated Documentation\nvar isEmpty: Bool\nA Boolean value that indicates whether the range of text represented by the receiver is zero-length."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardS | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboards",
    "html": "See Also\nAlphabetical keys\ncase keyboardA\nThe raw DEC usage code 4.\ncase keyboardB\nThe raw DEC usage code 5.\ncase keyboardC\nThe raw DEC usage code 6.\ncase keyboardD\nThe raw DEC usage code 7.\ncase keyboardE\nThe raw DEC usage code 8.\ncase keyboardF\nThe raw DEC usage code 9.\ncase keyboardG\nThe raw DEC usage code 10.\ncase keyboardH\nThe raw DEC usage code 11.\ncase keyboardI\nThe raw DEC usage code 12.\ncase keyboardJ\nThe raw DEC usage code 13.\ncase keyboardK\nThe raw DEC usage code 14.\ncase keyboardL\nThe raw DEC usage code 15.\ncase keyboardM\nThe raw DEC usage code 16.\ncase keyboardN\nThe raw DEC usage code 17.\ncase keyboardO\nThe raw DEC usage code 18.\ncase keyboardP\nThe raw DEC usage code 19.\ncase keyboardQ\nThe raw DEC usage code 20.\ncase keyboardR\nThe raw DEC usage code 21.\ncase keyboardT\nThe raw DEC usage code 23.\ncase keyboardU\nThe raw DEC usage code 24.\ncase keyboardV\nThe raw DEC usage code 25.\ncase keyboardW\nThe raw DEC usage code 26.\ncase keyboardX\nThe raw DEC usage code 27.\ncase keyboardY\nThe raw DEC usage code 28.\ncase keyboardZ\nThe raw DEC usage code 29."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardLANG5 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardlang5",
    "html": "Discussion\n\nThe UIKeyboardHIDUsage.keyboardLANG5 key is the Zenkaku/Hankaku key on Japanese language keyboards.\n\nSee Also\nInput method keys\nstatic var keyboardKanaSwitch: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Japanese language keyboards from Apple.\nstatic var keyboardHangul: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Korean language keyboards.\nstatic var keyboardAlphanumericSwitch: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Japanese language keyboards from Apple.\nstatic var keyboardHanja: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Korean language keyboards.\nstatic var keyboardKatakana: UIKeyboardHIDUsage\nAn alias for the LANG3 key on Japanese language keyboards.\nstatic var keyboardHiragana: UIKeyboardHIDUsage\nAn alias for the LANG4 key on Japanese language keyboards.\nstatic var keyboardZenkakuHankakuKanji: UIKeyboardHIDUsage\nAn alias for the LANG5 key on Japanese language keyboards.\ncase keyboardLANG1\nThe raw DEC usage code 144.\ncase keyboardLANG2\nThe raw DEC usage code 145.\ncase keyboardLANG3\nThe raw DEC usage code 146.\ncase keyboardLANG4\nThe raw DEC usage code 147.\ncase keyboardLANG6\nThe raw DEC usage code 149.\ncase keyboardLANG7\nThe raw DEC usage code 150.\ncase keyboardLANG8\nThe raw DEC usage code 151.\ncase keyboardLANG9\nThe raw DEC usage code 152.\ncase keyboardInternational1\nThe raw DEC usage code 135.\ncase keyboardInternational2\nThe raw DEC usage code 136.\ncase keyboardInternational3\nThe raw DEC usage code 137.\ncase keyboardInternational4\nThe raw DEC usage code 138.\ncase keyboardInternational5\nThe raw DEC usage code 139.\ncase keyboardInternational6\nThe raw DEC usage code 140.\ncase keyboardInternational7\nThe raw DEC usage code 141.\ncase keyboardInternational8\nThe raw DEC usage code 142.\ncase keyboardInternational9\nThe raw DEC usage code 143."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardP | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardp",
    "html": "See Also\nAlphabetical keys\ncase keyboardA\nThe raw DEC usage code 4.\ncase keyboardB\nThe raw DEC usage code 5.\ncase keyboardC\nThe raw DEC usage code 6.\ncase keyboardD\nThe raw DEC usage code 7.\ncase keyboardE\nThe raw DEC usage code 8.\ncase keyboardF\nThe raw DEC usage code 9.\ncase keyboardG\nThe raw DEC usage code 10.\ncase keyboardH\nThe raw DEC usage code 11.\ncase keyboardI\nThe raw DEC usage code 12.\ncase keyboardJ\nThe raw DEC usage code 13.\ncase keyboardK\nThe raw DEC usage code 14.\ncase keyboardL\nThe raw DEC usage code 15.\ncase keyboardM\nThe raw DEC usage code 16.\ncase keyboardN\nThe raw DEC usage code 17.\ncase keyboardO\nThe raw DEC usage code 18.\ncase keyboardQ\nThe raw DEC usage code 20.\ncase keyboardR\nThe raw DEC usage code 21.\ncase keyboardS\nThe raw DEC usage code 22.\ncase keyboardT\nThe raw DEC usage code 23.\ncase keyboardU\nThe raw DEC usage code 24.\ncase keyboardV\nThe raw DEC usage code 25.\ncase keyboardW\nThe raw DEC usage code 26.\ncase keyboardX\nThe raw DEC usage code 27.\ncase keyboardY\nThe raw DEC usage code 28.\ncase keyboardZ\nThe raw DEC usage code 29."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardClear | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardclear",
    "html": "See Also\nOther keys\ncase keyboardAgain\nThe raw DEC usage code 121.\ncase keyboardAlternateErase\nThe raw DEC usage code 153.\ncase keyboardApplication\nThe raw DEC usage code 101.\ncase keyboardCancel\nThe raw DEC usage code 155.\ncase keyboardClearOrAgain\nThe raw DEC usage code 162.\ncase keyboardCopy\nThe raw DEC usage code 124.\ncase keyboardCrSelOrProps\nThe raw DEC usage code 163.\ncase keyboardCut\nThe raw DEC usage code 129.\ncase keyboardExSel\nThe raw DEC usage code 164.\ncase keyboardExecute\nThe raw DEC usage code 116.\ncase keyboardFind\nThe raw DEC usage code 126.\ncase keyboardGraveAccentAndTilde\nThe raw DEC usage code 53.\ncase keyboardHelp\nThe raw DEC usage code 117.\ncase keyboardLeftGUI\nThe raw DEC usage code 227.\ncase keyboardMenu\nThe raw DEC usage code 118.\ncase keyboardOper\nThe raw DEC usage code 161.\ncase keyboardOut\nThe raw DEC usage code 160.\ncase keyboardPOSTFail\nThe raw DEC usage code 2.\ncase keyboardPaste\nThe raw DEC usage code 125.\ncase keyboardPower\nThe raw DEC usage code 102.\ncase keyboardPrintScreen\nThe raw DEC usage code 70.\ncase keyboardPrior\nThe raw DEC usage code 157.\ncase keyboardReturnOrEnter\nThe raw DEC usage code 40.\ncase keyboardRightGUI\nThe raw DEC usage code 231.\ncase keyboardSelect\nThe raw DEC usage code 119.\ncase keyboardSysReqOrAttention\nThe raw DEC usage code 154.\ncase keyboardUndo\nThe raw DEC usage code 122.\ncase keyboard_Reserved\nThe raw DEC usage code 65535."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardApplication | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardapplication",
    "html": "See Also\nOther keys\ncase keyboardAgain\nThe raw DEC usage code 121.\ncase keyboardAlternateErase\nThe raw DEC usage code 153.\ncase keyboardCancel\nThe raw DEC usage code 155.\ncase keyboardClear\nThe raw DEC usage code 156.\ncase keyboardClearOrAgain\nThe raw DEC usage code 162.\ncase keyboardCopy\nThe raw DEC usage code 124.\ncase keyboardCrSelOrProps\nThe raw DEC usage code 163.\ncase keyboardCut\nThe raw DEC usage code 129.\ncase keyboardExSel\nThe raw DEC usage code 164.\ncase keyboardExecute\nThe raw DEC usage code 116.\ncase keyboardFind\nThe raw DEC usage code 126.\ncase keyboardGraveAccentAndTilde\nThe raw DEC usage code 53.\ncase keyboardHelp\nThe raw DEC usage code 117.\ncase keyboardLeftGUI\nThe raw DEC usage code 227.\ncase keyboardMenu\nThe raw DEC usage code 118.\ncase keyboardOper\nThe raw DEC usage code 161.\ncase keyboardOut\nThe raw DEC usage code 160.\ncase keyboardPOSTFail\nThe raw DEC usage code 2.\ncase keyboardPaste\nThe raw DEC usage code 125.\ncase keyboardPower\nThe raw DEC usage code 102.\ncase keyboardPrintScreen\nThe raw DEC usage code 70.\ncase keyboardPrior\nThe raw DEC usage code 157.\ncase keyboardReturnOrEnter\nThe raw DEC usage code 40.\ncase keyboardRightGUI\nThe raw DEC usage code 231.\ncase keyboardSelect\nThe raw DEC usage code 119.\ncase keyboardSysReqOrAttention\nThe raw DEC usage code 154.\ncase keyboardUndo\nThe raw DEC usage code 122.\ncase keyboard_Reserved\nThe raw DEC usage code 65535."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardClearOrAgain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardclearoragain",
    "html": "See Also\nOther keys\ncase keyboardAgain\nThe raw DEC usage code 121.\ncase keyboardAlternateErase\nThe raw DEC usage code 153.\ncase keyboardApplication\nThe raw DEC usage code 101.\ncase keyboardCancel\nThe raw DEC usage code 155.\ncase keyboardClear\nThe raw DEC usage code 156.\ncase keyboardCopy\nThe raw DEC usage code 124.\ncase keyboardCrSelOrProps\nThe raw DEC usage code 163.\ncase keyboardCut\nThe raw DEC usage code 129.\ncase keyboardExSel\nThe raw DEC usage code 164.\ncase keyboardExecute\nThe raw DEC usage code 116.\ncase keyboardFind\nThe raw DEC usage code 126.\ncase keyboardGraveAccentAndTilde\nThe raw DEC usage code 53.\ncase keyboardHelp\nThe raw DEC usage code 117.\ncase keyboardLeftGUI\nThe raw DEC usage code 227.\ncase keyboardMenu\nThe raw DEC usage code 118.\ncase keyboardOper\nThe raw DEC usage code 161.\ncase keyboardOut\nThe raw DEC usage code 160.\ncase keyboardPOSTFail\nThe raw DEC usage code 2.\ncase keyboardPaste\nThe raw DEC usage code 125.\ncase keyboardPower\nThe raw DEC usage code 102.\ncase keyboardPrintScreen\nThe raw DEC usage code 70.\ncase keyboardPrior\nThe raw DEC usage code 157.\ncase keyboardReturnOrEnter\nThe raw DEC usage code 40.\ncase keyboardRightGUI\nThe raw DEC usage code 231.\ncase keyboardSelect\nThe raw DEC usage code 119.\ncase keyboardSysReqOrAttention\nThe raw DEC usage code 154.\ncase keyboardUndo\nThe raw DEC usage code 122.\ncase keyboard_Reserved\nThe raw DEC usage code 65535."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardErrorRollOver | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboarderrorrollover",
    "html": "See Also\nError keys\ncase keyboardErrorUndefined\nThe raw DEC usage code 3."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardInternational2 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardinternational2",
    "html": "See Also\nInput method keys\nstatic var keyboardKanaSwitch: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Japanese language keyboards from Apple.\nstatic var keyboardHangul: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Korean language keyboards.\nstatic var keyboardAlphanumericSwitch: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Japanese language keyboards from Apple.\nstatic var keyboardHanja: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Korean language keyboards.\nstatic var keyboardKatakana: UIKeyboardHIDUsage\nAn alias for the LANG3 key on Japanese language keyboards.\nstatic var keyboardHiragana: UIKeyboardHIDUsage\nAn alias for the LANG4 key on Japanese language keyboards.\nstatic var keyboardZenkakuHankakuKanji: UIKeyboardHIDUsage\nAn alias for the LANG5 key on Japanese language keyboards.\ncase keyboardLANG1\nThe raw DEC usage code 144.\ncase keyboardLANG2\nThe raw DEC usage code 145.\ncase keyboardLANG3\nThe raw DEC usage code 146.\ncase keyboardLANG4\nThe raw DEC usage code 147.\ncase keyboardLANG5\nThe raw DEC usage code 148.\ncase keyboardLANG6\nThe raw DEC usage code 149.\ncase keyboardLANG7\nThe raw DEC usage code 150.\ncase keyboardLANG8\nThe raw DEC usage code 151.\ncase keyboardLANG9\nThe raw DEC usage code 152.\ncase keyboardInternational1\nThe raw DEC usage code 135.\ncase keyboardInternational3\nThe raw DEC usage code 137.\ncase keyboardInternational4\nThe raw DEC usage code 138.\ncase keyboardInternational5\nThe raw DEC usage code 139.\ncase keyboardInternational6\nThe raw DEC usage code 140.\ncase keyboardInternational7\nThe raw DEC usage code 141.\ncase keyboardInternational8\nThe raw DEC usage code 142.\ncase keyboardInternational9\nThe raw DEC usage code 143."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardLANG7 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardlang7",
    "html": "See Also\nInput method keys\nstatic var keyboardKanaSwitch: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Japanese language keyboards from Apple.\nstatic var keyboardHangul: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Korean language keyboards.\nstatic var keyboardAlphanumericSwitch: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Japanese language keyboards from Apple.\nstatic var keyboardHanja: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Korean language keyboards.\nstatic var keyboardKatakana: UIKeyboardHIDUsage\nAn alias for the LANG3 key on Japanese language keyboards.\nstatic var keyboardHiragana: UIKeyboardHIDUsage\nAn alias for the LANG4 key on Japanese language keyboards.\nstatic var keyboardZenkakuHankakuKanji: UIKeyboardHIDUsage\nAn alias for the LANG5 key on Japanese language keyboards.\ncase keyboardLANG1\nThe raw DEC usage code 144.\ncase keyboardLANG2\nThe raw DEC usage code 145.\ncase keyboardLANG3\nThe raw DEC usage code 146.\ncase keyboardLANG4\nThe raw DEC usage code 147.\ncase keyboardLANG5\nThe raw DEC usage code 148.\ncase keyboardLANG6\nThe raw DEC usage code 149.\ncase keyboardLANG8\nThe raw DEC usage code 151.\ncase keyboardLANG9\nThe raw DEC usage code 152.\ncase keyboardInternational1\nThe raw DEC usage code 135.\ncase keyboardInternational2\nThe raw DEC usage code 136.\ncase keyboardInternational3\nThe raw DEC usage code 137.\ncase keyboardInternational4\nThe raw DEC usage code 138.\ncase keyboardInternational5\nThe raw DEC usage code 139.\ncase keyboardInternational6\nThe raw DEC usage code 140.\ncase keyboardInternational7\nThe raw DEC usage code 141.\ncase keyboardInternational8\nThe raw DEC usage code 142.\ncase keyboardInternational9\nThe raw DEC usage code 143."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardErrorUndefined | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboarderrorundefined",
    "html": "See Also\nError keys\ncase keyboardErrorRollOver\nThe raw DEC usage code 1."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardLANG8 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardlang8",
    "html": "See Also\nInput method keys\nstatic var keyboardKanaSwitch: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Japanese language keyboards from Apple.\nstatic var keyboardHangul: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Korean language keyboards.\nstatic var keyboardAlphanumericSwitch: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Japanese language keyboards from Apple.\nstatic var keyboardHanja: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Korean language keyboards.\nstatic var keyboardKatakana: UIKeyboardHIDUsage\nAn alias for the LANG3 key on Japanese language keyboards.\nstatic var keyboardHiragana: UIKeyboardHIDUsage\nAn alias for the LANG4 key on Japanese language keyboards.\nstatic var keyboardZenkakuHankakuKanji: UIKeyboardHIDUsage\nAn alias for the LANG5 key on Japanese language keyboards.\ncase keyboardLANG1\nThe raw DEC usage code 144.\ncase keyboardLANG2\nThe raw DEC usage code 145.\ncase keyboardLANG3\nThe raw DEC usage code 146.\ncase keyboardLANG4\nThe raw DEC usage code 147.\ncase keyboardLANG5\nThe raw DEC usage code 148.\ncase keyboardLANG6\nThe raw DEC usage code 149.\ncase keyboardLANG7\nThe raw DEC usage code 150.\ncase keyboardLANG9\nThe raw DEC usage code 152.\ncase keyboardInternational1\nThe raw DEC usage code 135.\ncase keyboardInternational2\nThe raw DEC usage code 136.\ncase keyboardInternational3\nThe raw DEC usage code 137.\ncase keyboardInternational4\nThe raw DEC usage code 138.\ncase keyboardInternational5\nThe raw DEC usage code 139.\ncase keyboardInternational6\nThe raw DEC usage code 140.\ncase keyboardInternational7\nThe raw DEC usage code 141.\ncase keyboardInternational8\nThe raw DEC usage code 142.\ncase keyboardInternational9\nThe raw DEC usage code 143."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardInternational1 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardinternational1",
    "html": "See Also\nInput method keys\nstatic var keyboardKanaSwitch: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Japanese language keyboards from Apple.\nstatic var keyboardHangul: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Korean language keyboards.\nstatic var keyboardAlphanumericSwitch: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Japanese language keyboards from Apple.\nstatic var keyboardHanja: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Korean language keyboards.\nstatic var keyboardKatakana: UIKeyboardHIDUsage\nAn alias for the LANG3 key on Japanese language keyboards.\nstatic var keyboardHiragana: UIKeyboardHIDUsage\nAn alias for the LANG4 key on Japanese language keyboards.\nstatic var keyboardZenkakuHankakuKanji: UIKeyboardHIDUsage\nAn alias for the LANG5 key on Japanese language keyboards.\ncase keyboardLANG1\nThe raw DEC usage code 144.\ncase keyboardLANG2\nThe raw DEC usage code 145.\ncase keyboardLANG3\nThe raw DEC usage code 146.\ncase keyboardLANG4\nThe raw DEC usage code 147.\ncase keyboardLANG5\nThe raw DEC usage code 148.\ncase keyboardLANG6\nThe raw DEC usage code 149.\ncase keyboardLANG7\nThe raw DEC usage code 150.\ncase keyboardLANG8\nThe raw DEC usage code 151.\ncase keyboardLANG9\nThe raw DEC usage code 152.\ncase keyboardInternational2\nThe raw DEC usage code 136.\ncase keyboardInternational3\nThe raw DEC usage code 137.\ncase keyboardInternational4\nThe raw DEC usage code 138.\ncase keyboardInternational5\nThe raw DEC usage code 139.\ncase keyboardInternational6\nThe raw DEC usage code 140.\ncase keyboardInternational7\nThe raw DEC usage code 141.\ncase keyboardInternational8\nThe raw DEC usage code 142.\ncase keyboardInternational9\nThe raw DEC usage code 143."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardInternational8 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardinternational8",
    "html": "See Also\nInput method keys\nstatic var keyboardKanaSwitch: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Japanese language keyboards from Apple.\nstatic var keyboardHangul: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Korean language keyboards.\nstatic var keyboardAlphanumericSwitch: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Japanese language keyboards from Apple.\nstatic var keyboardHanja: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Korean language keyboards.\nstatic var keyboardKatakana: UIKeyboardHIDUsage\nAn alias for the LANG3 key on Japanese language keyboards.\nstatic var keyboardHiragana: UIKeyboardHIDUsage\nAn alias for the LANG4 key on Japanese language keyboards.\nstatic var keyboardZenkakuHankakuKanji: UIKeyboardHIDUsage\nAn alias for the LANG5 key on Japanese language keyboards.\ncase keyboardLANG1\nThe raw DEC usage code 144.\ncase keyboardLANG2\nThe raw DEC usage code 145.\ncase keyboardLANG3\nThe raw DEC usage code 146.\ncase keyboardLANG4\nThe raw DEC usage code 147.\ncase keyboardLANG5\nThe raw DEC usage code 148.\ncase keyboardLANG6\nThe raw DEC usage code 149.\ncase keyboardLANG7\nThe raw DEC usage code 150.\ncase keyboardLANG8\nThe raw DEC usage code 151.\ncase keyboardLANG9\nThe raw DEC usage code 152.\ncase keyboardInternational1\nThe raw DEC usage code 135.\ncase keyboardInternational2\nThe raw DEC usage code 136.\ncase keyboardInternational3\nThe raw DEC usage code 137.\ncase keyboardInternational4\nThe raw DEC usage code 138.\ncase keyboardInternational5\nThe raw DEC usage code 139.\ncase keyboardInternational6\nThe raw DEC usage code 140.\ncase keyboardInternational7\nThe raw DEC usage code 141.\ncase keyboardInternational9\nThe raw DEC usage code 143."
  },
  {
    "title": "baseWritingDirection(for:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextinput/1614502-basewritingdirection",
    "html": "Required\n\nParameters\nposition\n\nAn object that identifies a location in a document.\n\ndirection\n\nA constant that indicates a direction of storage (forward or backward).\n\nReturn Value\n\nA constant that represents a writing direction (for example, left-to-right or right-to-left).\n\nDiscussion\n\nThe base writing direction is set previously when the text input system sends a setBaseWritingDirection(_:for:) message to the conforming document object.\n\nSee Also\nDetermining layout and writing direction\nfunc position(within: UITextRange, farthestIn: UITextLayoutDirection) -> UITextPosition?\nReturns the text position that is at the farthest extent in a specified layout direction within a range of text.\n\nRequired\n\nfunc characterRange(byExtending: UITextPosition, in: UITextLayoutDirection) -> UITextRange?\nReturns a text range from a specified text position to its farthest extent in a certain direction of layout.\n\nRequired\n\nfunc setBaseWritingDirection(NSWritingDirection, for: UITextRange)\nSets the base writing direction for a specified range of text in a document.\n\nRequired"
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardSpacebar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardspacebar",
    "html": "See Also\nSymbol keys\ncase keyboardBackslash\nThe raw DEC usage code 49.\ncase keyboardCloseBracket\nThe raw DEC usage code 48.\ncase keyboardComma\nThe raw DEC usage code 54.\ncase keyboardEqualSign\nThe raw DEC usage code 46.\ncase keyboardHyphen\nThe raw DEC usage code 45.\ncase keyboardNonUSBackslash\nThe raw DEC usage code 100.\ncase keyboardNonUSPound\nThe raw DEC usage code 50.\ncase keyboardOpenBracket\nThe raw DEC usage code 47.\ncase keyboardPeriod\nThe raw DEC usage code 55.\ncase keyboardQuote\nThe raw DEC usage code 52.\ncase keyboardSemicolon\nThe raw DEC usage code 51.\ncase keyboardSeparator\nThe raw DEC usage code 159.\ncase keyboardSlash\nThe raw DEC usage code 56."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardEnd | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardend",
    "html": "See Also\nNavigation keys\ncase keyboardLeftArrow\nThe raw DEC usage code 80.\ncase keyboardRightArrow\nThe raw DEC usage code 79.\ncase keyboardUpArrow\nThe raw DEC usage code 82.\ncase keyboardDownArrow\nThe raw DEC usage code 81.\ncase keyboardPageUp\nThe raw DEC usage code 75.\ncase keyboardPageDown\nThe raw DEC usage code 78.\ncase keyboardHome\nThe raw DEC usage code 74.\ncase keyboardDeleteForward\nThe raw DEC usage code 76.\ncase keyboardDeleteOrBackspace\nThe raw DEC usage code 42.\ncase keyboardEscape\nThe raw DEC usage code 41.\ncase keyboardInsert\nThe raw DEC usage code 73.\ncase keyboardReturn\nThe raw DEC usage code 158.\ncase keyboardTab\nThe raw DEC usage code 43."
  },
  {
    "title": "willPresentEditMenu(animator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextinput/4057381-willpresenteditmenu",
    "html": "Parameters\nanimator\n\nThe appearance animator to add animations to, so that the animations will run alongside the appearance transition.\n\nSee Also\nManaging the edit menu\nfunc editMenu(for: UITextRange, suggestedActions: [UIMenuElement]) -> UIMenu?\nAsks for the menu to display for the given text range and actions the system provides.\nfunc willDismissEditMenu(animator: UIEditMenuInteractionAnimating)\nTells the object when the system is about to dismiss an edit menu with an animator."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardPageDown | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardpagedown",
    "html": "See Also\nNavigation keys\ncase keyboardLeftArrow\nThe raw DEC usage code 80.\ncase keyboardRightArrow\nThe raw DEC usage code 79.\ncase keyboardUpArrow\nThe raw DEC usage code 82.\ncase keyboardDownArrow\nThe raw DEC usage code 81.\ncase keyboardPageUp\nThe raw DEC usage code 75.\ncase keyboardHome\nThe raw DEC usage code 74.\ncase keyboardEnd\nThe raw DEC usage code 77.\ncase keyboardDeleteForward\nThe raw DEC usage code 76.\ncase keyboardDeleteOrBackspace\nThe raw DEC usage code 42.\ncase keyboardEscape\nThe raw DEC usage code 41.\ncase keyboardInsert\nThe raw DEC usage code 73.\ncase keyboardReturn\nThe raw DEC usage code 158.\ncase keyboardTab\nThe raw DEC usage code 43."
  },
  {
    "title": "textRange(from:to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextinput/1614573-textrange",
    "html": "Required\n\nParameters\nfromPosition\n\nAn object that represents a location in a document.\n\ntoPosition\n\nAn object that represents another location in a document.\n\nReturn Value\n\nAn object that represents the range between fromPosition and toPosition.\n\nSee Also\nComputing text ranges and text positions\nfunc position(from: UITextPosition, offset: Int) -> UITextPosition?\nReturns the text position at a specified offset from another text position.\n\nRequired\n\nfunc position(from: UITextPosition, in: UITextLayoutDirection, offset: Int) -> UITextPosition?\nReturns the text position at a specified offset in a specified direction from another text position.\n\nRequired\n\nvar beginningOfDocument: UITextPosition\nThe text position for the beginning of a document.\n\nRequired\n\nvar endOfDocument: UITextPosition\nThe text position for the end of a document.\n\nRequired"
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardReturn | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardreturn",
    "html": "See Also\nNavigation keys\ncase keyboardLeftArrow\nThe raw DEC usage code 80.\ncase keyboardRightArrow\nThe raw DEC usage code 79.\ncase keyboardUpArrow\nThe raw DEC usage code 82.\ncase keyboardDownArrow\nThe raw DEC usage code 81.\ncase keyboardPageUp\nThe raw DEC usage code 75.\ncase keyboardPageDown\nThe raw DEC usage code 78.\ncase keyboardHome\nThe raw DEC usage code 74.\ncase keyboardEnd\nThe raw DEC usage code 77.\ncase keyboardDeleteForward\nThe raw DEC usage code 76.\ncase keyboardDeleteOrBackspace\nThe raw DEC usage code 42.\ncase keyboardEscape\nThe raw DEC usage code 41.\ncase keyboardInsert\nThe raw DEC usage code 73.\ncase keyboardTab\nThe raw DEC usage code 43."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardDeleteOrBackspace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboarddeleteorbackspace",
    "html": "See Also\nNavigation keys\ncase keyboardLeftArrow\nThe raw DEC usage code 80.\ncase keyboardRightArrow\nThe raw DEC usage code 79.\ncase keyboardUpArrow\nThe raw DEC usage code 82.\ncase keyboardDownArrow\nThe raw DEC usage code 81.\ncase keyboardPageUp\nThe raw DEC usage code 75.\ncase keyboardPageDown\nThe raw DEC usage code 78.\ncase keyboardHome\nThe raw DEC usage code 74.\ncase keyboardEnd\nThe raw DEC usage code 77.\ncase keyboardDeleteForward\nThe raw DEC usage code 76.\ncase keyboardEscape\nThe raw DEC usage code 41.\ncase keyboardInsert\nThe raw DEC usage code 73.\ncase keyboardReturn\nThe raw DEC usage code 158.\ncase keyboardTab\nThe raw DEC usage code 43."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardTab | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardtab",
    "html": "See Also\nNavigation keys\ncase keyboardLeftArrow\nThe raw DEC usage code 80.\ncase keyboardRightArrow\nThe raw DEC usage code 79.\ncase keyboardUpArrow\nThe raw DEC usage code 82.\ncase keyboardDownArrow\nThe raw DEC usage code 81.\ncase keyboardPageUp\nThe raw DEC usage code 75.\ncase keyboardPageDown\nThe raw DEC usage code 78.\ncase keyboardHome\nThe raw DEC usage code 74.\ncase keyboardEnd\nThe raw DEC usage code 77.\ncase keyboardDeleteForward\nThe raw DEC usage code 76.\ncase keyboardDeleteOrBackspace\nThe raw DEC usage code 42.\ncase keyboardEscape\nThe raw DEC usage code 41.\ncase keyboardInsert\nThe raw DEC usage code 73.\ncase keyboardReturn\nThe raw DEC usage code 158."
  },
  {
    "title": "compare(_:to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uitextinput/1614526-compare",
    "html": "Required\n\nParameters\nposition\n\nA custom object that represents a location within a document.\n\nother\n\nA custom object that represents another location within a document.\n\nReturn Value\n\nA value that indicates whether the two text positions are identical or whether one is before the other.\n\nSee Also\nEvaluating text positions\nfunc offset(from: UITextPosition, to: UITextPosition) -> Int\nReturns the number of UTF-16 characters between one text position and another text position.\n\nRequired"
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardCapsLock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardcapslock",
    "html": "See Also\nModifier keys\ncase keyboardLeftAlt\nThe raw DEC usage code 226.\ncase keyboardLeftControl\nThe raw DEC usage code 224.\ncase keyboardLeftShift\nThe raw DEC usage code 225.\ncase keyboardLockingCapsLock\nThe raw DEC usage code 130.\ncase keyboardLockingNumLock\nThe raw DEC usage code 131.\ncase keyboardLockingScrollLock\nThe raw DEC usage code 132.\ncase keyboardRightAlt\nThe raw DEC usage code 230.\ncase keyboardRightControl\nThe raw DEC usage code 228.\ncase keyboardRightShift\nThe raw DEC usage code 229.\ncase keyboardScrollLock\nThe raw DEC usage code 71."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardRightControl | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardrightcontrol",
    "html": "See Also\nModifier keys\ncase keyboardCapsLock\nThe raw DEC usage code 57.\ncase keyboardLeftAlt\nThe raw DEC usage code 226.\ncase keyboardLeftControl\nThe raw DEC usage code 224.\ncase keyboardLeftShift\nThe raw DEC usage code 225.\ncase keyboardLockingCapsLock\nThe raw DEC usage code 130.\ncase keyboardLockingNumLock\nThe raw DEC usage code 131.\ncase keyboardLockingScrollLock\nThe raw DEC usage code 132.\ncase keyboardRightAlt\nThe raw DEC usage code 230.\ncase keyboardRightShift\nThe raw DEC usage code 229.\ncase keyboardScrollLock\nThe raw DEC usage code 71."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardRightShift | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardrightshift",
    "html": "See Also\nModifier keys\ncase keyboardCapsLock\nThe raw DEC usage code 57.\ncase keyboardLeftAlt\nThe raw DEC usage code 226.\ncase keyboardLeftControl\nThe raw DEC usage code 224.\ncase keyboardLeftShift\nThe raw DEC usage code 225.\ncase keyboardLockingCapsLock\nThe raw DEC usage code 130.\ncase keyboardLockingNumLock\nThe raw DEC usage code 131.\ncase keyboardLockingScrollLock\nThe raw DEC usage code 132.\ncase keyboardRightAlt\nThe raw DEC usage code 230.\ncase keyboardRightControl\nThe raw DEC usage code 228.\ncase keyboardScrollLock\nThe raw DEC usage code 71."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardLeftShift | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardleftshift",
    "html": "See Also\nModifier keys\ncase keyboardCapsLock\nThe raw DEC usage code 57.\ncase keyboardLeftAlt\nThe raw DEC usage code 226.\ncase keyboardLeftControl\nThe raw DEC usage code 224.\ncase keyboardLockingCapsLock\nThe raw DEC usage code 130.\ncase keyboardLockingNumLock\nThe raw DEC usage code 131.\ncase keyboardLockingScrollLock\nThe raw DEC usage code 132.\ncase keyboardRightAlt\nThe raw DEC usage code 230.\ncase keyboardRightControl\nThe raw DEC usage code 228.\ncase keyboardRightShift\nThe raw DEC usage code 229.\ncase keyboardScrollLock\nThe raw DEC usage code 71."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardSeparator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardseparator",
    "html": "See Also\nSymbol keys\ncase keyboardBackslash\nThe raw DEC usage code 49.\ncase keyboardCloseBracket\nThe raw DEC usage code 48.\ncase keyboardComma\nThe raw DEC usage code 54.\ncase keyboardEqualSign\nThe raw DEC usage code 46.\ncase keyboardHyphen\nThe raw DEC usage code 45.\ncase keyboardNonUSBackslash\nThe raw DEC usage code 100.\ncase keyboardNonUSPound\nThe raw DEC usage code 50.\ncase keyboardOpenBracket\nThe raw DEC usage code 47.\ncase keyboardPeriod\nThe raw DEC usage code 55.\ncase keyboardQuote\nThe raw DEC usage code 52.\ncase keyboardSemicolon\nThe raw DEC usage code 51.\ncase keyboardSlash\nThe raw DEC usage code 56.\ncase keyboardSpacebar\nThe raw DEC usage code 44."
  },
  {
    "title": "keyboardHiragana | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/3526206-keyboardhiragana",
    "html": "See Also\nInput method keys\nstatic var keyboardKanaSwitch: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Japanese language keyboards from Apple.\nstatic var keyboardHangul: UIKeyboardHIDUsage\nAn alias for the LANG1 key on Korean language keyboards.\nstatic var keyboardAlphanumericSwitch: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Japanese language keyboards from Apple.\nstatic var keyboardHanja: UIKeyboardHIDUsage\nAn alias for the LANG2 key on Korean language keyboards.\nstatic var keyboardKatakana: UIKeyboardHIDUsage\nAn alias for the LANG3 key on Japanese language keyboards.\nstatic var keyboardZenkakuHankakuKanji: UIKeyboardHIDUsage\nAn alias for the LANG5 key on Japanese language keyboards.\ncase keyboardLANG1\nThe raw DEC usage code 144.\ncase keyboardLANG2\nThe raw DEC usage code 145.\ncase keyboardLANG3\nThe raw DEC usage code 146.\ncase keyboardLANG4\nThe raw DEC usage code 147.\ncase keyboardLANG5\nThe raw DEC usage code 148.\ncase keyboardLANG6\nThe raw DEC usage code 149.\ncase keyboardLANG7\nThe raw DEC usage code 150.\ncase keyboardLANG8\nThe raw DEC usage code 151.\ncase keyboardLANG9\nThe raw DEC usage code 152.\ncase keyboardInternational1\nThe raw DEC usage code 135.\ncase keyboardInternational2\nThe raw DEC usage code 136.\ncase keyboardInternational3\nThe raw DEC usage code 137.\ncase keyboardInternational4\nThe raw DEC usage code 138.\ncase keyboardInternational5\nThe raw DEC usage code 139.\ncase keyboardInternational6\nThe raw DEC usage code 140.\ncase keyboardInternational7\nThe raw DEC usage code 141.\ncase keyboardInternational8\nThe raw DEC usage code 142.\ncase keyboardInternational9\nThe raw DEC usage code 143."
  },
  {
    "title": "UIKeyboardHIDUsage.keypadEqualSign | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keypadequalsign",
    "html": "See Also\nKeypad keys\ncase keypad0\nThe raw DEC usage code 98.\ncase keypad1\nThe raw DEC usage code 89.\ncase keypad2\nThe raw DEC usage code 90.\ncase keypad3\nThe raw DEC usage code 91.\ncase keypad4\nThe raw DEC usage code 92.\ncase keypad5\nThe raw DEC usage code 93.\ncase keypad6\nThe raw DEC usage code 94.\ncase keypad7\nThe raw DEC usage code 95.\ncase keypad8\nThe raw DEC usage code 96.\ncase keypad9\nThe raw DEC usage code 97.\ncase keypadAsterisk\nThe raw DEC usage code 85.\ncase keypadComma\nThe raw DEC usage code 133.\ncase keypadEnter\nThe raw DEC usage code 88.\ncase keypadEqualSignAS400\nThe raw DEC usage code 134.\ncase keypadHyphen\nThe raw DEC usage code 86.\ncase keypadNumLock\nThe raw DEC usage code 83.\ncase keypadPeriod\nThe raw DEC usage code 99.\ncase keypadPlus\nThe raw DEC usage code 87.\ncase keypadSlash\nThe raw DEC usage code 84."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardF23 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardf23",
    "html": "See Also\nFunction keys\ncase keyboardF1\nThe raw DEC usage code 58.\ncase keyboardF2\nThe raw DEC usage code 59.\ncase keyboardF3\nThe raw DEC usage code 60.\ncase keyboardF4\nThe raw DEC usage code 61.\ncase keyboardF5\nThe raw DEC usage code 62.\ncase keyboardF6\nThe raw DEC usage code 63.\ncase keyboardF7\nThe raw DEC usage code 64.\ncase keyboardF8\nThe raw DEC usage code 65.\ncase keyboardF9\nThe raw DEC usage code 66.\ncase keyboardF10\nThe raw DEC usage code 67.\ncase keyboardF11\nThe raw DEC usage code 68.\ncase keyboardF12\nThe raw DEC usage code 69.\ncase keyboardF13\nThe raw DEC usage code 104.\ncase keyboardF14\nThe raw DEC usage code 105.\ncase keyboardF15\nThe raw DEC usage code 106.\ncase keyboardF16\nThe raw DEC usage code 107.\ncase keyboardF17\nThe raw DEC usage code 108.\ncase keyboardF18\nThe raw DEC usage code 109.\ncase keyboardF19\nThe raw DEC usage code 110.\ncase keyboardF20\nThe raw DEC usage code 111.\ncase keyboardF21\nThe raw DEC usage code 112.\ncase keyboardF22\nThe raw DEC usage code 113.\ncase keyboardF24\nThe raw DEC usage code 115."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardF16 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardf16",
    "html": "See Also\nFunction keys\ncase keyboardF1\nThe raw DEC usage code 58.\ncase keyboardF2\nThe raw DEC usage code 59.\ncase keyboardF3\nThe raw DEC usage code 60.\ncase keyboardF4\nThe raw DEC usage code 61.\ncase keyboardF5\nThe raw DEC usage code 62.\ncase keyboardF6\nThe raw DEC usage code 63.\ncase keyboardF7\nThe raw DEC usage code 64.\ncase keyboardF8\nThe raw DEC usage code 65.\ncase keyboardF9\nThe raw DEC usage code 66.\ncase keyboardF10\nThe raw DEC usage code 67.\ncase keyboardF11\nThe raw DEC usage code 68.\ncase keyboardF12\nThe raw DEC usage code 69.\ncase keyboardF13\nThe raw DEC usage code 104.\ncase keyboardF14\nThe raw DEC usage code 105.\ncase keyboardF15\nThe raw DEC usage code 106.\ncase keyboardF17\nThe raw DEC usage code 108.\ncase keyboardF18\nThe raw DEC usage code 109.\ncase keyboardF19\nThe raw DEC usage code 110.\ncase keyboardF20\nThe raw DEC usage code 111.\ncase keyboardF21\nThe raw DEC usage code 112.\ncase keyboardF22\nThe raw DEC usage code 113.\ncase keyboardF23\nThe raw DEC usage code 114.\ncase keyboardF24\nThe raw DEC usage code 115."
  },
  {
    "title": "UIKeyboardHIDUsage.keypad6 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keypad6",
    "html": "See Also\nKeypad keys\ncase keypad0\nThe raw DEC usage code 98.\ncase keypad1\nThe raw DEC usage code 89.\ncase keypad2\nThe raw DEC usage code 90.\ncase keypad3\nThe raw DEC usage code 91.\ncase keypad4\nThe raw DEC usage code 92.\ncase keypad5\nThe raw DEC usage code 93.\ncase keypad7\nThe raw DEC usage code 95.\ncase keypad8\nThe raw DEC usage code 96.\ncase keypad9\nThe raw DEC usage code 97.\ncase keypadAsterisk\nThe raw DEC usage code 85.\ncase keypadComma\nThe raw DEC usage code 133.\ncase keypadEnter\nThe raw DEC usage code 88.\ncase keypadEqualSign\nThe raw DEC usage code 103.\ncase keypadEqualSignAS400\nThe raw DEC usage code 134.\ncase keypadHyphen\nThe raw DEC usage code 86.\ncase keypadNumLock\nThe raw DEC usage code 83.\ncase keypadPeriod\nThe raw DEC usage code 99.\ncase keypadPlus\nThe raw DEC usage code 87.\ncase keypadSlash\nThe raw DEC usage code 84."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardF11 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardf11",
    "html": "See Also\nFunction keys\ncase keyboardF1\nThe raw DEC usage code 58.\ncase keyboardF2\nThe raw DEC usage code 59.\ncase keyboardF3\nThe raw DEC usage code 60.\ncase keyboardF4\nThe raw DEC usage code 61.\ncase keyboardF5\nThe raw DEC usage code 62.\ncase keyboardF6\nThe raw DEC usage code 63.\ncase keyboardF7\nThe raw DEC usage code 64.\ncase keyboardF8\nThe raw DEC usage code 65.\ncase keyboardF9\nThe raw DEC usage code 66.\ncase keyboardF10\nThe raw DEC usage code 67.\ncase keyboardF12\nThe raw DEC usage code 69.\ncase keyboardF13\nThe raw DEC usage code 104.\ncase keyboardF14\nThe raw DEC usage code 105.\ncase keyboardF15\nThe raw DEC usage code 106.\ncase keyboardF16\nThe raw DEC usage code 107.\ncase keyboardF17\nThe raw DEC usage code 108.\ncase keyboardF18\nThe raw DEC usage code 109.\ncase keyboardF19\nThe raw DEC usage code 110.\ncase keyboardF20\nThe raw DEC usage code 111.\ncase keyboardF21\nThe raw DEC usage code 112.\ncase keyboardF22\nThe raw DEC usage code 113.\ncase keyboardF23\nThe raw DEC usage code 114.\ncase keyboardF24\nThe raw DEC usage code 115."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardF12 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardf12",
    "html": "See Also\nFunction keys\ncase keyboardF1\nThe raw DEC usage code 58.\ncase keyboardF2\nThe raw DEC usage code 59.\ncase keyboardF3\nThe raw DEC usage code 60.\ncase keyboardF4\nThe raw DEC usage code 61.\ncase keyboardF5\nThe raw DEC usage code 62.\ncase keyboardF6\nThe raw DEC usage code 63.\ncase keyboardF7\nThe raw DEC usage code 64.\ncase keyboardF8\nThe raw DEC usage code 65.\ncase keyboardF9\nThe raw DEC usage code 66.\ncase keyboardF10\nThe raw DEC usage code 67.\ncase keyboardF11\nThe raw DEC usage code 68.\ncase keyboardF13\nThe raw DEC usage code 104.\ncase keyboardF14\nThe raw DEC usage code 105.\ncase keyboardF15\nThe raw DEC usage code 106.\ncase keyboardF16\nThe raw DEC usage code 107.\ncase keyboardF17\nThe raw DEC usage code 108.\ncase keyboardF18\nThe raw DEC usage code 109.\ncase keyboardF19\nThe raw DEC usage code 110.\ncase keyboardF20\nThe raw DEC usage code 111.\ncase keyboardF21\nThe raw DEC usage code 112.\ncase keyboardF22\nThe raw DEC usage code 113.\ncase keyboardF23\nThe raw DEC usage code 114.\ncase keyboardF24\nThe raw DEC usage code 115."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardF18 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardf18",
    "html": "See Also\nFunction keys\ncase keyboardF1\nThe raw DEC usage code 58.\ncase keyboardF2\nThe raw DEC usage code 59.\ncase keyboardF3\nThe raw DEC usage code 60.\ncase keyboardF4\nThe raw DEC usage code 61.\ncase keyboardF5\nThe raw DEC usage code 62.\ncase keyboardF6\nThe raw DEC usage code 63.\ncase keyboardF7\nThe raw DEC usage code 64.\ncase keyboardF8\nThe raw DEC usage code 65.\ncase keyboardF9\nThe raw DEC usage code 66.\ncase keyboardF10\nThe raw DEC usage code 67.\ncase keyboardF11\nThe raw DEC usage code 68.\ncase keyboardF12\nThe raw DEC usage code 69.\ncase keyboardF13\nThe raw DEC usage code 104.\ncase keyboardF14\nThe raw DEC usage code 105.\ncase keyboardF15\nThe raw DEC usage code 106.\ncase keyboardF16\nThe raw DEC usage code 107.\ncase keyboardF17\nThe raw DEC usage code 108.\ncase keyboardF19\nThe raw DEC usage code 110.\ncase keyboardF20\nThe raw DEC usage code 111.\ncase keyboardF21\nThe raw DEC usage code 112.\ncase keyboardF22\nThe raw DEC usage code 113.\ncase keyboardF23\nThe raw DEC usage code 114.\ncase keyboardF24\nThe raw DEC usage code 115."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardF15 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardf15",
    "html": "See Also\nFunction keys\ncase keyboardF1\nThe raw DEC usage code 58.\ncase keyboardF2\nThe raw DEC usage code 59.\ncase keyboardF3\nThe raw DEC usage code 60.\ncase keyboardF4\nThe raw DEC usage code 61.\ncase keyboardF5\nThe raw DEC usage code 62.\ncase keyboardF6\nThe raw DEC usage code 63.\ncase keyboardF7\nThe raw DEC usage code 64.\ncase keyboardF8\nThe raw DEC usage code 65.\ncase keyboardF9\nThe raw DEC usage code 66.\ncase keyboardF10\nThe raw DEC usage code 67.\ncase keyboardF11\nThe raw DEC usage code 68.\ncase keyboardF12\nThe raw DEC usage code 69.\ncase keyboardF13\nThe raw DEC usage code 104.\ncase keyboardF14\nThe raw DEC usage code 105.\ncase keyboardF16\nThe raw DEC usage code 107.\ncase keyboardF17\nThe raw DEC usage code 108.\ncase keyboardF18\nThe raw DEC usage code 109.\ncase keyboardF19\nThe raw DEC usage code 110.\ncase keyboardF20\nThe raw DEC usage code 111.\ncase keyboardF21\nThe raw DEC usage code 112.\ncase keyboardF22\nThe raw DEC usage code 113.\ncase keyboardF23\nThe raw DEC usage code 114.\ncase keyboardF24\nThe raw DEC usage code 115."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardF24 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardf24",
    "html": "See Also\nFunction keys\ncase keyboardF1\nThe raw DEC usage code 58.\ncase keyboardF2\nThe raw DEC usage code 59.\ncase keyboardF3\nThe raw DEC usage code 60.\ncase keyboardF4\nThe raw DEC usage code 61.\ncase keyboardF5\nThe raw DEC usage code 62.\ncase keyboardF6\nThe raw DEC usage code 63.\ncase keyboardF7\nThe raw DEC usage code 64.\ncase keyboardF8\nThe raw DEC usage code 65.\ncase keyboardF9\nThe raw DEC usage code 66.\ncase keyboardF10\nThe raw DEC usage code 67.\ncase keyboardF11\nThe raw DEC usage code 68.\ncase keyboardF12\nThe raw DEC usage code 69.\ncase keyboardF13\nThe raw DEC usage code 104.\ncase keyboardF14\nThe raw DEC usage code 105.\ncase keyboardF15\nThe raw DEC usage code 106.\ncase keyboardF16\nThe raw DEC usage code 107.\ncase keyboardF17\nThe raw DEC usage code 108.\ncase keyboardF18\nThe raw DEC usage code 109.\ncase keyboardF19\nThe raw DEC usage code 110.\ncase keyboardF20\nThe raw DEC usage code 111.\ncase keyboardF21\nThe raw DEC usage code 112.\ncase keyboardF22\nThe raw DEC usage code 113.\ncase keyboardF23\nThe raw DEC usage code 114."
  },
  {
    "title": "UIKeyboardHIDUsage.keypad3 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keypad3",
    "html": "See Also\nKeypad keys\ncase keypad0\nThe raw DEC usage code 98.\ncase keypad1\nThe raw DEC usage code 89.\ncase keypad2\nThe raw DEC usage code 90.\ncase keypad4\nThe raw DEC usage code 92.\ncase keypad5\nThe raw DEC usage code 93.\ncase keypad6\nThe raw DEC usage code 94.\ncase keypad7\nThe raw DEC usage code 95.\ncase keypad8\nThe raw DEC usage code 96.\ncase keypad9\nThe raw DEC usage code 97.\ncase keypadAsterisk\nThe raw DEC usage code 85.\ncase keypadComma\nThe raw DEC usage code 133.\ncase keypadEnter\nThe raw DEC usage code 88.\ncase keypadEqualSign\nThe raw DEC usage code 103.\ncase keypadEqualSignAS400\nThe raw DEC usage code 134.\ncase keypadHyphen\nThe raw DEC usage code 86.\ncase keypadNumLock\nThe raw DEC usage code 83.\ncase keypadPeriod\nThe raw DEC usage code 99.\ncase keypadPlus\nThe raw DEC usage code 87.\ncase keypadSlash\nThe raw DEC usage code 84."
  },
  {
    "title": "UIKeyboardHIDUsage.keypad5 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keypad5",
    "html": "See Also\nKeypad keys\ncase keypad0\nThe raw DEC usage code 98.\ncase keypad1\nThe raw DEC usage code 89.\ncase keypad2\nThe raw DEC usage code 90.\ncase keypad3\nThe raw DEC usage code 91.\ncase keypad4\nThe raw DEC usage code 92.\ncase keypad6\nThe raw DEC usage code 94.\ncase keypad7\nThe raw DEC usage code 95.\ncase keypad8\nThe raw DEC usage code 96.\ncase keypad9\nThe raw DEC usage code 97.\ncase keypadAsterisk\nThe raw DEC usage code 85.\ncase keypadComma\nThe raw DEC usage code 133.\ncase keypadEnter\nThe raw DEC usage code 88.\ncase keypadEqualSign\nThe raw DEC usage code 103.\ncase keypadEqualSignAS400\nThe raw DEC usage code 134.\ncase keypadHyphen\nThe raw DEC usage code 86.\ncase keypadNumLock\nThe raw DEC usage code 83.\ncase keypadPeriod\nThe raw DEC usage code 99.\ncase keypadPlus\nThe raw DEC usage code 87.\ncase keypadSlash\nThe raw DEC usage code 84."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardF22 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardf22",
    "html": "See Also\nFunction keys\ncase keyboardF1\nThe raw DEC usage code 58.\ncase keyboardF2\nThe raw DEC usage code 59.\ncase keyboardF3\nThe raw DEC usage code 60.\ncase keyboardF4\nThe raw DEC usage code 61.\ncase keyboardF5\nThe raw DEC usage code 62.\ncase keyboardF6\nThe raw DEC usage code 63.\ncase keyboardF7\nThe raw DEC usage code 64.\ncase keyboardF8\nThe raw DEC usage code 65.\ncase keyboardF9\nThe raw DEC usage code 66.\ncase keyboardF10\nThe raw DEC usage code 67.\ncase keyboardF11\nThe raw DEC usage code 68.\ncase keyboardF12\nThe raw DEC usage code 69.\ncase keyboardF13\nThe raw DEC usage code 104.\ncase keyboardF14\nThe raw DEC usage code 105.\ncase keyboardF15\nThe raw DEC usage code 106.\ncase keyboardF16\nThe raw DEC usage code 107.\ncase keyboardF17\nThe raw DEC usage code 108.\ncase keyboardF18\nThe raw DEC usage code 109.\ncase keyboardF19\nThe raw DEC usage code 110.\ncase keyboardF20\nThe raw DEC usage code 111.\ncase keyboardF21\nThe raw DEC usage code 112.\ncase keyboardF23\nThe raw DEC usage code 114.\ncase keyboardF24\nThe raw DEC usage code 115."
  },
  {
    "title": "UIKeyboardHIDUsage.keypad0 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keypad0",
    "html": "See Also\nKeypad keys\ncase keypad1\nThe raw DEC usage code 89.\ncase keypad2\nThe raw DEC usage code 90.\ncase keypad3\nThe raw DEC usage code 91.\ncase keypad4\nThe raw DEC usage code 92.\ncase keypad5\nThe raw DEC usage code 93.\ncase keypad6\nThe raw DEC usage code 94.\ncase keypad7\nThe raw DEC usage code 95.\ncase keypad8\nThe raw DEC usage code 96.\ncase keypad9\nThe raw DEC usage code 97.\ncase keypadAsterisk\nThe raw DEC usage code 85.\ncase keypadComma\nThe raw DEC usage code 133.\ncase keypadEnter\nThe raw DEC usage code 88.\ncase keypadEqualSign\nThe raw DEC usage code 103.\ncase keypadEqualSignAS400\nThe raw DEC usage code 134.\ncase keypadHyphen\nThe raw DEC usage code 86.\ncase keypadNumLock\nThe raw DEC usage code 83.\ncase keypadPeriod\nThe raw DEC usage code 99.\ncase keypadPlus\nThe raw DEC usage code 87.\ncase keypadSlash\nThe raw DEC usage code 84."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardF21 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardf21",
    "html": "See Also\nFunction keys\ncase keyboardF1\nThe raw DEC usage code 58.\ncase keyboardF2\nThe raw DEC usage code 59.\ncase keyboardF3\nThe raw DEC usage code 60.\ncase keyboardF4\nThe raw DEC usage code 61.\ncase keyboardF5\nThe raw DEC usage code 62.\ncase keyboardF6\nThe raw DEC usage code 63.\ncase keyboardF7\nThe raw DEC usage code 64.\ncase keyboardF8\nThe raw DEC usage code 65.\ncase keyboardF9\nThe raw DEC usage code 66.\ncase keyboardF10\nThe raw DEC usage code 67.\ncase keyboardF11\nThe raw DEC usage code 68.\ncase keyboardF12\nThe raw DEC usage code 69.\ncase keyboardF13\nThe raw DEC usage code 104.\ncase keyboardF14\nThe raw DEC usage code 105.\ncase keyboardF15\nThe raw DEC usage code 106.\ncase keyboardF16\nThe raw DEC usage code 107.\ncase keyboardF17\nThe raw DEC usage code 108.\ncase keyboardF18\nThe raw DEC usage code 109.\ncase keyboardF19\nThe raw DEC usage code 110.\ncase keyboardF20\nThe raw DEC usage code 111.\ncase keyboardF22\nThe raw DEC usage code 113.\ncase keyboardF23\nThe raw DEC usage code 114.\ncase keyboardF24\nThe raw DEC usage code 115."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardF17 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardf17",
    "html": "See Also\nFunction keys\ncase keyboardF1\nThe raw DEC usage code 58.\ncase keyboardF2\nThe raw DEC usage code 59.\ncase keyboardF3\nThe raw DEC usage code 60.\ncase keyboardF4\nThe raw DEC usage code 61.\ncase keyboardF5\nThe raw DEC usage code 62.\ncase keyboardF6\nThe raw DEC usage code 63.\ncase keyboardF7\nThe raw DEC usage code 64.\ncase keyboardF8\nThe raw DEC usage code 65.\ncase keyboardF9\nThe raw DEC usage code 66.\ncase keyboardF10\nThe raw DEC usage code 67.\ncase keyboardF11\nThe raw DEC usage code 68.\ncase keyboardF12\nThe raw DEC usage code 69.\ncase keyboardF13\nThe raw DEC usage code 104.\ncase keyboardF14\nThe raw DEC usage code 105.\ncase keyboardF15\nThe raw DEC usage code 106.\ncase keyboardF16\nThe raw DEC usage code 107.\ncase keyboardF18\nThe raw DEC usage code 109.\ncase keyboardF19\nThe raw DEC usage code 110.\ncase keyboardF20\nThe raw DEC usage code 111.\ncase keyboardF21\nThe raw DEC usage code 112.\ncase keyboardF22\nThe raw DEC usage code 113.\ncase keyboardF23\nThe raw DEC usage code 114.\ncase keyboardF24\nThe raw DEC usage code 115."
  },
  {
    "title": "UIKeyboardHIDUsage.keypad2 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keypad2",
    "html": "See Also\nKeypad keys\ncase keypad0\nThe raw DEC usage code 98.\ncase keypad1\nThe raw DEC usage code 89.\ncase keypad3\nThe raw DEC usage code 91.\ncase keypad4\nThe raw DEC usage code 92.\ncase keypad5\nThe raw DEC usage code 93.\ncase keypad6\nThe raw DEC usage code 94.\ncase keypad7\nThe raw DEC usage code 95.\ncase keypad8\nThe raw DEC usage code 96.\ncase keypad9\nThe raw DEC usage code 97.\ncase keypadAsterisk\nThe raw DEC usage code 85.\ncase keypadComma\nThe raw DEC usage code 133.\ncase keypadEnter\nThe raw DEC usage code 88.\ncase keypadEqualSign\nThe raw DEC usage code 103.\ncase keypadEqualSignAS400\nThe raw DEC usage code 134.\ncase keypadHyphen\nThe raw DEC usage code 86.\ncase keypadNumLock\nThe raw DEC usage code 83.\ncase keypadPeriod\nThe raw DEC usage code 99.\ncase keypadPlus\nThe raw DEC usage code 87.\ncase keypadSlash\nThe raw DEC usage code 84."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardF19 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardf19",
    "html": "See Also\nFunction keys\ncase keyboardF1\nThe raw DEC usage code 58.\ncase keyboardF2\nThe raw DEC usage code 59.\ncase keyboardF3\nThe raw DEC usage code 60.\ncase keyboardF4\nThe raw DEC usage code 61.\ncase keyboardF5\nThe raw DEC usage code 62.\ncase keyboardF6\nThe raw DEC usage code 63.\ncase keyboardF7\nThe raw DEC usage code 64.\ncase keyboardF8\nThe raw DEC usage code 65.\ncase keyboardF9\nThe raw DEC usage code 66.\ncase keyboardF10\nThe raw DEC usage code 67.\ncase keyboardF11\nThe raw DEC usage code 68.\ncase keyboardF12\nThe raw DEC usage code 69.\ncase keyboardF13\nThe raw DEC usage code 104.\ncase keyboardF14\nThe raw DEC usage code 105.\ncase keyboardF15\nThe raw DEC usage code 106.\ncase keyboardF16\nThe raw DEC usage code 107.\ncase keyboardF17\nThe raw DEC usage code 108.\ncase keyboardF18\nThe raw DEC usage code 109.\ncase keyboardF20\nThe raw DEC usage code 111.\ncase keyboardF21\nThe raw DEC usage code 112.\ncase keyboardF22\nThe raw DEC usage code 113.\ncase keyboardF23\nThe raw DEC usage code 114.\ncase keyboardF24\nThe raw DEC usage code 115."
  },
  {
    "title": "UIKeyboardHIDUsage.keyboardF20 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/uikit/uikeyboardhidusage/keyboardf20",
    "html": "See Also\nFunction keys\ncase keyboardF1\nThe raw DEC usage code 58.\ncase keyboardF2\nThe raw DEC usage code 59.\ncase keyboardF3\nThe raw DEC usage code 60.\ncase keyboardF4\nThe raw DEC usage code 61.\ncase keyboardF5\nThe raw DEC usage code 62.\ncase keyboardF6\nThe raw DEC usage code 63.\ncase keyboardF7\nThe raw DEC usage code 64.\ncase keyboardF8\nThe raw DEC usage code 65.\ncase keyboardF9\nThe raw DEC usage code 66.\ncase keyboardF10\nThe raw DEC usage code 67.\ncase keyboardF11\nThe raw DEC usage code 68.\ncase keyboardF12\nThe raw DEC usage code 69.\ncase keyboardF13\nThe raw DEC usage code 104.\ncase keyboardF14\nThe raw DEC usage code 105.\ncase keyboardF15\nThe raw DEC usage code 106.\ncase keyboardF16\nThe raw DEC usage code 107.\ncase keyboardF17\nThe raw DEC usage code 108.\ncase keyboardF18\nThe raw DEC usage code 109.\ncase keyboardF19\nThe raw DEC usage code 110.\ncase keyboardF21\nThe raw DEC usage code 112.\ncase keyboardF22\nThe raw DEC usage code 113.\ncase keyboardF23\nThe raw DEC usage code 114.\ncase keyboardF24\nThe raw DEC usage code 115."
  }
]
