[
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/defaultnavigationviewstyle/init()",
        "html": "Deprecated\n\nReplace a styled NavigationView with a NavigationStack or NavigationSplitView. For more information, see Migrating to new navigation types.\n\nDiscussion\n\nUse automatic to construct this style."
    },
    {
        "title": "never",
        "url": "https://developer.apple.com/documentation/swiftui/pageindexviewstyle/backgrounddisplaymode/never",
        "html": "See Also\nGetting the display modes\nstatic let automatic: PageIndexViewStyle.BackgroundDisplayMode\nBackground will use the default for the platform.\nstatic let always: PageIndexViewStyle.BackgroundDisplayMode\nBackground is always displayed behind the page index view.\nstatic let interactive: PageIndexViewStyle.BackgroundDisplayMode\nBackground is only shown while the index view is interacted with."
    },
    {
        "title": "SequenceGesture.Value.second(_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/sequencegesture/value/second(_:_:)",
        "html": "See Also\nGetting gesture values\ncase first(First.Value)\nThe first gesture hasn\u2019t ended."
    },
    {
        "title": "DefaultNavigationViewStyle",
        "url": "https://developer.apple.com/documentation/swiftui/defaultnavigationviewstyle",
        "html": "Deprecated\n\nReplace a styled NavigationView with a NavigationStack or NavigationSplitView. For more information, see Migrating to new navigation types.\n\nOverview\n\nUse automatic to construct this style.\n\nTopics\nCreating a default navigation view style\ninit()\nCreates the default navigation view style.\nRelationships\nConforms To\nNavigationViewStyle\nSee Also\nSupporting types\nstruct ColumnNavigationViewStyle\nA navigation view style represented by a series of views in columns.\nDeprecated\nstruct StackNavigationViewStyle\nA navigation view style represented by a view stack that only shows a single top view at a time.\nDeprecated\nstruct DoubleColumnNavigationViewStyle\nA navigation view style represented by a primary view stack that navigates to a detail view.\nDeprecated"
    },
    {
        "title": "ColumnNavigationViewStyle",
        "url": "https://developer.apple.com/documentation/swiftui/columnnavigationviewstyle",
        "html": "Deprecated\n\nReplace a styled NavigationView with a NavigationStack or NavigationSplitView. For more information, see Migrating to new navigation types.\n\nOverview\n\nUse columns to construct this style.\n\nRelationships\nConforms To\nNavigationViewStyle\nSee Also\nSupporting types\nstruct DefaultNavigationViewStyle\nThe default navigation view style.\nDeprecated\nstruct StackNavigationViewStyle\nA navigation view style represented by a view stack that only shows a single top view at a time.\nDeprecated\nstruct DoubleColumnNavigationViewStyle\nA navigation view style represented by a primary view stack that navigates to a detail view.\nDeprecated"
    },
    {
        "title": "interactive",
        "url": "https://developer.apple.com/documentation/swiftui/pageindexviewstyle/backgrounddisplaymode/interactive",
        "html": "See Also\nGetting the display modes\nstatic let automatic: PageIndexViewStyle.BackgroundDisplayMode\nBackground will use the default for the platform.\nstatic let always: PageIndexViewStyle.BackgroundDisplayMode\nBackground is always displayed behind the page index view.\nstatic let never: PageIndexViewStyle.BackgroundDisplayMode\nBackground is never displayed behind the page index view."
    },
    {
        "title": "KeyPress.Result.ignored",
        "url": "https://developer.apple.com/documentation/swiftui/keypress/result/ignored",
        "html": "See Also\nGetting the result\ncase handled\nThe action consumed the event, preventing dispatch from continuing."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/doublecolumnnavigationviewstyle/init()",
        "html": "Deprecated\n\nUse ColumnNavigationViewStyle instead."
    },
    {
        "title": "visible",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltransitionconfiguration/threshold/visible",
        "html": "See Also\nGetting the threshold\nstatic var centered: ScrollTransitionConfiguration.Threshold\nThe target view is centered within the container\nstatic let hidden: ScrollTransitionConfiguration.Threshold\nstatic func visible(Double) -> ScrollTransitionConfiguration.Threshold\nThe target view is visible by the given amount, where zero is fully hidden, and one is fully visible."
    },
    {
        "title": "first",
        "url": "https://developer.apple.com/documentation/swiftui/simultaneousgesture/value/first",
        "html": "See Also\nGetting gesture values\nvar second: Second.Value?\nThe value of the second gesture."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/stacknavigationviewstyle/init()",
        "html": "Deprecated\n\nReplace a styled NavigationView with a NavigationStack or NavigationSplitView. For more information, see Migrating to new navigation types.\n\nDiscussion\n\nUse stack to construct this style."
    },
    {
        "title": "all",
        "url": "https://developer.apple.com/documentation/swiftui/keypress/phases/all",
        "html": "See Also\nGetting the phases\nstatic let down: KeyPress.Phases\nThe user pressed down on a key.\nstatic let up: KeyPress.Phases\nThe user released a key.\nstatic let `repeat`: KeyPress.Phases\nThe user held a key down to issue a sequence of repeating events."
    },
    {
        "title": "init(_:destination:tag:selection:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlink/init(_:destination:tag:selection:)-6unyq",
        "html": "Deprecated\n\nUse init(_:value:) inside a List within a NavigationStack or NavigationSplitView. For more information, see Migrating to new navigation types.\n\nParameters\ntitle\n\nA string for creating a text label.\n\ndestination\n\nA view for the navigation link to present.\n\ntag\n\nThe value of selection that causes the link to present destination.\n\nselection\n\nA bound variable that causes the link to present destination when selection becomes equal to tag.\n\nSee Also\nCreating links with view arguments\ninit(LocalizedStringKey, destination: Destination)\nCreates a navigation link that presents a destination view, with a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S>(S, destination: Destination)\nCreates a navigation link that presents a destination view, with a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit(destination: Destination, label: () -> Label)\nCreates a navigation link that presents the destination view.\nDeprecated\ninit(LocalizedStringKey, destination: Destination, isActive: Binding<Bool>)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S>(S, destination: Destination, isActive: Binding<Bool>)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit(destination: Destination, isActive: Binding<Bool>, label: () -> Label)\nCreates a navigation link that presents the destination view when active.\nDeprecated\ninit<V>(LocalizedStringKey, destination: Destination, tag: V, selection: Binding<V?>)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<V>(destination: Destination, tag: V, selection: Binding<V?>, label: () -> Label)\nCreates a navigation link that presents the destination view when a bound selection variable equals a given tag value.\nDeprecated"
    },
    {
        "title": "init(_:destination:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlink/init(_:destination:)-6hslu",
        "html": "Deprecated\n\nUse init(_:destination:) instead.\n\nParameters\ntitle\n\nA string for creating a text label.\n\ndestination\n\nA view for the navigation link to present.\n\nSee Also\nCreating links with view arguments\ninit(LocalizedStringKey, destination: Destination)\nCreates a navigation link that presents a destination view, with a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit(destination: Destination, label: () -> Label)\nCreates a navigation link that presents the destination view.\nDeprecated\ninit(LocalizedStringKey, destination: Destination, isActive: Binding<Bool>)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S>(S, destination: Destination, isActive: Binding<Bool>)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit(destination: Destination, isActive: Binding<Bool>, label: () -> Label)\nCreates a navigation link that presents the destination view when active.\nDeprecated\ninit<V>(LocalizedStringKey, destination: Destination, tag: V, selection: Binding<V?>)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S, V>(S, destination: Destination, tag: V, selection: Binding<V?>)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<V>(destination: Destination, tag: V, selection: Binding<V?>, label: () -> Label)\nCreates a navigation link that presents the destination view when a bound selection variable equals a given tag value.\nDeprecated"
    },
    {
        "title": "NavigationBarItem.TitleDisplayMode.large",
        "url": "https://developer.apple.com/documentation/swiftui/navigationbaritem/titledisplaymode/large",
        "html": "See Also\nGetting title display modes\ncase automatic\nInherit the display mode from the previous navigation item.\ncase inline\nDisplay the title within the standard bounds of the navigation bar."
    },
    {
        "title": "location",
        "url": "https://developer.apple.com/documentation/swiftui/spatialeventcollection/event/location",
        "html": "See Also\nLocating the event\nvar location3D: Point3D\nThe 3D location of the touch.\nBeta\nvar selectionRay: Ray3D?\nThe 3D ray used to target the touch.\nBeta\nvar inputDevicePose: SpatialEventCollection.Event.InputDevicePose?\nThe 3D position and orientation of the device controlling the touch, if one exists.\nBeta\nstruct InputDevicePose\nA pose describing the input device like a hand controlling the event.\nBeta\nvar targetedEntity: Entity?\nThe entity target for this touch, if one exists.\nBeta"
    },
    {
        "title": "init(_:tag:selection:destination:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlink/init(_:tag:selection:destination:)-510fq",
        "html": "Deprecated\n\nUse init(_:value:) inside a List within a NavigationStack or NavigationSplitView. For more information, see Migrating to new navigation types.\n\nParameters\ntitleKey\n\nA localized string key for creating a text label.\n\ntag\n\nThe value of selection that causes the link to present destination.\n\nselection\n\nA bound variable that causes the link to present destination when selection becomes equal to tag.\n\ndestination\n\nA view for the navigation link to present.\n\nSee Also\nCreating links with view builders\ninit(LocalizedStringKey, isActive: Binding<Bool>, destination: () -> Destination)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S>(S, isActive: Binding<Bool>, destination: () -> Destination)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit(isActive: Binding<Bool>, destination: () -> Destination, label: () -> Label)\nCreates a navigation link that presents the destination view when active.\nDeprecated\ninit<S, V>(S, tag: V, selection: Binding<V?>, destination: () -> Destination)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<V>(tag: V, selection: Binding<V?>, destination: () -> Destination, label: () -> Label)\nCreates a navigation link that presents the destination view when a bound selection variable equals a given tag value.\nDeprecated"
    },
    {
        "title": "init(destinationName:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlink/init(destinationname:label:)",
        "html": "Deprecated\n\nUse init(destination:label:) instead.\n\nParameters\ndestinationName\n\nThe storyboard name of a view for the navigation link to present.\n\nlabel\n\nA view builder to produce a label describing the destination to present.\n\nSee Also\nCreating links for WatchKit\ninit(destinationName: String, isActive: Binding<Bool>, label: () -> Label)\nCreates a navigation link that presents a view from a WatchKit storyboard when active.\nAvailable when Label conforms to View and Destination is _WKStoryboardContent.\nDeprecated\ninit<V>(destinationName: String, tag: V, selection: Binding<V?>, label: () -> Label)\nCreates a navigation link that presents a view from a WatchKit storyboard when a bound selection variable matches a value you provide.\nAvailable when Label conforms to View and Destination is _WKStoryboardContent.\nDeprecated"
    },
    {
        "title": "always",
        "url": "https://developer.apple.com/documentation/swiftui/pagetabviewstyle/indexdisplaymode/always",
        "html": "See Also\nGetting the modes\nstatic let automatic: PageTabViewStyle.IndexDisplayMode\nDisplays an index view when there are more than one page\nstatic let never: PageTabViewStyle.IndexDisplayMode\nNever display an index view"
    },
    {
        "title": "blur",
        "url": "https://developer.apple.com/documentation/swiftui/verticalpagetabviewstyle/transitionstyle/blur",
        "html": "See Also\nGetting the transition styles\nstatic let automatic: VerticalPageTabViewStyle.TransitionStyle\nAutomatic transition style\nstatic let identity: VerticalPageTabViewStyle.TransitionStyle\nA transition style that has no animation between each tab"
    },
    {
        "title": "SpatialEventCollection.Event.Kind.pointer",
        "url": "https://developer.apple.com/documentation/swiftui/spatialeventcollection/event/kind-swift.enum/pointer",
        "html": "See Also\nGetting the event type\ncase directPinch\nAn event generated from a pinching hand in close proximity to content.\nBeta\ncase indirectPinch\nAn event generated from an indirectly targeted pinching hand.\nBeta\ncase touch\nAn event generated from a touch directly targeting content.\nBeta"
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/pageindexviewstyle/backgrounddisplaymode/automatic",
        "html": "See Also\nGetting the display modes\nstatic let always: PageIndexViewStyle.BackgroundDisplayMode\nBackground is always displayed behind the page index view.\nstatic let interactive: PageIndexViewStyle.BackgroundDisplayMode\nBackground is only shown while the index view is interacted with.\nstatic let never: PageIndexViewStyle.BackgroundDisplayMode\nBackground is never displayed behind the page index view."
    },
    {
        "title": "makeCoordinator()",
        "url": "https://developer.apple.com/documentation/swiftui/uiviewrepresentable/makecoordinator()-9405l",
        "html": "Discussion\n\nImplement this method if changes to your view might affect other parts of your app. In your implementation, create a custom Swift instance that can communicate with other parts of your interface. For example, you might provide an instance that binds its variables to SwiftUI properties, causing the two to remain synchronized. If your view doesn\u2019t interact with other parts of your app, providing a coordinator is unnecessary.\n\nSwiftUI calls this method before calling the makeUIView(context:) method. The system provides your coordinator either directly or as part of a context structure when calling the other methods of your representable instance."
    },
    {
        "title": "always",
        "url": "https://developer.apple.com/documentation/swiftui/pageindexviewstyle/backgrounddisplaymode/always",
        "html": "See Also\nGetting the display modes\nstatic let automatic: PageIndexViewStyle.BackgroundDisplayMode\nBackground will use the default for the platform.\nstatic let interactive: PageIndexViewStyle.BackgroundDisplayMode\nBackground is only shown while the index view is interacted with.\nstatic let never: PageIndexViewStyle.BackgroundDisplayMode\nBackground is never displayed behind the page index view."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/borderlessbuttonmenubuttonstyle/init()",
        "html": "Deprecated\n\nUse `BorderlessButtonMenuStyle` instead."
    },
    {
        "title": "KeyPress.Result.handled",
        "url": "https://developer.apple.com/documentation/swiftui/keypress/result/handled",
        "html": "See Also\nGetting the result\ncase ignored\nThe action ignored the event, allowing dispatch to continue."
    },
    {
        "title": "hidden",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltransitionconfiguration/threshold/hidden",
        "html": "See Also\nGetting the threshold\nstatic var centered: ScrollTransitionConfiguration.Threshold\nThe target view is centered within the container\nstatic let visible: ScrollTransitionConfiguration.Threshold\nstatic func visible(Double) -> ScrollTransitionConfiguration.Threshold\nThe target view is visible by the given amount, where zero is fully hidden, and one is fully visible."
    },
    {
        "title": "translation3D",
        "url": "https://developer.apple.com/documentation/swiftui/draggesture/value/translation3d",
        "html": "See Also\nGetting 3D position\nvar startLocation3D: Point3D\nThe 3D start location of the drag gesture.\nBeta\nvar location3D: Point3D\nThe 3D location of the drag gesture.\nBeta\nvar predictedEndLocation3D: Point3D\nA prediction of where the final location would be if dragging stopped now, based on the current drag velocity.\nBeta\nvar predictedEndTranslation3D: Vector3D\nA prediction of what the final translation would be if dragging stopped now, based on the current drag velocity.\nBeta\nvar startInputDevicePose3D: Pose3D?\nThe starting 3D pose of the device driving the drag, if one exists.\nBeta\nvar inputDevicePose3D: Pose3D?\nThe 3D pose of the device driving the drag, if one exists.\nBeta"
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/viewalignedscrolltargetbehavior/limitbehavior/automatic",
        "html": "Discussion\n\nBy default, the behavior will be limited in compact horizontal size classes and will not be limited otherwise.\n\nSee Also\nGetting the limit behavior\nstatic var always: ViewAlignedScrollTargetBehavior.LimitBehavior\nThe always limit behavior.\nstatic var never: ViewAlignedScrollTargetBehavior.LimitBehavior\nThe never limit behavior."
    },
    {
        "title": "location",
        "url": "https://developer.apple.com/documentation/swiftui/draggesture/value/location",
        "html": "See Also\nGetting 2D position\nvar startLocation: CGPoint\nThe location of the drag gesture\u2019s first event.\nvar predictedEndLocation: CGPoint\nA prediction, based on the current drag velocity, of where the final location will be if dragging stopped now.\nvar translation: CGSize\nThe total translation from the start of the drag gesture to the current event of the drag gesture.\nvar predictedEndTranslation: CGSize\nA prediction, based on the current drag velocity, of what the final translation will be if dragging stopped now."
    },
    {
        "title": "chartXAxisLabel(position:alignment:spacing:content:)",
        "url": "https://developer.apple.com/documentation/SwiftUI/View/chartXAxisLabel(position:alignment:spacing:content:)",
        "html": "Parameters\nposition\n\nThe position of the label.\n\nalignment\n\nThe alignment of the label.\n\nspacing\n\nThe spacing of the label from the axis markers.\n\ncontent\n\nThe label content.\n\nSee Also\nAxis Labels\nfunc chartXAxisLabel<S>(S, position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nAdds x axis label for charts in the view.\nfunc chartXAxisLabel(LocalizedStringKey, position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nAdds x axis label for charts in the view.\nfunc chartYAxisLabel<S>(S, position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nAdds y axis label for charts in the view.\nfunc chartYAxisLabel(LocalizedStringKey, position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nAdds y axis label for charts in the view.\nfunc chartYAxisLabel<C>(position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?, content: () -> C) -> some View\nAdds y axis label for charts in the view."
    },
    {
        "title": "repeat",
        "url": "https://developer.apple.com/documentation/swiftui/keypress/phases/repeat",
        "html": "See Also\nGetting the phases\nstatic let down: KeyPress.Phases\nThe user pressed down on a key.\nstatic let up: KeyPress.Phases\nThe user released a key.\nstatic let all: KeyPress.Phases\nA value that matches all key press phases."
    },
    {
        "title": "up",
        "url": "https://developer.apple.com/documentation/swiftui/keypress/phases/up",
        "html": "See Also\nGetting the phases\nstatic let down: KeyPress.Phases\nThe user pressed down on a key.\nstatic let `repeat`: KeyPress.Phases\nThe user held a key down to issue a sequence of repeating events.\nstatic let all: KeyPress.Phases\nA value that matches all key press phases."
    },
    {
        "title": "NavigationBarItem.TitleDisplayMode.inline",
        "url": "https://developer.apple.com/documentation/swiftui/navigationbaritem/titledisplaymode/inline",
        "html": "See Also\nGetting title display modes\ncase automatic\nInherit the display mode from the previous navigation item.\ncase large\nDisplay a large title within an expanded navigation bar."
    },
    {
        "title": "init(_:destination:tag:selection:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlink/init(_:destination:tag:selection:)-1rm3u",
        "html": "Deprecated\n\nUse init(_:value:) inside a List within a NavigationStack or NavigationSplitView. For more information, see Migrating to new navigation types.\n\nParameters\ntitleKey\n\nA localized string key for creating a text label.\n\ndestination\n\nA view for the navigation link to present.\n\ntag\n\nThe value of selection that causes the link to present destination.\n\nselection\n\nA bound variable that causes the link to present destination when selection becomes equal to tag.\n\nSee Also\nCreating links with view arguments\ninit(LocalizedStringKey, destination: Destination)\nCreates a navigation link that presents a destination view, with a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S>(S, destination: Destination)\nCreates a navigation link that presents a destination view, with a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit(destination: Destination, label: () -> Label)\nCreates a navigation link that presents the destination view.\nDeprecated\ninit(LocalizedStringKey, destination: Destination, isActive: Binding<Bool>)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S>(S, destination: Destination, isActive: Binding<Bool>)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit(destination: Destination, isActive: Binding<Bool>, label: () -> Label)\nCreates a navigation link that presents the destination view when active.\nDeprecated\ninit<S, V>(S, destination: Destination, tag: V, selection: Binding<V?>)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<V>(destination: Destination, tag: V, selection: Binding<V?>, label: () -> Label)\nCreates a navigation link that presents the destination view when a bound selection variable equals a given tag value.\nDeprecated"
    },
    {
        "title": "init(_:destination:isActive:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlink/init(_:destination:isactive:)-3v44",
        "html": "Deprecated\n\nUse init(_:value:) instead. For more information, see Migrating to new navigation types.\n\nParameters\ntitle\n\nA string for creating a text label.\n\ndestination\n\nA view for the navigation link to present.\n\nisActive\n\nA binding to a Boolean value that indicates whether destination is currently presented.\n\nSee Also\nCreating links with view arguments\ninit(LocalizedStringKey, destination: Destination)\nCreates a navigation link that presents a destination view, with a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S>(S, destination: Destination)\nCreates a navigation link that presents a destination view, with a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit(destination: Destination, label: () -> Label)\nCreates a navigation link that presents the destination view.\nDeprecated\ninit(LocalizedStringKey, destination: Destination, isActive: Binding<Bool>)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit(destination: Destination, isActive: Binding<Bool>, label: () -> Label)\nCreates a navigation link that presents the destination view when active.\nDeprecated\ninit<V>(LocalizedStringKey, destination: Destination, tag: V, selection: Binding<V?>)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S, V>(S, destination: Destination, tag: V, selection: Binding<V?>)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<V>(destination: Destination, tag: V, selection: Binding<V?>, label: () -> Label)\nCreates a navigation link that presents the destination view when a bound selection variable equals a given tag value.\nDeprecated"
    },
    {
        "title": "init(destination:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlink/init(destination:label:)-9dxix",
        "html": "Deprecated\n\nUse init(destination:label:) instead.\n\nParameters\ndestination\n\nA view for the navigation link to present.\n\nlabel\n\nA view builder to produce a label describing the destination to present.\n\nSee Also\nCreating links with view arguments\ninit(LocalizedStringKey, destination: Destination)\nCreates a navigation link that presents a destination view, with a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S>(S, destination: Destination)\nCreates a navigation link that presents a destination view, with a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit(LocalizedStringKey, destination: Destination, isActive: Binding<Bool>)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S>(S, destination: Destination, isActive: Binding<Bool>)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit(destination: Destination, isActive: Binding<Bool>, label: () -> Label)\nCreates a navigation link that presents the destination view when active.\nDeprecated\ninit<V>(LocalizedStringKey, destination: Destination, tag: V, selection: Binding<V?>)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S, V>(S, destination: Destination, tag: V, selection: Binding<V?>)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<V>(destination: Destination, tag: V, selection: Binding<V?>, label: () -> Label)\nCreates a navigation link that presents the destination view when a bound selection variable equals a given tag value.\nDeprecated"
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/pagetabviewstyle/indexdisplaymode/automatic",
        "html": "See Also\nGetting the modes\nstatic let always: PageTabViewStyle.IndexDisplayMode\nAlways display an index view regardless of page count\nstatic let never: PageTabViewStyle.IndexDisplayMode\nNever display an index view"
    },
    {
        "title": "never",
        "url": "https://developer.apple.com/documentation/swiftui/pagetabviewstyle/indexdisplaymode/never",
        "html": "See Also\nGetting the modes\nstatic let always: PageTabViewStyle.IndexDisplayMode\nAlways display an index view regardless of page count\nstatic let automatic: PageTabViewStyle.IndexDisplayMode\nDisplays an index view when there are more than one page"
    },
    {
        "title": "init(_:destination:isActive:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlink/init(_:destination:isactive:)-4whx5",
        "html": "Deprecated\n\nUse init(_:value:) instead. For more information, see Migrating to new navigation types.\n\nParameters\ntitleKey\n\nA localized string key for creating a text label.\n\ndestination\n\nA view for the navigation link to present.\n\nisActive\n\nA binding to a Boolean value that indicates whether destination is currently presented.\n\nSee Also\nCreating links with view arguments\ninit(LocalizedStringKey, destination: Destination)\nCreates a navigation link that presents a destination view, with a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S>(S, destination: Destination)\nCreates a navigation link that presents a destination view, with a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit(destination: Destination, label: () -> Label)\nCreates a navigation link that presents the destination view.\nDeprecated\ninit<S>(S, destination: Destination, isActive: Binding<Bool>)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit(destination: Destination, isActive: Binding<Bool>, label: () -> Label)\nCreates a navigation link that presents the destination view when active.\nDeprecated\ninit<V>(LocalizedStringKey, destination: Destination, tag: V, selection: Binding<V?>)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S, V>(S, destination: Destination, tag: V, selection: Binding<V?>)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<V>(destination: Destination, tag: V, selection: Binding<V?>, label: () -> Label)\nCreates a navigation link that presents the destination view when a bound selection variable equals a given tag value.\nDeprecated"
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/verticalpagetabviewstyle/transitionstyle/automatic",
        "html": "See Also\nGetting the transition styles\nstatic let blur: VerticalPageTabViewStyle.TransitionStyle\nA transition style that blurs content between each tab\nstatic let identity: VerticalPageTabViewStyle.TransitionStyle\nA transition style that has no animation between each tab"
    },
    {
        "title": "init(destinationName:isActive:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlink/init(destinationname:isactive:label:)",
        "html": "Deprecated\n\nUse init(value:label:) instead. For more information, see Migrating to new navigation types.\n\nParameters\ndestinationName\n\nThe storyboard name of a view for the navigation link to present.\n\nisActive\n\nA binding to a Boolean value that indicates whether destination is currently presented.\n\nlabel\n\nA view builder to produce a label describing the destination to present.\n\nSee Also\nCreating links for WatchKit\ninit<V>(destinationName: String, tag: V, selection: Binding<V?>, label: () -> Label)\nCreates a navigation link that presents a view from a WatchKit storyboard when a bound selection variable matches a value you provide.\nAvailable when Label conforms to View and Destination is _WKStoryboardContent.\nDeprecated\ninit(destinationName: String, label: () -> Label)\nCreates a navigation link that presents a view from a WatchKit storyboard.\nAvailable when Label conforms to View and Destination is _WKStoryboardContent.\nDeprecated"
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/borderlesspulldownmenubuttonstyle/init()",
        "html": "Deprecated\n\nUse `BorderlessButtonMenuStyle` instead."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/pulldownmenubuttonstyle/init()",
        "html": "Deprecated\n\nUse `BorderedButtonMenuStyle` instead."
    },
    {
        "title": "pose3D",
        "url": "https://developer.apple.com/documentation/swiftui/spatialeventcollection/event/inputdevicepose-swift.struct/pose3d",
        "html": "See Also\nGetting the event type\nvar altitude: Angle\nThe altitude angle.\nBeta\nvar azimuth: Angle\nThe azimuth angle.\nBeta"
    },
    {
        "title": "init(_:tag:selection:destination:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlink/init(_:tag:selection:destination:)-4oa09",
        "html": "Deprecated\n\nUse init(_:value:) inside a List within a NavigationStack or NavigationSplitView. For more information, see Migrating to new navigation types.\n\nParameters\ntitle\n\nA string for creating a text label.\n\ntag\n\nThe value of selection that causes the link to present destination.\n\nselection\n\nA bound variable that causes the link to present destination when selection becomes equal to tag.\n\ndestination\n\nA view for the navigation link to present.\n\nSee Also\nCreating links with view builders\ninit(LocalizedStringKey, isActive: Binding<Bool>, destination: () -> Destination)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S>(S, isActive: Binding<Bool>, destination: () -> Destination)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit(isActive: Binding<Bool>, destination: () -> Destination, label: () -> Label)\nCreates a navigation link that presents the destination view when active.\nDeprecated\ninit<V>(LocalizedStringKey, tag: V, selection: Binding<V?>, destination: () -> Destination)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<V>(tag: V, selection: Binding<V?>, destination: () -> Destination, label: () -> Label)\nCreates a navigation link that presents the destination view when a bound selection variable equals a given tag value.\nDeprecated"
    },
    {
        "title": "light",
        "url": "https://developer.apple.com/documentation/swiftui/sensoryfeedback/weight/light",
        "html": "See Also\nGetting flexibility values\nstatic let medium: SensoryFeedback.Weight\nIndicates a collision between medium-sized or medium-weight UI objects.\nstatic let heavy: SensoryFeedback.Weight\nIndicates a collision between large or heavyweight UI objects."
    },
    {
        "title": "init(_:isActive:destination:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlink/init(_:isactive:destination:)-gn8q",
        "html": "Deprecated\n\nUse init(_:value:) inside a NavigationStack or NavigationSplitView. For more information, see Migrating to new navigation types.\n\nParameters\ntitleKey\n\nA localized string key for creating a text label.\n\nisActive\n\nA binding to a Boolean value that indicates whether destination is currently presented.\n\ndestination\n\nA view for the navigation link to present.\n\nSee Also\nCreating links with view builders\ninit<S>(S, isActive: Binding<Bool>, destination: () -> Destination)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit(isActive: Binding<Bool>, destination: () -> Destination, label: () -> Label)\nCreates a navigation link that presents the destination view when active.\nDeprecated\ninit<V>(LocalizedStringKey, tag: V, selection: Binding<V?>, destination: () -> Destination)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S, V>(S, tag: V, selection: Binding<V?>, destination: () -> Destination)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<V>(tag: V, selection: Binding<V?>, destination: () -> Destination, label: () -> Label)\nCreates a navigation link that presents the destination view when a bound selection variable equals a given tag value.\nDeprecated"
    },
    {
        "title": "Color.RGBColorSpace.displayP3",
        "url": "https://developer.apple.com/documentation/swiftui/color/rgbcolorspace/displayp3",
        "html": "Discussion\n\nThis color space uses the Digital Cinema Initiatives - Protocol 3 (DCI-P3) primary colors, a D65 white point, and the Color.RGBColorSpace.sRGB transfer function.\n\nSee Also\nGetting color spaces\ncase sRGB\nThe extended red, green, blue (sRGB) color space.\ncase sRGBLinear\nThe extended sRGB color space with a linear transfer function."
    },
    {
        "title": "init(_:isActive:destination:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlink/init(_:isactive:destination:)-6xw7h",
        "html": "Deprecated\n\nUse init(_:value:) inside a NavigationStack or NavigationSplitView. For more information, see Migrating to new navigation types.\n\nParameters\ntitle\n\nA string for creating a text label.\n\nisActive\n\nA binding to a Boolean value that indicates whether destination is currently presented.\n\ndestination\n\nA view for the navigation link to present.\n\nSee Also\nCreating links with view builders\ninit(LocalizedStringKey, isActive: Binding<Bool>, destination: () -> Destination)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit(isActive: Binding<Bool>, destination: () -> Destination, label: () -> Label)\nCreates a navigation link that presents the destination view when active.\nDeprecated\ninit<V>(LocalizedStringKey, tag: V, selection: Binding<V?>, destination: () -> Destination)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S, V>(S, tag: V, selection: Binding<V?>, destination: () -> Destination)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<V>(tag: V, selection: Binding<V?>, destination: () -> Destination, label: () -> Label)\nCreates a navigation link that presents the destination view when a bound selection variable equals a given tag value.\nDeprecated"
    },
    {
        "title": "identity",
        "url": "https://developer.apple.com/documentation/swiftui/verticalpagetabviewstyle/transitionstyle/identity",
        "html": "See Also\nGetting the transition styles\nstatic let automatic: VerticalPageTabViewStyle.TransitionStyle\nAutomatic transition style\nstatic let blur: VerticalPageTabViewStyle.TransitionStyle\nA transition style that blurs content between each tab"
    },
    {
        "title": "kind",
        "url": "https://developer.apple.com/documentation/swiftui/spatialeventcollection/event/kind-swift.property",
        "html": "See Also\nIdentifying the event\nvar timestamp: TimeInterval\nThe time the event was processed.\nBeta\nvar id: SpatialEventCollection.Event.ID\nAn identifier that uniquely identifies the event over its lifetime.\nBeta\nstruct ID\nA value that uniquely identifies an event over the course of its lifetime.\nBeta\nenum Kind\nThe possible input sources or modes of an event.\nBeta\nvar modifierKeys: EventModifiers\nThe set of active modifier keys at the time of this event.\nBeta"
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/defaultmenubuttonstyle/init()",
        "html": "Deprecated\n\nUse `menuStyle(.automatic)` instead."
    },
    {
        "title": "SpatialEventCollection.Event.Kind.indirectPinch",
        "url": "https://developer.apple.com/documentation/swiftui/spatialeventcollection/event/kind-swift.enum/indirectpinch",
        "html": "See Also\nGetting the event type\ncase directPinch\nAn event generated from a pinching hand in close proximity to content.\nBeta\ncase pointer\nAn event representing a click-based, indirect input device describing the input sequence from click to click release.\nBeta\ncase touch\nAn event generated from a touch directly targeting content.\nBeta"
    },
    {
        "title": "SpatialEventCollection.Event.Kind.directPinch",
        "url": "https://developer.apple.com/documentation/swiftui/spatialeventcollection/event/kind-swift.enum/directpinch",
        "html": "See Also\nGetting the event type\ncase indirectPinch\nAn event generated from an indirectly targeted pinching hand.\nBeta\ncase pointer\nAn event representing a click-based, indirect input device describing the input sequence from click to click release.\nBeta\ncase touch\nAn event generated from a touch directly targeting content.\nBeta"
    },
    {
        "title": "azimuth",
        "url": "https://developer.apple.com/documentation/swiftui/spatialeventcollection/event/inputdevicepose-swift.struct/azimuth",
        "html": "Discussion\n\nAn angle of zero points along the content\u2019s positive x-axis.\n\nSee Also\nGetting the event type\nvar altitude: Angle\nThe altitude angle.\nBeta\nvar pose3D: Pose3D\nThe 3D pose of the input device.\nBeta"
    },
    {
        "title": "altitude",
        "url": "https://developer.apple.com/documentation/swiftui/spatialeventcollection/event/inputdevicepose-swift.struct/altitude",
        "html": "Discussion\n\nAn angle of zero indicates that the device is parallel to the content, while 90 degrees indicates that it is normal to the content surface.\n\nSee Also\nGetting the event type\nvar azimuth: Angle\nThe azimuth angle.\nBeta\nvar pose3D: Pose3D\nThe 3D pose of the input device.\nBeta"
    },
    {
        "title": "SpatialEventCollection.Event.Kind.touch",
        "url": "https://developer.apple.com/documentation/swiftui/spatialeventcollection/event/kind-swift.enum/touch",
        "html": "See Also\nGetting the event type\ncase directPinch\nAn event generated from a pinching hand in close proximity to content.\nBeta\ncase indirectPinch\nAn event generated from an indirectly targeted pinching hand.\nBeta\ncase pointer\nAn event representing a click-based, indirect input device describing the input sequence from click to click release.\nBeta"
    },
    {
        "title": "visible(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltransitionconfiguration/threshold/visible(_:)",
        "html": "Discussion\n\nValues less than zero or greater than one are clamped.\n\nSee Also\nGetting the threshold\nstatic var centered: ScrollTransitionConfiguration.Threshold\nThe target view is centered within the container\nstatic let hidden: ScrollTransitionConfiguration.Threshold\nstatic let visible: ScrollTransitionConfiguration.Threshold"
    },
    {
        "title": "centered",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltransitionconfiguration/threshold/centered",
        "html": "See Also\nGetting the threshold\nstatic let hidden: ScrollTransitionConfiguration.Threshold\nstatic let visible: ScrollTransitionConfiguration.Threshold\nstatic func visible(Double) -> ScrollTransitionConfiguration.Threshold\nThe target view is visible by the given amount, where zero is fully hidden, and one is fully visible."
    },
    {
        "title": "inset(by:)",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltransitionconfiguration/threshold/inset(by:)",
        "html": "See Also\nModifying the threshold\nfunc interpolated(towards: ScrollTransitionConfiguration.Threshold, amount: Double) -> ScrollTransitionConfiguration.Threshold\nCreates a new threshold that combines this threshold value with another threshold, interpolated by the given amount."
    },
    {
        "title": "float3(_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/shader/argument/float3(_:_:_:)",
        "html": "See Also\nCreating argument values\nstatic var boundingRect: Shader.Argument\nReturns an argument value representing the bounding rect of the shape or view that the shader is attached to, as float4(x, y, width, height). This value is undefined for shaders that do not have a natural bounding rect (e.g. filter effects drawn into GraphicsContext).\nstatic func color(Color) -> Shader.Argument\nReturns an argument value representing color. When passed to a MSL function it will convert to a half4 value, as a premultiplied color in the target color space.\nstatic func colorArray([Color]) -> Shader.Argument\nReturns an argument value defined by the provided array of color values. When passed to an MSL function it will convert to a device const half4 *ptr, int count pair of parameters.\nstatic func data(Data) -> Shader.Argument\nReturns an argument value defined by the provided data value. When passed to an MSL function it will convert to a device const void *ptr, int size_in_bytes pair of parameters.\nstatic func float<T>(T) -> Shader.Argument\nReturns an argument value representing the MSL value float(x).\nstatic func float2(CGVector) -> Shader.Argument\nReturns an argument value representing the MSL value float2(vector.dx, vector.dy).\nstatic func float2(CGPoint) -> Shader.Argument\nReturns an argument value representing the MSL value float2(point.x, point.y).\nstatic func float2(CGSize) -> Shader.Argument\nReturns an argument value representing the MSL value float2(size.width, size.height).\nstatic func float2<T>(T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float2(x, y).\nstatic func float4<T>(T, T, T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float4(x, y, z, w).\nstatic func floatArray([Float]) -> Shader.Argument\nReturns an argument value defined by the provided array of floating point numbers. When passed to an MSL function it will convert to a device const float *ptr, int count pair of parameters.\nstatic func image(Image) -> Shader.Argument\nReturns an argument value defined by the provided image. When passed to an MSL function it will convert to a texture2d<half> value. Currently only one image parameter is supported per Shader instance."
    },
    {
        "title": "interpolated(towards:amount:)",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltransitionconfiguration/threshold/interpolated(towards:amount:)",
        "html": "Parameters\nother\n\nThe second threshold value.\n\namount\n\nThe ratio with which this threshold is combined with the given threshold, where zero is equal to this threshold, 1.0 is equal to other, and values in between combine the two thresholds.\n\nSee Also\nModifying the threshold\nfunc inset(by: Double) -> ScrollTransitionConfiguration.Threshold\nReturns a threshold that is met when the target view is closer to the center of the container by distance. Use negative values to move the threshold away from the center."
    },
    {
        "title": "location3D",
        "url": "https://developer.apple.com/documentation/swiftui/spatialtapgesture/value/location3d",
        "html": "See Also\nGetting the tap location\nvar location: CGPoint\nThe location of the tap gesture\u2019s current event."
    },
    {
        "title": "modifierKeys",
        "url": "https://developer.apple.com/documentation/swiftui/spatialeventcollection/event/modifierkeys",
        "html": "See Also\nIdentifying the event\nvar timestamp: TimeInterval\nThe time the event was processed.\nBeta\nvar id: SpatialEventCollection.Event.ID\nAn identifier that uniquely identifies the event over its lifetime.\nBeta\nstruct ID\nA value that uniquely identifies an event over the course of its lifetime.\nBeta\nvar kind: SpatialEventCollection.Event.Kind\nThe event\u2019s input source.\nBeta\nenum Kind\nThe possible input sources or modes of an event.\nBeta"
    },
    {
        "title": "AccessibilityZoomGestureAction.Direction.zoomIn",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityzoomgestureaction/direction-swift.enum/zoomin",
        "html": "See Also\nGetting the direction\ncase zoomOut\nThe gesture direction that represents zooming out."
    },
    {
        "title": "SnapshotData.SnapshotReason.appScheduled",
        "url": "https://developer.apple.com/documentation/swiftui/snapshotdata/snapshotreason/appscheduled",
        "html": "See Also\nGetting the snapshot reasons\ncase appBackgrounded\nThe app transitioned from the foreground to the background.\ncase complicationUpdate\nThe app updated the complication timeline.\ncase prelaunch\nThe system needs a snapshot for the dock, but the app has not been launched yet.\ncase returnToDefaultState\nIt has been more than an hour since the user\u2019s last interaction with the app; the app\u2019s snapshot should return to its default state."
    },
    {
        "title": "second",
        "url": "https://developer.apple.com/documentation/swiftui/simultaneousgesture/value/second",
        "html": "See Also\nGetting gesture values\nvar first: First.Value?\nThe value of the first gesture."
    },
    {
        "title": "SpatialEventCollection.Event.Phase",
        "url": "https://developer.apple.com/documentation/swiftui/spatialeventcollection/event/phase-swift.enum",
        "html": "Topics\nGetting the phase\ncase active\nThe phase is active and the state associated with it is guaranteed to produce at least one more update.\ncase cancelled\nThe state associated with this phase was canceled and won\u2019t produce any more updates.\ncase ended\nThe state associated with this phase ended normally and won\u2019t produce any more updates.\nRelationships\nConforms To\nEquatable\nHashable\nSee Also\nGetting the event\u2019s current phase\nvar phase: SpatialEventCollection.Event.Phase\nThe phase of the event.\nBeta"
    },
    {
        "title": "SnapshotData.SnapshotReason.appBackgrounded",
        "url": "https://developer.apple.com/documentation/swiftui/snapshotdata/snapshotreason/appbackgrounded",
        "html": "See Also\nGetting the snapshot reasons\ncase appScheduled\nThe app scheduled this snapshot.\ncase complicationUpdate\nThe app updated the complication timeline.\ncase prelaunch\nThe system needs a snapshot for the dock, but the app has not been launched yet.\ncase returnToDefaultState\nIt has been more than an hour since the user\u2019s last interaction with the app; the app\u2019s snapshot should return to its default state."
    },
    {
        "title": "colorMultiply(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/filter/colormultiply(_:)",
        "html": "Parameters\ncolor\n\nThe color that the filter uses for the multiplication operation.\n\nReturn Value\n\nA filter that multiplies color components.\n\nSee Also\nManipulating color\nstatic func saturation(Double) -> GraphicsContext.Filter\nReturns a filter that applies a saturation adjustment.\nstatic func colorInvert(Double) -> GraphicsContext.Filter\nReturns a filter that inverts the color of their results.\nstatic func hueRotation(Angle) -> GraphicsContext.Filter\nReturns a filter that applies a hue rotation adjustment.\nstatic func grayscale(Double) -> GraphicsContext.Filter\nReturns a filter that applies a grayscale adjustment.\nstatic func colorMatrix(ColorMatrix) -> GraphicsContext.Filter\nReturns a filter that multiplies by a given color matrix."
    },
    {
        "title": "makeCoordinator()",
        "url": "https://developer.apple.com/documentation/swiftui/nsviewrepresentable/makecoordinator()-6l2eg",
        "html": "Discussion\n\nCoordinator can be accessed via Context."
    },
    {
        "title": "SequenceGesture.Value.first(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/sequencegesture/value/first(_:)",
        "html": "See Also\nGetting gesture values\ncase second(First.Value, Second.Value?)\nThe first gesture has ended."
    },
    {
        "title": "SpatialEventCollection.Event.Phase.active",
        "url": "https://developer.apple.com/documentation/swiftui/spatialeventcollection/event/phase-swift.enum/active",
        "html": "See Also\nGetting the phase\ncase cancelled\nThe state associated with this phase was canceled and won\u2019t produce any more updates.\nBeta\ncase ended\nThe state associated with this phase ended normally and won\u2019t produce any more updates.\nBeta"
    },
    {
        "title": "makeCache(subviews:)",
        "url": "https://developer.apple.com/documentation/swiftui/layout/makecache(subviews:)-4fu1k",
        "html": "Discussion\n\nIf you don\u2019t implement the makeCache(subviews:) method in your custom layout, the protocol uses this default implementation instead, which returns an empty value."
    },
    {
        "title": "chartYAxisLabel(position:alignment:spacing:content:)",
        "url": "https://developer.apple.com/documentation/SwiftUI/View/chartYAxisLabel(position:alignment:spacing:content:)",
        "html": "Parameters\nposition\n\nThe position of the label.\n\nalignment\n\nThe alignment of the label.\n\nspacing\n\nThe spacing of the label from the axis markers.\n\ncontent\n\nThe label content.\n\nSee Also\nAxis Labels\nfunc chartXAxisLabel<S>(S, position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nAdds x axis label for charts in the view.\nfunc chartXAxisLabel(LocalizedStringKey, position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nAdds x axis label for charts in the view.\nfunc chartXAxisLabel<C>(position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?, content: () -> C) -> some View\nAdds x axis label for charts in the view.\nfunc chartYAxisLabel<S>(S, position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nAdds y axis label for charts in the view.\nfunc chartYAxisLabel(LocalizedStringKey, position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nAdds y axis label for charts in the view."
    },
    {
        "title": "never",
        "url": "https://developer.apple.com/documentation/swiftui/viewalignedscrolltargetbehavior/limitbehavior/never",
        "html": "Discussion\n\nNever limit the amount of views that can be scrolled.\n\nSee Also\nGetting the limit behavior\nstatic var automatic: ViewAlignedScrollTargetBehavior.LimitBehavior\nThe automatic limit behavior.\nstatic var always: ViewAlignedScrollTargetBehavior.LimitBehavior\nThe always limit behavior."
    },
    {
        "title": "dismantleUIView(_:coordinator:)",
        "url": "https://developer.apple.com/documentation/swiftui/uiviewrepresentable/dismantleuiview(_:coordinator:)-94s0o",
        "html": "Parameters\nuiView\n\nYour custom view object.\n\ncoordinator\n\nThe custom coordinator instance you use to communicate changes back to SwiftUI. If you do not use a custom coordinator, the system provides a default instance.\n\nDiscussion\n\nUse this method to perform additional clean-up work related to your custom view. For example, you might use this method to remove observers or update other parts of your SwiftUI interface."
    },
    {
        "title": "startLocation",
        "url": "https://developer.apple.com/documentation/swiftui/draggesture/value/startlocation",
        "html": "See Also\nGetting 2D position\nvar location: CGPoint\nThe location of the drag gesture\u2019s current event.\nvar predictedEndLocation: CGPoint\nA prediction, based on the current drag velocity, of where the final location will be if dragging stopped now.\nvar translation: CGSize\nThe total translation from the start of the drag gesture to the current event of the drag gesture.\nvar predictedEndTranslation: CGSize\nA prediction, based on the current drag velocity, of what the final translation will be if dragging stopped now."
    },
    {
        "title": "validateDrop(info:)",
        "url": "https://developer.apple.com/documentation/swiftui/dropdelegate/validatedrop(info:)-1hqfh",
        "html": "Discussion\n\nSpecify the expected types when you apply the drop modifier to the view. The default implementation returns true."
    },
    {
        "title": "down",
        "url": "https://developer.apple.com/documentation/swiftui/keypress/phases/down",
        "html": "See Also\nGetting the phases\nstatic let up: KeyPress.Phases\nThe user released a key.\nstatic let `repeat`: KeyPress.Phases\nThe user held a key down to issue a sequence of repeating events.\nstatic let all: KeyPress.Phases\nA value that matches all key press phases."
    },
    {
        "title": "rigid",
        "url": "https://developer.apple.com/documentation/swiftui/sensoryfeedback/flexibility/rigid",
        "html": "See Also\nGetting flexibility values\nstatic let soft: SensoryFeedback.Flexibility\nIndicates a collision between soft or flexible UI objects.\nstatic let solid: SensoryFeedback.Flexibility\nIndicates a collision between solid UI objects of medium flexibility."
    },
    {
        "title": "solid",
        "url": "https://developer.apple.com/documentation/swiftui/sensoryfeedback/flexibility/solid",
        "html": "See Also\nGetting flexibility values\nstatic let rigid: SensoryFeedback.Flexibility\nIndicates a collision between hard or inflexible UI objects.\nstatic let soft: SensoryFeedback.Flexibility\nIndicates a collision between soft or flexible UI objects."
    },
    {
        "title": "soft",
        "url": "https://developer.apple.com/documentation/swiftui/sensoryfeedback/flexibility/soft",
        "html": "See Also\nGetting flexibility values\nstatic let rigid: SensoryFeedback.Flexibility\nIndicates a collision between hard or inflexible UI objects.\nstatic let solid: SensoryFeedback.Flexibility\nIndicates a collision between solid UI objects of medium flexibility."
    },
    {
        "title": "NavigationBarItem.TitleDisplayMode.automatic",
        "url": "https://developer.apple.com/documentation/swiftui/navigationbaritem/titledisplaymode/automatic",
        "html": "See Also\nGetting title display modes\ncase inline\nDisplay the title within the standard bounds of the navigation bar.\ncase large\nDisplay a large title within an expanded navigation bar."
    },
    {
        "title": "init(destination:tag:selection:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlink/init(destination:tag:selection:label:)",
        "html": "Deprecated\n\nUse init(value:label:) inside a List within a NavigationStack or NavigationSplitView. For more information, see Migrating to new navigation types.\n\nParameters\ndestination\n\nA view for the navigation link to present.\n\ntag\n\nThe value of selection that causes the link to present destination.\n\nselection\n\nA bound variable that causes the link to present destination when selection becomes equal to tag.\n\nlabel\n\nA view builder to produce a label describing the destination to present.\n\nSee Also\nCreating links with view arguments\ninit(LocalizedStringKey, destination: Destination)\nCreates a navigation link that presents a destination view, with a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S>(S, destination: Destination)\nCreates a navigation link that presents a destination view, with a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit(destination: Destination, label: () -> Label)\nCreates a navigation link that presents the destination view.\nDeprecated\ninit(LocalizedStringKey, destination: Destination, isActive: Binding<Bool>)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S>(S, destination: Destination, isActive: Binding<Bool>)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit(destination: Destination, isActive: Binding<Bool>, label: () -> Label)\nCreates a navigation link that presents the destination view when active.\nDeprecated\ninit<V>(LocalizedStringKey, destination: Destination, tag: V, selection: Binding<V?>)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S, V>(S, destination: Destination, tag: V, selection: Binding<V?>)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated"
    },
    {
        "title": "DoubleColumnNavigationViewStyle",
        "url": "https://developer.apple.com/documentation/swiftui/doublecolumnnavigationviewstyle",
        "html": "Deprecated\n\nUse ColumnNavigationViewStyle instead.\n\nTopics\nCreate a double column view style\ninit()\nCreates a double column navigation view style.\nRelationships\nConforms To\nNavigationViewStyle\nSee Also\nSupporting types\nstruct DefaultNavigationViewStyle\nThe default navigation view style.\nDeprecated\nstruct ColumnNavigationViewStyle\nA navigation view style represented by a series of views in columns.\nDeprecated\nstruct StackNavigationViewStyle\nA navigation view style represented by a view stack that only shows a single top view at a time.\nDeprecated"
    },
    {
        "title": "hourAndMinute",
        "url": "https://developer.apple.com/documentation/swiftui/datepickercomponents/hourandminute",
        "html": "See Also\nGetting date picker components\nstatic let date: DatePickerComponents\nDisplays day, month, and year based on the locale\nstatic let hourMinuteAndSecond: DatePickerComponents\nDisplays hour, minute and second components based on the locale"
    },
    {
        "title": "date",
        "url": "https://developer.apple.com/documentation/swiftui/datepickercomponents/date",
        "html": "See Also\nGetting date picker components\nstatic let hourAndMinute: DatePickerComponents\nDisplays hour and minute components based on the locale\nstatic let hourMinuteAndSecond: DatePickerComponents\nDisplays hour, minute and second components based on the locale"
    },
    {
        "title": "init(destination:isActive:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlink/init(destination:isactive:label:)",
        "html": "Deprecated\n\nUse init(value:label:) instead. For more information, see Migrating to new navigation types.\n\nParameters\ndestination\n\nA view for the navigation link to present.\n\nisActive\n\nA binding to a Boolean value that indicates whether destination is currently presented.\n\nlabel\n\nA view builder to produce a label describing the destination to present.\n\nSee Also\nCreating links with view arguments\ninit(LocalizedStringKey, destination: Destination)\nCreates a navigation link that presents a destination view, with a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S>(S, destination: Destination)\nCreates a navigation link that presents a destination view, with a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit(destination: Destination, label: () -> Label)\nCreates a navigation link that presents the destination view.\nDeprecated\ninit(LocalizedStringKey, destination: Destination, isActive: Binding<Bool>)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S>(S, destination: Destination, isActive: Binding<Bool>)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<V>(LocalizedStringKey, destination: Destination, tag: V, selection: Binding<V?>)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S, V>(S, destination: Destination, tag: V, selection: Binding<V?>)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<V>(destination: Destination, tag: V, selection: Binding<V?>, label: () -> Label)\nCreates a navigation link that presents the destination view when a bound selection variable equals a given tag value.\nDeprecated"
    },
    {
        "title": "init(tag:selection:destination:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlink/init(tag:selection:destination:label:)",
        "html": "Deprecated\n\nUse init(value:label:) inside a List within a NavigationStack or NavigationSplitView. For more information, see Migrating to new navigation types.\n\nParameters\ntag\n\nThe value of selection that causes the link to present destination.\n\nselection\n\nA bound variable that causes the link to present destination when selection becomes equal to tag.\n\ndestination\n\nA view for the navigation link to present.\n\nlabel\n\nA view builder to produce a label describing the destination to present.\n\nSee Also\nCreating links with view builders\ninit(LocalizedStringKey, isActive: Binding<Bool>, destination: () -> Destination)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S>(S, isActive: Binding<Bool>, destination: () -> Destination)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit(isActive: Binding<Bool>, destination: () -> Destination, label: () -> Label)\nCreates a navigation link that presents the destination view when active.\nDeprecated\ninit<V>(LocalizedStringKey, tag: V, selection: Binding<V?>, destination: () -> Destination)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S, V>(S, tag: V, selection: Binding<V?>, destination: () -> Destination)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated"
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/navigationviewstyle/automatic",
        "html": "Deprecated\n\nReplace a styled NavigationView with a NavigationStack or NavigationSplitView. For more information, see Migrating to new navigation types.\n\nSee Also\nGetting built-in navigation view styles\nstatic var columns: ColumnNavigationViewStyle\nA navigation view style represented by a series of views in columns.\nAvailable when Self is ColumnNavigationViewStyle.\nDeprecated\nstatic var stack: StackNavigationViewStyle\nA navigation view style represented by a view stack that only shows a single top view at a time.\nAvailable when Self is StackNavigationViewStyle.\nDeprecated"
    },
    {
        "title": "projectedValue",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityfocusstate/binding/projectedvalue",
        "html": "See Also\nGetting the state\nvar wrappedValue: Value\nThe underlying value referenced by the bound property."
    },
    {
        "title": "init(_:destination:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlink/init(_:destination:)-3xblz",
        "html": "Deprecated\n\nUse init(_:destination:) instead.\n\nParameters\ntitleKey\n\nA localized string key for creating a text label.\n\ndestination\n\nA view for the navigation link to present.\n\nSee Also\nCreating links with view arguments\ninit<S>(S, destination: Destination)\nCreates a navigation link that presents a destination view, with a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit(destination: Destination, label: () -> Label)\nCreates a navigation link that presents the destination view.\nDeprecated\ninit(LocalizedStringKey, destination: Destination, isActive: Binding<Bool>)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S>(S, destination: Destination, isActive: Binding<Bool>)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit(destination: Destination, isActive: Binding<Bool>, label: () -> Label)\nCreates a navigation link that presents the destination view when active.\nDeprecated\ninit<V>(LocalizedStringKey, destination: Destination, tag: V, selection: Binding<V?>)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S, V>(S, destination: Destination, tag: V, selection: Binding<V?>)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<V>(destination: Destination, tag: V, selection: Binding<V?>, label: () -> Label)\nCreates a navigation link that presents the destination view when a bound selection variable equals a given tag value.\nDeprecated"
    },
    {
        "title": "columns",
        "url": "https://developer.apple.com/documentation/swiftui/navigationviewstyle/columns",
        "html": "Deprecated\n\nReplace a styled NavigationView with a NavigationStack or NavigationSplitView. For more information, see Migrating to new navigation types.\n\nSee Also\nGetting built-in navigation view styles\nstatic var automatic: DefaultNavigationViewStyle\nThe default navigation view style in the current context of the view being styled.\nAvailable when Self is DefaultNavigationViewStyle.\nDeprecated\nstatic var stack: StackNavigationViewStyle\nA navigation view style represented by a view stack that only shows a single top view at a time.\nAvailable when Self is StackNavigationViewStyle.\nDeprecated"
    },
    {
        "title": "hourMinuteAndSecond",
        "url": "https://developer.apple.com/documentation/swiftui/datepickercomponents/hourminuteandsecond",
        "html": "See Also\nGetting date picker components\nstatic let date: DatePickerComponents\nDisplays day, month, and year based on the locale\nstatic let hourAndMinute: DatePickerComponents\nDisplays hour and minute components based on the locale"
    },
    {
        "title": "wrappedValue",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityfocusstate/binding/wrappedvalue",
        "html": "See Also\nGetting the state\nvar projectedValue: AccessibilityFocusState<Value>.Binding\nThe currently focused element."
    },
    {
        "title": "medium",
        "url": "https://developer.apple.com/documentation/swiftui/sensoryfeedback/weight/medium",
        "html": "See Also\nGetting flexibility values\nstatic let light: SensoryFeedback.Weight\nIndicates a collision between small or lightweight UI objects.\nstatic let heavy: SensoryFeedback.Weight\nIndicates a collision between large or heavyweight UI objects."
    },
    {
        "title": "ViewThatFits",
        "url": "https://developer.apple.com/documentation/SwiftUI/ViewThatFits",
        "html": "Overview\n\nViewThatFits evaluates its child views in the order you provide them to the initializer. It selects the first child whose ideal size on the constrained axes fits within the proposed size. This means that you provide views in order of preference. Usually this order is largest to smallest, but since a view might fit along one constrained axis but not the other, this isn\u2019t always the case. By default, ViewThatFits constrains in both the horizontal and vertical axes.\n\nThe following example shows an UploadProgressView that uses ViewThatFits to display the upload progress in one of three ways. In order, it attempts to display:\n\nAn HStack that contains a Text view and a ProgressView.\n\nOnly the ProgressView.\n\nOnly the Text view.\n\nThe progress views are fixed to a 100-point width.\n\nstruct UploadProgressView: View {\n    var uploadProgress: Double\n\n\n    var body: some View {\n        ViewThatFits(in: .horizontal) {\n            HStack {\n                Text(\"\\(uploadProgress.formatted(.percent))\")\n                ProgressView(value: uploadProgress)\n                    .frame(width: 100)\n            }\n            ProgressView(value: uploadProgress)\n                .frame(width: 100)\n            Text(\"\\(uploadProgress.formatted(.percent))\")\n        }\n    }\n}\n\n\nThis use of ViewThatFits evaluates sizes only on the horizontal axis. The following code fits the UploadProgressView to several fixed widths:\n\nVStack {\n    UploadProgressView(uploadProgress: 0.75)\n        .frame(maxWidth: 200)\n    UploadProgressView(uploadProgress: 0.75)\n        .frame(maxWidth: 100)\n    UploadProgressView(uploadProgress: 0.75)\n        .frame(maxWidth: 50)\n}\n\n\nTopics\nCreating a view that fits\ninit(in: Axis.Set, content: () -> Content)\nProduces a view constrained in the given axes from one of several alternatives provided by a view builder.\nRelationships\nConforms To\nView"
    },
    {
        "title": "init(destinationName:tag:selection:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlink/init(destinationname:tag:selection:label:)",
        "html": "Deprecated\n\nUse init(value:label:) inside a List within a NavigationStack or NavigationSplitView. For more information, see Migrating to new navigation types.\n\nParameters\ndestinationName\n\nThe storyboard name of a view for the navigation link to present.\n\ntag\n\nThe value of selection that causes the link to present destination.\n\nselection\n\nA bound variable that causes the link to present destination when selection becomes equal to tag.\n\nlabel\n\nA view builder to produce a label describing the destination to present.\n\nSee Also\nCreating links for WatchKit\ninit(destinationName: String, isActive: Binding<Bool>, label: () -> Label)\nCreates a navigation link that presents a view from a WatchKit storyboard when active.\nAvailable when Label conforms to View and Destination is _WKStoryboardContent.\nDeprecated\ninit(destinationName: String, label: () -> Label)\nCreates a navigation link that presents a view from a WatchKit storyboard.\nAvailable when Label conforms to View and Destination is _WKStoryboardContent.\nDeprecated"
    },
    {
        "title": "heavy",
        "url": "https://developer.apple.com/documentation/swiftui/sensoryfeedback/weight/heavy",
        "html": "See Also\nGetting flexibility values\nstatic let light: SensoryFeedback.Weight\nIndicates a collision between small or lightweight UI objects.\nstatic let medium: SensoryFeedback.Weight\nIndicates a collision between medium-sized or medium-weight UI objects."
    },
    {
        "title": "updateChartDescriptor(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/axchartdescriptorrepresentable/updatechartdescriptor(_:)-7cxy6",
        "html": "Discussion\n\nThis will be called as needed, when accessibility needs your AXChartDescriptor for VoiceOver. It will only be called if the inputs to your views, or a relevant part of the Environment, have changed."
    },
    {
        "title": "init(isActive:destination:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlink/init(isactive:destination:label:)",
        "html": "Deprecated\n\nUse init(value:label:) inside a NavigationStack or NavigationSplitView. For more information, see Migrating to new navigation types.\n\nParameters\nisActive\n\nA binding to a Boolean value that indicates whether destination is currently presented.\n\ndestination\n\nA view for the navigation link to present.\n\nlabel\n\nA view builder to produce a label describing the destination to present.\n\nSee Also\nCreating links with view builders\ninit(LocalizedStringKey, isActive: Binding<Bool>, destination: () -> Destination)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S>(S, isActive: Binding<Bool>, destination: () -> Destination)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<V>(LocalizedStringKey, tag: V, selection: Binding<V?>, destination: () -> Destination)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S, V>(S, tag: V, selection: Binding<V?>, destination: () -> Destination)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<V>(tag: V, selection: Binding<V?>, destination: () -> Destination, label: () -> Label)\nCreates a navigation link that presents the destination view when a bound selection variable equals a given tag value.\nDeprecated"
    },
    {
        "title": "makeCoordinator()",
        "url": "https://developer.apple.com/documentation/swiftui/uiviewcontrollerrepresentable/makecoordinator()-9vwm8",
        "html": "Discussion\n\nImplement this method if changes to your view controller might affect other parts of your app. In your implementation, create a custom Swift instance that can communicate with other parts of your interface. For example, you might provide an instance that binds its variables to SwiftUI properties, causing the two to remain synchronized. If your view controller doesn\u2019t interact with other parts of your app, providing a coordinator is unnecessary.\n\nSwiftUI calls this method before calling the makeUIViewController(context:) method. The system provides your coordinator either directly or as part of a context structure when calling the other methods of your representable instance."
    },
    {
        "title": "platform",
        "url": "https://developer.apple.com/documentation/swiftui/previewprovider/platform-5gkzc",
        "html": "Discussion\n\nThis default implementation of the platform computed property returns nil. Rely on this implementation unless you have a multiplatform target and want to suggest a particular platform for a preview."
    },
    {
        "title": "sizeThatFits(_:uiViewController:context:)",
        "url": "https://developer.apple.com/documentation/swiftui/uiviewcontrollerrepresentable/sizethatfits(_:uiviewcontroller:context:)-7x9zd",
        "html": "Parameters\nproposal\n\nThe proposed size for the view controller.\n\nuiViewController\n\nYour custom view controller object.\n\ncontext\n\nA context structure containing information about the current state of the system.\n\nReturn Value\n\nThe composite size of the represented view controller. Returning a value of nil indicates that the system should use the default sizing algorithm.\n\nDiscussion\n\nThis method may be called more than once with different proposed sizes during the same layout pass. SwiftUI views choose their own size, so one of the values returned from this function will always be used as the actual size of the composite view."
    },
    {
        "title": "dismantleUIViewController(_:coordinator:)",
        "url": "https://developer.apple.com/documentation/swiftui/uiviewcontrollerrepresentable/dismantleuiviewcontroller(_:coordinator:)-30a1m",
        "html": "Parameters\nuiViewController\n\nYour custom view controller object.\n\ncoordinator\n\nThe custom coordinator instance you use to communicate changes back to SwiftUI. If you do not use a custom coordinator, the system provides a default instance.\n\nDiscussion\n\nUse this method to perform additional clean-up work related to your custom view controller. For example, you might use this method to remove observers or update other parts of your SwiftUI interface."
    },
    {
        "title": "predictedEndTranslation3D",
        "url": "https://developer.apple.com/documentation/swiftui/draggesture/value/predictedendtranslation3d",
        "html": "See Also\nGetting 3D position\nvar startLocation3D: Point3D\nThe 3D start location of the drag gesture.\nBeta\nvar location3D: Point3D\nThe 3D location of the drag gesture.\nBeta\nvar predictedEndLocation3D: Point3D\nA prediction of where the final location would be if dragging stopped now, based on the current drag velocity.\nBeta\nvar translation3D: Vector3D\nThe translation of the drag gesture from startLocation3D to location3D.\nBeta\nvar startInputDevicePose3D: Pose3D?\nThe starting 3D pose of the device driving the drag, if one exists.\nBeta\nvar inputDevicePose3D: Pose3D?\nThe 3D pose of the device driving the drag, if one exists.\nBeta"
    },
    {
        "title": "luminanceToAlpha",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/filter/luminancetoalpha",
        "html": "Return Value\n\nA filter that applies a luminance to alpha transformation.\n\nDiscussion\n\nThe filter computes the luminance of each pixel and uses it to define the opacity of the result, combined with black (zero) color components.\n\nSee Also\nAdjusting opacity\nstatic func alphaThreshold(min: Double, max: Double, color: Color) -> GraphicsContext.Filter\nReturns a filter that replaces each pixel with alpha components within a range by a constant color, or transparency otherwise."
    },
    {
        "title": "widgetLabel(_:)",
        "url": "https://developer.apple.com/documentation/SwiftUI/View/widgetLabel(_:)-7wguh",
        "html": "Parameters\nlabel\n\nA string that contains the text which WidgetKit displays alongside the complication.\n\nDiscussion\n\nTo add a text label to an accessory family widget, call this method on the widget\u2019s main SwiftUI view, and pass in a supported LocalizedStringKey. The system determines whether it can use the text label. If it can\u2019t, it ignores the label. The system also sets the label\u2019s size, placement, and style. For example, setting the font and rendering the text along a curve.\n\nThe following widget families support text accessory labels:\n\nThe WidgetFamily.accessoryCorner widget-based complication can display a curved text label on the inside edge of the corner. Adding a label to an accessory corner complication causes the main SwiftUI view to shrink to make space for the label.\n\nThe WidgetFamily.accessoryCircular widget can display a text label in watchOS; however, WidgetKit only renders the label along the bezel on the Infograph watch face (the top circular complication).\n\nSee Also\nLabeling a widget\nfunc widgetLabel(LocalizedStringKey) -> some View\nReturns a localized text label that displays additional content outside the accessory family widget\u2019s main SwiftUI view.\nfunc widgetLabel<Label>(label: () -> Label) -> some View\nCreates a label for displaying additional content outside an accessory family widget\u2019s main SwiftUI view."
    },
    {
        "title": "timestamp",
        "url": "https://developer.apple.com/documentation/swiftui/spatialeventcollection/event/timestamp",
        "html": "See Also\nIdentifying the event\nvar id: SpatialEventCollection.Event.ID\nAn identifier that uniquely identifies the event over its lifetime.\nBeta\nstruct ID\nA value that uniquely identifies an event over the course of its lifetime.\nBeta\nvar kind: SpatialEventCollection.Event.Kind\nThe event\u2019s input source.\nBeta\nenum Kind\nThe possible input sources or modes of an event.\nBeta\nvar modifierKeys: EventModifiers\nThe set of active modifier keys at the time of this event.\nBeta"
    },
    {
        "title": "SpatialEventCollection.Event.Kind",
        "url": "https://developer.apple.com/documentation/swiftui/spatialeventcollection/event/kind-swift.enum",
        "html": "Topics\nGetting the event type\ncase directPinch\nAn event generated from a pinching hand in close proximity to content.\ncase indirectPinch\nAn event generated from an indirectly targeted pinching hand.\ncase pointer\nAn event representing a click-based, indirect input device describing the input sequence from click to click release.\ncase touch\nAn event generated from a touch directly targeting content.\nRelationships\nConforms To\nEquatable\nHashable\nSee Also\nIdentifying the event\nvar timestamp: TimeInterval\nThe time the event was processed.\nBeta\nvar id: SpatialEventCollection.Event.ID\nAn identifier that uniquely identifies the event over its lifetime.\nBeta\nstruct ID\nA value that uniquely identifies an event over the course of its lifetime.\nBeta\nvar kind: SpatialEventCollection.Event.Kind\nThe event\u2019s input source.\nBeta\nvar modifierKeys: EventModifiers\nThe set of active modifier keys at the time of this event.\nBeta"
    },
    {
        "title": "SpatialEventCollection.Event.ID",
        "url": "https://developer.apple.com/documentation/swiftui/spatialeventcollection/event/id-swift.struct",
        "html": "Relationships\nConforms To\nEquatable\nHashable\nSee Also\nIdentifying the event\nvar timestamp: TimeInterval\nThe time the event was processed.\nBeta\nvar id: SpatialEventCollection.Event.ID\nAn identifier that uniquely identifies the event over its lifetime.\nBeta\nvar kind: SpatialEventCollection.Event.Kind\nThe event\u2019s input source.\nBeta\nenum Kind\nThe possible input sources or modes of an event.\nBeta\nvar modifierKeys: EventModifiers\nThe set of active modifier keys at the time of this event.\nBeta"
    },
    {
        "title": "depth",
        "url": "https://developer.apple.com/documentation/swiftui/edge3d/set/depth",
        "html": "See Also\nGetting edge sets\nstatic let all: Edge3D.Set\nBeta\nstatic let top: Edge3D.Set\nBeta\nstatic let bottom: Edge3D.Set\nBeta\nstatic let leading: Edge3D.Set\nBeta\nstatic let front: Edge3D.Set\nBeta\nstatic let back: Edge3D.Set\nBeta\nstatic let trailing: Edge3D.Set\nBeta\nstatic let horizontal: Edge3D.Set\nBeta\nstatic let vertical: Edge3D.Set\nBeta"
    },
    {
        "title": "inputDevicePose",
        "url": "https://developer.apple.com/documentation/swiftui/spatialeventcollection/event/inputdevicepose-swift.property",
        "html": "See Also\nLocating the event\nvar location: CGPoint\nThe 2D location of the event.\nBeta\nvar location3D: Point3D\nThe 3D location of the touch.\nBeta\nvar selectionRay: Ray3D?\nThe 3D ray used to target the touch.\nBeta\nstruct InputDevicePose\nA pose describing the input device like a hand controlling the event.\nBeta\nvar targetedEntity: Entity?\nThe entity target for this touch, if one exists.\nBeta"
    },
    {
        "title": "all",
        "url": "https://developer.apple.com/documentation/swiftui/edge3d/set/all",
        "html": "See Also\nGetting edge sets\nstatic let top: Edge3D.Set\nBeta\nstatic let bottom: Edge3D.Set\nBeta\nstatic let leading: Edge3D.Set\nBeta\nstatic let front: Edge3D.Set\nBeta\nstatic let back: Edge3D.Set\nBeta\nstatic let trailing: Edge3D.Set\nBeta\nstatic let horizontal: Edge3D.Set\nBeta\nstatic let vertical: Edge3D.Set\nBeta\nstatic let depth: Edge3D.Set\nBeta"
    },
    {
        "title": "SpatialEventCollection.Event.InputDevicePose",
        "url": "https://developer.apple.com/documentation/swiftui/spatialeventcollection/event/inputdevicepose-swift.struct",
        "html": "Topics\nGetting the event type\nvar altitude: Angle\nThe altitude angle.\nvar azimuth: Angle\nThe azimuth angle.\nvar pose3D: Pose3D\nThe 3D pose of the input device.\nRelationships\nConforms To\nEquatable\nHashable\nSee Also\nLocating the event\nvar location: CGPoint\nThe 2D location of the event.\nBeta\nvar location3D: Point3D\nThe 3D location of the touch.\nBeta\nvar selectionRay: Ray3D?\nThe 3D ray used to target the touch.\nBeta\nvar inputDevicePose: SpatialEventCollection.Event.InputDevicePose?\nThe 3D position and orientation of the device controlling the touch, if one exists.\nBeta\nvar targetedEntity: Entity?\nThe entity target for this touch, if one exists.\nBeta"
    },
    {
        "title": "targetedEntity",
        "url": "https://developer.apple.com/documentation/swiftui/spatialeventcollection/event/targetedentity",
        "html": "See Also\nLocating the event\nvar location: CGPoint\nThe 2D location of the event.\nBeta\nvar location3D: Point3D\nThe 3D location of the touch.\nBeta\nvar selectionRay: Ray3D?\nThe 3D ray used to target the touch.\nBeta\nvar inputDevicePose: SpatialEventCollection.Event.InputDevicePose?\nThe 3D position and orientation of the device controlling the touch, if one exists.\nBeta\nstruct InputDevicePose\nA pose describing the input device like a hand controlling the event.\nBeta"
    },
    {
        "title": "leading",
        "url": "https://developer.apple.com/documentation/swiftui/horizontaledge/set/leading",
        "html": "See Also\nGetting edge sets\nstatic let all: HorizontalEdge.Set\nA set containing the leading and trailing horizontal edges.\nstatic let trailing: HorizontalEdge.Set\nA set containing only the trailing horizontal edge."
    },
    {
        "title": "colorBurn",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.struct/colorburn",
        "html": "Discussion\n\nSource image sample values that specify white do not produce a change.\n\nSee Also\nDarkening\nstatic var darken: GraphicsContext.BlendMode\nA mode that creates composite image samples by choosing the darker samples from either the source image or the background.\nstatic var multiply: GraphicsContext.BlendMode\nA mode that multiplies the source image samples with the background image samples.\nstatic var plusDarker: GraphicsContext.BlendMode\nA mode that adds the inverse of the color components of the source and background images, and then inverts the result, producing a darkened composite."
    },
    {
        "title": "phase",
        "url": "https://developer.apple.com/documentation/swiftui/spatialeventcollection/event/phase-swift.property",
        "html": "See Also\nGetting the event\u2019s current phase\nenum Phase\nThe states that an event can have.\nBeta"
    },
    {
        "title": "lighten",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.struct/lighten",
        "html": "Discussion\n\nWhen you draw in this mode, source image samples that are lighter than the background replace the background. Otherwise, the background image samples remain unchanged.\n\nSee Also\nLightening\nstatic var screen: GraphicsContext.BlendMode\nA mode that multiplies the inverse of the source image samples with the inverse of the background image samples.\nstatic var colorDodge: GraphicsContext.BlendMode\nA mode that brightens the background image samples to reflect the source image samples.\nstatic var plusLighter: GraphicsContext.BlendMode\nA mode that adds the components of the source and background images, resulting in a lightened composite."
    },
    {
        "title": "vertical",
        "url": "https://developer.apple.com/documentation/swiftui/edge3d/set/vertical",
        "html": "See Also\nGetting edge sets\nstatic let all: Edge3D.Set\nBeta\nstatic let top: Edge3D.Set\nBeta\nstatic let bottom: Edge3D.Set\nBeta\nstatic let leading: Edge3D.Set\nBeta\nstatic let front: Edge3D.Set\nBeta\nstatic let back: Edge3D.Set\nBeta\nstatic let trailing: Edge3D.Set\nBeta\nstatic let horizontal: Edge3D.Set\nBeta\nstatic let depth: Edge3D.Set\nBeta"
    },
    {
        "title": "destinationOut",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.struct/destinationout",
        "html": "Discussion\n\nThis mode implements the equation R = D*(1 - Sa) where\n\nR is the composite image.\n\nD is the background.\n\nSa is the source image\u2019s alpha value.\n\nSee Also\nAccessing porter-duff modes\nstatic var clear: GraphicsContext.BlendMode\nA mode that clears any pixels that the source image overwrites.\nstatic var copy: GraphicsContext.BlendMode\nA mode that replaces background image samples with source image samples.\nstatic var sourceIn: GraphicsContext.BlendMode\nA mode that you use to paint the source image, including its transparency, onto the opaque parts of the background.\nstatic var sourceOut: GraphicsContext.BlendMode\nA mode that you use to paint the source image onto the transparent parts of the background, while erasing the background.\nstatic var sourceAtop: GraphicsContext.BlendMode\nA mode that you use to paint the opaque parts of the source image onto the opaque parts of the background.\nstatic var destinationOver: GraphicsContext.BlendMode\nA mode that you use to paint the source image under the background.\nstatic var destinationIn: GraphicsContext.BlendMode\nA mode that you use to erase any of the background that isn\u2019t covered by opaque source pixels.\nstatic var destinationAtop: GraphicsContext.BlendMode\nA mode that you use to paint the source image under the background, while erasing any of the background not matched by opaque pixels from the source image.\nstatic var xor: GraphicsContext.BlendMode\nA mode that you use to clear pixels where both the source and background images are opaque."
    },
    {
        "title": "top",
        "url": "https://developer.apple.com/documentation/swiftui/verticaledge/set/top",
        "html": "See Also\nGetting edge sets\nstatic let all: VerticalEdge.Set\nA set containing the top and bottom vertical edges.\nstatic let bottom: VerticalEdge.Set\nA set containing only the bottom vertical edge."
    },
    {
        "title": "location",
        "url": "https://developer.apple.com/documentation/swiftui/spatialtapgesture/value/location",
        "html": "See Also\nGetting the tap location\nvar location3D: Point3D\nThe 3D location of the tap.\nBeta"
    },
    {
        "title": "GridItem.Size.fixed(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/griditem/size-swift.enum/fixed(_:)",
        "html": "See Also\nGetting the sizes\ncase adaptive(minimum: CGFloat, maximum: CGFloat)\nMultiple items in the space of a single flexible item.\ncase flexible(minimum: CGFloat, maximum: CGFloat)\nA single flexible item."
    },
    {
        "title": "destinationIn",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.struct/destinationin",
        "html": "Discussion\n\nThis mode implements the equation R = D*Sa where\n\nR is the composite image.\n\nS is the source image.\n\nDa is the source background\u2019s alpha value.\n\nSee Also\nAccessing porter-duff modes\nstatic var clear: GraphicsContext.BlendMode\nA mode that clears any pixels that the source image overwrites.\nstatic var copy: GraphicsContext.BlendMode\nA mode that replaces background image samples with source image samples.\nstatic var sourceIn: GraphicsContext.BlendMode\nA mode that you use to paint the source image, including its transparency, onto the opaque parts of the background.\nstatic var sourceOut: GraphicsContext.BlendMode\nA mode that you use to paint the source image onto the transparent parts of the background, while erasing the background.\nstatic var sourceAtop: GraphicsContext.BlendMode\nA mode that you use to paint the opaque parts of the source image onto the opaque parts of the background.\nstatic var destinationOver: GraphicsContext.BlendMode\nA mode that you use to paint the source image under the background.\nstatic var destinationOut: GraphicsContext.BlendMode\nA mode that you use to erase any of the background that is covered by opaque source pixels.\nstatic var destinationAtop: GraphicsContext.BlendMode\nA mode that you use to paint the source image under the background, while erasing any of the background not matched by opaque pixels from the source image.\nstatic var xor: GraphicsContext.BlendMode\nA mode that you use to clear pixels where both the source and background images are opaque."
    },
    {
        "title": "copy",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.struct/copy",
        "html": "Discussion\n\nUnlike the normal mode, the source image completely replaces the background, so that even transparent pixels in the source image replace opaque pixels in the background, rather than letting the background show through.\n\nThis mode implements the equation R = S where\n\nR is the composite image.\n\nS is the source image.\n\nSee Also\nAccessing porter-duff modes\nstatic var clear: GraphicsContext.BlendMode\nA mode that clears any pixels that the source image overwrites.\nstatic var sourceIn: GraphicsContext.BlendMode\nA mode that you use to paint the source image, including its transparency, onto the opaque parts of the background.\nstatic var sourceOut: GraphicsContext.BlendMode\nA mode that you use to paint the source image onto the transparent parts of the background, while erasing the background.\nstatic var sourceAtop: GraphicsContext.BlendMode\nA mode that you use to paint the opaque parts of the source image onto the opaque parts of the background.\nstatic var destinationOver: GraphicsContext.BlendMode\nA mode that you use to paint the source image under the background.\nstatic var destinationIn: GraphicsContext.BlendMode\nA mode that you use to erase any of the background that isn\u2019t covered by opaque source pixels.\nstatic var destinationOut: GraphicsContext.BlendMode\nA mode that you use to erase any of the background that is covered by opaque source pixels.\nstatic var destinationAtop: GraphicsContext.BlendMode\nA mode that you use to paint the source image under the background, while erasing any of the background not matched by opaque pixels from the source image.\nstatic var xor: GraphicsContext.BlendMode\nA mode that you use to clear pixels where both the source and background images are opaque."
    },
    {
        "title": "plusLighter",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.struct/pluslighter",
        "html": "Discussion\n\nThis mode implements the equation R = MIN(1, S + D) where\n\nR is the composite image.\n\nS is the source image.\n\nD is the background.\n\nSee Also\nLightening\nstatic var lighten: GraphicsContext.BlendMode\nA mode that creates composite image samples by choosing the lighter samples from either the source image or the background.\nstatic var screen: GraphicsContext.BlendMode\nA mode that multiplies the inverse of the source image samples with the inverse of the background image samples.\nstatic var colorDodge: GraphicsContext.BlendMode\nA mode that brightens the background image samples to reflect the source image samples."
    },
    {
        "title": "systemAction",
        "url": "https://developer.apple.com/documentation/swiftui/openurlaction/result/systemaction",
        "html": "Discussion\n\nThe action invokes its completion handler with a value that depends on the outcome of the system\u2019s attempt to open the URL.\n\nSee Also\nGetting the results\nstatic let discarded: OpenURLAction.Result\nThe handler discarded the URL.\nstatic let handled: OpenURLAction.Result\nThe handler opened the URL.\nstatic func systemAction(URL) -> OpenURLAction.Result\nThe handler asks the system to open the modified URL."
    },
    {
        "title": "bottom",
        "url": "https://developer.apple.com/documentation/swiftui/verticaledge/set/bottom",
        "html": "See Also\nGetting edge sets\nstatic let all: VerticalEdge.Set\nA set containing the top and bottom vertical edges.\nstatic let top: VerticalEdge.Set\nA set containing only the top vertical edge."
    },
    {
        "title": "color(_:white:opacity:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/shading/color(_:white:opacity:)",
        "html": "Parameters\ncolorSpace\n\nThe RGB color space used to define the color. The default is Color.RGBColorSpace.sRGB.\n\nwhite\n\nThe value to use for each of the red, green, and blue components of the color.\n\nopacity\n\nThe opacity of the color. The default is 1, which means fully opaque.\n\nReturn Value\n\nA shading instance filled with a color.\n\nSee Also\nColors\nstatic func color(Color) -> GraphicsContext.Shading\nReturns a shading instance that fills with a color.\nstatic func color(Color.RGBColorSpace, red: Double, green: Double, blue: Double, opacity: Double) -> GraphicsContext.Shading\nReturns a shading instance that fills with a color in the given color space."
    },
    {
        "title": "color(_:red:green:blue:opacity:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/shading/color(_:red:green:blue:opacity:)",
        "html": "Parameters\ncolorSpace\n\nThe RGB color space used to define the color. The default is Color.RGBColorSpace.sRGB.\n\nred\n\nThe red component of the color.\n\ngreen\n\nThe green component of the color.\n\nblue\n\nThe blue component of the color.\n\nopacity\n\nThe opacity of the color. The default is 1, which means fully opaque.\n\nReturn Value\n\nA shading instance filled with a color.\n\nSee Also\nColors\nstatic func color(Color) -> GraphicsContext.Shading\nReturns a shading instance that fills with a color.\nstatic func color(Color.RGBColorSpace, white: Double, opacity: Double) -> GraphicsContext.Shading\nReturns a shading instance that fills with a monochrome color in the given color space."
    },
    {
        "title": "discarded",
        "url": "https://developer.apple.com/documentation/swiftui/openurlaction/result/discarded",
        "html": "Discussion\n\nThe action invokes its completion handler with false when your handler returns this value.\n\nSee Also\nGetting the results\nstatic let handled: OpenURLAction.Result\nThe handler opened the URL.\nstatic let systemAction: OpenURLAction.Result\nThe handler asks the system to open the original URL.\nstatic func systemAction(URL) -> OpenURLAction.Result\nThe handler asks the system to open the modified URL."
    },
    {
        "title": "systemAction(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/openurlaction/result/systemaction(_:)",
        "html": "Parameters\nurl\n\nThe URL that the handler asks the system to open.\n\nDiscussion\n\nThe action invokes its completion handler with a value that depends on the outcome of the system\u2019s attempt to open the URL.\n\nSee Also\nGetting the results\nstatic let discarded: OpenURLAction.Result\nThe handler discarded the URL.\nstatic let handled: OpenURLAction.Result\nThe handler opened the URL.\nstatic let systemAction: OpenURLAction.Result\nThe handler asks the system to open the original URL."
    },
    {
        "title": "SnapshotData.SnapshotReason.complicationUpdate",
        "url": "https://developer.apple.com/documentation/swiftui/snapshotdata/snapshotreason/complicationupdate",
        "html": "See Also\nGetting the snapshot reasons\ncase appBackgrounded\nThe app transitioned from the foreground to the background.\ncase appScheduled\nThe app scheduled this snapshot.\ncase prelaunch\nThe system needs a snapshot for the dock, but the app has not been launched yet.\ncase returnToDefaultState\nIt has been more than an hour since the user\u2019s last interaction with the app; the app\u2019s snapshot should return to its default state."
    },
    {
        "title": "SnapshotData.SnapshotReason.prelaunch",
        "url": "https://developer.apple.com/documentation/swiftui/snapshotdata/snapshotreason/prelaunch",
        "html": "See Also\nGetting the snapshot reasons\ncase appBackgrounded\nThe app transitioned from the foreground to the background.\ncase appScheduled\nThe app scheduled this snapshot.\ncase complicationUpdate\nThe app updated the complication timeline.\ncase returnToDefaultState\nIt has been more than an hour since the user\u2019s last interaction with the app; the app\u2019s snapshot should return to its default state."
    },
    {
        "title": "makeCoordinator()",
        "url": "https://developer.apple.com/documentation/swiftui/wkinterfaceobjectrepresentable/makecoordinator()-80qlf",
        "html": "Discussion\n\nImplement this method if changes to your interface object might affect other parts of your app. In your implementation, create a custom Swift instance that can communicate with other parts of your interface. For example, you might provide an instance that binds its variables to SwiftUI properties, causing the two to remain synchronized. If your interface object doesn\u2019t interact with other parts of your app, providing a coordinator is unnecessary.\n\nSwiftUI calls this method before calling the makeWKInterfaceObject(context:) method. The system provides your coordinator either directly or as part of a context structure when calling the other methods of your representable instance."
    },
    {
        "title": "AccessibilityZoomGestureAction.Direction.zoomOut",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityzoomgestureaction/direction-swift.enum/zoomout",
        "html": "See Also\nGetting the direction\ncase zoomIn\nThe gesture direction that represents zooming in."
    },
    {
        "title": "SnapshotData.SnapshotReason.returnToDefaultState",
        "url": "https://developer.apple.com/documentation/swiftui/snapshotdata/snapshotreason/returntodefaultstate",
        "html": "See Also\nGetting the snapshot reasons\ncase appBackgrounded\nThe app transitioned from the foreground to the background.\ncase appScheduled\nThe app scheduled this snapshot.\ncase complicationUpdate\nThe app updated the complication timeline.\ncase prelaunch\nThe system needs a snapshot for the dock, but the app has not been launched yet."
    },
    {
        "title": "dropUpdated(info:)",
        "url": "https://developer.apple.com/documentation/swiftui/dropdelegate/dropupdated(info:)-2mktz",
        "html": "Discussion\n\nUse this method to return a drop proposal containing the operation the delegate intends to perform at the drop location. The default implementation of this method returns nil, which tells the drop to use the last valid returned value or else DropOperation.copy."
    },
    {
        "title": "startLocation3D",
        "url": "https://developer.apple.com/documentation/swiftui/draggesture/value/startlocation3d",
        "html": "See Also\nGetting 3D position\nvar location3D: Point3D\nThe 3D location of the drag gesture.\nBeta\nvar predictedEndLocation3D: Point3D\nA prediction of where the final location would be if dragging stopped now, based on the current drag velocity.\nBeta\nvar translation3D: Vector3D\nThe translation of the drag gesture from startLocation3D to location3D.\nBeta\nvar predictedEndTranslation3D: Vector3D\nA prediction of what the final translation would be if dragging stopped now, based on the current drag velocity.\nBeta\nvar startInputDevicePose3D: Pose3D?\nThe starting 3D pose of the device driving the drag, if one exists.\nBeta\nvar inputDevicePose3D: Pose3D?\nThe 3D pose of the device driving the drag, if one exists.\nBeta"
    },
    {
        "title": "dropEntered(info:)",
        "url": "https://developer.apple.com/documentation/swiftui/dropdelegate/dropentered(info:)-2tqut",
        "html": "Discussion\n\nThe default implementation does nothing."
    },
    {
        "title": "translation",
        "url": "https://developer.apple.com/documentation/swiftui/draggesture/value/translation",
        "html": "Discussion\n\nThis is equivalent to location.{x,y} - startLocation.{x,y}.\n\nSee Also\nGetting 2D position\nvar startLocation: CGPoint\nThe location of the drag gesture\u2019s first event.\nvar location: CGPoint\nThe location of the drag gesture\u2019s current event.\nvar predictedEndLocation: CGPoint\nA prediction, based on the current drag velocity, of where the final location will be if dragging stopped now.\nvar predictedEndTranslation: CGSize\nA prediction, based on the current drag velocity, of what the final translation will be if dragging stopped now."
    },
    {
        "title": "location3D",
        "url": "https://developer.apple.com/documentation/swiftui/draggesture/value/location3d",
        "html": "See Also\nGetting 3D position\nvar startLocation3D: Point3D\nThe 3D start location of the drag gesture.\nBeta\nvar predictedEndLocation3D: Point3D\nA prediction of where the final location would be if dragging stopped now, based on the current drag velocity.\nBeta\nvar translation3D: Vector3D\nThe translation of the drag gesture from startLocation3D to location3D.\nBeta\nvar predictedEndTranslation3D: Vector3D\nA prediction of what the final translation would be if dragging stopped now, based on the current drag velocity.\nBeta\nvar startInputDevicePose3D: Pose3D?\nThe starting 3D pose of the device driving the drag, if one exists.\nBeta\nvar inputDevicePose3D: Pose3D?\nThe 3D pose of the device driving the drag, if one exists.\nBeta"
    },
    {
        "title": "predictedEndLocation3D",
        "url": "https://developer.apple.com/documentation/swiftui/draggesture/value/predictedendlocation3d",
        "html": "See Also\nGetting 3D position\nvar startLocation3D: Point3D\nThe 3D start location of the drag gesture.\nBeta\nvar location3D: Point3D\nThe 3D location of the drag gesture.\nBeta\nvar translation3D: Vector3D\nThe translation of the drag gesture from startLocation3D to location3D.\nBeta\nvar predictedEndTranslation3D: Vector3D\nA prediction of what the final translation would be if dragging stopped now, based on the current drag velocity.\nBeta\nvar startInputDevicePose3D: Pose3D?\nThe starting 3D pose of the device driving the drag, if one exists.\nBeta\nvar inputDevicePose3D: Pose3D?\nThe 3D pose of the device driving the drag, if one exists.\nBeta"
    },
    {
        "title": "predictedEndLocation",
        "url": "https://developer.apple.com/documentation/swiftui/draggesture/value/predictedendlocation",
        "html": "See Also\nGetting 2D position\nvar startLocation: CGPoint\nThe location of the drag gesture\u2019s first event.\nvar location: CGPoint\nThe location of the drag gesture\u2019s current event.\nvar translation: CGSize\nThe total translation from the start of the drag gesture to the current event of the drag gesture.\nvar predictedEndTranslation: CGSize\nA prediction, based on the current drag velocity, of what the final translation will be if dragging stopped now."
    },
    {
        "title": "predictedEndTranslation",
        "url": "https://developer.apple.com/documentation/swiftui/draggesture/value/predictedendtranslation",
        "html": "See Also\nGetting 2D position\nvar startLocation: CGPoint\nThe location of the drag gesture\u2019s first event.\nvar location: CGPoint\nThe location of the drag gesture\u2019s current event.\nvar predictedEndLocation: CGPoint\nA prediction, based on the current drag velocity, of where the final location will be if dragging stopped now.\nvar translation: CGSize\nThe total translation from the start of the drag gesture to the current event of the drag gesture."
    },
    {
        "title": "foreground",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/shading/foreground",
        "html": "See Also\nOther shape styles\nstatic func style<S>(S) -> GraphicsContext.Shading\nReturns a shading instance that fills with the given shape style."
    },
    {
        "title": "float2(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/shader/argument/float2(_:)-7uxd",
        "html": "See Also\nCreating argument values\nstatic var boundingRect: Shader.Argument\nReturns an argument value representing the bounding rect of the shape or view that the shader is attached to, as float4(x, y, width, height). This value is undefined for shaders that do not have a natural bounding rect (e.g. filter effects drawn into GraphicsContext).\nstatic func color(Color) -> Shader.Argument\nReturns an argument value representing color. When passed to a MSL function it will convert to a half4 value, as a premultiplied color in the target color space.\nstatic func colorArray([Color]) -> Shader.Argument\nReturns an argument value defined by the provided array of color values. When passed to an MSL function it will convert to a device const half4 *ptr, int count pair of parameters.\nstatic func data(Data) -> Shader.Argument\nReturns an argument value defined by the provided data value. When passed to an MSL function it will convert to a device const void *ptr, int size_in_bytes pair of parameters.\nstatic func float<T>(T) -> Shader.Argument\nReturns an argument value representing the MSL value float(x).\nstatic func float2(CGVector) -> Shader.Argument\nReturns an argument value representing the MSL value float2(vector.dx, vector.dy).\nstatic func float2(CGPoint) -> Shader.Argument\nReturns an argument value representing the MSL value float2(point.x, point.y).\nstatic func float2<T>(T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float2(x, y).\nstatic func float3<T>(T, T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float3(x, y, z).\nstatic func float4<T>(T, T, T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float4(x, y, z, w).\nstatic func floatArray([Float]) -> Shader.Argument\nReturns an argument value defined by the provided array of floating point numbers. When passed to an MSL function it will convert to a device const float *ptr, int count pair of parameters.\nstatic func image(Image) -> Shader.Argument\nReturns an argument value defined by the provided image. When passed to an MSL function it will convert to a texture2d<half> value. Currently only one image parameter is supported per Shader instance."
    },
    {
        "title": "ExclusiveGesture.Value.first(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/exclusivegesture/value/first(_:)",
        "html": "See Also\nGetting gesture values\ncase second(Second.Value)\nThe second of two gestures succeeded."
    },
    {
        "title": "floatArray(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/shader/argument/floatarray(_:)",
        "html": "See Also\nCreating argument values\nstatic var boundingRect: Shader.Argument\nReturns an argument value representing the bounding rect of the shape or view that the shader is attached to, as float4(x, y, width, height). This value is undefined for shaders that do not have a natural bounding rect (e.g. filter effects drawn into GraphicsContext).\nstatic func color(Color) -> Shader.Argument\nReturns an argument value representing color. When passed to a MSL function it will convert to a half4 value, as a premultiplied color in the target color space.\nstatic func colorArray([Color]) -> Shader.Argument\nReturns an argument value defined by the provided array of color values. When passed to an MSL function it will convert to a device const half4 *ptr, int count pair of parameters.\nstatic func data(Data) -> Shader.Argument\nReturns an argument value defined by the provided data value. When passed to an MSL function it will convert to a device const void *ptr, int size_in_bytes pair of parameters.\nstatic func float<T>(T) -> Shader.Argument\nReturns an argument value representing the MSL value float(x).\nstatic func float2(CGVector) -> Shader.Argument\nReturns an argument value representing the MSL value float2(vector.dx, vector.dy).\nstatic func float2(CGPoint) -> Shader.Argument\nReturns an argument value representing the MSL value float2(point.x, point.y).\nstatic func float2(CGSize) -> Shader.Argument\nReturns an argument value representing the MSL value float2(size.width, size.height).\nstatic func float2<T>(T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float2(x, y).\nstatic func float3<T>(T, T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float3(x, y, z).\nstatic func float4<T>(T, T, T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float4(x, y, z, w).\nstatic func image(Image) -> Shader.Argument\nReturns an argument value defined by the provided image. When passed to an MSL function it will convert to a texture2d<half> value. Currently only one image parameter is supported per Shader instance."
    },
    {
        "title": "location3D",
        "url": "https://developer.apple.com/documentation/swiftui/spatialeventcollection/event/location3d",
        "html": "See Also\nLocating the event\nvar location: CGPoint\nThe 2D location of the event.\nBeta\nvar selectionRay: Ray3D?\nThe 3D ray used to target the touch.\nBeta\nvar inputDevicePose: SpatialEventCollection.Event.InputDevicePose?\nThe 3D position and orientation of the device controlling the touch, if one exists.\nBeta\nstruct InputDevicePose\nA pose describing the input device like a hand controlling the event.\nBeta\nvar targetedEntity: Entity?\nThe entity target for this touch, if one exists.\nBeta"
    },
    {
        "title": "selectionRay",
        "url": "https://developer.apple.com/documentation/swiftui/spatialeventcollection/event/selectionray",
        "html": "See Also\nLocating the event\nvar location: CGPoint\nThe 2D location of the event.\nBeta\nvar location3D: Point3D\nThe 3D location of the touch.\nBeta\nvar inputDevicePose: SpatialEventCollection.Event.InputDevicePose?\nThe 3D position and orientation of the device controlling the touch, if one exists.\nBeta\nstruct InputDevicePose\nA pose describing the input device like a hand controlling the event.\nBeta\nvar targetedEntity: Entity?\nThe entity target for this touch, if one exists.\nBeta"
    },
    {
        "title": "shadowOnly",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/shadowoptions/shadowonly",
        "html": "See Also\nGetting shadow options\nstatic var disablesGroup: GraphicsContext.ShadowOptions\nAn option that causes the filter to composite the object and its shadow separately in the current layer.\nstatic var invertsAlpha: GraphicsContext.ShadowOptions\nAn option that causes the filter to invert the alpha of the shadow.\nstatic var shadowAbove: GraphicsContext.ShadowOptions\nAn option that causes the filter to draw the shadow above the object, rather than below it."
    },
    {
        "title": "time",
        "url": "https://developer.apple.com/documentation/swiftui/draggesture/value/time",
        "html": "See Also\nHandling changes over time\nvar velocity: CGSize\nThe current drag velocity."
    },
    {
        "title": "velocity",
        "url": "https://developer.apple.com/documentation/swiftui/draggesture/value/velocity",
        "html": "See Also\nHandling changes over time\nvar time: Date\nThe time associated with the drag gesture\u2019s current event."
    },
    {
        "title": "invertsAlpha",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/shadowoptions/invertsalpha",
        "html": "Discussion\n\nYou can create an \u201cinner shadow\u201d effect by combining this option with shadowAbove and using the sourceAtop blend mode.\n\nSee Also\nGetting shadow options\nstatic var disablesGroup: GraphicsContext.ShadowOptions\nAn option that causes the filter to composite the object and its shadow separately in the current layer.\nstatic var shadowAbove: GraphicsContext.ShadowOptions\nAn option that causes the filter to draw the shadow above the object, rather than below it.\nstatic var shadowOnly: GraphicsContext.ShadowOptions\nAn option that causes the filter to draw only the shadow, and omit the source object."
    },
    {
        "title": "Color.RGBColorSpace.sRGB",
        "url": "https://developer.apple.com/documentation/swiftui/color/rgbcolorspace/srgb",
        "html": "Discussion\n\nFor information about the sRGB colorimetry and nonlinear transform function, see the IEC 61966-2-1 specification.\n\nStandard sRGB color spaces clamp the red, green, and blue components of a color to a range of 0 to 1, but SwiftUI colors use an extended sRGB color space, so you can use component values outside that range.\n\nSee Also\nGetting color spaces\ncase sRGBLinear\nThe extended sRGB color space with a linear transfer function.\ncase displayP3\nThe Display P3 color space."
    },
    {
        "title": "ExclusiveGesture.Value.second(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/exclusivegesture/value/second(_:)",
        "html": "See Also\nGetting gesture values\ncase first(First.Value)\nThe first of two gestures succeeded."
    },
    {
        "title": "dropExited(info:)",
        "url": "https://developer.apple.com/documentation/swiftui/dropdelegate/dropexited(info:)-7w9t2",
        "html": "Discussion\n\nThe default implementation does nothing."
    },
    {
        "title": "alphaThreshold(min:max:color:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/filter/alphathreshold(min:max:color:)",
        "html": "Parameters\nmin\n\nThe minimum alpha threshold. Pixels whose alpha component is less than this value will render as transparent. Results are undefined unless min < max.\n\nmax\n\nThe maximum alpha threshold. Pixels whose alpha component is greater than this value will render as transparent. Results are undefined unless min < max.\n\ncolor\n\nThe color that is output for pixels with an alpha component between the two threshold values.\n\nReturn Value\n\nA filter that applies a threshold to alpha values.\n\nSee Also\nAdjusting opacity\nstatic var luminanceToAlpha: GraphicsContext.Filter\nReturns a filter that sets the opacity of each pixel based on its luminance."
    },
    {
        "title": "colorInvert(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/filter/colorinvert(_:)",
        "html": "Parameters\namount\n\nThe inversion amount. A value of one results in total inversion, while a value of zero leaves the result unchanged. Other values apply a linear multiplier effect.\n\nReturn Value\n\nA filter that applies a color inversion.\n\nDiscussion\n\nThis filter is equivalent to the invert filter primitive defined by the Scalable Vector Graphics (SVG) specification.\n\nSee Also\nManipulating color\nstatic func saturation(Double) -> GraphicsContext.Filter\nReturns a filter that applies a saturation adjustment.\nstatic func colorMultiply(Color) -> GraphicsContext.Filter\nReturns a filter that multiplies each color component by the matching component of a given color.\nstatic func hueRotation(Angle) -> GraphicsContext.Filter\nReturns a filter that applies a hue rotation adjustment.\nstatic func grayscale(Double) -> GraphicsContext.Filter\nReturns a filter that applies a grayscale adjustment.\nstatic func colorMatrix(ColorMatrix) -> GraphicsContext.Filter\nReturns a filter that multiplies by a given color matrix."
    },
    {
        "title": "startInputDevicePose3D",
        "url": "https://developer.apple.com/documentation/swiftui/draggesture/value/startinputdevicepose3d",
        "html": "See Also\nGetting 3D position\nvar startLocation3D: Point3D\nThe 3D start location of the drag gesture.\nBeta\nvar location3D: Point3D\nThe 3D location of the drag gesture.\nBeta\nvar predictedEndLocation3D: Point3D\nA prediction of where the final location would be if dragging stopped now, based on the current drag velocity.\nBeta\nvar translation3D: Vector3D\nThe translation of the drag gesture from startLocation3D to location3D.\nBeta\nvar predictedEndTranslation3D: Vector3D\nA prediction of what the final translation would be if dragging stopped now, based on the current drag velocity.\nBeta\nvar inputDevicePose3D: Pose3D?\nThe 3D pose of the device driving the drag, if one exists.\nBeta"
    },
    {
        "title": "inputDevicePose3D",
        "url": "https://developer.apple.com/documentation/swiftui/draggesture/value/inputdevicepose3d",
        "html": "See Also\nGetting 3D position\nvar startLocation3D: Point3D\nThe 3D start location of the drag gesture.\nBeta\nvar location3D: Point3D\nThe 3D location of the drag gesture.\nBeta\nvar predictedEndLocation3D: Point3D\nA prediction of where the final location would be if dragging stopped now, based on the current drag velocity.\nBeta\nvar translation3D: Vector3D\nThe translation of the drag gesture from startLocation3D to location3D.\nBeta\nvar predictedEndTranslation3D: Vector3D\nA prediction of what the final translation would be if dragging stopped now, based on the current drag velocity.\nBeta\nvar startInputDevicePose3D: Pose3D?\nThe starting 3D pose of the device driving the drag, if one exists.\nBeta"
    },
    {
        "title": "sizeThatFits(_:nsView:context:)",
        "url": "https://developer.apple.com/documentation/swiftui/nsviewrepresentable/sizethatfits(_:nsview:context:)-fuqx",
        "html": "Parameters\nproposal\n\nThe proposed size for the view.\n\nnsView\n\nYour custom view object.\n\ncontext\n\nA context structure containing information about the current state of the system.\n\nReturn Value\n\nThe composite size of the represented view controller. Returning a value of nil indicates that the system should use the default sizing algorithm.\n\nDiscussion\n\nThis method may be called more than once with different proposed sizes during the same layout pass. SwiftUI views choose their own size, so one of the values returned from this function will always be used as the actual size of the composite view."
    },
    {
        "title": "sizeThatFits(_:uiView:context:)",
        "url": "https://developer.apple.com/documentation/swiftui/uiviewrepresentable/sizethatfits(_:uiview:context:)-5tdxh",
        "html": "Parameters\nproposal\n\nThe proposed size for the view.\n\nuiView\n\nYour custom view object.\n\ncontext\n\nA context structure containing information about the current state of the system.\n\nReturn Value\n\nThe composite size of the represented view controller. Returning a value of nil indicates that the system should use the default sizing algorithm.\n\nDiscussion\n\nThis method may be called more than once with different proposed sizes during the same layout pass. SwiftUI views choose their own size, so one of the values returned from this function will always be used as the actual size of the composite view."
    },
    {
        "title": "leading",
        "url": "https://developer.apple.com/documentation/swiftui/edge3d/set/leading",
        "html": "See Also\nGetting edge sets\nstatic let all: Edge3D.Set\nBeta\nstatic let top: Edge3D.Set\nBeta\nstatic let bottom: Edge3D.Set\nBeta\nstatic let front: Edge3D.Set\nBeta\nstatic let back: Edge3D.Set\nBeta\nstatic let trailing: Edge3D.Set\nBeta\nstatic let horizontal: Edge3D.Set\nBeta\nstatic let vertical: Edge3D.Set\nBeta\nstatic let depth: Edge3D.Set\nBeta"
    },
    {
        "title": "front",
        "url": "https://developer.apple.com/documentation/swiftui/edge3d/set/front",
        "html": "See Also\nGetting edge sets\nstatic let all: Edge3D.Set\nBeta\nstatic let top: Edge3D.Set\nBeta\nstatic let bottom: Edge3D.Set\nBeta\nstatic let leading: Edge3D.Set\nBeta\nstatic let back: Edge3D.Set\nBeta\nstatic let trailing: Edge3D.Set\nBeta\nstatic let horizontal: Edge3D.Set\nBeta\nstatic let vertical: Edge3D.Set\nBeta\nstatic let depth: Edge3D.Set\nBeta"
    },
    {
        "title": "destinationAtop",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.struct/destinationatop",
        "html": "Discussion\n\nThis mode implements the equation R = S*(1 - Da) + D*Sa where\n\nR is the composite image.\n\nS is the source image.\n\nD is the background.\n\nSa is the source image\u2019s alpha value.\n\nDa is the source background\u2019s alpha value.\n\nSee Also\nAccessing porter-duff modes\nstatic var clear: GraphicsContext.BlendMode\nA mode that clears any pixels that the source image overwrites.\nstatic var copy: GraphicsContext.BlendMode\nA mode that replaces background image samples with source image samples.\nstatic var sourceIn: GraphicsContext.BlendMode\nA mode that you use to paint the source image, including its transparency, onto the opaque parts of the background.\nstatic var sourceOut: GraphicsContext.BlendMode\nA mode that you use to paint the source image onto the transparent parts of the background, while erasing the background.\nstatic var sourceAtop: GraphicsContext.BlendMode\nA mode that you use to paint the opaque parts of the source image onto the opaque parts of the background.\nstatic var destinationOver: GraphicsContext.BlendMode\nA mode that you use to paint the source image under the background.\nstatic var destinationIn: GraphicsContext.BlendMode\nA mode that you use to erase any of the background that isn\u2019t covered by opaque source pixels.\nstatic var destinationOut: GraphicsContext.BlendMode\nA mode that you use to erase any of the background that is covered by opaque source pixels.\nstatic var xor: GraphicsContext.BlendMode\nA mode that you use to clear pixels where both the source and background images are opaque."
    },
    {
        "title": "bottom",
        "url": "https://developer.apple.com/documentation/swiftui/edge3d/set/bottom",
        "html": "See Also\nGetting edge sets\nstatic let all: Edge3D.Set\nBeta\nstatic let top: Edge3D.Set\nBeta\nstatic let leading: Edge3D.Set\nBeta\nstatic let front: Edge3D.Set\nBeta\nstatic let back: Edge3D.Set\nBeta\nstatic let trailing: Edge3D.Set\nBeta\nstatic let horizontal: Edge3D.Set\nBeta\nstatic let vertical: Edge3D.Set\nBeta\nstatic let depth: Edge3D.Set\nBeta"
    },
    {
        "title": "trailing",
        "url": "https://developer.apple.com/documentation/swiftui/edge3d/set/trailing",
        "html": "See Also\nGetting edge sets\nstatic let all: Edge3D.Set\nBeta\nstatic let top: Edge3D.Set\nBeta\nstatic let bottom: Edge3D.Set\nBeta\nstatic let leading: Edge3D.Set\nBeta\nstatic let front: Edge3D.Set\nBeta\nstatic let back: Edge3D.Set\nBeta\nstatic let horizontal: Edge3D.Set\nBeta\nstatic let vertical: Edge3D.Set\nBeta\nstatic let depth: Edge3D.Set\nBeta"
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/edge3d/set/init(_:)-5c8yt",
        "html": "See Also\nCreating an edge set\ninit(Edge3D)\nCreates a set of edges containing only the specified edge.\nBeta"
    },
    {
        "title": "destinationOver",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.struct/destinationover",
        "html": "Discussion\n\nThis mode implements the equation R = S*(1 - Da) + D where\n\nR is the composite image.\n\nS is the source image.\n\nD is the background.\n\nDa is the source background\u2019s alpha value.\n\nSee Also\nAccessing porter-duff modes\nstatic var clear: GraphicsContext.BlendMode\nA mode that clears any pixels that the source image overwrites.\nstatic var copy: GraphicsContext.BlendMode\nA mode that replaces background image samples with source image samples.\nstatic var sourceIn: GraphicsContext.BlendMode\nA mode that you use to paint the source image, including its transparency, onto the opaque parts of the background.\nstatic var sourceOut: GraphicsContext.BlendMode\nA mode that you use to paint the source image onto the transparent parts of the background, while erasing the background.\nstatic var sourceAtop: GraphicsContext.BlendMode\nA mode that you use to paint the opaque parts of the source image onto the opaque parts of the background.\nstatic var destinationIn: GraphicsContext.BlendMode\nA mode that you use to erase any of the background that isn\u2019t covered by opaque source pixels.\nstatic var destinationOut: GraphicsContext.BlendMode\nA mode that you use to erase any of the background that is covered by opaque source pixels.\nstatic var destinationAtop: GraphicsContext.BlendMode\nA mode that you use to paint the source image under the background, while erasing any of the background not matched by opaque pixels from the source image.\nstatic var xor: GraphicsContext.BlendMode\nA mode that you use to clear pixels where both the source and background images are opaque."
    },
    {
        "title": "subscript(dynamicMember:)",
        "url": "https://developer.apple.com/documentation/swiftui/focusedobject/wrapper/subscript(dynamicmember:)",
        "html": "Parameters\nkeyPath\n\nA key path to a specific value on the wrapped object.\n\nReturn Value\n\nA new binding."
    },
    {
        "title": "layoutProperties",
        "url": "https://developer.apple.com/documentation/swiftui/layout/layoutproperties-6h7w0",
        "html": "Discussion\n\nIf you don\u2019t implement the layoutProperties method in your custom layout, the protocol uses this default implementation instead, which returns a LayoutProperties instance with default values. The properties instance contains information about the layout container, like a stackOrientation property that indicates the container\u2019s major axis."
    },
    {
        "title": "color",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.struct/color",
        "html": "Discussion\n\nThis mode preserves the gray levels in the image. You can use this mode to color monochrome images or to tint color images.\n\nSee Also\nMixing color components\nstatic var hue: GraphicsContext.BlendMode\nA mode that uses the luminance and saturation values of the background with the hue of the source image.\nstatic var saturation: GraphicsContext.BlendMode\nA mode that uses the luminance and hue values of the background with the saturation of the source image.\nstatic var luminosity: GraphicsContext.BlendMode\nA mode that uses the hue and saturation of the background with the luminance of the source image."
    },
    {
        "title": "image(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/shader/argument/image(_:)",
        "html": "See Also\nCreating argument values\nstatic var boundingRect: Shader.Argument\nReturns an argument value representing the bounding rect of the shape or view that the shader is attached to, as float4(x, y, width, height). This value is undefined for shaders that do not have a natural bounding rect (e.g. filter effects drawn into GraphicsContext).\nstatic func color(Color) -> Shader.Argument\nReturns an argument value representing color. When passed to a MSL function it will convert to a half4 value, as a premultiplied color in the target color space.\nstatic func colorArray([Color]) -> Shader.Argument\nReturns an argument value defined by the provided array of color values. When passed to an MSL function it will convert to a device const half4 *ptr, int count pair of parameters.\nstatic func data(Data) -> Shader.Argument\nReturns an argument value defined by the provided data value. When passed to an MSL function it will convert to a device const void *ptr, int size_in_bytes pair of parameters.\nstatic func float<T>(T) -> Shader.Argument\nReturns an argument value representing the MSL value float(x).\nstatic func float2(CGVector) -> Shader.Argument\nReturns an argument value representing the MSL value float2(vector.dx, vector.dy).\nstatic func float2(CGPoint) -> Shader.Argument\nReturns an argument value representing the MSL value float2(point.x, point.y).\nstatic func float2(CGSize) -> Shader.Argument\nReturns an argument value representing the MSL value float2(size.width, size.height).\nstatic func float2<T>(T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float2(x, y).\nstatic func float3<T>(T, T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float3(x, y, z).\nstatic func float4<T>(T, T, T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float4(x, y, z, w).\nstatic func floatArray([Float]) -> Shader.Argument\nReturns an argument value defined by the provided array of floating point numbers. When passed to an MSL function it will convert to a device const float *ptr, int count pair of parameters."
    },
    {
        "title": "top",
        "url": "https://developer.apple.com/documentation/swiftui/edge3d/set/top",
        "html": "See Also\nGetting edge sets\nstatic let all: Edge3D.Set\nBeta\nstatic let bottom: Edge3D.Set\nBeta\nstatic let leading: Edge3D.Set\nBeta\nstatic let front: Edge3D.Set\nBeta\nstatic let back: Edge3D.Set\nBeta\nstatic let trailing: Edge3D.Set\nBeta\nstatic let horizontal: Edge3D.Set\nBeta\nstatic let vertical: Edge3D.Set\nBeta\nstatic let depth: Edge3D.Set\nBeta"
    },
    {
        "title": "back",
        "url": "https://developer.apple.com/documentation/swiftui/edge3d/set/back",
        "html": "See Also\nGetting edge sets\nstatic let all: Edge3D.Set\nBeta\nstatic let top: Edge3D.Set\nBeta\nstatic let bottom: Edge3D.Set\nBeta\nstatic let leading: Edge3D.Set\nBeta\nstatic let front: Edge3D.Set\nBeta\nstatic let trailing: Edge3D.Set\nBeta\nstatic let horizontal: Edge3D.Set\nBeta\nstatic let vertical: Edge3D.Set\nBeta\nstatic let depth: Edge3D.Set\nBeta"
    },
    {
        "title": "all",
        "url": "https://developer.apple.com/documentation/swiftui/horizontaledge/set/all",
        "html": "See Also\nGetting edge sets\nstatic let leading: HorizontalEdge.Set\nA set containing only the leading horizontal edge.\nstatic let trailing: HorizontalEdge.Set\nA set containing only the trailing horizontal edge."
    },
    {
        "title": "BorderlessPullDownMenuButtonStyle",
        "url": "https://developer.apple.com/documentation/swiftui/borderlesspulldownmenubuttonstyle",
        "html": "Deprecated\n\nUse BorderlessButtonMenuStyle instead.\n\nTopics\nCreating a borderless pull down menu button style\ninit()\nRelationships\nConforms To\nMenuButtonStyle\nSee Also\nSupporting types\nstruct BorderlessButtonMenuButtonStyle\nA menu button style which manifests as a borderless button with no visual embelishments.\nDeprecated\nstruct DefaultMenuButtonStyle\nThe default menu button style.\nDeprecated\nstruct PullDownMenuButtonStyle\nA menu button style which manifests as a pull-down button.\nDeprecated"
    },
    {
        "title": "hardLight",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.struct/hardlight",
        "html": "Discussion\n\nIf the source image sample color is lighter than 50% gray, the background is lightened, similar to screening. If the source image sample color is darker than 50% gray, the background is darkened, similar to multiplying. If the source image sample color is equal to 50% gray, the source image is not changed. Image samples that are equal to pure black or pure white result in pure black or white. The overall effect is similar to what you\u2019d achieve by shining a harsh spotlight on the source image. Use this to add highlights to a scene.\n\nSee Also\nAdding contrast\nstatic var overlay: GraphicsContext.BlendMode\nA mode that either multiplies or screens the source image samples with the background image samples, depending on the background color.\nstatic var softLight: GraphicsContext.BlendMode\nA mode that either darkens or lightens colors, depending on the source image sample color."
    },
    {
        "title": "trailing",
        "url": "https://developer.apple.com/documentation/swiftui/horizontaledge/set/trailing",
        "html": "See Also\nGetting edge sets\nstatic let all: HorizontalEdge.Set\nA set containing the leading and trailing horizontal edges.\nstatic let leading: HorizontalEdge.Set\nA set containing only the leading horizontal edge."
    },
    {
        "title": "horizontal",
        "url": "https://developer.apple.com/documentation/swiftui/edge3d/set/horizontal",
        "html": "See Also\nGetting edge sets\nstatic let all: Edge3D.Set\nBeta\nstatic let top: Edge3D.Set\nBeta\nstatic let bottom: Edge3D.Set\nBeta\nstatic let leading: Edge3D.Set\nBeta\nstatic let front: Edge3D.Set\nBeta\nstatic let back: Edge3D.Set\nBeta\nstatic let trailing: Edge3D.Set\nBeta\nstatic let vertical: Edge3D.Set\nBeta\nstatic let depth: Edge3D.Set\nBeta"
    },
    {
        "title": "linearGradient(_:startPoint:endPoint:options:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/shading/lineargradient(_:startpoint:endpoint:options:)",
        "html": "Parameters\ngradient\n\nA Gradient instance that defines the colors of the gradient.\n\nstartPoint\n\nThe start point of the gradient axis.\n\nendPoint\n\nThe end point of the gradient axis.\n\noptions\n\nOptions that you use to configure the gradient.\n\nReturn Value\n\nA shading instance filled with a linear gradient.\n\nDiscussion\n\nThe shading instance defines an axis from startPoint to endPoint in the current user space and maps colors from gradient to lines perpendicular to the axis.\n\nSee Also\nGradients\nstatic func radialGradient(Gradient, center: CGPoint, startRadius: CGFloat, endRadius: CGFloat, options: GraphicsContext.GradientOptions) -> GraphicsContext.Shading\nReturns a shading instance that fills a radial gradient.\nstatic func conicGradient(Gradient, center: CGPoint, angle: Angle, options: GraphicsContext.GradientOptions) -> GraphicsContext.Shading\nReturns a shading instance that fills a conic (angular) gradient."
    },
    {
        "title": "radialGradient(_:center:startRadius:endRadius:options:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/shading/radialgradient(_:center:startradius:endradius:options:)",
        "html": "Parameters\ngradient\n\nA Gradient instance that defines the colors of the gradient.\n\ncenter\n\nThe point in the current user space on which SwiftUI centers the gradient.\n\nstartRadius\n\nThe distance from the center where the gradient starts.\n\nendRadius\n\nThe distance from the center where the gradient ends.\n\noptions\n\nOptions that you use to configure the gradient.\n\nReturn Value\n\nA shading instance filled with a radial gradient.\n\nSee Also\nGradients\nstatic func linearGradient(Gradient, startPoint: CGPoint, endPoint: CGPoint, options: GraphicsContext.GradientOptions) -> GraphicsContext.Shading\nReturns a shading instance that fills a linear (axial) gradient.\nstatic func conicGradient(Gradient, center: CGPoint, angle: Angle, options: GraphicsContext.GradientOptions) -> GraphicsContext.Shading\nReturns a shading instance that fills a conic (angular) gradient."
    },
    {
        "title": "conicGradient(_:center:angle:options:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/shading/conicgradient(_:center:angle:options:)",
        "html": "Parameters\ngradient\n\nA Gradient instance that defines the colors of the gradient.\n\ncenter\n\nThe point in the current user space on which SwiftUI centers the gradient.\n\nangle\n\nThe angle about the center that SwiftUI uses to start and finish the gradient. The gradient sweeps all the way around the center.\n\noptions\n\nOptions that you use to configure the gradient.\n\nReturn Value\n\nA shading instance filled with a conic gradient.\n\nSee Also\nGradients\nstatic func linearGradient(Gradient, startPoint: CGPoint, endPoint: CGPoint, options: GraphicsContext.GradientOptions) -> GraphicsContext.Shading\nReturns a shading instance that fills a linear (axial) gradient.\nstatic func radialGradient(Gradient, center: CGPoint, startRadius: CGFloat, endRadius: CGFloat, options: GraphicsContext.GradientOptions) -> GraphicsContext.Shading\nReturns a shading instance that fills a radial gradient."
    },
    {
        "title": "style(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/shading/style(_:)",
        "html": "Parameters\nstyle\n\nA ShapeStyle instance to draw with.\n\nReturn Value\n\nA shading instance filled with a shape style.\n\nDiscussion\n\nStyles with geometry defined in a unit coordinate space map that space to the rectangle associated with the drawn object. You can adjust that using the in(_:) method. The shape style might affect the blend mode and opacity of the drawn object.\n\nSee Also\nOther shape styles\nstatic var foreground: GraphicsContext.Shading\nA shading instance that fills with the foreground style from the graphics context\u2019s environment."
    },
    {
        "title": "palette(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/shading/palette(_:)",
        "html": "Parameters\narray\n\nAn array of shading instances. The array must contain at least one element.\n\nReturn Value\n\nA shading instance composed from the given instances.\n\nSee Also\nComposite shading types\nstatic var backdrop: GraphicsContext.Shading\nA shading instance that draws a copy of the current background."
    },
    {
        "title": "tiledImage(_:origin:sourceRect:scale:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/shading/tiledimage(_:origin:sourcerect:scale:)",
        "html": "Parameters\nimage\n\nAn Image to use as fill.\n\norigin\n\nThe point in the current user space where SwiftUI places the bottom left corner of the part of the image defined by sourceRect. The image repeats as needed.\n\nsourceRect\n\nA unit space subregion of the image. The default is a unit rectangle, which selects the whole image.\n\nscale\n\nA factor that you can use to control the image size.\n\nReturn Value\n\nA shading instance filled with a tiled image."
    },
    {
        "title": "backdrop",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/shading/backdrop",
        "html": "See Also\nComposite shading types\nstatic func palette([GraphicsContext.Shading]) -> GraphicsContext.Shading\nReturns a multilevel shading instance constructed from an array of shading instances."
    },
    {
        "title": "shader(_:bounds:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/shading/shader(_:bounds:)",
        "html": "Parameters\nshader\n\nThe shader defining the filled colors.\n\nbounds\n\nThe rect used to define any bounds arguments of the shader.\n\nReturn Value\n\nA shading instance that fills using the shader.\n\nDiscussion\n\nFor a shader function to act as a shape fill it must have a function signature matching:\n\n[[ stitchable ]] half4 name(float2 position, args...)\n\n\nwhere position is the user-space coordinates of the pixel applied to the shader, and args... should be compatible with the uniform arguments bound to shader. The function should return the premultiplied color value in the color space of the destination (typically sRGB)."
    },
    {
        "title": "lastBaseline(in:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/resolvedtext/lastbaseline(in:)",
        "html": "See Also\nGetting the text properties\nfunc firstBaseline(in: CGSize) -> CGFloat\nGets the distance from the first line\u2019s ascender to its baseline.\nfunc measure(in: CGSize) -> CGSize\nMeasures the size of the resolved text for a given area into which the text should be placed.\nvar shading: GraphicsContext.Shading\nThe shading to fill uncolored text regions with."
    },
    {
        "title": "data(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/shader/argument/data(_:)",
        "html": "See Also\nCreating argument values\nstatic var boundingRect: Shader.Argument\nReturns an argument value representing the bounding rect of the shape or view that the shader is attached to, as float4(x, y, width, height). This value is undefined for shaders that do not have a natural bounding rect (e.g. filter effects drawn into GraphicsContext).\nstatic func color(Color) -> Shader.Argument\nReturns an argument value representing color. When passed to a MSL function it will convert to a half4 value, as a premultiplied color in the target color space.\nstatic func colorArray([Color]) -> Shader.Argument\nReturns an argument value defined by the provided array of color values. When passed to an MSL function it will convert to a device const half4 *ptr, int count pair of parameters.\nstatic func float<T>(T) -> Shader.Argument\nReturns an argument value representing the MSL value float(x).\nstatic func float2(CGVector) -> Shader.Argument\nReturns an argument value representing the MSL value float2(vector.dx, vector.dy).\nstatic func float2(CGPoint) -> Shader.Argument\nReturns an argument value representing the MSL value float2(point.x, point.y).\nstatic func float2(CGSize) -> Shader.Argument\nReturns an argument value representing the MSL value float2(size.width, size.height).\nstatic func float2<T>(T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float2(x, y).\nstatic func float3<T>(T, T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float3(x, y, z).\nstatic func float4<T>(T, T, T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float4(x, y, z, w).\nstatic func floatArray([Float]) -> Shader.Argument\nReturns an argument value defined by the provided array of floating point numbers. When passed to an MSL function it will convert to a device const float *ptr, int count pair of parameters.\nstatic func image(Image) -> Shader.Argument\nReturns an argument value defined by the provided image. When passed to an MSL function it will convert to a texture2d<half> value. Currently only one image parameter is supported per Shader instance."
    },
    {
        "title": "colorArray(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/shader/argument/colorarray(_:)",
        "html": "See Also\nCreating argument values\nstatic var boundingRect: Shader.Argument\nReturns an argument value representing the bounding rect of the shape or view that the shader is attached to, as float4(x, y, width, height). This value is undefined for shaders that do not have a natural bounding rect (e.g. filter effects drawn into GraphicsContext).\nstatic func color(Color) -> Shader.Argument\nReturns an argument value representing color. When passed to a MSL function it will convert to a half4 value, as a premultiplied color in the target color space.\nstatic func data(Data) -> Shader.Argument\nReturns an argument value defined by the provided data value. When passed to an MSL function it will convert to a device const void *ptr, int size_in_bytes pair of parameters.\nstatic func float<T>(T) -> Shader.Argument\nReturns an argument value representing the MSL value float(x).\nstatic func float2(CGVector) -> Shader.Argument\nReturns an argument value representing the MSL value float2(vector.dx, vector.dy).\nstatic func float2(CGPoint) -> Shader.Argument\nReturns an argument value representing the MSL value float2(point.x, point.y).\nstatic func float2(CGSize) -> Shader.Argument\nReturns an argument value representing the MSL value float2(size.width, size.height).\nstatic func float2<T>(T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float2(x, y).\nstatic func float3<T>(T, T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float3(x, y, z).\nstatic func float4<T>(T, T, T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float4(x, y, z, w).\nstatic func floatArray([Float]) -> Shader.Argument\nReturns an argument value defined by the provided array of floating point numbers. When passed to an MSL function it will convert to a device const float *ptr, int count pair of parameters.\nstatic func image(Image) -> Shader.Argument\nReturns an argument value defined by the provided image. When passed to an MSL function it will convert to a texture2d<half> value. Currently only one image parameter is supported per Shader instance."
    },
    {
        "title": "color(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/shader/argument/color(_:)",
        "html": "See Also\nCreating argument values\nstatic var boundingRect: Shader.Argument\nReturns an argument value representing the bounding rect of the shape or view that the shader is attached to, as float4(x, y, width, height). This value is undefined for shaders that do not have a natural bounding rect (e.g. filter effects drawn into GraphicsContext).\nstatic func colorArray([Color]) -> Shader.Argument\nReturns an argument value defined by the provided array of color values. When passed to an MSL function it will convert to a device const half4 *ptr, int count pair of parameters.\nstatic func data(Data) -> Shader.Argument\nReturns an argument value defined by the provided data value. When passed to an MSL function it will convert to a device const void *ptr, int size_in_bytes pair of parameters.\nstatic func float<T>(T) -> Shader.Argument\nReturns an argument value representing the MSL value float(x).\nstatic func float2(CGVector) -> Shader.Argument\nReturns an argument value representing the MSL value float2(vector.dx, vector.dy).\nstatic func float2(CGPoint) -> Shader.Argument\nReturns an argument value representing the MSL value float2(point.x, point.y).\nstatic func float2(CGSize) -> Shader.Argument\nReturns an argument value representing the MSL value float2(size.width, size.height).\nstatic func float2<T>(T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float2(x, y).\nstatic func float3<T>(T, T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float3(x, y, z).\nstatic func float4<T>(T, T, T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float4(x, y, z, w).\nstatic func floatArray([Float]) -> Shader.Argument\nReturns an argument value defined by the provided array of floating point numbers. When passed to an MSL function it will convert to a device const float *ptr, int count pair of parameters.\nstatic func image(Image) -> Shader.Argument\nReturns an argument value defined by the provided image. When passed to an MSL function it will convert to a texture2d<half> value. Currently only one image parameter is supported per Shader instance."
    },
    {
        "title": "boundingRect",
        "url": "https://developer.apple.com/documentation/swiftui/shader/argument/boundingrect",
        "html": "See Also\nCreating argument values\nstatic func color(Color) -> Shader.Argument\nReturns an argument value representing color. When passed to a MSL function it will convert to a half4 value, as a premultiplied color in the target color space.\nstatic func colorArray([Color]) -> Shader.Argument\nReturns an argument value defined by the provided array of color values. When passed to an MSL function it will convert to a device const half4 *ptr, int count pair of parameters.\nstatic func data(Data) -> Shader.Argument\nReturns an argument value defined by the provided data value. When passed to an MSL function it will convert to a device const void *ptr, int size_in_bytes pair of parameters.\nstatic func float<T>(T) -> Shader.Argument\nReturns an argument value representing the MSL value float(x).\nstatic func float2(CGVector) -> Shader.Argument\nReturns an argument value representing the MSL value float2(vector.dx, vector.dy).\nstatic func float2(CGPoint) -> Shader.Argument\nReturns an argument value representing the MSL value float2(point.x, point.y).\nstatic func float2(CGSize) -> Shader.Argument\nReturns an argument value representing the MSL value float2(size.width, size.height).\nstatic func float2<T>(T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float2(x, y).\nstatic func float3<T>(T, T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float3(x, y, z).\nstatic func float4<T>(T, T, T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float4(x, y, z, w).\nstatic func floatArray([Float]) -> Shader.Argument\nReturns an argument value defined by the provided array of floating point numbers. When passed to an MSL function it will convert to a device const float *ptr, int count pair of parameters.\nstatic func image(Image) -> Shader.Argument\nReturns an argument value defined by the provided image. When passed to an MSL function it will convert to a texture2d<half> value. Currently only one image parameter is supported per Shader instance."
    },
    {
        "title": "float2(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/shader/argument/float2(_:)-5hfgy",
        "html": "See Also\nCreating argument values\nstatic var boundingRect: Shader.Argument\nReturns an argument value representing the bounding rect of the shape or view that the shader is attached to, as float4(x, y, width, height). This value is undefined for shaders that do not have a natural bounding rect (e.g. filter effects drawn into GraphicsContext).\nstatic func color(Color) -> Shader.Argument\nReturns an argument value representing color. When passed to a MSL function it will convert to a half4 value, as a premultiplied color in the target color space.\nstatic func colorArray([Color]) -> Shader.Argument\nReturns an argument value defined by the provided array of color values. When passed to an MSL function it will convert to a device const half4 *ptr, int count pair of parameters.\nstatic func data(Data) -> Shader.Argument\nReturns an argument value defined by the provided data value. When passed to an MSL function it will convert to a device const void *ptr, int size_in_bytes pair of parameters.\nstatic func float<T>(T) -> Shader.Argument\nReturns an argument value representing the MSL value float(x).\nstatic func float2(CGPoint) -> Shader.Argument\nReturns an argument value representing the MSL value float2(point.x, point.y).\nstatic func float2(CGSize) -> Shader.Argument\nReturns an argument value representing the MSL value float2(size.width, size.height).\nstatic func float2<T>(T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float2(x, y).\nstatic func float3<T>(T, T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float3(x, y, z).\nstatic func float4<T>(T, T, T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float4(x, y, z, w).\nstatic func floatArray([Float]) -> Shader.Argument\nReturns an argument value defined by the provided array of floating point numbers. When passed to an MSL function it will convert to a device const float *ptr, int count pair of parameters.\nstatic func image(Image) -> Shader.Argument\nReturns an argument value defined by the provided image. When passed to an MSL function it will convert to a texture2d<half> value. Currently only one image parameter is supported per Shader instance."
    },
    {
        "title": "shading",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/resolvedtext/shading",
        "html": "Discussion\n\nThis value defaults to the foreground shading.\n\nSee Also\nGetting the text properties\nfunc firstBaseline(in: CGSize) -> CGFloat\nGets the distance from the first line\u2019s ascender to its baseline.\nfunc lastBaseline(in: CGSize) -> CGFloat\nGets the distance from the first line\u2019s ascender to the last line\u2019s baseline.\nfunc measure(in: CGSize) -> CGSize\nMeasures the size of the resolved text for a given area into which the text should be placed."
    },
    {
        "title": "firstBaseline(in:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/resolvedtext/firstbaseline(in:)",
        "html": "See Also\nGetting the text properties\nfunc lastBaseline(in: CGSize) -> CGFloat\nGets the distance from the first line\u2019s ascender to the last line\u2019s baseline.\nfunc measure(in: CGSize) -> CGSize\nMeasures the size of the resolved text for a given area into which the text should be placed.\nvar shading: GraphicsContext.Shading\nThe shading to fill uncolored text regions with."
    },
    {
        "title": "dashDotDot",
        "url": "https://developer.apple.com/documentation/swiftui/text/linestyle/pattern/dashdotdot",
        "html": "See Also\nGetting line style patterns\nstatic let solid: Text.LineStyle.Pattern\nDraw a solid line.\nstatic let dot: Text.LineStyle.Pattern\nDraw a line of dots.\nstatic let dash: Text.LineStyle.Pattern\nDraw a line of dashes.\nstatic let dashDot: Text.LineStyle.Pattern"
    },
    {
        "title": "linearColor",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/gradientoptions/linearcolor",
        "html": "See Also\nGetting gradient options\nstatic var mirror: GraphicsContext.GradientOptions\nAn option that repeats the gradient outside its nominal range, reflecting every other instance.\nstatic var `repeat`: GraphicsContext.GradientOptions\nAn option that repeats the gradient outside its nominal range."
    },
    {
        "title": "mirror",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/gradientoptions/mirror",
        "html": "Discussion\n\nUse this option to cause the gradient to repeat its pattern in areas that exceed the bounds of its start and end points. The repetitions alternately reverse the start and end points, producing a pattern like 0 -> 1, 1 -> 0, 0 -> 1, and so on.\n\nWithout either this option or repeat, the gradient stops at the end of its range. This option takes precendence if you set both this one and repeat.\n\nSee Also\nGetting gradient options\nstatic var linearColor: GraphicsContext.GradientOptions\nAn option that interpolates between colors in a linear color space.\nstatic var `repeat`: GraphicsContext.GradientOptions\nAn option that repeats the gradient outside its nominal range."
    },
    {
        "title": "repeat",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/gradientoptions/repeat",
        "html": "Discussion\n\nUse this option to cause the gradient to repeat its pattern in areas that exceed the bounds of its start and end points. The repetitions use the same start and end value for each repetition.\n\nWithout this option or mirror, the gradient stops at the end of its range. The mirror option takes precendence if you set both this one and that one.\n\nSee Also\nGetting gradient options\nstatic var linearColor: GraphicsContext.GradientOptions\nAn option that interpolates between colors in a linear color space.\nstatic var mirror: GraphicsContext.GradientOptions\nAn option that repeats the gradient outside its nominal range, reflecting every other instance."
    },
    {
        "title": "ProjectionTransform",
        "url": "https://developer.apple.com/documentation/SwiftUI/ProjectionTransform",
        "html": "Topics\nCreating a transform\ninit()\ninit(CGAffineTransform)\ninit(CATransform3D)\nGetting transform characteristics\nvar isAffine: Bool\nvar isIdentity: Bool\nManipulating transforms\nfunc invert() -> Bool\nfunc inverted() -> ProjectionTransform\nfunc concatenating(ProjectionTransform) -> ProjectionTransform\nAccessing the transform\u2019s coefficients\nvar m11: CGFloat\nvar m12: CGFloat\nvar m13: CGFloat\nvar m21: CGFloat\nvar m22: CGFloat\nvar m23: CGFloat\nvar m31: CGFloat\nvar m32: CGFloat\nvar m33: CGFloat\nRelationships\nConforms To\nEquatable\nSendable\nSee Also\nScaling, rotating, or transforming a view\nfunc scaledToFill() -> some View\nScales this view to fill its parent.\nfunc scaledToFit() -> some View\nScales this view to fit its parent.\nfunc scaleEffect(CGFloat, anchor: UnitPoint) -> some View\nScales this view\u2019s rendered output by the given amount in both the horizontal and vertical directions, relative to an anchor point.\nfunc scaleEffect(CGSize, anchor: UnitPoint) -> some View\nScales this view\u2019s rendered output by the given vertical and horizontal size amounts, relative to an anchor point.\nfunc scaleEffect(CGFloat, anchor: UnitPoint3D) -> some View\nScales this view uniformly by the specified factor.\nBeta\nfunc scaleEffect(Size3D, anchor: UnitPoint3D) -> some View\nScales this view uniformly by the specified size in each dimension.\nBeta\nfunc scaleEffect(CGFloat, anchor: UnitPoint) -> ModifiedContent<Self, _UniformScaleEffect>\nScales this view\u2019s rendered output by the given amount in both the horizontal and vertical directions, relative to an anchor point.\nfunc scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View\nScales this view\u2019s rendered output by the given horizontal and vertical amounts, relative to an anchor point.\nfunc scaleEffect(x: CGFloat, y: CGFloat, z: CGFloat, anchor: UnitPoint3D) -> some View\nScales this view by the specified horizontal, vertical, and depth factors.\nBeta\nfunc aspectRatio(CGFloat?, contentMode: ContentMode) -> some View\nConstrains this view\u2019s dimensions to the specified aspect ratio.\nfunc aspectRatio(CGSize, contentMode: ContentMode) -> some View\nConstrains this view\u2019s dimensions to the aspect ratio of the given size.\nfunc rotationEffect(Angle, anchor: UnitPoint) -> some View\nRotates a view\u2019s rendered output in two dimensions around the specified point.\nfunc rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View\nRenders a view\u2019s content as if it\u2019s rotated in three dimensions around the specified axis.\nfunc perspectiveRotationEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View\nRenders a view\u2019s content as if it\u2019s rotated in three dimensions around the specified axis.\nBeta\nfunc rotation3DEffect(Rotation3D, anchor: UnitPoint3D) -> some View\nRotates the view\u2019s content by the specified 3D rotation value.\nBeta\nfunc rotation3DEffect(Angle, axis: RotationAxis3D, anchor: UnitPoint3D) -> some View\nRotates the view\u2019s content by an angle about an axis that you specify as a rotation axis value.\nBeta\nfunc rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint3D) -> some View\nRotates the view\u2019s content by an angle about an axis that you specify as a tuple of elements.\nBeta\nfunc transformEffect(CGAffineTransform) -> some View\nApplies an affine transformation to this view\u2019s rendered output.\nfunc transform3DEffect(AffineTransform3D) -> some View\nApplies a 3D transformation to the receiver.\nBeta\nfunc projectionEffect(ProjectionTransform) -> some View\nApplies a projection transformation to this view\u2019s rendered output.\nenum ContentMode\nConstants that define how a view\u2019s content fills the available space."
    },
    {
        "title": "float2(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/shader/argument/float2(_:)-725xi",
        "html": "See Also\nCreating argument values\nstatic var boundingRect: Shader.Argument\nReturns an argument value representing the bounding rect of the shape or view that the shader is attached to, as float4(x, y, width, height). This value is undefined for shaders that do not have a natural bounding rect (e.g. filter effects drawn into GraphicsContext).\nstatic func color(Color) -> Shader.Argument\nReturns an argument value representing color. When passed to a MSL function it will convert to a half4 value, as a premultiplied color in the target color space.\nstatic func colorArray([Color]) -> Shader.Argument\nReturns an argument value defined by the provided array of color values. When passed to an MSL function it will convert to a device const half4 *ptr, int count pair of parameters.\nstatic func data(Data) -> Shader.Argument\nReturns an argument value defined by the provided data value. When passed to an MSL function it will convert to a device const void *ptr, int size_in_bytes pair of parameters.\nstatic func float<T>(T) -> Shader.Argument\nReturns an argument value representing the MSL value float(x).\nstatic func float2(CGVector) -> Shader.Argument\nReturns an argument value representing the MSL value float2(vector.dx, vector.dy).\nstatic func float2(CGSize) -> Shader.Argument\nReturns an argument value representing the MSL value float2(size.width, size.height).\nstatic func float2<T>(T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float2(x, y).\nstatic func float3<T>(T, T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float3(x, y, z).\nstatic func float4<T>(T, T, T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float4(x, y, z, w).\nstatic func floatArray([Float]) -> Shader.Argument\nReturns an argument value defined by the provided array of floating point numbers. When passed to an MSL function it will convert to a device const float *ptr, int count pair of parameters.\nstatic func image(Image) -> Shader.Argument\nReturns an argument value defined by the provided image. When passed to an MSL function it will convert to a texture2d<half> value. Currently only one image parameter is supported per Shader instance."
    },
    {
        "title": "float2(_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/shader/argument/float2(_:_:)",
        "html": "See Also\nCreating argument values\nstatic var boundingRect: Shader.Argument\nReturns an argument value representing the bounding rect of the shape or view that the shader is attached to, as float4(x, y, width, height). This value is undefined for shaders that do not have a natural bounding rect (e.g. filter effects drawn into GraphicsContext).\nstatic func color(Color) -> Shader.Argument\nReturns an argument value representing color. When passed to a MSL function it will convert to a half4 value, as a premultiplied color in the target color space.\nstatic func colorArray([Color]) -> Shader.Argument\nReturns an argument value defined by the provided array of color values. When passed to an MSL function it will convert to a device const half4 *ptr, int count pair of parameters.\nstatic func data(Data) -> Shader.Argument\nReturns an argument value defined by the provided data value. When passed to an MSL function it will convert to a device const void *ptr, int size_in_bytes pair of parameters.\nstatic func float<T>(T) -> Shader.Argument\nReturns an argument value representing the MSL value float(x).\nstatic func float2(CGVector) -> Shader.Argument\nReturns an argument value representing the MSL value float2(vector.dx, vector.dy).\nstatic func float2(CGPoint) -> Shader.Argument\nReturns an argument value representing the MSL value float2(point.x, point.y).\nstatic func float2(CGSize) -> Shader.Argument\nReturns an argument value representing the MSL value float2(size.width, size.height).\nstatic func float3<T>(T, T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float3(x, y, z).\nstatic func float4<T>(T, T, T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float4(x, y, z, w).\nstatic func floatArray([Float]) -> Shader.Argument\nReturns an argument value defined by the provided array of floating point numbers. When passed to an MSL function it will convert to a device const float *ptr, int count pair of parameters.\nstatic func image(Image) -> Shader.Argument\nReturns an argument value defined by the provided image. When passed to an MSL function it will convert to a texture2d<half> value. Currently only one image parameter is supported per Shader instance."
    },
    {
        "title": "updateCache(_:subviews:)",
        "url": "https://developer.apple.com/documentation/swiftui/layout/updatecache(_:subviews:)-75zac",
        "html": "Discussion\n\nIf you don\u2019t implement the updateCache(_:subviews:) method in your custom layout, the protocol uses this default implementation instead, which calls makeCache(subviews:)."
    },
    {
        "title": "spacing(subviews:cache:)",
        "url": "https://developer.apple.com/documentation/swiftui/layout/spacing(subviews:cache:)-1z0gt",
        "html": "Discussion\n\nIf you don\u2019t implement the spacing(subviews:cache:) method in your custom layout, the protocol uses this default implementation instead, which returns the union of the spacing preferences of all the layout\u2019s subviews."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/edge3d/set/init(_:)-6br5p",
        "html": "See Also\nCreating an edge set\ninit(Edge)\nBeta"
    },
    {
        "title": "Color.RGBColorSpace.sRGBLinear",
        "url": "https://developer.apple.com/documentation/swiftui/color/rgbcolorspace/srgblinear",
        "html": "Discussion\n\nThis color space has the same colorimetry as Color.RGBColorSpace.sRGB, but uses a linear transfer function.\n\nStandard sRGB color spaces clamp the red, green, and blue components of a color to a range of 0 to 1, but SwiftUI colors use an extended sRGB color space, so you can use component values outside that range.\n\nSee Also\nGetting color spaces\ncase sRGB\nThe extended red, green, blue (sRGB) color space.\ncase displayP3\nThe Display P3 color space."
    },
    {
        "title": "transferRepresentation",
        "url": "https://developer.apple.com/documentation/swiftui/color/transferrepresentation",
        "html": "Discussion\n\nAnother group of colors\u2013standard colors, like Color.mint, and semantic colors, like Color.accentColor\u2013are rendered on screen differently depending on the current Environment. For transferring, they are resolved against the default environment and might produce a slightly different result at the destination if the source of drag or copy uses a non-default environment."
    },
    {
        "title": "explicitAlignment(of:in:proposal:subviews:cache:)",
        "url": "https://developer.apple.com/documentation/swiftui/layout/explicitalignment(of:in:proposal:subviews:cache:)-8cl0p",
        "html": "Discussion\n\nIf you don\u2019t implement the explicitAlignment(of:in:proposal:subviews:cache:) method in your custom layout, the protocol uses this default implementation instead, which merges the guides of all the subviews."
    },
    {
        "title": "explicitAlignment(of:in:proposal:subviews:cache:)",
        "url": "https://developer.apple.com/documentation/swiftui/layout/explicitalignment(of:in:proposal:subviews:cache:)-755bz",
        "html": "Discussion\n\nIf you don\u2019t implement the explicitAlignment(of:in:proposal:subviews:cache:) method in your custom layout, the protocol uses this default implementation instead, which merges the guides of all the subviews."
    },
    {
        "title": "projectionTransform(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/filter/projectiontransform(_:)",
        "html": "Parameters\nmatrix\n\nA projection transform to apply to the rasterized form of graphics primitives.\n\nReturn Value\n\nA filter that applies a transform."
    },
    {
        "title": "colorShader(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/filter/colorshader(_:)",
        "html": "Parameters\nshader\n\nThe shader to apply to self as a color filter.\n\nReturn Value\n\nA filter that applies the shader as a color filter.\n\nDiscussion\n\nFor a shader function to act as a color filter it must have a function signature matching:\n\n[[ stitchable ]] half4 name(float2 position, half4 color, args...)\n\n\nwhere position is the user-space coordinates of the pixel applied to the shader and color its source color, as a pre-multiplied color in the destination color space. args... should be compatible with the uniform arguments bound to shader. The function should return the modified color value.\n\nSee Also\nUsing a custom Metal shader\nstatic func distortionShader(Shader, maxSampleOffset: CGSize) -> GraphicsContext.Filter\nReturns a filter that applies shader as a geometric distortion effect on the location of each pixel.\nstatic func layerShader(Shader, maxSampleOffset: CGSize) -> GraphicsContext.Filter\nReturns a filter that applies shader to the contents of the source layer."
    },
    {
        "title": "layerShader(_:maxSampleOffset:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/filter/layershader(_:maxsampleoffset:)",
        "html": "Parameters\nshader\n\nThe shader to apply as a layer effect.\n\nmaxSampleOffset\n\nIf the shader function samples from the layer at locations not equal to the destination position, this value must specify the maximum sampling distance in each axis, for all source pixels.\n\nReturn Value\n\nA filter applies the shader as a layer effect.\n\nDiscussion\n\nFor a shader function to act as a layer effect it must have a function signature matching:\n\n[[ stitchable ]] half4 name(float2 position,\n  SwiftUI::Layer layer, args...)\n\n\nwhere position is the user-space coordinates of the destination pixel applied to the shader, and layer is a rasterized subregion of the source layer. args... should be compatible with the uniform arguments bound to shader.\n\nThe SwiftUI::Layer type is defined in the <SwiftUI/SwiftUI.h> header file. It exports a single sample() function that returns a linearly-filtered pixel value from a position in the source content, as a premultiplied RGBA pixel value:\n\nnamespace SwiftUI {\n  struct Layer {\n    half4 sample(float2 position) const;\n  };\n};\n\n\nThe function should return the color mapping to the destination pixel, typically by sampling one or more pixels from layer at location(s) derived from position and them applying some kind of transformation to produce a new color.\n\nSee Also\nUsing a custom Metal shader\nstatic func colorShader(Shader) -> GraphicsContext.Filter\nReturns a filter that applies shader to the color of each source pixel.\nstatic func distortionShader(Shader, maxSampleOffset: CGSize) -> GraphicsContext.Filter\nReturns a filter that applies shader as a geometric distortion effect on the location of each pixel."
    },
    {
        "title": "distortionShader(_:maxSampleOffset:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/filter/distortionshader(_:maxsampleoffset:)",
        "html": "Parameters\nshader\n\nThe shader to apply as a distortion effect.\n\nmaxSampleOffset\n\nThe maximum distance in each axis between the returned source pixel position and the destination pixel position, for all source pixels.\n\nReturn Value\n\nA new filter that applies the shader as a distortion effect.\n\nDiscussion\n\nFor a shader function to act as a distortion effect it must have a function signature matching:\n\n[[ stitchable ]] float2 name(float2 position, args...)\n\n\nwhere position is the user-space coordinates of the destination pixel applied to the shader. args... should be compatible with the uniform arguments bound to shader. The function should return the user-space coordinates of the corresponding source pixel.\n\nSee Also\nUsing a custom Metal shader\nstatic func colorShader(Shader) -> GraphicsContext.Filter\nReturns a filter that applies shader to the color of each source pixel.\nstatic func layerShader(Shader, maxSampleOffset: CGSize) -> GraphicsContext.Filter\nReturns a filter that applies shader to the contents of the source layer."
    },
    {
        "title": "shadowAbove",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/shadowoptions/shadowabove",
        "html": "See Also\nGetting shadow options\nstatic var disablesGroup: GraphicsContext.ShadowOptions\nAn option that causes the filter to composite the object and its shadow separately in the current layer.\nstatic var invertsAlpha: GraphicsContext.ShadowOptions\nAn option that causes the filter to invert the alpha of the shadow.\nstatic var shadowOnly: GraphicsContext.ShadowOptions\nAn option that causes the filter to draw only the shadow, and omit the source object."
    },
    {
        "title": "grayscale(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/filter/grayscale(_:)",
        "html": "Parameters\namount\n\nAn amount that controls the effect. A value of one makes the image completely gray. A value of zero leaves the result unchanged. Other values apply a linear multiplier effect.\n\nReturn Value\n\nA filter that applies a grayscale adjustment.\n\nDiscussion\n\nThis filter is equivalent to the grayscale filter primitive defined by the Scalable Vector Graphics (SVG) specification.\n\nSee Also\nManipulating color\nstatic func saturation(Double) -> GraphicsContext.Filter\nReturns a filter that applies a saturation adjustment.\nstatic func colorInvert(Double) -> GraphicsContext.Filter\nReturns a filter that inverts the color of their results.\nstatic func colorMultiply(Color) -> GraphicsContext.Filter\nReturns a filter that multiplies each color component by the matching component of a given color.\nstatic func hueRotation(Angle) -> GraphicsContext.Filter\nReturns a filter that applies a hue rotation adjustment.\nstatic func colorMatrix(ColorMatrix) -> GraphicsContext.Filter\nReturns a filter that multiplies by a given color matrix."
    },
    {
        "title": "shadow(color:radius:x:y:blendMode:options:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/filter/shadow(color:radius:x:y:blendmode:options:)",
        "html": "Parameters\ncolor\n\nA Color that tints the shadow.\n\nradius\n\nA measure of how far the shadow extends from the edges of the content receiving the shadow.\n\nx\n\nAn amount to translate the shadow horizontally.\n\ny\n\nAn amount to translate the shadow vertically.\n\nblendMode\n\nThe GraphicsContext.BlendMode to use when blending the shadow into the background layer.\n\noptions\n\nA set of options that you can use to customize the process of adding the shadow. Use one or more of the options in GraphicsContext.ShadowOptions.\n\nReturn Value\n\nA filter that adds a shadow style.\n\nDiscussion\n\nSwiftUI produces the shadow by blurring the alpha channel of the object receiving the shadow, multiplying the result by a color, optionally translating the shadow by an amount, and then blending the resulting shadow into a new layer below the source primitive. You can customize some of these steps by adding one or more shadow options."
    },
    {
        "title": "hueRotation(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/filter/huerotation(_:)",
        "html": "Parameters\nangle\n\nThe amount by which to rotate the hue value of each pixel.\n\nReturn Value\n\nA filter that applies a hue rotation adjustment.\n\nDiscussion\n\nThis filter is equivalent to the hue-rotate filter primitive defined by the Scalable Vector Graphics (SVG) specification.\n\nSee Also\nManipulating color\nstatic func saturation(Double) -> GraphicsContext.Filter\nReturns a filter that applies a saturation adjustment.\nstatic func colorInvert(Double) -> GraphicsContext.Filter\nReturns a filter that inverts the color of their results.\nstatic func colorMultiply(Color) -> GraphicsContext.Filter\nReturns a filter that multiplies each color component by the matching component of a given color.\nstatic func grayscale(Double) -> GraphicsContext.Filter\nReturns a filter that applies a grayscale adjustment.\nstatic func colorMatrix(ColorMatrix) -> GraphicsContext.Filter\nReturns a filter that multiplies by a given color matrix."
    },
    {
        "title": "disablesGroup",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/shadowoptions/disablesgroup",
        "html": "See Also\nGetting shadow options\nstatic var invertsAlpha: GraphicsContext.ShadowOptions\nAn option that causes the filter to invert the alpha of the shadow.\nstatic var shadowAbove: GraphicsContext.ShadowOptions\nAn option that causes the filter to draw the shadow above the object, rather than below it.\nstatic var shadowOnly: GraphicsContext.ShadowOptions\nAn option that causes the filter to draw only the shadow, and omit the source object."
    },
    {
        "title": "brightness(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/filter/brightness(_:)",
        "html": "Parameters\namount\n\nAn amount to add to the pixel\u2019s color components.\n\nReturn Value\n\nA filter that applies a brightness adjustment.\n\nDiscussion\n\nThis filter is different than brightness filter primitive defined by the Scalable Vector Graphics (SVG) specification. You can obtain an effect like that filter using a grayscale(_:) color multiply. However, this filter does match the CIColorControls filter\u2019s brightness adjustment.\n\nSee Also\nChanging brightness and contrast\nstatic func contrast(Double) -> GraphicsContext.Filter\nReturns a filter that applies a contrast adjustment."
    },
    {
        "title": "saturation(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/filter/saturation(_:)",
        "html": "Parameters\namount\n\nThe amount of the saturation adjustment. A value of zero to completely desaturates each pixel, while a value of one makes no change. You can use values greater than one.\n\nReturn Value\n\nA filter that applies a saturation adjustment.\n\nDiscussion\n\nThis filter is equivalent to the saturate filter primitive defined by the Scalable Vector Graphics (SVG) specification.\n\nSee Also\nManipulating color\nstatic func colorInvert(Double) -> GraphicsContext.Filter\nReturns a filter that inverts the color of their results.\nstatic func colorMultiply(Color) -> GraphicsContext.Filter\nReturns a filter that multiplies each color component by the matching component of a given color.\nstatic func hueRotation(Angle) -> GraphicsContext.Filter\nReturns a filter that applies a hue rotation adjustment.\nstatic func grayscale(Double) -> GraphicsContext.Filter\nReturns a filter that applies a grayscale adjustment.\nstatic func colorMatrix(ColorMatrix) -> GraphicsContext.Filter\nReturns a filter that multiplies by a given color matrix."
    },
    {
        "title": "contrast(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/filter/contrast(_:)",
        "html": "Parameters\namount\n\nAn amount to adjust the contrast. A value of zero leaves the result completely gray. A value of one leaves the result unchanged. You can use values greater than one.\n\nReturn Value\n\nA filter that applies a contrast adjustment.\n\nDiscussion\n\nThis filter is equivalent to the contrast filter primitive defined by the Scalable Vector Graphics (SVG) specification.\n\nSee Also\nChanging brightness and contrast\nstatic func brightness(Double) -> GraphicsContext.Filter\nReturns a filter that applies a brightness adjustment."
    },
    {
        "title": "dash",
        "url": "https://developer.apple.com/documentation/swiftui/text/linestyle/pattern/dash",
        "html": "See Also\nGetting line style patterns\nstatic let solid: Text.LineStyle.Pattern\nDraw a solid line.\nstatic let dot: Text.LineStyle.Pattern\nDraw a line of dots.\nstatic let dashDot: Text.LineStyle.Pattern\nstatic let dashDotDot: Text.LineStyle.Pattern\nDraw a line of alternating dashes and two dots."
    },
    {
        "title": "init(_:text:onEditingChanged:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(_:text:oneditingchanged:)-6dntz",
        "html": "Parameters\ntitle\n\nThe title of the text view, describing its purpose.\n\ntext\n\nThe text to display and edit.\n\nonEditingChanged\n\nThe action to perform when the user begins editing text and after the user finishes editing text. The closure receives a Boolean value that indicates the editing status: true when the user begins editing, false when they finish.\n\nSee Also\nCreating a text field with a string\ninit(LocalizedStringKey, text: Binding<String>, onEditingChanged: (Bool) -> Void, onCommit: () -> Void)\nCreates a text field with a text label generated from a localized title string.\nAvailable when Label is Text.\nDeprecated\ninit<S>(S, text: Binding<String>, onEditingChanged: (Bool) -> Void, onCommit: () -> Void)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text.\nDeprecated\ninit<S>(S, text: Binding<String>, onCommit: () -> Void)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, text: Binding<String>, onCommit: () -> Void)\nCreates a text field with a text label generated from a localized title string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, text: Binding<String>, onEditingChanged: (Bool) -> Void)\nCreates a text field with a text label generated from a localized title string.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:text:onEditingChanged:onCommit:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(_:text:oneditingchanged:oncommit:)-6lnin",
        "html": "Deprecated\n\nUse init(_:text:prompt:) instead. Add the onSubmit(of:_:) view modifier for the onCommit behavior. Use FocusState and focused(_:equals:) for the onEditingChanged behavior.\n\nParameters\ntitleKey\n\nThe key for the localized title of the text field, describing its purpose.\n\ntext\n\nThe text to display and edit.\n\nonEditingChanged\n\nThe action to perform when the user begins editing text and after the user finishes editing text. The closure receives a Boolean value that indicates the editing status: true when the user begins editing, false when they finish.\n\nonCommit\n\nAn action to perform when the user performs an action (for example, when the user presses the Return key) while the text field has focus.\n\nSee Also\nCreating a text field with a string\ninit<S>(S, text: Binding<String>, onEditingChanged: (Bool) -> Void, onCommit: () -> Void)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text.\nDeprecated\ninit<S>(S, text: Binding<String>, onCommit: () -> Void)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, text: Binding<String>, onCommit: () -> Void)\nCreates a text field with a text label generated from a localized title string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, text: Binding<String>, onEditingChanged: (Bool) -> Void)\nCreates a text field with a text label generated from a localized title string.\nAvailable when Label is Text.\ninit<S>(S, text: Binding<String>, onEditingChanged: (Bool) -> Void)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text."
    },
    {
        "title": "Font.Leading.standard",
        "url": "https://developer.apple.com/documentation/swiftui/font/leading/standard",
        "html": "Discussion\n\nIf you modify a font to use a nonstandard line spacing like Font.Leading.tight or Font.Leading.loose, you can use this value to return to the font\u2019s default line spacing.\n\nSee Also\nGetting leading line spacing options\ncase loose\nIncreased line spacing.\ncase tight\nReduced line spacing."
    },
    {
        "title": "dot",
        "url": "https://developer.apple.com/documentation/swiftui/text/linestyle/pattern/dot",
        "html": "See Also\nGetting line style patterns\nstatic let solid: Text.LineStyle.Pattern\nDraw a solid line.\nstatic let dash: Text.LineStyle.Pattern\nDraw a line of dashes.\nstatic let dashDot: Text.LineStyle.Pattern\nstatic let dashDotDot: Text.LineStyle.Pattern\nDraw a line of alternating dashes and two dots."
    },
    {
        "title": "shading",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/resolvedimage/shading",
        "html": "Discussion\n\nThe value of this property defaults to foreground for template images, and to nil otherwise.\n\nSee Also\nGetting the image properties\nvar size: CGSize\nThe size of the image.\nlet baseline: CGFloat\nThe distance from the top of the image to its baseline."
    },
    {
        "title": "inverse",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/clipoptions/inverse",
        "html": "Discussion\n\nWhen you use this option, SwiftUI uses 1 - alpha instead of alpha for the given clip shape."
    },
    {
        "title": "opaque",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/bluroptions/opaque",
        "html": "Discussion\n\nThe filter ensure opacity by dividing each pixel by its alpha value. The result may be undefined if the input to the filter isn\u2019t also completely opaque.\n\nSee Also\nGetting blur options\nstatic var dithersResult: GraphicsContext.BlurOptions\nAn option that causes the filter to dither the result, to reduce banding."
    },
    {
        "title": "measure(in:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/resolvedtext/measure(in:)",
        "html": "Parameters\nsize\n\nThe area to place the Text view in.\n\nSee Also\nGetting the text properties\nfunc firstBaseline(in: CGSize) -> CGFloat\nGets the distance from the first line\u2019s ascender to its baseline.\nfunc lastBaseline(in: CGSize) -> CGFloat\nGets the distance from the first line\u2019s ascender to the last line\u2019s baseline.\nvar shading: GraphicsContext.Shading\nThe shading to fill uncolored text regions with."
    },
    {
        "title": "PullDownMenuButtonStyle",
        "url": "https://developer.apple.com/documentation/swiftui/pulldownmenubuttonstyle",
        "html": "Deprecated\n\nUse BorderedButtonMenuStyle instead.\n\nTopics\nCreating a pull down menu button style\ninit()\nRelationships\nConforms To\nMenuButtonStyle\nSee Also\nSupporting types\nstruct BorderlessButtonMenuButtonStyle\nA menu button style which manifests as a borderless button with no visual embelishments.\nDeprecated\nstruct BorderlessPullDownMenuButtonStyle\nA menu button style which manifests as a borderless pull-down button.\nDeprecated\nstruct DefaultMenuButtonStyle\nThe default menu button style.\nDeprecated"
    },
    {
        "title": "appendInterpolation(_:specifier:)",
        "url": "https://developer.apple.com/documentation/swiftui/localizedstringkey/stringinterpolation/appendinterpolation(_:specifier:)",
        "html": "Parameters\nvalue\n\nThe value to append.\n\nspecifier\n\nA format specifier to convert subject to a string representation, like %f for a Double, or %x to create a hexidecimal representation of a UInt32. For a list of available specifier strings, see String Format Specifers.\n\nDiscussion\n\nDon\u2019t call this method directly; it\u2019s used by the compiler when interpreting string interpolations.\n\nSee Also\nAppending to an interpolation\nfunc appendInterpolation(String)\nAppends a literal string segment to a string interpolation.\nfunc appendInterpolation(AttributedString)\nAppends an attributed string to a string interpolation.\nfunc appendInterpolation<T>(T)\nAppends a type, convertible to a string by using a default format specifier, to a string interpolation.\nfunc appendInterpolation(ClosedRange<Date>)\nAppends a date range to a string interpolation.\nfunc appendInterpolation(DateInterval)\nAppends a date interval to a string interpolation.\nfunc appendInterpolation<F>(F.FormatInput, format: F)\nAppends the formatted representation of a nonstring type supported by a corresponding format style.\nfunc appendInterpolation<Subject>(Subject, formatter: Formatter?)\nAppends an optionally-formatted instance of an Objective-C subclass to a string interpolation.\nfunc appendInterpolation<Subject>(Subject, formatter: Formatter?)\nAppends an optionally-formatted instance of a Foundation type to a string interpolation.\nfunc appendInterpolation(Date, style: Text.DateStyle)\nAppends a formatted date to a string interpolation.\nfunc appendInterpolation(Text)\nAppends the string displayed by a text view to a string interpolation.\nfunc appendInterpolation(Image)\nAppends an image to a string interpolation.\nfunc appendInterpolation(LocalizedStringResource)\nAppends the localized string resource to a string interpolation.\nfunc appendInterpolation(timerInterval: ClosedRange<Date>, pauseTime: Date?, countsDown: Bool, showsHours: Bool)\nAppends a timer interval to a string interpolation.\nfunc appendLiteral(String)\nAppends a literal string."
    },
    {
        "title": "appendInterpolation(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/localizedstringkey/stringinterpolation/appendinterpolation(_:)-5q7y3",
        "html": "Parameters\ndates\n\nThe closed range of dates to append.\n\nDiscussion\n\nDon\u2019t call this method directly; it\u2019s used by the compiler when interpreting string interpolations.\n\nSee Also\nAppending to an interpolation\nfunc appendInterpolation(String)\nAppends a literal string segment to a string interpolation.\nfunc appendInterpolation(AttributedString)\nAppends an attributed string to a string interpolation.\nfunc appendInterpolation<T>(T)\nAppends a type, convertible to a string by using a default format specifier, to a string interpolation.\nfunc appendInterpolation<T>(T, specifier: String)\nAppends a type, convertible to a string with a format specifier, to a string interpolation.\nfunc appendInterpolation(DateInterval)\nAppends a date interval to a string interpolation.\nfunc appendInterpolation<F>(F.FormatInput, format: F)\nAppends the formatted representation of a nonstring type supported by a corresponding format style.\nfunc appendInterpolation<Subject>(Subject, formatter: Formatter?)\nAppends an optionally-formatted instance of an Objective-C subclass to a string interpolation.\nfunc appendInterpolation<Subject>(Subject, formatter: Formatter?)\nAppends an optionally-formatted instance of a Foundation type to a string interpolation.\nfunc appendInterpolation(Date, style: Text.DateStyle)\nAppends a formatted date to a string interpolation.\nfunc appendInterpolation(Text)\nAppends the string displayed by a text view to a string interpolation.\nfunc appendInterpolation(Image)\nAppends an image to a string interpolation.\nfunc appendInterpolation(LocalizedStringResource)\nAppends the localized string resource to a string interpolation.\nfunc appendInterpolation(timerInterval: ClosedRange<Date>, pauseTime: Date?, countsDown: Bool, showsHours: Bool)\nAppends a timer interval to a string interpolation.\nfunc appendLiteral(String)\nAppends a literal string."
    },
    {
        "title": "darken",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.struct/darken",
        "html": "Discussion\n\nWhen you draw in this mode, source image samples that are darker than the background replace the background. Otherwise, the background image samples remain unchanged.\n\nSee Also\nDarkening\nstatic var multiply: GraphicsContext.BlendMode\nA mode that multiplies the source image samples with the background image samples.\nstatic var colorBurn: GraphicsContext.BlendMode\nA mode that darkens background image samples to reflect the source image samples.\nstatic var plusDarker: GraphicsContext.BlendMode\nA mode that adds the inverse of the color components of the source and background images, and then inverts the result, producing a darkened composite."
    },
    {
        "title": "normal",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.struct/normal",
        "html": "Discussion\n\nThis is the default blend mode."
    },
    {
        "title": "multiply",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.struct/multiply",
        "html": "Discussion\n\nDrawing in this mode results in colors that are at least as dark as either of the two contributing sample colors.\n\nSee Also\nDarkening\nstatic var darken: GraphicsContext.BlendMode\nA mode that creates composite image samples by choosing the darker samples from either the source image or the background.\nstatic var colorBurn: GraphicsContext.BlendMode\nA mode that darkens background image samples to reflect the source image samples.\nstatic var plusDarker: GraphicsContext.BlendMode\nA mode that adds the inverse of the color components of the source and background images, and then inverts the result, producing a darkened composite."
    },
    {
        "title": "xor",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.struct/xor",
        "html": "Discussion\n\nThis mode implements the equation R = S*(1 - Da) + D*(1 - Sa) where\n\nR is the composite image.\n\nS is the source image.\n\nD is the background.\n\nSa is the source image\u2019s alpha value.\n\nDa is the source background\u2019s alpha value.\n\nThis XOR mode is only nominally related to the classical bitmap XOR operation, which SwiftUI doesn\u2019t support.\n\nSee Also\nAccessing porter-duff modes\nstatic var clear: GraphicsContext.BlendMode\nA mode that clears any pixels that the source image overwrites.\nstatic var copy: GraphicsContext.BlendMode\nA mode that replaces background image samples with source image samples.\nstatic var sourceIn: GraphicsContext.BlendMode\nA mode that you use to paint the source image, including its transparency, onto the opaque parts of the background.\nstatic var sourceOut: GraphicsContext.BlendMode\nA mode that you use to paint the source image onto the transparent parts of the background, while erasing the background.\nstatic var sourceAtop: GraphicsContext.BlendMode\nA mode that you use to paint the opaque parts of the source image onto the opaque parts of the background.\nstatic var destinationOver: GraphicsContext.BlendMode\nA mode that you use to paint the source image under the background.\nstatic var destinationIn: GraphicsContext.BlendMode\nA mode that you use to erase any of the background that isn\u2019t covered by opaque source pixels.\nstatic var destinationOut: GraphicsContext.BlendMode\nA mode that you use to erase any of the background that is covered by opaque source pixels.\nstatic var destinationAtop: GraphicsContext.BlendMode\nA mode that you use to paint the source image under the background, while erasing any of the background not matched by opaque pixels from the source image."
    },
    {
        "title": "softLight",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.struct/softlight",
        "html": "Discussion\n\nIf the source image sample color is lighter than 50% gray, the background is lightened, similar to dodging. If the source image sample color is darker than 50% gray, the background is darkened, similar to burning. If the source image sample color is equal to 50% gray, the background is not changed. Image samples that are equal to pure black or pure white produce darker or lighter areas, but do not result in pure black or white. The overall effect is similar to what you\u2019d achieve by shining a diffuse spotlight on the source image. Use this to add highlights to a scene.\n\nSee Also\nAdding contrast\nstatic var overlay: GraphicsContext.BlendMode\nA mode that either multiplies or screens the source image samples with the background image samples, depending on the background color.\nstatic var hardLight: GraphicsContext.BlendMode\nA mode that either multiplies or screens colors, depending on the source image sample color."
    },
    {
        "title": "difference",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.struct/difference",
        "html": "Discussion\n\nSource image sample values that are black produce no change; white inverts the background color values.\n\nSee Also\nInverting\nstatic var exclusion: GraphicsContext.BlendMode\nA mode that produces an effect similar to that produced by the difference blend mode, but with lower contrast."
    },
    {
        "title": "screen",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.struct/screen",
        "html": "Discussion\n\nDrawing in this mode results in colors that are at least as light as either of the two contributing sample colors.\n\nSee Also\nLightening\nstatic var lighten: GraphicsContext.BlendMode\nA mode that creates composite image samples by choosing the lighter samples from either the source image or the background.\nstatic var colorDodge: GraphicsContext.BlendMode\nA mode that brightens the background image samples to reflect the source image samples.\nstatic var plusLighter: GraphicsContext.BlendMode\nA mode that adds the components of the source and background images, resulting in a lightened composite."
    },
    {
        "title": "luminosity",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.struct/luminosity",
        "html": "Discussion\n\nThis mode creates an effect that is inverse to the effect created by the color mode.\n\nSee Also\nMixing color components\nstatic var hue: GraphicsContext.BlendMode\nA mode that uses the luminance and saturation values of the background with the hue of the source image.\nstatic var saturation: GraphicsContext.BlendMode\nA mode that uses the luminance and hue values of the background with the saturation of the source image.\nstatic var color: GraphicsContext.BlendMode\nA mode that uses the luminance values of the background with the hue and saturation values of the source image."
    },
    {
        "title": "sourceAtop",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.struct/sourceatop",
        "html": "Discussion\n\nThis mode implements the equation R = S*Da + D*(1 - Sa) where\n\nR is the composite image.\n\nS is the source image.\n\nD is the background.\n\nSa is the source image\u2019s alpha value.\n\nDa is the source background\u2019s alpha value.\n\nSee Also\nAccessing porter-duff modes\nstatic var clear: GraphicsContext.BlendMode\nA mode that clears any pixels that the source image overwrites.\nstatic var copy: GraphicsContext.BlendMode\nA mode that replaces background image samples with source image samples.\nstatic var sourceIn: GraphicsContext.BlendMode\nA mode that you use to paint the source image, including its transparency, onto the opaque parts of the background.\nstatic var sourceOut: GraphicsContext.BlendMode\nA mode that you use to paint the source image onto the transparent parts of the background, while erasing the background.\nstatic var destinationOver: GraphicsContext.BlendMode\nA mode that you use to paint the source image under the background.\nstatic var destinationIn: GraphicsContext.BlendMode\nA mode that you use to erase any of the background that isn\u2019t covered by opaque source pixels.\nstatic var destinationOut: GraphicsContext.BlendMode\nA mode that you use to erase any of the background that is covered by opaque source pixels.\nstatic var destinationAtop: GraphicsContext.BlendMode\nA mode that you use to paint the source image under the background, while erasing any of the background not matched by opaque pixels from the source image.\nstatic var xor: GraphicsContext.BlendMode\nA mode that you use to clear pixels where both the source and background images are opaque."
    },
    {
        "title": "plusDarker",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.struct/plusdarker",
        "html": "Discussion\n\nThis mode implements the equation R = MAX(0, 1 - ((1 - D) + (1 - S))) where\n\nR is the composite image.\n\nS is the source image.\n\nD is the background.\n\nSee Also\nDarkening\nstatic var darken: GraphicsContext.BlendMode\nA mode that creates composite image samples by choosing the darker samples from either the source image or the background.\nstatic var multiply: GraphicsContext.BlendMode\nA mode that multiplies the source image samples with the background image samples.\nstatic var colorBurn: GraphicsContext.BlendMode\nA mode that darkens background image samples to reflect the source image samples."
    },
    {
        "title": "sourceOut",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.struct/sourceout",
        "html": "Discussion\n\nThis mode implements the equation R = S*(1 - Da) where\n\nR is the composite image.\n\nS is the source image.\n\nDa is the source background\u2019s alpha value.\n\nSee Also\nAccessing porter-duff modes\nstatic var clear: GraphicsContext.BlendMode\nA mode that clears any pixels that the source image overwrites.\nstatic var copy: GraphicsContext.BlendMode\nA mode that replaces background image samples with source image samples.\nstatic var sourceIn: GraphicsContext.BlendMode\nA mode that you use to paint the source image, including its transparency, onto the opaque parts of the background.\nstatic var sourceAtop: GraphicsContext.BlendMode\nA mode that you use to paint the opaque parts of the source image onto the opaque parts of the background.\nstatic var destinationOver: GraphicsContext.BlendMode\nA mode that you use to paint the source image under the background.\nstatic var destinationIn: GraphicsContext.BlendMode\nA mode that you use to erase any of the background that isn\u2019t covered by opaque source pixels.\nstatic var destinationOut: GraphicsContext.BlendMode\nA mode that you use to erase any of the background that is covered by opaque source pixels.\nstatic var destinationAtop: GraphicsContext.BlendMode\nA mode that you use to paint the source image under the background, while erasing any of the background not matched by opaque pixels from the source image.\nstatic var xor: GraphicsContext.BlendMode\nA mode that you use to clear pixels where both the source and background images are opaque."
    },
    {
        "title": "colorDodge",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.struct/colordodge",
        "html": "Discussion\n\nSource image sample values that specify black do not produce a change.\n\nSee Also\nLightening\nstatic var lighten: GraphicsContext.BlendMode\nA mode that creates composite image samples by choosing the lighter samples from either the source image or the background.\nstatic var screen: GraphicsContext.BlendMode\nA mode that multiplies the inverse of the source image samples with the inverse of the background image samples.\nstatic var plusLighter: GraphicsContext.BlendMode\nA mode that adds the components of the source and background images, resulting in a lightened composite."
    },
    {
        "title": "overlay",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.struct/overlay",
        "html": "Discussion\n\nDrawing in this mode overlays the existing image samples while preserving the highlights and shadows of the background. The background color mixes with the source image to reflect the lightness or darkness of the background.\n\nSee Also\nAdding contrast\nstatic var softLight: GraphicsContext.BlendMode\nA mode that either darkens or lightens colors, depending on the source image sample color.\nstatic var hardLight: GraphicsContext.BlendMode\nA mode that either multiplies or screens colors, depending on the source image sample color."
    },
    {
        "title": "sourceIn",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.struct/sourcein",
        "html": "Discussion\n\nThis mode implements the equation R = S*Da where\n\nR is the composite image.\n\nS is the source image.\n\nDa is the source background\u2019s alpha value.\n\nSee Also\nAccessing porter-duff modes\nstatic var clear: GraphicsContext.BlendMode\nA mode that clears any pixels that the source image overwrites.\nstatic var copy: GraphicsContext.BlendMode\nA mode that replaces background image samples with source image samples.\nstatic var sourceOut: GraphicsContext.BlendMode\nA mode that you use to paint the source image onto the transparent parts of the background, while erasing the background.\nstatic var sourceAtop: GraphicsContext.BlendMode\nA mode that you use to paint the opaque parts of the source image onto the opaque parts of the background.\nstatic var destinationOver: GraphicsContext.BlendMode\nA mode that you use to paint the source image under the background.\nstatic var destinationIn: GraphicsContext.BlendMode\nA mode that you use to erase any of the background that isn\u2019t covered by opaque source pixels.\nstatic var destinationOut: GraphicsContext.BlendMode\nA mode that you use to erase any of the background that is covered by opaque source pixels.\nstatic var destinationAtop: GraphicsContext.BlendMode\nA mode that you use to paint the source image under the background, while erasing any of the background not matched by opaque pixels from the source image.\nstatic var xor: GraphicsContext.BlendMode\nA mode that you use to clear pixels where both the source and background images are opaque."
    },
    {
        "title": "clear",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.struct/clear",
        "html": "Discussion\n\nWith this mode, you can use the source image like an eraser.\n\nThis mode implements the equation R = 0 where R is the composite image.\n\nSee Also\nAccessing porter-duff modes\nstatic var copy: GraphicsContext.BlendMode\nA mode that replaces background image samples with source image samples.\nstatic var sourceIn: GraphicsContext.BlendMode\nA mode that you use to paint the source image, including its transparency, onto the opaque parts of the background.\nstatic var sourceOut: GraphicsContext.BlendMode\nA mode that you use to paint the source image onto the transparent parts of the background, while erasing the background.\nstatic var sourceAtop: GraphicsContext.BlendMode\nA mode that you use to paint the opaque parts of the source image onto the opaque parts of the background.\nstatic var destinationOver: GraphicsContext.BlendMode\nA mode that you use to paint the source image under the background.\nstatic var destinationIn: GraphicsContext.BlendMode\nA mode that you use to erase any of the background that isn\u2019t covered by opaque source pixels.\nstatic var destinationOut: GraphicsContext.BlendMode\nA mode that you use to erase any of the background that is covered by opaque source pixels.\nstatic var destinationAtop: GraphicsContext.BlendMode\nA mode that you use to paint the source image under the background, while erasing any of the background not matched by opaque pixels from the source image.\nstatic var xor: GraphicsContext.BlendMode\nA mode that you use to clear pixels where both the source and background images are opaque."
    },
    {
        "title": "hue",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.struct/hue",
        "html": "See Also\nMixing color components\nstatic var saturation: GraphicsContext.BlendMode\nA mode that uses the luminance and hue values of the background with the saturation of the source image.\nstatic var color: GraphicsContext.BlendMode\nA mode that uses the luminance values of the background with the hue and saturation values of the source image.\nstatic var luminosity: GraphicsContext.BlendMode\nA mode that uses the hue and saturation of the background with the luminance of the source image."
    },
    {
        "title": "saturation",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.struct/saturation",
        "html": "Discussion\n\nAreas of the background that have no saturation \u2014 namely, pure gray areas \u2014 don\u2019t produce a change.\n\nSee Also\nMixing color components\nstatic var hue: GraphicsContext.BlendMode\nA mode that uses the luminance and saturation values of the background with the hue of the source image.\nstatic var color: GraphicsContext.BlendMode\nA mode that uses the luminance values of the background with the hue and saturation values of the source image.\nstatic var luminosity: GraphicsContext.BlendMode\nA mode that uses the hue and saturation of the background with the luminance of the source image."
    },
    {
        "title": "exclusion",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.struct/exclusion",
        "html": "Discussion\n\nSource image sample values that are black don\u2019t produce a change; white inverts the background color values.\n\nSee Also\nInverting\nstatic var difference: GraphicsContext.BlendMode\nA mode that subtracts the brighter of the source image sample color or the background image sample color from the other."
    },
    {
        "title": "init(image:sourceRect:scale:)",
        "url": "https://developer.apple.com/documentation/swiftui/imagepaint/init(image:sourcerect:scale:)",
        "html": "Parameters\nimage\n\nThe image to be drawn.\n\nsourceRect\n\nA unit-space rectangle defining how much of the source image to draw. The results are undefined if sourceRect selects areas outside the [0, 1] range in either axis.\n\nscale\n\nA scale factor applied to the image during rendering."
    },
    {
        "title": "scale",
        "url": "https://developer.apple.com/documentation/swiftui/imagepaint/scale",
        "html": "See Also\nConfiguring the image paint style\nvar image: Image\nThe image to be drawn.\nvar sourceRect: CGRect\nA unit-space rectangle defining how much of the source image to draw."
    },
    {
        "title": "vertical",
        "url": "https://developer.apple.com/documentation/swiftui/axis/set/vertical",
        "html": "See Also\nGetting axis sets\nstatic let horizontal: Axis.Set"
    },
    {
        "title": "horizontal",
        "url": "https://developer.apple.com/documentation/swiftui/axis/set/horizontal",
        "html": "See Also\nGetting axis sets\nstatic let vertical: Axis.Set"
    },
    {
        "title": "color(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/shading/color(_:)",
        "html": "Parameters\ncolor\n\nA Color instance that defines the color of the shading.\n\nReturn Value\n\nA shading instance filled with a color.\n\nSee Also\nColors\nstatic func color(Color.RGBColorSpace, red: Double, green: Double, blue: Double, opacity: Double) -> GraphicsContext.Shading\nReturns a shading instance that fills with a color in the given color space.\nstatic func color(Color.RGBColorSpace, white: Double, opacity: Double) -> GraphicsContext.Shading\nReturns a shading instance that fills with a monochrome color in the given color space."
    },
    {
        "title": "float(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/shader/argument/float(_:)",
        "html": "See Also\nCreating argument values\nstatic var boundingRect: Shader.Argument\nReturns an argument value representing the bounding rect of the shape or view that the shader is attached to, as float4(x, y, width, height). This value is undefined for shaders that do not have a natural bounding rect (e.g. filter effects drawn into GraphicsContext).\nstatic func color(Color) -> Shader.Argument\nReturns an argument value representing color. When passed to a MSL function it will convert to a half4 value, as a premultiplied color in the target color space.\nstatic func colorArray([Color]) -> Shader.Argument\nReturns an argument value defined by the provided array of color values. When passed to an MSL function it will convert to a device const half4 *ptr, int count pair of parameters.\nstatic func data(Data) -> Shader.Argument\nReturns an argument value defined by the provided data value. When passed to an MSL function it will convert to a device const void *ptr, int size_in_bytes pair of parameters.\nstatic func float2(CGVector) -> Shader.Argument\nReturns an argument value representing the MSL value float2(vector.dx, vector.dy).\nstatic func float2(CGPoint) -> Shader.Argument\nReturns an argument value representing the MSL value float2(point.x, point.y).\nstatic func float2(CGSize) -> Shader.Argument\nReturns an argument value representing the MSL value float2(size.width, size.height).\nstatic func float2<T>(T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float2(x, y).\nstatic func float3<T>(T, T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float3(x, y, z).\nstatic func float4<T>(T, T, T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float4(x, y, z, w).\nstatic func floatArray([Float]) -> Shader.Argument\nReturns an argument value defined by the provided array of floating point numbers. When passed to an MSL function it will convert to a device const float *ptr, int count pair of parameters.\nstatic func image(Image) -> Shader.Argument\nReturns an argument value defined by the provided image. When passed to an MSL function it will convert to a texture2d<half> value. Currently only one image parameter is supported per Shader instance."
    },
    {
        "title": "leading",
        "url": "https://developer.apple.com/documentation/swiftui/edge/set/leading",
        "html": "See Also\nGetting edge sets\nstatic let all: Edge.Set\nstatic let top: Edge.Set\nstatic let bottom: Edge.Set\nstatic let trailing: Edge.Set\nstatic let horizontal: Edge.Set\nstatic let vertical: Edge.Set"
    },
    {
        "title": "Font.TextStyle.footnote",
        "url": "https://developer.apple.com/documentation/swiftui/font/textstyle/footnote",
        "html": "See Also\nGetting font text styles\ncase extraLargeTitle2\nThe font used for second level extra large titles.\nBeta\ncase extraLargeTitle\nThe font used for extra large titles.\nBeta\ncase largeTitle\nThe font style for large titles.\ncase title\nThe font used for first level hierarchical headings.\ncase title2\nThe font used for second level hierarchical headings.\ncase title3\nThe font used for third level hierarchical headings.\ncase headline\nThe font used for headings.\ncase subheadline\nThe font used for subheadings.\ncase body\nThe font used for body text.\ncase callout\nThe font used for callouts.\ncase caption\nThe font used for standard captions.\ncase caption2\nThe font used for alternate captions."
    },
    {
        "title": "Font.TextStyle.subheadline",
        "url": "https://developer.apple.com/documentation/swiftui/font/textstyle/subheadline",
        "html": "See Also\nGetting font text styles\ncase extraLargeTitle2\nThe font used for second level extra large titles.\nBeta\ncase extraLargeTitle\nThe font used for extra large titles.\nBeta\ncase largeTitle\nThe font style for large titles.\ncase title\nThe font used for first level hierarchical headings.\ncase title2\nThe font used for second level hierarchical headings.\ncase title3\nThe font used for third level hierarchical headings.\ncase headline\nThe font used for headings.\ncase body\nThe font used for body text.\ncase callout\nThe font used for callouts.\ncase caption\nThe font used for standard captions.\ncase caption2\nThe font used for alternate captions.\ncase footnote\nThe font used in footnotes."
    },
    {
        "title": "containerBackground(_:for:)",
        "url": "https://developer.apple.com/documentation/SwiftUI/View/containerBackground(_:for:)",
        "html": "Discussion\n\nThe following example uses a LinearGradient as a background:\n\nstruct ContentView: View {\n    var body: some View {\n        NavigationStack {\n            List {\n                NavigationLink(\"Blue\") {\n                    Text(\"Blue\")\n                    .containerBackground(.blue.gradient, for: .navigation)\n                }\n                NavigationLink(\"Red\") {\n                    Text(\"Red\")\n                    .containerBackground(.red.gradient, for: .navigation)\n                }\n            }\n        }\n    }\n}\n\n\nThe .containerBackground(_:for:) modifier differs from the background(_:ignoresSafeAreaEdges:) modifier by automatically filling an entire parent container. ContainerBackgroundPlacement describes the available containers.\n\nParameters\n\nstyle: The shape style to use as the container background.\n\ncontainer: The container that will use the background.\n\nSee Also\nLayering views\nAdding a background to your view\nCompose a background behind your view and extend it beyond the safe area insets.\nstruct ZStack\nA view that overlays its subviews, aligning them in both axes.\nfunc zIndex(Double) -> some View\nControls the display order of overlapping views.\nfunc background<V>(alignment: Alignment, content: () -> V) -> some View\nLayers the views that you specify behind this view.\nfunc background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View\nSets the view\u2019s background to a style.\nfunc background(ignoresSafeAreaEdges: Edge.Set) -> some View\nSets the view\u2019s background to the default background style.\nfunc background<S, T>(S, in: T, fillStyle: FillStyle) -> some View\nSets the view\u2019s background to an insettable shape filled with a style.\nfunc background<S>(in: S, fillStyle: FillStyle) -> some View\nSets the view\u2019s background to an insettable shape filled with the default background style.\nfunc background<S, T>(S, in: T, fillStyle: FillStyle) -> some View\nSets the view\u2019s background to a shape filled with a style.\nfunc background<S>(in: S, fillStyle: FillStyle) -> some View\nSets the view\u2019s background to a shape filled with the default background style.\nfunc overlay<V>(alignment: Alignment, content: () -> V) -> some View\nLayers the views that you specify in front of this view.\nfunc overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View\nLayers the specified style in front of this view.\nfunc overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View\nLayers a shape that you specify in front of this view.\nvar backgroundMaterial: Material?\nThe material underneath the current view.\nfunc containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View\nSets the container background of the enclosing container using a view.\nstruct ContainerBackgroundPlacement\nThe placement of a container background."
    },
    {
        "title": "Font.Leading.loose",
        "url": "https://developer.apple.com/documentation/swiftui/font/leading/loose",
        "html": "Discussion\n\nThis value typically increases line spacing by 1 point for watchOS and 2 points on other platforms.\n\nSee Also\nGetting leading line spacing options\ncase standard\nThe font\u2019s default line spacing.\ncase tight\nReduced line spacing."
    },
    {
        "title": "Font.TextStyle.title2",
        "url": "https://developer.apple.com/documentation/swiftui/font/textstyle/title2",
        "html": "See Also\nGetting font text styles\ncase extraLargeTitle2\nThe font used for second level extra large titles.\nBeta\ncase extraLargeTitle\nThe font used for extra large titles.\nBeta\ncase largeTitle\nThe font style for large titles.\ncase title\nThe font used for first level hierarchical headings.\ncase title3\nThe font used for third level hierarchical headings.\ncase headline\nThe font used for headings.\ncase subheadline\nThe font used for subheadings.\ncase body\nThe font used for body text.\ncase callout\nThe font used for callouts.\ncase caption\nThe font used for standard captions.\ncase caption2\nThe font used for alternate captions.\ncase footnote\nThe font used in footnotes."
    },
    {
        "title": "Font.TextStyle.title",
        "url": "https://developer.apple.com/documentation/swiftui/font/textstyle/title",
        "html": "See Also\nGetting font text styles\ncase extraLargeTitle2\nThe font used for second level extra large titles.\nBeta\ncase extraLargeTitle\nThe font used for extra large titles.\nBeta\ncase largeTitle\nThe font style for large titles.\ncase title2\nThe font used for second level hierarchical headings.\ncase title3\nThe font used for third level hierarchical headings.\ncase headline\nThe font used for headings.\ncase subheadline\nThe font used for subheadings.\ncase body\nThe font used for body text.\ncase callout\nThe font used for callouts.\ncase caption\nThe font used for standard captions.\ncase caption2\nThe font used for alternate captions.\ncase footnote\nThe font used in footnotes."
    },
    {
        "title": "appendInterpolation(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/localizedstringkey/stringinterpolation/appendinterpolation(_:)-60fbr",
        "html": "Parameters\nattributedString\n\nThe attributed string to append.\n\nDiscussion\n\nDon\u2019t call this method directly; it\u2019s used by the compiler when interpreting string interpolations.\n\nThe following example shows how to use a string interpolation to format an AttributedString and append it to static text. The resulting interpolation implicitly creates a LocalizedStringKey, which a Text view uses to provide its content.\n\nstruct ContentView: View {\n\n\n    var nextDate: AttributedString {\n        var result = Calendar.current\n            .nextWeekend(startingAfter: Date.now)!\n            .start\n            .formatted(\n                .dateTime\n                .month(.wide)\n                .day()\n                .attributed\n            )\n        result.backgroundColor = .green\n        result.foregroundColor = .white\n        return result\n    }\n\n\n    var body: some View {\n        Text(\"Our next catch-up is on \\(nextDate)!\")\n    }\n}\n\n\nFor this example, assume that the app runs on a device set to a Russian locale, and has the following entry in a Russian-localized Localizable.strings file:\n\n\"Our next catch-up is on %@!\" = \"\u041d\u0430\u0448\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0432\u0441\u0442\u0440\u0435\u0447\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442\u0441\u044f %@!\";\n\n\nThe attributed string nextDate replaces the format specifier %@, maintaining its color and date-formatting attributes, when the Text view renders its contents:\n\nSee Also\nAppending to an interpolation\nfunc appendInterpolation(String)\nAppends a literal string segment to a string interpolation.\nfunc appendInterpolation<T>(T)\nAppends a type, convertible to a string by using a default format specifier, to a string interpolation.\nfunc appendInterpolation<T>(T, specifier: String)\nAppends a type, convertible to a string with a format specifier, to a string interpolation.\nfunc appendInterpolation(ClosedRange<Date>)\nAppends a date range to a string interpolation.\nfunc appendInterpolation(DateInterval)\nAppends a date interval to a string interpolation.\nfunc appendInterpolation<F>(F.FormatInput, format: F)\nAppends the formatted representation of a nonstring type supported by a corresponding format style.\nfunc appendInterpolation<Subject>(Subject, formatter: Formatter?)\nAppends an optionally-formatted instance of an Objective-C subclass to a string interpolation.\nfunc appendInterpolation<Subject>(Subject, formatter: Formatter?)\nAppends an optionally-formatted instance of a Foundation type to a string interpolation.\nfunc appendInterpolation(Date, style: Text.DateStyle)\nAppends a formatted date to a string interpolation.\nfunc appendInterpolation(Text)\nAppends the string displayed by a text view to a string interpolation.\nfunc appendInterpolation(Image)\nAppends an image to a string interpolation.\nfunc appendInterpolation(LocalizedStringResource)\nAppends the localized string resource to a string interpolation.\nfunc appendInterpolation(timerInterval: ClosedRange<Date>, pauseTime: Date?, countsDown: Bool, showsHours: Bool)\nAppends a timer interval to a string interpolation.\nfunc appendLiteral(String)\nAppends a literal string."
    },
    {
        "title": "Font.TextStyle.caption",
        "url": "https://developer.apple.com/documentation/swiftui/font/textstyle/caption",
        "html": "See Also\nGetting font text styles\ncase extraLargeTitle2\nThe font used for second level extra large titles.\nBeta\ncase extraLargeTitle\nThe font used for extra large titles.\nBeta\ncase largeTitle\nThe font style for large titles.\ncase title\nThe font used for first level hierarchical headings.\ncase title2\nThe font used for second level hierarchical headings.\ncase title3\nThe font used for third level hierarchical headings.\ncase headline\nThe font used for headings.\ncase subheadline\nThe font used for subheadings.\ncase body\nThe font used for body text.\ncase callout\nThe font used for callouts.\ncase caption2\nThe font used for alternate captions.\ncase footnote\nThe font used in footnotes."
    },
    {
        "title": "ultraLight",
        "url": "https://developer.apple.com/documentation/swiftui/font/weight/ultralight",
        "html": "See Also\nGetting font weights\nstatic let black: Font.Weight\nstatic let bold: Font.Weight\nstatic let heavy: Font.Weight\nstatic let light: Font.Weight\nstatic let medium: Font.Weight\nstatic let regular: Font.Weight\nstatic let semibold: Font.Weight\nstatic let thin: Font.Weight"
    },
    {
        "title": "Font.TextStyle.headline",
        "url": "https://developer.apple.com/documentation/swiftui/font/textstyle/headline",
        "html": "See Also\nGetting font text styles\ncase extraLargeTitle2\nThe font used for second level extra large titles.\nBeta\ncase extraLargeTitle\nThe font used for extra large titles.\nBeta\ncase largeTitle\nThe font style for large titles.\ncase title\nThe font used for first level hierarchical headings.\ncase title2\nThe font used for second level hierarchical headings.\ncase title3\nThe font used for third level hierarchical headings.\ncase subheadline\nThe font used for subheadings.\ncase body\nThe font used for body text.\ncase callout\nThe font used for callouts.\ncase caption\nThe font used for standard captions.\ncase caption2\nThe font used for alternate captions.\ncase footnote\nThe font used in footnotes."
    },
    {
        "title": "Font.TextStyle.body",
        "url": "https://developer.apple.com/documentation/swiftui/font/textstyle/body",
        "html": "See Also\nGetting font text styles\ncase extraLargeTitle2\nThe font used for second level extra large titles.\nBeta\ncase extraLargeTitle\nThe font used for extra large titles.\nBeta\ncase largeTitle\nThe font style for large titles.\ncase title\nThe font used for first level hierarchical headings.\ncase title2\nThe font used for second level hierarchical headings.\ncase title3\nThe font used for third level hierarchical headings.\ncase headline\nThe font used for headings.\ncase subheadline\nThe font used for subheadings.\ncase callout\nThe font used for callouts.\ncase caption\nThe font used for standard captions.\ncase caption2\nThe font used for alternate captions.\ncase footnote\nThe font used in footnotes."
    },
    {
        "title": "Font.TextStyle.callout",
        "url": "https://developer.apple.com/documentation/swiftui/font/textstyle/callout",
        "html": "See Also\nGetting font text styles\ncase extraLargeTitle2\nThe font used for second level extra large titles.\nBeta\ncase extraLargeTitle\nThe font used for extra large titles.\nBeta\ncase largeTitle\nThe font style for large titles.\ncase title\nThe font used for first level hierarchical headings.\ncase title2\nThe font used for second level hierarchical headings.\ncase title3\nThe font used for third level hierarchical headings.\ncase headline\nThe font used for headings.\ncase subheadline\nThe font used for subheadings.\ncase body\nThe font used for body text.\ncase caption\nThe font used for standard captions.\ncase caption2\nThe font used for alternate captions.\ncase footnote\nThe font used in footnotes."
    },
    {
        "title": "Font.TextStyle.caption2",
        "url": "https://developer.apple.com/documentation/swiftui/font/textstyle/caption2",
        "html": "See Also\nGetting font text styles\ncase extraLargeTitle2\nThe font used for second level extra large titles.\nBeta\ncase extraLargeTitle\nThe font used for extra large titles.\nBeta\ncase largeTitle\nThe font style for large titles.\ncase title\nThe font used for first level hierarchical headings.\ncase title2\nThe font used for second level hierarchical headings.\ncase title3\nThe font used for third level hierarchical headings.\ncase headline\nThe font used for headings.\ncase subheadline\nThe font used for subheadings.\ncase body\nThe font used for body text.\ncase callout\nThe font used for callouts.\ncase caption\nThe font used for standard captions.\ncase footnote\nThe font used in footnotes."
    },
    {
        "title": "appendInterpolation(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/localizedstringkey/stringinterpolation/appendinterpolation(_:)-4lyw3",
        "html": "Parameters\nstring\n\nThe literal string to append.\n\nDiscussion\n\nDon\u2019t call this method directly; it\u2019s used by the compiler when interpreting string interpolations.\n\nSee Also\nAppending to an interpolation\nfunc appendInterpolation(AttributedString)\nAppends an attributed string to a string interpolation.\nfunc appendInterpolation<T>(T)\nAppends a type, convertible to a string by using a default format specifier, to a string interpolation.\nfunc appendInterpolation<T>(T, specifier: String)\nAppends a type, convertible to a string with a format specifier, to a string interpolation.\nfunc appendInterpolation(ClosedRange<Date>)\nAppends a date range to a string interpolation.\nfunc appendInterpolation(DateInterval)\nAppends a date interval to a string interpolation.\nfunc appendInterpolation<F>(F.FormatInput, format: F)\nAppends the formatted representation of a nonstring type supported by a corresponding format style.\nfunc appendInterpolation<Subject>(Subject, formatter: Formatter?)\nAppends an optionally-formatted instance of an Objective-C subclass to a string interpolation.\nfunc appendInterpolation<Subject>(Subject, formatter: Formatter?)\nAppends an optionally-formatted instance of a Foundation type to a string interpolation.\nfunc appendInterpolation(Date, style: Text.DateStyle)\nAppends a formatted date to a string interpolation.\nfunc appendInterpolation(Text)\nAppends the string displayed by a text view to a string interpolation.\nfunc appendInterpolation(Image)\nAppends an image to a string interpolation.\nfunc appendInterpolation(LocalizedStringResource)\nAppends the localized string resource to a string interpolation.\nfunc appendInterpolation(timerInterval: ClosedRange<Date>, pauseTime: Date?, countsDown: Bool, showsHours: Bool)\nAppends a timer interval to a string interpolation.\nfunc appendLiteral(String)\nAppends a literal string."
    },
    {
        "title": "appendInterpolation(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/localizedstringkey/stringinterpolation/appendinterpolation(_:)-378v9",
        "html": "Parameters\nvalue\n\nA primitive type to append, such as Int, UInt32, or Double.\n\nDiscussion\n\nDon\u2019t call this method directly; it\u2019s used by the compiler when interpreting string interpolations.\n\nSee Also\nAppending to an interpolation\nfunc appendInterpolation(String)\nAppends a literal string segment to a string interpolation.\nfunc appendInterpolation(AttributedString)\nAppends an attributed string to a string interpolation.\nfunc appendInterpolation<T>(T, specifier: String)\nAppends a type, convertible to a string with a format specifier, to a string interpolation.\nfunc appendInterpolation(ClosedRange<Date>)\nAppends a date range to a string interpolation.\nfunc appendInterpolation(DateInterval)\nAppends a date interval to a string interpolation.\nfunc appendInterpolation<F>(F.FormatInput, format: F)\nAppends the formatted representation of a nonstring type supported by a corresponding format style.\nfunc appendInterpolation<Subject>(Subject, formatter: Formatter?)\nAppends an optionally-formatted instance of an Objective-C subclass to a string interpolation.\nfunc appendInterpolation<Subject>(Subject, formatter: Formatter?)\nAppends an optionally-formatted instance of a Foundation type to a string interpolation.\nfunc appendInterpolation(Date, style: Text.DateStyle)\nAppends a formatted date to a string interpolation.\nfunc appendInterpolation(Text)\nAppends the string displayed by a text view to a string interpolation.\nfunc appendInterpolation(Image)\nAppends an image to a string interpolation.\nfunc appendInterpolation(LocalizedStringResource)\nAppends the localized string resource to a string interpolation.\nfunc appendInterpolation(timerInterval: ClosedRange<Date>, pauseTime: Date?, countsDown: Bool, showsHours: Bool)\nAppends a timer interval to a string interpolation.\nfunc appendLiteral(String)\nAppends a literal string."
    },
    {
        "title": "Font.TextStyle.extraLargeTitle2",
        "url": "https://developer.apple.com/documentation/swiftui/font/textstyle/extralargetitle2",
        "html": "See Also\nGetting font text styles\ncase extraLargeTitle\nThe font used for extra large titles.\nBeta\ncase largeTitle\nThe font style for large titles.\ncase title\nThe font used for first level hierarchical headings.\ncase title2\nThe font used for second level hierarchical headings.\ncase title3\nThe font used for third level hierarchical headings.\ncase headline\nThe font used for headings.\ncase subheadline\nThe font used for subheadings.\ncase body\nThe font used for body text.\ncase callout\nThe font used for callouts.\ncase caption\nThe font used for standard captions.\ncase caption2\nThe font used for alternate captions.\ncase footnote\nThe font used in footnotes."
    },
    {
        "title": "init(from:by:)",
        "url": "https://developer.apple.com/documentation/swiftui/periodictimelineschedule/init(from:by:)",
        "html": "Parameters\nstartDate\n\nThe date on which to start the sequence.\n\ninterval\n\nThe time interval between successive sequence entries.\n\nDiscussion\n\nUse the entries(from:mode:) method to get the sequence of dates."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/fillshapestyle/init()",
        "html": "Discussion\n\nThis shape style is appropriate for items situated on top of an existing background color. It incorporates transparency to allow the background color to show through.\n\nUse the primary version of this style to fill thin or small shapes, such as the track of a slider. Use the secondary version of this style to fill medium-size shapes, such as the background of a switch. Use the tertiary version of this style to fill large shapes, such as input fields, search bars, or buttons. Use the quaternary version of this style to fill large areas that contain complex content, such as an expanded table cell."
    },
    {
        "title": "float4(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/shader/argument/float4(_:_:_:_:)",
        "html": "See Also\nCreating argument values\nstatic var boundingRect: Shader.Argument\nReturns an argument value representing the bounding rect of the shape or view that the shader is attached to, as float4(x, y, width, height). This value is undefined for shaders that do not have a natural bounding rect (e.g. filter effects drawn into GraphicsContext).\nstatic func color(Color) -> Shader.Argument\nReturns an argument value representing color. When passed to a MSL function it will convert to a half4 value, as a premultiplied color in the target color space.\nstatic func colorArray([Color]) -> Shader.Argument\nReturns an argument value defined by the provided array of color values. When passed to an MSL function it will convert to a device const half4 *ptr, int count pair of parameters.\nstatic func data(Data) -> Shader.Argument\nReturns an argument value defined by the provided data value. When passed to an MSL function it will convert to a device const void *ptr, int size_in_bytes pair of parameters.\nstatic func float<T>(T) -> Shader.Argument\nReturns an argument value representing the MSL value float(x).\nstatic func float2(CGVector) -> Shader.Argument\nReturns an argument value representing the MSL value float2(vector.dx, vector.dy).\nstatic func float2(CGPoint) -> Shader.Argument\nReturns an argument value representing the MSL value float2(point.x, point.y).\nstatic func float2(CGSize) -> Shader.Argument\nReturns an argument value representing the MSL value float2(size.width, size.height).\nstatic func float2<T>(T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float2(x, y).\nstatic func float3<T>(T, T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float3(x, y, z).\nstatic func floatArray([Float]) -> Shader.Argument\nReturns an argument value defined by the provided array of floating point numbers. When passed to an MSL function it will convert to a device const float *ptr, int count pair of parameters.\nstatic func image(Image) -> Shader.Argument\nReturns an argument value defined by the provided image. When passed to an MSL function it will convert to a texture2d<half> value. Currently only one image parameter is supported per Shader instance."
    },
    {
        "title": "GridItem.Size.adaptive(minimum:maximum:)",
        "url": "https://developer.apple.com/documentation/swiftui/griditem/size-swift.enum/adaptive(minimum:maximum:)",
        "html": "Discussion\n\nThis size case places one or more items into the space assigned to a single flexible item, using the provided bounds and spacing to decide exactly how many items fit. This approach prefers to insert as many items of the minimum size as possible but lets them increase to the maximum size.\n\nSee Also\nGetting the sizes\ncase fixed(CGFloat)\nA single item with the specified fixed size.\ncase flexible(minimum: CGFloat, maximum: CGFloat)\nA single flexible item."
    },
    {
        "title": "blur(radius:options:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/filter/blur(radius:options:)",
        "html": "Parameters\nradius\n\nThe standard deviation of the Gaussian blur.\n\noptions\n\nA set of options controlling the application of the effect.\n\nReturn Value\n\nA filter that applies Gaussian blur."
    },
    {
        "title": "baseline",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/resolvedimage/baseline",
        "html": "Discussion\n\nIf the image has no baseline, this value is equivalent to the image\u2019s height.\n\nSee Also\nGetting the image properties\nvar size: CGSize\nThe size of the image.\nvar shading: GraphicsContext.Shading?\nAn optional shading to fill the image with."
    },
    {
        "title": "dithersResult",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/bluroptions/dithersresult",
        "html": "See Also\nGetting blur options\nstatic var opaque: GraphicsContext.BlurOptions\nAn option that causes the filter to ensure the result is completely opaque."
    },
    {
        "title": "image",
        "url": "https://developer.apple.com/documentation/swiftui/imagepaint/image",
        "html": "See Also\nConfiguring the image paint style\nvar scale: CGFloat\nA scale factor applied to the image while being drawn.\nvar sourceRect: CGRect\nA unit-space rectangle defining how much of the source image to draw."
    },
    {
        "title": "sourceRect",
        "url": "https://developer.apple.com/documentation/swiftui/imagepaint/sourcerect",
        "html": "Discussion\n\nThe results are undefined if this rectangle selects areas outside the [0, 1] range in either axis.\n\nSee Also\nConfiguring the image paint style\nvar image: Image\nThe image to be drawn.\nvar scale: CGFloat\nA scale factor applied to the image while being drawn."
    },
    {
        "title": "DefaultMenuButtonStyle",
        "url": "https://developer.apple.com/documentation/swiftui/defaultmenubuttonstyle",
        "html": "Deprecated\n\nUse DefaultMenuStyle instead.\n\nTopics\nCreating a default menu button style\ninit()\nRelationships\nConforms To\nMenuButtonStyle\nSee Also\nSupporting types\nstruct BorderlessButtonMenuButtonStyle\nA menu button style which manifests as a borderless button with no visual embelishments.\nDeprecated\nstruct BorderlessPullDownMenuButtonStyle\nA menu button style which manifests as a borderless pull-down button.\nDeprecated\nstruct PullDownMenuButtonStyle\nA menu button style which manifests as a pull-down button.\nDeprecated"
    },
    {
        "title": "size",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/resolvedimage/size",
        "html": "See Also\nGetting the image properties\nlet baseline: CGFloat\nThe distance from the top of the image to its baseline.\nvar shading: GraphicsContext.Shading?\nAn optional shading to fill the image with."
    },
    {
        "title": "BorderlessButtonMenuButtonStyle",
        "url": "https://developer.apple.com/documentation/swiftui/borderlessbuttonmenubuttonstyle",
        "html": "Deprecated\n\nUse BorderlessButtonMenuStyle instead.\n\nTopics\nCreating a borderless button menu button style\ninit()\nRelationships\nConforms To\nMenuButtonStyle\nSee Also\nSupporting types\nstruct BorderlessPullDownMenuButtonStyle\nA menu button style which manifests as a borderless pull-down button.\nDeprecated\nstruct DefaultMenuButtonStyle\nThe default menu button style.\nDeprecated\nstruct PullDownMenuButtonStyle\nA menu button style which manifests as a pull-down button.\nDeprecated"
    },
    {
        "title": "GridItem.Size.flexible(minimum:maximum:)",
        "url": "https://developer.apple.com/documentation/swiftui/griditem/size-swift.enum/flexible(minimum:maximum:)",
        "html": "Discussion\n\nThe size of this item is the size of the grid with spacing and inflexible items removed, divided by the number of flexible items, clamped to the provided bounds.\n\nSee Also\nGetting the sizes\ncase adaptive(minimum: CGFloat, maximum: CGFloat)\nMultiple items in the space of a single flexible item.\ncase fixed(CGFloat)\nA single item with the specified fixed size."
    },
    {
        "title": "velocity(value:time:context:)",
        "url": "https://developer.apple.com/documentation/swiftui/customanimation/velocity(value:time:context:)-78qjv",
        "html": "Parameters\nvalue\n\nThe vector to animate towards.\n\ntime\n\nThe amount of time since the start of the animation.\n\ncontext\n\nAn instance of AnimationContext that provides access to state and the animation environment.\n\nReturn Value\n\nThe current velocity of the animation, or nil if the animation has finished.\n\nDiscussion\n\nImplement this method to provide the velocity of the animation at a given time. Should subsequent animations merge with the animation, the system preserves continuity of the velocity between animations.\n\nThe default implementation of this method returns nil.\n\nNote\n\nState and environment data is available to this method via the context parameter, but context is read-only. This behavior is different than with animate(value:time:context:) and shouldMerge(previous:value:time:context:) where context is an inout parameter, letting you change the context including state data of the animation. For more information about managing state data in a custom animation, see AnimationContext."
    },
    {
        "title": "init(_:value:formatter:onEditingChanged:onCommit:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(_:value:formatter:oneditingchanged:oncommit:)-6ab2i",
        "html": "Deprecated\n\nUse init(_:value:formatter:prompt:) instead. Add the onSubmit(of:_:) view modifier for the onCommit behavior. Use FocusState and focused(_:equals:) for the onEditingChanged behavior.\n\nParameters\ntitleKey\n\nThe key for the localized title of the text field, describing its purpose.\n\nvalue\n\nThe underlying value to be edited.\n\nformatter\n\nA formatter to use when converting between the string the user edits and the underlying value of type T. In the event that formatter is unable to perform the conversion, binding.value isn\u2019t modified.\n\nonEditingChanged\n\nThe action to perform when the user begins editing text and after the user finishes editing text. The closure receives a Boolean value that indicates the editing status: true when the user begins editing, false when they finish.\n\nonCommit\n\nAn action to perform when the user performs an action (for example, when the user presses the Return key) while the text field has focus.\n\nSee Also\nCreating a text field with a value\ninit<S, V>(S, value: Binding<V>, formatter: Formatter, onEditingChanged: (Bool) -> Void, onCommit: () -> Void)\nCreates an instance which binds over an arbitrary type, T.\nAvailable when Label is Text.\nDeprecated\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter, onCommit: () -> Void)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<S, V>(S, value: Binding<V>, formatter: Formatter, onCommit: () -> Void)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter, onEditingChanged: (Bool) -> Void)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<S, V>(S, value: Binding<V>, formatter: Formatter, onEditingChanged: (Bool) -> Void)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text."
    },
    {
        "title": "appendInterpolation(_:formatter:)",
        "url": "https://developer.apple.com/documentation/swiftui/localizedstringkey/stringinterpolation/appendinterpolation(_:formatter:)-9vdw4",
        "html": "Parameters\nsubject\n\nThe Foundation object to append.\n\nformatter\n\nA formatter to convert subject to a string representation.\n\nDiscussion\n\nDon\u2019t call this method directly; it\u2019s used by the compiler when interpreting string interpolations.\n\nSee Also\nAppending to an interpolation\nfunc appendInterpolation(String)\nAppends a literal string segment to a string interpolation.\nfunc appendInterpolation(AttributedString)\nAppends an attributed string to a string interpolation.\nfunc appendInterpolation<T>(T)\nAppends a type, convertible to a string by using a default format specifier, to a string interpolation.\nfunc appendInterpolation<T>(T, specifier: String)\nAppends a type, convertible to a string with a format specifier, to a string interpolation.\nfunc appendInterpolation(ClosedRange<Date>)\nAppends a date range to a string interpolation.\nfunc appendInterpolation(DateInterval)\nAppends a date interval to a string interpolation.\nfunc appendInterpolation<F>(F.FormatInput, format: F)\nAppends the formatted representation of a nonstring type supported by a corresponding format style.\nfunc appendInterpolation<Subject>(Subject, formatter: Formatter?)\nAppends an optionally-formatted instance of an Objective-C subclass to a string interpolation.\nfunc appendInterpolation(Date, style: Text.DateStyle)\nAppends a formatted date to a string interpolation.\nfunc appendInterpolation(Text)\nAppends the string displayed by a text view to a string interpolation.\nfunc appendInterpolation(Image)\nAppends an image to a string interpolation.\nfunc appendInterpolation(LocalizedStringResource)\nAppends the localized string resource to a string interpolation.\nfunc appendInterpolation(timerInterval: ClosedRange<Date>, pauseTime: Date?, countsDown: Bool, showsHours: Bool)\nAppends a timer interval to a string interpolation.\nfunc appendLiteral(String)\nAppends a literal string."
    },
    {
        "title": "init(_:text:onCommit:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(_:text:oncommit:)-44spu",
        "html": "Parameters\ntitleKey\n\nThe key for the localized title of the text field, describing its purpose.\n\ntext\n\nThe text to display and edit.\n\nonCommit\n\nAn action to perform when the user performs an action (for example, when the user presses the Return key) while the text field has focus.\n\nSee Also\nCreating a text field with a string\ninit(LocalizedStringKey, text: Binding<String>, onEditingChanged: (Bool) -> Void, onCommit: () -> Void)\nCreates a text field with a text label generated from a localized title string.\nAvailable when Label is Text.\nDeprecated\ninit<S>(S, text: Binding<String>, onEditingChanged: (Bool) -> Void, onCommit: () -> Void)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text.\nDeprecated\ninit<S>(S, text: Binding<String>, onCommit: () -> Void)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, text: Binding<String>, onEditingChanged: (Bool) -> Void)\nCreates a text field with a text label generated from a localized title string.\nAvailable when Label is Text.\ninit<S>(S, text: Binding<String>, onEditingChanged: (Bool) -> Void)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text."
    },
    {
        "title": "init(pattern:color:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/linestyle/init(pattern:color:)",
        "html": "Parameters\npattern\n\nThe pattern of the line.\n\ncolor\n\nThe color of the line. If not provided, the foreground color of text is used.\n\nSee Also\nCreating a text line style\ninit?(nsUnderlineStyle: NSUnderlineStyle)\nCreates a Text.LineStyle from NSUnderlineStyle.\nstruct Pattern\nThe pattern, that the line has."
    },
    {
        "title": "secondary",
        "url": "https://developer.apple.com/documentation/swiftui/text/scale/secondary",
        "html": "Discussion\n\nWhen specified a uses a secondary text scale.\n\nSee Also\nGettingn built-in text scales\nstatic let `default`: Text.Scale\nDefines default text scale"
    },
    {
        "title": "default",
        "url": "https://developer.apple.com/documentation/swiftui/text/scale/default",
        "html": "Discussion\n\nWhen specified uses the default text scale.\n\nSee Also\nGettingn built-in text scales\nstatic let secondary: Text.Scale\nDefines secondary text scale"
    },
    {
        "title": "heavy",
        "url": "https://developer.apple.com/documentation/swiftui/font/weight/heavy",
        "html": "See Also\nGetting font weights\nstatic let black: Font.Weight\nstatic let bold: Font.Weight\nstatic let light: Font.Weight\nstatic let medium: Font.Weight\nstatic let regular: Font.Weight\nstatic let semibold: Font.Weight\nstatic let thin: Font.Weight\nstatic let ultraLight: Font.Weight"
    },
    {
        "title": "Font.TextStyle.largeTitle",
        "url": "https://developer.apple.com/documentation/swiftui/font/textstyle/largetitle",
        "html": "See Also\nGetting font text styles\ncase extraLargeTitle2\nThe font used for second level extra large titles.\nBeta\ncase extraLargeTitle\nThe font used for extra large titles.\nBeta\ncase title\nThe font used for first level hierarchical headings.\ncase title2\nThe font used for second level hierarchical headings.\ncase title3\nThe font used for third level hierarchical headings.\ncase headline\nThe font used for headings.\ncase subheadline\nThe font used for subheadings.\ncase body\nThe font used for body text.\ncase callout\nThe font used for callouts.\ncase caption\nThe font used for standard captions.\ncase caption2\nThe font used for alternate captions.\ncase footnote\nThe font used in footnotes."
    },
    {
        "title": "Font.TextStyle.extraLargeTitle",
        "url": "https://developer.apple.com/documentation/swiftui/font/textstyle/extralargetitle",
        "html": "See Also\nGetting font text styles\ncase extraLargeTitle2\nThe font used for second level extra large titles.\nBeta\ncase largeTitle\nThe font style for large titles.\ncase title\nThe font used for first level hierarchical headings.\ncase title2\nThe font used for second level hierarchical headings.\ncase title3\nThe font used for third level hierarchical headings.\ncase headline\nThe font used for headings.\ncase subheadline\nThe font used for subheadings.\ncase body\nThe font used for body text.\ncase callout\nThe font used for callouts.\ncase caption\nThe font used for standard captions.\ncase caption2\nThe font used for alternate captions.\ncase footnote\nThe font used in footnotes."
    },
    {
        "title": "Font.Leading.tight",
        "url": "https://developer.apple.com/documentation/swiftui/font/leading/tight",
        "html": "Discussion\n\nThis value typically reduces line spacing by 1 point for watchOS and 2 points on other platforms.\n\nSee Also\nGetting leading line spacing options\ncase standard\nThe font\u2019s default line spacing.\ncase loose\nIncreased line spacing."
    },
    {
        "title": "Font.TextStyle.title3",
        "url": "https://developer.apple.com/documentation/swiftui/font/textstyle/title3",
        "html": "See Also\nGetting font text styles\ncase extraLargeTitle2\nThe font used for second level extra large titles.\nBeta\ncase extraLargeTitle\nThe font used for extra large titles.\nBeta\ncase largeTitle\nThe font style for large titles.\ncase title\nThe font used for first level hierarchical headings.\ncase title2\nThe font used for second level hierarchical headings.\ncase headline\nThe font used for headings.\ncase subheadline\nThe font used for subheadings.\ncase body\nThe font used for body text.\ncase callout\nThe font used for callouts.\ncase caption\nThe font used for standard captions.\ncase caption2\nThe font used for alternate captions.\ncase footnote\nThe font used in footnotes."
    },
    {
        "title": "device",
        "url": "https://developer.apple.com/documentation/swiftui/gradient/colorspace/device",
        "html": "See Also\nGetting an interpolation method\nstatic let perceptual: Gradient.ColorSpace\nInterpolates gradient colors in a perceptual color space."
    },
    {
        "title": "secondary",
        "url": "https://developer.apple.com/documentation/swiftui/hierarchicalshapestyle/secondary",
        "html": "See Also\nGetting hierarchical shape styles\nstatic let primary: HierarchicalShapeStyle\nA shape style that maps to the first level of the current content style.\nstatic let tertiary: HierarchicalShapeStyle\nA shape style that maps to the third level of the current content style.\nstatic let quaternary: HierarchicalShapeStyle\nA shape style that maps to the fourth level of the current content style."
    },
    {
        "title": "color",
        "url": "https://developer.apple.com/documentation/swiftui/gradient/stop/color",
        "html": "See Also\nConfiguring a gradient stop\nvar location: CGFloat\nThe parametric location of the stop."
    },
    {
        "title": "perceptual",
        "url": "https://developer.apple.com/documentation/swiftui/gradient/colorspace/perceptual",
        "html": "See Also\nGetting an interpolation method\nstatic let device: Gradient.ColorSpace\nInterpolates gradient colors in the output color space."
    },
    {
        "title": "tertiary",
        "url": "https://developer.apple.com/documentation/swiftui/hierarchicalshapestyle/tertiary",
        "html": "See Also\nGetting hierarchical shape styles\nstatic let primary: HierarchicalShapeStyle\nA shape style that maps to the first level of the current content style.\nstatic let secondary: HierarchicalShapeStyle\nA shape style that maps to the second level of the current content style.\nstatic let quaternary: HierarchicalShapeStyle\nA shape style that maps to the fourth level of the current content style."
    },
    {
        "title": "quaternary",
        "url": "https://developer.apple.com/documentation/swiftui/hierarchicalshapestyle/quaternary",
        "html": "See Also\nGetting hierarchical shape styles\nstatic let primary: HierarchicalShapeStyle\nA shape style that maps to the first level of the current content style.\nstatic let secondary: HierarchicalShapeStyle\nA shape style that maps to the second level of the current content style.\nstatic let tertiary: HierarchicalShapeStyle\nA shape style that maps to the third level of the current content style."
    },
    {
        "title": "bottom",
        "url": "https://developer.apple.com/documentation/swiftui/edge/set/bottom",
        "html": "See Also\nGetting edge sets\nstatic let all: Edge.Set\nstatic let top: Edge.Set\nstatic let leading: Edge.Set\nstatic let trailing: Edge.Set\nstatic let horizontal: Edge.Set\nstatic let vertical: Edge.Set"
    },
    {
        "title": "trailing",
        "url": "https://developer.apple.com/documentation/swiftui/edge/set/trailing",
        "html": "See Also\nGetting edge sets\nstatic let all: Edge.Set\nstatic let top: Edge.Set\nstatic let bottom: Edge.Set\nstatic let leading: Edge.Set\nstatic let horizontal: Edge.Set\nstatic let vertical: Edge.Set"
    },
    {
        "title": "dashDot",
        "url": "https://developer.apple.com/documentation/swiftui/text/linestyle/pattern/dashdot",
        "html": "See Also\nGetting line style patterns\nstatic let solid: Text.LineStyle.Pattern\nDraw a solid line.\nstatic let dot: Text.LineStyle.Pattern\nDraw a line of dots.\nstatic let dash: Text.LineStyle.Pattern\nDraw a line of dashes.\nstatic let dashDotDot: Text.LineStyle.Pattern\nDraw a line of alternating dashes and two dots."
    },
    {
        "title": "primary",
        "url": "https://developer.apple.com/documentation/swiftui/hierarchicalshapestyle/primary",
        "html": "See Also\nGetting hierarchical shape styles\nstatic let secondary: HierarchicalShapeStyle\nA shape style that maps to the second level of the current content style.\nstatic let tertiary: HierarchicalShapeStyle\nA shape style that maps to the third level of the current content style.\nstatic let quaternary: HierarchicalShapeStyle\nA shape style that maps to the fourth level of the current content style."
    },
    {
        "title": "top",
        "url": "https://developer.apple.com/documentation/swiftui/edge/set/top",
        "html": "See Also\nGetting edge sets\nstatic let all: Edge.Set\nstatic let bottom: Edge.Set\nstatic let leading: Edge.Set\nstatic let trailing: Edge.Set\nstatic let horizontal: Edge.Set\nstatic let vertical: Edge.Set"
    },
    {
        "title": "location",
        "url": "https://developer.apple.com/documentation/swiftui/gradient/stop/location",
        "html": "Discussion\n\nThis value must be in the range [0, 1].\n\nSee Also\nConfiguring a gradient stop\nvar color: Color\nThe color for the stop."
    },
    {
        "title": "solid",
        "url": "https://developer.apple.com/documentation/swiftui/text/linestyle/pattern/solid",
        "html": "See Also\nGetting line style patterns\nstatic let dot: Text.LineStyle.Pattern\nDraw a line of dots.\nstatic let dash: Text.LineStyle.Pattern\nDraw a line of dashes.\nstatic let dashDot: Text.LineStyle.Pattern\nstatic let dashDotDot: Text.LineStyle.Pattern\nDraw a line of alternating dashes and two dots."
    },
    {
        "title": "init(minimumInterval:paused:)",
        "url": "https://developer.apple.com/documentation/swiftui/animationtimelineschedule/init(minimuminterval:paused:)",
        "html": "Parameters\nminimumInterval\n\nThe minimum interval to update the schedule at. Pass nil to let the system pick an appropriate update interval.\n\npaused\n\nIf the schedule should stop generating updates."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/popupbuttonpickerstyle/init()",
        "html": "Deprecated\n\nUse MenuPickerStyle instead."
    },
    {
        "title": "Font.Design.rounded",
        "url": "https://developer.apple.com/documentation/swiftui/font/design/rounded",
        "html": "See Also\nGetting font designs\ncase `default`\ncase monospaced\ncase serif"
    },
    {
        "title": "init(showsMenuIndicator:)",
        "url": "https://developer.apple.com/documentation/swiftui/borderlessbuttonmenustyle/init(showsmenuindicator:)",
        "html": "Deprecated\n\nUse View/menuIndicator(_) instead.\n\nParameters\nshowsMenuIndicator\n\nA Boolean that indicates whether the button should include a visual indicator that it represents a menu, such as an arrow.\n\nSee Also\nCreating a bordeless button menu style\ninit()\nCreates a borderless button menu style.\nDeprecated"
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/borderlessbuttonmenustyle/init()",
        "html": "Deprecated\n\nUse menuStyle(_:) with button and buttonStyle(_:) with borderless.\n\nSee Also\nCreating a bordeless button menu style\ninit(showsMenuIndicator: Bool)\nCreates a borderless button menu style, specifying whether to show a visual menu indicator.\nDeprecated"
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/borderedbuttonmenustyle/init()",
        "html": "Deprecated\n\nUse menuStyle(_:) with button and buttonStyle(_:) with bordered."
    },
    {
        "title": "appendInterpolation(_:format:)",
        "url": "https://developer.apple.com/documentation/swiftui/localizedstringkey/stringinterpolation/appendinterpolation(_:format:)",
        "html": "Parameters\ninput\n\nThe instance to format and append.\n\nformat\n\nA format style to use when converting input into a string representation.\n\nDiscussion\n\nDon\u2019t call this method directly; it\u2019s used by the compiler when interpreting string interpolations.\n\nThe following example shows how to use a string interpolation to format a Date with a Date.FormatStyle and append it to static text. The resulting interpolation implicitly creates a LocalizedStringKey, which a Text uses to provide its content.\n\nText(\"The time is \\(myDate, format: Date.FormatStyle(date: .omitted, time:.complete))\")\n\nSee Also\nAppending to an interpolation\nfunc appendInterpolation(String)\nAppends a literal string segment to a string interpolation.\nfunc appendInterpolation(AttributedString)\nAppends an attributed string to a string interpolation.\nfunc appendInterpolation<T>(T)\nAppends a type, convertible to a string by using a default format specifier, to a string interpolation.\nfunc appendInterpolation<T>(T, specifier: String)\nAppends a type, convertible to a string with a format specifier, to a string interpolation.\nfunc appendInterpolation(ClosedRange<Date>)\nAppends a date range to a string interpolation.\nfunc appendInterpolation(DateInterval)\nAppends a date interval to a string interpolation.\nfunc appendInterpolation<Subject>(Subject, formatter: Formatter?)\nAppends an optionally-formatted instance of an Objective-C subclass to a string interpolation.\nfunc appendInterpolation<Subject>(Subject, formatter: Formatter?)\nAppends an optionally-formatted instance of a Foundation type to a string interpolation.\nfunc appendInterpolation(Date, style: Text.DateStyle)\nAppends a formatted date to a string interpolation.\nfunc appendInterpolation(Text)\nAppends the string displayed by a text view to a string interpolation.\nfunc appendInterpolation(Image)\nAppends an image to a string interpolation.\nfunc appendInterpolation(LocalizedStringResource)\nAppends the localized string resource to a string interpolation.\nfunc appendInterpolation(timerInterval: ClosedRange<Date>, pauseTime: Date?, countsDown: Bool, showsHours: Bool)\nAppends a timer interval to a string interpolation.\nfunc appendLiteral(String)\nAppends a literal string."
    },
    {
        "title": "appendInterpolation(_:formatter:)",
        "url": "https://developer.apple.com/documentation/swiftui/localizedstringkey/stringinterpolation/appendinterpolation(_:formatter:)-5yzhl",
        "html": "Parameters\nsubject\n\nAn NSObject to append.\n\nformatter\n\nA formatter to convert subject to a string representation.\n\nDiscussion\n\nDon\u2019t call this method directly; it\u2019s used by the compiler when interpreting string interpolations.\n\nThe following example shows how to use a Measurement value and a MeasurementFormatter to create a LocalizedStringKey that uses the formatter style Formatter.UnitStyle.long when generating the measurement\u2019s string representation. Rather than calling appendInterpolation(_:formatter) directly, the code gets the formatting behavior implicitly by using the \\() string interpolation syntax.\n\nlet siResistance = Measurement(value: 640, unit: UnitElectricResistance.ohms)\nlet formatter = MeasurementFormatter()\nformatter.unitStyle = .long\nlet key = LocalizedStringKey (\"Resistance: \\(siResistance, formatter: formatter)\")\nlet text1 = Text(key) // Text contains \"Resistance: 640 ohms\"\n\nSee Also\nAppending to an interpolation\nfunc appendInterpolation(String)\nAppends a literal string segment to a string interpolation.\nfunc appendInterpolation(AttributedString)\nAppends an attributed string to a string interpolation.\nfunc appendInterpolation<T>(T)\nAppends a type, convertible to a string by using a default format specifier, to a string interpolation.\nfunc appendInterpolation<T>(T, specifier: String)\nAppends a type, convertible to a string with a format specifier, to a string interpolation.\nfunc appendInterpolation(ClosedRange<Date>)\nAppends a date range to a string interpolation.\nfunc appendInterpolation(DateInterval)\nAppends a date interval to a string interpolation.\nfunc appendInterpolation<F>(F.FormatInput, format: F)\nAppends the formatted representation of a nonstring type supported by a corresponding format style.\nfunc appendInterpolation<Subject>(Subject, formatter: Formatter?)\nAppends an optionally-formatted instance of a Foundation type to a string interpolation.\nfunc appendInterpolation(Date, style: Text.DateStyle)\nAppends a formatted date to a string interpolation.\nfunc appendInterpolation(Text)\nAppends the string displayed by a text view to a string interpolation.\nfunc appendInterpolation(Image)\nAppends an image to a string interpolation.\nfunc appendInterpolation(LocalizedStringResource)\nAppends the localized string resource to a string interpolation.\nfunc appendInterpolation(timerInterval: ClosedRange<Date>, pauseTime: Date?, countsDown: Bool, showsHours: Bool)\nAppends a timer interval to a string interpolation.\nfunc appendLiteral(String)\nAppends a literal string."
    },
    {
        "title": "appendInterpolation(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/localizedstringkey/stringinterpolation/appendinterpolation(_:)-135jx",
        "html": "Parameters\nvalue\n\nThe localized string resource to append.\n\nDiscussion\n\nDon\u2019t call this method directly; it\u2019s used by the compiler when interpreting string interpolations.\n\nSee Also\nAppending to an interpolation\nfunc appendInterpolation(String)\nAppends a literal string segment to a string interpolation.\nfunc appendInterpolation(AttributedString)\nAppends an attributed string to a string interpolation.\nfunc appendInterpolation<T>(T)\nAppends a type, convertible to a string by using a default format specifier, to a string interpolation.\nfunc appendInterpolation<T>(T, specifier: String)\nAppends a type, convertible to a string with a format specifier, to a string interpolation.\nfunc appendInterpolation(ClosedRange<Date>)\nAppends a date range to a string interpolation.\nfunc appendInterpolation(DateInterval)\nAppends a date interval to a string interpolation.\nfunc appendInterpolation<F>(F.FormatInput, format: F)\nAppends the formatted representation of a nonstring type supported by a corresponding format style.\nfunc appendInterpolation<Subject>(Subject, formatter: Formatter?)\nAppends an optionally-formatted instance of an Objective-C subclass to a string interpolation.\nfunc appendInterpolation<Subject>(Subject, formatter: Formatter?)\nAppends an optionally-formatted instance of a Foundation type to a string interpolation.\nfunc appendInterpolation(Date, style: Text.DateStyle)\nAppends a formatted date to a string interpolation.\nfunc appendInterpolation(Text)\nAppends the string displayed by a text view to a string interpolation.\nfunc appendInterpolation(Image)\nAppends an image to a string interpolation.\nfunc appendInterpolation(timerInterval: ClosedRange<Date>, pauseTime: Date?, countsDown: Bool, showsHours: Bool)\nAppends a timer interval to a string interpolation.\nfunc appendLiteral(String)\nAppends a literal string."
    },
    {
        "title": "appendInterpolation(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/localizedstringkey/stringinterpolation/appendinterpolation(_:)-4qyfo",
        "html": "Parameters\nvalue\n\nA Text instance to append.\n\nDiscussion\n\nDon\u2019t call this method directly; it\u2019s used by the compiler when interpreting string interpolations.\n\nSee Also\nAppending to an interpolation\nfunc appendInterpolation(String)\nAppends a literal string segment to a string interpolation.\nfunc appendInterpolation(AttributedString)\nAppends an attributed string to a string interpolation.\nfunc appendInterpolation<T>(T)\nAppends a type, convertible to a string by using a default format specifier, to a string interpolation.\nfunc appendInterpolation<T>(T, specifier: String)\nAppends a type, convertible to a string with a format specifier, to a string interpolation.\nfunc appendInterpolation(ClosedRange<Date>)\nAppends a date range to a string interpolation.\nfunc appendInterpolation(DateInterval)\nAppends a date interval to a string interpolation.\nfunc appendInterpolation<F>(F.FormatInput, format: F)\nAppends the formatted representation of a nonstring type supported by a corresponding format style.\nfunc appendInterpolation<Subject>(Subject, formatter: Formatter?)\nAppends an optionally-formatted instance of an Objective-C subclass to a string interpolation.\nfunc appendInterpolation<Subject>(Subject, formatter: Formatter?)\nAppends an optionally-formatted instance of a Foundation type to a string interpolation.\nfunc appendInterpolation(Date, style: Text.DateStyle)\nAppends a formatted date to a string interpolation.\nfunc appendInterpolation(Image)\nAppends an image to a string interpolation.\nfunc appendInterpolation(LocalizedStringResource)\nAppends the localized string resource to a string interpolation.\nfunc appendInterpolation(timerInterval: ClosedRange<Date>, pauseTime: Date?, countsDown: Bool, showsHours: Bool)\nAppends a timer interval to a string interpolation.\nfunc appendLiteral(String)\nAppends a literal string."
    },
    {
        "title": "appendInterpolation(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/localizedstringkey/stringinterpolation/appendinterpolation(_:)-5m52e",
        "html": "Parameters\nimage\n\nThe image to append.\n\nDiscussion\n\nDon\u2019t call this method directly; it\u2019s used by the compiler when interpreting string interpolations.\n\nSee Also\nAppending to an interpolation\nfunc appendInterpolation(String)\nAppends a literal string segment to a string interpolation.\nfunc appendInterpolation(AttributedString)\nAppends an attributed string to a string interpolation.\nfunc appendInterpolation<T>(T)\nAppends a type, convertible to a string by using a default format specifier, to a string interpolation.\nfunc appendInterpolation<T>(T, specifier: String)\nAppends a type, convertible to a string with a format specifier, to a string interpolation.\nfunc appendInterpolation(ClosedRange<Date>)\nAppends a date range to a string interpolation.\nfunc appendInterpolation(DateInterval)\nAppends a date interval to a string interpolation.\nfunc appendInterpolation<F>(F.FormatInput, format: F)\nAppends the formatted representation of a nonstring type supported by a corresponding format style.\nfunc appendInterpolation<Subject>(Subject, formatter: Formatter?)\nAppends an optionally-formatted instance of an Objective-C subclass to a string interpolation.\nfunc appendInterpolation<Subject>(Subject, formatter: Formatter?)\nAppends an optionally-formatted instance of a Foundation type to a string interpolation.\nfunc appendInterpolation(Date, style: Text.DateStyle)\nAppends a formatted date to a string interpolation.\nfunc appendInterpolation(Text)\nAppends the string displayed by a text view to a string interpolation.\nfunc appendInterpolation(LocalizedStringResource)\nAppends the localized string resource to a string interpolation.\nfunc appendInterpolation(timerInterval: ClosedRange<Date>, pauseTime: Date?, countsDown: Bool, showsHours: Bool)\nAppends a timer interval to a string interpolation.\nfunc appendLiteral(String)\nAppends a literal string."
    },
    {
        "title": "appendInterpolation(timerInterval:pauseTime:countsDown:showsHours:)",
        "url": "https://developer.apple.com/documentation/swiftui/localizedstringkey/stringinterpolation/appendinterpolation(timerinterval:pausetime:countsdown:showshours:)",
        "html": "Parameters\ntimerInterval\n\nThe interval between where to run the timer.\n\npauseTime\n\nIf present, the date at which to pause the timer. The default is nil which indicates to never pause.\n\ncountsDown\n\nWhether to count up or down. The default is true.\n\nshowsHours\n\nWhether to include an hours component if there are more than 60 minutes left on the timer. The default is true.\n\nDiscussion\n\nDon\u2019t call this method directly; it\u2019s used by the compiler when interpreting string interpolations.\n\nSee Also\nAppending to an interpolation\nfunc appendInterpolation(String)\nAppends a literal string segment to a string interpolation.\nfunc appendInterpolation(AttributedString)\nAppends an attributed string to a string interpolation.\nfunc appendInterpolation<T>(T)\nAppends a type, convertible to a string by using a default format specifier, to a string interpolation.\nfunc appendInterpolation<T>(T, specifier: String)\nAppends a type, convertible to a string with a format specifier, to a string interpolation.\nfunc appendInterpolation(ClosedRange<Date>)\nAppends a date range to a string interpolation.\nfunc appendInterpolation(DateInterval)\nAppends a date interval to a string interpolation.\nfunc appendInterpolation<F>(F.FormatInput, format: F)\nAppends the formatted representation of a nonstring type supported by a corresponding format style.\nfunc appendInterpolation<Subject>(Subject, formatter: Formatter?)\nAppends an optionally-formatted instance of an Objective-C subclass to a string interpolation.\nfunc appendInterpolation<Subject>(Subject, formatter: Formatter?)\nAppends an optionally-formatted instance of a Foundation type to a string interpolation.\nfunc appendInterpolation(Date, style: Text.DateStyle)\nAppends a formatted date to a string interpolation.\nfunc appendInterpolation(Text)\nAppends the string displayed by a text view to a string interpolation.\nfunc appendInterpolation(Image)\nAppends an image to a string interpolation.\nfunc appendInterpolation(LocalizedStringResource)\nAppends the localized string resource to a string interpolation.\nfunc appendLiteral(String)\nAppends a literal string."
    },
    {
        "title": "appendInterpolation(_:style:)",
        "url": "https://developer.apple.com/documentation/swiftui/localizedstringkey/stringinterpolation/appendinterpolation(_:style:)",
        "html": "Parameters\ndate\n\nThe date to append.\n\nstyle\n\nA predefined style to format the date with.\n\nDiscussion\n\nDon\u2019t call this method directly; it\u2019s used by the compiler when interpreting string interpolations.\n\nSee Also\nAppending to an interpolation\nfunc appendInterpolation(String)\nAppends a literal string segment to a string interpolation.\nfunc appendInterpolation(AttributedString)\nAppends an attributed string to a string interpolation.\nfunc appendInterpolation<T>(T)\nAppends a type, convertible to a string by using a default format specifier, to a string interpolation.\nfunc appendInterpolation<T>(T, specifier: String)\nAppends a type, convertible to a string with a format specifier, to a string interpolation.\nfunc appendInterpolation(ClosedRange<Date>)\nAppends a date range to a string interpolation.\nfunc appendInterpolation(DateInterval)\nAppends a date interval to a string interpolation.\nfunc appendInterpolation<F>(F.FormatInput, format: F)\nAppends the formatted representation of a nonstring type supported by a corresponding format style.\nfunc appendInterpolation<Subject>(Subject, formatter: Formatter?)\nAppends an optionally-formatted instance of an Objective-C subclass to a string interpolation.\nfunc appendInterpolation<Subject>(Subject, formatter: Formatter?)\nAppends an optionally-formatted instance of a Foundation type to a string interpolation.\nfunc appendInterpolation(Text)\nAppends the string displayed by a text view to a string interpolation.\nfunc appendInterpolation(Image)\nAppends an image to a string interpolation.\nfunc appendInterpolation(LocalizedStringResource)\nAppends the localized string resource to a string interpolation.\nfunc appendInterpolation(timerInterval: ClosedRange<Date>, pauseTime: Date?, countsDown: Bool, showsHours: Bool)\nAppends a timer interval to a string interpolation.\nfunc appendLiteral(String)\nAppends a literal string."
    },
    {
        "title": "init(_:value:formatter:onEditingChanged:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(_:value:formatter:oneditingchanged:)-8ndbc",
        "html": "Parameters\ntitle\n\nThe title of the text field, describing its purpose.\n\nvalue\n\nThe underlying value to be edited.\n\nformatter\n\nA formatter to use when converting between the string the user edits and the underlying value of type V. In the event that formatter is unable to perform the conversion, binding.value isn\u2019t modified.\n\nonEditingChanged\n\nThe action to perform when the user begins editing text and after the user finishes editing text. The closure receives a Boolean value that indicates the editing status: true when the user begins editing, false when they finish.\n\nSee Also\nCreating a text field with a value\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter, onEditingChanged: (Bool) -> Void, onCommit: () -> Void)\nCreates an instance which binds over an arbitrary type, T.\nAvailable when Label is Text.\nDeprecated\ninit<S, V>(S, value: Binding<V>, formatter: Formatter, onEditingChanged: (Bool) -> Void, onCommit: () -> Void)\nCreates an instance which binds over an arbitrary type, T.\nAvailable when Label is Text.\nDeprecated\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter, onCommit: () -> Void)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<S, V>(S, value: Binding<V>, formatter: Formatter, onCommit: () -> Void)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter, onEditingChanged: (Bool) -> Void)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text."
    },
    {
        "title": "appendLiteral(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/localizedstringkey/stringinterpolation/appendliteral(_:)",
        "html": "Parameters\nliteral\n\nThe literal string to append.\n\nDiscussion\n\nDon\u2019t call this method directly; it\u2019s used by the compiler when interpreting string interpolations.\n\nSee Also\nAppending to an interpolation\nfunc appendInterpolation(String)\nAppends a literal string segment to a string interpolation.\nfunc appendInterpolation(AttributedString)\nAppends an attributed string to a string interpolation.\nfunc appendInterpolation<T>(T)\nAppends a type, convertible to a string by using a default format specifier, to a string interpolation.\nfunc appendInterpolation<T>(T, specifier: String)\nAppends a type, convertible to a string with a format specifier, to a string interpolation.\nfunc appendInterpolation(ClosedRange<Date>)\nAppends a date range to a string interpolation.\nfunc appendInterpolation(DateInterval)\nAppends a date interval to a string interpolation.\nfunc appendInterpolation<F>(F.FormatInput, format: F)\nAppends the formatted representation of a nonstring type supported by a corresponding format style.\nfunc appendInterpolation<Subject>(Subject, formatter: Formatter?)\nAppends an optionally-formatted instance of an Objective-C subclass to a string interpolation.\nfunc appendInterpolation<Subject>(Subject, formatter: Formatter?)\nAppends an optionally-formatted instance of a Foundation type to a string interpolation.\nfunc appendInterpolation(Date, style: Text.DateStyle)\nAppends a formatted date to a string interpolation.\nfunc appendInterpolation(Text)\nAppends the string displayed by a text view to a string interpolation.\nfunc appendInterpolation(Image)\nAppends an image to a string interpolation.\nfunc appendInterpolation(LocalizedStringResource)\nAppends the localized string resource to a string interpolation.\nfunc appendInterpolation(timerInterval: ClosedRange<Date>, pauseTime: Date?, countsDown: Bool, showsHours: Bool)\nAppends a timer interval to a string interpolation."
    },
    {
        "title": "init(_:value:formatter:onEditingChanged:onCommit:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(_:value:formatter:oneditingchanged:oncommit:)-69262",
        "html": "Deprecated\n\nUse init(_:value:formatter:prompt:) instead. Add the onSubmit(of:_:) view modifier for the onCommit behavior. Use FocusState and focused(_:equals:) for the onEditingChanged behavior.\n\nParameters\ntitle\n\nThe title of the text field, describing its purpose.\n\nvalue\n\nThe underlying value to be edited.\n\nformatter\n\nA formatter to use when converting between the string the user edits and the underlying value of type T. In the event that formatter is unable to perform the conversion, binding.value isn\u2019t modified.\n\nonEditingChanged\n\nThe action to perform when the user begins editing text and after the user finishes editing text. The closure receives a Boolean value that indicates the editing status: true when the user begins editing, false when they finish.\n\nonCommit\n\nAn action to perform when the user performs an action (for example, when the user presses the Return key) while the text field has focus.\n\nSee Also\nCreating a text field with a value\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter, onEditingChanged: (Bool) -> Void, onCommit: () -> Void)\nCreates an instance which binds over an arbitrary type, T.\nAvailable when Label is Text.\nDeprecated\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter, onCommit: () -> Void)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<S, V>(S, value: Binding<V>, formatter: Formatter, onCommit: () -> Void)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter, onEditingChanged: (Bool) -> Void)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<S, V>(S, value: Binding<V>, formatter: Formatter, onEditingChanged: (Bool) -> Void)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:value:formatter:onCommit:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(_:value:formatter:oncommit:)-22hg",
        "html": "Parameters\ntitleKey\n\nThe key for the localized title of the text field, describing its purpose.\n\nvalue\n\nThe underlying value to be edited.\n\nformatter\n\nA formatter to use when converting between the string the user edits and the underlying value of type V. In the event that formatter is unable to perform the conversion, binding.value isn\u2019t modified.\n\nonCommit\n\nAn action to perform when the user performs an action (for example, when the user presses the Return key) while the text field has focus.\n\nSee Also\nCreating a text field with a value\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter, onEditingChanged: (Bool) -> Void, onCommit: () -> Void)\nCreates an instance which binds over an arbitrary type, T.\nAvailable when Label is Text.\nDeprecated\ninit<S, V>(S, value: Binding<V>, formatter: Formatter, onEditingChanged: (Bool) -> Void, onCommit: () -> Void)\nCreates an instance which binds over an arbitrary type, T.\nAvailable when Label is Text.\nDeprecated\ninit<S, V>(S, value: Binding<V>, formatter: Formatter, onCommit: () -> Void)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter, onEditingChanged: (Bool) -> Void)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<S, V>(S, value: Binding<V>, formatter: Formatter, onEditingChanged: (Bool) -> Void)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:text:onEditingChanged:onCommit:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(_:text:oneditingchanged:oncommit:)-588cl",
        "html": "Deprecated\n\nUse init(_:text:prompt:) instead. Add the onSubmit(of:_:) view modifier for the onCommit behavior. Use FocusState and focused(_:equals:) for the onEditingChanged behavior.\n\nParameters\ntitle\n\nThe title of the text view, describing its purpose.\n\ntext\n\nThe text to display and edit.\n\nonEditingChanged\n\nThe action to perform when the user begins editing text and after the user finishes editing text. The closure receives a Boolean value that indicates the editing status: true when the user begins editing, false when they finish.\n\nonCommit\n\nAn action to perform when the user performs an action (for example, when the user presses the Return key) while the text field has focus.\n\nSee Also\nCreating a text field with a string\ninit(LocalizedStringKey, text: Binding<String>, onEditingChanged: (Bool) -> Void, onCommit: () -> Void)\nCreates a text field with a text label generated from a localized title string.\nAvailable when Label is Text.\nDeprecated\ninit<S>(S, text: Binding<String>, onCommit: () -> Void)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, text: Binding<String>, onCommit: () -> Void)\nCreates a text field with a text label generated from a localized title string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, text: Binding<String>, onEditingChanged: (Bool) -> Void)\nCreates a text field with a text label generated from a localized title string.\nAvailable when Label is Text.\ninit<S>(S, text: Binding<String>, onEditingChanged: (Bool) -> Void)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:text:onCommit:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(_:text:oncommit:)-1zeco",
        "html": "Parameters\ntitle\n\nThe title of the text view, describing its purpose.\n\ntext\n\nThe text to display and edit.\n\nonEditingChanged\n\nThe action to perform when the user begins editing text and after the user finishes editing text. The closure receives a Boolean value that indicates the editing status: true when the user begins editing, false when they finish.\n\nonCommit\n\nAn action to perform when the user performs an action (for example, when the user presses the Return key) while the text field has focus.\n\nSee Also\nCreating a text field with a string\ninit(LocalizedStringKey, text: Binding<String>, onEditingChanged: (Bool) -> Void, onCommit: () -> Void)\nCreates a text field with a text label generated from a localized title string.\nAvailable when Label is Text.\nDeprecated\ninit<S>(S, text: Binding<String>, onEditingChanged: (Bool) -> Void, onCommit: () -> Void)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text.\nDeprecated\ninit(LocalizedStringKey, text: Binding<String>, onCommit: () -> Void)\nCreates a text field with a text label generated from a localized title string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, text: Binding<String>, onEditingChanged: (Bool) -> Void)\nCreates a text field with a text label generated from a localized title string.\nAvailable when Label is Text.\ninit<S>(S, text: Binding<String>, onEditingChanged: (Bool) -> Void)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:value:formatter:onCommit:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(_:value:formatter:oncommit:)-71s0q",
        "html": "Parameters\ntitle\n\nThe title of the text field, describing its purpose.\n\nvalue\n\nThe underlying value to be edited.\n\nformatter\n\nA formatter to use when converting between the string the user edits and the underlying value of type V. In the event that formatter is unable to perform the conversion, binding.value isn\u2019t modified.\n\nonCommit\n\nAn action to perform when the user performs an action (for example, when the user presses the Return key) while the text field has focus.\n\nSee Also\nCreating a text field with a value\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter, onEditingChanged: (Bool) -> Void, onCommit: () -> Void)\nCreates an instance which binds over an arbitrary type, T.\nAvailable when Label is Text.\nDeprecated\ninit<S, V>(S, value: Binding<V>, formatter: Formatter, onEditingChanged: (Bool) -> Void, onCommit: () -> Void)\nCreates an instance which binds over an arbitrary type, T.\nAvailable when Label is Text.\nDeprecated\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter, onCommit: () -> Void)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter, onEditingChanged: (Bool) -> Void)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<S, V>(S, value: Binding<V>, formatter: Formatter, onEditingChanged: (Bool) -> Void)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:text:onEditingChanged:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(_:text:oneditingchanged:)-5z9w0",
        "html": "Parameters\ntitleKey\n\nThe key for the localized title of the text field, describing its purpose.\n\ntext\n\nThe text to display and edit.\n\nonEditingChanged\n\nThe action to perform when the user begins editing text and after the user finishes editing text. The closure receives a Boolean value that indicates the editing status: true when the user begins editing, false when they finish.\n\nSee Also\nCreating a text field with a string\ninit(LocalizedStringKey, text: Binding<String>, onEditingChanged: (Bool) -> Void, onCommit: () -> Void)\nCreates a text field with a text label generated from a localized title string.\nAvailable when Label is Text.\nDeprecated\ninit<S>(S, text: Binding<String>, onEditingChanged: (Bool) -> Void, onCommit: () -> Void)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text.\nDeprecated\ninit<S>(S, text: Binding<String>, onCommit: () -> Void)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, text: Binding<String>, onCommit: () -> Void)\nCreates a text field with a text label generated from a localized title string.\nAvailable when Label is Text.\ninit<S>(S, text: Binding<String>, onEditingChanged: (Bool) -> Void)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:value:formatter:onEditingChanged:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(_:value:formatter:oneditingchanged:)-487wv",
        "html": "Parameters\ntitleKey\n\nThe key for the localized title of the text field, describing its purpose.\n\nvalue\n\nThe underlying value to be edited.\n\nformatter\n\nA formatter to use when converting between the string the user edits and the underlying value of type V. In the event that formatter is unable to perform the conversion, binding.value isn\u2019t modified.\n\nonEditingChanged\n\nThe action to perform when the user begins editing text and after the user finishes editing text. The closure receives a Boolean value that indicates the editing status: true when the user begins editing, false when they finish.\n\nSee Also\nCreating a text field with a value\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter, onEditingChanged: (Bool) -> Void, onCommit: () -> Void)\nCreates an instance which binds over an arbitrary type, T.\nAvailable when Label is Text.\nDeprecated\ninit<S, V>(S, value: Binding<V>, formatter: Formatter, onEditingChanged: (Bool) -> Void, onCommit: () -> Void)\nCreates an instance which binds over an arbitrary type, T.\nAvailable when Label is Text.\nDeprecated\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter, onCommit: () -> Void)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<S, V>(S, value: Binding<V>, formatter: Formatter, onCommit: () -> Void)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<S, V>(S, value: Binding<V>, formatter: Formatter, onEditingChanged: (Bool) -> Void)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text."
    },
    {
        "title": "time",
        "url": "https://developer.apple.com/documentation/swiftui/text/datestyle/time",
        "html": "Discussion\nText(event.startDate, style: .time)\n\n\nExample output: 11:23PM\n\nSee Also\nGetting text date styles\nstatic let date: Text.DateStyle\nA style displaying a date.\nstatic let offset: Text.DateStyle\nA style displaying a date as offset from now.\nstatic let relative: Text.DateStyle\nA style displaying a date as relative to now.\nstatic let timer: Text.DateStyle\nA style displaying a date as timer counting from now."
    },
    {
        "title": "date",
        "url": "https://developer.apple.com/documentation/swiftui/text/datestyle/date",
        "html": "Discussion\nText(event.startDate, style: .date)\n\n\nExample output: June 3, 2019\n\nSee Also\nGetting text date styles\nstatic let offset: Text.DateStyle\nA style displaying a date as offset from now.\nstatic let relative: Text.DateStyle\nA style displaying a date as relative to now.\nstatic let time: Text.DateStyle\nA style displaying only the time component for a date.\nstatic let timer: Text.DateStyle\nA style displaying a date as timer counting from now."
    },
    {
        "title": "offset",
        "url": "https://developer.apple.com/documentation/swiftui/text/datestyle/offset",
        "html": "Discussion\nText(event.startDate, style: .offset)\n\n\nExample output: +2 hours -3 months\n\nSee Also\nGetting text date styles\nstatic let date: Text.DateStyle\nA style displaying a date.\nstatic let relative: Text.DateStyle\nA style displaying a date as relative to now.\nstatic let time: Text.DateStyle\nA style displaying only the time component for a date.\nstatic let timer: Text.DateStyle\nA style displaying a date as timer counting from now."
    },
    {
        "title": "init(nsUnderlineStyle:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/linestyle/init(nsunderlinestyle:)",
        "html": "Parameters\nnsUnderlineStyle\n\nA value of NSUnderlineStyle to wrap with Text.LineStyle.\n\nReturn Value\n\nA new Text.LineStyle or nil when nsUnderlineStyle contains styles not supported by Text.LineStyle.\n\nDiscussion\n\nNote\n\nUse this initializer only if you need to convert an existing NSUnderlineStyle to a SwiftUI Text.LineStyle. Otherwise, create a Text.LineStyle using an initializer like init(pattern:color:).\n\nSee Also\nCreating a text line style\ninit(pattern: Text.LineStyle.Pattern, color: Color?)\nCreates a line style.\nstruct Pattern\nThe pattern, that the line has."
    },
    {
        "title": "timer",
        "url": "https://developer.apple.com/documentation/swiftui/text/datestyle/timer",
        "html": "Discussion\nText(event.startDate, style: .timer)\n\n\nExample output: 2:32 36:59:01\n\nSee Also\nGetting text date styles\nstatic let date: Text.DateStyle\nA style displaying a date.\nstatic let offset: Text.DateStyle\nA style displaying a date as offset from now.\nstatic let relative: Text.DateStyle\nA style displaying a date as relative to now.\nstatic let time: Text.DateStyle\nA style displaying only the time component for a date."
    },
    {
        "title": "relative",
        "url": "https://developer.apple.com/documentation/swiftui/text/datestyle/relative",
        "html": "Discussion\nText(event.startDate, style: .relative)\n\n\nExample output: 2 hours, 23 minutes 1 year, 1 month\n\nSee Also\nGetting text date styles\nstatic let date: Text.DateStyle\nA style displaying a date.\nstatic let offset: Text.DateStyle\nA style displaying a date as offset from now.\nstatic let time: Text.DateStyle\nA style displaying only the time component for a date.\nstatic let timer: Text.DateStyle\nA style displaying a date as timer counting from now."
    },
    {
        "title": "high",
        "url": "https://developer.apple.com/documentation/swiftui/image/dynamicrange/high",
        "html": "See Also\nGetting dynamic range values\nstatic let standard: Image.DynamicRange\nRestrict the image content dynamic range to the standard range.\nstatic let constrainedHigh: Image.DynamicRange\nAllow image content to use some extended range. This is appropriate for placing HDR content next to SDR content."
    },
    {
        "title": "Text.Case.lowercase",
        "url": "https://developer.apple.com/documentation/swiftui/text/case/lowercase",
        "html": "Discussion\n\nFor example, \u201cHello\u201d would be displayed as \u201chello\u201d.\n\nSee Also\n\nStringProtocol.lowercased(with:)\n\nSee Also\nGetting text cases\ncase uppercase\nDisplays text in all uppercase characters."
    },
    {
        "title": "standard",
        "url": "https://developer.apple.com/documentation/swiftui/image/dynamicrange/standard",
        "html": "See Also\nGetting dynamic range values\nstatic let high: Image.DynamicRange\nAllow image content to use an unrestricted extended range.\nstatic let constrainedHigh: Image.DynamicRange\nAllow image content to use some extended range. This is appropriate for placing HDR content next to SDR content."
    },
    {
        "title": "Text.Case.uppercase",
        "url": "https://developer.apple.com/documentation/swiftui/text/case/uppercase",
        "html": "Discussion\n\nFor example, \u201cHello\u201d would be displayed as \u201cHELLO\u201d.\n\nSee Also\n\nStringProtocol.uppercased(with:)\n\nSee Also\nGetting text cases\ncase lowercase\nDisplays text in all lowercase characters."
    },
    {
        "title": "constrainedHigh",
        "url": "https://developer.apple.com/documentation/swiftui/image/dynamicrange/constrainedhigh",
        "html": "See Also\nGetting dynamic range values\nstatic let standard: Image.DynamicRange\nRestrict the image content dynamic range to the standard range.\nstatic let high: Image.DynamicRange\nAllow image content to use an unrestricted extended range."
    },
    {
        "title": "bold",
        "url": "https://developer.apple.com/documentation/swiftui/font/weight/bold",
        "html": "See Also\nGetting font weights\nstatic let black: Font.Weight\nstatic let heavy: Font.Weight\nstatic let light: Font.Weight\nstatic let medium: Font.Weight\nstatic let regular: Font.Weight\nstatic let semibold: Font.Weight\nstatic let thin: Font.Weight\nstatic let ultraLight: Font.Weight"
    },
    {
        "title": "light",
        "url": "https://developer.apple.com/documentation/swiftui/font/weight/light",
        "html": "See Also\nGetting font weights\nstatic let black: Font.Weight\nstatic let bold: Font.Weight\nstatic let heavy: Font.Weight\nstatic let medium: Font.Weight\nstatic let regular: Font.Weight\nstatic let semibold: Font.Weight\nstatic let thin: Font.Weight\nstatic let ultraLight: Font.Weight"
    },
    {
        "title": "regular",
        "url": "https://developer.apple.com/documentation/swiftui/font/weight/regular",
        "html": "See Also\nGetting font weights\nstatic let black: Font.Weight\nstatic let bold: Font.Weight\nstatic let heavy: Font.Weight\nstatic let light: Font.Weight\nstatic let medium: Font.Weight\nstatic let semibold: Font.Weight\nstatic let thin: Font.Weight\nstatic let ultraLight: Font.Weight"
    },
    {
        "title": "medium",
        "url": "https://developer.apple.com/documentation/swiftui/font/weight/medium",
        "html": "See Also\nGetting font weights\nstatic let black: Font.Weight\nstatic let bold: Font.Weight\nstatic let heavy: Font.Weight\nstatic let light: Font.Weight\nstatic let regular: Font.Weight\nstatic let semibold: Font.Weight\nstatic let thin: Font.Weight\nstatic let ultraLight: Font.Weight"
    },
    {
        "title": "EveryMinuteTimelineSchedule.Entries",
        "url": "https://developer.apple.com/documentation/swiftui/everyminutetimelineschedule/entries",
        "html": "Overview\n\nThe entries(from:mode:) method returns a value of this type, which is a Sequence of dates, one per minute, in ascending order. A TimelineView that you create updates its content at the moments in time corresponding to the dates included in the sequence.\n\nRelationships\nConforms To\nIteratorProtocol\nSendable\nSequence\nSee Also\nGetting the sequence of dates\nfunc entries(from: Date, mode: TimelineScheduleMode) -> EveryMinuteTimelineSchedule.Entries\nProvides a sequence of per-minute dates starting from a given date."
    },
    {
        "title": "TimelineScheduleMode.normal",
        "url": "https://developer.apple.com/documentation/swiftui/timelineschedulemode/normal",
        "html": "See Also\nGetting timeline schedule modes\ncase lowFrequency\nA mode that produces schedule updates at a reduced rate."
    },
    {
        "title": "PeriodicTimelineSchedule.Entries",
        "url": "https://developer.apple.com/documentation/swiftui/periodictimelineschedule/entries",
        "html": "Overview\n\nThe entries(from:mode:) method returns a value of this type, which is a Sequence of periodic dates in ascending order. A TimelineView that you create updates its content at the moments in time corresponding to the dates included in the sequence.\n\nRelationships\nConforms To\nIteratorProtocol\nSendable\nSequence\nSee Also\nGetting the sequence of dates\nfunc entries(from: Date, mode: TimelineScheduleMode) -> PeriodicTimelineSchedule.Entries\nProvides a sequence of periodic dates starting from around a given date."
    },
    {
        "title": "semibold",
        "url": "https://developer.apple.com/documentation/swiftui/font/weight/semibold",
        "html": "See Also\nGetting font weights\nstatic let black: Font.Weight\nstatic let bold: Font.Weight\nstatic let heavy: Font.Weight\nstatic let light: Font.Weight\nstatic let medium: Font.Weight\nstatic let regular: Font.Weight\nstatic let thin: Font.Weight\nstatic let ultraLight: Font.Weight"
    },
    {
        "title": "TimelineScheduleMode.lowFrequency",
        "url": "https://developer.apple.com/documentation/swiftui/timelineschedulemode/lowfrequency",
        "html": "Discussion\n\nIn this mode, the schedule should generate only \u201cmajor\u201d updates, if possible. For example, a timeline providing updates to a timer might restrict updates to once a minute while in this mode.\n\nSee Also\nGetting timeline schedule modes\ncase normal\nA mode that produces schedule updates at the schedule\u2019s natural cadence."
    },
    {
        "title": "entries(from:mode:)",
        "url": "https://developer.apple.com/documentation/swiftui/explicittimelineschedule/entries(from:mode:)",
        "html": "Parameters\nstartDate\n\nThe date from which the sequence begins. This particular implementation of the protocol method ignores the start date.\n\nmode\n\nThe mode for the update schedule. This particular implementation of the protocol method ignores the mode.\n\nReturn Value\n\nThe sequence of dates that you provided at initialization.\n\nDiscussion\n\nA TimelineView that you create with a schedule calls this TimelineSchedule method to ask the schedule when to update its content. The explicit timeline schedule implementation of this method returns the unmodified sequence of dates that you provided when you created the schedule with explicit(_:). As a result, this particular implementation ignores the startDate and mode parameters."
    },
    {
        "title": "standard",
        "url": "https://developer.apple.com/documentation/swiftui/font/width/standard",
        "html": "See Also\nGetting standard font widths\nstatic let compressed: Font.Width\nstatic let condensed: Font.Width\nstatic let expanded: Font.Width"
    },
    {
        "title": "expanded",
        "url": "https://developer.apple.com/documentation/swiftui/font/width/expanded",
        "html": "See Also\nGetting standard font widths\nstatic let compressed: Font.Width\nstatic let condensed: Font.Width\nstatic let standard: Font.Width"
    },
    {
        "title": "condensed",
        "url": "https://developer.apple.com/documentation/swiftui/font/width/condensed",
        "html": "See Also\nGetting standard font widths\nstatic let compressed: Font.Width\nstatic let expanded: Font.Width\nstatic let standard: Font.Width"
    },
    {
        "title": "thin",
        "url": "https://developer.apple.com/documentation/swiftui/font/weight/thin",
        "html": "See Also\nGetting font weights\nstatic let black: Font.Weight\nstatic let bold: Font.Weight\nstatic let heavy: Font.Weight\nstatic let light: Font.Weight\nstatic let medium: Font.Weight\nstatic let regular: Font.Weight\nstatic let semibold: Font.Weight\nstatic let ultraLight: Font.Weight"
    },
    {
        "title": "Text.TruncationMode.middle",
        "url": "https://developer.apple.com/documentation/swiftui/text/truncationmode/middle",
        "html": "Discussion\n\nUse this kind of truncation to omit characters from the middle of the string. For example, you could truncate the English alphabet as \u201cab\u2026yz\u201d.\n\nSee Also\nGetting text truncation modes\ncase head\nTruncate at the beginning of the line.\ncase tail\nTruncate at the end of the line."
    },
    {
        "title": "black",
        "url": "https://developer.apple.com/documentation/swiftui/font/weight/black",
        "html": "See Also\nGetting font weights\nstatic let bold: Font.Weight\nstatic let heavy: Font.Weight\nstatic let light: Font.Weight\nstatic let medium: Font.Weight\nstatic let regular: Font.Weight\nstatic let semibold: Font.Weight\nstatic let thin: Font.Weight\nstatic let ultraLight: Font.Weight"
    },
    {
        "title": "entries(from:mode:)",
        "url": "https://developer.apple.com/documentation/swiftui/everyminutetimelineschedule/entries(from:mode:)",
        "html": "Parameters\nstartDate\n\nThe date from which the sequence begins.\n\nmode\n\nThe mode for the update schedule.\n\nReturn Value\n\nA sequence of per-minute dates in ascending order.\n\nDiscussion\n\nA TimelineView that you create with an every minute schedule calls this method to ask the schedule when to update its content. The method returns a sequence of per-minute dates in increasing order, from earliest to latest, that represents when the timeline view updates.\n\nFor a startDate that\u2019s exactly minute-aligned, the schedule\u2019s sequence of dates starts at that time. Otherwise, it starts at the beginning of the specified minute. For example, for start dates of both 10:09:32 and 10:09:00, the first entry in the sequence is 10:09:00.\n\nSee Also\nGetting the sequence of dates\nstruct Entries\nThe sequence of dates in an every minute schedule."
    },
    {
        "title": "entries(from:mode:)",
        "url": "https://developer.apple.com/documentation/swiftui/periodictimelineschedule/entries(from:mode:)",
        "html": "Discussion\n\nA TimelineView that you create with a schedule calls this method to ask the schedule when to update its content. The method returns a sequence of equally spaced dates in increasing order that represent points in time when the timeline view should update.\n\nThe schedule defines its periodicity and phase aligment based on the parameters you pass to its init(from:by:) initializer. For example, for a startDate and interval of 10:09:30 and 60 seconds, the schedule prepares to issue dates half past each minute. The startDate that you pass to the entries(from:mode:) method then dictates the first date of the sequence as the beginning of the interval that the start date overlaps. Continuing the example above, a start date of 10:34:45 causes the first sequence entry to be 10:34:30, because that\u2019s the start of the interval in which the start date appears.\n\nSee Also\nGetting the sequence of dates\nstruct Entries\nThe sequence of dates in periodic schedule."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/everyminutetimelineschedule/init()",
        "html": "Discussion\n\nUse the entries(from:mode:) method to get the sequence of dates."
    },
    {
        "title": "compressed",
        "url": "https://developer.apple.com/documentation/swiftui/font/width/compressed",
        "html": "See Also\nGetting standard font widths\nstatic let condensed: Font.Width\nstatic let expanded: Font.Width\nstatic let standard: Font.Width"
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/explicittimelineschedule/init(_:)",
        "html": "Parameters\ndates\n\nThe sequence of dates at which a timeline view updates. Use a monotonically increasing sequence of dates, and ensure that at least one is in the future.\n\nDiscussion\n\nUse the entries(from:mode:) method to get the sequence of dates."
    },
    {
        "title": "Text.TruncationMode.head",
        "url": "https://developer.apple.com/documentation/swiftui/text/truncationmode/head",
        "html": "Discussion\n\nUse this kind of truncation to omit characters from the beginning of the string. For example, you could truncate the English alphabet as \u201c\u2026wxyz\u201d.\n\nSee Also\nGetting text truncation modes\ncase middle\nTruncate in the middle of the line.\ncase tail\nTruncate at the end of the line."
    },
    {
        "title": "opacity",
        "url": "https://developer.apple.com/documentation/swiftui/color/resolved/opacity",
        "html": "Discussion\n\nA value of 0 means 100% transparency, while a value of 1 means 100% opacity."
    },
    {
        "title": "init(colorSpace:red:green:blue:opacity:)",
        "url": "https://developer.apple.com/documentation/swiftui/color/resolved/init(colorspace:red:green:blue:opacity:)",
        "html": "Parameters\ncolorSpace\n\nThe profile that specifies how to interpret the color for display. The default is Color.RGBColorSpace.sRGB.\n\nred\n\nThe amount of red in the color.\n\ngreen\n\nThe amount of green in the color.\n\nblue\n\nThe amount of blue in the color.\n\nopacity\n\nAn optional degree of opacity, given in the range 0 to 1. A value of 0 means 100% transparency, while a value of 1 means 100% opacity. The default is 1.\n\nDiscussion\n\nA standard sRGB color space clamps each color component \u2014 red, green, and blue \u2014 to a range of 0 to 1, but SwiftUI colors use an extended sRGB color space, so you can use component values outside that range. This makes it possible to create colors using the Color.RGBColorSpace.sRGB or Color.RGBColorSpace.sRGBLinear color space that make full use of the wider gamut of a diplay that supports Color.RGBColorSpace.displayP3."
    },
    {
        "title": "cgColor",
        "url": "https://developer.apple.com/documentation/swiftui/color/resolved/cgcolor",
        "html": "Discussion\n\nYou can get a CGColor instance from a resolved color."
    },
    {
        "title": "shouldMerge(previous:value:time:context:)",
        "url": "https://developer.apple.com/documentation/swiftui/customanimation/shouldmerge(previous:value:time:context:)-9171c",
        "html": "Parameters\nprevious\n\nThe previous running animation.\n\nvalue\n\nThe vector to animate towards.\n\ntime\n\nThe amount of time since the start of the previous animation.\n\ncontext\n\nAn instance of AnimationContext that provides access to state and the animation environment.\n\nReturn Value\n\nA Boolean value of true if the animation should merge with the previous animation; otherwise, false.\n\nDiscussion\n\nWhen a view creates a new animation on an animatable value that already has a running animation of the same animation type, the system calls the shouldMerge(previous:value:time:context:) method on the new instance to determine whether it can merge the two instance. Implement this method if the animation can merge with another instance. The default implementation returns false.\n\nIf shouldMerge(previous:value:time:context:) returns true, the system merges the new animation instance with the previous animation. The system provides to the new instance the state and elapsed time from the previous one. Then it removes the previous animation.\n\nIf this method returns false, the system doesn\u2019t merge the animation with the previous one. Instead, both animations run together and the system combines their results.\n\nIf your custom animation needs to maintain state between calls to the shouldMerge(previous:value:time:context:) method, store the state data in context. This makes the data available to the method next time the system calls it. To learn more, see AnimationContext."
    },
    {
        "title": "init(edge:)",
        "url": "https://developer.apple.com/documentation/swiftui/pushtransition/init(edge:)",
        "html": "See Also\nCreating the transition\nvar edge: Edge\nThe edge from which the view will be animated in."
    },
    {
        "title": "edge",
        "url": "https://developer.apple.com/documentation/swiftui/pushtransition/edge",
        "html": "See Also\nCreating the transition\ninit(edge: Edge)\nCreates a transition that animates a view by moving and fading it."
    },
    {
        "title": "PageTabViewStyle.IndexDisplayMode",
        "url": "https://developer.apple.com/documentation/swiftui/pagetabviewstyle/indexdisplaymode",
        "html": "Topics\nGetting the modes\nstatic let always: PageTabViewStyle.IndexDisplayMode\nAlways display an index view regardless of page count\nstatic let automatic: PageTabViewStyle.IndexDisplayMode\nDisplays an index view when there are more than one page\nstatic let never: PageTabViewStyle.IndexDisplayMode\nNever display an index view\nRelationships\nConforms To\nSendable\nSee Also\nCreating a page tab view style\ninit(indexDisplayMode: PageTabViewStyle.IndexDisplayMode)\nCreates a new PageTabViewStyle with an index display mode"
    },
    {
        "title": "init(indexDisplayMode:)",
        "url": "https://developer.apple.com/documentation/swiftui/pagetabviewstyle/init(indexdisplaymode:)",
        "html": "See Also\nCreating a page tab view style\nstruct IndexDisplayMode\nA style for displaying the page index view"
    },
    {
        "title": "anchor",
        "url": "https://developer.apple.com/documentation/swiftui/scaletransition/anchor",
        "html": "See Also\nCreating the transition\ninit(Double, anchor: UnitPoint)\nCreates a transition that scales the view by the specified amount.\nvar scale: Double\nThe amount to scale the view by."
    },
    {
        "title": "init(edge:)",
        "url": "https://developer.apple.com/documentation/swiftui/movetransition/init(edge:)",
        "html": "See Also\nCreating the transition\nvar edge: Edge\nThe edge to move the view towards."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/carouseltabviewstyle/init()",
        "html": "Deprecated\n\nUse verticalPage instead."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/offsettransition/init(_:)",
        "html": "See Also\nCreating the transition\nvar offset: CGSize\nThe amount to offset the view by."
    },
    {
        "title": "properties",
        "url": "https://developer.apple.com/documentation/swiftui/transition/properties-3v8pe",
        "html": "Discussion\n\nDefaults to TransitionProperties()."
    },
    {
        "title": "edge",
        "url": "https://developer.apple.com/documentation/swiftui/movetransition/edge",
        "html": "See Also\nCreating the transition\ninit(edge: Edge)\nCreates a transition that moves the view away, towards the specified edge of the view."
    },
    {
        "title": "offset",
        "url": "https://developer.apple.com/documentation/swiftui/offsettransition/offset",
        "html": "See Also\nCreating the transition\ninit(CGSize)\nCreates a transition that offset the view by the specified amount."
    },
    {
        "title": "scale",
        "url": "https://developer.apple.com/documentation/swiftui/scaletransition/scale",
        "html": "See Also\nCreating the transition\ninit(Double, anchor: UnitPoint)\nCreates a transition that scales the view by the specified amount.\nvar anchor: UnitPoint\nThe anchor point to scale the view around."
    },
    {
        "title": "init(_:anchor:)",
        "url": "https://developer.apple.com/documentation/swiftui/scaletransition/init(_:anchor:)",
        "html": "See Also\nCreating the transition\nvar anchor: UnitPoint\nThe anchor point to scale the view around.\nvar scale: Double\nThe amount to scale the view by."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/prominentdetailnavigationsplitviewstyle/init()",
        "html": "Discussion\n\nYou can also use prominentDetail to construct this style."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/automaticnavigationsplitviewstyle/init()",
        "html": "Discussion\n\nUse automatic to construct this style."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/balancednavigationsplitviewstyle/init()",
        "html": "Discussion\n\nYou can also use balanced to construct this style."
    },
    {
        "title": "entries(from:mode:)",
        "url": "https://developer.apple.com/documentation/swiftui/animationtimelineschedule/entries(from:mode:)",
        "html": "Discussion\n\nWhen in .lowFrequency mode, return no entries, effectively pausing the animation."
    },
    {
        "title": "makeBody(configuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/switchtogglestyle/makebody(configuration:)",
        "html": "Parameters\nconfiguration\n\nThe properties of the toggle, including a label and a binding to the toggle\u2019s state.\n\nReturn Value\n\nA view that represents a switch.\n\nDiscussion\n\nSwiftUI implements this required method of the ToggleStyle protocol to define the behavior and appearance of the switch toggle style. Don\u2019t call this method directly. Rather, the system calls this method for each Toggle instance in a view hierarchy that\u2019s styled as a switch."
    },
    {
        "title": "subscript(dynamicMember:)",
        "url": "https://developer.apple.com/documentation/swiftui/observedobject/wrapper/subscript(dynamicmember:)",
        "html": "Parameters\nkeyPath\n\nA key path to a specific value.\n\nReturn Value\n\nA new binding."
    },
    {
        "title": "Image.Interpolation.low",
        "url": "https://developer.apple.com/documentation/swiftui/image/interpolation/low",
        "html": "See Also\nGetting interpolation options\ncase high\nA value that indicates a high level of interpolation quality, which may slow down image rendering.\ncase medium\nA value that indicates a medium level of interpolation quality, between the low- and high-quality values.\ncase none\nA value that indicates SwiftUI doesn\u2019t interpolate image data."
    },
    {
        "title": "Font.Design.default",
        "url": "https://developer.apple.com/documentation/swiftui/font/design/default",
        "html": "See Also\nGetting font designs\ncase monospaced\ncase rounded\ncase serif"
    },
    {
        "title": "Image.Interpolation.high",
        "url": "https://developer.apple.com/documentation/swiftui/image/interpolation/high",
        "html": "See Also\nGetting interpolation options\ncase low\nA value that indicates a low level of interpolation quality, which may speed up image rendering.\ncase medium\nA value that indicates a medium level of interpolation quality, between the low- and high-quality values.\ncase none\nA value that indicates SwiftUI doesn\u2019t interpolate image data."
    },
    {
        "title": "Image.TemplateRenderingMode.original",
        "url": "https://developer.apple.com/documentation/swiftui/image/templaterenderingmode/original",
        "html": "Discussion\n\nFor system images created from the SF Symbol set, multicolor symbols respect the current foreground and accent colors.\n\nSee Also\nGetting rendering modes\ncase template\nA mode that renders all non-transparent pixels as the foreground color."
    },
    {
        "title": "invalidateTimelineContent()",
        "url": "https://developer.apple.com/documentation/swiftui/timelineview/context/invalidatetimelinecontent()",
        "html": "Discussion\n\nWhen entering Always On Display, the system might pre-render frames. If the content of these frames must change in a way that isn\u2019t reflected by the schedule or the timeline view\u2019s current bindings \u2014 for example, because the user changes the title of a future calendar event \u2014 call this method to request that the frames be regenerated."
    },
    {
        "title": "TimelineView.Context.Cadence.live",
        "url": "https://developer.apple.com/documentation/swiftui/timelineview/context/cadence-swift.enum/live",
        "html": "See Also\nGetting cadences\ncase seconds\nUpdates the view approximately once per second.\ncase minutes\nUpdates the view approximately once per minute."
    },
    {
        "title": "Font.Design.monospaced",
        "url": "https://developer.apple.com/documentation/swiftui/font/design/monospaced",
        "html": "See Also\nGetting font designs\ncase `default`\ncase rounded\ncase serif"
    },
    {
        "title": "TimelineView.Context.Cadence",
        "url": "https://developer.apple.com/documentation/swiftui/timelineview/context/cadence-swift.enum",
        "html": "Overview\n\nUse the cadence presented to content in a TimelineView to hide information that updates faster than the view\u2019s current update rate. For example, you could hide the millisecond component of a digital timer when the cadence is TimelineView.Context.Cadence.seconds or TimelineView.Context.Cadence.minutes.\n\nBecause this enumeration conforms to the Comparable protocol, you can compare cadences with relational operators. Slower cadences have higher values, so you could perform the check described above with the following comparison:\n\nlet hideMilliseconds = cadence > .live\n\nTopics\nGetting cadences\ncase live\nUpdates the view continuously.\ncase seconds\nUpdates the view approximately once per second.\ncase minutes\nUpdates the view approximately once per minute.\nRelationships\nConforms To\nComparable\nEquatable\nHashable\nSendable\nSee Also\nGetting the cadence\nlet cadence: TimelineView<Schedule, Content>.Context.Cadence\nThe rate at which the timeline updates the view."
    },
    {
        "title": "makeBody(configuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/plainbuttonstyle/makebody(configuration:)",
        "html": "Parameters\nconfiguration\n\nThe properties of the button.\n\nDiscussion\n\nThe system calls this method for each Button instance in a view hierarchy where this style is the current button style."
    },
    {
        "title": "TimelineView.Context.Cadence.minutes",
        "url": "https://developer.apple.com/documentation/swiftui/timelineview/context/cadence-swift.enum/minutes",
        "html": "See Also\nGetting cadences\ncase live\nUpdates the view continuously.\ncase seconds\nUpdates the view approximately once per second."
    },
    {
        "title": "Image.TemplateRenderingMode.template",
        "url": "https://developer.apple.com/documentation/swiftui/image/templaterenderingmode/template",
        "html": "See Also\nGetting rendering modes\ncase original\nA mode that renders pixels of bitmap images as-is."
    },
    {
        "title": "init(alternatesRowBackgrounds:)",
        "url": "https://developer.apple.com/documentation/swiftui/borderedliststyle/init(alternatesrowbackgrounds:)",
        "html": "Deprecated\n\nUse the bordered style and add the alternatingRowBackgrounds(_:) view modifier instead.\n\nSee Also\nCreating the list style\ninit()\nCreates a bordered list style."
    },
    {
        "title": "makeBody(configuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/cardbuttonstyle/makebody(configuration:)",
        "html": "Parameters\nconfiguration\n\nThe properties of the button.\n\nDiscussion\n\nThe system calls this method for each Button instance in a view hierarchy in which CardButtonStyle is the current button style."
    },
    {
        "title": "Font.Design.serif",
        "url": "https://developer.apple.com/documentation/swiftui/font/design/serif",
        "html": "See Also\nGetting font designs\ncase `default`\ncase monospaced\ncase rounded"
    },
    {
        "title": "makeBody(configuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessorybaractionbuttonstyle/makebody(configuration:)",
        "html": "Parameters\nconfiguration\n\nThe properties of the button.\n\nDiscussion\n\nThe system calls this method for each Button instance in a view hierarchy where this style is the current button style."
    },
    {
        "title": "VerticalPageTabViewStyle.TransitionStyle",
        "url": "https://developer.apple.com/documentation/swiftui/verticalpagetabviewstyle/transitionstyle",
        "html": "Topics\nGetting the transition styles\nstatic let automatic: VerticalPageTabViewStyle.TransitionStyle\nAutomatic transition style\nstatic let blur: VerticalPageTabViewStyle.TransitionStyle\nA transition style that blurs content between each tab\nstatic let identity: VerticalPageTabViewStyle.TransitionStyle\nA transition style that has no animation between each tab\nSee Also\nCreating the tab view style\ninit()\ninit(transitionStyle: VerticalPageTabViewStyle.TransitionStyle)\nCreates a new VerticalPageTabViewStyle with a transition style."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/columnsformstyle/init()",
        "html": "Discussion\n\nDon\u2019t call this initializer directly. Instead, use the columns static variable to create this style:\n\nForm {\n   ...\n}\n.formStyle(.columns)\n"
    },
    {
        "title": "bottomLeading",
        "url": "https://developer.apple.com/documentation/swiftui/anchor/source/bottomleading",
        "html": "See Also\nGetting bottom anchor sources\nstatic var bottomTrailing: Anchor<CGPoint>.Source\nAvailable when Value is CGPoint.\nstatic var bottom: Anchor<CGPoint>.Source\nAvailable when Value is CGPoint."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/verticalpagetabviewstyle/init()",
        "html": "See Also\nCreating the tab view style\ninit(transitionStyle: VerticalPageTabViewStyle.TransitionStyle)\nCreates a new VerticalPageTabViewStyle with a transition style.\nstruct TransitionStyle\nA transition style used between tabs."
    },
    {
        "title": "init(backgroundDisplayMode:)",
        "url": "https://developer.apple.com/documentation/swiftui/pageindexviewstyle/init(backgrounddisplaymode:)",
        "html": "Parameters\nbackgroundDisplayMode\n\nThe display mode of the background of any page index views receiving this style\n\nSee Also\nCreating the control group style\nstruct BackgroundDisplayMode\nThe background style for the page index view."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/insetliststyle/init()",
        "html": "See Also\nCreating the list style\ninit(alternatesRowBackgrounds: Bool)\nCreates an inset list style with optional alternating row backgrounds.\nDeprecated"
    },
    {
        "title": "init(alternatesRowBackgrounds:)",
        "url": "https://developer.apple.com/documentation/swiftui/insetliststyle/init(alternatesrowbackgrounds:)",
        "html": "Deprecated\n\nUse the inset style and add the alternatingRowBackgrounds(_:) view modifier instead.\n\nSee Also\nCreating the list style\ninit()\nCreates an inset list style."
    },
    {
        "title": "PageIndexViewStyle.BackgroundDisplayMode",
        "url": "https://developer.apple.com/documentation/swiftui/pageindexviewstyle/backgrounddisplaymode",
        "html": "Topics\nGetting the display modes\nstatic let automatic: PageIndexViewStyle.BackgroundDisplayMode\nBackground will use the default for the platform.\nstatic let always: PageIndexViewStyle.BackgroundDisplayMode\nBackground is always displayed behind the page index view.\nstatic let interactive: PageIndexViewStyle.BackgroundDisplayMode\nBackground is only shown while the index view is interacted with.\nstatic let never: PageIndexViewStyle.BackgroundDisplayMode\nBackground is never displayed behind the page index view.\nRelationships\nConforms To\nSendable\nSee Also\nCreating the control group style\ninit(backgroundDisplayMode: PageIndexViewStyle.BackgroundDisplayMode)\nCreates a page index view style."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/automaticformstyle/init()",
        "html": "Discussion\n\nDon\u2019t call this initializer directly. Instead, use the automatic static variable to create this style:\n\nForm {\n   ...\n}\n.formStyle(.automatic)\n"
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/groupedformstyle/init()",
        "html": "Discussion\n\nDon\u2019t call this initializer directly. Instead, use the grouped static variable to create this style:\n\nForm {\n   ...\n}\n.formStyle(.grouped)\n"
    },
    {
        "title": "makeBody(configuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/borderedbuttonstyle/makebody(configuration:)",
        "html": "Parameters\nconfiguration\n\nThe properties of the button.\n\nDiscussion\n\nThe system calls this method for each Button instance in a view hierarchy where this style is the current button style."
    },
    {
        "title": "makeBody(configuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessorybarbuttonstyle/makebody(configuration:)",
        "html": "Parameters\nconfiguration\n\nThe properties of the button.\n\nDiscussion\n\nThe system calls this method for each Button instance in a view hierarchy where this style is the current button style."
    },
    {
        "title": "makeBody(configuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/borderlessbuttonstyle/makebody(configuration:)",
        "html": "Parameters\nconfiguration\n\nThe properties of the button.\n\nDiscussion\n\nThe system calls this method for each Button instance in a view hierarchy where this style is the current button style."
    },
    {
        "title": "nsSortDescriptors",
        "url": "https://developer.apple.com/documentation/swiftui/fetchrequest/configuration/nssortdescriptors",
        "html": "Discussion\n\nSet this configuration value to cause a FetchRequest to execute a fetch with a new collection of NSSortDescriptor instances. If you want to use SortDescriptor instances, set sortDescriptors instead.\n\nAccess this value of a FetchRequest.Configuration structure for a given request by using the nsSortDescriptors property on the associated FetchedResults instance, either directly or through a Binding.\n\nSee Also\nSetting sort descriptors\nvar sortDescriptors: [SortDescriptor<Result>]\nThe request\u2019s sort descriptors, accessed as value types.\nAvailable when Result inherits NSManagedObject."
    },
    {
        "title": "makeBody(configuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/linkbuttonstyle/makebody(configuration:)",
        "html": "Parameters\nconfiguration\n\nThe properties of the button.\n\nDiscussion\n\nThe system calls this method for each Button instance in a view hierarchy where this style is the current button style."
    },
    {
        "title": "sortDescriptors",
        "url": "https://developer.apple.com/documentation/swiftui/fetchrequest/configuration/sortdescriptors",
        "html": "Discussion\n\nSet this configuration value to cause a FetchRequest to execute a fetch with a new collection of SortDescriptor instances. If you want to use NSSortDescriptor instances, set nsSortDescriptors instead.\n\nAccess this value of a FetchRequest.Configuration structure for a given request by using the sortDescriptors property on the associated FetchedResults instance, either directly or through a Binding.\n\nSee Also\nSetting sort descriptors\nvar nsSortDescriptors: [NSSortDescriptor]\nThe request\u2019s sort descriptors, accessed as reference types."
    },
    {
        "title": "nsPredicate",
        "url": "https://developer.apple.com/documentation/swiftui/fetchrequest/configuration/nspredicate",
        "html": "Discussion\n\nSet this configuration value to cause a FetchRequest to execute a fetch with a new predicate.\n\nAccess this value of a FetchRequest.Configuration structure for a given request by using the nsPredicate property on the associated FetchedResults instance, either directly or through a Binding."
    },
    {
        "title": "makeBody(configuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/defaultbuttonstyle/makebody(configuration:)",
        "html": "Parameters\nconfiguration\n\nThe properties of the button.\n\nDiscussion\n\nThe system calls this method for each Button instance in a view hierarchy where this style is the current button style."
    },
    {
        "title": "destructive(_:action:)",
        "url": "https://developer.apple.com/documentation/swiftui/alert/button/destructive(_:action:)",
        "html": "Parameters\nlabel\n\nThe text to display on the button.\n\naction\n\nA closure to execute when the user taps or presses the button.\n\nReturn Value\n\nAn alert button that indicates a destructive action.\n\nSee Also\nGetting a button\nstatic func `default`(Text, action: (() -> Void)?) -> Alert.Button\nCreates an alert button with the default style.\nstatic func cancel((() -> Void)?) -> Alert.Button\nCreates an alert button that indicates cancellation, with a system-provided label.\nstatic func cancel(Text, action: (() -> Void)?) -> Alert.Button\nCreates an alert button that indicates cancellation, with a custom label."
    },
    {
        "title": "cancel(_:action:)",
        "url": "https://developer.apple.com/documentation/swiftui/alert/button/cancel(_:action:)",
        "html": "Parameters\nlabel\n\nThe text to display on the button.\n\naction\n\nA closure to execute when the user taps or presses the button.\n\nReturn Value\n\nAn alert button that indicates cancellation.\n\nSee Also\nGetting a button\nstatic func `default`(Text, action: (() -> Void)?) -> Alert.Button\nCreates an alert button with the default style.\nstatic func cancel((() -> Void)?) -> Alert.Button\nCreates an alert button that indicates cancellation, with a system-provided label.\nstatic func destructive(Text, action: (() -> Void)?) -> Alert.Button\nCreates an alert button with a style that indicates a destructive action."
    },
    {
        "title": "init(transitionStyle:)",
        "url": "https://developer.apple.com/documentation/swiftui/verticalpagetabviewstyle/init(transitionstyle:)",
        "html": "See Also\nCreating the tab view style\ninit()\nstruct TransitionStyle\nA transition style used between tabs."
    },
    {
        "title": "init(tint:)",
        "url": "https://developer.apple.com/documentation/swiftui/lineargaugestyle/init(tint:)-8drum",
        "html": "Deprecated\n\nUse the tint(_:) view modifier instead.\n\nSee Also\nDeprecated initializers\ninit(tint: Gradient)\nCreates a linear gauge style with a tint gradient.\nDeprecated"
    },
    {
        "title": "makeBody(configuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/defaulttogglestyle/makebody(configuration:)",
        "html": "Parameters\nconfiguration\n\nThe properties of the toggle, including a label and a binding to the toggle\u2019s state.\n\nReturn Value\n\nA view that acts as a toggle.\n\nDiscussion\n\nSwiftUI implements this required method of the ToggleStyle protocol to define the behavior and appearance of the automatic toggle style. Don\u2019t call this method directly. Rather, the system calls this method for each Toggle instance in a view hierarchy that needs the default style."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/borderedliststyle/init()",
        "html": "See Also\nCreating the list style\ninit(alternatesRowBackgrounds: Bool)\nCreates a bordered list style with optional alternating row backgrounds.\nDeprecated"
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/buttontogglestyle/init()",
        "html": "Discussion\n\nDon\u2019t call this initializer directly. Instead, use the button static variable to create this style:\n\nToggle(isOn: $isFlagged) {\n    Label(\"Flag\", systemImage: \"flag.fill\")\n}\n.toggleStyle(.button)\n"
    },
    {
        "title": "id",
        "url": "https://developer.apple.com/documentation/swiftui/sectionedfetchresults/section/id",
        "html": "Discussion\n\nSpecify the key path that the entities share this value with by setting the SectionedFetchRequest instance\u2019s sectionIdentifier parameter during initialization, or by modifying the corresponding SectionedFetchResults instance\u2019s sectionIdentifier property."
    },
    {
        "title": "buildBlock()",
        "url": "https://developer.apple.com/documentation/swiftui/widgetbundlebuilder/buildblock()",
        "html": "See Also\nBundling widgets\nstatic func buildBlock<Content>(Content) -> some Widget\nBuilds a single Widget written as a child view (e..g, { MyWidget() }) through unmodified.\nstatic func buildBlock<C0, C1>(C0, C1) -> some Widget\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some Widget\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildLimitedAvailability(some Widget) -> Widget & _LimitedAvailabilityWidgetMarker\nProcesses widget content for a conditional compiler-control statement that performs an availability check.\nstatic func buildOptional((Widget & _LimitedAvailabilityWidgetMarker)?) -> some Widget\nProduces an optional widget for conditional statements in multi-statement closures that\u2019s only visible when the condition evaluates to true."
    },
    {
        "title": "ScrollTransitionConfiguration.Threshold",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltransitionconfiguration/threshold",
        "html": "Topics\nGetting the threshold\nstatic var centered: ScrollTransitionConfiguration.Threshold\nThe target view is centered within the container\nstatic let hidden: ScrollTransitionConfiguration.Threshold\nstatic let visible: ScrollTransitionConfiguration.Threshold\nstatic func visible(Double) -> ScrollTransitionConfiguration.Threshold\nThe target view is visible by the given amount, where zero is fully hidden, and one is fully visible.\nModifying the threshold\nfunc inset(by: Double) -> ScrollTransitionConfiguration.Threshold\nReturns a threshold that is met when the target view is closer to the center of the container by distance. Use negative values to move the threshold away from the center.\nfunc interpolated(towards: ScrollTransitionConfiguration.Threshold, amount: Double) -> ScrollTransitionConfiguration.Threshold\nCreates a new threshold that combines this threshold value with another threshold, interpolated by the given amount.\nSee Also\nAccessing the configuration\nfunc animation(Animation) -> ScrollTransitionConfiguration\nSets the animation with which the transition will be applied.\nfunc threshold(ScrollTransitionConfiguration.Threshold) -> ScrollTransitionConfiguration\nSets the threshold at which the view will be considered fully visible."
    },
    {
        "title": "init(rawValue:)",
        "url": "https://developer.apple.com/documentation/swiftui/searchsuggestionsplacement/set/init(rawvalue:)",
        "html": "See Also\nCreating a set\nvar rawValue: Int\nThe raw value that records the search suggestion display modes."
    },
    {
        "title": "buildBlock(_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/widgetbundlebuilder/buildblock(_:_:_:)",
        "html": "See Also\nBundling widgets\nstatic func buildBlock() -> some Widget\nBuilds an empty Widget from a block containing no statements, { }.\nstatic func buildBlock<Content>(Content) -> some Widget\nBuilds a single Widget written as a child view (e..g, { MyWidget() }) through unmodified.\nstatic func buildBlock<C0, C1>(C0, C1) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some Widget\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildLimitedAvailability(some Widget) -> Widget & _LimitedAvailabilityWidgetMarker\nProcesses widget content for a conditional compiler-control statement that performs an availability check.\nstatic func buildOptional((Widget & _LimitedAvailabilityWidgetMarker)?) -> some Widget\nProduces an optional widget for conditional statements in multi-statement closures that\u2019s only visible when the condition evaluates to true."
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/widgetbundlebuilder/buildblock(_:_:_:_:_:_:_:_:_:_:)",
        "html": "See Also\nBundling widgets\nstatic func buildBlock() -> some Widget\nBuilds an empty Widget from a block containing no statements, { }.\nstatic func buildBlock<Content>(Content) -> some Widget\nBuilds a single Widget written as a child view (e..g, { MyWidget() }) through unmodified.\nstatic func buildBlock<C0, C1>(C0, C1) -> some Widget\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some Widget\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildLimitedAvailability(some Widget) -> Widget & _LimitedAvailabilityWidgetMarker\nProcesses widget content for a conditional compiler-control statement that performs an availability check.\nstatic func buildOptional((Widget & _LimitedAvailabilityWidgetMarker)?) -> some Widget\nProduces an optional widget for conditional statements in multi-statement closures that\u2019s only visible when the condition evaluates to true."
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/widgetbundlebuilder/buildblock(_:_:_:_:_:_:_:_:_:)",
        "html": "See Also\nBundling widgets\nstatic func buildBlock() -> some Widget\nBuilds an empty Widget from a block containing no statements, { }.\nstatic func buildBlock<Content>(Content) -> some Widget\nBuilds a single Widget written as a child view (e..g, { MyWidget() }) through unmodified.\nstatic func buildBlock<C0, C1>(C0, C1) -> some Widget\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some Widget\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildLimitedAvailability(some Widget) -> Widget & _LimitedAvailabilityWidgetMarker\nProcesses widget content for a conditional compiler-control statement that performs an availability check.\nstatic func buildOptional((Widget & _LimitedAvailabilityWidgetMarker)?) -> some Widget\nProduces an optional widget for conditional statements in multi-statement closures that\u2019s only visible when the condition evaluates to true."
    },
    {
        "title": "init(alternatesRowBackgrounds:)",
        "url": "https://developer.apple.com/documentation/swiftui/insettablestyle/init(alternatesrowbackgrounds:)",
        "html": "Deprecated\n\nUse the inset style and add the alternatingRowBackgrounds(_:) view modifier instead.\n\nSee Also\nCreating the table style\ninit()\nCreates a default inset table style, with alternating row backgrounds."
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/widgetbundlebuilder/buildblock(_:_:_:_:_:_:_:)",
        "html": "See Also\nBundling widgets\nstatic func buildBlock() -> some Widget\nBuilds an empty Widget from a block containing no statements, { }.\nstatic func buildBlock<Content>(Content) -> some Widget\nBuilds a single Widget written as a child view (e..g, { MyWidget() }) through unmodified.\nstatic func buildBlock<C0, C1>(C0, C1) -> some Widget\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some Widget\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildLimitedAvailability(some Widget) -> Widget & _LimitedAvailabilityWidgetMarker\nProcesses widget content for a conditional compiler-control statement that performs an availability check.\nstatic func buildOptional((Widget & _LimitedAvailabilityWidgetMarker)?) -> some Widget\nProduces an optional widget for conditional statements in multi-statement closures that\u2019s only visible when the condition evaluates to true."
    },
    {
        "title": "center",
        "url": "https://developer.apple.com/documentation/swiftui/anchor/source/center",
        "html": "See Also\nGetting middle anchor sources\nstatic var leading: Anchor<CGPoint>.Source\nAvailable when Value is CGPoint.\nstatic var trailing: Anchor<CGPoint>.Source\nAvailable when Value is CGPoint."
    },
    {
        "title": "buildExpression(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/widgetbundlebuilder/buildexpression(_:)",
        "html": "See Also\nBundling widgets\nstatic func buildBlock() -> some Widget\nBuilds an empty Widget from a block containing no statements, { }.\nstatic func buildBlock<Content>(Content) -> some Widget\nBuilds a single Widget written as a child view (e..g, { MyWidget() }) through unmodified.\nstatic func buildBlock<C0, C1>(C0, C1) -> some Widget\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some Widget\nstatic func buildLimitedAvailability(some Widget) -> Widget & _LimitedAvailabilityWidgetMarker\nProcesses widget content for a conditional compiler-control statement that performs an availability check.\nstatic func buildOptional((Widget & _LimitedAvailabilityWidgetMarker)?) -> some Widget\nProduces an optional widget for conditional statements in multi-statement closures that\u2019s only visible when the condition evaluates to true."
    },
    {
        "title": "unitPoint(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/anchor/source/unitpoint(_:)",
        "html": "See Also\nGetting point anchor sources\nstatic func point(CGPoint) -> Anchor<Value>.Source\nAvailable when Value is CGPoint."
    },
    {
        "title": "buildBlock(_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/widgetbundlebuilder/buildblock(_:_:)",
        "html": "See Also\nBundling widgets\nstatic func buildBlock() -> some Widget\nBuilds an empty Widget from a block containing no statements, { }.\nstatic func buildBlock<Content>(Content) -> some Widget\nBuilds a single Widget written as a child view (e..g, { MyWidget() }) through unmodified.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some Widget\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildLimitedAvailability(some Widget) -> Widget & _LimitedAvailabilityWidgetMarker\nProcesses widget content for a conditional compiler-control statement that performs an availability check.\nstatic func buildOptional((Widget & _LimitedAvailabilityWidgetMarker)?) -> some Widget\nProduces an optional widget for conditional statements in multi-statement closures that\u2019s only visible when the condition evaluates to true."
    },
    {
        "title": "leading",
        "url": "https://developer.apple.com/documentation/swiftui/anchor/source/leading",
        "html": "See Also\nGetting middle anchor sources\nstatic var center: Anchor<CGPoint>.Source\nAvailable when Value is CGPoint.\nstatic var trailing: Anchor<CGPoint>.Source\nAvailable when Value is CGPoint."
    },
    {
        "title": "topLeading",
        "url": "https://developer.apple.com/documentation/swiftui/anchor/source/topleading",
        "html": "See Also\nGetting top anchor sources\nstatic var top: Anchor<CGPoint>.Source\nAvailable when Value is CGPoint.\nstatic var topTrailing: Anchor<CGPoint>.Source\nAvailable when Value is CGPoint."
    },
    {
        "title": "topTrailing",
        "url": "https://developer.apple.com/documentation/swiftui/anchor/source/toptrailing",
        "html": "See Also\nGetting top anchor sources\nstatic var topLeading: Anchor<CGPoint>.Source\nAvailable when Value is CGPoint.\nstatic var top: Anchor<CGPoint>.Source\nAvailable when Value is CGPoint."
    },
    {
        "title": "init(alternatesRowBackgrounds:)",
        "url": "https://developer.apple.com/documentation/swiftui/borderedtablestyle/init(alternatesrowbackgrounds:)",
        "html": "Deprecated\n\nUse the bordered style and add the alternatingRowBackgrounds(_:) view modifier instead.\n\nSee Also\nCreating the table style\ninit()\nCreates a default bordered table style, with alternating row backgrounds."
    },
    {
        "title": "trailing",
        "url": "https://developer.apple.com/documentation/swiftui/anchor/source/trailing",
        "html": "See Also\nGetting middle anchor sources\nstatic var leading: Anchor<CGPoint>.Source\nAvailable when Value is CGPoint.\nstatic var center: Anchor<CGPoint>.Source\nAvailable when Value is CGPoint."
    },
    {
        "title": "DigitalCrownRotationalSensitivity.low",
        "url": "https://developer.apple.com/documentation/swiftui/digitalcrownrotationalsensitivity/low",
        "html": "See Also\nGetting sensitivity options\ncase medium\nMedium sensitivity.\ncase high\nHigh sensitivity."
    },
    {
        "title": "callAsFunction()",
        "url": "https://developer.apple.com/documentation/swiftui/refreshaction/callasfunction()",
        "html": "Discussion\n\nDon\u2019t call this method directly. SwiftUI calls it when you call the RefreshAction structure that you get from the Environment:\n\nstruct RefreshableView: View {\n    @Environment(\\.refresh) private var refresh\n\n\n    var body: some View {\n        Button(\"Refresh\") {\n            Task {\n                await refresh?()  // Implicitly calls refresh.callAsFunction()\n            }\n        }\n        .disabled(refresh == nil)\n    }\n}\n\n\nFor information about how Swift uses the callAsFunction() method to simplify call site syntax, see Methods with Special Names in The Swift Programming Language. For information about asynchronous operations in Swift, see Concurrency."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/insettablestyle/init()",
        "html": "See Also\nCreating the table style\ninit(alternatesRowBackgrounds: Bool)\nCreates an inset table style with optional alternating row backgrounds.\nDeprecated"
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/borderedtablestyle/init()",
        "html": "See Also\nCreating the table style\ninit(alternatesRowBackgrounds: Bool)\nCreates an inset table style with optional alternating row backgrounds.\nDeprecated"
    },
    {
        "title": "italicText",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitysystemrotor/italictext",
        "html": "See Also\nIterating through text\nstatic var textFields: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all text fields.\nstatic var boldText: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all the ranges of bolded text.\nstatic var underlineText: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all the ranges of underlined text.\nstatic var misspelledWords: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all the ranges of mis-spelled words."
    },
    {
        "title": "buildBlock(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/widgetbundlebuilder/buildblock(_:_:_:_:)",
        "html": "See Also\nBundling widgets\nstatic func buildBlock() -> some Widget\nBuilds an empty Widget from a block containing no statements, { }.\nstatic func buildBlock<Content>(Content) -> some Widget\nBuilds a single Widget written as a child view (e..g, { MyWidget() }) through unmodified.\nstatic func buildBlock<C0, C1>(C0, C1) -> some Widget\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some Widget\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildLimitedAvailability(some Widget) -> Widget & _LimitedAvailabilityWidgetMarker\nProcesses widget content for a conditional compiler-control statement that performs an availability check.\nstatic func buildOptional((Widget & _LimitedAvailabilityWidgetMarker)?) -> some Widget\nProduces an optional widget for conditional statements in multi-statement closures that\u2019s only visible when the condition evaluates to true."
    },
    {
        "title": "init(tint:)",
        "url": "https://developer.apple.com/documentation/swiftui/circulargaugestyle/init(tint:)-2wl22",
        "html": "See Also\nCreating the gauge style\ninit()\nCreates a circular gauge.\ninit(tint: Color)\nCreates a circular gauge that draws with a specified color."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/circulargaugestyle/init()",
        "html": "See Also\nCreating the gauge style\ninit(tint: Color)\nCreates a circular gauge that draws with a specified color.\ninit(tint: Gradient)\nCreates a circular gauge that draws with a specified gradient."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/switchtogglestyle/init()",
        "html": "Discussion\n\nDon\u2019t call this initializer directly. Instead, use the switch static variable to create this style:\n\nToggle(\"Enhance Sound\", isOn: $isEnhanced)\n    .toggleStyle(.switch)\n"
    },
    {
        "title": "init(tint:)",
        "url": "https://developer.apple.com/documentation/swiftui/borderedbuttonstyle/init(tint:)",
        "html": "Deprecated\n\nUse tint(_:) instead."
    },
    {
        "title": "sortDescriptors",
        "url": "https://developer.apple.com/documentation/swiftui/sectionedfetchrequest/configuration/sortdescriptors",
        "html": "Discussion\n\nSet this configuration value to cause a SectionedFetchRequest to execute a fetch with a new collection of SortDescriptor instances. If you want to use NSSortDescriptor instances, set nsSortDescriptors instead. Use care to coordinate section and sort updates, as described in SectionedFetchRequest.Configuration.\n\nAccess this value for a given request by using the sortDescriptors property on the associated SectionedFetchResults instance, either directly or with a Binding.\n\nSee Also\nSetting sort descriptors\nvar nsSortDescriptors: [NSSortDescriptor]\nThe request\u2019s sort descriptors, accessed as reference types."
    },
    {
        "title": "nsSortDescriptors",
        "url": "https://developer.apple.com/documentation/swiftui/sectionedfetchrequest/configuration/nssortdescriptors",
        "html": "Discussion\n\nSet this configuration value to cause a SectionedFetchRequest to execute a fetch with a new collection of NSSortDescriptor instances. If you want to use SortDescriptor instances, set sortDescriptors instead. Use care to coordinate section and sort updates, as described in SectionedFetchRequest.Configuration.\n\nAccess this value for a given request by using the nsSortDescriptors property on the associated SectionedFetchResults instance, either directly or with a Binding.\n\nSee Also\nSetting sort descriptors\nvar sortDescriptors: [SortDescriptor<Result>]\nThe request\u2019s sort descriptors, accessed as value types.\nAvailable when SectionIdentifier conforms to Hashable and Result inherits NSManagedObject."
    },
    {
        "title": "default(_:action:)",
        "url": "https://developer.apple.com/documentation/swiftui/alert/button/default(_:action:)",
        "html": "Parameters\nlabel\n\nThe text to display on the button.\n\naction\n\nA closure to execute when the user taps or presses the button.\n\nReturn Value\n\nAn alert button with the default style.\n\nSee Also\nGetting a button\nstatic func cancel((() -> Void)?) -> Alert.Button\nCreates an alert button that indicates cancellation, with a system-provided label.\nstatic func cancel(Text, action: (() -> Void)?) -> Alert.Button\nCreates an alert button that indicates cancellation, with a custom label.\nstatic func destructive(Text, action: (() -> Void)?) -> Alert.Button\nCreates an alert button with a style that indicates a destructive action."
    },
    {
        "title": "cancel(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/alert/button/cancel(_:)",
        "html": "Parameters\naction\n\nA closure to execute when the user taps or presses the button.\n\nReturn Value\n\nAn alert button that indicates cancellation.\n\nDiscussion\n\nThe system automatically chooses locale-appropriate text for the button\u2019s label.\n\nSee Also\nGetting a button\nstatic func `default`(Text, action: (() -> Void)?) -> Alert.Button\nCreates an alert button with the default style.\nstatic func cancel(Text, action: (() -> Void)?) -> Alert.Button\nCreates an alert button that indicates cancellation, with a custom label.\nstatic func destructive(Text, action: (() -> Void)?) -> Alert.Button\nCreates an alert button with a style that indicates a destructive action."
    },
    {
        "title": "endIndex",
        "url": "https://developer.apple.com/documentation/swiftui/sectionedfetchresults/section/endindex",
        "html": "See Also\nGetting indices\nvar startIndex: Int\nThe index of the first entity in the section."
    },
    {
        "title": "sectionIdentifier",
        "url": "https://developer.apple.com/documentation/swiftui/sectionedfetchrequest/configuration/sectionidentifier",
        "html": "Discussion\n\nSet this configuration value to cause a SectionedFetchRequest to execute a fetch with a new section identifier. You can\u2019t change the section identifier type without creating a new fetch request. Use care to coordinate section and sort updates, as described in SectionedFetchRequest.Configuration.\n\nAccess this value for a given request by using the sectionIdentifier property on the associated SectionedFetchResults instance, either directly or with a Binding."
    },
    {
        "title": "nsPredicate",
        "url": "https://developer.apple.com/documentation/swiftui/sectionedfetchrequest/configuration/nspredicate",
        "html": "Discussion\n\nSet this configuration value to cause a SectionedFetchRequest to execute a fetch with a new predicate.\n\nAccess this value for a given request by using the nsPredicate property on the associated SectionedFetchResults instance, either directly or with a Binding."
    },
    {
        "title": "startIndex",
        "url": "https://developer.apple.com/documentation/swiftui/sectionedfetchresults/section/startindex",
        "html": "See Also\nGetting indices\nvar endIndex: Int\nThe index that\u2019s one greater than that of the last entity in the section."
    },
    {
        "title": "dismiss()",
        "url": "https://developer.apple.com/documentation/swiftui/presentationmode/dismiss()",
        "html": "Deprecated\n\nUse dismiss instead."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/defaulttogglestyle/init()",
        "html": "Discussion\n\nDon\u2019t call this initializer directly. Instead, use the automatic static variable to create this style:\n\nToggle(\"Enhance Sound\", isOn: $isEnhanced)\n    .toggleStyle(.automatic)\n"
    },
    {
        "title": "init(tint:)",
        "url": "https://developer.apple.com/documentation/swiftui/circularprogressviewstyle/init(tint:)",
        "html": "Deprecated\n\nUse the tint(_:) view modifier instead."
    },
    {
        "title": "bottom",
        "url": "https://developer.apple.com/documentation/swiftui/anchor/source/bottom",
        "html": "See Also\nGetting bottom anchor sources\nstatic var bottomTrailing: Anchor<CGPoint>.Source\nAvailable when Value is CGPoint.\nstatic var bottomLeading: Anchor<CGPoint>.Source\nAvailable when Value is CGPoint."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/anchor/source/init(_:)-3lj3x",
        "html": "See Also\nCreating an anchor source\ninit<T>([Anchor<T>.Source])"
    },
    {
        "title": "isPresented",
        "url": "https://developer.apple.com/documentation/swiftui/presentationmode/ispresented",
        "html": "Deprecated\n\nUse isPresented instead."
    },
    {
        "title": "subscript(dynamicMember:)",
        "url": "https://developer.apple.com/documentation/swiftui/presentationdetent/context/subscript(dynamicmember:)",
        "html": "Overview\n\nThis uses the environment from where the sheet is shown, not the environment where the presentation modifier is applied."
    },
    {
        "title": "always",
        "url": "https://developer.apple.com/documentation/swiftui/searchfieldplacement/navigationbardrawerdisplaymode/always",
        "html": "See Also\nGetting display modes\nstatic let automatic: SearchFieldPlacement.NavigationBarDrawerDisplayMode\nEnable hiding the search field in response to scrolling."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/searchfieldplacement/navigationbardrawerdisplaymode/automatic",
        "html": "See Also\nGetting display modes\nstatic let always: SearchFieldPlacement.NavigationBarDrawerDisplayMode\nAlways display the search field regardless of the scroll activity."
    },
    {
        "title": "regular",
        "url": "https://developer.apple.com/documentation/swiftui/material/regular",
        "html": "See Also\nGetting material types\nstatic let ultraThin: Material\nA mostly translucent material.\nstatic let thin: Material\nA material that\u2019s more translucent than opaque.\nstatic let thick: Material\nA material that\u2019s more opaque than translucent.\nstatic let ultraThick: Material\nA mostly opaque material.\nstatic let bar: Material\nA material matching the style of system toolbars."
    },
    {
        "title": "bar",
        "url": "https://developer.apple.com/documentation/swiftui/material/bar",
        "html": "See Also\nGetting material types\nstatic let ultraThin: Material\nA mostly translucent material.\nstatic let thin: Material\nA material that\u2019s more translucent than opaque.\nstatic let regular: Material\nA material that\u2019s somewhat translucent.\nstatic let thick: Material\nA material that\u2019s more opaque than translucent.\nstatic let ultraThick: Material\nA mostly opaque material."
    },
    {
        "title": "subscript(dynamicMember:)",
        "url": "https://developer.apple.com/documentation/swiftui/environmentobject/wrapper/subscript(dynamicmember:)",
        "html": "Parameters\nkeyPath\n\nA key path to a specific resulting value.\n\nReturn Value\n\nA new binding."
    },
    {
        "title": "ultraThick",
        "url": "https://developer.apple.com/documentation/swiftui/material/ultrathick",
        "html": "See Also\nGetting material types\nstatic let ultraThin: Material\nA mostly translucent material.\nstatic let thin: Material\nA material that\u2019s more translucent than opaque.\nstatic let regular: Material\nA material that\u2019s somewhat translucent.\nstatic let thick: Material\nA material that\u2019s more opaque than translucent.\nstatic let bar: Material\nA material matching the style of system toolbars."
    },
    {
        "title": "thin",
        "url": "https://developer.apple.com/documentation/swiftui/material/thin",
        "html": "See Also\nGetting material types\nstatic let ultraThin: Material\nA mostly translucent material.\nstatic let regular: Material\nA material that\u2019s somewhat translucent.\nstatic let thick: Material\nA material that\u2019s more opaque than translucent.\nstatic let ultraThick: Material\nA mostly opaque material.\nstatic let bar: Material\nA material matching the style of system toolbars."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/checkboxtogglestyle/init()",
        "html": "Discussion\n\nDon\u2019t call this initializer directly. Instead, use the checkbox static variable to create this style:\n\nToggle(\"Close windows when quitting an app\", isOn: $doesClose)\n    .toggleStyle(.checkbox)\n"
    },
    {
        "title": "projectedValue",
        "url": "https://developer.apple.com/documentation/swiftui/focusstate/binding/projectedvalue",
        "html": "Discussion\n\nUse the projected value to pass a binding value down a view hierarchy.\n\nSee Also\nInspecting the binding\nvar wrappedValue: Value\nThe underlying value referenced by the bound property."
    },
    {
        "title": "init(tint:)",
        "url": "https://developer.apple.com/documentation/swiftui/circulargaugestyle/init(tint:)-9ox0s",
        "html": "See Also\nCreating the gauge style\ninit()\nCreates a circular gauge.\ninit(tint: Gradient)\nCreates a circular gauge that draws with a specified gradient."
    },
    {
        "title": "update()",
        "url": "https://developer.apple.com/documentation/swiftui/dynamicproperty/update()-9fxv4",
        "html": "Discussion\n\nSwiftUI calls this function before rendering a view\u2019s body to ensure the view has the most recent value."
    },
    {
        "title": "increased",
        "url": "https://developer.apple.com/documentation/swiftui/badgeprominence/increased",
        "html": "Discussion\n\nThis level of prominence should be used for badges that display a value that requires user action, such as number of updates or account errors.\n\nIn lists on iOS and macOS, this results in badge labels being displayed on a red platter.\n\nForEach(accounts) { account in\n    Text(account.userName)\n        .badge(account.setupErrors)\n        .badgeProminence(.increased)\n}\n\nSee Also\nGetting background prominence\nstatic let standard: BadgeProminence\nThe standard level of prominence for a badge.\nstatic let decreased: BadgeProminence\nThe lowest level of prominence for a badge."
    },
    {
        "title": "makeBody(configuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/checkboxtogglestyle/makebody(configuration:)",
        "html": "Parameters\nconfiguration\n\nThe properties of the toggle, including a label and a binding to the toggle\u2019s state.\n\nReturn Value\n\nA view that represents a checkbox.\n\nDiscussion\n\nSwiftUI implements this required method of the ToggleStyle protocol to define the behavior and appearance of the checkbox toggle style. Don\u2019t call this method directly. Rather, the system calls this method for each Toggle instance in a view hierarchy that\u2019s styled as a checkbox."
    },
    {
        "title": "init(tint:)",
        "url": "https://developer.apple.com/documentation/swiftui/linearprogressviewstyle/init(tint:)",
        "html": "Deprecated\n\nUse the tint(_:) view modifier instead."
    },
    {
        "title": "enabled",
        "url": "https://developer.apple.com/documentation/swiftui/alternatingrowbackgroundbehavior/enabled",
        "html": "See Also\nGetting alternating row background behavior\nstatic let automatic: AlternatingRowBackgroundBehavior\nThe automatic alternating row background behavior.\nstatic let disabled: AlternatingRowBackgroundBehavior\nAlternating rows will be disabled for applicable views."
    },
    {
        "title": "links(visited:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitysystemrotor/links(visited:)",
        "html": "See Also\nIterating through links\nstatic var links: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all links."
    },
    {
        "title": "all",
        "url": "https://developer.apple.com/documentation/swiftui/editactions/all-6ryvk",
        "html": "See Also\nGetting edit operations\nstatic var all: EditActions<Data>\nAll the edit actions available on this collection.\nAvailable when Data conforms to MutableCollection and RangeReplaceableCollection.\nstatic var all: EditActions<Data>\nAll the edit actions available on this collection.\nAvailable when Data conforms to MutableCollection.\nstatic var all: EditActions<Data>\nAll the edit actions available on this collection.\nAvailable when Data conforms to RangeReplaceableCollection.\nstatic var delete: EditActions<Data>\nAn edit action that allows the user to delete one or more elements of a collection.\nAvailable when Data conforms to RangeReplaceableCollection.\nstatic var move: EditActions<Data>\nAn edit action that allows the user to move elements of a collection.\nAvailable when Data conforms to MutableCollection."
    },
    {
        "title": "all",
        "url": "https://developer.apple.com/documentation/swiftui/verticaledge/set/all",
        "html": "See Also\nGetting edge sets\nstatic let top: VerticalEdge.Set\nA set containing only the top vertical edge.\nstatic let bottom: VerticalEdge.Set\nA set containing only the bottom vertical edge."
    },
    {
        "title": "EditMode.active",
        "url": "https://developer.apple.com/documentation/swiftui/editmode/active",
        "html": "Discussion\n\nThe isEditing property is true in this state.\n\nSee Also\nGetting edit modes\ncase inactive\nThe user can\u2019t edit the view content.\ncase transient\nThe view is in a temporary edit mode."
    },
    {
        "title": "EditMode.transient",
        "url": "https://developer.apple.com/documentation/swiftui/editmode/transient",
        "html": "Discussion\n\nThe use of this state varies by platform and for different controls. As an example, SwiftUI might engage temporary edit mode over the duration of a swipe gesture.\n\nThe isEditing property is true in this state.\n\nSee Also\nGetting edit modes\ncase active\nThe user can edit the view content.\ncase inactive\nThe user can\u2019t edit the view content."
    },
    {
        "title": "init(tint:)",
        "url": "https://developer.apple.com/documentation/swiftui/switchtogglestyle/init(tint:)",
        "html": "Deprecated\n\nUse the tint(_:) view modifier instead."
    },
    {
        "title": "init(tint:)",
        "url": "https://developer.apple.com/documentation/swiftui/lineargaugestyle/init(tint:)-8xd5j",
        "html": "Deprecated\n\nUse the tint(_:) view modifier instead.\n\nSee Also\nDeprecated initializers\ninit(tint: Color)\nCreates a linear gauge style with a tint color.\nDeprecated"
    },
    {
        "title": "body",
        "url": "https://developer.apple.com/documentation/swiftui/immersivespacecontent/body-swift.property",
        "html": "Required\n\nSee Also\nCreating immersive space content\nassociatedtype Body : ImmersiveSpaceContent\n\nRequired\n\nBeta"
    },
    {
        "title": "Body",
        "url": "https://developer.apple.com/documentation/swiftui/immersivespacecontent/body-swift.associatedtype",
        "html": "Required\n\nSee Also\nCreating immersive space content\nvar body: Self.Body\n\nRequired\n\nBeta"
    },
    {
        "title": "makeBody(configuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/buttontogglestyle/makebody(configuration:)",
        "html": "Parameters\nconfiguration\n\nThe properties of the toggle, including a label and a binding to the toggle\u2019s state.\n\nReturn Value\n\nA view that acts as a button that controls a Boolean state.\n\nDiscussion\n\nSwiftUI implements this required method of the ToggleStyle protocol to define the behavior and appearance of the button toggle style. Don\u2019t call this method directly; the system calls this method for each Toggle instance in a view hierarchy that\u2019s styled as a button."
    },
    {
        "title": "ViewAlignedScrollTargetBehavior.LimitBehavior",
        "url": "https://developer.apple.com/documentation/swiftui/viewalignedscrolltargetbehavior/limitbehavior",
        "html": "Topics\nGetting the limit behavior\nstatic var automatic: ViewAlignedScrollTargetBehavior.LimitBehavior\nThe automatic limit behavior.\nstatic var always: ViewAlignedScrollTargetBehavior.LimitBehavior\nThe always limit behavior.\nstatic var never: ViewAlignedScrollTargetBehavior.LimitBehavior\nThe never limit behavior.\nSee Also\nCreating the target behavior\ninit(limitBehavior: ViewAlignedScrollTargetBehavior.LimitBehavior)\nCreates a view aligned scroll behavior."
    },
    {
        "title": "delete",
        "url": "https://developer.apple.com/documentation/swiftui/keyequivalent/delete",
        "html": "See Also\nGetting other special keys\nstatic let clear: KeyEquivalent\nClear (U+F739)\nstatic let deleteForward: KeyEquivalent\nDelete Forward (U+F728)\nstatic let end: KeyEquivalent\nEnd (U+F72B)\nstatic let escape: KeyEquivalent\nEscape (U+001B)\nstatic let home: KeyEquivalent\nHome (U+F729)\nstatic let pageDown: KeyEquivalent\nPage Down (U+F72D)\nstatic let pageUp: KeyEquivalent\nPage Up (U+F72C)\nstatic let `return`: KeyEquivalent\nReturn (U+000D)\nstatic let space: KeyEquivalent\nSpace (U+0020)\nstatic let tab: KeyEquivalent\nTab (U+0009)"
    },
    {
        "title": "rect(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/anchor/source/rect(_:)",
        "html": "See Also\nGetting rectangle anchor sources\nstatic var bounds: Anchor<CGRect>.Source\nAn anchor source rect defined as the entire bounding rect of the current view.\nAvailable when Value is CGRect."
    },
    {
        "title": "buildLimitedAvailability(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/widgetbundlebuilder/buildlimitedavailability(_:)",
        "html": "See Also\nBundling widgets\nstatic func buildBlock() -> some Widget\nBuilds an empty Widget from a block containing no statements, { }.\nstatic func buildBlock<Content>(Content) -> some Widget\nBuilds a single Widget written as a child view (e..g, { MyWidget() }) through unmodified.\nstatic func buildBlock<C0, C1>(C0, C1) -> some Widget\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some Widget\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildOptional((Widget & _LimitedAvailabilityWidgetMarker)?) -> some Widget\nProduces an optional widget for conditional statements in multi-statement closures that\u2019s only visible when the condition evaluates to true."
    },
    {
        "title": "top",
        "url": "https://developer.apple.com/documentation/swiftui/anchor/source/top",
        "html": "See Also\nGetting top anchor sources\nstatic var topLeading: Anchor<CGPoint>.Source\nAvailable when Value is CGPoint.\nstatic var topTrailing: Anchor<CGPoint>.Source\nAvailable when Value is CGPoint."
    },
    {
        "title": "deleteForward",
        "url": "https://developer.apple.com/documentation/swiftui/keyequivalent/deleteforward",
        "html": "See Also\nGetting other special keys\nstatic let clear: KeyEquivalent\nClear (U+F739)\nstatic let delete: KeyEquivalent\nDelete (U+0008)\nstatic let end: KeyEquivalent\nEnd (U+F72B)\nstatic let escape: KeyEquivalent\nEscape (U+001B)\nstatic let home: KeyEquivalent\nHome (U+F729)\nstatic let pageDown: KeyEquivalent\nPage Down (U+F72D)\nstatic let pageUp: KeyEquivalent\nPage Up (U+F72C)\nstatic let `return`: KeyEquivalent\nReturn (U+000D)\nstatic let space: KeyEquivalent\nSpace (U+0020)\nstatic let tab: KeyEquivalent\nTab (U+0009)"
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/widgetbundlebuilder/buildblock(_:_:_:_:_:_:)",
        "html": "See Also\nBundling widgets\nstatic func buildBlock() -> some Widget\nBuilds an empty Widget from a block containing no statements, { }.\nstatic func buildBlock<Content>(Content) -> some Widget\nBuilds a single Widget written as a child view (e..g, { MyWidget() }) through unmodified.\nstatic func buildBlock<C0, C1>(C0, C1) -> some Widget\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some Widget\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildLimitedAvailability(some Widget) -> Widget & _LimitedAvailabilityWidgetMarker\nProcesses widget content for a conditional compiler-control statement that performs an availability check.\nstatic func buildOptional((Widget & _LimitedAvailabilityWidgetMarker)?) -> some Widget\nProduces an optional widget for conditional statements in multi-statement closures that\u2019s only visible when the condition evaluates to true."
    },
    {
        "title": "buildOptional(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/widgetbundlebuilder/buildoptional(_:)",
        "html": "Discussion\n\nConditional statements in a WidgetBundleBuilder can contain an if statement but not an else statement, and the condition can only perform a compiler check for availability, like in the following code:\n\nvar body: some Widget {\n    if #available(iOS 16, *) {\n        WindowGroup {\n            ContentView()\n        }\n    }\n}\n\nSee Also\nBundling widgets\nstatic func buildBlock() -> some Widget\nBuilds an empty Widget from a block containing no statements, { }.\nstatic func buildBlock<Content>(Content) -> some Widget\nBuilds a single Widget written as a child view (e..g, { MyWidget() }) through unmodified.\nstatic func buildBlock<C0, C1>(C0, C1) -> some Widget\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some Widget\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildLimitedAvailability(some Widget) -> Widget & _LimitedAvailabilityWidgetMarker\nProcesses widget content for a conditional compiler-control statement that performs an availability check."
    },
    {
        "title": "point(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/anchor/source/point(_:)",
        "html": "See Also\nGetting point anchor sources\nstatic func unitPoint(UnitPoint) -> Anchor<Value>.Source\nAvailable when Value is CGPoint."
    },
    {
        "title": "buildBlock(_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/widgetbundlebuilder/buildblock(_:_:_:_:_:)",
        "html": "See Also\nBundling widgets\nstatic func buildBlock() -> some Widget\nBuilds an empty Widget from a block containing no statements, { }.\nstatic func buildBlock<Content>(Content) -> some Widget\nBuilds a single Widget written as a child view (e..g, { MyWidget() }) through unmodified.\nstatic func buildBlock<C0, C1>(C0, C1) -> some Widget\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some Widget\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildLimitedAvailability(some Widget) -> Widget & _LimitedAvailabilityWidgetMarker\nProcesses widget content for a conditional compiler-control statement that performs an availability check.\nstatic func buildOptional((Widget & _LimitedAvailabilityWidgetMarker)?) -> some Widget\nProduces an optional widget for conditional statements in multi-statement closures that\u2019s only visible when the condition evaluates to true."
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/widgetbundlebuilder/buildblock(_:_:_:_:_:_:_:_:)",
        "html": "See Also\nBundling widgets\nstatic func buildBlock() -> some Widget\nBuilds an empty Widget from a block containing no statements, { }.\nstatic func buildBlock<Content>(Content) -> some Widget\nBuilds a single Widget written as a child view (e..g, { MyWidget() }) through unmodified.\nstatic func buildBlock<C0, C1>(C0, C1) -> some Widget\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some Widget\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildLimitedAvailability(some Widget) -> Widget & _LimitedAvailabilityWidgetMarker\nProcesses widget content for a conditional compiler-control statement that performs an availability check.\nstatic func buildOptional((Widget & _LimitedAvailabilityWidgetMarker)?) -> some Widget\nProduces an optional widget for conditional statements in multi-statement closures that\u2019s only visible when the condition evaluates to true."
    },
    {
        "title": "init(limitBehavior:)",
        "url": "https://developer.apple.com/documentation/swiftui/viewalignedscrolltargetbehavior/init(limitbehavior:)",
        "html": "See Also\nCreating the target behavior\nstruct LimitBehavior\nA type that defines the amount of views that can be scrolled at a time."
    },
    {
        "title": "velocity",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltargetbehaviorcontext/velocity",
        "html": "See Also\nGetting the scroll target behavior context\nvar axes: Axis.Set\nThe axes in which the scrollable view is scrollable.\nvar containerSize: CGSize\nThe size of the container of the scrollable view.\nvar contentSize: CGSize\nThe size of the content of the scrollable view.\nvar originalTarget: ScrollTarget\nThe original target when the scroll gesture began."
    },
    {
        "title": "ScrollTransitionPhase.topLeading",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltransitionphase/topleading",
        "html": "See Also\nGetting the phase\ncase identity\nThe scroll transition is being applied to a view that is in the visible area.\ncase bottomTrailing\nThe scroll transition is being applied to a view that is about to move into the visible area at the bottom edge of a vertical scroll view, or the trailing edge of a horizontal scroll view."
    },
    {
        "title": "buildBlock(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/widgetbundlebuilder/buildblock(_:)",
        "html": "See Also\nBundling widgets\nstatic func buildBlock() -> some Widget\nBuilds an empty Widget from a block containing no statements, { }.\nstatic func buildBlock<C0, C1>(C0, C1) -> some Widget\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some Widget\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildLimitedAvailability(some Widget) -> Widget & _LimitedAvailabilityWidgetMarker\nProcesses widget content for a conditional compiler-control statement that performs an availability check.\nstatic func buildOptional((Widget & _LimitedAvailabilityWidgetMarker)?) -> some Widget\nProduces an optional widget for conditional statements in multi-statement closures that\u2019s only visible when the condition evaluates to true."
    },
    {
        "title": "init(showsTitle:)",
        "url": "https://developer.apple.com/documentation/swiftui/unifiedwindowtoolbarstyle/init(showstitle:)",
        "html": "Parameters\nshowsTitle\n\nWhether the title should be displayed.\n\nSee Also\nCreating the window toolbar style\ninit()\nCreates a unified window toolbar style."
    },
    {
        "title": "rawValue",
        "url": "https://developer.apple.com/documentation/swiftui/searchsuggestionsplacement/set/rawvalue",
        "html": "See Also\nCreating a set\ninit(rawValue: Int)\nCreates a set of search suggestions from an integer."
    },
    {
        "title": "menu",
        "url": "https://developer.apple.com/documentation/swiftui/searchsuggestionsplacement/set/menu",
        "html": "See Also\nGetting placement sets\nstatic var content: SearchSuggestionsPlacement.Set\nA set containing placements with the apps main content, excluding the menu placement."
    },
    {
        "title": "containerSize",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltargetbehaviorcontext/containersize",
        "html": "Discussion\n\nThis is the size of the bounds of the scroll view subtracting any insets applied to the scroll view (like the safe area).\n\nSee Also\nGetting the scroll target behavior context\nvar axes: Axis.Set\nThe axes in which the scrollable view is scrollable.\nvar contentSize: CGSize\nThe size of the content of the scrollable view.\nvar originalTarget: ScrollTarget\nThe original target when the scroll gesture began.\nvar velocity: CGVector\nThe current velocity of the scrollable view\u2019s scroll gesture."
    },
    {
        "title": "content",
        "url": "https://developer.apple.com/documentation/swiftui/searchsuggestionsplacement/set/content",
        "html": "See Also\nGetting placement sets\nstatic var menu: SearchSuggestionsPlacement.Set\nA set containing the menu display mode."
    },
    {
        "title": "body(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/viewmodifier/body(content:)-70h6f",
        "html": "Discussion\n\ncontent is a proxy for the view that will have the modifier represented by Self applied to it."
    },
    {
        "title": "bottomTrailing",
        "url": "https://developer.apple.com/documentation/swiftui/anchor/source/bottomtrailing",
        "html": "See Also\nGetting bottom anchor sources\nstatic var bottom: Anchor<CGPoint>.Source\nAvailable when Value is CGPoint.\nstatic var bottomLeading: Anchor<CGPoint>.Source\nAvailable when Value is CGPoint."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/anchor/source/init(_:)-7yp88",
        "html": "See Also\nCreating an anchor source\ninit<T>(Anchor<T>.Source?)"
    },
    {
        "title": "ultraThin",
        "url": "https://developer.apple.com/documentation/swiftui/material/ultrathin",
        "html": "See Also\nGetting material types\nstatic let thin: Material\nA material that\u2019s more translucent than opaque.\nstatic let regular: Material\nA material that\u2019s somewhat translucent.\nstatic let thick: Material\nA material that\u2019s more opaque than translucent.\nstatic let ultraThick: Material\nA mostly opaque material.\nstatic let bar: Material\nA material matching the style of system toolbars."
    },
    {
        "title": "space",
        "url": "https://developer.apple.com/documentation/swiftui/keyequivalent/space",
        "html": "See Also\nGetting other special keys\nstatic let clear: KeyEquivalent\nClear (U+F739)\nstatic let delete: KeyEquivalent\nDelete (U+0008)\nstatic let deleteForward: KeyEquivalent\nDelete Forward (U+F728)\nstatic let end: KeyEquivalent\nEnd (U+F72B)\nstatic let escape: KeyEquivalent\nEscape (U+001B)\nstatic let home: KeyEquivalent\nHome (U+F729)\nstatic let pageDown: KeyEquivalent\nPage Down (U+F72D)\nstatic let pageUp: KeyEquivalent\nPage Up (U+F72C)\nstatic let `return`: KeyEquivalent\nReturn (U+000D)\nstatic let tab: KeyEquivalent\nTab (U+0009)"
    },
    {
        "title": "move",
        "url": "https://developer.apple.com/documentation/swiftui/editactions/move",
        "html": "See Also\nGetting edit operations\nstatic var all: EditActions<Data>\nAll the edit actions available on this collection.\nAvailable when Data conforms to MutableCollection and RangeReplaceableCollection.\nstatic var all: EditActions<Data>\nAll the edit actions available on this collection.\nAvailable when Data conforms to MutableCollection.\nstatic var all: EditActions<Data>\nAll the edit actions available on this collection.\nAvailable when Data conforms to RangeReplaceableCollection.\nstatic var all: EditActions<Data>\nAll the edit actions available on this collection.\nstatic var delete: EditActions<Data>\nAn edit action that allows the user to delete one or more elements of a collection.\nAvailable when Data conforms to RangeReplaceableCollection."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/keyequivalent/init(_:)",
        "html": "See Also\nCreating a key equivalent\nvar character: Character\nThe character value that the key equivalent represents."
    },
    {
        "title": "pageUp",
        "url": "https://developer.apple.com/documentation/swiftui/keyequivalent/pageup",
        "html": "See Also\nGetting other special keys\nstatic let clear: KeyEquivalent\nClear (U+F739)\nstatic let delete: KeyEquivalent\nDelete (U+0008)\nstatic let deleteForward: KeyEquivalent\nDelete Forward (U+F728)\nstatic let end: KeyEquivalent\nEnd (U+F72B)\nstatic let escape: KeyEquivalent\nEscape (U+001B)\nstatic let home: KeyEquivalent\nHome (U+F729)\nstatic let pageDown: KeyEquivalent\nPage Down (U+F72D)\nstatic let `return`: KeyEquivalent\nReturn (U+000D)\nstatic let space: KeyEquivalent\nSpace (U+0020)\nstatic let tab: KeyEquivalent\nTab (U+0009)"
    },
    {
        "title": "rawValue",
        "url": "https://developer.apple.com/documentation/swiftui/editactions/rawvalue",
        "html": "See Also\nCreating an edit operation\ninit(rawValue: Int)\nCreates a new set from a raw value."
    },
    {
        "title": "wrappedValue",
        "url": "https://developer.apple.com/documentation/swiftui/focusstate/binding/wrappedvalue",
        "html": "See Also\nInspecting the binding\nvar projectedValue: FocusState<Value>.Binding\nA projection of the binding value that returns a binding."
    },
    {
        "title": "decreased",
        "url": "https://developer.apple.com/documentation/swiftui/badgeprominence/decreased",
        "html": "Discussion\n\nThis level or prominence should be used for badges that display a value of passive information that requires no user action, such as total number of messages or content.\n\nIn lists on iOS and macOS, this results in badge labels being displayed without any extra decoration. On iOS, this looks the same as .standard.\n\nList(folders) { folder in\n    Text(folder.name)\n        .badge(folder.numberOfItems)\n}\n.badgeProminence(.decreased)\n\nSee Also\nGetting background prominence\nstatic let standard: BadgeProminence\nThe standard level of prominence for a badge.\nstatic let increased: BadgeProminence\nThe highest level of prominence for a badge."
    },
    {
        "title": "key",
        "url": "https://developer.apple.com/documentation/swiftui/keyboardshortcut/key",
        "html": "See Also\nCreating a shortcut\ninit(KeyEquivalent, modifiers: EventModifiers)\nCreates a new keyboard shortcut with the given key equivalent and set of modifier keys.\nvar modifiers: EventModifiers\nThe modifier keys that the user presses in conjunction with a key equivalent to activate the shortcut."
    },
    {
        "title": "standard",
        "url": "https://developer.apple.com/documentation/swiftui/badgeprominence/standard",
        "html": "Discussion\n\nThis level of prominence should be used for badges that display a value that suggests user action, such as a count of unread messages or new invitations.\n\nIn lists on macOS, this results in a badge label on a grayscale platter; and in lists on iOS, this prominence of badge has no platter.\n\nList(mailboxes) { mailbox in\n    Text(mailbox.name)\n        .badge(mailbox.numberOfUnreadMessages)\n}\n.badgeProminence(.standard)\n\nSee Also\nGetting background prominence\nstatic let increased: BadgeProminence\nThe highest level of prominence for a badge.\nstatic let decreased: BadgeProminence\nThe lowest level of prominence for a badge."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/scrolldismisseskeyboardmode/automatic",
        "html": "Discussion\n\nBy default, a TextEditor is interactive while a List of scrollable content always dismiss the keyboard on a scroll, when linked against iOS 16 or later.\n\nSee Also\nGetting modes\nstatic var immediately: ScrollDismissesKeyboardMode\nDismiss the keyboard as soon as scrolling starts.\nstatic var interactively: ScrollDismissesKeyboardMode\nEnable people to interactively dismiss the keyboard as part of the scroll operation.\nstatic var never: ScrollDismissesKeyboardMode\nNever dismiss the keyboard automatically as a result of scrolling."
    },
    {
        "title": "disabled",
        "url": "https://developer.apple.com/documentation/swiftui/alternatingrowbackgroundbehavior/disabled",
        "html": "See Also\nGetting alternating row background behavior\nstatic let automatic: AlternatingRowBackgroundBehavior\nThe automatic alternating row background behavior.\nstatic let enabled: AlternatingRowBackgroundBehavior\nAlternating rows will be enabled for applicable views."
    },
    {
        "title": "StackNavigationViewStyle",
        "url": "https://developer.apple.com/documentation/swiftui/stacknavigationviewstyle",
        "html": "Deprecated\n\nReplace a styled NavigationView with a NavigationStack or NavigationSplitView. For more information, see Migrating to new navigation types.\n\nOverview\n\nUse stack to construct this style.\n\nTopics\nCreating a stack navigation view style\ninit()\nCreates a navigation view style represented by a view stack that only shows a single top view at a time.\nRelationships\nConforms To\nNavigationViewStyle\nSee Also\nSupporting types\nstruct DefaultNavigationViewStyle\nThe default navigation view style.\nDeprecated\nstruct ColumnNavigationViewStyle\nA navigation view style represented by a series of views in columns.\nDeprecated\nstruct DoubleColumnNavigationViewStyle\nA navigation view style represented by a primary view stack that navigates to a detail view.\nDeprecated"
    },
    {
        "title": "EditMode.inactive",
        "url": "https://developer.apple.com/documentation/swiftui/editmode/inactive",
        "html": "Discussion\n\nThe isEditing property is false in this state.\n\nSee Also\nGetting edit modes\ncase active\nThe user can edit the view content.\ncase transient\nThe view is in a temporary edit mode."
    },
    {
        "title": "fixed(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/listitemtint/fixed(_:)",
        "html": "Parameters\ntint\n\nThe color to use to tint the content.\n\nDiscussion\n\nThe system doesn\u2019t override this tint effect.\n\nSee Also\nGetting list item tint options\nstatic let monochrome: ListItemTint\nA standard grayscale tint effect.\nstatic func preferred(Color) -> ListItemTint\nAn explicit tint color that the system can override."
    },
    {
        "title": "preferred(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/listitemtint/preferred(_:)",
        "html": "Parameters\ntint\n\nThe color to use to tint the content.\n\nDiscussion\n\nThe system can override this tint effect, like when the system has a custom user accent color on macOS.\n\nSee Also\nGetting list item tint options\nstatic let monochrome: ListItemTint\nA standard grayscale tint effect.\nstatic func fixed(Color) -> ListItemTint\nAn explicit tint color."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/alternatingrowbackgroundbehavior/automatic",
        "html": "Discussion\n\nThis defers to default component behavior for alternating row backgrounds. Some components, such as Table on macOS, will default to having alternating row backgrounds; while List does not.\n\nSee Also\nGetting alternating row background behavior\nstatic let enabled: AlternatingRowBackgroundBehavior\nAlternating rows will be enabled for applicable views.\nstatic let disabled: AlternatingRowBackgroundBehavior\nAlternating rows will be disabled for applicable views."
    },
    {
        "title": "increased",
        "url": "https://developer.apple.com/documentation/swiftui/backgroundprominence/increased",
        "html": "Discussion\n\nThis is the level of prominence for more highly saturated and full color backgrounds, such as focused/emphasized selected list rows. Typically foreground content should take on monochrome styling to have greater contrast against the background.\n\nSee Also\nGetting background prominence\nstatic let standard: BackgroundProminence\nThe standard prominence of a background"
    },
    {
        "title": "standard",
        "url": "https://developer.apple.com/documentation/swiftui/backgroundprominence/standard",
        "html": "Discussion\n\nThis is the default level of prominence and doesn\u2019t require any adjustment to achieve satisfactory contrast with the background.\n\nSee Also\nGetting background prominence\nstatic let increased: BackgroundProminence\nA more prominent background that likely requires some changes to the views above it."
    },
    {
        "title": "monochrome",
        "url": "https://developer.apple.com/documentation/swiftui/listitemtint/monochrome",
        "html": "Discussion\n\nThe system doesn\u2019t override monochrome tints.\n\nSee Also\nGetting list item tint options\nstatic func fixed(Color) -> ListItemTint\nAn explicit tint color.\nstatic func preferred(Color) -> ListItemTint\nAn explicit tint color that the system can override."
    },
    {
        "title": "Prominence.standard",
        "url": "https://developer.apple.com/documentation/swiftui/prominence/standard",
        "html": "See Also\nGetting prominence options\ncase increased\nAn increased prominence."
    },
    {
        "title": "Prominence.increased",
        "url": "https://developer.apple.com/documentation/swiftui/prominence/increased",
        "html": "Discussion\n\nNote\n\nNot all views will react to increased prominence.\n\nSee Also\nGetting prominence options\ncase standard\nThe standard prominence."
    },
    {
        "title": "all",
        "url": "https://developer.apple.com/documentation/swiftui/editactions/all-45m4m",
        "html": "See Also\nGetting edit operations\nstatic var all: EditActions<Data>\nAll the edit actions available on this collection.\nAvailable when Data conforms to MutableCollection.\nstatic var all: EditActions<Data>\nAll the edit actions available on this collection.\nAvailable when Data conforms to RangeReplaceableCollection.\nstatic var all: EditActions<Data>\nAll the edit actions available on this collection.\nstatic var delete: EditActions<Data>\nAn edit action that allows the user to delete one or more elements of a collection.\nAvailable when Data conforms to RangeReplaceableCollection.\nstatic var move: EditActions<Data>\nAn edit action that allows the user to move elements of a collection.\nAvailable when Data conforms to MutableCollection."
    },
    {
        "title": "always",
        "url": "https://developer.apple.com/documentation/swiftui/scrollbouncebehavior/always",
        "html": "Discussion\n\nThe scrollable view always bounces along the specified axis, regardless of the size of the content.\n\nSee Also\nBounce behaviors\nstatic var automatic: ScrollBounceBehavior\nThe automatic behavior.\nstatic var basedOnSize: ScrollBounceBehavior\nThe scrollable view bounces when its content is large enough to require scrolling."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/scrollbouncebehavior/automatic",
        "html": "Discussion\n\nThe scrollable view automatically chooses whether content bounces when people scroll to the end of the view\u2019s content. By default, scrollable views use the always behavior.\n\nSee Also\nBounce behaviors\nstatic var always: ScrollBounceBehavior\nThe scrollable view always bounces.\nstatic var basedOnSize: ScrollBounceBehavior\nThe scrollable view bounces when its content is large enough to require scrolling."
    },
    {
        "title": "delete",
        "url": "https://developer.apple.com/documentation/swiftui/editactions/delete",
        "html": "See Also\nGetting edit operations\nstatic var all: EditActions<Data>\nAll the edit actions available on this collection.\nAvailable when Data conforms to MutableCollection and RangeReplaceableCollection.\nstatic var all: EditActions<Data>\nAll the edit actions available on this collection.\nAvailable when Data conforms to MutableCollection.\nstatic var all: EditActions<Data>\nAll the edit actions available on this collection.\nAvailable when Data conforms to RangeReplaceableCollection.\nstatic var all: EditActions<Data>\nAll the edit actions available on this collection.\nstatic var move: EditActions<Data>\nAn edit action that allows the user to move elements of a collection.\nAvailable when Data conforms to MutableCollection."
    },
    {
        "title": "all",
        "url": "https://developer.apple.com/documentation/swiftui/editactions/all-4uyun",
        "html": "See Also\nGetting edit operations\nstatic var all: EditActions<Data>\nAll the edit actions available on this collection.\nAvailable when Data conforms to MutableCollection and RangeReplaceableCollection.\nstatic var all: EditActions<Data>\nAll the edit actions available on this collection.\nAvailable when Data conforms to MutableCollection.\nstatic var all: EditActions<Data>\nAll the edit actions available on this collection.\nstatic var delete: EditActions<Data>\nAn edit action that allows the user to delete one or more elements of a collection.\nAvailable when Data conforms to RangeReplaceableCollection.\nstatic var move: EditActions<Data>\nAn edit action that allows the user to move elements of a collection.\nAvailable when Data conforms to MutableCollection."
    },
    {
        "title": "interactively",
        "url": "https://developer.apple.com/documentation/swiftui/scrolldismisseskeyboardmode/interactively",
        "html": "Discussion\n\nThe software keyboard\u2019s position tracks the gesture that drives the scroll operation if the gesture crosses into the keyboard\u2019s area of the display. People can dismiss the keyboard by scrolling it off the display, or reverse the direction of the scroll to cancel the dismissal.\n\nSee Also\nGetting modes\nstatic var automatic: ScrollDismissesKeyboardMode\nDetermine the mode automatically based on the surrounding context.\nstatic var immediately: ScrollDismissesKeyboardMode\nDismiss the keyboard as soon as scrolling starts.\nstatic var never: ScrollDismissesKeyboardMode\nNever dismiss the keyboard automatically as a result of scrolling."
    },
    {
        "title": "all",
        "url": "https://developer.apple.com/documentation/swiftui/editactions/all-4dctm",
        "html": "See Also\nGetting edit operations\nstatic var all: EditActions<Data>\nAll the edit actions available on this collection.\nAvailable when Data conforms to MutableCollection and RangeReplaceableCollection.\nstatic var all: EditActions<Data>\nAll the edit actions available on this collection.\nAvailable when Data conforms to RangeReplaceableCollection.\nstatic var all: EditActions<Data>\nAll the edit actions available on this collection.\nstatic var delete: EditActions<Data>\nAn edit action that allows the user to delete one or more elements of a collection.\nAvailable when Data conforms to RangeReplaceableCollection.\nstatic var move: EditActions<Data>\nAn edit action that allows the user to move elements of a collection.\nAvailable when Data conforms to MutableCollection."
    },
    {
        "title": "basedOnSize",
        "url": "https://developer.apple.com/documentation/swiftui/scrollbouncebehavior/basedonsize",
        "html": "Discussion\n\nThe scrollable view bounces along the specified axis if the size of the content exceeeds the size of the scrollable view in that axis.\n\nSee Also\nBounce behaviors\nstatic var automatic: ScrollBounceBehavior\nThe automatic behavior.\nstatic var always: ScrollBounceBehavior\nThe scrollable view always bounces."
    },
    {
        "title": "writableContentTypes",
        "url": "https://developer.apple.com/documentation/swiftui/filedocument/writablecontenttypes-289b3",
        "html": "Discussion\n\nBy default, SwiftUI assumes that your document reads and writes the same set of content types. Only define this property if you need to indicate a different set of types for writing files. Otherwise, the default implementation of this property returns the list that you specify in your implementation of readableContentTypes."
    },
    {
        "title": "init(rawValue:)",
        "url": "https://developer.apple.com/documentation/swiftui/editactions/init(rawvalue:)",
        "html": "Parameters\nrawValue\n\nThe raw value with which to create the collection edits.\n\nSee Also\nCreating an edit operation\nlet rawValue: Int\nThe raw value."
    },
    {
        "title": "headings(level:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitysystemrotor/headings(level:)",
        "html": "See Also\nIterating through headings\nstatic var headings: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all headings."
    },
    {
        "title": "lists",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitysystemrotor/lists",
        "html": "See Also\nIterating through other elements\nstatic var images: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all images.\nstatic var landmarks: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all landmarks.\nstatic var tables: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all tables."
    },
    {
        "title": "images",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitysystemrotor/images",
        "html": "See Also\nIterating through other elements\nstatic var landmarks: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all landmarks.\nstatic var lists: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all lists.\nstatic var tables: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all tables."
    },
    {
        "title": "alert(item:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/alert(item:content:)",
        "html": "Deprecated\n\nUse alert(_:isPresented:presenting:actions:message:) instead.\n\nParameters\nitem\n\nA binding to an optional source of truth for the alert. if item is non-nil, the system passes the contents to the modifier\u2019s closure. You use this content to populate the fields of an alert that you create that the system displays to the user. If item changes, the system dismisses the currently displayed alert and replaces it with a new one using the same process.\n\ncontent\n\nA closure returning the alert to present.\n\nDiscussion\n\nUse this method when you need to show an alert that contains information from a binding to an optional data source that you provide. The example below shows a custom data source FileInfo whose properties configure the alert\u2019s message field:\n\nstruct FileInfo: Identifiable {\n    var id: String { name }\n    let name: String\n    let fileType: UTType\n}\n\n\nstruct ConfirmImportAlert: View {\n    @State private var alertDetails: FileInfo?\n    var body: some View {\n        Button(\"Show Alert\") {\n            alertDetails = FileInfo(name: \"MyImageFile.png\",\n                                    fileType: .png)\n        }\n        .alert(item: $alertDetails) { details in\n            Alert(title: Text(\"Import Complete\"),\n                  message: Text(\"\"\"\n                    Imported \\(details.name) \\n File\n                    type: \\(details.fileType.description).\n                    \"\"\"),\n                  dismissButton: .default(Text(\"Dismiss\")))\n        }\n    }\n}\n\n\nSee Also\nView presentation modifiers\nfunc actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View\nPresents an action sheet when a given condition is true.\nDeprecated\nfunc actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View\nPresents an action sheet using the given item as a data source for the sheet\u2019s content.\nDeprecated\nfunc alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View\nPresents an alert to the user.\nDeprecated"
    },
    {
        "title": "buildBlock(_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityrotorcontentbuilder/buildblock(_:_:_:_:_:)",
        "html": "See Also\nBuilding navigation content\nstatic func buildBlock<Content>(Content) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1>(C0, C1) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some AccessibilityRotorContent\nstatic func buildIf<Content>(Content?) -> some AccessibilityRotorContent\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder."
    },
    {
        "title": "chartSymbolSizeScale(range:type:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartsymbolsizescale(range:type:)",
        "html": "Parameters\nrange\n\nThe range of symbol size that correspond to the scale domain.\n\ntype\n\nThe scale type.\n\nSee Also\nSymbol size scales\nfunc chartSymbolSizeScale<DataValue>(KeyValuePairs<DataValue, CGFloat>) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale<Domain>(domain: Domain, type: ScaleType?) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale<Domain>(domain: Domain, mapping: (Domain.Element) -> CGFloat) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale<DataValue>(mapping: (DataValue) -> CGFloat) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale(type: ScaleType?) -> some View\nConfigures the symbol size scale for charts."
    },
    {
        "title": "identity",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltransitionconfiguration/identity",
        "html": "See Also\nGetting the configuration\nstatic let animated: ScrollTransitionConfiguration\nCreates a new configuration that discretely animates the transition when the view becomes visible.\nstatic func animated(Animation) -> ScrollTransitionConfiguration\nCreates a new configuration that discretely animates the transition when the view becomes visible.\nstatic let interactive: ScrollTransitionConfiguration\nCreates a new configuration that interactively interpolates the transition\u2019s effect as the view is scrolled into the visible region of the container.\nstatic func interactive(timingCurve: UnitCurve) -> ScrollTransitionConfiguration\nCreates a new configuration that interactively interpolates the transition\u2019s effect as the view is scrolled into the visible region of the container."
    },
    {
        "title": "animated",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltransitionconfiguration/animated",
        "html": "See Also\nGetting the configuration\nstatic let identity: ScrollTransitionConfiguration\nCreates a new configuration that does not change the appearance of the view.\nstatic func animated(Animation) -> ScrollTransitionConfiguration\nCreates a new configuration that discretely animates the transition when the view becomes visible.\nstatic let interactive: ScrollTransitionConfiguration\nCreates a new configuration that interactively interpolates the transition\u2019s effect as the view is scrolled into the visible region of the container.\nstatic func interactive(timingCurve: UnitCurve) -> ScrollTransitionConfiguration\nCreates a new configuration that interactively interpolates the transition\u2019s effect as the view is scrolled into the visible region of the container."
    },
    {
        "title": "interactive",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltransitionconfiguration/interactive",
        "html": "See Also\nGetting the configuration\nstatic let identity: ScrollTransitionConfiguration\nCreates a new configuration that does not change the appearance of the view.\nstatic let animated: ScrollTransitionConfiguration\nCreates a new configuration that discretely animates the transition when the view becomes visible.\nstatic func animated(Animation) -> ScrollTransitionConfiguration\nCreates a new configuration that discretely animates the transition when the view becomes visible.\nstatic func interactive(timingCurve: UnitCurve) -> ScrollTransitionConfiguration\nCreates a new configuration that interactively interpolates the transition\u2019s effect as the view is scrolled into the visible region of the container."
    },
    {
        "title": "init(showsTitle:)",
        "url": "https://developer.apple.com/documentation/swiftui/unifiedcompactwindowtoolbarstyle/init(showstitle:)",
        "html": "Parameters\nshowsTitle\n\nWhether the title should be displayed.\n\nSee Also\nCreating the window toolbar style\ninit()\nCreates a unified compact window toolbar style."
    },
    {
        "title": "animation(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltransitionconfiguration/animation(_:)",
        "html": "Parameters\nanimation\n\nAn animation that will be used to apply the transition to the view.\n\nReturn Value\n\nA copy of this configuration with the animation set to the given value.\n\nDiscussion\n\nIf the transition is interactive, the given animation will be used to animate the effect toward the current interpolated value, causing the effect to lag behind the current scroll position.\n\nSee Also\nAccessing the configuration\nfunc threshold(ScrollTransitionConfiguration.Threshold) -> ScrollTransitionConfiguration\nSets the threshold at which the view will be considered fully visible.\nstruct Threshold\nDescribes a specific point in the progression of a target view within a container from hidden (fully outside the container) to visible."
    },
    {
        "title": "chartForegroundStyleScale(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartforegroundstylescale(_:)",
        "html": "Parameters\nmapping\n\nMaps data categories to foreground styles.\n\nSee Also\nStyles\nfunc chartBackground<V>(alignment: Alignment, content: (ChartProxy) -> V) -> some View\nAdds a background to a view that contains a chart.\nfunc chartForegroundStyleScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Domain>(domain: Domain, type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Domain, S>(domain: Domain, mapping: (Domain.Element) -> S) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<DataValue, S>(mapping: (DataValue) -> S) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Range>(range: Range, type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale(type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartPlotStyle<Content>(content: (ChartPlotContent) -> Content) -> some View\nConfigures the plot area of charts."
    },
    {
        "title": "key",
        "url": "https://developer.apple.com/documentation/swiftui/keypress/key",
        "html": "See Also\nGetting the keypress\nlet characters: String\nThe characters generated by the pressed key as if no modifier key applies.\nlet modifiers: EventModifiers\nThe set of modifier keys the user held in addition to the pressed key."
    },
    {
        "title": "threshold(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltransitionconfiguration/threshold(_:)",
        "html": "Parameters\nthreshold\n\nThe threshold specifying how much of the view must intersect with the container before it is treated as visible.\n\nReturn Value\n\nA copy of this configuration with the threshold set to the given value.\n\nSee Also\nAccessing the configuration\nfunc animation(Animation) -> ScrollTransitionConfiguration\nSets the animation with which the transition will be applied.\nstruct Threshold\nDescribes a specific point in the progression of a target view within a container from hidden (fully outside the container) to visible."
    },
    {
        "title": "animated(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltransitionconfiguration/animated(_:)",
        "html": "Parameters\nanimation\n\nThe animation to use when transitioning between states.\n\nReturn Value\n\nA configuration that discretely animates between transition phases.\n\nDiscussion\n\nUnlike the interactive configuration, the transition isn\u2019t interpolated as the scroll view is scrolled. Instead, the transition phase only changes once the threshold has been reached, at which time the given animation is used to animate to the new phase.\n\nSee Also\nGetting the configuration\nstatic let identity: ScrollTransitionConfiguration\nCreates a new configuration that does not change the appearance of the view.\nstatic let animated: ScrollTransitionConfiguration\nCreates a new configuration that discretely animates the transition when the view becomes visible.\nstatic let interactive: ScrollTransitionConfiguration\nCreates a new configuration that interactively interpolates the transition\u2019s effect as the view is scrolled into the visible region of the container.\nstatic func interactive(timingCurve: UnitCurve) -> ScrollTransitionConfiguration\nCreates a new configuration that interactively interpolates the transition\u2019s effect as the view is scrolled into the visible region of the container."
    },
    {
        "title": "misspelledWords",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitysystemrotor/misspelledwords",
        "html": "See Also\nIterating through text\nstatic var textFields: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all text fields.\nstatic var boldText: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all the ranges of bolded text.\nstatic var italicText: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all the ranges of italicized text.\nstatic var underlineText: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all the ranges of underlined text."
    },
    {
        "title": "interactive(timingCurve:)",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltransitionconfiguration/interactive(timingcurve:)",
        "html": "Parameters\ntimingCurve\n\nThe curve that adjusts the pace at which the effect is interpolated between phases of the transition. For example, an .easeIn curve causes interpolation to begin slowly as the view reaches the edge of the scroll view, then speed up as it reaches the visible threshold. The curve is applied \u2018forward\u2019 while the view is appearing, meaning that time zero corresponds to the view being just hidden, and time 1.0 corresponds to the pont at which the view reaches the configuration threshold. This also means that the timing curve is applied in reversed while the view is moving away from the center of the scroll view.\n\nReturn Value\n\nA configuration that interactively interpolates between transition phases based on the current scroll position.\n\nSee Also\nGetting the configuration\nstatic let identity: ScrollTransitionConfiguration\nCreates a new configuration that does not change the appearance of the view.\nstatic let animated: ScrollTransitionConfiguration\nCreates a new configuration that discretely animates the transition when the view becomes visible.\nstatic func animated(Animation) -> ScrollTransitionConfiguration\nCreates a new configuration that discretely animates the transition when the view becomes visible.\nstatic let interactive: ScrollTransitionConfiguration\nCreates a new configuration that interactively interpolates the transition\u2019s effect as the view is scrolled into the visible region of the container."
    },
    {
        "title": "isEditing",
        "url": "https://developer.apple.com/documentation/swiftui/editmode/isediting",
        "html": "Discussion\n\nThis property returns true if the mode is something other than inactive."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/unifiedwindowtoolbarstyle/init()",
        "html": "See Also\nCreating the window toolbar style\ninit(showsTitle: Bool)\nCreates a unified window toolbar style."
    },
    {
        "title": "custom(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/listsectionspacing/custom(_:)",
        "html": "Parameters\nspacing\n\nthe amount of spacing to use.\n\nSee Also\nGetting section spacing\nstatic let `default`: ListSectionSpacing\nThe default spacing between sections\nstatic let compact: ListSectionSpacing\nCompact spacing between sections"
    },
    {
        "title": "default",
        "url": "https://developer.apple.com/documentation/swiftui/listsectionspacing/default",
        "html": "See Also\nGetting section spacing\nstatic let compact: ListSectionSpacing\nCompact spacing between sections\nstatic func custom(CGFloat) -> ListSectionSpacing\nCreates a custom spacing value."
    },
    {
        "title": "compact",
        "url": "https://developer.apple.com/documentation/swiftui/listsectionspacing/compact",
        "html": "See Also\nGetting section spacing\nstatic let `default`: ListSectionSpacing\nThe default spacing between sections\nstatic func custom(CGFloat) -> ListSectionSpacing\nCreates a custom spacing value."
    },
    {
        "title": "anchor",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltarget/anchor",
        "html": "See Also\nGetting the scroll target\nvar rect: CGRect\nThe rect that a scrollable view should try and have contained."
    },
    {
        "title": "viewAligned(limitBehavior:)",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltargetbehavior/viewaligned(limitbehavior:)",
        "html": "Discussion\n\nYou use this behavior when a scroll view should always align its scroll targets to a rectangle that\u2019s aligned to the geometry of a view. In the following example, the scroll view always picks an item view to settle on.\n\nScrollView(.horizontal) {\n    LazyHStack(spacing: 10.0) {\n        ForEach(items) { item in\n            ItemView(item)\n        }\n    }\n    .scrollTargetLayout()\n}\n.scrollTargetBehavior(.viewAligned)\n.padding(.horizontal, 20.0)\n\n\nYou configure which views should be used for settling using the View/scrollTargetLayout() modifier. Apply this modifier to a layout container like LazyVStack or HStack and each individual view in that layout will be considered for alignment.\n\nYou can customize whether the view aligned behavior limits the number of views that can be scrolled at a time by using the ViewAlignedScrollTargetBehavior.LimitBehavior type. Provide a value of ViewAlignedScrollTargetBehavior.LimitBehavior/always to always have the behavior only allow a few views to be scrolled at a time.\n\nBy default, the view aligned behavior limits the number of views it scrolls when in a compact horizontal size class when scrollable in the horizontal axis, when in a compact vertical size class when scrollable in the vertical axis, and otherwise doesn\u2019t impose any limit on the number of views that can be scrolled.\n\nSee Also\nGetting the scroll target behavior\nstatic var paging: PagingScrollTargetBehavior\nThe scroll behavior that aligns scroll targets to container-based geometry.\nAvailable when Self is PagingScrollTargetBehavior.\nstatic var viewAligned: ViewAlignedScrollTargetBehavior\nThe scroll behavior that aligns scroll targets to view-based geometry.\nAvailable when Self is ViewAlignedScrollTargetBehavior."
    },
    {
        "title": "paging",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltargetbehavior/paging",
        "html": "Discussion\n\nIn the following example, every view in the lazy stack is flexible in both directions and the scroll view settles to container-aligned boundaries.\n\nScrollView {\n    LazyVStack(spacing: 0.0) {\n        ForEach(items) { item in\n            FullScreenItem(item)\n        }\n    }\n}\n.scrollTargetBehavior(.paging)\n\nSee Also\nGetting the scroll target behavior\nstatic var viewAligned: ViewAlignedScrollTargetBehavior\nThe scroll behavior that aligns scroll targets to view-based geometry.\nAvailable when Self is ViewAlignedScrollTargetBehavior.\nstatic func viewAligned(limitBehavior: ViewAlignedScrollTargetBehavior.LimitBehavior) -> Self\nThe scroll behavior that aligns scroll targets to view-based geometry.\nAvailable when Self is ViewAlignedScrollTargetBehavior."
    },
    {
        "title": "rect",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltarget/rect",
        "html": "See Also\nGetting the scroll target\nvar anchor: UnitPoint?\nThe anchor to which the rect should be aligned within the visible region of the scrollable view."
    },
    {
        "title": "viewAligned",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltargetbehavior/viewaligned",
        "html": "Discussion\n\nYou use this behavior when a scroll view should always align its scroll targets to a rectangle that\u2019s aligned to the geometry of a view. In the following example, the scroll view always picks an item view to settle on.\n\nScrollView(.horizontal) {\n    LazyHStack(spacing: 10.0) {\n        ForEach(items) { item in\n            ItemView(item)\n        }\n    }\n    .scrollTargetLayout()\n}\n.scrollTargetBehavior(.viewAligned)\n.padding(.horizontal, 20.0)\n\n\nYou configure which views should be used for settling using the View/scrollTargetLayout() modifier. Apply this modifier to a layout container like LazyVStack or HStack and each individual view in that layout will be considered for alignment.\n\nYou can customize whether the view aligned behavior limits the number of views that can be scrolled at a time by using the ViewAlignedScrollTargetBehavior.LimitBehavior type. Provide a value of ViewAlignedScrollTargetBehavior.LimitBehavior/always to always have the behavior only allow a few views to be scrolled at a time.\n\nBy default, the view aligned behavior limits the number of views it scrolls when in a compact horizontal size class when scrollable in the horizontal axis, when in a compact vertical size class when scrollable in the vertical axis, and otherwise doesn\u2019t impose any limit on the number of views that can be scrolled.\n\nSee Also\nGetting the scroll target behavior\nstatic var paging: PagingScrollTargetBehavior\nThe scroll behavior that aligns scroll targets to container-based geometry.\nAvailable when Self is PagingScrollTargetBehavior.\nstatic func viewAligned(limitBehavior: ViewAlignedScrollTargetBehavior.LimitBehavior) -> Self\nThe scroll behavior that aligns scroll targets to view-based geometry.\nAvailable when Self is ViewAlignedScrollTargetBehavior."
    },
    {
        "title": "updateTarget(_:context:)",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltargetbehavior/updatetarget(_:context:)",
        "html": "Required\n\nDiscussion\n\nThe system calls this method in two main cases:\n\nWhen a scroll gesture ends, it calculates where it would naturally scroll to using its deceleration rate. The system provides this calculated value as the target of this method.\n\nWhen a scrollable view\u2019s size changes, it calculates where it should be scrolled given the new size and provides this calculates value as the target of this method.\n\nYou can implement this method to override the calculated target which will have the scrollable view scroll to a different position than it would otherwise.\n\nSee Also\nUpdating the proposed target\ntypealias TargetContext\nThe context in which a scroll behavior updates the scroll target."
    },
    {
        "title": "originalTarget",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltargetbehaviorcontext/originaltarget",
        "html": "See Also\nGetting the scroll target behavior context\nvar axes: Axis.Set\nThe axes in which the scrollable view is scrollable.\nvar containerSize: CGSize\nThe size of the container of the scrollable view.\nvar contentSize: CGSize\nThe size of the content of the scrollable view.\nvar velocity: CGVector\nThe current velocity of the scrollable view\u2019s scroll gesture."
    },
    {
        "title": "ScrollTargetBehavior.TargetContext",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltargetbehavior/targetcontext",
        "html": "See Also\nUpdating the proposed target\nfunc updateTarget(inout ScrollTarget, context: Self.TargetContext)\nUpdates the proposed target that a scrollable view should scroll to.\n\nRequired"
    },
    {
        "title": "always",
        "url": "https://developer.apple.com/documentation/swiftui/viewalignedscrolltargetbehavior/limitbehavior/always",
        "html": "Discussion\n\nAlways limit the amount of views that can be scrolled.\n\nSee Also\nGetting the limit behavior\nstatic var automatic: ViewAlignedScrollTargetBehavior.LimitBehavior\nThe automatic limit behavior.\nstatic var never: ViewAlignedScrollTargetBehavior.LimitBehavior\nThe never limit behavior."
    },
    {
        "title": "ScrollTransitionPhase.identity",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltransitionphase/identity",
        "html": "Discussion\n\nIn this phase, a transition should show its steady state appearance, which will generally not make any visual change to the view.\n\nSee Also\nGetting the phase\ncase topLeading\nThe scroll transition is being applied to a view that is about to move into the visible area at the top edge of a vertical scroll view, or the leading edge of a horizont scroll view.\ncase bottomTrailing\nThe scroll transition is being applied to a view that is about to move into the visible area at the bottom edge of a vertical scroll view, or the trailing edge of a horizontal scroll view."
    },
    {
        "title": "contentSize",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltargetbehaviorcontext/contentsize",
        "html": "See Also\nGetting the scroll target behavior context\nvar axes: Axis.Set\nThe axes in which the scrollable view is scrollable.\nvar containerSize: CGSize\nThe size of the container of the scrollable view.\nvar originalTarget: ScrollTarget\nThe original target when the scroll gesture began.\nvar velocity: CGVector\nThe current velocity of the scrollable view\u2019s scroll gesture."
    },
    {
        "title": "value",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltransitionphase/value",
        "html": "Discussion\n\nReturns -1.0 when in the topLeading phase, zero when in the identity phase, and 1.0 when in the bottomTrailing phase.\n\nSee Also\nAccessing the phase state\nvar isIdentity: Bool"
    },
    {
        "title": "init(_:id:textRange:prepare:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityrotorentry/init(_:id:textrange:prepare:)-5vv9i",
        "html": "Parameters\nlabel\n\nLocalized string used to show this Rotor entry to users.\n\nid\n\nUsed to find the UI element associated with this Rotor entry. This identifier should be used within a scrollView, either in a ForEach or using an id call.\n\ntextRange\n\nOptional range of text associated with this Rotor entry. This should be a range within text that is set as the accessibility label or accessibility value of the associated element.\n\nprepare\n\nOptional closure to run before a Rotor entry is navigated to, to prepare the UI as needed. This can be used to bring the UI element on-screen if it isn\u2019t already, and SwiftUI is not able to automatically scroll to it.\n\nSee Also\nCreating a rotor entry with an identifier\ninit(LocalizedStringKey, id: ID, textRange: Range<String.Index>?, prepare: (() -> Void))\nCreate a Rotor entry with a specific label and identifier, with an optional range.\ninit(Text, id: ID, textRange: Range<String.Index>?, prepare: (() -> Void))\nCreate a Rotor entry with a specific label and identifier, with an optional range."
    },
    {
        "title": "ScrollTransitionPhase.bottomTrailing",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltransitionphase/bottomtrailing",
        "html": "See Also\nGetting the phase\ncase identity\nThe scroll transition is being applied to a view that is in the visible area.\ncase topLeading\nThe scroll transition is being applied to a view that is about to move into the visible area at the top edge of a vertical scroll view, or the leading edge of a horizont scroll view."
    },
    {
        "title": "isIdentity",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltransitionphase/isidentity",
        "html": "See Also\nAccessing the phase state\nvar value: Double\nA phase-derived value that can be used to scale or otherwise modify effects."
    },
    {
        "title": "hidden",
        "url": "https://developer.apple.com/documentation/swiftui/scrollindicatorvisibility/hidden",
        "html": "Discussion\n\nBy default, scroll views in macOS show indicators when a mouse is connected. Use never to indicate a stronger preference that can override this behavior.\n\nSee Also\nGetting visibilties\nstatic var automatic: ScrollIndicatorVisibility\nScroll indicator visibility depends on the policies of the component accepting the visibility configuration.\nstatic var never: ScrollIndicatorVisibility\nScroll indicators should never be visible.\nstatic var visible: ScrollIndicatorVisibility\nShow the scroll indicators."
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityrotorcontentbuilder/buildblock(_:_:_:_:_:_:_:_:)",
        "html": "See Also\nBuilding navigation content\nstatic func buildBlock<Content>(Content) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1>(C0, C1) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some AccessibilityRotorContent\nstatic func buildIf<Content>(Content?) -> some AccessibilityRotorContent\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder."
    },
    {
        "title": "axes",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltargetbehaviorcontext/axes",
        "html": "See Also\nGetting the scroll target behavior context\nvar containerSize: CGSize\nThe size of the container of the scrollable view.\nvar contentSize: CGSize\nThe size of the content of the scrollable view.\nvar originalTarget: ScrollTarget\nThe original target when the scroll gesture began.\nvar velocity: CGVector\nThe current velocity of the scrollable view\u2019s scroll gesture."
    },
    {
        "title": "custom",
        "url": "https://developer.apple.com/documentation/swiftui/keyboardshortcut/localization-swift.struct/custom",
        "html": "Discussion\n\nWhen you use this mode, you have to take care of international use-cases separately.\n\nSee Also\nGetting localization strategies\nstatic let automatic: KeyboardShortcut.Localization\nRemap shortcuts to their international counterparts, mirrored for right-to-left usage if appropriate.\nstatic let withoutMirroring: KeyboardShortcut.Localization\nDon\u2019t mirror shortcuts."
    },
    {
        "title": "downArrow",
        "url": "https://developer.apple.com/documentation/swiftui/keyequivalent/downarrow",
        "html": "See Also\nGetting arrow keys\nstatic let upArrow: KeyEquivalent\nUp Arrow (U+F700)\nstatic let leftArrow: KeyEquivalent\nLeft Arrow (U+F702)\nstatic let rightArrow: KeyEquivalent\nRight Arrow (U+F703)"
    },
    {
        "title": "DigitalCrownRotationalSensitivity.medium",
        "url": "https://developer.apple.com/documentation/swiftui/digitalcrownrotationalsensitivity/medium",
        "html": "See Also\nGetting sensitivity options\ncase low\nLow sensitivity.\ncase high\nHigh sensitivity."
    },
    {
        "title": "init(_:textRange:prepare:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityrotorentry/init(_:textrange:prepare:)-6w5wm",
        "html": "Parameters\nlabel\n\nLocalized string used to show this Rotor entry to users. If no label is specified, the Rotor entry will be labeled based on the text at that range.\n\nrange\n\nRange of text associated with this Rotor entry.\n\nprepare\n\nOptional closure to run before a Rotor entry is navigated to, to prepare the UI as needed. This can be used to bring the UI element or text on-screen if it isn\u2019t already, and SwiftUI not able to automatically scroll to it.\n\nSee Also\nCreating a rotor entry\ninit(LocalizedStringKey, textRange: Range<String.Index>, prepare: (() -> Void))\nCreate a Rotor entry with a specific label and range. This Rotor entry will be associated with the Accessibility element that owns the Rotor.\ninit(Text?, textRange: Range<String.Index>, prepare: (() -> Void))\nCreate a Rotor entry with a specific label and range. This Rotor entry will be associated with the Accessibility element that owns the Rotor."
    },
    {
        "title": "init(_:id:in:textRange:prepare:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityrotorentry/init(_:id:in:textrange:prepare:)-5ugvo",
        "html": "Parameters\nlabel\n\nLocalized string used to show this Rotor entry to users.\n\nid\n\nUsed to find the UI element associated with this Rotor entry. This identifier and namespace should match a call to accessibilityRotorEntry(id:in).\n\nnamespace\n\nNamespace for this identifier. Should match a call to accessibilityRotorEntry(id:in).\n\ntextRange\n\nOptional range of text associated with this Rotor entry. This should be a range within text that is set as the accessibility label or accessibility value of the associated element.\n\nprepare\n\nOptional closure to run before a Rotor entry is navigated to, to prepare the UI as needed. This should be used to bring the Accessibility element on-screen, if scrolling is needed to get to it.\n\nSee Also\nCreating an identified rotor entry in a namespace\ninit(LocalizedStringKey, id: ID, in: Namespace.ID, textRange: Range<String.Index>?, prepare: (() -> Void))\nCreate a Rotor entry with a specific label, identifier and namespace, and with an optional range.\ninit<L>(L, ID, in: Namespace.ID, textRange: Range<String.Index>?, prepare: (() -> Void))\nCreate a Rotor entry with a specific label, identifier and namespace, and with an optional range."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/scrollindicatorvisibility/automatic",
        "html": "See Also\nGetting visibilties\nstatic var hidden: ScrollIndicatorVisibility\nHide the scroll indicators.\nstatic var never: ScrollIndicatorVisibility\nScroll indicators should never be visible.\nstatic var visible: ScrollIndicatorVisibility\nShow the scroll indicators."
    },
    {
        "title": "end",
        "url": "https://developer.apple.com/documentation/swiftui/keyequivalent/end",
        "html": "See Also\nGetting other special keys\nstatic let clear: KeyEquivalent\nClear (U+F739)\nstatic let delete: KeyEquivalent\nDelete (U+0008)\nstatic let deleteForward: KeyEquivalent\nDelete Forward (U+F728)\nstatic let escape: KeyEquivalent\nEscape (U+001B)\nstatic let home: KeyEquivalent\nHome (U+F729)\nstatic let pageDown: KeyEquivalent\nPage Down (U+F72D)\nstatic let pageUp: KeyEquivalent\nPage Up (U+F72C)\nstatic let `return`: KeyEquivalent\nReturn (U+000D)\nstatic let space: KeyEquivalent\nSpace (U+0020)\nstatic let tab: KeyEquivalent\nTab (U+0009)"
    },
    {
        "title": "withoutMirroring",
        "url": "https://developer.apple.com/documentation/swiftui/keyboardshortcut/localization-swift.struct/withoutmirroring",
        "html": "Discussion\n\nUse this for shortcuts that always have a specific directionality, like aligning something on the right.\n\nDon\u2019t use this option for navigational shortcuts like \u201cGo Back\u201d because navigation is flipped in right-to-left contexts.\n\nSee Also\nGetting localization strategies\nstatic let automatic: KeyboardShortcut.Localization\nRemap shortcuts to their international counterparts, mirrored for right-to-left usage if appropriate.\nstatic let custom: KeyboardShortcut.Localization\nDon\u2019t use automatic shortcut remapping."
    },
    {
        "title": "leftArrow",
        "url": "https://developer.apple.com/documentation/swiftui/keyequivalent/leftarrow",
        "html": "See Also\nGetting arrow keys\nstatic let upArrow: KeyEquivalent\nUp Arrow (U+F700)\nstatic let downArrow: KeyEquivalent\nDown Arrow (U+F701)\nstatic let rightArrow: KeyEquivalent\nRight Arrow (U+F703)"
    },
    {
        "title": "rightArrow",
        "url": "https://developer.apple.com/documentation/swiftui/keyequivalent/rightarrow",
        "html": "See Also\nGetting arrow keys\nstatic let upArrow: KeyEquivalent\nUp Arrow (U+F700)\nstatic let downArrow: KeyEquivalent\nDown Arrow (U+F701)\nstatic let leftArrow: KeyEquivalent\nLeft Arrow (U+F702)"
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/keyboardshortcut/localization-swift.struct/automatic",
        "html": "Discussion\n\nThis is the default configuration.\n\nSee Also\nGetting localization strategies\nstatic let custom: KeyboardShortcut.Localization\nDon\u2019t use automatic shortcut remapping.\nstatic let withoutMirroring: KeyboardShortcut.Localization\nDon\u2019t mirror shortcuts."
    },
    {
        "title": "upArrow",
        "url": "https://developer.apple.com/documentation/swiftui/keyequivalent/uparrow",
        "html": "See Also\nGetting arrow keys\nstatic let downArrow: KeyEquivalent\nDown Arrow (U+F701)\nstatic let leftArrow: KeyEquivalent\nLeft Arrow (U+F702)\nstatic let rightArrow: KeyEquivalent\nRight Arrow (U+F703)"
    },
    {
        "title": "escape",
        "url": "https://developer.apple.com/documentation/swiftui/keyequivalent/escape",
        "html": "See Also\nGetting other special keys\nstatic let clear: KeyEquivalent\nClear (U+F739)\nstatic let delete: KeyEquivalent\nDelete (U+0008)\nstatic let deleteForward: KeyEquivalent\nDelete Forward (U+F728)\nstatic let end: KeyEquivalent\nEnd (U+F72B)\nstatic let home: KeyEquivalent\nHome (U+F729)\nstatic let pageDown: KeyEquivalent\nPage Down (U+F72D)\nstatic let pageUp: KeyEquivalent\nPage Up (U+F72C)\nstatic let `return`: KeyEquivalent\nReturn (U+000D)\nstatic let space: KeyEquivalent\nSpace (U+0020)\nstatic let tab: KeyEquivalent\nTab (U+0009)"
    },
    {
        "title": "DigitalCrownRotationalSensitivity.high",
        "url": "https://developer.apple.com/documentation/swiftui/digitalcrownrotationalsensitivity/high",
        "html": "See Also\nGetting sensitivity options\ncase low\nLow sensitivity.\ncase medium\nMedium sensitivity."
    },
    {
        "title": "home",
        "url": "https://developer.apple.com/documentation/swiftui/keyequivalent/home",
        "html": "See Also\nGetting other special keys\nstatic let clear: KeyEquivalent\nClear (U+F739)\nstatic let delete: KeyEquivalent\nDelete (U+0008)\nstatic let deleteForward: KeyEquivalent\nDelete Forward (U+F728)\nstatic let end: KeyEquivalent\nEnd (U+F72B)\nstatic let escape: KeyEquivalent\nEscape (U+001B)\nstatic let pageDown: KeyEquivalent\nPage Down (U+F72D)\nstatic let pageUp: KeyEquivalent\nPage Up (U+F72C)\nstatic let `return`: KeyEquivalent\nReturn (U+000D)\nstatic let space: KeyEquivalent\nSpace (U+0020)\nstatic let tab: KeyEquivalent\nTab (U+0009)"
    },
    {
        "title": "pageDown",
        "url": "https://developer.apple.com/documentation/swiftui/keyequivalent/pagedown",
        "html": "See Also\nGetting other special keys\nstatic let clear: KeyEquivalent\nClear (U+F739)\nstatic let delete: KeyEquivalent\nDelete (U+0008)\nstatic let deleteForward: KeyEquivalent\nDelete Forward (U+F728)\nstatic let end: KeyEquivalent\nEnd (U+F72B)\nstatic let escape: KeyEquivalent\nEscape (U+001B)\nstatic let home: KeyEquivalent\nHome (U+F729)\nstatic let pageUp: KeyEquivalent\nPage Up (U+F72C)\nstatic let `return`: KeyEquivalent\nReturn (U+000D)\nstatic let space: KeyEquivalent\nSpace (U+0020)\nstatic let tab: KeyEquivalent\nTab (U+0009)"
    },
    {
        "title": "return",
        "url": "https://developer.apple.com/documentation/swiftui/keyequivalent/return",
        "html": "See Also\nGetting other special keys\nstatic let clear: KeyEquivalent\nClear (U+F739)\nstatic let delete: KeyEquivalent\nDelete (U+0008)\nstatic let deleteForward: KeyEquivalent\nDelete Forward (U+F728)\nstatic let end: KeyEquivalent\nEnd (U+F72B)\nstatic let escape: KeyEquivalent\nEscape (U+001B)\nstatic let home: KeyEquivalent\nHome (U+F729)\nstatic let pageDown: KeyEquivalent\nPage Down (U+F72D)\nstatic let pageUp: KeyEquivalent\nPage Up (U+F72C)\nstatic let space: KeyEquivalent\nSpace (U+0020)\nstatic let tab: KeyEquivalent\nTab (U+0009)"
    },
    {
        "title": "character",
        "url": "https://developer.apple.com/documentation/swiftui/keyequivalent/character",
        "html": "See Also\nCreating a key equivalent\ninit(Character)\nCreates a new key equivalent from the given character value."
    },
    {
        "title": "cancelAction",
        "url": "https://developer.apple.com/documentation/swiftui/keyboardshortcut/cancelaction",
        "html": "See Also\nGetting standard shortcuts\nstatic let defaultAction: KeyboardShortcut\nThe standard keyboard shortcut for the default button, consisting of the Return (\u21a9) key and no modifiers."
    },
    {
        "title": "init(_:modifiers:)",
        "url": "https://developer.apple.com/documentation/swiftui/keyboardshortcut/init(_:modifiers:)",
        "html": "Discussion\n\nThe localization configuration defaults to automatic.\n\nSee Also\nCreating a shortcut\nvar key: KeyEquivalent\nThe key equivalent that the user presses in conjunction with any specified modifier keys to activate the shortcut.\nvar modifiers: EventModifiers\nThe modifier keys that the user presses in conjunction with a key equivalent to activate the shortcut."
    },
    {
        "title": "modifiers",
        "url": "https://developer.apple.com/documentation/swiftui/keyboardshortcut/modifiers",
        "html": "See Also\nCreating a shortcut\ninit(KeyEquivalent, modifiers: EventModifiers)\nCreates a new keyboard shortcut with the given key equivalent and set of modifier keys.\nvar key: KeyEquivalent\nThe key equivalent that the user presses in conjunction with any specified modifier keys to activate the shortcut."
    },
    {
        "title": "init(_:modifiers:localization:)",
        "url": "https://developer.apple.com/documentation/swiftui/keyboardshortcut/init(_:modifiers:localization:)",
        "html": "Discussion\n\nUse the localization parameter to specify a localization strategy for this shortcut.\n\nSee Also\nCreating a localized shortcut\nvar localization: KeyboardShortcut.Localization\nThe localization strategy to apply to this shortcut.\nstruct Localization\nOptions for how a keyboard shortcut participates in automatic localization."
    },
    {
        "title": "localization",
        "url": "https://developer.apple.com/documentation/swiftui/keyboardshortcut/localization-swift.property",
        "html": "See Also\nCreating a localized shortcut\ninit(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization)\nCreates a new keyboard shortcut with the given key equivalent and set of modifier keys.\nstruct Localization\nOptions for how a keyboard shortcut participates in automatic localization."
    },
    {
        "title": "chartXSelection(range:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartxselection(range:)",
        "html": "See Also\nSelection\nfunc chartXSelection<P>(value: Binding<P?>) -> some View\nfunc chartYSelection<P>(range: Binding<ClosedRange<P>?>) -> some View\nfunc chartYSelection<P>(value: Binding<P?>) -> some View\nfunc chartAngleSelection<P>(value: Binding<P?>) -> some View"
    },
    {
        "title": "chartXSelection(value:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartxselection(value:)",
        "html": "See Also\nSelection\nfunc chartXSelection<P>(range: Binding<ClosedRange<P>?>) -> some View\nfunc chartYSelection<P>(range: Binding<ClosedRange<P>?>) -> some View\nfunc chartYSelection<P>(value: Binding<P?>) -> some View\nfunc chartAngleSelection<P>(value: Binding<P?>) -> some View"
    },
    {
        "title": "command",
        "url": "https://developer.apple.com/documentation/swiftui/eventmodifiers/command",
        "html": "See Also\nGetting modifier keys\nstatic let all: EventModifiers\nAll possible modifier keys.\nstatic let capsLock: EventModifiers\nThe Caps Lock key.\nstatic let control: EventModifiers\nThe Control key.\nstatic let numericPad: EventModifiers\nAny key on the numeric keypad.\nstatic let option: EventModifiers\nThe Option key.\nstatic let shift: EventModifiers\nThe Shift key."
    },
    {
        "title": "all",
        "url": "https://developer.apple.com/documentation/swiftui/eventmodifiers/all",
        "html": "See Also\nGetting modifier keys\nstatic let capsLock: EventModifiers\nThe Caps Lock key.\nstatic let command: EventModifiers\nThe Command key.\nstatic let control: EventModifiers\nThe Control key.\nstatic let numericPad: EventModifiers\nAny key on the numeric keypad.\nstatic let option: EventModifiers\nThe Option key.\nstatic let shift: EventModifiers\nThe Shift key."
    },
    {
        "title": "KeyboardShortcut.Localization",
        "url": "https://developer.apple.com/documentation/swiftui/keyboardshortcut/localization-swift.struct",
        "html": "Overview\n\nA shortcut\u2019s key that is defined on an US-English keyboard layout might not be reachable on international layouts. For example the shortcut \u2318[ works well for the US layout but is hard to reach for German users. On the German keyboard layout, pressing \u23255 will produce [, which causes the shortcut to become \u2325\u23185. If configured, which is the default behavior, automatic shortcut remapping will convert it to \u2318\u00d6.\n\nIn addition to that, some keyboard shortcuts carry information about directionality. Right-aligning a block of text or seeking forward in context of music playback are such examples. These kinds of shortcuts benefit from the option withoutMirroring to tell the system that they won\u2019t be flipped when running in a right-to-left context.\n\nTopics\nGetting localization strategies\nstatic let automatic: KeyboardShortcut.Localization\nRemap shortcuts to their international counterparts, mirrored for right-to-left usage if appropriate.\nstatic let custom: KeyboardShortcut.Localization\nDon\u2019t use automatic shortcut remapping.\nstatic let withoutMirroring: KeyboardShortcut.Localization\nDon\u2019t mirror shortcuts.\nRelationships\nConforms To\nSendable\nSee Also\nCreating a localized shortcut\ninit(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization)\nCreates a new keyboard shortcut with the given key equivalent and set of modifier keys.\nvar localization: KeyboardShortcut.Localization\nThe localization strategy to apply to this shortcut."
    },
    {
        "title": "chartAngleSelection(value:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartangleselection(value:)",
        "html": "See Also\nSelection\nfunc chartXSelection<P>(range: Binding<ClosedRange<P>?>) -> some View\nfunc chartXSelection<P>(value: Binding<P?>) -> some View\nfunc chartYSelection<P>(range: Binding<ClosedRange<P>?>) -> some View\nfunc chartYSelection<P>(value: Binding<P?>) -> some View"
    },
    {
        "title": "capsLock",
        "url": "https://developer.apple.com/documentation/swiftui/eventmodifiers/capslock",
        "html": "See Also\nGetting modifier keys\nstatic let all: EventModifiers\nAll possible modifier keys.\nstatic let command: EventModifiers\nThe Command key.\nstatic let control: EventModifiers\nThe Control key.\nstatic let numericPad: EventModifiers\nAny key on the numeric keypad.\nstatic let option: EventModifiers\nThe Option key.\nstatic let shift: EventModifiers\nThe Shift key."
    },
    {
        "title": "colorScheme(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/colorscheme(_:)",
        "html": "Deprecated\n\nUse preferredColorScheme(_:) instead.\n\nParameters\ncolorScheme\n\nThe color scheme for this view.\n\nReturn Value\n\nA view that sets this view\u2019s color scheme.\n\nDiscussion\n\nUse colorScheme(_:) to set the color scheme for the view to which you apply it and any subviews.\n\nSee Also\nAppearance modifiers\nfunc listRowPlatterColor(Color?) -> some View\nSets the color that the system applies to the row background when this view is placed in a list.\nDeprecated\nfunc background<Background>(Background, alignment: Alignment) -> some View\nLayers the given view behind this view.\nDeprecated\nfunc overlay<Overlay>(Overlay, alignment: Alignment) -> some View\nLayers a secondary view in front of this view.\nDeprecated\nfunc foregroundColor(Color?) -> some View\nSets the color of the foreground elements displayed by this view.\nDeprecated"
    },
    {
        "title": "chartScrollableAxes(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartscrollableaxes(_:)",
        "html": "Parameters\naxes\n\nThe set of axes to enable scrolling.\n\nDiscussion\n\nUse this method to make a chart scrollable. Below is an example that makes a chart scrollable along the horizontal axis.\n\nChart(data) {\n    BarMark(\n        x: .value(\"x\", $0.x),\n        y: .value(\"y\", $0.y)\n    )\n}\n.chartScrollableAxes(.horizontal)\n\n\nNote\n\nWhen scrolling is enabled along an axis, a default portion of the chart will be made visible. You can use the chartXVisibleDomain or chartYVisibleDomain modifiers to configure the visible domain.\n\nSee Also\nScrolling\nfunc chartScrollPosition(initialX: some Plottable) -> some View\nSets the initial scroll position along the x-axis. Once the user scrolls the scroll view, the value provided to this modifier will have no effect.\nfunc chartScrollPosition(initialY: some Plottable) -> some View\nSets the initial scroll position along the y-axis. Once the user scrolls the scroll view, the value provided to this modifier will have no effect.\nfunc chartScrollPosition(x: Binding<some Plottable>) -> some View\nAssociates a binding to be updated when the chart scrolls along the x-axis.\nfunc chartScrollPosition(y: Binding<some Plottable>) -> some View\nAssociates a binding to be updated when the chart scrolls along the y-axis.\nfunc chartScrollTargetBehavior(some ChartScrollTargetBehavior) -> some View\nSets the scroll behavior of the scrollable chart."
    },
    {
        "title": "never",
        "url": "https://developer.apple.com/documentation/swiftui/scrollindicatorvisibility/never",
        "html": "Discussion\n\nThis value behaves like hidden, but overrides scrollable views that choose to keep their indidicators visible. When using this value, provide an alternative method of scrolling. The typical horizontal swipe gesture might not be available, depending on the current input device.\n\nSee Also\nGetting visibilties\nstatic var automatic: ScrollIndicatorVisibility\nScroll indicator visibility depends on the policies of the component accepting the visibility configuration.\nstatic var hidden: ScrollIndicatorVisibility\nHide the scroll indicators.\nstatic var visible: ScrollIndicatorVisibility\nShow the scroll indicators."
    },
    {
        "title": "visible",
        "url": "https://developer.apple.com/documentation/swiftui/scrollindicatorvisibility/visible",
        "html": "Discussion\n\nThe actual visibility of the indicators depends on platform conventions like auto-hiding behaviors in iOS or user preference behaviors in macOS.\n\nSee Also\nGetting visibilties\nstatic var automatic: ScrollIndicatorVisibility\nScroll indicator visibility depends on the policies of the component accepting the visibility configuration.\nstatic var hidden: ScrollIndicatorVisibility\nHide the scroll indicators.\nstatic var never: ScrollIndicatorVisibility\nScroll indicators should never be visible."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/unifiedcompactwindowtoolbarstyle/init()",
        "html": "See Also\nCreating the window toolbar style\ninit(showsTitle: Bool)\nCreates a unified compact window toolbar style."
    },
    {
        "title": "textFields",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitysystemrotor/textfields",
        "html": "See Also\nIterating through text\nstatic var boldText: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all the ranges of bolded text.\nstatic var italicText: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all the ranges of italicized text.\nstatic var underlineText: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all the ranges of underlined text.\nstatic var misspelledWords: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all the ranges of mis-spelled words."
    },
    {
        "title": "writableContentTypes",
        "url": "https://developer.apple.com/documentation/swiftui/referencefiledocument/writablecontenttypes-41rwk",
        "html": "Discussion\n\nBy default, SwiftUI assumes that your document reads and writes the same set of content types. Only define this property if you need to indicate a different set of types for writing files. Otherwise, the default implementation of this property returns the list that you specify in your implementation of readableContentTypes."
    },
    {
        "title": "characters",
        "url": "https://developer.apple.com/documentation/swiftui/keypress/characters",
        "html": "See Also\nGetting the keypress\nlet key: KeyEquivalent\nThe key equivalent value for the pressed key.\nlet modifiers: EventModifiers\nThe set of modifier keys the user held in addition to the pressed key."
    },
    {
        "title": "boldText",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitysystemrotor/boldtext",
        "html": "See Also\nIterating through text\nstatic var textFields: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all text fields.\nstatic var italicText: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all the ranges of italicized text.\nstatic var underlineText: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all the ranges of underlined text.\nstatic var misspelledWords: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all the ranges of mis-spelled words."
    },
    {
        "title": "OpenImmersiveSpaceAction.Result.opened",
        "url": "https://developer.apple.com/documentation/swiftui/openimmersivespaceaction/result/opened",
        "html": "See Also\nGetting the result\ncase userCancelled\nOpening the immersive space failed since the user cancelled the request.\nBeta\ncase error\nOpening the immersive space failed since the system cannot fulfill the request.\nBeta"
    },
    {
        "title": "modifiers",
        "url": "https://developer.apple.com/documentation/swiftui/keypress/modifiers",
        "html": "See Also\nGetting the keypress\nlet key: KeyEquivalent\nThe key equivalent value for the pressed key.\nlet characters: String\nThe characters generated by the pressed key as if no modifier key applies."
    },
    {
        "title": "underlineText",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitysystemrotor/underlinetext",
        "html": "See Also\nIterating through text\nstatic var textFields: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all text fields.\nstatic var boldText: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all the ranges of bolded text.\nstatic var italicText: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all the ranges of italicized text.\nstatic var misspelledWords: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all the ranges of mis-spelled words."
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityrotorcontentbuilder/buildblock(_:_:_:_:_:_:)",
        "html": "See Also\nBuilding navigation content\nstatic func buildBlock<Content>(Content) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1>(C0, C1) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some AccessibilityRotorContent\nstatic func buildIf<Content>(Content?) -> some AccessibilityRotorContent\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder."
    },
    {
        "title": "links",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitysystemrotor/links",
        "html": "See Also\nIterating through links\nstatic func links(visited: Bool) -> AccessibilitySystemRotor\nSystem Rotors allowing users to iterate through links or visited links."
    },
    {
        "title": "headings",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitysystemrotor/headings",
        "html": "See Also\nIterating through headings\nstatic func headings(level: AccessibilityHeadingLevel) -> AccessibilitySystemRotor\nSystem Rotors allowing users to iterate through all headings, of various heading levels."
    },
    {
        "title": "buildBlock(_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityrotorcontentbuilder/buildblock(_:_:_:)",
        "html": "See Also\nBuilding navigation content\nstatic func buildBlock<Content>(Content) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1>(C0, C1) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some AccessibilityRotorContent\nstatic func buildIf<Content>(Content?) -> some AccessibilityRotorContent\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder."
    },
    {
        "title": "landmarks",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitysystemrotor/landmarks",
        "html": "See Also\nIterating through other elements\nstatic var images: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all images.\nstatic var lists: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all lists.\nstatic var tables: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all tables."
    },
    {
        "title": "phase",
        "url": "https://developer.apple.com/documentation/swiftui/keypress/phase",
        "html": "See Also\nGetting the phase of the keypress\nstruct Phases\nOptions for matching different phases of a key-press event."
    },
    {
        "title": "buildBlock(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityrotorcontentbuilder/buildblock(_:)",
        "html": "See Also\nBuilding navigation content\nstatic func buildBlock<C0, C1>(C0, C1) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some AccessibilityRotorContent\nstatic func buildIf<Content>(Content?) -> some AccessibilityRotorContent\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder."
    },
    {
        "title": "buildBlock(_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityrotorcontentbuilder/buildblock(_:_:)",
        "html": "See Also\nBuilding navigation content\nstatic func buildBlock<Content>(Content) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some AccessibilityRotorContent\nstatic func buildIf<Content>(Content?) -> some AccessibilityRotorContent\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder."
    },
    {
        "title": "chartYScale(range:type:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartyscale(range:type:)",
        "html": "Parameters\nrange\n\nThe range of y positions that correspond to the scale domain. By default the range is determined by the dimension of the plot area. You can use range: .plotDimension(startPadding:, endPadding:) to add padding to the scale range.\n\ntype\n\nThe scale type.\n\nSee Also\nAxis scales\nfunc chartXScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View\nConfigures the x scale for charts.\nfunc chartXScale<Domain>(domain: Domain, type: ScaleType?) -> some View\nConfigures the x scale for charts.\nfunc chartXScale<Range>(range: Range, type: ScaleType?) -> some View\nConfigures the x scale for charts.\nfunc chartXScale(type: ScaleType?) -> some View\nConfigures the x scale for charts.\nfunc chartYScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View\nConfigures the y scale for charts.\nfunc chartYScale<Domain>(domain: Domain, type: ScaleType?) -> some View\nConfigures the y scale for charts.\nfunc chartYScale(type: ScaleType?) -> some View\nConfigures the y scale for charts."
    },
    {
        "title": "buildBlock(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityrotorcontentbuilder/buildblock(_:_:_:_:)",
        "html": "See Also\nBuilding navigation content\nstatic func buildBlock<Content>(Content) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1>(C0, C1) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some AccessibilityRotorContent\nstatic func buildIf<Content>(Content?) -> some AccessibilityRotorContent\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder."
    },
    {
        "title": "OpenImmersiveSpaceAction.Result.error",
        "url": "https://developer.apple.com/documentation/swiftui/openimmersivespaceaction/result/error",
        "html": "See Also\nGetting the result\ncase opened\nOpening the immersive space succeeded.\nBeta\ncase userCancelled\nOpening the immersive space failed since the user cancelled the request.\nBeta"
    },
    {
        "title": "OpenImmersiveSpaceAction.Result.userCancelled",
        "url": "https://developer.apple.com/documentation/swiftui/openimmersivespaceaction/result/usercancelled",
        "html": "See Also\nGetting the result\ncase opened\nOpening the immersive space succeeded.\nBeta\ncase error\nOpening the immersive space failed since the system cannot fulfill the request.\nBeta"
    },
    {
        "title": "tables",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitysystemrotor/tables",
        "html": "See Also\nIterating through other elements\nstatic var images: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all images.\nstatic var landmarks: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all landmarks.\nstatic var lists: AccessibilitySystemRotor\nSystem Rotor allowing users to iterate through all lists."
    },
    {
        "title": "onLongPressGesture(minimumDuration:maximumDistance:pressing:perform:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
        "html": "Deprecated\n\nUse onLongPressGesture(minimumDuration:maximumDistance:perform:onPressingChanged:) instead.\n\nSee Also\nInput and events modifiers\nfunc onChange<V>(of: V, perform: (V) -> Void) -> some View\nAdds an action to perform when the given value changes.\nDeprecated\nfunc onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View\nAdds an action to perform when this view recognizes a tap gesture, and provides the action with the location of the interaction.\nDeprecated\nfunc onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View\nAdds an action to perform when this view recognizes a long press gesture.\nDeprecated\nfunc onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View\nAdds an action to perform in response to the system\u2019s Paste command.\nDeprecated\nfunc onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View\nAdds an action to perform in response to the system\u2019s Paste command with items that you validate.\nDeprecated\nfunc onDrop(of: [String], delegate: DropDelegate) -> some View\nDefines the destination for a drag and drop operation with the same size and position as this view, with behavior controlled by the given delegate.\nDeprecated\nfunc onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View\nDefines the destination for a drag and drop operation, using the same size and position as this view, handling dropped content with the given closure.\nDeprecated\nfunc onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View\nDefines the destination for a drag and drop operation with the same size and position as this view, handling dropped content and the drop location with the given closure.\nDeprecated\nfunc focusable(Bool, onFocusChange: (Bool) -> Void) -> some View\nSpecifies if the view is focusable and, if so, adds an action to perform when the view comes into focus.\nDeprecated\nfunc onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View\nAdds an action to perform when the pointer enters, moves within, and exits the view\u2019s bounds.\nDeprecated"
    },
    {
        "title": "init(id:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/touchbar/init(id:content:)",
        "html": "Parameters\nid\n\nA globally unique identifier for this Touch Bar.\n\ncontent\n\nA collection of views to be displayed by the Touch Bar.\n\nDiscussion\n\nBe sure that each view in content has an explicit touchBarItemPresence value with customization identifier.\n\nSee Also\nCreating a Touch Bar view\ninit(content: () -> Content)\nCreates a non-customizable Touch Bar view container."
    },
    {
        "title": "init(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/touchbar/init(content:)",
        "html": "See Also\nCreating a Touch Bar view\ninit(id: String, content: () -> Content)\nCreates a customizable Touch Bar view container with a globally unique identifier."
    },
    {
        "title": "chartSymbolScale(domain:range:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartsymbolscale(domain:range:)-4gunx",
        "html": "Parameters\ndomain\n\nThe possible data values plotted as symbols in the chart. You can define the domain with an array for categorical values (e.g., [\"A\", \"B\", \"C\"])\n\nrange\n\nThe range of symbols that correspond to the scale domain.\n\nSee Also\nSymbol scales\nfunc chartSymbolScale<DataValue, S>(KeyValuePairs<DataValue, S>) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale<DataValue>(KeyValuePairs<DataValue, ChartSymbolShape>) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale<Domain>(domain: Domain) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Domain>(domain: Domain, range: [ChartSymbolShape]) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Domain, S>(domain: Domain, mapping: (Domain.Element) -> S) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale<DataValue, S>(mapping: (DataValue) -> S) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale(range: [ChartSymbolShape]) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Range>(range: Range) -> some View\nConfigures the symbol style scale for charts."
    },
    {
        "title": "searchable(text:placement:prompt:suggestions:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/searchable(text:placement:prompt:suggestions:)-1er8o",
        "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\nplacement\n\nWhere the search field should attempt to be placed based on the containing view hierarchy.\n\nprompt\n\nA string representing the prompt of the search field which provides users with guidance on what to search for.\n\nsuggestions\n\nA view builder that produces content that populates a list of suggestions.\n\nDiscussion\n\nFor more information about using searchable modifiers, see Adding a search interface to your app.\n\nSee Also\nSearch modifiers\nfunc searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View\nMarks this view as searchable, which configures the display of a search field.\nfunc searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View\nMarks this view as searchable, which configures the display of a search field."
    },
    {
        "title": "rawValue",
        "url": "https://developer.apple.com/documentation/swiftui/eventmodifiers/rawvalue",
        "html": "See Also\nCreating a set of options\ninit(rawValue: Int)\nCreates a new set from a raw value."
    },
    {
        "title": "chartScrollPosition(initialY:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartscrollposition(initialy:)",
        "html": "Parameters\ninitialValue\n\nThe initial scroll position as a value.\n\nSee Also\nScrolling\nfunc chartScrollPosition(initialX: some Plottable) -> some View\nSets the initial scroll position along the x-axis. Once the user scrolls the scroll view, the value provided to this modifier will have no effect.\nfunc chartScrollPosition(x: Binding<some Plottable>) -> some View\nAssociates a binding to be updated when the chart scrolls along the x-axis.\nfunc chartScrollPosition(y: Binding<some Plottable>) -> some View\nAssociates a binding to be updated when the chart scrolls along the y-axis.\nfunc chartScrollTargetBehavior(some ChartScrollTargetBehavior) -> some View\nSets the scroll behavior of the scrollable chart.\nfunc chartScrollableAxes(Axis.Set) -> some View\nConfigures the scrollable behavior of charts in this view."
    },
    {
        "title": "onContinuousHover(coordinateSpace:perform:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/oncontinuoushover(coordinatespace:perform:)-8gyrl",
        "html": "Deprecated\n\nUse onContinuousHover(coordinateSpace:perform:) instead.\n\nParameters\ncoordinateSpace\n\nThe coordinate space for the location values. Defaults to CoordinateSpace.local.\n\naction\n\nThe action to perform whenever the pointer enters, moves within, or exits the view\u2019s bounds. The action closure passes the HoverPhase.active(_:) phase with the pointer\u2019s coordinates if the pointer is in the view\u2019s bounds; otherwise, it passes HoverPhase.ended.\n\nReturn Value\n\nA view that calls action when the pointer enters, moves within, or exits the view\u2019s bounds.\n\nDiscussion\n\nCall this method to define a region for detecting pointer movement with the size and position of this view. The following example updates hoverLocation and isHovering to be based on the phase provided to the closure:\n\n@State private var hoverLocation: CGPoint = .zero\n@State private var isHovering = false\n\n\nvar body: some View {\n    VStack {\n        Color.red\n            .frame(width: 400, height: 400)\n            .onContinuousHover { phase in\n                switch phase {\n                case .active(let location):\n                    hoverLocation = location\n                    isHovering = true\n                case .ended:\n                    isHovering = false\n                }\n            }\n            .overlay {\n                Rectangle()\n                    .frame(width: 50, height: 50)\n                    .foregroundColor(isHovering ? .green : .blue)\n                    .offset(x: hoverLocation.x, y: hoverLocation.y)\n            }\n    }\n}\n\nSee Also\nInput and events modifiers\nfunc onChange<V>(of: V, perform: (V) -> Void) -> some View\nAdds an action to perform when the given value changes.\nDeprecated\nfunc onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View\nAdds an action to perform when this view recognizes a tap gesture, and provides the action with the location of the interaction.\nDeprecated\nfunc onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View\nAdds an action to perform when this view recognizes a long press gesture.\nDeprecated\nfunc onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View\nAdds an action to perform when this view recognizes a long press gesture.\nDeprecated\nfunc onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View\nAdds an action to perform in response to the system\u2019s Paste command.\nDeprecated\nfunc onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View\nAdds an action to perform in response to the system\u2019s Paste command with items that you validate.\nDeprecated\nfunc onDrop(of: [String], delegate: DropDelegate) -> some View\nDefines the destination for a drag and drop operation with the same size and position as this view, with behavior controlled by the given delegate.\nDeprecated\nfunc onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View\nDefines the destination for a drag and drop operation, using the same size and position as this view, handling dropped content with the given closure.\nDeprecated\nfunc onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View\nDefines the destination for a drag and drop operation with the same size and position as this view, handling dropped content and the drop location with the given closure.\nDeprecated\nfunc focusable(Bool, onFocusChange: (Bool) -> Void) -> some View\nSpecifies if the view is focusable and, if so, adds an action to perform when the view comes into focus.\nDeprecated"
    },
    {
        "title": "accessibility(addTraits:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/accessibility(addtraits:)",
        "html": "Deprecated\n\nUse accessibilityAddTraits(_:) instead.\n\nSee Also\nAccessibility modifiers\nfunc accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds a label to the view that describes its contents.\nDeprecated\nfunc accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds a textual description of the value that the view contains.\nDeprecated\nfunc accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies whether to hide this view from system accessibility features.\nDeprecated\nfunc accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nUses the specified string to identify the view.\nDeprecated\nfunc accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets a selection identifier for this view\u2019s accessibility element.\nDeprecated\nfunc accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nCommunicates to the user what happens after performing the view\u2019s action.\nDeprecated\nfunc accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies the unit point where activations occur in the view.\nDeprecated\nfunc accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies the point where activations occur in the view.\nDeprecated\nfunc accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets alternate input labels with which users identify a view.\nDeprecated\nfunc accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nRemoves the given traits from this view.\nDeprecated\nfunc accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets the sort priority order for this view\u2019s accessibility element, relative to other elements at the same level.\nDeprecated"
    },
    {
        "title": "chartForegroundStyleScale(mapping:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartforegroundstylescale(mapping:)",
        "html": "Parameters\nmapping\n\nMaps data categories to foreground styles.\n\nSee Also\nStyles\nfunc chartBackground<V>(alignment: Alignment, content: (ChartProxy) -> V) -> some View\nAdds a background to a view that contains a chart.\nfunc chartForegroundStyleScale<DataValue, S>(KeyValuePairs<DataValue, S>) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Domain>(domain: Domain, type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Domain, S>(domain: Domain, mapping: (Domain.Element) -> S) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Range>(range: Range, type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale(type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartPlotStyle<Content>(content: (ChartPlotContent) -> Content) -> some View\nConfigures the plot area of charts."
    },
    {
        "title": "chartForegroundStyleScale(range:type:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartforegroundstylescale(range:type:)",
        "html": "Parameters\nrange\n\nThe range of foreground styles that correspond to the scale domain.\n\ntype\n\nThe scale type.\n\nSee Also\nStyles\nfunc chartBackground<V>(alignment: Alignment, content: (ChartProxy) -> V) -> some View\nAdds a background to a view that contains a chart.\nfunc chartForegroundStyleScale<DataValue, S>(KeyValuePairs<DataValue, S>) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Domain>(domain: Domain, type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Domain, S>(domain: Domain, mapping: (Domain.Element) -> S) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<DataValue, S>(mapping: (DataValue) -> S) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale(type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartPlotStyle<Content>(content: (ChartPlotContent) -> Content) -> some View\nConfigures the plot area of charts."
    },
    {
        "title": "chartYScale(type:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartyscale(type:)",
        "html": "Parameters\ntype\n\nThe scale type.\n\nSee Also\nAxis scales\nfunc chartXScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View\nConfigures the x scale for charts.\nfunc chartXScale<Domain>(domain: Domain, type: ScaleType?) -> some View\nConfigures the x scale for charts.\nfunc chartXScale<Range>(range: Range, type: ScaleType?) -> some View\nConfigures the x scale for charts.\nfunc chartXScale(type: ScaleType?) -> some View\nConfigures the x scale for charts.\nfunc chartYScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View\nConfigures the y scale for charts.\nfunc chartYScale<Domain>(domain: Domain, type: ScaleType?) -> some View\nConfigures the y scale for charts.\nfunc chartYScale<Range>(range: Range, type: ScaleType?) -> some View\nConfigures the y scale for charts."
    },
    {
        "title": "chartForegroundStyleScale(domain:type:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartforegroundstylescale(domain:type:)",
        "html": "Parameters\ndomain\n\nThe possible data values plotted as foreground style in the chart. You can define the domain with a ClosedRange for number or Date values (e.g., 0 ... 500), and with an array for categorical values (e.g., [\"A\", \"B\", \"C\"])\n\ntype\n\nThe scale type.\n\nSee Also\nStyles\nfunc chartBackground<V>(alignment: Alignment, content: (ChartProxy) -> V) -> some View\nAdds a background to a view that contains a chart.\nfunc chartForegroundStyleScale<DataValue, S>(KeyValuePairs<DataValue, S>) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Domain, S>(domain: Domain, mapping: (Domain.Element) -> S) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<DataValue, S>(mapping: (DataValue) -> S) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Range>(range: Range, type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale(type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartPlotStyle<Content>(content: (ChartPlotContent) -> Content) -> some View\nConfigures the plot area of charts."
    },
    {
        "title": "chartBackground(alignment:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartbackground(alignment:content:)",
        "html": "Parameters\nalignment\n\nThe alignment of the content.\n\ncontent\n\nThe content of the background.\n\nDiscussion\n\nYou can use this modifier to define a background view as a function of the chart in the view. You can access the chart with the ChartProxy object passed into the closure.\n\nNote\n\nIf self contains more than one chart, the chart proxy will refer to the first chart.\n\nSee Also\nStyles\nfunc chartForegroundStyleScale<DataValue, S>(KeyValuePairs<DataValue, S>) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Domain>(domain: Domain, type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Domain, S>(domain: Domain, mapping: (Domain.Element) -> S) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<DataValue, S>(mapping: (DataValue) -> S) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Range>(range: Range, type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale(type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartPlotStyle<Content>(content: (ChartPlotContent) -> Content) -> some View\nConfigures the plot area of charts."
    },
    {
        "title": "chartPlotStyle(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartplotstyle(content:)",
        "html": "Parameters\ncontent\n\nA closure that returns the content of the plot area.\n\nDiscussion\n\nUse this modifier to configure the size or aspect ratio of the plot area of charts.\n\nFor example:\n\nChart(data: data) {\n    BarMark(x: .value(\"Category\", $0.category))\n}\n.chartPlotStyle { content in\n    content.frame(width: 100, height: 100)\n}\n\nSee Also\nStyles\nfunc chartBackground<V>(alignment: Alignment, content: (ChartProxy) -> V) -> some View\nAdds a background to a view that contains a chart.\nfunc chartForegroundStyleScale<DataValue, S>(KeyValuePairs<DataValue, S>) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Domain>(domain: Domain, type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Domain, S>(domain: Domain, mapping: (Domain.Element) -> S) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<DataValue, S>(mapping: (DataValue) -> S) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Range>(range: Range, type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale(type: ScaleType?) -> some View\nConfigures the foreground style scale for charts."
    },
    {
        "title": "chartLegend(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartlegend(_:)",
        "html": "Parameters\nvisibility\n\nThe visibility of the legend.\n\nSee Also\nLegends\nfunc chartLegend(position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nConfigures the legend for charts.\nfunc chartLegend<Content>(position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?, content: () -> Content) -> some View\nConfigures the legend for charts."
    },
    {
        "title": "actionSheet(item:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/actionsheet(item:content:)",
        "html": "Deprecated\n\nUse confirmationDialog(_:isPresented:titleVisibility:presenting:actions:message:) instead.\n\nParameters\nitem\n\nA binding to an optional source of truth for the action sheet. When item is non-nil, the system passes the contents to the modifier\u2019s closure. You use this content to populate the fields of an action sheet that you create that the system displays to the user. If item changes, the system dismisses the currently displayed action sheet and replaces it with a new one using the same process.\n\ncontent\n\nA closure returning the ActionSheet you create.\n\nDiscussion\n\nUse this method when you need to populate the fields of an action sheet with content from a data source. The example below shows a custom data source, FileDetails, that provides data to populate the action sheet:\n\nstruct FileDetails: Identifiable {\n    var id: String { name }\n    let name: String\n    let fileType: UTType\n}\nstruct ConfirmFileImport: View {\n    @State private var sheetDetail: FileDetails?\n    var body: some View {\n        Button(\"Show Action Sheet\") {\n            sheetDetail = FileDetails(name: \"MyImageFile.png\",\n                                      fileType: .png)\n        }\n        .actionSheet(item: $sheetDetail) { detail in\n            ActionSheet(\n                title: Text(\"File Import\"),\n                message: Text(\"\"\"\n                         Import \\(detail.name)?\n                         File Type: \\(detail.fileType.description)\n                         \"\"\"),\n                buttons: [\n                    .destructive(Text(\"Import\"),\n                                 action: importFile),\n                    .cancel()\n                ])\n        }\n    }\n\n\n    func importFile() {\n        // Handle import action.\n    }\n}\n\n\nSee Also\nView presentation modifiers\nfunc actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View\nPresents an action sheet when a given condition is true.\nDeprecated\nfunc alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View\nPresents an alert to the user.\nDeprecated\nfunc alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View\nPresents an alert to the user.\nDeprecated"
    },
    {
        "title": "onPasteCommand(of:perform:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/onpastecommand(of:perform:)-4f78f",
        "html": "Deprecated\n\nUse onPasteCommand(of:perform:) instead.\n\nParameters\nsupportedTypes\n\nThe uniform type identifiers that describe the types of content this view can accept through a paste action. If the Clipboard doesn\u2019t contain any of the supported types, the Paste command doesn\u2019t trigger.\n\npayloadAction\n\nThe action to perform when the Paste command triggers. The action closure\u2019s parameter contains items from the Clipboard with the types you specify in the supportedTypes parameter.\n\nReturn Value\n\nA view that triggers action when a system Paste command occurs.\n\nDiscussion\n\nPass an array of uniform type identifiers to the supportedTypes parameter. Place the higher priority types closer to the beginning of the array. The Clipboard items that the action closure receives have the most preferred type out of all the types the source supports.\n\nFor example, if your app can handle plain text and rich text, but you prefer rich text, place the rich text type first in the array. If rich text is available when the paste action occurs, the action closure passes that rich text along.\n\nSee Also\nInput and events modifiers\nfunc onChange<V>(of: V, perform: (V) -> Void) -> some View\nAdds an action to perform when the given value changes.\nDeprecated\nfunc onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View\nAdds an action to perform when this view recognizes a tap gesture, and provides the action with the location of the interaction.\nDeprecated\nfunc onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View\nAdds an action to perform when this view recognizes a long press gesture.\nDeprecated\nfunc onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View\nAdds an action to perform when this view recognizes a long press gesture.\nDeprecated\nfunc onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View\nAdds an action to perform in response to the system\u2019s Paste command with items that you validate.\nDeprecated\nfunc onDrop(of: [String], delegate: DropDelegate) -> some View\nDefines the destination for a drag and drop operation with the same size and position as this view, with behavior controlled by the given delegate.\nDeprecated\nfunc onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View\nDefines the destination for a drag and drop operation, using the same size and position as this view, handling dropped content with the given closure.\nDeprecated\nfunc onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View\nDefines the destination for a drag and drop operation with the same size and position as this view, handling dropped content and the drop location with the given closure.\nDeprecated\nfunc focusable(Bool, onFocusChange: (Bool) -> Void) -> some View\nSpecifies if the view is focusable and, if so, adds an action to perform when the view comes into focus.\nDeprecated\nfunc onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View\nAdds an action to perform when the pointer enters, moves within, and exits the view\u2019s bounds.\nDeprecated"
    },
    {
        "title": "onTapGesture(count:coordinateSpace:perform:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/ontapgesture(count:coordinatespace:perform:)-36x9h",
        "html": "Deprecated\n\nUse onTapGesture(count:coordinateSpace:perform:) instead.\n\nParameters\ncount\n\nThe number of taps or clicks required to trigger the action closure provided in action. Defaults to 1.\n\ncoordinateSpace\n\nThe coordinate space in which to receive location values. Defaults to CoordinateSpace.local.\n\naction\n\nThe action to perform. This closure receives an input that indicates where the interaction occurred.\n\nDiscussion\n\nUse this method to perform the specified action when the user clicks or taps on the modified view count times. The action closure receives the location of the interaction.\n\nNote\n\nIf you create a control that\u2019s functionally equivalent to a Button, use ButtonStyle to create a customized button instead.\n\nThe following code adds a tap gesture to a Circle that toggles the color of the circle based on the tap location.\n\nstruct TapGestureExample: View {\n    @State private var location: CGPoint = .zero\n\n\n    var body: some View {\n        Circle()\n            .fill(self.location.y > 50 ? Color.blue : Color.red)\n            .frame(width: 100, height: 100, alignment: .center)\n            .onTapGesture { location in\n                self.location = location\n            }\n    }\n}\n\nSee Also\nInput and events modifiers\nfunc onChange<V>(of: V, perform: (V) -> Void) -> some View\nAdds an action to perform when the given value changes.\nDeprecated\nfunc onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View\nAdds an action to perform when this view recognizes a long press gesture.\nDeprecated\nfunc onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View\nAdds an action to perform when this view recognizes a long press gesture.\nDeprecated\nfunc onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View\nAdds an action to perform in response to the system\u2019s Paste command.\nDeprecated\nfunc onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View\nAdds an action to perform in response to the system\u2019s Paste command with items that you validate.\nDeprecated\nfunc onDrop(of: [String], delegate: DropDelegate) -> some View\nDefines the destination for a drag and drop operation with the same size and position as this view, with behavior controlled by the given delegate.\nDeprecated\nfunc onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View\nDefines the destination for a drag and drop operation, using the same size and position as this view, handling dropped content with the given closure.\nDeprecated\nfunc onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View\nDefines the destination for a drag and drop operation with the same size and position as this view, handling dropped content and the drop location with the given closure.\nDeprecated\nfunc focusable(Bool, onFocusChange: (Bool) -> Void) -> some View\nSpecifies if the view is focusable and, if so, adds an action to perform when the view comes into focus.\nDeprecated\nfunc onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View\nAdds an action to perform when the pointer enters, moves within, and exits the view\u2019s bounds.\nDeprecated"
    },
    {
        "title": "accessibility(hidden:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/accessibility(hidden:)",
        "html": "Deprecated\n\nUse accessibilityHidden(_:) instead.\n\nSee Also\nAccessibility modifiers\nfunc accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds a label to the view that describes its contents.\nDeprecated\nfunc accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds a textual description of the value that the view contains.\nDeprecated\nfunc accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nUses the specified string to identify the view.\nDeprecated\nfunc accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets a selection identifier for this view\u2019s accessibility element.\nDeprecated\nfunc accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nCommunicates to the user what happens after performing the view\u2019s action.\nDeprecated\nfunc accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies the unit point where activations occur in the view.\nDeprecated\nfunc accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies the point where activations occur in the view.\nDeprecated\nfunc accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets alternate input labels with which users identify a view.\nDeprecated\nfunc accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds the given traits to the view.\nDeprecated\nfunc accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nRemoves the given traits from this view.\nDeprecated\nfunc accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets the sort priority order for this view\u2019s accessibility element, relative to other elements at the same level.\nDeprecated"
    },
    {
        "title": "onDrop(of:delegate:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/ondrop(of:delegate:)-2vr9o",
        "html": "Deprecated\n\nUse onDrop(of:delegate:) instead.\n\nParameters\nsupportedTypes\n\nThe uniform type identifiers that describe the types of content this view can accept through drag and drop. If the drag and drop operation doesn\u2019t contain any of the supported types, then this drop destination doesn\u2019t activate and isTargeted doesn\u2019t update.\n\ndelegate\n\nA type that conforms to the DropDelegate protocol. You have comprehensive control over drop behavior when you use a delegate.\n\nReturn Value\n\nA view that provides a drop destination for a drag operation of the specified types.\n\nSee Also\nInput and events modifiers\nfunc onChange<V>(of: V, perform: (V) -> Void) -> some View\nAdds an action to perform when the given value changes.\nDeprecated\nfunc onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View\nAdds an action to perform when this view recognizes a tap gesture, and provides the action with the location of the interaction.\nDeprecated\nfunc onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View\nAdds an action to perform when this view recognizes a long press gesture.\nDeprecated\nfunc onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View\nAdds an action to perform when this view recognizes a long press gesture.\nDeprecated\nfunc onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View\nAdds an action to perform in response to the system\u2019s Paste command.\nDeprecated\nfunc onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View\nAdds an action to perform in response to the system\u2019s Paste command with items that you validate.\nDeprecated\nfunc onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View\nDefines the destination for a drag and drop operation, using the same size and position as this view, handling dropped content with the given closure.\nDeprecated\nfunc onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View\nDefines the destination for a drag and drop operation with the same size and position as this view, handling dropped content and the drop location with the given closure.\nDeprecated\nfunc focusable(Bool, onFocusChange: (Bool) -> Void) -> some View\nSpecifies if the view is focusable and, if so, adds an action to perform when the view comes into focus.\nDeprecated\nfunc onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View\nAdds an action to perform when the pointer enters, moves within, and exits the view\u2019s bounds.\nDeprecated"
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/section/init(_:content:)-90be4",
        "html": "Parameters\ntitleKey\n\nThe key for the section\u2019s localized title, which describes the contents of the section.\n\ncontent\n\nThe section\u2019s content.\n\nSee Also\nCreating a section\ninit<V>(content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent conforms to TableRowContent, Content conforms to TableRowContent, and Footer conforms to TableRowContent.\ninit(content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent is EmptyView, Content conforms to View, and Footer is EmptyView.\ninit<S>(S, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent is Text, Content conforms to View, and Footer is EmptyView.\ninit<V, S>(S, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent conforms to TableRowContent, Content conforms to TableRowContent, and Footer conforms to TableRowContent.\ninit<V>(LocalizedStringKey, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent conforms to TableRowContent, Content conforms to TableRowContent, and Footer conforms to TableRowContent."
    },
    {
        "title": "onLongPressGesture(minimumDuration:pressing:perform:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/onlongpressgesture(minimumduration:pressing:perform:)",
        "html": "Deprecated\n\nUse onLongPressGesture(minimumDuration:perform:onPressingChanged:) instead.\n\nSee Also\nInput and events modifiers\nfunc onChange<V>(of: V, perform: (V) -> Void) -> some View\nAdds an action to perform when the given value changes.\nDeprecated\nfunc onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View\nAdds an action to perform when this view recognizes a tap gesture, and provides the action with the location of the interaction.\nDeprecated\nfunc onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View\nAdds an action to perform when this view recognizes a long press gesture.\nDeprecated\nfunc onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View\nAdds an action to perform in response to the system\u2019s Paste command.\nDeprecated\nfunc onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View\nAdds an action to perform in response to the system\u2019s Paste command with items that you validate.\nDeprecated\nfunc onDrop(of: [String], delegate: DropDelegate) -> some View\nDefines the destination for a drag and drop operation with the same size and position as this view, with behavior controlled by the given delegate.\nDeprecated\nfunc onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View\nDefines the destination for a drag and drop operation, using the same size and position as this view, handling dropped content with the given closure.\nDeprecated\nfunc onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View\nDefines the destination for a drag and drop operation with the same size and position as this view, handling dropped content and the drop location with the given closure.\nDeprecated\nfunc focusable(Bool, onFocusChange: (Bool) -> Void) -> some View\nSpecifies if the view is focusable and, if so, adds an action to perform when the view comes into focus.\nDeprecated\nfunc onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View\nAdds an action to perform when the pointer enters, moves within, and exits the view\u2019s bounds.\nDeprecated"
    },
    {
        "title": "accessibility(value:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/accessibility(value:)",
        "html": "Deprecated\n\nUse accessibilityValue(_:) instead.\n\nDiscussion\n\nUse this method to describe the value represented by a view, but only if that\u2019s different than the view\u2019s label. For example, for a slider that you label as \u201cVolume\u201d using accessibility(label:), you can provide the current volume setting, like \u201c60%\u201d, using accessibility(value:).\n\nSee Also\nAccessibility modifiers\nfunc accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds a label to the view that describes its contents.\nDeprecated\nfunc accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies whether to hide this view from system accessibility features.\nDeprecated\nfunc accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nUses the specified string to identify the view.\nDeprecated\nfunc accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets a selection identifier for this view\u2019s accessibility element.\nDeprecated\nfunc accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nCommunicates to the user what happens after performing the view\u2019s action.\nDeprecated\nfunc accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies the unit point where activations occur in the view.\nDeprecated\nfunc accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies the point where activations occur in the view.\nDeprecated\nfunc accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets alternate input labels with which users identify a view.\nDeprecated\nfunc accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds the given traits to the view.\nDeprecated\nfunc accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nRemoves the given traits from this view.\nDeprecated\nfunc accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets the sort priority order for this view\u2019s accessibility element, relative to other elements at the same level.\nDeprecated"
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityrotorcontentbuilder/buildblock(_:_:_:_:_:_:_:_:_:)",
        "html": "See Also\nBuilding navigation content\nstatic func buildBlock<Content>(Content) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1>(C0, C1) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some AccessibilityRotorContent\nstatic func buildIf<Content>(Content?) -> some AccessibilityRotorContent\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder."
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityrotorcontentbuilder/buildblock(_:_:_:_:_:_:_:)",
        "html": "See Also\nBuilding navigation content\nstatic func buildBlock<Content>(Content) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1>(C0, C1) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some AccessibilityRotorContent\nstatic func buildIf<Content>(Content?) -> some AccessibilityRotorContent\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder."
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityrotorcontentbuilder/buildblock(_:_:_:_:_:_:_:_:_:_:)",
        "html": "See Also\nBuilding navigation content\nstatic func buildBlock<Content>(Content) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1>(C0, C1) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some AccessibilityRotorContent\nstatic func buildIf<Content>(Content?) -> some AccessibilityRotorContent\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder."
    },
    {
        "title": "buildExpression(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityrotorcontentbuilder/buildexpression(_:)",
        "html": "See Also\nBuilding navigation content\nstatic func buildBlock<Content>(Content) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1>(C0, C1) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some AccessibilityRotorContent\nstatic func buildIf<Content>(Content?) -> some AccessibilityRotorContent"
    },
    {
        "title": "accessibility(label:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/accessibility(label:)",
        "html": "Deprecated\n\nUse accessibilityLabel(_:) instead.\n\nDiscussion\n\nUse this method to provide an accessibility label for a view that doesn\u2019t display text, like an icon. For example, you could use this method to label a button that plays music with the text \u201cPlay\u201d. Don\u2019t include text in the label that repeats information that users already have. For example, don\u2019t use the label \u201cPlay button\u201d because a button already has a trait that identifies it as a button.\n\nSee Also\nAccessibility modifiers\nfunc accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds a textual description of the value that the view contains.\nDeprecated\nfunc accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies whether to hide this view from system accessibility features.\nDeprecated\nfunc accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nUses the specified string to identify the view.\nDeprecated\nfunc accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets a selection identifier for this view\u2019s accessibility element.\nDeprecated\nfunc accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nCommunicates to the user what happens after performing the view\u2019s action.\nDeprecated\nfunc accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies the unit point where activations occur in the view.\nDeprecated\nfunc accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies the point where activations occur in the view.\nDeprecated\nfunc accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets alternate input labels with which users identify a view.\nDeprecated\nfunc accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds the given traits to the view.\nDeprecated\nfunc accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nRemoves the given traits from this view.\nDeprecated\nfunc accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets the sort priority order for this view\u2019s accessibility element, relative to other elements at the same level.\nDeprecated"
    },
    {
        "title": "MoveCommandDirection.right",
        "url": "https://developer.apple.com/documentation/swiftui/movecommanddirection/right",
        "html": "See Also\nGetting move command directions\ncase up\ncase down\ncase left"
    },
    {
        "title": "buildIf(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityrotorcontentbuilder/buildif(_:)",
        "html": "See Also\nBuilding navigation content\nstatic func buildBlock<Content>(Content) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1>(C0, C1) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some AccessibilityRotorContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some AccessibilityRotorContent\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder."
    },
    {
        "title": "axes",
        "url": "https://developer.apple.com/documentation/swiftui/scrollview/axes",
        "html": "Discussion\n\nThe default value is Axis.vertical.\n\nSee Also\nConfiguring a scroll view\nvar content: Content\nThe scroll view\u2019s content.\nvar showsIndicators: Bool\nA value that indicates whether the scroll view displays the scrollable component of the content offset, in a way that\u2019s suitable for the platform."
    },
    {
        "title": "init(_:_:in:textRange:prepare:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityrotorentry/init(_:_:in:textrange:prepare:)",
        "html": "Parameters\nlabel\n\nLocalized string used to show this Rotor entry to users.\n\nid\n\nUsed to find the UI element associated with this Rotor entry. This identifier and namespace should match a call to accessibilityRotorEntry(id:in).\n\nnamespace\n\nNamespace for this identifier. Should match a call to accessibilityRotorEntry(id:in).\n\ntextRange\n\nOptional range of text associated with this Rotor entry. This should be a range within text that is set as the accessibility label or accessibility value of the associated element.\n\nprepare\n\nOptional closure to run before a Rotor entry is navigated to, to prepare the UI as needed. This should be used to bring the Accessibility element on-screen, if scrolling is needed to get to it.\n\nSee Also\nCreating an identified rotor entry in a namespace\ninit(LocalizedStringKey, id: ID, in: Namespace.ID, textRange: Range<String.Index>?, prepare: (() -> Void))\nCreate a Rotor entry with a specific label, identifier and namespace, and with an optional range.\ninit(Text, id: ID, in: Namespace.ID, textRange: Range<String.Index>?, prepare: (() -> Void))\nCreate a Rotor entry with a specific label, identifier and namespace, and with an optional range."
    },
    {
        "title": "init(_:id:in:textRange:prepare:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityrotorentry/init(_:id:in:textrange:prepare:)-2inak",
        "html": "Parameters\nlabelKey\n\nLocalized string used to show this Rotor entry to users.\n\nid\n\nUsed to find the UI element associated with this Rotor entry. This identifier and namespace should match a call to accessibilityRotorEntry(id:in).\n\nnamespace\n\nNamespace for this identifier. Should match a call to accessibilityRotorEntry(id:in).\n\ntextRange\n\nOptional range of text associated with this Rotor entry. This should be a range within text that is set as the accessibility label or accessibility value of the associated element.\n\nprepare\n\nOptional closure to run before a Rotor entry is navigated to, to prepare the UI as needed. This should be used to bring the Accessibility element on-screen, if scrolling is needed to get to it.\n\nSee Also\nCreating an identified rotor entry in a namespace\ninit<L>(L, ID, in: Namespace.ID, textRange: Range<String.Index>?, prepare: (() -> Void))\nCreate a Rotor entry with a specific label, identifier and namespace, and with an optional range.\ninit(Text, id: ID, in: Namespace.ID, textRange: Range<String.Index>?, prepare: (() -> Void))\nCreate a Rotor entry with a specific label, identifier and namespace, and with an optional range."
    },
    {
        "title": "init(_:showsIndicators:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/scrollview/init(_:showsindicators:content:)",
        "html": "Parameters\naxes\n\nThe scroll view\u2019s scrollable axis. The default axis is the vertical axis.\n\nshowsIndicators\n\nA Boolean value that indicates whether the scroll view displays the scrollable component of the content offset, in a way suitable for the platform. The default value for this parameter is true.\n\ncontent\n\nThe view builder that creates the scrollable view.\n\nSee Also\nCreating a scroll view\ninit(Axis.Set, content: () -> Content)\nCreates a new instance that\u2019s scrollable in the direction of the given axis and can show indicators while scrolling.\nAvailable when Content conforms to View."
    },
    {
        "title": "Body",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityrotorcontent/body-swift.associatedtype",
        "html": "Required\n\nSee Also\nSupporting types\nvar body: Self.Body\nThe internal content of this AccessibilityRotorContent.\n\nRequired"
    },
    {
        "title": "init(_:id:textRange:prepare:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityrotorentry/init(_:id:textrange:prepare:)-3lxj4",
        "html": "Parameters\nlabel\n\nLocalized string used to show this Rotor entry to users.\n\nid\n\nUsed to find the UI element associated with this Rotor entry. This identifier should be used within a scrollView, either in a ForEach or using an id call.\n\ntextRange\n\nOptional range of text associated with this Rotor entry. This should be a range within text that is set as the either label or accessibility value of the associated element.\n\nprepare\n\nOptional closure to run before a Rotor entry is navigated to, to prepare the UI as needed. This can be used to bring the UI element on-screen if it isn\u2019t already, and SwiftUI is not able to automatically scroll to it.\n\nSee Also\nCreating a rotor entry with an identifier\ninit(LocalizedStringKey, id: ID, textRange: Range<String.Index>?, prepare: (() -> Void))\nCreate a Rotor entry with a specific label and identifier, with an optional range.\ninit<L>(L, id: ID, textRange: Range<String.Index>?, prepare: (() -> Void))\nCreate a Rotor entry with a specific label and identifier, with an optional range."
    },
    {
        "title": "MoveCommandDirection.down",
        "url": "https://developer.apple.com/documentation/swiftui/movecommanddirection/down",
        "html": "See Also\nGetting move command directions\ncase up\ncase left\ncase right"
    },
    {
        "title": "init(_:textRange:prepare:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityrotorentry/init(_:textrange:prepare:)-4ktj7",
        "html": "Parameters\nlabelKey\n\nLocalized string used to show this Rotor entry to users. If no label is specified, the Rotor entry will be labeled based on the text at that range.\n\nrange\n\nRange of text associated with this Rotor entry.\n\nprepare\n\nOptional closure to run before a Rotor entry is navigated to, to prepare the UI as needed. This can be used to bring the UI element or text on-screen if it isn\u2019t already, and SwiftUI not able to automatically scroll to it.\n\nSee Also\nCreating a rotor entry\ninit<L>(L, textRange: Range<String.Index>, prepare: (() -> Void))\nCreate a Rotor entry with a specific label and range. This Rotor entry will be associated with the Accessibility element that owns the Rotor.\ninit(Text?, textRange: Range<String.Index>, prepare: (() -> Void))\nCreate a Rotor entry with a specific label and range. This Rotor entry will be associated with the Accessibility element that owns the Rotor."
    },
    {
        "title": "showsIndicators",
        "url": "https://developer.apple.com/documentation/swiftui/scrollview/showsindicators",
        "html": "Discussion\n\nThe default is true.\n\nSee Also\nConfiguring a scroll view\nvar content: Content\nThe scroll view\u2019s content.\nvar axes: Axis.Set\nThe scrollable axes of the scroll view."
    },
    {
        "title": "init(_:textRange:prepare:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityrotorentry/init(_:textrange:prepare:)-54wa4",
        "html": "Parameters\nlabel\n\nOptional localized string used to show this Rotor entry to users. If no label is specified, the Rotor entry will be labeled based on the text at that range.\n\nrange\n\nRange of text associated with this Rotor entry.\n\nprepare\n\nOptional closure to run before a Rotor entry is navigated to, to prepare the UI as needed. This can be used to bring the UI element or text on-screen if it isn\u2019t already, and SwiftUI not able to automatically scroll to it.\n\nSee Also\nCreating a rotor entry\ninit(LocalizedStringKey, textRange: Range<String.Index>, prepare: (() -> Void))\nCreate a Rotor entry with a specific label and range. This Rotor entry will be associated with the Accessibility element that owns the Rotor.\ninit<L>(L, textRange: Range<String.Index>, prepare: (() -> Void))\nCreate a Rotor entry with a specific label and range. This Rotor entry will be associated with the Accessibility element that owns the Rotor."
    },
    {
        "title": "init(_:id:textRange:prepare:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityrotorentry/init(_:id:textrange:prepare:)-7hm53",
        "html": "Parameters\nid\n\nUsed to find the UI element associated with this Rotor entry. This identifier should be used within a scrollView, either in a ForEach or using an id call.\n\nlabel\n\nLocalized string used to show this Rotor entry to users.\n\ntextRange\n\nOptional range of text associated with this Rotor entry. This should be a range within text that is set as the accessibility label or accessibility value of the associated element.\n\nprepare\n\nOptional closure to run before a Rotor entry is navigated to, to prepare the UI as needed. This can be used to bring the UI element on-screen if it isn\u2019t already, and SwiftUI is not able to automatically scroll to it.\n\nSee Also\nCreating a rotor entry with an identifier\ninit<L>(L, id: ID, textRange: Range<String.Index>?, prepare: (() -> Void))\nCreate a Rotor entry with a specific label and identifier, with an optional range.\ninit(Text, id: ID, textRange: Range<String.Index>?, prepare: (() -> Void))\nCreate a Rotor entry with a specific label and identifier, with an optional range."
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/scrollview/init(_:content:)",
        "html": "Parameters\naxes\n\nThe scroll view\u2019s scrollable axis. The default axis is the vertical axis.\n\ncontent\n\nThe view builder that creates the scrollable view.\n\nSee Also\nCreating a scroll view\ninit(Axis.Set, showsIndicators: Bool, content: () -> Content)\nCreates a new instance that\u2019s scrollable in the direction of the given axis and can show indicators while scrolling."
    },
    {
        "title": "body",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityrotorcontent/body-swift.property",
        "html": "Required\n\nSee Also\nSupporting types\nassociatedtype Body : AccessibilityRotorContent\nThe type for the internal content of this AccessibilityRotorContent.\n\nRequired"
    },
    {
        "title": "MoveCommandDirection.left",
        "url": "https://developer.apple.com/documentation/swiftui/movecommanddirection/left",
        "html": "See Also\nGetting move command directions\ncase up\ncase down\ncase right"
    },
    {
        "title": "content",
        "url": "https://developer.apple.com/documentation/swiftui/scrollview/content",
        "html": "See Also\nConfiguring a scroll view\nvar axes: Axis.Set\nThe scrollable axes of the scroll view.\nvar showsIndicators: Bool\nA value that indicates whether the scroll view displays the scrollable component of the content offset, in a way that\u2019s suitable for the platform."
    },
    {
        "title": "MoveCommandDirection.up",
        "url": "https://developer.apple.com/documentation/swiftui/movecommanddirection/up",
        "html": "See Also\nGetting move command directions\ncase down\ncase left\ncase right"
    },
    {
        "title": "clear",
        "url": "https://developer.apple.com/documentation/swiftui/keyequivalent/clear",
        "html": "See Also\nGetting other special keys\nstatic let delete: KeyEquivalent\nDelete (U+0008)\nstatic let deleteForward: KeyEquivalent\nDelete Forward (U+F728)\nstatic let end: KeyEquivalent\nEnd (U+F72B)\nstatic let escape: KeyEquivalent\nEscape (U+001B)\nstatic let home: KeyEquivalent\nHome (U+F729)\nstatic let pageDown: KeyEquivalent\nPage Down (U+F72D)\nstatic let pageUp: KeyEquivalent\nPage Up (U+F72C)\nstatic let `return`: KeyEquivalent\nReturn (U+000D)\nstatic let space: KeyEquivalent\nSpace (U+0020)\nstatic let tab: KeyEquivalent\nTab (U+0009)"
    },
    {
        "title": "tab",
        "url": "https://developer.apple.com/documentation/swiftui/keyequivalent/tab",
        "html": "See Also\nGetting other special keys\nstatic let clear: KeyEquivalent\nClear (U+F739)\nstatic let delete: KeyEquivalent\nDelete (U+0008)\nstatic let deleteForward: KeyEquivalent\nDelete Forward (U+F728)\nstatic let end: KeyEquivalent\nEnd (U+F72B)\nstatic let escape: KeyEquivalent\nEscape (U+001B)\nstatic let home: KeyEquivalent\nHome (U+F729)\nstatic let pageDown: KeyEquivalent\nPage Down (U+F72D)\nstatic let pageUp: KeyEquivalent\nPage Up (U+F72C)\nstatic let `return`: KeyEquivalent\nReturn (U+000D)\nstatic let space: KeyEquivalent\nSpace (U+0020)"
    },
    {
        "title": "accessibility(activationPoint:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/accessibility(activationpoint:)-73caz",
        "html": "Deprecated\n\nUse accessibilityActivationPoint(_:) instead.\n\nSee Also\nAccessibility modifiers\nfunc accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds a label to the view that describes its contents.\nDeprecated\nfunc accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds a textual description of the value that the view contains.\nDeprecated\nfunc accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies whether to hide this view from system accessibility features.\nDeprecated\nfunc accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nUses the specified string to identify the view.\nDeprecated\nfunc accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets a selection identifier for this view\u2019s accessibility element.\nDeprecated\nfunc accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nCommunicates to the user what happens after performing the view\u2019s action.\nDeprecated\nfunc accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies the point where activations occur in the view.\nDeprecated\nfunc accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets alternate input labels with which users identify a view.\nDeprecated\nfunc accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds the given traits to the view.\nDeprecated\nfunc accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nRemoves the given traits from this view.\nDeprecated\nfunc accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets the sort priority order for this view\u2019s accessibility element, relative to other elements at the same level.\nDeprecated"
    },
    {
        "title": "accessibility(activationPoint:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/accessibility(activationpoint:)-2hj37",
        "html": "Deprecated\n\nUse accessibilityActivationPoint(_:) instead.\n\nSee Also\nAccessibility modifiers\nfunc accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds a label to the view that describes its contents.\nDeprecated\nfunc accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds a textual description of the value that the view contains.\nDeprecated\nfunc accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies whether to hide this view from system accessibility features.\nDeprecated\nfunc accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nUses the specified string to identify the view.\nDeprecated\nfunc accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets a selection identifier for this view\u2019s accessibility element.\nDeprecated\nfunc accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nCommunicates to the user what happens after performing the view\u2019s action.\nDeprecated\nfunc accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies the unit point where activations occur in the view.\nDeprecated\nfunc accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets alternate input labels with which users identify a view.\nDeprecated\nfunc accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds the given traits to the view.\nDeprecated\nfunc accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nRemoves the given traits from this view.\nDeprecated\nfunc accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets the sort priority order for this view\u2019s accessibility element, relative to other elements at the same level.\nDeprecated"
    },
    {
        "title": "accessibility(inputLabels:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/accessibility(inputlabels:)",
        "html": "Deprecated\n\nUse accessibilityInputLabels(_:) instead.\n\nParameters\ninputLabels\n\nAn array of Text elements to use as input labels.\n\nDiscussion\n\nProvide labels in descending order of importance. Voice Control and Full Keyboard Access use the input labels.\n\nNote\n\nIf you don\u2019t specify any input labels, the user can still refer to the view using the accessibility label that you add with the accessibility(label:) modifier.\n\nSee Also\nAccessibility modifiers\nfunc accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds a label to the view that describes its contents.\nDeprecated\nfunc accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds a textual description of the value that the view contains.\nDeprecated\nfunc accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies whether to hide this view from system accessibility features.\nDeprecated\nfunc accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nUses the specified string to identify the view.\nDeprecated\nfunc accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets a selection identifier for this view\u2019s accessibility element.\nDeprecated\nfunc accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nCommunicates to the user what happens after performing the view\u2019s action.\nDeprecated\nfunc accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies the unit point where activations occur in the view.\nDeprecated\nfunc accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies the point where activations occur in the view.\nDeprecated\nfunc accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds the given traits to the view.\nDeprecated\nfunc accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nRemoves the given traits from this view.\nDeprecated\nfunc accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets the sort priority order for this view\u2019s accessibility element, relative to other elements at the same level.\nDeprecated"
    },
    {
        "title": "numericPad",
        "url": "https://developer.apple.com/documentation/swiftui/eventmodifiers/numericpad",
        "html": "See Also\nGetting modifier keys\nstatic let all: EventModifiers\nAll possible modifier keys.\nstatic let capsLock: EventModifiers\nThe Caps Lock key.\nstatic let command: EventModifiers\nThe Command key.\nstatic let control: EventModifiers\nThe Control key.\nstatic let option: EventModifiers\nThe Option key.\nstatic let shift: EventModifiers\nThe Shift key."
    },
    {
        "title": "control",
        "url": "https://developer.apple.com/documentation/swiftui/eventmodifiers/control",
        "html": "See Also\nGetting modifier keys\nstatic let all: EventModifiers\nAll possible modifier keys.\nstatic let capsLock: EventModifiers\nThe Caps Lock key.\nstatic let command: EventModifiers\nThe Command key.\nstatic let numericPad: EventModifiers\nAny key on the numeric keypad.\nstatic let option: EventModifiers\nThe Option key.\nstatic let shift: EventModifiers\nThe Shift key."
    },
    {
        "title": "accessibility(identifier:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/accessibility(identifier:)",
        "html": "Deprecated\n\nUse accessibilityIdentifier(_:) instead.\n\nDiscussion\n\nUse this value for testing. It isn\u2019t visible to the user.\n\nSee Also\nAccessibility modifiers\nfunc accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds a label to the view that describes its contents.\nDeprecated\nfunc accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds a textual description of the value that the view contains.\nDeprecated\nfunc accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies whether to hide this view from system accessibility features.\nDeprecated\nfunc accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets a selection identifier for this view\u2019s accessibility element.\nDeprecated\nfunc accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nCommunicates to the user what happens after performing the view\u2019s action.\nDeprecated\nfunc accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies the unit point where activations occur in the view.\nDeprecated\nfunc accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies the point where activations occur in the view.\nDeprecated\nfunc accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets alternate input labels with which users identify a view.\nDeprecated\nfunc accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds the given traits to the view.\nDeprecated\nfunc accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nRemoves the given traits from this view.\nDeprecated\nfunc accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets the sort priority order for this view\u2019s accessibility element, relative to other elements at the same level.\nDeprecated"
    },
    {
        "title": "accessibility(hint:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/accessibility(hint:)",
        "html": "Deprecated\n\nUse accessibilityHint(_:) instead.\n\nDiscussion\n\nProvide a hint in the form of a brief phrase, like \u201cPurchases the item\u201d or \u201cDownloads the attachment\u201d.\n\nSee Also\nAccessibility modifiers\nfunc accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds a label to the view that describes its contents.\nDeprecated\nfunc accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds a textual description of the value that the view contains.\nDeprecated\nfunc accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies whether to hide this view from system accessibility features.\nDeprecated\nfunc accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nUses the specified string to identify the view.\nDeprecated\nfunc accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets a selection identifier for this view\u2019s accessibility element.\nDeprecated\nfunc accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies the unit point where activations occur in the view.\nDeprecated\nfunc accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies the point where activations occur in the view.\nDeprecated\nfunc accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets alternate input labels with which users identify a view.\nDeprecated\nfunc accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds the given traits to the view.\nDeprecated\nfunc accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nRemoves the given traits from this view.\nDeprecated\nfunc accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets the sort priority order for this view\u2019s accessibility element, relative to other elements at the same level.\nDeprecated"
    },
    {
        "title": "option",
        "url": "https://developer.apple.com/documentation/swiftui/eventmodifiers/option",
        "html": "See Also\nGetting modifier keys\nstatic let all: EventModifiers\nAll possible modifier keys.\nstatic let capsLock: EventModifiers\nThe Caps Lock key.\nstatic let command: EventModifiers\nThe Command key.\nstatic let control: EventModifiers\nThe Control key.\nstatic let numericPad: EventModifiers\nAny key on the numeric keypad.\nstatic let shift: EventModifiers\nThe Shift key."
    },
    {
        "title": "shift",
        "url": "https://developer.apple.com/documentation/swiftui/eventmodifiers/shift",
        "html": "See Also\nGetting modifier keys\nstatic let all: EventModifiers\nAll possible modifier keys.\nstatic let capsLock: EventModifiers\nThe Caps Lock key.\nstatic let command: EventModifiers\nThe Command key.\nstatic let control: EventModifiers\nThe Control key.\nstatic let numericPad: EventModifiers\nAny key on the numeric keypad.\nstatic let option: EventModifiers\nThe Option key."
    },
    {
        "title": "navigationBarTitle(_:displayMode:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/navigationbartitle(_:displaymode:)-gi7a",
        "html": "Deprecated\n\nUse navigationTitle(_:) with navigationBarTitleDisplayMode(_:).\n\nParameters\ntitleKey\n\nA key to a localized description of this view to display in the navigation bar.\n\ndisplayMode\n\nThe style to use for displaying the navigation bar title.\n\nDiscussion\n\nUse navigationBarTitle(_:displayMode:) to set the title of the navigation bar for this view and specify a display mode for the title from one of the NavigationBarItem.TitleDisplayMode styles. This modifier only takes effect when this view is inside of and visible within a NavigationView.\n\nIn the example below, text for the navigation bar title is provided using a string. The navigation bar title\u2019s NavigationBarItem.TitleDisplayMode is set to .inline which places the navigation bar title in the bounds of the navigation bar.\n\nstruct FlavorView: View {\n    let items = [\"Chocolate\", \"Vanilla\", \"Strawberry\", \"Mint Chip\",\n                 \"Pistachio\"]\n    var body: some View {\n        NavigationView {\n            List(items, id: \\.self) {\n                Text($0)\n            }\n            .navigationBarTitle(\"Today's Flavors\", displayMode: .inline)\n        }\n    }\n}\n\n\nIf the titleKey can\u2019t be found, the title uses the text of the key name instead.\n\nSee Also\nAuxiliary view modifiers\nfunc navigationBarTitle(Text) -> some View\nSets the title in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle(LocalizedStringKey) -> some View\nSets the title of this view\u2019s navigation bar with a localized string.\nDeprecated\nfunc navigationBarTitle<S>(S) -> some View\nSets the title of this view\u2019s navigation bar with a string.\nDeprecated\nfunc navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarItems<L>(leading: L) -> some View\nSets the navigation bar items for this view.\nDeprecated\nfunc navigationBarItems<L, T>(leading: L, trailing: T) -> some View\nSets the navigation bar items for this view.\nDeprecated\nfunc navigationBarItems<T>(trailing: T) -> some View\nConfigures the navigation bar items for this view.\nDeprecated\nfunc navigationBarHidden(Bool) -> some View\nHides the navigation bar for this view.\nDeprecated\nfunc statusBar(hidden: Bool) -> some View\nSets the visibility of the status bar.\nDeprecated\nfunc contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View\nAdds a context menu to the view.\nDeprecated"
    },
    {
        "title": "mask(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/mask(_:)",
        "html": "Deprecated\n\nUse mask(alignment:_:) instead.\n\nParameters\nmask\n\nThe view whose alpha the rendering system applies to the specified view.\n\nDiscussion\n\nUse mask(_:) when you want to apply the alpha (opacity) value of another view to the current view.\n\nThis example shows an image masked by rectangle with a 10% opacity:\n\nImage(systemName: \"envelope.badge.fill\")\n    .foregroundColor(Color.blue)\n    .font(.system(size: 128, weight: .regular))\n    .mask(Rectangle().opacity(0.1))\n\n\nSee Also\nGraphics and rendering modifiers\nfunc accentColor(Color?) -> some View\nSets the accent color for this view and the views it contains.\nDeprecated\nfunc animation(Animation?) -> some View\nApplies the given animation to all animatable values within this view.\nDeprecated\nfunc cornerRadius(CGFloat, antialiased: Bool) -> some View\nClips this view to its bounding frame, with the specified corner radius.\nDeprecated"
    },
    {
        "title": "init(content:header:)",
        "url": "https://developer.apple.com/documentation/swiftui/section/init(content:header:)-72lqz",
        "html": "Parameters\ncontent\n\nThe section\u2019s content.\n\nheader\n\nA view to use as the section\u2019s header.\n\nSee Also\nAdding headers and footers\ninit(content: () -> Content, header: () -> Parent)\nCreates a section with a header and the provided section content.\nAvailable when Parent conforms to View, Content conforms to View, and Footer is EmptyView.\ninit(content: () -> Content, footer: () -> Footer)\nCreates a section with a footer and the provided section content.\nAvailable when Parent is EmptyView, Content conforms to View, and Footer conforms to View.\ninit(content: () -> Content, header: () -> Parent, footer: () -> Footer)\nCreates a section with a header, footer, and the provided section content.\nAvailable when Parent conforms to View, Content conforms to View, and Footer conforms to View."
    },
    {
        "title": "go",
        "url": "https://developer.apple.com/documentation/swiftui/submitlabel/go",
        "html": "See Also\nGetting submission labels\nstatic var `continue`: SubmitLabel\nDefines a submit label with text of \u201cContinue\u201d.\nstatic var done: SubmitLabel\nDefines a submit label with text of \u201cDone\u201d.\nstatic var join: SubmitLabel\nDefines a submit label with text of \u201cJoin\u201d.\nstatic var next: SubmitLabel\nDefines a submit label with text of \u201cNext\u201d.\nstatic var `return`: SubmitLabel\nDefines a submit label with text of \u201cReturn\u201d.\nstatic var route: SubmitLabel\nDefines a submit label with text of \u201cRoute\u201d.\nstatic var search: SubmitLabel\nDefines a submit label with text of \u201cSearch\u201d.\nstatic var send: SubmitLabel\nDefines a submit label with text of \u201cSend\u201d."
    },
    {
        "title": "layoutDirectionBehavior",
        "url": "https://developer.apple.com/documentation/swiftui/shape/layoutdirectionbehavior-5wfat",
        "html": "Discussion\n\nIf the layoutDirectionBehavior for a Shape is one that mirrors, the shape\u2019s path will be mirrored horizontally when in the specified layout direction. When mirrored, the individual points of the path will be transformed.\n\nDefaults to .mirrors when deploying on iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0 and later, and to .fixed if not. To mirror a path when deploying to earlier releases, either use View.flipsForRightToLeftLayoutDirection for a filled or stroked shape or conditionally mirror the points in the path of the shape."
    },
    {
        "title": "init(_:id:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/foreach/init(_:id:content:)-44erp",
        "html": "See Also\nCreating attachment content\ninit(Data, content: (Data.Element) -> Content)\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Content conforms to AttachmentContent, and Data.Element conforms to Identifiable.\nBeta"
    },
    {
        "title": "init(_:id:editActions:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/foreach/init(_:id:editactions:content:)",
        "html": "Parameters\ndata\n\nThe identified data that the ForEach instance uses to create views dynamically and can be edited by the user.\n\nid\n\nThe key path to the provided data\u2019s identifier.\n\neditActions\n\nThe edit actions that are synthesized on data.\n\ncontent\n\nThe view builder that creates views dynamically.\n\nDiscussion\n\nIt\u2019s important that the id of a data element doesn\u2019t change unless you replace the data element with a new data element that has a new identity. If the id of a data element changes, the content view generated from that data element loses any current state and animations.\n\nWhen placed inside a List the edit actions (like delete or move) can be automatically synthesized by specifying an appropriate EditActions.\n\nThe following example shows a list of recipes whose elements can be deleted and reordered:\n\nList {\n    ForEach($recipes, editActions: [.delete, .move]) { $recipe in\n        RecipeCell($recipe)\n    }\n}\n\n\nUse deleteDisabled(_:) and moveDisabled(_:) to disable respectively delete or move actions on a per-row basis.\n\nThe following example shows a list of recipes whose elements can be deleted only if they satisfy a condition:\n\nList {\n    ForEach($recipes, editActions: .delete) { $recipe in\n        RecipeCell($recipe)\n            .deleteDisabled(recipe.isFromMom)\n    }\n}\n\n\nExplicit DynamicViewContent.onDelete(perform:), DynamicViewContent.onMove(perform:), or View.swipeActions(edge:allowsFullSwipe:content:) modifiers will override any synthesized actions. Use this modifier if you need fine-grain control on how mutations are applied to the data driving the ForEach. For example, if you need to execute side effects or call into your existing model code.\n\nSee Also\nCreating editable content\ninit<C, R>(Binding<C>, editActions: EditActions<C>, content: (Binding<C.Element>) -> R)\nCreates an instance that uniquely identifies and creates views across updates based on the identity of the underlying data.\nAvailable when Data conforms to RandomAccessCollection and ID conforms to Hashable."
    },
    {
        "title": "modelContainer(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/modelcontainer(_:)",
        "html": "Parameters\ncontainer\n\nThe model container to use for this view.\n\nDiscussion\n\nIn this example, ContentView sets a model container to use for RecipesList:\n\nstruct ContentView: View {\n    @State private var container = ModelContainer(...)\n\n\n    var body: some Scene {\n        RecipesList()\n            .modelContainer(container)\n    }\n}\n\n\nThe environment\u2019s modelContext property will be assigned a new context associated with this container. All implicit model context operations in this view, such as Query properties, will use the environment\u2019s context.\n\nSee Also\nConfiguring a model\nfunc modelContext(ModelContext) -> some View\nSets the model context in this view\u2019s environment.\nfunc modelContainer(for: PersistentModel.Type, inMemory: Bool, isAutosaveEnabled: Bool, isUndoEnabled: Bool, onSetup: (Result<ModelContainer, Error>) -> Void) -> some View\nSets the model container in this view for storing the provided model type, creating a new container if necessary, and also sets a model context for that container in this view\u2019s environment.\nfunc modelContainer(for: [PersistentModel.Type], inMemory: Bool, isAutosaveEnabled: Bool, isUndoEnabled: Bool, onSetup: (Result<ModelContainer, Error>) -> Void) -> some View\nSets the model container in this view for storing the provided model types, creating a new container if necessary, and also sets a model context for that container in this view\u2019s environment."
    },
    {
        "title": "chartYAxisLabel(position:alignment:spacing:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartyaxislabel(position:alignment:spacing:content:)",
        "html": "Parameters\nposition\n\nThe position of the label.\n\nalignment\n\nThe alignment of the label.\n\nspacing\n\nThe spacing of the label from the axis markers.\n\ncontent\n\nThe label content.\n\nSee Also\nAxis Labels\nfunc chartXAxisLabel<S>(S, position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nAdds x axis label for charts in the view.\nfunc chartXAxisLabel(LocalizedStringKey, position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nAdds x axis label for charts in the view.\nfunc chartXAxisLabel<C>(position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?, content: () -> C) -> some View\nAdds x axis label for charts in the view.\nfunc chartYAxisLabel<S>(S, position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nAdds y axis label for charts in the view.\nfunc chartYAxisLabel(LocalizedStringKey, position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nAdds y axis label for charts in the view."
    },
    {
        "title": "init(_:isExpanded:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/section/init(_:isexpanded:content:)-5hjcw",
        "html": "Parameters\ntitleKey\n\nThe key for the section\u2019s localized title, which describes the contents of the section.\n\nisExpanded\n\nA binding to a Boolean value that determines the section\u2019s expansion state (expanded or collapsed).\n\ncontent\n\nThe section\u2019s content.\n\nSee Also\nControlling collapsibility\ninit<V, S>(S, isExpanded: Binding<Bool>, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent conforms to TableRowContent and Content conforms to TableRowContent.\ninit<S>(S, isExpanded: Binding<Bool>, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent is Text, Content conforms to View, and Footer is EmptyView.\ninit(LocalizedStringKey, isExpanded: Binding<Bool>, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent is Text, Content conforms to View, and Footer is EmptyView.\ninit(isExpanded: Binding<Bool>, content: () -> Content, header: () -> Parent)\nCreates a section with a header, the provided section content, and a binding representing the section\u2019s expansion state.\nAvailable when Parent conforms to View, Content conforms to View, and Footer is EmptyView.\ninit<V, H>(isExpanded: Binding<Bool>, content: () -> Content, header: () -> H)\nCreates a section with a header and the provided section content.\nAvailable when Parent conforms to TableRowContent and Content conforms to TableRowContent."
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/section/init(_:content:)-k9lk",
        "html": "Parameters\ntitleKey\n\nThe key for the section\u2019s localized title, which describes the contents of the section.\n\ncontent\n\nThe section\u2019s content.\n\nSee Also\nCreating a section\ninit<V>(content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent conforms to TableRowContent, Content conforms to TableRowContent, and Footer conforms to TableRowContent.\ninit(content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent is EmptyView, Content conforms to View, and Footer is EmptyView.\ninit(LocalizedStringKey, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent is Text, Content conforms to View, and Footer is EmptyView.\ninit<S>(S, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent is Text, Content conforms to View, and Footer is EmptyView.\ninit<V, S>(S, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent conforms to TableRowContent, Content conforms to TableRowContent, and Footer conforms to TableRowContent."
    },
    {
        "title": "init(_:id:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/foreach/init(_:id:content:)-2qdso",
        "html": "See Also\nCreating chart content\ninit(Data, content: (Data.Element) -> Content)\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Content conforms to ChartContent, and Data.Element conforms to Identifiable."
    },
    {
        "title": "init(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/section/init(content:)-1c3ry",
        "html": "Parameters\ncontent\n\nThe section\u2019s content.\n\nSee Also\nCreating a section\ninit(content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent is EmptyView, Content conforms to View, and Footer is EmptyView.\ninit(LocalizedStringKey, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent is Text, Content conforms to View, and Footer is EmptyView.\ninit<S>(S, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent is Text, Content conforms to View, and Footer is EmptyView.\ninit<V, S>(S, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent conforms to TableRowContent, Content conforms to TableRowContent, and Footer conforms to TableRowContent.\ninit<V>(LocalizedStringKey, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent conforms to TableRowContent, Content conforms to TableRowContent, and Footer conforms to TableRowContent."
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/foreach/init(_:content:)-6db7u",
        "html": "Parameters\ndata\n\nA constant range.\n\ncontent\n\nThe view builder that creates views dynamically.\n\nDiscussion\n\nThe instance only reads the initial value of the provided data and doesn\u2019t need to identify views across updates. To compute views on demand over a dynamic range, use ForEach/init(_:id:content:)."
    },
    {
        "title": "init(_:id:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/foreach/init(_:id:content:)-6p8p9",
        "html": "Parameters\ndata\n\nThe data that the ForEach instance uses to create views dynamically.\n\nid\n\nThe key path to the provided data\u2019s identifier.\n\ncontent\n\nThe result builder that generates Rotor content for each data element.\n\nDiscussion\n\nIt\u2019s important that the id of a data element doesn\u2019t change, unless SwiftUI considers the data element to have been replaced with a new data element that has a new identity.\n\nSee Also\nGenerating rotor content\ninit(Data, content: (Data.Element) -> Content)\nCreates an instance that generates Rotor content by combining, in order, individual Rotor content for each element in the data given to this ForEach.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Content conforms to AccessibilityRotorContent, and Data.Element conforms to Identifiable."
    },
    {
        "title": "HoverPhase.active(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/hoverphase/active(_:)",
        "html": "See Also\nGetting hover phases\ncase ended\nThe pointer exited the view."
    },
    {
        "title": "accessibility",
        "url": "https://developer.apple.com/documentation/swiftui/contentshapekinds/accessibility",
        "html": "Discussion\n\nSetting a content shape with this kind causes the accessibility frame and path of the view\u2019s underlying accessibility element to match the shape without adjusting the hit-testing shape, updating the visual focus ring that assistive apps, such as VoiceOver, draw, as well as how the element is sorted. Updating the accessibility shape is only required if the shape or size used to hit-test significantly diverges from the visual shape of the view.\n\nTo control the shape for accessibility and hit-testing, use the interaction kind.\n\nSee Also\nGetting shape kinds\nstatic let interaction: ContentShapeKinds\nThe kind for hit-testing and accessibility.\nstatic let dragPreview: ContentShapeKinds\nThe kind for drag and drop previews.\nstatic let contextMenuPreview: ContentShapeKinds\nThe kind for context menu previews.\nstatic let focusEffect: ContentShapeKinds\nThe kind for the focus effect.\nstatic let hoverEffect: ContentShapeKinds\nThe kind for hover effects."
    },
    {
        "title": "chartYVisibleDomain(length:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartyvisibledomain(length:)",
        "html": "Parameters\nlength\n\nThe length of the visible domain measured in data units. For categorical data, this should be the number of visible categories.\n\nDiscussion\n\nUse this method to control how much of the chart is visible in a scrollable chart. The example below sets the visible portion of the chart to 10 units in the Y axis.\n\nChart(data) {\n    BarMark(\n        x: .value(\"x\", $0.x),\n        y: .value(\"y\", $0.y)\n    )\n}\n.chartScrollableAxes(.vertical)\n.chartYVisibleDomain(length: 10)\n\nSee Also\nVisible domain\nfunc chartXVisibleDomain<P>(length: P) -> some View\nSets the length of the visible domain in the X dimension."
    },
    {
        "title": "lift",
        "url": "https://developer.apple.com/documentation/swiftui/hovereffect/lift",
        "html": "See Also\nGetting hover effects\nstatic let automatic: HoverEffect\nAn effect that attempts to determine the effect automatically. This is the default effect.\nstatic let highlight: HoverEffect\nAn effect that morphs the pointer into a platter behind the view and shows a light source indicating position."
    },
    {
        "title": "data",
        "url": "https://developer.apple.com/documentation/swiftui/foreach/data",
        "html": "See Also\nAccessing content\nvar content: (Data.Element) -> Content\nA function to create content on demand using the underlying data."
    },
    {
        "title": "text",
        "url": "https://developer.apple.com/documentation/swiftui/submittriggers/text",
        "html": "See Also\nGetting submit triggers\nstatic let search: SubmitTriggers\nDefines triggers originating from search fields constructed from searchable modifiers."
    },
    {
        "title": "KeyPress.Result",
        "url": "https://developer.apple.com/documentation/swiftui/keypress/result",
        "html": "Topics\nGetting the result\ncase handled\nThe action consumed the event, preventing dispatch from continuing.\ncase ignored\nThe action ignored the event, allowing dispatch to continue.\nRelationships\nConforms To\nEquatable\nHashable\nSendable"
    },
    {
        "title": "scrollTo(_:anchor:)",
        "url": "https://developer.apple.com/documentation/swiftui/scrollviewproxy/scrollto(_:anchor:)",
        "html": "Parameters\nid\n\nThe identifier of a child view to scroll to.\n\nanchor\n\nThe alignment behavior of the scroll action.\n\nDiscussion\n\nIf anchor is nil, this method finds the container of the identified view, and scrolls the minimum amount to make the identified view wholly visible.\n\nIf anchor is non-nil, it defines the points in the identified view and the scroll view to align. For example, setting anchor to top aligns the top of the identified view to the top of the scroll view. Similarly, setting anchor to bottom aligns the bottom of the identified view to the bottom of the scroll view, and so on."
    },
    {
        "title": "chartYSelection(range:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartyselection(range:)",
        "html": "See Also\nSelection\nfunc chartXSelection<P>(range: Binding<ClosedRange<P>?>) -> some View\nfunc chartXSelection<P>(value: Binding<P?>) -> some View\nfunc chartYSelection<P>(value: Binding<P?>) -> some View\nfunc chartAngleSelection<P>(value: Binding<P?>) -> some View"
    },
    {
        "title": "chartXVisibleDomain(length:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartxvisibledomain(length:)",
        "html": "Parameters\nlength\n\nThe length of the visible domain measured in data units. For categorical data, this should be the number of visible categories.\n\nDiscussion\n\nUse this method to control how much of the chart is visible in a scrollable chart. The example below sets the visible portion of the chart to 10 units in the X axis.\n\nChart(data) {\n    BarMark(\n        x: .value(\"x\", $0.x),\n        y: .value(\"y\", $0.y)\n    )\n}\n.chartScrollableAxes(.horizontal)\n.chartXVisibleDomain(length: 10)\n\nSee Also\nVisible domain\nfunc chartYVisibleDomain<P>(length: P) -> some View\nSets the length of the visible domain in the Y dimension."
    },
    {
        "title": "function",
        "url": "https://developer.apple.com/documentation/swiftui/eventmodifiers/function",
        "html": "Deprecated\n\nThis key modifier is reserved for system applications."
    },
    {
        "title": "chartYSelection(value:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartyselection(value:)",
        "html": "See Also\nSelection\nfunc chartXSelection<P>(range: Binding<ClosedRange<P>?>) -> some View\nfunc chartXSelection<P>(value: Binding<P?>) -> some View\nfunc chartYSelection<P>(range: Binding<ClosedRange<P>?>) -> some View\nfunc chartAngleSelection<P>(value: Binding<P?>) -> some View"
    },
    {
        "title": "chartScrollTargetBehavior(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartscrolltargetbehavior(_:)",
        "html": "Parameters\nbehavior\n\nThe chart scroll target behavior.\n\nDiscussion\n\nUse this method to control how the chart scrolls and aligns when the user finishes scrolling. The example below sets the scroll target behavior to align to the values in the chart. When the user finishes scrolling, the chart will settle to align with the values in the chart.\n\nChart(data) {\n    BarMark(\n        x: .value(\"x\", $0.x),\n        y: .value(\"y\", $0.y)\n    )\n}\n.chartScrollableAxes(.vertical)\n.chartYVisibleDomain(length: 10)\n.chartScrollTargetBehavior(.valueAligned(unit: 1))\n\nSee Also\nScrolling\nfunc chartScrollPosition(initialX: some Plottable) -> some View\nSets the initial scroll position along the x-axis. Once the user scrolls the scroll view, the value provided to this modifier will have no effect.\nfunc chartScrollPosition(initialY: some Plottable) -> some View\nSets the initial scroll position along the y-axis. Once the user scrolls the scroll view, the value provided to this modifier will have no effect.\nfunc chartScrollPosition(x: Binding<some Plottable>) -> some View\nAssociates a binding to be updated when the chart scrolls along the x-axis.\nfunc chartScrollPosition(y: Binding<some Plottable>) -> some View\nAssociates a binding to be updated when the chart scrolls along the y-axis.\nfunc chartScrollableAxes(Axis.Set) -> some View\nConfigures the scrollable behavior of charts in this view."
    },
    {
        "title": "init(rawValue:)",
        "url": "https://developer.apple.com/documentation/swiftui/eventmodifiers/init(rawvalue:)",
        "html": "Parameters\nrawValue\n\nThe raw value with which to create the key modifier.\n\nSee Also\nCreating a set of options\nlet rawValue: Int\nThe raw value."
    },
    {
        "title": "chartScrollPosition(x:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartscrollposition(x:)",
        "html": "Parameters\nvalue\n\nThe scroll position as a value.\n\nSee Also\nScrolling\nfunc chartScrollPosition(initialX: some Plottable) -> some View\nSets the initial scroll position along the x-axis. Once the user scrolls the scroll view, the value provided to this modifier will have no effect.\nfunc chartScrollPosition(initialY: some Plottable) -> some View\nSets the initial scroll position along the y-axis. Once the user scrolls the scroll view, the value provided to this modifier will have no effect.\nfunc chartScrollPosition(y: Binding<some Plottable>) -> some View\nAssociates a binding to be updated when the chart scrolls along the y-axis.\nfunc chartScrollTargetBehavior(some ChartScrollTargetBehavior) -> some View\nSets the scroll behavior of the scrollable chart.\nfunc chartScrollableAxes(Axis.Set) -> some View\nConfigures the scrollable behavior of charts in this view."
    },
    {
        "title": "chartScrollPosition(y:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartscrollposition(y:)",
        "html": "Parameters\nvalue\n\nThe scroll position as a value.\n\nSee Also\nScrolling\nfunc chartScrollPosition(initialX: some Plottable) -> some View\nSets the initial scroll position along the x-axis. Once the user scrolls the scroll view, the value provided to this modifier will have no effect.\nfunc chartScrollPosition(initialY: some Plottable) -> some View\nSets the initial scroll position along the y-axis. Once the user scrolls the scroll view, the value provided to this modifier will have no effect.\nfunc chartScrollPosition(x: Binding<some Plottable>) -> some View\nAssociates a binding to be updated when the chart scrolls along the x-axis.\nfunc chartScrollTargetBehavior(some ChartScrollTargetBehavior) -> some View\nSets the scroll behavior of the scrollable chart.\nfunc chartScrollableAxes(Axis.Set) -> some View\nConfigures the scrollable behavior of charts in this view."
    },
    {
        "title": "chartLineStyleScale(domain:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartlinestylescale(domain:)",
        "html": "Parameters\ndomain\n\nThe possible data values plotted as line styles in the chart. You can define the domain with an array for categorical values (e.g., [\"A\", \"B\", \"C\"])\n\nSee Also\nLine style scales\nfunc chartLineStyleScale<DataValue>(KeyValuePairs<DataValue, StrokeStyle>) -> some View\nConfigures the line style scale for charts.\nfunc chartLineStyleScale<Domain, Range>(domain: Domain, range: Range) -> some View\nConfigures the line style scale for charts.\nfunc chartLineStyleScale<Range>(range: Range) -> some View\nConfigures the line style scale for charts.\nfunc chartLineStyleScale<Domain>(domain: Domain, mapping: (Domain.Element) -> StrokeStyle) -> some View\nConfigures the line style scale for charts.\nfunc chartLineStyleScale<DataValue>(mapping: (DataValue) -> StrokeStyle) -> some View\nConfigures the line style scale for charts."
    },
    {
        "title": "chartSymbolSizeScale(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartsymbolsizescale(_:)",
        "html": "Parameters\nmapping\n\nMaps data categories to symbol sizes.\n\nSee Also\nSymbol size scales\nfunc chartSymbolSizeScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale<Domain>(domain: Domain, type: ScaleType?) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale<Domain>(domain: Domain, mapping: (Domain.Element) -> CGFloat) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale<DataValue>(mapping: (DataValue) -> CGFloat) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale<Range>(range: Range, type: ScaleType?) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale(type: ScaleType?) -> some View\nConfigures the symbol size scale for charts."
    },
    {
        "title": "chartSymbolSizeScale(type:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartsymbolsizescale(type:)",
        "html": "Parameters\ntype\n\nThe scale type.\n\nSee Also\nSymbol size scales\nfunc chartSymbolSizeScale<DataValue>(KeyValuePairs<DataValue, CGFloat>) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale<Domain>(domain: Domain, type: ScaleType?) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale<Domain>(domain: Domain, mapping: (Domain.Element) -> CGFloat) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale<DataValue>(mapping: (DataValue) -> CGFloat) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale<Range>(range: Range, type: ScaleType?) -> some View\nConfigures the symbol size scale for charts."
    },
    {
        "title": "chartScrollPosition(initialX:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartscrollposition(initialx:)",
        "html": "Parameters\ninitialValue\n\nThe initial scroll position as a value.\n\nSee Also\nScrolling\nfunc chartScrollPosition(initialY: some Plottable) -> some View\nSets the initial scroll position along the y-axis. Once the user scrolls the scroll view, the value provided to this modifier will have no effect.\nfunc chartScrollPosition(x: Binding<some Plottable>) -> some View\nAssociates a binding to be updated when the chart scrolls along the x-axis.\nfunc chartScrollPosition(y: Binding<some Plottable>) -> some View\nAssociates a binding to be updated when the chart scrolls along the y-axis.\nfunc chartScrollTargetBehavior(some ChartScrollTargetBehavior) -> some View\nSets the scroll behavior of the scrollable chart.\nfunc chartScrollableAxes(Axis.Set) -> some View\nConfigures the scrollable behavior of charts in this view."
    },
    {
        "title": "chartLineStyleScale(range:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartlinestylescale(range:)",
        "html": "Parameters\nrange\n\nThe range of line styles that correspond to the scale domain.\n\nSee Also\nLine style scales\nfunc chartLineStyleScale<DataValue>(KeyValuePairs<DataValue, StrokeStyle>) -> some View\nConfigures the line style scale for charts.\nfunc chartLineStyleScale<Domain>(domain: Domain) -> some View\nConfigures the line style scale for charts.\nfunc chartLineStyleScale<Domain, Range>(domain: Domain, range: Range) -> some View\nConfigures the line style scale for charts.\nfunc chartLineStyleScale<Domain>(domain: Domain, mapping: (Domain.Element) -> StrokeStyle) -> some View\nConfigures the line style scale for charts.\nfunc chartLineStyleScale<DataValue>(mapping: (DataValue) -> StrokeStyle) -> some View\nConfigures the line style scale for charts."
    },
    {
        "title": "chartLineStyleScale(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartlinestylescale(_:)",
        "html": "Parameters\nmapping\n\nMaps data categories to line styles.\n\nSee Also\nLine style scales\nfunc chartLineStyleScale<Domain>(domain: Domain) -> some View\nConfigures the line style scale for charts.\nfunc chartLineStyleScale<Domain, Range>(domain: Domain, range: Range) -> some View\nConfigures the line style scale for charts.\nfunc chartLineStyleScale<Range>(range: Range) -> some View\nConfigures the line style scale for charts.\nfunc chartLineStyleScale<Domain>(domain: Domain, mapping: (Domain.Element) -> StrokeStyle) -> some View\nConfigures the line style scale for charts.\nfunc chartLineStyleScale<DataValue>(mapping: (DataValue) -> StrokeStyle) -> some View\nConfigures the line style scale for charts."
    },
    {
        "title": "chartLineStyleScale(mapping:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartlinestylescale(mapping:)",
        "html": "Parameters\nmapping\n\nMaps data categories to line styles.\n\nSee Also\nLine style scales\nfunc chartLineStyleScale<DataValue>(KeyValuePairs<DataValue, StrokeStyle>) -> some View\nConfigures the line style scale for charts.\nfunc chartLineStyleScale<Domain>(domain: Domain) -> some View\nConfigures the line style scale for charts.\nfunc chartLineStyleScale<Domain, Range>(domain: Domain, range: Range) -> some View\nConfigures the line style scale for charts.\nfunc chartLineStyleScale<Range>(range: Range) -> some View\nConfigures the line style scale for charts.\nfunc chartLineStyleScale<Domain>(domain: Domain, mapping: (Domain.Element) -> StrokeStyle) -> some View\nConfigures the line style scale for charts."
    },
    {
        "title": "chartSymbolScale(range:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartsymbolscale(range:)-6hded",
        "html": "Parameters\nrange\n\nThe range of symbols that correspond to the scale domain.\n\nSee Also\nSymbol scales\nfunc chartSymbolScale<DataValue, S>(KeyValuePairs<DataValue, S>) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale<DataValue>(KeyValuePairs<DataValue, ChartSymbolShape>) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale<Domain>(domain: Domain) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Domain, Range>(domain: Domain, range: Range) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Domain>(domain: Domain, range: [ChartSymbolShape]) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Domain, S>(domain: Domain, mapping: (Domain.Element) -> S) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale<DataValue, S>(mapping: (DataValue) -> S) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale(range: [ChartSymbolShape]) -> some View\nConfigures the symbol style scale for charts."
    },
    {
        "title": "chartLineStyleScale(domain:mapping:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartlinestylescale(domain:mapping:)",
        "html": "Parameters\ndomain\n\nThe possible data values plotted as line style in the chart.\n\nmapping\n\nMaps data categories to line styles.\n\nSee Also\nLine style scales\nfunc chartLineStyleScale<DataValue>(KeyValuePairs<DataValue, StrokeStyle>) -> some View\nConfigures the line style scale for charts.\nfunc chartLineStyleScale<Domain>(domain: Domain) -> some View\nConfigures the line style scale for charts.\nfunc chartLineStyleScale<Domain, Range>(domain: Domain, range: Range) -> some View\nConfigures the line style scale for charts.\nfunc chartLineStyleScale<Range>(range: Range) -> some View\nConfigures the line style scale for charts.\nfunc chartLineStyleScale<DataValue>(mapping: (DataValue) -> StrokeStyle) -> some View\nConfigures the line style scale for charts."
    },
    {
        "title": "chartLineStyleScale(domain:range:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartlinestylescale(domain:range:)",
        "html": "Parameters\ndomain\n\nThe possible data values plotted as line styles in the chart. You can define the domain with an array for categorical values (e.g., [\"A\", \"B\", \"C\"])\n\nrange\n\nThe range of line styles that correspond to the scale domain.\n\nSee Also\nLine style scales\nfunc chartLineStyleScale<DataValue>(KeyValuePairs<DataValue, StrokeStyle>) -> some View\nConfigures the line style scale for charts.\nfunc chartLineStyleScale<Domain>(domain: Domain) -> some View\nConfigures the line style scale for charts.\nfunc chartLineStyleScale<Range>(range: Range) -> some View\nConfigures the line style scale for charts.\nfunc chartLineStyleScale<Domain>(domain: Domain, mapping: (Domain.Element) -> StrokeStyle) -> some View\nConfigures the line style scale for charts.\nfunc chartLineStyleScale<DataValue>(mapping: (DataValue) -> StrokeStyle) -> some View\nConfigures the line style scale for charts."
    },
    {
        "title": "chartSymbolSizeScale(mapping:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartsymbolsizescale(mapping:)",
        "html": "Parameters\nmapping\n\nMaps data categories to symbol sizes.\n\nSee Also\nSymbol size scales\nfunc chartSymbolSizeScale<DataValue>(KeyValuePairs<DataValue, CGFloat>) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale<Domain>(domain: Domain, type: ScaleType?) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale<Domain>(domain: Domain, mapping: (Domain.Element) -> CGFloat) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale<Range>(range: Range, type: ScaleType?) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale(type: ScaleType?) -> some View\nConfigures the symbol size scale for charts."
    },
    {
        "title": "chartSymbolSizeScale(domain:range:type:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartsymbolsizescale(domain:range:type:)",
        "html": "Parameters\ndomain\n\nThe possible data values plotted as symbol sizes in the chart. You can define the domain with an array for categorical values (e.g., [\"A\", \"B\", \"C\"])\n\nrange\n\nThe range of symbol size that correspond to the scale domain.\n\ntype\n\nThe scale type.\n\nSee Also\nSymbol size scales\nfunc chartSymbolSizeScale<DataValue>(KeyValuePairs<DataValue, CGFloat>) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale<Domain>(domain: Domain, type: ScaleType?) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale<Domain>(domain: Domain, mapping: (Domain.Element) -> CGFloat) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale<DataValue>(mapping: (DataValue) -> CGFloat) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale<Range>(range: Range, type: ScaleType?) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale(type: ScaleType?) -> some View\nConfigures the symbol size scale for charts."
    },
    {
        "title": "chartSymbolSizeScale(domain:mapping:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartsymbolsizescale(domain:mapping:)",
        "html": "Parameters\ndomain\n\nThe possible data values plotted as symbol size in the chart.\n\nmapping\n\nMaps data categories to symbol sizes.\n\nSee Also\nSymbol size scales\nfunc chartSymbolSizeScale<DataValue>(KeyValuePairs<DataValue, CGFloat>) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale<Domain>(domain: Domain, type: ScaleType?) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale<DataValue>(mapping: (DataValue) -> CGFloat) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale<Range>(range: Range, type: ScaleType?) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale(type: ScaleType?) -> some View\nConfigures the symbol size scale for charts."
    },
    {
        "title": "chartSymbolSizeScale(domain:type:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartsymbolsizescale(domain:type:)",
        "html": "Parameters\ndomain\n\nThe possible data values plotted as symbol sizes in the chart. You can define the domain with an array for categorical values (e.g., [\"A\", \"B\", \"C\"])\n\ntype\n\nThe scale type.\n\nSee Also\nSymbol size scales\nfunc chartSymbolSizeScale<DataValue>(KeyValuePairs<DataValue, CGFloat>) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale<Domain>(domain: Domain, mapping: (Domain.Element) -> CGFloat) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale<DataValue>(mapping: (DataValue) -> CGFloat) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale<Range>(range: Range, type: ScaleType?) -> some View\nConfigures the symbol size scale for charts.\nfunc chartSymbolSizeScale(type: ScaleType?) -> some View\nConfigures the symbol size scale for charts."
    },
    {
        "title": "chartSymbolScale(domain:mapping:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartsymbolscale(domain:mapping:)",
        "html": "Parameters\ndomain\n\nThe possible data values plotted as symbol in the chart.\n\nmapping\n\nMaps data categories to symbol shapes.\n\nSee Also\nSymbol scales\nfunc chartSymbolScale<DataValue, S>(KeyValuePairs<DataValue, S>) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale<DataValue>(KeyValuePairs<DataValue, ChartSymbolShape>) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale<Domain>(domain: Domain) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Domain, Range>(domain: Domain, range: Range) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Domain>(domain: Domain, range: [ChartSymbolShape]) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<DataValue, S>(mapping: (DataValue) -> S) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale(range: [ChartSymbolShape]) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Range>(range: Range) -> some View\nConfigures the symbol style scale for charts."
    },
    {
        "title": "chartSymbolScale(mapping:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartsymbolscale(mapping:)",
        "html": "Parameters\nmapping\n\nMaps data categories to symbol shapes.\n\nSee Also\nSymbol scales\nfunc chartSymbolScale<DataValue, S>(KeyValuePairs<DataValue, S>) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale<DataValue>(KeyValuePairs<DataValue, ChartSymbolShape>) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale<Domain>(domain: Domain) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Domain, Range>(domain: Domain, range: Range) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Domain>(domain: Domain, range: [ChartSymbolShape]) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Domain, S>(domain: Domain, mapping: (Domain.Element) -> S) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale(range: [ChartSymbolShape]) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Range>(range: Range) -> some View\nConfigures the symbol style scale for charts."
    },
    {
        "title": "chartSymbolScale(range:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartsymbolscale(range:)-2uf65",
        "html": "Parameters\nrange\n\nThe range of symbols that correspond to the scale domain.\n\nSee Also\nSymbol scales\nfunc chartSymbolScale<DataValue, S>(KeyValuePairs<DataValue, S>) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale<DataValue>(KeyValuePairs<DataValue, ChartSymbolShape>) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale<Domain>(domain: Domain) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Domain, Range>(domain: Domain, range: Range) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Domain>(domain: Domain, range: [ChartSymbolShape]) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Domain, S>(domain: Domain, mapping: (Domain.Element) -> S) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale<DataValue, S>(mapping: (DataValue) -> S) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale<Range>(range: Range) -> some View\nConfigures the symbol style scale for charts."
    },
    {
        "title": "chartSymbolScale(domain:range:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartsymbolscale(domain:range:)-8nmd6",
        "html": "Parameters\ndomain\n\nThe possible data values plotted as symbols in the chart. You can define the domain with an array for categorical values (e.g., [\"A\", \"B\", \"C\"])\n\nrange\n\nThe range of symbols that correspond to the scale domain.\n\nSee Also\nSymbol scales\nfunc chartSymbolScale<DataValue, S>(KeyValuePairs<DataValue, S>) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale<DataValue>(KeyValuePairs<DataValue, ChartSymbolShape>) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale<Domain>(domain: Domain) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Domain, Range>(domain: Domain, range: Range) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Domain, S>(domain: Domain, mapping: (Domain.Element) -> S) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale<DataValue, S>(mapping: (DataValue) -> S) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale(range: [ChartSymbolShape]) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Range>(range: Range) -> some View\nConfigures the symbol style scale for charts."
    },
    {
        "title": "chartSymbolScale(domain:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartsymbolscale(domain:)",
        "html": "Parameters\ndomain\n\nThe possible data values plotted as symbols in the chart. You can define the domain with an array for categorical values (e.g., [\"A\", \"B\", \"C\"])\n\nSee Also\nSymbol scales\nfunc chartSymbolScale<DataValue, S>(KeyValuePairs<DataValue, S>) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale<DataValue>(KeyValuePairs<DataValue, ChartSymbolShape>) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale<Domain, Range>(domain: Domain, range: Range) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Domain>(domain: Domain, range: [ChartSymbolShape]) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Domain, S>(domain: Domain, mapping: (Domain.Element) -> S) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale<DataValue, S>(mapping: (DataValue) -> S) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale(range: [ChartSymbolShape]) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Range>(range: Range) -> some View\nConfigures the symbol style scale for charts."
    },
    {
        "title": "chartSymbolScale(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartsymbolscale(_:)-4u461",
        "html": "Parameters\nmapping\n\nMaps data categories to symbol shapes.\n\nSee Also\nSymbol scales\nfunc chartSymbolScale<DataValue>(KeyValuePairs<DataValue, ChartSymbolShape>) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale<Domain>(domain: Domain) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Domain, Range>(domain: Domain, range: Range) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Domain>(domain: Domain, range: [ChartSymbolShape]) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Domain, S>(domain: Domain, mapping: (Domain.Element) -> S) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale<DataValue, S>(mapping: (DataValue) -> S) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale(range: [ChartSymbolShape]) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Range>(range: Range) -> some View\nConfigures the symbol style scale for charts."
    },
    {
        "title": "chartSymbolScale(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartsymbolscale(_:)-58llj",
        "html": "Parameters\nmapping\n\nMaps data categories to symbol shapes.\n\nSee Also\nSymbol scales\nfunc chartSymbolScale<DataValue, S>(KeyValuePairs<DataValue, S>) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale<Domain>(domain: Domain) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Domain, Range>(domain: Domain, range: Range) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Domain>(domain: Domain, range: [ChartSymbolShape]) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Domain, S>(domain: Domain, mapping: (Domain.Element) -> S) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale<DataValue, S>(mapping: (DataValue) -> S) -> some View\nConfigures the symbol scale for charts.\nfunc chartSymbolScale(range: [ChartSymbolShape]) -> some View\nConfigures the symbol style scale for charts.\nfunc chartSymbolScale<Range>(range: Range) -> some View\nConfigures the symbol style scale for charts."
    },
    {
        "title": "chartForegroundStyleScale(domain:mapping:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartforegroundstylescale(domain:mapping:)",
        "html": "Parameters\ndomain\n\nThe possible data values plotted as foreground style in the chart.\n\nmapping\n\nMaps data categories to foreground styles.\n\nSee Also\nStyles\nfunc chartBackground<V>(alignment: Alignment, content: (ChartProxy) -> V) -> some View\nAdds a background to a view that contains a chart.\nfunc chartForegroundStyleScale<DataValue, S>(KeyValuePairs<DataValue, S>) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Domain>(domain: Domain, type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<DataValue, S>(mapping: (DataValue) -> S) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Range>(range: Range, type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale(type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartPlotStyle<Content>(content: (ChartPlotContent) -> Content) -> some View\nConfigures the plot area of charts."
    },
    {
        "title": "chartYScale(domain:type:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartyscale(domain:type:)",
        "html": "Parameters\ndomain\n\nThe possible data values along the y axis in the chart. You can define the domain with a ClosedRange for number or Date values (e.g., 0 ... 500), and with an array for categorical values (e.g., [\"A\", \"B\", \"C\"])\n\ntype\n\nThe scale type.\n\nSee Also\nAxis scales\nfunc chartXScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View\nConfigures the x scale for charts.\nfunc chartXScale<Domain>(domain: Domain, type: ScaleType?) -> some View\nConfigures the x scale for charts.\nfunc chartXScale<Range>(range: Range, type: ScaleType?) -> some View\nConfigures the x scale for charts.\nfunc chartXScale(type: ScaleType?) -> some View\nConfigures the x scale for charts.\nfunc chartYScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View\nConfigures the y scale for charts.\nfunc chartYScale<Range>(range: Range, type: ScaleType?) -> some View\nConfigures the y scale for charts.\nfunc chartYScale(type: ScaleType?) -> some View\nConfigures the y scale for charts."
    },
    {
        "title": "focusable(_:onFocusChange:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/focusable(_:onfocuschange:)",
        "html": "Deprecated\n\nUse the focusable(_:) method instead.\n\nParameters\nisFocusable\n\nA Boolean value that indicates whether this view is focusable.\n\nonFocusChange\n\nA closure that\u2019s called whenever this view either gains or loses focus. The Boolean parameter to onFocusChange is true when the view is in focus; otherwise, it\u2019s false.\n\nReturn Value\n\nA view that sets whether a view is focusable, and triggers onFocusChange when the view gains or loses focus.\n\nSee Also\nInput and events modifiers\nfunc onChange<V>(of: V, perform: (V) -> Void) -> some View\nAdds an action to perform when the given value changes.\nDeprecated\nfunc onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View\nAdds an action to perform when this view recognizes a tap gesture, and provides the action with the location of the interaction.\nDeprecated\nfunc onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View\nAdds an action to perform when this view recognizes a long press gesture.\nDeprecated\nfunc onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View\nAdds an action to perform when this view recognizes a long press gesture.\nDeprecated\nfunc onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View\nAdds an action to perform in response to the system\u2019s Paste command.\nDeprecated\nfunc onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View\nAdds an action to perform in response to the system\u2019s Paste command with items that you validate.\nDeprecated\nfunc onDrop(of: [String], delegate: DropDelegate) -> some View\nDefines the destination for a drag and drop operation with the same size and position as this view, with behavior controlled by the given delegate.\nDeprecated\nfunc onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View\nDefines the destination for a drag and drop operation, using the same size and position as this view, handling dropped content with the given closure.\nDeprecated\nfunc onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View\nDefines the destination for a drag and drop operation with the same size and position as this view, handling dropped content and the drop location with the given closure.\nDeprecated\nfunc onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View\nAdds an action to perform when the pointer enters, moves within, and exits the view\u2019s bounds.\nDeprecated"
    },
    {
        "title": "onPasteCommand(of:validator:perform:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/onpastecommand(of:validator:perform:)-964k1",
        "html": "Deprecated\n\nUse onPasteCommand(of:validator:perform:) instead.\n\nParameters\nsupportedTypes\n\nThe uniform type identifiers that describe the types of content this view can accept through a paste action. If the Clipboard doesn\u2019t contain any of the supported types, the Paste command doesn\u2019t trigger.\n\nvalidator\n\nA handler that validates the command. This handler receives items from the Clipboard with the types you specify in the supportedTypes parameter. Use this handler to decide whether the items are valid and preprocess them for the action closure. If you return nil instead, the Paste command doesn\u2019t trigger.\n\npayloadAction\n\nThe action to perform when the Paste command triggers.\n\nReturn Value\n\nA view that triggers action when the system Paste command is invoked, validating the Paste command with validator.\n\nDiscussion\n\nPass an array of uniform type identifiers to the supportedTypes parameter. Place the higher priority types closer to the beginning of the array. The Clipboard items that the validator closure receives have the most preferred type out of all the types the source supports.\n\nFor example, if your app can handle plain text and rich text, but you prefer rich text, place the rich text type first in the array. If rich text is available when the paste action occurs, the validator closure passes that rich text along.\n\nSee Also\nInput and events modifiers\nfunc onChange<V>(of: V, perform: (V) -> Void) -> some View\nAdds an action to perform when the given value changes.\nDeprecated\nfunc onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View\nAdds an action to perform when this view recognizes a tap gesture, and provides the action with the location of the interaction.\nDeprecated\nfunc onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View\nAdds an action to perform when this view recognizes a long press gesture.\nDeprecated\nfunc onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View\nAdds an action to perform when this view recognizes a long press gesture.\nDeprecated\nfunc onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View\nAdds an action to perform in response to the system\u2019s Paste command.\nDeprecated\nfunc onDrop(of: [String], delegate: DropDelegate) -> some View\nDefines the destination for a drag and drop operation with the same size and position as this view, with behavior controlled by the given delegate.\nDeprecated\nfunc onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View\nDefines the destination for a drag and drop operation, using the same size and position as this view, handling dropped content with the given closure.\nDeprecated\nfunc onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View\nDefines the destination for a drag and drop operation with the same size and position as this view, handling dropped content and the drop location with the given closure.\nDeprecated\nfunc focusable(Bool, onFocusChange: (Bool) -> Void) -> some View\nSpecifies if the view is focusable and, if so, adds an action to perform when the view comes into focus.\nDeprecated\nfunc onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View\nAdds an action to perform when the pointer enters, moves within, and exits the view\u2019s bounds.\nDeprecated"
    },
    {
        "title": "onDrop(of:isTargeted:perform:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/ondrop(of:istargeted:perform:)-yro6",
        "html": "Deprecated\n\nUse onDrop(of:isTargeted:perform:) instead.\n\nParameters\nsupportedTypes\n\nThe uniform type identifiers that describe the types of content this view can accept through drag and drop. If the drag and drop operation doesn\u2019t contain any of the supported types, then this drop destination doesn\u2019t activate and isTargeted doesn\u2019t update.\n\nisTargeted\n\nA binding that updates when a drag and drop operation enters or exits the drop target area. The binding\u2019s value is true when the cursor is inside the area, and false when the cursor is outside.\n\naction\n\nA closure that takes the dropped content and responds appropriately. The parameter to action contains the dropped items, with types specified by supportedTypes. Return true if the drop operation was successful; otherwise, return false.\n\nReturn Value\n\nA view that provides a drop destination for a drag operation of the specified types.\n\nSee Also\nInput and events modifiers\nfunc onChange<V>(of: V, perform: (V) -> Void) -> some View\nAdds an action to perform when the given value changes.\nDeprecated\nfunc onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View\nAdds an action to perform when this view recognizes a tap gesture, and provides the action with the location of the interaction.\nDeprecated\nfunc onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View\nAdds an action to perform when this view recognizes a long press gesture.\nDeprecated\nfunc onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View\nAdds an action to perform when this view recognizes a long press gesture.\nDeprecated\nfunc onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View\nAdds an action to perform in response to the system\u2019s Paste command.\nDeprecated\nfunc onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View\nAdds an action to perform in response to the system\u2019s Paste command with items that you validate.\nDeprecated\nfunc onDrop(of: [String], delegate: DropDelegate) -> some View\nDefines the destination for a drag and drop operation with the same size and position as this view, with behavior controlled by the given delegate.\nDeprecated\nfunc onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View\nDefines the destination for a drag and drop operation with the same size and position as this view, handling dropped content and the drop location with the given closure.\nDeprecated\nfunc focusable(Bool, onFocusChange: (Bool) -> Void) -> some View\nSpecifies if the view is focusable and, if so, adds an action to perform when the view comes into focus.\nDeprecated\nfunc onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View\nAdds an action to perform when the pointer enters, moves within, and exits the view\u2019s bounds.\nDeprecated"
    },
    {
        "title": "chartLegend(position:alignment:spacing:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartlegend(position:alignment:spacing:content:)",
        "html": "Parameters\nposition\n\nConfigures the position of the legend.\n\nalignment\n\nAlignment of the legend within the space available to it. Use nil for default alignment.\n\nspacing\n\nDistance between the legend and the chart. Use nil for the default spacing.\n\ncontent\n\nThe content of the legend.\n\nSee Also\nLegends\nfunc chartLegend(Visibility) -> some View\nConfigures the legend for charts.\nfunc chartLegend(position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nConfigures the legend for charts."
    },
    {
        "title": "chartForegroundStyleScale(type:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartforegroundstylescale(type:)",
        "html": "Parameters\ntype\n\nThe scale type.\n\nSee Also\nStyles\nfunc chartBackground<V>(alignment: Alignment, content: (ChartProxy) -> V) -> some View\nAdds a background to a view that contains a chart.\nfunc chartForegroundStyleScale<DataValue, S>(KeyValuePairs<DataValue, S>) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Domain>(domain: Domain, type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Domain, S>(domain: Domain, mapping: (Domain.Element) -> S) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<DataValue, S>(mapping: (DataValue) -> S) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Range>(range: Range, type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartPlotStyle<Content>(content: (ChartPlotContent) -> Content) -> some View\nConfigures the plot area of charts."
    },
    {
        "title": "chartLegend(position:alignment:spacing:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartlegend(position:alignment:spacing:)",
        "html": "Parameters\nposition\n\nConfigures the position of the legend.\n\nalignment\n\nAlignment of the legend within the space available to it. Use nil for default alignment.\n\nspacing\n\nDistance between the legend and the chart. Use nil for the default spacing.\n\nSee Also\nLegends\nfunc chartLegend(Visibility) -> some View\nConfigures the legend for charts.\nfunc chartLegend<Content>(position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?, content: () -> Content) -> some View\nConfigures the legend for charts."
    },
    {
        "title": "init(stops:center:startRadiusFraction:endRadiusFraction:)",
        "url": "https://developer.apple.com/documentation/swiftui/ellipticalgradient/init(stops:center:startradiusfraction:endradiusfraction:)",
        "html": "Discussion\n\nFor example, an elliptical gradient centered on the top-leading corner of the view, with some extra green area:\n\nEllipticalGradient(\n    stops: [\n        .init(color: .blue, location: 0.0),\n        .init(color: .green, location: 0.9),\n        .init(color: .green, location: 1.0),\n    ],\n    center: .topLeading,\n    startRadiusFraction: 0,\n    endRadiusFraction: 1)\n\n\nstops: The colors and their parametric locations.\n\ncenter: The center of the circle, in [0, 1] coordinates.\n\nstartRadiusFraction: The start radius value, as a fraction between zero and one. Zero maps to the center point, one maps to the diameter of the unit circle.\n\nendRadiusFraction: The end radius value, as a fraction between zero and one. Zero maps to the center point, one maps to the diameter of the unit circle.\n\nSee Also\nCreating an elliptical gradient\ninit(gradient: Gradient, center: UnitPoint, startRadiusFraction: CGFloat, endRadiusFraction: CGFloat)\nCreates an elliptical gradient.\ninit(colors: [Color], center: UnitPoint, startRadiusFraction: CGFloat, endRadiusFraction: CGFloat)\nCreates an elliptical gradient from a collection of colors."
    },
    {
        "title": "chartForegroundStyleScale(domain:range:type:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartforegroundstylescale(domain:range:type:)",
        "html": "Parameters\ndomain\n\nThe possible data values plotted as foreground style in the chart. You can define the domain with a ClosedRange for number or Date values (e.g., 0 ... 500), and with an array for categorical values (e.g., [\"A\", \"B\", \"C\"])\n\nrange\n\nThe range of foreground styles that correspond to the scale domain.\n\ntype\n\nThe scale type.\n\nSee Also\nStyles\nfunc chartBackground<V>(alignment: Alignment, content: (ChartProxy) -> V) -> some View\nAdds a background to a view that contains a chart.\nfunc chartForegroundStyleScale<DataValue, S>(KeyValuePairs<DataValue, S>) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Domain>(domain: Domain, type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Domain, S>(domain: Domain, mapping: (Domain.Element) -> S) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<DataValue, S>(mapping: (DataValue) -> S) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale<Range>(range: Range, type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartForegroundStyleScale(type: ScaleType?) -> some View\nConfigures the foreground style scale for charts.\nfunc chartPlotStyle<Content>(content: (ChartPlotContent) -> Content) -> some View\nConfigures the plot area of charts."
    },
    {
        "title": "init(_:children:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/outlinegroup/init(_:children:content:)-7ss4n",
        "html": "Parameters\ndata\n\nA collection of tree-structured, identified data.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data. A non-nil but empty value denotes an element capable of having children that\u2019s currently childless, such as an empty directory in a file system. On the other hand, if the property at the key path is nil, then the outline group treats data as a leaf in the tree, like a regular file in a file system.\n\ncontent\n\nA view builder that produces a content view based on an element in data.\n\nDiscussion\n\nThis initializer creates an instance that uniquely identifies views across updates based on the identity of the underlying data element.\n\nAll generated disclosure groups begin in the collapsed state.\n\nMake sure that the identifier of a data element only changes if you mean to replace that element with a new element, one with a new identity. If the ID of an element changes, then the content view generated from that element will lose any current state and animations.\n\nSee Also\nCreating an outline group from a binding\ninit<C, E>(Binding<E>, children: WritableKeyPath<E, C?>, content: (Binding<E>) -> Leaf)\nCreates an outline group from a binding to a root data element and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to View, Parent is Leaf, Subgroup is DisclosureGroup<Parent, OutlineSubgroupChildren>, and Data.Element conforms to Identifiable.\ninit<C, E>(Binding<E>, id: KeyPath<E, ID>, children: WritableKeyPath<E, C?>, content: (Binding<E>) -> Leaf)\nCreates an outline group from a binding to a root data element, the key path to its identifier, and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, Parent conforms to View, Parent is Leaf, and Subgroup is DisclosureGroup<Parent, OutlineSubgroupChildren>.\ninit<C, E>(Binding<C>, id: KeyPath<E, ID>, children: WritableKeyPath<E, C?>, content: (Binding<E>) -> Leaf)\nCreates an outline group from a binding to a collection of root data elements, the key path to a data element\u2019s identifier, and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, Parent conforms to View, Parent is Leaf, and Subgroup is DisclosureGroup<Parent, OutlineSubgroupChildren>."
    },
    {
        "title": "init(content:footer:)",
        "url": "https://developer.apple.com/documentation/swiftui/section/init(content:footer:)",
        "html": "Parameters\ncontent\n\nThe section\u2019s content.\n\nfooter\n\nA view to use as the section\u2019s footer.\n\nSee Also\nAdding headers and footers\ninit(content: () -> Content, header: () -> Parent)\nCreates a section with a header and the provided section content.\nAvailable when Parent conforms to View, Content conforms to View, and Footer is EmptyView.\ninit<V, H>(content: () -> Content, header: () -> H)\nCreates a section with a header and the provided section content.\nAvailable when Parent conforms to TableRowContent, Content conforms to TableRowContent, and Footer conforms to TableRowContent.\ninit(content: () -> Content, header: () -> Parent, footer: () -> Footer)\nCreates a section with a header, footer, and the provided section content.\nAvailable when Parent conforms to View, Content conforms to View, and Footer conforms to View."
    },
    {
        "title": "onDrop(of:isTargeted:perform:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/ondrop(of:istargeted:perform:)-7u51",
        "html": "Deprecated\n\nUse onDrop(of:isTargeted:perform:) instead.\n\nParameters\nsupportedTypes\n\nThe uniform type identifiers that describe the types of content this view can accept through drag and drop. If the drag and drop operation doesn\u2019t contain any of the supported types, then this drop destination doesn\u2019t activate and isTargeted doesn\u2019t update.\n\nisTargeted\n\nA binding that updates when a drag and drop operation enters or exits the drop target area. The binding\u2019s value is true when the cursor is inside the area, and false when the cursor is outside.\n\naction\n\nA closure that takes the dropped content and responds appropriately. The first parameter to action contains the dropped items, with types specified by supportedTypes. The second parameter contains the drop location in this view\u2019s coordinate space. Return true if the drop operation was successful; otherwise, return false.\n\nReturn Value\n\nA view that provides a drop destination for a drag operation of the specified types.\n\nSee Also\nInput and events modifiers\nfunc onChange<V>(of: V, perform: (V) -> Void) -> some View\nAdds an action to perform when the given value changes.\nDeprecated\nfunc onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View\nAdds an action to perform when this view recognizes a tap gesture, and provides the action with the location of the interaction.\nDeprecated\nfunc onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View\nAdds an action to perform when this view recognizes a long press gesture.\nDeprecated\nfunc onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View\nAdds an action to perform when this view recognizes a long press gesture.\nDeprecated\nfunc onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View\nAdds an action to perform in response to the system\u2019s Paste command.\nDeprecated\nfunc onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View\nAdds an action to perform in response to the system\u2019s Paste command with items that you validate.\nDeprecated\nfunc onDrop(of: [String], delegate: DropDelegate) -> some View\nDefines the destination for a drag and drop operation with the same size and position as this view, with behavior controlled by the given delegate.\nDeprecated\nfunc onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View\nDefines the destination for a drag and drop operation, using the same size and position as this view, handling dropped content with the given closure.\nDeprecated\nfunc focusable(Bool, onFocusChange: (Bool) -> Void) -> some View\nSpecifies if the view is focusable and, if so, adds an action to perform when the view comes into focus.\nDeprecated\nfunc onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View\nAdds an action to perform when the pointer enters, moves within, and exits the view\u2019s bounds.\nDeprecated"
    },
    {
        "title": "searchable(text:placement:prompt:suggestions:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/searchable(text:placement:prompt:suggestions:)-2rnll",
        "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\nplacement\n\nWhere the search field should attempt to be placed based on the containing view hierarchy.\n\nprompt\n\nA Text view representing the prompt of the search field which provides users with guidance on what to search for.\n\nsuggestions\n\nA view builder that produces content that populates a list of suggestions.\n\nDiscussion\n\nFor more information about using searchable modifiers, see Adding a search interface to your app.\n\nSee Also\nSearch modifiers\nfunc searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View\nMarks this view as searchable, which configures the display of a search field.\nfunc searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View\nMarks this view as searchable, which configures the display of a search field."
    },
    {
        "title": "widgetURL(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/widgeturl(_:)",
        "html": "Parameters\nurl\n\nThe URL to open in the containing app.\n\nReturn Value\n\nA view that opens the specified URL when the user clicks the widget.\n\nOverview\n\nWidgets support one widgetURL modifier in their view hierarchy. If multiple views have widgetURL modifiers, the behavior is undefined.\n\nSee Also\nURLs\nfunc onOpenURL(perform: (URL) -> ()) -> some View\nRegisters a handler to invoke when the view receives a url for the scene or window the view is in."
    },
    {
        "title": "init(_:id:children:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/outlinegroup/init(_:id:children:content:)-6zxzu",
        "html": "Parameters\ndata\n\nA collection of tree-structured, identified data.\n\nid\n\nThe key path to a data element\u2019s identifier.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data. A non-nil but empty value denotes an element capable of having children that\u2019s currently childless, such as an empty directory in a file system. On the other hand, if the property at the key path is nil, then the outline group treats data as a leaf in the tree, like a regular file in a file system.\n\ncontent\n\nA view builder that produces a content view based on an element in data.\n\nDiscussion\n\nThis initializer creates an instance that uniquely identifies views across updates based on the identity of the underlying data element.\n\nAll generated disclosure groups begin in the collapsed state.\n\nMake sure that the identifier of a data element only changes if you mean to replace that element with a new element, one with a new identity. If the ID of an element changes, then the content view generated from that element will lose any current state and animations.\n\nSee Also\nCreating an outline group\ninit<DataElement>(DataElement, children: KeyPath<DataElement, Data?>, content: (DataElement) -> Leaf)\nCreates an outline group from a root data element and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to View, Parent is Leaf, Subgroup is DisclosureGroup<Parent, OutlineSubgroupChildren>, and Data.Element conforms to Identifiable.\ninit<DataElement>(Data, children: KeyPath<DataElement, Data?>, content: (DataElement) -> Leaf)\nCreates an outline group from a collection of root data elements and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to View, Parent is Leaf, Subgroup is DisclosureGroup<Parent, OutlineSubgroupChildren>, and Data.Element conforms to Identifiable.\ninit<DataElement>(DataElement, id: KeyPath<DataElement, ID>, children: KeyPath<DataElement, Data?>, content: (DataElement) -> Leaf)\nCreates an outline group from a root data element, the key path to its identifier, and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, Parent conforms to View, Parent is Leaf, and Subgroup is DisclosureGroup<Parent, OutlineSubgroupChildren>."
    },
    {
        "title": "init(_:id:children:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/outlinegroup/init(_:id:children:content:)-2ujiu",
        "html": "Parameters\nroot\n\nThe root of a collection of tree-structured, identified data.\n\nid\n\nThe key path to a data element\u2019s identifier.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of a data element. A non-nil but empty value denotes an element capable of having children that\u2019s currently childless, such as an empty directory in a file system. On the other hand, if the property at the key path is nil, then the outline group treats the data element as a leaf in the tree, like a regular file in a file system.\n\ncontent\n\nA view builder that produces a content view based on a data element.\n\nDiscussion\n\nThis initializer creates an instance that uniquely identifies views across updates based on the identity of the underlying data element.\n\nAll generated disclosure groups begin in the collapsed state.\n\nMake sure that the identifier of a data element only changes if you mean to replace that element with a new element, one with a new identity. If the ID of an element changes, then the content view generated from that element will lose any current state and animations.\n\nSee Also\nCreating an outline group\ninit<DataElement>(DataElement, children: KeyPath<DataElement, Data?>, content: (DataElement) -> Leaf)\nCreates an outline group from a root data element and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to View, Parent is Leaf, Subgroup is DisclosureGroup<Parent, OutlineSubgroupChildren>, and Data.Element conforms to Identifiable.\ninit<DataElement>(Data, children: KeyPath<DataElement, Data?>, content: (DataElement) -> Leaf)\nCreates an outline group from a collection of root data elements and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to View, Parent is Leaf, Subgroup is DisclosureGroup<Parent, OutlineSubgroupChildren>, and Data.Element conforms to Identifiable.\ninit<DataElement>(Data, id: KeyPath<DataElement, ID>, children: KeyPath<DataElement, Data?>, content: (DataElement) -> Leaf)\nCreates an outline group from a collection of root data elements, the key path to a data element\u2019s identifier, and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, Parent conforms to View, Parent is Leaf, and Subgroup is DisclosureGroup<Parent, OutlineSubgroupChildren>."
    },
    {
        "title": "init(colors:center:startRadiusFraction:endRadiusFraction:)",
        "url": "https://developer.apple.com/documentation/swiftui/ellipticalgradient/init(colors:center:startradiusfraction:endradiusfraction:)",
        "html": "Discussion\n\nFor example, an elliptical gradient centered on the top-leading corner of the view:\n\nEllipticalGradient(\n    colors: [.blue, .green],\n    center: .topLeading,\n    startRadiusFraction: 0,\n    endRadiusFraction: 1)\n\n\ncolors: The colors, evenly distributed throughout the gradient.\n\ncenter: The center of the circle, in [0, 1] coordinates.\n\nstartRadiusFraction: The start radius value, as a fraction between zero and one. Zero maps to the center point, one maps to the diameter of the unit circle.\n\nendRadiusFraction: The end radius value, as a fraction between zero and one. Zero maps to the center point, one maps to the diameter of the unit circle.\n\nSee Also\nCreating an elliptical gradient\ninit(gradient: Gradient, center: UnitPoint, startRadiusFraction: CGFloat, endRadiusFraction: CGFloat)\nCreates an elliptical gradient.\ninit(stops: [Gradient.Stop], center: UnitPoint, startRadiusFraction: CGFloat, endRadiusFraction: CGFloat)\nCreates an elliptical gradient from a collection of color stops."
    },
    {
        "title": "searchable(text:placement:prompt:suggestions:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/searchable(text:placement:prompt:suggestions:)-3w0tx",
        "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\nplacement\n\nWhere the search field should attempt to be placed based on the containing view hierarchy.\n\nprompt\n\nA key for the localized prompt of the search field which provides users with guidance on what to search for.\n\nsuggestions\n\nA view builder that produces content that populates a list of suggestions.\n\nDiscussion\n\nFor more information about using searchable modifiers, see Adding a search interface to your app.\n\nSee Also\nSearch modifiers\nfunc searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View\nMarks this view as searchable, which configures the display of a search field.\nfunc searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View\nMarks this view as searchable, which configures the display of a search field."
    },
    {
        "title": "init(gradient:center:startRadiusFraction:endRadiusFraction:)",
        "url": "https://developer.apple.com/documentation/swiftui/ellipticalgradient/init(gradient:center:startradiusfraction:endradiusfraction:)",
        "html": "Discussion\n\nFor example, an elliptical gradient centered on the top-leading corner of the view:\n\nEllipticalGradient(\n    gradient: .init(colors: [.blue, .green]),\n    center: .topLeading,\n    startRadiusFraction: 0,\n    endRadiusFraction: 1)\n\n\ngradient: The colors and their parametric locations.\n\ncenter: The center of the circle, in [0, 1] coordinates.\n\nstartRadiusFraction: The start radius value, as a fraction between zero and one. Zero maps to the center point, one maps to the diameter of the unit circle.\n\nendRadiusFraction: The end radius value, as a fraction between zero and one. Zero maps to the center point, one maps to the diameter of the unit circle.\n\nSee Also\nCreating an elliptical gradient\ninit(colors: [Color], center: UnitPoint, startRadiusFraction: CGFloat, endRadiusFraction: CGFloat)\nCreates an elliptical gradient from a collection of colors.\ninit(stops: [Gradient.Stop], center: UnitPoint, startRadiusFraction: CGFloat, endRadiusFraction: CGFloat)\nCreates an elliptical gradient from a collection of color stops."
    },
    {
        "title": "highlight",
        "url": "https://developer.apple.com/documentation/swiftui/hovereffect/highlight",
        "html": "Discussion\n\nOn tvOS, it applies a projection effect accompanied with a specular highlight on the view when contained within a focused view. It also incorporates motion effects to produce a parallax effect by adjusting the projection matrix and specular offset.\n\nSee Also\nGetting hover effects\nstatic let automatic: HoverEffect\nAn effect that attempts to determine the effect automatically. This is the default effect.\nstatic let lift: HoverEffect\nAn effect that slides the pointer under the view and disappears as the view scales up and gains a shadow."
    },
    {
        "title": "shortcutsLinkStyle(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/shortcutslinkstyle(_:)",
        "html": "Parameters\nstyle\n\nThe style to set.\n\nReturn Value\n\nA view that uses the specified shortcuts button style on its child views.\n\nSee Also\nApp intents\nfunc siriTipViewStyle(SiriTipViewStyle) -> some View\nSets the given style for SiriTipView within the view hierarchy"
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/hovereffect/automatic",
        "html": "See Also\nGetting hover effects\nstatic let highlight: HoverEffect\nAn effect that morphs the pointer into a platter behind the view and shows a light source indicating position.\nstatic let lift: HoverEffect\nAn effect that slides the pointer under the view and disappears as the view scales up and gains a shadow."
    },
    {
        "title": "init(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/scrollviewreader/init(content:)",
        "html": "Parameters\ncontent\n\nThe reader\u2019s content, containing one or more scroll views. This view builder receives a ScrollViewProxy instance that you use to perform scrolling."
    },
    {
        "title": "accessibility(removeTraits:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/accessibility(removetraits:)",
        "html": "Deprecated\n\nUse accessibilityRemoveTraits(_:) instead.\n\nSee Also\nAccessibility modifiers\nfunc accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds a label to the view that describes its contents.\nDeprecated\nfunc accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds a textual description of the value that the view contains.\nDeprecated\nfunc accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies whether to hide this view from system accessibility features.\nDeprecated\nfunc accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nUses the specified string to identify the view.\nDeprecated\nfunc accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets a selection identifier for this view\u2019s accessibility element.\nDeprecated\nfunc accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nCommunicates to the user what happens after performing the view\u2019s action.\nDeprecated\nfunc accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies the unit point where activations occur in the view.\nDeprecated\nfunc accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies the point where activations occur in the view.\nDeprecated\nfunc accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets alternate input labels with which users identify a view.\nDeprecated\nfunc accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds the given traits to the view.\nDeprecated\nfunc accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets the sort priority order for this view\u2019s accessibility element, relative to other elements at the same level.\nDeprecated"
    },
    {
        "title": "accessibility(sortPriority:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/accessibility(sortpriority:)",
        "html": "Deprecated\n\nUse accessibilitySortPriority(_:) instead.\n\nDiscussion\n\nHigher numbers are sorted first. The default sort priority is zero.\n\nSee Also\nAccessibility modifiers\nfunc accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds a label to the view that describes its contents.\nDeprecated\nfunc accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds a textual description of the value that the view contains.\nDeprecated\nfunc accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies whether to hide this view from system accessibility features.\nDeprecated\nfunc accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nUses the specified string to identify the view.\nDeprecated\nfunc accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets a selection identifier for this view\u2019s accessibility element.\nDeprecated\nfunc accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nCommunicates to the user what happens after performing the view\u2019s action.\nDeprecated\nfunc accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies the unit point where activations occur in the view.\nDeprecated\nfunc accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSpecifies the point where activations occur in the view.\nDeprecated\nfunc accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nSets alternate input labels with which users identify a view.\nDeprecated\nfunc accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nAdds the given traits to the view.\nDeprecated\nfunc accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>\nRemoves the given traits from this view.\nDeprecated"
    },
    {
        "title": "listRowPlatterColor(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/listrowplattercolor(_:)",
        "html": "Deprecated\n\nUse listItemTint(_:) instead.\n\nParameters\ncolor\n\nThe Color to apply to the system cell.\n\nReturn Value\n\nA view with the specified color applied to the system cell.\n\nDiscussion\n\nUse listRowPlatterColor(_:) to set the underlying row background color in a list.\n\nIn the example below, the Flavor enumeration provides content for list items. The SwiftUI List builder iterates over the Flavor enumeration and extracts the raw value of each of its elements using the resulting text to create each list row item. After the list builder finishes, the listRowPlatterColor(_:) modifier sets the underlying row background color to the Color you specify.\n\nstruct ContentView: View {\n    enum Flavor: String, CaseIterable, Identifiable {\n        var id: String { self.rawValue }\n        case vanilla, chocolate, strawberry\n    }\n\n\n    var body: some View {\n        List {\n            ForEach(Flavor.allCases) {\n                Text($0.rawValue)\n                    .listRowPlatterColor(.green)\n            }\n        }\n    }\n}\n\nSee Also\nAppearance modifiers\nfunc colorScheme(ColorScheme) -> some View\nSets this view\u2019s color scheme.\nDeprecated\nfunc background<Background>(Background, alignment: Alignment) -> some View\nLayers the given view behind this view.\nDeprecated\nfunc overlay<Overlay>(Overlay, alignment: Alignment) -> some View\nLayers a secondary view in front of this view.\nDeprecated\nfunc foregroundColor(Color?) -> some View\nSets the color of the foreground elements displayed by this view.\nDeprecated"
    },
    {
        "title": "autocapitalization(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/autocapitalization(_:)",
        "html": "Deprecated\n\nUse textInputAutocapitalization(_:) instead.\n\nParameters\nstyle\n\nOne of the autocapitalization modes defined in the UITextAutocapitalizationType enumeration.\n\nDiscussion\n\nUse this method when you need to automatically capitalize words, sentences, or other text like proper nouns.\n\nIn example below, as the user enters text each word is automatically capitalized:\n\nTextField(\"Last, First\", text: $fullName)\n    .autocapitalization(UITextAutocapitalizationType.words)\n\n\nThe UITextAutocapitalizationType enumeration defines the available capitalization modes. The default is UITextAutocapitalizationType.sentences.\n\nSee Also\nText modifiers\nfunc disableAutocorrection(Bool?) -> some View\nSets whether to disable autocorrection for this view.\nDeprecated"
    },
    {
        "title": "disableAutocorrection(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/disableautocorrection(_:)",
        "html": "Deprecated\n\nUse autocorrectionDisabled(_:) instead.\n\nParameters\nenabled\n\nA Boolean value that indicates whether autocorrection is disabled for this view.\n\nDiscussion\n\nUse this method when the effect of autocorrection would make it more difficult for the user to input information. The entry of proper names and street addresses are examples where autocorrection can negatively affect the user\u2019s ability complete a data entry task.\n\nIn the example below configures a TextField with the default keyboard. Disabling autocorrection allows the user to enter arbitrary text without the autocorrection system offering suggestions or attempting to override their input.\n\nTextField(\"1234 Main St.\", text: $address)\n    .keyboardType(.default)\n    .disableAutocorrection(true)\n\nSee Also\nText modifiers\nfunc autocapitalization(UITextAutocapitalizationType) -> some View\nSets whether to apply auto-capitalization to this view.\nDeprecated"
    },
    {
        "title": "navigationBarTitle(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/navigationbartitle(_:)-6p1k7",
        "html": "Deprecated\n\nUse navigationTitle(_:) instead.\n\nParameters\ntitle\n\nA description of this view to display in the navigation bar.\n\nDiscussion\n\nUse navigationBarTitle(_:) to set the title of the navigation bar. This modifier only takes effect when this view is inside of and visible within a NavigationView.\n\nThe example below shows setting the title of the navigation bar using a Text view:\n\nstruct FlavorView: View {\n    let items = [\"Chocolate\", \"Vanilla\", \"Strawberry\", \"Mint Chip\",\n                 \"Pistachio\"]\n    var body: some View {\n        NavigationView {\n            List(items, id: \\.self) {\n                Text($0)\n            }\n            .navigationBarTitle(Text(\"Today's Flavors\"))\n        }\n    }\n}\n\n\nSee Also\nAuxiliary view modifiers\nfunc navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle(LocalizedStringKey) -> some View\nSets the title of this view\u2019s navigation bar with a localized string.\nDeprecated\nfunc navigationBarTitle<S>(S) -> some View\nSets the title of this view\u2019s navigation bar with a string.\nDeprecated\nfunc navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarItems<L>(leading: L) -> some View\nSets the navigation bar items for this view.\nDeprecated\nfunc navigationBarItems<L, T>(leading: L, trailing: T) -> some View\nSets the navigation bar items for this view.\nDeprecated\nfunc navigationBarItems<T>(trailing: T) -> some View\nConfigures the navigation bar items for this view.\nDeprecated\nfunc navigationBarHidden(Bool) -> some View\nHides the navigation bar for this view.\nDeprecated\nfunc statusBar(hidden: Bool) -> some View\nSets the visibility of the status bar.\nDeprecated\nfunc contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View\nAdds a context menu to the view.\nDeprecated"
    },
    {
        "title": "chartXAxisStyle(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartxaxisstyle(content:)",
        "html": "Parameters\ncontent\n\nA closure that returns the content of the axis.\n\nDiscussion\n\nUse this modifier to configure the size or aspect ratio of the plot area of charts.\n\nFor example:\n\nChart(data: data) {\n    BarMark(x: .value(\"Category\", $0.category))\n}\n.chartXAxisStyle { axis in\n    axis.opacity(0.5)\n}\n\nSee Also\nAxes\nfunc chartXAxis(Visibility) -> some View\nSets the visibility of the x axis.\nfunc chartXAxis<Content>(content: () -> Content) -> some View\nConfigures the x-axis for charts in the view.\nfunc chartYAxis(Visibility) -> some View\nSets the visibility of the y axis.\nfunc chartYAxis<Content>(content: () -> Content) -> some View\nConfigures the y-axis for charts in the view.\nfunc chartYAxisStyle<Content>(content: (ChartAxisContent) -> Content) -> some View\nConfigures the y axis content of charts."
    },
    {
        "title": "chartYAxisStyle(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartyaxisstyle(content:)",
        "html": "Parameters\ncontent\n\nA closure that returns the content of the axis.\n\nDiscussion\n\nUse this modifier to configure the size or aspect ratio of the plot area of charts.\n\nFor example:\n\nChart(data: data) {\n    BarMark(x: .value(\"Category\", $0.category))\n}\n.chartYAxisStyle { axis in\n    axis.opacity(0.5)\n}\n\nSee Also\nAxes\nfunc chartXAxis(Visibility) -> some View\nSets the visibility of the x axis.\nfunc chartXAxis<Content>(content: () -> Content) -> some View\nConfigures the x-axis for charts in the view.\nfunc chartXAxisStyle<Content>(content: (ChartAxisContent) -> Content) -> some View\nConfigures the x axis content of charts.\nfunc chartYAxis(Visibility) -> some View\nSets the visibility of the y axis.\nfunc chartYAxis<Content>(content: () -> Content) -> some View\nConfigures the y-axis for charts in the view."
    },
    {
        "title": "chartXAxisLabel(_:position:alignment:spacing:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartxaxislabel(_:position:alignment:spacing:)-4r92",
        "html": "Parameters\ntitle\n\nThe label string.\n\nposition\n\nThe position of the label.\n\nalignment\n\nThe alignment of the label.\n\nspacing\n\nThe spacing of the label from the axis markers.\n\nSee Also\nAxis Labels\nfunc chartXAxisLabel(LocalizedStringKey, position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nAdds x axis label for charts in the view.\nfunc chartXAxisLabel<C>(position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?, content: () -> C) -> some View\nAdds x axis label for charts in the view.\nfunc chartYAxisLabel<S>(S, position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nAdds y axis label for charts in the view.\nfunc chartYAxisLabel(LocalizedStringKey, position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nAdds y axis label for charts in the view.\nfunc chartYAxisLabel<C>(position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?, content: () -> C) -> some View\nAdds y axis label for charts in the view."
    },
    {
        "title": "chartYAxis(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartyaxis(content:)",
        "html": "Parameters\ncontent\n\nThe axis content.\n\nDiscussion\n\nUse this modifier to customize the y-axis of a chart. Provide an AxisMarks builder that composes AxisGridLine, AxisTick, and AxisValueLabel structures to form the axis. Omit components from the builder to omit them from the resulting axis. For example, the following code adds grid lines to the y-axis:\n\n.chartYAxis {\n    AxisMarks {\n        AxisGridLine()\n    }\n}\n\n\nUse arguments such as position: or values: to control the placement of the axis values it displays.\n\nChart(BatteryData.data, id: \\.date) {\n     BarMark(\n         x: .value(\"Time\", $0.date ..< $0.date.advanced(by: 1800)),\n         y: .value(\"Battery Level\", $0.level)\n     )\n     .foregroundStyle(.green)\n }\n .chartYAxis {\n     AxisMarks(values: [0, 25, 50, 75, 100]) {\n         AxisGridLine()\n     }\n\n\n     AxisMarks(values: [0, 50, 100]) {\n         AxisValueLabel(format: Decimal.FormatStyle.Percent.percent.scale(1))\n     }\n }\n .chartXAxis {\n     AxisMarks(values: .stride(by: .hour, count: 3)) { value in\n         if let date = value.as(Date.self) {\n             let hour = Calendar.current.component(.hour, from: date)\n             switch hour {\n             case 0, 12:\n                 AxisValueLabel {\n                     VStack {\n                         Text(date, format: .dateTime.hour())\n                         if value.index == 0 {\n                             Text(date, format: .dateTime.month().day())\n                         }\n                     }\n                 }\n             default:\n                 AxisValueLabel(format: .dateTime.hour(.defaultDigits(amPM: .omitted)))\n             }\n\n\n             if hour == 0 {\n                 AxisGridLine(stroke: StrokeStyle(lineWidth: 0.5))\n                 AxisTick(stroke: StrokeStyle(lineWidth: 0.5))\n             } else {\n                 AxisGridLine()\n                 AxisTick()\n             }\n         }\n     }\n }\n\n\nThe above code customizes the y-axis to appear on the leading edge of the chart, with a solid grid line at the 0% and 100% marks.\n\nNote\n\nTo add an axis label, use one of the label modifiers, like chartYAxisLabel(position:alignment:spacing:content:).\n\nSee Also\nAxes\nfunc chartXAxis(Visibility) -> some View\nSets the visibility of the x axis.\nfunc chartXAxis<Content>(content: () -> Content) -> some View\nConfigures the x-axis for charts in the view.\nfunc chartXAxisStyle<Content>(content: (ChartAxisContent) -> Content) -> some View\nConfigures the x axis content of charts.\nfunc chartYAxis(Visibility) -> some View\nSets the visibility of the y axis.\nfunc chartYAxisStyle<Content>(content: (ChartAxisContent) -> Content) -> some View\nConfigures the y axis content of charts."
    },
    {
        "title": "chartYAxis(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartyaxis(_:)",
        "html": "See Also\nAxes\nfunc chartXAxis(Visibility) -> some View\nSets the visibility of the x axis.\nfunc chartXAxis<Content>(content: () -> Content) -> some View\nConfigures the x-axis for charts in the view.\nfunc chartXAxisStyle<Content>(content: (ChartAxisContent) -> Content) -> some View\nConfigures the x axis content of charts.\nfunc chartYAxis<Content>(content: () -> Content) -> some View\nConfigures the y-axis for charts in the view.\nfunc chartYAxisStyle<Content>(content: (ChartAxisContent) -> Content) -> some View\nConfigures the y axis content of charts."
    },
    {
        "title": "chartXAxisLabel(_:position:alignment:spacing:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartxaxislabel(_:position:alignment:spacing:)-4wvwq",
        "html": "Parameters\nlabelKey\n\nThe key for the localized label string.\n\nposition\n\nThe position of the label.\n\nalignment\n\nThe alignment of the label.\n\nspacing\n\nThe spacing of the label from the axis markers.\n\nSee Also\nAxis Labels\nfunc chartXAxisLabel<S>(S, position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nAdds x axis label for charts in the view.\nfunc chartXAxisLabel<C>(position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?, content: () -> C) -> some View\nAdds x axis label for charts in the view.\nfunc chartYAxisLabel<S>(S, position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nAdds y axis label for charts in the view.\nfunc chartYAxisLabel(LocalizedStringKey, position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nAdds y axis label for charts in the view.\nfunc chartYAxisLabel<C>(position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?, content: () -> C) -> some View\nAdds y axis label for charts in the view."
    },
    {
        "title": "chartYAxisLabel(_:position:alignment:spacing:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartyaxislabel(_:position:alignment:spacing:)-49skl",
        "html": "Parameters\nlabel\n\nThe label string.\n\nposition\n\nThe position of the label.\n\nalignment\n\nThe alignment of the label.\n\nspacing\n\nThe spacing of the label from the axis markers.\n\nSee Also\nAxis Labels\nfunc chartXAxisLabel<S>(S, position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nAdds x axis label for charts in the view.\nfunc chartXAxisLabel(LocalizedStringKey, position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nAdds x axis label for charts in the view.\nfunc chartXAxisLabel<C>(position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?, content: () -> C) -> some View\nAdds x axis label for charts in the view.\nfunc chartYAxisLabel(LocalizedStringKey, position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nAdds y axis label for charts in the view.\nfunc chartYAxisLabel<C>(position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?, content: () -> C) -> some View\nAdds y axis label for charts in the view."
    },
    {
        "title": "navigationBarHidden(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/navigationbarhidden(_:)",
        "html": "Deprecated\n\nUse toolbar(_:for:) with the Visibility.hidden visibility and the navigationBar placement instead.\n\nParameters\nhidden\n\nA Boolean value that indicates whether to hide the navigation bar.\n\nDiscussion\n\nUse this method to hide the navigation bar. This modifier only takes effect when the modified view is inside of and visible within a NavigationView.\n\nSee Also\nAuxiliary view modifiers\nfunc navigationBarTitle(Text) -> some View\nSets the title in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle(LocalizedStringKey) -> some View\nSets the title of this view\u2019s navigation bar with a localized string.\nDeprecated\nfunc navigationBarTitle<S>(S) -> some View\nSets the title of this view\u2019s navigation bar with a string.\nDeprecated\nfunc navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarItems<L>(leading: L) -> some View\nSets the navigation bar items for this view.\nDeprecated\nfunc navigationBarItems<L, T>(leading: L, trailing: T) -> some View\nSets the navigation bar items for this view.\nDeprecated\nfunc navigationBarItems<T>(trailing: T) -> some View\nConfigures the navigation bar items for this view.\nDeprecated\nfunc statusBar(hidden: Bool) -> some View\nSets the visibility of the status bar.\nDeprecated\nfunc contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View\nAdds a context menu to the view.\nDeprecated"
    },
    {
        "title": "chartXAxisLabel(position:alignment:spacing:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartxaxislabel(position:alignment:spacing:content:)",
        "html": "Parameters\nposition\n\nThe position of the label.\n\nalignment\n\nThe alignment of the label.\n\nspacing\n\nThe spacing of the label from the axis markers.\n\ncontent\n\nThe label content.\n\nSee Also\nAxis Labels\nfunc chartXAxisLabel<S>(S, position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nAdds x axis label for charts in the view.\nfunc chartXAxisLabel(LocalizedStringKey, position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nAdds x axis label for charts in the view.\nfunc chartYAxisLabel<S>(S, position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nAdds y axis label for charts in the view.\nfunc chartYAxisLabel(LocalizedStringKey, position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nAdds y axis label for charts in the view.\nfunc chartYAxisLabel<C>(position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?, content: () -> C) -> some View\nAdds y axis label for charts in the view."
    },
    {
        "title": "chartYAxisLabel(_:position:alignment:spacing:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartyaxislabel(_:position:alignment:spacing:)-bbz9",
        "html": "Parameters\nlabelKey\n\nThe key for the localized label string.\n\nposition\n\nThe position of the label.\n\nalignment\n\nThe alignment of the label.\n\nspacing\n\nThe spacing of the label from the axis markers.\n\nSee Also\nAxis Labels\nfunc chartXAxisLabel<S>(S, position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nAdds x axis label for charts in the view.\nfunc chartXAxisLabel(LocalizedStringKey, position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nAdds x axis label for charts in the view.\nfunc chartXAxisLabel<C>(position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?, content: () -> C) -> some View\nAdds x axis label for charts in the view.\nfunc chartYAxisLabel<S>(S, position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View\nAdds y axis label for charts in the view.\nfunc chartYAxisLabel<C>(position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?, content: () -> C) -> some View\nAdds y axis label for charts in the view."
    },
    {
        "title": "accentColor(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/accentcolor(_:)",
        "html": "Deprecated\n\nUse the asset catalog\u2019s accent color or tint(_:) instead.\n\nParameters\naccentColor\n\nThe color to use as an accent color. Set the value to nil to use the inherited accent color.\n\nDiscussion\n\nUse accentColor(_:) when you want to apply a broad theme color to your app\u2019s user interface. Some styles of controls use the accent color as a default tint color.\n\nNote\n\nIn macOS, SwiftUI applies customization of the accent color only if the user chooses Multicolor under General > Accent color in System Preferences.\n\nIn the example below, the outer VStack contains two child views. The first is a button with the default accent color. The second is a VStack that contains a button and a slider, both of which adopt the purple accent color of their containing view. Note that the Text element used as a label alongside the Slider retains its default color.\n\nVStack(spacing: 20) {\n    Button(action: {}) {\n        Text(\"Regular Button\")\n    }\n    VStack {\n        Button(action: {}) {\n            Text(\"Accented Button\")\n        }\n        HStack {\n            Text(\"Accented Slider\")\n            Slider(value: $sliderValue, in: -100...100, step: 0.1)\n        }\n    }\n    .accentColor(.purple)\n}\n\n\nSee Also\nGraphics and rendering modifiers\nfunc mask<Mask>(Mask) -> some View\nMasks this view using the alpha channel of the given view.\nDeprecated\nfunc animation(Animation?) -> some View\nApplies the given animation to all animatable values within this view.\nDeprecated\nfunc cornerRadius(CGFloat, antialiased: Bool) -> some View\nClips this view to its bounding frame, with the specified corner radius.\nDeprecated"
    },
    {
        "title": "chartXAxis(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartxaxis(content:)",
        "html": "Parameters\ncontent\n\nThe axis content.\n\nDiscussion\n\nUse this modifier to customize the x-axis of a chart. Provide an AxisMarks builder that composes AxisGridLine, AxisTick, and AxisValueLabel structures to form the axis. Omit components from the builder to omit them from the resulting axis. For example, the following code adds grid lines to the x-axis:\n\n.chartXAxis {\n    AxisMarks {\n        AxisGridLine()\n    }\n}\n\n\nYou can also compose multiple AxisMarks to create more complex axes:\n\nChart(BatteryData.data, id: \\.date) {\n     BarMark(\n         x: .value(\"Time\", $0.date ..< $0.date.advanced(by: 1800)),\n         y: .value(\"Battery Level\", $0.level)\n     )\n     .foregroundStyle(.green)\n }\n .chartXAxis {\n     AxisMarks(values: .stride(by: .hour, count: 3)) { value in\n         if let date = value.as(Date.self) {\n             let hour = Calendar.current.component(.hour, from: date)\n             switch hour {\n             case 0, 12:\n                 AxisValueLabel {\n                     VStack {\n                         Text(date, format: .dateTime.hour())\n                         if value.index == 0 {\n                             Text(date, format: .dateTime.month().day())\n                         }\n                     }\n                 }\n             default:\n                 AxisValueLabel(format: .dateTime.hour(.defaultDigits(amPM: .omitted)))\n             }\n\n\n             if hour == 0 {\n                 AxisGridLine(stroke: StrokeStyle(lineWidth: 0.5))\n                 AxisTick(stroke: StrokeStyle(lineWidth: 0.5))\n             } else {\n                 AxisGridLine()\n                 AxisTick()\n             }\n         }\n     }\n }\n .chartYAxis {\n     AxisMarks(values: [0, 25, 50, 75, 100]) {\n         AxisGridLine()\n     }\n\n\n     AxisMarks(values: [0, 50, 100]) {\n         AxisValueLabel(format: Decimal.FormatStyle.Percent.percent.scale(1))\n     }\n }\n\n\nThe above example above customizes the x-axis using two AxisMarks declarations. The first creates a grid line for every hour in the day. The second adds a tick and label for every six hours in the day, with a second line showing the date for the very beginning of the axis.\n\nNote\n\nTo add an axis label, use one of the label modifiers, like chartXAxisLabel(position:alignment:spacing:content:).\n\nSee Also\nAxes\nfunc chartXAxis(Visibility) -> some View\nSets the visibility of the x axis.\nfunc chartXAxisStyle<Content>(content: (ChartAxisContent) -> Content) -> some View\nConfigures the x axis content of charts.\nfunc chartYAxis(Visibility) -> some View\nSets the visibility of the y axis.\nfunc chartYAxis<Content>(content: () -> Content) -> some View\nConfigures the y-axis for charts in the view.\nfunc chartYAxisStyle<Content>(content: (ChartAxisContent) -> Content) -> some View\nConfigures the y axis content of charts."
    },
    {
        "title": "chartXAxis(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartxaxis(_:)",
        "html": "See Also\nAxes\nfunc chartXAxis<Content>(content: () -> Content) -> some View\nConfigures the x-axis for charts in the view.\nfunc chartXAxisStyle<Content>(content: (ChartAxisContent) -> Content) -> some View\nConfigures the x axis content of charts.\nfunc chartYAxis(Visibility) -> some View\nSets the visibility of the y axis.\nfunc chartYAxis<Content>(content: () -> Content) -> some View\nConfigures the y-axis for charts in the view.\nfunc chartYAxisStyle<Content>(content: (ChartAxisContent) -> Content) -> some View\nConfigures the y axis content of charts."
    },
    {
        "title": "chartOverlay(alignment:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartoverlay(alignment:content:)",
        "html": "Parameters\nalignment\n\nThe alignment of the content.\n\ncontent\n\nThe content of the overlay.\n\nDiscussion\n\nYou can use this modifier to define an overlay view as a function of the chart in the view. You can access the chart with the ChartProxy object passed into the closure.\n\nBelow is an example where we define an overlay view that handles drag gestures and use the proxy to convert the gesture coordinates to data values in the chart.\n\nChart(data) {\n    LineMark(\n        x: .value(\"date\", $0.date),\n        y: .value(\"price\", $0.price)\n    )\n}\n.chartOverlay { proxy in\n    GeometryReader { geometry in\n        Rectangle().fill(.clear).contentShape(Rectangle())\n            .gesture(\n                DragGesture()\n                    .onChanged { value in\n                        // Convert the gesture location to the coordinate space of the plot area.\n                        let origin = geometry[proxy.plotAreaFrame].origin\n                        let location = CGPoint(\n                            x: value.location.x - origin.x,\n                            y: value.location.y - origin.y\n                        )\n                        // Get the x (date) and y (price) value from the location.\n                        let (date, price) = proxy.value(at: location, as: (Date, Double).self)\n                        print(\"Location: \\(date), \\(price)\")\n                    }\n            )\n    }\n}\n\n\nNote\n\nIf self contains more than one chart, the chart proxy will refer to the first chart."
    },
    {
        "title": "chartYScale(domain:range:type:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartyscale(domain:range:type:)",
        "html": "Parameters\ndomain\n\nThe possible data values along the y axis in the chart. You can define the domain with a ClosedRange for number or Date values (e.g., 0 ... 500), and with an array for categorical values (e.g., [\"A\", \"B\", \"C\"])\n\nrange\n\nThe range of y positions that correspond to the scale domain. By default the range is determined by the dimension of the plot area. You can use range: .plotDimension(startPadding:, endPadding:) to add padding to the scale range.\n\ntype\n\nThe scale type.\n\nSee Also\nAxis scales\nfunc chartXScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View\nConfigures the x scale for charts.\nfunc chartXScale<Domain>(domain: Domain, type: ScaleType?) -> some View\nConfigures the x scale for charts.\nfunc chartXScale<Range>(range: Range, type: ScaleType?) -> some View\nConfigures the x scale for charts.\nfunc chartXScale(type: ScaleType?) -> some View\nConfigures the x scale for charts.\nfunc chartYScale<Domain>(domain: Domain, type: ScaleType?) -> some View\nConfigures the y scale for charts.\nfunc chartYScale<Range>(range: Range, type: ScaleType?) -> some View\nConfigures the y scale for charts.\nfunc chartYScale(type: ScaleType?) -> some View\nConfigures the y scale for charts."
    },
    {
        "title": "chartXScale(domain:type:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartxscale(domain:type:)",
        "html": "Parameters\ndomain\n\nThe possible data values along the x axis in the chart. You can define the domain with a ClosedRange for number or Date values (e.g., 0 ... 500), and with an array for categorical values (e.g., [\"A\", \"B\", \"C\"])\n\ntype\n\nThe scale type.\n\nSee Also\nAxis scales\nfunc chartXScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View\nConfigures the x scale for charts.\nfunc chartXScale<Range>(range: Range, type: ScaleType?) -> some View\nConfigures the x scale for charts.\nfunc chartXScale(type: ScaleType?) -> some View\nConfigures the x scale for charts.\nfunc chartYScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View\nConfigures the y scale for charts.\nfunc chartYScale<Domain>(domain: Domain, type: ScaleType?) -> some View\nConfigures the y scale for charts.\nfunc chartYScale<Range>(range: Range, type: ScaleType?) -> some View\nConfigures the y scale for charts.\nfunc chartYScale(type: ScaleType?) -> some View\nConfigures the y scale for charts."
    },
    {
        "title": "chartXScale(domain:range:type:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartxscale(domain:range:type:)",
        "html": "Parameters\ndomain\n\nThe possible data values along the x axis in the chart. You can define the domain with a ClosedRange for number or Date values (e.g., 0 ... 500), and with an array for categorical values (e.g., [\"A\", \"B\", \"C\"])\n\nrange\n\nThe range of x positions that correspond to the scale domain. By default the range is determined by the dimension of the plot area. You can use range: .plotDimension(startPadding:, endPadding:) to add padding to the scale range.\n\ntype\n\nThe scale type.\n\nSee Also\nAxis scales\nfunc chartXScale<Domain>(domain: Domain, type: ScaleType?) -> some View\nConfigures the x scale for charts.\nfunc chartXScale<Range>(range: Range, type: ScaleType?) -> some View\nConfigures the x scale for charts.\nfunc chartXScale(type: ScaleType?) -> some View\nConfigures the x scale for charts.\nfunc chartYScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View\nConfigures the y scale for charts.\nfunc chartYScale<Domain>(domain: Domain, type: ScaleType?) -> some View\nConfigures the y scale for charts.\nfunc chartYScale<Range>(range: Range, type: ScaleType?) -> some View\nConfigures the y scale for charts.\nfunc chartYScale(type: ScaleType?) -> some View\nConfigures the y scale for charts."
    },
    {
        "title": "chartXScale(range:type:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartxscale(range:type:)",
        "html": "Parameters\nrange\n\nThe range of x positions that correspond to the scale domain. By default the range is determined by the dimension of the plot area. You can use range: .plotDimension(startPadding:, endPadding:) to add padding to the scale range.\n\ntype\n\nThe scale type.\n\nSee Also\nAxis scales\nfunc chartXScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View\nConfigures the x scale for charts.\nfunc chartXScale<Domain>(domain: Domain, type: ScaleType?) -> some View\nConfigures the x scale for charts.\nfunc chartXScale(type: ScaleType?) -> some View\nConfigures the x scale for charts.\nfunc chartYScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View\nConfigures the y scale for charts.\nfunc chartYScale<Domain>(domain: Domain, type: ScaleType?) -> some View\nConfigures the y scale for charts.\nfunc chartYScale<Range>(range: Range, type: ScaleType?) -> some View\nConfigures the y scale for charts.\nfunc chartYScale(type: ScaleType?) -> some View\nConfigures the y scale for charts."
    },
    {
        "title": "chartXScale(type:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/chartxscale(type:)",
        "html": "Parameters\ntype\n\nThe scale type.\n\nSee Also\nAxis scales\nfunc chartXScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View\nConfigures the x scale for charts.\nfunc chartXScale<Domain>(domain: Domain, type: ScaleType?) -> some View\nConfigures the x scale for charts.\nfunc chartXScale<Range>(range: Range, type: ScaleType?) -> some View\nConfigures the x scale for charts.\nfunc chartYScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View\nConfigures the y scale for charts.\nfunc chartYScale<Domain>(domain: Domain, type: ScaleType?) -> some View\nConfigures the y scale for charts.\nfunc chartYScale<Range>(range: Range, type: ScaleType?) -> some View\nConfigures the y scale for charts.\nfunc chartYScale(type: ScaleType?) -> some View\nConfigures the y scale for charts."
    },
    {
        "title": "velocity",
        "url": "https://developer.apple.com/documentation/swiftui/digitalcrownevent/velocity",
        "html": "See Also\nGetting events\nvar offset: Double\nThe offset of the digital crown when this event was sent."
    },
    {
        "title": "TouchBarItemPresence.default(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/touchbaritempresence/default(_:)",
        "html": "Parameters\nid\n\nA globally unique identifier for this item.\n\nSee Also\nGetting presence options\ncase optional(String)\nThe Touch Bar view isn\u2019t visible by default, but appears in the customization palette.\ncase required(String)\nThe Touch Bar view is visible by default and cannot be removed during customization."
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/foreach/init(_:content:)-9nhnm",
        "html": "Parameters\ndata\n\nThe identified data that the ForEach instance uses to create views dynamically.\n\ncontent\n\nThe result builder that generates Rotor content for each data element.\n\nDiscussion\n\nIt\u2019s important that the id of a data element doesn\u2019t change unless you replace the data element with a new data element that has a new identity.\n\nSee Also\nGenerating rotor content\ninit(Data, id: KeyPath<Data.Element, ID>, content: (Data.Element) -> Content)\nCreates an instance that generates Rotor content by combining, in order, individual Rotor content for each element in the data given to this ForEach.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to AccessibilityRotorContent."
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/foreach/init(_:content:)-1wvq8",
        "html": "Parameters\ndata\n\nA constant range.\n\ncontent\n\nThe table row builder that creates rows dynamically.\n\nDiscussion\n\nThe instance only reads the initial value of the provided data and doesn\u2019t need to identify rows across updates. To compute rows on demand over a dynamic range, use ForEach/init(_:id:content:).\n\nSee Also\nCreating a collection of table rows\ninit<V>(Data, content: (Data.Element) -> Content)\nCreates an instance that uniquely identifies and creates table rows across updates based on the identity of the underlying data.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to TableRowContent.\ninit<V>(Data, id: KeyPath<Data.Element, ID>, content: (Data.Element) -> Content)\nCreates an instance that uniquely identifies and creates table rows across updates based on the provided key path to the underlying data\u2019s identifier.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to TableRowContent."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/foreach/init(_:)",
        "html": "Parameters\ndata\n\nThe identified data that the ForEach instance uses to create table rows dynamically.\n\nDiscussion\n\nThe following example creates a Person type that conforms to Identifiable, and an array of this type called people. A ForEach instance iterates over the array, producing new TableRow instances implicitly.\n\nprivate struct Person: Identifiable {\n    var id = UUID()\n    var name: String\n}\n\n\n@State private var people: [Person] = /* ... */\n\n\nTable(of: Person.self) {\n    TableColumn(\"ID\", value: \\.id.uuidString)\n    TableColumn(\"Name\", value: \\.name)\n} rows: {\n    Section(\"Team\") {\n        /* This is equivalent to the line below:\n        ForEach(people) { TableRow($0) }\n        */\n        ForEach(people)\n    }\n}\n\nSee Also\nCreating a collection from data\ninit(Data, content: (Data.Element) -> Content)\nCreates an instance that uniquely identifies and creates views across updates based on the identity of the underlying data.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Content conforms to View, and Data.Element conforms to Identifiable.\ninit<C>(Binding<C>, content: (Binding<C.Element>) -> Content)\nCreates an instance that uniquely identifies and creates views across updates based on the identity of the underlying data.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to View.\ninit(Data, id: KeyPath<Data.Element, ID>, content: (Data.Element) -> Content)\nCreates an instance that uniquely identifies and creates views across updates based on the provided key path to the underlying data\u2019s identifier.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to View.\ninit<C>(Binding<C>, id: KeyPath<C.Element, ID>, content: (Binding<C.Element>) -> Content)\nCreates an instance that uniquely identifies and creates views across updates based on the identity of the underlying data.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to View."
    },
    {
        "title": "init(_:id:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/foreach/init(_:id:content:)-2n8nd",
        "html": "Parameters\ndata\n\nThe identified data that the ForEach instance uses to create views dynamically.\n\nid\n\nThe key path to the provided data\u2019s identifier.\n\ncontent\n\nThe view builder that creates views dynamically.\n\nDiscussion\n\nIt\u2019s important that the id of a data element doesn\u2019t change unless you replace the data element with a new data element that has a new identity. If the id of a data element changes, the content view generated from that data element loses any current state and animations.\n\nSee Also\nCreating a collection from data\ninit(Data, content: (Data.Element) -> Content)\nCreates an instance that uniquely identifies and creates views across updates based on the identity of the underlying data.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Content conforms to View, and Data.Element conforms to Identifiable.\ninit<C>(Binding<C>, content: (Binding<C.Element>) -> Content)\nCreates an instance that uniquely identifies and creates views across updates based on the identity of the underlying data.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to View.\ninit(Data, id: KeyPath<Data.Element, ID>, content: (Data.Element) -> Content)\nCreates an instance that uniquely identifies and creates views across updates based on the provided key path to the underlying data\u2019s identifier.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to View.\ninit(Data)\nCreates an instance that uniquely identifies and creates table rows across updates based on the identity of the underlying data.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to TableRowContent."
    },
    {
        "title": "offset",
        "url": "https://developer.apple.com/documentation/swiftui/digitalcrownevent/offset",
        "html": "See Also\nGetting events\nvar velocity: Double\nThe velocity at which the offset was changing when this event was sent."
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/foreach/init(_:content:)-96gx9",
        "html": "Parameters\ndata\n\nThe identified data that the ForEach instance uses to create views dynamically.\n\ncontent\n\nThe view builder that creates views dynamically.\n\nDiscussion\n\nIt\u2019s important that the id of a data element doesn\u2019t change unless you replace the data element with a new data element that has a new identity. If the id of a data element changes, the content view generated from that data element loses any current state and animations.\n\nSee Also\nCreating a collection from data\ninit(Data, content: (Data.Element) -> Content)\nCreates an instance that uniquely identifies and creates views across updates based on the identity of the underlying data.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Content conforms to View, and Data.Element conforms to Identifiable.\ninit(Data, id: KeyPath<Data.Element, ID>, content: (Data.Element) -> Content)\nCreates an instance that uniquely identifies and creates views across updates based on the provided key path to the underlying data\u2019s identifier.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to View.\ninit<C>(Binding<C>, id: KeyPath<C.Element, ID>, content: (Binding<C.Element>) -> Content)\nCreates an instance that uniquely identifies and creates views across updates based on the identity of the underlying data.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to View.\ninit(Data)\nCreates an instance that uniquely identifies and creates table rows across updates based on the identity of the underlying data.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to TableRowContent."
    },
    {
        "title": "init(_:editActions:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/foreach/init(_:editactions:content:)",
        "html": "Parameters\ndata\n\nThe identified data that the ForEach instance uses to create views dynamically and can be edited by the user.\n\neditActions\n\nThe edit actions that are synthesized on data.\n\ncontent\n\nThe view builder that creates views dynamically.\n\nDiscussion\n\nIt\u2019s important that the id of a data element doesn\u2019t change unless you replace the data element with a new data element that has a new identity. If the id of a data element changes, the content view generated from that data element loses any current state and animations.\n\nWhen placed inside a List the edit actions (like delete or move) can be automatically synthesized by specifying an appropriate EditActions.\n\nThe following example shows a list of recipes whose elements can be deleted and reordered:\n\nList {\n    ForEach($recipes, editActions: [.delete, .move]) { $recipe in\n        RecipeCell($recipe)\n    }\n}\n\n\nUse deleteDisabled(_:) and moveDisabled(_:) to disable respectively delete or move actions on a per-row basis.\n\nThe following example shows a list of recipes whose elements can be deleted only if they satisfy a condition:\n\nList {\n    ForEach($recipes, editActions: .delete) { $recipe in\n        RecipeCell($recipe)\n            .deleteDisabled(recipe.isFromMom)\n    }\n}\n\n\nExplicit DynamicViewContent.onDelete(perform:), DynamicViewContent.onMove(perform:), or View.swipeActions(edge:allowsFullSwipe:content:) modifiers will override any synthesized actions. Use this modifier if you need fine-grain control on how mutations are applied to the data driving the ForEach. For example, if you need to execute side effects or call into your existing model code.\n\nSee Also\nCreating editable content\ninit<C, R>(Binding<C>, id: KeyPath<C.Element, ID>, editActions: EditActions<C>, content: (Binding<C.Element>) -> R)\nCreates an instance that uniquely identifies and creates views across updates based on the identity of the underlying data.\nAvailable when Data conforms to RandomAccessCollection and ID conforms to Hashable."
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/foreach/init(_:content:)-29p59",
        "html": "See Also\nCreating attachment content\ninit(Data, id: KeyPath<Data.Element, ID>, content: (Data.Element) -> Content)\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to AttachmentContent.\nBeta"
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/foreach/init(_:content:)-3ofe8",
        "html": "Parameters\ndata\n\nThe identified data that the ForEach instance uses to create table rows dynamically.\n\ncontent\n\nThe table row builder that creates rows dynamically.\n\nSee Also\nCreating a collection of table rows\ninit<V>(Range<Int>, content: (Int) -> Content)\nCreates an instance that computes table rows on demand over a given constant range.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to TableRowContent.\ninit<V>(Data, id: KeyPath<Data.Element, ID>, content: (Data.Element) -> Content)\nCreates an instance that uniquely identifies and creates table rows across updates based on the provided key path to the underlying data\u2019s identifier.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to TableRowContent."
    },
    {
        "title": "init(_:id:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/foreach/init(_:id:content:)-7inug",
        "html": "Parameters\ndata\n\nThe data that the ForEach instance uses to create table rows dynamically.\n\nid\n\nThe key path to the provided data\u2019s identifier.\n\ncontent\n\nThe table row builder that creates rows dynamically.\n\nSee Also\nCreating a collection of table rows\ninit<V>(Range<Int>, content: (Int) -> Content)\nCreates an instance that computes table rows on demand over a given constant range.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to TableRowContent.\ninit<V>(Data, content: (Data.Element) -> Content)\nCreates an instance that uniquely identifies and creates table rows across updates based on the identity of the underlying data.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to TableRowContent."
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/foreach/init(_:content:)-22eom",
        "html": "See Also\nCreating chart content\ninit(Data, id: KeyPath<Data.Element, ID>, content: (Data.Element) -> Content)\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to ChartContent."
    },
    {
        "title": "content",
        "url": "https://developer.apple.com/documentation/swiftui/foreach/content",
        "html": "See Also\nAccessing content\nvar data: Data\nThe collection of underlying identified data that SwiftUI uses to create views dynamically."
    },
    {
        "title": "AttachmentContent Implementations",
        "url": "https://developer.apple.com/documentation/swiftui/foreach/attachmentcontent-implementations",
        "html": "Topics\nInstance Properties\nvar body: Never\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to AttachmentContent.\nBeta\nType Aliases\ntypealias Body\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to AttachmentContent.\nBeta"
    },
    {
        "title": "TouchBarItemPresence.required(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/touchbaritempresence/required(_:)",
        "html": "Parameters\nid\n\nA globally unique identifier for this item.\n\nSee Also\nGetting presence options\ncase `default`(String)\nThe Touch Bar view is visible by default, but can be removed during customization.\ncase optional(String)\nThe Touch Bar view isn\u2019t visible by default, but appears in the customization palette."
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/foreach/init(_:content:)-6oy5i",
        "html": "Parameters\ndata\n\nThe identified data that the ForEach instance uses to create views dynamically.\n\ncontent\n\nThe view builder that creates views dynamically.\n\nDiscussion\n\nIt\u2019s important that the id of a data element doesn\u2019t change unless you replace the data element with a new data element that has a new identity. If the id of a data element changes, the content view generated from that data element loses any current state and animations.\n\nSee Also\nCreating a collection from data\ninit<C>(Binding<C>, content: (Binding<C.Element>) -> Content)\nCreates an instance that uniquely identifies and creates views across updates based on the identity of the underlying data.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to View.\ninit(Data, id: KeyPath<Data.Element, ID>, content: (Data.Element) -> Content)\nCreates an instance that uniquely identifies and creates views across updates based on the provided key path to the underlying data\u2019s identifier.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to View.\ninit<C>(Binding<C>, id: KeyPath<C.Element, ID>, content: (Binding<C.Element>) -> Content)\nCreates an instance that uniquely identifies and creates views across updates based on the identity of the underlying data.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to View.\ninit(Data)\nCreates an instance that uniquely identifies and creates table rows across updates based on the identity of the underlying data.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to TableRowContent."
    },
    {
        "title": "TouchBarItemPresence.optional(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/touchbaritempresence/optional(_:)",
        "html": "Parameters\nid\n\nA globally unique identifier for this item.\n\nSee Also\nGetting presence options\ncase `default`(String)\nThe Touch Bar view is visible by default, but can be removed during customization.\ncase required(String)\nThe Touch Bar view is visible by default and cannot be removed during customization."
    },
    {
        "title": "HoverPhase.ended",
        "url": "https://developer.apple.com/documentation/swiftui/hoverphase/ended",
        "html": "See Also\nGetting hover phases\ncase active(CGPoint)\nThe pointer\u2019s location moved to the specified point within the view."
    },
    {
        "title": "search",
        "url": "https://developer.apple.com/documentation/swiftui/submittriggers/search",
        "html": "Discussion\n\nIn the example below, only the search field or search completions placed by the searchable modifier will trigger the view model to submit its current search query.\n\n@StateObject private var viewModel = ViewModel()\n\n\nNavigationView {\n    SidebarView()\n    DetailView()\n}\n.searchable(\n    text: $viewModel.searchText,\n    placement: .sidebar\n) {\n    SuggestionsView()\n}\n.onSubmit(of: .search) {\n    viewModel.submitCurrentSearchQuery()\n}\n\nSee Also\nGetting submit triggers\nstatic let text: SubmitTriggers\nDefines triggers originating from text input controls like TextField and SecureField."
    },
    {
        "title": "coordinateSpace(name:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/coordinatespace(name:)",
        "html": "Deprecated\n\nUse coordinateSpace(_:) instead.\n\nParameters\nname\n\nA name used to identify this coordinate space.\n\nDiscussion\n\nUse coordinateSpace(name:) to allow another function to find and operate on a view and operate on dimensions relative to that view.\n\nThe example below demonstrates how a nested view can find and operate on its enclosing view\u2019s coordinate space:\n\nstruct ContentView: View {\n    @State private var location = CGPoint.zero\n\n\n    var body: some View {\n        VStack {\n            Color.red.frame(width: 100, height: 100)\n                .overlay(circle)\n            Text(\"Location: \\(Int(location.x)), \\(Int(location.y))\")\n        }\n        .coordinateSpace(name: \"stack\")\n    }\n\n\n    var circle: some View {\n        Circle()\n            .frame(width: 25, height: 25)\n            .gesture(drag)\n            .padding(5)\n    }\n\n\n    var drag: some Gesture {\n        DragGesture(coordinateSpace: .named(\"stack\"))\n            .onChanged { info in location = info.location }\n    }\n}\n\n\nHere, the VStack in the ContentView named \u201cstack\u201d is composed of a red frame with a custom Circle view overlay(_:alignment:) at its center.\n\nThe circle view has an attached DragGesture that targets the enclosing VStack\u2019s coordinate space. As the gesture recognizer\u2019s closure registers events inside circle it stores them in the shared location state variable and the VStack displays the coordinates in a Text view.\n\nSee Also\nLayout modifiers\nfunc frame() -> some View\nPositions this view within an invisible frame.\nDeprecated\nfunc edgesIgnoringSafeArea(Edge.Set) -> some View\nChanges the view\u2019s proposed area to extend outside the screen\u2019s safe areas.\nDeprecated"
    },
    {
        "title": "navigationBarTitle(_:displayMode:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/navigationbartitle(_:displaymode:)-5071t",
        "html": "Deprecated\n\nUse navigationTitle(_:) with navigationBarTitleDisplayMode(_:).\n\nParameters\ntitle\n\nA title for this view to display in the navigation bar.\n\ndisplayMode\n\nThe way to display the title.\n\nDiscussion\n\nUse navigationBarTitle(_:, displayMode) to set the title of the navigation bar for this view and specify a display mode for the title from one of the NavigationBarItem.Title.DisplayMode styles. This modifier only takes effect when this view is inside of and visible within a NavigationView.\n\nIn the example below, navigationBarTitle(_:, displayMode) uses a string to provide a title for the navigation bar. Setting the title\u2019s displaymode to .inline places the navigation bar title within the bounds of the navigation bar.\n\nIn the example below, text for the navigation bar title is provided using a string. The navigation bar title\u2019s displayMode is set to .inline which places the navigation bar title in the bounds of the navigation bar.\n\nstruct FlavorView: View {\n    let items = [\"Chocolate\", \"Vanilla\", \"Strawberry\", \"Mint Chip\",\n                 \"Pistachio\"]\n    let title = \"Today's Flavors\"\n    var body: some View {\n        NavigationView {\n            List(items, id: \\.self) {\n                Text($0)\n            }\n            .navigationBarTitle(title, displayMode: .inline)\n        }\n    }\n}\n\nSee Also\nAuxiliary view modifiers\nfunc navigationBarTitle(Text) -> some View\nSets the title in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle(LocalizedStringKey) -> some View\nSets the title of this view\u2019s navigation bar with a localized string.\nDeprecated\nfunc navigationBarTitle<S>(S) -> some View\nSets the title of this view\u2019s navigation bar with a string.\nDeprecated\nfunc navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarItems<L>(leading: L) -> some View\nSets the navigation bar items for this view.\nDeprecated\nfunc navigationBarItems<L, T>(leading: L, trailing: T) -> some View\nSets the navigation bar items for this view.\nDeprecated\nfunc navigationBarItems<T>(trailing: T) -> some View\nConfigures the navigation bar items for this view.\nDeprecated\nfunc navigationBarHidden(Bool) -> some View\nHides the navigation bar for this view.\nDeprecated\nfunc statusBar(hidden: Bool) -> some View\nSets the visibility of the status bar.\nDeprecated\nfunc contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View\nAdds a context menu to the view.\nDeprecated"
    },
    {
        "title": "statusBar(hidden:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/statusbar(hidden:)",
        "html": "Deprecated\n\nUse statusBarHidden(_:) instead.\n\nDiscussion\n\nUse this method to show or hide the status bar.\n\nSee Also\nAuxiliary view modifiers\nfunc navigationBarTitle(Text) -> some View\nSets the title in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle(LocalizedStringKey) -> some View\nSets the title of this view\u2019s navigation bar with a localized string.\nDeprecated\nfunc navigationBarTitle<S>(S) -> some View\nSets the title of this view\u2019s navigation bar with a string.\nDeprecated\nfunc navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarItems<L>(leading: L) -> some View\nSets the navigation bar items for this view.\nDeprecated\nfunc navigationBarItems<L, T>(leading: L, trailing: T) -> some View\nSets the navigation bar items for this view.\nDeprecated\nfunc navigationBarItems<T>(trailing: T) -> some View\nConfigures the navigation bar items for this view.\nDeprecated\nfunc navigationBarHidden(Bool) -> some View\nHides the navigation bar for this view.\nDeprecated\nfunc contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View\nAdds a context menu to the view.\nDeprecated"
    },
    {
        "title": "init(_:isExpanded:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/section/init(_:isexpanded:content:)-1ibcv",
        "html": "Parameters\ntitle\n\nA string that describes the contents of the section.\n\nisExpanded\n\nA binding to a Boolean value that determines the section\u2019s expansion state (expanded or collapsed).\n\ncontent\n\nThe section\u2019s content.\n\nSee Also\nControlling collapsibility\ninit<V, S>(S, isExpanded: Binding<Bool>, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent conforms to TableRowContent and Content conforms to TableRowContent.\ninit<V>(LocalizedStringKey, isExpanded: Binding<Bool>, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent conforms to TableRowContent and Content conforms to TableRowContent.\ninit(LocalizedStringKey, isExpanded: Binding<Bool>, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent is Text, Content conforms to View, and Footer is EmptyView.\ninit(isExpanded: Binding<Bool>, content: () -> Content, header: () -> Parent)\nCreates a section with a header, the provided section content, and a binding representing the section\u2019s expansion state.\nAvailable when Parent conforms to View, Content conforms to View, and Footer is EmptyView.\ninit<V, H>(isExpanded: Binding<Bool>, content: () -> Content, header: () -> H)\nCreates a section with a header and the provided section content.\nAvailable when Parent conforms to TableRowContent and Content conforms to TableRowContent."
    },
    {
        "title": "init(_:id:children:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/outlinegroup/init(_:id:children:content:)-91cpg",
        "html": "Parameters\ndata\n\nA collection of tree-structured, identified data.\n\nid\n\nThe key path to a data element\u2019s identifier.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data. A non-nil but empty value denotes an element capable of having children that\u2019s currently childless, such as an empty directory in a file system. On the other hand, if the property at the key path is nil, then the outline group treats data as a leaf in the tree, like a regular file in a file system.\n\ncontent\n\nA table row builder that produces a row based on an element in data.\n\nDiscussion\n\nThis initializer exposes content as a TableRowBuilder to allow custom table row content for each data element.\n\nThis initializer creates an instance that uniquely identifies table rows across updates based on the identity of the underlying data element.\n\nAll generated disclosure groups begin in the collapsed state."
    },
    {
        "title": "modelContext(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/modelcontext(_:)",
        "html": "Parameters\nmodelContext\n\nThe model context to set in this view\u2019s environment.\n\nDiscussion\n\nIn this example, the RecipesList view sets a model context to use for all of its content:\n\n@Model class Recipe { ... }\n...\nRecipesList()\n    .modelContext(myContext)\n\n\nThe environment\u2019s modelContext property will be assigned myContext. All implicit model context operations in this view, such as Query properties, will use the environment\u2019s context.\n\nSee Also\nConfiguring a model\nfunc modelContainer(ModelContainer) -> some View\nSets the model container and associated model context in this view\u2019s environment.\nfunc modelContainer(for: PersistentModel.Type, inMemory: Bool, isAutosaveEnabled: Bool, isUndoEnabled: Bool, onSetup: (Result<ModelContainer, Error>) -> Void) -> some View\nSets the model container in this view for storing the provided model type, creating a new container if necessary, and also sets a model context for that container in this view\u2019s environment.\nfunc modelContainer(for: [PersistentModel.Type], inMemory: Bool, isAutosaveEnabled: Bool, isUndoEnabled: Bool, onSetup: (Result<ModelContainer, Error>) -> Void) -> some View\nSets the model container in this view for storing the provided model types, creating a new container if necessary, and also sets a model context for that container in this view\u2019s environment."
    },
    {
        "title": "init(_:isExpanded:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/section/init(_:isexpanded:content:)-5xh78",
        "html": "Parameters\ntitleKey\n\nThe key for the section\u2019s localized title, which describes the contents of the section.\n\nisExpanded\n\nA binding to a Boolean value that determines the section\u2019s expansion state (expanded or collapsed).\n\ncontent\n\nThe section\u2019s content.\n\nSee Also\nControlling collapsibility\ninit<V, S>(S, isExpanded: Binding<Bool>, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent conforms to TableRowContent and Content conforms to TableRowContent.\ninit<S>(S, isExpanded: Binding<Bool>, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent is Text, Content conforms to View, and Footer is EmptyView.\ninit<V>(LocalizedStringKey, isExpanded: Binding<Bool>, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent conforms to TableRowContent and Content conforms to TableRowContent.\ninit(isExpanded: Binding<Bool>, content: () -> Content, header: () -> Parent)\nCreates a section with a header, the provided section content, and a binding representing the section\u2019s expansion state.\nAvailable when Parent conforms to View, Content conforms to View, and Footer is EmptyView.\ninit<V, H>(isExpanded: Binding<Bool>, content: () -> Content, header: () -> H)\nCreates a section with a header and the provided section content.\nAvailable when Parent conforms to TableRowContent and Content conforms to TableRowContent."
    },
    {
        "title": "init(header:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/section/init(header:content:)",
        "html": "Deprecated\n\nUse init(content:header:) instead.\n\nParameters\nheader\n\nA view to use as the section\u2019s header.\n\ncontent\n\nThe section\u2019s content.\n\nSee Also\nDeprecated symbols\ninit(footer: Footer, content: () -> Content)\nCreates a section with a footer and the provided section content.\nAvailable when Parent is EmptyView, Content conforms to View, and Footer conforms to View.\nDeprecated\ninit(header: Parent, footer: Footer, content: () -> Content)\nCreates a section with a header, footer, and the provided section content.\nAvailable when Parent conforms to View, Content conforms to View, and Footer conforms to View.\nDeprecated\nfunc collapsible(Bool) -> some View\nSets whether a section can be collapsed by the user.\nAvailable when Parent conforms to View, Content conforms to View, and Footer conforms to View.\nDeprecated"
    },
    {
        "title": "init(_:value:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlink/init(_:value:)-810b2",
        "html": "Parameters\ntitleKey\n\nA localized string that describes the view that this link presents.\n\nvalue\n\nAn optional value to present. When someone taps or clicks the link, SwiftUI stores a copy of the value. Pass a nil value to disable the link.\n\nDiscussion\n\nWhen someone activates the navigation link that this initializer creates, SwiftUI looks for a nearby navigationDestination(for:destination:) view modifier with a data input parameter that matches the type of this initializer\u2019s value input, with one of the following outcomes:\n\nIf SwiftUI finds a matching modifier within the view hierarchy of an enclosing NavigationStack, it pushes the modifier\u2019s corresponding destination view onto the stack.\n\nIf SwiftUI finds a matching modifier in the view hierarchy of a stack that\u2019s in a later column of a NavigationSplitView, it puts the modifier\u2019s destination view as the first and only item onto the stack while preserving the stack\u2019s root view.\n\nIf there\u2019s no matching modifier, but the link appears in a List with selection inside a leading column of a navigation split view, the link updates the selection, which might affect the appearance of a trailing view. For an example of this, see NavigationLink.\n\nIn other cases, the link doesn\u2019t do anything.\n\nBecause this initializer takes a value that conforms to the Codable protocol, you ensure that a NavigationPath that includes this link can produce a non-nil value for its codable property. This helps to make the path serializable.\n\nSee Also\nPresenting a codable value\ninit<S, P>(S, value: P?)\nCreates a navigation link that presents the view corresponding to a codable value, with a text label that the link generates from a title string.\nAvailable when Label conforms to View and Destination is Never.\ninit<P>(value: P?, label: () -> Label)\nCreates a navigation link that presents the view corresponding to a codable value.\nAvailable when Label conforms to View and Destination is Never."
    },
    {
        "title": "init(_:value:step:onEditingChanged:)",
        "url": "https://developer.apple.com/documentation/swiftui/stepper/init(_:value:step:oneditingchanged:)-8nkqz",
        "html": "Parameters\ntitle\n\nA string describing the purpose of the stepper.\n\nvalue\n\nThe Binding to a value that you provide.\n\nstep\n\nThe amount to increment or decrement value each time the user clicks or taps the stepper\u2019s increment or decrement button, respectively. Defaults to 1.\n\nonEditingChanged\n\nA closure that\u2019s called when editing begins and ends. For example, on iOS, the user may touch and hold the increment or decrement buttons on a Stepper which causes the execution of the onEditingChanged closure at the start and end of the gesture.\n\nDiscussion\n\nUse Stepper(_:value:step:onEditingChanged:) to create a stepper with a custom title that increments or decrements a binding to value by the step size you specify.\n\nIn the example below, the stepper increments or decrements the binding value by 5 each time one of the user clicks or taps the control\u2019s increment or decrement buttons:\n\nstruct StepperView: View {\n    @State private var value = 1\n    let step = 5\n    let title: String\n\n\n    var body: some View {\n        Stepper(title, value: $value, step: step)\n            .padding(10)\n    }\n}\n\n\nSee Also\nCreating a stepper\ninit<V>(value: Binding<V>, step: V.Stride, label: () -> Label, onEditingChanged: (Bool) -> Void)\nCreates a stepper configured to increment or decrement a binding to a value using a step value you provide.\nAvailable when Label conforms to View.\ninit<F>(value: Binding<F.FormatInput>, step: F.FormatInput.Stride, format: F, label: () -> Label, onEditingChanged: (Bool) -> Void)\nCreates a stepper configured to increment or decrement a binding to a value using a step value you provide, displaying its value with an applied format style.\nAvailable when Label conforms to View.\ninit<V>(LocalizedStringKey, value: Binding<V>, step: V.Stride, onEditingChanged: (Bool) -> Void)\nCreates a stepper with a title key and configured to increment and decrement a binding to a value and step amount you provide.\nAvailable when Label is Text.\ninit<S, F>(S, value: Binding<F.FormatInput>, step: F.FormatInput.Stride, format: F, onEditingChanged: (Bool) -> Void)\nCreates a stepper with a title and configured to increment and decrement a binding to a value and step amount you provide, displaying its value with an applied format style.\nAvailable when Label is Text.\ninit<F>(LocalizedStringKey, value: Binding<F.FormatInput>, step: F.FormatInput.Stride, format: F, onEditingChanged: (Bool) -> Void)\nCreates a stepper with a title key and configured to increment and decrement a binding to a value and step amount you provide, displaying its value with an applied format style.\nAvailable when Label is Text."
    },
    {
        "title": "continue",
        "url": "https://developer.apple.com/documentation/swiftui/submitlabel/continue",
        "html": "See Also\nGetting submission labels\nstatic var done: SubmitLabel\nDefines a submit label with text of \u201cDone\u201d.\nstatic var go: SubmitLabel\nDefines a submit label with text of \u201cGo\u201d.\nstatic var join: SubmitLabel\nDefines a submit label with text of \u201cJoin\u201d.\nstatic var next: SubmitLabel\nDefines a submit label with text of \u201cNext\u201d.\nstatic var `return`: SubmitLabel\nDefines a submit label with text of \u201cReturn\u201d.\nstatic var route: SubmitLabel\nDefines a submit label with text of \u201cRoute\u201d.\nstatic var search: SubmitLabel\nDefines a submit label with text of \u201cSearch\u201d.\nstatic var send: SubmitLabel\nDefines a submit label with text of \u201cSend\u201d."
    },
    {
        "title": "init(isOn:intent:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/toggle/init(ison:intent:label:)",
        "html": "Parameters\nisOn\n\nWhether the toggle is on or off.\n\nintent\n\nThe AppIntent to be performed.\n\nlabel\n\nA view that describes the purpose of the toggle.\n\nSee Also\nCreating a toggle for an App Intent\ninit(LocalizedStringKey, isOn: Bool, intent: some AppIntent)\nCreates a toggle performing an AppIntent and generates its label from a localized string key.\nAvailable when Label is Text.\ninit<S>(S, isOn: Bool, intent: some AppIntent)\nCreates a toggle that generates its label from a string.\nAvailable when Label is Text."
    },
    {
        "title": "join",
        "url": "https://developer.apple.com/documentation/swiftui/submitlabel/join",
        "html": "See Also\nGetting submission labels\nstatic var `continue`: SubmitLabel\nDefines a submit label with text of \u201cContinue\u201d.\nstatic var done: SubmitLabel\nDefines a submit label with text of \u201cDone\u201d.\nstatic var go: SubmitLabel\nDefines a submit label with text of \u201cGo\u201d.\nstatic var next: SubmitLabel\nDefines a submit label with text of \u201cNext\u201d.\nstatic var `return`: SubmitLabel\nDefines a submit label with text of \u201cReturn\u201d.\nstatic var route: SubmitLabel\nDefines a submit label with text of \u201cRoute\u201d.\nstatic var search: SubmitLabel\nDefines a submit label with text of \u201cSearch\u201d.\nstatic var send: SubmitLabel\nDefines a submit label with text of \u201cSend\u201d."
    },
    {
        "title": "init(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/section/init(content:)-2ymx3",
        "html": "Parameters\ncontent\n\nThe section\u2019s content.\n\nSee Also\nCreating a section\ninit<V>(content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent conforms to TableRowContent, Content conforms to TableRowContent, and Footer conforms to TableRowContent.\ninit(LocalizedStringKey, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent is Text, Content conforms to View, and Footer is EmptyView.\ninit<S>(S, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent is Text, Content conforms to View, and Footer is EmptyView.\ninit<V, S>(S, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent conforms to TableRowContent, Content conforms to TableRowContent, and Footer conforms to TableRowContent.\ninit<V>(LocalizedStringKey, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent conforms to TableRowContent, Content conforms to TableRowContent, and Footer conforms to TableRowContent."
    },
    {
        "title": "hoverEffect",
        "url": "https://developer.apple.com/documentation/swiftui/contentshapekinds/hovereffect",
        "html": "Discussion\n\nWhen using this kind, only the preview shape is affected. To control the shape used to hit-test and start the effect, use the interaction kind.\n\nThis kind does not affect the onHover modifier.\n\nSee Also\nGetting shape kinds\nstatic let interaction: ContentShapeKinds\nThe kind for hit-testing and accessibility.\nstatic let dragPreview: ContentShapeKinds\nThe kind for drag and drop previews.\nstatic let contextMenuPreview: ContentShapeKinds\nThe kind for context menu previews.\nstatic let focusEffect: ContentShapeKinds\nThe kind for the focus effect.\nstatic let accessibility: ContentShapeKinds\nThe kind for accessibility visuals and sorting."
    },
    {
        "title": "init(colors:startPoint:endPoint:)",
        "url": "https://developer.apple.com/documentation/swiftui/lineargradient/init(colors:startpoint:endpoint:)",
        "html": "See Also\nCreating a linear gradient\ninit(gradient: Gradient, startPoint: UnitPoint, endPoint: UnitPoint)\nCreates a linear gradient from a base gradient.\ninit(stops: [Gradient.Stop], startPoint: UnitPoint, endPoint: UnitPoint)\nCreates a linear gradient from a collection of color stops."
    },
    {
        "title": "init(gradient:startPoint:endPoint:)",
        "url": "https://developer.apple.com/documentation/swiftui/lineargradient/init(gradient:startpoint:endpoint:)",
        "html": "See Also\nCreating a linear gradient\ninit(colors: [Color], startPoint: UnitPoint, endPoint: UnitPoint)\nCreates a linear gradient from a collection of colors.\ninit(stops: [Gradient.Stop], startPoint: UnitPoint, endPoint: UnitPoint)\nCreates a linear gradient from a collection of color stops."
    },
    {
        "title": "contextMenuPreview",
        "url": "https://developer.apple.com/documentation/swiftui/contentshapekinds/contextmenupreview",
        "html": "Discussion\n\nWhen using this kind, only the preview shape will be affected. To control the shape used to hit-test and start the context menu presentation, use the .interaction kind.\n\nSee Also\nGetting shape kinds\nstatic let interaction: ContentShapeKinds\nThe kind for hit-testing and accessibility.\nstatic let dragPreview: ContentShapeKinds\nThe kind for drag and drop previews.\nstatic let focusEffect: ContentShapeKinds\nThe kind for the focus effect.\nstatic let hoverEffect: ContentShapeKinds\nThe kind for hover effects.\nstatic let accessibility: ContentShapeKinds\nThe kind for accessibility visuals and sorting."
    },
    {
        "title": "init(_:children:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/outlinegroup/init(_:children:content:)-4rmem",
        "html": "Parameters\ndata\n\nA collection of tree-structured, identified data.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data. A non-nil but empty value denotes an element capable of having children that\u2019s currently childless, such as an empty directory in a file system. On the other hand, if the property at the key path is nil, then the outline group treats data as a leaf in the tree, like a regular file in a file system.\n\ncontent\n\nA view builder that produces a content view based on an element in data.\n\nDiscussion\n\nThis initializer creates an instance that uniquely identifies views across updates based on the identity of the underlying data element.\n\nAll generated disclosure groups begin in the collapsed state.\n\nMake sure that the identifier of a data element only changes if you mean to replace that element with a new element, one with a new identity. If the ID of an element changes, then the content view generated from that element will lose any current state and animations.\n\nSee Also\nCreating an outline group\ninit<DataElement>(DataElement, children: KeyPath<DataElement, Data?>, content: (DataElement) -> Leaf)\nCreates an outline group from a root data element and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to View, Parent is Leaf, Subgroup is DisclosureGroup<Parent, OutlineSubgroupChildren>, and Data.Element conforms to Identifiable.\ninit<DataElement>(DataElement, id: KeyPath<DataElement, ID>, children: KeyPath<DataElement, Data?>, content: (DataElement) -> Leaf)\nCreates an outline group from a root data element, the key path to its identifier, and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, Parent conforms to View, Parent is Leaf, and Subgroup is DisclosureGroup<Parent, OutlineSubgroupChildren>.\ninit<DataElement>(Data, id: KeyPath<DataElement, ID>, children: KeyPath<DataElement, Data?>, content: (DataElement) -> Leaf)\nCreates an outline group from a collection of root data elements, the key path to a data element\u2019s identifier, and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, Parent conforms to View, Parent is Leaf, and Subgroup is DisclosureGroup<Parent, OutlineSubgroupChildren>."
    },
    {
        "title": "init(stops:startPoint:endPoint:)",
        "url": "https://developer.apple.com/documentation/swiftui/lineargradient/init(stops:startpoint:endpoint:)",
        "html": "See Also\nCreating a linear gradient\ninit(gradient: Gradient, startPoint: UnitPoint, endPoint: UnitPoint)\nCreates a linear gradient from a base gradient.\ninit(colors: [Color], startPoint: UnitPoint, endPoint: UnitPoint)\nCreates a linear gradient from a collection of colors."
    },
    {
        "title": "interaction",
        "url": "https://developer.apple.com/documentation/swiftui/contentshapekinds/interaction",
        "html": "Discussion\n\nSetting a content shape with this kind causes the view to hit-test using the specified shape.\n\nSee Also\nGetting shape kinds\nstatic let dragPreview: ContentShapeKinds\nThe kind for drag and drop previews.\nstatic let contextMenuPreview: ContentShapeKinds\nThe kind for context menu previews.\nstatic let focusEffect: ContentShapeKinds\nThe kind for the focus effect.\nstatic let hoverEffect: ContentShapeKinds\nThe kind for hover effects.\nstatic let accessibility: ContentShapeKinds\nThe kind for accessibility visuals and sorting."
    },
    {
        "title": "focusEffect",
        "url": "https://developer.apple.com/documentation/swiftui/contentshapekinds/focuseffect",
        "html": "See Also\nGetting shape kinds\nstatic let interaction: ContentShapeKinds\nThe kind for hit-testing and accessibility.\nstatic let dragPreview: ContentShapeKinds\nThe kind for drag and drop previews.\nstatic let contextMenuPreview: ContentShapeKinds\nThe kind for context menu previews.\nstatic let hoverEffect: ContentShapeKinds\nThe kind for hover effects.\nstatic let accessibility: ContentShapeKinds\nThe kind for accessibility visuals and sorting."
    },
    {
        "title": "dragPreview",
        "url": "https://developer.apple.com/documentation/swiftui/contentshapekinds/dragpreview",
        "html": "Discussion\n\nWhen using this kind, only the preview shape is affected. To control the shape used to hit-test and start the drag preview, use the interaction kind.\n\nSee Also\nGetting shape kinds\nstatic let interaction: ContentShapeKinds\nThe kind for hit-testing and accessibility.\nstatic let contextMenuPreview: ContentShapeKinds\nThe kind for context menu previews.\nstatic let focusEffect: ContentShapeKinds\nThe kind for the focus effect.\nstatic let hoverEffect: ContentShapeKinds\nThe kind for hover effects.\nstatic let accessibility: ContentShapeKinds\nThe kind for accessibility visuals and sorting."
    },
    {
        "title": "init(content:header:footer:)",
        "url": "https://developer.apple.com/documentation/swiftui/section/init(content:header:footer:)",
        "html": "Parameters\ncontent\n\nThe section\u2019s content.\n\nheader\n\nA view to use as the section\u2019s header.\n\nfooter\n\nA view to use as the section\u2019s footer.\n\nSee Also\nAdding headers and footers\ninit(content: () -> Content, header: () -> Parent)\nCreates a section with a header and the provided section content.\nAvailable when Parent conforms to View, Content conforms to View, and Footer is EmptyView.\ninit<V, H>(content: () -> Content, header: () -> H)\nCreates a section with a header and the provided section content.\nAvailable when Parent conforms to TableRowContent, Content conforms to TableRowContent, and Footer conforms to TableRowContent.\ninit(content: () -> Content, footer: () -> Footer)\nCreates a section with a footer and the provided section content.\nAvailable when Parent is EmptyView, Content conforms to View, and Footer conforms to View."
    },
    {
        "title": "siriTipViewStyle(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/siritipviewstyle(_:)",
        "html": "Parameters\nstyle\n\nThe style to set.\n\nReturn Value\n\nA view that uses the specified style on its child views.\n\nSee Also\nApp intents\nfunc shortcutsLinkStyle(ShortcutsLinkStyle) -> some View\nSets the given style for ShortcutsLinks within the view hierarchy"
    },
    {
        "title": "init(_:id:children:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/outlinegroup/init(_:id:children:content:)-3n9j8",
        "html": "Parameters\nroot\n\nThe root of a collection of tree-structured, identified data.\n\nid\n\nThe key path to a data element\u2019s identifier.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of a data element. A non-nil but empty value denotes an element capable of having children that\u2019s currently childless, such as an empty directory in a file system. On the other hand, if the property at the key path is nil, then the outline group treats the data element as a leaf in the tree, like a regular file in a file system.\n\ncontent\n\nA view builder that produces a content view based on a data element.\n\nDiscussion\n\nThis initializer creates an instance that uniquely identifies views across updates based on the identity of the underlying data element.\n\nAll generated disclosure groups begin in the collapsed state.\n\nMake sure that the identifier of a data element only changes if you mean to replace that element with a new element, one with a new identity. If the ID of an element changes, then the content view generated from that element will lose any current state and animations.\n\nSee Also\nCreating an outline group from a binding\ninit<C, E>(Binding<E>, children: WritableKeyPath<E, C?>, content: (Binding<E>) -> Leaf)\nCreates an outline group from a binding to a root data element and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to View, Parent is Leaf, Subgroup is DisclosureGroup<Parent, OutlineSubgroupChildren>, and Data.Element conforms to Identifiable.\ninit<C, E>(Binding<C>, children: WritableKeyPath<E, C?>, content: (Binding<E>) -> Leaf)\nCreates an outline group from a binding to a collection of root data elements and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to View, Parent is Leaf, Subgroup is DisclosureGroup<Parent, OutlineSubgroupChildren>, and Data.Element conforms to Identifiable.\ninit<C, E>(Binding<C>, id: KeyPath<E, ID>, children: WritableKeyPath<E, C?>, content: (Binding<E>) -> Leaf)\nCreates an outline group from a binding to a collection of root data elements, the key path to a data element\u2019s identifier, and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, Parent conforms to View, Parent is Leaf, and Subgroup is DisclosureGroup<Parent, OutlineSubgroupChildren>."
    },
    {
        "title": "KeyPress.Phases",
        "url": "https://developer.apple.com/documentation/swiftui/keypress/phases",
        "html": "Topics\nGetting the phases\nstatic let down: KeyPress.Phases\nThe user pressed down on a key.\nstatic let up: KeyPress.Phases\nThe user released a key.\nstatic let `repeat`: KeyPress.Phases\nThe user held a key down to issue a sequence of repeating events.\nstatic let all: KeyPress.Phases\nA value that matches all key press phases.\nRelationships\nConforms To\nCustomDebugStringConvertible\nEquatable\nExpressibleByArrayLiteral\nOptionSet\nRawRepresentable\nSendable\nSetAlgebra\nSee Also\nGetting the phase of the keypress\nlet phase: KeyPress.Phases\nThe phase of the key-press event (.down, .repeat, or .up)."
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/section/init(_:content:)-55sup",
        "html": "Parameters\ntitle\n\nA string that describes the contents of the section.\n\ncontent\n\nThe section\u2019s content.\n\nSee Also\nCreating a section\ninit<V>(content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent conforms to TableRowContent, Content conforms to TableRowContent, and Footer conforms to TableRowContent.\ninit(content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent is EmptyView, Content conforms to View, and Footer is EmptyView.\ninit(LocalizedStringKey, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent is Text, Content conforms to View, and Footer is EmptyView.\ninit<V, S>(S, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent conforms to TableRowContent, Content conforms to TableRowContent, and Footer conforms to TableRowContent.\ninit<V>(LocalizedStringKey, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent conforms to TableRowContent, Content conforms to TableRowContent, and Footer conforms to TableRowContent."
    },
    {
        "title": "init(colors:center:startRadius:endRadius:)",
        "url": "https://developer.apple.com/documentation/swiftui/radialgradient/init(colors:center:startradius:endradius:)",
        "html": "See Also\nCreating a radial gradient\ninit(gradient: Gradient, center: UnitPoint, startRadius: CGFloat, endRadius: CGFloat)\nCreates a radial gradient from a base gradient.\ninit(stops: [Gradient.Stop], center: UnitPoint, startRadius: CGFloat, endRadius: CGFloat)\nCreates a radial gradient from a collection of color stops."
    },
    {
        "title": "init(isExpanded:content:header:)",
        "url": "https://developer.apple.com/documentation/swiftui/section/init(isexpanded:content:header:)-561d7",
        "html": "Parameters\nisExpanded\n\nA binding to a Boolean value that determines the section\u2019s expansion state (expanded or collapsed).\n\ncontent\n\nThe section\u2019s content.\n\nheader\n\nA view to use as the section\u2019s header.\n\nSee Also\nControlling collapsibility\ninit<V, S>(S, isExpanded: Binding<Bool>, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent conforms to TableRowContent and Content conforms to TableRowContent.\ninit<S>(S, isExpanded: Binding<Bool>, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent is Text, Content conforms to View, and Footer is EmptyView.\ninit<V>(LocalizedStringKey, isExpanded: Binding<Bool>, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent conforms to TableRowContent and Content conforms to TableRowContent.\ninit(LocalizedStringKey, isExpanded: Binding<Bool>, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent is Text, Content conforms to View, and Footer is EmptyView.\ninit<V, H>(isExpanded: Binding<Bool>, content: () -> Content, header: () -> H)\nCreates a section with a header and the provided section content.\nAvailable when Parent conforms to TableRowContent and Content conforms to TableRowContent."
    },
    {
        "title": "init(_:children:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/outlinegroup/init(_:children:content:)-2galq",
        "html": "Parameters\nroot\n\nThe root of a collection of tree-structured, identified data.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of a data element. A non-nil but empty value denotes an element capable of having children that\u2019s currently childless, such as an empty directory in a file system. On the other hand, if the property at the key path is nil, then the outline group treats the data element as a leaf in the tree, like a regular file in a file system.\n\ncontent\n\nA view builder that produces a content view based on a data element.\n\nDiscussion\n\nThis initializer creates an instance that uniquely identifies views across updates based on the identity of the underlying data element.\n\nAll generated disclosure groups begin in the collapsed state.\n\nMake sure that the identifier of a data element only changes if you mean to replace that element with a new element, one with a new identity. If the ID of an element changes, then the content view generated from that element will lose any current state and animations.\n\nSee Also\nCreating an outline group\ninit<DataElement>(Data, children: KeyPath<DataElement, Data?>, content: (DataElement) -> Leaf)\nCreates an outline group from a collection of root data elements and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to View, Parent is Leaf, Subgroup is DisclosureGroup<Parent, OutlineSubgroupChildren>, and Data.Element conforms to Identifiable.\ninit<DataElement>(DataElement, id: KeyPath<DataElement, ID>, children: KeyPath<DataElement, Data?>, content: (DataElement) -> Leaf)\nCreates an outline group from a root data element, the key path to its identifier, and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, Parent conforms to View, Parent is Leaf, and Subgroup is DisclosureGroup<Parent, OutlineSubgroupChildren>.\ninit<DataElement>(Data, id: KeyPath<DataElement, ID>, children: KeyPath<DataElement, Data?>, content: (DataElement) -> Leaf)\nCreates an outline group from a collection of root data elements, the key path to a data element\u2019s identifier, and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, Parent conforms to View, Parent is Leaf, and Subgroup is DisclosureGroup<Parent, OutlineSubgroupChildren>."
    },
    {
        "title": "init(item:subject:message:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(item:subject:message:)-9ap6z",
        "html": "Parameters\nitem\n\nThe item to share.\n\nsubject\n\nA title for the item to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the item to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\nDiscussion\n\nUse this initializer when you want the system-standard appearance for ShareLink.\n\nSee Also\nSharing an item\ninit(item: String, subject: Text?, message: Text?)\nCreates an instance that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit(item: String, subject: Text?, message: Text?, label: () -> Label)\nCreates an instance that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label conforms to View, and Data.Element conforms to Transferable.\ninit(item: URL, subject: Text?, message: Text?, label: () -> Label)\nCreates an instance that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label conforms to View, and Data.Element conforms to Transferable."
    },
    {
        "title": "init(header:footer:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/section/init(header:footer:content:)",
        "html": "Deprecated\n\nUse init(content:header:footer:) instead.\n\nParameters\nheader\n\nA view to use as the section\u2019s header.\n\nfooter\n\nA view to use as the section\u2019s footer.\n\ncontent\n\nThe section\u2019s content.\n\nSee Also\nDeprecated symbols\ninit(header: Parent, content: () -> Content)\nCreates a section with a header and the provided section content.\nAvailable when Parent conforms to View, Content conforms to View, and Footer is EmptyView.\nDeprecated\ninit(footer: Footer, content: () -> Content)\nCreates a section with a footer and the provided section content.\nAvailable when Parent is EmptyView, Content conforms to View, and Footer conforms to View.\nDeprecated\nfunc collapsible(Bool) -> some View\nSets whether a section can be collapsed by the user.\nAvailable when Parent conforms to View, Content conforms to View, and Footer conforms to View.\nDeprecated"
    },
    {
        "title": "init(_:id:children:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/outlinegroup/init(_:id:children:content:)-7gsh9",
        "html": "Parameters\ndata\n\nA collection of tree-structured, identified data.\n\nid\n\nThe key path to a data element\u2019s identifier.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data. A non-nil but empty value denotes an element capable of having children that\u2019s currently childless, such as an empty directory in a file system. On the other hand, if the property at the key path is nil, then the outline group treats data as a leaf in the tree, like a regular file in a file system.\n\ncontent\n\nA view builder that produces a content view based on an element in data.\n\nDiscussion\n\nThis initializer creates an instance that uniquely identifies views across updates based on the identity of the underlying data element.\n\nAll generated disclosure groups begin in the collapsed state.\n\nMake sure that the identifier of a data element only changes if you mean to replace that element with a new element, one with a new identity. If the ID of an element changes, then the content view generated from that element will lose any current state and animations.\n\nSee Also\nCreating an outline group from a binding\ninit<C, E>(Binding<E>, children: WritableKeyPath<E, C?>, content: (Binding<E>) -> Leaf)\nCreates an outline group from a binding to a root data element and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to View, Parent is Leaf, Subgroup is DisclosureGroup<Parent, OutlineSubgroupChildren>, and Data.Element conforms to Identifiable.\ninit<C, E>(Binding<C>, children: WritableKeyPath<E, C?>, content: (Binding<E>) -> Leaf)\nCreates an outline group from a binding to a collection of root data elements and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to View, Parent is Leaf, Subgroup is DisclosureGroup<Parent, OutlineSubgroupChildren>, and Data.Element conforms to Identifiable.\ninit<C, E>(Binding<E>, id: KeyPath<E, ID>, children: WritableKeyPath<E, C?>, content: (Binding<E>) -> Leaf)\nCreates an outline group from a binding to a root data element, the key path to its identifier, and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, Parent conforms to View, Parent is Leaf, and Subgroup is DisclosureGroup<Parent, OutlineSubgroupChildren>."
    },
    {
        "title": "init(_:children:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/outlinegroup/init(_:children:content:)-1thkw",
        "html": "Parameters\nroot\n\nThe root of a collection of tree-structured, identified data.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of a data element. A non-nil but empty value denotes an element capable of having children that\u2019s currently childless, such as an empty directory in a file system. On the other hand, if the property at the key path is nil, then the outline group treats the data element as a leaf in the tree, like a regular file in a file system.\n\ncontent\n\nA view builder that produces a content view based on a data element.\n\nDiscussion\n\nThis initializer creates an instance that uniquely identifies views across updates based on the identity of the underlying data element.\n\nAll generated disclosure groups begin in the collapsed state.\n\nMake sure that the identifier of a data element only changes if you mean to replace that element with a new element, one with a new identity. If the ID of an element changes, then the content view generated from that element will lose any current state and animations.\n\nSee Also\nCreating an outline group from a binding\ninit<C, E>(Binding<C>, children: WritableKeyPath<E, C?>, content: (Binding<E>) -> Leaf)\nCreates an outline group from a binding to a collection of root data elements and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to View, Parent is Leaf, Subgroup is DisclosureGroup<Parent, OutlineSubgroupChildren>, and Data.Element conforms to Identifiable.\ninit<C, E>(Binding<E>, id: KeyPath<E, ID>, children: WritableKeyPath<E, C?>, content: (Binding<E>) -> Leaf)\nCreates an outline group from a binding to a root data element, the key path to its identifier, and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, Parent conforms to View, Parent is Leaf, and Subgroup is DisclosureGroup<Parent, OutlineSubgroupChildren>.\ninit<C, E>(Binding<C>, id: KeyPath<E, ID>, children: WritableKeyPath<E, C?>, content: (Binding<E>) -> Leaf)\nCreates an outline group from a binding to a collection of root data elements, the key path to a data element\u2019s identifier, and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, Parent conforms to View, Parent is Leaf, and Subgroup is DisclosureGroup<Parent, OutlineSubgroupChildren>."
    },
    {
        "title": "init(isExpanded:content:header:)",
        "url": "https://developer.apple.com/documentation/swiftui/section/init(isexpanded:content:header:)-9bdul",
        "html": "Parameters\nisExpanded\n\nA binding to a Boolean value that determines the section\u2019s expansion state (expanded or collapsed).\n\ncontent\n\nThe section\u2019s content.\n\nheader\n\nA view to use as the section\u2019s header.\n\nSee Also\nControlling collapsibility\ninit<V, S>(S, isExpanded: Binding<Bool>, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent conforms to TableRowContent and Content conforms to TableRowContent.\ninit<S>(S, isExpanded: Binding<Bool>, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent is Text, Content conforms to View, and Footer is EmptyView.\ninit<V>(LocalizedStringKey, isExpanded: Binding<Bool>, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent conforms to TableRowContent and Content conforms to TableRowContent.\ninit(LocalizedStringKey, isExpanded: Binding<Bool>, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent is Text, Content conforms to View, and Footer is EmptyView.\ninit(isExpanded: Binding<Bool>, content: () -> Content, header: () -> Parent)\nCreates a section with a header, the provided section content, and a binding representing the section\u2019s expansion state.\nAvailable when Parent conforms to View, Content conforms to View, and Footer is EmptyView."
    },
    {
        "title": "init(stops:center:startRadius:endRadius:)",
        "url": "https://developer.apple.com/documentation/swiftui/radialgradient/init(stops:center:startradius:endradius:)",
        "html": "See Also\nCreating a radial gradient\ninit(gradient: Gradient, center: UnitPoint, startRadius: CGFloat, endRadius: CGFloat)\nCreates a radial gradient from a base gradient.\ninit(colors: [Color], center: UnitPoint, startRadius: CGFloat, endRadius: CGFloat)\nCreates a radial gradient from a collection of colors."
    },
    {
        "title": "init(gradient:center:startRadius:endRadius:)",
        "url": "https://developer.apple.com/documentation/swiftui/radialgradient/init(gradient:center:startradius:endradius:)",
        "html": "See Also\nCreating a radial gradient\ninit(colors: [Color], center: UnitPoint, startRadius: CGFloat, endRadius: CGFloat)\nCreates a radial gradient from a collection of colors.\ninit(stops: [Gradient.Stop], center: UnitPoint, startRadius: CGFloat, endRadius: CGFloat)\nCreates a radial gradient from a collection of color stops."
    },
    {
        "title": "SensoryFeedback.Flexibility",
        "url": "https://developer.apple.com/documentation/swiftui/sensoryfeedback/flexibility",
        "html": "Overview\n\nFlexibility values can be passed to SensoryFeedback.impact(flexibility:intensity:).\n\nTopics\nGetting flexibility values\nstatic let rigid: SensoryFeedback.Flexibility\nIndicates a collision between hard or inflexible UI objects.\nstatic let soft: SensoryFeedback.Flexibility\nIndicates a collision between soft or flexible UI objects.\nstatic let solid: SensoryFeedback.Flexibility\nIndicates a collision between solid UI objects of medium flexibility.\nRelationships\nConforms To\nEquatable\nSendable\nSee Also\nProducing a physical impact\nstatic let impact: SensoryFeedback\nProvides a physical metaphor you can use to complement a visual experience.\nstatic func impact(weight: SensoryFeedback.Weight, intensity: Double) -> SensoryFeedback\nProvides a physical metaphor you can use to complement a visual experience.\nstatic func impact(flexibility: SensoryFeedback.Flexibility, intensity: Double) -> SensoryFeedback\nProvides a physical metaphor you can use to complement a visual experience.\nstruct Weight\nThe weight to be represented by a type of feedback."
    },
    {
        "title": "Path.Element.line(to:)",
        "url": "https://developer.apple.com/documentation/swiftui/path/element/line(to:)",
        "html": "See Also\nGetting path elements\ncase closeSubpath\nA line from the start point of the current subpath (if any) to the current point, which terminates the subpath.\ncase curve(to: CGPoint, control1: CGPoint, control2: CGPoint)\nA cubic B\u00e9zier curve from the previous current point to the given end-point, using the two control points to define the curve.\ncase move(to: CGPoint)\nA path element that terminates the current subpath (without closing it) and defines a new current point.\ncase quadCurve(to: CGPoint, control: CGPoint)\nA quadratic B\u00e9zier curve from the previous current point to the given end-point, using the single control point to define the curve."
    },
    {
        "title": "ControlSize.mini",
        "url": "https://developer.apple.com/documentation/swiftui/controlsize/mini",
        "html": "See Also\nGetting control sizes\ncase small\nA control version that is proportionally smaller size for space-constrained views.\ncase regular\nA control version that is the default size.\ncase large\nA control version that is prominently sized.\ncase extraLarge"
    },
    {
        "title": "detailOnly",
        "url": "https://developer.apple.com/documentation/swiftui/navigationsplitviewvisibility/detailonly",
        "html": "See Also\nGetting visibilities\nstatic var automatic: NavigationSplitViewVisibility\nUse the default leading column visibility for the current device.\nstatic var all: NavigationSplitViewVisibility\nShow all the columns of a three-column navigation split view.\nstatic var doubleColumn: NavigationSplitViewVisibility\nShow the content column and detail area of a three-column navigation split view, or the sidebar column and detail area of a two-column navigation split view."
    },
    {
        "title": "sidebar",
        "url": "https://developer.apple.com/documentation/swiftui/navigationsplitviewcolumn/sidebar",
        "html": "See Also\nGetting a column\nstatic var content: NavigationSplitViewColumn\nstatic var detail: NavigationSplitViewColumn"
    },
    {
        "title": "init(columnVisibility:sidebar:content:detail:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationsplitview/init(columnvisibility:sidebar:content:detail:)",
        "html": "Parameters\ncolumnVisibility\n\nA Binding to state that controls the visibility of the leading columns.\n\nsidebar\n\nThe view to show in the leading column.\n\ncontent\n\nThe view to show in the middle column.\n\ndetail\n\nThe view to show in the detail area.\n\nSee Also\nHiding columns in a navigation split view\ninit(columnVisibility: Binding<NavigationSplitViewVisibility>, sidebar: () -> Sidebar, detail: () -> Detail)\nCreates a two-column navigation split view that enables programmatic control of the sidebar\u2019s visibility."
    },
    {
        "title": "init(value:total:)",
        "url": "https://developer.apple.com/documentation/swiftui/progressview/init(value:total:)",
        "html": "Parameters\nvalue\n\nThe completed amount of the task to this point, in a range of 0.0 to total, or nil if the progress is indeterminate.\n\ntotal\n\nThe full amount representing the complete scope of the task, meaning the task is complete if value equals total. The default value is 1.0.\n\nDiscussion\n\nIf the value is non-nil, but outside the range of 0.0 through total, the progress view pins the value to those limits, rounding to the nearest possible bound. A value of nil represents indeterminate progress, in which case the progress view ignores total.\n\nSee Also\nCreating a determinate progress view\ninit(Progress)\nCreates a progress view for visualizing the given progress instance.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\ninit<V>(LocalizedStringKey, value: V?, total: V)\nCreates a progress view for showing determinate progress that generates its label from a localized string.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\ninit<S, V>(S, value: V?, total: V)\nCreates a progress view for showing determinate progress that generates its label from a string.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\ninit<V>(value: V?, total: V, label: () -> Label)\nCreates a progress view for showing determinate progress, with a custom label.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\ninit<V>(value: V?, total: V, label: () -> Label, currentValueLabel: () -> CurrentValueLabel)\nCreates a progress view for showing determinate progress, with a custom label.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View."
    },
    {
        "title": "init(_:sources:selection:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/picker/init(_:sources:selection:content:)-6e1x",
        "html": "Parameters\ntitleKey\n\nA localized string key that describes the purpose of selecting an option.\n\nsources\n\nA collection of values used as the source for displaying the Picker\u2019s selection.\n\nselection\n\nThe key path of the values that determines the currently-selected options. When a user selects an option from the picker, the values at the key path of all items in the sources collection are updated with the selected option.\n\ncontent\n\nA view that contains the set of options.\n\nDiscussion\n\nIf the wrapped values of the collection passed to sources are not all the same, some styles render the selection in a mixed state. The specific presentation depends on the style. For example, a Picker with a menu style uses dashes instead of checkmarks to indicate the selected values.\n\nIn the following example, a picker in a document inspector controls the thickness of borders for the currently-selected shapes, which can be of any number.\n\nenum Thickness: String, CaseIterable, Identifiable {\n    case thin\n    case regular\n    case thick\n\n\n    var id: String { rawValue }\n}\n\n\nstruct Border {\n    var color: Color\n    var thickness: Thickness\n}\n\n\n@State private var selectedObjectBorders = [\n    Border(color: .black, thickness: .thin),\n    Border(color: .red, thickness: .thick)\n]\n\n\nPicker(\n    \"Border Thickness\",\n    sources: $selectedObjectBorders,\n    selection: \\.thickness\n) {\n    ForEach(Thickness.allCases) { thickness in\n        Text(thickness.rawValue)\n    }\n}\n\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a picker for a collection\ninit<C, S>(S, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)\nCreates a picker bound to a collection of bindings that generates its label from a string.\nAvailable when Label is Text, SelectionValue conforms to Hashable, and Content conforms to View.\ninit<C>(sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content, label: () -> Label)\nCreates a picker that displays a custom label.\nAvailable when Label conforms to View, SelectionValue conforms to Hashable, and Content conforms to View."
    },
    {
        "title": "init(_:children:)",
        "url": "https://developer.apple.com/documentation/swiftui/outlinegroup/init(_:children:)-1gj6q",
        "html": "Parameters\nroot\n\nThe root of a collection of tree-structured, identified data.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data. A non-nil but empty value denotes an element capable of having children that\u2019s currently childless, such as an empty directory in a file system. On the other hand, if the property at the key path is nil, then the outline group treats data as a leaf in the tree, like a regular file in a file system.\n\nDiscussion\n\nThis initializer provides a default TableRowBuilder using TableRow for each data element.\n\nThis initializer creates an instance that uniquely identifies table rows across updates based on the identity of the underlying data element.\n\nAll generated disclosure groups begin in the collapsed state.\n\nSee Also\nCreating an outline group in a table\ninit<DataElement>(Data, children: KeyPath<DataElement, Data?>)\nCreates an outline group from a collection of root data elements and a key path to element\u2019s children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to TableRowContent, Parent is Leaf, Leaf is Subgroup, and Data.Element is Parent.TableRowValue.\ninit<DataElement>(Data, children: KeyPath<DataElement, Data?>, content: (DataElement) -> Leaf)\nCreates an outline group from a collection of root data elements and a key path to element\u2019s children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to TableRowContent, Parent is Leaf, Leaf is Subgroup, and Data.Element is Parent.TableRowValue.\ninit<DataElement>(DataElement, children: KeyPath<DataElement, Data?>, content: (DataElement) -> Leaf)\nCreates an outline group from a root data element and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to TableRowContent, Parent is Leaf, Leaf is Subgroup, and Data.Element is Parent.TableRowValue.\ninit<DataElement>(DataElement, id: KeyPath<DataElement, ID>, children: KeyPath<DataElement, Data?>, content: (DataElement) -> Leaf)\nCreates an outline group from a root data element, a key path to the its identifier, as well as a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to TableRowContent, Parent is Leaf, Leaf is Subgroup, and Data.Element is Parent.TableRowValue.\ninit<DataElement>(DataElement, id: KeyPath<DataElement, ID>, children: KeyPath<DataElement, Data?>, content: (DataElement) -> Leaf)\nCreates an outline group from a root data element, a key path to the its identifier, as well as a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to TableRowContent, Parent is Leaf, Leaf is Subgroup, and Data.Element is Parent.TableRowValue."
    },
    {
        "title": "init(_:children:)",
        "url": "https://developer.apple.com/documentation/swiftui/outlinegroup/init(_:children:)-3bnhx",
        "html": "Parameters\ndata\n\nA collection of tree-structured, identified data.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data. A non-nil but empty value denotes an element capable of having children that\u2019s currently childless, such as an empty directory in a file system. On the other hand, if the property at the key path is nil, then the outline group treats data as a leaf in the tree, like a regular file in a file system.\n\nDiscussion\n\nThis initializer provides a default TableRowBuilder using TableRow for each data element.\n\nThis initializer creates an instance that uniquely identifies table rows across updates based on the identity of the underlying data element.\n\nAll generated disclosure groups begin in the collapsed state.\n\nSee Also\nCreating an outline group in a table\ninit<DataElement>(DataElement, children: KeyPath<DataElement, Data?>)\nCreates an outline group from a root data element and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to TableRowContent, Parent is Leaf, Leaf is Subgroup, and Data.Element is Parent.TableRowValue.\ninit<DataElement>(Data, children: KeyPath<DataElement, Data?>, content: (DataElement) -> Leaf)\nCreates an outline group from a collection of root data elements and a key path to element\u2019s children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to TableRowContent, Parent is Leaf, Leaf is Subgroup, and Data.Element is Parent.TableRowValue.\ninit<DataElement>(DataElement, children: KeyPath<DataElement, Data?>, content: (DataElement) -> Leaf)\nCreates an outline group from a root data element and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to TableRowContent, Parent is Leaf, Leaf is Subgroup, and Data.Element is Parent.TableRowValue.\ninit<DataElement>(DataElement, id: KeyPath<DataElement, ID>, children: KeyPath<DataElement, Data?>, content: (DataElement) -> Leaf)\nCreates an outline group from a root data element, a key path to the its identifier, as well as a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to TableRowContent, Parent is Leaf, Leaf is Subgroup, and Data.Element is Parent.TableRowValue.\ninit<DataElement>(DataElement, id: KeyPath<DataElement, ID>, children: KeyPath<DataElement, Data?>, content: (DataElement) -> Leaf)\nCreates an outline group from a root data element, a key path to the its identifier, as well as a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to TableRowContent, Parent is Leaf, Leaf is Subgroup, and Data.Element is Parent.TableRowValue."
    },
    {
        "title": "navigationBarTitle(_:displayMode:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/navigationbartitle(_:displaymode:)-8buvp",
        "html": "Deprecated\n\nUse navigationTitle(_:) with navigationBarTitleDisplayMode(_:).\n\nParameters\ntitle\n\nA title for this view to display in the navigation bar.\n\ndisplayMode\n\nThe style to use for displaying the navigation bar title.\n\nDiscussion\n\nUse navigationBarTitle(_:displayMode:) to set the title of the navigation bar for this view and specify a display mode for the title from one of the NavigationBarItem.TitleDisplayMode styles. This modifier only takes effect when this view is inside of and visible within a NavigationView.\n\nIn the example below, text for the navigation bar title is provided using a Text view. The navigation bar title\u2019s NavigationBarItem.TitleDisplayMode is set to .inline which places the navigation bar title in the bounds of the navigation bar.\n\nstruct FlavorView: View {\n   let items = [\"Chocolate\", \"Vanilla\", \"Strawberry\", \"Mint Chip\",\n                \"Pistachio\"]\n   var body: some View {\n        NavigationView {\n            List(items, id: \\.self) {\n                Text($0)\n            }\n            .navigationBarTitle(Text(\"Today's Flavors\", displayMode: .inline))\n        }\n    }\n}\n\nSee Also\nAuxiliary view modifiers\nfunc navigationBarTitle(Text) -> some View\nSets the title in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle(LocalizedStringKey) -> some View\nSets the title of this view\u2019s navigation bar with a localized string.\nDeprecated\nfunc navigationBarTitle<S>(S) -> some View\nSets the title of this view\u2019s navigation bar with a string.\nDeprecated\nfunc navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarItems<L>(leading: L) -> some View\nSets the navigation bar items for this view.\nDeprecated\nfunc navigationBarItems<L, T>(leading: L, trailing: T) -> some View\nSets the navigation bar items for this view.\nDeprecated\nfunc navigationBarItems<T>(trailing: T) -> some View\nConfigures the navigation bar items for this view.\nDeprecated\nfunc navigationBarHidden(Bool) -> some View\nHides the navigation bar for this view.\nDeprecated\nfunc statusBar(hidden: Bool) -> some View\nSets the visibility of the status bar.\nDeprecated\nfunc contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View\nAdds a context menu to the view.\nDeprecated"
    },
    {
        "title": "navigationBarTitle(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/navigationbartitle(_:)-7fhkr",
        "html": "Deprecated\n\nUse navigationTitle(_:) instead.\n\nParameters\ntitleKey\n\nA key to a localized description of this view to display in the navigation bar.\n\nDiscussion\n\nUse navigationBarTitle(_:) to set the title of the navigation bar using a LocalizedStringKey that will be used to search for a matching localized string in the application\u2019s localizable strings assets.\n\nThis modifier only takes effect when this view is inside of and visible within a NavigationView.\n\nIn the example below, a string constant is used to access a LocalizedStringKey that will be resolved at run time to provide a title for the navigation bar. If the localization key cannot be resolved, the text of the key name will be used as the title text.\n\nstruct FlavorView: View {\n    let items = [\"Chocolate\", \"Vanilla\", \"Strawberry\", \"Mint Chip\",\n                 \"Pistachio\"]\n    var body: some View {\n        NavigationView {\n            List(items, id: \\.self) {\n                Text($0)\n            }\n            .navigationBarTitle(\"Today's Flavors\")\n        }\n    }\n}\n\nSee Also\nAuxiliary view modifiers\nfunc navigationBarTitle(Text) -> some View\nSets the title in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle<S>(S) -> some View\nSets the title of this view\u2019s navigation bar with a string.\nDeprecated\nfunc navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarItems<L>(leading: L) -> some View\nSets the navigation bar items for this view.\nDeprecated\nfunc navigationBarItems<L, T>(leading: L, trailing: T) -> some View\nSets the navigation bar items for this view.\nDeprecated\nfunc navigationBarItems<T>(trailing: T) -> some View\nConfigures the navigation bar items for this view.\nDeprecated\nfunc navigationBarHidden(Bool) -> some View\nHides the navigation bar for this view.\nDeprecated\nfunc statusBar(hidden: Bool) -> some View\nSets the visibility of the status bar.\nDeprecated\nfunc contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View\nAdds a context menu to the view.\nDeprecated"
    },
    {
        "title": "ControlActiveState.inactive",
        "url": "https://developer.apple.com/documentation/swiftui/controlactivestate/inactive",
        "html": "See Also\nGetting control active states\ncase key\ncase active"
    },
    {
        "title": "init(value:in:onEditingChanged:minimumValueLabel:maximumValueLabel:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/slider/init(value:in:oneditingchanged:minimumvaluelabel:maximumvaluelabel:label:)",
        "html": "Deprecated\n\nUse init(value:in:label:minimumValueLabel:maximumValueLabel:onEditingChanged:) instead.\n\nParameters\nvalue\n\nThe selected value within bounds.\n\nbounds\n\nThe range of the valid values. Defaults to 0...1.\n\nonEditingChanged\n\nA callback for when editing begins and ends.\n\nminimumValueLabel\n\nA view that describes bounds.lowerBound.\n\nmaximumValueLabel\n\nA view that describes bounds.lowerBound.\n\nlabel\n\nA View that describes the purpose of the instance. Not all slider styles show the label, but even in those cases, SwiftUI uses the label for accessibility. For example, VoiceOver uses the label to identify the purpose of the slider.\n\nDiscussion\n\nThe value of the created instance is equal to the position of the given value within bounds, mapped into 0...1.\n\nThe slider calls onEditingChanged when editing begins and ends. For example, on iOS, editing begins when the user starts to drag the thumb along the slider\u2019s track.\n\nSee Also\nDeprecated initializers\ninit<V>(value: Binding<V>, in: ClosedRange<V>, onEditingChanged: (Bool) -> Void, label: () -> Label)\nCreates a slider to select a value from a given range, which displays the provided label.\nAvailable when Label conforms to View and ValueLabel is EmptyView.\nDeprecated\ninit<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, onEditingChanged: (Bool) -> Void, label: () -> Label)\nCreates a slider to select a value from a given range, subject to a step increment, which displays the provided label.\nAvailable when Label conforms to View and ValueLabel is EmptyView.\nDeprecated\ninit<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, onEditingChanged: (Bool) -> Void, minimumValueLabel: ValueLabel, maximumValueLabel: ValueLabel, label: () -> Label)\nCreates a slider to select a value from a given range, subject to a step increment, which displays the provided labels.\nAvailable when Label conforms to View and ValueLabel conforms to View.\nDeprecated"
    },
    {
        "title": "init(value:total:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/progressview/init(value:total:label:)",
        "html": "Parameters\nvalue\n\nThe completed amount of the task to this point, in a range of 0.0 to total, or nil if the progress is indeterminate.\n\ntotal\n\nThe full amount representing the complete scope of the task, meaning the task is complete if value equals total. The default value is 1.0.\n\nlabel\n\nA view builder that creates a view that describes the task in progress.\n\nDiscussion\n\nIf the value is non-nil, but outside the range of 0.0 through total, the progress view pins the value to those limits, rounding to the nearest possible bound. A value of nil represents indeterminate progress, in which case the progress view ignores total.\n\nSee Also\nCreating a determinate progress view\ninit(Progress)\nCreates a progress view for visualizing the given progress instance.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\ninit<V>(value: V?, total: V)\nCreates a progress view for showing determinate progress.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\ninit<V>(LocalizedStringKey, value: V?, total: V)\nCreates a progress view for showing determinate progress that generates its label from a localized string.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\ninit<S, V>(S, value: V?, total: V)\nCreates a progress view for showing determinate progress that generates its label from a string.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\ninit<V>(value: V?, total: V, label: () -> Label, currentValueLabel: () -> CurrentValueLabel)\nCreates a progress view for showing determinate progress, with a custom label.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View."
    },
    {
        "title": "init(_:item:subject:message:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(_:item:subject:message:)-9j6rd",
        "html": "Parameters\ntitle\n\nThe title of the share action.\n\nitem\n\nThe item to share.\n\nsubject\n\nA title for the item to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the item to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\nSee Also\nSharing an item with a label\ninit<S>(S, item: URL, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit(LocalizedStringKey, item: URL, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit(Text, item: String, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit(LocalizedStringKey, item: String, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit(Text, item: URL, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable."
    },
    {
        "title": "init(value:in:step:onEditingChanged:)",
        "url": "https://developer.apple.com/documentation/swiftui/slider/init(value:in:step:oneditingchanged:)",
        "html": "Parameters\nvalue\n\nThe selected value within bounds.\n\nbounds\n\nThe range of the valid values. Defaults to 0...1.\n\nstep\n\nThe distance between each valid value.\n\nonEditingChanged\n\nA callback for when editing begins and ends.\n\nDiscussion\n\nThe value of the created instance is equal to the position of the given value within bounds, mapped into 0...1.\n\nThe slider calls onEditingChanged when editing begins and ends. For example, on iOS, editing begins when the user starts to drag the thumb along the slider\u2019s track.\n\nSee Also\nCreating a slider\ninit<V>(value: Binding<V>, in: ClosedRange<V>, onEditingChanged: (Bool) -> Void)\nCreates a slider to select a value from a given range.\nAvailable when Label is EmptyView and ValueLabel is EmptyView."
    },
    {
        "title": "init(_:image:sources:selection:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/picker/init(_:image:sources:selection:content:)-9fk6i",
        "html": "Parameters\ntitleKey\n\nA localized string key that describes the purpose of selecting an option.\n\nimage\n\nThe name of the image resource to lookup.\n\nsources\n\nA collection of values used as the source for displaying he Picker\u2019s selection.\n\nselection\n\nThe key path of the values that determines the currently-selected options. When a user selects an option from the picker, the values at the key path of all items in the sources collection are updated with the selected option.\n\ncontent\n\nA view that contains the set of options.\n\nDiscussion\n\nIf the wrapped values of the collection passed to sources are not all the same, some styles render the selection in a mixed state. The specific presentation depends on the style. For example, a Picker with a menu style uses dashes instead of checkmarks to indicate the selected values.\n\nIn the following example, a picker in a document inspector controls the thickness of borders for the currently-selected shapes, which can be of any number.\n\nenum Thickness: String, CaseIterable, Identifiable {\n    case thin\n    case regular\n    case thick\n\n\n    var id: String { rawValue }\n}\n\n\nstruct Border {\n    var color: Color\n    var thickness: Thickness\n}\n\n\n@State private var selectedObjectBorders = [\n    Border(color: .black, thickness: .thin),\n    Border(color: .red, thickness: .thick)\n]\n\n\nPicker(\n    \"Border Thickness\",\n    sources: $selectedObjectBorders,\n    selection: \\.thickness\n) {\n    ForEach(Thickness.allCases) { thickness in\n        Text(thickness.rawValue)\n    }\n}\n\nSee Also\nCreating a picker with an image resource label\ninit<S>(S, image: ImageResource, selection: Binding<SelectionValue>, content: () -> Content)\nCreates a picker that generates its label from a string and image resource.\nAvailable when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View.\ninit(LocalizedStringKey, image: ImageResource, selection: Binding<SelectionValue>, content: () -> Content)\nCreates a picker that generates its label from a localized string key and image resource\nAvailable when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View.\ninit<C, S>(S, image: ImageResource, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)\nCreates a picker bound to a collection of bindings that generates its label from a string and image resource.\nAvailable when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View."
    },
    {
        "title": "Path.Element.move(to:)",
        "url": "https://developer.apple.com/documentation/swiftui/path/element/move(to:)",
        "html": "See Also\nGetting path elements\ncase closeSubpath\nA line from the start point of the current subpath (if any) to the current point, which terminates the subpath.\ncase curve(to: CGPoint, control1: CGPoint, control2: CGPoint)\nA cubic B\u00e9zier curve from the previous current point to the given end-point, using the two control points to define the curve.\ncase line(to: CGPoint)\nA line from the previous current point to the given point, which becomes the new current point.\ncase quadCurve(to: CGPoint, control: CGPoint)\nA quadratic B\u00e9zier curve from the previous current point to the given end-point, using the single control point to define the curve."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/progressview/init(_:)-3q5nf",
        "html": "Parameters\ntitle\n\nA string that describes the task in progress.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(verbatim:). See Text for more information about localizing strings. To initialize a progress view with a localized string key, use the corresponding initializer that takes a LocalizedStringKey instance.\n\nSee Also\nCreating an indeterminate progress view\ninit()\nCreates a progress view for showing indeterminate progress, without a label.\nAvailable when Label conforms to View and CurrentValueLabel is EmptyView.\ninit(label: () -> Label)\nCreates a progress view for showing indeterminate progress that displays a custom label.\nAvailable when Label conforms to View and CurrentValueLabel is EmptyView.\ninit(LocalizedStringKey)\nCreates a progress view for showing indeterminate progress that generates its label from a localized string.\nAvailable when Label conforms to View and CurrentValueLabel is EmptyView."
    },
    {
        "title": "init(_:selection:supportsOpacity:)",
        "url": "https://developer.apple.com/documentation/swiftui/colorpicker/init(_:selection:supportsopacity:)-3fsc9",
        "html": "Parameters\ntitleKey\n\nThe key for the localized title of the picker.\n\nselection\n\nA Binding to the variable that displays the selected CGColor.\n\nsupportsOpacity\n\nA Boolean value that indicates whether the color picker allows adjustments to the selected color\u2019s opacity; the default is true.\n\nSee Also\nCreating a core graphics color picker\ninit(selection: Binding<CGColor>, supportsOpacity: Bool, label: () -> Label)\nCreates an instance that selects a color.\ninit<S>(S, selection: Binding<CGColor>, supportsOpacity: Bool)\nCreates a color picker with a text label generated from a title string.\nAvailable when Label is Text."
    },
    {
        "title": "init(label:)",
        "url": "https://developer.apple.com/documentation/swiftui/progressview/init(label:)",
        "html": "Parameters\nlabel\n\nA view builder that creates a view that describes the task in progress.\n\nSee Also\nCreating an indeterminate progress view\ninit()\nCreates a progress view for showing indeterminate progress, without a label.\nAvailable when Label conforms to View and CurrentValueLabel is EmptyView.\ninit(LocalizedStringKey)\nCreates a progress view for showing indeterminate progress that generates its label from a localized string.\nAvailable when Label conforms to View and CurrentValueLabel is EmptyView.\ninit<S>(S)\nCreates a progress view for showing indeterminate progress that generates its label from a string.\nAvailable when Label conforms to View and CurrentValueLabel is EmptyView."
    },
    {
        "title": "init(_:children:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/outlinegroup/init(_:children:content:)-4ky20",
        "html": "Parameters\ndata\n\nA collection of tree-structured, identified data.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data. A non-nil but empty value denotes an element capable of having children that\u2019s currently childless, such as an empty directory in a file system. On the other hand, if the property at the key path is nil, then the outline group treats data as a leaf in the tree, like a regular file in a file system.\n\ncontent\n\nA table row builder that produces a row based on an element in data.\n\nDiscussion\n\nThis initializer exposes content as a TableRowBuilder to allow custom table row content for each data element.\n\nThis initializer creates an instance that uniquely identifies table rows across updates based on the identity of the underlying data element.\n\nAll generated disclosure groups begin in the collapsed state.\n\nSee Also\nCreating an outline group in a table\ninit<DataElement>(DataElement, children: KeyPath<DataElement, Data?>)\nCreates an outline group from a root data element and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to TableRowContent, Parent is Leaf, Leaf is Subgroup, and Data.Element is Parent.TableRowValue.\ninit<DataElement>(Data, children: KeyPath<DataElement, Data?>)\nCreates an outline group from a collection of root data elements and a key path to element\u2019s children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to TableRowContent, Parent is Leaf, Leaf is Subgroup, and Data.Element is Parent.TableRowValue.\ninit<DataElement>(DataElement, children: KeyPath<DataElement, Data?>, content: (DataElement) -> Leaf)\nCreates an outline group from a root data element and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to TableRowContent, Parent is Leaf, Leaf is Subgroup, and Data.Element is Parent.TableRowValue.\ninit<DataElement>(DataElement, id: KeyPath<DataElement, ID>, children: KeyPath<DataElement, Data?>, content: (DataElement) -> Leaf)\nCreates an outline group from a root data element, a key path to the its identifier, as well as a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to TableRowContent, Parent is Leaf, Leaf is Subgroup, and Data.Element is Parent.TableRowValue.\ninit<DataElement>(DataElement, id: KeyPath<DataElement, ID>, children: KeyPath<DataElement, Data?>, content: (DataElement) -> Leaf)\nCreates an outline group from a root data element, a key path to the its identifier, as well as a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to TableRowContent, Parent is Leaf, Leaf is Subgroup, and Data.Element is Parent.TableRowValue."
    },
    {
        "title": "init(_:children:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/outlinegroup/init(_:children:content:)-8p1lk",
        "html": "Parameters\nroot\n\nThe root of a collection of tree-structured, identified data.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data. A non-nil but empty value denotes an element capable of having children that\u2019s currently childless, such as an empty directory in a file system. On the other hand, if the property at the key path is nil, then the outline group treats data as a leaf in the tree, like a regular file in a file system.\n\ncontent\n\nA table row builder that produces a row based on an element in data.\n\nDiscussion\n\nThis initializer exposes content as a TableRowBuilder to allow custom table row content for each data element.\n\nThis initializer creates an instance that uniquely identifies table rows across updates based on the identity of the underlying data element.\n\nAll generated disclosure groups begin in the collapsed state.\n\nSee Also\nCreating an outline group in a table\ninit<DataElement>(DataElement, children: KeyPath<DataElement, Data?>)\nCreates an outline group from a root data element and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to TableRowContent, Parent is Leaf, Leaf is Subgroup, and Data.Element is Parent.TableRowValue.\ninit<DataElement>(Data, children: KeyPath<DataElement, Data?>)\nCreates an outline group from a collection of root data elements and a key path to element\u2019s children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to TableRowContent, Parent is Leaf, Leaf is Subgroup, and Data.Element is Parent.TableRowValue.\ninit<DataElement>(Data, children: KeyPath<DataElement, Data?>, content: (DataElement) -> Leaf)\nCreates an outline group from a collection of root data elements and a key path to element\u2019s children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to TableRowContent, Parent is Leaf, Leaf is Subgroup, and Data.Element is Parent.TableRowValue.\ninit<DataElement>(DataElement, id: KeyPath<DataElement, ID>, children: KeyPath<DataElement, Data?>, content: (DataElement) -> Leaf)\nCreates an outline group from a root data element, a key path to the its identifier, as well as a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to TableRowContent, Parent is Leaf, Leaf is Subgroup, and Data.Element is Parent.TableRowValue.\ninit<DataElement>(DataElement, id: KeyPath<DataElement, ID>, children: KeyPath<DataElement, Data?>, content: (DataElement) -> Leaf)\nCreates an outline group from a root data element, a key path to the its identifier, as well as a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to TableRowContent, Parent is Leaf, Leaf is Subgroup, and Data.Element is Parent.TableRowValue."
    },
    {
        "title": "Path.Element.quadCurve(to:control:)",
        "url": "https://developer.apple.com/documentation/swiftui/path/element/quadcurve(to:control:)",
        "html": "Discussion\n\nThe end-point of the curve becomes the new current point.\n\nSee Also\nGetting path elements\ncase closeSubpath\nA line from the start point of the current subpath (if any) to the current point, which terminates the subpath.\ncase curve(to: CGPoint, control1: CGPoint, control2: CGPoint)\nA cubic B\u00e9zier curve from the previous current point to the given end-point, using the two control points to define the curve.\ncase line(to: CGPoint)\nA line from the previous current point to the given point, which becomes the new current point.\ncase move(to: CGPoint)\nA path element that terminates the current subpath (without closing it) and defines a new current point."
    },
    {
        "title": "role",
        "url": "https://developer.apple.com/documentation/swiftui/shape/role-681up",
        "html": "Discussion\n\nSwiftUI looks at a shape\u2019s role when deciding how to apply a ShapeStyle at render time. The Shape protocol provides a default implementation with a value of ShapeRole.fill. If you create a composite shape, you can provide an override of this property to return another value, if appropriate."
    },
    {
        "title": "init(colors:center:angle:)",
        "url": "https://developer.apple.com/documentation/swiftui/angulargradient/init(colors:center:angle:)",
        "html": "See Also\nCreating a full rotation angular gradient\ninit(gradient: Gradient, center: UnitPoint, angle: Angle)\nCreates a conic gradient that completes a full turn.\ninit(stops: [Gradient.Stop], center: UnitPoint, angle: Angle)\nCreates a conic gradient from a collection of color stops that completes a full turn."
    },
    {
        "title": "init(gradient:center:angle:)",
        "url": "https://developer.apple.com/documentation/swiftui/angulargradient/init(gradient:center:angle:)",
        "html": "See Also\nCreating a full rotation angular gradient\ninit(colors: [Color], center: UnitPoint, angle: Angle)\nCreates a conic gradient from a collection of colors that completes a full turn.\ninit(stops: [Gradient.Stop], center: UnitPoint, angle: Angle)\nCreates a conic gradient from a collection of color stops that completes a full turn."
    },
    {
        "title": "init(_:id:children:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/outlinegroup/init(_:id:children:content:)-8lns3",
        "html": "Parameters\nroot\n\nThe root of a collection of tree-structured, identified data.\n\nid\n\nThe key path to a data element\u2019s identifier.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data. A non-nil but empty value denotes an element capable of having children that\u2019s currently childless, such as an empty directory in a file system. On the other hand, if the property at the key path is nil, then the outline group treats data as a leaf in the tree, like a regular file in a file system.\n\ncontent\n\nA view builder that produces a content view based on an element in data.\n\nDiscussion\n\nThis initializer exposes content as a TableRowBuilder to allow custom table row content for each data element.\n\nThis initializer creates an instance that uniquely identifies views across updates based on the identity of the underlying data element.\n\nAll generated disclosure groups begin in the collapsed state.\n\nMake sure that the identifier of a data element only changes if you mean to replace that element with a new element, one with a new identity. If the ID of an element changes, then the content view generated from that element will lose any current state and animations.\n\nSee Also\nCreating an outline group in a table\ninit<DataElement>(DataElement, children: KeyPath<DataElement, Data?>)\nCreates an outline group from a root data element and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to TableRowContent, Parent is Leaf, Leaf is Subgroup, and Data.Element is Parent.TableRowValue.\ninit<DataElement>(Data, children: KeyPath<DataElement, Data?>)\nCreates an outline group from a collection of root data elements and a key path to element\u2019s children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to TableRowContent, Parent is Leaf, Leaf is Subgroup, and Data.Element is Parent.TableRowValue.\ninit<DataElement>(Data, children: KeyPath<DataElement, Data?>, content: (DataElement) -> Leaf)\nCreates an outline group from a collection of root data elements and a key path to element\u2019s children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to TableRowContent, Parent is Leaf, Leaf is Subgroup, and Data.Element is Parent.TableRowValue.\ninit<DataElement>(DataElement, children: KeyPath<DataElement, Data?>, content: (DataElement) -> Leaf)\nCreates an outline group from a root data element and a key path to its children.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Parent conforms to TableRowContent, Parent is Leaf, Leaf is Subgroup, and Data.Element is Parent.TableRowValue."
    },
    {
        "title": "navigationViewStyle(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/navigationviewstyle(_:)",
        "html": "Deprecated\n\nReplace a styled NavigationView with a NavigationStack or NavigationSplitView. For more information, see Migrating to new navigation types.\n\nDiscussion\n\nUse this modifier to change the appearance and behavior of navigation views. For example, by default, navigation views appear with multiple columns in wider environments, like iPad in landscape orientation:\n\nYou can apply the stack style to force single-column stack navigation in these environments:\n\nNavigationView {\n    List {\n        NavigationLink(\"Purple\", destination: ColorDetail(color: .purple))\n        NavigationLink(\"Pink\", destination: ColorDetail(color: .pink))\n        NavigationLink(\"Orange\", destination: ColorDetail(color: .orange))\n    }\n    .navigationTitle(\"Colors\")\n\n\n    Text(\"Select a Color\") // A placeholder to show before selection.\n}\n.navigationViewStyle(.stack)\n\n\nSee Also\nStyling navigation views\nprotocol NavigationViewStyle\nA specification for the appearance and interaction of a navigation view.\nDeprecated"
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/navigationsplitviewvisibility/automatic",
        "html": "Discussion\n\nThis computed property returns one of the three concrete cases: detailOnly, doubleColumn, or all.\n\nSee Also\nGetting visibilities\nstatic var all: NavigationSplitViewVisibility\nShow all the columns of a three-column navigation split view.\nstatic var doubleColumn: NavigationSplitViewVisibility\nShow the content column and detail area of a three-column navigation split view, or the sidebar column and detail area of a two-column navigation split view.\nstatic var detailOnly: NavigationSplitViewVisibility\nHide the leading two columns of a three-column navigation split view, so that just the detail area shows."
    },
    {
        "title": "dropDestination(for:action:)",
        "url": "https://developer.apple.com/documentation/swiftui/dynamicviewcontent/dropdestination(for:action:)",
        "html": "Parameters\npayloadType\n\nType of the models that are dropped.\n\naction\n\nA closure that SwiftUI invokes when elements are added to the view. The closure takes two arguments: The first argument is the offset relative to the dynamic view\u2019s underlying collection of data. The second argument is an array of Transferable items that represents the data that you want to insert.\n\nReturn Value\n\nA view that calls action when elements are inserted into the original view.\n\nDiscussion\nstruct Profile: Identifiable {\n    let givenName: String\n    let familyName: String\n    let id = UUID()\n}\n\n\n@State private var profiles: [Profile] = [\n    Person(givenName: \"Juan\", familyName: \"Chavez\"),\n    Person(givenName: \"Mei\", familyName: \"Chen\"),\n    Person(givenName: \"Tom\", familyName: \"Clark\"),\n    Person(givenName: \"Gita\", familyName: \"Kumar\")\n]\n\n\nvar body: some View {\n    List {\n        ForEach(profiles) { profile in\n            Text(profile.givenName)\n        }\n        .dropDestination(for: Profile.self) { receivedProfiles, offset in\n            profiles.insert(contentsOf: receivedProfiles, at: offset)\n        }\n    }\n}\n\nSee Also\nResponding to updates\nfunc onDelete(perform: Optional<(IndexSet) -> Void>) -> some DynamicViewContent\nSets the deletion action for the dynamic view.\nfunc onInsert(of: [UTType], perform: (Int, [NSItemProvider]) -> Void) -> some DynamicViewContent\nSets the insert action for the dynamic view.\nfunc onMove(perform: Optional<(IndexSet, Int) -> Void>) -> some DynamicViewContent\nSets the move action for the dynamic view."
    },
    {
        "title": "init(_:value:step:format:onEditingChanged:)",
        "url": "https://developer.apple.com/documentation/swiftui/stepper/init(_:value:step:format:oneditingchanged:)-6l846",
        "html": "Parameters\ntitleKey\n\nThe key for the stepper\u2019s localized title describing the purpose of the stepper.\n\nvalue\n\nA Binding to a value that you provide.\n\nstep\n\nThe amount to increment or decrement value each time the user clicks or taps the stepper\u2019s plus or minus button, respectively. Defaults to 1.\n\nformat\n\nA format style of type F to use when converting between the string the user edits and the underlying value of type F.FormatInput. If format can\u2019t perform the conversion, the stepper leaves value unchanged. If the user stops editing the text in an invalid state, the stepper updates the text to the last known valid value.\n\nonEditingChanged\n\nA closure that\u2019s called when editing begins and ends. For example, on iOS, the user may touch and hold the increment or decrement buttons on a Stepper which causes the execution of the onEditingChanged closure at the start and end of the gesture.\n\nDiscussion\n\nUse Stepper(_:value:step:onEditingChanged:) to create a stepper with a custom title that increments or decrements a binding to value by the step size you specify, while displaying the current value.\n\nIn the example below, the stepper increments or decrements the binding value by 5 each time the user clicks or taps on the control\u2019s increment or decrement buttons, respectively:\n\nstruct StepperView: View {\n    @State private var value = 1\n\n\n    var body: some View {\n        Stepper(\"Stepping by \\(step)\",\n            value: $value,\n            step: 5,\n            format: .number\n        )\n        .padding(10)\n    }\n}\n\n\nSee Also\nCreating a stepper\ninit<V>(value: Binding<V>, step: V.Stride, label: () -> Label, onEditingChanged: (Bool) -> Void)\nCreates a stepper configured to increment or decrement a binding to a value using a step value you provide.\nAvailable when Label conforms to View.\ninit<F>(value: Binding<F.FormatInput>, step: F.FormatInput.Stride, format: F, label: () -> Label, onEditingChanged: (Bool) -> Void)\nCreates a stepper configured to increment or decrement a binding to a value using a step value you provide, displaying its value with an applied format style.\nAvailable when Label conforms to View.\ninit<V>(LocalizedStringKey, value: Binding<V>, step: V.Stride, onEditingChanged: (Bool) -> Void)\nCreates a stepper with a title key and configured to increment and decrement a binding to a value and step amount you provide.\nAvailable when Label is Text.\ninit<S, V>(S, value: Binding<V>, step: V.Stride, onEditingChanged: (Bool) -> Void)\nCreates a stepper with a title and configured to increment and decrement a binding to a value and step amount you provide.\nAvailable when Label is Text.\ninit<S, F>(S, value: Binding<F.FormatInput>, step: F.FormatInput.Stride, format: F, onEditingChanged: (Bool) -> Void)\nCreates a stepper with a title and configured to increment and decrement a binding to a value and step amount you provide, displaying its value with an applied format style.\nAvailable when Label is Text."
    },
    {
        "title": "displayedComponents",
        "url": "https://developer.apple.com/documentation/swiftui/datepickerstyleconfiguration/displayedcomponents",
        "html": "See Also\nLabeling the date picker\nlet label: DatePickerStyleConfiguration.Label\nA description of the DatePicker.\nstruct Label\nA type-erased label of a DatePicker."
    },
    {
        "title": "init(gradient:center:startAngle:endAngle:)",
        "url": "https://developer.apple.com/documentation/swiftui/angulargradient/init(gradient:center:startangle:endangle:)",
        "html": "See Also\nCreating a partial rotation angular gradient\ninit(colors: [Color], center: UnitPoint, startAngle: Angle, endAngle: Angle)\nCreates an angular gradient from a collection of colors.\ninit(stops: [Gradient.Stop], center: UnitPoint, startAngle: Angle, endAngle: Angle)\nCreates an angular gradient from a collection of color stops."
    },
    {
        "title": "maximumDate",
        "url": "https://developer.apple.com/documentation/swiftui/datepickerstyleconfiguration/maximumdate",
        "html": "See Also\nEstablishing the date range\nvar minimumDate: Date?\nThe oldest selectable date."
    },
    {
        "title": "init(stops:center:angle:)",
        "url": "https://developer.apple.com/documentation/swiftui/angulargradient/init(stops:center:angle:)",
        "html": "See Also\nCreating a full rotation angular gradient\ninit(gradient: Gradient, center: UnitPoint, angle: Angle)\nCreates a conic gradient that completes a full turn.\ninit(colors: [Color], center: UnitPoint, angle: Angle)\nCreates a conic gradient from a collection of colors that completes a full turn."
    },
    {
        "title": "init(stops:center:startAngle:endAngle:)",
        "url": "https://developer.apple.com/documentation/swiftui/angulargradient/init(stops:center:startangle:endangle:)",
        "html": "See Also\nCreating a partial rotation angular gradient\ninit(gradient: Gradient, center: UnitPoint, startAngle: Angle, endAngle: Angle)\nCreates an angular gradient.\ninit(colors: [Color], center: UnitPoint, startAngle: Angle, endAngle: Angle)\nCreates an angular gradient from a collection of colors."
    },
    {
        "title": "init(colors:center:startAngle:endAngle:)",
        "url": "https://developer.apple.com/documentation/swiftui/angulargradient/init(colors:center:startangle:endangle:)",
        "html": "See Also\nCreating a partial rotation angular gradient\ninit(gradient: Gradient, center: UnitPoint, startAngle: Angle, endAngle: Angle)\nCreates an angular gradient.\ninit(stops: [Gradient.Stop], center: UnitPoint, startAngle: Angle, endAngle: Angle)\nCreates an angular gradient from a collection of color stops."
    },
    {
        "title": "Data",
        "url": "https://developer.apple.com/documentation/swiftui/dynamicviewcontent/data-swift.associatedtype",
        "html": "Required\n\nSee Also\nManaging the data\nvar data: Self.Data\nThe collection of underlying data.\n\nRequired"
    },
    {
        "title": "onInsert(of:perform:)",
        "url": "https://developer.apple.com/documentation/swiftui/dynamicviewcontent/oninsert(of:perform:)-40hwa",
        "html": "Deprecated\n\nUse onInsert(of:perform:) instead.\n\nParameters\nacceptedTypeIdentifiers\n\nAn array of UTI types that the dynamic view supports.\n\naction\n\nA closure that SwiftUI invokes when elements are added to the view. The closure takes two arguments: The first argument is the offset relative to the dynamic view\u2019s underlying collection of data. The second argument is an array of NSItemProvider that represents the data that you want to insert.\n\nReturn Value\n\nA view that calls action when elements are inserted into the original view."
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/disclosuregroup/init(_:content:)-9byxn",
        "html": "Parameters\nlabel\n\nA description of the content of the disclosure group.\n\ncontent\n\nThe content shown when the disclosure group expands.\n\nSee Also\nCreating a group with a string label\ninit(LocalizedStringKey, content: () -> Content)\nCreates a disclosure group, using a provided localized string key to create a text view for the label.\nAvailable when Label is Text and Content conforms to View.\ninit(LocalizedStringKey, isExpanded: Binding<Bool>, content: () -> Content)\nCreates a disclosure group, using a provided localized string key to create a text view for the label, and a binding to the expansion state (expanded or collapsed).\nAvailable when Label is Text and Content conforms to View.\ninit<S>(S, isExpanded: Binding<Bool>, content: () -> Content)\nCreates a disclosure group, using a provided string to create a text view for the label, and a binding to the expansion state (expanded or collapsed).\nAvailable when Label is Text and Content conforms to View."
    },
    {
        "title": "init(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tabview/init(content:)",
        "html": "See Also\nCreating a tab view\ninit(selection: Binding<SelectionValue>?, content: () -> Content)\nCreates an instance that selects from content associated with Selection values."
    },
    {
        "title": "data",
        "url": "https://developer.apple.com/documentation/swiftui/dynamicviewcontent/data-swift.property",
        "html": "Required\n\nSee Also\nManaging the data\nassociatedtype Data : Collection\nThe type of the underlying collection of data.\n\nRequired"
    },
    {
        "title": "SidebarRowSize.large",
        "url": "https://developer.apple.com/documentation/swiftui/sidebarrowsize/large",
        "html": "See Also\nGetting row sizes\ncase small\nThe standard \u201csmall\u201d row size\ncase medium\nThe standard \u201cmedium\u201d row size"
    },
    {
        "title": "navigationBarTitle(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/navigationbartitle(_:)-25l7u",
        "html": "Deprecated\n\nUse navigationTitle(_:) instead.\n\nParameters\ntitle\n\nA title for this view to display in the navigation bar.\n\nDiscussion\n\nUse navigationBarTitle(_:) to set the title of the navigation bar using a String. This modifier only takes effect when this view is inside of and visible within a NavigationView.\n\nIn the example below, text for the navigation bar title is provided using a string:\n\nstruct FlavorView: View {\n    let items = [\"Chocolate\", \"Vanilla\", \"Strawberry\", \"Mint Chip\",\n                 \"Pistachio\"]\n    let text = \"Today's Flavors\"\n    var body: some View {\n        NavigationView {\n            List(items, id: \\.self) {\n                Text($0)\n            }\n            .navigationBarTitle(text)\n        }\n    }\n}\n\nSee Also\nAuxiliary view modifiers\nfunc navigationBarTitle(Text) -> some View\nSets the title in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle(LocalizedStringKey) -> some View\nSets the title of this view\u2019s navigation bar with a localized string.\nDeprecated\nfunc navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarItems<L>(leading: L) -> some View\nSets the navigation bar items for this view.\nDeprecated\nfunc navigationBarItems<L, T>(leading: L, trailing: T) -> some View\nSets the navigation bar items for this view.\nDeprecated\nfunc navigationBarItems<T>(trailing: T) -> some View\nConfigures the navigation bar items for this view.\nDeprecated\nfunc navigationBarHidden(Bool) -> some View\nHides the navigation bar for this view.\nDeprecated\nfunc statusBar(hidden: Bool) -> some View\nSets the visibility of the status bar.\nDeprecated\nfunc contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View\nAdds a context menu to the view.\nDeprecated"
    },
    {
        "title": "NavigationBarItem.TitleDisplayMode",
        "url": "https://developer.apple.com/documentation/swiftui/navigationbaritem/titledisplaymode",
        "html": "Overview\n\nUse one of these values with the navigationBarTitleDisplayMode(_:) view modifier to configure the title of a navigation bar.\n\nTopics\nGetting title display modes\ncase automatic\nInherit the display mode from the previous navigation item.\ncase inline\nDisplay the title within the standard bounds of the navigation bar.\ncase large\nDisplay a large title within an expanded navigation bar.\nRelationships\nConforms To\nEquatable\nHashable\nSendable"
    },
    {
        "title": "navigationBarItems(leading:trailing:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/navigationbaritems(leading:trailing:)",
        "html": "Deprecated\n\nUse toolbar(content:) with navigationBarLeading or navigationBarTrailing placement.\n\nParameters\nleading\n\nA view that appears on the leading edge of the title.\n\ntrailing\n\nA view that appears on the trailing edge of the title.\n\nDiscussion\n\nUse navigationBarItems(leading:trailing:) to add navigation bar items to the leading and trailing edges of the navigation bar for this view.\n\nThis modifier only takes effect when this view is inside of and visible within a NavigationView.\n\nOn iOS 14 and later, the leading item supplements a visible back button, instead of replacing it, by default. To hide the back button, use navigationBarBackButtonHidden(_:).\n\nThe example below adds buttons to the leading and trailing edges of the button area of the navigation view:\n\nstruct FlavorView: View {\n    var body: some View {\n        NavigationView {\n            List {\n                Text(\"Chocolate\")\n                Text(\"Vanilla\")\n                Text(\"Strawberry\")\n            }\n            .navigationBarTitle(Text(\"Today\u2018s Flavors\"))\n            .navigationBarItems(leading:\n                HStack {\n                    Button(\"Hours\") {\n                        print(\"Hours tapped!\")\n                    }\n                }, trailing:\n                HStack {\n                    Button(\"Favorites\") {\n                        print(\"Favorites tapped!\")\n                    }\n\n\n                    Button(\"Specials\") {\n                        print(\"Specials tapped!\")\n                    }\n                }\n            )\n        }\n    }\n}\n\nSee Also\nAuxiliary view modifiers\nfunc navigationBarTitle(Text) -> some View\nSets the title in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle(LocalizedStringKey) -> some View\nSets the title of this view\u2019s navigation bar with a localized string.\nDeprecated\nfunc navigationBarTitle<S>(S) -> some View\nSets the title of this view\u2019s navigation bar with a string.\nDeprecated\nfunc navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarItems<L>(leading: L) -> some View\nSets the navigation bar items for this view.\nDeprecated\nfunc navigationBarItems<T>(trailing: T) -> some View\nConfigures the navigation bar items for this view.\nDeprecated\nfunc navigationBarHidden(Bool) -> some View\nHides the navigation bar for this view.\nDeprecated\nfunc statusBar(hidden: Bool) -> some View\nSets the visibility of the status bar.\nDeprecated\nfunc contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View\nAdds a context menu to the view.\nDeprecated"
    },
    {
        "title": "navigationBarItems(trailing:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/navigationbaritems(trailing:)",
        "html": "Deprecated\n\nUse toolbar(content:) with navigationBarTrailing placement.\n\nParameters\ntrailing\n\nA view shown on the trailing edge of the title.\n\nDiscussion\n\nUse navigationBarItems(trailing:) to add navigation bar items to the trailing edge of the navigation bar for this view. This modifier only takes effect when this view is inside of and visible within a NavigationView.\n\nThe example below adds buttons to the trailing edge of the button area of the navigation view:\n\nstruct FlavorView: View {\n    var body: some View {\n        NavigationView {\n            List {\n                Text(\"Chocolate\")\n                Text(\"Vanilla\")\n                Text(\"Strawberry\")\n            }\n            .navigationBarTitle(Text(\"Today\u2018s Flavors\"))\n            .navigationBarItems(trailing:\n                HStack {\n                    Button(\"Hours\") {\n                        print(\"Hours tapped!\")\n                    }\n\n\n                    Button(\"Help\") {\n                        print(\"Help tapped!\")\n                    }\n                }\n            )\n        }\n    }\n}\n\nSee Also\nAuxiliary view modifiers\nfunc navigationBarTitle(Text) -> some View\nSets the title in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle(LocalizedStringKey) -> some View\nSets the title of this view\u2019s navigation bar with a localized string.\nDeprecated\nfunc navigationBarTitle<S>(S) -> some View\nSets the title of this view\u2019s navigation bar with a string.\nDeprecated\nfunc navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarItems<L>(leading: L) -> some View\nSets the navigation bar items for this view.\nDeprecated\nfunc navigationBarItems<L, T>(leading: L, trailing: T) -> some View\nSets the navigation bar items for this view.\nDeprecated\nfunc navigationBarHidden(Bool) -> some View\nHides the navigation bar for this view.\nDeprecated\nfunc statusBar(hidden: Bool) -> some View\nSets the visibility of the status bar.\nDeprecated\nfunc contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View\nAdds a context menu to the view.\nDeprecated"
    },
    {
        "title": "navigationBarItems(leading:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/navigationbaritems(leading:)",
        "html": "Deprecated\n\nUse toolbar(content:) with navigationBarLeading placement.\n\nParameters\nleading\n\nA view that appears on the leading edge of the title.\n\nDiscussion\n\nUse navigationBarItems(leading:) to add navigation bar items to the leading edge of the navigation bar for this view.\n\nThis modifier only takes effect when this view is inside of and visible within a NavigationView.\n\nOn iOS 14 and later, the leading item supplements a visible back button, instead of replacing it, by default. To hide the back button, use navigationBarBackButtonHidden(_:).\n\nThe example below adds buttons to the leading edge of the button area of the navigation view:\n\nstruct FlavorView: View {\n    var body: some View {\n        NavigationView {\n            List {\n                Text(\"Chocolate\")\n                Text(\"Vanilla\")\n                Text(\"Strawberry\")\n            }\n            .navigationBarTitle(Text(\"Today's Flavors\"))\n            .navigationBarItems(leading:\n                HStack {\n                    Button(\"Hours\") {\n                        print(\"Hours tapped!\")\n                    }\n\n\n                    Button(\"Help\") {\n                        print(\"Help tapped!\")\n                    }\n                }\n            )\n        }\n    }\n}\n\nSee Also\nAuxiliary view modifiers\nfunc navigationBarTitle(Text) -> some View\nSets the title in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle(LocalizedStringKey) -> some View\nSets the title of this view\u2019s navigation bar with a localized string.\nDeprecated\nfunc navigationBarTitle<S>(S) -> some View\nSets the title of this view\u2019s navigation bar with a string.\nDeprecated\nfunc navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarItems<L, T>(leading: L, trailing: T) -> some View\nSets the navigation bar items for this view.\nDeprecated\nfunc navigationBarItems<T>(trailing: T) -> some View\nConfigures the navigation bar items for this view.\nDeprecated\nfunc navigationBarHidden(Bool) -> some View\nHides the navigation bar for this view.\nDeprecated\nfunc statusBar(hidden: Bool) -> some View\nSets the visibility of the status bar.\nDeprecated\nfunc contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View\nAdds a context menu to the view.\nDeprecated"
    },
    {
        "title": "frame()",
        "url": "https://developer.apple.com/documentation/swiftui/view/frame()",
        "html": "Deprecated\n\nUse frame(width:height:alignment:) or frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:) instead.\n\nSee Also\nLayout modifiers\nfunc edgesIgnoringSafeArea(Edge.Set) -> some View\nChanges the view\u2019s proposed area to extend outside the screen\u2019s safe areas.\nDeprecated\nfunc coordinateSpace<T>(name: T) -> some View\nAssigns a name to the view\u2019s coordinate space, so other code can operate on dimensions like points and sizes relative to the named space.\nDeprecated"
    },
    {
        "title": "init(preferredCompactColumn:sidebar:detail:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationsplitview/init(preferredcompactcolumn:sidebar:detail:)",
        "html": "Parameters\npreferredCompactColumn\n\nA Binding to state that controls which column appears on top when the view collapses.\n\nsidebar\n\nThe view to show in the leading column.\n\ndetail\n\nThe view to show in the detail area.\n\nSee Also\nSpecifying a preferred compact column\ninit(preferredCompactColumn: Binding<NavigationSplitViewColumn>, sidebar: () -> Sidebar, content: () -> Content, detail: () -> Detail)\nCreates a three-column navigation split view that enables programmatic control over which column appears on top when the view collapses into a single column in narrow sizes.\nAvailable when Sidebar conforms to View, Content conforms to View, and Detail conforms to View."
    },
    {
        "title": "Deprecated symbols",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlink-deprecated",
        "html": "Overview\n\nFor information about updating your use of navigation symbols, see Migrating to new navigation types.\n\nTopics\nCreating links with view builders\ninit(LocalizedStringKey, isActive: Binding<Bool>, destination: () -> Destination)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S>(S, isActive: Binding<Bool>, destination: () -> Destination)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit(isActive: Binding<Bool>, destination: () -> Destination, label: () -> Label)\nCreates a navigation link that presents the destination view when active.\nDeprecated\ninit<V>(LocalizedStringKey, tag: V, selection: Binding<V?>, destination: () -> Destination)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S, V>(S, tag: V, selection: Binding<V?>, destination: () -> Destination)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<V>(tag: V, selection: Binding<V?>, destination: () -> Destination, label: () -> Label)\nCreates a navigation link that presents the destination view when a bound selection variable equals a given tag value.\nDeprecated\nCreating links for WatchKit\ninit(destinationName: String, isActive: Binding<Bool>, label: () -> Label)\nCreates a navigation link that presents a view from a WatchKit storyboard when active.\nAvailable when Label conforms to View and Destination is _WKStoryboardContent.\nDeprecated\ninit<V>(destinationName: String, tag: V, selection: Binding<V?>, label: () -> Label)\nCreates a navigation link that presents a view from a WatchKit storyboard when a bound selection variable matches a value you provide.\nAvailable when Label conforms to View and Destination is _WKStoryboardContent.\nDeprecated\ninit(destinationName: String, label: () -> Label)\nCreates a navigation link that presents a view from a WatchKit storyboard.\nAvailable when Label conforms to View and Destination is _WKStoryboardContent.\nDeprecated\nCreating links with view arguments\ninit(LocalizedStringKey, destination: Destination)\nCreates a navigation link that presents a destination view, with a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S>(S, destination: Destination)\nCreates a navigation link that presents a destination view, with a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit(destination: Destination, label: () -> Label)\nCreates a navigation link that presents the destination view.\nDeprecated\ninit(LocalizedStringKey, destination: Destination, isActive: Binding<Bool>)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S>(S, destination: Destination, isActive: Binding<Bool>)\nCreates a navigation link that presents a destination view when active, with a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit(destination: Destination, isActive: Binding<Bool>, label: () -> Label)\nCreates a navigation link that presents the destination view when active.\nDeprecated\ninit<V>(LocalizedStringKey, destination: Destination, tag: V, selection: Binding<V?>)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<S, V>(S, destination: Destination, tag: V, selection: Binding<V?>)\nCreates a navigation link that presents a destination view when a bound selection variable matches a value you provide, using a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\nDeprecated\ninit<V>(destination: Destination, tag: V, selection: Binding<V?>, label: () -> Label)\nCreates a navigation link that presents the destination view when a bound selection variable equals a given tag value.\nDeprecated"
    },
    {
        "title": "init(sidebar:content:detail:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationsplitview/init(sidebar:content:detail:)",
        "html": "Parameters\nsidebar\n\nThe view to show in the leading column.\n\ncontent\n\nThe view to show in the middle column.\n\ndetail\n\nThe view to show in the detail area.\n\nSee Also\nCreating a navigation split view\ninit(sidebar: () -> Sidebar, detail: () -> Detail)\nCreates a two-column navigation split view."
    },
    {
        "title": "init(columnVisibility:preferredCompactColumn:sidebar:content:detail:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationsplitview/init(columnvisibility:preferredcompactcolumn:sidebar:content:detail:)",
        "html": "Parameters\ncolumnVisibility\n\nA Binding to state that controls the visibility of the leading columns.\n\npreferredCompactColumn\n\nA Binding to state that controls which column appears on top when the view collapses.\n\nsidebar\n\nThe view to show in the leading column.\n\ncontent\n\nThe view to show in the middle column.\n\ndetail\n\nThe view to show in the detail area.\n\nSee Also\nSpecifying a preferred compact column and column visibility\ninit(columnVisibility: Binding<NavigationSplitViewVisibility>, preferredCompactColumn: Binding<NavigationSplitViewColumn>, sidebar: () -> Sidebar, detail: () -> Detail)\nCreates a two-column navigation split view that enables programmatic control of the sidebar\u2019s visibility in regular sizes and which column appears on top when the view collapses into a single column in narrow sizes.\nAvailable when Sidebar conforms to View, Content conforms to View, and Detail conforms to View."
    },
    {
        "title": "init(value:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlink/init(value:label:)-3qb8y",
        "html": "Parameters\nvalue\n\nAn optional value to present. When the user selects the link, SwiftUI stores a copy of the value. Pass a nil value to disable the link.\n\nlabel\n\nA label that describes the view that this link presents.\n\nDiscussion\n\nWhen someone activates the navigation link that this initializer creates, SwiftUI looks for a nearby navigationDestination(for:destination:) view modifier with a data input parameter that matches the type of this initializer\u2019s value input, with one of the following outcomes:\n\nIf SwiftUI finds a matching modifier within the view hierarchy of an enclosing NavigationStack, it pushes the modifier\u2019s corresponding destination view onto the stack.\n\nIf SwiftUI finds a matching modifier in the view hierarchy of a stack that\u2019s in a later column of a NavigationSplitView, it puts the modifier\u2019s destination view as the first and only item onto the stack while preserving the stack\u2019s root view.\n\nIf there\u2019s no matching modifier, but the link appears in a List with selection inside a leading column of a navigation split view, the link updates the selection, which might affect the appearance of a trailing view. For an example of this, see NavigationLink.\n\nIn other cases, the link doesn\u2019t do anything.\n\nBecause this initializer takes a value that conforms to the Codable protocol, you ensure that a NavigationPath that includes this link can produce a non-nil value for its codable property. This helps to make the path serializable.\n\nSee Also\nPresenting a codable value\ninit<P>(LocalizedStringKey, value: P?)\nCreates a navigation link that presents the view corresponding to a codable value, with a text label that the link generates from a localized string key.\nAvailable when Label conforms to View and Destination is Never.\ninit<S, P>(S, value: P?)\nCreates a navigation link that presents the view corresponding to a codable value, with a text label that the link generates from a title string.\nAvailable when Label conforms to View and Destination is Never."
    },
    {
        "title": "animation(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/animation(_:)-1hc0p",
        "html": "Deprecated\n\nUse withAnimation(_:_:) or animation(_:value:) instead.\n\nParameters\nanimation\n\nThe animation to apply to animatable values within this view.\n\nReturn Value\n\nA view that wraps this view and applies animation to all animatable values used within the view.\n\nDiscussion\n\nUse this modifier on leaf views rather than container views. The animation applies to all child views within this view; calling animation(_:) on a container view can lead to unbounded scope.\n\nSee Also\nGraphics and rendering modifiers\nfunc accentColor(Color?) -> some View\nSets the accent color for this view and the views it contains.\nDeprecated\nfunc mask<Mask>(Mask) -> some View\nMasks this view using the alpha channel of the given view.\nDeprecated\nfunc cornerRadius(CGFloat, antialiased: Bool) -> some View\nClips this view to its bounding frame, with the specified corner radius.\nDeprecated"
    },
    {
        "title": "modelContainer(for:inMemory:isAutosaveEnabled:isUndoEnabled:onSetup:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/modelcontainer(for:inmemory:isautosaveenabled:isundoenabled:onsetup:)-18hhy",
        "html": "Parameters\nmodelType\n\nThe model type defining the schema used to create the model container.\n\ninMemory\n\nWhether the container should store data only in memory.\n\nisAutosaveEnabled\n\ntrue if autosave is enabled.\n\nisUndoEnabled\n\nuse undoManager in the environment to manage undo operations for the model container.\n\nonSetup\n\nA callback that will be invoked when the creation of the container has has succeeded or failed.\n\nDiscussion\n\nIn this example, the RecipesList view sets a model container to use for all of its contents, configured to store instances of Recipe:\n\n@Model class Recipe { ... }\n...\nRecipesList()\n    .modelContainer(for: Recipe.self)\n\n\nThe environment\u2019s modelContext property will be assigned a new context associated with this container. All implicit model context operations in this view, such as Query properties, will use the environment\u2019s context.\n\nBy default, the container stores its model data persistently on disk. To only store data in memory for the lifetime of the app\u2019s process, pass true to the inMemory: parameter.\n\nThe container will only be created once. New values that are passed to the modelType and inMemory parameters after the view is first created will be ignored.\n\nSee Also\nConfiguring a model\nfunc modelContext(ModelContext) -> some View\nSets the model context in this view\u2019s environment.\nfunc modelContainer(ModelContainer) -> some View\nSets the model container and associated model context in this view\u2019s environment.\nfunc modelContainer(for: [PersistentModel.Type], inMemory: Bool, isAutosaveEnabled: Bool, isUndoEnabled: Bool, onSetup: (Result<ModelContainer, Error>) -> Void) -> some View\nSets the model container in this view for storing the provided model types, creating a new container if necessary, and also sets a model context for that container in this view\u2019s environment."
    },
    {
        "title": "edgesIgnoringSafeArea(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/edgesignoringsafearea(_:)",
        "html": "Deprecated\n\nUse ignoresSafeArea(_:edges:) instead.\n\nParameters\nedges\n\nThe set of the edges in which to expand the size requested for this view.\n\nReturn Value\n\nA view that may extend outside of the screen\u2019s safe area on the edges specified by edges.\n\nDiscussion\n\nUse edgesIgnoringSafeArea(_:) to change the area proposed for this view so that \u2014 were the proposal accepted \u2014 this view could extend outside the safe area to the bounds of the screen for the specified edges.\n\nFor example, you can propose that a text view ignore the safe area\u2019s top inset:\n\nVStack {\n    Text(\"This text is outside of the top safe area.\")\n        .edgesIgnoringSafeArea([.top])\n        .border(Color.purple)\n    Text(\"This text is inside VStack.\")\n        .border(Color.yellow)\n}\n.border(Color.gray)\n\n\nDepending on the surrounding view hierarchy, SwiftUI may not honor an edgesIgnoringSafeArea(_:) request. This can happen, for example, if the view is inside a container that respects the screen\u2019s safe area. In that case you may need to apply edgesIgnoringSafeArea(_:) to the container instead.\n\nSee Also\nLayout modifiers\nfunc frame() -> some View\nPositions this view within an invisible frame.\nDeprecated\nfunc coordinateSpace<T>(name: T) -> some View\nAssigns a name to the view\u2019s coordinate space, so other code can operate on dimensions like points and sizes relative to the named space.\nDeprecated"
    },
    {
        "title": "done",
        "url": "https://developer.apple.com/documentation/swiftui/submitlabel/done",
        "html": "See Also\nGetting submission labels\nstatic var `continue`: SubmitLabel\nDefines a submit label with text of \u201cContinue\u201d.\nstatic var go: SubmitLabel\nDefines a submit label with text of \u201cGo\u201d.\nstatic var join: SubmitLabel\nDefines a submit label with text of \u201cJoin\u201d.\nstatic var next: SubmitLabel\nDefines a submit label with text of \u201cNext\u201d.\nstatic var `return`: SubmitLabel\nDefines a submit label with text of \u201cReturn\u201d.\nstatic var route: SubmitLabel\nDefines a submit label with text of \u201cRoute\u201d.\nstatic var search: SubmitLabel\nDefines a submit label with text of \u201cSearch\u201d.\nstatic var send: SubmitLabel\nDefines a submit label with text of \u201cSend\u201d."
    },
    {
        "title": "cornerRadius(_:antialiased:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/cornerradius(_:antialiased:)",
        "html": "Deprecated\n\nUse clipShape(_:style:) or fill(style:) instead.\n\nParameters\nantialiased\n\nA Boolean value that indicates whether the rendering system applies smoothing to the edges of the clipping rectangle.\n\nReturn Value\n\nA view that clips this view to its bounding frame with the specified corner radius.\n\nDiscussion\n\nBy default, a view\u2019s bounding frame only affects its layout, so any content that extends beyond the edges of the frame remains visible. Use cornerRadius(_:antialiased:) to hide any content that extends beyond these edges while applying a corner radius.\n\nThe following code applies a corner radius of 25 to a text view:\n\nText(\"Rounded Corners\")\n    .frame(width: 175, height: 75)\n    .foregroundColor(Color.white)\n    .background(Color.black)\n    .cornerRadius(25)\n\n\nSee Also\nGraphics and rendering modifiers\nfunc accentColor(Color?) -> some View\nSets the accent color for this view and the views it contains.\nDeprecated\nfunc mask<Mask>(Mask) -> some View\nMasks this view using the alpha channel of the given view.\nDeprecated\nfunc animation(Animation?) -> some View\nApplies the given animation to all animatable values within this view.\nDeprecated"
    },
    {
        "title": "widgetCurvesContent(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/widgetcurvescontent(_:)",
        "html": "Parameters\ncurvesContent\n\nA Boolean value that indicates whether the system curves the widget label\u2019s content, if the context allows.\n\nDiscussion\n\nThe system positions the widget\u2019s content along a curve that follows the corner of the watch face when displaying a WidgetFamily/accessoryCorner complication. The widget must use a widgetLabel(_:) modifier, and the curving effect modifies only text, SF Symbols, and images.\n\nWhen displaying an .accessoryCorner complication, the system places the widget label on the inside of the curve, and the widget\u2019s content on the outside, as shown below.\n\nvar body: some View {\n    Text(\"Hi\")\n        .widgetCurvesContent()\n        .widgetLabel(\"World!\")\n}\n\n\nThe system can also curve text, SF symbols, and image content from a ViewThatFits view.\n\nvar body: some View {\n    ViewThatFits {\n        Text(\"Hello\")\n        Text(\"Hi\")\n    }\n    .widgetCurvesContent()\n    .widgetLabel(\"World!\")\n}\n\n\nSee Also\nWidget configuration\nfunc widgetAccentable(Bool) -> some View\nAdds the view and all of its subviews to the accented group.\nfunc widgetLabel<S>(S) -> some View\nReturns a text label that displays additional content outside the accessory family widget\u2019s main SwiftUI view.\nfunc widgetLabel(LocalizedStringKey) -> some View\nReturns a localized text label that displays additional content outside the accessory family widget\u2019s main SwiftUI view.\nfunc widgetLabel<Label>(label: () -> Label) -> some View\nCreates a label for displaying additional content outside an accessory family widget\u2019s main SwiftUI view.\nfunc dynamicIsland(verticalPlacement: DynamicIslandExpandedRegionVerticalPlacement) -> some View\nSpecifies the vertical placement for a view of an expanded Live Activity that appears in the Dynamic Island."
    },
    {
        "title": "modelContainer(for:inMemory:isAutosaveEnabled:isUndoEnabled:onSetup:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/modelcontainer(for:inmemory:isautosaveenabled:isundoenabled:onsetup:)-8oc48",
        "html": "Parameters\nmodelTypes\n\nThe model types defining the schema used to create the model container.\n\ninMemory\n\nWhether the container should store data only in memory.\n\nisAutosaveEnabled\n\ntrue if autosave is enabled.\n\nisUndoEnabled\n\nuse undoManager in the view\u2019s environment to manage undo operations for the model container.\n\nonSetup\n\nA callback that will be invoked when the creation of the container has has succeeded or failed.\n\nDiscussion\n\nIn this example, the RecipesList view sets a model container to use for all of its contents, configured to store instances of Recipe and Ingredient:\n\n@Model class Recipe { ... }\n@Model class Ingredient { ... }\n...\nRecipesList()\n    .modelContainer(for: [Recipe.self, Ingredient.self])\n\n\nThe environment\u2019s modelContext property will be assigned a new context associated with this container. All implicit model context operations in this view, such as Query properties, will use the environment\u2019s context.\n\nBy default, the container stores its model data persistently on disk. To only store data in memory for the lifetime of the app\u2019s process, pass true to the inMemory: parameter.\n\nThe container will only be created once. New values that are passed to the modelTypes and inMemory parameters after the view is first created will be ignored.\n\nSee Also\nConfiguring a model\nfunc modelContext(ModelContext) -> some View\nSets the model context in this view\u2019s environment.\nfunc modelContainer(ModelContainer) -> some View\nSets the model container and associated model context in this view\u2019s environment.\nfunc modelContainer(for: PersistentModel.Type, inMemory: Bool, isAutosaveEnabled: Bool, isUndoEnabled: Bool, onSetup: (Result<ModelContainer, Error>) -> Void) -> some View\nSets the model container in this view for storing the provided model type, creating a new container if necessary, and also sets a model context for that container in this view\u2019s environment."
    },
    {
        "title": "allowedDynamicRange(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/alloweddynamicrange(_:)",
        "html": "Parameters\nrange\n\nthe requested dynamic range, or nil to restore the default allowed range.\n\nReturn Value\n\na new view.\n\nDiscussion\n\nThe following example enables HDR rendering within a view hierarchy:\n\nMyView().allowedDynamicRange(.high)\n\nSee Also\nColors and patterns\nfunc backgroundStyle<S>(S) -> some View\nSets the specified style to render backgrounds within the view.\nfunc foregroundStyle<S>(S) -> some View\nSets a view\u2019s foreground elements to use a given style.\nfunc foregroundStyle<S1, S2>(S1, S2) -> some View\nSets the primary and secondary levels of the foreground style in the child view.\nfunc foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View\nSets the primary, secondary, and tertiary levels of the foreground style."
    },
    {
        "title": "isDetailLink(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlink/isdetaillink(_:)",
        "html": "Parameters\nisDetailLink\n\nA Boolean value that specifies whether this link presents its destination as the detail component when used in a multi-column navigation view.\n\nReturn Value\n\nA view that applies the specified detail link behavior.\n\nDiscussion\n\nThis method sets the behavior when the navigation link is used in a NavigationSplitView, or a multi-column navigation view, such as one using ColumnNavigationViewStyle.\n\nFor example, in a two-column navigation split view, if isDetailLink is true, triggering the link in the sidebar column sets the contents of the detail column to be the link\u2019s destination view. If isDetailLink is false, the link navigates to the destination view within the primary column.\n\nIf you do not set the detail link behavior with this method, the behavior defaults to true.\n\nThe isDetailLink modifier only affects view-destination links. Links that present data values always search for a matching navigation destination beginning in the column that contains the link."
    },
    {
        "title": "search",
        "url": "https://developer.apple.com/documentation/swiftui/submitlabel/search",
        "html": "See Also\nGetting submission labels\nstatic var `continue`: SubmitLabel\nDefines a submit label with text of \u201cContinue\u201d.\nstatic var done: SubmitLabel\nDefines a submit label with text of \u201cDone\u201d.\nstatic var go: SubmitLabel\nDefines a submit label with text of \u201cGo\u201d.\nstatic var join: SubmitLabel\nDefines a submit label with text of \u201cJoin\u201d.\nstatic var next: SubmitLabel\nDefines a submit label with text of \u201cNext\u201d.\nstatic var `return`: SubmitLabel\nDefines a submit label with text of \u201cReturn\u201d.\nstatic var route: SubmitLabel\nDefines a submit label with text of \u201cRoute\u201d.\nstatic var send: SubmitLabel\nDefines a submit label with text of \u201cSend\u201d."
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/section/init(_:content:)-5ax3j",
        "html": "Parameters\ntitle\n\nA string that describes the contents of the section.\n\ncontent\n\nThe section\u2019s content.\n\nSee Also\nCreating a section\ninit<V>(content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent conforms to TableRowContent, Content conforms to TableRowContent, and Footer conforms to TableRowContent.\ninit(content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent is EmptyView, Content conforms to View, and Footer is EmptyView.\ninit(LocalizedStringKey, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent is Text, Content conforms to View, and Footer is EmptyView.\ninit<S>(S, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent is Text, Content conforms to View, and Footer is EmptyView.\ninit<V>(LocalizedStringKey, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent conforms to TableRowContent, Content conforms to TableRowContent, and Footer conforms to TableRowContent."
    },
    {
        "title": "return",
        "url": "https://developer.apple.com/documentation/swiftui/submitlabel/return",
        "html": "See Also\nGetting submission labels\nstatic var `continue`: SubmitLabel\nDefines a submit label with text of \u201cContinue\u201d.\nstatic var done: SubmitLabel\nDefines a submit label with text of \u201cDone\u201d.\nstatic var go: SubmitLabel\nDefines a submit label with text of \u201cGo\u201d.\nstatic var join: SubmitLabel\nDefines a submit label with text of \u201cJoin\u201d.\nstatic var next: SubmitLabel\nDefines a submit label with text of \u201cNext\u201d.\nstatic var route: SubmitLabel\nDefines a submit label with text of \u201cRoute\u201d.\nstatic var search: SubmitLabel\nDefines a submit label with text of \u201cSearch\u201d.\nstatic var send: SubmitLabel\nDefines a submit label with text of \u201cSend\u201d."
    },
    {
        "title": "send",
        "url": "https://developer.apple.com/documentation/swiftui/submitlabel/send",
        "html": "See Also\nGetting submission labels\nstatic var `continue`: SubmitLabel\nDefines a submit label with text of \u201cContinue\u201d.\nstatic var done: SubmitLabel\nDefines a submit label with text of \u201cDone\u201d.\nstatic var go: SubmitLabel\nDefines a submit label with text of \u201cGo\u201d.\nstatic var join: SubmitLabel\nDefines a submit label with text of \u201cJoin\u201d.\nstatic var next: SubmitLabel\nDefines a submit label with text of \u201cNext\u201d.\nstatic var `return`: SubmitLabel\nDefines a submit label with text of \u201cReturn\u201d.\nstatic var route: SubmitLabel\nDefines a submit label with text of \u201cRoute\u201d.\nstatic var search: SubmitLabel\nDefines a submit label with text of \u201cSearch\u201d."
    },
    {
        "title": "route",
        "url": "https://developer.apple.com/documentation/swiftui/submitlabel/route",
        "html": "See Also\nGetting submission labels\nstatic var `continue`: SubmitLabel\nDefines a submit label with text of \u201cContinue\u201d.\nstatic var done: SubmitLabel\nDefines a submit label with text of \u201cDone\u201d.\nstatic var go: SubmitLabel\nDefines a submit label with text of \u201cGo\u201d.\nstatic var join: SubmitLabel\nDefines a submit label with text of \u201cJoin\u201d.\nstatic var next: SubmitLabel\nDefines a submit label with text of \u201cNext\u201d.\nstatic var `return`: SubmitLabel\nDefines a submit label with text of \u201cReturn\u201d.\nstatic var search: SubmitLabel\nDefines a submit label with text of \u201cSearch\u201d.\nstatic var send: SubmitLabel\nDefines a submit label with text of \u201cSend\u201d."
    },
    {
        "title": "next",
        "url": "https://developer.apple.com/documentation/swiftui/submitlabel/next",
        "html": "See Also\nGetting submission labels\nstatic var `continue`: SubmitLabel\nDefines a submit label with text of \u201cContinue\u201d.\nstatic var done: SubmitLabel\nDefines a submit label with text of \u201cDone\u201d.\nstatic var go: SubmitLabel\nDefines a submit label with text of \u201cGo\u201d.\nstatic var join: SubmitLabel\nDefines a submit label with text of \u201cJoin\u201d.\nstatic var `return`: SubmitLabel\nDefines a submit label with text of \u201cReturn\u201d.\nstatic var route: SubmitLabel\nDefines a submit label with text of \u201cRoute\u201d.\nstatic var search: SubmitLabel\nDefines a submit label with text of \u201cSearch\u201d.\nstatic var send: SubmitLabel\nDefines a submit label with text of \u201cSend\u201d."
    },
    {
        "title": "init(footer:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/section/init(footer:content:)",
        "html": "Deprecated\n\nUse init(content:footer:) instead.\n\nParameters\nfooter\n\nA view to use as the section\u2019s footer.\n\ncontent\n\nThe section\u2019s content.\n\nSee Also\nDeprecated symbols\ninit(header: Parent, content: () -> Content)\nCreates a section with a header and the provided section content.\nAvailable when Parent conforms to View, Content conforms to View, and Footer is EmptyView.\nDeprecated\ninit(header: Parent, footer: Footer, content: () -> Content)\nCreates a section with a header, footer, and the provided section content.\nAvailable when Parent conforms to View, Content conforms to View, and Footer conforms to View.\nDeprecated\nfunc collapsible(Bool) -> some View\nSets whether a section can be collapsed by the user.\nAvailable when Parent conforms to View, Content conforms to View, and Footer conforms to View.\nDeprecated"
    },
    {
        "title": "Path.Element.closeSubpath",
        "url": "https://developer.apple.com/documentation/swiftui/path/element/closesubpath",
        "html": "Discussion\n\nAfter closing the subpath, the current point becomes undefined.\n\nSee Also\nGetting path elements\ncase curve(to: CGPoint, control1: CGPoint, control2: CGPoint)\nA cubic B\u00e9zier curve from the previous current point to the given end-point, using the two control points to define the curve.\ncase line(to: CGPoint)\nA line from the previous current point to the given point, which becomes the new current point.\ncase move(to: CGPoint)\nA path element that terminates the current subpath (without closing it) and defines a new current point.\ncase quadCurve(to: CGPoint, control: CGPoint)\nA quadratic B\u00e9zier curve from the previous current point to the given end-point, using the single control point to define the curve."
    },
    {
        "title": "init(_:isExpanded:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/section/init(_:isexpanded:content:)-153np",
        "html": "Parameters\ntitle\n\nA string that describes the contents of the section.\n\nisExpanded\n\nA binding to a Boolean value that determines the section\u2019s expansion state (expanded or collapsed).\n\ncontent\n\nThe section\u2019s content.\n\nSee Also\nControlling collapsibility\ninit<S>(S, isExpanded: Binding<Bool>, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent is Text, Content conforms to View, and Footer is EmptyView.\ninit<V>(LocalizedStringKey, isExpanded: Binding<Bool>, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent conforms to TableRowContent and Content conforms to TableRowContent.\ninit(LocalizedStringKey, isExpanded: Binding<Bool>, content: () -> Content)\nCreates a section with the provided section content.\nAvailable when Parent is Text, Content conforms to View, and Footer is EmptyView.\ninit(isExpanded: Binding<Bool>, content: () -> Content, header: () -> Parent)\nCreates a section with a header, the provided section content, and a binding representing the section\u2019s expansion state.\nAvailable when Parent conforms to View, Content conforms to View, and Footer is EmptyView.\ninit<V, H>(isExpanded: Binding<Bool>, content: () -> Content, header: () -> H)\nCreates a section with a header and the provided section content.\nAvailable when Parent conforms to TableRowContent and Content conforms to TableRowContent."
    },
    {
        "title": "init(content:header:)",
        "url": "https://developer.apple.com/documentation/swiftui/section/init(content:header:)-29e2l",
        "html": "Parameters\ncontent\n\nThe section\u2019s content.\n\nheader\n\nA view to use as the section\u2019s header.\n\nSee Also\nAdding headers and footers\ninit<V, H>(content: () -> Content, header: () -> H)\nCreates a section with a header and the provided section content.\nAvailable when Parent conforms to TableRowContent, Content conforms to TableRowContent, and Footer conforms to TableRowContent.\ninit(content: () -> Content, footer: () -> Footer)\nCreates a section with a footer and the provided section content.\nAvailable when Parent is EmptyView, Content conforms to View, and Footer conforms to View.\ninit(content: () -> Content, header: () -> Parent, footer: () -> Footer)\nCreates a section with a header, footer, and the provided section content.\nAvailable when Parent conforms to View, Content conforms to View, and Footer conforms to View."
    },
    {
        "title": "Path.Element.curve(to:control1:control2:)",
        "url": "https://developer.apple.com/documentation/swiftui/path/element/curve(to:control1:control2:)",
        "html": "Discussion\n\nThe end-point of the curve becomes the new current point.\n\nSee Also\nGetting path elements\ncase closeSubpath\nA line from the start point of the current subpath (if any) to the current point, which terminates the subpath.\ncase line(to: CGPoint)\nA line from the previous current point to the given point, which becomes the new current point.\ncase move(to: CGPoint)\nA path element that terminates the current subpath (without closing it) and defines a new current point.\ncase quadCurve(to: CGPoint, control: CGPoint)\nA quadratic B\u00e9zier curve from the previous current point to the given end-point, using the single control point to define the curve."
    },
    {
        "title": "collapsible(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/section/collapsible(_:)",
        "html": "Deprecated\n\nTo disable collapsibility in macOS 14 and later, use one of the Section initializers that lacks collapsibility.\n\nDiscussion\n\nThis modifier only applies to sections in List views that have the sidebar style.\n\nSee Also\nDeprecated symbols\ninit(header: Parent, content: () -> Content)\nCreates a section with a header and the provided section content.\nAvailable when Parent conforms to View, Content conforms to View, and Footer is EmptyView.\nDeprecated\ninit(footer: Footer, content: () -> Content)\nCreates a section with a footer and the provided section content.\nAvailable when Parent is EmptyView, Content conforms to View, and Footer conforms to View.\nDeprecated\ninit(header: Parent, footer: Footer, content: () -> Content)\nCreates a section with a header, footer, and the provided section content.\nAvailable when Parent conforms to View, Content conforms to View, and Footer conforms to View.\nDeprecated"
    },
    {
        "title": "init(items:subject:message:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(items:subject:message:)-8p4sn",
        "html": "Parameters\nitems\n\nThe items to share.\n\nsubject\n\nA title for the items to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the items to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\nDiscussion\n\nUse this initializer when you want the system-standard appearance for ShareLink.\n\nSee Also\nSharing items\ninit(items: Data, subject: Text?, message: Text?)\nCreates an instance that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is String.\ninit(items: Data, subject: Text?, message: Text?, label: () -> Label)\nCreates an instance that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label conforms to View, and Data.Element is String.\ninit(items: Data, subject: Text?, message: Text?, label: () -> Label)\nCreates an instance that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label conforms to View, and Data.Element is URL."
    },
    {
        "title": "success",
        "url": "https://developer.apple.com/documentation/swiftui/sensoryfeedback/success",
        "html": "Discussion\n\nOnly plays feedback on iOS and watchOS.\n\nSee Also\nIndicating the outcome of an operation\nstatic let warning: SensoryFeedback\nIndicates that a task or action has produced a warning of some kind.\nstatic let error: SensoryFeedback\nIndicates that an error has occurred."
    },
    {
        "title": "init(items:subject:message:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(items:subject:message:label:)-8t9gm",
        "html": "Parameters\nitems\n\nThe items to share.\n\nsubject\n\nA title for the items to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the items to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\nlabel\n\nA view builder that produces a label that describes the share action.\n\nSee Also\nSharing items\ninit(items: Data, subject: Text?, message: Text?)\nCreates an instance that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is String.\ninit(items: Data, subject: Text?, message: Text?)\nCreates an instance that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is URL.\ninit(items: Data, subject: Text?, message: Text?, label: () -> Label)\nCreates an instance that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label conforms to View, and Data.Element is URL."
    },
    {
        "title": "init(value:step:label:onEditingChanged:)",
        "url": "https://developer.apple.com/documentation/swiftui/stepper/init(value:step:label:oneditingchanged:)",
        "html": "Parameters\nvalue\n\nThe Binding to a value that you provide.\n\nstep\n\nThe amount to increment or decrement value each time the user clicks or taps the stepper\u2019s increment or decrement buttons. Defaults to 1.\n\nlabel\n\nA view describing the purpose of this stepper.\n\nonEditingChanged\n\nA closure that\u2019s called when editing begins and ends. For example, on iOS, the user may touch and hold the increment or decrement buttons on a stepper which causes the execution of the onEditingChanged closure at the start and end of the gesture.\n\nDiscussion\n\nUse this initializer to create a stepper that increments or decrements a bound value by a specific amount each time the user clicks or taps the stepper\u2019s increment or decrement buttons.\n\nIn the example below, a stepper increments or decrements value by the step value of 5 at each click or tap of the control\u2019s increment or decrement button:\n\nstruct StepperView: View {\n    @State private var value = 1\n    let step = 5\n    var body: some View {\n        Stepper(value: $value,\n                step: step) {\n            Text(\"Current value: \\(value), step: \\(step)\")\n        }\n            .padding(10)\n    }\n}\n\n\nSee Also\nCreating a stepper\ninit<F>(value: Binding<F.FormatInput>, step: F.FormatInput.Stride, format: F, label: () -> Label, onEditingChanged: (Bool) -> Void)\nCreates a stepper configured to increment or decrement a binding to a value using a step value you provide, displaying its value with an applied format style.\nAvailable when Label conforms to View.\ninit<V>(LocalizedStringKey, value: Binding<V>, step: V.Stride, onEditingChanged: (Bool) -> Void)\nCreates a stepper with a title key and configured to increment and decrement a binding to a value and step amount you provide.\nAvailable when Label is Text.\ninit<S, V>(S, value: Binding<V>, step: V.Stride, onEditingChanged: (Bool) -> Void)\nCreates a stepper with a title and configured to increment and decrement a binding to a value and step amount you provide.\nAvailable when Label is Text.\ninit<S, F>(S, value: Binding<F.FormatInput>, step: F.FormatInput.Stride, format: F, onEditingChanged: (Bool) -> Void)\nCreates a stepper with a title and configured to increment and decrement a binding to a value and step amount you provide, displaying its value with an applied format style.\nAvailable when Label is Text.\ninit<F>(LocalizedStringKey, value: Binding<F.FormatInput>, step: F.FormatInput.Stride, format: F, onEditingChanged: (Bool) -> Void)\nCreates a stepper with a title key and configured to increment and decrement a binding to a value and step amount you provide, displaying its value with an applied format style.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:selection:supportsOpacity:)",
        "url": "https://developer.apple.com/documentation/swiftui/colorpicker/init(_:selection:supportsopacity:)-983ax",
        "html": "Parameters\ntitleKey\n\nThe key for the localized title of the picker.\n\nselection\n\nA Binding to the variable that displays the selected Color.\n\nsupportsOpacity\n\nA Boolean value that indicates whether the color picker allows adjustments to the selected color\u2019s opacity; the default is true.\n\nDiscussion\n\nUse ColorPicker to create a color well that your app uses to allow the selection of a Color. The example below creates a color well using a Binding to a property stored in a settings object and title you provide:\n\nfinal class Settings: ObservableObject {\n    @Published var alignmentGuideColor =\n        Color(.sRGB, red: 0.98, green: 0.9, blue: 0.2)\n}\n\n\nstruct FormattingControls: View {\n    @State private var settings = Settings()\n\n\n    var body: some View {\n        VStack {\n            // Other formatting controls.\n            ColorPicker(\"Alignment Guides\",\n                selection: $settings.alignmentGuideColor\n            )\n        }\n    }\n}\n\nSee Also\nCreating a color picker\ninit(selection: Binding<Color>, supportsOpacity: Bool, label: () -> Label)\nCreates an instance that selects a color.\ninit<S>(S, selection: Binding<Color>, supportsOpacity: Bool)\nCreates a color picker with a text label generated from a title string.\nAvailable when Label is Text."
    },
    {
        "title": "error",
        "url": "https://developer.apple.com/documentation/swiftui/sensoryfeedback/error",
        "html": "Discussion\n\nOnly plays feedback on iOS and watchOS.\n\nSee Also\nIndicating the outcome of an operation\nstatic let success: SensoryFeedback\nIndicates that a task or action has completed.\nstatic let warning: SensoryFeedback\nIndicates that a task or action has produced a warning of some kind."
    },
    {
        "title": "SensoryFeedback.Weight",
        "url": "https://developer.apple.com/documentation/swiftui/sensoryfeedback/weight",
        "html": "Overview\n\nWeight values can be passed to SensoryFeedback.impact(weight:intensity:).\n\nTopics\nGetting flexibility values\nstatic let light: SensoryFeedback.Weight\nIndicates a collision between small or lightweight UI objects.\nstatic let medium: SensoryFeedback.Weight\nIndicates a collision between medium-sized or medium-weight UI objects.\nstatic let heavy: SensoryFeedback.Weight\nIndicates a collision between large or heavyweight UI objects.\nRelationships\nConforms To\nEquatable\nSendable\nSee Also\nProducing a physical impact\nstatic let impact: SensoryFeedback\nProvides a physical metaphor you can use to complement a visual experience.\nstatic func impact(weight: SensoryFeedback.Weight, intensity: Double) -> SensoryFeedback\nProvides a physical metaphor you can use to complement a visual experience.\nstatic func impact(flexibility: SensoryFeedback.Flexibility, intensity: Double) -> SensoryFeedback\nProvides a physical metaphor you can use to complement a visual experience.\nstruct Flexibility\nThe flexibility to be represented by a type of feedback."
    },
    {
        "title": "selection",
        "url": "https://developer.apple.com/documentation/swiftui/sensoryfeedback/selection",
        "html": "Discussion\n\nOnly plays feedback on iOS and watchOS.\n\nSee Also\nIndicating changes and selections\nstatic let alignment: SensoryFeedback\nIndicates the alignment of a dragged item.\nstatic let decrease: SensoryFeedback\nIndicates that an important value decreased below a significant threshold.\nstatic let increase: SensoryFeedback\nIndicates that an important value increased above a significant threshold.\nstatic let levelChange: SensoryFeedback\nIndicates movement between discrete levels of pressure."
    },
    {
        "title": "impact(weight:intensity:)",
        "url": "https://developer.apple.com/documentation/swiftui/sensoryfeedback/impact(weight:intensity:)",
        "html": "Discussion\n\nUse this to provide feedback for UI elements colliding. It should supplement the user experience, since only some platforms will play feedback in response to it.\n\nNot all platforms will play different feedback for different weights and intensities of impact.\n\nOnly plays feedback on iOS and watchOS.\n\nSee Also\nProducing a physical impact\nstatic let impact: SensoryFeedback\nProvides a physical metaphor you can use to complement a visual experience.\nstatic func impact(flexibility: SensoryFeedback.Flexibility, intensity: Double) -> SensoryFeedback\nProvides a physical metaphor you can use to complement a visual experience.\nstruct Flexibility\nThe flexibility to be represented by a type of feedback.\nstruct Weight\nThe weight to be represented by a type of feedback."
    },
    {
        "title": "init(timerInterval:countsDown:label:currentValueLabel:)",
        "url": "https://developer.apple.com/documentation/swiftui/progressview/init(timerinterval:countsdown:label:currentvaluelabel:)",
        "html": "Parameters\ntimerInterval\n\nThe date range over which the view should progress.\n\ncountsDown\n\nA Boolean value that determines whether the view empties or fills as time passes. If true (the default), the view empties.\n\nlabel\n\nAn optional view that describes the purpose of the progress view.\n\ncurrentValueLabel\n\nA view that displays the current value of the timer.\n\nDiscussion\n\nUse this initializer to create a view that shows continuous progress within a date range. The following example initializes a progress view with a range of start...end, where start is 30 seconds in the past and end is 90 seconds in the future. As a result, the progress view begins at 25 percent complete. This example also provides custom views for a descriptive label (Progress) and a current value label that shows the date range.\n\nstruct ContentView: View {\n    let start = Date().addingTimeInterval(-30)\n    let end = Date().addingTimeInterval(90)\n\n\n    var body: some View {\n        ProgressView(interval: start...end,\n                     countsDown: false) {\n            Text(\"Progress\")\n        } currentValueLabel: {\n            Text(start...end)\n         }\n     }\n}\n\n\nBy default, the progress view empties as time passes from the start of the date range to the end, but you can use the countsDown parameter to create a progress view that fills as time passes, as the above example demonstrates.\n\nNote\n\nDate-relative progress views, such as those created with this initializer, don\u2019t support custom styles.\n\nSee Also\nCreate a progress view spanning a date range\ninit(timerInterval: ClosedRange<Date>, countsDown: Bool)\nCreates a progress view for showing continuous progress as time passes.\nAvailable when Label is EmptyView and CurrentValueLabel is DefaultDateProgressLabel.\ninit(timerInterval: ClosedRange<Date>, countsDown: Bool, label: () -> Label)\nCreates a progress view for showing continuous progress as time passes, with a descriptive label.\nAvailable when Label conforms to View and CurrentValueLabel is DefaultDateProgressLabel."
    },
    {
        "title": "init(_:isOn:intent:)",
        "url": "https://developer.apple.com/documentation/swiftui/toggle/init(_:ison:intent:)-1rk6x",
        "html": "Parameters\ntitle\n\nA string that describes the purpose of the toggle.\n\nisOn\n\nWhether the toggle is on or off.\n\nintent\n\nThe AppIntent to be performed.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). See Text for more information about localizing strings.\n\nTo initialize a toggle with a localized string key, use Toggle/init(_:isOn:intent:) instead.\n\nSee Also\nCreating a toggle for an App Intent\ninit<I>(isOn: Bool, intent: I, label: () -> Label)\nCreates a toggle performing an AppIntent.\nAvailable when Label conforms to View.\ninit(LocalizedStringKey, isOn: Bool, intent: some AppIntent)\nCreates a toggle performing an AppIntent and generates its label from a localized string key.\nAvailable when Label is Text."
    },
    {
        "title": "impact",
        "url": "https://developer.apple.com/documentation/swiftui/sensoryfeedback/impact",
        "html": "Discussion\n\nUse this to provide feedback for UI elements colliding. It should supplement the user experience, since only some platforms will play feedback in response to it.\n\nOnly plays feedback on iOS and watchOS.\n\nSee Also\nProducing a physical impact\nstatic func impact(weight: SensoryFeedback.Weight, intensity: Double) -> SensoryFeedback\nProvides a physical metaphor you can use to complement a visual experience.\nstatic func impact(flexibility: SensoryFeedback.Flexibility, intensity: Double) -> SensoryFeedback\nProvides a physical metaphor you can use to complement a visual experience.\nstruct Flexibility\nThe flexibility to be represented by a type of feedback.\nstruct Weight\nThe weight to be represented by a type of feedback."
    },
    {
        "title": "levelChange",
        "url": "https://developer.apple.com/documentation/swiftui/sensoryfeedback/levelchange",
        "html": "Discussion\n\nFor example, as the user presses a fast-forward button on a video player, playback could increase or decrease and haptic feedback could be provided as different levels of pressure are reached.\n\nOnly plays feedback on macOS.\n\nSee Also\nIndicating changes and selections\nstatic let alignment: SensoryFeedback\nIndicates the alignment of a dragged item.\nstatic let decrease: SensoryFeedback\nIndicates that an important value decreased below a significant threshold.\nstatic let increase: SensoryFeedback\nIndicates that an important value increased above a significant threshold.\nstatic let selection: SensoryFeedback\nIndicates that a UI element\u2019s values are changing."
    },
    {
        "title": "append(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationpath/append(_:)-64o0f",
        "html": "See Also\nManaging path contents\nvar isEmpty: Bool\nA Boolean that indicates whether this path is empty.\nvar count: Int\nThe number of elements in this path.\nfunc append<V>(V)\nAppends a new codable value to the end of this path.\nfunc removeLast(Int)\nRemoves values from the end of this path."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/navigationpath/init()",
        "html": "See Also\nCreating a navigation path\ninit(NavigationPath.CodableRepresentation)\nCreates a new navigation path from a serializable version.\ninit<S>(S)\nCreates a new navigation path from the contents of a sequence that contains codable elements.\ninit<S>(S)\nCreates a new navigation path from the contents of a sequence."
    },
    {
        "title": "NavigationPath.CodableRepresentation",
        "url": "https://developer.apple.com/documentation/swiftui/navigationpath/codablerepresentation",
        "html": "Overview\n\nWhen a navigation path contains elements the conform to the Codable protocol, you can use the path\u2019s CodableRepresentation to convert the path to an external representation and to convert an external representation back into a navigation path.\n\nRelationships\nConforms To\nDecodable\nEncodable\nEquatable\nSee Also\nEncoding a path\nvar codable: NavigationPath.CodableRepresentation?\nA value that describes the contents of this path in a serializable format."
    },
    {
        "title": "init(destination:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlink/init(destination:label:)-27n7s",
        "html": "Parameters\ndestination\n\nA view for the navigation link to present.\n\nlabel\n\nA view builder to produce a label describing the destination to present.\n\nSee Also\nPresenting a destination view\ninit(LocalizedStringKey, destination: () -> Destination)\nCreates a navigation link that presents a destination view, with a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\ninit<S>(S, destination: () -> Destination)\nCreates a navigation link that presents a destination view, with a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View."
    },
    {
        "title": "stack",
        "url": "https://developer.apple.com/documentation/swiftui/navigationviewstyle/stack",
        "html": "Deprecated\n\nReplace a styled NavigationView with a NavigationStack or NavigationSplitView. For more information, see Migrating to new navigation types.\n\nSee Also\nGetting built-in navigation view styles\nstatic var automatic: DefaultNavigationViewStyle\nThe default navigation view style in the current context of the view being styled.\nAvailable when Self is DefaultNavigationViewStyle.\nDeprecated\nstatic var columns: ColumnNavigationViewStyle\nA navigation view style represented by a series of views in columns.\nAvailable when Self is ColumnNavigationViewStyle.\nDeprecated"
    },
    {
        "title": "init(_:isExpanded:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/disclosuregroup/init(_:isexpanded:content:)-3s5nf",
        "html": "Parameters\nlabel\n\nA description of the content of the disclosure group.\n\nisExpanded\n\nA binding to a Boolean value that determines the group\u2019s expansion state (expanded or collapsed).\n\ncontent\n\nThe content shown when the disclosure group expands.\n\nSee Also\nCreating a group with a string label\ninit<S>(S, content: () -> Content)\nCreates a disclosure group, using a provided string to create a text view for the label.\nAvailable when Label is Text and Content conforms to View.\ninit(LocalizedStringKey, content: () -> Content)\nCreates a disclosure group, using a provided localized string key to create a text view for the label.\nAvailable when Label is Text and Content conforms to View.\ninit(LocalizedStringKey, isExpanded: Binding<Bool>, content: () -> Content)\nCreates a disclosure group, using a provided localized string key to create a text view for the label, and a binding to the expansion state (expanded or collapsed).\nAvailable when Label is Text and Content conforms to View."
    },
    {
        "title": "selection",
        "url": "https://developer.apple.com/documentation/swiftui/datepickerstyleconfiguration/selection",
        "html": "See Also\nSelecting the date\nvar $selection: Binding<Date>"
    },
    {
        "title": "init(_:isExpanded:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/disclosuregroup/init(_:isexpanded:content:)-8ki39",
        "html": "Parameters\ntitleKey\n\nThe key for the localized label of self that describes the content of the disclosure group.\n\nisExpanded\n\nA binding to a Boolean value that determines the group\u2019s expansion state (expanded or collapsed).\n\ncontent\n\nThe content shown when the disclosure group expands.\n\nSee Also\nCreating a group with a string label\ninit<S>(S, content: () -> Content)\nCreates a disclosure group, using a provided string to create a text view for the label.\nAvailable when Label is Text and Content conforms to View.\ninit(LocalizedStringKey, content: () -> Content)\nCreates a disclosure group, using a provided localized string key to create a text view for the label.\nAvailable when Label is Text and Content conforms to View.\ninit<S>(S, isExpanded: Binding<Bool>, content: () -> Content)\nCreates a disclosure group, using a provided string to create a text view for the label, and a binding to the expansion state (expanded or collapsed).\nAvailable when Label is Text and Content conforms to View."
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/disclosuregroup/init(_:content:)-1h8f8",
        "html": "Parameters\ntitleKey\n\nThe key for the localized label of self that describes the content of the disclosure group.\n\ncontent\n\nThe content shown when the disclosure group expands.\n\nSee Also\nCreating a group with a string label\ninit<S>(S, content: () -> Content)\nCreates a disclosure group, using a provided string to create a text view for the label.\nAvailable when Label is Text and Content conforms to View.\ninit(LocalizedStringKey, isExpanded: Binding<Bool>, content: () -> Content)\nCreates a disclosure group, using a provided localized string key to create a text view for the label, and a binding to the expansion state (expanded or collapsed).\nAvailable when Label is Text and Content conforms to View.\ninit<S>(S, isExpanded: Binding<Bool>, content: () -> Content)\nCreates a disclosure group, using a provided string to create a text view for the label, and a binding to the expansion state (expanded or collapsed).\nAvailable when Label is Text and Content conforms to View."
    },
    {
        "title": "$selection",
        "url": "https://developer.apple.com/documentation/swiftui/datepickerstyleconfiguration/$selection",
        "html": "See Also\nSelecting the date\nvar selection: Date\nThe date value being displayed and selected."
    },
    {
        "title": "NavigationViewStyle",
        "url": "https://developer.apple.com/documentation/swiftui/navigationviewstyle",
        "html": "Deprecated\n\nReplace a styled NavigationView with a NavigationStack or NavigationSplitView. For more information, see Migrating to new navigation types.\n\nTopics\nGetting built-in navigation view styles\nstatic var automatic: DefaultNavigationViewStyle\nThe default navigation view style in the current context of the view being styled.\nAvailable when Self is DefaultNavigationViewStyle.\nstatic var columns: ColumnNavigationViewStyle\nA navigation view style represented by a series of views in columns.\nAvailable when Self is ColumnNavigationViewStyle.\nstatic var stack: StackNavigationViewStyle\nA navigation view style represented by a view stack that only shows a single top view at a time.\nAvailable when Self is StackNavigationViewStyle.\nSupporting types\nstruct DefaultNavigationViewStyle\nThe default navigation view style.\nstruct ColumnNavigationViewStyle\nA navigation view style represented by a series of views in columns.\nstruct StackNavigationViewStyle\nA navigation view style represented by a view stack that only shows a single top view at a time.\nstruct DoubleColumnNavigationViewStyle\nA navigation view style represented by a primary view stack that navigates to a detail view.\nRelationships\nConforming Types\nColumnNavigationViewStyle\nDefaultNavigationViewStyle\nDoubleColumnNavigationViewStyle\nStackNavigationViewStyle\nSee Also\nStyling navigation views\nfunc navigationViewStyle<S>(S) -> some View\nSets the style for navigation views within this view.\nDeprecated"
    },
    {
        "title": "init(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationview/init(content:)",
        "html": "Deprecated\n\nUse NavigationStack and NavigationSplitView instead. For more information, see Migrating to new navigation types.\n\nParameters\ncontent\n\nA ViewBuilder that produces the content that the navigation view wraps. Any views after the first act as placeholders for corresponding columns in a multicolumn display.\n\nDiscussion\n\nPerform navigation by initializing a link with a destination view. For example, consider a ColorDetail view that displays a color sample:\n\nstruct ColorDetail: View {\n    var color: Color\n\n\n    var body: some View {\n        color\n            .frame(width: 200, height: 200)\n            .navigationTitle(color.description.capitalized)\n    }\n}\n\n\nThe following NavigationView presents three links to color detail views:\n\nNavigationView {\n    List {\n        NavigationLink(\"Purple\", destination: ColorDetail(color: .purple))\n        NavigationLink(\"Pink\", destination: ColorDetail(color: .pink))\n        NavigationLink(\"Orange\", destination: ColorDetail(color: .orange))\n    }\n    .navigationTitle(\"Colors\")\n\n\n    Text(\"Select a Color\") // A placeholder to show before selection.\n}\n\n\nWhen the horizontal size class is UserInterfaceSizeClass.regular, like on an iPad in landscape mode, or on a Mac, the navigation view presents itself as a multicolumn view, using its second and later content views \u2014 a single Text view in the example above \u2014 as a placeholder for the corresponding column:\n\nWhen the user selects one of the navigation links from the list, the linked destination view replaces the placeholder text in the detail column:\n\nWhen the size class is UserInterfaceSizeClass.compact, like on an iPhone in portrait orientation, the navigation view presents itself as a single column that the user navigates as a stack. Tapping one of the links replaces the list with the detail view, which provides a back button to return to the list:"
    },
    {
        "title": "init(content:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/disclosuregroup/init(content:label:)",
        "html": "Parameters\ncontent\n\nThe content shown when the disclosure group expands.\n\nlabel\n\nA view that describes the content of the disclosure group.\n\nSee Also\nCreating a group with a label view\ninit(isExpanded: Binding<Bool>, content: () -> Content, label: () -> Label)\nCreates a disclosure group with the given label and content views, and a binding to the expansion state (expanded or collapsed)."
    },
    {
        "title": "onInsert(of:perform:)",
        "url": "https://developer.apple.com/documentation/swiftui/dynamicviewcontent/oninsert(of:perform:)-418bq",
        "html": "Parameters\nsupportedContentTypes\n\nAn array of UTI types that the dynamic view supports.\n\naction\n\nA closure that SwiftUI invokes when elements are added to the view. The closure takes two arguments: The first argument is the offset relative to the dynamic view\u2019s underlying collection of data. The second argument is an array of NSItemProvider items that represents the data that you want to insert.\n\nReturn Value\n\nA view that calls action when elements are inserted into the original view.\n\nSee Also\nResponding to updates\nfunc onDelete(perform: Optional<(IndexSet) -> Void>) -> some DynamicViewContent\nSets the deletion action for the dynamic view.\nfunc onMove(perform: Optional<(IndexSet, Int) -> Void>) -> some DynamicViewContent\nSets the move action for the dynamic view.\nfunc dropDestination<T>(for: T.Type, action: ([T], Int) -> Void) -> some DynamicViewContent\nSets the insert action for the dynamic view."
    },
    {
        "title": "content",
        "url": "https://developer.apple.com/documentation/swiftui/disclosuregroupstyleconfiguration/content-swift.property",
        "html": "See Also\nConfiguring the content\nstruct Content\nA type-erased content of a disclosure group."
    },
    {
        "title": "init(selection:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tabview/init(selection:content:)",
        "html": "See Also\nCreating a tab view\ninit(content: () -> Content)\nAvailable when SelectionValue is Int and Content conforms to View."
    },
    {
        "title": "label",
        "url": "https://developer.apple.com/documentation/swiftui/disclosuregroupstyleconfiguration/label-swift.property",
        "html": "See Also\nConfiguring the label\nstruct Label\nA type-erased label of a disclosure group."
    },
    {
        "title": "init(isExpanded:content:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/disclosuregroup/init(isexpanded:content:label:)",
        "html": "Parameters\nisExpanded\n\nA binding to a Boolean value that determines the group\u2019s expansion state (expanded or collapsed).\n\ncontent\n\nThe content shown when the disclosure group expands.\n\nlabel\n\nA view that describes the content of the disclosure group.\n\nSee Also\nCreating a group with a label view\ninit(content: () -> Content, label: () -> Label)\nCreates a disclosure group with the given label and content views."
    },
    {
        "title": "init(value:in:step:label:minimumValueLabel:maximumValueLabel:onEditingChanged:)",
        "url": "https://developer.apple.com/documentation/swiftui/slider/init(value:in:step:label:minimumvaluelabel:maximumvaluelabel:oneditingchanged:)",
        "html": "Parameters\nvalue\n\nThe selected value within bounds.\n\nbounds\n\nThe range of the valid values. Defaults to 0...1.\n\nstep\n\nThe distance between each valid value.\n\nlabel\n\nA View that describes the purpose of the instance. Not all slider styles show the label, but even in those cases, SwiftUI uses the label for accessibility. For example, VoiceOver uses the label to identify the purpose of the slider.\n\nminimumValueLabel\n\nA view that describes bounds.lowerBound.\n\nmaximumValueLabel\n\nA view that describes bounds.lowerBound.\n\nonEditingChanged\n\nA callback for when editing begins and ends.\n\nDiscussion\n\nThe value of the created instance is equal to the position of the given value within bounds, mapped into 0...1.\n\nThe slider calls onEditingChanged when editing begins and ends. For example, on iOS, editing begins when the user starts to drag the thumb along the slider\u2019s track.\n\nSee Also\nCreating a slider with labels\ninit<V>(value: Binding<V>, in: ClosedRange<V>, label: () -> Label, onEditingChanged: (Bool) -> Void)\nCreates a slider to select a value from a given range, which displays the provided label.\nAvailable when Label conforms to View and ValueLabel is EmptyView.\ninit<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, label: () -> Label, onEditingChanged: (Bool) -> Void)\nCreates a slider to select a value from a given range, subject to a step increment, which displays the provided label.\nAvailable when Label conforms to View and ValueLabel is EmptyView.\ninit<V>(value: Binding<V>, in: ClosedRange<V>, label: () -> Label, minimumValueLabel: () -> ValueLabel, maximumValueLabel: () -> ValueLabel, onEditingChanged: (Bool) -> Void)\nCreates a slider to select a value from a given range, which displays the provided labels.\nAvailable when Label conforms to View and ValueLabel conforms to View."
    },
    {
        "title": "SidebarRowSize.small",
        "url": "https://developer.apple.com/documentation/swiftui/sidebarrowsize/small",
        "html": "See Also\nGetting row sizes\ncase medium\nThe standard \u201cmedium\u201d row size\ncase large\nThe standard \u201clarge\u201d row size"
    },
    {
        "title": "isExpanded",
        "url": "https://developer.apple.com/documentation/swiftui/disclosuregroupstyleconfiguration/isexpanded",
        "html": "See Also\nManaging disclosure\nvar $isExpanded: Binding<Bool>"
    },
    {
        "title": "$isExpanded",
        "url": "https://developer.apple.com/documentation/swiftui/disclosuregroupstyleconfiguration/$isexpanded",
        "html": "See Also\nManaging disclosure\nvar isExpanded: Bool\nA binding to a Boolean that indicates whether the disclosure group is expanded."
    },
    {
        "title": "SidebarRowSize.medium",
        "url": "https://developer.apple.com/documentation/swiftui/sidebarrowsize/medium",
        "html": "See Also\nGetting row sizes\ncase small\nThe standard \u201csmall\u201d row size\ncase large\nThe standard \u201clarge\u201d row size"
    },
    {
        "title": "label",
        "url": "https://developer.apple.com/documentation/swiftui/datepickerstyleconfiguration/label-swift.property",
        "html": "See Also\nLabeling the date picker\nstruct Label\nA type-erased label of a DatePicker.\nvar displayedComponents: DatePickerComponents\nThe date components that the user is able to view and edit."
    },
    {
        "title": "init(value:in:label:minimumValueLabel:maximumValueLabel:onEditingChanged:)",
        "url": "https://developer.apple.com/documentation/swiftui/slider/init(value:in:label:minimumvaluelabel:maximumvaluelabel:oneditingchanged:)",
        "html": "Parameters\nvalue\n\nThe selected value within bounds.\n\nbounds\n\nThe range of the valid values. Defaults to 0...1.\n\nlabel\n\nA View that describes the purpose of the instance. Not all slider styles show the label, but even in those cases, SwiftUI uses the label for accessibility. For example, VoiceOver uses the label to identify the purpose of the slider.\n\nminimumValueLabel\n\nA view that describes bounds.lowerBound.\n\nmaximumValueLabel\n\nA view that describes bounds.lowerBound.\n\nonEditingChanged\n\nA callback for when editing begins and ends.\n\nDiscussion\n\nThe value of the created instance is equal to the position of the given value within bounds, mapped into 0...1.\n\nThe slider calls onEditingChanged when editing begins and ends. For example, on iOS, editing begins when the user starts to drag the thumb along the slider\u2019s track.\n\nSee Also\nCreating a slider with labels\ninit<V>(value: Binding<V>, in: ClosedRange<V>, label: () -> Label, onEditingChanged: (Bool) -> Void)\nCreates a slider to select a value from a given range, which displays the provided label.\nAvailable when Label conforms to View and ValueLabel is EmptyView.\ninit<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, label: () -> Label, onEditingChanged: (Bool) -> Void)\nCreates a slider to select a value from a given range, subject to a step increment, which displays the provided label.\nAvailable when Label conforms to View and ValueLabel is EmptyView.\ninit<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, label: () -> Label, minimumValueLabel: () -> ValueLabel, maximumValueLabel: () -> ValueLabel, onEditingChanged: (Bool) -> Void)\nCreates a slider to select a value from a given range, subject to a step increment, which displays the provided labels.\nAvailable when Label conforms to View and ValueLabel conforms to View."
    },
    {
        "title": "minimumDate",
        "url": "https://developer.apple.com/documentation/swiftui/datepickerstyleconfiguration/minimumdate",
        "html": "See Also\nEstablishing the date range\nvar maximumDate: Date?\nThe most recent selectable date."
    },
    {
        "title": "init(value:in:label:currentValueLabel:markedValueLabels:)",
        "url": "https://developer.apple.com/documentation/swiftui/gauge/init(value:in:label:currentvaluelabel:markedvaluelabels:)",
        "html": "Parameters\nvalue\n\nThe value to show in the instance.\n\nbounds\n\nThe range of the valid values. Defaults to 0...1.\n\nlabel\n\nA view that describes the purpose of the gauge.\n\ncurrentValueLabel\n\nA view that describes the current value of the gauge.\n\nminimumValueLabel\n\nA view that describes the lower bounds of the gauge.\n\nmaximumValueLabel\n\nA view that describes the upper bounds of the gauge.\n\nmarkedValueLabels\n\nA view builder containing tagged views, each of which describes a particular value of the gauge. The method ignores this parameter.\n\nSee Also\nCreating a gauge\ninit<V>(value: V, in: ClosedRange<V>, label: () -> Label)\nCreates a gauge showing a value within a range and describes the gauge\u2019s purpose and current value.\ninit<V>(value: V, in: ClosedRange<V>, label: () -> Label, currentValueLabel: () -> CurrentValueLabel)\nCreates a gauge showing a value within a range and that describes the gauge\u2019s purpose and current value.\ninit<V>(value: V, in: ClosedRange<V>, label: () -> Label, currentValueLabel: () -> CurrentValueLabel, minimumValueLabel: () -> BoundsLabel, maximumValueLabel: () -> BoundsLabel)\nCreates a gauge showing a value within a range and describes the gauge\u2019s current, minimum, and maximum values.\ninit<V>(value: V, in: ClosedRange<V>, label: () -> Label, currentValueLabel: () -> CurrentValueLabel, minimumValueLabel: () -> BoundsLabel, maximumValueLabel: () -> BoundsLabel, markedValueLabels: () -> MarkedValueLabels)\nCreates a gauge representing a value within a range."
    },
    {
        "title": "init(_:item:subject:message:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(_:item:subject:message:)-72ddf",
        "html": "Parameters\ntitleKey\n\nA key identifying the title of the share action.\n\nitem\n\nThe item to share.\n\nsubject\n\nA title for the item to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the item to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\nSee Also\nSharing an item with a label\ninit<S>(S, item: URL, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit(LocalizedStringKey, item: URL, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit(Text, item: String, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit<S>(S, item: String, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit(Text, item: URL, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable."
    },
    {
        "title": "init(_:selection:in:displayedComponents:)",
        "url": "https://developer.apple.com/documentation/swiftui/datepicker/init(_:selection:in:displayedcomponents:)-7b6qq",
        "html": "Parameters\ntitleKey\n\nThe key for the localized title of self, describing its purpose.\n\nselection\n\nThe date value being displayed and selected.\n\nrange\n\nThe inclusive range of selectable dates.\n\ndisplayedComponents\n\nThe date components that user is able to view and edit. Defaults to [.hourAndMinute, .date]. On watchOS, if .hourAndMinute or .hourMinuteAndSecond are included with .date, only .date is displayed.\n\nSee Also\nCreating a date picker for a range\ninit(selection: Binding<Date>, in: ClosedRange<Date>, displayedComponents: DatePicker<Label>.Components, label: () -> Label)\nCreates an instance that selects a Date in a closed range.\nAvailable when Label conforms to View.\ninit<S>(S, selection: Binding<Date>, in: ClosedRange<Date>, displayedComponents: DatePicker<Label>.Components)\nCreates an instance that selects a Date in a closed range.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:image:description:)",
        "url": "https://developer.apple.com/documentation/swiftui/contentunavailableview/init(_:image:description:)-7xnlo",
        "html": "Parameters\ntitle\n\nA string used as the title.\n\nimage\n\nThe name of the image resource to lookup.\n\ndescription\n\nThe view that describes the interface.\n\nSee Also\nCreating an unavailable view with an image\ninit(LocalizedStringKey, image: String, description: Text?)\nCreates an interface, consisting of a title generated from a localized string, an image and additional content, that you display when the content of your app is unavailable to users.\nAvailable when Label is Label<Text, Image>, Description is Text?, and Actions is EmptyView."
    },
    {
        "title": "init(selection:in:displayedComponents:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/datepicker/init(selection:in:displayedcomponents:label:)-1a3lp",
        "html": "Parameters\nselection\n\nThe date value being displayed and selected.\n\nrange\n\nThe open range from some selectable start date.\n\ndisplayedComponents\n\nThe date components that user is able to view and edit. Defaults to [.hourAndMinute, .date]. On watchOS, if .hourAndMinute or .hourMinuteAndSecond are included with .date, only .date is displayed.\n\nlabel\n\nA view that describes the use of the date.\n\nSee Also\nCreating a date picker with a start date\ninit(LocalizedStringKey, selection: Binding<Date>, in: PartialRangeFrom<Date>, displayedComponents: DatePicker<Label>.Components)\nCreates an instance that selects a Date on or after some start date.\nAvailable when Label is Text.\ninit<S>(S, selection: Binding<Date>, in: PartialRangeFrom<Date>, displayedComponents: DatePicker<Label>.Components)\nCreates an instance that selects a Date on or after some start date.\nAvailable when Label is Text."
    },
    {
        "title": "init(value:in:label:currentValueLabel:minimumValueLabel:maximumValueLabel:markedValueLabels:)",
        "url": "https://developer.apple.com/documentation/swiftui/gauge/init(value:in:label:currentvaluelabel:minimumvaluelabel:maximumvaluelabel:markedvaluelabels:)",
        "html": "Parameters\nvalue\n\nThe value to show in the gauge.\n\nbounds\n\nThe range of the valid values. Defaults to 0...1.\n\nlabel\n\nA view that describes the purpose of the gauge.\n\ncurrentValueLabel\n\nA view that describes the current value of the gauge.\n\nminimumValueLabel\n\nA view that describes the lower bounds of the gauge.\n\nmaximumValueLabel\n\nA view that describes the upper bounds of the gauge.\n\nmarkedValueLabels\n\nA view builder containing tagged views. each of which describes a particular value of the gauge. The method ignores this parameter.\n\nSee Also\nCreating a gauge\ninit<V>(value: V, in: ClosedRange<V>, label: () -> Label)\nCreates a gauge showing a value within a range and describes the gauge\u2019s purpose and current value.\ninit<V>(value: V, in: ClosedRange<V>, label: () -> Label, currentValueLabel: () -> CurrentValueLabel)\nCreates a gauge showing a value within a range and that describes the gauge\u2019s purpose and current value.\ninit<V>(value: V, in: ClosedRange<V>, label: () -> Label, currentValueLabel: () -> CurrentValueLabel, markedValueLabels: () -> MarkedValueLabels)\nCreates a gauge representing a value within a range.\ninit<V>(value: V, in: ClosedRange<V>, label: () -> Label, currentValueLabel: () -> CurrentValueLabel, minimumValueLabel: () -> BoundsLabel, maximumValueLabel: () -> BoundsLabel)\nCreates a gauge showing a value within a range and describes the gauge\u2019s current, minimum, and maximum values."
    },
    {
        "title": "init(items:subject:message:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(items:subject:message:)-7e7e0",
        "html": "Parameters\nitems\n\nThe items to share.\n\nsubject\n\nA title for the items to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the items to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\nDiscussion\n\nUse this initializer when you want the system-standard appearance for ShareLink.\n\nSee Also\nSharing items\ninit(items: Data, subject: Text?, message: Text?)\nCreates an instance that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is URL.\ninit(items: Data, subject: Text?, message: Text?, label: () -> Label)\nCreates an instance that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label conforms to View, and Data.Element is String.\ninit(items: Data, subject: Text?, message: Text?, label: () -> Label)\nCreates an instance that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label conforms to View, and Data.Element is URL."
    },
    {
        "title": "init(selection:in:displayedComponents:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/datepicker/init(selection:in:displayedcomponents:label:)-1o10a",
        "html": "Parameters\nselection\n\nThe date value being displayed and selected.\n\nrange\n\nThe open range before some selectable end date.\n\ndisplayedComponents\n\nThe date components that user is able to view and edit. Defaults to [.hourAndMinute, .date]. On watchOS, if .hourAndMinute or .hourMinuteAndSecond are included with .date, only .date is displayed.\n\nlabel\n\nA view that describes the use of the date.\n\nSee Also\nCreating a date picker with an end date\ninit(LocalizedStringKey, selection: Binding<Date>, in: PartialRangeThrough<Date>, displayedComponents: DatePicker<Label>.Components)\nCreates an instance that selects a Date on or before some end date.\nAvailable when Label is Text.\ninit<S>(S, selection: Binding<Date>, in: PartialRangeThrough<Date>, displayedComponents: DatePicker<Label>.Components)\nCreates an instance that selects a Date on or before some end date.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:systemImage:description:)",
        "url": "https://developer.apple.com/documentation/swiftui/contentunavailableview/init(_:systemimage:description:)-6b6h",
        "html": "Parameters\ntitle\n\nA string used as the title.\n\nsystemImage\n\nThe name of the system symbol image resource to lookup. Use the SF Symbols app to look up the names of system symbol images.\n\ndescription\n\nThe view that describes the interface.\n\nSee Also\nCreating an unavailable view with a system image\ninit(LocalizedStringKey, systemImage: String, description: Text?)\nCreates an interface, consisting of a title generated from a localized string, a system icon image and additional content, that you display when the content of your app is unavailable to users.\nAvailable when Label is Label<Text, Image>, Description is Text?, and Actions is EmptyView."
    },
    {
        "title": "init(_:selection:in:displayedComponents:)",
        "url": "https://developer.apple.com/documentation/swiftui/datepicker/init(_:selection:in:displayedcomponents:)-1666o",
        "html": "Parameters\ntitle\n\nThe title of self, describing its purpose.\n\nselection\n\nThe date value being displayed and selected.\n\nrange\n\nThe open range before some selectable end date.\n\ndisplayedComponents\n\nThe date components that user is able to view and edit. Defaults to [.hourAndMinute, .date]. On watchOS, if .hourAndMinute or .hourMinuteAndSecond are included with .date, only .date is displayed.\n\nSee Also\nCreating a date picker with an end date\ninit(selection: Binding<Date>, in: PartialRangeThrough<Date>, displayedComponents: DatePicker<Label>.Components, label: () -> Label)\nCreates an instance that selects a Date on or before some end date.\nAvailable when Label conforms to View.\ninit(LocalizedStringKey, selection: Binding<Date>, in: PartialRangeThrough<Date>, displayedComponents: DatePicker<Label>.Components)\nCreates an instance that selects a Date on or before some end date.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:sources:isOn:)",
        "url": "https://developer.apple.com/documentation/swiftui/toggle/init(_:sources:ison:)-39rkx",
        "html": "Parameters\ntitle\n\nA string that describes the purpose of the toggle.\n\nsources\n\nA collection of values used as the source for rendering the Toggle\u2019s state.\n\nisOn\n\nThe key path of the values that determines whether the toggle is on, mixed or off.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). See Text for more information about localizing strings.\n\nThe following example creates a single toggle that represents the state of multiple alarms:\n\nstruct Alarm: Hashable, Identifiable {\n    var id = UUID()\n    var isOn = false\n    var name = \"\"\n}\n\n\n@State private var alarms = [\n    Alarm(isOn: true, name: \"Morning\"),\n    Alarm(isOn: false, name: \"Evening\")\n]\n\n\nToggle(\"Enable all alarms\", sources: $alarms, isOn: \\.isOn)\n\nSee Also\nCreating a toggle for a collection\ninit<C>(sources: C, isOn: KeyPath<C.Element, Binding<Bool>>, label: () -> Label)\nCreates a toggle representing a collection of values with a custom label.\ninit<C>(LocalizedStringKey, sources: C, isOn: KeyPath<C.Element, Binding<Bool>>)\nCreates a toggle representing a collection of values that generates its label from a localized string key.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:selection:supportsOpacity:)",
        "url": "https://developer.apple.com/documentation/swiftui/colorpicker/init(_:selection:supportsopacity:)-7cued",
        "html": "Parameters\ntitle\n\nThe title displayed by the color picker.\n\nselection\n\nA Binding to the variable containing a Color.\n\nsupportsOpacity\n\nA Boolean value that indicates whether the color picker allows adjustments to the selected color\u2019s opacity; the default is true.\n\nDiscussion\n\nUse ColorPicker to create a color well that your app uses to allow the selection of a Color. The example below creates a color well using a Binding and title you provide:\n\nfunc showColorPicker(_ title: String, color: Binding<Color>) {\n    ColorPicker(title, selection: color)\n}\n\nSee Also\nCreating a color picker\ninit(selection: Binding<Color>, supportsOpacity: Bool, label: () -> Label)\nCreates an instance that selects a color.\ninit(LocalizedStringKey, selection: Binding<Color>, supportsOpacity: Bool)\nCreates a color picker with a text label generated from a title string key.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:systemImage:selection:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/picker/init(_:systemimage:selection:content:)-5ybho",
        "html": "Parameters\ntitleKey\n\nA localized string key that describes the purpose of selecting an option.\n\nsystemImage\n\nThe name of the image resource to lookup.\n\nselection\n\nA binding to a property that determines the currently-selected option.\n\ncontent\n\nA view that contains the set of options.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nTo initialize a picker with a string variable, use init(_:selection:content:) instead.\n\nSee Also\nCreating a picker with an system image label\ninit<S>(S, systemImage: String, selection: Binding<SelectionValue>, content: () -> Content)\nCreates a picker that generates its label from a string and system image.\nAvailable when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View.\ninit<C>(LocalizedStringKey, systemImage: String, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)\nCreates a picker that generates its label from a localized string key.\nAvailable when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View.\ninit<C, S>(S, systemImage: String, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)\nCreates a picker bound to a collection of bindings that generates its label from a string.\nAvailable when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View."
    },
    {
        "title": "init(_:systemImage:sources:isOn:)",
        "url": "https://developer.apple.com/documentation/swiftui/toggle/init(_:systemimage:sources:ison:)-9gjf",
        "html": "Parameters\ntitle\n\nA string that describes the purpose of the toggle.\n\nsystemImage\n\nThe name of the image resource to lookup.\n\nsources\n\nA collection of values used as the source for rendering the Toggle\u2019s state.\n\nisOn\n\nThe key path of the values that determines whether the toggle is on, mixed or off.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). See Text for more information about localizing strings.\n\nThe following example creates a single toggle that represents the state of multiple alarms:\n\nstruct Alarm: Hashable, Identifiable {\n    var id = UUID()\n    var isOn = false\n    var name = \"\"\n}\n\n\n@State private var alarms = [\n    Alarm(isOn: true, name: \"Morning\"),\n    Alarm(isOn: false, name: \"Evening\")\n]\n\n\nToggle(\"Enable all alarms\", sources: $alarms, isOn: \\.isOn)\n\nSee Also\nCreating a toggle with an system image\ninit(LocalizedStringKey, systemImage: String, isOn: Binding<Bool>)\nCreates a toggle that generates its label from a localized string key and system image.\nAvailable when Label is Label<Text, Image>.\ninit<S>(S, systemImage: String, isOn: Binding<Bool>)\nCreates a toggle that generates its label from a string and system image.\nAvailable when Label is Label<Text, Image>.\ninit<C>(LocalizedStringKey, systemImage: String, sources: C, isOn: KeyPath<C.Element, Binding<Bool>>)\nCreates a toggle representing a collection of values that generates its label from a localized string key and system image.\nAvailable when Label is Label<Text, Image>."
    },
    {
        "title": "init(_:systemImage:sources:isOn:)",
        "url": "https://developer.apple.com/documentation/swiftui/toggle/init(_:systemimage:sources:ison:)-6umtq",
        "html": "Parameters\ntitleKey\n\nThe key for the toggle\u2019s localized title, that describes the purpose of the toggle.\n\nsystemImage\n\nThe name of the image resource to lookup.\n\nsources\n\nA collection of values used as the source for rendering the Toggle\u2019s state.\n\nisOn\n\nThe key path of the values that determines whether the toggle is on, mixed or off.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nThe following example creates a single toggle that represents the state of multiple alarms:\n\nstruct Alarm: Hashable, Identifiable {\n    var id = UUID()\n    var isOn = false\n    var name = \"\"\n}\n\n\n@State private var alarms = [\n    Alarm(isOn: true, name: \"Morning\"),\n    Alarm(isOn: false, name: \"Evening\")\n]\n\n\nToggle(\"Enable all alarms\", sources: $alarms, isOn: \\.isOn)\n\nSee Also\nCreating a toggle with an system image\ninit(LocalizedStringKey, systemImage: String, isOn: Binding<Bool>)\nCreates a toggle that generates its label from a localized string key and system image.\nAvailable when Label is Label<Text, Image>.\ninit<S>(S, systemImage: String, isOn: Binding<Bool>)\nCreates a toggle that generates its label from a string and system image.\nAvailable when Label is Label<Text, Image>.\ninit<S, C>(S, systemImage: String, sources: C, isOn: KeyPath<C.Element, Binding<Bool>>)\nCreates a toggle representing a collection of values that generates its label from a string.\nAvailable when Label is Label<Text, Image>."
    },
    {
        "title": "init(timerInterval:countsDown:)",
        "url": "https://developer.apple.com/documentation/swiftui/progressview/init(timerinterval:countsdown:)",
        "html": "Parameters\ntimerInterval\n\nThe date range over which the view progresses.\n\ncountsDown\n\nIf true (the default), the view empties as time passes.\n\nDiscussion\n\nUse this initializer to create a view that shows continuous progress within a date range. The following example initializes a progress view with a range of start...end, where start is 30 seconds in the past and end is 90 seconds in the future. As a result, the progress view begins at 25 percent complete.\n\nstruct ContentView: View {\n    let start = Date().addingTimeInterval(-30)\n    let end = Date().addingTimeInterval(90)\n\n\n    var body: some View {\n        ProgressView(interval: start...end\n                     countsDown: false)\n    }\n}\n\n\nBy default, the progress view empties as time passes from the start of the date range to the end, but you can use the countsDown parameter to create a progress view that fills as time passes, as the above example demonstrates.\n\nThe progress view provided by this initializer omits a descriptive label and provides a text label that automatically updates to describe the current time remaining. To provide custom views for these labels, use init(value:total:label:currentValueLabel:) instead.\n\nNote\n\nDate-relative progress views, such as those created with this initializer, don\u2019t support custom styles.\n\nSee Also\nCreate a progress view spanning a date range\ninit(timerInterval: ClosedRange<Date>, countsDown: Bool, label: () -> Label)\nCreates a progress view for showing continuous progress as time passes, with a descriptive label.\nAvailable when Label conforms to View and CurrentValueLabel is DefaultDateProgressLabel.\ninit(timerInterval: ClosedRange<Date>, countsDown: Bool, label: () -> Label, currentValueLabel: () -> CurrentValueLabel)\nCreates a progress view for showing continuous progress as time passes, with descriptive and current progress labels.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View."
    },
    {
        "title": "init(columnVisibility:preferredCompactColumn:sidebar:detail:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationsplitview/init(columnvisibility:preferredcompactcolumn:sidebar:detail:)",
        "html": "Parameters\ncolumnVisibility\n\nA Binding to state that controls the visibility of the leading column.\n\npreferredCompactColumn\n\nA Binding to state that controls which column appears on top when the view collapses.\n\nsidebar\n\nThe view to show in the leading column.\n\ndetail\n\nThe view to show in the detail area.\n\nSee Also\nSpecifying a preferred compact column and column visibility\ninit(columnVisibility: Binding<NavigationSplitViewVisibility>, preferredCompactColumn: Binding<NavigationSplitViewColumn>, sidebar: () -> Sidebar, content: () -> Content, detail: () -> Detail)\nCreates a three-column navigation split view that enables programmatic control of leading columns\u2019 visibility in regular sizes and which column appears on top when the view collapses into a single column in narrow sizes.\nAvailable when Sidebar conforms to View, Content conforms to View, and Detail conforms to View."
    },
    {
        "title": "init(_:value:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlink/init(_:value:)-9ziux",
        "html": "Parameters\ntitle\n\nA string that describes the view that this link presents.\n\nvalue\n\nAn optional value to present. When the user selects the link, SwiftUI stores a copy of the value. Pass a nil value to disable the link.\n\nDiscussion\n\nWhen someone activates the navigation link that this initializer creates, SwiftUI looks for a nearby navigationDestination(for:destination:) view modifier with a data input parameter that matches the type of this initializer\u2019s value input, with one of the following outcomes:\n\nIf SwiftUI finds a matching modifier within the view hierarchy of an enclosing NavigationStack, it pushes the modifier\u2019s corresponding destination view onto the stack.\n\nIf SwiftUI finds a matching modifier in the view hierarchy of a stack that\u2019s in a later column of a NavigationSplitView, it puts the modifier\u2019s destination view as the first and only item onto the stack while preserving the stack\u2019s root view.\n\nIf there\u2019s no matching modifier, but the link appears in a List with selection inside a leading column of a navigation split view, the link updates the selection, which might affect the appearance of a trailing view. For an example of this, see NavigationLink.\n\nIn other cases, the link doesn\u2019t do anything.\n\nBecause this initializer takes a value that conforms to the Codable protocol, you ensure that a NavigationPath that includes this link can produce a non-nil value for its codable property. This helps to make the path serializable.\n\nSee Also\nPresenting a codable value\ninit<P>(LocalizedStringKey, value: P?)\nCreates a navigation link that presents the view corresponding to a codable value, with a text label that the link generates from a localized string key.\nAvailable when Label conforms to View and Destination is Never.\ninit<P>(value: P?, label: () -> Label)\nCreates a navigation link that presents the view corresponding to a codable value.\nAvailable when Label conforms to View and Destination is Never."
    },
    {
        "title": "init(sidebar:detail:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationsplitview/init(sidebar:detail:)",
        "html": "Parameters\nsidebar\n\nThe view to show in the leading column.\n\ndetail\n\nThe view to show in the detail area.\n\nSee Also\nCreating a navigation split view\ninit(sidebar: () -> Sidebar, content: () -> Content, detail: () -> Detail)\nCreates a three-column navigation split view."
    },
    {
        "title": "init(_:selection:displayedComponents:)",
        "url": "https://developer.apple.com/documentation/swiftui/datepicker/init(_:selection:displayedcomponents:)-x4iu",
        "html": "Parameters\ntitle\n\nThe title of self, describing its purpose.\n\nselection\n\nThe date value being displayed and selected.\n\ndisplayedComponents\n\nThe date components that user is able to view and edit. Defaults to [.hourAndMinute, .date]. On watchOS, if .hourAndMinute or .hourMinuteAndSecond are included with .date, only .date is displayed.\n\nSee Also\nCreating a date picker for any date\ninit(selection: Binding<Date>, displayedComponents: DatePicker<Label>.Components, label: () -> Label)\nCreates an instance that selects a Date with an unbounded range.\nAvailable when Label conforms to View.\ninit(LocalizedStringKey, selection: Binding<Date>, displayedComponents: DatePicker<Label>.Components)\nCreates an instance that selects a Date with an unbounded range.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:systemImage:isOn:)",
        "url": "https://developer.apple.com/documentation/swiftui/toggle/init(_:systemimage:ison:)-4wc5w",
        "html": "Parameters\ntitleKey\n\nThe key for the toggle\u2019s localized title, that describes the purpose of the toggle.\n\nsystemImage\n\nThe name of the image resource to lookup.\n\nisOn\n\nA binding to a property that indicates whether the toggle is on or off.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nTo initialize a toggle with a string variable, use init(_:isOn:) instead.\n\nSee Also\nCreating a toggle with an system image\ninit<S>(S, systemImage: String, isOn: Binding<Bool>)\nCreates a toggle that generates its label from a string and system image.\nAvailable when Label is Label<Text, Image>.\ninit<C>(LocalizedStringKey, systemImage: String, sources: C, isOn: KeyPath<C.Element, Binding<Bool>>)\nCreates a toggle representing a collection of values that generates its label from a localized string key and system image.\nAvailable when Label is Label<Text, Image>.\ninit<S, C>(S, systemImage: String, sources: C, isOn: KeyPath<C.Element, Binding<Bool>>)\nCreates a toggle representing a collection of values that generates its label from a string.\nAvailable when Label is Label<Text, Image>."
    },
    {
        "title": "init(preferredCompactColumn:sidebar:content:detail:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationsplitview/init(preferredcompactcolumn:sidebar:content:detail:)",
        "html": "Parameters\npreferredCompactColumn\n\nA Binding to state that controls which column appears on top when the view collapses.\n\nsidebar\n\nThe view to show in the leading column.\n\ncontent\n\nThe view to show in the middle column.\n\ndetail\n\nThe view to show in the detail area.\n\nSee Also\nSpecifying a preferred compact column\ninit(preferredCompactColumn: Binding<NavigationSplitViewColumn>, sidebar: () -> Sidebar, detail: () -> Detail)\nCreates a two-column navigation split view that enables programmatic control over which column appears on top when the view collapses into a single column in narrow sizes.\nAvailable when Sidebar conforms to View, Content conforms to View, and Detail conforms to View."
    },
    {
        "title": "init(selection:supportsOpacity:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/colorpicker/init(selection:supportsopacity:label:)-1ijcv",
        "html": "Parameters\nselection\n\nA Binding to the variable that displays the selected Color.\n\nsupportsOpacity\n\nA Boolean value that indicates whether the color picker allows adjusting the selected color\u2019s opacity; the default is true.\n\nlabel\n\nA view that describes the use of the selected color. The system color picker UI sets it\u2019s title using the text from this view.\n\nSee Also\nCreating a color picker\ninit(LocalizedStringKey, selection: Binding<Color>, supportsOpacity: Bool)\nCreates a color picker with a text label generated from a title string key.\nAvailable when Label is Text.\ninit<S>(S, selection: Binding<Color>, supportsOpacity: Bool)\nCreates a color picker with a text label generated from a title string.\nAvailable when Label is Text."
    },
    {
        "title": "init(selection:in:displayedComponents:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/datepicker/init(selection:in:displayedcomponents:label:)-83mn1",
        "html": "Parameters\nselection\n\nThe date value being displayed and selected.\n\nrange\n\nThe inclusive range of selectable dates.\n\ndisplayedComponents\n\nThe date components that user is able to view and edit. Defaults to [.hourAndMinute, .date]. On watchOS, if .hourAndMinute or .hourMinuteAndSecond are included with .date, only .date is displayed.\n\nlabel\n\nA view that describes the use of the date.\n\nSee Also\nCreating a date picker for a range\ninit(LocalizedStringKey, selection: Binding<Date>, in: ClosedRange<Date>, displayedComponents: DatePicker<Label>.Components)\nCreates an instance that selects a Date in a closed range.\nAvailable when Label is Text.\ninit<S>(S, selection: Binding<Date>, in: ClosedRange<Date>, displayedComponents: DatePicker<Label>.Components)\nCreates an instance that selects a Date in a closed range.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:isOn:intent:)",
        "url": "https://developer.apple.com/documentation/swiftui/toggle/init(_:ison:intent:)-4lsrf",
        "html": "Parameters\ntitleKey\n\nThe key for the toggle\u2019s localized title, that describes the purpose of the toggle.\n\nisOn\n\nWhether the toggle is on or off.\n\nintent\n\nThe AppIntent to be performed.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nTo initialize a toggle with a string variable, use Toggle/init(_:isOn:intent:) instead.\n\nSee Also\nCreating a toggle for an App Intent\ninit<I>(isOn: Bool, intent: I, label: () -> Label)\nCreates a toggle performing an AppIntent.\nAvailable when Label conforms to View.\ninit<S>(S, isOn: Bool, intent: some AppIntent)\nCreates a toggle that generates its label from a string.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:isOn:)",
        "url": "https://developer.apple.com/documentation/swiftui/toggle/init(_:ison:)-2qurm",
        "html": "Parameters\ntitle\n\nA string that describes the purpose of the toggle.\n\nisOn\n\nA binding to a property that indicates whether the toggle is on or off.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). See Text for more information about localizing strings.\n\nTo initialize a toggle with a localized string key, use init(_:isOn:) instead.\n\nSee Also\nCreating a toggle\ninit(isOn: Binding<Bool>, label: () -> Label)\nCreates a toggle that displays a custom label.\ninit(LocalizedStringKey, isOn: Binding<Bool>)\nCreates a toggle that generates its label from a localized string key.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:selection:in:displayedComponents:)",
        "url": "https://developer.apple.com/documentation/swiftui/datepicker/init(_:selection:in:displayedcomponents:)-9byfj",
        "html": "Parameters\ntitleKey\n\nThe key for the localized title of self, describing its purpose.\n\nselection\n\nThe date value being displayed and selected.\n\nrange\n\nThe open range from some selectable start date.\n\ndisplayedComponents\n\nThe date components that user is able to view and edit. Defaults to [.hourAndMinute, .date]. On watchOS, if .hourAndMinute or .hourMinuteAndSecond are included with .date, only .date is displayed.\n\nSee Also\nCreating a date picker with a start date\ninit(selection: Binding<Date>, in: PartialRangeFrom<Date>, displayedComponents: DatePicker<Label>.Components, label: () -> Label)\nCreates an instance that selects a Date on or after some start date.\nAvailable when Label conforms to View.\ninit<S>(S, selection: Binding<Date>, in: PartialRangeFrom<Date>, displayedComponents: DatePicker<Label>.Components)\nCreates an instance that selects a Date on or after some start date.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:systemImage:isOn:)",
        "url": "https://developer.apple.com/documentation/swiftui/toggle/init(_:systemimage:ison:)-864oj",
        "html": "Parameters\ntitle\n\nA string that describes the purpose of the toggle.\n\nsystemImage\n\nThe name of the image resource to lookup.\n\nisOn\n\nA binding to a property that indicates whether the toggle is on or off.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). See Text for more information about localizing strings.\n\nTo initialize a toggle with a localized string key, use init(_:isOn:) instead.\n\nSee Also\nCreating a toggle with an system image\ninit(LocalizedStringKey, systemImage: String, isOn: Binding<Bool>)\nCreates a toggle that generates its label from a localized string key and system image.\nAvailable when Label is Label<Text, Image>.\ninit<C>(LocalizedStringKey, systemImage: String, sources: C, isOn: KeyPath<C.Element, Binding<Bool>>)\nCreates a toggle representing a collection of values that generates its label from a localized string key and system image.\nAvailable when Label is Label<Text, Image>.\ninit<S, C>(S, systemImage: String, sources: C, isOn: KeyPath<C.Element, Binding<Bool>>)\nCreates a toggle representing a collection of values that generates its label from a string.\nAvailable when Label is Label<Text, Image>."
    },
    {
        "title": "init(_:selection:displayedComponents:)",
        "url": "https://developer.apple.com/documentation/swiftui/datepicker/init(_:selection:displayedcomponents:)-96gnq",
        "html": "Parameters\ntitleKey\n\nThe key for the localized title of self, describing its purpose.\n\nselection\n\nThe date value being displayed and selected.\n\ndisplayedComponents\n\nThe date components that user is able to view and edit. Defaults to [.hourAndMinute, .date]. On watchOS, if .hourAndMinute or .hourMinuteAndSecond are included with .date, only .date is displayed.\n\nSee Also\nCreating a date picker for any date\ninit(selection: Binding<Date>, displayedComponents: DatePicker<Label>.Components, label: () -> Label)\nCreates an instance that selects a Date with an unbounded range.\nAvailable when Label conforms to View.\ninit<S>(S, selection: Binding<Date>, displayedComponents: DatePicker<Label>.Components)\nCreates an instance that selects a Date within the given range.\nAvailable when Label is Text."
    },
    {
        "title": "search(text:)",
        "url": "https://developer.apple.com/documentation/swiftui/contentunavailableview/search(text:)",
        "html": "Parameters\ntext\n\nThe search text query.\n\nDiscussion\n\nFor example, consider the usage of this static member in ContactsListView:\n\nstruct ContactsListView: View {\n    @ObservedObject private var viewModel = ContactsViewModel()\n\n\n    var body: some View {\n        NavigationStack {\n            CustomSearchBar(query: $viewModel.searchText)\n            List {\n                ForEach(viewModel.searchResults) { contact in\n                    NavigationLink {\n                        ContactsView(contact)\n                    } label: {\n                        Text(contact.name)\n                    }\n                }\n            }\n            .navigationTitle(\"Contacts\")\n            .overlay {\n                if viewModel.searchResults.isEmpty {\n                    ContentUnavailableView\n                        .search(text: viewModel.searchText)\n                }\n            }\n        }\n    }\n}\n\nSee Also\nGetting built-in unavailable views\nstatic var search: ContentUnavailableView<SearchUnavailableContent.Label, SearchUnavailableContent.Description, SearchUnavailableContent.Actions>\nCreates a ContentUnavailableView instance that conveys a search state.\nAvailable when Label is SearchUnavailableContent.Label, Description is SearchUnavailableContent.Description, and Actions is SearchUnavailableContent.Actions."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/toggle/init(_:)",
        "html": "Parameters\nconfiguration\n\nThe properties of the toggle, including a label and a binding to the toggle\u2019s state.\n\nDiscussion\n\nYou can use this initializer within the makeBody(configuration:) method of a ToggleStyle to create an instance of the styled toggle. This is useful for custom toggle styles that only modify the current toggle style, as opposed to implementing a brand new style.\n\nFor example, the following style adds a red border around the toggle, but otherwise preserves the toggle\u2019s current style:\n\nstruct RedBorderToggleStyle: ToggleStyle {\n    func makeBody(configuration: Configuration) -> some View {\n        Toggle(configuration)\n            .padding()\n            .border(.red)\n    }\n}\n"
    },
    {
        "title": "init(selection:supportsOpacity:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/colorpicker/init(selection:supportsopacity:label:)-9f43z",
        "html": "Parameters\nselection\n\nA Binding to the variable that displays the selected CGColor.\n\nsupportsOpacity\n\nA Boolean value that indicates whether the color picker allows adjusting the selected color\u2019s opacity; the default is true.\n\nlabel\n\nA view that describes the use of the selected color. The system color picker UI sets it\u2019s title using the text from this view.\n\nSee Also\nCreating a core graphics color picker\ninit(LocalizedStringKey, selection: Binding<CGColor>, supportsOpacity: Bool)\nCreates a color picker with a text label generated from a title string key.\nAvailable when Label is Text.\ninit<S>(S, selection: Binding<CGColor>, supportsOpacity: Bool)\nCreates a color picker with a text label generated from a title string.\nAvailable when Label is Text."
    },
    {
        "title": "decrease",
        "url": "https://developer.apple.com/documentation/swiftui/sensoryfeedback/decrease",
        "html": "Discussion\n\nOnly plays feedback on watchOS.\n\nSee Also\nIndicating changes and selections\nstatic let alignment: SensoryFeedback\nIndicates the alignment of a dragged item.\nstatic let increase: SensoryFeedback\nIndicates that an important value increased above a significant threshold.\nstatic let levelChange: SensoryFeedback\nIndicates movement between discrete levels of pressure.\nstatic let selection: SensoryFeedback\nIndicates that a UI element\u2019s values are changing."
    },
    {
        "title": "init(value:in:step:format:label:onEditingChanged:)",
        "url": "https://developer.apple.com/documentation/swiftui/stepper/init(value:in:step:format:label:oneditingchanged:)",
        "html": "Parameters\nvalue\n\nA Binding to a value that you provide.\n\nbounds\n\nA closed range that describes the upper and lower bounds permitted by the stepper.\n\nstep\n\nThe amount to increment or decrement the stepper when the user clicks or taps the stepper\u2019s increment or decrement buttons, respectively.\n\nformat\n\nA format style of type F to use when converting between the string the user edits and the underlying value of type F.FormatInput. If format can\u2019t perform the conversion, the stepper leaves value unchanged. If the user stops editing the text in an invalid state, the stepper updates the text to the last known valid value.\n\nlabel\n\nA view describing the purpose of this stepper.\n\nonEditingChanged\n\nA closure that\u2019s called when editing begins and ends. For example, on iOS, the user may touch and hold the increment or decrement buttons on a stepper which causes the execution of the onEditingChanged closure at the start and end of the gesture.\n\nDiscussion\n\nUse this initializer to create a stepper that increments or decrements a binding to value by the step size you provide within the given bounds. By setting the bounds, you ensure that the value never goes below or above the lowest or highest value, respectively.\n\nThe example below shows a stepper that displays the effect of incrementing or decrementing a value with the step size of step with the bounds defined by range:\n\nstruct StepperView: View {\n    @State private var value = 0\n    let step = 5\n    let range = 1...50\n\n\n    var body: some View {\n        Stepper(value: $value,\n                in: range,\n                step: step,\n                format: .number) {\n            Text(\"Current: \\(value) in \\(range.description) \" +\n                 \"stepping by \\(step)\")\n        }\n            .padding(10)\n    }\n}\n\n\nSee Also\nCreating a stepper over a range\ninit<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, label: () -> Label, onEditingChanged: (Bool) -> Void)\nCreates a stepper configured to increment or decrement a binding to a value using a step value and within a range of values you provide.\nAvailable when Label conforms to View.\ninit<V>(LocalizedStringKey, value: Binding<V>, in: ClosedRange<V>, step: V.Stride, onEditingChanged: (Bool) -> Void)\nCreates a stepper instance that increments and decrements a binding to a value, by a step size and within a closed range that you provide.\nAvailable when Label is Text.\ninit<S, V>(S, value: Binding<V>, in: ClosedRange<V>, step: V.Stride, onEditingChanged: (Bool) -> Void)\nCreates a stepper instance that increments and decrements a binding to a value, by a step size and within a closed range that you provide.\nAvailable when Label is Text.\ninit<F>(LocalizedStringKey, value: Binding<F.FormatInput>, in: ClosedRange<F.FormatInput>, step: F.FormatInput.Stride, format: F, onEditingChanged: (Bool) -> Void)\nCreates a stepper instance that increments and decrements a binding to a value, by a step size and within a closed range that you provide, displaying its value with an applied format style.\nAvailable when Label is Text.\ninit<S, F>(S, value: Binding<F.FormatInput>, in: ClosedRange<F.FormatInput>, step: F.FormatInput.Stride, format: F, onEditingChanged: (Bool) -> Void)\nCreates a stepper instance that increments and decrements a binding to a value, by a step size and within a closed range that you provide, displaying its value with an applied format style.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:value:step:format:onEditingChanged:)",
        "url": "https://developer.apple.com/documentation/swiftui/stepper/init(_:value:step:format:oneditingchanged:)-164rp",
        "html": "Parameters\ntitle\n\nA string describing the purpose of the stepper.\n\nvalue\n\nThe Binding to a value that you provide.\n\nstep\n\nThe amount to increment or decrement value each time the user clicks or taps the stepper\u2019s increment or decrement button, respectively. Defaults to 1.\n\nformat\n\nA format style of type F to use when converting between the string the user edits and the underlying value of type F.FormatInput. If format can\u2019t perform the conversion, the stepper leaves value unchanged. If the user stops editing the text in an invalid state, the stepper updates the text to the last known valid value.\n\nonEditingChanged\n\nA closure that\u2019s called when editing begins and ends. For example, on iOS, the user may touch and hold the increment or decrement buttons on a Stepper which causes the execution of the onEditingChanged closure at the start and end of the gesture.\n\nDiscussion\n\nUse Stepper(_:value:step:format:onEditingChanged:) to create a stepper with a custom title that increments or decrements a binding to value by the step size you specify, while displaying the current value.\n\nIn the example below, the stepper increments or decrements the binding value by 5 each time one of the user clicks or taps the control\u2019s increment or decrement buttons:\n\nstruct StepperView: View {\n    let title: String\n    @State private var value = 1\n\n\n    var body: some View {\n        Stepper(title, value: $value, step: 5, format: .number)\n            .padding(10)\n    }\n}\n\nSee Also\nCreating a stepper\ninit<V>(value: Binding<V>, step: V.Stride, label: () -> Label, onEditingChanged: (Bool) -> Void)\nCreates a stepper configured to increment or decrement a binding to a value using a step value you provide.\nAvailable when Label conforms to View.\ninit<F>(value: Binding<F.FormatInput>, step: F.FormatInput.Stride, format: F, label: () -> Label, onEditingChanged: (Bool) -> Void)\nCreates a stepper configured to increment or decrement a binding to a value using a step value you provide, displaying its value with an applied format style.\nAvailable when Label conforms to View.\ninit<V>(LocalizedStringKey, value: Binding<V>, step: V.Stride, onEditingChanged: (Bool) -> Void)\nCreates a stepper with a title key and configured to increment and decrement a binding to a value and step amount you provide.\nAvailable when Label is Text.\ninit<S, V>(S, value: Binding<V>, step: V.Stride, onEditingChanged: (Bool) -> Void)\nCreates a stepper with a title and configured to increment and decrement a binding to a value and step amount you provide.\nAvailable when Label is Text.\ninit<F>(LocalizedStringKey, value: Binding<F.FormatInput>, step: F.FormatInput.Stride, format: F, onEditingChanged: (Bool) -> Void)\nCreates a stepper with a title key and configured to increment and decrement a binding to a value and step amount you provide, displaying its value with an applied format style.\nAvailable when Label is Text."
    },
    {
        "title": "stop",
        "url": "https://developer.apple.com/documentation/swiftui/sensoryfeedback/stop",
        "html": "Discussion\n\nUse this haptic when stopping a timer or other activity that was previously started.\n\nOnly plays feedback on watchOS.\n\nSee Also\nIndicating start and stop\nstatic let start: SensoryFeedback\nIndicates that an activity started."
    },
    {
        "title": "init(_:value:in:step:onEditingChanged:)",
        "url": "https://developer.apple.com/documentation/swiftui/stepper/init(_:value:in:step:oneditingchanged:)-erv1",
        "html": "Parameters\ntitleKey\n\nThe key for the stepper\u2019s localized title describing the purpose of the stepper.\n\nvalue\n\nA Binding to a value that your provide.\n\nbounds\n\nA closed range that describes the upper and lower bounds permitted by the stepper.\n\nstep\n\nThe amount to increment or decrement value each time the user clicks or taps the stepper\u2019s increment or decrement button, respectively. Defaults to 1.\n\nonEditingChanged\n\nA closure that\u2019s called when editing begins and ends. For example, on iOS, the user may touch and hold the increment or decrement buttons on a Stepper which causes the execution of the onEditingChanged closure at the start and end of the gesture.\n\nDiscussion\n\nUse Stepper(_:value:in:step:onEditingChanged:) to create a stepper that increments or decrements a value within a specific range of values by a specific step size. In the example below, a stepper increments or decrements a binding to value over a range of 1...50 by 5 at each press of the stepper\u2019s increment or decrement buttons:\n\nstruct StepperView: View {\n    @State private var value = 0\n    @State private var titleKey = \"Stepper\"\n\n\n    let step = 5\n    let range = 1...50\n\n\n    var body: some View {\n        VStack(spacing: 20) {\n            Text(\"Current Stepper Value: \\(value)\")\n            Stepper(titleKey, value: $value, in: range, step: step)\n        }\n    }\n}\n\n\nSee Also\nCreating a stepper over a range\ninit<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, label: () -> Label, onEditingChanged: (Bool) -> Void)\nCreates a stepper configured to increment or decrement a binding to a value using a step value and within a range of values you provide.\nAvailable when Label conforms to View.\ninit<F>(value: Binding<F.FormatInput>, in: ClosedRange<F.FormatInput>, step: F.FormatInput.Stride, format: F, label: () -> Label, onEditingChanged: (Bool) -> Void)\nCreates a stepper configured to increment or decrement a binding to a value using a step value and within a range of values you provide, displaying its value with an applied format style.\nAvailable when Label conforms to View.\ninit<S, V>(S, value: Binding<V>, in: ClosedRange<V>, step: V.Stride, onEditingChanged: (Bool) -> Void)\nCreates a stepper instance that increments and decrements a binding to a value, by a step size and within a closed range that you provide.\nAvailable when Label is Text.\ninit<F>(LocalizedStringKey, value: Binding<F.FormatInput>, in: ClosedRange<F.FormatInput>, step: F.FormatInput.Stride, format: F, onEditingChanged: (Bool) -> Void)\nCreates a stepper instance that increments and decrements a binding to a value, by a step size and within a closed range that you provide, displaying its value with an applied format style.\nAvailable when Label is Text.\ninit<S, F>(S, value: Binding<F.FormatInput>, in: ClosedRange<F.FormatInput>, step: F.FormatInput.Stride, format: F, onEditingChanged: (Bool) -> Void)\nCreates a stepper instance that increments and decrements a binding to a value, by a step size and within a closed range that you provide, displaying its value with an applied format style.\nAvailable when Label is Text."
    },
    {
        "title": "init(value:step:format:label:onEditingChanged:)",
        "url": "https://developer.apple.com/documentation/swiftui/stepper/init(value:step:format:label:oneditingchanged:)",
        "html": "Parameters\nvalue\n\nThe Binding to a value that you provide.\n\nstep\n\nThe amount to increment or decrement value each time the user clicks or taps the stepper\u2019s increment or decrement buttons. Defaults to 1.\n\nformat\n\nA format style of type F to use when converting between the string the user edits and the underlying value of type F.FormatInput. If format can\u2019t perform the conversion, the stepper leaves value unchanged. If the user stops editing the text in an invalid state, the stepper updates the text to the last known valid value.\n\nlabel\n\nA view describing the purpose of this stepper.\n\nonEditingChanged\n\nA closure that\u2019s called when editing begins and ends. For example, on iOS, the user may touch and hold the increment or decrement buttons on a stepper which causes the execution of the onEditingChanged closure at the start and end of the gesture.\n\nDiscussion\n\nUse this initializer to create a stepper that increments or decrements a bound value by a specific amount each time the user clicks or taps the stepper\u2019s increment or decrement buttons, while displaying the current value.\n\nIn the example below, a stepper increments or decrements value by the step value of 5 at each click or tap of the control\u2019s increment or decrement button:\n\nstruct StepperView: View {\n    @State private var value = 1\n    let step = 5\n    var body: some View {\n        Stepper(value: $value,\n                step: step,\n                format: .number) {\n            Text(\"Current value: \\(value), step: \\(step)\")\n        }\n            .padding(10)\n    }\n}\n\n\nSee Also\nCreating a stepper\ninit<V>(value: Binding<V>, step: V.Stride, label: () -> Label, onEditingChanged: (Bool) -> Void)\nCreates a stepper configured to increment or decrement a binding to a value using a step value you provide.\nAvailable when Label conforms to View.\ninit<V>(LocalizedStringKey, value: Binding<V>, step: V.Stride, onEditingChanged: (Bool) -> Void)\nCreates a stepper with a title key and configured to increment and decrement a binding to a value and step amount you provide.\nAvailable when Label is Text.\ninit<S, V>(S, value: Binding<V>, step: V.Stride, onEditingChanged: (Bool) -> Void)\nCreates a stepper with a title and configured to increment and decrement a binding to a value and step amount you provide.\nAvailable when Label is Text.\ninit<S, F>(S, value: Binding<F.FormatInput>, step: F.FormatInput.Stride, format: F, onEditingChanged: (Bool) -> Void)\nCreates a stepper with a title and configured to increment and decrement a binding to a value and step amount you provide, displaying its value with an applied format style.\nAvailable when Label is Text.\ninit<F>(LocalizedStringKey, value: Binding<F.FormatInput>, step: F.FormatInput.Stride, format: F, onEditingChanged: (Bool) -> Void)\nCreates a stepper with a title key and configured to increment and decrement a binding to a value and step amount you provide, displaying its value with an applied format style.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:selection:supportsOpacity:)",
        "url": "https://developer.apple.com/documentation/swiftui/colorpicker/init(_:selection:supportsopacity:)-7x7yy",
        "html": "Parameters\ntitle\n\nThe title displayed by the color picker.\n\nselection\n\nA Binding to the variable containing a CGColor.\n\nsupportsOpacity\n\nA Boolean value that indicates whether the color picker allows adjustments to the selected color\u2019s opacity; the default is true.\n\nSee Also\nCreating a core graphics color picker\ninit(selection: Binding<CGColor>, supportsOpacity: Bool, label: () -> Label)\nCreates an instance that selects a color.\ninit(LocalizedStringKey, selection: Binding<CGColor>, supportsOpacity: Bool)\nCreates a color picker with a text label generated from a title string key.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:value:step:onEditingChanged:)",
        "url": "https://developer.apple.com/documentation/swiftui/stepper/init(_:value:step:oneditingchanged:)-8fa3q",
        "html": "Parameters\ntitleKey\n\nThe key for the stepper\u2019s localized title describing the purpose of the stepper.\n\nvalue\n\nA Binding to a value that you provide.\n\nstep\n\nThe amount to increment or decrement value each time the user clicks or taps the stepper\u2019s plus or minus button, respectively. Defaults to 1.\n\nonEditingChanged\n\nA closure that\u2019s called when editing begins and ends. For example, on iOS, the user may touch and hold the increment or decrement buttons on a Stepper which causes the execution of the onEditingChanged closure at the start and end of the gesture.\n\nDiscussion\n\nUse Stepper(_:value:step:onEditingChanged:) to create a stepper with a custom title that increments or decrements a binding to value by the step size you specify.\n\nIn the example below, the stepper increments or decrements the binding value by 5 each time the user clicks or taps on the control\u2019s increment or decrement buttons, respectively:\n\nstruct StepperView: View {\n    @State private var value = 1\n    let step = 5\n\n\n    var body: some View {\n        Stepper(\"Current value: \\(value), step: \\(step)\",\n                value: $value,\n                step: step)\n            .padding(10)\n    }\n}\n\n\nSee Also\nCreating a stepper\ninit<V>(value: Binding<V>, step: V.Stride, label: () -> Label, onEditingChanged: (Bool) -> Void)\nCreates a stepper configured to increment or decrement a binding to a value using a step value you provide.\nAvailable when Label conforms to View.\ninit<F>(value: Binding<F.FormatInput>, step: F.FormatInput.Stride, format: F, label: () -> Label, onEditingChanged: (Bool) -> Void)\nCreates a stepper configured to increment or decrement a binding to a value using a step value you provide, displaying its value with an applied format style.\nAvailable when Label conforms to View.\ninit<S, V>(S, value: Binding<V>, step: V.Stride, onEditingChanged: (Bool) -> Void)\nCreates a stepper with a title and configured to increment and decrement a binding to a value and step amount you provide.\nAvailable when Label is Text.\ninit<S, F>(S, value: Binding<F.FormatInput>, step: F.FormatInput.Stride, format: F, onEditingChanged: (Bool) -> Void)\nCreates a stepper with a title and configured to increment and decrement a binding to a value and step amount you provide, displaying its value with an applied format style.\nAvailable when Label is Text.\ninit<F>(LocalizedStringKey, value: Binding<F.FormatInput>, step: F.FormatInput.Stride, format: F, onEditingChanged: (Bool) -> Void)\nCreates a stepper with a title key and configured to increment and decrement a binding to a value and step amount you provide, displaying its value with an applied format style.\nAvailable when Label is Text."
    },
    {
        "title": "AccessibilityHeadingLevel.unspecified",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityheadinglevel/unspecified",
        "html": "See Also\nGetting the heading level\ncase h1\nLevel 1 heading.\ncase h2\nLevel 2 heading.\ncase h3\nLevel 3 heading.\ncase h4\nLevel 4 heading.\ncase h5\nLevel 5 heading.\ncase h6\nLevel 6 heading."
    },
    {
        "title": "alignment",
        "url": "https://developer.apple.com/documentation/swiftui/sensoryfeedback/alignment",
        "html": "Discussion\n\nFor example, use this pattern in a drawing app when the user drags a shape into alignment with another shape.\n\nOnly plays feedback on macOS.\n\nSee Also\nIndicating changes and selections\nstatic let decrease: SensoryFeedback\nIndicates that an important value decreased below a significant threshold.\nstatic let increase: SensoryFeedback\nIndicates that an important value increased above a significant threshold.\nstatic let levelChange: SensoryFeedback\nIndicates movement between discrete levels of pressure.\nstatic let selection: SensoryFeedback\nIndicates that a UI element\u2019s values are changing."
    },
    {
        "title": "start",
        "url": "https://developer.apple.com/documentation/swiftui/sensoryfeedback/start",
        "html": "Discussion\n\nUse this haptic when starting a timer or any other activity that can be explicitly started and stopped.\n\nOnly plays feedback on watchOS.\n\nSee Also\nIndicating start and stop\nstatic let stop: SensoryFeedback\nIndicates that an activity stopped."
    },
    {
        "title": "increase",
        "url": "https://developer.apple.com/documentation/swiftui/sensoryfeedback/increase",
        "html": "Discussion\n\nOnly plays feedback on watchOS.\n\nSee Also\nIndicating changes and selections\nstatic let alignment: SensoryFeedback\nIndicates the alignment of a dragged item.\nstatic let decrease: SensoryFeedback\nIndicates that an important value decreased below a significant threshold.\nstatic let levelChange: SensoryFeedback\nIndicates movement between discrete levels of pressure.\nstatic let selection: SensoryFeedback\nIndicates that a UI element\u2019s values are changing."
    },
    {
        "title": "plain",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitytextcontenttype/plain",
        "html": "See Also\nGetting content types\nstatic let console: AccessibilityTextContentType\nA type that represents text used for input, like in the Terminal app.\nstatic let fileSystem: AccessibilityTextContentType\nA type that represents text used by a file browser, like in the Finder app in macOS.\nstatic let messaging: AccessibilityTextContentType\nA type that represents text used in a message, like in the Messages app.\nstatic let narrative: AccessibilityTextContentType\nA type that represents text used in a story or poem, like in the Books app.\nstatic let sourceCode: AccessibilityTextContentType\nA type that represents text used in source code, like in Swift Playgrounds.\nstatic let spreadsheet: AccessibilityTextContentType\nA type that represents text used in a grid of data, like in the Numbers app.\nstatic let wordProcessing: AccessibilityTextContentType\nA type that represents text used in a document, like in the Pages app."
    },
    {
        "title": "init(value:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlink/init(value:label:)-4jswo",
        "html": "Parameters\nvalue\n\nAn optional value to present. When the user selects the link, SwiftUI stores a copy of the value. Pass a nil value to disable the link.\n\nlabel\n\nA label that describes the view that this link presents.\n\nDiscussion\n\nWhen someone activates the navigation link that this initializer creates, SwiftUI looks for a nearby navigationDestination(for:destination:) view modifier with a data input parameter that matches the type of this initializer\u2019s value input, with one of the following outcomes:\n\nIf SwiftUI finds a matching modifier within the view hierarchy of an enclosing NavigationStack, it pushes the modifier\u2019s corresponding destination view onto the stack.\n\nIf SwiftUI finds a matching modifier in the view hierarchy of a stack that\u2019s in a later column of a NavigationSplitView, it puts the modifier\u2019s destination view as the first and only item onto the stack while preserving the stack\u2019s root view.\n\nIf there\u2019s no matching modifier, but the link appears in a List with selection inside a leading column of a navigation split view, the link updates the selection, which might affect the appearance of a trailing view. For an example of this, see NavigationLink.\n\nIn other cases, the link doesn\u2019t do anything.\n\nIf you want to be able to serialize a NavigationPath that includes this link, use use a value that conforms to the Codable protocol.\n\nSee Also\nPresenting a data value\ninit<P>(LocalizedStringKey, value: P?)\nCreates a navigation link that presents the view corresponding to a value, with a text label that the link generates from a localized string key.\nAvailable when Label conforms to View and Destination is Never.\ninit<S, P>(S, value: P?)\nCreates a navigation link that presents the view corresponding to a value, with a text label that the link generates from a title string.\nAvailable when Label conforms to View and Destination is Never."
    },
    {
        "title": "subtitleColor",
        "url": "https://developer.apple.com/documentation/swiftui/wkusernotificationhostingcontroller/subtitlecolor",
        "html": "Discussion\n\nDefault value is nil\n\nSee Also\nConfiguring the notification\nclass var coalescedDescriptionFormat: String?\nThe format string to display when multiple notifications of the same type arrive simultaneously. If you specify a custom string, you can use the %d variable to reflect the number of notifications. If nil format will be the system default.\nclass var isInteractive: Bool\nIf the notification should accept user input.\nclass var sashColor: Color?\nColor to use within the sash of the long look interface. If nil the sash will be the default system color.\nclass var titleColor: Color?\nThe color to apply to the text displayed in the sash. If nil the text will be the default system color.\nclass var wantsSashBlur: Bool\nIf the sash should include a blur over the background."
    },
    {
        "title": "init(_:value:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlink/init(_:value:)-91u0d",
        "html": "Parameters\ntitle\n\nA string that describes the view that this link presents.\n\nvalue\n\nAn optional value to present. When the user selects the link, SwiftUI stores a copy of the value. Pass a nil value to disable the link.\n\nDiscussion\n\nWhen someone activates the navigation link that this initializer creates, SwiftUI looks for a nearby navigationDestination(for:destination:) view modifier with a data input parameter that matches the type of this initializer\u2019s value input, with one of the following outcomes:\n\nIf SwiftUI finds a matching modifier within the view hierarchy of an enclosing NavigationStack, it pushes the modifier\u2019s corresponding destination view onto the stack.\n\nIf SwiftUI finds a matching modifier in the view hierarchy of a stack that\u2019s in a later column of a NavigationSplitView, it puts the modifier\u2019s destination view as the first and only item onto the stack while preserving the stack\u2019s root view.\n\nIf there\u2019s no matching modifier, but the link appears in a List with selection inside a leading column of a navigation split view, the link updates the selection, which might affect the appearance of a trailing view. For an example of this, see NavigationLink.\n\nIn other cases, the link doesn\u2019t do anything.\n\nIf you want to be able to serialize a NavigationPath that includes this link, use use a value that conforms to the Codable protocol.\n\nSee Also\nPresenting a data value\ninit<P>(LocalizedStringKey, value: P?)\nCreates a navigation link that presents the view corresponding to a value, with a text label that the link generates from a localized string key.\nAvailable when Label conforms to View and Destination is Never.\ninit<P>(value: P?, label: () -> Label)\nCreates a navigation link that presents the view corresponding to a value.\nAvailable when Label conforms to View and Destination is Never."
    },
    {
        "title": "init(value:in:step:label:onEditingChanged:)",
        "url": "https://developer.apple.com/documentation/swiftui/stepper/init(value:in:step:label:oneditingchanged:)",
        "html": "Parameters\nvalue\n\nA Binding to a value that you provide.\n\nbounds\n\nA closed range that describes the upper and lower bounds permitted by the stepper.\n\nstep\n\nThe amount to increment or decrement the stepper when the user clicks or taps the stepper\u2019s increment or decrement buttons, respectively.\n\nlabel\n\nA view describing the purpose of this stepper.\n\nonEditingChanged\n\nA closure that\u2019s called when editing begins and ends. For example, on iOS, the user may touch and hold the increment or decrement buttons on a stepper which causes the execution of the onEditingChanged closure at the start and end of the gesture.\n\nDiscussion\n\nUse this initializer to create a stepper that increments or decrements a binding to value by the step size you provide within the given bounds. By setting the bounds, you ensure that the value never goes below or above the lowest or highest value, respectively.\n\nThe example below shows a stepper that displays the effect of incrementing or decrementing a value with the step size of step with the bounds defined by range:\n\nstruct StepperView: View {\n    @State private var value = 0\n    let step = 5\n    let range = 1...50\n\n\n    var body: some View {\n        Stepper(value: $value,\n                in: range,\n                step: step) {\n            Text(\"Current: \\(value) in \\(range.description) \" +\n                 \"stepping by \\(step)\")\n        }\n            .padding(10)\n    }\n}\n\n\nSee Also\nCreating a stepper over a range\ninit<F>(value: Binding<F.FormatInput>, in: ClosedRange<F.FormatInput>, step: F.FormatInput.Stride, format: F, label: () -> Label, onEditingChanged: (Bool) -> Void)\nCreates a stepper configured to increment or decrement a binding to a value using a step value and within a range of values you provide, displaying its value with an applied format style.\nAvailable when Label conforms to View.\ninit<V>(LocalizedStringKey, value: Binding<V>, in: ClosedRange<V>, step: V.Stride, onEditingChanged: (Bool) -> Void)\nCreates a stepper instance that increments and decrements a binding to a value, by a step size and within a closed range that you provide.\nAvailable when Label is Text.\ninit<S, V>(S, value: Binding<V>, in: ClosedRange<V>, step: V.Stride, onEditingChanged: (Bool) -> Void)\nCreates a stepper instance that increments and decrements a binding to a value, by a step size and within a closed range that you provide.\nAvailable when Label is Text.\ninit<F>(LocalizedStringKey, value: Binding<F.FormatInput>, in: ClosedRange<F.FormatInput>, step: F.FormatInput.Stride, format: F, onEditingChanged: (Bool) -> Void)\nCreates a stepper instance that increments and decrements a binding to a value, by a step size and within a closed range that you provide, displaying its value with an applied format style.\nAvailable when Label is Text.\ninit<S, F>(S, value: Binding<F.FormatInput>, in: ClosedRange<F.FormatInput>, step: F.FormatInput.Stride, format: F, onEditingChanged: (Bool) -> Void)\nCreates a stepper instance that increments and decrements a binding to a value, by a step size and within a closed range that you provide, displaying its value with an applied format style.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:destination:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlink/init(_:destination:)-7d6im",
        "html": "Parameters\ntitleKey\n\nA localized string key for creating a text label.\n\ndestination\n\nA view for the navigation link to present.\n\nSee Also\nPresenting a destination view\ninit<S>(S, destination: () -> Destination)\nCreates a navigation link that presents a destination view, with a text label that the link generates from a title string.\nAvailable when Label is Text and Destination conforms to View.\ninit(destination: () -> Destination, label: () -> Label)\nCreates a navigation link that presents the destination view."
    },
    {
        "title": "count",
        "url": "https://developer.apple.com/documentation/swiftui/navigationpath/count",
        "html": "See Also\nManaging path contents\nvar isEmpty: Bool\nA Boolean that indicates whether this path is empty.\nfunc append<V>(V)\nAppends a new codable value to the end of this path.\nfunc append<V>(V)\nAppends a new value to the end of this path.\nfunc removeLast(Int)\nRemoves values from the end of this path."
    },
    {
        "title": "init(_:destination:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlink/init(_:destination:)-6z03e",
        "html": "Parameters\ntitle\n\nA string for creating a text label.\n\ndestination\n\nA view for the navigation link to present.\n\nSee Also\nPresenting a destination view\ninit(LocalizedStringKey, destination: () -> Destination)\nCreates a navigation link that presents a destination view, with a text label that the link generates from a localized string key.\nAvailable when Label is Text and Destination conforms to View.\ninit(destination: () -> Destination, label: () -> Label)\nCreates a navigation link that presents the destination view."
    },
    {
        "title": "init(_:value:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlink/init(_:value:)-kj9v",
        "html": "Parameters\ntitleKey\n\nA localized string that describes the view that this link presents.\n\nvalue\n\nAn optional value to present. When the user selects the link, SwiftUI stores a copy of the value. Pass a nil value to disable the link.\n\nDiscussion\n\nWhen someone activates the navigation link that this initializer creates, SwiftUI looks for a nearby navigationDestination(for:destination:) view modifier with a data input parameter that matches the type of this initializer\u2019s value input, with one of the following outcomes:\n\nIf SwiftUI finds a matching modifier within the view hierarchy of an enclosing NavigationStack, it pushes the modifier\u2019s corresponding destination view onto the stack.\n\nIf SwiftUI finds a matching modifier in the view hierarchy of a stack that\u2019s in a later column of a NavigationSplitView, it puts the modifier\u2019s destination view as the first and only item onto the stack while preserving the stack\u2019s root view.\n\nIf there\u2019s no matching modifier, but the link appears in a List with selection inside a leading column of a navigation split view, the link updates the selection, which might affect the appearance of a trailing view. For an example of this, see NavigationLink.\n\nIn other cases, the link doesn\u2019t do anything.\n\nIf you want to be able to serialize a NavigationPath that includes this link, use use a value that conforms to the Codable protocol.\n\nSee Also\nPresenting a data value\ninit<S, P>(S, value: P?)\nCreates a navigation link that presents the view corresponding to a value, with a text label that the link generates from a title string.\nAvailable when Label conforms to View and Destination is Never.\ninit<P>(value: P?, label: () -> Label)\nCreates a navigation link that presents the view corresponding to a value.\nAvailable when Label conforms to View and Destination is Never."
    },
    {
        "title": "append(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationpath/append(_:)-7519w",
        "html": "See Also\nManaging path contents\nvar isEmpty: Bool\nA Boolean that indicates whether this path is empty.\nvar count: Int\nThe number of elements in this path.\nfunc append<V>(V)\nAppends a new value to the end of this path.\nfunc removeLast(Int)\nRemoves values from the end of this path."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationpath/init(_:)-2fv0t",
        "html": "Parameters\ncodable\n\nA value describing the contents of the new path in a serializable format.\n\nSee Also\nCreating a navigation path\ninit()\nCreates a new, empty navigation path.\ninit<S>(S)\nCreates a new navigation path from the contents of a sequence that contains codable elements.\ninit<S>(S)\nCreates a new navigation path from the contents of a sequence."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationpath/init(_:)-7orbl",
        "html": "Parameters\nelements\n\nA sequence used to create the navigation path.\n\nSee Also\nCreating a navigation path\ninit()\nCreates a new, empty navigation path.\ninit(NavigationPath.CodableRepresentation)\nCreates a new navigation path from a serializable version.\ninit<S>(S)\nCreates a new navigation path from the contents of a sequence."
    },
    {
        "title": "removeLast(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationpath/removelast(_:)",
        "html": "Parameters\nk\n\nThe number of values to remove. The default value is 1.\n\nDiscussion\n\nPrecondition\n\nThe input parameter k must be greater than or equal to zero, and must be less than or equal to the number of elements in the path.\n\nSee Also\nManaging path contents\nvar isEmpty: Bool\nA Boolean that indicates whether this path is empty.\nvar count: Int\nThe number of elements in this path.\nfunc append<V>(V)\nAppends a new codable value to the end of this path.\nfunc append<V>(V)\nAppends a new value to the end of this path."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationpath/init(_:)-dfls",
        "html": "Parameters\nelements\n\nA sequence used to create the navigation path.\n\nSee Also\nCreating a navigation path\ninit()\nCreates a new, empty navigation path.\ninit(NavigationPath.CodableRepresentation)\nCreates a new navigation path from a serializable version.\ninit<S>(S)\nCreates a new navigation path from the contents of a sequence that contains codable elements."
    },
    {
        "title": "isEmpty",
        "url": "https://developer.apple.com/documentation/swiftui/navigationpath/isempty",
        "html": "See Also\nManaging path contents\nvar count: Int\nThe number of elements in this path.\nfunc append<V>(V)\nAppends a new codable value to the end of this path.\nfunc append<V>(V)\nAppends a new value to the end of this path.\nfunc removeLast(Int)\nRemoves values from the end of this path."
    },
    {
        "title": "codable",
        "url": "https://developer.apple.com/documentation/swiftui/navigationpath/codable",
        "html": "Discussion\n\nThis value is nil if any of the type-erased elements of the path don\u2019t conform to the Codable protocol.\n\nSee Also\nEncoding a path\nstruct CodableRepresentation\nA serializable representation of a navigation path."
    },
    {
        "title": "warning",
        "url": "https://developer.apple.com/documentation/swiftui/sensoryfeedback/warning",
        "html": "Discussion\n\nOnly plays feedback on iOS and watchOS.\n\nSee Also\nIndicating the outcome of an operation\nstatic let success: SensoryFeedback\nIndicates that a task or action has completed.\nstatic let error: SensoryFeedback\nIndicates that an error has occurred."
    },
    {
        "title": "impact(flexibility:intensity:)",
        "url": "https://developer.apple.com/documentation/swiftui/sensoryfeedback/impact(flexibility:intensity:)",
        "html": "Discussion\n\nUse this to provide feedback for UI elements colliding. It should supplement the user experience, since only some platforms will play feedback in response to it.\n\nNot all platforms will play different feedback for different flexibilities and intensities of impact.\n\nOnly plays feedback on iOS and watchOS.\n\nSee Also\nProducing a physical impact\nstatic let impact: SensoryFeedback\nProvides a physical metaphor you can use to complement a visual experience.\nstatic func impact(weight: SensoryFeedback.Weight, intensity: Double) -> SensoryFeedback\nProvides a physical metaphor you can use to complement a visual experience.\nstruct Flexibility\nThe flexibility to be represented by a type of feedback.\nstruct Weight\nThe weight to be represented by a type of feedback."
    },
    {
        "title": "ControlSize.small",
        "url": "https://developer.apple.com/documentation/swiftui/controlsize/small",
        "html": "See Also\nGetting control sizes\ncase mini\nA control version that is minimally sized.\ncase regular\nA control version that is the default size.\ncase large\nA control version that is prominently sized.\ncase extraLarge"
    },
    {
        "title": "ControlSize.large",
        "url": "https://developer.apple.com/documentation/swiftui/controlsize/large",
        "html": "See Also\nGetting control sizes\ncase mini\nA control version that is minimally sized.\ncase small\nA control version that is proportionally smaller size for space-constrained views.\ncase regular\nA control version that is the default size.\ncase extraLarge"
    },
    {
        "title": "ControlSize.regular",
        "url": "https://developer.apple.com/documentation/swiftui/controlsize/regular",
        "html": "See Also\nGetting control sizes\ncase mini\nA control version that is minimally sized.\ncase small\nA control version that is proportionally smaller size for space-constrained views.\ncase large\nA control version that is prominently sized.\ncase extraLarge"
    },
    {
        "title": "init(_:value:total:)",
        "url": "https://developer.apple.com/documentation/swiftui/progressview/init(_:value:total:)-7halz",
        "html": "Parameters\ntitle\n\nThe string that describes the task in progress.\n\nvalue\n\nThe completed amount of the task to this point, in a range of 0.0 to total, or nil if the progress is indeterminate.\n\ntotal\n\nThe full amount representing the complete scope of the task, meaning the task is complete if value equals total. The default value is 1.0.\n\nDiscussion\n\nIf the value is non-nil, but outside the range of 0.0 through total, the progress view pins the value to those limits, rounding to the nearest possible bound. A value of nil represents indeterminate progress, in which case the progress view ignores total.\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(verbatim:). See Text for more information about localizing strings. To initialize a determinate progress view with a localized string key, use the corresponding initializer that takes a LocalizedStringKey instance.\n\nSee Also\nCreating a determinate progress view\ninit(Progress)\nCreates a progress view for visualizing the given progress instance.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\ninit<V>(value: V?, total: V)\nCreates a progress view for showing determinate progress.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\ninit<V>(LocalizedStringKey, value: V?, total: V)\nCreates a progress view for showing determinate progress that generates its label from a localized string.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\ninit<V>(value: V?, total: V, label: () -> Label)\nCreates a progress view for showing determinate progress, with a custom label.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\ninit<V>(value: V?, total: V, label: () -> Label, currentValueLabel: () -> CurrentValueLabel)\nCreates a progress view for showing determinate progress, with a custom label.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View."
    },
    {
        "title": "ControlSize.extraLarge",
        "url": "https://developer.apple.com/documentation/swiftui/controlsize/extralarge",
        "html": "See Also\nGetting control sizes\ncase mini\nA control version that is minimally sized.\ncase small\nA control version that is proportionally smaller size for space-constrained views.\ncase regular\nA control version that is the default size.\ncase large\nA control version that is prominently sized."
    },
    {
        "title": "init(_:image:sources:selection:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/picker/init(_:image:sources:selection:content:)-5sg1",
        "html": "Parameters\ntitle\n\nA string that describes the purpose of selecting an option.\n\nimage\n\nThe name of the image resource to lookup.\n\nsources\n\nA collection of values used as the source for displaying the Picker\u2019s selection.\n\nselection\n\nThe key path of the values that determines the currently-selected options. When a user selects an option from the picker, the values at the key path of all items in the sources collection are updated with the selected option.\n\ncontent\n\nA view that contains the set of options.\n\nDiscussion\n\nIf the wrapped values of the collection passed to sources are not all the same, some styles render the selection in a mixed state. The specific presentation depends on the style. For example, a Picker with a menu style uses dashes instead of checkmarks to indicate the selected values.\n\nIn the following example, a picker in a document inspector controls the thickness of borders for the currently-selected shapes, which can be of any number.\n\nenum Thickness: String, CaseIterable, Identifiable {\n    case thin\n    case regular\n    case thick\n\n\n    var id: String { rawValue }\n}\n\n\nstruct Border {\n    var color: Color\n    var thickness: Thickness\n}\n\n\n@State private var selectedObjectBorders = [\n    Border(color: .black, thickness: .thin),\n    Border(color: .red, thickness: .thick)\n]\n\n\nPicker(\n    \"Border Thickness\",\n    sources: $selectedObjectBorders,\n    selection: \\.thickness\n) {\n    ForEach(Thickness.allCases) { thickness in\n        Text(thickness.rawValue)\n    }\n}\n\nSee Also\nCreating a picker with an image resource label\ninit<S>(S, image: ImageResource, selection: Binding<SelectionValue>, content: () -> Content)\nCreates a picker that generates its label from a string and image resource.\nAvailable when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View.\ninit(LocalizedStringKey, image: ImageResource, selection: Binding<SelectionValue>, content: () -> Content)\nCreates a picker that generates its label from a localized string key and image resource\nAvailable when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View.\ninit<C>(LocalizedStringKey, image: ImageResource, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)\nCreates a picker that generates its label from a localized string key and image resource.\nAvailable when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View."
    },
    {
        "title": "init(_:image:selection:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/picker/init(_:image:selection:content:)-7ht2b",
        "html": "Parameters\ntitleKey\n\nA localized string key that describes the purpose of selecting an option.\n\nimage\n\nThe name of the image resource to lookup.\n\nselection\n\nA binding to a property that determines the currently-selected option.\n\ncontent\n\nA view that contains the set of options.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nTo initialize a picker with a string variable, use init(_:selection:content:) instead.\n\nSee Also\nCreating a picker with an image resource label\ninit<S>(S, image: ImageResource, selection: Binding<SelectionValue>, content: () -> Content)\nCreates a picker that generates its label from a string and image resource.\nAvailable when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View.\ninit<C, S>(S, image: ImageResource, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)\nCreates a picker bound to a collection of bindings that generates its label from a string and image resource.\nAvailable when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View.\ninit<C>(LocalizedStringKey, image: ImageResource, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)\nCreates a picker that generates its label from a localized string key and image resource.\nAvailable when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View."
    },
    {
        "title": "init(selection:content:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/picker/init(selection:content:label:)",
        "html": "Parameters\nselection\n\nA binding to a property that determines the currently-selected option.\n\ncontent\n\nA view that contains the set of options.\n\nlabel\n\nA view that describes the purpose of selecting an option.\n\nSee Also\nCreating a picker\ninit(LocalizedStringKey, selection: Binding<SelectionValue>, content: () -> Content)\nCreates a picker that generates its label from a localized string key.\nAvailable when Label is Text, SelectionValue conforms to Hashable, and Content conforms to View.\ninit<S>(S, selection: Binding<SelectionValue>, content: () -> Content)\nCreates a picker that generates its label from a string.\nAvailable when Label is Text, SelectionValue conforms to Hashable, and Content conforms to View."
    },
    {
        "title": "init(_:selection:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/picker/init(_:selection:content:)-6lwfn",
        "html": "Parameters\ntitleKey\n\nA localized string key that describes the purpose of selecting an option.\n\nselection\n\nA binding to a property that determines the currently-selected option.\n\ncontent\n\nA view that contains the set of options.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nTo initialize a picker with a string variable, use init(_:selection:content:) instead.\n\nSee Also\nCreating a picker\ninit(selection: Binding<SelectionValue>, content: () -> Content, label: () -> Label)\nCreates a picker that displays a custom label.\nAvailable when Label conforms to View, SelectionValue conforms to Hashable, and Content conforms to View.\ninit<S>(S, selection: Binding<SelectionValue>, content: () -> Content)\nCreates a picker that generates its label from a string.\nAvailable when Label is Text, SelectionValue conforms to Hashable, and Content conforms to View."
    },
    {
        "title": "init(_:value:total:)",
        "url": "https://developer.apple.com/documentation/swiftui/progressview/init(_:value:total:)-6z48w",
        "html": "Parameters\ntitleKey\n\nThe key for the progress view\u2019s localized title that describes the task in progress.\n\nvalue\n\nThe completed amount of the task to this point, in a range of 0.0 to total, or nil if the progress is indeterminate.\n\ntotal\n\nThe full amount representing the complete scope of the task, meaning the task is complete if value equals total. The default value is 1.0.\n\nDiscussion\n\nIf the value is non-nil, but outside the range of 0.0 through total, the progress view pins the value to those limits, rounding to the nearest possible bound. A value of nil represents indeterminate progress, in which case the progress view ignores total.\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings. To initialize a determinate progress view with a string variable, use the corresponding initializer that takes a StringProtocol instance.\n\nSee Also\nCreating a determinate progress view\ninit(Progress)\nCreates a progress view for visualizing the given progress instance.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\ninit<V>(value: V?, total: V)\nCreates a progress view for showing determinate progress.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\ninit<S, V>(S, value: V?, total: V)\nCreates a progress view for showing determinate progress that generates its label from a string.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\ninit<V>(value: V?, total: V, label: () -> Label)\nCreates a progress view for showing determinate progress, with a custom label.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\ninit<V>(value: V?, total: V, label: () -> Label, currentValueLabel: () -> CurrentValueLabel)\nCreates a progress view for showing determinate progress, with a custom label.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View."
    },
    {
        "title": "init(_:selection:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/picker/init(_:selection:content:)-5njtq",
        "html": "Parameters\ntitle\n\nA string that describes the purpose of selecting an option.\n\nselection\n\nA binding to a property that determines the currently-selected option.\n\ncontent\n\nA view that contains the set of options.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). See Text for more information about localizing strings.\n\nTo initialize a picker with a localized string key, use init(_:selection:content:) instead.\n\nSee Also\nCreating a picker\ninit(selection: Binding<SelectionValue>, content: () -> Content, label: () -> Label)\nCreates a picker that displays a custom label.\nAvailable when Label conforms to View, SelectionValue conforms to Hashable, and Content conforms to View.\ninit(LocalizedStringKey, selection: Binding<SelectionValue>, content: () -> Content)\nCreates a picker that generates its label from a localized string key.\nAvailable when Label is Text, SelectionValue conforms to Hashable, and Content conforms to View."
    },
    {
        "title": "init(_:sources:selection:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/picker/init(_:sources:selection:content:)-7ng1o",
        "html": "Parameters\ntitle\n\nA string that describes the purpose of selecting an option.\n\nsources\n\nA collection of values used as the source for displaying the Picker\u2019s selection.\n\nselection\n\nThe key path of the values that determines the currently-selected options. When a user selects an option from the picker, the values at the key path of all items in the sources collection are updated with the selected option.\n\ncontent\n\nA view that contains the set of options.\n\nDiscussion\n\nIf the wrapped values of the collection passed to sources are not all the same, some styles render the selection in a mixed state. The specific presentation depends on the style. For example, a Picker with a menu style uses dashes instead of checkmarks to indicate the selected values.\n\nIn the following example, a picker in a document inspector controls the thickness of borders for the currently-selected shapes, which can be of any number.\n\nenum Thickness: String, CaseIterable, Identifiable {\n    case thin\n    case regular\n    case thick\n\n\n    var id: String { rawValue }\n}\n\n\nstruct Border {\n    var color: Color\n    var thickness: Thickness\n}\n\n\n@State private var selectedObjectBorders = [\n    Border(color: .black, thickness: .thin),\n    Border(color: .red, thickness: .thick)\n]\n\n\nPicker(\n    \"Border Thickness\",\n    sources: $selectedObjectBorders,\n    selection: \\.thickness\n) {\n    ForEach(Thickness.allCases) { thickness in\n        Text(thickness.rawValue)\n    }\n}\n\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). See Text for more information about localizing strings.\n\nTo initialize a picker with a localized string key, use init(_:sources:selection:content:) instead.\n\nSee Also\nCreating a picker for a collection\ninit<C>(LocalizedStringKey, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)\nCreates a picker that generates its label from a localized string key.\nAvailable when Label is Text, SelectionValue conforms to Hashable, and Content conforms to View.\ninit<C>(sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content, label: () -> Label)\nCreates a picker that displays a custom label.\nAvailable when Label conforms to View, SelectionValue conforms to Hashable, and Content conforms to View."
    },
    {
        "title": "init(_:image:selection:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/picker/init(_:image:selection:content:)-4e9iw",
        "html": "Parameters\ntitle\n\nA string that describes the purpose of selecting an option.\n\nsystemImage\n\nThe name of the image resource to lookup.\n\nselection\n\nA binding to a property that determines the currently-selected option.\n\ncontent\n\nA view that contains the set of options.\n\nSee Also\nCreating a picker with an image resource label\ninit(LocalizedStringKey, image: ImageResource, selection: Binding<SelectionValue>, content: () -> Content)\nCreates a picker that generates its label from a localized string key and image resource\nAvailable when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View.\ninit<C, S>(S, image: ImageResource, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)\nCreates a picker bound to a collection of bindings that generates its label from a string and image resource.\nAvailable when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View.\ninit<C>(LocalizedStringKey, image: ImageResource, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)\nCreates a picker that generates its label from a localized string key and image resource.\nAvailable when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/progressview/init(_:)-l5vj",
        "html": "Discussion\n\nThe progress view synthesizes a default label using the localizedDescription of the given progress instance.\n\nSee Also\nCreating a determinate progress view\ninit<V>(value: V?, total: V)\nCreates a progress view for showing determinate progress.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\ninit<V>(LocalizedStringKey, value: V?, total: V)\nCreates a progress view for showing determinate progress that generates its label from a localized string.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\ninit<S, V>(S, value: V?, total: V)\nCreates a progress view for showing determinate progress that generates its label from a string.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\ninit<V>(value: V?, total: V, label: () -> Label)\nCreates a progress view for showing determinate progress, with a custom label.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\ninit<V>(value: V?, total: V, label: () -> Label, currentValueLabel: () -> CurrentValueLabel)\nCreates a progress view for showing determinate progress, with a custom label.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/progressview/init()",
        "html": "See Also\nCreating an indeterminate progress view\ninit(label: () -> Label)\nCreates a progress view for showing indeterminate progress that displays a custom label.\nAvailable when Label conforms to View and CurrentValueLabel is EmptyView.\ninit(LocalizedStringKey)\nCreates a progress view for showing indeterminate progress that generates its label from a localized string.\nAvailable when Label conforms to View and CurrentValueLabel is EmptyView.\ninit<S>(S)\nCreates a progress view for showing indeterminate progress that generates its label from a string.\nAvailable when Label conforms to View and CurrentValueLabel is EmptyView."
    },
    {
        "title": "isAccessibilityElement()",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/isaccessibilityelement()",
        "html": "See Also\nManaging accessibility behaviors\nvar accessibilityFocusedUIElement: Any?\nfunc accessibilityChildren() -> [Any]?\nfunc accessibilityChildrenInNavigationOrder() -> [NSAccessibilityElementProtocol]?\nfunc accessibilityHitTest(NSPoint) -> Any?\nfunc accessibilityRole() -> NSAccessibility.Role?\nfunc accessibilitySubrole() -> NSAccessibility.Subrole?"
    },
    {
        "title": "init(_:image:icon:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharepreview/init(_:image:icon:)-39xn8",
        "html": "Parameters\ntitle\n\nA title to show in a preview.\n\nimage\n\nAn image to show in a preview.\n\nicon\n\nAn icon to show in a preview.\n\nSee Also\nDisplaying a preview with an image and an icon\ninit(LocalizedStringKey, image: Image, icon: Icon)\nCreates a preview representation.\ninit(Text, image: Image, icon: Icon)\nCreates a preview representation."
    },
    {
        "title": "init(sources:selection:content:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/picker/init(sources:selection:content:label:)",
        "html": "Parameters\nsources\n\nA collection of values used as the source for displaying the Picker\u2019s selection.\n\nselection\n\nThe key path of the values that determines the currently-selected options. When a user selects an option from the picker, the values at the key path of all items in the sources collection are updated with the selected option.\n\ncontent\n\nA view that contains the set of options.\n\nlabel\n\nA view that describes the purpose of selecting an option.\n\nDiscussion\n\nIf the wrapped values of the collection passed to sources are not all the same, some styles render the selection in a mixed state. The specific presentation depends on the style. For example, a Picker with a menu style uses dashes instead of checkmarks to indicate the selected values.\n\nIn the following example, a picker in a document inspector controls the thickness of borders for the currently-selected shapes, which can be of any number.\n\nenum Thickness: String, CaseIterable, Identifiable {\n    case thin\n    case regular\n    case thick\n\n\n    var id: String { rawValue }\n}\n\n\nstruct Border {\n    var color: Color\n    var thickness: Thickness\n}\n\n\n@State private var selectedObjectBorders = [\n    Border(color: .black, thickness: .thin),\n    Border(color: .red, thickness: .thick)\n]\n\n\nPicker(\n    sources: $selectedObjectBorders,\n    selection: \\.thickness\n) {\n    ForEach(Thickness.allCases) { thickness in\n        Text(thickness.rawValue)\n    }\n} label: {\n    Text(\"Border Thickness\")\n}\n\nSee Also\nCreating a picker for a collection\ninit<C>(LocalizedStringKey, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)\nCreates a picker that generates its label from a localized string key.\nAvailable when Label is Text, SelectionValue conforms to Hashable, and Content conforms to View.\ninit<C, S>(S, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)\nCreates a picker bound to a collection of bindings that generates its label from a string.\nAvailable when Label is Text, SelectionValue conforms to Hashable, and Content conforms to View."
    },
    {
        "title": "init(_:icon:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharepreview/init(_:icon:)-8pv9z",
        "html": "Parameters\ntitleKey\n\nA key identifying a title to show in a preview.\n\nicon\n\nAn icon to show in a preview.\n\nSee Also\nDisplaying a preview with an icon\ninit<S>(S, icon: Icon)\nCreates a preview representation.\nAvailable when Image is Never and Icon conforms to Transferable.\ninit(Text, icon: Icon)\nCreates a preview representation.\nAvailable when Image is Never and Icon conforms to Transferable."
    },
    {
        "title": "init(columnVisibility:sidebar:detail:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationsplitview/init(columnvisibility:sidebar:detail:)",
        "html": "Parameters\ncolumnVisibility\n\nA Binding to state that controls the visibility of the leading column.\n\nsidebar\n\nThe view to show in the leading column.\n\ndetail\n\nThe view to show in the detail area.\n\nSee Also\nHiding columns in a navigation split view\ninit(columnVisibility: Binding<NavigationSplitViewVisibility>, sidebar: () -> Sidebar, content: () -> Content, detail: () -> Detail)\nCreates a three-column navigation split view that enables programmatic control of leading columns\u2019 visibility."
    },
    {
        "title": "init(_:systemImage:selection:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/picker/init(_:systemimage:selection:content:)-4uaqe",
        "html": "Parameters\ntitle\n\nA string that describes the purpose of selecting an option.\n\nsystemImage\n\nThe name of the image resource to lookup.\n\nselection\n\nA binding to a property that determines the currently-selected option.\n\ncontent\n\nA view that contains the set of options.\n\nSee Also\nCreating a picker with an system image label\ninit(LocalizedStringKey, systemImage: String, selection: Binding<SelectionValue>, content: () -> Content)\nCreates a picker that generates its label from a localized string key and system image.\nAvailable when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View.\ninit<C>(LocalizedStringKey, systemImage: String, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)\nCreates a picker that generates its label from a localized string key.\nAvailable when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View.\ninit<C, S>(S, systemImage: String, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)\nCreates a picker bound to a collection of bindings that generates its label from a string.\nAvailable when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/progressview/init(_:)-6k5se",
        "html": "Parameters\ntitleKey\n\nThe key for the progress view\u2019s localized title that describes the task in progress.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings. To initialize a indeterminate progress view with a string variable, use the corresponding initializer that takes a StringProtocol instance.\n\nSee Also\nCreating an indeterminate progress view\ninit()\nCreates a progress view for showing indeterminate progress, without a label.\nAvailable when Label conforms to View and CurrentValueLabel is EmptyView.\ninit(label: () -> Label)\nCreates a progress view for showing indeterminate progress that displays a custom label.\nAvailable when Label conforms to View and CurrentValueLabel is EmptyView.\ninit<S>(S)\nCreates a progress view for showing indeterminate progress that generates its label from a string.\nAvailable when Label conforms to View and CurrentValueLabel is EmptyView."
    },
    {
        "title": "init(value:in:step:label:onEditingChanged:)",
        "url": "https://developer.apple.com/documentation/swiftui/slider/init(value:in:step:label:oneditingchanged:)",
        "html": "Parameters\nvalue\n\nThe selected value within bounds.\n\nbounds\n\nThe range of the valid values. Defaults to 0...1.\n\nstep\n\nThe distance between each valid value.\n\nlabel\n\nA View that describes the purpose of the instance. Not all slider styles show the label, but even in those cases, SwiftUI uses the label for accessibility. For example, VoiceOver uses the label to identify the purpose of the slider.\n\nonEditingChanged\n\nA callback for when editing begins and ends.\n\nDiscussion\n\nThe value of the created instance is equal to the position of the given value within bounds, mapped into 0...1.\n\nThe slider calls onEditingChanged when editing begins and ends. For example, on iOS, editing begins when the user starts to drag the thumb along the slider\u2019s track.\n\nSee Also\nCreating a slider with labels\ninit<V>(value: Binding<V>, in: ClosedRange<V>, label: () -> Label, onEditingChanged: (Bool) -> Void)\nCreates a slider to select a value from a given range, which displays the provided label.\nAvailable when Label conforms to View and ValueLabel is EmptyView.\ninit<V>(value: Binding<V>, in: ClosedRange<V>, label: () -> Label, minimumValueLabel: () -> ValueLabel, maximumValueLabel: () -> ValueLabel, onEditingChanged: (Bool) -> Void)\nCreates a slider to select a value from a given range, which displays the provided labels.\nAvailable when Label conforms to View and ValueLabel conforms to View.\ninit<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, label: () -> Label, minimumValueLabel: () -> ValueLabel, maximumValueLabel: () -> ValueLabel, onEditingChanged: (Bool) -> Void)\nCreates a slider to select a value from a given range, subject to a step increment, which displays the provided labels.\nAvailable when Label conforms to View and ValueLabel conforms to View."
    },
    {
        "title": "doubleColumn",
        "url": "https://developer.apple.com/documentation/swiftui/navigationsplitviewvisibility/doublecolumn",
        "html": "Discussion\n\nFor a two-column navigation split view, doubleColumn is equivalent to all.\n\nSee Also\nGetting visibilities\nstatic var automatic: NavigationSplitViewVisibility\nUse the default leading column visibility for the current device.\nstatic var all: NavigationSplitViewVisibility\nShow all the columns of a three-column navigation split view.\nstatic var detailOnly: NavigationSplitViewVisibility\nHide the leading two columns of a three-column navigation split view, so that just the detail area shows."
    },
    {
        "title": "all",
        "url": "https://developer.apple.com/documentation/swiftui/navigationsplitviewvisibility/all",
        "html": "See Also\nGetting visibilities\nstatic var automatic: NavigationSplitViewVisibility\nUse the default leading column visibility for the current device.\nstatic var doubleColumn: NavigationSplitViewVisibility\nShow the content column and detail area of a three-column navigation split view, or the sidebar column and detail area of a two-column navigation split view.\nstatic var detailOnly: NavigationSplitViewVisibility\nHide the leading two columns of a three-column navigation split view, so that just the detail area shows."
    },
    {
        "title": "init(_:onIncrement:onDecrement:onEditingChanged:)",
        "url": "https://developer.apple.com/documentation/swiftui/stepper/init(_:onincrement:ondecrement:oneditingchanged:)-42t6m",
        "html": "Parameters\ntitle\n\nA string describing the purpose of the stepper.\n\nonIncrement\n\nThe closure to execute when the user clicks or taps the control\u2019s plus button.\n\nonDecrement\n\nThe closure to execute when the user clicks or taps the control\u2019s minus button.\n\nonEditingChanged\n\nA closure that\u2019s called when editing begins and ends. For example, on iOS, the user may touch and hold the increment or decrement buttons on a Stepper which causes the execution of the onEditingChanged closure at the start and end of the gesture.\n\nDiscussion\n\nUse Stepper(_:onIncrement:onDecrement:onEditingChanged:) to create a control with a custom title that executes closures you provide when the user clicks or taps on the stepper\u2019s increment or decrement buttons.\n\nThe example below uses an array that holds a number of Color values, a local state variable, value, to set the control\u2019s background color, and title label. When the user clicks or taps on the stepper\u2019s increment or decrement buttons SwiftUI executes the relevant closure that updates value, wrapping the value to prevent overflow. SwiftUI then re-renders the view, updating the text and background color to match the current index:\n\nstruct StepperView: View {\n    @State private var value = 0\n    let title: String\n    let colors: [Color] = [.orange, .red, .gray, .blue, .green,\n                           .purple, .pink]\n\n\n    func incrementStep() {\n        value += 1\n        if value >= colors.count { value = 0 }\n    }\n\n\n    func decrementStep() {\n        value -= 1\n        if value < 0 { value = colors.count - 1 }\n    }\n\n\n    var body: some View {\n        Stepper(title, onIncrement: incrementStep, onDecrement: decrementStep)\n            .padding(5)\n            .background(colors[value])\n    }\n}\n\n\nSee Also\nCreating a stepper with change behavior\ninit(label: () -> Label, onIncrement: (() -> Void)?, onDecrement: (() -> Void)?, onEditingChanged: (Bool) -> Void)\nCreates a stepper instance that performs the closures you provide when the user increments or decrements the stepper.\ninit(LocalizedStringKey, onIncrement: (() -> Void)?, onDecrement: (() -> Void)?, onEditingChanged: (Bool) -> Void)\nCreates a stepper that uses a title key and executes the closures you provide when the user clicks or taps the stepper\u2019s increment and decrement buttons.\nAvailable when Label is Text."
    },
    {
        "title": "init(value:in:onEditingChanged:)",
        "url": "https://developer.apple.com/documentation/swiftui/slider/init(value:in:oneditingchanged:)",
        "html": "Parameters\nvalue\n\nThe selected value within bounds.\n\nbounds\n\nThe range of the valid values. Defaults to 0...1.\n\nonEditingChanged\n\nA callback for when editing begins and ends.\n\nDiscussion\n\nThe value of the created instance is equal to the position of the given value within bounds, mapped into 0...1.\n\nThe slider calls onEditingChanged when editing begins and ends. For example, on iOS, editing begins when the user starts to drag the thumb along the slider\u2019s track.\n\nSee Also\nCreating a slider\ninit<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, onEditingChanged: (Bool) -> Void)\nCreates a slider to select a value from a given range, subject to a step increment.\nAvailable when Label is EmptyView and ValueLabel is EmptyView."
    },
    {
        "title": "init(_:value:in:step:format:onEditingChanged:)",
        "url": "https://developer.apple.com/documentation/swiftui/stepper/init(_:value:in:step:format:oneditingchanged:)-8yger",
        "html": "Parameters\ntitle\n\nA string describing the purpose of the stepper.\n\nvalue\n\nA Binding to a value that your provide.\n\nbounds\n\nA closed range that describes the upper and lower bounds permitted by the stepper.\n\nstep\n\nThe amount to increment or decrement value each time the user clicks or taps the stepper\u2019s increment or decrement button, respectively. Defaults to 1.\n\nformat\n\nA format style of type F to use when converting between the string the user edits and the underlying value of type F.FormatInput. If format can\u2019t perform the conversion, the stepper leaves value unchanged. If the user stops editing the text in an invalid state, the stepper updates the text to the last known valid value.\n\nonEditingChanged\n\nA closure that\u2019s called when editing begins and ends. For example, on iOS, the user may touch and hold the increment or decrement buttons on a Stepper which causes the execution of the onEditingChanged closure at the start and end of the gesture.\n\nDiscussion\n\nUse Stepper(_:value:in:step:format:onEditingChanged:) to create a stepper that increments or decrements a value within a specific range of values by a specific step size, while displaying the current value. In the example below, a stepper increments or decrements a binding to value over a range of 1...50 by 5 each time the user clicks or taps the stepper\u2019s increment or decrement buttons:\n\nstruct StepperView: View {\n    let title: String\n    @State private var value = 0\n\n\n    let step = 5\n    let range = 1...50\n\n\n    var body: some View {\n        Stepper(title,\n            value: $value,\n            in: 1...50,\n            step: 5,\n            format: .number\n        )\n        .padding()\n    }\n}\n\nSee Also\nCreating a stepper over a range\ninit<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, label: () -> Label, onEditingChanged: (Bool) -> Void)\nCreates a stepper configured to increment or decrement a binding to a value using a step value and within a range of values you provide.\nAvailable when Label conforms to View.\ninit<F>(value: Binding<F.FormatInput>, in: ClosedRange<F.FormatInput>, step: F.FormatInput.Stride, format: F, label: () -> Label, onEditingChanged: (Bool) -> Void)\nCreates a stepper configured to increment or decrement a binding to a value using a step value and within a range of values you provide, displaying its value with an applied format style.\nAvailable when Label conforms to View.\ninit<V>(LocalizedStringKey, value: Binding<V>, in: ClosedRange<V>, step: V.Stride, onEditingChanged: (Bool) -> Void)\nCreates a stepper instance that increments and decrements a binding to a value, by a step size and within a closed range that you provide.\nAvailable when Label is Text.\ninit<S, V>(S, value: Binding<V>, in: ClosedRange<V>, step: V.Stride, onEditingChanged: (Bool) -> Void)\nCreates a stepper instance that increments and decrements a binding to a value, by a step size and within a closed range that you provide.\nAvailable when Label is Text.\ninit<F>(LocalizedStringKey, value: Binding<F.FormatInput>, in: ClosedRange<F.FormatInput>, step: F.FormatInput.Stride, format: F, onEditingChanged: (Bool) -> Void)\nCreates a stepper instance that increments and decrements a binding to a value, by a step size and within a closed range that you provide, displaying its value with an applied format style.\nAvailable when Label is Text."
    },
    {
        "title": "init(value:in:onEditingChanged:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/slider/init(value:in:oneditingchanged:label:)",
        "html": "Deprecated\n\nUse init(value:in:label:onEditingChanged:) instead.\n\nParameters\nvalue\n\nThe selected value within bounds.\n\nbounds\n\nThe range of the valid values. Defaults to 0...1.\n\nonEditingChanged\n\nA callback for when editing begins and ends.\n\nlabel\n\nA View that describes the purpose of the instance. Not all slider styles show the label, but even in those cases, SwiftUI uses the label for accessibility. For example, VoiceOver uses the label to identify the purpose of the slider.\n\nDiscussion\n\nThe value of the created instance is equal to the position of the given value within bounds, mapped into 0...1.\n\nThe slider calls onEditingChanged when editing begins and ends. For example, on iOS, editing begins when the user starts to drag the thumb along the slider\u2019s track.\n\nSee Also\nDeprecated initializers\ninit<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, onEditingChanged: (Bool) -> Void, label: () -> Label)\nCreates a slider to select a value from a given range, subject to a step increment, which displays the provided label.\nAvailable when Label conforms to View and ValueLabel is EmptyView.\nDeprecated\ninit<V>(value: Binding<V>, in: ClosedRange<V>, onEditingChanged: (Bool) -> Void, minimumValueLabel: ValueLabel, maximumValueLabel: ValueLabel, label: () -> Label)\nCreates a slider to select a value from a given range, which displays the provided labels.\nAvailable when Label conforms to View and ValueLabel conforms to View.\nDeprecated\ninit<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, onEditingChanged: (Bool) -> Void, minimumValueLabel: ValueLabel, maximumValueLabel: ValueLabel, label: () -> Label)\nCreates a slider to select a value from a given range, subject to a step increment, which displays the provided labels.\nAvailable when Label conforms to View and ValueLabel conforms to View.\nDeprecated"
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharepreview/init(_:)-2oxzl",
        "html": "Parameters\ntitle\n\nA title to show in a preview.\n\nSee Also\nDisplaying a preview\ninit<S>(S)\nCreates a preview representation.\nAvailable when Image is Never and Icon is Never.\ninit(LocalizedStringKey)\nCreates a preview representation.\nAvailable when Image is Never and Icon is Never."
    },
    {
        "title": "init(value:in:step:onEditingChanged:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/slider/init(value:in:step:oneditingchanged:label:)",
        "html": "Deprecated\n\nUse init(value:in:step:label:onEditingChanged:) instead.\n\nParameters\nvalue\n\nThe selected value within bounds.\n\nbounds\n\nThe range of the valid values. Defaults to 0...1.\n\nstep\n\nThe distance between each valid value.\n\nonEditingChanged\n\nA callback for when editing begins and ends.\n\nlabel\n\nA View that describes the purpose of the instance. Not all slider styles show the label, but even in those cases, SwiftUI uses the label for accessibility. For example, VoiceOver uses the label to identify the purpose of the slider.\n\nDiscussion\n\nThe value of the created instance is equal to the position of the given value within bounds, mapped into 0...1.\n\nThe slider calls onEditingChanged when editing begins and ends. For example, on iOS, editing begins when the user starts to drag the thumb along the slider\u2019s track.\n\nSee Also\nDeprecated initializers\ninit<V>(value: Binding<V>, in: ClosedRange<V>, onEditingChanged: (Bool) -> Void, label: () -> Label)\nCreates a slider to select a value from a given range, which displays the provided label.\nAvailable when Label conforms to View and ValueLabel is EmptyView.\nDeprecated\ninit<V>(value: Binding<V>, in: ClosedRange<V>, onEditingChanged: (Bool) -> Void, minimumValueLabel: ValueLabel, maximumValueLabel: ValueLabel, label: () -> Label)\nCreates a slider to select a value from a given range, which displays the provided labels.\nAvailable when Label conforms to View and ValueLabel conforms to View.\nDeprecated\ninit<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, onEditingChanged: (Bool) -> Void, minimumValueLabel: ValueLabel, maximumValueLabel: ValueLabel, label: () -> Label)\nCreates a slider to select a value from a given range, subject to a step increment, which displays the provided labels.\nAvailable when Label conforms to View and ValueLabel conforms to View.\nDeprecated"
    },
    {
        "title": "spreadsheet",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitytextcontenttype/spreadsheet",
        "html": "See Also\nGetting content types\nstatic let console: AccessibilityTextContentType\nA type that represents text used for input, like in the Terminal app.\nstatic let fileSystem: AccessibilityTextContentType\nA type that represents text used by a file browser, like in the Finder app in macOS.\nstatic let messaging: AccessibilityTextContentType\nA type that represents text used in a message, like in the Messages app.\nstatic let narrative: AccessibilityTextContentType\nA type that represents text used in a story or poem, like in the Books app.\nstatic let plain: AccessibilityTextContentType\nA type that represents generic text that has no specific type.\nstatic let sourceCode: AccessibilityTextContentType\nA type that represents text used in source code, like in Swift Playgrounds.\nstatic let wordProcessing: AccessibilityTextContentType\nA type that represents text used in a document, like in the Pages app."
    },
    {
        "title": "init(_:value:in:step:onEditingChanged:)",
        "url": "https://developer.apple.com/documentation/swiftui/stepper/init(_:value:in:step:oneditingchanged:)-99t9q",
        "html": "Parameters\ntitle\n\nA string describing the purpose of the stepper.\n\nvalue\n\nA Binding to a value that your provide.\n\nbounds\n\nA closed range that describes the upper and lower bounds permitted by the stepper.\n\nstep\n\nThe amount to increment or decrement value each time the user clicks or taps the stepper\u2019s increment or decrement button, respectively. Defaults to 1.\n\nonEditingChanged\n\nA closure that\u2019s called when editing begins and ends. For example, on iOS, the user may touch and hold the increment or decrement buttons on a Stepper which causes the execution of the onEditingChanged closure at the start and end of the gesture.\n\nDiscussion\n\nUse Stepper(_:value:in:step:onEditingChanged:) to create a stepper that increments or decrements a value within a specific range of values by a specific step size. In the example below, a stepper increments or decrements a binding to value over a range of 1...50 by 5 each time the user clicks or taps the stepper\u2019s increment or decrement buttons:\n\nstruct StepperView: View {\n    @State private var value = 0\n    let step = 5\n    let range = 1...50\n\n\n    var body: some View {\n        Stepper(\"Current: \\(value) in \\(range.description) stepping by \\(step)\",\n                value: $value,\n                in: range,\n                step: step)\n            .padding(10)\n    }\n}\n\n\nSee Also\nCreating a stepper over a range\ninit<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, label: () -> Label, onEditingChanged: (Bool) -> Void)\nCreates a stepper configured to increment or decrement a binding to a value using a step value and within a range of values you provide.\nAvailable when Label conforms to View.\ninit<F>(value: Binding<F.FormatInput>, in: ClosedRange<F.FormatInput>, step: F.FormatInput.Stride, format: F, label: () -> Label, onEditingChanged: (Bool) -> Void)\nCreates a stepper configured to increment or decrement a binding to a value using a step value and within a range of values you provide, displaying its value with an applied format style.\nAvailable when Label conforms to View.\ninit<V>(LocalizedStringKey, value: Binding<V>, in: ClosedRange<V>, step: V.Stride, onEditingChanged: (Bool) -> Void)\nCreates a stepper instance that increments and decrements a binding to a value, by a step size and within a closed range that you provide.\nAvailable when Label is Text.\ninit<F>(LocalizedStringKey, value: Binding<F.FormatInput>, in: ClosedRange<F.FormatInput>, step: F.FormatInput.Stride, format: F, onEditingChanged: (Bool) -> Void)\nCreates a stepper instance that increments and decrements a binding to a value, by a step size and within a closed range that you provide, displaying its value with an applied format style.\nAvailable when Label is Text.\ninit<S, F>(S, value: Binding<F.FormatInput>, in: ClosedRange<F.FormatInput>, step: F.FormatInput.Stride, format: F, onEditingChanged: (Bool) -> Void)\nCreates a stepper instance that increments and decrements a binding to a value, by a step size and within a closed range that you provide, displaying its value with an applied format style.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:image:icon:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharepreview/init(_:image:icon:)-9wya8",
        "html": "Parameters\ntitleKey\n\nA key identifying a title to show in a preview.\n\nimage\n\nAn image to show in a preview.\n\nicon\n\nAn icon to show in a preview.\n\nSee Also\nDisplaying a preview with an image and an icon\ninit<S>(S, image: Image, icon: Icon)\nCreates a preview representation.\ninit(Text, image: Image, icon: Icon)\nCreates a preview representation."
    },
    {
        "title": "init(onIncrement:onDecrement:onEditingChanged:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/stepper/init(onincrement:ondecrement:oneditingchanged:label:)",
        "html": "Deprecated\n\nUse init(label:onIncrement:onDecrement:onEditingChanged:) instead.\n\nParameters\nonIncrement\n\nThe closure to execute when the user clicks or taps the control\u2019s plus button.\n\nonDecrement\n\nThe closure to execute when the user clicks or taps the control\u2019s minus button.\n\nonEditingChanged\n\nA closure called when editing begins and ends. For example, on iOS, the user may touch and hold the increment or decrement buttons on a Stepper which causes the execution of the onEditingChanged closure at the start and end of the gesture.\n\nlabel\n\nA view describing the purpose of this stepper.\n\nDiscussion\n\nUse this initializer to create a control with a custom title that executes closures you provide when the user clicks or taps the stepper\u2019s increment or decrement buttons.\n\nThe example below uses an array that holds a number of Color values, a local state variable, value, to set the control\u2019s background color, and title label. When the user clicks or taps on the stepper\u2019s increment or decrement buttons SwiftUI executes the relevant closure that updates value, wrapping the value to prevent overflow. SwiftUI then re-renders the view, updating the text and background color to match the current index:\n\nstruct StepperView: View {\n    @State private var value = 0\n    let colors: [Color] = [.orange, .red, .gray, .blue, .green,\n                           .purple, .pink]\n\n\n    func incrementStep() {\n        value += 1\n        if value >= colors.count { value = 0 }\n    }\n\n\n    func decrementStep() {\n        value -= 1\n        if value < 0 { value = colors.count - 1 }\n    }\n\n\n    var body: some View {\n        Stepper(onIncrement: incrementStep,\n            onDecrement: decrementStep) {\n            Text(\"Value: \\(value) Color: \\(colors[value].description)\")\n        }\n        .padding(5)\n        .background(colors[value])\n    }\n\n\n}\n\nSee Also\nDeprecated initializers\ninit<V>(value: Binding<V>, step: V.Stride, onEditingChanged: (Bool) -> Void, label: () -> Label)\nCreates a stepper configured to increment or decrement a binding to a value using a step value you provide.\nAvailable when Label conforms to View.\nDeprecated\ninit<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, onEditingChanged: (Bool) -> Void, label: () -> Label)\nCreates a stepper configured to increment or decrement a binding to a value using a step value and within a range of values you provide.\nAvailable when Label conforms to View.\nDeprecated"
    },
    {
        "title": "accessibilityHitTest(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/accessibilityhittest(_:)",
        "html": "See Also\nManaging accessibility behaviors\nvar accessibilityFocusedUIElement: Any?\nfunc accessibilityChildren() -> [Any]?\nfunc accessibilityChildrenInNavigationOrder() -> [NSAccessibilityElementProtocol]?\nfunc accessibilityRole() -> NSAccessibility.Role?\nfunc accessibilitySubrole() -> NSAccessibility.Subrole?\nfunc isAccessibilityElement() -> Bool"
    },
    {
        "title": "activitySystemActionForegroundColor(_:)",
        "url": "https://developer.apple.com/documentation/SwiftUI/View/activitySystemActionForegroundColor(_:)",
        "html": "Parameters\ncolor\n\nThe text color to use. Pass nil to use the system\u2019s default color.\n\nSee Also\nConfiguring a Live Activity\nfunc activityBackgroundTint(Color?) -> some View\nSets the tint color for the background of a Live Activity that appears on the Lock Screen.\nvar isActivityFullscreen: Bool\nA Boolean value that indicates whether the Live Activity appears in a full-screen presentation."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/paletteselectioneffect/automatic",
        "html": "Discussion\n\nWhen using un-tinted SF Symbols or template images, the current tint color is applied to the selected items\u2019 image. If the provided SF Symbols have custom tints, a stroke is drawn around selected items.\n\nSee Also\nGetting palette selection effects\nstatic var custom: PaletteSelectionEffect\nDoes not apply any system effect when selected.\nstatic func symbolVariant(SymbolVariants) -> PaletteSelectionEffect\nApplies the specified symbol variant when selected."
    },
    {
        "title": "init(item:subject:message:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(item:subject:message:)-49l2l",
        "html": "Parameters\nitem\n\nThe item to share.\n\nsubject\n\nA title for the item to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the item to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\nDiscussion\n\nUse this initializer when you want the system-standard appearance for ShareLink.\n\nSee Also\nSharing an item\ninit(item: URL, subject: Text?, message: Text?)\nCreates an instance that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit(item: String, subject: Text?, message: Text?, label: () -> Label)\nCreates an instance that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label conforms to View, and Data.Element conforms to Transferable.\ninit(item: URL, subject: Text?, message: Text?, label: () -> Label)\nCreates an instance that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label conforms to View, and Data.Element conforms to Transferable."
    },
    {
        "title": "capsule",
        "url": "https://developer.apple.com/documentation/swiftui/buttonbordershape/capsule",
        "html": "Discussion\n\nNote\n\nThis has no effect on non-widget system buttons on macOS.\n\nSee Also\nGetting border shapes\nstatic let automatic: ButtonBorderShape\nA shape that defers to the system to determine an appropriate shape for the given context and platform.\nstatic let circle: ButtonBorderShape\nstatic let roundedRectangle: ButtonBorderShape\nA rounded rectangle shape.\nstatic func roundedRectangle(radius: CGFloat) -> ButtonBorderShape\nA rounded rectangle shape."
    },
    {
        "title": "roundedRectangle",
        "url": "https://developer.apple.com/documentation/swiftui/buttonbordershape/roundedrectangle",
        "html": "See Also\nGetting border shapes\nstatic let automatic: ButtonBorderShape\nA shape that defers to the system to determine an appropriate shape for the given context and platform.\nstatic let capsule: ButtonBorderShape\nA capsule shape.\nstatic let circle: ButtonBorderShape\nstatic func roundedRectangle(radius: CGFloat) -> ButtonBorderShape\nA rounded rectangle shape."
    },
    {
        "title": "init(item:subject:message:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(item:subject:message:label:)-8wixj",
        "html": "Parameters\nitem\n\nThe item to share.\n\nsubject\n\nA title for the item to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the item to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\nlabel\n\nA view builder that produces a label that describes the share action.\n\nSee Also\nSharing an item\ninit(item: String, subject: Text?, message: Text?)\nCreates an instance that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit(item: URL, subject: Text?, message: Text?)\nCreates an instance that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit(item: URL, subject: Text?, message: Text?, label: () -> Label)\nCreates an instance that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label conforms to View, and Data.Element conforms to Transferable."
    },
    {
        "title": "init(rawValue:)",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontrollersizingoptions/init(rawvalue:)",
        "html": "See Also\nCreating a sizing option\nlet rawValue: Int\nThe raw value."
    },
    {
        "title": "rawValue",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontrollersizingoptions/rawvalue",
        "html": "See Also\nCreating a sizing option\ninit(rawValue: Int)\nCreates a new option set from a raw value."
    },
    {
        "title": "init(item:subject:message:preview:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(item:subject:message:preview:label:)",
        "html": "Parameters\nitem\n\nThe item to share.\n\nsubject\n\nA title for the item to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the item to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\npreview\n\nA representation of the item to render in a preview.\n\nlabel\n\nA view builder that produces a label that describes the share action.\n\nSee Also\nSharing an item with a preview\ninit<I>(item: I, subject: Text?, message: Text?, preview: SharePreview<PreviewImage, PreviewIcon>)\nCreates an instance that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage conforms to Transferable, PreviewIcon conforms to Transferable, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable."
    },
    {
        "title": "ControlActiveState.key",
        "url": "https://developer.apple.com/documentation/swiftui/controlactivestate/key",
        "html": "See Also\nGetting control active states\ncase active\ncase inactive"
    },
    {
        "title": "init(item:subject:message:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(item:subject:message:label:)-4skvj",
        "html": "Parameters\nitem\n\nThe item to share.\n\nsubject\n\nA title for the item to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the item to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\nlabel\n\nA view builder that produces a label that describes the share action.\n\nSee Also\nSharing an item\ninit(item: String, subject: Text?, message: Text?)\nCreates an instance that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit(item: URL, subject: Text?, message: Text?)\nCreates an instance that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit(item: String, subject: Text?, message: Text?, label: () -> Label)\nCreates an instance that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label conforms to View, and Data.Element conforms to Transferable."
    },
    {
        "title": "init(_:item:subject:message:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(_:item:subject:message:)-1bd8b",
        "html": "Parameters\ntitle\n\nThe title of the share action.\n\nitem\n\nThe item to share.\n\nsubject\n\nA title for the item to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the item to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\nSee Also\nSharing an item with a label\ninit(LocalizedStringKey, item: URL, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit(Text, item: String, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit<S>(S, item: String, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit(LocalizedStringKey, item: String, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit(Text, item: URL, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable."
    },
    {
        "title": "ControlActiveState.active",
        "url": "https://developer.apple.com/documentation/swiftui/controlactivestate/active",
        "html": "See Also\nGetting control active states\ncase key\ncase inactive"
    },
    {
        "title": "init(item:subject:message:preview:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(item:subject:message:preview:)",
        "html": "Parameters\nitem\n\nThe item to share.\n\nsubject\n\nA title for the item to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the item to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\npreview\n\nA representation of the item to render in a preview.\n\nDiscussion\n\nUse this initializer when you want the system-standard appearance for ShareLink.\n\nSee Also\nSharing an item with a preview\ninit<I>(item: I, subject: Text?, message: Text?, preview: SharePreview<PreviewImage, PreviewIcon>, label: () -> Label)\nCreates an instance that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage conforms to Transferable, PreviewIcon conforms to Transferable, Label conforms to View, and Data.Element conforms to Transferable."
    },
    {
        "title": "init(_:item:subject:message:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(_:item:subject:message:)-700xh",
        "html": "Parameters\ntitle\n\nThe title of the share action.\n\nitem\n\nThe item to share.\n\nsubject\n\nA title for the item to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the item to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\nSee Also\nSharing an item with a label\ninit<S>(S, item: URL, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit(LocalizedStringKey, item: URL, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit<S>(S, item: String, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit(LocalizedStringKey, item: String, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit(Text, item: URL, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable."
    },
    {
        "title": "init(_:item:subject:message:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(_:item:subject:message:)-4czuk",
        "html": "Parameters\ntitleKey\n\nA key identifying the title of the share action.\n\nitem\n\nThe item to share.\n\nsubject\n\nA title for the item to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the item to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\nSee Also\nSharing an item with a label\ninit<S>(S, item: URL, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit(Text, item: String, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit<S>(S, item: String, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit(LocalizedStringKey, item: String, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit(Text, item: URL, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable."
    },
    {
        "title": "init(items:subject:message:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(items:subject:message:label:)-piai",
        "html": "Parameters\nitems\n\nThe items to share.\n\nsubject\n\nA title for the items to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the items to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\nlabel\n\nA view builder that produces a label that describes the share action.\n\nSee Also\nSharing items\ninit(items: Data, subject: Text?, message: Text?)\nCreates an instance that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is String.\ninit(items: Data, subject: Text?, message: Text?)\nCreates an instance that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is URL.\ninit(items: Data, subject: Text?, message: Text?, label: () -> Label)\nCreates an instance that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label conforms to View, and Data.Element is String."
    },
    {
        "title": "init(_:systemImage:sources:selection:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/picker/init(_:systemimage:sources:selection:content:)-cahh",
        "html": "Parameters\ntitleKey\n\nA localized string key that describes the purpose of selecting an option.\n\nsystemImage\n\nThe name of the image resource to lookup.\n\nsources\n\nA collection of values used as the source for displaying the Picker\u2019s selection.\n\nselection\n\nThe key path of the values that determines the currently-selected options. When a user selects an option from the picker, the values at the key path of all items in the sources collection are updated with the selected option.\n\ncontent\n\nA view that contains the set of options.\n\nDiscussion\n\nIf the wrapped values of the collection passed to sources are not all the same, some styles render the selection in a mixed state. The specific presentation depends on the style. For example, a Picker with a menu style uses dashes instead of checkmarks to indicate the selected values.\n\nIn the following example, a picker in a document inspector controls the thickness of borders for the currently-selected shapes, which can be of any number.\n\nenum Thickness: String, CaseIterable, Identifiable {\n    case thin\n    case regular\n    case thick\n\n\n    var id: String { rawValue }\n}\n\n\nstruct Border {\n    var color: Color\n    var thickness: Thickness\n}\n\n\n@State private var selectedObjectBorders = [\n    Border(color: .black, thickness: .thin),\n    Border(color: .red, thickness: .thick)\n]\n\n\nPicker(\n    \"Border Thickness\",\n    sources: $selectedObjectBorders,\n    selection: \\.thickness\n) {\n    ForEach(Thickness.allCases) { thickness in\n        Text(thickness.rawValue)\n    }\n}\n\nSee Also\nCreating a picker with an system image label\ninit<S>(S, systemImage: String, selection: Binding<SelectionValue>, content: () -> Content)\nCreates a picker that generates its label from a string and system image.\nAvailable when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View.\ninit(LocalizedStringKey, systemImage: String, selection: Binding<SelectionValue>, content: () -> Content)\nCreates a picker that generates its label from a localized string key and system image.\nAvailable when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View.\ninit<C, S>(S, systemImage: String, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)\nCreates a picker bound to a collection of bindings that generates its label from a string.\nAvailable when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/progressview/init(_:)-9dmp3",
        "html": "Discussion\n\nYou can use this initializer within the makeBody(configuration:) method of a ProgressViewStyle to create an instance of the styled progress view. This is useful for custom progress view styles that only modify the current progress view style, as opposed to implementing a brand new style. Because this modifier style can\u2019t know how the current style represents progress, avoid making assumptions about the view\u2019s contents, such as whether it uses bars or other shapes.\n\nThe following example shows a style that adds a rounded pink border to a progress view, but otherwise preserves the progress view\u2019s current style:\n\nstruct PinkBorderedProgressViewStyle: ProgressViewStyle {\n    func makeBody(configuration: Configuration) -> some View {\n        ProgressView(configuration)\n            .padding(4)\n            .border(.pink, width: 3)\n            .cornerRadius(4)\n    }\n}\n\n\nNote\n\nProgress views in widgets don\u2019t apply custom styles."
    },
    {
        "title": "init(_:item:subject:message:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(_:item:subject:message:)-n6x2",
        "html": "Parameters\ntitle\n\nThe title of the share action.\n\nitem\n\nThe item to share.\n\nsubject\n\nA title for the item to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the item to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\nSee Also\nSharing an item with a label\ninit<S>(S, item: URL, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit(LocalizedStringKey, item: URL, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit(Text, item: String, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit<S>(S, item: String, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit(LocalizedStringKey, item: String, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable."
    },
    {
        "title": "init(_:systemImage:sources:selection:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/picker/init(_:systemimage:sources:selection:content:)-yxzu",
        "html": "Parameters\ntitle\n\nA string that describes the purpose of selecting an option.\n\nsystemImage\n\nThe name of the image resource to lookup.\n\nsources\n\nA collection of values used as the source for displaying the Picker\u2019s selection.\n\nselection\n\nThe key path of the values that determines the currently-selected options. When a user selects an option from the picker, the values at the key path of all items in the sources collection are updated with the selected option.\n\ncontent\n\nA view that contains the set of options.\n\nDiscussion\n\nIf the wrapped values of the collection passed to sources are not all the same, some styles render the selection in a mixed state. The specific presentation depends on the style. For example, a Picker with a menu style uses dashes instead of checkmarks to indicate the selected values.\n\nIn the following example, a picker in a document inspector controls the thickness of borders for the currently-selected shapes, which can be of any number.\n\nenum Thickness: String, CaseIterable, Identifiable {\n    case thin\n    case regular\n    case thick\n\n\n    var id: String { rawValue }\n}\n\n\nstruct Border {\n    var color: Color\n    var thickness: Thickness\n}\n\n\n@State private var selectedObjectBorders = [\n    Border(color: .black, thickness: .thin),\n    Border(color: .red, thickness: .thick)\n]\n\n\nPicker(\n    \"Border Thickness\",\n    sources: $selectedObjectBorders,\n    selection: \\.thickness\n) {\n    ForEach(Thickness.allCases) { thickness in\n        Text(thickness.rawValue)\n    }\n}\n\nSee Also\nCreating a picker with an system image label\ninit<S>(S, systemImage: String, selection: Binding<SelectionValue>, content: () -> Content)\nCreates a picker that generates its label from a string and system image.\nAvailable when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View.\ninit(LocalizedStringKey, systemImage: String, selection: Binding<SelectionValue>, content: () -> Content)\nCreates a picker that generates its label from a localized string key and system image.\nAvailable when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View.\ninit<C>(LocalizedStringKey, systemImage: String, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)\nCreates a picker that generates its label from a localized string key.\nAvailable when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View."
    },
    {
        "title": "init(value:total:label:currentValueLabel:)",
        "url": "https://developer.apple.com/documentation/swiftui/progressview/init(value:total:label:currentvaluelabel:)",
        "html": "Parameters\nvalue\n\nThe completed amount of the task to this point, in a range of 0.0 to total, or nil if the progress is indeterminate.\n\ntotal\n\nThe full amount representing the complete scope of the task, meaning the task is complete if value equals total. The default value is 1.0.\n\nlabel\n\nA view builder that creates a view that describes the task in progress.\n\ncurrentValueLabel\n\nA view builder that creates a view that describes the level of completed progress of the task.\n\nDiscussion\n\nIf the value is non-nil, but outside the range of 0.0 through total, the progress view pins the value to those limits, rounding to the nearest possible bound. A value of nil represents indeterminate progress, in which case the progress view ignores total.\n\nSee Also\nCreating a determinate progress view\ninit(Progress)\nCreates a progress view for visualizing the given progress instance.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\ninit<V>(value: V?, total: V)\nCreates a progress view for showing determinate progress.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\ninit<V>(LocalizedStringKey, value: V?, total: V)\nCreates a progress view for showing determinate progress that generates its label from a localized string.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\ninit<S, V>(S, value: V?, total: V)\nCreates a progress view for showing determinate progress that generates its label from a string.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\ninit<V>(value: V?, total: V, label: () -> Label)\nCreates a progress view for showing determinate progress, with a custom label.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View."
    },
    {
        "title": "init(value:in:label:currentValueLabel:minimumValueLabel:maximumValueLabel:)",
        "url": "https://developer.apple.com/documentation/swiftui/gauge/init(value:in:label:currentvaluelabel:minimumvaluelabel:maximumvaluelabel:)",
        "html": "Parameters\nvalue\n\nThe value to show on the gauge.\n\nbounds\n\nThe range of the valid values. Defaults to 0...1.\n\nlabel\n\nA view that describes the purpose of the gauge.\n\ncurrentValueLabel\n\nA view that describes the current value of the gauge.\n\nminimumValueLabel\n\nA view that describes the lower bounds of the gauge.\n\nmaximumValueLabel\n\nA view that describes the upper bounds of the gauge.\n\nDiscussion\n\nUse this method to create a gauge that shows a value within a prescribed bounds. The gauge has labels that describe its purpose, and for the gauge\u2019s current, minimum, and maximum values.\n\nstruct LabeledGauge: View {\n    @State private var current = 67.0\n    @State private var minValue = 0.0\n    @State private var maxValue = 170.0\n\n\n    var body: some View {\n        Gauge(value: current, in: minValue...maxValue) {\n            Text(\"BPM\")\n        } currentValueLabel: {\n            Text(\"\\(Int(current))\")\n        } minimumValueLabel: {\n            Text(\"\\(Int(minValue))\")\n        } maximumValueLabel: {\n            Text(\"\\(Int(maxValue))\")\n        }\n    }\n}\n\n\nSee Also\nCreating a gauge\ninit<V>(value: V, in: ClosedRange<V>, label: () -> Label)\nCreates a gauge showing a value within a range and describes the gauge\u2019s purpose and current value.\ninit<V>(value: V, in: ClosedRange<V>, label: () -> Label, currentValueLabel: () -> CurrentValueLabel)\nCreates a gauge showing a value within a range and that describes the gauge\u2019s purpose and current value.\ninit<V>(value: V, in: ClosedRange<V>, label: () -> Label, currentValueLabel: () -> CurrentValueLabel, markedValueLabels: () -> MarkedValueLabels)\nCreates a gauge representing a value within a range.\ninit<V>(value: V, in: ClosedRange<V>, label: () -> Label, currentValueLabel: () -> CurrentValueLabel, minimumValueLabel: () -> BoundsLabel, maximumValueLabel: () -> BoundsLabel, markedValueLabels: () -> MarkedValueLabels)\nCreates a gauge representing a value within a range."
    },
    {
        "title": "init(value:in:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/gauge/init(value:in:label:)",
        "html": "Parameters\nvalue\n\nThe value to show in the gauge.\n\nbounds\n\nThe range of the valid values. Defaults to 0...1.\n\nlabel\n\nA view that describes the purpose of the gauge.\n\nDiscussion\n\nUse this modifier to create a gauge that shows the value at its relative position along the gauge and a label describing the gauge\u2019s purpose. In the example below, the gauge has a range of 0...1, the indicator is set to 0.4, or 40 percent of the distance along the gauge:\n\nstruct SimpleGauge: View {\n    @State private var batteryLevel = 0.4\n\n\n    var body: some View {\n        Gauge(value: batteryLevel) {\n            Text(\"Battery Level\")\n        }\n    }\n}\n\n\nSee Also\nCreating a gauge\ninit<V>(value: V, in: ClosedRange<V>, label: () -> Label, currentValueLabel: () -> CurrentValueLabel)\nCreates a gauge showing a value within a range and that describes the gauge\u2019s purpose and current value.\ninit<V>(value: V, in: ClosedRange<V>, label: () -> Label, currentValueLabel: () -> CurrentValueLabel, markedValueLabels: () -> MarkedValueLabels)\nCreates a gauge representing a value within a range.\ninit<V>(value: V, in: ClosedRange<V>, label: () -> Label, currentValueLabel: () -> CurrentValueLabel, minimumValueLabel: () -> BoundsLabel, maximumValueLabel: () -> BoundsLabel)\nCreates a gauge showing a value within a range and describes the gauge\u2019s current, minimum, and maximum values.\ninit<V>(value: V, in: ClosedRange<V>, label: () -> Label, currentValueLabel: () -> CurrentValueLabel, minimumValueLabel: () -> BoundsLabel, maximumValueLabel: () -> BoundsLabel, markedValueLabels: () -> MarkedValueLabels)\nCreates a gauge representing a value within a range."
    },
    {
        "title": "SearchUnavailableContent",
        "url": "https://developer.apple.com/documentation/swiftui/searchunavailablecontent",
        "html": "Overview\n\nYou don\u2019t create this type directly. SwiftUI creates it when you build a searchContentUnavailableView.\n\nTopics\nGetting content types\nstruct Actions\nA view that represents the actions of a static ContentUnavailableView.search view.\nstruct Description\nA view that represents the description of a static ContentUnavailableView.search view.\nstruct Label\nA view that represents the label of a static placeholder search view."
    },
    {
        "title": "init(timerInterval:countsDown:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/progressview/init(timerinterval:countsdown:label:)",
        "html": "Parameters\ntimerInterval\n\nThe date range over which the view progresses.\n\ncountsDown\n\nA Boolean value that determines whether the view empties or fills as time passes. If true (the default), the view empties.\n\nlabel\n\nAn optional view that describes the purpose of the progress view.\n\nDiscussion\n\nUse this initializer to create a view that shows continuous progress within a date range. The following example initializes a progress view with a range of start...end, where start is 30 seconds in the past and end is 90 seconds in the future. As a result, the progress view begins at 25 percent complete. This example also provides a custom descriptive label.\n\nstruct ContentView: View {\n    let start = Date().addingTimeInterval(-30)\n    let end = Date().addingTimeInterval(90)\n\n\n    var body: some View {\n        ProgressView(interval: start...end,\n                     countsDown: false) {\n            Text(\"Progress\")\n         }\n    }\n}\n\n\nBy default, the progress view empties as time passes from the start of the date range to the end, but you can use the countsDown parameter to create a progress view that fills as time passes, as the above example demonstrates.\n\nThe progress view provided by this initializer uses a text label that automatically updates to describe the current time remaining. To provide a custom label to show the current value, use init(value:total:label:currentValueLabel:) instead.\n\nNote\n\nDate-relative progress views, such as those created with this initializer, don\u2019t support custom styles.\n\nSee Also\nCreate a progress view spanning a date range\ninit(timerInterval: ClosedRange<Date>, countsDown: Bool)\nCreates a progress view for showing continuous progress as time passes.\nAvailable when Label is EmptyView and CurrentValueLabel is DefaultDateProgressLabel.\ninit(timerInterval: ClosedRange<Date>, countsDown: Bool, label: () -> Label, currentValueLabel: () -> CurrentValueLabel)\nCreates a progress view for showing continuous progress as time passes, with descriptive and current progress labels.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View."
    },
    {
        "title": "init(selection:displayedComponents:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/datepicker/init(selection:displayedcomponents:label:)",
        "html": "Parameters\nselection\n\nThe date value being displayed and selected.\n\ndisplayedComponents\n\nThe date components that user is able to view and edit. Defaults to [.hourAndMinute, .date]. On watchOS, if .hourAndMinute or .hourMinuteAndSecond are included with .date, only .date is displayed.\n\nlabel\n\nA view that describes the use of the date.\n\nSee Also\nCreating a date picker for any date\ninit(LocalizedStringKey, selection: Binding<Date>, displayedComponents: DatePicker<Label>.Components)\nCreates an instance that selects a Date with an unbounded range.\nAvailable when Label is Text.\ninit<S>(S, selection: Binding<Date>, displayedComponents: DatePicker<Label>.Components)\nCreates an instance that selects a Date within the given range.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:item:subject:message:preview:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(_:item:subject:message:preview:)-56cme",
        "html": "Parameters\ntitle\n\nThe title of the share action.\n\nitem\n\nThe item to share.\n\nsubject\n\nA title for the item to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the item to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\npreview\n\nA representation of the item to render in a preview.\n\nSee Also\nSharing an item with a label and a preview\ninit<S, I>(S, item: I, subject: Text?, message: Text?, preview: SharePreview<PreviewImage, PreviewIcon>)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage conforms to Transferable, PreviewIcon conforms to Transferable, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit<I>(LocalizedStringKey, item: I, subject: Text?, message: Text?, preview: SharePreview<PreviewImage, PreviewIcon>)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage conforms to Transferable, PreviewIcon conforms to Transferable, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable."
    },
    {
        "title": "init(_:image:description:)",
        "url": "https://developer.apple.com/documentation/swiftui/contentunavailableview/init(_:image:description:)-1mmir",
        "html": "Parameters\ntitle\n\nA title generated from a localized string.\n\nimage\n\nThe name of the image resource to lookup.\n\ndescription\n\nThe view that describes the interface.\n\nSee Also\nCreating an unavailable view with an image\ninit<S>(S, image: String, description: Text?)\nCreates an interface, consisting of a title generated from a string, an image and additional content, that you display when the content of your app is unavailable to users.\nAvailable when Label is Label<Text, Image>, Description is Text?, and Actions is EmptyView."
    },
    {
        "title": "search",
        "url": "https://developer.apple.com/documentation/swiftui/contentunavailableview/search",
        "html": "Discussion\n\nA ContentUnavailableView initialized with this static member is expected to be contained within a searchable view hierarchy. Such a configuration enables the search query to be parsed into the view\u2019s description.\n\nFor example, consider the usage of this static member in ContactsListView:\n\nstruct ContactsListView: View {\n    @ObservedObject private var viewModel = ContactsViewModel()\n\n\n    var body: some View {\n        NavigationStack {\n            List {\n                ForEach(viewModel.searchResults) { contact in\n                    NavigationLink {\n                        ContactsView(contact)\n                    } label: {\n                        Text(contact.name)\n                    }\n                }\n            }\n            .navigationTitle(\"Contacts\")\n            .searchable(text: $viewModel.searchText)\n            .overlay {\n                if searchResults.isEmpty {\n                    ContentUnavailableView.search\n                }\n            }\n        }\n    }\n}\n\nSee Also\nGetting built-in unavailable views\nstatic func search(text: String) -> ContentUnavailableView<Label, Description, Actions>\nCreates a ContentUnavailableView instance that conveys a search state.\nAvailable when Label is SearchUnavailableContent.Label, Description is SearchUnavailableContent.Description, and Actions is SearchUnavailableContent.Actions."
    },
    {
        "title": "init(sources:isOn:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/toggle/init(sources:ison:label:)",
        "html": "Parameters\nsources\n\nA collection of values used as the source for rendering the Toggle\u2019s state.\n\nisOn\n\nThe key path of the values that determines whether the toggle is on, mixed or off.\n\nlabel\n\nA view that describes the purpose of the toggle.\n\nDiscussion\n\nThe following example creates a single toggle that represents the state of multiple alarms:\n\nstruct Alarm: Hashable, Identifiable {\n    var id = UUID()\n    var isOn = false\n    var name = \"\"\n}\n\n\n@State private var alarms = [\n    Alarm(isOn: true, name: \"Morning\"),\n    Alarm(isOn: false, name: \"Evening\")\n]\n\n\nToggle(sources: $alarms, isOn: \\.isOn) {\n    Text(\"Enable all alarms\")\n}\n\nSee Also\nCreating a toggle for a collection\ninit<S, C>(S, sources: C, isOn: KeyPath<C.Element, Binding<Bool>>)\nCreates a toggle representing a collection of values that generates its label from a string.\nAvailable when Label is Text.\ninit<C>(LocalizedStringKey, sources: C, isOn: KeyPath<C.Element, Binding<Bool>>)\nCreates a toggle representing a collection of values that generates its label from a localized string key.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:image:isOn:)",
        "url": "https://developer.apple.com/documentation/swiftui/toggle/init(_:image:ison:)-4o679",
        "html": "Parameters\ntitleKey\n\nThe key for the toggle\u2019s localized title, that describes the purpose of the toggle.\n\nimage\n\nThe name of the image resource to lookup.\n\nisOn\n\nA binding to a property that indicates whether the toggle is on or off.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nTo initialize a toggle with a string variable, use init(_:isOn:) instead.\n\nSee Also\nCreating a toggle with an image resource label\ninit<S>(S, image: ImageResource, isOn: Binding<Bool>)\nCreates a toggle that generates its label from a string and image resource.\nAvailable when Label is Label<Text, Image>.\ninit<C>(LocalizedStringKey, image: ImageResource, sources: C, isOn: KeyPath<C.Element, Binding<Bool>>)\nCreates a toggle representing a collection of values that generates its label from a localized string key and image resource.\nAvailable when Label is Label<Text, Image>.\ninit<S, C>(S, image: ImageResource, sources: C, isOn: KeyPath<C.Element, Binding<Bool>>)\nCreates a toggle representing a collection of values that generates its label from a string and image resource.\nAvailable when Label is Label<Text, Image>."
    },
    {
        "title": "init(_:systemImage:description:)",
        "url": "https://developer.apple.com/documentation/swiftui/contentunavailableview/init(_:systemimage:description:)-4490a",
        "html": "Parameters\ntitle\n\nA title generated from a localized string.\n\nsystemImage\n\nThe name of the system symbol image resource to lookup. Use the SF Symbols app to look up the names of system symbol images.\n\ndescription\n\nThe view that describes the interface.\n\nSee Also\nCreating an unavailable view with a system image\ninit<S>(S, systemImage: String, description: Text?)\nCreates an interface, consisting of a title generated from a string, a system icon image and additional content, that you display when the content of your app is unavailable to users.\nAvailable when Label is Label<Text, Image>, Description is Text?, and Actions is EmptyView."
    },
    {
        "title": "init(label:description:actions:)",
        "url": "https://developer.apple.com/documentation/swiftui/contentunavailableview/init(label:description:actions:)",
        "html": "Parameters\nlabel\n\nThe label that describes the view.\n\ndescription\n\nThe view that describes the interface.\n\nactions\n\nThe content of the interface actions."
    },
    {
        "title": "init(_:item:subject:message:preview:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(_:item:subject:message:preview:)-5wsbr",
        "html": "Parameters\ntitleKey\n\nA key identifying the title of the share action.\n\nitem\n\nThe item to share.\n\nsubject\n\nA title for the item to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the item to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\npreview\n\nA representation of the item to render in a preview.\n\nSee Also\nSharing an item with a label and a preview\ninit<S, I>(S, item: I, subject: Text?, message: Text?, preview: SharePreview<PreviewImage, PreviewIcon>)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage conforms to Transferable, PreviewIcon conforms to Transferable, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit<I>(Text, item: I, subject: Text?, message: Text?, preview: SharePreview<PreviewImage, PreviewIcon>)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage conforms to Transferable, PreviewIcon conforms to Transferable, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable."
    },
    {
        "title": "init(_:item:subject:message:preview:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(_:item:subject:message:preview:)-9go2l",
        "html": "Parameters\ntitle\n\nThe title of the share action.\n\nitem\n\nThe item to share.\n\nsubject\n\nA title for the item to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the item to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\npreview\n\nA representation of the item to render in a preview.\n\nSee Also\nSharing an item with a label and a preview\ninit<I>(Text, item: I, subject: Text?, message: Text?, preview: SharePreview<PreviewImage, PreviewIcon>)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage conforms to Transferable, PreviewIcon conforms to Transferable, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit<I>(LocalizedStringKey, item: I, subject: Text?, message: Text?, preview: SharePreview<PreviewImage, PreviewIcon>)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage conforms to Transferable, PreviewIcon conforms to Transferable, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable."
    },
    {
        "title": "init(value:in:label:currentValueLabel:)",
        "url": "https://developer.apple.com/documentation/swiftui/gauge/init(value:in:label:currentvaluelabel:)",
        "html": "Parameters\nvalue\n\nThe value to show on the gauge.\n\nbounds\n\nThe range of the valid values. Defaults to 0...1.\n\nlabel\n\nA view that describes the purpose of the gauge.\n\ncurrentValueLabel\n\nA view that describes the current value of the gauge.\n\nDiscussion\n\nUse this method to create a gauge that displays a value within a range you supply with labels that describe the purpose of the gauge and its current value. In the example below, a gauge using the circular style shows its current value of 67 along with a label describing the (BPM) for the gauge:\n\nstruct SimpleGauge: View {\n    @State private var current = 67.0\n\n\n    var body: some View {\n        Gauge(value: currrent, in: 0...170) {\n            Text(\"BPM\")\n        } currentValueLabel: {\n            Text(\"\\(current)\")\n        }\n        .gaugeStyle(.circular)\n   }\n}\n\n\nSee Also\nCreating a gauge\ninit<V>(value: V, in: ClosedRange<V>, label: () -> Label)\nCreates a gauge showing a value within a range and describes the gauge\u2019s purpose and current value.\ninit<V>(value: V, in: ClosedRange<V>, label: () -> Label, currentValueLabel: () -> CurrentValueLabel, markedValueLabels: () -> MarkedValueLabels)\nCreates a gauge representing a value within a range.\ninit<V>(value: V, in: ClosedRange<V>, label: () -> Label, currentValueLabel: () -> CurrentValueLabel, minimumValueLabel: () -> BoundsLabel, maximumValueLabel: () -> BoundsLabel)\nCreates a gauge showing a value within a range and describes the gauge\u2019s current, minimum, and maximum values.\ninit<V>(value: V, in: ClosedRange<V>, label: () -> Label, currentValueLabel: () -> CurrentValueLabel, minimumValueLabel: () -> BoundsLabel, maximumValueLabel: () -> BoundsLabel, markedValueLabels: () -> MarkedValueLabels)\nCreates a gauge representing a value within a range."
    },
    {
        "title": "init(_:selection:in:displayedComponents:)",
        "url": "https://developer.apple.com/documentation/swiftui/datepicker/init(_:selection:in:displayedcomponents:)-95bqf",
        "html": "Parameters\ntitle\n\nThe title of self, describing its purpose.\n\nselection\n\nThe date value being displayed and selected.\n\nrange\n\nThe open range from some selectable start date.\n\ndisplayedComponents\n\nThe date components that user is able to view and edit. Defaults to [.hourAndMinute, .date]. On watchOS, if .hourAndMinute or .hourMinuteAndSecond are included with .date, only .date is displayed.\n\nSee Also\nCreating a date picker with a start date\ninit(selection: Binding<Date>, in: PartialRangeFrom<Date>, displayedComponents: DatePicker<Label>.Components, label: () -> Label)\nCreates an instance that selects a Date on or after some start date.\nAvailable when Label conforms to View.\ninit(LocalizedStringKey, selection: Binding<Date>, in: PartialRangeFrom<Date>, displayedComponents: DatePicker<Label>.Components)\nCreates an instance that selects a Date on or after some start date.\nAvailable when Label is Text."
    },
    {
        "title": "coordinator",
        "url": "https://developer.apple.com/documentation/swiftui/uiviewcontrollerrepresentablecontext/coordinator",
        "html": "See Also\nCoordinating view controller interactions\nvar transaction: Transaction\nThe current transaction."
    },
    {
        "title": "init(selection:label:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/picker/init(selection:label:content:)",
        "html": "Deprecated\n\nUse init(selection:content:label:) instead.\n\nParameters\nselection\n\nA binding to a property that determines the currently-selected option.\n\nlabel\n\nA view that describes the purpose of selecting an option.\n\ncontent\n\nA view that contains the set of options."
    },
    {
        "title": "init(_:selection:in:displayedComponents:)",
        "url": "https://developer.apple.com/documentation/swiftui/datepicker/init(_:selection:in:displayedcomponents:)-3u4xf",
        "html": "Parameters\ntitleKey\n\nThe key for the localized title of self, describing its purpose.\n\nselection\n\nThe date value being displayed and selected.\n\nrange\n\nThe open range before some selectable end date.\n\ndisplayedComponents\n\nThe date components that user is able to view and edit. Defaults to [.hourAndMinute, .date]. On watchOS, if .hourAndMinute or .hourMinuteAndSecond are included with .date, only .date is displayed.\n\nSee Also\nCreating a date picker with an end date\ninit(selection: Binding<Date>, in: PartialRangeThrough<Date>, displayedComponents: DatePicker<Label>.Components, label: () -> Label)\nCreates an instance that selects a Date on or before some end date.\nAvailable when Label conforms to View.\ninit<S>(S, selection: Binding<Date>, in: PartialRangeThrough<Date>, displayedComponents: DatePicker<Label>.Components)\nCreates an instance that selects a Date on or before some end date.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:selection:in:displayedComponents:)",
        "url": "https://developer.apple.com/documentation/swiftui/datepicker/init(_:selection:in:displayedcomponents:)-1lsad",
        "html": "Parameters\ntitle\n\nThe title of self, describing its purpose.\n\nselection\n\nThe date value being displayed and selected.\n\nrange\n\nThe inclusive range of selectable dates.\n\ndisplayedComponents\n\nThe date components that user is able to view and edit. Defaults to [.hourAndMinute, .date]. On watchOS, if .hourAndMinute or .hourMinuteAndSecond are included with .date, only .date is displayed.\n\nSee Also\nCreating a date picker for a range\ninit(selection: Binding<Date>, in: ClosedRange<Date>, displayedComponents: DatePicker<Label>.Components, label: () -> Label)\nCreates an instance that selects a Date in a closed range.\nAvailable when Label conforms to View.\ninit(LocalizedStringKey, selection: Binding<Date>, in: ClosedRange<Date>, displayedComponents: DatePicker<Label>.Components)\nCreates an instance that selects a Date in a closed range.\nAvailable when Label is Text."
    },
    {
        "title": "DatePickerComponents",
        "url": "https://developer.apple.com/documentation/swiftui/datepickercomponents",
        "html": "Topics\nGetting date picker components\nstatic let date: DatePickerComponents\nDisplays day, month, and year based on the locale\nstatic let hourAndMinute: DatePickerComponents\nDisplays hour and minute components based on the locale\nstatic let hourMinuteAndSecond: DatePickerComponents\nDisplays hour, minute and second components based on the locale\nRelationships\nConforms To\nEquatable\nExpressibleByArrayLiteral\nOptionSet\nRawRepresentable\nSendable\nSetAlgebra\nSee Also\nSetting date picker components\ntypealias Components"
    },
    {
        "title": "init(_:sources:isOn:)",
        "url": "https://developer.apple.com/documentation/swiftui/toggle/init(_:sources:ison:)-17gec",
        "html": "Parameters\ntitleKey\n\nThe key for the toggle\u2019s localized title, that describes the purpose of the toggle.\n\nsources\n\nA collection of values used as the source for rendering the Toggle\u2019s state.\n\nisOn\n\nThe key path of the values that determines whether the toggle is on, mixed or off.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nThe following example creates a single toggle that represents the state of multiple alarms:\n\nstruct Alarm: Hashable, Identifiable {\n    var id = UUID()\n    var isOn = false\n    var name = \"\"\n}\n\n\n@State private var alarms = [\n    Alarm(isOn: true, name: \"Morning\"),\n    Alarm(isOn: false, name: \"Evening\")\n]\n\n\nToggle(\"Enable all alarms\", sources: $alarms, isOn: \\.isOn)\n\nSee Also\nCreating a toggle for a collection\ninit<C>(sources: C, isOn: KeyPath<C.Element, Binding<Bool>>, label: () -> Label)\nCreates a toggle representing a collection of values with a custom label.\ninit<S, C>(S, sources: C, isOn: KeyPath<C.Element, Binding<Bool>>)\nCreates a toggle representing a collection of values that generates its label from a string.\nAvailable when Label is Text."
    },
    {
        "title": "DatePicker.Components",
        "url": "https://developer.apple.com/documentation/swiftui/datepicker/components",
        "html": "See Also\nSetting date picker components\nstruct DatePickerComponents"
    },
    {
        "title": "init(_:image:isOn:)",
        "url": "https://developer.apple.com/documentation/swiftui/toggle/init(_:image:ison:)-kp9t",
        "html": "Parameters\ntitle\n\nA string that describes the purpose of the toggle.\n\nimage\n\nThe name of the image resource to lookup.\n\nisOn\n\nA binding to a property that indicates whether the toggle is on or off.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). See Text for more information about localizing strings.\n\nTo initialize a toggle with a localized string key, use init(_:isOn:) instead.\n\nSee Also\nCreating a toggle with an image resource label\ninit(LocalizedStringKey, image: ImageResource, isOn: Binding<Bool>)\nCreates a toggle that generates its label from a localized string key and image resource.\nAvailable when Label is Label<Text, Image>.\ninit<C>(LocalizedStringKey, image: ImageResource, sources: C, isOn: KeyPath<C.Element, Binding<Bool>>)\nCreates a toggle representing a collection of values that generates its label from a localized string key and image resource.\nAvailable when Label is Label<Text, Image>.\ninit<S, C>(S, image: ImageResource, sources: C, isOn: KeyPath<C.Element, Binding<Bool>>)\nCreates a toggle representing a collection of values that generates its label from a string and image resource.\nAvailable when Label is Label<Text, Image>."
    },
    {
        "title": "init(_:image:sources:isOn:)",
        "url": "https://developer.apple.com/documentation/swiftui/toggle/init(_:image:sources:ison:)-4725e",
        "html": "Parameters\ntitle\n\nA string that describes the purpose of the toggle.\n\nimage\n\nThe name of the image resource to lookup.\n\nsources\n\nA collection of values used as the source for rendering the Toggle\u2019s state.\n\nisOn\n\nThe key path of the values that determines whether the toggle is on, mixed or off.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). See Text for more information about localizing strings.\n\nThe following example creates a single toggle that represents the state of multiple alarms:\n\nstruct Alarm: Hashable, Identifiable {\n    var id = UUID()\n    var isOn = false\n    var name = \"\"\n}\n\n\n@State private var alarms = [\n    Alarm(isOn: true, name: \"Morning\"),\n    Alarm(isOn: false, name: \"Evening\")\n]\n\n\nToggle(\"Enable all alarms\", sources: $alarms, isOn: \\.isOn)\n\nSee Also\nCreating a toggle with an image resource label\ninit(LocalizedStringKey, image: ImageResource, isOn: Binding<Bool>)\nCreates a toggle that generates its label from a localized string key and image resource.\nAvailable when Label is Label<Text, Image>.\ninit<S>(S, image: ImageResource, isOn: Binding<Bool>)\nCreates a toggle that generates its label from a string and image resource.\nAvailable when Label is Label<Text, Image>.\ninit<C>(LocalizedStringKey, image: ImageResource, sources: C, isOn: KeyPath<C.Element, Binding<Bool>>)\nCreates a toggle representing a collection of values that generates its label from a localized string key and image resource.\nAvailable when Label is Label<Text, Image>."
    },
    {
        "title": "init(_:items:subject:message:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(_:items:subject:message:)-2bfyo",
        "html": "Parameters\ntitle\n\nThe title of the share action.\n\nitems\n\nThe item to share.\n\nsubject\n\nA title for the items to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the items to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\nSee Also\nSharing items with a label\ninit<S>(S, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is String.\ninit(LocalizedStringKey, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is String.\ninit(LocalizedStringKey, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is URL.\ninit(Text, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is URL.\ninit(Text, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is String."
    },
    {
        "title": "init(_:items:subject:message:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(_:items:subject:message:)-9rhrf",
        "html": "Parameters\ntitle\n\nThe title of the share action.\n\nitems\n\nThe items to share.\n\nsubject\n\nA title for the items to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the items to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\nSee Also\nSharing items with a label\ninit<S>(S, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is String.\ninit<S>(S, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is URL.\ninit(LocalizedStringKey, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is String.\ninit(LocalizedStringKey, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is URL.\ninit(Text, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is URL."
    },
    {
        "title": "init(_:items:subject:message:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(_:items:subject:message:)-9fwh5",
        "html": "Parameters\ntitleKey\n\nA key identifying the title of the share action.\n\nitems\n\nThe items to share.\n\nsubject\n\nA title for the items to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the items to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\nSee Also\nSharing items with a label\ninit<S>(S, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is String.\ninit<S>(S, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is URL.\ninit(LocalizedStringKey, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is String.\ninit(Text, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is URL.\ninit(Text, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is String."
    },
    {
        "title": "init(_:selection:in:)",
        "url": "https://developer.apple.com/documentation/swiftui/multidatepicker/init(_:selection:in:)-2fa8y",
        "html": "Parameters\ntitle\n\nThe title of self, describing its purpose.\n\nselection\n\nThe date values being displayed and selected.\n\nbounds\n\nThe open range before some end date.\n\nSee Also\nPicking dates before a date\ninit(LocalizedStringKey, selection: Binding<Set<DateComponents>>, in: PartialRangeUpTo<Date>)\nCreates an instance that selects multiple dates before some end date.\nAvailable when Label is Text.\ninit(selection: Binding<Set<DateComponents>>, in: PartialRangeUpTo<Date>, label: () -> Label)\nCreates an instance that selects multiple dates before some end date.\nAvailable when Label conforms to View."
    },
    {
        "title": "prefersStatusBarHidden",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontroller/prefersstatusbarhidden",
        "html": "See Also\nConfiguring the status bar\nvar preferredStatusBarStyle: UIStatusBarStyle\nThe preferred status bar style for the view controller.\nvar preferredStatusBarUpdateAnimation: UIStatusBarAnimation\nThe animation style to use when hiding or showing the status bar for this view controller.\nvar childForStatusBarStyle: UIViewController?\nvar childForStatusBarHidden: UIViewController?"
    },
    {
        "title": "init(items:subject:message:preview:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(items:subject:message:preview:)",
        "html": "Parameters\nitems\n\nThe items to share.\n\nsubject\n\nA title for the items to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the items to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\npreview\n\nA closure that returns a representation of each item to render in a preview.\n\nDiscussion\n\nUse this initializer when you want the system-standard appearance for ShareLink.\n\nSee Also\nSharing items with a preview\ninit(items: Data, subject: Text?, message: Text?, preview: (Data.Element) -> SharePreview<PreviewImage, PreviewIcon>, label: () -> Label)\nCreates an instance that presents the share interface."
    },
    {
        "title": "dismantleUIViewController(_:coordinator:)",
        "url": "https://developer.apple.com/documentation/swiftui/uiviewcontrollerrepresentable/dismantleuiviewcontroller(_:coordinator:)-6j2e",
        "html": "Required Default implementation provided.\n\nParameters\nuiViewController\n\nYour custom view controller object.\n\ncoordinator\n\nThe custom coordinator instance you use to communicate changes back to SwiftUI. If you do not use a custom coordinator, the system provides a default instance.\n\nDiscussion\n\nUse this method to perform additional clean-up work related to your custom view controller. For example, you might use this method to remove observers or update other parts of your SwiftUI interface.\n\nDefault Implementations\nUIViewControllerRepresentable Implementations\nstatic func dismantleUIViewController(Self.UIViewControllerType, coordinator: Self.Coordinator)\nCleans up the presented view controller (and coordinator) in anticipation of their removal."
    },
    {
        "title": "narrative",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitytextcontenttype/narrative",
        "html": "See Also\nGetting content types\nstatic let console: AccessibilityTextContentType\nA type that represents text used for input, like in the Terminal app.\nstatic let fileSystem: AccessibilityTextContentType\nA type that represents text used by a file browser, like in the Finder app in macOS.\nstatic let messaging: AccessibilityTextContentType\nA type that represents text used in a message, like in the Messages app.\nstatic let plain: AccessibilityTextContentType\nA type that represents generic text that has no specific type.\nstatic let sourceCode: AccessibilityTextContentType\nA type that represents text used in source code, like in Swift Playgrounds.\nstatic let spreadsheet: AccessibilityTextContentType\nA type that represents text used in a grid of data, like in the Numbers app.\nstatic let wordProcessing: AccessibilityTextContentType\nA type that represents text used in a document, like in the Pages app."
    },
    {
        "title": "fileSystem",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitytextcontenttype/filesystem",
        "html": "See Also\nGetting content types\nstatic let console: AccessibilityTextContentType\nA type that represents text used for input, like in the Terminal app.\nstatic let messaging: AccessibilityTextContentType\nA type that represents text used in a message, like in the Messages app.\nstatic let narrative: AccessibilityTextContentType\nA type that represents text used in a story or poem, like in the Books app.\nstatic let plain: AccessibilityTextContentType\nA type that represents generic text that has no specific type.\nstatic let sourceCode: AccessibilityTextContentType\nA type that represents text used in source code, like in Swift Playgrounds.\nstatic let spreadsheet: AccessibilityTextContentType\nA type that represents text used in a grid of data, like in the Numbers app.\nstatic let wordProcessing: AccessibilityTextContentType\nA type that represents text used in a document, like in the Pages app."
    },
    {
        "title": "init(_:selection:)",
        "url": "https://developer.apple.com/documentation/swiftui/multidatepicker/init(_:selection:)-7iwsg",
        "html": "Parameters\ntitleKey\n\nThe key for the localized title of self, describing its purpose.\n\nselection\n\nThe date values being displayed and selected.\n\nSee Also\nPicking dates\ninit<S>(S, selection: Binding<Set<DateComponents>>)\nCreates an instance that selects multiple dates with an unbounded range.\nAvailable when Label is Text.\ninit(selection: Binding<Set<DateComponents>>, label: () -> Label)\nCreates an instance that selects multiple dates with an unbounded range.\nAvailable when Label conforms to View."
    },
    {
        "title": "sourceCode",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitytextcontenttype/sourcecode",
        "html": "See Also\nGetting content types\nstatic let console: AccessibilityTextContentType\nA type that represents text used for input, like in the Terminal app.\nstatic let fileSystem: AccessibilityTextContentType\nA type that represents text used by a file browser, like in the Finder app in macOS.\nstatic let messaging: AccessibilityTextContentType\nA type that represents text used in a message, like in the Messages app.\nstatic let narrative: AccessibilityTextContentType\nA type that represents text used in a story or poem, like in the Books app.\nstatic let plain: AccessibilityTextContentType\nA type that represents generic text that has no specific type.\nstatic let spreadsheet: AccessibilityTextContentType\nA type that represents text used in a grid of data, like in the Numbers app.\nstatic let wordProcessing: AccessibilityTextContentType\nA type that represents text used in a document, like in the Pages app."
    },
    {
        "title": "rootView",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontroller/rootview",
        "html": "See Also\nResponding to view-related events\nfunc loadView()\nfunc viewWillAppear(Bool)\nNotifies the view controller that its view is about to be added to a view hierarchy.\nfunc viewIsAppearing(Bool)\nfunc viewDidAppear(Bool)\nNotifies the view controller that its view has been added to a view hierarchy.\nfunc viewWillDisappear(Bool)\nNotifies the view controller that its view will be removed from a view hierarchy.\nfunc viewDidDisappear(Bool)\nfunc willMove(toParent: UIViewController?)\nfunc didMove(toParent: UIViewController?)\nfunc viewWillTransition(to: CGSize, with: UIViewControllerTransitionCoordinator)\nfunc viewWillLayoutSubviews()\nfunc target(forAction: Selector, withSender: Any?) -> Any?"
    },
    {
        "title": "init(_:items:subject:message:preview:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(_:items:subject:message:preview:)-6bo0i",
        "html": "Parameters\ntitleKey\n\nA key identifying the title of the share action.\n\nitems\n\nThe items to share.\n\nsubject\n\nA title for the items to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the items to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\npreview\n\nA closure that returns a representation of each item to render in a preview.\n\nSee Also\nSharing items with a label and preview\ninit<S>(S, items: Data, subject: Text?, message: Text?, preview: (Data.Element) -> SharePreview<PreviewImage, PreviewIcon>)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage conforms to Transferable, PreviewIcon conforms to Transferable, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit(Text, items: Data, subject: Text?, message: Text?, preview: (Data.Element) -> SharePreview<PreviewImage, PreviewIcon>)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage conforms to Transferable, PreviewIcon conforms to Transferable, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable."
    },
    {
        "title": "background(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingconfiguration/background(content:)",
        "html": "Parameters\nbackground\n\nThe contents of the SwiftUI hierarchy to be shown inside the background of the cell.\n\nDiscussion\n\nThe following example sets a custom view to the background of the cell:\n\nUIHostingConfiguration {\n    Text(\"My Contents\")\n}\n.background {\n    MyBackgroundView()\n}\n\nSee Also\nSetting the background\nfunc background<S>(S) -> UIHostingConfiguration<Content, _UIHostingConfigurationBackgroundView<S>>\nSets the background contents for the hosting configuration\u2019s enclosing cell."
    },
    {
        "title": "messaging",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitytextcontenttype/messaging",
        "html": "See Also\nGetting content types\nstatic let console: AccessibilityTextContentType\nA type that represents text used for input, like in the Terminal app.\nstatic let fileSystem: AccessibilityTextContentType\nA type that represents text used by a file browser, like in the Finder app in macOS.\nstatic let narrative: AccessibilityTextContentType\nA type that represents text used in a story or poem, like in the Books app.\nstatic let plain: AccessibilityTextContentType\nA type that represents generic text that has no specific type.\nstatic let sourceCode: AccessibilityTextContentType\nA type that represents text used in source code, like in Swift Playgrounds.\nstatic let spreadsheet: AccessibilityTextContentType\nA type that represents text used in a grid of data, like in the Numbers app.\nstatic let wordProcessing: AccessibilityTextContentType\nA type that represents text used in a document, like in the Pages app."
    },
    {
        "title": "makeUIViewController(context:)",
        "url": "https://developer.apple.com/documentation/swiftui/uiviewcontrollerrepresentable/makeuiviewcontroller(context:)",
        "html": "Required\n\nParameters\ncontext\n\nA context structure containing information about the current state of the system.\n\nReturn Value\n\nYour UIKit view controller configured with the provided information.\n\nDiscussion\n\nYou must implement this method and use it to create your view controller object. Create the view controller using your app\u2019s current data and contents of the context parameter. The system calls this method only once, when it creates your view controller for the first time. For all subsequent updates, the system calls the updateUIViewController(_:context:) method.\n\nSee Also\nCreating and updating the view controller\nfunc updateUIViewController(Self.UIViewControllerType, context: Self.Context)\nUpdates the state of the specified view controller with new information from SwiftUI.\n\nRequired\n\ntypealias Context\nassociatedtype UIViewControllerType : UIViewController\nThe type of view controller to present.\n\nRequired"
    },
    {
        "title": "margins(_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingconfiguration/margins(_:_:)-196ca",
        "html": "Parameters\nedges\n\nThe edges to apply the insets. Any edges not specified will use the system default values. The default value is all.\n\ninsets\n\nThe insets to apply.\n\nDiscussion\n\nUse this modifier to replace the default margins applied to the root of the configuration. The following example creates 10 points of space between the content and the background on the leading edge and 20 points of space on the trailing edge:\n\nUIHostingConfiguration {\n    Text(\"My Contents\")\n}\n.margins(.horizontal, 20.0)\n\nSee Also\nSetting margins\nfunc margins(Edge.Set, CGFloat) -> UIHostingConfiguration<Content, Background>\nSets the margins around the content of the configuration."
    },
    {
        "title": "init(supportedContentTypes:payloadAction:)",
        "url": "https://developer.apple.com/documentation/swiftui/pastebutton/init(supportedcontenttypes:payloadaction:)",
        "html": "Parameters\nsupportedContentTypes\n\nThe exact uniform type identifiers supported by the button. If the pasteboard doesn\u2019t contain any of the supported types, the button becomes disabled.\n\npayloadAction\n\nThe handler to call when the user clicks the Paste button and the pasteboard has items that conform to supportedContentTypes. This closure receives an array of item providers that you use to inspect and load the pasteboard data.\n\nDiscussion\n\nSet the contents of supportedContentTypes in order of your app\u2019s preference for its supported types. The Paste button takes the most-preferred type that the pasteboard source supports and delivers this to the payloadAction closure.\n\nSee Also\nCreating a paste button\ninit<T>(payloadType: T.Type, onPaste: ([T]) -> Void)\nCreates an instance that accepts values of the specified type."
    },
    {
        "title": "landscapeLeft",
        "url": "https://developer.apple.com/documentation/swiftui/interfaceorientation/landscapeleft",
        "html": "See Also\nGetting an orientation\nstatic let portrait: InterfaceOrientation\nThe device is in portrait mode, with the top of the device on top.\nstatic let portraitUpsideDown: InterfaceOrientation\nThe device is in portrait mode, but is upside down.\nstatic let landscapeRight: InterfaceOrientation\nThe device is in landscape mode, with the top of the device on the right."
    },
    {
        "title": "sizingOptions",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontroller/sizingoptions",
        "html": "Discussion\n\nThe default value is the empty set.\n\nSee Also\nManaging the size\nfunc preferredContentSizeDidChange(forChildContentContainer: UIContentContainer)\nfunc sizeThatFits(in: CGSize) -> CGSize\nCalculates and returns the most appropriate size for the current view.\nvar safeAreaRegions: SafeAreaRegions\nThe safe area regions that this view controller adds to its view.\nAvailable when Content conforms to View."
    },
    {
        "title": "AccessibilityHeadingLevel.h5",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityheadinglevel/h5",
        "html": "See Also\nGetting the heading level\ncase h1\nLevel 1 heading.\ncase h2\nLevel 2 heading.\ncase h3\nLevel 3 heading.\ncase h4\nLevel 4 heading.\ncase h6\nLevel 6 heading.\ncase unspecified\nA heading without a hierarchy."
    },
    {
        "title": "firstBaselineOffsetFromTop",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/firstbaselineoffsetfromtop",
        "html": "See Also\nModifying the frame rectangle\nvar intrinsicContentSize: NSSize\nfunc setFrameSize(NSSize)\nvar lastBaselineOffsetFromBottom: CGFloat\nvar sizingOptions: NSHostingSizingOptions\nThe options for how the hosting view creates and updates constraints based on the size of its SwiftUI content.\nvar firstTextLineCenter: CGFloat?"
    },
    {
        "title": "landscapeRight",
        "url": "https://developer.apple.com/documentation/swiftui/interfaceorientation/landscaperight",
        "html": "See Also\nGetting an orientation\nstatic let portrait: InterfaceOrientation\nThe device is in portrait mode, with the top of the device on top.\nstatic let portraitUpsideDown: InterfaceOrientation\nThe device is in portrait mode, but is upside down.\nstatic let landscapeLeft: InterfaceOrientation\nThe device is in landscape mode, with the top of the device on the left."
    },
    {
        "title": "scrollWheel(with:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/scrollwheel(with:)",
        "html": "See Also\nResponding to gestures\nfunc magnify(with: NSEvent)\nfunc rotate(with: NSEvent)"
    },
    {
        "title": "init(selection:in:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/multidatepicker/init(selection:in:label:)-9se8d",
        "html": "Parameters\nselection\n\nThe date values being displayed and selected.\n\nbounds\n\nThe open range from some selectable start date.\n\nlabel\n\nA view that describes the use of the dates.\n\nSee Also\nPicking dates after a date\ninit(LocalizedStringKey, selection: Binding<Set<DateComponents>>, in: PartialRangeFrom<Date>)\nCreates an instance that selects multiple dates on or after some start date.\nAvailable when Label is Text.\ninit<S>(S, selection: Binding<Set<DateComponents>>, in: PartialRangeFrom<Date>)\nCreates an instance that selects multiple dates on or after some start date.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:items:subject:message:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(_:items:subject:message:)-6r3lq",
        "html": "Parameters\ntitle\n\nThe title of the share action.\n\nitems\n\nThe items to share.\n\nsubject\n\nA title for the items to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the items to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\nSee Also\nSharing items with a label\ninit<S>(S, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is String.\ninit<S>(S, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is URL.\ninit(LocalizedStringKey, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is String.\ninit(LocalizedStringKey, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is URL.\ninit(Text, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is String."
    },
    {
        "title": "init(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingconfiguration/init(content:)",
        "html": "Parameters\ncontent\n\nThe contents of the SwiftUI hierarchy to be shown inside the cell."
    },
    {
        "title": "init(_:selection:in:)",
        "url": "https://developer.apple.com/documentation/swiftui/multidatepicker/init(_:selection:in:)-1yazi",
        "html": "Parameters\ntitle\n\nThe title of self, describing its purpose.\n\nselection\n\nThe date values being displayed and selected.\n\nbounds\n\nThe open range from some selectable start date.\n\nSee Also\nPicking dates after a date\ninit(LocalizedStringKey, selection: Binding<Set<DateComponents>>, in: PartialRangeFrom<Date>)\nCreates an instance that selects multiple dates on or after some start date.\nAvailable when Label is Text.\ninit(selection: Binding<Set<DateComponents>>, in: PartialRangeFrom<Date>, label: () -> Label)\nCreates an instance that selects multiple dates on or after some start date.\nAvailable when Label conforms to View."
    },
    {
        "title": "init(supportedContentTypes:validator:payloadAction:)",
        "url": "https://developer.apple.com/documentation/swiftui/pastebutton/init(supportedcontenttypes:validator:payloadaction:)",
        "html": "Deprecated\n\nUse init(payloadType:onPaste:) instead.\n\nParameters\nsupportedContentTypes\n\nThe exact uniform type identifiers supported by the button. If the pasteboard doesn\u2019t contain any of the supported types, the button becomes disabled.\n\nvalidator\n\nA handler that receives those contents of the pasteboard that conform to supportedContentTypes. Load and inspect these items to determine whether to validate the button. If you load a valid item, return it from this closure. If the pasteboard doesn\u2019t contain any valid items, return nil to invalidate the button.\n\npayloadAction\n\nThe handler called when the user clicks the button. This closure receives the preprocessed result of validator.\n\nDiscussion\n\nSet the contents of supportedContentTypes in order of your app\u2019s preference for its supported types. The Paste button takes the most-preferred type that the pasteboard source supports and delivers this to the validator closure.\n\nSee Also\nDeprecated initializers\ninit(supportedTypes: [String], payloadAction: ([NSItemProvider]) -> Void)\nCreates a Paste button that accepts specific types of data from the pasteboard.\nDeprecated\ninit<Payload>(supportedTypes: [String], validator: ([NSItemProvider]) -> Payload?, payloadAction: (Payload) -> Void)\nCreates a Paste button that accepts specific types of data from the pasteboard, performing a custom validation of the data before sending it to your app.\nDeprecated"
    },
    {
        "title": "init(_:items:subject:message:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(_:items:subject:message:)-363w4",
        "html": "Parameters\ntitleKey\n\nA key identifying the title of the share action.\n\nitems\n\nThe items to share.\n\nsubject\n\nA title for the items to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the items to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\nSee Also\nSharing items with a label\ninit<S>(S, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is String.\ninit<S>(S, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is URL.\ninit(LocalizedStringKey, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is URL.\ninit(Text, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is URL.\ninit(Text, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is String."
    },
    {
        "title": "UIViewControllerRepresentable.Context",
        "url": "https://developer.apple.com/documentation/swiftui/uiviewcontrollerrepresentable/context",
        "html": "See Also\nCreating and updating the view controller\nfunc makeUIViewController(context: Self.Context) -> Self.UIViewControllerType\nCreates the view controller object and configures its initial state.\n\nRequired\n\nfunc updateUIViewController(Self.UIViewControllerType, context: Self.Context)\nUpdates the state of the specified view controller with new information from SwiftUI.\n\nRequired\n\nassociatedtype UIViewControllerType : UIViewController\nThe type of view controller to present.\n\nRequired"
    },
    {
        "title": "wantsSashBlur",
        "url": "https://developer.apple.com/documentation/swiftui/wkusernotificationhostingcontroller/wantssashblur",
        "html": "Discussion\n\nDefault value is false\n\nSee Also\nConfiguring the notification\nclass var coalescedDescriptionFormat: String?\nThe format string to display when multiple notifications of the same type arrive simultaneously. If you specify a custom string, you can use the %d variable to reflect the number of notifications. If nil format will be the system default.\nclass var isInteractive: Bool\nIf the notification should accept user input.\nclass var sashColor: Color?\nColor to use within the sash of the long look interface. If nil the sash will be the default system color.\nclass var subtitleColor: Color?\nThe color to apply to the subtitle text displayed in the short look interface. If nil the text will be the default system color.\nclass var titleColor: Color?\nThe color to apply to the text displayed in the sash. If nil the text will be the default system color."
    },
    {
        "title": "AccessibilityAdjustmentDirection.decrement",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityadjustmentdirection/decrement",
        "html": "See Also\nGetting an adjustment direction\ncase increment"
    },
    {
        "title": "init(_:selection:in:)",
        "url": "https://developer.apple.com/documentation/swiftui/multidatepicker/init(_:selection:in:)-8eflx",
        "html": "Parameters\ntitleKey\n\nThe key for the localized title of self, describing its purpose.\n\nselection\n\nThe date values being displayed and selected.\n\nbounds\n\nThe open range before some end date.\n\nSee Also\nPicking dates before a date\ninit<S>(S, selection: Binding<Set<DateComponents>>, in: PartialRangeUpTo<Date>)\nCreates an instance that selects multiple dates before some end date.\nAvailable when Label is Text.\ninit(selection: Binding<Set<DateComponents>>, in: PartialRangeUpTo<Date>, label: () -> Label)\nCreates an instance that selects multiple dates before some end date.\nAvailable when Label conforms to View."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/buttonrepeatbehavior/automatic",
        "html": "See Also\nGetting repeat behaviors\nstatic let enabled: ButtonRepeatBehavior\nRepeating button actions will be enabled.\nstatic let disabled: ButtonRepeatBehavior\nRepeating button actions will be disabled."
    },
    {
        "title": "init(_:selection:in:)",
        "url": "https://developer.apple.com/documentation/swiftui/multidatepicker/init(_:selection:in:)-739p6",
        "html": "Parameters\ntitleKey\n\nThe key for the localized title of self, describing its purpose.\n\nselection\n\nThe date values being displayed and selected.\n\nbounds\n\nThe exclusive range of selectable dates.\n\nSee Also\nPicking dates in a range\ninit<S>(S, selection: Binding<Set<DateComponents>>, in: Range<Date>)\nCreates an instance that selects multiple dates in a range.\nAvailable when Label is Text.\ninit(selection: Binding<Set<DateComponents>>, in: Range<Date>, label: () -> Label)\nCreates an instance that selects multiple dates in a range.\nAvailable when Label conforms to View."
    },
    {
        "title": "portraitUpsideDown",
        "url": "https://developer.apple.com/documentation/swiftui/interfaceorientation/portraitupsidedown",
        "html": "See Also\nGetting an orientation\nstatic let portrait: InterfaceOrientation\nThe device is in portrait mode, with the top of the device on top.\nstatic let landscapeLeft: InterfaceOrientation\nThe device is in landscape mode, with the top of the device on the left.\nstatic let landscapeRight: InterfaceOrientation\nThe device is in landscape mode, with the top of the device on the right."
    },
    {
        "title": "init(_:destination:)",
        "url": "https://developer.apple.com/documentation/swiftui/link/init(_:destination:)-5es0x",
        "html": "Parameters\ntitle\n\nA text string used as the title for describing the underlying destination URL.\n\ndestination\n\nThe URL for the link.\n\nDiscussion\n\nUse Link to create a control that your app uses to navigate to a URL that you provide. The example below creates a link to example.com and displays the title string you provide as a link-styled view in your app:\n\nfunc marketingLink(_ callToAction: String) -> Link {\n    Link(callToAction,\n        destination: URL(string: \"https://www.example.com/\")!)\n}\n\nSee Also\nCreating a link\ninit(LocalizedStringKey, destination: URL)\nCreates a control, consisting of a URL and a title key, used to navigate to a URL.\nAvailable when Label is Text.\ninit(destination: URL, label: () -> Label)\nCreates a control, consisting of a URL and a label, used to navigate to the given URL."
    },
    {
        "title": "init(payloadType:onPaste:)",
        "url": "https://developer.apple.com/documentation/swiftui/pastebutton/init(payloadtype:onpaste:)",
        "html": "Parameters\ntype\n\nThe type that you want to paste via the PasteButton.\n\nonPaste\n\nThe handler to call on trigger of the button with at least one item of the specified Transferable type from the pasteboard.\n\nSee Also\nCreating a paste button\ninit(supportedContentTypes: [UTType], payloadAction: ([NSItemProvider]) -> Void)\nCreates a Paste button that accepts specific types of data from the pasteboard."
    },
    {
        "title": "onMove(perform:)",
        "url": "https://developer.apple.com/documentation/swiftui/dynamicviewcontent/onmove(perform:)",
        "html": "Parameters\naction\n\nA closure that SwiftUI invokes when elements in the dynamic view are moved. The closure takes two arguments that represent the offset relative to the dynamic view\u2019s underlying collection of data. Pass nil to disable the ability to move items.\n\nReturn Value\n\nA view that calls action when elements are moved within the original view.\n\nSee Also\nResponding to updates\nfunc onDelete(perform: Optional<(IndexSet) -> Void>) -> some DynamicViewContent\nSets the deletion action for the dynamic view.\nfunc onInsert(of: [UTType], perform: (Int, [NSItemProvider]) -> Void) -> some DynamicViewContent\nSets the insert action for the dynamic view.\nfunc dropDestination<T>(for: T.Type, action: ([T], Int) -> Void) -> some DynamicViewContent\nSets the insert action for the dynamic view."
    },
    {
        "title": "disabled",
        "url": "https://developer.apple.com/documentation/swiftui/buttonrepeatbehavior/disabled",
        "html": "See Also\nGetting repeat behaviors\nstatic let automatic: ButtonRepeatBehavior\nThe automatic repeat behavior.\nstatic let enabled: ButtonRepeatBehavior\nRepeating button actions will be enabled."
    },
    {
        "title": "enabled",
        "url": "https://developer.apple.com/documentation/swiftui/buttonrepeatbehavior/enabled",
        "html": "See Also\nGetting repeat behaviors\nstatic let automatic: ButtonRepeatBehavior\nThe automatic repeat behavior.\nstatic let disabled: ButtonRepeatBehavior\nRepeating button actions will be disabled."
    },
    {
        "title": "isStaticText",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitytraits/isstatictext",
        "html": "See Also\nGetting traits\nstatic let allowsDirectInteraction: AccessibilityTraits\nThe accessibility element allows direct touch interaction for VoiceOver users.\nstatic let causesPageTurn: AccessibilityTraits\nThe accessibility element causes an automatic page turn when VoiceOver finishes reading the text within it.\nstatic let isButton: AccessibilityTraits\nThe accessibility element is a button.\nstatic let isHeader: AccessibilityTraits\nThe accessibility element is a header that divides content into sections, like the title of a navigation bar.\nstatic let isImage: AccessibilityTraits\nThe accessibility element is an image.\nstatic let isKeyboardKey: AccessibilityTraits\nThe accessibility element behaves as a keyboard key.\nstatic let isLink: AccessibilityTraits\nThe accessibility element is a link.\nstatic let isModal: AccessibilityTraits\nThe accessibility element is modal.\nstatic let isSearchField: AccessibilityTraits\nThe accessibility element is a search field.\nstatic let isSelected: AccessibilityTraits\nThe accessibility element is currently selected.\nstatic let isSummaryElement: AccessibilityTraits\nThe accessibility element provides summary information when the application starts.\nstatic let isToggle: AccessibilityTraits\nThe accessibility element is a toggle.\nstatic let playsSound: AccessibilityTraits\nThe accessibility element plays its own sound when activated.\nstatic let startsMediaSession: AccessibilityTraits\nThe accessibility element starts a media session when it is activated.\nstatic let updatesFrequently: AccessibilityTraits\nThe accessibility element frequently updates its label or value."
    },
    {
        "title": "firstTextLineCenter",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/firsttextlinecenter",
        "html": "See Also\nModifying the frame rectangle\nvar intrinsicContentSize: NSSize\nfunc setFrameSize(NSSize)\nvar firstBaselineOffsetFromTop: CGFloat\nvar lastBaselineOffsetFromBottom: CGFloat\nvar sizingOptions: NSHostingSizingOptions\nThe options for how the hosting view creates and updates constraints based on the size of its SwiftUI content."
    },
    {
        "title": "init(root:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationstack/init(root:)",
        "html": "Parameters\nroot\n\nThe view to display when the stack is empty.\n\nDiscussion\n\nIf you want to access the navigation state, use init(path:root:) instead."
    },
    {
        "title": "console",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitytextcontenttype/console",
        "html": "See Also\nGetting content types\nstatic let fileSystem: AccessibilityTextContentType\nA type that represents text used by a file browser, like in the Finder app in macOS.\nstatic let messaging: AccessibilityTextContentType\nA type that represents text used in a message, like in the Messages app.\nstatic let narrative: AccessibilityTextContentType\nA type that represents text used in a story or poem, like in the Books app.\nstatic let plain: AccessibilityTextContentType\nA type that represents generic text that has no specific type.\nstatic let sourceCode: AccessibilityTextContentType\nA type that represents text used in source code, like in Swift Playgrounds.\nstatic let spreadsheet: AccessibilityTextContentType\nA type that represents text used in a grid of data, like in the Numbers app.\nstatic let wordProcessing: AccessibilityTextContentType\nA type that represents text used in a document, like in the Pages app."
    },
    {
        "title": "init(_:value:in:step:format:onEditingChanged:)",
        "url": "https://developer.apple.com/documentation/swiftui/stepper/init(_:value:in:step:format:oneditingchanged:)-1mpvw",
        "html": "Parameters\ntitleKey\n\nThe key for the stepper\u2019s localized title describing the purpose of the stepper.\n\nvalue\n\nA Binding to a value that your provide.\n\nbounds\n\nA closed range that describes the upper and lower bounds permitted by the stepper.\n\nstep\n\nThe amount to increment or decrement value each time the user clicks or taps the stepper\u2019s increment or decrement button, respectively. Defaults to 1.\n\nformat\n\nA format style of type F to use when converting between the string the user edits and the underlying value of type F.FormatInput. If format can\u2019t perform the conversion, the stepper leaves value unchanged. If the user stops editing the text in an invalid state, the stepper updates the text to the last known valid value.\n\nonEditingChanged\n\nA closure that\u2019s called when editing begins and ends. For example, on iOS, the user may touch and hold the increment or decrement buttons on a Stepper which causes the execution of the onEditingChanged closure at the start and end of the gesture.\n\nDiscussion\n\nUse Stepper(_:value:in:step:format:onEditingChanged:) to create a stepper that increments or decrements a value within a specific range of values by a specific step size, while displaying the current value. In the example below, a stepper increments or decrements a binding to value over a range of 1...50 by 5 each time the user clicks or taps the stepper\u2019s increment or decrement buttons:\n\nstruct StepperView: View {\n    @State private var value = 0\n\n\n    var body: some View {\n        Stepper(\"Stepping by \\(step) in \\(range.description)\",\n            value: $value,\n            in: 1...50,\n            step: 5,\n            format: .number\n        )\n        .padding()\n    }\n}\n\nSee Also\nCreating a stepper over a range\ninit<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, label: () -> Label, onEditingChanged: (Bool) -> Void)\nCreates a stepper configured to increment or decrement a binding to a value using a step value and within a range of values you provide.\nAvailable when Label conforms to View.\ninit<F>(value: Binding<F.FormatInput>, in: ClosedRange<F.FormatInput>, step: F.FormatInput.Stride, format: F, label: () -> Label, onEditingChanged: (Bool) -> Void)\nCreates a stepper configured to increment or decrement a binding to a value using a step value and within a range of values you provide, displaying its value with an applied format style.\nAvailable when Label conforms to View.\ninit<V>(LocalizedStringKey, value: Binding<V>, in: ClosedRange<V>, step: V.Stride, onEditingChanged: (Bool) -> Void)\nCreates a stepper instance that increments and decrements a binding to a value, by a step size and within a closed range that you provide.\nAvailable when Label is Text.\ninit<S, V>(S, value: Binding<V>, in: ClosedRange<V>, step: V.Stride, onEditingChanged: (Bool) -> Void)\nCreates a stepper instance that increments and decrements a binding to a value, by a step size and within a closed range that you provide.\nAvailable when Label is Text.\ninit<S, F>(S, value: Binding<F.FormatInput>, in: ClosedRange<F.FormatInput>, step: F.FormatInput.Stride, format: F, onEditingChanged: (Bool) -> Void)\nCreates a stepper instance that increments and decrements a binding to a value, by a step size and within a closed range that you provide, displaying its value with an applied format style.\nAvailable when Label is Text."
    },
    {
        "title": "init(label:onIncrement:onDecrement:onEditingChanged:)",
        "url": "https://developer.apple.com/documentation/swiftui/stepper/init(label:onincrement:ondecrement:oneditingchanged:)",
        "html": "Parameters\nlabel\n\nA view describing the purpose of this stepper.\n\nonIncrement\n\nThe closure to execute when the user clicks or taps the control\u2019s plus button.\n\nonDecrement\n\nThe closure to execute when the user clicks or taps the control\u2019s minus button.\n\nonEditingChanged\n\nA closure called when editing begins and ends. For example, on iOS, the user may touch and hold the increment or decrement buttons on a Stepper which causes the execution of the onEditingChanged closure at the start and end of the gesture.\n\nDiscussion\n\nUse this initializer to create a control with a custom title that executes closures you provide when the user clicks or taps the stepper\u2019s increment or decrement buttons.\n\nThe example below uses an array that holds a number of Color values, a local state variable, value, to set the control\u2019s background color, and title label. When the user clicks or taps on the stepper\u2019s increment or decrement buttons SwiftUI executes the relevant closure that updates value, wrapping the value to prevent overflow. SwiftUI then re-renders the view, updating the text and background color to match the current index:\n\nstruct StepperView: View {\n    @State private var value = 0\n    let colors: [Color] = [.orange, .red, .gray, .blue, .green,\n                           .purple, .pink]\n\n\n    func incrementStep() {\n        value += 1\n        if value >= colors.count { value = 0 }\n    }\n\n\n    func decrementStep() {\n        value -= 1\n        if value < 0 { value = colors.count - 1 }\n    }\n\n\n    var body: some View {\n        Stepper {\n            Text(\"Value: \\(value) Color: \\(colors[value].description)\")\n        } onIncrement: {\n            incrementStep()\n        } onDecrement: {\n            decrementStep()\n        }\n        .padding(5)\n        .background(colors[value])\n    }\n\n\n}\n\nSee Also\nCreating a stepper with change behavior\ninit(LocalizedStringKey, onIncrement: (() -> Void)?, onDecrement: (() -> Void)?, onEditingChanged: (Bool) -> Void)\nCreates a stepper that uses a title key and executes the closures you provide when the user clicks or taps the stepper\u2019s increment and decrement buttons.\nAvailable when Label is Text.\ninit<S>(S, onIncrement: (() -> Void)?, onDecrement: (() -> Void)?, onEditingChanged: (Bool) -> Void)\nCreates a stepper using a title string and that executes closures you provide when the user clicks or taps the stepper\u2019s increment or decrement buttons.\nAvailable when Label is Text."
    },
    {
        "title": "init(value:in:label:onEditingChanged:)",
        "url": "https://developer.apple.com/documentation/swiftui/slider/init(value:in:label:oneditingchanged:)",
        "html": "Parameters\nvalue\n\nThe selected value within bounds.\n\nbounds\n\nThe range of the valid values. Defaults to 0...1.\n\nlabel\n\nA View that describes the purpose of the instance. Not all slider styles show the label, but even in those cases, SwiftUI uses the label for accessibility. For example, VoiceOver uses the label to identify the purpose of the slider.\n\nonEditingChanged\n\nA callback for when editing begins and ends.\n\nDiscussion\n\nThe value of the created instance is equal to the position of the given value within bounds, mapped into 0...1.\n\nThe slider calls onEditingChanged when editing begins and ends. For example, on iOS, editing begins when the user starts to drag the thumb along the slider\u2019s track.\n\nSee Also\nCreating a slider with labels\ninit<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, label: () -> Label, onEditingChanged: (Bool) -> Void)\nCreates a slider to select a value from a given range, subject to a step increment, which displays the provided label.\nAvailable when Label conforms to View and ValueLabel is EmptyView.\ninit<V>(value: Binding<V>, in: ClosedRange<V>, label: () -> Label, minimumValueLabel: () -> ValueLabel, maximumValueLabel: () -> ValueLabel, onEditingChanged: (Bool) -> Void)\nCreates a slider to select a value from a given range, which displays the provided labels.\nAvailable when Label conforms to View and ValueLabel conforms to View.\ninit<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, label: () -> Label, minimumValueLabel: () -> ValueLabel, maximumValueLabel: () -> ValueLabel, onEditingChanged: (Bool) -> Void)\nCreates a slider to select a value from a given range, subject to a step increment, which displays the provided labels.\nAvailable when Label conforms to View and ValueLabel conforms to View."
    },
    {
        "title": "init(value:step:onEditingChanged:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/stepper/init(value:step:oneditingchanged:label:)",
        "html": "Deprecated\n\nUse init(value:step:label:onEditingChanged:) instead.\n\nParameters\nvalue\n\nThe Binding to a value that you provide.\n\nstep\n\nThe amount to increment or decrement value each time the user clicks or taps the stepper\u2019s increment or decrement buttons. Defaults to 1.\n\nonEditingChanged\n\nA closure that\u2019s called when editing begins and ends. For example, on iOS, the user may touch and hold the increment or decrement buttons on a stepper which causes the execution of the onEditingChanged closure at the start and end of the gesture.\n\nlabel\n\nA view describing the purpose of this stepper.\n\nDiscussion\n\nUse this initializer to create a stepper that increments or decrements a bound value by a specific amount each time the user clicks or taps the stepper\u2019s increment or decrement buttons.\n\nIn the example below, a stepper increments or decrements value by the step value of 5 at each click or tap of the control\u2019s increment or decrement button:\n\nstruct StepperView: View {\n    @State private var value = 1\n    let step = 5\n    var body: some View {\n        Stepper(value: $value,\n                step: step) {\n            Text(\"Current value: \\(value), step: \\(step)\")\n        }\n            .padding(10)\n    }\n}\n\n\nSee Also\nDeprecated initializers\ninit<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, onEditingChanged: (Bool) -> Void, label: () -> Label)\nCreates a stepper configured to increment or decrement a binding to a value using a step value and within a range of values you provide.\nAvailable when Label conforms to View.\nDeprecated\ninit(onIncrement: (() -> Void)?, onDecrement: (() -> Void)?, onEditingChanged: (Bool) -> Void, label: () -> Label)\nCreates a stepper instance that performs the closures you provide when the user increments or decrements the stepper.\nAvailable when Label conforms to View.\nDeprecated"
    },
    {
        "title": "init(value:in:step:onEditingChanged:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/stepper/init(value:in:step:oneditingchanged:label:)",
        "html": "Deprecated\n\nUse init(value:in:step:label:onEditingChanged:) instead.\n\nParameters\nvalue\n\nA Binding to a value that you provide.\n\nbounds\n\nA closed range that describes the upper and lower bounds permitted by the stepper.\n\nstep\n\nThe amount to increment or decrement the stepper when the user clicks or taps the stepper\u2019s increment or decrement buttons, respectively.\n\nonEditingChanged\n\nA closure that\u2019s called when editing begins and ends. For example, on iOS, the user may touch and hold the increment or decrement buttons on a stepper which causes the execution of the onEditingChanged closure at the start and end of the gesture.\n\nlabel\n\nA view describing the purpose of this stepper.\n\nDiscussion\n\nUse this initializer to create a stepper that increments or decrements a binding to value by the step size you provide within the given bounds. By setting the bounds, you ensure that the value never goes below or above the lowest or highest value, respectively.\n\nThe example below shows a stepper that displays the effect of incrementing or decrementing a value with the step size of step with the bounds defined by range:\n\nstruct StepperView: View {\n    @State private var value = 0\n    let step = 5\n    let range = 1...50\n\n\n    var body: some View {\n        Stepper(value: $value,\n                in: range,\n                step: step) {\n            Text(\"Current: \\(value) in \\(range.description) \" +\n                 \"stepping by \\(step)\")\n        }\n            .padding(10)\n    }\n}\n\n\nSee Also\nDeprecated initializers\ninit<V>(value: Binding<V>, step: V.Stride, onEditingChanged: (Bool) -> Void, label: () -> Label)\nCreates a stepper configured to increment or decrement a binding to a value using a step value you provide.\nAvailable when Label conforms to View.\nDeprecated\ninit(onIncrement: (() -> Void)?, onDecrement: (() -> Void)?, onEditingChanged: (Bool) -> Void, label: () -> Label)\nCreates a stepper instance that performs the closures you provide when the user increments or decrements the stepper.\nAvailable when Label conforms to View.\nDeprecated"
    },
    {
        "title": "init(_:onIncrement:onDecrement:onEditingChanged:)",
        "url": "https://developer.apple.com/documentation/swiftui/stepper/init(_:onincrement:ondecrement:oneditingchanged:)-5pmbh",
        "html": "Parameters\ntitleKey\n\nThe key for the stepper\u2019s localized title describing the purpose of the stepper.\n\nonIncrement\n\nThe closure to execute when the user clicks or taps the control\u2019s plus button.\n\nonDecrement\n\nThe closure to execute when the user clicks or taps the control\u2019s minus button.\n\nonEditingChanged\n\nA closure that\u2019s called when editing begins and ends. For example, on iOS, the user may touch and hold the increment or decrement buttons on a Stepper which causes the execution of the onEditingChanged closure at the start and end of the gesture.\n\nDiscussion\n\nUse this initializer to create a stepper with a custom title that executes closures you provide when either of the stepper\u2019s increment or decrement buttons are pressed. This version of Stepper doesn\u2019t take a binding to a value, nor does it allow you to specify a range of acceptable values, or a step value \u2013 it simply calls the closures you provide when the control\u2019s buttons are pressed.\n\nThe example below uses an array that holds a number of Color values, a local state variable, value, to set the control\u2019s background color, and title label. When the user clicks or taps on the stepper\u2019s increment or decrement buttons SwiftUI executes the relevant closure that updates value, wrapping the value to prevent overflow. SwiftUI then re-renders the view, updating the text and background color to match the current index:\n\nstruct StepperView: View {\n    @State private var value = 0\n    let colors: [Color] = [.orange, .red, .gray, .blue, .green,\n                           .purple, .pink]\n\n\n    func incrementStep() {\n        value += 1\n        if value >= colors.count { value = 0 }\n    }\n\n\n    func decrementStep() {\n        value -= 1\n        if value < 0 { value = colors.count - 1 }\n    }\n\n\n    var body: some View {\n        Stepper(\"Value: \\(value) Color: \\(colors[value].description)\",\n                 onIncrement: incrementStep,\n                 onDecrement: decrementStep)\n        .padding(5)\n        .background(colors[value])\n    }\n}\n\n\nSee Also\nCreating a stepper with change behavior\ninit(label: () -> Label, onIncrement: (() -> Void)?, onDecrement: (() -> Void)?, onEditingChanged: (Bool) -> Void)\nCreates a stepper instance that performs the closures you provide when the user increments or decrements the stepper.\ninit<S>(S, onIncrement: (() -> Void)?, onDecrement: (() -> Void)?, onEditingChanged: (Bool) -> Void)\nCreates a stepper using a title string and that executes closures you provide when the user clicks or taps the stepper\u2019s increment or decrement buttons.\nAvailable when Label is Text."
    },
    {
        "title": "init(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/slider/init(value:in:step:oneditingchanged:minimumvaluelabel:maximumvaluelabel:label:)",
        "html": "Deprecated\n\nUse init(value:in:step:label:minimumValueLabel:maximumValueLabel:onEditingChanged:) instead.\n\nParameters\nvalue\n\nThe selected value within bounds.\n\nbounds\n\nThe range of the valid values. Defaults to 0...1.\n\nstep\n\nThe distance between each valid value.\n\nonEditingChanged\n\nA callback for when editing begins and ends.\n\nminimumValueLabel\n\nA view that describes bounds.lowerBound.\n\nmaximumValueLabel\n\nA view that describes bounds.lowerBound.\n\nlabel\n\nA View that describes the purpose of the instance. Not all slider styles show the label, but even in those cases, SwiftUI uses the label for accessibility. For example, VoiceOver uses the label to identify the purpose of the slider.\n\nDiscussion\n\nThe value of the created instance is equal to the position of the given value within bounds, mapped into 0...1.\n\nThe slider calls onEditingChanged when editing begins and ends. For example, on iOS, editing begins when the user starts to drag the thumb along the slider\u2019s track.\n\nSee Also\nDeprecated initializers\ninit<V>(value: Binding<V>, in: ClosedRange<V>, onEditingChanged: (Bool) -> Void, label: () -> Label)\nCreates a slider to select a value from a given range, which displays the provided label.\nAvailable when Label conforms to View and ValueLabel is EmptyView.\nDeprecated\ninit<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, onEditingChanged: (Bool) -> Void, label: () -> Label)\nCreates a slider to select a value from a given range, subject to a step increment, which displays the provided label.\nAvailable when Label conforms to View and ValueLabel is EmptyView.\nDeprecated\ninit<V>(value: Binding<V>, in: ClosedRange<V>, onEditingChanged: (Bool) -> Void, minimumValueLabel: ValueLabel, maximumValueLabel: ValueLabel, label: () -> Label)\nCreates a slider to select a value from a given range, which displays the provided labels.\nAvailable when Label conforms to View and ValueLabel conforms to View.\nDeprecated"
    },
    {
        "title": "init(action:)",
        "url": "https://developer.apple.com/documentation/swiftui/helplink/init(action:)",
        "html": "Parameters\naction\n\nthe action to perform when the user clicks the button.\n\nDiscussion\n\nUse this initializer when you want the standard help button appearance with a custom button action that does not open an article in an Apple Help book.\n\nSee Also\nCreating a help link\ninit(destination: URL)\nConstructs a new help link that opens the specified destination URL.\ninit(anchor: NSHelpManager.AnchorName)\nConstructs a new help link with the specified anchor in the main app bundle\u2019s book.\ninit(anchor: NSHelpManager.AnchorName, book: NSHelpManager.BookName)\nConstructs a new help link with the specified anchor and book."
    },
    {
        "title": "init(_:prompt:onSubmit:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfieldlink/init(_:prompt:onsubmit:)-2g526",
        "html": "Parameters\ntitleKey\n\nA key for the TextFieldLink\u2019s localized title, that describes the purpose of requesting text input.\n\nprompt\n\nText which describes the reason for requesting text input.\n\nonSubmit\n\nAn action to perform when text input has been accepted and dismissed\n\nSee Also\nCreating a text field link\ninit<S>(S, prompt: Text?, onSubmit: (String) -> Void)\nCreates a TextFieldLink which when pressed will request text input from the user.\nAvailable when Label is Text.\ninit(prompt: Text?, label: () -> Label, onSubmit: (String) -> Void)\nCreates a TextFieldLink which when pressed will request text input from the user.\nAvailable when Label conforms to View."
    },
    {
        "title": "init(_:prompt:onSubmit:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfieldlink/init(_:prompt:onsubmit:)-35nib",
        "html": "Parameters\ntitleKey\n\nA key for the TextFieldLink\u2019s localized title, that describes the purpose of requesting text input.\n\nprompt\n\nText which describes the reason for requesting text input.\n\nonSubmit\n\nAn action to perform when text input has been accepted and dismissed\n\nSee Also\nCreating a text field link\ninit(LocalizedStringKey, prompt: Text?, onSubmit: (String) -> Void)\nCreates a TextFieldLink which when pressed will request text input from the user.\nAvailable when Label is Text.\ninit(prompt: Text?, label: () -> Label, onSubmit: (String) -> Void)\nCreates a TextFieldLink which when pressed will request text input from the user.\nAvailable when Label conforms to View."
    },
    {
        "title": "init(_:image:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharepreview/init(_:image:)-51syf",
        "html": "Parameters\ntitle\n\nA title to show in a preview.\n\nimage\n\nAn image to show in a preview.\n\nSee Also\nDisplaying a preview with an image\ninit<S>(S, image: Image)\nCreates a preview representation.\nAvailable when Image conforms to Transferable and Icon is Never.\ninit(LocalizedStringKey, image: Image)\nCreates a preview representation.\nAvailable when Image conforms to Transferable and Icon is Never."
    },
    {
        "title": "init(_:image:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharepreview/init(_:image:)-91j4s",
        "html": "Parameters\ntitle\n\nA title to show in a preview.\n\nimage\n\nAn image to show in a preview.\n\nSee Also\nDisplaying a preview with an image\ninit(LocalizedStringKey, image: Image)\nCreates a preview representation.\nAvailable when Image conforms to Transferable and Icon is Never.\ninit(Text, image: Image)\nCreates a preview representation.\nAvailable when Image conforms to Transferable and Icon is Never."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharepreview/init(_:)-9fjyx",
        "html": "Parameters\ntitle\n\nA title to show in a preview.\n\nSee Also\nDisplaying a preview\ninit(LocalizedStringKey)\nCreates a preview representation.\nAvailable when Image is Never and Icon is Never.\ninit(Text)\nCreates a preview representation.\nAvailable when Image is Never and Icon is Never."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharepreview/init(_:)-56cgx",
        "html": "Parameters\ntitleKey\n\nA key identifying a title to show in a preview.\n\nSee Also\nDisplaying a preview\ninit<S>(S)\nCreates a preview representation.\nAvailable when Image is Never and Icon is Never.\ninit(Text)\nCreates a preview representation.\nAvailable when Image is Never and Icon is Never."
    },
    {
        "title": "init(_:image:icon:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharepreview/init(_:image:icon:)-6edlr",
        "html": "Parameters\ntitle\n\nA title to show in a preview.\n\nimage\n\nAn image to show in a preview.\n\nicon\n\nAn icon to show in a preview.\n\nSee Also\nDisplaying a preview with an image and an icon\ninit<S>(S, image: Image, icon: Icon)\nCreates a preview representation.\ninit(LocalizedStringKey, image: Image, icon: Icon)\nCreates a preview representation."
    },
    {
        "title": "symbolVariant(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/paletteselectioneffect/symbolvariant(_:)",
        "html": "Discussion\n\nNote\n\nThis effect only applies to SF Symbols.\n\nSee Also\nGetting palette selection effects\nstatic var automatic: PaletteSelectionEffect\nApplies the system\u2019s default effect when selected.\nstatic var custom: PaletteSelectionEffect\nDoes not apply any system effect when selected."
    },
    {
        "title": "init(_:icon:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharepreview/init(_:icon:)-2fqld",
        "html": "Parameters\ntitle\n\nA title to show in a preview.\n\nicon\n\nAn icon to show in a preview.\n\nSee Also\nDisplaying a preview with an icon\ninit(LocalizedStringKey, icon: Icon)\nCreates a preview representation.\nAvailable when Image is Never and Icon conforms to Transferable.\ninit(Text, icon: Icon)\nCreates a preview representation.\nAvailable when Image is Never and Icon conforms to Transferable."
    },
    {
        "title": "init(destination:)",
        "url": "https://developer.apple.com/documentation/swiftui/helplink/init(destination:)",
        "html": "Parameters\ndestination\n\nThe URL to open when the button is clicked.\n\nDiscussion\n\nUse this initializer when you want the standard help button appearance that opens a link to a website.\n\nYou can override the default behavior when the button is clicked by setting the openURL environment value with a custom OpenURLAction.\n\nSee Also\nCreating a help link\ninit(action: () -> Void)\nConstructs a new help link with the specified action.\ninit(anchor: NSHelpManager.AnchorName)\nConstructs a new help link with the specified anchor in the main app bundle\u2019s book.\ninit(anchor: NSHelpManager.AnchorName, book: NSHelpManager.BookName)\nConstructs a new help link with the specified anchor and book."
    },
    {
        "title": "custom",
        "url": "https://developer.apple.com/documentation/swiftui/paletteselectioneffect/custom",
        "html": "Discussion\n\nNote\n\nMake sure to manually implement a way to indicate selection when using this case. For example, you could dynamically resolve the item\u2019s image based on the selection state.\n\nSee Also\nGetting palette selection effects\nstatic var automatic: PaletteSelectionEffect\nApplies the system\u2019s default effect when selected.\nstatic func symbolVariant(SymbolVariants) -> PaletteSelectionEffect\nApplies the specified symbol variant when selected."
    },
    {
        "title": "init(_:image:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharepreview/init(_:image:)-xjux",
        "html": "Parameters\ntitleKey\n\nA key identifying a title to show in a preview.\n\nimage\n\nAn image to show in a preview.\n\nSee Also\nDisplaying a preview with an image\ninit<S>(S, image: Image)\nCreates a preview representation.\nAvailable when Image conforms to Transferable and Icon is Never.\ninit(Text, image: Image)\nCreates a preview representation.\nAvailable when Image conforms to Transferable and Icon is Never."
    },
    {
        "title": "init(prompt:label:onSubmit:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfieldlink/init(prompt:label:onsubmit:)",
        "html": "Parameters\nlabel\n\nA view that describes the action of requesting text input.\n\nprompt\n\nText which describes the reason for requesting text input.\n\nonSubmit\n\nAn action to perform when text input has been accepted and dismissed\n\nSee Also\nCreating a text field link\ninit(LocalizedStringKey, prompt: Text?, onSubmit: (String) -> Void)\nCreates a TextFieldLink which when pressed will request text input from the user.\nAvailable when Label is Text.\ninit<S>(S, prompt: Text?, onSubmit: (String) -> Void)\nCreates a TextFieldLink which when pressed will request text input from the user.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:icon:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharepreview/init(_:icon:)-1c1uh",
        "html": "Parameters\ntitle\n\nA title to show in a preview.\n\nicon\n\nAn icon to show in a preview.\n\nSee Also\nDisplaying a preview with an icon\ninit<S>(S, icon: Icon)\nCreates a preview representation.\nAvailable when Image is Never and Icon conforms to Transferable.\ninit(LocalizedStringKey, icon: Icon)\nCreates a preview representation.\nAvailable when Image is Never and Icon conforms to Transferable."
    },
    {
        "title": "init(anchor:)",
        "url": "https://developer.apple.com/documentation/swiftui/helplink/init(anchor:)",
        "html": "Parameters\nanchor\n\nThe anchor within the help book to open to.\n\nDiscussion\n\nThe main app bundle book name is defined by the CFBundleHelpBookName key in its Info.plist file.\n\nSee Also\nCreating a help link\ninit(action: () -> Void)\nConstructs a new help link with the specified action.\ninit(destination: URL)\nConstructs a new help link that opens the specified destination URL.\ninit(anchor: NSHelpManager.AnchorName, book: NSHelpManager.BookName)\nConstructs a new help link with the specified anchor and book."
    },
    {
        "title": "intrinsicContentSize",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontrollersizingoptions/intrinsiccontentsize",
        "html": "Discussion\n\nUse this option when the hosting controller\u2019s view is being laid out with Auto Layout.\n\nNote\n\nThis option comes with a performance cost because it asks for the ideal size of the content using the unspecified size proposal.\n\nSee Also\nGetting sizing options\nstatic let preferredContentSize: UIHostingControllerSizingOptions\nThe hosting controller tracks its content\u2019s ideal size in its preferred content size."
    },
    {
        "title": "detail",
        "url": "https://developer.apple.com/documentation/swiftui/navigationsplitviewcolumn/detail",
        "html": "See Also\nGetting a column\nstatic var sidebar: NavigationSplitViewColumn\nstatic var content: NavigationSplitViewColumn"
    },
    {
        "title": "content",
        "url": "https://developer.apple.com/documentation/swiftui/navigationsplitviewcolumn/content",
        "html": "See Also\nGetting a column\nstatic var sidebar: NavigationSplitViewColumn\nstatic var detail: NavigationSplitViewColumn"
    },
    {
        "title": "roundedRectangle(radius:)",
        "url": "https://developer.apple.com/documentation/swiftui/buttonbordershape/roundedrectangle(radius:)",
        "html": "Parameters\nradius\n\nthe corner radius of the rectangle.\n\nDiscussion\n\nNote\n\nThis has no effect on non-widget system buttons on macOS.\n\nSee Also\nGetting border shapes\nstatic let automatic: ButtonBorderShape\nA shape that defers to the system to determine an appropriate shape for the given context and platform.\nstatic let capsule: ButtonBorderShape\nA capsule shape.\nstatic let circle: ButtonBorderShape\nstatic let roundedRectangle: ButtonBorderShape\nA rounded rectangle shape."
    },
    {
        "title": "circle",
        "url": "https://developer.apple.com/documentation/swiftui/buttonbordershape/circle",
        "html": "See Also\nGetting border shapes\nstatic let automatic: ButtonBorderShape\nA shape that defers to the system to determine an appropriate shape for the given context and platform.\nstatic let capsule: ButtonBorderShape\nA capsule shape.\nstatic let roundedRectangle: ButtonBorderShape\nA rounded rectangle shape.\nstatic func roundedRectangle(radius: CGFloat) -> ButtonBorderShape\nA rounded rectangle shape."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/buttonbordershape/automatic",
        "html": "See Also\nGetting border shapes\nstatic let capsule: ButtonBorderShape\nA capsule shape.\nstatic let circle: ButtonBorderShape\nstatic let roundedRectangle: ButtonBorderShape\nA rounded rectangle shape.\nstatic func roundedRectangle(radius: CGFloat) -> ButtonBorderShape\nA rounded rectangle shape."
    },
    {
        "title": "preferredContentSize",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontrollersizingoptions/preferredcontentsize",
        "html": "Discussion\n\nUse this option when using a hosting controller with a container view controller that requires up-to-date knowledge of the hosting controller\u2019s ideal size.\n\nNote\n\nThis option comes with a performance cost because it asks for the ideal size of the content using the unspecified size proposal.\n\nSee Also\nGetting sizing options\nstatic let intrinsicContentSize: UIHostingControllerSizingOptions\nThe hosting controller\u2019s view automatically invalidate its intrinsic content size when its ideal size changes."
    },
    {
        "title": "wordProcessing",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitytextcontenttype/wordprocessing",
        "html": "See Also\nGetting content types\nstatic let console: AccessibilityTextContentType\nA type that represents text used for input, like in the Terminal app.\nstatic let fileSystem: AccessibilityTextContentType\nA type that represents text used by a file browser, like in the Finder app in macOS.\nstatic let messaging: AccessibilityTextContentType\nA type that represents text used in a message, like in the Messages app.\nstatic let narrative: AccessibilityTextContentType\nA type that represents text used in a story or poem, like in the Books app.\nstatic let plain: AccessibilityTextContentType\nA type that represents generic text that has no specific type.\nstatic let sourceCode: AccessibilityTextContentType\nA type that represents text used in source code, like in Swift Playgrounds.\nstatic let spreadsheet: AccessibilityTextContentType\nA type that represents text used in a grid of data, like in the Numbers app."
    },
    {
        "title": "needsPanelToBecomeKey",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/needspaneltobecomekey",
        "html": "See Also\nConfiguring the responder behavior\nvar acceptsFirstResponder: Bool"
    },
    {
        "title": "didMove(toParent:)",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontroller/didmove(toparent:)",
        "html": "See Also\nResponding to view-related events\nfunc loadView()\nfunc viewWillAppear(Bool)\nNotifies the view controller that its view is about to be added to a view hierarchy.\nfunc viewIsAppearing(Bool)\nfunc viewDidAppear(Bool)\nNotifies the view controller that its view has been added to a view hierarchy.\nfunc viewWillDisappear(Bool)\nNotifies the view controller that its view will be removed from a view hierarchy.\nfunc viewDidDisappear(Bool)\nfunc willMove(toParent: UIViewController?)\nfunc viewWillTransition(to: CGSize, with: UIViewControllerTransitionCoordinator)\nfunc viewWillLayoutSubviews()\nfunc target(forAction: Selector, withSender: Any?) -> Any?\nvar rootView: Content\nThe root view of the SwiftUI view hierarchy managed by this view controller."
    },
    {
        "title": "updateChartDescriptor(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/axchartdescriptorrepresentable/updatechartdescriptor(_:)-9j67q",
        "html": "Required Default implementation provided.\n\nDiscussion\n\nThis will be called as needed, when accessibility needs your AXChartDescriptor for VoiceOver. It will only be called if the inputs to your views, or a relevant part of the Environment, have changed.\n\nDefault Implementations\nAXChartDescriptorRepresentable Implementations\nfunc updateChartDescriptor(AXChartDescriptor)\nUpdate the existing AXChartDescriptor for your view, based on changes in your view or in the Environment.\nSee Also\nManaging a descriptor\nfunc makeChartDescriptor() -> AXChartDescriptor\nCreate the AXChartDescriptor for this view, and return it.\n\nRequired"
    },
    {
        "title": "init(coder:rootView:)",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontroller/init(coder:rootview:)",
        "html": "Parameters\ncoder\n\nThe decoder to use during initialization.\n\nrootView\n\nThe root view of the SwiftUI view hierarchy that you want to manage using this view controller.\n\nReturn Value\n\nA UIViewController object that you can present from your interface.\n\nSee Also\nCreating a hosting controller object\ninit(rootView: Content)\nCreates a hosting controller object that wraps the specified SwiftUI view.\ninit?(coder: NSCoder)\nCreates a hosting controller object from the contents of the specified archive."
    },
    {
        "title": "init(coder:)",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontroller/init(coder:)",
        "html": "Discussion\n\nThe default implementation of this method throws an exception. To create your view controller from an archive, override this method and initialize the superclass using the init(coder:rootView:) method instead.\n\n-Parameter coder: The decoder to use during initialization.\n\nSee Also\nCreating a hosting controller object\ninit(rootView: Content)\nCreates a hosting controller object that wraps the specified SwiftUI view.\ninit?(coder: NSCoder, rootView: Content)\nCreates a hosting controller object from an archive and the specified SwiftUI view."
    },
    {
        "title": "viewWillAppear(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontroller/viewwillappear(_:)",
        "html": "Parameters\nanimated\n\nIf true, the view is being added using an animation.\n\nDiscussion\n\nSwiftUI calls this method before adding the hosting controller\u2019s root view to the view hierarchy. You can override this method to perform custom tasks associated with the appearance of the view. If you override this method, you must call super at some point in your implementation.\n\nSee Also\nResponding to view-related events\nfunc loadView()\nfunc viewIsAppearing(Bool)\nfunc viewDidAppear(Bool)\nNotifies the view controller that its view has been added to a view hierarchy.\nfunc viewWillDisappear(Bool)\nNotifies the view controller that its view will be removed from a view hierarchy.\nfunc viewDidDisappear(Bool)\nfunc willMove(toParent: UIViewController?)\nfunc didMove(toParent: UIViewController?)\nfunc viewWillTransition(to: CGSize, with: UIViewControllerTransitionCoordinator)\nfunc viewWillLayoutSubviews()\nfunc target(forAction: Selector, withSender: Any?) -> Any?\nvar rootView: Content\nThe root view of the SwiftUI view hierarchy managed by this view controller."
    },
    {
        "title": "loadView()",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontroller/loadview()",
        "html": "See Also\nResponding to view-related events\nfunc viewWillAppear(Bool)\nNotifies the view controller that its view is about to be added to a view hierarchy.\nfunc viewIsAppearing(Bool)\nfunc viewDidAppear(Bool)\nNotifies the view controller that its view has been added to a view hierarchy.\nfunc viewWillDisappear(Bool)\nNotifies the view controller that its view will be removed from a view hierarchy.\nfunc viewDidDisappear(Bool)\nfunc willMove(toParent: UIViewController?)\nfunc didMove(toParent: UIViewController?)\nfunc viewWillTransition(to: CGSize, with: UIViewControllerTransitionCoordinator)\nfunc viewWillLayoutSubviews()\nfunc target(forAction: Selector, withSender: Any?) -> Any?\nvar rootView: Content\nThe root view of the SwiftUI view hierarchy managed by this view controller."
    },
    {
        "title": "viewWillDisappear(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontroller/viewwilldisappear(_:)",
        "html": "Parameters\nanimated\n\nIf true, the view is being removed using an animation.\n\nDiscussion\n\nSwiftUI calls this method before removing the hosting controller\u2019s root view from the view hierarchy. You can override this method to perform custom tasks associated with the disappearance of the view. If you override this method, you must call super at some point in your implementation.\n\nSee Also\nResponding to view-related events\nfunc loadView()\nfunc viewWillAppear(Bool)\nNotifies the view controller that its view is about to be added to a view hierarchy.\nfunc viewIsAppearing(Bool)\nfunc viewDidAppear(Bool)\nNotifies the view controller that its view has been added to a view hierarchy.\nfunc viewDidDisappear(Bool)\nfunc willMove(toParent: UIViewController?)\nfunc didMove(toParent: UIViewController?)\nfunc viewWillTransition(to: CGSize, with: UIViewControllerTransitionCoordinator)\nfunc viewWillLayoutSubviews()\nfunc target(forAction: Selector, withSender: Any?) -> Any?\nvar rootView: Content\nThe root view of the SwiftUI view hierarchy managed by this view controller."
    },
    {
        "title": "viewIsAppearing(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontroller/viewisappearing(_:)",
        "html": "See Also\nResponding to view-related events\nfunc loadView()\nfunc viewWillAppear(Bool)\nNotifies the view controller that its view is about to be added to a view hierarchy.\nfunc viewDidAppear(Bool)\nNotifies the view controller that its view has been added to a view hierarchy.\nfunc viewWillDisappear(Bool)\nNotifies the view controller that its view will be removed from a view hierarchy.\nfunc viewDidDisappear(Bool)\nfunc willMove(toParent: UIViewController?)\nfunc didMove(toParent: UIViewController?)\nfunc viewWillTransition(to: CGSize, with: UIViewControllerTransitionCoordinator)\nfunc viewWillLayoutSubviews()\nfunc target(forAction: Selector, withSender: Any?) -> Any?\nvar rootView: Content\nThe root view of the SwiftUI view hierarchy managed by this view controller."
    },
    {
        "title": "viewDidDisappear(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontroller/viewdiddisappear(_:)",
        "html": "See Also\nResponding to view-related events\nfunc loadView()\nfunc viewWillAppear(Bool)\nNotifies the view controller that its view is about to be added to a view hierarchy.\nfunc viewIsAppearing(Bool)\nfunc viewDidAppear(Bool)\nNotifies the view controller that its view has been added to a view hierarchy.\nfunc viewWillDisappear(Bool)\nNotifies the view controller that its view will be removed from a view hierarchy.\nfunc willMove(toParent: UIViewController?)\nfunc didMove(toParent: UIViewController?)\nfunc viewWillTransition(to: CGSize, with: UIViewControllerTransitionCoordinator)\nfunc viewWillLayoutSubviews()\nfunc target(forAction: Selector, withSender: Any?) -> Any?\nvar rootView: Content\nThe root view of the SwiftUI view hierarchy managed by this view controller."
    },
    {
        "title": "viewDidAppear(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontroller/viewdidappear(_:)",
        "html": "Parameters\nanimated\n\nIf true, the view is being added using an animation.\n\nDiscussion\n\nSwiftUI calls this method after adding the hosting controller\u2019s root view to the view hierarchy. You can override this method to perform custom tasks associated with the appearance of the view. If you override this method, you must call super at some point in your implementation.\n\nSee Also\nResponding to view-related events\nfunc loadView()\nfunc viewWillAppear(Bool)\nNotifies the view controller that its view is about to be added to a view hierarchy.\nfunc viewIsAppearing(Bool)\nfunc viewWillDisappear(Bool)\nNotifies the view controller that its view will be removed from a view hierarchy.\nfunc viewDidDisappear(Bool)\nfunc willMove(toParent: UIViewController?)\nfunc didMove(toParent: UIViewController?)\nfunc viewWillTransition(to: CGSize, with: UIViewControllerTransitionCoordinator)\nfunc viewWillLayoutSubviews()\nfunc target(forAction: Selector, withSender: Any?) -> Any?\nvar rootView: Content\nThe root view of the SwiftUI view hierarchy managed by this view controller."
    },
    {
        "title": "prefersHomeIndicatorAutoHidden",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontroller/prefershomeindicatorautohidden",
        "html": "See Also\nConfiguring the home indicator\nvar childForHomeIndicatorAutoHidden: UIViewController?"
    },
    {
        "title": "target(forAction:withSender:)",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontroller/target(foraction:withsender:)",
        "html": "See Also\nResponding to view-related events\nfunc loadView()\nfunc viewWillAppear(Bool)\nNotifies the view controller that its view is about to be added to a view hierarchy.\nfunc viewIsAppearing(Bool)\nfunc viewDidAppear(Bool)\nNotifies the view controller that its view has been added to a view hierarchy.\nfunc viewWillDisappear(Bool)\nNotifies the view controller that its view will be removed from a view hierarchy.\nfunc viewDidDisappear(Bool)\nfunc willMove(toParent: UIViewController?)\nfunc didMove(toParent: UIViewController?)\nfunc viewWillTransition(to: CGSize, with: UIViewControllerTransitionCoordinator)\nfunc viewWillLayoutSubviews()\nvar rootView: Content\nThe root view of the SwiftUI view hierarchy managed by this view controller."
    },
    {
        "title": "preferredScreenEdgesDeferringSystemGestures",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontroller/preferredscreenedgesdeferringsystemgestures",
        "html": "See Also\nConfiguring the interface appearance\nvar preferredUserInterfaceStyle: UIUserInterfaceStyle\nThe preferred interface style for this view controller.\nvar childForScreenEdgesDeferringSystemGestures: UIViewController?"
    },
    {
        "title": "childForScreenEdgesDeferringSystemGestures",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontroller/childforscreenedgesdeferringsystemgestures",
        "html": "See Also\nConfiguring the interface appearance\nvar preferredUserInterfaceStyle: UIUserInterfaceStyle\nThe preferred interface style for this view controller.\nvar preferredScreenEdgesDeferringSystemGestures: UIRectEdge\nSets the screen edge from which you want your gesture to take precedence over the system gesture."
    },
    {
        "title": "AccessibilityLabeledPairRole.content",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitylabeledpairrole/content",
        "html": "Discussion\n\nFor example, it might be the custom control itself.\n\nSee Also\nGetting roles\ncase label\nThis element represents the label part of the label / content pair."
    },
    {
        "title": "preferredUserInterfaceStyle",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontroller/preferreduserinterfacestyle",
        "html": "See Also\nConfiguring the interface appearance\nvar preferredScreenEdgesDeferringSystemGestures: UIRectEdge\nSets the screen edge from which you want your gesture to take precedence over the system gesture.\nvar childForScreenEdgesDeferringSystemGestures: UIViewController?"
    },
    {
        "title": "viewWillLayoutSubviews()",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontroller/viewwilllayoutsubviews()",
        "html": "See Also\nResponding to view-related events\nfunc loadView()\nfunc viewWillAppear(Bool)\nNotifies the view controller that its view is about to be added to a view hierarchy.\nfunc viewIsAppearing(Bool)\nfunc viewDidAppear(Bool)\nNotifies the view controller that its view has been added to a view hierarchy.\nfunc viewWillDisappear(Bool)\nNotifies the view controller that its view will be removed from a view hierarchy.\nfunc viewDidDisappear(Bool)\nfunc willMove(toParent: UIViewController?)\nfunc didMove(toParent: UIViewController?)\nfunc viewWillTransition(to: CGSize, with: UIViewControllerTransitionCoordinator)\nfunc target(forAction: Selector, withSender: Any?) -> Any?\nvar rootView: Content\nThe root view of the SwiftUI view hierarchy managed by this view controller."
    },
    {
        "title": "willMove(toParent:)",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontroller/willmove(toparent:)",
        "html": "See Also\nResponding to view-related events\nfunc loadView()\nfunc viewWillAppear(Bool)\nNotifies the view controller that its view is about to be added to a view hierarchy.\nfunc viewIsAppearing(Bool)\nfunc viewDidAppear(Bool)\nNotifies the view controller that its view has been added to a view hierarchy.\nfunc viewWillDisappear(Bool)\nNotifies the view controller that its view will be removed from a view hierarchy.\nfunc viewDidDisappear(Bool)\nfunc didMove(toParent: UIViewController?)\nfunc viewWillTransition(to: CGSize, with: UIViewControllerTransitionCoordinator)\nfunc viewWillLayoutSubviews()\nfunc target(forAction: Selector, withSender: Any?) -> Any?\nvar rootView: Content\nThe root view of the SwiftUI view hierarchy managed by this view controller."
    },
    {
        "title": "childForHomeIndicatorAutoHidden",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontroller/childforhomeindicatorautohidden",
        "html": "See Also\nConfiguring the home indicator\nvar prefersHomeIndicatorAutoHidden: Bool\nA Boolean value that indicates whether the view controller prefers the home indicator to be hidden or shown."
    },
    {
        "title": "AccessibilityLabeledPairRole.label",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitylabeledpairrole/label",
        "html": "Discussion\n\nFor example, it might be the explanatory text to the left of a control, describing what the control does.\n\nSee Also\nGetting roles\ncase content\nThis element represents the content part of the label / content pair."
    },
    {
        "title": "childForStatusBarHidden",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontroller/childforstatusbarhidden",
        "html": "See Also\nConfiguring the status bar\nvar preferredStatusBarStyle: UIStatusBarStyle\nThe preferred status bar style for the view controller.\nvar preferredStatusBarUpdateAnimation: UIStatusBarAnimation\nThe animation style to use when hiding or showing the status bar for this view controller.\nvar prefersStatusBarHidden: Bool\nA Boolean value that indicates whether the view controller prefers the status bar to be hidden or shown.\nvar childForStatusBarStyle: UIViewController?"
    },
    {
        "title": "preferredStatusBarUpdateAnimation",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontroller/preferredstatusbarupdateanimation",
        "html": "See Also\nConfiguring the status bar\nvar preferredStatusBarStyle: UIStatusBarStyle\nThe preferred status bar style for the view controller.\nvar prefersStatusBarHidden: Bool\nA Boolean value that indicates whether the view controller prefers the status bar to be hidden or shown.\nvar childForStatusBarStyle: UIViewController?\nvar childForStatusBarHidden: UIViewController?"
    },
    {
        "title": "preferredStatusBarStyle",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontroller/preferredstatusbarstyle",
        "html": "See Also\nConfiguring the status bar\nvar preferredStatusBarUpdateAnimation: UIStatusBarAnimation\nThe animation style to use when hiding or showing the status bar for this view controller.\nvar prefersStatusBarHidden: Bool\nA Boolean value that indicates whether the view controller prefers the status bar to be hidden or shown.\nvar childForStatusBarStyle: UIViewController?\nvar childForStatusBarHidden: UIViewController?"
    },
    {
        "title": "environment",
        "url": "https://developer.apple.com/documentation/swiftui/uiviewcontrollerrepresentablecontext/environment",
        "html": "Discussion\n\nUse the environment values to configure the state of your UIKit view controller when creating or updating it."
    },
    {
        "title": "minSize(width:height:)",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingconfiguration/minsize(width:height:)",
        "html": "Parameters\nwidth\n\nThe value to use for the width dimension. A value of nil indicates that the system default should be used.\n\nheight\n\nThe value to use for the height dimension. A value of nil indicates that the system default should be used.\n\nDiscussion\n\nUse this modifier to indicate that a configuration\u2019s associated cell can be resized to a specific minimum. The following example allows the cell to be compressed to zero size:\n\nUIHostingConfiguration {\n    Text(\"My Contents\")\n}\n.minSize(width: 0, height: 0)\n\nSee Also\nSetting a size\nfunc minSize() -> UIHostingConfiguration<Content, Background>\nSets the minimum size for the configuration.\nDeprecated"
    },
    {
        "title": "childForStatusBarStyle",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontroller/childforstatusbarstyle",
        "html": "See Also\nConfiguring the status bar\nvar preferredStatusBarStyle: UIStatusBarStyle\nThe preferred status bar style for the view controller.\nvar preferredStatusBarUpdateAnimation: UIStatusBarAnimation\nThe animation style to use when hiding or showing the status bar for this view controller.\nvar prefersStatusBarHidden: Bool\nA Boolean value that indicates whether the view controller prefers the status bar to be hidden or shown.\nvar childForStatusBarHidden: UIViewController?"
    },
    {
        "title": "safeAreaRegions",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontroller/safearearegions",
        "html": "Discussion\n\nAn example of when this is appropriate to use is when hosting content that you know should never be affected by the safe area, such as a custom scrollable container. Disabling a safe area region omits it from the SwiftUI layout system altogether.\n\nThe default value is SafeAreaRegions.all.\n\nSee Also\nManaging the size\nvar sizingOptions: UIHostingControllerSizingOptions\nThe options for how the hosting controller tracks changes to the size of its SwiftUI content.\nfunc preferredContentSizeDidChange(forChildContentContainer: UIContentContainer)\nfunc sizeThatFits(in: CGSize) -> CGSize\nCalculates and returns the most appropriate size for the current view."
    },
    {
        "title": "background(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingconfiguration/background(_:)",
        "html": "Parameters\nstyle\n\nThe shape style to be used as the background of the cell.\n\nDiscussion\n\nThe following example sets a custom view to the background of the cell:\n\nUIHostingConfiguration {\n    Text(\"My Contents\")\n}\n.background(Color.blue)\n\nSee Also\nSetting the background\nfunc background<B>(content: () -> B) -> UIHostingConfiguration<Content, B>\nSets the background contents for the hosting configuration\u2019s enclosing cell."
    },
    {
        "title": "preferredContentSizeDidChange(forChildContentContainer:)",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontroller/preferredcontentsizedidchange(forchildcontentcontainer:)",
        "html": "See Also\nManaging the size\nvar sizingOptions: UIHostingControllerSizingOptions\nThe options for how the hosting controller tracks changes to the size of its SwiftUI content.\nfunc sizeThatFits(in: CGSize) -> CGSize\nCalculates and returns the most appropriate size for the current view.\nvar safeAreaRegions: SafeAreaRegions\nThe safe area regions that this view controller adds to its view.\nAvailable when Content conforms to View."
    },
    {
        "title": "sizeThatFits(in:)",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontroller/sizethatfits(in:)",
        "html": "Parameters\nsize\n\nThe proposed new size for the view.\n\nReturn Value\n\nThe size that offers the best fit for the root view and its contents.\n\nSee Also\nManaging the size\nvar sizingOptions: UIHostingControllerSizingOptions\nThe options for how the hosting controller tracks changes to the size of its SwiftUI content.\nfunc preferredContentSizeDidChange(forChildContentContainer: UIContentContainer)\nvar safeAreaRegions: SafeAreaRegions\nThe safe area regions that this view controller adds to its view.\nAvailable when Content conforms to View."
    },
    {
        "title": "margins(_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingconfiguration/margins(_:_:)-7ptqj",
        "html": "Parameters\nedges\n\nThe edges to apply the insets. Any edges not specified will use the system default values. The default value is all.\n\nlength\n\nThe amount to apply.\n\nDiscussion\n\nUse this modifier to replace the default margins applied to the root of the configuration. The following example creates 20 points of space between the content and the background on the horizontal edges.\n\nUIHostingConfiguration {\n    Text(\"My Contents\")\n}\n.margins(.horizontal, 20.0)\n\nSee Also\nSetting margins\nfunc margins(Edge.Set, EdgeInsets) -> UIHostingConfiguration<Content, Background>\nSets the margins around the content of the configuration."
    },
    {
        "title": "updateUIViewController(_:context:)",
        "url": "https://developer.apple.com/documentation/swiftui/uiviewcontrollerrepresentable/updateuiviewcontroller(_:context:)",
        "html": "Required\n\nParameters\nuiViewController\n\nYour custom view controller object.\n\ncontext\n\nA context structure containing information about the current state of the system.\n\nDiscussion\n\nWhen the state of your app changes, SwiftUI updates the portions of your interface affected by those changes. SwiftUI calls this method for any changes affecting the corresponding UIKit view controller. Use this method to update the configuration of your view controller to match the new state information provided in the context parameter.\n\nSee Also\nCreating and updating the view controller\nfunc makeUIViewController(context: Self.Context) -> Self.UIViewControllerType\nCreates the view controller object and configures its initial state.\n\nRequired\n\ntypealias Context\nassociatedtype UIViewControllerType : UIViewController\nThe type of view controller to present.\n\nRequired"
    },
    {
        "title": "minSize()",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingconfiguration/minsize()",
        "html": "Deprecated\n\nUse minSize(width:height:) instead.\n\nSee Also\nSetting a size\nfunc minSize(width: CGFloat?, height: CGFloat?) -> UIHostingConfiguration<Content, Background>\nSets the minimum size for the configuration."
    },
    {
        "title": "transaction",
        "url": "https://developer.apple.com/documentation/swiftui/uiviewcontrollerrepresentablecontext/transaction",
        "html": "See Also\nCoordinating view controller interactions\nlet coordinator: Representable.Coordinator\nThe view\u2019s associated coordinator."
    },
    {
        "title": "init(_:selection:in:)",
        "url": "https://developer.apple.com/documentation/swiftui/multidatepicker/init(_:selection:in:)-14tmp",
        "html": "Parameters\ntitle\n\nThe title of self, describing its purpose.\n\nselection\n\nThe date values being displayed and selected.\n\nbounds\n\nThe exclusive range of selectable dates.\n\nSee Also\nPicking dates in a range\ninit(LocalizedStringKey, selection: Binding<Set<DateComponents>>, in: Range<Date>)\nCreates an instance that selects multiple dates in a range.\nAvailable when Label is Text.\ninit(selection: Binding<Set<DateComponents>>, in: Range<Date>, label: () -> Label)\nCreates an instance that selects multiple dates in a range.\nAvailable when Label conforms to View."
    },
    {
        "title": "init(items:subject:message:preview:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(items:subject:message:preview:label:)",
        "html": "Parameters\nitems\n\nThe items to share.\n\nsubject\n\nA title for the items to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the items to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\npreview\n\nA closure that returns a representation of each item to render in a preview.\n\nlabel\n\nA view builder that produces a label that describes the share action.\n\nSee Also\nSharing items with a preview\ninit(items: Data, subject: Text?, message: Text?, preview: (Data.Element) -> SharePreview<PreviewImage, PreviewIcon>)\nCreates an instance that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage conforms to Transferable, PreviewIcon conforms to Transferable, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable."
    },
    {
        "title": "init(_:items:subject:message:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(_:items:subject:message:)-29yf4",
        "html": "Parameters\ntitle\n\nThe title of the share action.\n\nitems\n\nThe item to share.\n\nsubject\n\nA title for the items to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the items to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\nSee Also\nSharing items with a label\ninit<S>(S, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is URL.\ninit(LocalizedStringKey, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is String.\ninit(LocalizedStringKey, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is URL.\ninit(Text, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is URL.\ninit(Text, items: Data, subject: Text?, message: Text?)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage is Never, PreviewIcon is Never, Label is DefaultShareLinkLabel, and Data.Element is String."
    },
    {
        "title": "init(_:selection:)",
        "url": "https://developer.apple.com/documentation/swiftui/multidatepicker/init(_:selection:)-98tdv",
        "html": "Parameters\ntitle\n\nThe title of self, describing its purpose.\n\nselection\n\nThe date values being displayed and selected.\n\nSee Also\nPicking dates\ninit(LocalizedStringKey, selection: Binding<Set<DateComponents>>)\nCreates an instance that selects multiple dates with an unbounded range.\nAvailable when Label is Text.\ninit(selection: Binding<Set<DateComponents>>, label: () -> Label)\nCreates an instance that selects multiple dates with an unbounded range.\nAvailable when Label conforms to View."
    },
    {
        "title": "keyDown(with:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/keydown(with:)",
        "html": "See Also\nManaging keyboard interaction\nfunc keyUp(with: NSEvent)\nCalled when the user releases a key on the keyboard while this view is in the responder chain.\nfunc performKeyEquivalent(with: NSEvent) -> Bool\nfunc insertText(Any)\nfunc didChangeValue(forKey: String)\nfunc makeTouchBar() -> NSTouchBar?"
    },
    {
        "title": "isFlipped",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/isflipped",
        "html": "See Also\nConfiguring the view layout behavior\nclass var requiresConstraintBasedLayout: Bool\nvar userInterfaceLayoutDirection: NSUserInterfaceLayoutDirection\nvar layerContentsRedrawPolicy: NSView.LayerContentsRedrawPolicy\nfunc updateConstraints()\nfunc layout()\nvar safeAreaRegions: SafeAreaRegions\nThe safe area regions that this view controller adds to its view."
    },
    {
        "title": "sizeThatFits(_:uiViewController:context:)",
        "url": "https://developer.apple.com/documentation/swiftui/uiviewcontrollerrepresentable/sizethatfits(_:uiviewcontroller:context:)-35p75",
        "html": "Required Default implementation provided.\n\nParameters\nproposal\n\nThe proposed size for the view controller.\n\nuiViewController\n\nYour custom view controller object.\n\ncontext\n\nA context structure containing information about the current state of the system.\n\nReturn Value\n\nThe composite size of the represented view controller. Returning a value of nil indicates that the system should use the default sizing algorithm.\n\nDiscussion\n\nThis method may be called more than once with different proposed sizes during the same layout pass. SwiftUI views choose their own size, so one of the values returned from this function will always be used as the actual size of the composite view.\n\nDefault Implementations\nUIViewControllerRepresentable Implementations\nfunc sizeThatFits(ProposedViewSize, uiViewController: Self.UIViewControllerType, context: Self.Context) -> CGSize?\nGiven a proposed size, returns the preferred size of the composite view."
    },
    {
        "title": "init(_:items:subject:message:preview:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(_:items:subject:message:preview:)-7amxh",
        "html": "Parameters\ntitle\n\nThe title of the share action.\n\nitems\n\nThe item to share.\n\nsubject\n\nA title for the items to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the items to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\npreview\n\nA closure that returns a representation of each item to render in a preview.\n\nSee Also\nSharing items with a label and preview\ninit(LocalizedStringKey, items: Data, subject: Text?, message: Text?, preview: (Data.Element) -> SharePreview<PreviewImage, PreviewIcon>)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage conforms to Transferable, PreviewIcon conforms to Transferable, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit(Text, items: Data, subject: Text?, message: Text?, preview: (Data.Element) -> SharePreview<PreviewImage, PreviewIcon>)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage conforms to Transferable, PreviewIcon conforms to Transferable, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable."
    },
    {
        "title": "makeCoordinator()",
        "url": "https://developer.apple.com/documentation/swiftui/uiviewcontrollerrepresentable/makecoordinator()-32trb",
        "html": "Required Default implementation provided.\n\nDiscussion\n\nImplement this method if changes to your view controller might affect other parts of your app. In your implementation, create a custom Swift instance that can communicate with other parts of your interface. For example, you might provide an instance that binds its variables to SwiftUI properties, causing the two to remain synchronized. If your view controller doesn\u2019t interact with other parts of your app, providing a coordinator is unnecessary.\n\nSwiftUI calls this method before calling the makeUIViewController(context:) method. The system provides your coordinator either directly or as part of a context structure when calling the other methods of your representable instance.\n\nDefault Implementations\nUIViewControllerRepresentable Implementations\nfunc makeCoordinator() -> Self.Coordinator\nCreates the custom instance that you use to communicate changes from your view controller to other parts of your SwiftUI interface.\nAvailable when Coordinator is ().\nSee Also\nProviding a custom coordinator object\nassociatedtype Coordinator = Void\nA type to coordinate with the view controller.\n\nRequired"
    },
    {
        "title": "init(_:items:subject:message:preview:)",
        "url": "https://developer.apple.com/documentation/swiftui/sharelink/init(_:items:subject:message:preview:)-7j3k4",
        "html": "Parameters\ntitle\n\nThe title of the share action.\n\nitems\n\nThe items to share.\n\nsubject\n\nA title for the items to show when sharing to activities that support a subject field.\n\nmessage\n\nA description of the items to show when sharing to activities that support a message field. Activities may support attributed text or HTML strings.\n\npreview\n\nA closure that returns a representation of each item to render in a preview.\n\nSee Also\nSharing items with a label and preview\ninit<S>(S, items: Data, subject: Text?, message: Text?, preview: (Data.Element) -> SharePreview<PreviewImage, PreviewIcon>)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage conforms to Transferable, PreviewIcon conforms to Transferable, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable.\ninit(LocalizedStringKey, items: Data, subject: Text?, message: Text?, preview: (Data.Element) -> SharePreview<PreviewImage, PreviewIcon>)\nCreates an instance, with a custom label, that presents the share interface.\nAvailable when Data conforms to RandomAccessCollection, PreviewImage conforms to Transferable, PreviewIcon conforms to Transferable, Label is DefaultShareLinkLabel, and Data.Element conforms to Transferable."
    },
    {
        "title": "init(selection:in:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/multidatepicker/init(selection:in:label:)-7zme2",
        "html": "Parameters\nselection\n\nThe date values being displayed and selected.\n\nbounds\n\nThe exclusive range of selectable dates.\n\nlabel\n\nA view that describes the use of the dates.\n\nSee Also\nPicking dates in a range\ninit(LocalizedStringKey, selection: Binding<Set<DateComponents>>, in: Range<Date>)\nCreates an instance that selects multiple dates in a range.\nAvailable when Label is Text.\ninit<S>(S, selection: Binding<Set<DateComponents>>, in: Range<Date>)\nCreates an instance that selects multiple dates in a range.\nAvailable when Label is Text."
    },
    {
        "title": "Coordinator",
        "url": "https://developer.apple.com/documentation/swiftui/uiviewcontrollerrepresentable/coordinator",
        "html": "Required\n\nSee Also\nProviding a custom coordinator object\nfunc makeCoordinator() -> Self.Coordinator\nCreates the custom instance that you use to communicate changes from your view controller to other parts of your SwiftUI interface.\n\nRequired Default implementation provided."
    },
    {
        "title": "init(selection:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/multidatepicker/init(selection:label:)",
        "html": "Parameters\nselection\n\nThe date values being displayed and selected.\n\nlabel\n\nA view that describes the use of the dates.\n\nSee Also\nPicking dates\ninit(LocalizedStringKey, selection: Binding<Set<DateComponents>>)\nCreates an instance that selects multiple dates with an unbounded range.\nAvailable when Label is Text.\ninit<S>(S, selection: Binding<Set<DateComponents>>)\nCreates an instance that selects multiple dates with an unbounded range.\nAvailable when Label is Text."
    },
    {
        "title": "NSViewControllerRepresentable.Context",
        "url": "https://developer.apple.com/documentation/swiftui/nsviewcontrollerrepresentable/context",
        "html": "See Also\nCreating and updating the view controller\nfunc makeNSViewController(context: Self.Context) -> Self.NSViewControllerType\nCreates the view controller object and configures its initial state.\n\nRequired\n\nfunc updateNSViewController(Self.NSViewControllerType, context: Self.Context)\nUpdates the state of the specified view controller with new information from SwiftUI.\n\nRequired\n\nassociatedtype NSViewControllerType : NSViewController\nThe type of view controller to present.\n\nRequired"
    },
    {
        "title": "mouseMoved(with:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/mousemoved(with:)",
        "html": "See Also\nResponding to mouse events\nfunc mouseDown(with: NSEvent)\nfunc mouseUp(with: NSEvent)\nfunc otherMouseDown(with: NSEvent)\nfunc otherMouseUp(with: NSEvent)\nfunc rightMouseDown(with: NSEvent)\nfunc rightMouseUp(with: NSEvent)\nfunc mouseEntered(with: NSEvent)\nfunc mouseExited(with: NSEvent)\nfunc mouseDragged(with: NSEvent)\nfunc otherMouseDragged(with: NSEvent)\nfunc rightMouseDragged(with: NSEvent)\nfunc cursorUpdate(with: NSEvent)"
    },
    {
        "title": "UIViewControllerType",
        "url": "https://developer.apple.com/documentation/swiftui/uiviewcontrollerrepresentable/uiviewcontrollertype",
        "html": "Required\n\nSee Also\nCreating and updating the view controller\nfunc makeUIViewController(context: Self.Context) -> Self.UIViewControllerType\nCreates the view controller object and configures its initial state.\n\nRequired\n\nfunc updateUIViewController(Self.UIViewControllerType, context: Self.Context)\nUpdates the state of the specified view controller with new information from SwiftUI.\n\nRequired\n\ntypealias Context"
    },
    {
        "title": "init(_:selection:in:)",
        "url": "https://developer.apple.com/documentation/swiftui/multidatepicker/init(_:selection:in:)-5fs5g",
        "html": "Parameters\ntitleKey\n\nThe key for the localized title of self, describing its purpose.\n\nselection\n\nThe date values being displayed and selected.\n\nbounds\n\nThe open range from some selectable start date.\n\nSee Also\nPicking dates after a date\ninit<S>(S, selection: Binding<Set<DateComponents>>, in: PartialRangeFrom<Date>)\nCreates an instance that selects multiple dates on or after some start date.\nAvailable when Label is Text.\ninit(selection: Binding<Set<DateComponents>>, in: PartialRangeFrom<Date>, label: () -> Label)\nCreates an instance that selects multiple dates on or after some start date.\nAvailable when Label conforms to View."
    },
    {
        "title": "init(_:destination:)",
        "url": "https://developer.apple.com/documentation/swiftui/link/init(_:destination:)-3sq22",
        "html": "Parameters\ntitleKey\n\nThe key for the localized title that describes the purpose of this link.\n\ndestination\n\nThe URL for the link.\n\nDiscussion\n\nUse Link to create a control that your app uses to navigate to a URL that you provide. The example below creates a link to example.com and uses Visit Example Co as the title key to generate a link-styled view in your app:\n\nLink(\"Visit Example Co\",\n      destination: URL(string: \"https://www.example.com/\")!)\n\nSee Also\nCreating a link\ninit<S>(S, destination: URL)\nCreates a control, consisting of a URL and a title string, used to navigate to a URL.\nAvailable when Label is Text.\ninit(destination: URL, label: () -> Label)\nCreates a control, consisting of a URL and a label, used to navigate to the given URL."
    },
    {
        "title": "init(selection:in:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/multidatepicker/init(selection:in:label:)-4zo41",
        "html": "Parameters\nselection\n\nThe date values being displayed and selected.\n\nbounds\n\nThe open range before some end date.\n\nlabel\n\nA view that describes the use of the dates.\n\nSee Also\nPicking dates before a date\ninit(LocalizedStringKey, selection: Binding<Set<DateComponents>>, in: PartialRangeUpTo<Date>)\nCreates an instance that selects multiple dates before some end date.\nAvailable when Label is Text.\ninit<S>(S, selection: Binding<Set<DateComponents>>, in: PartialRangeUpTo<Date>)\nCreates an instance that selects multiple dates before some end date.\nAvailable when Label is Text."
    },
    {
        "title": "init(supportedTypes:validator:payloadAction:)",
        "url": "https://developer.apple.com/documentation/swiftui/pastebutton/init(supportedtypes:validator:payloadaction:)",
        "html": "Deprecated\n\nUse the init(supportedContentTypes:validator:payloadAction:) initializer instead.\n\nParameters\nsupportedTypes\n\nThe exact uniform type identifiers supported by the button. If the pasteboard doesn\u2019t contain any of the supported types, the button becomes disabled.\n\nvalidator\n\nA handler that receives those contents of the pasteboard that conform to payloadAction. Load and inspect these items to determine whether to validate the button. If you load a valid item, return it from this closure. If the pasteboard doesn\u2019t contain any valid items, return nil to invalidate the button.\n\npayloadAction\n\nThe handler called when the user clicks the button. This closure receives the preprocessed result of validator.\n\nDiscussion\n\nSet the contents of supportedTypes in order of your app\u2019s preference for its supported types. The Paste button takes the most-preferred type that the pasteboard source supports and delivers this to the validator closure.\n\nSee Also\nDeprecated initializers\ninit(supportedTypes: [String], payloadAction: ([NSItemProvider]) -> Void)\nCreates a Paste button that accepts specific types of data from the pasteboard.\nDeprecated\ninit<Payload>(supportedContentTypes: [UTType], validator: ([NSItemProvider]) -> Payload?, payloadAction: (Payload) -> Void)\nCreates a Paste button that accepts specific types of data from the pasteboard, performing a custom validation of the data before sending it to your app.\nDeprecated"
    },
    {
        "title": "init(path:root:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationstack/init(path:root:)-3bt4q",
        "html": "Parameters\npath\n\nA Binding to the navigation state for this stack.\n\nroot\n\nThe view to display when the stack is empty.\n\nDiscussion\n\nIf you prefer to store the navigation state as a NavigationPath, use init(path:root:) instead. If you don\u2019t need access to the navigation state, use init(root:).\n\nSee Also\nCreating a navigation stack with a path\ninit(path: Binding<NavigationPath>, root: () -> Root)\nCreates a navigation stack with heterogeneous navigation state that you can control."
    },
    {
        "title": "init(destination:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/link/init(destination:label:)",
        "html": "Parameters\ndestination\n\nThe URL for the link.\n\nlabel\n\nA view that describes the destination of URL.\n\nSee Also\nCreating a link\ninit(LocalizedStringKey, destination: URL)\nCreates a control, consisting of a URL and a title key, used to navigate to a URL.\nAvailable when Label is Text.\ninit<S>(S, destination: URL)\nCreates a control, consisting of a URL and a title string, used to navigate to a URL.\nAvailable when Label is Text."
    },
    {
        "title": "AccessibilityHeadingLevel.h6",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityheadinglevel/h6",
        "html": "See Also\nGetting the heading level\ncase h1\nLevel 1 heading.\ncase h2\nLevel 2 heading.\ncase h3\nLevel 3 heading.\ncase h4\nLevel 4 heading.\ncase h5\nLevel 5 heading.\ncase unspecified\nA heading without a hierarchy."
    },
    {
        "title": "init(supportedTypes:payloadAction:)",
        "url": "https://developer.apple.com/documentation/swiftui/pastebutton/init(supportedtypes:payloadaction:)",
        "html": "Deprecated\n\nUse the init(supportedContentTypes:payloadAction:) initializer instead.\n\nParameters\nsupportedTypes\n\nThe exact uniform type identifiers supported by the button. If the pasteboard doesn\u2019t contain any of the supported types, the button becomes disabled.\n\npayloadAction\n\nThe handler to call when the user clicks the Paste button, and the pasteboard has items that conform to supportedTypes. This closure receives an array of item providers that you use to inspect and load the pasteboard data.\n\nDiscussion\n\nSet the contents of supportedTypes in order of your app\u2019s preference for its supported types. The Paste button takes the most-preferred type that the pasteboard source supports and delivers this to the payloadAction closure.\n\nSee Also\nDeprecated initializers\ninit<Payload>(supportedTypes: [String], validator: ([NSItemProvider]) -> Payload?, payloadAction: (Payload) -> Void)\nCreates a Paste button that accepts specific types of data from the pasteboard, performing a custom validation of the data before sending it to your app.\nDeprecated\ninit<Payload>(supportedContentTypes: [UTType], validator: ([NSItemProvider]) -> Payload?, payloadAction: (Payload) -> Void)\nCreates a Paste button that accepts specific types of data from the pasteboard, performing a custom validation of the data before sending it to your app.\nDeprecated"
    },
    {
        "title": "previews",
        "url": "https://developer.apple.com/documentation/swiftui/previewprovider/previews-swift.type.property",
        "html": "Required\n\nDiscussion\n\nImplement a computed previews property to indicate the content to preview. Xcode generates a preview for each view that you list. You can apply View modifiers to the views, like you do when creating a custom view. For a preview, you can also use various preview-specific modifiers that customize the preview. For example, you can choose a specific device for the preview by adding the previewDevice(_:) modifier:\n\nstruct CircleImage_Previews: PreviewProvider {\n    static var previews: some View {\n        CircleImage()\n            .previewDevice(PreviewDevice(rawValue: \"iPad Pro (11-inch)\"))\n    }\n}\n\n\nFor the full list of preview-specific modifiers, see Previews in Xcode.\n\nSee Also\nCreating a preview\nassociatedtype Previews : View\nThe type to preview.\n\nRequired"
    },
    {
        "title": "AccessibilityHeadingLevel.h3",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityheadinglevel/h3",
        "html": "See Also\nGetting the heading level\ncase h1\nLevel 1 heading.\ncase h2\nLevel 2 heading.\ncase h4\nLevel 4 heading.\ncase h5\nLevel 5 heading.\ncase h6\nLevel 6 heading.\ncase unspecified\nA heading without a hierarchy."
    },
    {
        "title": "AccessibilityHeadingLevel.h2",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityheadinglevel/h2",
        "html": "See Also\nGetting the heading level\ncase h1\nLevel 1 heading.\ncase h3\nLevel 3 heading.\ncase h4\nLevel 4 heading.\ncase h5\nLevel 5 heading.\ncase h6\nLevel 6 heading.\ncase unspecified\nA heading without a hierarchy."
    },
    {
        "title": "AccessibilityHeadingLevel.h1",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityheadinglevel/h1",
        "html": "See Also\nGetting the heading level\ncase h2\nLevel 2 heading.\ncase h3\nLevel 3 heading.\ncase h4\nLevel 4 heading.\ncase h5\nLevel 5 heading.\ncase h6\nLevel 6 heading.\ncase unspecified\nA heading without a hierarchy."
    },
    {
        "title": "init(rootView:)",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontroller/init(rootview:)",
        "html": "Parameters\nrootView\n\nThe root view of the SwiftUI view hierarchy that you want to manage using the hosting view controller.\n\nReturn Value\n\nA UIHostingController object initialized with the specified SwiftUI view.\n\nSee Also\nCreating a hosting controller object\ninit?(coder: NSCoder, rootView: Content)\nCreates a hosting controller object from an archive and the specified SwiftUI view.\ninit?(coder: NSCoder)\nCreates a hosting controller object from the contents of the specified archive."
    },
    {
        "title": "magnify(with:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/magnify(with:)",
        "html": "See Also\nResponding to gestures\nfunc rotate(with: NSEvent)\nfunc scrollWheel(with: NSEvent)"
    },
    {
        "title": "makeChartDescriptor()",
        "url": "https://developer.apple.com/documentation/swiftui/axchartdescriptorrepresentable/makechartdescriptor()",
        "html": "Required\n\nDiscussion\n\nThis will be called once per identity of your View. It will not be run again unless the identity of your View changes. If you need to update the AXChartDescriptor based on changes in your View, or in the Environment, implement updateChartDescriptor. This method will only be called if / when accessibility needs the AXChartDescriptor of your view, for VoiceOver.\n\nSee Also\nManaging a descriptor\nfunc updateChartDescriptor(AXChartDescriptor)\nUpdate the existing AXChartDescriptor for your view, based on changes in your view or in the Environment.\n\nRequired Default implementation provided."
    },
    {
        "title": "coalescedDescriptionFormat",
        "url": "https://developer.apple.com/documentation/swiftui/wkusernotificationhostingcontroller/coalesceddescriptionformat",
        "html": "Discussion\n\nDefault value is nil\n\nSee Also\nConfiguring the notification\nclass var isInteractive: Bool\nIf the notification should accept user input.\nclass var sashColor: Color?\nColor to use within the sash of the long look interface. If nil the sash will be the default system color.\nclass var subtitleColor: Color?\nThe color to apply to the subtitle text displayed in the short look interface. If nil the text will be the default system color.\nclass var titleColor: Color?\nThe color to apply to the text displayed in the sash. If nil the text will be the default system color.\nclass var wantsSashBlur: Bool\nIf the sash should include a blur over the background."
    },
    {
        "title": "AccessibilityHeadingLevel.h4",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityheadinglevel/h4",
        "html": "See Also\nGetting the heading level\ncase h1\nLevel 1 heading.\ncase h2\nLevel 2 heading.\ncase h3\nLevel 3 heading.\ncase h5\nLevel 5 heading.\ncase h6\nLevel 6 heading.\ncase unspecified\nA heading without a hierarchy."
    },
    {
        "title": "body",
        "url": "https://developer.apple.com/documentation/swiftui/wkusernotificationhostingcontroller/body",
        "html": "Discussion\n\nOverride this property and return the root view of your SwiftUI view hierarchy from your implementation. If you don\u2019t override this property, accessing the default implementation triggers an exception."
    },
    {
        "title": "titleColor",
        "url": "https://developer.apple.com/documentation/swiftui/wkusernotificationhostingcontroller/titlecolor",
        "html": "Discussion\n\nDefault value is nil\n\nSee Also\nConfiguring the notification\nclass var coalescedDescriptionFormat: String?\nThe format string to display when multiple notifications of the same type arrive simultaneously. If you specify a custom string, you can use the %d variable to reflect the number of notifications. If nil format will be the system default.\nclass var isInteractive: Bool\nIf the notification should accept user input.\nclass var sashColor: Color?\nColor to use within the sash of the long look interface. If nil the sash will be the default system color.\nclass var subtitleColor: Color?\nThe color to apply to the subtitle text displayed in the short look interface. If nil the text will be the default system color.\nclass var wantsSashBlur: Bool\nIf the sash should include a blur over the background."
    },
    {
        "title": "read(from:)",
        "url": "https://developer.apple.com/documentation/swiftui/uitraitbridgedenvironmentkey/read(from:)",
        "html": "Required\n\nParameters\ntraitCollection\n\nThe trait collection to read from.\n\nSee Also\nManaging the keys\nstatic func write(to: inout UIMutableTraits, value: Self.Value)\n\nRequired"
    },
    {
        "title": "write(to:value:)",
        "url": "https://developer.apple.com/documentation/swiftui/uitraitbridgedenvironmentkey/write(to:value:)",
        "html": "Required\n\nSee Also\nManaging the keys\nstatic func read(from: UITraitCollection) -> Self.Value\nReads the trait value from the trait collection, and returns the equivalent environment value.\n\nRequired"
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitycustomcontentkey/init(_:)",
        "html": "Parameters\nlabelKey\n\nLocalized text describing to the user what is contained in this additional information entry. For example: \u201corientation\u201d. This will also be used as the identifier.\n\nSee Also\nCreating a key\ninit(Text, id: String)\nCreate an AccessibilityCustomContentKey with the specified label and identifier.\ninit(LocalizedStringKey, id: String)\nCreate an AccessibilityCustomContentKey with the specified label and identifier."
    },
    {
        "title": "Previews",
        "url": "https://developer.apple.com/documentation/swiftui/previewprovider/previews-swift.associatedtype",
        "html": "Required\n\nDiscussion\n\nWhen you create a preview, Swift infers this type from your implementation of the required previews property.\n\nSee Also\nCreating a preview\nstatic var previews: Self.Previews\nA collection of views to preview.\n\nRequired"
    },
    {
        "title": "viewWillTransition(to:with:)",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingcontroller/viewwilltransition(to:with:)",
        "html": "See Also\nResponding to view-related events\nfunc loadView()\nfunc viewWillAppear(Bool)\nNotifies the view controller that its view is about to be added to a view hierarchy.\nfunc viewIsAppearing(Bool)\nfunc viewDidAppear(Bool)\nNotifies the view controller that its view has been added to a view hierarchy.\nfunc viewWillDisappear(Bool)\nNotifies the view controller that its view will be removed from a view hierarchy.\nfunc viewDidDisappear(Bool)\nfunc willMove(toParent: UIViewController?)\nfunc didMove(toParent: UIViewController?)\nfunc viewWillLayoutSubviews()\nfunc target(forAction: Selector, withSender: Any?) -> Any?\nvar rootView: Content\nThe root view of the SwiftUI view hierarchy managed by this view controller."
    },
    {
        "title": "rightMouseUp(with:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/rightmouseup(with:)",
        "html": "See Also\nResponding to mouse events\nfunc mouseDown(with: NSEvent)\nfunc mouseUp(with: NSEvent)\nfunc otherMouseDown(with: NSEvent)\nfunc otherMouseUp(with: NSEvent)\nfunc rightMouseDown(with: NSEvent)\nfunc mouseEntered(with: NSEvent)\nfunc mouseExited(with: NSEvent)\nfunc mouseDragged(with: NSEvent)\nfunc mouseMoved(with: NSEvent)\nfunc otherMouseDragged(with: NSEvent)\nfunc rightMouseDragged(with: NSEvent)\nfunc cursorUpdate(with: NSEvent)"
    },
    {
        "title": "makeTouchBar()",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/maketouchbar()",
        "html": "See Also\nManaging keyboard interaction\nfunc keyDown(with: NSEvent)\nCalled when the user presses a key on the keyboard while this view is in the responder chain.\nfunc keyUp(with: NSEvent)\nCalled when the user releases a key on the keyboard while this view is in the responder chain.\nfunc performKeyEquivalent(with: NSEvent) -> Bool\nfunc insertText(Any)\nfunc didChangeValue(forKey: String)"
    },
    {
        "title": "otherMouseDown(with:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/othermousedown(with:)",
        "html": "See Also\nResponding to mouse events\nfunc mouseDown(with: NSEvent)\nfunc mouseUp(with: NSEvent)\nfunc otherMouseUp(with: NSEvent)\nfunc rightMouseDown(with: NSEvent)\nfunc rightMouseUp(with: NSEvent)\nfunc mouseEntered(with: NSEvent)\nfunc mouseExited(with: NSEvent)\nfunc mouseDragged(with: NSEvent)\nfunc mouseMoved(with: NSEvent)\nfunc otherMouseDragged(with: NSEvent)\nfunc rightMouseDragged(with: NSEvent)\nfunc cursorUpdate(with: NSEvent)"
    },
    {
        "title": "escape",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityactionkind/escape",
        "html": "See Also\nGetting the kind of action\nstatic let `default`: AccessibilityActionKind\nThe value that represents the default accessibility action.\nstatic let delete: AccessibilityActionKind\nstatic let magicTap: AccessibilityActionKind\nstatic let showMenu: AccessibilityActionKind"
    },
    {
        "title": "accessibilitySubrole()",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/accessibilitysubrole()",
        "html": "See Also\nManaging accessibility behaviors\nvar accessibilityFocusedUIElement: Any?\nfunc accessibilityChildren() -> [Any]?\nfunc accessibilityChildrenInNavigationOrder() -> [NSAccessibilityElementProtocol]?\nfunc accessibilityHitTest(NSPoint) -> Any?\nfunc accessibilityRole() -> NSAccessibility.Role?\nfunc isAccessibilityElement() -> Bool"
    },
    {
        "title": "AccessibilityAdjustmentDirection.increment",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityadjustmentdirection/increment",
        "html": "See Also\nGetting an adjustment direction\ncase decrement"
    },
    {
        "title": "NSViewControllerType",
        "url": "https://developer.apple.com/documentation/swiftui/nsviewcontrollerrepresentable/nsviewcontrollertype",
        "html": "Required\n\nSee Also\nCreating and updating the view controller\nfunc makeNSViewController(context: Self.Context) -> Self.NSViewControllerType\nCreates the view controller object and configures its initial state.\n\nRequired\n\nfunc updateNSViewController(Self.NSViewControllerType, context: Self.Context)\nUpdates the state of the specified view controller with new information from SwiftUI.\n\nRequired\n\ntypealias Context"
    },
    {
        "title": "isHeader",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitytraits/isheader",
        "html": "See Also\nGetting traits\nstatic let allowsDirectInteraction: AccessibilityTraits\nThe accessibility element allows direct touch interaction for VoiceOver users.\nstatic let causesPageTurn: AccessibilityTraits\nThe accessibility element causes an automatic page turn when VoiceOver finishes reading the text within it.\nstatic let isButton: AccessibilityTraits\nThe accessibility element is a button.\nstatic let isImage: AccessibilityTraits\nThe accessibility element is an image.\nstatic let isKeyboardKey: AccessibilityTraits\nThe accessibility element behaves as a keyboard key.\nstatic let isLink: AccessibilityTraits\nThe accessibility element is a link.\nstatic let isModal: AccessibilityTraits\nThe accessibility element is modal.\nstatic let isSearchField: AccessibilityTraits\nThe accessibility element is a search field.\nstatic let isSelected: AccessibilityTraits\nThe accessibility element is currently selected.\nstatic let isStaticText: AccessibilityTraits\nThe accessibility element is a static text that cannot be modified by the user.\nstatic let isSummaryElement: AccessibilityTraits\nThe accessibility element provides summary information when the application starts.\nstatic let isToggle: AccessibilityTraits\nThe accessibility element is a toggle.\nstatic let playsSound: AccessibilityTraits\nThe accessibility element plays its own sound when activated.\nstatic let startsMediaSession: AccessibilityTraits\nThe accessibility element starts a media session when it is activated.\nstatic let updatesFrequently: AccessibilityTraits\nThe accessibility element frequently updates its label or value."
    },
    {
        "title": "intrinsicContentSize",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingsizingoptions/intrinsiccontentsize",
        "html": "Discussion\n\nThe constraints reflect the size that fits a proposal of .unspecified.\n\nSee Also\nGeting sizing options\nstatic let maxSize: NSHostingSizingOptions\nThe hosting view creates and updates constraints that represent its content\u2019s maximum size.\nstatic let minSize: NSHostingSizingOptions\nThe hosting view creates and updates constraints that represent its content\u2019s minimum size.\nstatic let preferredContentSize: NSHostingSizingOptions\nThe hosting controller creates and updates constraints that represent its content\u2019s ideal size. These constraints in turn influence the hosting controller\u2019s preferredContentSize.\nstatic let standardBounds: NSHostingSizingOptions\nThe hosting view creates constraints for its minimum, ideal, and maximum sizes."
    },
    {
        "title": "playsSound",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitytraits/playssound",
        "html": "See Also\nGetting traits\nstatic let allowsDirectInteraction: AccessibilityTraits\nThe accessibility element allows direct touch interaction for VoiceOver users.\nstatic let causesPageTurn: AccessibilityTraits\nThe accessibility element causes an automatic page turn when VoiceOver finishes reading the text within it.\nstatic let isButton: AccessibilityTraits\nThe accessibility element is a button.\nstatic let isHeader: AccessibilityTraits\nThe accessibility element is a header that divides content into sections, like the title of a navigation bar.\nstatic let isImage: AccessibilityTraits\nThe accessibility element is an image.\nstatic let isKeyboardKey: AccessibilityTraits\nThe accessibility element behaves as a keyboard key.\nstatic let isLink: AccessibilityTraits\nThe accessibility element is a link.\nstatic let isModal: AccessibilityTraits\nThe accessibility element is modal.\nstatic let isSearchField: AccessibilityTraits\nThe accessibility element is a search field.\nstatic let isSelected: AccessibilityTraits\nThe accessibility element is currently selected.\nstatic let isStaticText: AccessibilityTraits\nThe accessibility element is a static text that cannot be modified by the user.\nstatic let isSummaryElement: AccessibilityTraits\nThe accessibility element provides summary information when the application starts.\nstatic let isToggle: AccessibilityTraits\nThe accessibility element is a toggle.\nstatic let startsMediaSession: AccessibilityTraits\nThe accessibility element starts a media session when it is activated.\nstatic let updatesFrequently: AccessibilityTraits\nThe accessibility element frequently updates its label or value."
    },
    {
        "title": "sizingOptions",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/sizingoptions",
        "html": "Discussion\n\nNSHostingView can create minimum, maximum, and ideal (content size) constraints that are derived from its SwiftUI view content. These constraints are only created when Auto Layout constraints are otherwise being used in the containing window.\n\nIf the NSHostingView is set as the contentView of an NSWindow, it will also update the window\u2019s contentMinSize and contentMaxSize based on the minimum and maximum size of its SwiftUI content.\n\nsizingOptions defaults to .standardBounds (which includes minSize, intrinsicContentSize, and maxSize), but can be set to an explicit value to control this behavior. For instance, setting a value of .minSize will only create the constraints necessary to maintain the minimum size of the SwiftUI content, or setting a value of [] will create no constraints at all.\n\nIf a use case can make assumptions about the size of the NSHostingView relative to its displayed content, such as the always being displayed in a fixed frame, setting this to a value with fewer options can improve performance as it reduces the amount of layout measurements that need to be performed. If an NSHostingView has a frame that is smaller or larger than that required to display its SwiftUI content, the content will be centered within that frame.\n\nSee Also\nModifying the frame rectangle\nvar intrinsicContentSize: NSSize\nfunc setFrameSize(NSSize)\nvar firstBaselineOffsetFromTop: CGFloat\nvar lastBaselineOffsetFromBottom: CGFloat\nvar firstTextLineCenter: CGFloat?"
    },
    {
        "title": "acceptsFirstResponder",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/acceptsfirstresponder",
        "html": "See Also\nConfiguring the responder behavior\nvar needsPanelToBecomeKey: Bool"
    },
    {
        "title": "environment",
        "url": "https://developer.apple.com/documentation/swiftui/nsviewrepresentablecontext/environment",
        "html": "Discussion\n\nUse the environment values to configure the state of your view when creating or updating it."
    },
    {
        "title": "forwardingTarget(for:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/forwardingtarget(for:)",
        "html": "See Also\nResponding to actions\nfunc responds(to: Selector!) -> Bool\nfunc doCommand(by: Selector)"
    },
    {
        "title": "accessibilityChildren()",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/accessibilitychildren()",
        "html": "See Also\nManaging accessibility behaviors\nvar accessibilityFocusedUIElement: Any?\nfunc accessibilityChildrenInNavigationOrder() -> [NSAccessibilityElementProtocol]?\nfunc accessibilityHitTest(NSPoint) -> Any?\nfunc accessibilityRole() -> NSAccessibility.Role?\nfunc accessibilitySubrole() -> NSAccessibility.Subrole?\nfunc isAccessibilityElement() -> Bool"
    },
    {
        "title": "keyUp(with:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/keyup(with:)",
        "html": "See Also\nManaging keyboard interaction\nfunc keyDown(with: NSEvent)\nCalled when the user presses a key on the keyboard while this view is in the responder chain.\nfunc performKeyEquivalent(with: NSEvent) -> Bool\nfunc insertText(Any)\nfunc didChangeValue(forKey: String)\nfunc makeTouchBar() -> NSTouchBar?"
    },
    {
        "title": "responds(to:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/responds(to:)",
        "html": "See Also\nResponding to actions\nfunc forwardingTarget(for: Selector!) -> Any?\nfunc doCommand(by: Selector)"
    },
    {
        "title": "doCommand(by:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/docommand(by:)",
        "html": "See Also\nResponding to actions\nfunc responds(to: Selector!) -> Bool\nfunc forwardingTarget(for: Selector!) -> Any?"
    },
    {
        "title": "rotate(with:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/rotate(with:)",
        "html": "See Also\nResponding to gestures\nfunc magnify(with: NSEvent)\nfunc scrollWheel(with: NSEvent)"
    },
    {
        "title": "init(_:value:comparator:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:comparator:content:)-4prjd",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncomparator\n\nThe SortComparator used to order values of the sort value type.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view for you, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with comparable values\ninit<V>(LocalizedStringKey, value: KeyPath<RowValue, V>, content: (RowValue) -> Content)\nCreates a sortable column for comparable values that generates its label from a localized string key.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<S, V>(S, value: KeyPath<RowValue, V>, content: (RowValue) -> Content)\nCreates a sortable column for comparable values that generates its label from a string.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<V>(Text, value: KeyPath<RowValue, V>, content: (RowValue) -> Content)\nCreates a sortable column for comparable values with a text label.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<V, C>(LocalizedStringKey, value: KeyPath<RowValue, V>, comparator: C, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a localized string key, and uses an explicit comparator for sorting values.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<V, C>(Text, value: KeyPath<RowValue, V>, comparator: C, content: (RowValue) -> Content)\nCreates a sortable column that has a text label, and uses an explicit comparator for sorting values.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "mouseDragged(with:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/mousedragged(with:)",
        "html": "See Also\nResponding to mouse events\nfunc mouseDown(with: NSEvent)\nfunc mouseUp(with: NSEvent)\nfunc otherMouseDown(with: NSEvent)\nfunc otherMouseUp(with: NSEvent)\nfunc rightMouseDown(with: NSEvent)\nfunc rightMouseUp(with: NSEvent)\nfunc mouseEntered(with: NSEvent)\nfunc mouseExited(with: NSEvent)\nfunc mouseMoved(with: NSEvent)\nfunc otherMouseDragged(with: NSEvent)\nfunc rightMouseDragged(with: NSEvent)\nfunc cursorUpdate(with: NSEvent)"
    },
    {
        "title": "touchesEnded(with:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/touchesended(with:)",
        "html": "See Also\nResponding to touch events\nfunc touchesBegan(with: NSEvent)\nfunc touchesCancelled(with: NSEvent)\nfunc touchesMoved(with: NSEvent)"
    },
    {
        "title": "rightMouseDragged(with:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/rightmousedragged(with:)",
        "html": "See Also\nResponding to mouse events\nfunc mouseDown(with: NSEvent)\nfunc mouseUp(with: NSEvent)\nfunc otherMouseDown(with: NSEvent)\nfunc otherMouseUp(with: NSEvent)\nfunc rightMouseDown(with: NSEvent)\nfunc rightMouseUp(with: NSEvent)\nfunc mouseEntered(with: NSEvent)\nfunc mouseExited(with: NSEvent)\nfunc mouseDragged(with: NSEvent)\nfunc mouseMoved(with: NSEvent)\nfunc otherMouseDragged(with: NSEvent)\nfunc cursorUpdate(with: NSEvent)"
    },
    {
        "title": "prepareForReuse()",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/prepareforreuse()",
        "html": "See Also\nCreating a hosting view\ninit(rootView: Content)\nCreates a hosting view object that wraps the specified SwiftUI view.\ninit?(coder: NSCoder)\nCreates a hosting view object from the contents of the specified archive."
    },
    {
        "title": "cursorUpdate(with:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/cursorupdate(with:)",
        "html": "See Also\nResponding to mouse events\nfunc mouseDown(with: NSEvent)\nfunc mouseUp(with: NSEvent)\nfunc otherMouseDown(with: NSEvent)\nfunc otherMouseUp(with: NSEvent)\nfunc rightMouseDown(with: NSEvent)\nfunc rightMouseUp(with: NSEvent)\nfunc mouseEntered(with: NSEvent)\nfunc mouseExited(with: NSEvent)\nfunc mouseDragged(with: NSEvent)\nfunc mouseMoved(with: NSEvent)\nfunc otherMouseDragged(with: NSEvent)\nfunc rightMouseDragged(with: NSEvent)"
    },
    {
        "title": "otherMouseDragged(with:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/othermousedragged(with:)",
        "html": "See Also\nResponding to mouse events\nfunc mouseDown(with: NSEvent)\nfunc mouseUp(with: NSEvent)\nfunc otherMouseDown(with: NSEvent)\nfunc otherMouseUp(with: NSEvent)\nfunc rightMouseDown(with: NSEvent)\nfunc rightMouseUp(with: NSEvent)\nfunc mouseEntered(with: NSEvent)\nfunc mouseExited(with: NSEvent)\nfunc mouseDragged(with: NSEvent)\nfunc mouseMoved(with: NSEvent)\nfunc rightMouseDragged(with: NSEvent)\nfunc cursorUpdate(with: NSEvent)"
    },
    {
        "title": "layerContentsRedrawPolicy",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/layercontentsredrawpolicy",
        "html": "See Also\nConfiguring the view layout behavior\nclass var requiresConstraintBasedLayout: Bool\nvar userInterfaceLayoutDirection: NSUserInterfaceLayoutDirection\nvar isFlipped: Bool\nfunc updateConstraints()\nfunc layout()\nvar safeAreaRegions: SafeAreaRegions\nThe safe area regions that this view controller adds to its view."
    },
    {
        "title": "touchesBegan(with:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/touchesbegan(with:)",
        "html": "See Also\nResponding to touch events\nfunc touchesCancelled(with: NSEvent)\nfunc touchesEnded(with: NSEvent)\nfunc touchesMoved(with: NSEvent)"
    },
    {
        "title": "requiresConstraintBasedLayout",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/requiresconstraintbasedlayout",
        "html": "See Also\nConfiguring the view layout behavior\nvar userInterfaceLayoutDirection: NSUserInterfaceLayoutDirection\nvar isFlipped: Bool\nvar layerContentsRedrawPolicy: NSView.LayerContentsRedrawPolicy\nfunc updateConstraints()\nfunc layout()\nvar safeAreaRegions: SafeAreaRegions\nThe safe area regions that this view controller adds to its view."
    },
    {
        "title": "safeAreaRegions",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/safearearegions",
        "html": "Discussion\n\nThe default value is SafeAreaRegions.all.\n\nSee Also\nConfiguring the view layout behavior\nclass var requiresConstraintBasedLayout: Bool\nvar userInterfaceLayoutDirection: NSUserInterfaceLayoutDirection\nvar isFlipped: Bool\nvar layerContentsRedrawPolicy: NSView.LayerContentsRedrawPolicy\nfunc updateConstraints()\nfunc layout()"
    },
    {
        "title": "performKeyEquivalent(with:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/performkeyequivalent(with:)",
        "html": "See Also\nManaging keyboard interaction\nfunc keyDown(with: NSEvent)\nCalled when the user presses a key on the keyboard while this view is in the responder chain.\nfunc keyUp(with: NSEvent)\nCalled when the user releases a key on the keyboard while this view is in the responder chain.\nfunc insertText(Any)\nfunc didChangeValue(forKey: String)\nfunc makeTouchBar() -> NSTouchBar?"
    },
    {
        "title": "init(rootView:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/init(rootview:)",
        "html": "Parameters\nrootView\n\nThe root view of the SwiftUI view hierarchy that you want to manage using this hosting controller.\n\nSee Also\nCreating a hosting view\ninit?(coder: NSCoder)\nCreates a hosting view object from the contents of the specified archive.\nfunc prepareForReuse()"
    },
    {
        "title": "layout()",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/layout()",
        "html": "See Also\nConfiguring the view layout behavior\nclass var requiresConstraintBasedLayout: Bool\nvar userInterfaceLayoutDirection: NSUserInterfaceLayoutDirection\nvar isFlipped: Bool\nvar layerContentsRedrawPolicy: NSView.LayerContentsRedrawPolicy\nfunc updateConstraints()\nvar safeAreaRegions: SafeAreaRegions\nThe safe area regions that this view controller adds to its view."
    },
    {
        "title": "init(coder:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/init(coder:)",
        "html": "Parameters\ncoder\n\nThe decoder to use during initialization.\n\nDiscussion\n\nThe default implementation of this method throws an exception. Use the init(rootView:) method to create your hosting view instead.\n\nSee Also\nCreating a hosting view\ninit(rootView: Content)\nCreates a hosting view object that wraps the specified SwiftUI view.\nfunc prepareForReuse()"
    },
    {
        "title": "updateConstraints()",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/updateconstraints()",
        "html": "See Also\nConfiguring the view layout behavior\nclass var requiresConstraintBasedLayout: Bool\nvar userInterfaceLayoutDirection: NSUserInterfaceLayoutDirection\nvar isFlipped: Bool\nvar layerContentsRedrawPolicy: NSView.LayerContentsRedrawPolicy\nfunc layout()\nvar safeAreaRegions: SafeAreaRegions\nThe safe area regions that this view controller adds to its view."
    },
    {
        "title": "insertText(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/inserttext(_:)",
        "html": "See Also\nManaging keyboard interaction\nfunc keyDown(with: NSEvent)\nCalled when the user presses a key on the keyboard while this view is in the responder chain.\nfunc keyUp(with: NSEvent)\nCalled when the user releases a key on the keyboard while this view is in the responder chain.\nfunc performKeyEquivalent(with: NSEvent) -> Bool\nfunc didChangeValue(forKey: String)\nfunc makeTouchBar() -> NSTouchBar?"
    },
    {
        "title": "updatesFrequently",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitytraits/updatesfrequently",
        "html": "Discussion\n\nUse this trait when you want an assistive technology to poll for changes when it needs updated information. For example, you might use this trait to characterize the readout of a stopwatch.\n\nSee Also\nGetting traits\nstatic let allowsDirectInteraction: AccessibilityTraits\nThe accessibility element allows direct touch interaction for VoiceOver users.\nstatic let causesPageTurn: AccessibilityTraits\nThe accessibility element causes an automatic page turn when VoiceOver finishes reading the text within it.\nstatic let isButton: AccessibilityTraits\nThe accessibility element is a button.\nstatic let isHeader: AccessibilityTraits\nThe accessibility element is a header that divides content into sections, like the title of a navigation bar.\nstatic let isImage: AccessibilityTraits\nThe accessibility element is an image.\nstatic let isKeyboardKey: AccessibilityTraits\nThe accessibility element behaves as a keyboard key.\nstatic let isLink: AccessibilityTraits\nThe accessibility element is a link.\nstatic let isModal: AccessibilityTraits\nThe accessibility element is modal.\nstatic let isSearchField: AccessibilityTraits\nThe accessibility element is a search field.\nstatic let isSelected: AccessibilityTraits\nThe accessibility element is currently selected.\nstatic let isStaticText: AccessibilityTraits\nThe accessibility element is a static text that cannot be modified by the user.\nstatic let isSummaryElement: AccessibilityTraits\nThe accessibility element provides summary information when the application starts.\nstatic let isToggle: AccessibilityTraits\nThe accessibility element is a toggle.\nstatic let playsSound: AccessibilityTraits\nThe accessibility element plays its own sound when activated.\nstatic let startsMediaSession: AccessibilityTraits\nThe accessibility element starts a media session when it is activated."
    },
    {
        "title": "isInteractive",
        "url": "https://developer.apple.com/documentation/swiftui/wkusernotificationhostingcontroller/isinteractive",
        "html": "Discussion\n\nDefault value is false\n\nSee Also\nConfiguring the notification\nclass var coalescedDescriptionFormat: String?\nThe format string to display when multiple notifications of the same type arrive simultaneously. If you specify a custom string, you can use the %d variable to reflect the number of notifications. If nil format will be the system default.\nclass var sashColor: Color?\nColor to use within the sash of the long look interface. If nil the sash will be the default system color.\nclass var subtitleColor: Color?\nThe color to apply to the subtitle text displayed in the short look interface. If nil the text will be the default system color.\nclass var titleColor: Color?\nThe color to apply to the text displayed in the sash. If nil the text will be the default system color.\nclass var wantsSashBlur: Bool\nIf the sash should include a blur over the background."
    },
    {
        "title": "sashColor",
        "url": "https://developer.apple.com/documentation/swiftui/wkusernotificationhostingcontroller/sashcolor",
        "html": "Discussion\n\nDefault value is nil\n\nSee Also\nConfiguring the notification\nclass var coalescedDescriptionFormat: String?\nThe format string to display when multiple notifications of the same type arrive simultaneously. If you specify a custom string, you can use the %d variable to reflect the number of notifications. If nil format will be the system default.\nclass var isInteractive: Bool\nIf the notification should accept user input.\nclass var subtitleColor: Color?\nThe color to apply to the subtitle text displayed in the short look interface. If nil the text will be the default system color.\nclass var titleColor: Color?\nThe color to apply to the text displayed in the sash. If nil the text will be the default system color.\nclass var wantsSashBlur: Bool\nIf the sash should include a blur over the background."
    },
    {
        "title": "updateWKInterfaceObject(_:context:)",
        "url": "https://developer.apple.com/documentation/swiftui/wkinterfaceobjectrepresentable/updatewkinterfaceobject(_:context:)",
        "html": "Required\n\nParameters\nwkInterfaceObject\n\nYour custom interface object.\n\ncontext\n\nA context structure containing information about the current state of the system.\n\nDiscussion\n\nWhen the state of your app changes, SwiftUI updates the portions of your interface affected by those changes. SwiftUI calls this method for any changes affecting the corresponding interface object. Use this method to update the configuration of your object to match the new state information provided in the context parameter.\n\nSee Also\nCreating and updating the interface object\nfunc makeWKInterfaceObject(context: Self.Context) -> Self.WKInterfaceObjectType\nCreates a WatchKit interface object and configures its initial state.\n\nRequired\n\ntypealias Context"
    },
    {
        "title": "coordinator",
        "url": "https://developer.apple.com/documentation/swiftui/nsviewcontrollerrepresentablecontext/coordinator",
        "html": "Discussion\n\nThe coordinator is a custom object you define. When updating your view controller, communicate changes to SwiftUI by updating the properties of your coordinator, or by calling relevant methods to make those changes. The implementation of those properties and methods are responsible for updating the appropriate SwiftUI values. For example, you might define a property in your coordinator that binds to a SwiftUI value, as shown in the following code example. Changing the property updates the value of the corresponding SwiftUI variable.\n\nclass Coordinator: NSObject {\n   @Binding var rating: Int\n   init(rating: Binding<Int>) {\n      $rating = rating\n   }\n}\n\n\nTo create and configure your custom coordinator, implement the makeCoordinator() method of your NSViewControllerRepresentable object.\n\nSee Also\nCoordinating view-related interactions\nvar transaction: Transaction\nThe current transaction."
    },
    {
        "title": "updateNSViewController(_:context:)",
        "url": "https://developer.apple.com/documentation/swiftui/nsviewcontrollerrepresentable/updatensviewcontroller(_:context:)",
        "html": "Required\n\nParameters\nnsViewController\n\nYour custom view controller object.\n\ncontext\n\nA context structure containing information about the current state of the system.\n\nDiscussion\n\nWhen the state of your app changes, SwiftUI updates the portions of your interface affected by those changes. SwiftUI calls this method for any changes affecting the corresponding AppKit view controller. Use this method to update the configuration of your view controller to match the new state information provided in the context parameter.\n\nSee Also\nCreating and updating the view controller\nfunc makeNSViewController(context: Self.Context) -> Self.NSViewControllerType\nCreates the view controller object and configures its initial state.\n\nRequired\n\ntypealias Context\nassociatedtype NSViewControllerType : NSViewController\nThe type of view controller to present.\n\nRequired"
    },
    {
        "title": "PreviewPlatform.iOS",
        "url": "https://developer.apple.com/documentation/swiftui/previewplatform/ios",
        "html": "See Also\nGetting an operating system\ncase macOS\nSpecifies macOS as the preview platform.\ncase tvOS\nSpecifies tvOS as the preview platform.\ncase watchOS\nSpecifies watchOS as the preview platform."
    },
    {
        "title": "rightMouseDown(with:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/rightmousedown(with:)",
        "html": "See Also\nResponding to mouse events\nfunc mouseDown(with: NSEvent)\nfunc mouseUp(with: NSEvent)\nfunc otherMouseDown(with: NSEvent)\nfunc otherMouseUp(with: NSEvent)\nfunc rightMouseUp(with: NSEvent)\nfunc mouseEntered(with: NSEvent)\nfunc mouseExited(with: NSEvent)\nfunc mouseDragged(with: NSEvent)\nfunc mouseMoved(with: NSEvent)\nfunc otherMouseDragged(with: NSEvent)\nfunc rightMouseDragged(with: NSEvent)\nfunc cursorUpdate(with: NSEvent)"
    },
    {
        "title": "standardBounds",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingsizingoptions/standardbounds",
        "html": "See Also\nGeting sizing options\nstatic let intrinsicContentSize: NSHostingSizingOptions\nThe hosting view creates and updates constraints that represent its content\u2019s ideal size. These constraints in turn influence the hosting view\u2019s intrinsicContentSize.\nstatic let maxSize: NSHostingSizingOptions\nThe hosting view creates and updates constraints that represent its content\u2019s maximum size.\nstatic let minSize: NSHostingSizingOptions\nThe hosting view creates and updates constraints that represent its content\u2019s minimum size.\nstatic let preferredContentSize: NSHostingSizingOptions\nThe hosting controller creates and updates constraints that represent its content\u2019s ideal size. These constraints in turn influence the hosting controller\u2019s preferredContentSize."
    },
    {
        "title": "activityBackgroundTint(_:)",
        "url": "https://developer.apple.com/documentation/SwiftUI/View/activityBackgroundTint(_:)",
        "html": "Parameters\ncolor\n\nThe background tint color to apply. To use the system\u2019s default background material, pass nil.\n\nDiscussion\n\nWhen you set a custom background tint color, consider setting a custom text color for the auxiliary button people use to end a Live Activity on the Lock Screen. To set a custom text color, use the activitySystemActionForegroundColor(_:) view modifier.\n\nSee Also\nConfiguring a Live Activity\nfunc activitySystemActionForegroundColor(Color?) -> some View\nThe text color for the auxiliary action button that the system shows next to a Live Activity on the Lock Screen.\nvar isActivityFullscreen: Bool\nA Boolean value that indicates whether the Live Activity appears in a full-screen presentation."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-8ao27",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with UUIDs\ninit(LocalizedStringKey, value: KeyPath<RowValue, UUID>, content: (RowValue) -> Content)\nCreates a sortable column for UUID values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UUID>, content: (RowValue) -> Content)\nCreates a sortable column for UUID values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UUID>, content: (RowValue) -> Content)\nCreates a sortable column for UUID values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UUID?>, content: (RowValue) -> Content)\nCreates a sortable column for optional UUID values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UUID?>, content: (RowValue) -> Content)\nCreates a sortable column for optional UUID values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "causesPageTurn",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitytraits/causespageturn",
        "html": "See Also\nGetting traits\nstatic let allowsDirectInteraction: AccessibilityTraits\nThe accessibility element allows direct touch interaction for VoiceOver users.\nstatic let isButton: AccessibilityTraits\nThe accessibility element is a button.\nstatic let isHeader: AccessibilityTraits\nThe accessibility element is a header that divides content into sections, like the title of a navigation bar.\nstatic let isImage: AccessibilityTraits\nThe accessibility element is an image.\nstatic let isKeyboardKey: AccessibilityTraits\nThe accessibility element behaves as a keyboard key.\nstatic let isLink: AccessibilityTraits\nThe accessibility element is a link.\nstatic let isModal: AccessibilityTraits\nThe accessibility element is modal.\nstatic let isSearchField: AccessibilityTraits\nThe accessibility element is a search field.\nstatic let isSelected: AccessibilityTraits\nThe accessibility element is currently selected.\nstatic let isStaticText: AccessibilityTraits\nThe accessibility element is a static text that cannot be modified by the user.\nstatic let isSummaryElement: AccessibilityTraits\nThe accessibility element provides summary information when the application starts.\nstatic let isToggle: AccessibilityTraits\nThe accessibility element is a toggle.\nstatic let playsSound: AccessibilityTraits\nThe accessibility element plays its own sound when activated.\nstatic let startsMediaSession: AccessibilityTraits\nThe accessibility element starts a media session when it is activated.\nstatic let updatesFrequently: AccessibilityTraits\nThe accessibility element frequently updates its label or value."
    },
    {
        "title": "isButton",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitytraits/isbutton",
        "html": "See Also\nGetting traits\nstatic let allowsDirectInteraction: AccessibilityTraits\nThe accessibility element allows direct touch interaction for VoiceOver users.\nstatic let causesPageTurn: AccessibilityTraits\nThe accessibility element causes an automatic page turn when VoiceOver finishes reading the text within it.\nstatic let isHeader: AccessibilityTraits\nThe accessibility element is a header that divides content into sections, like the title of a navigation bar.\nstatic let isImage: AccessibilityTraits\nThe accessibility element is an image.\nstatic let isKeyboardKey: AccessibilityTraits\nThe accessibility element behaves as a keyboard key.\nstatic let isLink: AccessibilityTraits\nThe accessibility element is a link.\nstatic let isModal: AccessibilityTraits\nThe accessibility element is modal.\nstatic let isSearchField: AccessibilityTraits\nThe accessibility element is a search field.\nstatic let isSelected: AccessibilityTraits\nThe accessibility element is currently selected.\nstatic let isStaticText: AccessibilityTraits\nThe accessibility element is a static text that cannot be modified by the user.\nstatic let isSummaryElement: AccessibilityTraits\nThe accessibility element provides summary information when the application starts.\nstatic let isToggle: AccessibilityTraits\nThe accessibility element is a toggle.\nstatic let playsSound: AccessibilityTraits\nThe accessibility element plays its own sound when activated.\nstatic let startsMediaSession: AccessibilityTraits\nThe accessibility element starts a media session when it is activated.\nstatic let updatesFrequently: AccessibilityTraits\nThe accessibility element frequently updates its label or value."
    },
    {
        "title": "allowsDirectInteraction",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitytraits/allowsdirectinteraction",
        "html": "See Also\nGetting traits\nstatic let causesPageTurn: AccessibilityTraits\nThe accessibility element causes an automatic page turn when VoiceOver finishes reading the text within it.\nstatic let isButton: AccessibilityTraits\nThe accessibility element is a button.\nstatic let isHeader: AccessibilityTraits\nThe accessibility element is a header that divides content into sections, like the title of a navigation bar.\nstatic let isImage: AccessibilityTraits\nThe accessibility element is an image.\nstatic let isKeyboardKey: AccessibilityTraits\nThe accessibility element behaves as a keyboard key.\nstatic let isLink: AccessibilityTraits\nThe accessibility element is a link.\nstatic let isModal: AccessibilityTraits\nThe accessibility element is modal.\nstatic let isSearchField: AccessibilityTraits\nThe accessibility element is a search field.\nstatic let isSelected: AccessibilityTraits\nThe accessibility element is currently selected.\nstatic let isStaticText: AccessibilityTraits\nThe accessibility element is a static text that cannot be modified by the user.\nstatic let isSummaryElement: AccessibilityTraits\nThe accessibility element provides summary information when the application starts.\nstatic let isToggle: AccessibilityTraits\nThe accessibility element is a toggle.\nstatic let playsSound: AccessibilityTraits\nThe accessibility element plays its own sound when activated.\nstatic let startsMediaSession: AccessibilityTraits\nThe accessibility element starts a media session when it is activated.\nstatic let updatesFrequently: AccessibilityTraits\nThe accessibility element frequently updates its label or value."
    },
    {
        "title": "isKeyboardKey",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitytraits/iskeyboardkey",
        "html": "See Also\nGetting traits\nstatic let allowsDirectInteraction: AccessibilityTraits\nThe accessibility element allows direct touch interaction for VoiceOver users.\nstatic let causesPageTurn: AccessibilityTraits\nThe accessibility element causes an automatic page turn when VoiceOver finishes reading the text within it.\nstatic let isButton: AccessibilityTraits\nThe accessibility element is a button.\nstatic let isHeader: AccessibilityTraits\nThe accessibility element is a header that divides content into sections, like the title of a navigation bar.\nstatic let isImage: AccessibilityTraits\nThe accessibility element is an image.\nstatic let isLink: AccessibilityTraits\nThe accessibility element is a link.\nstatic let isModal: AccessibilityTraits\nThe accessibility element is modal.\nstatic let isSearchField: AccessibilityTraits\nThe accessibility element is a search field.\nstatic let isSelected: AccessibilityTraits\nThe accessibility element is currently selected.\nstatic let isStaticText: AccessibilityTraits\nThe accessibility element is a static text that cannot be modified by the user.\nstatic let isSummaryElement: AccessibilityTraits\nThe accessibility element provides summary information when the application starts.\nstatic let isToggle: AccessibilityTraits\nThe accessibility element is a toggle.\nstatic let playsSound: AccessibilityTraits\nThe accessibility element plays its own sound when activated.\nstatic let startsMediaSession: AccessibilityTraits\nThe accessibility element starts a media session when it is activated.\nstatic let updatesFrequently: AccessibilityTraits\nThe accessibility element frequently updates its label or value."
    },
    {
        "title": "maxSize",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingsizingoptions/maxsize",
        "html": "Discussion\n\nThe constraints reflect the size that fits a proposal of width: infinity, height: infinity.\n\nSee Also\nGeting sizing options\nstatic let intrinsicContentSize: NSHostingSizingOptions\nThe hosting view creates and updates constraints that represent its content\u2019s ideal size. These constraints in turn influence the hosting view\u2019s intrinsicContentSize.\nstatic let minSize: NSHostingSizingOptions\nThe hosting view creates and updates constraints that represent its content\u2019s minimum size.\nstatic let preferredContentSize: NSHostingSizingOptions\nThe hosting controller creates and updates constraints that represent its content\u2019s ideal size. These constraints in turn influence the hosting controller\u2019s preferredContentSize.\nstatic let standardBounds: NSHostingSizingOptions\nThe hosting view creates constraints for its minimum, ideal, and maximum sizes."
    },
    {
        "title": "minSize",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingsizingoptions/minsize",
        "html": "Discussion\n\nThe constraints reflect the size that fits a proposal of width: 0, height: 0.\n\nSee Also\nGeting sizing options\nstatic let intrinsicContentSize: NSHostingSizingOptions\nThe hosting view creates and updates constraints that represent its content\u2019s ideal size. These constraints in turn influence the hosting view\u2019s intrinsicContentSize.\nstatic let maxSize: NSHostingSizingOptions\nThe hosting view creates and updates constraints that represent its content\u2019s maximum size.\nstatic let preferredContentSize: NSHostingSizingOptions\nThe hosting controller creates and updates constraints that represent its content\u2019s ideal size. These constraints in turn influence the hosting controller\u2019s preferredContentSize.\nstatic let standardBounds: NSHostingSizingOptions\nThe hosting view creates constraints for its minimum, ideal, and maximum sizes."
    },
    {
        "title": "init(_:id:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitycustomcontentkey/init(_:id:)-347cp",
        "html": "Parameters\nlabelKey\n\nLocalized text describing to the user what is contained in this additional information entry. For example: \u201corientation\u201d.\n\nid\n\nString used to identify the additional information entry to SwiftUI. Adding an entry will replace any previous value with the same identifier.\n\nSee Also\nCreating a key\ninit(LocalizedStringKey)\nCreate an AccessibilityCustomContentKey with the specified label.\ninit(Text, id: String)\nCreate an AccessibilityCustomContentKey with the specified label and identifier."
    },
    {
        "title": "setFrameSize(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/setframesize(_:)",
        "html": "See Also\nModifying the frame rectangle\nvar intrinsicContentSize: NSSize\nvar firstBaselineOffsetFromTop: CGFloat\nvar lastBaselineOffsetFromBottom: CGFloat\nvar sizingOptions: NSHostingSizingOptions\nThe options for how the hosting view creates and updates constraints based on the size of its SwiftUI content.\nvar firstTextLineCenter: CGFloat?"
    },
    {
        "title": "sceneBridgingOptions",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/scenebridgingoptions",
        "html": "Discussion\n\nNSHostingView will populate certain aspects of its associated window, depending on which options are specified.\n\nFor example, a hosting view can manage its window\u2019s toolbar by including the .toolbars option:\n\nstruct RootView: View {\n    var body: some View {\n        ContentView()\n            .toolbar {\n                MyToolbarContent()\n            }\n    }\n}\n\n\nlet view = NSHostingView(rootView: RootView())\nview.sceneBridgingOptions = [.toolbars]\n\n\nWhen this hosting view is set as the contentView for a window, the default value for this property will be .all, which includes the options for .toolbars and .title. Otherwise, the default value is []."
    },
    {
        "title": "renewGState()",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/renewgstate()",
        "html": "See Also\nManaging the view hierarchy\nfunc viewWillMove(toWindow: NSWindow?)\nfunc viewDidMoveToWindow()\nfunc viewDidChangeBackingProperties()\nfunc viewDidChangeEffectiveAppearance()"
    },
    {
        "title": "Binding",
        "url": "https://developer.apple.com/documentation/SwiftUI/Binding",
        "html": "Overview\n\nUse a binding to create a two-way connection between a property that stores data, and a view that displays and changes the data. A binding connects a property to a source of truth stored elsewhere, instead of storing data directly. For example, a button that toggles between play and pause can create a binding to a property of its parent view using the Binding property wrapper.\n\nstruct PlayButton: View {\n    @Binding var isPlaying: Bool\n\n\n    var body: some View {\n        Button(isPlaying ? \"Pause\" : \"Play\") {\n            isPlaying.toggle()\n        }\n    }\n}\n\n\nThe parent view declares a property to hold the playing state, using the State property wrapper to indicate that this property is the value\u2019s source of truth.\n\nstruct PlayerView: View {\n    var episode: Episode\n    @State private var isPlaying: Bool = false\n\n\n    var body: some View {\n        VStack {\n            Text(episode.title)\n                .foregroundStyle(isPlaying ? .primary : .secondary)\n            PlayButton(isPlaying: $isPlaying) // Pass a binding.\n        }\n    }\n}\n\n\nWhen PlayerView initializes PlayButton, it passes a binding of its state property into the button\u2019s binding property. Applying the $ prefix to a property wrapped value returns its projectedValue, which for a state property wrapper returns a binding to the value.\n\nWhenever the user taps the PlayButton, the PlayerView updates its isPlaying state.\n\nNote\n\nTo create bindings to properties of a type that conforms to the Observable protocol, use the Bindable property wrapper. For more information, see Migrating from the Observable Object protocol to the Observable macro.\n\nTopics\nCreating a binding\ninit?(Binding<Value?>)\nCreates a binding by projecting the base value to an unwrapped value.\ninit<V>(Binding<V>)\nCreates a binding by projecting the base value to an optional value.\ninit<V>(Binding<V>)\nCreates a binding by projecting the base value to a hashable value.\ninit(projectedValue: Binding<Value>)\nCreates a binding from the value of another binding.\ninit(get: () -> Value, set: (Value, Transaction) -> Void)\nCreates a binding with a closure that reads from the binding value, and a closure that applies a transaction when writing to the binding value.\ninit(get: () -> Value, set: (Value) -> Void)\nCreates a binding with closures that read and write the binding value.\nstatic func constant(Value) -> Binding<Value>\nCreates a binding with an immutable value.\nGetting the value\nvar wrappedValue: Value\nThe underlying value referenced by the binding variable.\nvar projectedValue: Binding<Value>\nA projection of the binding value that returns a binding.\nsubscript<Subject>(dynamicMember _: WritableKeyPath<Value, Subject>) -> Binding<Subject>\nReturns a binding to the resulting value of a given key path.\nManaging changes\nvar id: Value.ID\nThe stable identity of the entity associated with this instance, corresponding to the id of the binding\u2019s wrapped value.\nAvailable when Value conforms to Identifiable.\nfunc animation(Animation?) -> Binding<Value>\nSpecifies an animation to perform when the binding value changes.\nfunc transaction(Transaction) -> Binding<Value>\nSpecifies a transaction for the binding.\nvar transaction: Transaction\nThe binding\u2019s transaction.\nDefault Implementations\nIdentifiable Implementations\nRelationships\nConforms To\nBidirectionalCollection\nCollection\nDynamicProperty\nIdentifiable\nRandomAccessCollection\nSequence\nSee Also\nCreating and sharing view state\nManaging user interface state\nEncapsulate view-specific data within your app\u2019s view hierarchy to make your views reusable.\nstruct State\nA property wrapper type that can read and write a value managed by SwiftUI.\nstruct Bindable\nA property wrapper type that supports creating bindings to the mutable properties of observable objects."
    },
    {
        "title": "accessibilityChildrenInNavigationOrder()",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/accessibilitychildreninnavigationorder()",
        "html": "See Also\nManaging accessibility behaviors\nvar accessibilityFocusedUIElement: Any?\nfunc accessibilityChildren() -> [Any]?\nfunc accessibilityHitTest(NSPoint) -> Any?\nfunc accessibilityRole() -> NSAccessibility.Role?\nfunc accessibilitySubrole() -> NSAccessibility.Subrole?\nfunc isAccessibilityElement() -> Bool"
    },
    {
        "title": "accessibilityRole()",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/accessibilityrole()",
        "html": "See Also\nManaging accessibility behaviors\nvar accessibilityFocusedUIElement: Any?\nfunc accessibilityChildren() -> [Any]?\nfunc accessibilityChildrenInNavigationOrder() -> [NSAccessibilityElementProtocol]?\nfunc accessibilityHitTest(NSPoint) -> Any?\nfunc accessibilitySubrole() -> NSAccessibility.Subrole?\nfunc isAccessibilityElement() -> Bool"
    },
    {
        "title": "viewDidChangeEffectiveAppearance()",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/viewdidchangeeffectiveappearance()",
        "html": "See Also\nManaging the view hierarchy\nfunc viewWillMove(toWindow: NSWindow?)\nfunc viewDidMoveToWindow()\nfunc viewDidChangeBackingProperties()\nfunc renewGState()"
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-9nksf",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with UUIDs\ninit(LocalizedStringKey, value: KeyPath<RowValue, UUID>, content: (RowValue) -> Content)\nCreates a sortable column for UUID values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UUID>, content: (RowValue) -> Content)\nCreates a sortable column for UUID values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UUID?>, content: (RowValue) -> Content)\nCreates a sortable column for optional UUID values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UUID?>, content: (RowValue) -> Content)\nCreates a sortable column for optional UUID values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UUID?>, content: (RowValue) -> Content)\nCreates a sortable column for optional UUID values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "viewDidMoveToWindow()",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/viewdidmovetowindow()",
        "html": "See Also\nManaging the view hierarchy\nfunc viewWillMove(toWindow: NSWindow?)\nfunc viewDidChangeBackingProperties()\nfunc viewDidChangeEffectiveAppearance()\nfunc renewGState()"
    },
    {
        "title": "intrinsicContentSize",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/intrinsiccontentsize",
        "html": "See Also\nModifying the frame rectangle\nfunc setFrameSize(NSSize)\nvar firstBaselineOffsetFromTop: CGFloat\nvar lastBaselineOffsetFromBottom: CGFloat\nvar sizingOptions: NSHostingSizingOptions\nThe options for how the hosting view creates and updates constraints based on the size of its SwiftUI content.\nvar firstTextLineCenter: CGFloat?"
    },
    {
        "title": "delete",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityactionkind/delete",
        "html": "See Also\nGetting the kind of action\nstatic let `default`: AccessibilityActionKind\nThe value that represents the default accessibility action.\nstatic let escape: AccessibilityActionKind\nThe value that represents an accessibility action that dismisses a modal view or cancels an operation.\nstatic let magicTap: AccessibilityActionKind\nstatic let showMenu: AccessibilityActionKind"
    },
    {
        "title": "isImage",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitytraits/isimage",
        "html": "See Also\nGetting traits\nstatic let allowsDirectInteraction: AccessibilityTraits\nThe accessibility element allows direct touch interaction for VoiceOver users.\nstatic let causesPageTurn: AccessibilityTraits\nThe accessibility element causes an automatic page turn when VoiceOver finishes reading the text within it.\nstatic let isButton: AccessibilityTraits\nThe accessibility element is a button.\nstatic let isHeader: AccessibilityTraits\nThe accessibility element is a header that divides content into sections, like the title of a navigation bar.\nstatic let isKeyboardKey: AccessibilityTraits\nThe accessibility element behaves as a keyboard key.\nstatic let isLink: AccessibilityTraits\nThe accessibility element is a link.\nstatic let isModal: AccessibilityTraits\nThe accessibility element is modal.\nstatic let isSearchField: AccessibilityTraits\nThe accessibility element is a search field.\nstatic let isSelected: AccessibilityTraits\nThe accessibility element is currently selected.\nstatic let isStaticText: AccessibilityTraits\nThe accessibility element is a static text that cannot be modified by the user.\nstatic let isSummaryElement: AccessibilityTraits\nThe accessibility element provides summary information when the application starts.\nstatic let isToggle: AccessibilityTraits\nThe accessibility element is a toggle.\nstatic let playsSound: AccessibilityTraits\nThe accessibility element plays its own sound when activated.\nstatic let startsMediaSession: AccessibilityTraits\nThe accessibility element starts a media session when it is activated.\nstatic let updatesFrequently: AccessibilityTraits\nThe accessibility element frequently updates its label or value."
    },
    {
        "title": "lastBaselineOffsetFromBottom",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/lastbaselineoffsetfrombottom",
        "html": "See Also\nModifying the frame rectangle\nvar intrinsicContentSize: NSSize\nfunc setFrameSize(NSSize)\nvar firstBaselineOffsetFromTop: CGFloat\nvar sizingOptions: NSHostingSizingOptions\nThe options for how the hosting view creates and updates constraints based on the size of its SwiftUI content.\nvar firstTextLineCenter: CGFloat?"
    },
    {
        "title": "viewWillMove(toWindow:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/viewwillmove(towindow:)",
        "html": "See Also\nManaging the view hierarchy\nfunc viewDidMoveToWindow()\nfunc viewDidChangeBackingProperties()\nfunc viewDidChangeEffectiveAppearance()\nfunc renewGState()"
    },
    {
        "title": "viewDidChangeBackingProperties()",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/viewdidchangebackingproperties()",
        "html": "See Also\nManaging the view hierarchy\nfunc viewWillMove(toWindow: NSWindow?)\nfunc viewDidMoveToWindow()\nfunc viewDidChangeEffectiveAppearance()\nfunc renewGState()"
    },
    {
        "title": "outline",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityquickactionstyle/outline",
        "html": "Discussion\n\nUse the contentShape(_:_:eoFill:) modifier to provide a shape for focusEffect if necessary.\n\nThe following example shows how to add an accessibilityQuickAction(style:content:) to play and pause music.\n\n@State private var isPlaying = false\n\n\nvar body: some View {\n    PlayButton(isPlaying: $isPlaying)\n        .contentShape(.focusEffect, Circle())\n        .accessibilityQuickAction(style: .outline) {\n            Button(isPlaying ? \"Pause\" : \"Play\") {\n                isPlaying.toggle()\n            }\n        }\n}\n\nSee Also\nGetting built-in menu styles\nstatic var prompt: AccessibilityQuickActionPromptStyle\nA presentation style that displays a prompt to the user when the accessibility quick action is active.\nAvailable when Self is AccessibilityQuickActionPromptStyle."
    },
    {
        "title": "init(_:id:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitycustomcontentkey/init(_:id:)-2yahi",
        "html": "Parameters\nlabel\n\nLocalized text describing to the user what is contained in this additional information entry. For example: \u201corientation\u201d.\n\nid\n\nString used to identify the additional information entry to SwiftUI. Adding an entry will replace any previous value with the same identifier.\n\nSee Also\nCreating a key\ninit(LocalizedStringKey)\nCreate an AccessibilityCustomContentKey with the specified label.\ninit(LocalizedStringKey, id: String)\nCreate an AccessibilityCustomContentKey with the specified label and identifier."
    },
    {
        "title": "accessibilityFocusedUIElement",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/accessibilityfocuseduielement",
        "html": "See Also\nManaging accessibility behaviors\nfunc accessibilityChildren() -> [Any]?\nfunc accessibilityChildrenInNavigationOrder() -> [NSAccessibilityElementProtocol]?\nfunc accessibilityHitTest(NSPoint) -> Any?\nfunc accessibilityRole() -> NSAccessibility.Role?\nfunc accessibilitySubrole() -> NSAccessibility.Subrole?\nfunc isAccessibilityElement() -> Bool"
    },
    {
        "title": "prompt",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityquickactionstyle/prompt",
        "html": "Discussion\n\nThe following example shows how to add an accessibilityQuickAction(style:content:) to pause and resume a workout.\n\n@State private var isPaused = false\n\n\nvar body: some View {\n    WorkoutView(isPaused: $isPaused)\n        .accessibilityQuickAction(style: .prompt) {\n            Button(isPaused ? \"Resume\" : \"Pause\") {\n                isPaused.toggle()\n            }\n        }\n}\n\nSee Also\nGetting built-in menu styles\nstatic var outline: AccessibilityQuickActionOutlineStyle\nA presentation style that animates an outline around the view when the accessibility quick action is active.\nAvailable when Self is AccessibilityQuickActionOutlineStyle."
    },
    {
        "title": "AccessibilityQuickActionOutlineStyle",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityquickactionoutlinestyle",
        "html": "Overview\n\nDon\u2019t use this type directly. Instead, use outline.\n\nRelationships\nConforms To\nAccessibilityQuickActionStyle\nSee Also\nSupporting types\nstruct AccessibilityQuickActionPromptStyle\nA presentation style that displays a prompt to the user when the accessibility quick action is active."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-7mkkr",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 32-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "default",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityactionkind/default",
        "html": "See Also\nGetting the kind of action\nstatic let delete: AccessibilityActionKind\nstatic let escape: AccessibilityActionKind\nThe value that represents an accessibility action that dismisses a modal view or cancels an operation.\nstatic let magicTap: AccessibilityActionKind\nstatic let showMenu: AccessibilityActionKind"
    },
    {
        "title": "touchesMoved(with:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/touchesmoved(with:)",
        "html": "See Also\nResponding to touch events\nfunc touchesBegan(with: NSEvent)\nfunc touchesCancelled(with: NSEvent)\nfunc touchesEnded(with: NSEvent)"
    },
    {
        "title": "touchesCancelled(with:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/touchescancelled(with:)",
        "html": "See Also\nResponding to touch events\nfunc touchesBegan(with: NSEvent)\nfunc touchesEnded(with: NSEvent)\nfunc touchesMoved(with: NSEvent)"
    },
    {
        "title": "init(_:value:comparator:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:comparator:content:)-7pwgh",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncomparator\n\nThe SortComparator used to order values of the sort value type.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view for you, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with comparable values\ninit<V>(LocalizedStringKey, value: KeyPath<RowValue, V>, content: (RowValue) -> Content)\nCreates a sortable column for comparable values that generates its label from a localized string key.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<S, V>(S, value: KeyPath<RowValue, V>, content: (RowValue) -> Content)\nCreates a sortable column for comparable values that generates its label from a string.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<V>(Text, value: KeyPath<RowValue, V>, content: (RowValue) -> Content)\nCreates a sortable column for comparable values with a text label.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<S, V, C>(S, value: KeyPath<RowValue, V>, comparator: C, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a string, and uses an explicit comparator for sorting values.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<V, C>(Text, value: KeyPath<RowValue, V>, comparator: C, content: (RowValue) -> Content)\nCreates a sortable column that has a text label, and uses an explicit comparator for sorting values.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "isLink",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitytraits/islink",
        "html": "See Also\nGetting traits\nstatic let allowsDirectInteraction: AccessibilityTraits\nThe accessibility element allows direct touch interaction for VoiceOver users.\nstatic let causesPageTurn: AccessibilityTraits\nThe accessibility element causes an automatic page turn when VoiceOver finishes reading the text within it.\nstatic let isButton: AccessibilityTraits\nThe accessibility element is a button.\nstatic let isHeader: AccessibilityTraits\nThe accessibility element is a header that divides content into sections, like the title of a navigation bar.\nstatic let isImage: AccessibilityTraits\nThe accessibility element is an image.\nstatic let isKeyboardKey: AccessibilityTraits\nThe accessibility element behaves as a keyboard key.\nstatic let isModal: AccessibilityTraits\nThe accessibility element is modal.\nstatic let isSearchField: AccessibilityTraits\nThe accessibility element is a search field.\nstatic let isSelected: AccessibilityTraits\nThe accessibility element is currently selected.\nstatic let isStaticText: AccessibilityTraits\nThe accessibility element is a static text that cannot be modified by the user.\nstatic let isSummaryElement: AccessibilityTraits\nThe accessibility element provides summary information when the application starts.\nstatic let isToggle: AccessibilityTraits\nThe accessibility element is a toggle.\nstatic let playsSound: AccessibilityTraits\nThe accessibility element plays its own sound when activated.\nstatic let startsMediaSession: AccessibilityTraits\nThe accessibility element starts a media session when it is activated.\nstatic let updatesFrequently: AccessibilityTraits\nThe accessibility element frequently updates its label or value."
    },
    {
        "title": "width(min:ideal:max:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/width(min:ideal:max:)",
        "html": "Parameters\nmin\n\nThe minimum width of a resizable column. If non-nil, the value must be greater than or equal to 0.\n\nideal\n\nThe ideal width of the column, used to determine the initial width of the table column. The column always starts at least as large as the set ideal size, but may be larger if table was sized larger than the ideal of all of its columns.\n\nmax\n\nThe maximum width of a resizable column. If non-nil, the value must be greater than 0. Pass infinity to indicate unconstrained maximum width.\n\nDiscussion\n\nAlways specify at least one width constraint when calling this method. Pass nil or leave out a constraint to indicate no change to the sizing of a column.\n\nTo create a fixed size column use width(_:) instead.\n\nSee Also\nSetting the column width\nfunc width(CGFloat?) -> TableColumn<RowValue, Sort, Content, Label>\nCreates a fixed width table column that isn\u2019t user resizable.\nAvailable when RowValue conforms to Identifiable, Sort conforms to SortComparator, Content conforms to View, and Label conforms to View.\nfunc width() -> TableColumn<RowValue, Sort, Content, Label>\nSets the column\u2019s width.\nAvailable when RowValue conforms to Identifiable, Sort conforms to SortComparator, Content conforms to View, and Label conforms to View.\nDeprecated"
    },
    {
        "title": "isSearchField",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitytraits/issearchfield",
        "html": "See Also\nGetting traits\nstatic let allowsDirectInteraction: AccessibilityTraits\nThe accessibility element allows direct touch interaction for VoiceOver users.\nstatic let causesPageTurn: AccessibilityTraits\nThe accessibility element causes an automatic page turn when VoiceOver finishes reading the text within it.\nstatic let isButton: AccessibilityTraits\nThe accessibility element is a button.\nstatic let isHeader: AccessibilityTraits\nThe accessibility element is a header that divides content into sections, like the title of a navigation bar.\nstatic let isImage: AccessibilityTraits\nThe accessibility element is an image.\nstatic let isKeyboardKey: AccessibilityTraits\nThe accessibility element behaves as a keyboard key.\nstatic let isLink: AccessibilityTraits\nThe accessibility element is a link.\nstatic let isModal: AccessibilityTraits\nThe accessibility element is modal.\nstatic let isSelected: AccessibilityTraits\nThe accessibility element is currently selected.\nstatic let isStaticText: AccessibilityTraits\nThe accessibility element is a static text that cannot be modified by the user.\nstatic let isSummaryElement: AccessibilityTraits\nThe accessibility element provides summary information when the application starts.\nstatic let isToggle: AccessibilityTraits\nThe accessibility element is a toggle.\nstatic let playsSound: AccessibilityTraits\nThe accessibility element plays its own sound when activated.\nstatic let startsMediaSession: AccessibilityTraits\nThe accessibility element starts a media session when it is activated.\nstatic let updatesFrequently: AccessibilityTraits\nThe accessibility element frequently updates its label or value."
    },
    {
        "title": "isSelected",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitytraits/isselected",
        "html": "See Also\nGetting traits\nstatic let allowsDirectInteraction: AccessibilityTraits\nThe accessibility element allows direct touch interaction for VoiceOver users.\nstatic let causesPageTurn: AccessibilityTraits\nThe accessibility element causes an automatic page turn when VoiceOver finishes reading the text within it.\nstatic let isButton: AccessibilityTraits\nThe accessibility element is a button.\nstatic let isHeader: AccessibilityTraits\nThe accessibility element is a header that divides content into sections, like the title of a navigation bar.\nstatic let isImage: AccessibilityTraits\nThe accessibility element is an image.\nstatic let isKeyboardKey: AccessibilityTraits\nThe accessibility element behaves as a keyboard key.\nstatic let isLink: AccessibilityTraits\nThe accessibility element is a link.\nstatic let isModal: AccessibilityTraits\nThe accessibility element is modal.\nstatic let isSearchField: AccessibilityTraits\nThe accessibility element is a search field.\nstatic let isStaticText: AccessibilityTraits\nThe accessibility element is a static text that cannot be modified by the user.\nstatic let isSummaryElement: AccessibilityTraits\nThe accessibility element provides summary information when the application starts.\nstatic let isToggle: AccessibilityTraits\nThe accessibility element is a toggle.\nstatic let playsSound: AccessibilityTraits\nThe accessibility element plays its own sound when activated.\nstatic let startsMediaSession: AccessibilityTraits\nThe accessibility element starts a media session when it is activated.\nstatic let updatesFrequently: AccessibilityTraits\nThe accessibility element frequently updates its label or value."
    },
    {
        "title": "isModal",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitytraits/ismodal",
        "html": "Discussion\n\nUse this trait to restrict which accessibility elements an assistive technology can navigate. When a modal accessibility element is visible, sibling accessibility elements that are not modal are ignored.\n\nSee Also\nGetting traits\nstatic let allowsDirectInteraction: AccessibilityTraits\nThe accessibility element allows direct touch interaction for VoiceOver users.\nstatic let causesPageTurn: AccessibilityTraits\nThe accessibility element causes an automatic page turn when VoiceOver finishes reading the text within it.\nstatic let isButton: AccessibilityTraits\nThe accessibility element is a button.\nstatic let isHeader: AccessibilityTraits\nThe accessibility element is a header that divides content into sections, like the title of a navigation bar.\nstatic let isImage: AccessibilityTraits\nThe accessibility element is an image.\nstatic let isKeyboardKey: AccessibilityTraits\nThe accessibility element behaves as a keyboard key.\nstatic let isLink: AccessibilityTraits\nThe accessibility element is a link.\nstatic let isSearchField: AccessibilityTraits\nThe accessibility element is a search field.\nstatic let isSelected: AccessibilityTraits\nThe accessibility element is currently selected.\nstatic let isStaticText: AccessibilityTraits\nThe accessibility element is a static text that cannot be modified by the user.\nstatic let isSummaryElement: AccessibilityTraits\nThe accessibility element provides summary information when the application starts.\nstatic let isToggle: AccessibilityTraits\nThe accessibility element is a toggle.\nstatic let playsSound: AccessibilityTraits\nThe accessibility element plays its own sound when activated.\nstatic let startsMediaSession: AccessibilityTraits\nThe accessibility element starts a media session when it is activated.\nstatic let updatesFrequently: AccessibilityTraits\nThe accessibility element frequently updates its label or value."
    },
    {
        "title": "isToggle",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitytraits/istoggle",
        "html": "See Also\nGetting traits\nstatic let allowsDirectInteraction: AccessibilityTraits\nThe accessibility element allows direct touch interaction for VoiceOver users.\nstatic let causesPageTurn: AccessibilityTraits\nThe accessibility element causes an automatic page turn when VoiceOver finishes reading the text within it.\nstatic let isButton: AccessibilityTraits\nThe accessibility element is a button.\nstatic let isHeader: AccessibilityTraits\nThe accessibility element is a header that divides content into sections, like the title of a navigation bar.\nstatic let isImage: AccessibilityTraits\nThe accessibility element is an image.\nstatic let isKeyboardKey: AccessibilityTraits\nThe accessibility element behaves as a keyboard key.\nstatic let isLink: AccessibilityTraits\nThe accessibility element is a link.\nstatic let isModal: AccessibilityTraits\nThe accessibility element is modal.\nstatic let isSearchField: AccessibilityTraits\nThe accessibility element is a search field.\nstatic let isSelected: AccessibilityTraits\nThe accessibility element is currently selected.\nstatic let isStaticText: AccessibilityTraits\nThe accessibility element is a static text that cannot be modified by the user.\nstatic let isSummaryElement: AccessibilityTraits\nThe accessibility element provides summary information when the application starts.\nstatic let playsSound: AccessibilityTraits\nThe accessibility element plays its own sound when activated.\nstatic let startsMediaSession: AccessibilityTraits\nThe accessibility element starts a media session when it is activated.\nstatic let updatesFrequently: AccessibilityTraits\nThe accessibility element frequently updates its label or value."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-99afu",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with 32-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "userInterfaceLayoutDirection",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/userinterfacelayoutdirection",
        "html": "See Also\nConfiguring the view layout behavior\nclass var requiresConstraintBasedLayout: Bool\nvar isFlipped: Bool\nvar layerContentsRedrawPolicy: NSView.LayerContentsRedrawPolicy\nfunc updateConstraints()\nfunc layout()\nvar safeAreaRegions: SafeAreaRegions\nThe safe area regions that this view controller adds to its view."
    },
    {
        "title": "urlSession(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/backgroundtask/urlsession(_:)",
        "html": "Parameters\nidentifier\n\nThe identifier to match.\n\nReturn Value\n\nA background task that you can handle with your app or extension.\n\nSee Also\nResponding to URL sessions\nstatic var urlSession: BackgroundTask<String, Void>\nA task that responds to background URL sessions.\nstatic func urlSession(matching: (String) -> Bool) -> BackgroundTask<String, Void>\nA task that responds to background URL sessions matching the given predicate."
    },
    {
        "title": "platform",
        "url": "https://developer.apple.com/documentation/swiftui/previewprovider/platform-75xu4",
        "html": "Required Default implementation provided.\n\nDiscussion\n\nXcode infers the platform for a preview based on the currently selected target. If you have a multiplatform target and want to suggest a particular target for a preview, implement the platform computed property to provide a hint, and specify one of the PreviewPlatform values:\n\nstruct CircleImage_Previews: PreviewProvider {\n    static var previews: some View {\n        CircleImage()\n    }\n\n\n    static var platform: PreviewPlatform? {\n        PreviewPlatform.tvOS\n    }\n}\n\n\nXcode ignores this value unless you have a multiplatform target.\n\nDefault Implementations\nPreviewProvider Implementations\nstatic var platform: PreviewPlatform?\nThe platform to run the provider on."
    },
    {
        "title": "startsMediaSession",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitytraits/startsmediasession",
        "html": "Discussion\n\nUse this trait to silence the audio output of an assistive technology, such as VoiceOver, during a media session that should not be interrupted. For example, you might use this trait to silence VoiceOver speech while the user is recording audio.\n\nSee Also\nGetting traits\nstatic let allowsDirectInteraction: AccessibilityTraits\nThe accessibility element allows direct touch interaction for VoiceOver users.\nstatic let causesPageTurn: AccessibilityTraits\nThe accessibility element causes an automatic page turn when VoiceOver finishes reading the text within it.\nstatic let isButton: AccessibilityTraits\nThe accessibility element is a button.\nstatic let isHeader: AccessibilityTraits\nThe accessibility element is a header that divides content into sections, like the title of a navigation bar.\nstatic let isImage: AccessibilityTraits\nThe accessibility element is an image.\nstatic let isKeyboardKey: AccessibilityTraits\nThe accessibility element behaves as a keyboard key.\nstatic let isLink: AccessibilityTraits\nThe accessibility element is a link.\nstatic let isModal: AccessibilityTraits\nThe accessibility element is modal.\nstatic let isSearchField: AccessibilityTraits\nThe accessibility element is a search field.\nstatic let isSelected: AccessibilityTraits\nThe accessibility element is currently selected.\nstatic let isStaticText: AccessibilityTraits\nThe accessibility element is a static text that cannot be modified by the user.\nstatic let isSummaryElement: AccessibilityTraits\nThe accessibility element provides summary information when the application starts.\nstatic let isToggle: AccessibilityTraits\nThe accessibility element is a toggle.\nstatic let playsSound: AccessibilityTraits\nThe accessibility element plays its own sound when activated.\nstatic let updatesFrequently: AccessibilityTraits\nThe accessibility element frequently updates its label or value."
    },
    {
        "title": "isSummaryElement",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitytraits/issummaryelement",
        "html": "Discussion\n\nUse this trait to characterize an accessibility element that provides a summary of current conditions, settings, or state, like the temperature in the Weather app.\n\nSee Also\nGetting traits\nstatic let allowsDirectInteraction: AccessibilityTraits\nThe accessibility element allows direct touch interaction for VoiceOver users.\nstatic let causesPageTurn: AccessibilityTraits\nThe accessibility element causes an automatic page turn when VoiceOver finishes reading the text within it.\nstatic let isButton: AccessibilityTraits\nThe accessibility element is a button.\nstatic let isHeader: AccessibilityTraits\nThe accessibility element is a header that divides content into sections, like the title of a navigation bar.\nstatic let isImage: AccessibilityTraits\nThe accessibility element is an image.\nstatic let isKeyboardKey: AccessibilityTraits\nThe accessibility element behaves as a keyboard key.\nstatic let isLink: AccessibilityTraits\nThe accessibility element is a link.\nstatic let isModal: AccessibilityTraits\nThe accessibility element is modal.\nstatic let isSearchField: AccessibilityTraits\nThe accessibility element is a search field.\nstatic let isSelected: AccessibilityTraits\nThe accessibility element is currently selected.\nstatic let isStaticText: AccessibilityTraits\nThe accessibility element is a static text that cannot be modified by the user.\nstatic let isToggle: AccessibilityTraits\nThe accessibility element is a toggle.\nstatic let playsSound: AccessibilityTraits\nThe accessibility element plays its own sound when activated.\nstatic let startsMediaSession: AccessibilityTraits\nThe accessibility element starts a media session when it is activated.\nstatic let updatesFrequently: AccessibilityTraits\nThe accessibility element frequently updates its label or value."
    },
    {
        "title": "transaction",
        "url": "https://developer.apple.com/documentation/swiftui/nsviewrepresentablecontext/transaction",
        "html": "See Also\nCoordinating view-related interactions\nlet coordinator: View.Coordinator\nAn instance you use to communicate your AppKit view\u2019s behavior and state out to SwiftUI objects."
    },
    {
        "title": "coordinator",
        "url": "https://developer.apple.com/documentation/swiftui/nsviewrepresentablecontext/coordinator",
        "html": "Discussion\n\nThe coordinator is a custom instance you define. When updating your view, communicate changes to SwiftUI by updating the properties of your coordinator, or by calling relevant methods to make those changes. The implementation of those properties and methods are responsible for updating the appropriate SwiftUI values. For example, you might define a property in your coordinator that binds to a SwiftUI value, as shown in the following code example. Changing the property updates the value of the corresponding SwiftUI variable.\n\nclass Coordinator: NSObject {\n   @Binding var rating: Int\n   init(rating: Binding<Int>) {\n      $rating = rating\n   }\n}\n\n\nTo create and configure your custom coordinator, implement the makeCoordinator() method of your NSViewControllerRepresentable object.\n\nSee Also\nCoordinating view-related interactions\nvar transaction: Transaction\nThe current transaction."
    },
    {
        "title": "PreviewPlatform.watchOS",
        "url": "https://developer.apple.com/documentation/swiftui/previewplatform/watchos",
        "html": "See Also\nGetting an operating system\ncase iOS\nSpecifies iOS as the preview platform.\ncase macOS\nSpecifies macOS as the preview platform.\ncase tvOS\nSpecifies tvOS as the preview platform."
    },
    {
        "title": "defaultValue",
        "url": "https://developer.apple.com/documentation/swiftui/previewcontextkey/defaultvalue",
        "html": "Required\n\nSee Also\nSetting a default\nassociatedtype Value\nThe type of the value returned by the key.\n\nRequired"
    },
    {
        "title": "environment",
        "url": "https://developer.apple.com/documentation/swiftui/nsviewcontrollerrepresentablecontext/environment",
        "html": "Discussion\n\nUse the environment values to configure the state of your view controller when creating or updating it."
    },
    {
        "title": "mouseUp(with:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/mouseup(with:)",
        "html": "See Also\nResponding to mouse events\nfunc mouseDown(with: NSEvent)\nfunc otherMouseDown(with: NSEvent)\nfunc otherMouseUp(with: NSEvent)\nfunc rightMouseDown(with: NSEvent)\nfunc rightMouseUp(with: NSEvent)\nfunc mouseEntered(with: NSEvent)\nfunc mouseExited(with: NSEvent)\nfunc mouseDragged(with: NSEvent)\nfunc mouseMoved(with: NSEvent)\nfunc otherMouseDragged(with: NSEvent)\nfunc rightMouseDragged(with: NSEvent)\nfunc cursorUpdate(with: NSEvent)"
    },
    {
        "title": "otherMouseUp(with:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/othermouseup(with:)",
        "html": "See Also\nResponding to mouse events\nfunc mouseDown(with: NSEvent)\nfunc mouseUp(with: NSEvent)\nfunc otherMouseDown(with: NSEvent)\nfunc rightMouseDown(with: NSEvent)\nfunc rightMouseUp(with: NSEvent)\nfunc mouseEntered(with: NSEvent)\nfunc mouseExited(with: NSEvent)\nfunc mouseDragged(with: NSEvent)\nfunc mouseMoved(with: NSEvent)\nfunc otherMouseDragged(with: NSEvent)\nfunc rightMouseDragged(with: NSEvent)\nfunc cursorUpdate(with: NSEvent)"
    },
    {
        "title": "mouseDown(with:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/mousedown(with:)",
        "html": "See Also\nResponding to mouse events\nfunc mouseUp(with: NSEvent)\nfunc otherMouseDown(with: NSEvent)\nfunc otherMouseUp(with: NSEvent)\nfunc rightMouseDown(with: NSEvent)\nfunc rightMouseUp(with: NSEvent)\nfunc mouseEntered(with: NSEvent)\nfunc mouseExited(with: NSEvent)\nfunc mouseDragged(with: NSEvent)\nfunc mouseMoved(with: NSEvent)\nfunc otherMouseDragged(with: NSEvent)\nfunc rightMouseDragged(with: NSEvent)\nfunc cursorUpdate(with: NSEvent)"
    },
    {
        "title": "mouseExited(with:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/mouseexited(with:)",
        "html": "See Also\nResponding to mouse events\nfunc mouseDown(with: NSEvent)\nfunc mouseUp(with: NSEvent)\nfunc otherMouseDown(with: NSEvent)\nfunc otherMouseUp(with: NSEvent)\nfunc rightMouseDown(with: NSEvent)\nfunc rightMouseUp(with: NSEvent)\nfunc mouseEntered(with: NSEvent)\nfunc mouseDragged(with: NSEvent)\nfunc mouseMoved(with: NSEvent)\nfunc otherMouseDragged(with: NSEvent)\nfunc rightMouseDragged(with: NSEvent)\nfunc cursorUpdate(with: NSEvent)"
    },
    {
        "title": "mouseEntered(with:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/mouseentered(with:)",
        "html": "See Also\nResponding to mouse events\nfunc mouseDown(with: NSEvent)\nfunc mouseUp(with: NSEvent)\nfunc otherMouseDown(with: NSEvent)\nfunc otherMouseUp(with: NSEvent)\nfunc rightMouseDown(with: NSEvent)\nfunc rightMouseUp(with: NSEvent)\nfunc mouseExited(with: NSEvent)\nfunc mouseDragged(with: NSEvent)\nfunc mouseMoved(with: NSEvent)\nfunc otherMouseDragged(with: NSEvent)\nfunc rightMouseDragged(with: NSEvent)\nfunc cursorUpdate(with: NSEvent)"
    },
    {
        "title": "portrait",
        "url": "https://developer.apple.com/documentation/swiftui/interfaceorientation/portrait",
        "html": "See Also\nGetting an orientation\nstatic let portraitUpsideDown: InterfaceOrientation\nThe device is in portrait mode, but is upside down.\nstatic let landscapeLeft: InterfaceOrientation\nThe device is in landscape mode, with the top of the device on the left.\nstatic let landscapeRight: InterfaceOrientation\nThe device is in landscape mode, with the top of the device on the right."
    },
    {
        "title": "subscript(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/previewcontext/subscript(_:)",
        "html": "Required"
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-6ifd1",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, which will be used to update and reflect the sorting state in a table.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 64-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int64>, content: (RowValue) -> Content)\nCreates a sortable column for 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int64>, content: (RowValue) -> Content)\nCreates a sortable column for 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt64>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt64>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt64>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "setNeedsBodyUpdate()",
        "url": "https://developer.apple.com/documentation/swiftui/wkhostingcontroller/setneedsbodyupdate()",
        "html": "Discussion\n\nCall this method to mark the views of the hosting controller as needing an update. During the next update cycle, the hosting controller fetches an updated set of views from its body property.\n\nSee Also\nUpdating the root view\nfunc updateBodyIfNeeded()\nUpdates the interface controller\u2019s set of views immediately, if updates are pending."
    },
    {
        "title": "watchConnectivity",
        "url": "https://developer.apple.com/documentation/swiftui/backgroundtask/watchconnectivity",
        "html": "See Also\nReceiving connectivity updates\nstatic var bluetoothAlert: BackgroundTask<Void, Void>\nA background task used to receive critical alerts from paired bluetooth accessories."
    },
    {
        "title": "Value",
        "url": "https://developer.apple.com/documentation/swiftui/previewcontextkey/value",
        "html": "Required\n\nSee Also\nSetting a default\nstatic var defaultValue: Self.Value\nThe default value of the key.\n\nRequired"
    },
    {
        "title": "sceneBridgingOptions",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingcontroller/scenebridgingoptions",
        "html": "Discussion\n\nNSHostingController will populate certain aspects of its associated window, depending on which options are specified.\n\nFor example, a hosting controller can manage its window\u2019s toolbar by including the .toolbars option:\n\nstruct RootView: View {\n    var body: some View {\n        ContentView()\n            .toolbar {\n                MyToolbarContent()\n            }\n    }\n}\n\n\nlet controller = NSHostingController(rootView: RootView())\ncontroller.sceneBridgingOptions = [.toolbars]\n\n\nWhen this hosting controller is set as the contentViewController for a window, the default value for this property will be .all, which includes the options for .toolbars and .title. Otherwise, the default value is [].\n\nSee Also\nConfiguring the controller\nfunc sizeThatFits(in: CGSize) -> CGSize\nCalculates and returns the most appropriate size for the current view.\nvar preferredContentSize: NSSize\nvar sizingOptions: NSHostingSizingOptions\nThe options for how the hosting controller\u2019s view creates and updates constraints based on the size of its SwiftUI content.\nvar safeAreaRegions: SafeAreaRegions\nThe safe area regions that this view controller adds to its view."
    },
    {
        "title": "sizeThatFits(in:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingcontroller/sizethatfits(in:)",
        "html": "Parameters\nsize\n\nThe proposed new size for the view.\n\nReturn Value\n\nThe size that offers the best fit for the root view and its contents.\n\nSee Also\nConfiguring the controller\nvar preferredContentSize: NSSize\nvar sizingOptions: NSHostingSizingOptions\nThe options for how the hosting controller\u2019s view creates and updates constraints based on the size of its SwiftUI content.\nvar safeAreaRegions: SafeAreaRegions\nThe safe area regions that this view controller adds to its view.\nvar sceneBridgingOptions: NSHostingSceneBridgingOptions\nThe options for which aspects of the window will be managed by this controller\u2019s hosting view."
    },
    {
        "title": "safeAreaRegions",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingcontroller/safearearegions",
        "html": "Discussion\n\nThe default value is SafeAreaRegions.all.\n\nSee Also\nConfiguring the controller\nfunc sizeThatFits(in: CGSize) -> CGSize\nCalculates and returns the most appropriate size for the current view.\nvar preferredContentSize: NSSize\nvar sizingOptions: NSHostingSizingOptions\nThe options for how the hosting controller\u2019s view creates and updates constraints based on the size of its SwiftUI content.\nvar sceneBridgingOptions: NSHostingSceneBridgingOptions\nThe options for which aspects of the window will be managed by this controller\u2019s hosting view."
    },
    {
        "title": "init(coder:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingcontroller/init(coder:)",
        "html": "Parameters\ncoder\n\nThe decoder to use during initialization.\n\nDiscussion\n\nThe default implementation of this method throws an exception. To create your view controller from an archive, override this method and initialize the superclass using the init(coder:rootView:) method instead.\n\nSee Also\nCreating a hosting controller object\ninit(rootView: Content)\nCreates a hosting controller object that wraps the specified SwiftUI view.\ninit?(coder: NSCoder, rootView: Content)\nCreates a hosting controller object from an archive and the specified SwiftUI view."
    },
    {
        "title": "init(rootView:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingcontroller/init(rootview:)",
        "html": "Parameters\nrootView\n\nThe root view of the SwiftUI view hierarchy that you want to manage using the hosting view controller.\n\nSee Also\nCreating a hosting controller object\ninit?(coder: NSCoder, rootView: Content)\nCreates a hosting controller object from an archive and the specified SwiftUI view.\ninit?(coder: NSCoder)\nCreates a hosting controller object from the contents of the specified archive."
    },
    {
        "title": "sizingOptions",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingcontroller/sizingoptions",
        "html": "Discussion\n\nNSHostingController can create minimum, maximum, and ideal (content size) constraints that are derived from its SwiftUI view content. These constraints are only created when Auto Layout constraints are otherwise being used in the containing window.\n\nIf the NSHostingController is set as the contentViewController of an NSWindow, it will also update the window\u2019s contentMinSize and contentMaxSize based on the minimum and maximum size of its SwiftUI content.\n\nsizingOptions defaults to .standardBounds (which includes minSize, intrinsicContentSize, and maxSize), but can be set to an explicit value to control this behavior. For instance, setting a value of .minSize will only create the constraints necessary to maintain the minimum size of the SwiftUI content, or setting a value of [] will create no constraints at all.\n\nIf a use case can make assumptions about the size of the NSHostingController relative to its displayed content, such as the always being displayed in a fixed frame, setting this to a value with fewer options can improve performance as it reduces the amount of layout measurements that need to be performed. If an NSHostingController has a frame that is smaller or larger than that required to display its SwiftUI content, the content will be centered within that frame.\n\nSee Also\nConfiguring the controller\nfunc sizeThatFits(in: CGSize) -> CGSize\nCalculates and returns the most appropriate size for the current view.\nvar preferredContentSize: NSSize\nvar safeAreaRegions: SafeAreaRegions\nThe safe area regions that this view controller adds to its view.\nvar sceneBridgingOptions: NSHostingSceneBridgingOptions\nThe options for which aspects of the window will be managed by this controller\u2019s hosting view."
    },
    {
        "title": "didChangeValue(forKey:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingview/didchangevalue(forkey:)",
        "html": "See Also\nManaging keyboard interaction\nfunc keyDown(with: NSEvent)\nCalled when the user presses a key on the keyboard while this view is in the responder chain.\nfunc keyUp(with: NSEvent)\nCalled when the user releases a key on the keyboard while this view is in the responder chain.\nfunc performKeyEquivalent(with: NSEvent) -> Bool\nfunc insertText(Any)\nfunc makeTouchBar() -> NSTouchBar?"
    },
    {
        "title": "init(rawValue:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingsizingoptions/init(rawvalue:)",
        "html": "See Also\nCreating a sizing option\nlet rawValue: Int\nThe raw value."
    },
    {
        "title": "rootView",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingcontroller/rootview",
        "html": "See Also\nGetting the root view\nvar identifier: NSUserInterfaceItemIdentifier?"
    },
    {
        "title": "environment",
        "url": "https://developer.apple.com/documentation/swiftui/uiviewrepresentablecontext/environment",
        "html": "Discussion\n\nUse the environment values to configure the state of your view when creating or updating it."
    },
    {
        "title": "identifier",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingcontroller/identifier",
        "html": "See Also\nGetting the root view\nvar rootView: Content\nThe root view of the SwiftUI view hierarchy managed by this view controller."
    },
    {
        "title": "point",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityzoomgestureaction/point",
        "html": "See Also\nGetting location information\nlet location: UnitPoint\nThe zoom gesture\u2019s activation point, normalized to the accessibility element\u2019s frame."
    },
    {
        "title": "init(coder:rootView:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingcontroller/init(coder:rootview:)",
        "html": "Parameters\ncoder\n\nThe decoder to use during initialization.\n\nrootView\n\nThe root view of the SwiftUI view hierarchy that you want to manage using this view controller.\n\nSee Also\nCreating a hosting controller object\ninit(rootView: Content)\nCreates a hosting controller object that wraps the specified SwiftUI view.\ninit?(coder: NSCoder)\nCreates a hosting controller object from the contents of the specified archive."
    },
    {
        "title": "transaction",
        "url": "https://developer.apple.com/documentation/swiftui/uiviewrepresentablecontext/transaction",
        "html": "See Also\nCoordinating view-related interactions\nlet coordinator: Representable.Coordinator\nThe view\u2019s associated coordinator."
    },
    {
        "title": "AccessibilityFocusState.Binding",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityfocusstate/binding",
        "html": "Topics\nGetting the state\nvar projectedValue: AccessibilityFocusState<Value>.Binding\nThe currently focused element.\nvar wrappedValue: Value\nThe underlying value referenced by the bound property.\nSee Also\nGetting the state\nvar projectedValue: AccessibilityFocusState<Value>.Binding\nA projection of the state value that can be used to establish bindings between view content and accessibility focus placement.\nvar wrappedValue: Value\nThe current state value, taking into account whatever bindings might be in effect due to the current location of focus."
    },
    {
        "title": "preferredContentSize",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingcontroller/preferredcontentsize",
        "html": "See Also\nConfiguring the controller\nfunc sizeThatFits(in: CGSize) -> CGSize\nCalculates and returns the most appropriate size for the current view.\nvar sizingOptions: NSHostingSizingOptions\nThe options for how the hosting controller\u2019s view creates and updates constraints based on the size of its SwiftUI content.\nvar safeAreaRegions: SafeAreaRegions\nThe safe area regions that this view controller adds to its view.\nvar sceneBridgingOptions: NSHostingSceneBridgingOptions\nThe options for which aspects of the window will be managed by this controller\u2019s hosting view."
    },
    {
        "title": "wrappedValue",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityfocusstate/wrappedvalue",
        "html": "Discussion\n\nWhen focus is not in any view that is bound to this state, the wrapped value will be nil (for optional-typed state) or false (for Bool- typed state).\n\nSee Also\nGetting the state\nvar projectedValue: AccessibilityFocusState<Value>.Binding\nA projection of the state value that can be used to establish bindings between view content and accessibility focus placement.\nstruct Binding"
    },
    {
        "title": "rawValue",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingsizingoptions/rawvalue",
        "html": "See Also\nCreating a sizing option\ninit(rawValue: Int)\nCreates a new options from a raw value."
    },
    {
        "title": "projectedValue",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityfocusstate/projectedvalue",
        "html": "Discussion\n\nUse projectedValue in conjunction with accessibilityFocused(_:equals:) to establish bindings between view content and accessibility focus placement.\n\nSee Also\nGetting the state\nvar wrappedValue: Value\nThe current state value, taking into account whatever bindings might be in effect due to the current location of focus.\nstruct Binding"
    },
    {
        "title": "coordinator",
        "url": "https://developer.apple.com/documentation/swiftui/wkinterfaceobjectrepresentablecontext/coordinator",
        "html": "See Also\nCoordinating interactions\nvar transaction: Transaction\nThe current transaction."
    },
    {
        "title": "environment",
        "url": "https://developer.apple.com/documentation/swiftui/wkinterfaceobjectrepresentablecontext/environment",
        "html": "Discussion\n\nUse the environment values to configure the state of your interface object when creating or updating it."
    },
    {
        "title": "transaction",
        "url": "https://developer.apple.com/documentation/swiftui/wkinterfaceobjectrepresentablecontext/transaction",
        "html": "See Also\nCoordinating interactions\nlet coordinator: Representable.Coordinator\nThe view\u2019s associated coordinator."
    },
    {
        "title": "AccessibilityQuickActionPromptStyle",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityquickactionpromptstyle",
        "html": "Overview\n\nDon\u2019t use this type directly. Instead, use prompt.\n\nRelationships\nConforms To\nAccessibilityQuickActionStyle\nSee Also\nSupporting types\nstruct AccessibilityQuickActionOutlineStyle\nA presentation style that displays a prompt to the user when the accessibility quick action is active."
    },
    {
        "title": "requiresActivation",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitydirecttouchoptions/requiresactivation",
        "html": "See Also\nGetting the options\nstatic let silentOnTouch: AccessibilityDirectTouchOptions\nAllows a direct touch area to immediately receive touch events without an assitive technology, such as VoiceOver, speaking. Appropriate for apps that provide direct audio feedback on touch that would conflict with speech feedback."
    },
    {
        "title": "urlSession",
        "url": "https://developer.apple.com/documentation/swiftui/backgroundtask/urlsession",
        "html": "See Also\nResponding to URL sessions\nstatic func urlSession(String) -> BackgroundTask<Void, Void>\nA task that responds to background URL sessions matching the given identifier.\nstatic func urlSession(matching: (String) -> Bool) -> BackgroundTask<String, Void>\nA task that responds to background URL sessions matching the given predicate."
    },
    {
        "title": "relevantShortcut",
        "url": "https://developer.apple.com/documentation/swiftui/backgroundtask/relevantshortcut",
        "html": "See Also\nUpdating intents and shortcuts\nstatic var intentDidRun: BackgroundTask<Void, Void>\nA background task used to update your app after a SiriKit intent runs."
    },
    {
        "title": "urlSession(matching:)",
        "url": "https://developer.apple.com/documentation/swiftui/backgroundtask/urlsession(matching:)",
        "html": "Parameters\nmatching\n\nThe predicate to match.\n\nReturn Value\n\nA background task that you can handle with your app or extension.\n\nSee Also\nResponding to URL sessions\nstatic var urlSession: BackgroundTask<String, Void>\nA task that responds to background URL sessions.\nstatic func urlSession(String) -> BackgroundTask<Void, Void>\nA task that responds to background URL sessions matching the given identifier."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-7bkav",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, which will be used to update and reflect the sorting state in a table.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 16-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-1pgn8",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 16-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-6vp9l",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with doubles\ninit(LocalizedStringKey, value: KeyPath<RowValue, Double>, content: (RowValue) -> Content)\nCreates a sortable column for double-precision floating-point values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Double>, content: (RowValue) -> Content)\nCreates a sortable column for double-precision floating-point values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Double>, content: (RowValue) -> Content)\nCreates a sortable column for double-precision floating-point values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Double?>, content: (RowValue) -> Content)\nCreates a sortable column for optional double-precision floating-point values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Double?>, content: (RowValue) -> Content)\nCreates a sortable column for optional double-precision floating-point values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-79d0q",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, which will be used to update and reflect the sorting state in a table.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 16-bit integers\ninit<S>(S, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:sortUsing:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:sortusing:content:)-5aaed",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\ncomparator\n\nThe prototype sort comparator to use when representing this column. When a person taps or clicks the column header, the containing table\u2019s sortOrder incorporates this value, potentially with a flipped order.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view for you, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with a comparator\ninit(LocalizedStringKey, sortUsing: Sort, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a localized string key.\nAvailable when RowValue conforms to Identifiable, RowValue is Sort.Compared, Sort conforms to SortComparator, Content conforms to View, and Label is Text.\ninit(Text, sortUsing: Sort, content: (RowValue) -> Content)\nCreates a sortable column with text label.\nAvailable when RowValue conforms to Identifiable, RowValue is Sort.Compared, Sort conforms to SortComparator, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:sortUsing:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:sortusing:content:)-8ibtq",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\ncomparator\n\nThe prototype sort comparator to use when representing this column. When a person taps or clicks the column header, the containing table\u2019s sortOrder incorporates this value, potentially with a flipped order.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view for you, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with a comparator\ninit(LocalizedStringKey, sortUsing: Sort, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a localized string key.\nAvailable when RowValue conforms to Identifiable, RowValue is Sort.Compared, Sort conforms to SortComparator, Content conforms to View, and Label is Text.\ninit<S>(S, sortUsing: Sort, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a string.\nAvailable when RowValue conforms to Identifiable, RowValue is Sort.Compared, Sort conforms to SortComparator, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:sortUsing:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:sortusing:content:)-3wgpo",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\ncomparator\n\nThe prototype sort comparator to use when representing this column. When a person taps or clicks the column header, the containing table\u2019s sortOrder incorporates this value, potentially with a flipped order.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). For more information about localizing strings, seeText.\n\nSee Also\nCreating a column with a comparator\ninit<S>(S, sortUsing: Sort, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a string.\nAvailable when RowValue conforms to Identifiable, RowValue is Sort.Compared, Sort conforms to SortComparator, Content conforms to View, and Label is Text.\ninit(Text, sortUsing: Sort, content: (RowValue) -> Content)\nCreates a sortable column with text label.\nAvailable when RowValue conforms to Identifiable, RowValue is Sort.Compared, Sort conforms to SortComparator, Content conforms to View, and Label is Text."
    },
    {
        "title": "width(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/width(_:)",
        "html": "Parameters\nwidth\n\nA fixed width for the resulting column. If width is nil, the resulting column has no change in sizing.\n\nSee Also\nSetting the column width\nfunc width(min: CGFloat?, ideal: CGFloat?, max: CGFloat?) -> TableColumn<RowValue, Sort, Content, Label>\nCreates a resizable table column with the provided constraints.\nAvailable when RowValue conforms to Identifiable, Sort conforms to SortComparator, Content conforms to View, and Label conforms to View.\nfunc width() -> TableColumn<RowValue, Sort, Content, Label>\nSets the column\u2019s width.\nAvailable when RowValue conforms to Identifiable, Sort conforms to SortComparator, Content conforms to View, and Label conforms to View.\nDeprecated"
    },
    {
        "title": "width()",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/width()",
        "html": "Deprecated\n\nUse width(_:) or width(min:ideal:max:) instead.\n\nSee Also\nSetting the column width\nfunc width(CGFloat?) -> TableColumn<RowValue, Sort, Content, Label>\nCreates a fixed width table column that isn\u2019t user resizable.\nAvailable when RowValue conforms to Identifiable, Sort conforms to SortComparator, Content conforms to View, and Label conforms to View.\nfunc width(min: CGFloat?, ideal: CGFloat?, max: CGFloat?) -> TableColumn<RowValue, Sort, Content, Label>\nCreates a resizable table column with the provided constraints.\nAvailable when RowValue conforms to Identifiable, Sort conforms to SortComparator, Content conforms to View, and Label conforms to View."
    },
    {
        "title": "intentDidRun",
        "url": "https://developer.apple.com/documentation/swiftui/backgroundtask/intentdidrun",
        "html": "See Also\nUpdating intents and shortcuts\nstatic var relevantShortcut: BackgroundTask<Void, Void>\nA background task used to periodically donate relevant Siri shortcuts."
    },
    {
        "title": "SnapshotData.SnapshotReason",
        "url": "https://developer.apple.com/documentation/swiftui/snapshotdata/snapshotreason",
        "html": "Topics\nGetting the snapshot reasons\ncase appBackgrounded\nThe app transitioned from the foreground to the background.\ncase appScheduled\nThe app scheduled this snapshot.\ncase complicationUpdate\nThe app updated the complication timeline.\ncase prelaunch\nThe system needs a snapshot for the dock, but the app has not been launched yet.\ncase returnToDefaultState\nIt has been more than an hour since the user\u2019s last interaction with the app; the app\u2019s snapshot should return to its default state.\nRelationships\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nGetting the data\nlet identifier: String?\nThe identifier associated with this snapshot request.\nlet reason: SnapshotData.SnapshotReason\nThe reason for a background snapshot task."
    },
    {
        "title": "handled",
        "url": "https://developer.apple.com/documentation/swiftui/openurlaction/result/handled",
        "html": "Discussion\n\nThe action invokes its completion handler with true when your handler returns this value.\n\nSee Also\nGetting the results\nstatic let discarded: OpenURLAction.Result\nThe handler discarded the URL.\nstatic let systemAction: OpenURLAction.Result\nThe handler asks the system to open the original URL.\nstatic func systemAction(URL) -> OpenURLAction.Result\nThe handler asks the system to open the modified URL."
    },
    {
        "title": "OpenURLAction.Result",
        "url": "https://developer.apple.com/documentation/swiftui/openurlaction/result",
        "html": "Overview\n\nIf you declare a custom OpenURLAction in the Environment, return one of the result values from its handler.\n\nUse handled to indicate that the handler opened the URL.\n\nUse discarded to indicate that the handler discarded the URL.\n\nUse systemAction without an argument to ask SwiftUI to open the URL with the system handler.\n\nUse systemAction(_:) with a URL argument to ask SwiftUI to open the specified URL with the system handler.\n\nYou can use the last option to transform URLs, while still relying on the system to open the URL. For example, you could append a path component to every URL:\n\n.environment(\\.openURL, OpenURLAction { url in\n    .systemAction(url.appendingPathComponent(\"edit\"))\n})\n\nTopics\nGetting the results\nstatic let discarded: OpenURLAction.Result\nThe handler discarded the URL.\nstatic let handled: OpenURLAction.Result\nThe handler opened the URL.\nstatic let systemAction: OpenURLAction.Result\nThe handler asks the system to open the original URL.\nstatic func systemAction(URL) -> OpenURLAction.Result\nThe handler asks the system to open the modified URL.\nSee Also\nCreating the action\ninit(handler: (URL) -> OpenURLAction.Result)\nCreates an action that opens a URL."
    },
    {
        "title": "identifier",
        "url": "https://developer.apple.com/documentation/swiftui/snapshotdata/identifier",
        "html": "See Also\nGetting the data\nlet reason: SnapshotData.SnapshotReason\nThe reason for a background snapshot task.\nenum SnapshotReason\nThe reason for a background snapshot task."
    },
    {
        "title": "reason",
        "url": "https://developer.apple.com/documentation/swiftui/snapshotdata/reason",
        "html": "See Also\nGetting the data\nlet identifier: String?\nThe identifier associated with this snapshot request.\nenum SnapshotReason\nThe reason for a background snapshot task."
    },
    {
        "title": "init(restoredDefaultState:estimatedSnapshotExpiration:identifier:)",
        "url": "https://developer.apple.com/documentation/swiftui/snapshotresponse/init(restoreddefaultstate:estimatedsnapshotexpiration:identifier:)",
        "html": "Parameters\nrestoredDefaultState\n\nPass true if your app has navigated back to its default launch scene.\n\nestimatedSnapshotExpiration\n\nThe preferred date and time for the next background snapshot refresh task. Use distantFuture if you don\u2019t want to schedule the next refresh.\n\nidentifier\n\nA custom string to associate with the next background snapshot refresh task. This value is assigned to the next snapshot task\u2019s TaskData userInfo property. Pass nil if you don\u2019t want to associate any identifier with the next task."
    },
    {
        "title": "init(handler:)",
        "url": "https://developer.apple.com/documentation/swiftui/openurlaction/init(handler:)",
        "html": "Parameters\nhandler\n\nThe closure to run for the given URL. The closure takes a URL as input, and returns a OpenURLAction.Result that indicates the outcome of the action.\n\nDiscussion\n\nUse this initializer to create a custom action for opening URLs. Provide a handler that takes a URL and returns an OpenURLAction.Result. Place your handler in the environment using the environment(_:_:) view modifier:\n\nText(\"Visit [Example Company](https://www.example.com) for details.\")\n    .environment(\\.openURL, OpenURLAction { url in\n        handleURL(url) // Define this method to take appropriate action.\n        return .handled\n    })\n\n\nAny views that read the action from the environment, including the built-in Link view and Text views with markdown links, or links in attributed strings, use your action.\n\nSwiftUI translates the value that your custom action\u2019s handler returns into an appropriate Boolean result for the action call. For example, a view that uses the action declared above receives true when calling the action, because the handler always returns handled.\n\nSee Also\nCreating the action\nstruct Result\nThe result of a custom open URL action."
    },
    {
        "title": "WKInterfaceObjectType",
        "url": "https://developer.apple.com/documentation/swiftui/wkinterfaceobjectrepresentable/wkinterfaceobjecttype",
        "html": "Required\n\nSee Also\nProviding a custom coordinator object\nfunc makeCoordinator() -> Self.Coordinator\nCreates the custom instance that you use to communicate changes from your interface object to other parts of your SwiftUI interface.\n\nRequired Default implementation provided.\n\nassociatedtype Coordinator = Void\nA type to coordinate with the WatchKit interface object.\n\nRequired"
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-424yo",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, which will be used to update and reflect the sorting state in a table.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with dates\ninit(LocalizedStringKey, value: KeyPath<RowValue, Date>, content: (RowValue) -> Content)\nCreates a sortable column for date values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Date>, content: (RowValue) -> Content)\nCreates a sortable column for date values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Date?>, content: (RowValue) -> Content)\nCreates a sortable column for optional date values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Date?>, content: (RowValue) -> Content)\nCreates a sortable column for optional date values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Date?>, content: (RowValue) -> Content)\nCreates a sortable column for optional date values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "PreviewPlatform.tvOS",
        "url": "https://developer.apple.com/documentation/swiftui/previewplatform/tvos",
        "html": "See Also\nGetting an operating system\ncase iOS\nSpecifies iOS as the preview platform.\ncase macOS\nSpecifies macOS as the preview platform.\ncase watchOS\nSpecifies watchOS as the preview platform."
    },
    {
        "title": "init(sceneAnchor:contentAlignment:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/uihostingornament/init(sceneanchor:contentalignment:content:)",
        "html": "Parameters\nsceneAnchor\n\nThe anchor point for aligning the ornament\u2019s content (based on the contentAlignment) with the scene.\n\ncontentAlignment\n\nThe alignment in the ornament used to position it.\n\ncontent\n\nThe content of the ornament."
    },
    {
        "title": "dismantleNSViewController(_:coordinator:)",
        "url": "https://developer.apple.com/documentation/swiftui/nsviewcontrollerrepresentable/dismantlensviewcontroller(_:coordinator:)-2ajcp",
        "html": "Required Default implementation provided.\n\nParameters\nnsViewController\n\nYour custom view controller object.\n\ncoordinator\n\nThe custom coordinator instance you use to communicate changes back to SwiftUI. If you do not use a custom coordinator, the system provides a default instance.\n\nDiscussion\n\nUse this method to perform additional clean-up work related to your custom view controller. For example, you might use this method to remove observers or update other parts of your SwiftUI interface.\n\nDefault Implementations\nNSViewControllerRepresentable Implementations\nstatic func dismantleNSViewController(Self.NSViewControllerType, coordinator: Self.Coordinator)\nCleans up the presented NSViewController (and coordinator) in anticipation of their removal."
    },
    {
        "title": "PreviewPlatform.macOS",
        "url": "https://developer.apple.com/documentation/swiftui/previewplatform/macos",
        "html": "See Also\nGetting an operating system\ncase iOS\nSpecifies iOS as the preview platform.\ncase tvOS\nSpecifies tvOS as the preview platform.\ncase watchOS\nSpecifies watchOS as the preview platform."
    },
    {
        "title": "makeWKInterfaceObject(context:)",
        "url": "https://developer.apple.com/documentation/swiftui/wkinterfaceobjectrepresentable/makewkinterfaceobject(context:)",
        "html": "Required\n\nParameters\ncontext\n\nA context structure containing information about the current state of the system.\n\nReturn Value\n\nYour interface object configured with the provided information.\n\nDiscussion\n\nYou must implement this method and use it to create your interface object. Configure the object using your app\u2019s current data and contents of the context parameter. The system calls this method only once, when it creates your interface object for the first time. For all subsequent updates, the system calls the updateWKInterfaceObject(_:context:) method.\n\nSee Also\nCreating and updating the interface object\nfunc updateWKInterfaceObject(Self.WKInterfaceObjectType, context: Self.Context)\nUpdates the presented WatchKit interface object (and its coordinator) to the latest configuration.\n\nRequired\n\ntypealias Context"
    },
    {
        "title": "body",
        "url": "https://developer.apple.com/documentation/swiftui/wkhostingcontroller/body",
        "html": "Discussion\n\nOverride this property and return the root view of your SwiftUI view hierarchy from your implementation. If you don\u2019t override this property, accessing the default implementation triggers an exception."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-9r1lr",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, which will be used to update and reflect the sorting state in a table.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 32-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "makeCoordinator()",
        "url": "https://developer.apple.com/documentation/swiftui/wkinterfaceobjectrepresentable/makecoordinator()-sazz",
        "html": "Required Default implementation provided.\n\nDiscussion\n\nImplement this method if changes to your interface object might affect other parts of your app. In your implementation, create a custom Swift instance that can communicate with other parts of your interface. For example, you might provide an instance that binds its variables to SwiftUI properties, causing the two to remain synchronized. If your interface object doesn\u2019t interact with other parts of your app, providing a coordinator is unnecessary.\n\nSwiftUI calls this method before calling the makeWKInterfaceObject(context:) method. The system provides your coordinator either directly or as part of a context structure when calling the other methods of your representable instance.\n\nDefault Implementations\nWKInterfaceObjectRepresentable Implementations\nfunc makeCoordinator() -> Self.Coordinator\nCreates the custom instance that you use to communicate changes from your interface object to other parts of your SwiftUI interface.\nAvailable when Coordinator is ().\nSee Also\nProviding a custom coordinator object\nassociatedtype Coordinator = Void\nA type to coordinate with the WatchKit interface object.\n\nRequired\n\nassociatedtype WKInterfaceObjectType : WKInterfaceObject\nThe type of WatchKit interface object to be presented.\n\nRequired"
    },
    {
        "title": "dismantleWKInterfaceObject(_:coordinator:)",
        "url": "https://developer.apple.com/documentation/swiftui/wkinterfaceobjectrepresentable/dismantlewkinterfaceobject(_:coordinator:)-73ix",
        "html": "Required Default implementation provided.\n\nParameters\nwkInterfaceObject\n\nYour custom interface object.\n\ncoordinator\n\nThe custom coordinator instance you use to communicate changes back to SwiftUI. If you do not use a custom coordinator, the system provides a default instance.\n\nDiscussion\n\nUse this method to perform additional clean-up work related to your custom interface object. For example, you might use this method to remove observers or update other parts of your SwiftUI interface.\n\nDefault Implementations\nWKInterfaceObjectRepresentable Implementations\nstatic func dismantleWKInterfaceObject(Self.WKInterfaceObjectType, coordinator: Self.Coordinator)\nCleans up the presented interface object (and coordinator) in anticipation of their removal."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-36kw9",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with Booleans\ninit(LocalizedStringKey, value: KeyPath<RowValue, Bool>, content: (RowValue) -> Content)\nCreates a sortable column for Boolean values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Bool>, content: (RowValue) -> Content)\nCreates a sortable column for Boolean values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Bool>, content: (RowValue) -> Content)\nCreates a sortable column for Boolean values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Bool?>, content: (RowValue) -> Content)\nCreates a sortable column for optional Boolean values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Bool?>, content: (RowValue) -> Content)\nCreates a sortable column for optional Boolean values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "Coordinator",
        "url": "https://developer.apple.com/documentation/swiftui/wkinterfaceobjectrepresentable/coordinator",
        "html": "Required\n\nSee Also\nProviding a custom coordinator object\nfunc makeCoordinator() -> Self.Coordinator\nCreates the custom instance that you use to communicate changes from your interface object to other parts of your SwiftUI interface.\n\nRequired Default implementation provided.\n\nassociatedtype WKInterfaceObjectType : WKInterfaceObject\nThe type of WatchKit interface object to be presented.\n\nRequired"
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-79qaa",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with dates\ninit(LocalizedStringKey, value: KeyPath<RowValue, Date>, content: (RowValue) -> Content)\nCreates a sortable column for date values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Date>, content: (RowValue) -> Content)\nCreates a sortable column for date values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Date>, content: (RowValue) -> Content)\nCreates a sortable column for date values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Date?>, content: (RowValue) -> Content)\nCreates a sortable column for optional date values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Date?>, content: (RowValue) -> Content)\nCreates a sortable column for optional date values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "WKInterfaceObjectRepresentable.Context",
        "url": "https://developer.apple.com/documentation/swiftui/wkinterfaceobjectrepresentable/context",
        "html": "See Also\nCreating and updating the interface object\nfunc makeWKInterfaceObject(context: Self.Context) -> Self.WKInterfaceObjectType\nCreates a WatchKit interface object and configures its initial state.\n\nRequired\n\nfunc updateWKInterfaceObject(Self.WKInterfaceObjectType, context: Self.Context)\nUpdates the presented WatchKit interface object (and its coordinator) to the latest configuration.\n\nRequired"
    },
    {
        "title": "coordinator",
        "url": "https://developer.apple.com/documentation/swiftui/uiviewrepresentablecontext/coordinator",
        "html": "See Also\nCoordinating view-related interactions\nvar transaction: Transaction\nThe current transaction."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-9v6m5",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, which will be used to update and reflect the sorting state in a table.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 32-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "updateBodyIfNeeded()",
        "url": "https://developer.apple.com/documentation/swiftui/wkhostingcontroller/updatebodyifneeded()",
        "html": "Discussion\n\nCalling this method forces the hosting controller to update its current set of views, but only if there are pending changes. If there are no pending changes, this method does nothing.\n\nTo mark the interface controller as needing an update, call setNeedsBodyUpdate().\n\nSee Also\nUpdating the root view\nfunc setNeedsBodyUpdate()\nInvalidates the current SwiftUI views and triggers an update during the next cycle."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-6c4bf",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 32-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-1duy2",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with 32-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:comparator:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:comparator:)-yhkp",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, to display verbatim as text in each row of a table, and the key path used to create a sort comparator when sorting the column.\n\ncomparator\n\nThe SortComparator used to order the string values.\n\nDiscussion\n\nThis initializer creates a Text view for you, and treats the localized key similar to init(_:tableName:bundle:comment:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with strings\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and generates its label from a string.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property and has a text label.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates an unsortable column that displays a string property, and which generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and which generates its label from a string.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates an unsortable column that displays a string property and has a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-97qsu",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with 32-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:comparator:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:comparator:content:)-9iyk",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncomparator\n\nThe SortComparator used to order values of the sort value type.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view for you, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with comparable values\ninit<V>(LocalizedStringKey, value: KeyPath<RowValue, V>, content: (RowValue) -> Content)\nCreates a sortable column for comparable values that generates its label from a localized string key.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<S, V>(S, value: KeyPath<RowValue, V>, content: (RowValue) -> Content)\nCreates a sortable column for comparable values that generates its label from a string.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<V>(Text, value: KeyPath<RowValue, V>, content: (RowValue) -> Content)\nCreates a sortable column for comparable values with a text label.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<V, C>(LocalizedStringKey, value: KeyPath<RowValue, V>, comparator: C, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a localized string key, and uses an explicit comparator for sorting values.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<S, V, C>(S, value: KeyPath<RowValue, V>, comparator: C, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a string, and uses an explicit comparator for sorting values.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-4o21e",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 32-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(of:selection:sortOrder:columns:rows:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(of:selection:sortorder:columns:rows:)-9q8m6",
        "html": "Parameters\nvalueType\n\nThe type of value used to derive the table\u2019s contents.\n\nselection\n\nA binding to a set that identifies selected rows ids.\n\nsortOrder\n\nA binding to the ordered sorting of columns.\n\ncolumns\n\nThe columns to display in the table.\n\nrows\n\nThe rows to display in the table.\n\nSee Also\nCreating a sortable table from columns and rows\ninit<Sort>(of: Value.Type, sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(of: Value.Type, selection: Binding<Value.ID?>, sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting zero or one row.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(selection: Binding<Value.ID?>, sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting zero or one row.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(selection: Binding<Set<Value.ID>>, sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting multiple rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-5iydc",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view for you, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with comparable values\ninit<V>(LocalizedStringKey, value: KeyPath<RowValue, V>, content: (RowValue) -> Content)\nCreates a sortable column for comparable values that generates its label from a localized string key.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<S, V>(S, value: KeyPath<RowValue, V>, content: (RowValue) -> Content)\nCreates a sortable column for comparable values that generates its label from a string.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<V, C>(LocalizedStringKey, value: KeyPath<RowValue, V>, comparator: C, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a localized string key, and uses an explicit comparator for sorting values.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<S, V, C>(S, value: KeyPath<RowValue, V>, comparator: C, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a string, and uses an explicit comparator for sorting values.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<V, C>(Text, value: KeyPath<RowValue, V>, comparator: C, content: (RowValue) -> Content)\nCreates a sortable column that has a text label, and uses an explicit comparator for sorting values.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(selection:sortOrder:columns:rows:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(selection:sortorder:columns:rows:)-2wf4k",
        "html": "Parameters\nselection\n\nA binding to the optional selected row ID.\n\nsortOrder\n\nA binding to the ordered sorting of columns.\n\ncolumns\n\nThe columns to display in the table.\n\nrows\n\nThe rows to display in the table.\n\nSee Also\nCreating a sortable table from columns and rows\ninit<Sort>(of: Value.Type, sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(of: Value.Type, selection: Binding<Value.ID?>, sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting zero or one row.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(of: Value.Type, selection: Binding<Set<Value.ID>>, sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting multiple rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(selection: Binding<Set<Value.ID>>, sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting multiple rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-6gol6",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with UUIDs\ninit(LocalizedStringKey, value: KeyPath<RowValue, UUID>, content: (RowValue) -> Content)\nCreates a sortable column for UUID values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UUID>, content: (RowValue) -> Content)\nCreates a sortable column for UUID values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UUID>, content: (RowValue) -> Content)\nCreates a sortable column for UUID values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UUID?>, content: (RowValue) -> Content)\nCreates a sortable column for optional UUID values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UUID?>, content: (RowValue) -> Content)\nCreates a sortable column for optional UUID values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityfocusstate/init()-mabe",
        "html": "See Also\nCreating a focus state\ninit<T>()\nCreates a new accessibility focus state of the type you provide.\ninit<T>(for: AccessibilityTechnologies)\nCreates a new accessibility focus state of the type and using the accessibility technologies you specify.\ninit(for: AccessibilityTechnologies)\nCreates a new accessibility focus state for a Boolean value, using the accessibility technologies you specify."
    },
    {
        "title": "AccessibilityZoomGestureAction.Direction",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityzoomgestureaction/direction-swift.enum",
        "html": "Topics\nGetting the direction\ncase zoomIn\nThe gesture direction that represents zooming in.\ncase zoomOut\nThe gesture direction that represents zooming out.\nRelationships\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nGetting the action\u2019s direction\nlet direction: AccessibilityZoomGestureAction.Direction\nThe zoom gesture\u2019s direction."
    },
    {
        "title": "appRefresh(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/backgroundtask/apprefresh(_:)",
        "html": "Parameters\nmatching\n\nThe identifier to match.\n\nReturn Value\n\nA background task that you can handle with your app or extension.\n\nSee Also\nRefreshing the app\nstatic var appRefresh: BackgroundTask<String?, Void>\nA task that updates your app\u2019s state in the background."
    },
    {
        "title": "appRefresh",
        "url": "https://developer.apple.com/documentation/swiftui/backgroundtask/apprefresh",
        "html": "See Also\nRefreshing the app\nstatic func appRefresh(String) -> BackgroundTask<Void, Void>\nA task that updates your app\u2019s state in the background for a matching identifier."
    },
    {
        "title": "init(for:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityfocusstate/init(for:)-6u87o",
        "html": "Parameters\ntechnologies\n\nOne or more of the available AccessibilityTechnologies.\n\nSee Also\nCreating a focus state\ninit<T>()\nCreates a new accessibility focus state of the type you provide.\ninit()\nCreates a new accessibility focus state for a Boolean value.\ninit(for: AccessibilityTechnologies)\nCreates a new accessibility focus state for a Boolean value, using the accessibility technologies you specify."
    },
    {
        "title": "location",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityzoomgestureaction/location",
        "html": "See Also\nGetting location information\nlet point: CGPoint\nThe zoom gesture\u2019s activation point within the window\u2019s coordinate space."
    },
    {
        "title": "init(for:)",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityfocusstate/init(for:)-9b1t5",
        "html": "Parameters\ntechnologies\n\nOne of the available AccessibilityTechnologies.\n\nSee Also\nCreating a focus state\ninit<T>()\nCreates a new accessibility focus state of the type you provide.\ninit()\nCreates a new accessibility focus state for a Boolean value.\ninit<T>(for: AccessibilityTechnologies)\nCreates a new accessibility focus state of the type and using the accessibility technologies you specify."
    },
    {
        "title": "silentOnTouch",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitydirecttouchoptions/silentontouch",
        "html": "See Also\nGetting the options\nstatic let requiresActivation: AccessibilityDirectTouchOptions\nPrevents touch passthrough with the direct touch area until an assistive technology, such as VoiceOver, has activated the direct touch area through a user action, for example a double tap."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityfocusstate/init()-3j2c1",
        "html": "See Also\nCreating a focus state\ninit()\nCreates a new accessibility focus state for a Boolean value.\ninit<T>(for: AccessibilityTechnologies)\nCreates a new accessibility focus state of the type and using the accessibility technologies you specify.\ninit(for: AccessibilityTechnologies)\nCreates a new accessibility focus state for a Boolean value, using the accessibility technologies you specify."
    },
    {
        "title": "bluetoothAlert",
        "url": "https://developer.apple.com/documentation/swiftui/backgroundtask/bluetoothalert",
        "html": "See Also\nReceiving connectivity updates\nstatic var watchConnectivity: BackgroundTask<Void, Void>\nA background task used to receive background updates from the Watch Connectivity framework."
    },
    {
        "title": "direction",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilityzoomgestureaction/direction-swift.property",
        "html": "See Also\nGetting the action\u2019s direction\nenum Direction\nA direction that matches the movement of a zoom gesture performed by an assistive technology, such as a swipe up and down in Voiceover\u2019s zoom rotor."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-9y5ip",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, which will be used to update and reflect the sorting state in a table.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 32-bit integers\ninit<S>(S, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-7bdy4",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, which will be used to update and reflect the sorting state in a table.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 64-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int64>, content: (RowValue) -> Content)\nCreates a sortable column for 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int64>, content: (RowValue) -> Content)\nCreates a sortable column for 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int64>, content: (RowValue) -> Content)\nCreates a sortable column for 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt64>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt64>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "LegibilityWeight.regular",
        "url": "https://developer.apple.com/documentation/swiftui/legibilityweight/regular",
        "html": "See Also\nGetting weights\ncase bold\nUse heavier font weight (force Accessibility Bold)."
    },
    {
        "title": "LegibilityWeight.bold",
        "url": "https://developer.apple.com/documentation/swiftui/legibilityweight/bold",
        "html": "See Also\nGetting weights\ncase regular\nUse regular font weight (no Accessibility Bold)."
    },
    {
        "title": "callAsFunction(_:completion:)",
        "url": "https://developer.apple.com/documentation/swiftui/openurlaction/callasfunction(_:completion:)",
        "html": "Parameters\nurl\n\nThe URL to open.\n\ncompletion\n\nA closure the method calls after determining if it can open the URL, but possibly before fully opening the URL. The closure takes a Boolean value that indicates whether the method can open the URL.\n\nDiscussion\n\nDon\u2019t call this method directly. SwiftUI calls it when you call the OpenURLAction structure that you get from the Environment, using a URL and a completion handler as arguments:\n\nstruct OpenURLExample: View {\n    @Environment(\\.openURL) private var openURL\n\n\n    var body: some View {\n        Button {\n            if let url = URL(string: \"https://www.example.com\") {\n                // Implicitly calls openURL.callAsFunction(url) { ... }\n                openURL(url) { accepted in\n                    print(accepted ? \"Success\" : \"Failure\")\n                }\n            }\n        } label: {\n            Label(\"Get Help\", systemImage: \"person.fill.questionmark\")\n        }\n    }\n}\n\n\nFor information about how Swift uses the callAsFunction() method to simplify call site syntax, see Methods with Special Names in The Swift Programming Language.\n\nSee Also\nCalling the action\nfunc callAsFunction(URL)\nOpens a URL, following system conventions."
    },
    {
        "title": "callAsFunction(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/openurlaction/callasfunction(_:)",
        "html": "Parameters\nurl\n\nThe URL to open.\n\nDiscussion\n\nDon\u2019t call this method directly. SwiftUI calls it when you call the OpenURLAction structure that you get from the Environment, using a URL as an argument:\n\nstruct OpenURLExample: View {\n    @Environment(\\.openURL) private var openURL\n\n\n    var body: some View {\n        Button {\n            if let url = URL(string: \"https://www.example.com\") {\n                openURL(url) // Implicitly calls openURL.callAsFunction(url)\n            }\n        } label: {\n            Label(\"Get Help\", systemImage: \"person.fill.questionmark\")\n        }\n    }\n}\n\n\nFor information about how Swift uses the callAsFunction() method to simplify call site syntax, see Methods with Special Names in The Swift Programming Language.\n\nSee Also\nCalling the action\nfunc callAsFunction(URL, completion: (Bool) -> Void)\nAsynchronously opens a URL, following system conventions."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-8ilj",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 64-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int64>, content: (RowValue) -> Content)\nCreates a sortable column for 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int64>, content: (RowValue) -> Content)\nCreates a sortable column for 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int64>, content: (RowValue) -> Content)\nCreates a sortable column for 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt64>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt64>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt64>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-nlm",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with 64-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int64>, content: (RowValue) -> Content)\nCreates a sortable column for 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int64>, content: (RowValue) -> Content)\nCreates a sortable column for 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt64>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt64>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt64>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-9wr9f",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int>, content: (RowValue) -> Content)\nCreates a sortable column for integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int>, content: (RowValue) -> Content)\nCreates a sortable column for integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int>, content: (RowValue) -> Content)\nCreates a sortable column for integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int?>, content: (RowValue) -> Content)\nCreates a sortable column for optional integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int?>, content: (RowValue) -> Content)\nCreates a sortable column for optional integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int?>, content: (RowValue) -> Content)\nCreates a sortable column for optional integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-2xaxz",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, which will be used to update and reflect the sorting state in a table.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 64-bit integers\ninit<S>(S, value: KeyPath<RowValue, Int64>, content: (RowValue) -> Content)\nCreates a sortable column for 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int64>, content: (RowValue) -> Content)\nCreates a sortable column for 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt64>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt64>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt64>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-79udw",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int>, content: (RowValue) -> Content)\nCreates a sortable column for integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int>, content: (RowValue) -> Content)\nCreates a sortable column for integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int>, content: (RowValue) -> Content)\nCreates a sortable column for integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int?>, content: (RowValue) -> Content)\nCreates a sortable column for optional integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int?>, content: (RowValue) -> Content)\nCreates a sortable column for optional integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int?>, content: (RowValue) -> Content)\nCreates a sortable column for optional integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-7hhm6",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int>, content: (RowValue) -> Content)\nCreates a sortable column for integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int>, content: (RowValue) -> Content)\nCreates a sortable column for integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int>, content: (RowValue) -> Content)\nCreates a sortable column for integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int?>, content: (RowValue) -> Content)\nCreates a sortable column for optional integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int?>, content: (RowValue) -> Content)\nCreates a sortable column for optional integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int?>, content: (RowValue) -> Content)\nCreates a sortable column for optional integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-5k5xv",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, which will be used to update and reflect the sorting state in a table.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with dates\ninit<S>(S, value: KeyPath<RowValue, Date>, content: (RowValue) -> Content)\nCreates a sortable column for date values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Date>, content: (RowValue) -> Content)\nCreates a sortable column for date values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Date?>, content: (RowValue) -> Content)\nCreates a sortable column for optional date values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Date?>, content: (RowValue) -> Content)\nCreates a sortable column for optional date values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Date?>, content: (RowValue) -> Content)\nCreates a sortable column for optional date values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-5njih",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, which will be used to update and reflect the sorting state in a table.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with doubles\ninit(LocalizedStringKey, value: KeyPath<RowValue, Double>, content: (RowValue) -> Content)\nCreates a sortable column for double-precision floating-point values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Double>, content: (RowValue) -> Content)\nCreates a sortable column for double-precision floating-point values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Double?>, content: (RowValue) -> Content)\nCreates a sortable column for optional double-precision floating-point values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Double?>, content: (RowValue) -> Content)\nCreates a sortable column for optional double-precision floating-point values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Double?>, content: (RowValue) -> Content)\nCreates a sortable column for optional double-precision floating-point values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-2mrkv",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with floats\ninit(LocalizedStringKey, value: KeyPath<RowValue, Float>, content: (RowValue) -> Content)\nCreates a sortable column for single-precision floating-point values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Float>, content: (RowValue) -> Content)\nCreates a sortable column for single-precision floating-point values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Float>, content: (RowValue) -> Content)\nCreates a sortable column for single-precision floating-point values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Float?>, content: (RowValue) -> Content)\nCreates a sortable column for optional single-precision floating-point values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Float?>, content: (RowValue) -> Content)\nCreates a sortable column for optional single-precision floating-point values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-976f3",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with 8-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-6097b",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with doubles\ninit(LocalizedStringKey, value: KeyPath<RowValue, Double>, content: (RowValue) -> Content)\nCreates a sortable column for double-precision floating-point values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Double>, content: (RowValue) -> Content)\nCreates a sortable column for double-precision floating-point values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Double>, content: (RowValue) -> Content)\nCreates a sortable column for double-precision floating-point values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Double?>, content: (RowValue) -> Content)\nCreates a sortable column for optional double-precision floating-point values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Double?>, content: (RowValue) -> Content)\nCreates a sortable column for optional double-precision floating-point values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-31p7g",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with dates\ninit(LocalizedStringKey, value: KeyPath<RowValue, Date>, content: (RowValue) -> Content)\nCreates a sortable column for date values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Date>, content: (RowValue) -> Content)\nCreates a sortable column for date values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Date?>, content: (RowValue) -> Content)\nCreates a sortable column for optional date values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Date?>, content: (RowValue) -> Content)\nCreates a sortable column for optional date values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Date?>, content: (RowValue) -> Content)\nCreates a sortable column for optional date values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-82zg0",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with Booleans\ninit(LocalizedStringKey, value: KeyPath<RowValue, Bool>, content: (RowValue) -> Content)\nCreates a sortable column for Boolean values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Bool>, content: (RowValue) -> Content)\nCreates a sortable column for Boolean values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Bool>, content: (RowValue) -> Content)\nCreates a sortable column for Boolean values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Bool?>, content: (RowValue) -> Content)\nCreates a sortable column for optional Boolean values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Bool?>, content: (RowValue) -> Content)\nCreates a sortable column for optional Boolean values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-7fmpv",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with doubles\ninit(LocalizedStringKey, value: KeyPath<RowValue, Double>, content: (RowValue) -> Content)\nCreates a sortable column for double-precision floating-point values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Double>, content: (RowValue) -> Content)\nCreates a sortable column for double-precision floating-point values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Double>, content: (RowValue) -> Content)\nCreates a sortable column for double-precision floating-point values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Double?>, content: (RowValue) -> Content)\nCreates a sortable column for optional double-precision floating-point values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Double?>, content: (RowValue) -> Content)\nCreates a sortable column for optional double-precision floating-point values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-72tir",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with doubles\ninit(LocalizedStringKey, value: KeyPath<RowValue, Double>, content: (RowValue) -> Content)\nCreates a sortable column for double-precision floating-point values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Double>, content: (RowValue) -> Content)\nCreates a sortable column for double-precision floating-point values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Double?>, content: (RowValue) -> Content)\nCreates a sortable column for optional double-precision floating-point values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Double?>, content: (RowValue) -> Content)\nCreates a sortable column for optional double-precision floating-point values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Double?>, content: (RowValue) -> Content)\nCreates a sortable column for optional double-precision floating-point values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-7vdr2",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with floats\ninit(LocalizedStringKey, value: KeyPath<RowValue, Float>, content: (RowValue) -> Content)\nCreates a sortable column for single-precision floating-point values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Float>, content: (RowValue) -> Content)\nCreates a sortable column for single-precision floating-point values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Float>, content: (RowValue) -> Content)\nCreates a sortable column for single-precision floating-point values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Float?>, content: (RowValue) -> Content)\nCreates a sortable column for optional single-precision floating-point values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Float?>, content: (RowValue) -> Content)\nCreates a sortable column for optional single-precision floating-point values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-2cv78",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, which will be used to update and reflect the sorting state in a table.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with doubles\ninit<S>(S, value: KeyPath<RowValue, Double>, content: (RowValue) -> Content)\nCreates a sortable column for double-precision floating-point values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Double>, content: (RowValue) -> Content)\nCreates a sortable column for double-precision floating-point values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Double?>, content: (RowValue) -> Content)\nCreates a sortable column for optional double-precision floating-point values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Double?>, content: (RowValue) -> Content)\nCreates a sortable column for optional double-precision floating-point values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Double?>, content: (RowValue) -> Content)\nCreates a sortable column for optional double-precision floating-point values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-6aau9",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with 16-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-6tt5l",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with floats\ninit(LocalizedStringKey, value: KeyPath<RowValue, Float>, content: (RowValue) -> Content)\nCreates a sortable column for single-precision floating-point values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Float>, content: (RowValue) -> Content)\nCreates a sortable column for single-precision floating-point values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Float?>, content: (RowValue) -> Content)\nCreates a sortable column for optional single-precision floating-point values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Float?>, content: (RowValue) -> Content)\nCreates a sortable column for optional single-precision floating-point values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Float?>, content: (RowValue) -> Content)\nCreates a sortable column for optional single-precision floating-point values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-64dcm",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, which will be used to update and reflect the sorting state in a table.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with floats\ninit(LocalizedStringKey, value: KeyPath<RowValue, Float>, content: (RowValue) -> Content)\nCreates a sortable column for single-precision floating-point values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Float>, content: (RowValue) -> Content)\nCreates a sortable column for single-precision floating-point values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Float?>, content: (RowValue) -> Content)\nCreates a sortable column for optional single-precision floating-point values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Float?>, content: (RowValue) -> Content)\nCreates a sortable column for optional single-precision floating-point values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Float?>, content: (RowValue) -> Content)\nCreates a sortable column for optional single-precision floating-point values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-1m4xw",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with floats\ninit(LocalizedStringKey, value: KeyPath<RowValue, Float>, content: (RowValue) -> Content)\nCreates a sortable column for single-precision floating-point values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Float>, content: (RowValue) -> Content)\nCreates a sortable column for single-precision floating-point values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Float>, content: (RowValue) -> Content)\nCreates a sortable column for single-precision floating-point values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Float?>, content: (RowValue) -> Content)\nCreates a sortable column for optional single-precision floating-point values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Float?>, content: (RowValue) -> Content)\nCreates a sortable column for optional single-precision floating-point values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-3d7c2",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, which will be used to update and reflect the sorting state in a table.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 16-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-7vq7m",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with Booleans\ninit(LocalizedStringKey, value: KeyPath<RowValue, Bool>, content: (RowValue) -> Content)\nCreates a sortable column for Boolean values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Bool>, content: (RowValue) -> Content)\nCreates a sortable column for Boolean values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Bool>, content: (RowValue) -> Content)\nCreates a sortable column for Boolean values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Bool?>, content: (RowValue) -> Content)\nCreates a sortable column for optional Boolean values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Bool?>, content: (RowValue) -> Content)\nCreates a sortable column for optional Boolean values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-8mfqw",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with 16-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-22w5f",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 32-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-7uqh9",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with 16-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-3y8rn",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 16-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-1o166",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with 32-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-5iwfz",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, which will be used to update and reflect the sorting state in a table.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 16-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-6y8uj",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, which will be used to update and reflect the sorting state in a table.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with integers\ninit<S>(S, value: KeyPath<RowValue, Int>, content: (RowValue) -> Content)\nCreates a sortable column for integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int>, content: (RowValue) -> Content)\nCreates a sortable column for integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int?>, content: (RowValue) -> Content)\nCreates a sortable column for optional integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int?>, content: (RowValue) -> Content)\nCreates a sortable column for optional integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int?>, content: (RowValue) -> Content)\nCreates a sortable column for optional integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-irsl",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int>, content: (RowValue) -> Content)\nCreates a sortable column for integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int>, content: (RowValue) -> Content)\nCreates a sortable column for integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int>, content: (RowValue) -> Content)\nCreates a sortable column for integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int?>, content: (RowValue) -> Content)\nCreates a sortable column for optional integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int?>, content: (RowValue) -> Content)\nCreates a sortable column for optional integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-7mube",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with dates\ninit(LocalizedStringKey, value: KeyPath<RowValue, Date>, content: (RowValue) -> Content)\nCreates a sortable column for date values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Date>, content: (RowValue) -> Content)\nCreates a sortable column for date values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Date>, content: (RowValue) -> Content)\nCreates a sortable column for date values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Date?>, content: (RowValue) -> Content)\nCreates a sortable column for optional date values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Date?>, content: (RowValue) -> Content)\nCreates a sortable column for optional date values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-5xu7h",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int>, content: (RowValue) -> Content)\nCreates a sortable column for integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int>, content: (RowValue) -> Content)\nCreates a sortable column for integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int>, content: (RowValue) -> Content)\nCreates a sortable column for integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int?>, content: (RowValue) -> Content)\nCreates a sortable column for optional integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int?>, content: (RowValue) -> Content)\nCreates a sortable column for optional integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-9ev78",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view for you, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with comparable values\ninit<V>(LocalizedStringKey, value: KeyPath<RowValue, V>, content: (RowValue) -> Content)\nCreates a sortable column for comparable values that generates its label from a localized string key.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<V>(Text, value: KeyPath<RowValue, V>, content: (RowValue) -> Content)\nCreates a sortable column for comparable values with a text label.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<V, C>(LocalizedStringKey, value: KeyPath<RowValue, V>, comparator: C, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a localized string key, and uses an explicit comparator for sorting values.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<S, V, C>(S, value: KeyPath<RowValue, V>, comparator: C, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a string, and uses an explicit comparator for sorting values.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<V, C>(Text, value: KeyPath<RowValue, V>, comparator: C, content: (RowValue) -> Content)\nCreates a sortable column that has a text label, and uses an explicit comparator for sorting values.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-9uxiw",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int>, content: (RowValue) -> Content)\nCreates a sortable column for integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int>, content: (RowValue) -> Content)\nCreates a sortable column for integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int?>, content: (RowValue) -> Content)\nCreates a sortable column for optional integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int?>, content: (RowValue) -> Content)\nCreates a sortable column for optional integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int?>, content: (RowValue) -> Content)\nCreates a sortable column for optional integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:comparator:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:comparator:content:)-1zkr8",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncomparator\n\nThe specific comparator to compare string values.\n\ncontent\n\nThe view content to display for each row in a table.\n\nSee Also\nCreating a column with strings\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and generates its label from a localized string key.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and generates its label from a string.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property and has a text label.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates an unsortable column that displays a string property, and which generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and which generates its label from a string.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates an unsortable column that displays a string property and has a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-4wtr",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view for you, and treats the localized key similar to init(_:tableName:bundle:comment:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with comparable values\ninit<S, V>(S, value: KeyPath<RowValue, V>, content: (RowValue) -> Content)\nCreates a sortable column for comparable values that generates its label from a string.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<V>(Text, value: KeyPath<RowValue, V>, content: (RowValue) -> Content)\nCreates a sortable column for comparable values with a text label.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<V, C>(LocalizedStringKey, value: KeyPath<RowValue, V>, comparator: C, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a localized string key, and uses an explicit comparator for sorting values.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<S, V, C>(S, value: KeyPath<RowValue, V>, comparator: C, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a string, and uses an explicit comparator for sorting values.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<V, C>(Text, value: KeyPath<RowValue, V>, comparator: C, content: (RowValue) -> Content)\nCreates a sortable column that has a text label, and uses an explicit comparator for sorting values.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-8dz0a",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with UUIDs\ninit(LocalizedStringKey, value: KeyPath<RowValue, UUID>, content: (RowValue) -> Content)\nCreates a sortable column for UUID values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UUID>, content: (RowValue) -> Content)\nCreates a sortable column for UUID values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UUID>, content: (RowValue) -> Content)\nCreates a sortable column for UUID values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UUID?>, content: (RowValue) -> Content)\nCreates a sortable column for optional UUID values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UUID?>, content: (RowValue) -> Content)\nCreates a sortable column for optional UUID values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-ug9n",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with dates\ninit(LocalizedStringKey, value: KeyPath<RowValue, Date>, content: (RowValue) -> Content)\nCreates a sortable column for date values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Date>, content: (RowValue) -> Content)\nCreates a sortable column for date values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Date>, content: (RowValue) -> Content)\nCreates a sortable column for date values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Date?>, content: (RowValue) -> Content)\nCreates a sortable column for optional date values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Date?>, content: (RowValue) -> Content)\nCreates a sortable column for optional date values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-7y2v7",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, which will be used to update and reflect the sorting state in a table.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with UUIDs\ninit<S>(S, value: KeyPath<RowValue, UUID>, content: (RowValue) -> Content)\nCreates a sortable column for UUID values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UUID>, content: (RowValue) -> Content)\nCreates a sortable column for UUID values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UUID?>, content: (RowValue) -> Content)\nCreates a sortable column for optional UUID values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UUID?>, content: (RowValue) -> Content)\nCreates a sortable column for optional UUID values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UUID?>, content: (RowValue) -> Content)\nCreates a sortable column for optional UUID values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:comparator:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:comparator:content:)-xziz",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncomparator\n\nThe specific comparator to compare string values.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with strings\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and generates its label from a localized string key.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and generates its label from a string.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property and has a text label.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates an unsortable column that displays a string property, and which generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and which generates its label from a string.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates an unsortable column that displays a string property and has a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:comparator:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:comparator:content:)-18bc9",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncomparator\n\nThe specific comparator to compare string values.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with strings\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and generates its label from a localized string key.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and generates its label from a string.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property and has a text label.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates an unsortable column that displays a string property, and which generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and which generates its label from a string.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates an unsortable column that displays a string property and has a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-9wo1v",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, which will be used to update and reflect the sorting state in a table.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with UUIDs\ninit(LocalizedStringKey, value: KeyPath<RowValue, UUID>, content: (RowValue) -> Content)\nCreates a sortable column for UUID values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UUID>, content: (RowValue) -> Content)\nCreates a sortable column for UUID values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UUID?>, content: (RowValue) -> Content)\nCreates a sortable column for optional UUID values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UUID?>, content: (RowValue) -> Content)\nCreates a sortable column for optional UUID values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UUID?>, content: (RowValue) -> Content)\nCreates a sortable column for optional UUID values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:comparator:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:comparator:)-38b82",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state and to display as verbatim text in each row.\n\ncomparator\n\nThe specific comparator to compare string values.\n\nSee Also\nCreating a column with strings\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and generates its label from a localized string key.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and generates its label from a string.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property and has a text label.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates an unsortable column that displays a string property, and which generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and which generates its label from a string.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:comparator:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:comparator:content:)-efvh",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncomparator\n\nThe specific comparator to compare string values.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with strings\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and generates its label from a localized string key.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and generates its label from a string.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property and has a text label.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates an unsortable column that displays a string property, and which generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and which generates its label from a string.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates an unsortable column that displays a string property and has a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:comparator:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:comparator:)-a2b4",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state and to display as verbatim text in each row.\n\ncomparator\n\nThe specific comparator to compare string values.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with strings\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and generates its label from a localized string key.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and generates its label from a string.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property and has a text label.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and which generates its label from a string.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates an unsortable column that displays a string property and has a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:content:)-1lcze",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view for you, and treats the title similar to init(_:). For information about localizing strings, see Text.\n\nSee Also\nCreating an unsortable column\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>)\nCreates an unsortable column that displays a string property that generates its label from a localized string key.\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>)\nCreates an unsortable column that displays a string property that generates its label from a string.\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>)\nCreates an unsortable column that displays a string property with a text label.\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, content: (RowValue) -> Content)\nCreates an unsortable column that generates its label from a localized string key.\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text.\ninit(Text, content: (RowValue) -> Content)\nCreates an unsortable column with a text label\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(of:columns:rows:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(of:columns:rows:)",
        "html": "Parameters\nvalueType\n\nThe type of value used to derive the table\u2019s contents.\n\ncolumns\n\nThe columns to display in the table.\n\nrows\n\nThe rows to display in the table.\n\nSee Also\nCreating a table from columns and rows\ninit(of: Value.Type, selection: Binding<Set<Value.ID>>, columns: () -> Columns, rows: () -> Rows)\nCreates a table with the given columns and rows that supports selecting multiple rows that generates its data using values of the given type.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit(of: Value.Type, selection: Binding<Value.ID?>, columns: () -> Columns, rows: () -> Rows)\nCreates a table with the given columns and rows that supports selecting zero or one row that generates its data using values of the given type.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(of:selection:columns:rows:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(of:selection:columns:rows:)-5jw8",
        "html": "Parameters\nvalueType\n\nThe type of value used to derive the table\u2019s contents.\n\nselection\n\nA binding to a set that identifies the selected rows IDs.\n\ncolumns\n\nThe columns to display in the table.\n\nrows\n\nThe rows to display in the table.\n\nSee Also\nCreating a table from columns and rows\ninit(of: Value.Type, columns: () -> Columns, rows: () -> Rows)\nCreates a table with the given columns and rows that generates its contents using values of the given type.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit(of: Value.Type, selection: Binding<Value.ID?>, columns: () -> Columns, rows: () -> Rows)\nCreates a table with the given columns and rows that supports selecting zero or one row that generates its data using values of the given type.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-2nvh",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int>, content: (RowValue) -> Content)\nCreates a sortable column for integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int>, content: (RowValue) -> Content)\nCreates a sortable column for integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int>, content: (RowValue) -> Content)\nCreates a sortable column for integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int?>, content: (RowValue) -> Content)\nCreates a sortable column for optional integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int?>, content: (RowValue) -> Content)\nCreates a sortable column for optional integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-83591",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int>, content: (RowValue) -> Content)\nCreates a sortable column for integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int>, content: (RowValue) -> Content)\nCreates a sortable column for integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int>, content: (RowValue) -> Content)\nCreates a sortable column for integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int?>, content: (RowValue) -> Content)\nCreates a sortable column for optional integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int?>, content: (RowValue) -> Content)\nCreates a sortable column for optional integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int?>, content: (RowValue) -> Content)\nCreates a sortable column for optional integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(of:selection:columnCustomization:columns:rows:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(of:selection:columncustomization:columns:rows:)-5f3rc",
        "html": "Parameters\nvalueType\n\nThe type of value used to derive the table\u2019s contents.\n\nselection\n\nA binding to the optional selected row ID.\n\ncolumnCustomization\n\nA binding to the state of columns.\n\ncolumns\n\nThe columns to display in the table.\n\nrows\n\nThe rows to display in the table.\n\nDiscussion\n\nEach column in the table that should participate in customization is required to have an identifier, specified with customizationID(_:).\n\nSee Also\nCreating a table with dynamically customizable columns\ninit(of: Value.Type, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a table with the given columns and rows that generates its contents using values of the given type and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit(of: Value.Type, selection: Binding<Set<Value.ID>>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a table with the given columns and rows that supports selecting multiple rows that generates its data using values of the given type and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(of: Value.Type, selection: Binding<Set<Value.ID>>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting multiple rows and dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(of: Value.Type, selection: Binding<Value.ID?>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting zero or one row and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(of: Value.Type, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "first",
        "url": "https://developer.apple.com/documentation/swiftui/simultaneousgesture/first",
        "html": "See Also\nCreating the gesture\ninit(First, Second)\nCreates a gesture with two gestures that can receive updates or succeed independently of each other.\nvar second: Second\nThe second of two gestures that can happen simultaneously."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-27yen",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 8-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-88r36",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 8-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-5agjj",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, which will be used to update and reflect the sorting state in a table.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with Booleans\ninit<S>(S, value: KeyPath<RowValue, Bool>, content: (RowValue) -> Content)\nCreates a sortable column for Boolean values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Bool>, content: (RowValue) -> Content)\nCreates a sortable column for Boolean values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Bool?>, content: (RowValue) -> Content)\nCreates a sortable column for optional Boolean values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Bool?>, content: (RowValue) -> Content)\nCreates a sortable column for optional Boolean values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Bool?>, content: (RowValue) -> Content)\nCreates a sortable column for optional Boolean values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-56m2b",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with 8-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-5ztos",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, which will be used to update and reflect the sorting state in a table.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 8-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-5zr6k",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 8-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-9tev3",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 8-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-8o3ze",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with Booleans\ninit(LocalizedStringKey, value: KeyPath<RowValue, Bool>, content: (RowValue) -> Content)\nCreates a sortable column for Boolean values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Bool>, content: (RowValue) -> Content)\nCreates a sortable column for Boolean values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Bool?>, content: (RowValue) -> Content)\nCreates a sortable column for optional Boolean values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Bool?>, content: (RowValue) -> Content)\nCreates a sortable column for optional Boolean values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Bool?>, content: (RowValue) -> Content)\nCreates a sortable column for optional Boolean values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-9d858",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, which will be used to update and reflect the sorting state in a table.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with Booleans\ninit(LocalizedStringKey, value: KeyPath<RowValue, Bool>, content: (RowValue) -> Content)\nCreates a sortable column for Boolean values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Bool>, content: (RowValue) -> Content)\nCreates a sortable column for Boolean values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Bool?>, content: (RowValue) -> Content)\nCreates a sortable column for optional Boolean values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Bool?>, content: (RowValue) -> Content)\nCreates a sortable column for optional Boolean values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Bool?>, content: (RowValue) -> Content)\nCreates a sortable column for optional Boolean values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-9sv7z",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with 8-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-8wdyr",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, which will be used to update and reflect the sorting state in a table.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 8-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-6m245",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 16-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-92tv0",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, which will be used to update and reflect the sorting state in a table.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 8-bit integers\ninit<S>(S, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-4qrnf",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 16-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-3rng7",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with 16-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int16>, content: (RowValue) -> Content)\nCreates a sortable column for 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt16>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt16?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 16-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-2odlm",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with 8-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-8yx9y",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, which will be used to update and reflect the sorting state in a table.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 8-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int8>, content: (RowValue) -> Content)\nCreates a sortable column for 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt8>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt8?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 8-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(of:sortOrder:columns:rows:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(of:sortorder:columns:rows:)",
        "html": "Parameters\nvalueType\n\nThe type of value used to derive the table\u2019s contents.\n\nsortOrder\n\nA binding to the ordered sorting of columns.\n\ncolumns\n\nThe columns to display in the table.\n\nrows\n\nThe rows to display in the table.\n\nSee Also\nCreating a sortable table from columns and rows\ninit<Sort>(of: Value.Type, selection: Binding<Value.ID?>, sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting zero or one row.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(of: Value.Type, selection: Binding<Set<Value.ID>>, sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting multiple rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(selection: Binding<Value.ID?>, sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting zero or one row.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(selection: Binding<Set<Value.ID>>, sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting multiple rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(of:selection:columns:rows:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(of:selection:columns:rows:)-n09k",
        "html": "Parameters\nvalueType\n\nThe type of value used to derive the table\u2019s contents.\n\nselection\n\nA binding to the optional selected row ID.\n\ncolumns\n\nThe columns to display in the table.\n\nrows\n\nThe rows to display in the table.\n\nSee Also\nCreating a table from columns and rows\ninit(of: Value.Type, columns: () -> Columns, rows: () -> Rows)\nCreates a table with the given columns and rows that generates its contents using values of the given type.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit(of: Value.Type, selection: Binding<Set<Value.ID>>, columns: () -> Columns, rows: () -> Rows)\nCreates a table with the given columns and rows that supports selecting multiple rows that generates its data using values of the given type.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(selection:sortOrder:columns:rows:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(selection:sortorder:columns:rows:)-esju",
        "html": "Parameters\nselection\n\nA binding to a set that identifies selected rows ids.\n\nsortOrder\n\nA binding to the ordered sorting of columns.\n\ncolumns\n\nThe columns to display in the table.\n\nrows\n\nThe rows to display in the table.\n\nSee Also\nCreating a sortable table from columns and rows\ninit<Sort>(of: Value.Type, sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(of: Value.Type, selection: Binding<Value.ID?>, sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting zero or one row.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(of: Value.Type, selection: Binding<Set<Value.ID>>, sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting multiple rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(selection: Binding<Value.ID?>, sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting zero or one row.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(_:selection:sortOrder:columnCustomization:columns:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(_:selection:sortorder:columncustomization:columns:)-3fx9f",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the table rows.\n\nselection\n\nA binding to a set that identifies selected rows IDs.\n\nsortOrder\n\nA binding to the ordered sorting of columns.\n\ncolumnCustomization\n\nA binding to the state of columns.\n\ncolumns\n\nThe columns to display in the table.\n\nDiscussion\n\nEach column in the table that should participate in customization is required to have an identifier, specified with customizationID(_:).\n\nSee Also\nCreating a table with customizable columns\ninit<Data>(Data, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns)\nCreates a table that computes its rows based on a collection of identifiable data and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data>(Data, selection: Binding<Value.ID?>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns)\nCreates a table that computes its rows based on a collection of identifiable data, that supports selecting zero or one row, and that has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data>(Data, selection: Binding<Set<Value.ID>>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns)\nCreates a table that computes its rows based on a collection of identifiable data, that supports selecting multiple rows, and that has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, selection: Binding<Value.ID?>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns)\nCreates a sortable table that computes its rows based on a collection of identifiable data, supports selecting zero or one row, and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns)\nCreates a sortable table that computes its rows based on a collection of identifiable data and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(_:selection:columnCustomization:columns:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(_:selection:columncustomization:columns:)-5jz68",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the table rows.\n\nselection\n\nA binding to the optional selected row ID.\n\ncolumnCustomization\n\nA binding to the state of columns.\n\ncolumns\n\nThe columns to display in the table.\n\nDiscussion\n\nEach column in the table that should participate in customization is required to have an identifier, specified with customizationID(_:).\n\nSee Also\nCreating a table with customizable columns\ninit<Data>(Data, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns)\nCreates a table that computes its rows based on a collection of identifiable data and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data>(Data, selection: Binding<Set<Value.ID>>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns)\nCreates a table that computes its rows based on a collection of identifiable data, that supports selecting multiple rows, and that has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, selection: Binding<Set<Value.ID>>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns)\nCreates a sortable table that computes its rows based on a collection of identifiable data, supports selecting multiple rows, and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, selection: Binding<Value.ID?>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns)\nCreates a sortable table that computes its rows based on a collection of identifiable data, supports selecting zero or one row, and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns)\nCreates a sortable table that computes its rows based on a collection of identifiable data and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(_:columnCustomization:columns:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(_:columncustomization:columns:)",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the table rows.\n\ncolumnCustomization\n\nA binding to the state of columns.\n\ncolumns\n\nThe columns to display in the table.\n\nDiscussion\n\nEach column in the table that should participate in customization is required to have an identifier, specified with customizationID(_:).\n\nSee Also\nCreating a table with customizable columns\ninit<Data>(Data, selection: Binding<Value.ID?>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns)\nCreates a table that computes its rows based on a collection of identifiable data, that supports selecting zero or one row, and that has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data>(Data, selection: Binding<Set<Value.ID>>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns)\nCreates a table that computes its rows based on a collection of identifiable data, that supports selecting multiple rows, and that has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, selection: Binding<Set<Value.ID>>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns)\nCreates a sortable table that computes its rows based on a collection of identifiable data, supports selecting multiple rows, and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, selection: Binding<Value.ID?>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns)\nCreates a sortable table that computes its rows based on a collection of identifiable data, supports selecting zero or one row, and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns)\nCreates a sortable table that computes its rows based on a collection of identifiable data and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(_:selection:columnCustomization:columns:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(_:selection:columncustomization:columns:)-8np4a",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the table rows.\n\nselection\n\nA binding to a set that identifies selected rows IDs.\n\ncolumnCustomization\n\nA binding to the state of columns.\n\ncolumns\n\nThe columns to display in the table.\n\nDiscussion\n\nEach column in the table that should participate in customization is required to have an identifier, specified with customizationID(_:).\n\nSee Also\nCreating a table with customizable columns\ninit<Data>(Data, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns)\nCreates a table that computes its rows based on a collection of identifiable data and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data>(Data, selection: Binding<Value.ID?>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns)\nCreates a table that computes its rows based on a collection of identifiable data, that supports selecting zero or one row, and that has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, selection: Binding<Set<Value.ID>>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns)\nCreates a sortable table that computes its rows based on a collection of identifiable data, supports selecting multiple rows, and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, selection: Binding<Value.ID?>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns)\nCreates a sortable table that computes its rows based on a collection of identifiable data, supports selecting zero or one row, and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns)\nCreates a sortable table that computes its rows based on a collection of identifiable data and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(_:sortOrder:columnCustomization:columns:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(_:sortorder:columncustomization:columns:)",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the table rows.\n\nsortOrder\n\nA binding to the ordered sorting of columns.\n\ncolumnCustomization\n\nA binding to the state of columns.\n\ncolumns\n\nThe columns to display in the table.\n\nDiscussion\n\nEach column in the table that should participate in customization is required to have an identifier, specified with customizationID(_:).\n\nSee Also\nCreating a table with customizable columns\ninit<Data>(Data, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns)\nCreates a table that computes its rows based on a collection of identifiable data and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data>(Data, selection: Binding<Value.ID?>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns)\nCreates a table that computes its rows based on a collection of identifiable data, that supports selecting zero or one row, and that has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data>(Data, selection: Binding<Set<Value.ID>>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns)\nCreates a table that computes its rows based on a collection of identifiable data, that supports selecting multiple rows, and that has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, selection: Binding<Set<Value.ID>>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns)\nCreates a sortable table that computes its rows based on a collection of identifiable data, supports selecting multiple rows, and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, selection: Binding<Value.ID?>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns)\nCreates a sortable table that computes its rows based on a collection of identifiable data, supports selecting zero or one row, and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(of:selection:sortOrder:columnCustomization:columns:rows:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(of:selection:sortorder:columncustomization:columns:rows:)-9z79a",
        "html": "Parameters\nvalueType\n\nThe type of value used to derive the table\u2019s contents.\n\nselection\n\nA binding to the optional selected row ID.\n\nsortOrder\n\nA binding to the ordered sorting of columns.\n\ncolumnCustomization\n\nA binding to the state of columns.\n\ncolumns\n\nThe columns to display in the table.\n\nrows\n\nThe rows to display in the table.\n\nDiscussion\n\nEach column in the table that should participate in customization is required to have an identifier, specified with customizationID(_:).\n\nSee Also\nCreating a table with dynamically customizable columns\ninit(of: Value.Type, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a table with the given columns and rows that generates its contents using values of the given type and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit(of: Value.Type, selection: Binding<Set<Value.ID>>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a table with the given columns and rows that supports selecting multiple rows that generates its data using values of the given type and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit(of: Value.Type, selection: Binding<Value.ID?>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a table with the given columns and rows that supports selecting zero or one row that generates its data using values of the given type and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(of: Value.Type, selection: Binding<Set<Value.ID>>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting multiple rows and dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(of: Value.Type, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(of:columnCustomization:columns:rows:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(of:columncustomization:columns:rows:)",
        "html": "Parameters\nvalueType\n\nThe type of value used to derive the table\u2019s contents.\n\ncolumnCustomization\n\nA binding to the state of columns.\n\ncolumns\n\nThe columns to display in the table.\n\nrows\n\nThe rows to display in the table.\n\nDiscussion\n\nEach column in the table that should participate in customization is required to have an identifier, specified with customizationID(_:).\n\nSee Also\nCreating a table with dynamically customizable columns\ninit(of: Value.Type, selection: Binding<Set<Value.ID>>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a table with the given columns and rows that supports selecting multiple rows that generates its data using values of the given type and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit(of: Value.Type, selection: Binding<Value.ID?>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a table with the given columns and rows that supports selecting zero or one row that generates its data using values of the given type and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(of: Value.Type, selection: Binding<Set<Value.ID>>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting multiple rows and dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(of: Value.Type, selection: Binding<Value.ID?>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting zero or one row and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(of: Value.Type, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(_:children:selection:columnCustomization:columns:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(_:children:selection:columncustomization:columns:)-4gccv",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the table rows.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data, and whose nil value represents a leaf row of the hierarchy, which is not capable of having children.\n\nselection\n\nA binding to the optional selected row ID.\n\ncolumnCustomization\n\nA binding to the state of columns.\n\ncolumns\n\nThe columns to display in the table.\n\nDiscussion\n\nEach column in the table that should participate in customization is required to have an identifier, specified with customizationID(_:).\n\nSee Also\nCreating a hierarchical table\ninit<Data>(Data, children: KeyPath<Value, Data?>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<Set<Value.ID>>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data, and supports selecting multiple rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<Value.ID?>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a sortable, hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data, and supports selecting zero or one row.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<Set<Value.ID>>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a sortable, hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data, and supports selecting multiple rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, children: KeyPath<Data.Element, Data?>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a sortable, hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(_:children:selection:sortOrder:columnCustomization:columns:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(_:children:selection:sortorder:columncustomization:columns:)-7vtte",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the table rows.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data, and whose nil value represents a leaf row of the hierarchy, which is not capable of having children.\n\nselection\n\nA binding to a set that identifies selected rows IDs.\n\nsortOrder\n\nA binding to the ordered sorting of columns.\n\ncolumnCustomization\n\nA binding to the state of columns.\n\ncolumns\n\nThe columns to display in the table.\n\nDiscussion\n\nEach column in the table that should participate in customization is required to have an identifier, specified with customizationID(_:).\n\nSee Also\nCreating a hierarchical table\ninit<Data>(Data, children: KeyPath<Value, Data?>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<Set<Value.ID>>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data, and supports selecting multiple rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<Value.ID?>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data, and supports selecting zero or one row.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<Value.ID?>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a sortable, hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data, and supports selecting zero or one row.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, children: KeyPath<Data.Element, Data?>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a sortable, hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(of:selection:sortOrder:columnCustomization:columns:rows:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(of:selection:sortorder:columncustomization:columns:rows:)-2urxn",
        "html": "Parameters\nvalueType\n\nThe type of value used to derive the table\u2019s contents.\n\nselection\n\nA binding to a set that identifies selected rows ids.\n\nsortOrder\n\nA binding to the ordered sorting of columns.\n\ncolumnCustomization\n\nA binding to the state of columns.\n\ncolumns\n\nThe columns to display in the table.\n\nrows\n\nThe rows to display in the table.\n\nDiscussion\n\nEach column in the table that should participate in customization is required to have an identifier, specified with customizationID(_:).\n\nSee Also\nCreating a table with dynamically customizable columns\ninit(of: Value.Type, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a table with the given columns and rows that generates its contents using values of the given type and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit(of: Value.Type, selection: Binding<Set<Value.ID>>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a table with the given columns and rows that supports selecting multiple rows that generates its data using values of the given type and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit(of: Value.Type, selection: Binding<Value.ID?>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a table with the given columns and rows that supports selecting zero or one row that generates its data using values of the given type and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(of: Value.Type, selection: Binding<Value.ID?>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting zero or one row and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(of: Value.Type, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(_:children:columnCustomization:columns:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(_:children:columncustomization:columns:)",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the table rows.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data, and whose nil value represents a leaf row of the hierarchy, which is not capable of having children.\n\ncolumnCustomization\n\nA binding to the state of columns.\n\ncolumns\n\nThe columns to display in the table.\n\nDiscussion\n\nEach column in the table that should participate in customization is required to have an identifier, specified with customizationID(_:).\n\nSee Also\nCreating a hierarchical table\ninit<Data>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<Set<Value.ID>>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data, and supports selecting multiple rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<Value.ID?>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data, and supports selecting zero or one row.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<Value.ID?>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a sortable, hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data, and supports selecting zero or one row.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<Set<Value.ID>>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a sortable, hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data, and supports selecting multiple rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, children: KeyPath<Data.Element, Data?>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a sortable, hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(of:sortOrder:columnCustomization:columns:rows:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(of:sortorder:columncustomization:columns:rows:)",
        "html": "Parameters\nvalueType\n\nThe type of value used to derive the table\u2019s contents.\n\nsortOrder\n\nA binding to the ordered sorting of columns.\n\ncolumnCustomization\n\nA binding to the state of columns.\n\ncolumns\n\nThe columns to display in the table.\n\nrows\n\nThe rows to display in the table.\n\nDiscussion\n\nEach column in the table that should participate in customization is required to have an identifier, specified with customizationID(_:).\n\nSee Also\nCreating a table with dynamically customizable columns\ninit(of: Value.Type, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a table with the given columns and rows that generates its contents using values of the given type and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit(of: Value.Type, selection: Binding<Set<Value.ID>>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a table with the given columns and rows that supports selecting multiple rows that generates its data using values of the given type and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit(of: Value.Type, selection: Binding<Value.ID?>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a table with the given columns and rows that supports selecting zero or one row that generates its data using values of the given type and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(of: Value.Type, selection: Binding<Set<Value.ID>>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting multiple rows and dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(of: Value.Type, selection: Binding<Value.ID?>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting zero or one row and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(_:children:sortOrder:columnCustomization:columns:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(_:children:sortorder:columncustomization:columns:)",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the table rows.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data, and whose nil value represents a leaf row of the hierarchy, which is not capable of having children.\n\nsortOrder\n\nA binding to the ordered sorting of columns.\n\ncolumnCustomization\n\nA binding to the state of columns.\n\ncolumns\n\nThe columns to display in the table.\n\nDiscussion\n\nEach column in the table that should participate in customization is required to have an identifier, specified with customizationID(_:).\n\nSee Also\nCreating a hierarchical table\ninit<Data>(Data, children: KeyPath<Value, Data?>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<Set<Value.ID>>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data, and supports selecting multiple rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<Value.ID?>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data, and supports selecting zero or one row.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<Value.ID?>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a sortable, hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data, and supports selecting zero or one row.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<Set<Value.ID>>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a sortable, hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data, and supports selecting multiple rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "toolbars",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingscenebridgingoptions/toolbars",
        "html": "Discussion\n\nToolbars populated in this manner overwrite any toolbar set on the window using AppKit.\n\nSee Also\nGeting bridging options\nstatic let all: NSHostingSceneBridgingOptions\nThe hosting view\u2019s associated window will have both its title bars and toolbars populated with values from their respective modifiers.\nstatic let title: NSHostingSceneBridgingOptions\nThe hosting view\u2019s associated window will have its title and subtitle populated with the values provided to the navigationTitle(_:) and navigationSubtitle(_:) modifiers, respectively."
    },
    {
        "title": "all",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingscenebridgingoptions/all",
        "html": "See Also\nGeting bridging options\nstatic let title: NSHostingSceneBridgingOptions\nThe hosting view\u2019s associated window will have its title and subtitle populated with the values provided to the navigationTitle(_:) and navigationSubtitle(_:) modifiers, respectively.\nstatic let toolbars: NSHostingSceneBridgingOptions\nThe hosting view\u2019s associated window will have its toolbar populated with any items provided to the toolbar(content:) modifier."
    },
    {
        "title": "title",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingscenebridgingoptions/title",
        "html": "Discussion\n\nTitle bars populated in this manner overwrite any values set using AppKit.\n\nSee Also\nGeting bridging options\nstatic let all: NSHostingSceneBridgingOptions\nThe hosting view\u2019s associated window will have both its title bars and toolbars populated with values from their respective modifiers.\nstatic let toolbars: NSHostingSceneBridgingOptions\nThe hosting view\u2019s associated window will have its toolbar populated with any items provided to the toolbar(content:) modifier."
    },
    {
        "title": "init(rawValue:)",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingscenebridgingoptions/init(rawvalue:)",
        "html": "Parameters\nrawValue\n\nThe raw value with which to create the hosting window options.\n\nSee Also\nCreating a bridging options\nlet rawValue: Int\nThe raw value."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-33gok",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, which will be used to update and reflect the sorting state in a table.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 32-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int32>, content: (RowValue) -> Content)\nCreates a sortable column for 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt32>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt32?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 32-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "rawValue",
        "url": "https://developer.apple.com/documentation/swiftui/nshostingscenebridgingoptions/rawvalue",
        "html": "See Also\nCreating a bridging options\ninit(rawValue: Int)\nCreates a new set from a raw value."
    },
    {
        "title": "pinch",
        "url": "https://developer.apple.com/documentation/swiftui/handactivationbehavior/pinch",
        "html": "See Also\nGetting the behaviors\nstatic let automatic: HandActivationBehavior\nThe default activation behavior, including direct touch, direct pinch, and indirect pinch.\nBeta"
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-8jq2k",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with 64-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int64>, content: (RowValue) -> Content)\nCreates a sortable column for 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int64>, content: (RowValue) -> Content)\nCreates a sortable column for 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int64>, content: (RowValue) -> Content)\nCreates a sortable column for 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt64>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt64>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt64>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "itemProviders(for:)",
        "url": "https://developer.apple.com/documentation/swiftui/dropinfo/itemproviders(for:)-b6fo",
        "html": "Deprecated\n\nUse itemProviders(for:) instead.\n\nDiscussion\n\nThis function is only valid during the performDrop() action.\n\nSee Also\nDeprecated symbols\nfunc hasItemsConforming(to: [String]) -> Bool\nReturns whether at least one item conforms to at least one of the specified uniform type identifiers.\nDeprecated"
    },
    {
        "title": "activate",
        "url": "https://developer.apple.com/documentation/swiftui/focusinteractions/activate",
        "html": "Discussion\n\nOn macOS and iOS, focus-driven activation interactions are only possible when all-controls keyboard navigation is enabled. On tvOS and watchOS, focus-driven activation interactions are always possible.\n\nSee Also\nCreating the interaction types\nstatic var automatic: FocusInteractions\nThe view supports whatever focus-driven interactions are commonly expected for interactive content on the current platform.\nstatic let edit: FocusInteractions\nThe view captures input from non-spatial sources like a keyboard or Digital Crown."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-zl2e",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, which will be used to update and reflect the sorting state in a table.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 64-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int64>, content: (RowValue) -> Content)\nCreates a sortable column for 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int64>, content: (RowValue) -> Content)\nCreates a sortable column for 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int64>, content: (RowValue) -> Content)\nCreates a sortable column for 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt64>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt64>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-67yb6",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 64-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int64>, content: (RowValue) -> Content)\nCreates a sortable column for 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int64>, content: (RowValue) -> Content)\nCreates a sortable column for 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int64>, content: (RowValue) -> Content)\nCreates a sortable column for 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt64>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt64>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt64>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "edit",
        "url": "https://developer.apple.com/documentation/swiftui/focusinteractions/edit",
        "html": "Discussion\n\nViews that support focus-driven editing interactions become focused when the user taps or clicks on them, or when the user issues a focus movement command.\n\nSee Also\nCreating the interaction types\nstatic var automatic: FocusInteractions\nThe view supports whatever focus-driven interactions are commonly expected for interactive content on the current platform.\nstatic let activate: FocusInteractions\nThe view has a primary action that can be activated via focus gestures."
    },
    {
        "title": "itemProviders(for:)",
        "url": "https://developer.apple.com/documentation/swiftui/dropinfo/itemproviders(for:)-93409",
        "html": "Parameters\ncontentTypes\n\nThe uniform type identifiers to query for.\n\nReturn Value\n\nThe item providers that conforms to contentTypes.\n\nDiscussion\n\nThis function is only valid during the performDrop() action.\n\nSee Also\nChecking for items\nfunc hasItemsConforming(to: [UTType]) -> Bool\nIndicates whether at least one item conforms to at least one of the specified uniform type identifiers."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/handactivationbehavior/automatic",
        "html": "See Also\nGetting the behaviors\nstatic let pinch: HandActivationBehavior\nActivation that requires a pinched hand.\nBeta"
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-3y55n",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with 64-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int64>, content: (RowValue) -> Content)\nCreates a sortable column for 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int64>, content: (RowValue) -> Content)\nCreates a sortable column for 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int64>, content: (RowValue) -> Content)\nCreates a sortable column for 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt64>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt64>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/group/init(content:)-36wa3",
        "html": "Parameters\ncontent\n\nA SceneBuilder that produces the scenes to group.\n\nSee Also\nCreating a group\ninit(content: () -> Content)\nCreates a group of views.\nAvailable when Content conforms to View.\ninit(content: () -> Content)\nCreates a group of commands.\nAvailable when Content conforms to Commands.\ninit(content: () -> Content)\nCreates a group of toolbar content instances.\nAvailable when Content conforms to ToolbarContent.\ninit(content: () -> Content)\nCreates a group of customizable toolbar content instances.\nAvailable when Content conforms to CustomizableToolbarContent.\ninit<R>(content: () -> Content)\nCreates a group of table rows.\nAvailable when Content conforms to TableRowContent.\ninit<R, C>(content: () -> Content)\nCreates a group of table columns.\nAvailable when Content conforms to TableColumnContent.\ninit(content: () -> Content)\nCreates an instance that generates Rotor content by combining, in order, all the Rotor content specified in the passed-in result builder.\nAvailable when Content conforms to AccessibilityRotorContent."
    },
    {
        "title": "hasItemsConforming(to:)",
        "url": "https://developer.apple.com/documentation/swiftui/dropinfo/hasitemsconforming(to:)-4qeez",
        "html": "Deprecated\n\nUse hasItemsConforming(to:) instead.\n\nSee Also\nDeprecated symbols\nfunc itemProviders(for: [String]) -> [NSItemProvider]\nReturns an array of items that each conform to at least one of the specified uniform type identifiers.\nDeprecated"
    },
    {
        "title": "hasItemsConforming(to:)",
        "url": "https://developer.apple.com/documentation/swiftui/dropinfo/hasitemsconforming(to:)-47irh",
        "html": "Parameters\ncontentTypes\n\nThe uniform type identifiers to query for.\n\nReturn Value\n\nWhether at least one item conforms to one of contentTypes.\n\nSee Also\nChecking for items\nfunc itemProviders(for: [UTType]) -> [NSItemProvider]\nFinds item providers that conform to at least one of the specified uniform type identifiers."
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-6akzc",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with 64-bit integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int64>, content: (RowValue) -> Content)\nCreates a sortable column for 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int64>, content: (RowValue) -> Content)\nCreates a sortable column for 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int64>, content: (RowValue) -> Content)\nCreates a sortable column for 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt64>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt64>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt64>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 64-bit integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 64-bit integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt64?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned 64-bit integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:id:children:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:id:children:selection:rowcontent:)-7aril",
        "html": "Parameters\ndata\n\nThe data for populating the list.\n\nid\n\nThe key path to the data model\u2019s identifier.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data. A non-nil but empty value denotes a node capable of having children that is currently childless, such as an empty directory in a file system. On the other hand, if the property at the key path is nil, then data is treated as a leaf node in the tree, like a regular file in a file system.\n\nselection\n\nA binding to a selected value.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nSee Also\nListing bound, hierarchical data\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, children: WritableKeyPath<Data.Element, Data?>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, children: KeyPath<Data.Element, Data?>, selection: Binding<SelectionValue>, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, children: WritableKeyPath<Data.Element, Data?>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from a binding to an underlying collection of identifiable data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<SelectionValue>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from a binding to an underlying collection of identifiable data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from a binding to an underlying collection of identifiable data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from a binding to an underlying collection of identifiable data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/focusinteractions/automatic",
        "html": "See Also\nCreating the interaction types\nstatic let activate: FocusInteractions\nThe view has a primary action that can be activated via focus gestures.\nstatic let edit: FocusInteractions\nThe view captures input from non-spatial sources like a keyboard or Digital Crown."
    },
    {
        "title": "init(_:id:editActions:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:id:editactions:selection:rowcontent:)-4q86y",
        "html": "Parameters\ndata\n\nThe identifiable data for computing and to be edited by the list.\n\nid\n\nThe key path to the data model\u2019s identifier.\n\neditActions\n\nThe edit actions that are synthesized on data.\n\nselection\n\nA binding to a set that identifies selected rows.\n\nrowContent\n\nA view builder that creates the view for a single row of\n\nDiscussion\n\nThe following example creates a list to display a collection of favorite foods allowing the user to delete or move elements from the collection, and select multiple elements.\n\nList(\n    $foods,\n    editActions: [.delete, .move],\n    selection: $selectedFoods\n) { $food in\n   HStack {\n       Text(food.name)\n       Toggle(\"Favorite\", isOn: $food.isFavorite)\n   }\n}\n\n\nUse deleteDisabled(_:) and moveDisabled(_:) to disable respectively delete or move actions on a per-row basis.\n\nExplicit DynamicViewContent.onDelete(perform:), DynamicViewContent.onMove(perform:), or View.swipeActions(edge:allowsFullSwipe:content:) modifiers will override any synthesized action\n\nSee Also\nListing editable data\ninit<Data, RowContent>(Binding<Data>, editActions: EditActions<Data>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data and allows to edit the collection.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, editActions: EditActions<Data>, selection: Binding<SelectionValue>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, allows to edit the collection, and requires a selection of a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, editActions: EditActions<Data>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, allows to edit the collection, and optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, editActions: EditActions<Data>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable, allows to edit the collection, and optionally allows users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, editActions: EditActions<Data>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data and allows to edit the collection.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, editActions: EditActions<Data>, selection: Binding<SelectionValue>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable, allows to edit the collection, and requires a selection of a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, editActions: EditActions<Data>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, allows to edit the collection, and optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(minimumDistance:coordinateSpace:)",
        "url": "https://developer.apple.com/documentation/swiftui/draggesture/init(minimumdistance:coordinatespace:)-8ffe5",
        "html": "Parameters\nminimumDistance\n\nThe minimum dragging distance for the gesture to succeed.\n\ncoordinateSpace\n\nThe coordinate space of the dragging gesture\u2019s location.\n\nSee Also\nCreating a drag gesture\nvar minimumDistance: CGFloat\nThe minimum dragging distance before the gesture succeeds.\nvar coordinateSpace: CoordinateSpace\nThe coordinate space in which to receive location values."
    },
    {
        "title": "Value",
        "url": "https://developer.apple.com/documentation/swiftui/focusedvaluekey/value",
        "html": "Required"
    },
    {
        "title": "dropEntered(info:)",
        "url": "https://developer.apple.com/documentation/swiftui/dropdelegate/dropentered(info:)-1omph",
        "html": "Required Default implementation provided.\n\nDiscussion\n\nThe default implementation does nothing.\n\nDefault Implementations\nDropDelegate Implementations\nfunc dropEntered(info: DropInfo)\nTells the delegate a validated drop has entered the modified view.\nSee Also\nReceiving drop information\nfunc dropExited(info: DropInfo)\nTells the delegate a validated drop operation has exited the modified view.\n\nRequired Default implementation provided.\n\nfunc dropUpdated(info: DropInfo) -> DropProposal?\nTells the delegate that a validated drop moved inside the modified view.\n\nRequired Default implementation provided.\n\nfunc validateDrop(info: DropInfo) -> Bool\nTells the delegate that a drop containing items conforming to one of the expected types entered a view that accepts drops.\n\nRequired Default implementation provided.\n\nfunc performDrop(info: DropInfo) -> Bool\nTells the delegate it can request the item provider data from the given information.\n\nRequired"
    },
    {
        "title": "Edge3D.top",
        "url": "https://developer.apple.com/documentation/swiftui/edge3d/top",
        "html": "See Also\nGetting the edges\ncase bottom\nBeta\ncase leading\nBeta\ncase trailing\nBeta\ncase front\nBeta\ncase back\nBeta"
    },
    {
        "title": "DropOperation.cancel",
        "url": "https://developer.apple.com/documentation/swiftui/dropoperation/cancel",
        "html": "See Also\nGetting operation types\ncase copy\nCopy the data to the modified view.\ncase forbidden\nThe drop activity is not allowed at this time or location.\ncase move\nMove the data represented by the drag items instead of copying it."
    },
    {
        "title": "validateDrop(info:)",
        "url": "https://developer.apple.com/documentation/swiftui/dropdelegate/validatedrop(info:)-974fe",
        "html": "Required Default implementation provided.\n\nDiscussion\n\nSpecify the expected types when you apply the drop modifier to the view. The default implementation returns true.\n\nDefault Implementations\nDropDelegate Implementations\nfunc validateDrop(info: DropInfo) -> Bool\nTells the delegate that a drop containing items conforming to one of the expected types entered a view that accepts drops.\nSee Also\nReceiving drop information\nfunc dropEntered(info: DropInfo)\nTells the delegate a validated drop has entered the modified view.\n\nRequired Default implementation provided.\n\nfunc dropExited(info: DropInfo)\nTells the delegate a validated drop operation has exited the modified view.\n\nRequired Default implementation provided.\n\nfunc dropUpdated(info: DropInfo) -> DropProposal?\nTells the delegate that a validated drop moved inside the modified view.\n\nRequired Default implementation provided.\n\nfunc performDrop(info: DropInfo) -> Bool\nTells the delegate it can request the item provider data from the given information.\n\nRequired"
    },
    {
        "title": "projectedValue",
        "url": "https://developer.apple.com/documentation/swiftui/focusstate/projectedvalue",
        "html": "Discussion\n\nWhen focus is outside any view that is bound to this state, the wrapped value is nil for optional-typed state or false for Boolean state.\n\nIn the following example of a simple navigation sidebar, when the user presses the Filter Sidebar Contents button, focus moves to the sidebar\u2019s filter text field. Conversely, if the user moves focus to the sidebar\u2019s filter manually, then the value of isFiltering automatically becomes true, and the sidebar view updates.\n\nstruct Sidebar: View {\n    @State private var filterText = \"\"\n    @FocusState private var isFiltering: Bool\n\n\n    var body: some View {\n        VStack {\n            Button(\"Filter Sidebar Contents\") {\n                isFiltering = true\n            }\n\n\n            TextField(\"Filter\", text: $filterText)\n                .focused($isFiltering)\n        }\n    }\n}\n\nSee Also\nInspecting the focus state\nstruct Binding\nA property wrapper type that can read and write a value that indicates the current focus location.\nvar wrappedValue: Value\nThe current state value, taking into account whatever bindings might be in effect due to the current location of focus."
    },
    {
        "title": "dropUpdated(info:)",
        "url": "https://developer.apple.com/documentation/swiftui/dropdelegate/dropupdated(info:)-8hjzj",
        "html": "Required Default implementation provided.\n\nDiscussion\n\nUse this method to return a drop proposal containing the operation the delegate intends to perform at the drop location. The default implementation of this method returns nil, which tells the drop to use the last valid returned value or else DropOperation.copy.\n\nDefault Implementations\nDropDelegate Implementations\nfunc dropUpdated(info: DropInfo) -> DropProposal?\nTells the delegate that a validated drop moved inside the modified view.\nSee Also\nReceiving drop information\nfunc dropEntered(info: DropInfo)\nTells the delegate a validated drop has entered the modified view.\n\nRequired Default implementation provided.\n\nfunc dropExited(info: DropInfo)\nTells the delegate a validated drop operation has exited the modified view.\n\nRequired Default implementation provided.\n\nfunc validateDrop(info: DropInfo) -> Bool\nTells the delegate that a drop containing items conforming to one of the expected types entered a view that accepts drops.\n\nRequired Default implementation provided.\n\nfunc performDrop(info: DropInfo) -> Bool\nTells the delegate it can request the item provider data from the given information.\n\nRequired"
    },
    {
        "title": "init(operation:)",
        "url": "https://developer.apple.com/documentation/swiftui/dropproposal/init(operation:)",
        "html": "See Also\nCreating a drop proposal\nlet operation: DropOperation\nThe drop operation that the drop proposes to perform."
    },
    {
        "title": "operation",
        "url": "https://developer.apple.com/documentation/swiftui/dropproposal/operation",
        "html": "See Also\nCreating a drop proposal\ninit(operation: DropOperation)"
    },
    {
        "title": "Edge3D.bottom",
        "url": "https://developer.apple.com/documentation/swiftui/edge3d/bottom",
        "html": "See Also\nGetting the edges\ncase top\nBeta\ncase leading\nBeta\ncase trailing\nBeta\ncase front\nBeta\ncase back\nBeta"
    },
    {
        "title": "init(_:value:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:content:)-3qth7",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, which will be used to update and reflect the sorting state in a table.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with integers\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int>, content: (RowValue) -> Content)\nCreates a sortable column for integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int>, content: (RowValue) -> Content)\nCreates a sortable column for integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, Int?>, content: (RowValue) -> Content)\nCreates a sortable column for optional integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, Int?>, content: (RowValue) -> Content)\nCreates a sortable column for optional integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, Int?>, content: (RowValue) -> Content)\nCreates a sortable column for optional integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt>, content: (RowValue) -> Content)\nCreates a sortable column for unsigned integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, UInt?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned integer values that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, UInt?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned integer values that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, UInt?>, content: (RowValue) -> Content)\nCreates a sortable column for optional unsigned integer values with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "Edge3D.back",
        "url": "https://developer.apple.com/documentation/swiftui/edge3d/back",
        "html": "See Also\nGetting the edges\ncase top\nBeta\ncase bottom\nBeta\ncase leading\nBeta\ncase trailing\nBeta\ncase front\nBeta"
    },
    {
        "title": "init(_:value:comparator:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:comparator:content:)-454xr",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncomparator\n\nThe specific comparator to compare string values.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a column with strings\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and generates its label from a localized string key.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and generates its label from a string.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property and has a text label.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates an unsortable column that displays a string property, and which generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and which generates its label from a string.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates an unsortable column that displays a string property and has a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:comparator:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:comparator:content:)-7lls7",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state.\n\ncomparator\n\nThe specific comparator to compare string values.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with strings\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and generates its label from a localized string key.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and generates its label from a string.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property and has a text label.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates an unsortable column that displays a string property, and which generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and which generates its label from a string.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates an unsortable column that displays a string property and has a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:comparator:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:comparator:)-6mjmg",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, used to update the table\u2019s sorting state and to display as verbatim text in each row.\n\ncomparator\n\nThe specific comparator to compare string values.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with strings\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and generates its label from a localized string key.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and generates its label from a string.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property and has a text label.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates an unsortable column that displays a string property, and which generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates an unsortable column that displays a string property and has a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:children:selection:sortOrder:columnCustomization:columns:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(_:children:selection:sortorder:columncustomization:columns:)-1mvsp",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the table rows.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data, and whose nil value represents a leaf row of the hierarchy, which is not capable of having children.\n\nselection\n\nA binding to the optional selected row ID.\n\nsortOrder\n\nA binding to the ordered sorting of columns.\n\ncolumnCustomization\n\nA binding to the state of columns.\n\ncolumns\n\nThe columns to display in the table.\n\nDiscussion\n\nEach column in the table that should participate in customization is required to have an identifier, specified with customizationID(_:).\n\nSee Also\nCreating a hierarchical table\ninit<Data>(Data, children: KeyPath<Value, Data?>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<Set<Value.ID>>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data, and supports selecting multiple rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<Value.ID?>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data, and supports selecting zero or one row.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<Set<Value.ID>>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a sortable, hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data, and supports selecting multiple rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, children: KeyPath<Data.Element, Data?>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a sortable, hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(_:sortOrder:columns:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(_:sortorder:columns:)",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the table rows.\n\nsortOrder\n\nA binding to the ordered sorting of columns.\n\ncolumns\n\nThe columns to display in the table.\n\nSee Also\nCreating a sortable table from columns\ninit<Data, Sort>(Data, selection: Binding<Value.ID?>, sortOrder: Binding<[Sort]>, columns: () -> Columns)\nCreates a sortable table that computes its rows based on a collection of identifiable data, and supports selecting zero or one row.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, selection: Binding<Set<Value.ID>>, sortOrder: Binding<[Sort]>, columns: () -> Columns)\nCreates a sortable table that computes its rows based on a collection of identifiable data, and supports selecting multiple rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(_:value:comparator:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:comparator:)-7qx7o",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column, to display verbatim as text in each row of a table, and the key path used to create a sort comparator when sorting the column.\n\ncomparator\n\nThe SortComparator used to order the string values.\n\nDiscussion\n\nThis initializer creates a Text view for you, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with strings\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and generates its label from a localized string key.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property and has a text label.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates an unsortable column that displays a string property, and which generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and which generates its label from a string.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates an unsortable column that displays a string property and has a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:value:comparator:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:comparator:)-2jbdz",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column, to display verbatim as text in each row of a table, and the key path used to create a sort comparator when sorting the column.\n\ncomparator\n\nThe SortComparator used to order the string values.\n\nDiscussion\n\nThis initializer creates a Text view for you, and treats the title similar to init(_:). For more information about localizing strings, see Text.\n\nSee Also\nCreating a column with strings\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and generates its label from a localized string key.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and generates its label from a string.\nAvailable when RowValue conforms to Identifiable, Sort is KeyPathComparator<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates an unsortable column that displays a string property, and which generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates a sortable column that displays a string property, and which generates its label from a string.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator)\nCreates an unsortable column that displays a string property and has a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that generates its label from a localized string key.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column that displays a string property.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String?>, comparator: String.StandardComparator, content: (RowValue) -> Content)\nCreates a sortable column with a text label.\nAvailable when RowValue inherits NSObject, RowValue conforms to Identifiable, Sort is SortDescriptor<RowValue>, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:children:selection:columnCustomization:columns:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(_:children:selection:columncustomization:columns:)-3qah0",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the table rows.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data, and whose nil value represents a leaf row of the hierarchy, which is not capable of having children.\n\nselection\n\nA binding to a set that identifies selected rows IDs.\n\ncolumnCustomization\n\nA binding to the state of columns.\n\ncolumns\n\nThe columns to display in the table.\n\nDiscussion\n\nEach column in the table that should participate in customization is required to have an identifier, specified with customizationID(_:).\n\nSee Also\nCreating a hierarchical table\ninit<Data>(Data, children: KeyPath<Value, Data?>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<Value.ID?>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data, and supports selecting zero or one row.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<Value.ID?>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a sortable, hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data, and supports selecting zero or one row.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<Set<Value.ID>>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a sortable, hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data, and supports selecting multiple rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, children: KeyPath<Data.Element, Data?>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)\nCreates a sortable, hierarchical table that computes its rows based on a collection of identifiable data and key path to the children of that data.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(_:value:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:)-7nxlh",
        "html": "Parameters\ntitle\n\nA string that describes the column.\n\nvalue\n\nThe path to the property associated with the column. The table uses this to display the property as verbatim text in each row of the table.\n\nDiscussion\n\nThis initializer creates a Text view for you, and treats the title similar to init(_:). For information about localizing strings, see Text.\n\nSee Also\nCreating an unsortable column\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>)\nCreates an unsortable column that displays a string property that generates its label from a localized string key.\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>)\nCreates an unsortable column that displays a string property with a text label.\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, content: (RowValue) -> Content)\nCreates an unsortable column that generates its label from a localized string key.\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text.\ninit<S>(S, content: (RowValue) -> Content)\nCreates an unsortable column that generates its label from a string.\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text.\ninit(Text, content: (RowValue) -> Content)\nCreates an unsortable column with a text label\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:selection:sortOrder:columns:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(_:selection:sortorder:columns:)-403wb",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the table rows.\n\nselection\n\nA binding to a set that identifies selected rows IDs.\n\nsortOrder\n\nA binding to the ordered sorting of columns.\n\ncolumns\n\nThe columns to display in the table.\n\nSee Also\nCreating a sortable table from columns\ninit<Data, Sort>(Data, sortOrder: Binding<[Sort]>, columns: () -> Columns)\nCreates a sortable table that computes its rows based on a collection of identifiable data.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, selection: Binding<Value.ID?>, sortOrder: Binding<[Sort]>, columns: () -> Columns)\nCreates a sortable table that computes its rows based on a collection of identifiable data, and supports selecting zero or one row.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:content:)-pj56",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view for you, and treats the title similar to init(_:). For information about localizing strings, see Text.\n\nSee Also\nCreating an unsortable column\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>)\nCreates an unsortable column that displays a string property that generates its label from a localized string key.\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>)\nCreates an unsortable column that displays a string property that generates its label from a string.\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>)\nCreates an unsortable column that displays a string property with a text label.\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, content: (RowValue) -> Content)\nCreates an unsortable column that generates its label from a localized string key.\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text.\ninit<S>(S, content: (RowValue) -> Content)\nCreates an unsortable column that generates its label from a string.\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:columns:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(_:columns:)",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the table rows.\n\ncolumns\n\nThe columns to display in the table.\n\nSee Also\nCreating a table from columns\ninit<Data>(Data, selection: Binding<Value.ID?>, columns: () -> Columns)\nCreates a table that computes its rows based on a collection of identifiable data, and that supports selecting zero or one row.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data>(Data, selection: Binding<Set<Value.ID>>, columns: () -> Columns)\nCreates a table that computes its rows based on a collection of identifiable data, and that supports selecting multiple rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(_:value:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:)-8ry6n",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\nvalue\n\nThe path to the property associated with the column. The table uses this to display the property as verbatim text in each row of the table.\n\nDiscussion\n\nThis initializer creates a Text view for you, and treats the localized key similar to init(_:tableName:bundle:comment:). For more information about localizing strings, see Text.\n\nSee Also\nCreating an unsortable column\ninit<S>(S, value: KeyPath<RowValue, String>)\nCreates an unsortable column that displays a string property that generates its label from a string.\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>)\nCreates an unsortable column that displays a string property with a text label.\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, content: (RowValue) -> Content)\nCreates an unsortable column that generates its label from a localized string key.\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text.\ninit<S>(S, content: (RowValue) -> Content)\nCreates an unsortable column that generates its label from a string.\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text.\ninit(Text, content: (RowValue) -> Content)\nCreates an unsortable column with a text label\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(_:selection:sortOrder:columns:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(_:selection:sortorder:columns:)-27rpv",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the table rows.\n\nselection\n\nA binding to the optional selected row ID.\n\nsortOrder\n\nA binding to the ordered sorting of columns.\n\ncolumns\n\nThe columns to display in the table.\n\nSee Also\nCreating a sortable table from columns\ninit<Data, Sort>(Data, sortOrder: Binding<[Sort]>, columns: () -> Columns)\nCreates a sortable table that computes its rows based on a collection of identifiable data.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data, Sort>(Data, selection: Binding<Set<Value.ID>>, sortOrder: Binding<[Sort]>, columns: () -> Columns)\nCreates a sortable table that computes its rows based on a collection of identifiable data, and supports selecting multiple rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(_:value:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:value:)-lb21",
        "html": "Parameters\ntext\n\nThe column\u2019s label.\n\nvalue\n\nThe path to the property associated with the column. The table uses this to display the property as verbatim text in each row of the table.\n\nDiscussion\n\nThis initializer creates a Text view for you, and treats the localized key similar to init(_:tableName:bundle:comment:). For more information about localizing strings, see Text.\n\nSee Also\nCreating an unsortable column\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>)\nCreates an unsortable column that displays a string property that generates its label from a localized string key.\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>)\nCreates an unsortable column that displays a string property that generates its label from a string.\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text.\ninit(LocalizedStringKey, content: (RowValue) -> Content)\nCreates an unsortable column that generates its label from a localized string key.\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text.\ninit<S>(S, content: (RowValue) -> Content)\nCreates an unsortable column that generates its label from a string.\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text.\ninit(Text, content: (RowValue) -> Content)\nCreates an unsortable column with a text label\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(of:selection:columnCustomization:columns:rows:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(of:selection:columncustomization:columns:rows:)-424le",
        "html": "Parameters\nvalueType\n\nThe type of value used to derive the table\u2019s contents.\n\nselection\n\nA binding to a set that identifies the selected rows IDs.\n\ncolumnCustomization\n\nA binding to the state of columns.\n\ncolumns\n\nThe columns to display in the table.\n\nrows\n\nThe rows to display in the table.\n\nDiscussion\n\nEach column in the table that should participate in customization is required to have an identifier, specified with customizationID(_:).\n\nSee Also\nCreating a table with dynamically customizable columns\ninit(of: Value.Type, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a table with the given columns and rows that generates its contents using values of the given type and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit(of: Value.Type, selection: Binding<Value.ID?>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a table with the given columns and rows that supports selecting zero or one row that generates its data using values of the given type and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(of: Value.Type, selection: Binding<Set<Value.ID>>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting multiple rows and dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(of: Value.Type, selection: Binding<Value.ID?>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting zero or one row and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(of: Value.Type, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows and has dynamically customizable columns.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(sortOrder:columns:rows:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(sortorder:columns:rows:)",
        "html": "Parameters\nsortOrder\n\nA binding to the ordered sorting of columns.\n\ncolumns\n\nThe columns to display in the table.\n\nrows\n\nThe rows to display in the table.\n\nSee Also\nCreating a sortable table from columns and rows\ninit<Sort>(of: Value.Type, sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(of: Value.Type, selection: Binding<Value.ID?>, sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting zero or one row.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(of: Value.Type, selection: Binding<Set<Value.ID>>, sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting multiple rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(selection: Binding<Value.ID?>, sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting zero or one row.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(selection: Binding<Set<Value.ID>>, sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting multiple rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(_:selection:columns:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(_:selection:columns:)-89b6",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the table rows.\n\nselection\n\nA binding to the optional selected row ID.\n\ncolumns\n\nThe columns to display in the table.\n\nSee Also\nCreating a table from columns\ninit<Data>(Data, columns: () -> Columns)\nCreates a table that computes its rows based on a collection of identifiable data.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data>(Data, selection: Binding<Set<Value.ID>>, columns: () -> Columns)\nCreates a table that computes its rows based on a collection of identifiable data, and that supports selecting multiple rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(_:selection:columns:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(_:selection:columns:)-5ccsa",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the table rows.\n\nselection\n\nA binding to a set that identifies selected rows IDs.\n\ncolumns\n\nThe columns to display in the table.\n\nSee Also\nCreating a table from columns\ninit<Data>(Data, columns: () -> Columns)\nCreates a table that computes its rows based on a collection of identifiable data.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Data>(Data, selection: Binding<Value.ID?>, columns: () -> Columns)\nCreates a table that computes its rows based on a collection of identifiable data, and that supports selecting zero or one row.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(of:selection:sortOrder:columns:rows:)",
        "url": "https://developer.apple.com/documentation/swiftui/table/init(of:selection:sortorder:columns:rows:)-6max4",
        "html": "Parameters\nvalueType\n\nThe type of value used to derive the table\u2019s contents.\n\nselection\n\nA binding to the optional selected row ID.\n\nsortOrder\n\nA binding to the ordered sorting of columns.\n\ncolumns\n\nThe columns to display in the table.\n\nrows\n\nThe rows to display in the table.\n\nSee Also\nCreating a sortable table from columns and rows\ninit<Sort>(of: Value.Type, sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(of: Value.Type, selection: Binding<Set<Value.ID>>, sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting multiple rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(selection: Binding<Value.ID?>, sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting zero or one row.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue.\ninit<Sort>(selection: Binding<Set<Value.ID>>, sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)\nCreates a sortable table with the given columns and rows that supports selecting multiple rows.\nAvailable when Value is Rows.TableRowValue, Rows conforms to TableRowContent, Columns conforms to TableColumnContent, and Rows.TableRowValue is Columns.TableRowValue."
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumn/init(_:content:)-52cmd",
        "html": "Parameters\ntitleKey\n\nThe key for the column\u2019s localized title.\n\ncontent\n\nThe view content to display for each row in a table.\n\nDiscussion\n\nThis initializer creates a Text view for you, and treats the localized key similar to init(_:tableName:bundle:comment:). For more information about localizing strings, see Text.\n\nSee Also\nCreating an unsortable column\ninit(LocalizedStringKey, value: KeyPath<RowValue, String>)\nCreates an unsortable column that displays a string property that generates its label from a localized string key.\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text.\ninit<S>(S, value: KeyPath<RowValue, String>)\nCreates an unsortable column that displays a string property that generates its label from a string.\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text.\ninit(Text, value: KeyPath<RowValue, String>)\nCreates an unsortable column that displays a string property with a text label.\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text.\ninit<S>(S, content: (RowValue) -> Content)\nCreates an unsortable column that generates its label from a string.\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text.\ninit(Text, content: (RowValue) -> Content)\nCreates an unsortable column with a text label\nAvailable when RowValue conforms to Identifiable, Sort is Never, Content conforms to View, and Label is Text."
    },
    {
        "title": "init(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/group/init(content:)-65xrc",
        "html": "Parameters\ncontent\n\nA CommandsBuilder that produces the commands to group.\n\nSee Also\nCreating a group\ninit(content: () -> Content)\nCreates a group of views.\nAvailable when Content conforms to View.\ninit(content: () -> Content)\nCreates a group of scenes.\nAvailable when Content conforms to Scene.\ninit(content: () -> Content)\nCreates a group of toolbar content instances.\nAvailable when Content conforms to ToolbarContent.\ninit(content: () -> Content)\nCreates a group of customizable toolbar content instances.\nAvailable when Content conforms to CustomizableToolbarContent.\ninit<R>(content: () -> Content)\nCreates a group of table rows.\nAvailable when Content conforms to TableRowContent.\ninit<R, C>(content: () -> Content)\nCreates a group of table columns.\nAvailable when Content conforms to TableColumnContent.\ninit(content: () -> Content)\nCreates an instance that generates Rotor content by combining, in order, all the Rotor content specified in the passed-in result builder.\nAvailable when Content conforms to AccessibilityRotorContent."
    },
    {
        "title": "init(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/group/init(content:)-96c8d",
        "html": "Parameters\ncontent\n\nA ToolbarContentBuilder that produces the toolbar content instances to group.\n\nSee Also\nCreating a group\ninit(content: () -> Content)\nCreates a group of views.\nAvailable when Content conforms to View.\ninit(content: () -> Content)\nCreates a group of scenes.\nAvailable when Content conforms to Scene.\ninit(content: () -> Content)\nCreates a group of commands.\nAvailable when Content conforms to Commands.\ninit(content: () -> Content)\nCreates a group of customizable toolbar content instances.\nAvailable when Content conforms to CustomizableToolbarContent.\ninit<R>(content: () -> Content)\nCreates a group of table rows.\nAvailable when Content conforms to TableRowContent.\ninit<R, C>(content: () -> Content)\nCreates a group of table columns.\nAvailable when Content conforms to TableColumnContent.\ninit(content: () -> Content)\nCreates an instance that generates Rotor content by combining, in order, all the Rotor content specified in the passed-in result builder.\nAvailable when Content conforms to AccessibilityRotorContent."
    },
    {
        "title": "NSViewRepresentable.Context",
        "url": "https://developer.apple.com/documentation/swiftui/nsviewrepresentable/context",
        "html": "See Also\nCreating and updating the view\nfunc makeNSView(context: Self.Context) -> Self.NSViewType\nCreates the view object and configures its initial state.\n\nRequired\n\nfunc updateNSView(Self.NSViewType, context: Self.Context)\nUpdates the state of the specified view with new information from SwiftUI.\n\nRequired\n\nassociatedtype NSViewType : NSView\nThe type of view to present.\n\nRequired"
    },
    {
        "title": "Coordinator",
        "url": "https://developer.apple.com/documentation/swiftui/nsviewcontrollerrepresentable/coordinator",
        "html": "Required\n\nSee Also\nProviding a custom coordinator object\nfunc makeCoordinator() -> Self.Coordinator\nCreates the custom object that you use to communicate changes from your view controller to other parts of your SwiftUI interface.\n\nRequired Default implementation provided."
    },
    {
        "title": "init(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/group/init(content:)-2sr41",
        "html": "Parameters\ncontent\n\nA ToolbarContentBuilder that produces the customizable toolbar content instances to group.\n\nSee Also\nCreating a group\ninit(content: () -> Content)\nCreates a group of views.\nAvailable when Content conforms to View.\ninit(content: () -> Content)\nCreates a group of scenes.\nAvailable when Content conforms to Scene.\ninit(content: () -> Content)\nCreates a group of commands.\nAvailable when Content conforms to Commands.\ninit(content: () -> Content)\nCreates a group of toolbar content instances.\nAvailable when Content conforms to ToolbarContent.\ninit<R>(content: () -> Content)\nCreates a group of table rows.\nAvailable when Content conforms to TableRowContent.\ninit<R, C>(content: () -> Content)\nCreates a group of table columns.\nAvailable when Content conforms to TableColumnContent.\ninit(content: () -> Content)\nCreates an instance that generates Rotor content by combining, in order, all the Rotor content specified in the passed-in result builder.\nAvailable when Content conforms to AccessibilityRotorContent."
    },
    {
        "title": "init(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/group/init(content:)-9cc4k",
        "html": "Parameters\ncontent\n\nA TableColumnBuilder that produces the columns to group.\n\nSee Also\nCreating a group\ninit(content: () -> Content)\nCreates a group of views.\nAvailable when Content conforms to View.\ninit(content: () -> Content)\nCreates a group of scenes.\nAvailable when Content conforms to Scene.\ninit(content: () -> Content)\nCreates a group of commands.\nAvailable when Content conforms to Commands.\ninit(content: () -> Content)\nCreates a group of toolbar content instances.\nAvailable when Content conforms to ToolbarContent.\ninit(content: () -> Content)\nCreates a group of customizable toolbar content instances.\nAvailable when Content conforms to CustomizableToolbarContent.\ninit<R>(content: () -> Content)\nCreates a group of table rows.\nAvailable when Content conforms to TableRowContent.\ninit(content: () -> Content)\nCreates an instance that generates Rotor content by combining, in order, all the Rotor content specified in the passed-in result builder.\nAvailable when Content conforms to AccessibilityRotorContent."
    },
    {
        "title": "init(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/group/init(content:)-6rgta",
        "html": "Parameters\ncontent\n\nThe result builder that generates Rotor content for the group.\n\nSee Also\nCreating a group\ninit(content: () -> Content)\nCreates a group of views.\nAvailable when Content conforms to View.\ninit(content: () -> Content)\nCreates a group of scenes.\nAvailable when Content conforms to Scene.\ninit(content: () -> Content)\nCreates a group of commands.\nAvailable when Content conforms to Commands.\ninit(content: () -> Content)\nCreates a group of toolbar content instances.\nAvailable when Content conforms to ToolbarContent.\ninit(content: () -> Content)\nCreates a group of customizable toolbar content instances.\nAvailable when Content conforms to CustomizableToolbarContent.\ninit<R>(content: () -> Content)\nCreates a group of table rows.\nAvailable when Content conforms to TableRowContent.\ninit<R, C>(content: () -> Content)\nCreates a group of table columns.\nAvailable when Content conforms to TableColumnContent."
    },
    {
        "title": "dismantleUIView(_:coordinator:)",
        "url": "https://developer.apple.com/documentation/swiftui/uiviewrepresentable/dismantleuiview(_:coordinator:)-5lee7",
        "html": "Required Default implementation provided.\n\nParameters\nuiView\n\nYour custom view object.\n\ncoordinator\n\nThe custom coordinator instance you use to communicate changes back to SwiftUI. If you do not use a custom coordinator, the system provides a default instance.\n\nDiscussion\n\nUse this method to perform additional clean-up work related to your custom view. For example, you might use this method to remove observers or update other parts of your SwiftUI interface.\n\nDefault Implementations\nUIViewRepresentable Implementations\nstatic func dismantleUIView(Self.UIViewType, coordinator: Self.Coordinator)\nCleans up the presented UIKit view (and coordinator) in anticipation of their removal."
    },
    {
        "title": "makeNSView(context:)",
        "url": "https://developer.apple.com/documentation/swiftui/nsviewrepresentable/makensview(context:)",
        "html": "Required\n\nParameters\ncontext\n\nA context structure containing information about the current state of the system.\n\nReturn Value\n\nYour AppKit view configured with the provided information.\n\nDiscussion\n\nYou must implement this method and use it to create your view object. Configure the view using your app\u2019s current data and contents of the context parameter. The system calls this method only once, when it creates your view for the first time. For all subsequent updates, the system calls the updateNSView(_:context:) method.\n\nSee Also\nCreating and updating the view\nfunc updateNSView(Self.NSViewType, context: Self.Context)\nUpdates the state of the specified view with new information from SwiftUI.\n\nRequired\n\ntypealias Context\nassociatedtype NSViewType : NSView\nThe type of view to present.\n\nRequired"
    },
    {
        "title": "updateNSView(_:context:)",
        "url": "https://developer.apple.com/documentation/swiftui/nsviewrepresentable/updatensview(_:context:)",
        "html": "Required\n\nParameters\nnsView\n\nYour custom view object.\n\ncontext\n\nA context structure containing information about the current state of the system.\n\nDiscussion\n\nWhen the state of your app changes, SwiftUI updates the portions of your interface affected by those changes. SwiftUI calls this method for any changes affecting the corresponding AppKit view. Use this method to update the configuration of your view to match the new state information provided in the context parameter.\n\nSee Also\nCreating and updating the view\nfunc makeNSView(context: Self.Context) -> Self.NSViewType\nCreates the view object and configures its initial state.\n\nRequired\n\ntypealias Context\nassociatedtype NSViewType : NSView\nThe type of view to present.\n\nRequired"
    },
    {
        "title": "count",
        "url": "https://developer.apple.com/documentation/swiftui/spatialtapgesture/count",
        "html": "See Also\nCreating a spatial tap gesture\ninit(count: Int, coordinateSpace: some CoordinateSpaceProtocol)\nCreates a tap gesture with the number of required taps and the coordinate space of the gesture\u2019s location.\nvar coordinateSpace: CoordinateSpace\nThe coordinate space in which to receive location values."
    },
    {
        "title": "init(_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/exclusivegesture/init(_:_:)",
        "html": "Parameters\nfirst\n\nThe first of two gestures. This gesture has precedence over the other gesture.\n\nsecond\n\nThe second of two gestures.\n\nSee Also\nCreating the gesture\nvar first: First\nThe first of two gestures.\nvar second: Second\nThe second of two gestures."
    },
    {
        "title": "makeCoordinator()",
        "url": "https://developer.apple.com/documentation/swiftui/nsviewrepresentable/makecoordinator()-78uo0",
        "html": "Required Default implementation provided.\n\nDiscussion\n\nImplement this method if changes to your view might affect other parts of your app. In your implementation, create a custom Swift instance that can communicate with other parts of your interface. For example, you might provide an instance that binds its variables to SwiftUI properties, causing the two to remain synchronized. If your view doesn\u2019t interact with other parts of your app, you don\u2019t have to provide a coordinator.\n\nSwiftUI calls this method before calling the makeNSView(context:) method. The system provides your coordinator instance either directly or as part of a context structure when calling the other methods of your representable instance.\n\nDefault Implementations\nNSViewRepresentable Implementations\nfunc makeCoordinator() -> Self.Coordinator\nCreates a Coordinator instance to coordinate with the NSView.\nAvailable when Coordinator is ().\nSee Also\nProviding a custom coordinator object\nassociatedtype Coordinator = Void\nA type to coordinate with the view.\n\nRequired"
    },
    {
        "title": "NSViewType",
        "url": "https://developer.apple.com/documentation/swiftui/nsviewrepresentable/nsviewtype",
        "html": "Required\n\nSee Also\nCreating and updating the view\nfunc makeNSView(context: Self.Context) -> Self.NSViewType\nCreates the view object and configures its initial state.\n\nRequired\n\nfunc updateNSView(Self.NSViewType, context: Self.Context)\nUpdates the state of the specified view with new information from SwiftUI.\n\nRequired\n\ntypealias Context"
    },
    {
        "title": "ignore",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitychildbehavior/ignore",
        "html": "Discussion\n\nUse this behavior when you want a view represented by a single accessibility element. The new accessibility element has no initial properties. So you will need to use other accessibility modifiers, such as accessibilityLabel(_:), to begin making it accessible.\n\nvar body: some View {\n    VStack {\n        Button(\"Previous Page\", action: goBack)\n        Text(\"\\(pageNumber)\")\n        Button(\"Next Page\", action: goForward)\n    }\n    .accessibilityElement(children: .ignore)\n    .accessibilityValue(\"Page \\(pageNumber) of \\(pages.count)\")\n    .accessibilityAdjustableAction { action in\n        if action == .increment {\n            goForward()\n        } else {\n            goBack()\n        }\n    }\n}\n\n\nBefore using the ignorebehavior, consider using the combine behavior.\n\nNote\n\nA new accessibility element is always created.\n\nSee Also\nGetting behaviors\nstatic let combine: AccessibilityChildBehavior\nAny child accessibility element\u2019s properties are merged into the new accessibility element.\nstatic let contain: AccessibilityChildBehavior\nAny child accessibility elements become children of the new accessibility element."
    },
    {
        "title": "SimultaneousGesture.Value",
        "url": "https://developer.apple.com/documentation/swiftui/simultaneousgesture/value",
        "html": "Topics\nGetting gesture values\nvar first: First.Value?\nThe value of the first gesture.\nvar second: Second.Value?\nThe value of the second gesture.\nRelationships\nConforms To\nEquatable\nHashable\nSendable"
    },
    {
        "title": "init(_:id:children:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:id:children:selection:rowcontent:)-yvmu",
        "html": "Parameters\ndata\n\nThe data for populating the list.\n\nid\n\nThe key path to the data model\u2019s identifier.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data. A non-nil but empty value denotes a node capable of having children that is currently childless, such as an empty directory in a file system. On the other hand, if the property at the key path is nil, then data is treated as a leaf node in the tree, like a regular file in a file system.\n\nselection\n\nA binding to a non optional selected value.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nSee Also\nListing bound, hierarchical data\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, children: WritableKeyPath<Data.Element, Data?>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, children: WritableKeyPath<Data.Element, Data?>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from a binding to an underlying collection of identifiable data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<SelectionValue>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from a binding to an underlying collection of identifiable data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from a binding to an underlying collection of identifiable data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from a binding to an underlying collection of identifiable data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/simultaneousgesture/init(_:_:)",
        "html": "Parameters\nfirst\n\nThe first of two gestures that can happen simultaneously.\n\nsecond\n\nThe second of two gestures that can happen simultaneously.\n\nSee Also\nCreating the gesture\nvar first: First\nThe first of two gestures that can happen simultaneously.\nvar second: Second\nThe second of two gestures that can happen simultaneously."
    },
    {
        "title": "first",
        "url": "https://developer.apple.com/documentation/swiftui/sequencegesture/first",
        "html": "See Also\nCreating the gesture\ninit(First, Second)\nCreates a sequence gesture with two gestures.\nvar second: Second\nThe second gesture in a sequence of two gestures."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/anygesture/init(_:)",
        "html": "Parameters\ngesture\n\nA gesture that you use to create a new gesture."
    },
    {
        "title": "contain",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitychildbehavior/contain",
        "html": "Discussion\n\nUse this behavior when you want a view to be an accessibility container. An accessibility container groups child accessibility elements which improves navigation. For example, all children of an accessibility container are navigated in order before navigating through the next accessibility container.\n\nvar body: some View {\n    ScrollView {\n        VStack {\n            HStack {\n                ForEach(users) { user in\n                    UserCell(user)\n                }\n            }\n            .accessibilityElement(children: .contain)\n            .accessibilityLabel(\"Users\")\n\n\n            VStack {\n                ForEach(messages) { message in\n                    MessageCell(message)\n                }\n            }\n            .accessibilityElement(children: .contain)\n            .accessibilityLabel(\"Messages\")\n        }\n    }\n}\n\n\nA new accessibility element is created when:\n\nThe view contains multiple or zero accessibility elements\n\nThe view contains a single accessibility element with no children\n\nNote\n\nIf an accessibility element is not created, the AccessibilityChildBehavior of the existing accessibility element is modified.\n\nSee Also\nGetting behaviors\nstatic let combine: AccessibilityChildBehavior\nAny child accessibility element\u2019s properties are merged into the new accessibility element.\nstatic let ignore: AccessibilityChildBehavior\nAny child accessibility elements become hidden."
    },
    {
        "title": "minimumAngleDelta",
        "url": "https://developer.apple.com/documentation/swiftui/rotategesture3d/minimumangledelta",
        "html": "See Also\nCreating the gesture\ninit(constrainedToAxis: RotationAxis3D?, minimumAngleDelta: Angle)\nCreates a rotation gesture with a minimum delta for the gesture to start and axis to constrain measurement of rotation.\nBeta\nvar constrainedAxis: RotationAxis3D?\nAn axis around which the rotation is constrained.\nBeta"
    },
    {
        "title": "init(constrainedToAxis:minimumAngleDelta:)",
        "url": "https://developer.apple.com/documentation/swiftui/rotategesture3d/init(constrainedtoaxis:minimumangledelta:)",
        "html": "Parameters\nconstrainedToAxis\n\nThe 3D axis about which rotation is measured.\n\nminimumAngleDelta\n\nThe minimum delta required before the gesture starts. The default value is a one-degree angle.\n\nDiscussion\n\nIf the constrained axis is nil, the gesture measures unconstrained 3D rotation.\n\nSee Also\nCreating the gesture\nvar minimumAngleDelta: Angle\nThe minimum angle delta before the gesture becomes active.\nBeta\nvar constrainedAxis: RotationAxis3D?\nAn axis around which the rotation is constrained.\nBeta"
    },
    {
        "title": "SequenceGesture.Value",
        "url": "https://developer.apple.com/documentation/swiftui/sequencegesture/value",
        "html": "Topics\nGetting gesture values\ncase first(First.Value)\nThe first gesture hasn\u2019t ended.\ncase second(First.Value, Second.Value?)\nThe first gesture has ended.\nRelationships\nConforms To\nEquatable\nSendable"
    },
    {
        "title": "init(_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/sequencegesture/init(_:_:)",
        "html": "Parameters\nfirst\n\nThe first gesture of the sequence.\n\nsecond\n\nThe second gesture of the sequence.\n\nSee Also\nCreating the gesture\nvar first: First\nThe first gesture in a sequence of two gestures.\nvar second: Second\nThe second gesture in a sequence of two gestures."
    },
    {
        "title": "first",
        "url": "https://developer.apple.com/documentation/swiftui/exclusivegesture/first",
        "html": "See Also\nCreating the gesture\ninit(First, Second)\nCreates a gesture from two gestures where only one of them succeeds.\nvar second: Second\nThe second of two gestures."
    },
    {
        "title": "init(_:id:editActions:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:id:editactions:selection:rowcontent:)-5h3ik",
        "html": "Parameters\ndata\n\nThe identifiable data for computing and to be edited by the list.\n\nid\n\nThe key path to the data model\u2019s identifier.\n\neditActions\n\nThe edit actions that are synthesized on data.\n\nselection\n\nA binding to a non optional selected value.\n\nrowContent\n\nA view builder that creates the view for a single row of\n\nDiscussion\n\nThe following example creates a list to display a collection of favorite foods allowing the user to delete or move elements from the collection, and selects a single row.\n\nList(\n    $foods,\n    editActions: [.delete, .move],\n    selection: $selectedFood\n) { $food in\n   HStack {\n       Text(food.name)\n       Toggle(\"Favorite\", isOn: $food.isFavorite)\n   }\n}\n\n\nUse deleteDisabled(_:) and moveDisabled(_:) to disable respectively delete or move actions on a per-row basis.\n\nExplicit DynamicViewContent.onDelete(perform:), DynamicViewContent.onMove(perform:), or View.swipeActions(edge:allowsFullSwipe:content:) modifiers will override any synthesized action\n\nSee Also\nListing editable data\ninit<Data, RowContent>(Binding<Data>, editActions: EditActions<Data>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data and allows to edit the collection.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, editActions: EditActions<Data>, selection: Binding<SelectionValue>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, allows to edit the collection, and requires a selection of a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, editActions: EditActions<Data>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, allows to edit the collection, and optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, editActions: EditActions<Data>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable, allows to edit the collection, and optionally allows users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, editActions: EditActions<Data>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data and allows to edit the collection.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, editActions: EditActions<Data>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable, allows to edit the collection, and optionally allows users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, editActions: EditActions<Data>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, allows to edit the collection, and optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(minimumAngleDelta:)",
        "url": "https://developer.apple.com/documentation/swiftui/rotategesture/init(minimumangledelta:)",
        "html": "Parameters\nminimumAngleDelta\n\nThe minimum delta required before the gesture starts. The default value is a one-degree angle.\n\nSee Also\nCreating the gesture\nvar minimumAngleDelta: Angle\nThe minimum delta required before the gesture succeeds."
    },
    {
        "title": "init(minimumDistance:coordinateSpace:)",
        "url": "https://developer.apple.com/documentation/swiftui/draggesture/init(minimumdistance:coordinatespace:)-3804h",
        "html": "Deprecated\n\nUse init(minimumDistance:coordinateSpace:) instead.\n\nParameters\nminimumDistance\n\nThe minimum dragging distance for the gesture to succeed.\n\ncoordinateSpace\n\nThe coordinate space of the dragging gesture\u2019s location."
    },
    {
        "title": "DragGesture.Value",
        "url": "https://developer.apple.com/documentation/swiftui/draggesture/value",
        "html": "Topics\nGetting 2D position\nvar startLocation: CGPoint\nThe location of the drag gesture\u2019s first event.\nvar location: CGPoint\nThe location of the drag gesture\u2019s current event.\nvar predictedEndLocation: CGPoint\nA prediction, based on the current drag velocity, of where the final location will be if dragging stopped now.\nvar translation: CGSize\nThe total translation from the start of the drag gesture to the current event of the drag gesture.\nvar predictedEndTranslation: CGSize\nA prediction, based on the current drag velocity, of what the final translation will be if dragging stopped now.\nGetting 3D position\nvar startLocation3D: Point3D\nThe 3D start location of the drag gesture.\nBeta\nvar location3D: Point3D\nThe 3D location of the drag gesture.\nBeta\nvar predictedEndLocation3D: Point3D\nA prediction of where the final location would be if dragging stopped now, based on the current drag velocity.\nBeta\nvar translation3D: Vector3D\nThe translation of the drag gesture from startLocation3D to location3D.\nBeta\nvar predictedEndTranslation3D: Vector3D\nA prediction of what the final translation would be if dragging stopped now, based on the current drag velocity.\nBeta\nvar startInputDevicePose3D: Pose3D?\nThe starting 3D pose of the device driving the drag, if one exists.\nBeta\nvar inputDevicePose3D: Pose3D?\nThe 3D pose of the device driving the drag, if one exists.\nBeta\nHandling changes over time\nvar time: Date\nThe time associated with the drag gesture\u2019s current event.\nvar velocity: CGSize\nThe current drag velocity.\nRelationships\nConforms To\nEquatable\nSendable"
    },
    {
        "title": "minimumDistance",
        "url": "https://developer.apple.com/documentation/swiftui/draggesture/minimumdistance",
        "html": "See Also\nCreating a drag gesture\ninit(minimumDistance: CGFloat, coordinateSpace: some CoordinateSpaceProtocol)\nCreates a dragging gesture with the minimum dragging distance before the gesture succeeds and the coordinate space of the gesture\u2019s location.\nvar coordinateSpace: CoordinateSpace\nThe coordinate space in which to receive location values."
    },
    {
        "title": "init(_:editActions:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:editactions:selection:rowcontent:)-48yjb",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the list.\n\neditActions\n\nThe edit actions that are synthesized on data.\n\nselection\n\nA binding to a selected value.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nDiscussion\n\nThe following example creates a list to display a collection of favorite foods allowing the user to delete or move elements from the collection, and select a single elements.\n\nList(\n    $foods,\n    editActions: [.delete, .move],\n    selection: $selectedFood\n) { $food in\n   HStack {\n       Text(food.name)\n       Toggle(\"Favorite\", isOn: $food.isFavorite)\n   }\n}\n\n\nUse deleteDisabled(_:) and moveDisabled(_:) to disable respectively delete or move actions on a per-row basis.\n\nExplicit DynamicViewContent.onDelete(perform:), DynamicViewContent.onMove(perform:), or View.swipeActions(edge:allowsFullSwipe:content:) modifiers will override any synthesized action\n\nSee Also\nListing editable data\ninit<Data, RowContent>(Binding<Data>, editActions: EditActions<Data>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data and allows to edit the collection.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, editActions: EditActions<Data>, selection: Binding<SelectionValue>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, allows to edit the collection, and requires a selection of a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, editActions: EditActions<Data>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable, allows to edit the collection, and optionally allows users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, editActions: EditActions<Data>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data and allows to edit the collection.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, editActions: EditActions<Data>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable, allows to edit the collection, and optionally allows users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, editActions: EditActions<Data>, selection: Binding<SelectionValue>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable, allows to edit the collection, and requires a selection of a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, editActions: EditActions<Data>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, allows to edit the collection, and optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:id:editActions:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:id:editactions:selection:rowcontent:)-5vo52",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the list.\n\nid\n\nThe key path to the data model\u2019s identifier.\n\neditActions\n\nThe edit actions that are synthesized on data.\n\nselection\n\nA binding to a selected value.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nDiscussion\n\nThe following example creates a list to display a collection of favorite foods allowing the user to delete or move elements from the collection, and select a single elements.\n\nList(\n    $foods,\n    editActions: [.delete, .move],\n    selection: $selectedFood\n) { $food in\n   HStack {\n       Text(food.name)\n       Toggle(\"Favorite\", isOn: $food.isFavorite)\n   }\n}\n\n\nUse deleteDisabled(_:) and moveDisabled(_:) to disable respectively delete or move actions on a per-row basis.\n\nExplicit DynamicViewContent.onDelete(perform:), DynamicViewContent.onMove(perform:), or View.swipeActions(edge:allowsFullSwipe:content:) modifiers will override any synthesized action\n\nSee Also\nListing editable data\ninit<Data, RowContent>(Binding<Data>, editActions: EditActions<Data>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data and allows to edit the collection.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, editActions: EditActions<Data>, selection: Binding<SelectionValue>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, allows to edit the collection, and requires a selection of a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, editActions: EditActions<Data>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, allows to edit the collection, and optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, editActions: EditActions<Data>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable, allows to edit the collection, and optionally allows users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, editActions: EditActions<Data>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data and allows to edit the collection.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, editActions: EditActions<Data>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable, allows to edit the collection, and optionally allows users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, editActions: EditActions<Data>, selection: Binding<SelectionValue>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable, allows to edit the collection, and requires a selection of a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:editActions:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:editactions:selection:rowcontent:)-5burx",
        "html": "Parameters\ndata\n\nThe identifiable data for computing and to be edited by the list.\n\neditActions\n\nThe edit actions that are synthesized on data.\n\nselection\n\nA binding to a set that identifies selected rows.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nDiscussion\n\nThe following example creates a list to display a collection of favorite foods allowing the user to delete or move elements from the collection, and select multiple elements.\n\nList(\n    $foods,\n    editActions: [.delete, .move],\n    selection: $selectedFoods\n) { $food in\n   HStack {\n       Text(food.name)\n       Toggle(\"Favorite\", isOn: $food.isFavorite)\n   }\n}\n\n\nUse deleteDisabled(_:) and moveDisabled(_:) to disable respectively delete or move actions on a per-row basis.\n\nExplicit DynamicViewContent.onDelete(perform:), DynamicViewContent.onMove(perform:), or View.swipeActions(edge:allowsFullSwipe:content:) modifiers will override any synthesized action\n\nSee Also\nListing editable data\ninit<Data, RowContent>(Binding<Data>, editActions: EditActions<Data>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data and allows to edit the collection.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, editActions: EditActions<Data>, selection: Binding<SelectionValue>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, allows to edit the collection, and requires a selection of a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, editActions: EditActions<Data>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, allows to edit the collection, and optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, editActions: EditActions<Data>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data and allows to edit the collection.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, editActions: EditActions<Data>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable, allows to edit the collection, and optionally allows users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, editActions: EditActions<Data>, selection: Binding<SelectionValue>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable, allows to edit the collection, and requires a selection of a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, editActions: EditActions<Data>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, allows to edit the collection, and optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "constrainedAxis",
        "url": "https://developer.apple.com/documentation/swiftui/rotategesture3d/constrainedaxis",
        "html": "Discussion\n\nIf the axis is nil, the rotation is unconstrained.\n\nSee Also\nCreating the gesture\ninit(constrainedToAxis: RotationAxis3D?, minimumAngleDelta: Angle)\nCreates a rotation gesture with a minimum delta for the gesture to start and axis to constrain measurement of rotation.\nBeta\nvar minimumAngleDelta: Angle\nThe minimum angle delta before the gesture becomes active.\nBeta"
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/focusstate/init()-2v5rw",
        "html": "See Also\nCreating a focus state\ninit()\nCreates a focus state that binds to a Boolean."
    },
    {
        "title": "init(count:coordinateSpace:)",
        "url": "https://developer.apple.com/documentation/swiftui/spatialtapgesture/init(count:coordinatespace:)-75s7q",
        "html": "Parameters\ncount\n\nThe required number of taps to complete the tap gesture.\n\ncoordinateSpace\n\nThe coordinate space of the tap gesture\u2019s location.\n\nSee Also\nCreating a spatial tap gesture\nvar coordinateSpace: CoordinateSpace\nThe coordinate space in which to receive location values.\nvar count: Int\nThe required number of tap events."
    },
    {
        "title": "performDrop(info:)",
        "url": "https://developer.apple.com/documentation/swiftui/dropdelegate/performdrop(info:)",
        "html": "Required\n\nReturn Value\n\nA Boolean that is true if the drop was successful, false otherwise.\n\nDiscussion\n\nIncorporate the received data into your app\u2019s data model as appropriate.\n\nSee Also\nReceiving drop information\nfunc dropEntered(info: DropInfo)\nTells the delegate a validated drop has entered the modified view.\n\nRequired Default implementation provided.\n\nfunc dropExited(info: DropInfo)\nTells the delegate a validated drop operation has exited the modified view.\n\nRequired Default implementation provided.\n\nfunc dropUpdated(info: DropInfo) -> DropProposal?\nTells the delegate that a validated drop moved inside the modified view.\n\nRequired Default implementation provided.\n\nfunc validateDrop(info: DropInfo) -> Bool\nTells the delegate that a drop containing items conforming to one of the expected types entered a view that accepts drops.\n\nRequired Default implementation provided."
    },
    {
        "title": "dropExited(info:)",
        "url": "https://developer.apple.com/documentation/swiftui/dropdelegate/dropexited(info:)-4unqr",
        "html": "Required Default implementation provided.\n\nDiscussion\n\nThe default implementation does nothing.\n\nDefault Implementations\nDropDelegate Implementations\nfunc dropExited(info: DropInfo)\nTells the delegate a validated drop operation has exited the modified view.\nSee Also\nReceiving drop information\nfunc dropEntered(info: DropInfo)\nTells the delegate a validated drop has entered the modified view.\n\nRequired Default implementation provided.\n\nfunc dropUpdated(info: DropInfo) -> DropProposal?\nTells the delegate that a validated drop moved inside the modified view.\n\nRequired Default implementation provided.\n\nfunc validateDrop(info: DropInfo) -> Bool\nTells the delegate that a drop containing items conforming to one of the expected types entered a view that accepts drops.\n\nRequired Default implementation provided.\n\nfunc performDrop(info: DropInfo) -> Bool\nTells the delegate it can request the item provider data from the given information.\n\nRequired"
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/focusstate/init()-559if",
        "html": "See Also\nCreating a focus state\ninit<T>()\nCreates a focus state that binds to an optional type."
    },
    {
        "title": "wrappedValue",
        "url": "https://developer.apple.com/documentation/swiftui/focusstate/wrappedvalue",
        "html": "Discussion\n\nWhen focus is not in any view that is bound to this state, the wrapped value will be nil (for optional-typed state) or false (for Bool- typed state).\n\nSee Also\nInspecting the focus state\nvar projectedValue: FocusState<Value>.Binding\nA projection of the focus state value that returns a binding.\nstruct Binding\nA property wrapper type that can read and write a value that indicates the current focus location."
    },
    {
        "title": "projectedValue",
        "url": "https://developer.apple.com/documentation/swiftui/focusedbinding/projectedvalue",
        "html": "Discussion\n\nThe unwrapped value is nil when no focused view hierarchy has published a corresponding binding.\n\nSee Also\nGetting the value\nvar wrappedValue: Value?\nThe unwrapped value for the focus key given the current scope and state of the focused view hierarchy."
    },
    {
        "title": "DropOperation.copy",
        "url": "https://developer.apple.com/documentation/swiftui/dropoperation/copy",
        "html": "See Also\nGetting operation types\ncase cancel\nCancel the drag operation and transfer no data.\ncase forbidden\nThe drop activity is not allowed at this time or location.\ncase move\nMove the data represented by the drag items instead of copying it."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/springloadingbehavior/automatic",
        "html": "Discussion\n\nThis defers to default component behavior for spring loading. Some components, such as TabView, will default to allowing spring loading; while others do not.\n\nSee Also\nGetting the behaviors\nstatic let enabled: SpringLoadingBehavior\nSpring loaded interactions will be enabled for applicable views.\nstatic let disabled: SpringLoadingBehavior\nSpring loaded interactions will be disabled for applicable views."
    },
    {
        "title": "DropOperation.forbidden",
        "url": "https://developer.apple.com/documentation/swiftui/dropoperation/forbidden",
        "html": "See Also\nGetting operation types\ncase cancel\nCancel the drag operation and transfer no data.\ncase copy\nCopy the data to the modified view.\ncase move\nMove the data represented by the drag items instead of copying it."
    },
    {
        "title": "DropOperation.move",
        "url": "https://developer.apple.com/documentation/swiftui/dropoperation/move",
        "html": "See Also\nGetting operation types\ncase cancel\nCancel the drag operation and transfer no data.\ncase copy\nCopy the data to the modified view.\ncase forbidden\nThe drop activity is not allowed at this time or location."
    },
    {
        "title": "Edge3D.trailing",
        "url": "https://developer.apple.com/documentation/swiftui/edge3d/trailing",
        "html": "See Also\nGetting the edges\ncase top\nBeta\ncase bottom\nBeta\ncase leading\nBeta\ncase front\nBeta\ncase back\nBeta"
    },
    {
        "title": "Edge3D.leading",
        "url": "https://developer.apple.com/documentation/swiftui/edge3d/leading",
        "html": "See Also\nGetting the edges\ncase top\nBeta\ncase bottom\nBeta\ncase trailing\nBeta\ncase front\nBeta\ncase back\nBeta"
    },
    {
        "title": "init(_:children:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:children:selection:rowcontent:)-83svk",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the list.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data. A non-nil but empty value denotes an element capable of having children that\u2019s currently childless, such as an empty directory in a file system. On the other hand, if the property at the key path is nil, then the outline group treats data as a leaf in the tree, like a regular file in a file system.\n\nselection\n\nA binding to a set that identifies selected rows.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nSee Also\nListing bound, hierarchical data\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, children: WritableKeyPath<Data.Element, Data?>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, children: KeyPath<Data.Element, Data?>, selection: Binding<SelectionValue>, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, children: WritableKeyPath<Data.Element, Data?>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from a binding to an underlying collection of identifiable data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<SelectionValue>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from a binding to an underlying collection of identifiable data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from a binding to an underlying collection of identifiable data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:children:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:children:rowcontent:)-2y3z8",
        "html": "Parameters\ndata\n\nA collection of identifiable data for computing the list.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data. A non-nil but empty value denotes a node capable of having children that is currently childless, such as an empty directory in a file system. On the other hand, if the property at the key path is nil, then data is treated as a leaf node in the tree, like a regular file in a file system.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nSee Also\nListing bound, hierarchical data\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, children: WritableKeyPath<Data.Element, Data?>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, children: KeyPath<Data.Element, Data?>, selection: Binding<SelectionValue>, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<SelectionValue>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from a binding to an underlying collection of identifiable data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from a binding to an underlying collection of identifiable data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from a binding to an underlying collection of identifiable data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "Edge3D.front",
        "url": "https://developer.apple.com/documentation/swiftui/edge3d/front",
        "html": "See Also\nGetting the edges\ncase top\nBeta\ncase bottom\nBeta\ncase leading\nBeta\ncase trailing\nBeta\ncase back\nBeta"
    },
    {
        "title": "init(_:id:children:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:id:children:selection:rowcontent:)-234ke",
        "html": "Parameters\ndata\n\nThe data for populating the list.\n\nid\n\nThe key path to the data model\u2019s identifier.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data. A non-nil but empty value denotes a node capable of having children that is currently childless, such as an empty directory in a file system. On the other hand, if the property at the key path is nil, then data is treated as a leaf node in the tree, like a regular file in a file system.\n\nselection\n\nA binding to a set that identifies selected rows.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nSee Also\nListing hierarchical data\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, children: KeyPath<Data.Element, Data?>, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<SelectionValue>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, children: KeyPath<Data.Element, Data?>, selection: Binding<SelectionValue?>?, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Data, children: KeyPath<Data.Element, Data?>, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from an underlying collection of identifiable data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, RowContent>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<SelectionValue>, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from an underlying collection of identifiable data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<SelectionValue?>?, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from an underlying collection of identifiable data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<Set<SelectionValue>>?, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from an underlying collection of identifiable data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/group/init(content:)-933z6",
        "html": "Parameters\ncontent\n\nA ViewBuilder that produces the views to group.\n\nSee Also\nCreating a group\ninit(content: () -> Content)\nCreates a group of scenes.\nAvailable when Content conforms to Scene.\ninit(content: () -> Content)\nCreates a group of commands.\nAvailable when Content conforms to Commands.\ninit(content: () -> Content)\nCreates a group of toolbar content instances.\nAvailable when Content conforms to ToolbarContent.\ninit(content: () -> Content)\nCreates a group of customizable toolbar content instances.\nAvailable when Content conforms to CustomizableToolbarContent.\ninit<R>(content: () -> Content)\nCreates a group of table rows.\nAvailable when Content conforms to TableRowContent.\ninit<R, C>(content: () -> Content)\nCreates a group of table columns.\nAvailable when Content conforms to TableColumnContent.\ninit(content: () -> Content)\nCreates an instance that generates Rotor content by combining, in order, all the Rotor content specified in the passed-in result builder.\nAvailable when Content conforms to AccessibilityRotorContent."
    },
    {
        "title": "convert(_:from:)",
        "url": "https://developer.apple.com/documentation/swiftui/physicalmetricsconverter/convert(_:from:)-kbo3",
        "html": "Return Value\n\nA value in points. Use this value only in the scene this converter was associated with.\n\nSee Also\nConverting from a unit length\nfunc convert(CGPoint, from: UnitLength) -> CGPoint\nConverts a point, whose coordinates are in the specified unit, to a point suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(Rect3D, from: UnitLength) -> Rect3D\nConverts a Rect3D, whose coordinates are in the specified unit, to a Rect3D with coordinates specified in points, suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(Size3D, from: UnitLength) -> Size3D\nConverts a size, given in the specified unit, to a size in points suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(CGFloat, from: UnitLength) -> CGFloat\nConverts a length in the specified unit to a length in points suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(Point3D, from: UnitLength) -> Point3D\nConverts a point, whose coordinates are in the specified unit, to a point value suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(CGSize, from: UnitLength) -> CGSize\nConverts a size, given in the specified unit, to a size in points suitable for use in the environment this converter is associated with.\nBeta\nfunc convert<V>(V, from: UnitLength) -> V\nConverts a vector of physical length measurements, in the specified unit, to a vector of values in points suitable for use in the environment this converter is associated with.\nBeta"
    },
    {
        "title": "convert(_:from:)",
        "url": "https://developer.apple.com/documentation/swiftui/physicalmetricsconverter/convert(_:from:)-8b4nk",
        "html": "Return Value\n\nA value in points. Use this value only in the scene this converter was associated with.\n\nSee Also\nConverting from a unit length\nfunc convert(CGPoint, from: UnitLength) -> CGPoint\nConverts a point, whose coordinates are in the specified unit, to a point suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(Rect3D, from: UnitLength) -> Rect3D\nConverts a Rect3D, whose coordinates are in the specified unit, to a Rect3D with coordinates specified in points, suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(Size3D, from: UnitLength) -> Size3D\nConverts a size, given in the specified unit, to a size in points suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(CGFloat, from: UnitLength) -> CGFloat\nConverts a length in the specified unit to a length in points suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(Point3D, from: UnitLength) -> Point3D\nConverts a point, whose coordinates are in the specified unit, to a point value suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(CGSize, from: UnitLength) -> CGSize\nConverts a size, given in the specified unit, to a size in points suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(CGRect, from: UnitLength) -> CGRect\nConverts a rectangle, whose coordinates are in the specified unit, to a rectangle with coordinates specified in points, suitable for use in the environment this converter is associated with.\nBeta"
    },
    {
        "title": "init(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/group/init(content:)-2nilv",
        "html": "Parameters\ncontent\n\nA TableRowBuilder that produces the rows to group.\n\nSee Also\nCreating a group\ninit(content: () -> Content)\nCreates a group of views.\nAvailable when Content conforms to View.\ninit(content: () -> Content)\nCreates a group of scenes.\nAvailable when Content conforms to Scene.\ninit(content: () -> Content)\nCreates a group of commands.\nAvailable when Content conforms to Commands.\ninit(content: () -> Content)\nCreates a group of toolbar content instances.\nAvailable when Content conforms to ToolbarContent.\ninit(content: () -> Content)\nCreates a group of customizable toolbar content instances.\nAvailable when Content conforms to CustomizableToolbarContent.\ninit<R, C>(content: () -> Content)\nCreates a group of table columns.\nAvailable when Content conforms to TableColumnContent.\ninit(content: () -> Content)\nCreates an instance that generates Rotor content by combining, in order, all the Rotor content specified in the passed-in result builder.\nAvailable when Content conforms to AccessibilityRotorContent."
    },
    {
        "title": "convert(_:from:)",
        "url": "https://developer.apple.com/documentation/swiftui/physicalmetricsconverter/convert(_:from:)-4inzc",
        "html": "Return Value\n\nA value in points. Use this value only in the scene this converter was associated with.\n\nSee Also\nConverting from a unit length\nfunc convert(CGPoint, from: UnitLength) -> CGPoint\nConverts a point, whose coordinates are in the specified unit, to a point suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(Rect3D, from: UnitLength) -> Rect3D\nConverts a Rect3D, whose coordinates are in the specified unit, to a Rect3D with coordinates specified in points, suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(Size3D, from: UnitLength) -> Size3D\nConverts a size, given in the specified unit, to a size in points suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(Point3D, from: UnitLength) -> Point3D\nConverts a point, whose coordinates are in the specified unit, to a point value suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(CGSize, from: UnitLength) -> CGSize\nConverts a size, given in the specified unit, to a size in points suitable for use in the environment this converter is associated with.\nBeta\nfunc convert<V>(V, from: UnitLength) -> V\nConverts a vector of physical length measurements, in the specified unit, to a vector of values in points suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(CGRect, from: UnitLength) -> CGRect\nConverts a rectangle, whose coordinates are in the specified unit, to a rectangle with coordinates specified in points, suitable for use in the environment this converter is associated with.\nBeta"
    },
    {
        "title": "convert(_:from:)",
        "url": "https://developer.apple.com/documentation/swiftui/physicalmetricsconverter/convert(_:from:)-65q5s",
        "html": "Return Value\n\nA value in points. Use this value only in the scene this converter was associated with.\n\nSee Also\nConverting from a unit length\nfunc convert(CGPoint, from: UnitLength) -> CGPoint\nConverts a point, whose coordinates are in the specified unit, to a point suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(Rect3D, from: UnitLength) -> Rect3D\nConverts a Rect3D, whose coordinates are in the specified unit, to a Rect3D with coordinates specified in points, suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(Size3D, from: UnitLength) -> Size3D\nConverts a size, given in the specified unit, to a size in points suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(CGFloat, from: UnitLength) -> CGFloat\nConverts a length in the specified unit to a length in points suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(CGSize, from: UnitLength) -> CGSize\nConverts a size, given in the specified unit, to a size in points suitable for use in the environment this converter is associated with.\nBeta\nfunc convert<V>(V, from: UnitLength) -> V\nConverts a vector of physical length measurements, in the specified unit, to a vector of values in points suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(CGRect, from: UnitLength) -> CGRect\nConverts a rectangle, whose coordinates are in the specified unit, to a rectangle with coordinates specified in points, suitable for use in the environment this converter is associated with.\nBeta"
    },
    {
        "title": "convert(_:from:)",
        "url": "https://developer.apple.com/documentation/swiftui/physicalmetricsconverter/convert(_:from:)-3ujga",
        "html": "Return Value\n\nA value in points. Use this value only in the scene this converter was associated with.\n\nSee Also\nConverting from a unit length\nfunc convert(CGPoint, from: UnitLength) -> CGPoint\nConverts a point, whose coordinates are in the specified unit, to a point suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(Rect3D, from: UnitLength) -> Rect3D\nConverts a Rect3D, whose coordinates are in the specified unit, to a Rect3D with coordinates specified in points, suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(CGFloat, from: UnitLength) -> CGFloat\nConverts a length in the specified unit to a length in points suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(Point3D, from: UnitLength) -> Point3D\nConverts a point, whose coordinates are in the specified unit, to a point value suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(CGSize, from: UnitLength) -> CGSize\nConverts a size, given in the specified unit, to a size in points suitable for use in the environment this converter is associated with.\nBeta\nfunc convert<V>(V, from: UnitLength) -> V\nConverts a vector of physical length measurements, in the specified unit, to a vector of values in points suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(CGRect, from: UnitLength) -> CGRect\nConverts a rectangle, whose coordinates are in the specified unit, to a rectangle with coordinates specified in points, suitable for use in the environment this converter is associated with.\nBeta"
    },
    {
        "title": "UIViewType",
        "url": "https://developer.apple.com/documentation/swiftui/uiviewrepresentable/uiviewtype",
        "html": "Required\n\nSee Also\nCreating and updating the view\nfunc makeUIView(context: Self.Context) -> Self.UIViewType\nCreates the view object and configures its initial state.\n\nRequired\n\nfunc updateUIView(Self.UIViewType, context: Self.Context)\nUpdates the state of the specified view with new information from SwiftUI.\n\nRequired\n\ntypealias Context"
    },
    {
        "title": "UIViewRepresentable.Context",
        "url": "https://developer.apple.com/documentation/swiftui/uiviewrepresentable/context",
        "html": "See Also\nCreating and updating the view\nfunc makeUIView(context: Self.Context) -> Self.UIViewType\nCreates the view object and configures its initial state.\n\nRequired\n\nfunc updateUIView(Self.UIViewType, context: Self.Context)\nUpdates the state of the specified view with new information from SwiftUI.\n\nRequired\n\nassociatedtype UIViewType : UIView\nThe type of view to present.\n\nRequired"
    },
    {
        "title": "makeUIView(context:)",
        "url": "https://developer.apple.com/documentation/swiftui/uiviewrepresentable/makeuiview(context:)",
        "html": "Required\n\nParameters\ncontext\n\nA context structure containing information about the current state of the system.\n\nReturn Value\n\nYour UIKit view configured with the provided information.\n\nDiscussion\n\nYou must implement this method and use it to create your view object. Configure the view using your app\u2019s current data and contents of the context parameter. The system calls this method only once, when it creates your view for the first time. For all subsequent updates, the system calls the updateUIView(_:context:) method.\n\nSee Also\nCreating and updating the view\nfunc updateUIView(Self.UIViewType, context: Self.Context)\nUpdates the state of the specified view with new information from SwiftUI.\n\nRequired\n\ntypealias Context\nassociatedtype UIViewType : UIView\nThe type of view to present.\n\nRequired"
    },
    {
        "title": "sizeThatFits(_:uiView:context:)",
        "url": "https://developer.apple.com/documentation/swiftui/uiviewrepresentable/sizethatfits(_:uiview:context:)-9ojeu",
        "html": "Required Default implementation provided.\n\nParameters\nproposal\n\nThe proposed size for the view.\n\nuiView\n\nYour custom view object.\n\ncontext\n\nA context structure containing information about the current state of the system.\n\nReturn Value\n\nThe composite size of the represented view controller. Returning a value of nil indicates that the system should use the default sizing algorithm.\n\nDiscussion\n\nThis method may be called more than once with different proposed sizes during the same layout pass. SwiftUI views choose their own size, so one of the values returned from this function will always be used as the actual size of the composite view.\n\nDefault Implementations\nUIViewRepresentable Implementations\nfunc sizeThatFits(ProposedViewSize, uiView: Self.UIViewType, context: Self.Context) -> CGSize?\nGiven a proposed size, returns the preferred size of the composite view."
    },
    {
        "title": "Coordinator",
        "url": "https://developer.apple.com/documentation/swiftui/nsviewrepresentable/coordinator",
        "html": "Required\n\nSee Also\nProviding a custom coordinator object\nfunc makeCoordinator() -> Self.Coordinator\nCreates the custom instance that you use to communicate changes from your view to other parts of your SwiftUI interface.\n\nRequired Default implementation provided."
    },
    {
        "title": "updateUIView(_:context:)",
        "url": "https://developer.apple.com/documentation/swiftui/uiviewrepresentable/updateuiview(_:context:)",
        "html": "Required\n\nParameters\nuiView\n\nYour custom view object.\n\ncontext\n\nA context structure containing information about the current state of the system.\n\nDiscussion\n\nWhen the state of your app changes, SwiftUI updates the portions of your interface affected by those changes. SwiftUI calls this method for any changes affecting the corresponding UIKit view. Use this method to update the configuration of your view to match the new state information provided in the context parameter.\n\nSee Also\nCreating and updating the view\nfunc makeUIView(context: Self.Context) -> Self.UIViewType\nCreates the view object and configures its initial state.\n\nRequired\n\ntypealias Context\nassociatedtype UIViewType : UIView\nThe type of view to present.\n\nRequired"
    },
    {
        "title": "makeCoordinator()",
        "url": "https://developer.apple.com/documentation/swiftui/uiviewrepresentable/makecoordinator()-9e4i4",
        "html": "Required Default implementation provided.\n\nDiscussion\n\nImplement this method if changes to your view might affect other parts of your app. In your implementation, create a custom Swift instance that can communicate with other parts of your interface. For example, you might provide an instance that binds its variables to SwiftUI properties, causing the two to remain synchronized. If your view doesn\u2019t interact with other parts of your app, providing a coordinator is unnecessary.\n\nSwiftUI calls this method before calling the makeUIView(context:) method. The system provides your coordinator either directly or as part of a context structure when calling the other methods of your representable instance.\n\nDefault Implementations\nUIViewRepresentable Implementations\nfunc makeCoordinator() -> Self.Coordinator\nCreates the custom instance that you use to communicate changes from your view to other parts of your SwiftUI interface.\nAvailable when Coordinator is ().\nSee Also\nProviding a custom coordinator object\nassociatedtype Coordinator = Void\nA type to coordinate with the view.\n\nRequired"
    },
    {
        "title": "sizeThatFits(_:nsView:context:)",
        "url": "https://developer.apple.com/documentation/swiftui/nsviewrepresentable/sizethatfits(_:nsview:context:)-2lqoz",
        "html": "Required Default implementation provided.\n\nParameters\nproposal\n\nThe proposed size for the view.\n\nnsView\n\nYour custom view object.\n\ncontext\n\nA context structure containing information about the current state of the system.\n\nReturn Value\n\nThe composite size of the represented view controller. Returning a value of nil indicates that the system should use the default sizing algorithm.\n\nDiscussion\n\nThis method may be called more than once with different proposed sizes during the same layout pass. SwiftUI views choose their own size, so one of the values returned from this function will always be used as the actual size of the composite view.\n\nDefault Implementations\nNSViewRepresentable Implementations\nfunc sizeThatFits(ProposedViewSize, nsView: Self.NSViewType, context: Self.Context) -> CGSize?\nGiven a proposed size, returns the preferred size of the composite view."
    },
    {
        "title": "Coordinator",
        "url": "https://developer.apple.com/documentation/swiftui/uiviewrepresentable/coordinator",
        "html": "Required\n\nSee Also\nProviding a custom coordinator object\nfunc makeCoordinator() -> Self.Coordinator\nCreates the custom instance that you use to communicate changes from your view to other parts of your SwiftUI interface.\n\nRequired Default implementation provided."
    },
    {
        "title": "dismantleNSView(_:coordinator:)",
        "url": "https://developer.apple.com/documentation/swiftui/nsviewrepresentable/dismantlensview(_:coordinator:)-5pand",
        "html": "Required Default implementation provided.\n\nParameters\nnsView\n\nYour custom view object.\n\ncoordinator\n\nThe custom coordinator you use to communicate changes back to SwiftUI. If you do not use a custom coordinator instance, the system provides a default instance.\n\nDiscussion\n\nUse this method to perform additional clean-up work related to your custom view. For example, you might use this method to remove observers or update other parts of your SwiftUI interface.\n\nDefault Implementations\nNSViewRepresentable Implementations\nstatic func dismantleNSView(Self.NSViewType, coordinator: Self.Coordinator)\nCleans up the presented AppKit view (and coordinator) in anticipation of their removal."
    },
    {
        "title": "combine",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitychildbehavior/combine",
        "html": "Discussion\n\nUse this behavior when you want a view represented by a single accessibility element. The new accessibility element merges properties from all non-hidden children. Some properties may be transformed or ignored to achieve the ideal combined result. For example, not all of AccessibilityTraits are merged and a default action may become a named action (init(named:)).\n\nstruct UserCell: View {\n    var user: User\n\n\n    var body: some View {\n        VStack {\n            Image(user.image)\n            Text(user.name)\n            Button(\"Options\", action: showOptions)\n        }\n        .accessibilityElement(children: .combine)\n    }\n}\n\n\nA new accessibility element is created when:\n\nThe view contains multiple or zero accessibility elements\n\nThe view wraps a UIViewRepresentable/NSViewRepresentable.\n\nNote\n\nIf an accessibility element is not created, the AccessibilityChildBehavior of the existing accessibility element is modified.\n\nSee Also\nGetting behaviors\nstatic let contain: AccessibilityChildBehavior\nAny child accessibility elements become children of the new accessibility element.\nstatic let ignore: AccessibilityChildBehavior\nAny child accessibility elements become hidden."
    },
    {
        "title": "switchControl",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitytechnologies/switchcontrol",
        "html": "See Also\nGetting technology types\nstatic var voiceOver: AccessibilityTechnologies\nThe value that represents the VoiceOver screen reader, allowing use of the system without seeing the screen visually."
    },
    {
        "title": "voiceOver",
        "url": "https://developer.apple.com/documentation/swiftui/accessibilitytechnologies/voiceover",
        "html": "See Also\nGetting technology types\nstatic var switchControl: AccessibilityTechnologies\nThe value that represents a Switch Control, allowing the use of the entire system using controller buttons, a breath-controlled switch or similar hardware."
    },
    {
        "title": "init(_:id:editActions:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:id:editactions:rowcontent:)",
        "html": "Parameters\ndata\n\nA collection of identifiable data for computing the list.\n\nid\n\nThe key path to the data model\u2019s identifier.\n\neditActions\n\nThe edit actions that are synthesized on data.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nDiscussion\n\nThe following example creates a list to display a collection of favorite foods allowing the user to delete or move elements from the collection.\n\nList($foods, editActions: [.delete, .move]) { $food in\n   HStack {\n       Text(food.name)\n       Toggle(\"Favorite\", isOn: $food.isFavorite)\n   }\n}\n\n\nUse deleteDisabled(_:) and moveDisabled(_:) to disable respectively delete or move actions on a per-row basis.\n\nExplicit DynamicViewContent.onDelete(perform:), DynamicViewContent.onMove(perform:), or View.swipeActions(edge:allowsFullSwipe:content:) modifiers will override any synthesized action\n\nSee Also\nListing editable data\ninit<Data, RowContent>(Binding<Data>, editActions: EditActions<Data>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data and allows to edit the collection.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, editActions: EditActions<Data>, selection: Binding<SelectionValue>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, allows to edit the collection, and requires a selection of a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, editActions: EditActions<Data>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, allows to edit the collection, and optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, editActions: EditActions<Data>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable, allows to edit the collection, and optionally allows users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, editActions: EditActions<Data>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable, allows to edit the collection, and optionally allows users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, editActions: EditActions<Data>, selection: Binding<SelectionValue>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable, allows to edit the collection, and requires a selection of a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, editActions: EditActions<Data>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, allows to edit the collection, and optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:id:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:id:rowcontent:)-8x1ph",
        "html": "Parameters\ndata\n\nThe data for populating the list.\n\nid\n\nThe key path to the data model\u2019s identifier.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nSee Also\nListing bound data\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "second",
        "url": "https://developer.apple.com/documentation/swiftui/simultaneousgesture/second",
        "html": "See Also\nCreating the gesture\ninit(First, Second)\nCreates a gesture with two gestures that can receive updates or succeed independently of each other.\nvar first: First\nThe first of two gestures that can happen simultaneously."
    },
    {
        "title": "minimumAngleDelta",
        "url": "https://developer.apple.com/documentation/swiftui/rotategesture/minimumangledelta",
        "html": "See Also\nCreating the gesture\ninit(minimumAngleDelta: Angle)\nCreates a rotation gesture with a minimum delta for the gesture to start."
    },
    {
        "title": "second",
        "url": "https://developer.apple.com/documentation/swiftui/exclusivegesture/second",
        "html": "See Also\nCreating the gesture\ninit(First, Second)\nCreates a gesture from two gestures where only one of them succeeds.\nvar first: First\nThe first of two gestures."
    },
    {
        "title": "subviews",
        "url": "https://developer.apple.com/documentation/swiftui/gesturemask/subviews",
        "html": "See Also\nGetting gesture options\nstatic let all: GestureMask\nEnable both the added gesture as well as all other gestures on the view and its subviews.\nstatic let gesture: GestureMask\nEnable the added gesture but disable all gestures in the subview hierarchy.\nstatic let none: GestureMask\nDisable all gestures in the subview hierarchy, including the added gesture."
    },
    {
        "title": "all",
        "url": "https://developer.apple.com/documentation/swiftui/gesturemask/all",
        "html": "See Also\nGetting gesture options\nstatic let gesture: GestureMask\nEnable the added gesture but disable all gestures in the subview hierarchy.\nstatic let subviews: GestureMask\nEnable all gestures in the subview hierarchy but disable the added gesture.\nstatic let none: GestureMask\nDisable all gestures in the subview hierarchy, including the added gesture."
    },
    {
        "title": "gesture",
        "url": "https://developer.apple.com/documentation/swiftui/gesturemask/gesture",
        "html": "See Also\nGetting gesture options\nstatic let all: GestureMask\nEnable both the added gesture as well as all other gestures on the view and its subviews.\nstatic let subviews: GestureMask\nEnable all gestures in the subview hierarchy but disable the added gesture.\nstatic let none: GestureMask\nDisable all gestures in the subview hierarchy, including the added gesture."
    },
    {
        "title": "init(count:coordinateSpace:)",
        "url": "https://developer.apple.com/documentation/swiftui/spatialtapgesture/init(count:coordinatespace:)-1b85g",
        "html": "Deprecated\n\nUse init(count:coordinateSpace:) instead.\n\nParameters\ncount\n\nThe required number of taps to complete the tap gesture.\n\ncoordinateSpace\n\nThe coordinate space of the tap gesture\u2019s location."
    },
    {
        "title": "none",
        "url": "https://developer.apple.com/documentation/swiftui/gesturemask/none",
        "html": "See Also\nGetting gesture options\nstatic let all: GestureMask\nEnable both the added gesture as well as all other gestures on the view and its subviews.\nstatic let gesture: GestureMask\nEnable the added gesture but disable all gestures in the subview hierarchy.\nstatic let subviews: GestureMask\nEnable all gestures in the subview hierarchy but disable the added gesture."
    },
    {
        "title": "wrappedValue",
        "url": "https://developer.apple.com/documentation/swiftui/focusedbinding/wrappedvalue",
        "html": "See Also\nGetting the value\nvar projectedValue: Binding<Value?>\nA binding to the optional value."
    },
    {
        "title": "second",
        "url": "https://developer.apple.com/documentation/swiftui/sequencegesture/second",
        "html": "See Also\nCreating the gesture\ninit(First, Second)\nCreates a sequence gesture with two gestures.\nvar first: First\nThe first gesture in a sequence of two gestures."
    },
    {
        "title": "minimumScaleDelta",
        "url": "https://developer.apple.com/documentation/swiftui/magnifygesture/minimumscaledelta",
        "html": "See Also\nCreating the gesture\ninit(minimumScaleDelta: CGFloat)\nCreates a magnify gesture with a given minimum delta for the gesture to start."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/focusedbinding/init(_:)",
        "html": "Parameters\nkeyPath\n\nThe key path for the focus value to read.\n\nDiscussion\n\nThe value of the property wrapper is updated dynamically as focus changes and different published bindings go in and out of scope."
    },
    {
        "title": "subscript(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/spatialeventcollection/subscript(_:)",
        "html": "Overview\n\nReturns nil if the Event no longer exists in the collection.\n\nSee Also\nAccessing the collection\u2019s events\nstruct Event\nA spatial event generated from an input like a touch or click that can drive gestures in the system.\nBeta"
    },
    {
        "title": "init(minimumScaleDelta:)",
        "url": "https://developer.apple.com/documentation/swiftui/magnifygesture/init(minimumscaledelta:)",
        "html": "Parameters\nminimumScaleDelta\n\nThe minimum scale delta required before the gesture starts.\n\nSee Also\nCreating the gesture\nvar minimumScaleDelta: CGFloat\nThe minimum required delta before the gesture starts."
    },
    {
        "title": "ExclusiveGesture.Value",
        "url": "https://developer.apple.com/documentation/swiftui/exclusivegesture/value",
        "html": "Topics\nGetting gesture values\ncase first(First.Value)\nThe first of two gestures succeeded.\ncase second(Second.Value)\nThe second of two gestures succeeded.\nRelationships\nConforms To\nEquatable\nSendable"
    },
    {
        "title": "coordinateSpace",
        "url": "https://developer.apple.com/documentation/swiftui/draggesture/coordinatespace",
        "html": "See Also\nCreating a drag gesture\ninit(minimumDistance: CGFloat, coordinateSpace: some CoordinateSpaceProtocol)\nCreates a dragging gesture with the minimum dragging distance before the gesture succeeds and the coordinate space of the gesture\u2019s location.\nvar minimumDistance: CGFloat\nThe minimum dragging distance before the gesture succeeds."
    },
    {
        "title": "id",
        "url": "https://developer.apple.com/documentation/swiftui/spatialeventcollection/event/id-swift.property",
        "html": "See Also\nIdentifying the event\nvar timestamp: TimeInterval\nThe time the event was processed.\nBeta\nstruct ID\nA value that uniquely identifies an event over the course of its lifetime.\nBeta\nvar kind: SpatialEventCollection.Event.Kind\nThe event\u2019s input source.\nBeta\nenum Kind\nThe possible input sources or modes of an event.\nBeta\nvar modifierKeys: EventModifiers\nThe set of active modifier keys at the time of this event.\nBeta"
    },
    {
        "title": "disabled",
        "url": "https://developer.apple.com/documentation/swiftui/springloadingbehavior/disabled",
        "html": "See Also\nGetting the behaviors\nstatic let automatic: SpringLoadingBehavior\nThe automatic spring loading behavior.\nstatic let enabled: SpringLoadingBehavior\nSpring loaded interactions will be enabled for applicable views."
    },
    {
        "title": "enabled",
        "url": "https://developer.apple.com/documentation/swiftui/springloadingbehavior/enabled",
        "html": "See Also\nGetting the behaviors\nstatic let automatic: SpringLoadingBehavior\nThe automatic spring loading behavior.\nstatic let disabled: SpringLoadingBehavior\nSpring loaded interactions will be disabled for applicable views."
    },
    {
        "title": "init(_:editActions:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:editactions:selection:rowcontent:)-47a5v",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the list.\n\neditActions\n\nThe edit actions that are synthesized on data.\n\nselection\n\nA binding to a non optional selected value.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nDiscussion\n\nThe following example creates a list to display a collection of favorite foods allowing the user to delete or move elements from the collection, and select a single element.\n\nList(\n    $foods,\n    editActions: [.delete, .move],\n    selection: $selectedFood\n) { $food in\n   HStack {\n       Text(food.name)\n       Toggle(\"Favorite\", isOn: $food.isFavorite)\n   }\n}\n\n\nUse deleteDisabled(_:) and moveDisabled(_:) to disable respectively delete or move actions on a per-row basis.\n\nExplicit DynamicViewContent.onDelete(perform:), DynamicViewContent.onMove(perform:), or View.swipeActions(edge:allowsFullSwipe:content:) modifiers will override any synthesized action\n\nSee Also\nListing editable data\ninit<Data, RowContent>(Binding<Data>, editActions: EditActions<Data>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data and allows to edit the collection.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, editActions: EditActions<Data>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, allows to edit the collection, and optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, editActions: EditActions<Data>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable, allows to edit the collection, and optionally allows users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, editActions: EditActions<Data>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data and allows to edit the collection.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, editActions: EditActions<Data>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable, allows to edit the collection, and optionally allows users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, editActions: EditActions<Data>, selection: Binding<SelectionValue>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable, allows to edit the collection, and requires a selection of a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, editActions: EditActions<Data>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, allows to edit the collection, and optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:editActions:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:editactions:rowcontent:)",
        "html": "Parameters\ndata\n\nA collection of identifiable data for computing the list.\n\neditActions\n\nThe edit actions that are synthesized on data.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nDiscussion\n\nThe following example creates a list to display a collection of favorite foods allowing the user to delete or move elements from the collection.\n\nList($foods, editActions: [.delete, .move]) { $food in\n   HStack {\n       Text(food.name)\n       Toggle(\"Favorite\", isOn: $food.isFavorite)\n   }\n}\n\n\nUse deleteDisabled(_:) and moveDisabled(_:) to disable respectively delete or move actions on a per-row basis.\n\nExplicit DynamicViewContent.onDelete(perform:), DynamicViewContent.onMove(perform:), or View.swipeActions(edge:allowsFullSwipe:content:) modifiers will override any synthesized action\n\nSee Also\nListing editable data\ninit<Data, RowContent>(Binding<Data>, editActions: EditActions<Data>, selection: Binding<SelectionValue>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, allows to edit the collection, and requires a selection of a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, editActions: EditActions<Data>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, allows to edit the collection, and optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, editActions: EditActions<Data>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable, allows to edit the collection, and optionally allows users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, editActions: EditActions<Data>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data and allows to edit the collection.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, editActions: EditActions<Data>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable, allows to edit the collection, and optionally allows users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, editActions: EditActions<Data>, selection: Binding<SelectionValue>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable, allows to edit the collection, and requires a selection of a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, editActions: EditActions<Data>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, allows to edit the collection, and optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:children:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:children:selection:rowcontent:)-98ohy",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the list.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data. A non-nil but empty value denotes a node capable of having children that is currently childless, such as an empty directory in a file system. On the other hand, if the property at the key path is nil, then data is treated as a leaf node in the tree, like a regular file in a file system.\n\nselection\n\nA binding to a non optional selected value.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nSee Also\nListing bound, hierarchical data\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, children: WritableKeyPath<Data.Element, Data?>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, children: KeyPath<Data.Element, Data?>, selection: Binding<SelectionValue>, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, children: WritableKeyPath<Data.Element, Data?>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from a binding to an underlying collection of identifiable data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from a binding to an underlying collection of identifiable data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from a binding to an underlying collection of identifiable data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:children:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:children:selection:rowcontent:)-5b9nv",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the list.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data. A non-nil but empty value denotes a node capable of having children that is currently childless, such as an empty directory in a file system. On the other hand, if the property at the key path is nil, then data is treated as a leaf node in the tree, like a regular file in a file system.\n\nselection\n\nA binding to a selected value.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nSee Also\nListing bound, hierarchical data\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, children: WritableKeyPath<Data.Element, Data?>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, children: KeyPath<Data.Element, Data?>, selection: Binding<SelectionValue>, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, children: WritableKeyPath<Data.Element, Data?>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from a binding to an underlying collection of identifiable data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<SelectionValue>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from a binding to an underlying collection of identifiable data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from a binding to an underlying collection of identifiable data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:children:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:children:selection:rowcontent:)-qm74",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the list.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data. A non-nil but empty value denotes an element capable of having children that\u2019s currently childless, such as an empty directory in a file system. On the other hand, if the property at the key path is nil, then the outline group treats data as a leaf in the tree, like a regular file in a file system.\n\nselection\n\nA binding to a set that identifies selected rows.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nSee Also\nListing hierarchical data\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, children: KeyPath<Data.Element, Data?>, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<SelectionValue>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, children: KeyPath<Data.Element, Data?>, selection: Binding<SelectionValue?>?, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, children: KeyPath<Data.Element, Data?>, selection: Binding<Set<SelectionValue>>?, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Data, children: KeyPath<Data.Element, Data?>, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from an underlying collection of identifiable data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, RowContent>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<SelectionValue>, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from an underlying collection of identifiable data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<SelectionValue?>?, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from an underlying collection of identifiable data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:id:children:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:id:children:rowcontent:)-9vxq1",
        "html": "Parameters\ndata\n\nThe data for populating the list.\n\nid\n\nThe key path to the data model\u2019s identifier.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data. A non-nil but empty value denotes a node capable of having children that is currently childless, such as an empty directory in a file system. On the other hand, if the property at the key path is nil, then data is treated as a leaf node in the tree, like a regular file in a file system.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nSee Also\nListing bound, hierarchical data\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, children: KeyPath<Data.Element, Data?>, selection: Binding<SelectionValue>, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, children: WritableKeyPath<Data.Element, Data?>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from a binding to an underlying collection of identifiable data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<SelectionValue>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from a binding to an underlying collection of identifiable data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from a binding to an underlying collection of identifiable data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from a binding to an underlying collection of identifiable data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:id:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:id:selection:rowcontent:)-6ggzn",
        "html": "Parameters\ndata\n\nThe data for populating the list.\n\nid\n\nThe key path to the data model\u2019s identifier.\n\nselection\n\nA binding to a selected value.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nSee Also\nListing bound data\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that identifies its rows based on a key path to the identifier of the underlying data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:selection:rowcontent:)-8iuwp",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the list.\n\nselection\n\nA binding to a set that identifies selected rows.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nSee Also\nListing identifiable data\ninit<Data, RowContent>(Data, rowContent: (Data.Element) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, RowContent>(Data, selection: Binding<SelectionValue>, rowContent: (Data.Element) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Data, selection: Binding<SelectionValue?>?, rowContent: (Data.Element) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:id:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:id:selection:rowcontent:)-5idq3",
        "html": "Parameters\ndata\n\nThe data for populating the list.\n\nid\n\nThe key path to the data model\u2019s identifier.\n\nselection\n\nA binding to a set that identifies selected rows.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nSee Also\nListing bound data\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that identifies its rows based on a key path to the identifier of the underlying data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:id:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:id:rowcontent:)-4s0aj",
        "html": "Parameters\ndata\n\nThe data for populating the list.\n\nid\n\nThe key path to the data model\u2019s identifier.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nSee Also\nListing data\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, selection: Binding<SelectionValue>, rowContent: (Data.Element) -> RowContent)\nCreates a list that identifies its rows based on a key path to the identifier of the underlying data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, selection: Binding<SelectionValue?>?, rowContent: (Data.Element) -> RowContent)\nCreates a list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, selection: Binding<Set<SelectionValue>>?, rowContent: (Data.Element) -> RowContent)\nCreates a list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(content:)",
        "html": "Parameters\ncontent\n\nThe content of the list.\n\nSee Also\nCreating a list with arbitrary content\ninit(selection: Binding<SelectionValue>, content: () -> Content)\nCreates a list with the given content that supports selecting a single row that cannot be deselcted.\ninit(selection: Binding<SelectionValue?>?, content: () -> Content)\nCreates a list with the given content that supports selecting a single row.\ninit(selection: Binding<Set<SelectionValue>>?, content: () -> Content)\nCreates a list with the given content that supports selecting multiple rows."
    },
    {
        "title": "init(_:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:rowcontent:)-4c78v",
        "html": "Parameters\ndata\n\nA collection of identifiable data for computing the list.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nSee Also\nListing bound, identifiable data\ninit<Data, RowContent>(Binding<Data>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:children:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:children:rowcontent:)-7lxt3",
        "html": "Parameters\ndata\n\nA collection of identifiable data for computing the list.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data. A non-nil but empty value denotes a node capable of having children that is currently childless, such as an empty directory in a file system. On the other hand, if the property at the key path is nil, then data is treated as a leaf node in the tree, like a regular file in a file system.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nSee Also\nListing hierarchical data\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, children: KeyPath<Data.Element, Data?>, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<SelectionValue>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, children: KeyPath<Data.Element, Data?>, selection: Binding<SelectionValue?>?, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, children: KeyPath<Data.Element, Data?>, selection: Binding<Set<SelectionValue>>?, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<SelectionValue>, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from an underlying collection of identifiable data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<SelectionValue?>?, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from an underlying collection of identifiable data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<Set<SelectionValue>>?, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from an underlying collection of identifiable data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:selection:rowcontent:)-4kita",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the list.\n\nselection\n\nA binding to a set that identifies selected rows.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nSee Also\nListing bound, identifiable data\ninit<Data, RowContent>(Binding<Data>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, selection: Binding<SelectionValue?>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:id:children:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:id:children:selection:rowcontent:)-pj5w",
        "html": "Parameters\ndata\n\nThe data for populating the list.\n\nid\n\nThe key path to the data model\u2019s identifier.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data. A non-nil but empty value denotes a node capable of having children that is currently childless, such as an empty directory in a file system. On the other hand, if the property at the key path is nil, then data is treated as a leaf node in the tree, like a regular file in a file system.\n\nselection\n\nA binding to a non optional selected value.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nSee Also\nListing hierarchical data\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, children: KeyPath<Data.Element, Data?>, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, children: KeyPath<Data.Element, Data?>, selection: Binding<SelectionValue?>?, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, children: KeyPath<Data.Element, Data?>, selection: Binding<Set<SelectionValue>>?, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Data, children: KeyPath<Data.Element, Data?>, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from an underlying collection of identifiable data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, RowContent>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<SelectionValue>, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from an underlying collection of identifiable data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<SelectionValue?>?, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from an underlying collection of identifiable data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<Set<SelectionValue>>?, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from an underlying collection of identifiable data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:selection:rowcontent:)-1q8lq",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the list.\n\nselection\n\nA binding to a selected value.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nSee Also\nListing bound, identifiable data\ninit<Data, RowContent>(Binding<Data>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, RowContent>(Binding<Data>, selection: Binding<Set<SelectionValue>>?, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:id:children:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:id:children:selection:rowcontent:)-5ynav",
        "html": "Parameters\ndata\n\nThe data for populating the list.\n\nid\n\nThe key path to the data model\u2019s identifier.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data. A non-nil but empty value denotes a node capable of having children that is currently childless, such as an empty directory in a file system. On the other hand, if the property at the key path is nil, then data is treated as a leaf node in the tree, like a regular file in a file system.\n\nselection\n\nA binding to a selected value.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nSee Also\nListing hierarchical data\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, children: KeyPath<Data.Element, Data?>, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<SelectionValue>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, children: KeyPath<Data.Element, Data?>, selection: Binding<Set<SelectionValue>>?, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Data, children: KeyPath<Data.Element, Data?>, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from an underlying collection of identifiable data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, RowContent>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<SelectionValue>, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from an underlying collection of identifiable data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<SelectionValue?>?, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from an underlying collection of identifiable data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<Set<SelectionValue>>?, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from an underlying collection of identifiable data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:id:children:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:id:children:rowcontent:)-93wbq",
        "html": "Parameters\ndata\n\nThe data for populating the list.\n\nid\n\nThe key path to the data model\u2019s identifier.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data. A non-nil but empty value denotes a node capable of having children that is currently childless, such as an empty directory in a file system. On the other hand, if the property at the key path is nil, then data is treated as a leaf node in the tree, like a regular file in a file system.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nSee Also\nListing hierarchical data\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<SelectionValue>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, children: KeyPath<Data.Element, Data?>, selection: Binding<SelectionValue?>?, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, children: KeyPath<Data.Element, Data?>, selection: Binding<Set<SelectionValue>>?, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Data, children: KeyPath<Data.Element, Data?>, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from an underlying collection of identifiable data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, RowContent>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<SelectionValue>, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from an underlying collection of identifiable data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<SelectionValue?>?, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from an underlying collection of identifiable data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<Set<SelectionValue>>?, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from an underlying collection of identifiable data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(selection:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(selection:content:)-590zm",
        "html": "Parameters\nselection\n\nA binding to a selected row.\n\ncontent\n\nThe content of the list.\n\nSee Also\nCreating a list with arbitrary content\ninit(content: () -> Content)\nCreates a list with the given content.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit(selection: Binding<SelectionValue?>?, content: () -> Content)\nCreates a list with the given content that supports selecting a single row.\ninit(selection: Binding<Set<SelectionValue>>?, content: () -> Content)\nCreates a list with the given content that supports selecting multiple rows."
    },
    {
        "title": "init(_:children:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:children:selection:rowcontent:)-7r7to",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the list.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data. A non-nil but empty value denotes a node capable of having children that is currently childless, such as an empty directory in a file system. On the other hand, if the property at the key path is nil, then data is treated as a leaf node in the tree, like a regular file in a file system.\n\nselection\n\nA binding to a non optional selected value.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nSee Also\nListing hierarchical data\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, children: KeyPath<Data.Element, Data?>, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<SelectionValue>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, children: KeyPath<Data.Element, Data?>, selection: Binding<SelectionValue?>?, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, children: KeyPath<Data.Element, Data?>, selection: Binding<Set<SelectionValue>>?, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Data, children: KeyPath<Data.Element, Data?>, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from an underlying collection of identifiable data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, RowContent>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<SelectionValue?>?, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from an underlying collection of identifiable data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<Set<SelectionValue>>?, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from an underlying collection of identifiable data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "convert(_:from:)",
        "url": "https://developer.apple.com/documentation/swiftui/physicalmetricsconverter/convert(_:from:)-2jevl",
        "html": "Return Value\n\nA value in points. Use this value only in the scene this converter was associated with.\n\nSee Also\nConverting from a unit length\nfunc convert(Rect3D, from: UnitLength) -> Rect3D\nConverts a Rect3D, whose coordinates are in the specified unit, to a Rect3D with coordinates specified in points, suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(Size3D, from: UnitLength) -> Size3D\nConverts a size, given in the specified unit, to a size in points suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(CGFloat, from: UnitLength) -> CGFloat\nConverts a length in the specified unit to a length in points suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(Point3D, from: UnitLength) -> Point3D\nConverts a point, whose coordinates are in the specified unit, to a point value suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(CGSize, from: UnitLength) -> CGSize\nConverts a size, given in the specified unit, to a size in points suitable for use in the environment this converter is associated with.\nBeta\nfunc convert<V>(V, from: UnitLength) -> V\nConverts a vector of physical length measurements, in the specified unit, to a vector of values in points suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(CGRect, from: UnitLength) -> CGRect\nConverts a rectangle, whose coordinates are in the specified unit, to a rectangle with coordinates specified in points, suitable for use in the environment this converter is associated with.\nBeta"
    },
    {
        "title": "init(action:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/button/init(action:label:)",
        "html": "Parameters\naction\n\nThe action to perform when the user triggers the button.\n\nlabel\n\nA view that describes the purpose of the button\u2019s action.\n\nSee Also\nCreating a button\ninit(LocalizedStringKey, action: () -> Void)\nCreates a button that generates its label from a localized string key.\nAvailable when Label is Text.\ninit<S>(S, action: () -> Void)\nCreates a button that generates its label from a string.\nAvailable when Label is Text."
    },
    {
        "title": "SpatialEventCollection.Iterator",
        "url": "https://developer.apple.com/documentation/swiftui/spatialeventcollection/iterator",
        "html": "Topics\nGetting the next event\nfunc next() -> SpatialEventCollection.Event?\nThe next Event in the sequence, if one exists.\nRelationships\nConforms To\nIteratorProtocol\nSee Also\nIterating over events in the collection\nfunc makeIterator() -> SpatialEventCollection.Iterator\nMakes an iterator over all events in the collection.\nBeta"
    },
    {
        "title": "convert(_:from:)",
        "url": "https://developer.apple.com/documentation/swiftui/physicalmetricsconverter/convert(_:from:)-2meip",
        "html": "Return Value\n\nA value in points. Use this value only in the scene this converter was associated with.\n\nSee Also\nConverting from a unit length\nfunc convert(CGPoint, from: UnitLength) -> CGPoint\nConverts a point, whose coordinates are in the specified unit, to a point suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(Size3D, from: UnitLength) -> Size3D\nConverts a size, given in the specified unit, to a size in points suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(CGFloat, from: UnitLength) -> CGFloat\nConverts a length in the specified unit to a length in points suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(Point3D, from: UnitLength) -> Point3D\nConverts a point, whose coordinates are in the specified unit, to a point value suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(CGSize, from: UnitLength) -> CGSize\nConverts a size, given in the specified unit, to a size in points suitable for use in the environment this converter is associated with.\nBeta\nfunc convert<V>(V, from: UnitLength) -> V\nConverts a vector of physical length measurements, in the specified unit, to a vector of values in points suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(CGRect, from: UnitLength) -> CGRect\nConverts a rectangle, whose coordinates are in the specified unit, to a rectangle with coordinates specified in points, suitable for use in the environment this converter is associated with.\nBeta"
    },
    {
        "title": "convert(_:from:)",
        "url": "https://developer.apple.com/documentation/swiftui/physicalmetricsconverter/convert(_:from:)-7d4qd",
        "html": "Return Value\n\nA value in points. Use this value only in the scene this converter was associated with.\n\nSee Also\nConverting from a unit length\nfunc convert(CGPoint, from: UnitLength) -> CGPoint\nConverts a point, whose coordinates are in the specified unit, to a point suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(Rect3D, from: UnitLength) -> Rect3D\nConverts a Rect3D, whose coordinates are in the specified unit, to a Rect3D with coordinates specified in points, suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(Size3D, from: UnitLength) -> Size3D\nConverts a size, given in the specified unit, to a size in points suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(CGFloat, from: UnitLength) -> CGFloat\nConverts a length in the specified unit to a length in points suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(Point3D, from: UnitLength) -> Point3D\nConverts a point, whose coordinates are in the specified unit, to a point value suitable for use in the environment this converter is associated with.\nBeta\nfunc convert<V>(V, from: UnitLength) -> V\nConverts a vector of physical length measurements, in the specified unit, to a vector of values in points suitable for use in the environment this converter is associated with.\nBeta\nfunc convert(CGRect, from: UnitLength) -> CGRect\nConverts a rectangle, whose coordinates are in the specified unit, to a rectangle with coordinates specified in points, suitable for use in the environment this converter is associated with.\nBeta"
    },
    {
        "title": "makeIterator()",
        "url": "https://developer.apple.com/documentation/swiftui/spatialeventcollection/makeiterator()",
        "html": "See Also\nIterating over events in the collection\nstruct Iterator\nAn iterator over all events in the collection.\nBeta"
    },
    {
        "title": "state",
        "url": "https://developer.apple.com/documentation/swiftui/gesturestategesture/state",
        "html": "See Also\nCreating an in-progress gesture\ninit(base: Base, state: GestureState<State>, body: (GestureStateGesture<Base, State>.Value, inout State, inout Transaction) -> Void)\nCreates a new gesture that\u2019s the result of an ongoing gesture.\nvar base: Base\nThe originating gesture."
    },
    {
        "title": "convert(_:to:)",
        "url": "https://developer.apple.com/documentation/swiftui/physicalmetricsconverter/convert(_:to:)-2kto1",
        "html": "Return Value\n\nA rectangle with physical length measurements, in the given unit\n\nDiscussion\n\nThe rectangle is assumed to be in the coordinate system of the scene that this converter is associated with. If the scene is scaled, the physical measurement will take this scale into account.\n\nSee Also\nConverting to a unit length\nfunc convert(Rect3D, to: UnitLength) -> Rect3D\nConverts a Rect3D\u2019s coordinates to physical length measurements in the specified unit.\nBeta\nfunc convert(CGPoint, to: UnitLength) -> CGPoint\nConverts a point\u2019s coordinates to physical length measurements in the specified unit.\nBeta\nfunc convert<V>(V, to: UnitLength) -> V\nConverts a vector of values in points to corresponding physical length measurements in the specified unit.\nBeta\nfunc convert(Point3D, to: UnitLength) -> Point3D\nConverts a point\u2019s coordinates to physical length measurements in the specified unit.\nBeta\nfunc convert(CGSize, to: UnitLength) -> CGSize\nConverts a size, specified in points, to physical length measurements in the specified unit.\nBeta\nfunc convert(Size3D, to: UnitLength) -> Size3D\nConverts a size, specified in points, to physical length measurements in the specified unit.\nBeta\nfunc convert(CGFloat, to: UnitLength) -> CGFloat\nConverts a length in points to a physical length measurement in the specified unit.\nBeta"
    },
    {
        "title": "convert(_:to:)",
        "url": "https://developer.apple.com/documentation/swiftui/physicalmetricsconverter/convert(_:to:)-2c6e6",
        "html": "Return Value\n\nA Rect3D value with physical length measurements, in the given unit\n\nDiscussion\n\nThe Rect3D is assumed to be in the coordinate system of the scene that this converter is associated with. If the scene is scaled, the physical measurement will take this scale into account.\n\nSee Also\nConverting to a unit length\nfunc convert(CGRect, to: UnitLength) -> CGRect\nConverts a rectangle\u2019s coordinates to physical length measurements in the specified unit.\nBeta\nfunc convert(CGPoint, to: UnitLength) -> CGPoint\nConverts a point\u2019s coordinates to physical length measurements in the specified unit.\nBeta\nfunc convert<V>(V, to: UnitLength) -> V\nConverts a vector of values in points to corresponding physical length measurements in the specified unit.\nBeta\nfunc convert(Point3D, to: UnitLength) -> Point3D\nConverts a point\u2019s coordinates to physical length measurements in the specified unit.\nBeta\nfunc convert(CGSize, to: UnitLength) -> CGSize\nConverts a size, specified in points, to physical length measurements in the specified unit.\nBeta\nfunc convert(Size3D, to: UnitLength) -> Size3D\nConverts a size, specified in points, to physical length measurements in the specified unit.\nBeta\nfunc convert(CGFloat, to: UnitLength) -> CGFloat\nConverts a length in points to a physical length measurement in the specified unit.\nBeta"
    },
    {
        "title": "SpatialEventCollection.Event",
        "url": "https://developer.apple.com/documentation/swiftui/spatialeventcollection/event",
        "html": "Overview\n\nYou receive a collection of these events in the form of a SpatialEventCollection that\u2019s the input to the onChanged(_:) or onEnded(_:) method of a SpatialEventGesture. Inspect individual events to track interactions that enable you to create complex, multi-touch experiences in your app.\n\nTopics\nIdentifying the event\nvar timestamp: TimeInterval\nThe time the event was processed.\nvar id: SpatialEventCollection.Event.ID\nAn identifier that uniquely identifies the event over its lifetime.\nstruct ID\nA value that uniquely identifies an event over the course of its lifetime.\nvar kind: SpatialEventCollection.Event.Kind\nThe event\u2019s input source.\nenum Kind\nThe possible input sources or modes of an event.\nvar modifierKeys: EventModifiers\nThe set of active modifier keys at the time of this event.\nLocating the event\nvar location: CGPoint\nThe 2D location of the event.\nvar location3D: Point3D\nThe 3D location of the touch.\nvar selectionRay: Ray3D?\nThe 3D ray used to target the touch.\nvar inputDevicePose: SpatialEventCollection.Event.InputDevicePose?\nThe 3D position and orientation of the device controlling the touch, if one exists.\nstruct InputDevicePose\nA pose describing the input device like a hand controlling the event.\nvar targetedEntity: Entity?\nThe entity target for this touch, if one exists.\nGetting the event\u2019s current phase\nvar phase: SpatialEventCollection.Event.Phase\nThe phase of the event.\nenum Phase\nThe states that an event can have.\nRelationships\nConforms To\nEquatable\nHashable\nIdentifiable\nSee Also\nAccessing the collection\u2019s events\nsubscript(SpatialEventCollection.Event.ID) -> SpatialEventCollection.Event?\nRetrieves an event using its unique identifier.\nBeta"
    },
    {
        "title": "convert(_:to:)",
        "url": "https://developer.apple.com/documentation/swiftui/physicalmetricsconverter/convert(_:to:)-6iyne",
        "html": "Return Value\n\nA vector of physical length measurements, each converted from the points value in the input vector at the same position. converter was associated with.\n\nDiscussion\n\nThe point values are assumed to be in the coordinate system of the scene that this converter is associated with. If the scene was scaled by user action, the physical measurement will take this scale into account.\n\nSee Also\nConverting to a unit length\nfunc convert(Rect3D, to: UnitLength) -> Rect3D\nConverts a Rect3D\u2019s coordinates to physical length measurements in the specified unit.\nBeta\nfunc convert(CGRect, to: UnitLength) -> CGRect\nConverts a rectangle\u2019s coordinates to physical length measurements in the specified unit.\nBeta\nfunc convert(CGPoint, to: UnitLength) -> CGPoint\nConverts a point\u2019s coordinates to physical length measurements in the specified unit.\nBeta\nfunc convert(Point3D, to: UnitLength) -> Point3D\nConverts a point\u2019s coordinates to physical length measurements in the specified unit.\nBeta\nfunc convert(CGSize, to: UnitLength) -> CGSize\nConverts a size, specified in points, to physical length measurements in the specified unit.\nBeta\nfunc convert(Size3D, to: UnitLength) -> Size3D\nConverts a size, specified in points, to physical length measurements in the specified unit.\nBeta\nfunc convert(CGFloat, to: UnitLength) -> CGFloat\nConverts a length in points to a physical length measurement in the specified unit.\nBeta"
    },
    {
        "title": "convert(_:to:)",
        "url": "https://developer.apple.com/documentation/swiftui/physicalmetricsconverter/convert(_:to:)-2vyh7",
        "html": "Return Value\n\nA point value with physical length measurements, in the given unit\n\nDiscussion\n\nThe point is assumed to be in the coordinate system of the scene that this converter is associated with. If the scene is scaled, the physical measurement will take this scale into account.\n\nSee Also\nConverting to a unit length\nfunc convert(Rect3D, to: UnitLength) -> Rect3D\nConverts a Rect3D\u2019s coordinates to physical length measurements in the specified unit.\nBeta\nfunc convert(CGRect, to: UnitLength) -> CGRect\nConverts a rectangle\u2019s coordinates to physical length measurements in the specified unit.\nBeta\nfunc convert<V>(V, to: UnitLength) -> V\nConverts a vector of values in points to corresponding physical length measurements in the specified unit.\nBeta\nfunc convert(Point3D, to: UnitLength) -> Point3D\nConverts a point\u2019s coordinates to physical length measurements in the specified unit.\nBeta\nfunc convert(CGSize, to: UnitLength) -> CGSize\nConverts a size, specified in points, to physical length measurements in the specified unit.\nBeta\nfunc convert(Size3D, to: UnitLength) -> Size3D\nConverts a size, specified in points, to physical length measurements in the specified unit.\nBeta\nfunc convert(CGFloat, to: UnitLength) -> CGFloat\nConverts a length in points to a physical length measurement in the specified unit.\nBeta"
    },
    {
        "title": "init(_:children:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:children:selection:rowcontent:)-2pt7r",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the list.\n\nchildren\n\nA key path to a property whose non-nil value gives the children of data. A non-nil but empty value denotes a node capable of having children that is currently childless, such as an empty directory in a file system. On the other hand, if the property at the key path is nil, then data is treated as a leaf node in the tree, like a regular file in a file system.\n\nselection\n\nA binding to a selected value.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nSee Also\nListing hierarchical data\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, children: KeyPath<Data.Element, Data?>, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, children: WritableKeyPath<Data.Element, Data?>, selection: Binding<SelectionValue>, rowContent: (Binding<Data.Element>) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, children: KeyPath<Data.Element, Data?>, selection: Binding<SelectionValue?>?, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, children: KeyPath<Data.Element, Data?>, selection: Binding<Set<SelectionValue>>?, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Data, children: KeyPath<Data.Element, Data?>, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from an underlying collection of identifiable data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, RowContent>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<SelectionValue>, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from an underlying collection of identifiable data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Data, children: KeyPath<Data.Element, Data?>, selection: Binding<Set<SelectionValue>>?, rowContent: (Data.Element) -> RowContent)\nCreates a hierarchical list that computes its rows on demand from an underlying collection of identifiable data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnbuilder/buildblock(_:_:_:_:_:_:_:)-3mxxr",
        "html": "See Also\nBuilding an unsortable column\nstatic func buildBlock<Column>(Column) -> Column\nCreates a single, unsortable column result.\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableColumnContent<RowValue, Never, (C0, C1)>\nCreates an unsortable column result from two sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2)>\nCreates an unsortable column result from three sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3)>\nCreates an unsortable column result from four sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4)>\nCreates an unsortable column result from five sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5)>\nCreates an unsortable column result from six sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates an unsortable column result from eight sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates an unsortable column result from nine sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates an unsortable column result from ten sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildExpression<Column>(Column) -> Column\nCreates a generic, unsortable single column expression.\nstatic func buildExpression<Content, Label>(TableColumn<RowValue, Never, Content, Label>) -> TableColumn<RowValue, Never, Content, Label>\nCreates a sortable table column expression whose value type matches that of the builder."
    },
    {
        "title": "convert(_:to:)",
        "url": "https://developer.apple.com/documentation/swiftui/physicalmetricsconverter/convert(_:to:)-8y4hv",
        "html": "Return Value\n\nA physical length in the given unit\n\nDiscussion\n\nThe length is assumed to be in the coordinate system of the scene that this converter is associated with. If the scene is scaled, the physical measurement will take this scale into account.\n\nSee Also\nConverting to a unit length\nfunc convert(Rect3D, to: UnitLength) -> Rect3D\nConverts a Rect3D\u2019s coordinates to physical length measurements in the specified unit.\nBeta\nfunc convert(CGRect, to: UnitLength) -> CGRect\nConverts a rectangle\u2019s coordinates to physical length measurements in the specified unit.\nBeta\nfunc convert(CGPoint, to: UnitLength) -> CGPoint\nConverts a point\u2019s coordinates to physical length measurements in the specified unit.\nBeta\nfunc convert<V>(V, to: UnitLength) -> V\nConverts a vector of values in points to corresponding physical length measurements in the specified unit.\nBeta\nfunc convert(Point3D, to: UnitLength) -> Point3D\nConverts a point\u2019s coordinates to physical length measurements in the specified unit.\nBeta\nfunc convert(CGSize, to: UnitLength) -> CGSize\nConverts a size, specified in points, to physical length measurements in the specified unit.\nBeta\nfunc convert(Size3D, to: UnitLength) -> Size3D\nConverts a size, specified in points, to physical length measurements in the specified unit.\nBeta"
    },
    {
        "title": "convert(_:to:)",
        "url": "https://developer.apple.com/documentation/swiftui/physicalmetricsconverter/convert(_:to:)-788cl",
        "html": "Return Value\n\nA point value with physical length measurements, in the given unit\n\nDiscussion\n\nThe point is assumed to be in the coordinate system of the scene that this converter is associated with. If the scene is scaled, the physical measurement will take this scale into account.\n\nSee Also\nConverting to a unit length\nfunc convert(Rect3D, to: UnitLength) -> Rect3D\nConverts a Rect3D\u2019s coordinates to physical length measurements in the specified unit.\nBeta\nfunc convert(CGRect, to: UnitLength) -> CGRect\nConverts a rectangle\u2019s coordinates to physical length measurements in the specified unit.\nBeta\nfunc convert(CGPoint, to: UnitLength) -> CGPoint\nConverts a point\u2019s coordinates to physical length measurements in the specified unit.\nBeta\nfunc convert<V>(V, to: UnitLength) -> V\nConverts a vector of values in points to corresponding physical length measurements in the specified unit.\nBeta\nfunc convert(CGSize, to: UnitLength) -> CGSize\nConverts a size, specified in points, to physical length measurements in the specified unit.\nBeta\nfunc convert(Size3D, to: UnitLength) -> Size3D\nConverts a size, specified in points, to physical length measurements in the specified unit.\nBeta\nfunc convert(CGFloat, to: UnitLength) -> CGFloat\nConverts a length in points to a physical length measurement in the specified unit.\nBeta"
    },
    {
        "title": "convert(_:to:)",
        "url": "https://developer.apple.com/documentation/swiftui/physicalmetricsconverter/convert(_:to:)-7nwfc",
        "html": "Return Value\n\nA size in the given unit\n\nDiscussion\n\nThe size is assumed to be in the coordinate system of the scene that this converter is associated with. If the scene is scaled, the physical measurement will take this scale into account.\n\nSee Also\nConverting to a unit length\nfunc convert(Rect3D, to: UnitLength) -> Rect3D\nConverts a Rect3D\u2019s coordinates to physical length measurements in the specified unit.\nBeta\nfunc convert(CGRect, to: UnitLength) -> CGRect\nConverts a rectangle\u2019s coordinates to physical length measurements in the specified unit.\nBeta\nfunc convert(CGPoint, to: UnitLength) -> CGPoint\nConverts a point\u2019s coordinates to physical length measurements in the specified unit.\nBeta\nfunc convert<V>(V, to: UnitLength) -> V\nConverts a vector of values in points to corresponding physical length measurements in the specified unit.\nBeta\nfunc convert(Point3D, to: UnitLength) -> Point3D\nConverts a point\u2019s coordinates to physical length measurements in the specified unit.\nBeta\nfunc convert(Size3D, to: UnitLength) -> Size3D\nConverts a size, specified in points, to physical length measurements in the specified unit.\nBeta\nfunc convert(CGFloat, to: UnitLength) -> CGFloat\nConverts a length in points to a physical length measurement in the specified unit.\nBeta"
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/edgeinsets/init(_:)-688s9",
        "html": "See Also\nCreating an edge inset\ninit()\ninit(top: CGFloat, leading: CGFloat, bottom: CGFloat, trailing: CGFloat)\ninit(EdgeInsets3D)\nCreates a 2D EdgeInsets from an EdgeInsets3D, dropping its front and back values.\nBeta"
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnbuilder/buildblock(_:_:_:_:_:_:_:_:)-42gw6",
        "html": "See Also\nBuilding an unsortable column\nstatic func buildBlock<Column>(Column) -> Column\nCreates a single, unsortable column result.\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableColumnContent<RowValue, Never, (C0, C1)>\nCreates an unsortable column result from two sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2)>\nCreates an unsortable column result from three sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3)>\nCreates an unsortable column result from four sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4)>\nCreates an unsortable column result from five sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5)>\nCreates an unsortable column result from six sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6)>\nCreates an unsortable column result from seven sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates an unsortable column result from nine sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates an unsortable column result from ten sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildExpression<Column>(Column) -> Column\nCreates a generic, unsortable single column expression.\nstatic func buildExpression<Content, Label>(TableColumn<RowValue, Never, Content, Label>) -> TableColumn<RowValue, Never, Content, Label>\nCreates a sortable table column expression whose value type matches that of the builder."
    },
    {
        "title": "init(top:leading:bottom:trailing:)",
        "url": "https://developer.apple.com/documentation/swiftui/edgeinsets/init(top:leading:bottom:trailing:)",
        "html": "See Also\nCreating an edge inset\ninit()\ninit(EdgeInsets3D)\nCreates a 2D EdgeInsets from an EdgeInsets3D, dropping its front and back values.\nBeta\ninit(NSDirectionalEdgeInsets)\nCreate edge insets from the equivalent NSDirectionalEdgeInsets."
    },
    {
        "title": "convert(_:to:)",
        "url": "https://developer.apple.com/documentation/swiftui/physicalmetricsconverter/convert(_:to:)-8lxpt",
        "html": "Return Value\n\nA size in the given unit\n\nDiscussion\n\nThe size is assumed to be in the coordinate system of the scene that this converter is associated with. If the scene is scaled, the physical measurement will take this scale into account.\n\nSee Also\nConverting to a unit length\nfunc convert(Rect3D, to: UnitLength) -> Rect3D\nConverts a Rect3D\u2019s coordinates to physical length measurements in the specified unit.\nBeta\nfunc convert(CGRect, to: UnitLength) -> CGRect\nConverts a rectangle\u2019s coordinates to physical length measurements in the specified unit.\nBeta\nfunc convert(CGPoint, to: UnitLength) -> CGPoint\nConverts a point\u2019s coordinates to physical length measurements in the specified unit.\nBeta\nfunc convert<V>(V, to: UnitLength) -> V\nConverts a vector of values in points to corresponding physical length measurements in the specified unit.\nBeta\nfunc convert(Point3D, to: UnitLength) -> Point3D\nConverts a point\u2019s coordinates to physical length measurements in the specified unit.\nBeta\nfunc convert(CGSize, to: UnitLength) -> CGSize\nConverts a size, specified in points, to physical length measurements in the specified unit.\nBeta\nfunc convert(CGFloat, to: UnitLength) -> CGFloat\nConverts a length in points to a physical length measurement in the specified unit.\nBeta"
    },
    {
        "title": "m13",
        "url": "https://developer.apple.com/documentation/swiftui/projectiontransform/m13",
        "html": "See Also\nAccessing the transform\u2019s coefficients\nvar m11: CGFloat\nvar m12: CGFloat\nvar m21: CGFloat\nvar m22: CGFloat\nvar m23: CGFloat\nvar m31: CGFloat\nvar m32: CGFloat\nvar m33: CGFloat"
    },
    {
        "title": "SpatialEventCollection.Event.Phase.cancelled",
        "url": "https://developer.apple.com/documentation/swiftui/spatialeventcollection/event/phase-swift.enum/cancelled",
        "html": "See Also\nGetting the phase\ncase active\nThe phase is active and the state associated with it is guaranteed to produce at least one more update.\nBeta\ncase ended\nThe state associated with this phase ended normally and won\u2019t produce any more updates.\nBeta"
    },
    {
        "title": "buildBlock(_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnbuilder/buildblock(_:_:_:_:_:)-29svh",
        "html": "See Also\nBuilding an unsortable column\nstatic func buildBlock<Column>(Column) -> Column\nCreates a single, unsortable column result.\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableColumnContent<RowValue, Never, (C0, C1)>\nCreates an unsortable column result from two sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2)>\nCreates an unsortable column result from three sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3)>\nCreates an unsortable column result from four sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5)>\nCreates an unsortable column result from six sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6)>\nCreates an unsortable column result from seven sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates an unsortable column result from eight sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates an unsortable column result from nine sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates an unsortable column result from ten sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildExpression<Column>(Column) -> Column\nCreates a generic, unsortable single column expression.\nstatic func buildExpression<Content, Label>(TableColumn<RowValue, Never, Content, Label>) -> TableColumn<RowValue, Never, Content, Label>\nCreates a sortable table column expression whose value type matches that of the builder."
    },
    {
        "title": "init(_:role:intent:)",
        "url": "https://developer.apple.com/documentation/swiftui/button/init(_:role:intent:)-5bujb",
        "html": "Parameters\ntitle\n\nA string that describes the purpose of the button\u2019s intent.\n\nrole\n\nAn optional semantic role describing the button. A value of nil means that the button doesn\u2019t have an assigned role.\n\nintent\n\nThe AppIntent to execute.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). See Text for more information about localizing strings.\n\nSee Also\nCreating a button to perform an App Intent\ninit<I>(intent: I, label: () -> Label)\nCreates a button that performs an AppIntent.\nAvailable when Label conforms to View.\ninit(LocalizedStringKey, intent: some AppIntent)\nCreates a button that performs an AppIntent and generates its label from a localized string key.\nAvailable when Label is Text.\ninit<S>(S, intent: some AppIntent)\nCreates a button that performs an AppIntent and generates its label from a string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, image: ImageResource, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a localized string key and an image resource.\nAvailable when Label is Label<Text, Image>.\ninit(some StringProtocol, image: ImageResource, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that generates its label from a string and an image resource.\nAvailable when Label is Label<Text, Image>.\ninit(LocalizedStringKey, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a localized string key.\nAvailable when Label is Text.\ninit(LocalizedStringKey, systemImage: String, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a localized string key and a system image.\nAvailable when Label is Label<Text, Image>.\ninit(some StringProtocol, systemImage: String, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that generates its label from a string and a system image.\nAvailable when Label is Label<Text, Image>.\ninit(role: ButtonRole?, intent: some AppIntent, label: () -> Label)\nCreates a button with a specified role that performs an AppIntent.\nAvailable when Label conforms to View."
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnbuilder/buildblock(_:_:_:_:_:_:)-7dukl",
        "html": "See Also\nBuilding an unsortable column\nstatic func buildBlock<Column>(Column) -> Column\nCreates a single, unsortable column result.\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableColumnContent<RowValue, Never, (C0, C1)>\nCreates an unsortable column result from two sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2)>\nCreates an unsortable column result from three sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3)>\nCreates an unsortable column result from four sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4)>\nCreates an unsortable column result from five sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6)>\nCreates an unsortable column result from seven sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates an unsortable column result from eight sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates an unsortable column result from nine sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates an unsortable column result from ten sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildExpression<Column>(Column) -> Column\nCreates a generic, unsortable single column expression.\nstatic func buildExpression<Content, Label>(TableColumn<RowValue, Never, Content, Label>) -> TableColumn<RowValue, Never, Content, Label>\nCreates a sortable table column expression whose value type matches that of the builder."
    },
    {
        "title": "isIdentity",
        "url": "https://developer.apple.com/documentation/swiftui/projectiontransform/isidentity",
        "html": "See Also\nGetting transform characteristics\nvar isAffine: Bool"
    },
    {
        "title": "SpatialEventCollection.Event.Phase.ended",
        "url": "https://developer.apple.com/documentation/swiftui/spatialeventcollection/event/phase-swift.enum/ended",
        "html": "See Also\nGetting the phase\ncase active\nThe phase is active and the state associated with it is guaranteed to produce at least one more update.\nBeta\ncase cancelled\nThe state associated with this phase was canceled and won\u2019t produce any more updates.\nBeta"
    },
    {
        "title": "buildBlock(_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnbuilder/buildblock(_:_:_:)-60njg",
        "html": "See Also\nBuilding an unsortable column\nstatic func buildBlock<Column>(Column) -> Column\nCreates a single, unsortable column result.\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableColumnContent<RowValue, Never, (C0, C1)>\nCreates an unsortable column result from two sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3)>\nCreates an unsortable column result from four sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4)>\nCreates an unsortable column result from five sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5)>\nCreates an unsortable column result from six sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6)>\nCreates an unsortable column result from seven sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates an unsortable column result from eight sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates an unsortable column result from nine sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates an unsortable column result from ten sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildExpression<Column>(Column) -> Column\nCreates a generic, unsortable single column expression.\nstatic func buildExpression<Content, Label>(TableColumn<RowValue, Never, Content, Label>) -> TableColumn<RowValue, Never, Content, Label>\nCreates a sortable table column expression whose value type matches that of the builder."
    },
    {
        "title": "invert()",
        "url": "https://developer.apple.com/documentation/swiftui/projectiontransform/invert()",
        "html": "See Also\nManipulating transforms\nfunc inverted() -> ProjectionTransform\nfunc concatenating(ProjectionTransform) -> ProjectionTransform"
    },
    {
        "title": "buildBlock(_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnbuilder/buildblock(_:_:)-5mgkp",
        "html": "See Also\nBuilding a sortable column\nstatic func buildBlock<Column>(Column) -> Column\nCreates a single, sortable column result.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2)>\nCreates a sortable column result from three sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3)>\nCreates a sortable column result from four sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4)>\nCreates a sortable column result from five sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5)>\nCreates a sortable column result from six sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6)>\nCreates a sortable column result from seven sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates a sortable column result from eight sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates a sortable column result from nine sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates a sortable column result from ten sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildExpression<Column>(Column) -> Column\nCreates a generic, sortable single column expression.\nstatic func buildExpression<Content, Label>(TableColumn<RowValue, Sort, Content, Label>) -> TableColumn<RowValue, Sort, Content, Label>\nCreates a sortable table column expression whose value and sort types match those of the builder."
    },
    {
        "title": "buildExpression(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnbuilder/buildexpression(_:)-6m7uf",
        "html": "See Also\nBuilding an unsortable column\nstatic func buildBlock<Column>(Column) -> Column\nCreates a single, unsortable column result.\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableColumnContent<RowValue, Never, (C0, C1)>\nCreates an unsortable column result from two sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2)>\nCreates an unsortable column result from three sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3)>\nCreates an unsortable column result from four sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4)>\nCreates an unsortable column result from five sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5)>\nCreates an unsortable column result from six sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6)>\nCreates an unsortable column result from seven sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates an unsortable column result from eight sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates an unsortable column result from nine sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates an unsortable column result from ten sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildExpression<Content, Label>(TableColumn<RowValue, Never, Content, Label>) -> TableColumn<RowValue, Never, Content, Label>\nCreates a sortable table column expression whose value type matches that of the builder."
    },
    {
        "title": "buildBlock(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnbuilder/buildblock(_:_:_:_:)-8w77e",
        "html": "See Also\nBuilding a sortable column\nstatic func buildBlock<Column>(Column) -> Column\nCreates a single, sortable column result.\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableColumnContent<RowValue, Sort, (C0, C1)>\nCreates a sortable column result from two sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2)>\nCreates a sortable column result from three sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4)>\nCreates a sortable column result from five sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5)>\nCreates a sortable column result from six sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6)>\nCreates a sortable column result from seven sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates a sortable column result from eight sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates a sortable column result from nine sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates a sortable column result from ten sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildExpression<Column>(Column) -> Column\nCreates a generic, sortable single column expression.\nstatic func buildExpression<Content, Label>(TableColumn<RowValue, Sort, Content, Label>) -> TableColumn<RowValue, Sort, Content, Label>\nCreates a sortable table column expression whose value and sort types match those of the builder."
    },
    {
        "title": "buildBlock(_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnbuilder/buildblock(_:_:_:)-3cxda",
        "html": "See Also\nBuilding a sortable column\nstatic func buildBlock<Column>(Column) -> Column\nCreates a single, sortable column result.\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableColumnContent<RowValue, Sort, (C0, C1)>\nCreates a sortable column result from two sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3)>\nCreates a sortable column result from four sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4)>\nCreates a sortable column result from five sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5)>\nCreates a sortable column result from six sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6)>\nCreates a sortable column result from seven sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates a sortable column result from eight sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates a sortable column result from nine sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates a sortable column result from ten sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildExpression<Column>(Column) -> Column\nCreates a generic, sortable single column expression.\nstatic func buildExpression<Content, Label>(TableColumn<RowValue, Sort, Content, Label>) -> TableColumn<RowValue, Sort, Content, Label>\nCreates a sortable table column expression whose value and sort types match those of the builder."
    },
    {
        "title": "LayoutDirection.rightToLeft",
        "url": "https://developer.apple.com/documentation/swiftui/layoutdirection/righttoleft",
        "html": "See Also\nGetting layout directions\ncase leftToRight\nA left-to-right layout direction."
    },
    {
        "title": "LayoutDirection.leftToRight",
        "url": "https://developer.apple.com/documentation/swiftui/layoutdirection/lefttoright",
        "html": "See Also\nGetting layout directions\ncase rightToLeft\nA right-to-left layout direction."
    },
    {
        "title": "all",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumncustomizationbehavior/all",
        "html": "See Also\nGetting the customization behavior\nstatic let reorder: TableColumnCustomizationBehavior\nA behavior that allows the column to be reordered by the user.\nstatic let resize: TableColumnCustomizationBehavior\nA behavior that allows the column to be resized by the user.\nstatic let visibility: TableColumnCustomizationBehavior\nA behavior that allows the column to be hidden or revealed by the user."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/focusedvalue/init(_:)-7vluc",
        "html": "Parameters\nkeyPath\n\nThe key path for the focus value to read.\n\nDiscussion\n\nThe value of the property wrapper is updated dynamically as focus changes and different published values go in and out of scope.\n\nSee Also\nCreating the value\ninit(Value.Type)\nA new property wrapper for the given object type."
    },
    {
        "title": "reorder",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumncustomizationbehavior/reorder",
        "html": "See Also\nGetting the customization behavior\nstatic var all: TableColumnCustomizationBehavior\nAll customization behaviors.\nstatic let resize: TableColumnCustomizationBehavior\nA behavior that allows the column to be resized by the user.\nstatic let visibility: TableColumnCustomizationBehavior\nA behavior that allows the column to be hidden or revealed by the user."
    },
    {
        "title": "resize",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumncustomizationbehavior/resize",
        "html": "See Also\nGetting the customization behavior\nstatic var all: TableColumnCustomizationBehavior\nAll customization behaviors.\nstatic let reorder: TableColumnCustomizationBehavior\nA behavior that allows the column to be reordered by the user.\nstatic let visibility: TableColumnCustomizationBehavior\nA behavior that allows the column to be hidden or revealed by the user."
    },
    {
        "title": "visibility",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumncustomizationbehavior/visibility",
        "html": "See Also\nGetting the customization behavior\nstatic var all: TableColumnCustomizationBehavior\nAll customization behaviors.\nstatic let reorder: TableColumnCustomizationBehavior\nA behavior that allows the column to be reordered by the user.\nstatic let resize: TableColumnCustomizationBehavior\nA behavior that allows the column to be resized by the user."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/focusedvalue/init(_:)-5wc9p",
        "html": "Parameters\nobjectType\n\nThe type of object to read the focus value for.\n\nDiscussion\n\nReads the focused value of the given object type.\n\nImportant\n\nThis initializer only accepts objects conforming to the Observable protocol. For reading environment objects that conform to ObservableObject, use FocusedObject, instead.\n\nTo set the focused value that is read by this, use the focusedValue(_:) view modifier.\n\nSee Also\nCreating the value\ninit(KeyPath<FocusedValues, Value?>)\nA new property wrapper for the given key path."
    },
    {
        "title": "coordinateSpace",
        "url": "https://developer.apple.com/documentation/swiftui/spatialtapgesture/coordinatespace",
        "html": "See Also\nCreating a spatial tap gesture\ninit(count: Int, coordinateSpace: some CoordinateSpaceProtocol)\nCreates a tap gesture with the number of required taps and the coordinate space of the gesture\u2019s location.\nvar count: Int\nThe required number of tap events."
    },
    {
        "title": "callAsFunction(in:)",
        "url": "https://developer.apple.com/documentation/swiftui/resetfocusaction/callasfunction(in:)",
        "html": "Parameters\nnamespace\n\nThe namespace inside which SwiftUI should reevaluate default focus. The namespace should match the focusScope(_:) block where focus requires reevaluation.\n\nDiscussion\n\nThe focus system reevaluates default focus when the currently-focused item is within the provided namespace."
    },
    {
        "title": "SpatialTapGesture.Value",
        "url": "https://developer.apple.com/documentation/swiftui/spatialtapgesture/value",
        "html": "Topics\nGetting the tap location\nvar location: CGPoint\nThe location of the tap gesture\u2019s current event.\nvar location3D: Point3D\nThe 3D location of the tap.\nBeta\nRelationships\nConforms To\nEquatable\nSendable"
    },
    {
        "title": "count",
        "url": "https://developer.apple.com/documentation/swiftui/tapgesture/count",
        "html": "See Also\nCreating a tap gesture\ninit(count: Int)\nCreates a tap gesture with the number of required taps."
    },
    {
        "title": "init(count:)",
        "url": "https://developer.apple.com/documentation/swiftui/tapgesture/init(count:)",
        "html": "Parameters\ncount\n\nThe required number of taps to complete the tap gesture.\n\nSee Also\nCreating a tap gesture\nvar count: Int\nThe required number of tap events."
    },
    {
        "title": "wrappedValue",
        "url": "https://developer.apple.com/documentation/swiftui/focusedvalue/wrappedvalue",
        "html": "Discussion\n\nReturns nil when nothing in the focused view hierarchy exports a value."
    },
    {
        "title": "init(_:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:selection:rowcontent:)-4vsnv",
        "html": "Parameters\ndata\n\nA constant range of data to populate the list.\n\nselection\n\nA binding to a non optional selected value.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nDiscussion\n\nThis instance only reads the initial value of data and doesn\u2019t need to identify views across updates. To compute views on demand over a dynamic range, use init(_:id:selection:rowContent:).\n\nSee Also\nCreating a list from a range\ninit<RowContent>(Range<Int>, rowContent: (Int) -> RowContent)\nCreates a list that computes its views on demand over a constant range.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<RowContent>(Range<Int>, selection: Binding<SelectionValue?>?, rowContent: (Int) -> RowContent)\nCreates a list that computes its views on demand over a constant range, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<RowContent>(Range<Int>, selection: Binding<Set<SelectionValue>>?, rowContent: (Int) -> RowContent)\nCreates a list that computes its views on demand over a constant range, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:id:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:id:selection:rowcontent:)-2r2u9",
        "html": "Parameters\ndata\n\nThe data for populating the list.\n\nid\n\nThe key path to the data model\u2019s identifier.\n\nselection\n\nA binding to a selected value.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nSee Also\nListing data\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, rowContent: (Data.Element) -> RowContent)\nCreates a list that identifies its rows based on a key path to the identifier of the underlying data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, selection: Binding<SelectionValue>, rowContent: (Data.Element) -> RowContent)\nCreates a list that identifies its rows based on a key path to the identifier of the underlying data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, selection: Binding<Set<SelectionValue>>?, rowContent: (Data.Element) -> RowContent)\nCreates a list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:selection:rowcontent:)-3pchc",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the list.\n\nselection\n\nA binding to a selected value.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nSee Also\nListing identifiable data\ninit<Data, RowContent>(Data, rowContent: (Data.Element) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, RowContent>(Data, selection: Binding<SelectionValue>, rowContent: (Data.Element) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Data, selection: Binding<Set<SelectionValue>>?, rowContent: (Data.Element) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:id:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:id:selection:rowcontent:)-6z229",
        "html": "Parameters\ndata\n\nThe data for populating the list.\n\nid\n\nThe key path to the data model\u2019s identifier.\n\nselection\n\nA binding to a non optional selected value.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nSee Also\nListing data\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, rowContent: (Data.Element) -> RowContent)\nCreates a list that identifies its rows based on a key path to the identifier of the underlying data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, selection: Binding<SelectionValue?>?, rowContent: (Data.Element) -> RowContent)\nCreates a list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, selection: Binding<Set<SelectionValue>>?, rowContent: (Data.Element) -> RowContent)\nCreates a list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:selection:rowcontent:)-2bobo",
        "html": "Parameters\ndata\n\nA constant range of data to populate the list.\n\nselection\n\nA binding to a set that identifies selected rows.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nDiscussion\n\nThis instance only reads the initial value of data and doesn\u2019t need to identify views across updates. To compute views on demand over a dynamic range, use init(_:id:selection:rowContent:).\n\nSee Also\nCreating a list from a range\ninit<RowContent>(Range<Int>, rowContent: (Int) -> RowContent)\nCreates a list that computes its views on demand over a constant range.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<RowContent>(Range<Int>, selection: Binding<SelectionValue>, rowContent: (Int) -> RowContent)\nCreates a list that computes its views on demand over a constant range and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<RowContent>(Range<Int>, selection: Binding<SelectionValue?>?, rowContent: (Int) -> RowContent)\nCreates a list that computes its views on demand over a constant range, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:selection:rowcontent:)-434g3",
        "html": "Parameters\ndata\n\nA constant range of data to populate the list.\n\nselection\n\nA binding to a selected value.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nDiscussion\n\nThis instance only reads the initial value of data and doesn\u2019t need to identify views across updates. To compute views on demand over a dynamic range, use init(_:id:selection:rowContent:).\n\nSee Also\nCreating a list from a range\ninit<RowContent>(Range<Int>, rowContent: (Int) -> RowContent)\nCreates a list that computes its views on demand over a constant range.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<RowContent>(Range<Int>, selection: Binding<SelectionValue>, rowContent: (Int) -> RowContent)\nCreates a list that computes its views on demand over a constant range and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<RowContent>(Range<Int>, selection: Binding<Set<SelectionValue>>?, rowContent: (Int) -> RowContent)\nCreates a list that computes its views on demand over a constant range, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:id:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:id:selection:rowcontent:)-9a28m",
        "html": "Parameters\ndata\n\nThe data for populating the list.\n\nid\n\nThe key path to the data model\u2019s identifier.\n\nselection\n\nA binding to a set that identifies selected rows.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nSee Also\nListing data\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, rowContent: (Data.Element) -> RowContent)\nCreates a list that identifies its rows based on a key path to the identifier of the underlying data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, selection: Binding<SelectionValue>, rowContent: (Data.Element) -> RowContent)\nCreates a list that identifies its rows based on a key path to the identifier of the underlying data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, ID, RowContent>(Data, id: KeyPath<Data.Element, ID>, selection: Binding<SelectionValue?>?, rowContent: (Data.Element) -> RowContent)\nCreates a list that identifies its rows based on a key path to the identifier of the underlying data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:rowcontent:)-9jce2",
        "html": "Parameters\ndata\n\nA constant range of data to populate the list.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nDiscussion\n\nThis instance only reads the initial value of data and doesn\u2019t need to identify views across updates. To compute views on demand over a dynamic range, use init(_:id:rowContent:).\n\nSee Also\nCreating a list from a range\ninit<RowContent>(Range<Int>, selection: Binding<SelectionValue>, rowContent: (Int) -> RowContent)\nCreates a list that computes its views on demand over a constant range and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<RowContent>(Range<Int>, selection: Binding<SelectionValue?>?, rowContent: (Int) -> RowContent)\nCreates a list that computes its views on demand over a constant range, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<RowContent>(Range<Int>, selection: Binding<Set<SelectionValue>>?, rowContent: (Int) -> RowContent)\nCreates a list that computes its views on demand over a constant range, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:rowcontent:)-3vn6i",
        "html": "Parameters\ndata\n\nA collection of identifiable data for computing the list.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nSee Also\nListing identifiable data\ninit<Data, RowContent>(Data, selection: Binding<SelectionValue>, rowContent: (Data.Element) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data and allowing users to have exactly one row always selected.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Data, selection: Binding<SelectionValue?>?, rowContent: (Data.Element) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Data, selection: Binding<Set<SelectionValue>>?, rowContent: (Data.Element) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:selection:rowContent:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(_:selection:rowcontent:)-3wghd",
        "html": "Parameters\ndata\n\nThe identifiable data for computing the list.\n\nselection\n\nA binding to a non optional selected value.\n\nrowContent\n\nA view builder that creates the view for a single row of the list.\n\nSee Also\nListing identifiable data\ninit<Data, RowContent>(Data, rowContent: (Data.Element) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit<Data, RowContent>(Data, selection: Binding<SelectionValue?>?, rowContent: (Data.Element) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, optionally allowing users to select a single row.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View.\ninit<Data, RowContent>(Data, selection: Binding<Set<SelectionValue>>?, rowContent: (Data.Element) -> RowContent)\nCreates a list that computes its rows on demand from an underlying collection of identifiable data, optionally allowing users to select multiple rows.\nAvailable when SelectionValue conforms to Hashable and Content conforms to View."
    },
    {
        "title": "init(_:systemImage:role:intent:)",
        "url": "https://developer.apple.com/documentation/swiftui/button/init(_:systemimage:role:intent:)-5vnz2",
        "html": "Parameters\ntitle\n\nA string that describes the purpose of the button\u2019s intent.\n\nsystemImage\n\nThe name of the image resource to lookup.\n\nrole\n\nAn optional semantic role describing the button. A value of nil means that the button doesn\u2019t have an assigned role.\n\nintent\n\nThe AppIntent to execute.\n\nDiscussion\n\nThis initializer creates a Label view on your behalf, and treats the title similar to init(_:). See Text for more information about localizing strings.\n\nSee Also\nCreating a button to perform an App Intent\ninit<I>(intent: I, label: () -> Label)\nCreates a button that performs an AppIntent.\nAvailable when Label conforms to View.\ninit(LocalizedStringKey, intent: some AppIntent)\nCreates a button that performs an AppIntent and generates its label from a localized string key.\nAvailable when Label is Text.\ninit<S>(S, intent: some AppIntent)\nCreates a button that performs an AppIntent and generates its label from a string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, image: ImageResource, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a localized string key and an image resource.\nAvailable when Label is Label<Text, Image>.\ninit(some StringProtocol, image: ImageResource, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that generates its label from a string and an image resource.\nAvailable when Label is Label<Text, Image>.\ninit(LocalizedStringKey, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a localized string key.\nAvailable when Label is Text.\ninit(some StringProtocol, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, systemImage: String, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a localized string key and a system image.\nAvailable when Label is Label<Text, Image>.\ninit(role: ButtonRole?, intent: some AppIntent, label: () -> Label)\nCreates a button with a specified role that performs an AppIntent.\nAvailable when Label conforms to View."
    },
    {
        "title": "disabledCustomizationBehavior(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumncontent/disabledcustomizationbehavior(_:)",
        "html": "Parameters\nbehavior\n\nThe behavior to disable, or .all to not allow any customization.\n\nDiscussion\n\nWhen the containing Table is bound to some TableColumnCustomization, all columns will be able to be customized by the user on macOS by default (i.e. TableColumnCustomizationBehavior.all). This modifier allows disabling specific behavior.\n\nThis modifier has no effect on iOS since Table does not support any built-in user customization features.\n\nThis does not prevent programmatic changes to a table column customization.\n\nSee Also\nConfiguring the content\nfunc alignment(TableColumnAlignment) -> some TableColumnContent<Self.TableRowValue, Self.TableColumnSortComparator>\nSets the alignment of the column, applying to both its column header label and the row view content for that column.\nfunc customizationID(String) -> some TableColumnContent<Self.TableRowValue, Self.TableColumnSortComparator>\nSets the identifier to be associated with a column when persisting its state with TableColumnCustomization.\nfunc defaultVisibility(Visibility) -> some TableColumnContent<Self.TableRowValue, Self.TableColumnSortComparator>\nSets the default visibility of a table column."
    },
    {
        "title": "init(selection:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(selection:content:)-4sffx",
        "html": "Parameters\nselection\n\nA binding to a set that identifies selected rows.\n\ncontent\n\nThe content of the list.\n\nSee Also\nCreating a list with arbitrary content\ninit(content: () -> Content)\nCreates a list with the given content.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit(selection: Binding<SelectionValue>, content: () -> Content)\nCreates a list with the given content that supports selecting a single row that cannot be deselcted.\ninit(selection: Binding<SelectionValue?>?, content: () -> Content)\nCreates a list with the given content that supports selecting a single row."
    },
    {
        "title": "init(selection:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/list/init(selection:content:)-1pisz",
        "html": "Parameters\nselection\n\nA binding to a selected row.\n\ncontent\n\nThe content of the list.\n\nSee Also\nCreating a list with arbitrary content\ninit(content: () -> Content)\nCreates a list with the given content.\nAvailable when SelectionValue is Never and Content conforms to View.\ninit(selection: Binding<SelectionValue>, content: () -> Content)\nCreates a list with the given content that supports selecting a single row that cannot be deselcted.\ninit(selection: Binding<Set<SelectionValue>>?, content: () -> Content)\nCreates a list with the given content that supports selecting multiple rows."
    },
    {
        "title": "trailing",
        "url": "https://developer.apple.com/documentation/swiftui/alignment/trailing",
        "html": "Discussion\n\nThis alignment combines the trailing horizontal guide and the center vertical guide:\n\nSee Also\nGetting middle guides\nstatic let leading: Alignment\nA guide that marks the leading edge of the view.\nstatic let center: Alignment\nA guide that marks the center of the view."
    },
    {
        "title": "init(_:action:)",
        "url": "https://developer.apple.com/documentation/swiftui/button/init(_:action:)-lpm7",
        "html": "Parameters\ntitle\n\nA string that describes the purpose of the button\u2019s action.\n\naction\n\nThe action to perform when the user triggers the button.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). See Text for more information about localizing strings.\n\nTo initialize a button with a localized string key, use init(_:action:) instead.\n\nSee Also\nCreating a button\ninit(action: () -> Void, label: () -> Label)\nCreates a button that displays a custom label.\ninit(LocalizedStringKey, action: () -> Void)\nCreates a button that generates its label from a localized string key.\nAvailable when Label is Text."
    },
    {
        "title": "destructive",
        "url": "https://developer.apple.com/documentation/swiftui/buttonrole/destructive",
        "html": "Discussion\n\nUse this role for a button that deletes user data, or performs an irreversible operation. A destructive button signals by its appearance that the user should carefully consider whether to tap or click the button. For example, SwiftUI presents a destructive button that you add with the swipeActions(edge:allowsFullSwipe:content:) modifier using a red background:\n\nList {\n    ForEach(items) { item in\n        Text(item.title)\n            .swipeActions {\n                Button(role: .destructive) { delete() } label: {\n                    Label(\"Delete\", systemImage: \"trash\")\n                }\n            }\n    }\n}\n.navigationTitle(\"Shopping List\")\n\n\nSee Also\nGetting button roles\nstatic let cancel: ButtonRole\nA role that indicates a button that cancels an operation."
    },
    {
        "title": "base",
        "url": "https://developer.apple.com/documentation/swiftui/gesturestategesture/base",
        "html": "See Also\nCreating an in-progress gesture\ninit(base: Base, state: GestureState<State>, body: (GestureStateGesture<Base, State>.Value, inout State, inout Transaction) -> Void)\nCreates a new gesture that\u2019s the result of an ongoing gesture.\nvar state: GestureState<State>\nA value that changes as the user performs the gesture."
    },
    {
        "title": "init(minimumAngleDelta:)",
        "url": "https://developer.apple.com/documentation/swiftui/rotationgesture/init(minimumangledelta:)",
        "html": "Deprecated\n\nUse RotateGesture instead.\n\nSee Also\nCreating the gesture\nvar minimumAngleDelta: Angle\nThe minimum delta required before the gesture succeeds.\nDeprecated"
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnbuilder/buildblock(_:_:_:_:_:_:_:_:_:)-2ve95",
        "html": "See Also\nBuilding a sortable column\nstatic func buildBlock<Column>(Column) -> Column\nCreates a single, sortable column result.\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableColumnContent<RowValue, Sort, (C0, C1)>\nCreates a sortable column result from two sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2)>\nCreates a sortable column result from three sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3)>\nCreates a sortable column result from four sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4)>\nCreates a sortable column result from five sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5)>\nCreates a sortable column result from six sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6)>\nCreates a sortable column result from seven sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates a sortable column result from eight sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates a sortable column result from ten sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildExpression<Column>(Column) -> Column\nCreates a generic, sortable single column expression.\nstatic func buildExpression<Content, Label>(TableColumn<RowValue, Sort, Content, Label>) -> TableColumn<RowValue, Sort, Content, Label>\nCreates a sortable table column expression whose value and sort types match those of the builder."
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnbuilder/buildblock(_:_:_:_:_:_:)-5nyqq",
        "html": "See Also\nBuilding a sortable column\nstatic func buildBlock<Column>(Column) -> Column\nCreates a single, sortable column result.\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableColumnContent<RowValue, Sort, (C0, C1)>\nCreates a sortable column result from two sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2)>\nCreates a sortable column result from three sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3)>\nCreates a sortable column result from four sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4)>\nCreates a sortable column result from five sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6)>\nCreates a sortable column result from seven sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates a sortable column result from eight sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates a sortable column result from nine sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates a sortable column result from ten sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildExpression<Column>(Column) -> Column\nCreates a generic, sortable single column expression.\nstatic func buildExpression<Content, Label>(TableColumn<RowValue, Sort, Content, Label>) -> TableColumn<RowValue, Sort, Content, Label>\nCreates a sortable table column expression whose value and sort types match those of the builder."
    },
    {
        "title": "buildBlock(_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnbuilder/buildblock(_:_:_:_:_:)-7aqcg",
        "html": "See Also\nBuilding a sortable column\nstatic func buildBlock<Column>(Column) -> Column\nCreates a single, sortable column result.\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableColumnContent<RowValue, Sort, (C0, C1)>\nCreates a sortable column result from two sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2)>\nCreates a sortable column result from three sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3)>\nCreates a sortable column result from four sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5)>\nCreates a sortable column result from six sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6)>\nCreates a sortable column result from seven sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates a sortable column result from eight sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates a sortable column result from nine sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates a sortable column result from ten sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildExpression<Column>(Column) -> Column\nCreates a generic, sortable single column expression.\nstatic func buildExpression<Content, Label>(TableColumn<RowValue, Sort, Content, Label>) -> TableColumn<RowValue, Sort, Content, Label>\nCreates a sortable table column expression whose value and sort types match those of the builder."
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnbuilder/buildblock(_:_:_:_:_:_:_:)-bea1",
        "html": "See Also\nBuilding a sortable column\nstatic func buildBlock<Column>(Column) -> Column\nCreates a single, sortable column result.\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableColumnContent<RowValue, Sort, (C0, C1)>\nCreates a sortable column result from two sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2)>\nCreates a sortable column result from three sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3)>\nCreates a sortable column result from four sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4)>\nCreates a sortable column result from five sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5)>\nCreates a sortable column result from six sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates a sortable column result from eight sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates a sortable column result from nine sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates a sortable column result from ten sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildExpression<Column>(Column) -> Column\nCreates a generic, sortable single column expression.\nstatic func buildExpression<Content, Label>(TableColumn<RowValue, Sort, Content, Label>) -> TableColumn<RowValue, Sort, Content, Label>\nCreates a sortable table column expression whose value and sort types match those of the builder."
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnbuilder/buildblock(_:_:_:_:_:_:_:_:)-uu28",
        "html": "See Also\nBuilding a sortable column\nstatic func buildBlock<Column>(Column) -> Column\nCreates a single, sortable column result.\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableColumnContent<RowValue, Sort, (C0, C1)>\nCreates a sortable column result from two sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2)>\nCreates a sortable column result from three sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3)>\nCreates a sortable column result from four sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4)>\nCreates a sortable column result from five sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5)>\nCreates a sortable column result from six sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6)>\nCreates a sortable column result from seven sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates a sortable column result from nine sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates a sortable column result from ten sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildExpression<Column>(Column) -> Column\nCreates a generic, sortable single column expression.\nstatic func buildExpression<Content, Label>(TableColumn<RowValue, Sort, Content, Label>) -> TableColumn<RowValue, Sort, Content, Label>\nCreates a sortable table column expression whose value and sort types match those of the builder."
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnbuilder/buildblock(_:_:_:_:_:_:_:_:_:_:)-4al39",
        "html": "See Also\nBuilding a sortable column\nstatic func buildBlock<Column>(Column) -> Column\nCreates a single, sortable column result.\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableColumnContent<RowValue, Sort, (C0, C1)>\nCreates a sortable column result from two sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2)>\nCreates a sortable column result from three sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3)>\nCreates a sortable column result from four sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4)>\nCreates a sortable column result from five sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5)>\nCreates a sortable column result from six sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6)>\nCreates a sortable column result from seven sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates a sortable column result from eight sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates a sortable column result from nine sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildExpression<Column>(Column) -> Column\nCreates a generic, sortable single column expression.\nstatic func buildExpression<Content, Label>(TableColumn<RowValue, Sort, Content, Label>) -> TableColumn<RowValue, Sort, Content, Label>\nCreates a sortable table column expression whose value and sort types match those of the builder."
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablerowbuilder/buildblock(_:_:_:_:_:_:_:_:_:)",
        "html": "See Also\nBuilding a row from sources\nstatic func buildBlock<C>(C) -> C\nCreates a single row result.\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableRowContent<Value, (C0, C1)>\nCreates a row result from two sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableRowContent<Value, (C0, C1, C2)>\nCreates a row result from three sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableRowContent<Value, (C0, C1, C2, C3)>\nCreates a row result from four sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4)>\nCreates a row result from five sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5)>\nCreates a row result from six sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6)>\nCreates a row result from seven sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates a row result from eight sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates a row result from ten sources.\nAvailable when Value conforms to Identifiable."
    },
    {
        "title": "buildBlock(_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablerowbuilder/buildblock(_:_:_:_:_:)",
        "html": "See Also\nBuilding a row from sources\nstatic func buildBlock<C>(C) -> C\nCreates a single row result.\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableRowContent<Value, (C0, C1)>\nCreates a row result from two sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableRowContent<Value, (C0, C1, C2)>\nCreates a row result from three sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableRowContent<Value, (C0, C1, C2, C3)>\nCreates a row result from four sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5)>\nCreates a row result from six sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6)>\nCreates a row result from seven sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates a row result from eight sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates a row result from nine sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates a row result from ten sources.\nAvailable when Value conforms to Identifiable."
    },
    {
        "title": "buildExpression(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnbuilder/buildexpression(_:)-3g9mp",
        "html": "See Also\nBuilding a sortable column\nstatic func buildBlock<Column>(Column) -> Column\nCreates a single, sortable column result.\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableColumnContent<RowValue, Sort, (C0, C1)>\nCreates a sortable column result from two sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2)>\nCreates a sortable column result from three sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3)>\nCreates a sortable column result from four sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4)>\nCreates a sortable column result from five sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5)>\nCreates a sortable column result from six sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6)>\nCreates a sortable column result from seven sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates a sortable column result from eight sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates a sortable column result from nine sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates a sortable column result from ten sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildExpression<Content, Label>(TableColumn<RowValue, Sort, Content, Label>) -> TableColumn<RowValue, Sort, Content, Label>\nCreates a sortable table column expression whose value and sort types match those of the builder."
    },
    {
        "title": "buildBlock(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablerowbuilder/buildblock(_:_:_:_:)",
        "html": "See Also\nBuilding a row from sources\nstatic func buildBlock<C>(C) -> C\nCreates a single row result.\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableRowContent<Value, (C0, C1)>\nCreates a row result from two sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableRowContent<Value, (C0, C1, C2)>\nCreates a row result from three sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4)>\nCreates a row result from five sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5)>\nCreates a row result from six sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6)>\nCreates a row result from seven sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates a row result from eight sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates a row result from nine sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates a row result from ten sources.\nAvailable when Value conforms to Identifiable."
    },
    {
        "title": "buildExpression(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnbuilder/buildexpression(_:)-4a6ls",
        "html": "See Also\nBuilding a sortable column\nstatic func buildBlock<Column>(Column) -> Column\nCreates a single, sortable column result.\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableColumnContent<RowValue, Sort, (C0, C1)>\nCreates a sortable column result from two sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2)>\nCreates a sortable column result from three sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3)>\nCreates a sortable column result from four sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4)>\nCreates a sortable column result from five sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5)>\nCreates a sortable column result from six sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6)>\nCreates a sortable column result from seven sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates a sortable column result from eight sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates a sortable column result from nine sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates a sortable column result from ten sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildExpression<Column>(Column) -> Column\nCreates a generic, sortable single column expression."
    },
    {
        "title": "TableRowValue",
        "url": "https://developer.apple.com/documentation/swiftui/tablerowcontent/tablerowvalue",
        "html": "Required"
    },
    {
        "title": "onInsert(of:perform:)",
        "url": "https://developer.apple.com/documentation/swiftui/dynamictablerowcontent/oninsert(of:perform:)",
        "html": "Parameters\nsupportedContentTypes\n\nAn array of universal type identifiers types that the rows supports.\n\naction\n\nA closure that SwiftUI invokes when adding elements to the collection of rows. The closure takes two arguments. The first argument is the offset relative to the dynamic view\u2019s underlying collection of data. The second argument is an array of NSItemProvider items that represents the data that you want to insert.\n\nReturn Value\n\nA view that calls action when inserting elements into the original view.\n\nSee Also\nInserting rows\nstruct OnInsertTableRowModifier\nA table row modifier that adds the ability to insert data in some base row content."
    },
    {
        "title": "bottom",
        "url": "https://developer.apple.com/documentation/swiftui/edgeinsets/bottom",
        "html": "See Also\nGetting edge insets\nvar top: CGFloat\nvar leading: CGFloat\nvar trailing: CGFloat"
    },
    {
        "title": "leading",
        "url": "https://developer.apple.com/documentation/swiftui/edgeinsets/leading",
        "html": "See Also\nGetting edge insets\nvar top: CGFloat\nvar bottom: CGFloat\nvar trailing: CGFloat"
    },
    {
        "title": "dropDestination(for:action:)",
        "url": "https://developer.apple.com/documentation/swiftui/dynamictablerowcontent/dropdestination(for:action:)",
        "html": "Parameters\npayloadType\n\nType of the models that are dropped.\n\naction\n\nA closure that SwiftUI invokes when elements are added to the collection of rows. The closure takes two arguments: The first argument is the offset relative to the dynamic view\u2019s underlying collection of data. The second argument is an array of Transferable items that represents the data that you want to insert.\n\nReturn Value\n\nA view that calls action when elements are inserted into the original view.\n\nDiscussion\nstruct Profile: Identifiable {\n    let givenName: String\n    let familyName: String\n    let id = UUID()\n}\n\n\n@State private var profiles: [Profile] = [\n    Person(givenName: \"Juan\", familyName: \"Chavez\"),\n    Person(givenName: \"Mei\", familyName: \"Chen\"),\n    Person(givenName: \"Tom\", familyName: \"Clark\"),\n    Person(givenName: \"Gita\", familyName: \"Kumar\")\n]\n\n\nvar body: some View {\n    Table {\n        TableColumn(\"Given Name\", value: \\.givenName)\n        TableColumn(\"Family Name\", value: \\.familyName)\n    } rows: {\n        ForEach(profiles) {\n            TableRow($0)\n        }\n        .dropDestination(\n            for: Profile.self\n        ) { offset, receivedProfiles in\n            people.insert(contentsOf: receivedProfiles, at: offset)\n        }\n    }\n}\n"
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnbuilder/buildblock(_:_:_:_:_:_:_:_:_:_:)-22wmq",
        "html": "See Also\nBuilding an unsortable column\nstatic func buildBlock<Column>(Column) -> Column\nCreates a single, unsortable column result.\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableColumnContent<RowValue, Never, (C0, C1)>\nCreates an unsortable column result from two sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2)>\nCreates an unsortable column result from three sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3)>\nCreates an unsortable column result from four sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4)>\nCreates an unsortable column result from five sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5)>\nCreates an unsortable column result from six sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6)>\nCreates an unsortable column result from seven sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates an unsortable column result from eight sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates an unsortable column result from nine sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildExpression<Column>(Column) -> Column\nCreates a generic, unsortable single column expression.\nstatic func buildExpression<Content, Label>(TableColumn<RowValue, Never, Content, Label>) -> TableColumn<RowValue, Never, Content, Label>\nCreates a sortable table column expression whose value type matches that of the builder."
    },
    {
        "title": "OnInsertTableRowModifier",
        "url": "https://developer.apple.com/documentation/swiftui/oninserttablerowmodifier",
        "html": "See Also\nInserting rows\nfunc onInsert(of: [UTType], perform: (Int, [NSItemProvider]) -> Void) -> ModifiedContent<Self, OnInsertTableRowModifier>\nSets the insert action for the dynamic table rows."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/edgeinsets/init()",
        "html": "See Also\nCreating an edge inset\ninit(top: CGFloat, leading: CGFloat, bottom: CGFloat, trailing: CGFloat)\ninit(EdgeInsets3D)\nCreates a 2D EdgeInsets from an EdgeInsets3D, dropping its front and back values.\nBeta\ninit(NSDirectionalEdgeInsets)\nCreate edge insets from the equivalent NSDirectionalEdgeInsets."
    },
    {
        "title": "trailing",
        "url": "https://developer.apple.com/documentation/swiftui/edgeinsets/trailing",
        "html": "See Also\nGetting edge insets\nvar top: CGFloat\nvar bottom: CGFloat\nvar leading: CGFloat"
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnbuilder/buildblock(_:_:_:_:_:_:_:_:_:)-393o7",
        "html": "See Also\nBuilding an unsortable column\nstatic func buildBlock<Column>(Column) -> Column\nCreates a single, unsortable column result.\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableColumnContent<RowValue, Never, (C0, C1)>\nCreates an unsortable column result from two sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2)>\nCreates an unsortable column result from three sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3)>\nCreates an unsortable column result from four sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4)>\nCreates an unsortable column result from five sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5)>\nCreates an unsortable column result from six sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6)>\nCreates an unsortable column result from seven sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates an unsortable column result from eight sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates an unsortable column result from ten sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildExpression<Column>(Column) -> Column\nCreates a generic, unsortable single column expression.\nstatic func buildExpression<Content, Label>(TableColumn<RowValue, Never, Content, Label>) -> TableColumn<RowValue, Never, Content, Label>\nCreates a sortable table column expression whose value type matches that of the builder."
    },
    {
        "title": "init(initialValue:resetTransaction:)",
        "url": "https://developer.apple.com/documentation/swiftui/gesturestate/init(initialvalue:resettransaction:)",
        "html": "Parameters\ninitialValue\n\nAn initial state value.\n\nresetTransaction\n\nA transaction that provides metadata for view updates.\n\nSee Also\nCreating a gesture state\ninit(initialValue: Value)\nCreates a view state that\u2019s derived from a gesture with an initial value.\ninit(initialValue: Value, reset: (Value, inout Transaction) -> Void)\nCreates a view state that\u2019s derived from a gesture with an initial state value and a closure that provides a transaction to reset it.\ninit(reset: (Value, inout Transaction) -> Void)\nCreates a view state that\u2019s derived from a gesture with a closure that provides a transaction to reset it.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(resetTransaction: Transaction)\nCreates a view state that\u2019s derived from a gesture with a transaction to reset it.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(wrappedValue: Value)\nCreates a view state that\u2019s derived from a gesture.\ninit(wrappedValue: Value, reset: (Value, inout Transaction) -> Void)\nCreates a view state that\u2019s derived from a gesture with a wrapped state value and a closure that provides a transaction to reset it.\ninit(wrappedValue: Value, resetTransaction: Transaction)\nCreates a view state that\u2019s derived from a gesture with a wrapped state value and a transaction to reset it."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/edgeinsets/init(_:)-66vnk",
        "html": "See Also\nCreating an edge inset\ninit()\ninit(top: CGFloat, leading: CGFloat, bottom: CGFloat, trailing: CGFloat)\ninit(NSDirectionalEdgeInsets)\nCreate edge insets from the equivalent NSDirectionalEdgeInsets."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/projectiontransform/init()",
        "html": "See Also\nCreating a transform\ninit(CGAffineTransform)\ninit(CATransform3D)"
    },
    {
        "title": "init(reset:)",
        "url": "https://developer.apple.com/documentation/swiftui/gesturestate/init(reset:)",
        "html": "Parameters\nreset\n\nA closure that provides a Transaction.\n\nSee Also\nCreating a gesture state\ninit(initialValue: Value)\nCreates a view state that\u2019s derived from a gesture with an initial value.\ninit(initialValue: Value, reset: (Value, inout Transaction) -> Void)\nCreates a view state that\u2019s derived from a gesture with an initial state value and a closure that provides a transaction to reset it.\ninit(initialValue: Value, resetTransaction: Transaction)\nCreates a view state that\u2019s derived from a gesture with an initial state value and a transaction to reset it.\ninit(resetTransaction: Transaction)\nCreates a view state that\u2019s derived from a gesture with a transaction to reset it.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(wrappedValue: Value)\nCreates a view state that\u2019s derived from a gesture.\ninit(wrappedValue: Value, reset: (Value, inout Transaction) -> Void)\nCreates a view state that\u2019s derived from a gesture with a wrapped state value and a closure that provides a transaction to reset it.\ninit(wrappedValue: Value, resetTransaction: Transaction)\nCreates a view state that\u2019s derived from a gesture with a wrapped state value and a transaction to reset it."
    },
    {
        "title": "m21",
        "url": "https://developer.apple.com/documentation/swiftui/projectiontransform/m21",
        "html": "See Also\nAccessing the transform\u2019s coefficients\nvar m11: CGFloat\nvar m12: CGFloat\nvar m13: CGFloat\nvar m22: CGFloat\nvar m23: CGFloat\nvar m31: CGFloat\nvar m32: CGFloat\nvar m33: CGFloat"
    },
    {
        "title": "buildBlock(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnbuilder/buildblock(_:_:_:_:)-3bbe7",
        "html": "See Also\nBuilding an unsortable column\nstatic func buildBlock<Column>(Column) -> Column\nCreates a single, unsortable column result.\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableColumnContent<RowValue, Never, (C0, C1)>\nCreates an unsortable column result from two sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2)>\nCreates an unsortable column result from three sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4)>\nCreates an unsortable column result from five sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5)>\nCreates an unsortable column result from six sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6)>\nCreates an unsortable column result from seven sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates an unsortable column result from eight sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates an unsortable column result from nine sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates an unsortable column result from ten sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildExpression<Column>(Column) -> Column\nCreates a generic, unsortable single column expression.\nstatic func buildExpression<Content, Label>(TableColumn<RowValue, Never, Content, Label>) -> TableColumn<RowValue, Never, Content, Label>\nCreates a sortable table column expression whose value type matches that of the builder."
    },
    {
        "title": "buildBlock(_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnbuilder/buildblock(_:_:)-81wz6",
        "html": "See Also\nBuilding an unsortable column\nstatic func buildBlock<Column>(Column) -> Column\nCreates a single, unsortable column result.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2)>\nCreates an unsortable column result from three sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3)>\nCreates an unsortable column result from four sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4)>\nCreates an unsortable column result from five sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5)>\nCreates an unsortable column result from six sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6)>\nCreates an unsortable column result from seven sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates an unsortable column result from eight sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates an unsortable column result from nine sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates an unsortable column result from ten sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildExpression<Column>(Column) -> Column\nCreates a generic, unsortable single column expression.\nstatic func buildExpression<Content, Label>(TableColumn<RowValue, Never, Content, Label>) -> TableColumn<RowValue, Never, Content, Label>\nCreates a sortable table column expression whose value type matches that of the builder."
    },
    {
        "title": "buildBlock(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnbuilder/buildblock(_:)-194hz",
        "html": "See Also\nBuilding an unsortable column\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableColumnContent<RowValue, Never, (C0, C1)>\nCreates an unsortable column result from two sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2)>\nCreates an unsortable column result from three sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3)>\nCreates an unsortable column result from four sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4)>\nCreates an unsortable column result from five sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5)>\nCreates an unsortable column result from six sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6)>\nCreates an unsortable column result from seven sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates an unsortable column result from eight sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates an unsortable column result from nine sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates an unsortable column result from ten sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildExpression<Column>(Column) -> Column\nCreates a generic, unsortable single column expression.\nstatic func buildExpression<Content, Label>(TableColumn<RowValue, Never, Content, Label>) -> TableColumn<RowValue, Never, Content, Label>\nCreates a sortable table column expression whose value type matches that of the builder."
    },
    {
        "title": "buildExpression(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnbuilder/buildexpression(_:)-1mvi4",
        "html": "See Also\nBuilding an unsortable column\nstatic func buildBlock<Column>(Column) -> Column\nCreates a single, unsortable column result.\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableColumnContent<RowValue, Never, (C0, C1)>\nCreates an unsortable column result from two sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2)>\nCreates an unsortable column result from three sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3)>\nCreates an unsortable column result from four sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4)>\nCreates an unsortable column result from five sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5)>\nCreates an unsortable column result from six sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6)>\nCreates an unsortable column result from seven sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates an unsortable column result from eight sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates an unsortable column result from nine sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableColumnContent<RowValue, Never, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates an unsortable column result from ten sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildExpression<Column>(Column) -> Column\nCreates a generic, unsortable single column expression."
    },
    {
        "title": "isAffine",
        "url": "https://developer.apple.com/documentation/swiftui/projectiontransform/isaffine",
        "html": "See Also\nGetting transform characteristics\nvar isIdentity: Bool"
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/projectiontransform/init(_:)-3hzib",
        "html": "See Also\nCreating a transform\ninit()\ninit(CATransform3D)"
    },
    {
        "title": "m22",
        "url": "https://developer.apple.com/documentation/swiftui/projectiontransform/m22",
        "html": "See Also\nAccessing the transform\u2019s coefficients\nvar m11: CGFloat\nvar m12: CGFloat\nvar m13: CGFloat\nvar m21: CGFloat\nvar m23: CGFloat\nvar m31: CGFloat\nvar m32: CGFloat\nvar m33: CGFloat"
    },
    {
        "title": "buildBlock(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnbuilder/buildblock(_:)-1ysi3",
        "html": "See Also\nBuilding a sortable column\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableColumnContent<RowValue, Sort, (C0, C1)>\nCreates a sortable column result from two sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2)>\nCreates a sortable column result from three sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3)>\nCreates a sortable column result from four sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4)>\nCreates a sortable column result from five sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5)>\nCreates a sortable column result from six sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6)>\nCreates a sortable column result from seven sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates a sortable column result from eight sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates a sortable column result from nine sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates a sortable column result from ten sources.\nAvailable when RowValue conforms to Identifiable and Sort conforms to SortComparator.\nstatic func buildExpression<Column>(Column) -> Column\nCreates a generic, sortable single column expression.\nstatic func buildExpression<Content, Label>(TableColumn<RowValue, Sort, Content, Label>) -> TableColumn<RowValue, Sort, Content, Label>\nCreates a sortable table column expression whose value and sort types match those of the builder."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/projectiontransform/init(_:)-4ujfy",
        "html": "See Also\nCreating a transform\ninit()\ninit(CGAffineTransform)"
    },
    {
        "title": "inverted()",
        "url": "https://developer.apple.com/documentation/swiftui/projectiontransform/inverted()",
        "html": "See Also\nManipulating transforms\nfunc invert() -> Bool\nfunc concatenating(ProjectionTransform) -> ProjectionTransform"
    },
    {
        "title": "concatenating(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/projectiontransform/concatenating(_:)",
        "html": "See Also\nManipulating transforms\nfunc invert() -> Bool\nfunc inverted() -> ProjectionTransform"
    },
    {
        "title": "m11",
        "url": "https://developer.apple.com/documentation/swiftui/projectiontransform/m11",
        "html": "See Also\nAccessing the transform\u2019s coefficients\nvar m12: CGFloat\nvar m13: CGFloat\nvar m21: CGFloat\nvar m22: CGFloat\nvar m23: CGFloat\nvar m31: CGFloat\nvar m32: CGFloat\nvar m33: CGFloat"
    },
    {
        "title": "m31",
        "url": "https://developer.apple.com/documentation/swiftui/projectiontransform/m31",
        "html": "See Also\nAccessing the transform\u2019s coefficients\nvar m11: CGFloat\nvar m12: CGFloat\nvar m13: CGFloat\nvar m21: CGFloat\nvar m22: CGFloat\nvar m23: CGFloat\nvar m32: CGFloat\nvar m33: CGFloat"
    },
    {
        "title": "m12",
        "url": "https://developer.apple.com/documentation/swiftui/projectiontransform/m12",
        "html": "See Also\nAccessing the transform\u2019s coefficients\nvar m11: CGFloat\nvar m13: CGFloat\nvar m21: CGFloat\nvar m22: CGFloat\nvar m23: CGFloat\nvar m31: CGFloat\nvar m32: CGFloat\nvar m33: CGFloat"
    },
    {
        "title": "m32",
        "url": "https://developer.apple.com/documentation/swiftui/projectiontransform/m32",
        "html": "See Also\nAccessing the transform\u2019s coefficients\nvar m11: CGFloat\nvar m12: CGFloat\nvar m13: CGFloat\nvar m21: CGFloat\nvar m22: CGFloat\nvar m23: CGFloat\nvar m31: CGFloat\nvar m33: CGFloat"
    },
    {
        "title": "m23",
        "url": "https://developer.apple.com/documentation/swiftui/projectiontransform/m23",
        "html": "See Also\nAccessing the transform\u2019s coefficients\nvar m11: CGFloat\nvar m12: CGFloat\nvar m13: CGFloat\nvar m21: CGFloat\nvar m22: CGFloat\nvar m31: CGFloat\nvar m32: CGFloat\nvar m33: CGFloat"
    },
    {
        "title": "m33",
        "url": "https://developer.apple.com/documentation/swiftui/projectiontransform/m33",
        "html": "See Also\nAccessing the transform\u2019s coefficients\nvar m11: CGFloat\nvar m12: CGFloat\nvar m13: CGFloat\nvar m21: CGFloat\nvar m22: CGFloat\nvar m23: CGFloat\nvar m31: CGFloat\nvar m32: CGFloat"
    },
    {
        "title": "init(wrappedValue:reset:)",
        "url": "https://developer.apple.com/documentation/swiftui/gesturestate/init(wrappedvalue:reset:)",
        "html": "Parameters\nwrappedValue\n\nA wrapped value for the gesture state property.\n\nreset\n\nA closure that provides a Transaction.\n\nSee Also\nCreating a gesture state\ninit(initialValue: Value)\nCreates a view state that\u2019s derived from a gesture with an initial value.\ninit(initialValue: Value, reset: (Value, inout Transaction) -> Void)\nCreates a view state that\u2019s derived from a gesture with an initial state value and a closure that provides a transaction to reset it.\ninit(initialValue: Value, resetTransaction: Transaction)\nCreates a view state that\u2019s derived from a gesture with an initial state value and a transaction to reset it.\ninit(reset: (Value, inout Transaction) -> Void)\nCreates a view state that\u2019s derived from a gesture with a closure that provides a transaction to reset it.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(resetTransaction: Transaction)\nCreates a view state that\u2019s derived from a gesture with a transaction to reset it.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(wrappedValue: Value)\nCreates a view state that\u2019s derived from a gesture.\ninit(wrappedValue: Value, resetTransaction: Transaction)\nCreates a view state that\u2019s derived from a gesture with a wrapped state value and a transaction to reset it."
    },
    {
        "title": "handActivationBehavior(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/gesture/handactivationbehavior(_:)",
        "html": "Parameters\nbehavior\n\nThe hand activation behavior to use for the gesture.\n\nReturn Value\n\nA new gesture with a preference to activate with the provided behavior.\n\nDiscussion\n\nUse automatic to allow a gesture to activate with default system behaviors. Use pinch when a gesture should only trigger when the hand is pinched.\n\nFor example, in a 3D chess application, a DragGesture that enables movement of the pieces could use the pinch behavior to ensure that piece movement is only possible when a hand is pinched in order to avoid pushing the piece around by only touching it:\n\nModel3D(named: \"Pawn\")\n    .gesture(\n        DragGesture()\n            .handActivationBehavior(.pinch)\n            .updating($chessDragState) { value, state, _ in\n                // ...\n            }\n    )\n"
    },
    {
        "title": "minimumDuration",
        "url": "https://developer.apple.com/documentation/swiftui/longpressgesture/minimumduration",
        "html": "See Also\nCreating a long press gesture\ninit(minimumDuration: Double)\nCreates a long-press gesture with a minimum duration\ninit(minimumDuration: Double, maximumDistance: CGFloat)\nCreates a long-press gesture with a minimum duration and a maximum distance that the interaction can move before the gesture fails.\nvar maximumDistance: CGFloat\nThe maximum distance that the long press can move before the gesture fails."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/button/init(_:)",
        "html": "Parameters\nconfiguration\n\nA configuration for a style with a custom appearance and custom interaction behavior.\n\nDiscussion\n\nUse this initializer within the makeBody(configuration:) method of a PrimitiveButtonStyle to create an instance of the button that you want to style. This is useful for custom button styles that modify the current button style, rather than implementing a brand new style.\n\nFor example, the following style adds a red border around the button, but otherwise preserves the button\u2019s current style:\n\nstruct RedBorderedButtonStyle: PrimitiveButtonStyle {\n    func makeBody(configuration: Configuration) -> some View {\n        Button(configuration)\n            .border(Color.red)\n    }\n}\n"
    },
    {
        "title": "TupleTableColumnContent",
        "url": "https://developer.apple.com/documentation/swiftui/tupletablecolumncontent",
        "html": "Overview\n\nDon\u2019t use this type directly; instead, SwiftUI uses this type as the return value from the various buildBlock methods in TableColumnBuilder. The size of the tuple corresponds to how many columns you create in the columns closure you provide to the Table initializer.\n\nTopics\nAccessing the value\nvar value: T\nThe value of a row presented by this column content.\nRelationships\nConforms To\nTableColumnContent"
    },
    {
        "title": "combineExplicit(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/horizontalalignment/combineexplicit(_:)",
        "html": "Discussion\n\nFor built-in horizontal alignment types, this method returns the mean of all non-nil values.\n\nSee Also\nCreating a custom alignment\ninit(AlignmentID.Type)\nCreates a custom horizontal alignment of the specified type."
    },
    {
        "title": "mirrors",
        "url": "https://developer.apple.com/documentation/swiftui/layoutdirectionbehavior/mirrors",
        "html": "See Also\nGetting behaviors\ncase fixed\nA behavior that doesn\u2019t mirror when the layout direction changes.\ncase mirrors(in: LayoutDirection)\nA behavior that mirrors when the layout direction has the specified value."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/angle/init()",
        "html": "See Also\nCreating an angle\ninit(degrees: Double)\ninit(radians: Double)\ninit(Angle2D)\nBeta"
    },
    {
        "title": "tableColumnBody",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumncontent/tablecolumnbody-swift.property",
        "html": "Required\n\nSee Also\nGetting the column body\nassociatedtype TableColumnBody : TableColumnContent\nThe type of content representing the body of this table column content.\n\nRequired"
    },
    {
        "title": "TableColumnSortComparator",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumncontent/tablecolumnsortcomparator",
        "html": "Required"
    },
    {
        "title": "centerLastTextBaseline",
        "url": "https://developer.apple.com/documentation/swiftui/alignment/centerlasttextbaseline",
        "html": "Discussion\n\nThis alignment combines the center horizontal guide and the lastTextBaseline vertical guide:\n\nSee Also\nGetting text baseline guides\nstatic var leadingFirstTextBaseline: Alignment\nA guide that marks the leading edge and top-most text baseline in a view.\nstatic var centerFirstTextBaseline: Alignment\nA guide that marks the top-most text baseline in a view.\nstatic var trailingFirstTextBaseline: Alignment\nA guide that marks the trailing edge and top-most text baseline in a view.\nstatic var leadingLastTextBaseline: Alignment\nA guide that marks the leading edge and bottom-most text baseline in a view.\nstatic var trailingLastTextBaseline: Alignment\nA guide that marks the trailing edge and bottom-most text baseline in a view."
    },
    {
        "title": "defaultVisibility(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumncontent/defaultvisibility(_:)",
        "html": "Parameters\nvisibility\n\nThe default visibility to apply to columns.\n\nDiscussion\n\nA hidden column will not be visible, unless the Table is also bound to TableColumnCustomization and either modified programmatically or by the user.\n\nSee Also\nConfiguring the content\nfunc alignment(TableColumnAlignment) -> some TableColumnContent<Self.TableRowValue, Self.TableColumnSortComparator>\nSets the alignment of the column, applying to both its column header label and the row view content for that column.\nfunc customizationID(String) -> some TableColumnContent<Self.TableRowValue, Self.TableColumnSortComparator>\nSets the identifier to be associated with a column when persisting its state with TableColumnCustomization.\nfunc disabledCustomizationBehavior(TableColumnCustomizationBehavior) -> some TableColumnContent<Self.TableRowValue, Self.TableColumnSortComparator>\nSets the disabled customization behavior for a table column."
    },
    {
        "title": "VerticalEdge.bottom",
        "url": "https://developer.apple.com/documentation/swiftui/verticaledge/bottom",
        "html": "See Also\nGetting the edges\ncase top\nThe top edge."
    },
    {
        "title": "alignment(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumncontent/alignment(_:)",
        "html": "Parameters\nalignment\n\nThe alignment to apply to the column.\n\nSee Also\nConfiguring the content\nfunc customizationID(String) -> some TableColumnContent<Self.TableRowValue, Self.TableColumnSortComparator>\nSets the identifier to be associated with a column when persisting its state with TableColumnCustomization.\nfunc defaultVisibility(Visibility) -> some TableColumnContent<Self.TableRowValue, Self.TableColumnSortComparator>\nSets the default visibility of a table column.\nfunc disabledCustomizationBehavior(TableColumnCustomizationBehavior) -> some TableColumnContent<Self.TableRowValue, Self.TableColumnSortComparator>\nSets the disabled customization behavior for a table column."
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablerowbuilder/buildblock(_:_:_:_:_:_:)",
        "html": "See Also\nBuilding a row from sources\nstatic func buildBlock<C>(C) -> C\nCreates a single row result.\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableRowContent<Value, (C0, C1)>\nCreates a row result from two sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableRowContent<Value, (C0, C1, C2)>\nCreates a row result from three sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableRowContent<Value, (C0, C1, C2, C3)>\nCreates a row result from four sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4)>\nCreates a row result from five sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6)>\nCreates a row result from seven sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates a row result from eight sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates a row result from nine sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates a row result from ten sources.\nAvailable when Value conforms to Identifiable."
    },
    {
        "title": "centerFirstTextBaseline",
        "url": "https://developer.apple.com/documentation/swiftui/alignment/centerfirsttextbaseline",
        "html": "Discussion\n\nThis alignment combines the center horizontal guide and the firstTextBaseline vertical guide:\n\nSee Also\nGetting text baseline guides\nstatic var leadingFirstTextBaseline: Alignment\nA guide that marks the leading edge and top-most text baseline in a view.\nstatic var trailingFirstTextBaseline: Alignment\nA guide that marks the trailing edge and top-most text baseline in a view.\nstatic var leadingLastTextBaseline: Alignment\nA guide that marks the leading edge and bottom-most text baseline in a view.\nstatic var centerLastTextBaseline: Alignment\nA guide that marks the bottom-most text baseline in a view.\nstatic var trailingLastTextBaseline: Alignment\nA guide that marks the trailing edge and bottom-most text baseline in a view."
    },
    {
        "title": "trailingLastTextBaseline",
        "url": "https://developer.apple.com/documentation/swiftui/alignment/trailinglasttextbaseline",
        "html": "Discussion\n\nThis alignment combines the trailing horizontal guide and the lastTextBaseline vertical guide:\n\nSee Also\nGetting text baseline guides\nstatic var leadingFirstTextBaseline: Alignment\nA guide that marks the leading edge and top-most text baseline in a view.\nstatic var centerFirstTextBaseline: Alignment\nA guide that marks the top-most text baseline in a view.\nstatic var trailingFirstTextBaseline: Alignment\nA guide that marks the trailing edge and top-most text baseline in a view.\nstatic var leadingLastTextBaseline: Alignment\nA guide that marks the leading edge and bottom-most text baseline in a view.\nstatic var centerLastTextBaseline: Alignment\nA guide that marks the bottom-most text baseline in a view."
    },
    {
        "title": "minimum",
        "url": "https://developer.apple.com/documentation/swiftui/scenepadding/minimum",
        "html": "Discussion\n\nIn macOS, this value represents the recommended spacing for the root view of a window. In watchOS, this represents the horizontal spacing that you use to align your view with the title of a navigation view.\n\nSee Also\nGetting padding values\nstatic let navigationBar: ScenePadding\nThe navigation bar content scene padding."
    },
    {
        "title": "init(_:systemImage:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/controlgroup/init(_:systemimage:content:)-7x2jd",
        "html": "Parameters\ntitleKey\n\nThe key for the group\u2019s localized title, that describes the contents of the group.\n\nsystemImage\n\nThe name of the image resource to lookup.\n\nlabel\n\nA view that describes the purpose of the group.\n\nSee Also\nCreating a control group with an image\ninit<C>(LocalizedStringKey, image: ImageResource, content: () -> C)\nCreates a new control group with the specified content that generates its label from a localized string key and image resource.\nAvailable when Content conforms to View.\ninit<C, S>(S, image: ImageResource, content: () -> C)\nCreates a new control group with the specified content that generates its label from a string and image name.\nAvailable when Content conforms to View.\ninit<C, S>(S, systemImage: String, content: () -> C)\nCreates a new control group with the specified content that generates its label from a string and image name.\nAvailable when Content conforms to View."
    },
    {
        "title": "navigationBar",
        "url": "https://developer.apple.com/documentation/swiftui/scenepadding/navigationbar",
        "html": "Discussion\n\nIn watchOS, this represents the horizontal spacing that you use to align a view with the navigation bar content.\n\nSee Also\nGetting padding values\nstatic let minimum: ScenePadding\nThe minimum scene padding value."
    },
    {
        "title": "vertical",
        "url": "https://developer.apple.com/documentation/swiftui/alignment/vertical",
        "html": "Discussion\n\nSet this value when you initialize an alignment using the init(horizontal:vertical:) method. Use one of the built-in VerticalAlignment guides, like center, or a custom guide that you create.\n\nFor information about creating custom guides, see AlignmentID.\n\nSee Also\nCreating a custom alignment\ninit(horizontal: HorizontalAlignment, vertical: VerticalAlignment)\nCreates a custom alignment value with the specified horizontal and vertical alignment guides.\nvar horizontal: HorizontalAlignment\nThe alignment on the horizontal axis."
    },
    {
        "title": "bottomTrailing",
        "url": "https://developer.apple.com/documentation/swiftui/alignment/bottomtrailing",
        "html": "Discussion\n\nThis alignment combines the trailing horizontal guide and the bottom vertical guide:\n\nSee Also\nGetting bottom guides\nstatic let bottomLeading: Alignment\nA guide that marks the bottom and leading edges of the view.\nstatic let bottom: Alignment\nA guide that marks the bottom edge of the view."
    },
    {
        "title": "init(_:systemImage:role:action:)",
        "url": "https://developer.apple.com/documentation/swiftui/button/init(_:systemimage:role:action:)-653mw",
        "html": "Parameters\ntitleKey\n\nThe key for the button\u2019s localized title, that describes the purpose of the button\u2019s action.\n\nsystemImage\n\nThe name of the image resource to lookup.\n\nrole\n\nAn optional semantic role describing the button. A value of nil means that the button doesn\u2019t have an assigned role.\n\naction\n\nThe action to perform when the user triggers the button.\n\nDiscussion\n\nThis initializer creates a Label view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a button with a system image\ninit<S>(S, systemImage: String, action: () -> Void)\nCreates a button that generates its label from a string and system image name.\nAvailable when Label is Label<Text, Image>.\ninit(LocalizedStringKey, systemImage: String, action: () -> Void)\nCreates a button that generates its label from a localized string key and system image name.\nAvailable when Label is Label<Text, Image>.\ninit<S>(S, systemImage: String, role: ButtonRole?, action: () -> Void)\nCreates a button with a specified role that generates its label from a string and a system image and an image resource.\nAvailable when Label is Label<Text, Image>."
    },
    {
        "title": "init(_:image:role:intent:)",
        "url": "https://developer.apple.com/documentation/swiftui/button/init(_:image:role:intent:)-2hhon",
        "html": "Parameters\ntitleKey\n\nThe key for the button\u2019s localized title, that describes the purpose of the button\u2019s intent.\n\nimage\n\nThe image resource to lookup.\n\nrole\n\nAn optional semantic role describing the button. A value of nil means that the button doesn\u2019t have an assigned role.\n\nintent\n\nThe AppIntent to execute.\n\nDiscussion\n\nThis initializer creates a Label view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a button to perform an App Intent\ninit<I>(intent: I, label: () -> Label)\nCreates a button that performs an AppIntent.\nAvailable when Label conforms to View.\ninit(LocalizedStringKey, intent: some AppIntent)\nCreates a button that performs an AppIntent and generates its label from a localized string key.\nAvailable when Label is Text.\ninit<S>(S, intent: some AppIntent)\nCreates a button that performs an AppIntent and generates its label from a string.\nAvailable when Label is Text.\ninit(some StringProtocol, image: ImageResource, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that generates its label from a string and an image resource.\nAvailable when Label is Label<Text, Image>.\ninit(LocalizedStringKey, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a localized string key.\nAvailable when Label is Text.\ninit(some StringProtocol, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, systemImage: String, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a localized string key and a system image.\nAvailable when Label is Label<Text, Image>.\ninit(some StringProtocol, systemImage: String, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that generates its label from a string and a system image.\nAvailable when Label is Label<Text, Image>.\ninit(role: ButtonRole?, intent: some AppIntent, label: () -> Label)\nCreates a button with a specified role that performs an AppIntent.\nAvailable when Label conforms to View."
    },
    {
        "title": "init(_:intent:)",
        "url": "https://developer.apple.com/documentation/swiftui/button/init(_:intent:)-7urde",
        "html": "Parameters\ntitleKey\n\nThe key for the button\u2019s localized title, that describes the purpose of the button\u2019s intent.\n\nintent\n\nThe AppIntent to execute.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nTo initialize a button with a string variable, use Button/init(_:intent:) instead.\n\nSee Also\nCreating a button to perform an App Intent\ninit<I>(intent: I, label: () -> Label)\nCreates a button that performs an AppIntent.\nAvailable when Label conforms to View.\ninit<S>(S, intent: some AppIntent)\nCreates a button that performs an AppIntent and generates its label from a string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, image: ImageResource, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a localized string key and an image resource.\nAvailable when Label is Label<Text, Image>.\ninit(some StringProtocol, image: ImageResource, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that generates its label from a string and an image resource.\nAvailable when Label is Label<Text, Image>.\ninit(LocalizedStringKey, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a localized string key.\nAvailable when Label is Text.\ninit(some StringProtocol, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, systemImage: String, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a localized string key and a system image.\nAvailable when Label is Label<Text, Image>.\ninit(some StringProtocol, systemImage: String, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that generates its label from a string and a system image.\nAvailable when Label is Label<Text, Image>.\ninit(role: ButtonRole?, intent: some AppIntent, label: () -> Label)\nCreates a button with a specified role that performs an AppIntent.\nAvailable when Label conforms to View."
    },
    {
        "title": "init(_:role:action:)",
        "url": "https://developer.apple.com/documentation/swiftui/button/init(_:role:action:)-93ek6",
        "html": "Parameters\ntitleKey\n\nThe key for the button\u2019s localized title, that describes the purpose of the button\u2019s action.\n\nrole\n\nAn optional semantic role describing the button. A value of nil means that the button doesn\u2019t have an assigned role.\n\naction\n\nThe action to perform when the user triggers the button.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nTo initialize a button with a string variable, use init(_:role:action:) instead.\n\nSee Also\nCreating a button with a role\ninit(role: ButtonRole?, action: () -> Void, label: () -> Label)\nCreates a button with a specified role that displays a custom label.\nAvailable when Label conforms to View.\ninit<S>(S, role: ButtonRole?, action: () -> Void)\nCreates a button with a specified role that generates its label from a string.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:image:action:)",
        "url": "https://developer.apple.com/documentation/swiftui/button/init(_:image:action:)-7p5at",
        "html": "Parameters\ntitle\n\nA string that describes the purpose of the button\u2019s action.\n\nimage\n\nThe image resource to lookup.\n\naction\n\nThe action to perform when the user triggers the button.\n\nDiscussion\n\nThis initializer creates a Label view on your behalf, and treats the title similar to init(_:). See Text for more information about localizing strings.\n\nSee Also\nCreating a button with an image resource\ninit(LocalizedStringKey, image: ImageResource, action: () -> Void)\nCreates a button that generates its label from a localized string key and image resource.\nAvailable when Label is Label<Text, Image>.\ninit(LocalizedStringKey, image: ImageResource, role: ButtonRole?, action: () -> Void)\nCreates a button with a specified role that generates its label from a localized string key and an image resource.\nAvailable when Label is Label<Text, Image>.\ninit<S>(S, image: ImageResource, role: ButtonRole?, action: () -> Void)\nCreates a button with a specified role that generates its label from a string and an image resource.\nAvailable when Label is Label<Text, Image>."
    },
    {
        "title": "init(_:role:action:)",
        "url": "https://developer.apple.com/documentation/swiftui/button/init(_:role:action:)-8y5yk",
        "html": "Parameters\ntitle\n\nA string that describes the purpose of the button\u2019s action.\n\nrole\n\nAn optional semantic role describing the button. A value of nil means that the button doesn\u2019t have an assigned role.\n\naction\n\nThe action to perform when the user interacts with the button.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). See Text for more information about localizing strings.\n\nTo initialize a button with a localized string key, use init(_:role:action:) instead.\n\nSee Also\nCreating a button with a role\ninit(role: ButtonRole?, action: () -> Void, label: () -> Label)\nCreates a button with a specified role that displays a custom label.\nAvailable when Label conforms to View.\ninit(LocalizedStringKey, role: ButtonRole?, action: () -> Void)\nCreates a button with a specified role that generates its label from a localized string key.\nAvailable when Label is Text."
    },
    {
        "title": "front",
        "url": "https://developer.apple.com/documentation/swiftui/edgeinsets3d/front",
        "html": "See Also\nGetting edge insets\nvar top: CGFloat\nThe inset distance along the top face of a 3D volume.\nBeta\nvar bottom: CGFloat\nThe inset distance along the bottom face of a 3D volume.\nBeta\nvar leading: CGFloat\nThe inset distance along the leading face of a 3D volume.\nBeta\nvar trailing: CGFloat\nThe inset distance along the top trailing of a 3D volume.\nBeta\nvar back: CGFloat\nThe inset distance along the top back of a 3D volume.\nBeta"
    },
    {
        "title": "init(initialValue:reset:)",
        "url": "https://developer.apple.com/documentation/swiftui/gesturestate/init(initialvalue:reset:)",
        "html": "Parameters\ninitialValue\n\nAn initial state value.\n\nreset\n\nA closure that provides a Transaction.\n\nSee Also\nCreating a gesture state\ninit(initialValue: Value)\nCreates a view state that\u2019s derived from a gesture with an initial value.\ninit(initialValue: Value, resetTransaction: Transaction)\nCreates a view state that\u2019s derived from a gesture with an initial state value and a transaction to reset it.\ninit(reset: (Value, inout Transaction) -> Void)\nCreates a view state that\u2019s derived from a gesture with a closure that provides a transaction to reset it.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(resetTransaction: Transaction)\nCreates a view state that\u2019s derived from a gesture with a transaction to reset it.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(wrappedValue: Value)\nCreates a view state that\u2019s derived from a gesture.\ninit(wrappedValue: Value, reset: (Value, inout Transaction) -> Void)\nCreates a view state that\u2019s derived from a gesture with a wrapped state value and a closure that provides a transaction to reset it.\ninit(wrappedValue: Value, resetTransaction: Transaction)\nCreates a view state that\u2019s derived from a gesture with a wrapped state value and a transaction to reset it."
    },
    {
        "title": "init(role:intent:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/button/init(role:intent:label:)",
        "html": "Parameters\nrole\n\nAn optional semantic role describing the button. A value of nil means that the button doesn\u2019t have an assigned role.\n\nintent\n\nThe AppIntent to execute.\n\nlabel\n\nA view that describes the purpose of the button\u2019s action.\n\nSee Also\nCreating a button to perform an App Intent\ninit<I>(intent: I, label: () -> Label)\nCreates a button that performs an AppIntent.\nAvailable when Label conforms to View.\ninit(LocalizedStringKey, intent: some AppIntent)\nCreates a button that performs an AppIntent and generates its label from a localized string key.\nAvailable when Label is Text.\ninit<S>(S, intent: some AppIntent)\nCreates a button that performs an AppIntent and generates its label from a string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, image: ImageResource, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a localized string key and an image resource.\nAvailable when Label is Label<Text, Image>.\ninit(some StringProtocol, image: ImageResource, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that generates its label from a string and an image resource.\nAvailable when Label is Label<Text, Image>.\ninit(LocalizedStringKey, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a localized string key.\nAvailable when Label is Text.\ninit(some StringProtocol, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, systemImage: String, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a localized string key and a system image.\nAvailable when Label is Label<Text, Image>.\ninit(some StringProtocol, systemImage: String, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that generates its label from a string and a system image.\nAvailable when Label is Label<Text, Image>."
    },
    {
        "title": "init(initialValue:)",
        "url": "https://developer.apple.com/documentation/swiftui/gesturestate/init(initialvalue:)",
        "html": "Parameters\ninitialValue\n\nAn initial value for the gesture state property.\n\nSee Also\nCreating a gesture state\ninit(initialValue: Value, reset: (Value, inout Transaction) -> Void)\nCreates a view state that\u2019s derived from a gesture with an initial state value and a closure that provides a transaction to reset it.\ninit(initialValue: Value, resetTransaction: Transaction)\nCreates a view state that\u2019s derived from a gesture with an initial state value and a transaction to reset it.\ninit(reset: (Value, inout Transaction) -> Void)\nCreates a view state that\u2019s derived from a gesture with a closure that provides a transaction to reset it.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(resetTransaction: Transaction)\nCreates a view state that\u2019s derived from a gesture with a transaction to reset it.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(wrappedValue: Value)\nCreates a view state that\u2019s derived from a gesture.\ninit(wrappedValue: Value, reset: (Value, inout Transaction) -> Void)\nCreates a view state that\u2019s derived from a gesture with a wrapped state value and a closure that provides a transaction to reset it.\ninit(wrappedValue: Value, resetTransaction: Transaction)\nCreates a view state that\u2019s derived from a gesture with a wrapped state value and a transaction to reset it."
    },
    {
        "title": "init(_:systemImage:role:intent:)",
        "url": "https://developer.apple.com/documentation/swiftui/button/init(_:systemimage:role:intent:)-23x94",
        "html": "Parameters\ntitleKey\n\nThe key for the button\u2019s localized title, that describes the purpose of the button\u2019s intent.\n\nsystemImage\n\nThe name of the image resource to lookup.\n\nrole\n\nAn optional semantic role describing the button. A value of nil means that the button doesn\u2019t have an assigned role.\n\nintent\n\nThe AppIntent to execute.\n\nDiscussion\n\nThis initializer creates a Label view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a button to perform an App Intent\ninit<I>(intent: I, label: () -> Label)\nCreates a button that performs an AppIntent.\nAvailable when Label conforms to View.\ninit(LocalizedStringKey, intent: some AppIntent)\nCreates a button that performs an AppIntent and generates its label from a localized string key.\nAvailable when Label is Text.\ninit<S>(S, intent: some AppIntent)\nCreates a button that performs an AppIntent and generates its label from a string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, image: ImageResource, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a localized string key and an image resource.\nAvailable when Label is Label<Text, Image>.\ninit(some StringProtocol, image: ImageResource, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that generates its label from a string and an image resource.\nAvailable when Label is Label<Text, Image>.\ninit(LocalizedStringKey, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a localized string key.\nAvailable when Label is Text.\ninit(some StringProtocol, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a string.\nAvailable when Label is Text.\ninit(some StringProtocol, systemImage: String, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that generates its label from a string and a system image.\nAvailable when Label is Label<Text, Image>.\ninit(role: ButtonRole?, intent: some AppIntent, label: () -> Label)\nCreates a button with a specified role that performs an AppIntent.\nAvailable when Label conforms to View."
    },
    {
        "title": "init(wrappedValue:resetTransaction:)",
        "url": "https://developer.apple.com/documentation/swiftui/gesturestate/init(wrappedvalue:resettransaction:)",
        "html": "Parameters\nwrappedValue\n\nA wrapped value for the gesture state property.\n\nresetTransaction\n\nA transaction that provides metadata for view updates.\n\nSee Also\nCreating a gesture state\ninit(initialValue: Value)\nCreates a view state that\u2019s derived from a gesture with an initial value.\ninit(initialValue: Value, reset: (Value, inout Transaction) -> Void)\nCreates a view state that\u2019s derived from a gesture with an initial state value and a closure that provides a transaction to reset it.\ninit(initialValue: Value, resetTransaction: Transaction)\nCreates a view state that\u2019s derived from a gesture with an initial state value and a transaction to reset it.\ninit(reset: (Value, inout Transaction) -> Void)\nCreates a view state that\u2019s derived from a gesture with a closure that provides a transaction to reset it.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(resetTransaction: Transaction)\nCreates a view state that\u2019s derived from a gesture with a transaction to reset it.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(wrappedValue: Value)\nCreates a view state that\u2019s derived from a gesture.\ninit(wrappedValue: Value, reset: (Value, inout Transaction) -> Void)\nCreates a view state that\u2019s derived from a gesture with a wrapped state value and a closure that provides a transaction to reset it."
    },
    {
        "title": "init(base:state:body:)",
        "url": "https://developer.apple.com/documentation/swiftui/gesturestategesture/init(base:state:body:)",
        "html": "Parameters\nbase\n\nThe originating gesture.\n\nstate\n\nThe wrapped value of a GestureState property.\n\nbody\n\nThe callback that SwiftUI invokes as the gesture\u2019s value changes.\n\nSee Also\nCreating an in-progress gesture\nvar base: Base\nThe originating gesture.\nvar state: GestureState<State>\nA value that changes as the user performs the gesture."
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablerowbuilder/buildblock(_:_:_:_:_:_:_:_:_:_:)",
        "html": "See Also\nBuilding a row from sources\nstatic func buildBlock<C>(C) -> C\nCreates a single row result.\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableRowContent<Value, (C0, C1)>\nCreates a row result from two sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableRowContent<Value, (C0, C1, C2)>\nCreates a row result from three sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableRowContent<Value, (C0, C1, C2, C3)>\nCreates a row result from four sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4)>\nCreates a row result from five sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5)>\nCreates a row result from six sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6)>\nCreates a row result from seven sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates a row result from eight sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates a row result from nine sources.\nAvailable when Value conforms to Identifiable."
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablerowbuilder/buildblock(_:_:_:_:_:_:_:_:)",
        "html": "See Also\nBuilding a row from sources\nstatic func buildBlock<C>(C) -> C\nCreates a single row result.\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableRowContent<Value, (C0, C1)>\nCreates a row result from two sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableRowContent<Value, (C0, C1, C2)>\nCreates a row result from three sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableRowContent<Value, (C0, C1, C2, C3)>\nCreates a row result from four sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4)>\nCreates a row result from five sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5)>\nCreates a row result from six sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6)>\nCreates a row result from seven sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates a row result from nine sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates a row result from ten sources.\nAvailable when Value conforms to Identifiable."
    },
    {
        "title": "buildBlock(_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablerowbuilder/buildblock(_:_:_:)",
        "html": "See Also\nBuilding a row from sources\nstatic func buildBlock<C>(C) -> C\nCreates a single row result.\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableRowContent<Value, (C0, C1)>\nCreates a row result from two sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableRowContent<Value, (C0, C1, C2, C3)>\nCreates a row result from four sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4)>\nCreates a row result from five sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5)>\nCreates a row result from six sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6)>\nCreates a row result from seven sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates a row result from eight sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates a row result from nine sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates a row result from ten sources.\nAvailable when Value conforms to Identifiable."
    },
    {
        "title": "minimumAngleDelta",
        "url": "https://developer.apple.com/documentation/swiftui/rotationgesture/minimumangledelta",
        "html": "Deprecated\n\nUse RotateGesture instead.\n\nSee Also\nCreating the gesture\ninit(minimumAngleDelta: Angle)\nCreates a rotation gesture with a minimum delta for the gesture to start.\nDeprecated"
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablerowbuilder/buildblock(_:_:_:_:_:_:_:)",
        "html": "See Also\nBuilding a row from sources\nstatic func buildBlock<C>(C) -> C\nCreates a single row result.\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableRowContent<Value, (C0, C1)>\nCreates a row result from two sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableRowContent<Value, (C0, C1, C2)>\nCreates a row result from three sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableRowContent<Value, (C0, C1, C2, C3)>\nCreates a row result from four sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4)>\nCreates a row result from five sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5)>\nCreates a row result from six sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates a row result from eight sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates a row result from nine sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates a row result from ten sources.\nAvailable when Value conforms to Identifiable."
    },
    {
        "title": "buildBlock(_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablerowbuilder/buildblock(_:_:)",
        "html": "See Also\nBuilding a row from sources\nstatic func buildBlock<C>(C) -> C\nCreates a single row result.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableRowContent<Value, (C0, C1, C2)>\nCreates a row result from three sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableRowContent<Value, (C0, C1, C2, C3)>\nCreates a row result from four sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4)>\nCreates a row result from five sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5)>\nCreates a row result from six sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6)>\nCreates a row result from seven sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates a row result from eight sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates a row result from nine sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates a row result from ten sources.\nAvailable when Value conforms to Identifiable."
    },
    {
        "title": "buildBlock(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablerowbuilder/buildblock(_:)",
        "html": "See Also\nBuilding a row from sources\nstatic func buildBlock<C0, C1>(C0, C1) -> TupleTableRowContent<Value, (C0, C1)>\nCreates a row result from two sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableRowContent<Value, (C0, C1, C2)>\nCreates a row result from three sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableRowContent<Value, (C0, C1, C2, C3)>\nCreates a row result from four sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4)>\nCreates a row result from five sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5)>\nCreates a row result from six sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6)>\nCreates a row result from seven sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7)>\nCreates a row result from eight sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>\nCreates a row result from nine sources.\nAvailable when Value conforms to Identifiable.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCreates a row result from ten sources.\nAvailable when Value conforms to Identifiable."
    },
    {
        "title": "draggable(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablerowcontent/draggable(_:)",
        "html": "Parameters\npayload\n\nA closure that returns a single instance or a value conforming to Transferable that represents the draggable data from this view.\n\nReturn Value\n\nA row that activates this row as the source of a drag and drop operation.\n\nDiscussion\n\nApplying the draggable(_:) modifier adds the appropriate gestures for drag and drop to this row.\n\nSee Also\nManaging interaction\nfunc dropDestination<T>(for: T.Type, action: ([T]) -> Void) -> some TableRowContent<Self.TableRowValue>\nDefines the entire row as a destination of a drag and drop operation that handles the dropped content with a closure that you specify.\nfunc onHover(perform: (Bool) -> Void) -> some TableRowContent<Self.TableRowValue>\nAdds an action to perform when the pointer moves onto or away from the entire row.\nfunc itemProvider((() -> NSItemProvider?)?) -> ModifiedContent<Self, ItemProviderTableRowModifier>\nProvides a closure that vends the drag representation for a particular data element.\nstruct ItemProviderTableRowModifier\nA table row modifier that associates an item provider with some base row content."
    },
    {
        "title": "buildEither(first:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablerowbuilder/buildeither(first:)",
        "html": "Discussion\n\nThis method provides support for \u201cif\u201d statements in multi-statement closures, producing conditional content for the \u201cthen\u201d branch.\n\nSee Also\nBuilding a row from conditionals\nstatic func buildIf<C>(C?) -> C?\nCreates a row result for conditional statements.\nAvailable when Value conforms to Identifiable.\nstatic func buildEither<T, F>(second: F) -> _ConditionalContent<T, F>\nCreates a row result for the second of two row content alternatives.\nAvailable when Value conforms to Identifiable.\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder."
    },
    {
        "title": "buildExpression(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablerowbuilder/buildexpression(_:)",
        "html": "See Also\nBuilding a row from conditionals\nstatic func buildIf<C>(C?) -> C?\nCreates a row result for conditional statements.\nAvailable when Value conforms to Identifiable.\nstatic func buildEither<T, F>(first: T) -> _ConditionalContent<T, F>\nCreates a row result for the first of two row content alternatives.\nAvailable when Value conforms to Identifiable.\nstatic func buildEither<T, F>(second: F) -> _ConditionalContent<T, F>\nCreates a row result for the second of two row content alternatives.\nAvailable when Value conforms to Identifiable."
    },
    {
        "title": "buildIf(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablerowbuilder/buildif(_:)",
        "html": "Discussion\n\nThis method provides support for \u201cif\u201d statements in multi-statement closures, producing an optional value that is visible only when the condition evaluates to true.\n\nSee Also\nBuilding a row from conditionals\nstatic func buildEither<T, F>(first: T) -> _ConditionalContent<T, F>\nCreates a row result for the first of two row content alternatives.\nAvailable when Value conforms to Identifiable.\nstatic func buildEither<T, F>(second: F) -> _ConditionalContent<T, F>\nCreates a row result for the second of two row content alternatives.\nAvailable when Value conforms to Identifiable.\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder."
    },
    {
        "title": "buildEither(second:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablerowbuilder/buildeither(second:)",
        "html": "Discussion\n\nThis method provides support for \u201cif\u201d statements in multi-statement closures, producing conditional content for the \u201celse\u201d branch.\n\nSee Also\nBuilding a row from conditionals\nstatic func buildIf<C>(C?) -> C?\nCreates a row result for conditional statements.\nAvailable when Value conforms to Identifiable.\nstatic func buildEither<T, F>(first: T) -> _ConditionalContent<T, F>\nCreates a row result for the first of two row content alternatives.\nAvailable when Value conforms to Identifiable.\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder."
    },
    {
        "title": "tableRowBody",
        "url": "https://developer.apple.com/documentation/swiftui/tablerowcontent/tablerowbody-swift.property",
        "html": "Required\n\nSee Also\nGetting the row body\nassociatedtype TableRowBody : TableRowContent\nThe type of content representing the body of this table row content.\n\nRequired"
    },
    {
        "title": "data",
        "url": "https://developer.apple.com/documentation/swiftui/dynamictablerowcontent/data-swift.property",
        "html": "Required\n\nSee Also\nGetting row data\nassociatedtype Data : Collection\nThe type of the underlying collection of data.\n\nRequired"
    },
    {
        "title": "onHover(perform:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablerowcontent/onhover(perform:)",
        "html": "See Also\nManaging interaction\nfunc draggable<T>(() -> T) -> some TableRowContent<Self.TableRowValue>\nActivates this row as the source of a drag and drop operation.\nfunc dropDestination<T>(for: T.Type, action: ([T]) -> Void) -> some TableRowContent<Self.TableRowValue>\nDefines the entire row as a destination of a drag and drop operation that handles the dropped content with a closure that you specify.\nfunc itemProvider((() -> NSItemProvider?)?) -> ModifiedContent<Self, ItemProviderTableRowModifier>\nProvides a closure that vends the drag representation for a particular data element.\nstruct ItemProviderTableRowModifier\nA table row modifier that associates an item provider with some base row content."
    },
    {
        "title": "contextMenu(menuItems:preview:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablerowcontent/contextmenu(menuitems:preview:)",
        "html": "Parameters\nmenuItems\n\nA closure that produces the menu\u2019s contents. You can deactivate the context menu by returning nothing from the closure.\n\npreview\n\nA view that the system displays along with the menu.\n\nReturn Value\n\nA row that can display a context menu with a preview.\n\nDiscussion\n\nWhen you use this modifier to add a context menu to rows in a table, the system shows a preview beside the menu. Compose the menu by returning controls like Button, Toggle, and Picker from the menuItems closure. You can also use Menu to define submenus.\n\nDefine the preview by returning a view from the preview closure. The system sizes the preview to match the size of its content. For example, the following code adds a context menu with a preview to each row in a table that people can use to send an email to the person represented by that row:\n\nTable(of: Person.self) {\n    TableColumn(\"Given Name\", value: \\.givenName)\n    TableColumn(\"Family Name\", value: \\.familyName)\n} rows: {\n    ForEach(people) { person in\n        TableRow(person)\n            .contextMenu {\n                Button(\"Send Email...\") { }\n            } preview: {\n                Image(\"envelope\") // Loads the image from an asset catalog.\n            }\n    }\n}\n\n\nNote\n\nThis view modifier produces a context menu on macOS, but that platform doesn\u2019t display the preview.\n\nIf you don\u2019t need a preview, use contextMenu(menuItems:). If you want to display a context menu that\u2019s based on the current selection, use contextMenu(forSelectionType:menu:primaryAction:). To add context menus to other kinds of views, see contextMenu(menuItems:).\n\nSee Also\nAdding a context menu to a row\nfunc contextMenu<M>(menuItems: () -> M) -> ModifiedContent<Self, _ContextMenuTableRowModifier<M>>\nAdds a context menu to a table row."
    },
    {
        "title": "itemProvider(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablerowcontent/itemprovider(_:)",
        "html": "See Also\nManaging interaction\nfunc draggable<T>(() -> T) -> some TableRowContent<Self.TableRowValue>\nActivates this row as the source of a drag and drop operation.\nfunc dropDestination<T>(for: T.Type, action: ([T]) -> Void) -> some TableRowContent<Self.TableRowValue>\nDefines the entire row as a destination of a drag and drop operation that handles the dropped content with a closure that you specify.\nfunc onHover(perform: (Bool) -> Void) -> some TableRowContent<Self.TableRowValue>\nAdds an action to perform when the pointer moves onto or away from the entire row.\nstruct ItemProviderTableRowModifier\nA table row modifier that associates an item provider with some base row content."
    },
    {
        "title": "dropDestination(for:action:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablerowcontent/dropdestination(for:action:)",
        "html": "Parameters\npayloadType\n\nThe expected type of the dropped models.\n\naction\n\nA closure that takes the dropped content and responds with true if the drop operation was successful; otherwise, return false.\n\nReturn Value\n\nA row that provides a drop destination for a drag operation of the specified type.\n\nSee Also\nManaging interaction\nfunc draggable<T>(() -> T) -> some TableRowContent<Self.TableRowValue>\nActivates this row as the source of a drag and drop operation.\nfunc onHover(perform: (Bool) -> Void) -> some TableRowContent<Self.TableRowValue>\nAdds an action to perform when the pointer moves onto or away from the entire row.\nfunc itemProvider((() -> NSItemProvider?)?) -> ModifiedContent<Self, ItemProviderTableRowModifier>\nProvides a closure that vends the drag representation for a particular data element.\nstruct ItemProviderTableRowModifier\nA table row modifier that associates an item provider with some base row content."
    },
    {
        "title": "selectionDisabled(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablerowcontent/selectiondisabled(_:)",
        "html": "Parameters\nisDisabled\n\nA Boolean value that determines whether users can select this row.\n\nDiscussion\n\nUse this modifier to control the selectability of views in selectable containers like List or Table. In the example, below, the user can\u2019t select the first item in the table.\n\n@Binding var rows: [Item]\n@Binding var selection: Set<Item.ID>\n\n\nvar body: some View {\n    Table(of: Item.self, selection: $selection) {\n        TableColumn(\"ID\", value: \\.id.uuidString)\n    } rows: {\n        ForEach(rows) { row in\n            TableRow(row)\n                .selectionDisabled(\n                    row.id == rows.first?.id\n                )\n        }\n    }\n}\n\n\nYou can also use this modifier to specify the selectability of views within a Picker. The following example represents a flavor picker that disables selection on flavors that are unavailable.\n\nPicker(\"Flavor\", selection: $selectedFlavor) {\n    ForEach(Flavor.allCases) { flavor in\n        Text(flavor.rawValue.capitalized)\n            .selectionDisabled(isSoldOut(flavor))\n    }\n}\n"
    },
    {
        "title": "TableRowBody",
        "url": "https://developer.apple.com/documentation/swiftui/tablerowcontent/tablerowbody-swift.associatedtype",
        "html": "Required\n\nSee Also\nGetting the row body\nvar tableRowBody: Self.TableRowBody\nThe composition of content that comprise the table row content.\n\nRequired"
    },
    {
        "title": "ItemProviderTableRowModifier",
        "url": "https://developer.apple.com/documentation/swiftui/itemprovidertablerowmodifier",
        "html": "See Also\nManaging interaction\nfunc draggable<T>(() -> T) -> some TableRowContent<Self.TableRowValue>\nActivates this row as the source of a drag and drop operation.\nfunc dropDestination<T>(for: T.Type, action: ([T]) -> Void) -> some TableRowContent<Self.TableRowValue>\nDefines the entire row as a destination of a drag and drop operation that handles the dropped content with a closure that you specify.\nfunc onHover(perform: (Bool) -> Void) -> some TableRowContent<Self.TableRowValue>\nAdds an action to perform when the pointer moves onto or away from the entire row.\nfunc itemProvider((() -> NSItemProvider?)?) -> ModifiedContent<Self, ItemProviderTableRowModifier>\nProvides a closure that vends the drag representation for a particular data element."
    },
    {
        "title": "Data",
        "url": "https://developer.apple.com/documentation/swiftui/dynamictablerowcontent/data-swift.associatedtype",
        "html": "Required\n\nSee Also\nGetting row data\nvar data: Self.Data\nThe collection of underlying data.\n\nRequired"
    },
    {
        "title": "top",
        "url": "https://developer.apple.com/documentation/swiftui/edgeinsets/top",
        "html": "See Also\nGetting edge insets\nvar bottom: CGFloat\nvar leading: CGFloat\nvar trailing: CGFloat"
    },
    {
        "title": "init(resetTransaction:)",
        "url": "https://developer.apple.com/documentation/swiftui/gesturestate/init(resettransaction:)",
        "html": "Parameters\nresetTransaction\n\nA transaction that provides metadata for view updates.\n\nSee Also\nCreating a gesture state\ninit(initialValue: Value)\nCreates a view state that\u2019s derived from a gesture with an initial value.\ninit(initialValue: Value, reset: (Value, inout Transaction) -> Void)\nCreates a view state that\u2019s derived from a gesture with an initial state value and a closure that provides a transaction to reset it.\ninit(initialValue: Value, resetTransaction: Transaction)\nCreates a view state that\u2019s derived from a gesture with an initial state value and a transaction to reset it.\ninit(reset: (Value, inout Transaction) -> Void)\nCreates a view state that\u2019s derived from a gesture with a closure that provides a transaction to reset it.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(wrappedValue: Value)\nCreates a view state that\u2019s derived from a gesture.\ninit(wrappedValue: Value, reset: (Value, inout Transaction) -> Void)\nCreates a view state that\u2019s derived from a gesture with a wrapped state value and a closure that provides a transaction to reset it.\ninit(wrappedValue: Value, resetTransaction: Transaction)\nCreates a view state that\u2019s derived from a gesture with a wrapped state value and a transaction to reset it."
    },
    {
        "title": "init(wrappedValue:)",
        "url": "https://developer.apple.com/documentation/swiftui/gesturestate/init(wrappedvalue:)",
        "html": "Parameters\nwrappedValue\n\nA wrapped value for the gesture state property.\n\nSee Also\nCreating a gesture state\ninit(initialValue: Value)\nCreates a view state that\u2019s derived from a gesture with an initial value.\ninit(initialValue: Value, reset: (Value, inout Transaction) -> Void)\nCreates a view state that\u2019s derived from a gesture with an initial state value and a closure that provides a transaction to reset it.\ninit(initialValue: Value, resetTransaction: Transaction)\nCreates a view state that\u2019s derived from a gesture with an initial state value and a transaction to reset it.\ninit(reset: (Value, inout Transaction) -> Void)\nCreates a view state that\u2019s derived from a gesture with a closure that provides a transaction to reset it.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(resetTransaction: Transaction)\nCreates a view state that\u2019s derived from a gesture with a transaction to reset it.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(wrappedValue: Value, reset: (Value, inout Transaction) -> Void)\nCreates a view state that\u2019s derived from a gesture with a wrapped state value and a closure that provides a transaction to reset it.\ninit(wrappedValue: Value, resetTransaction: Transaction)\nCreates a view state that\u2019s derived from a gesture with a wrapped state value and a transaction to reset it."
    },
    {
        "title": "projectedValue",
        "url": "https://developer.apple.com/documentation/swiftui/gesturestate/projectedvalue",
        "html": "See Also\nGetting the state\nvar wrappedValue: Value\nThe wrapped value referenced by the gesture state property."
    },
    {
        "title": "projectedValue",
        "url": "https://developer.apple.com/documentation/swiftui/focusedobject/projectedvalue",
        "html": "Discussion\n\nUse the projected value to pass a focused object down a view hierarchy.\n\nSee Also\nGetting the value\nvar wrappedValue: ObjectType?\nThe underlying value referenced by the focused object.\nstruct Wrapper\nA wrapper around the underlying focused object that can create bindings to its properties using dynamic member lookup."
    },
    {
        "title": "init(degrees:)",
        "url": "https://developer.apple.com/documentation/swiftui/angle/init(degrees:)",
        "html": "See Also\nCreating an angle\ninit()\ninit(radians: Double)\ninit(Angle2D)\nBeta"
    },
    {
        "title": "body",
        "url": "https://developer.apple.com/documentation/swiftui/gesture/body-swift.property",
        "html": "Required\n\nSee Also\nImplementing a custom gesture\nassociatedtype Body : Gesture\nThe type of gesture representing the body of Self.\n\nRequired"
    },
    {
        "title": "updating(_:body:)",
        "url": "https://developer.apple.com/documentation/swiftui/gesture/updating(_:body:)",
        "html": "Parameters\nstate\n\nA binding to a view\u2019s GestureState property.\n\nbody\n\nThe callback that SwiftUI invokes as the gesture\u2019s value changes. Its currentState parameter is the updated state of the gesture. The gestureState parameter is the previous state of the gesture, and the transaction is the context of the gesture.\n\nReturn Value\n\nA version of the gesture that updates the provided state as the originating gesture\u2019s value changes and that resets the state to its initial value when the user or the system ends or cancels the gesture.\n\nDiscussion\n\nUse this callback to update transient UI state as described in Adding interactivity with gestures.\n\nSee Also\nPerforming the gesture\nfunc onChanged((Self.Value) -> Void) -> _ChangedGesture<Self>\nAdds an action to perform when the gesture\u2019s value changes.\nAvailable when Value conforms to Equatable.\nfunc onEnded((Self.Value) -> Void) -> _EndedGesture<Self>\nAdds an action to perform when the gesture ends.\nassociatedtype Value\nThe type representing the gesture\u2019s value.\n\nRequired"
    },
    {
        "title": "Body",
        "url": "https://developer.apple.com/documentation/swiftui/gesture/body-swift.associatedtype",
        "html": "Required\n\nSee Also\nImplementing a custom gesture\nvar body: Self.Body\nThe content and behavior of the gesture.\n\nRequired"
    },
    {
        "title": "onChanged(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/gesture/onchanged(_:)",
        "html": "Parameters\naction\n\nThe action to perform when this gesture\u2019s value changes. The action closure\u2019s parameter contains the gesture\u2019s new value.\n\nReturn Value\n\nA gesture that triggers action when this gesture\u2019s value changes.\n\nSee Also\nPerforming the gesture\nfunc updating<State>(GestureState<State>, body: (Self.Value, inout State, inout Transaction) -> Void) -> GestureStateGesture<Self, State>\nUpdates the provided gesture state property as the gesture\u2019s value changes.\nfunc onEnded((Self.Value) -> Void) -> _EndedGesture<Self>\nAdds an action to perform when the gesture ends.\nassociatedtype Value\nThe type representing the gesture\u2019s value.\n\nRequired"
    },
    {
        "title": "maximumDistance",
        "url": "https://developer.apple.com/documentation/swiftui/longpressgesture/maximumdistance",
        "html": "See Also\nCreating a long press gesture\ninit(minimumDuration: Double)\nCreates a long-press gesture with a minimum duration\ninit(minimumDuration: Double, maximumDistance: CGFloat)\nCreates a long-press gesture with a minimum duration and a maximum distance that the interaction can move before the gesture fails.\nvar minimumDuration: Double\nThe minimum duration of the long press that must elapse before the gesture succeeds."
    },
    {
        "title": "onEnded(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/gesture/onended(_:)",
        "html": "Parameters\naction\n\nThe action to perform when this gesture ends. The action closure\u2019s parameter contains the final value of the gesture.\n\nReturn Value\n\nA gesture that triggers action when the gesture ends.\n\nSee Also\nPerforming the gesture\nfunc updating<State>(GestureState<State>, body: (Self.Value, inout State, inout Transaction) -> Void) -> GestureStateGesture<Self, State>\nUpdates the provided gesture state property as the gesture\u2019s value changes.\nfunc onChanged((Self.Value) -> Void) -> _ChangedGesture<Self>\nAdds an action to perform when the gesture\u2019s value changes.\nAvailable when Value conforms to Equatable.\nassociatedtype Value\nThe type representing the gesture\u2019s value.\n\nRequired"
    },
    {
        "title": "init(minimumDuration:maximumDistance:)",
        "url": "https://developer.apple.com/documentation/swiftui/longpressgesture/init(minimumduration:maximumdistance:)",
        "html": "Parameters\nminimumDuration\n\nThe minimum duration of the long press that must elapse before the gesture succeeds.\n\nmaximumDistance\n\nThe maximum distance that the fingers or cursor performing the long press can move before the gesture fails.\n\nSee Also\nCreating a long press gesture\ninit(minimumDuration: Double)\nCreates a long-press gesture with a minimum duration\nvar minimumDuration: Double\nThe minimum duration of the long press that must elapse before the gesture succeeds.\nvar maximumDistance: CGFloat\nThe maximum distance that the long press can move before the gesture fails."
    },
    {
        "title": "Value",
        "url": "https://developer.apple.com/documentation/swiftui/gesture/value",
        "html": "Required\n\nSee Also\nPerforming the gesture\nfunc updating<State>(GestureState<State>, body: (Self.Value, inout State, inout Transaction) -> Void) -> GestureStateGesture<Self, State>\nUpdates the provided gesture state property as the gesture\u2019s value changes.\nfunc onChanged((Self.Value) -> Void) -> _ChangedGesture<Self>\nAdds an action to perform when the gesture\u2019s value changes.\nAvailable when Value conforms to Equatable.\nfunc onEnded((Self.Value) -> Void) -> _EndedGesture<Self>\nAdds an action to perform when the gesture ends."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/defaultfocusevaluationpriority/automatic",
        "html": "See Also\nGetting the priorities\nstatic let userInitiated: DefaultFocusEvaluationPriority\nAlways use the default focus preference when focus moves into the affected branch."
    },
    {
        "title": "stackOrientation",
        "url": "https://developer.apple.com/documentation/swiftui/layoutproperties/stackorientation",
        "html": "Discussion\n\nCertain views alter their behavior based on the stack orientation of the container that they appear in. For example, Spacer and Divider align their major axis to match that of their container.\n\nSet the orientation for your custom layout container by returning a configured LayoutProperties instance from your Layout type\u2019s implementation of the layoutProperties method. For example, you can indicate that your layout has a Axis.vertical major axis:\n\nextension BasicVStack {\n    static var layoutProperties: LayoutProperties {\n        var properties = LayoutProperties()\n        properties.stackOrientation = .vertical\n        return properties\n    }\n}\n\n\nA value of nil, which is the default when you don\u2019t specify a value, indicates an unknown orientation, or that a layout isn\u2019t one-dimensional."
    },
    {
        "title": "leading",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnalignment/leading",
        "html": "Discussion\n\nWith a layoutDirection of leftToRight, this is equivalent to left; and with a layoutDirection of rightToLeft, this is equivalent to right.\n\nSee Also\nGetting the alignment\nstatic var automatic: TableColumnAlignment\nThe default column alignment.\nstatic var center: TableColumnAlignment\nCenter column alignment.\nstatic var trailing: TableColumnAlignment\nTrailing column alignment.\nstatic var numeric: TableColumnAlignment\nColumn alignment appropriate for numeric content.\nstatic func numeric(Locale.NumberingSystem) -> TableColumnAlignment\nColumn alignment appropriate for numeric content."
    },
    {
        "title": "y",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint/y",
        "html": "See Also\nGetting the point\u2019s coordinates\nvar x: CGFloat\nThe normalized distance from the origin to the point in the horizontal direction."
    },
    {
        "title": "x",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint/x",
        "html": "See Also\nGetting the point\u2019s coordinates\nvar y: CGFloat\nThe normalized distance from the origin to the point in the vertical dimension."
    },
    {
        "title": "zero",
        "url": "https://developer.apple.com/documentation/swiftui/angle/zero",
        "html": "See Also\nGetting constant angles\nstatic func degrees(Double) -> Angle\nstatic func radians(Double) -> Angle"
    },
    {
        "title": "bottom",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint/bottom",
        "html": "Discussion\n\nThis point occupies the position where the horizontal and vertical alignment guides intersect for bottom alignment.\n\nSee Also\nGetting bottom points\nstatic let bottomLeading: UnitPoint\nA point that\u2019s in the bottom, leading corner of a view.\nstatic let bottomTrailing: UnitPoint\nA point that\u2019s in the bottom, trailing corner of a view."
    },
    {
        "title": "minimumScaleDelta",
        "url": "https://developer.apple.com/documentation/swiftui/magnificationgesture/minimumscaledelta",
        "html": "Deprecated\n\nUse MagnifyGesture instead.\n\nSee Also\nCreating the gesture\ninit(minimumScaleDelta: CGFloat)\nCreates a magnification gesture with a given minimum delta for the gesture to start.\nDeprecated"
    },
    {
        "title": "init(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/form/init(content:)",
        "html": "Parameters\ncontent\n\nA ViewBuilder that provides the content for the form."
    },
    {
        "title": "init(radians:)",
        "url": "https://developer.apple.com/documentation/swiftui/angle/init(radians:)",
        "html": "See Also\nCreating an angle\ninit()\ninit(degrees: Double)\ninit(Angle2D)\nBeta"
    },
    {
        "title": "LayoutDirectionBehavior.mirrors(in:)",
        "url": "https://developer.apple.com/documentation/swiftui/layoutdirectionbehavior/mirrors(in:)",
        "html": "Discussion\n\nIf you develop your view or shape in an LTR context, you can use .mirrors(in: .rightToLeft) (which is equivalent to .mirrors) to mirror your content when the layout direction is RTL (and keep the original version in LTR). If you developer in an RTL context, you can use .mirrors(in: .leftToRight) to mirror your content when the layout direction is LTR (and keep the original version in RTL).\n\nSee Also\nGetting behaviors\ncase fixed\nA behavior that doesn\u2019t mirror when the layout direction changes.\nstatic var mirrors: LayoutDirectionBehavior\nA behavior that mirrors when the layout direction is right-to-left."
    },
    {
        "title": "LayoutDirectionBehavior.fixed",
        "url": "https://developer.apple.com/documentation/swiftui/layoutdirectionbehavior/fixed",
        "html": "See Also\nGetting behaviors\nstatic var mirrors: LayoutDirectionBehavior\nA behavior that mirrors when the layout direction is right-to-left.\ncase mirrors(in: LayoutDirection)\nA behavior that mirrors when the layout direction has the specified value."
    },
    {
        "title": "topLeading",
        "url": "https://developer.apple.com/documentation/swiftui/alignment/topleading",
        "html": "Discussion\n\nThis alignment combines the leading horizontal guide and the top vertical guide:\n\nSee Also\nGetting top guides\nstatic let top: Alignment\nA guide that marks the top edge of the view.\nstatic let topTrailing: Alignment\nA guide that marks the top and trailing edges of the view."
    },
    {
        "title": "leadingLastTextBaseline",
        "url": "https://developer.apple.com/documentation/swiftui/alignment/leadinglasttextbaseline",
        "html": "Discussion\n\nThis alignment combines the leading horizontal guide and the lastTextBaseline vertical guide:\n\nSee Also\nGetting text baseline guides\nstatic var leadingFirstTextBaseline: Alignment\nA guide that marks the leading edge and top-most text baseline in a view.\nstatic var centerFirstTextBaseline: Alignment\nA guide that marks the top-most text baseline in a view.\nstatic var trailingFirstTextBaseline: Alignment\nA guide that marks the trailing edge and top-most text baseline in a view.\nstatic var centerLastTextBaseline: Alignment\nA guide that marks the bottom-most text baseline in a view.\nstatic var trailingLastTextBaseline: Alignment\nA guide that marks the trailing edge and bottom-most text baseline in a view."
    },
    {
        "title": "init(horizontal:vertical:)",
        "url": "https://developer.apple.com/documentation/swiftui/alignment/init(horizontal:vertical:)",
        "html": "Parameters\nhorizontal\n\nThe alignment on the horizontal axis.\n\nvertical\n\nThe alignment on the vertical axis.\n\nDiscussion\n\nSwiftUI provides a variety of built-in alignments that combine built-in HorizontalAlignment and VerticalAlignment guides. Use this initializer to create a custom alignment that makes use of a custom horizontal or vertical guide, or both.\n\nFor example, you can combine a custom vertical guide called firstThird with the built-in center guide, and use it to configure a ZStack:\n\nZStack(alignment: Alignment(horizontal: .center, vertical: .firstThird)) {\n    // ...\n}\n\n\nFor more information about creating custom guides, including the code that creates the custom firstThird alignment in the example above, see AlignmentID.\n\nSee Also\nCreating a custom alignment\nvar horizontal: HorizontalAlignment\nThe alignment on the horizontal axis.\nvar vertical: VerticalAlignment\nThe alignment on the vertical axis."
    },
    {
        "title": "TableColumnBody",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumncontent/tablecolumnbody-swift.associatedtype",
        "html": "Required\n\nSee Also\nGetting the column body\nvar tableColumnBody: Self.TableColumnBody\nThe composition of content that comprise the table column content.\n\nRequired"
    },
    {
        "title": "horizontal",
        "url": "https://developer.apple.com/documentation/swiftui/alignment/horizontal",
        "html": "Discussion\n\nSet this value when you initialize an alignment using the init(horizontal:vertical:) method. Use one of the built-in HorizontalAlignment guides, like center, or a custom guide that you create.\n\nFor information about creating custom guides, see AlignmentID.\n\nSee Also\nCreating a custom alignment\ninit(horizontal: HorizontalAlignment, vertical: VerticalAlignment)\nCreates a custom alignment value with the specified horizontal and vertical alignment guides.\nvar vertical: VerticalAlignment\nThe alignment on the vertical axis."
    },
    {
        "title": "radians(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/angle/radians(_:)",
        "html": "See Also\nGetting constant angles\nstatic var zero: Angle\nstatic func degrees(Double) -> Angle"
    },
    {
        "title": "trailingFirstTextBaseline",
        "url": "https://developer.apple.com/documentation/swiftui/alignment/trailingfirsttextbaseline",
        "html": "Discussion\n\nThis alignment combines the trailing horizontal guide and the firstTextBaseline vertical guide:\n\nSee Also\nGetting text baseline guides\nstatic var leadingFirstTextBaseline: Alignment\nA guide that marks the leading edge and top-most text baseline in a view.\nstatic var centerFirstTextBaseline: Alignment\nA guide that marks the top-most text baseline in a view.\nstatic var leadingLastTextBaseline: Alignment\nA guide that marks the leading edge and bottom-most text baseline in a view.\nstatic var centerLastTextBaseline: Alignment\nA guide that marks the bottom-most text baseline in a view.\nstatic var trailingLastTextBaseline: Alignment\nA guide that marks the trailing edge and bottom-most text baseline in a view."
    },
    {
        "title": "degrees(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/angle/degrees(_:)",
        "html": "See Also\nGetting constant angles\nstatic var zero: Angle\nstatic func radians(Double) -> Angle"
    },
    {
        "title": "TableRowValue",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumncontent/tablerowvalue",
        "html": "Required"
    },
    {
        "title": "topTrailing",
        "url": "https://developer.apple.com/documentation/swiftui/alignment/toptrailing",
        "html": "Discussion\n\nThis alignment combines the trailing horizontal guide and the top vertical guide:\n\nSee Also\nGetting top guides\nstatic let topLeading: Alignment\nA guide that marks the top and leading edges of the view.\nstatic let top: Alignment\nA guide that marks the top edge of the view."
    },
    {
        "title": "top",
        "url": "https://developer.apple.com/documentation/swiftui/alignment/top",
        "html": "Discussion\n\nThis alignment combines the center horizontal guide and the top vertical guide:\n\nSee Also\nGetting top guides\nstatic let topLeading: Alignment\nA guide that marks the top and leading edges of the view.\nstatic let topTrailing: Alignment\nA guide that marks the top and trailing edges of the view."
    },
    {
        "title": "VerticalEdge.Set",
        "url": "https://developer.apple.com/documentation/swiftui/verticaledge/set",
        "html": "Topics\nGetting edge sets\nstatic let all: VerticalEdge.Set\nA set containing the top and bottom vertical edges.\nstatic let top: VerticalEdge.Set\nA set containing only the top vertical edge.\nstatic let bottom: VerticalEdge.Set\nA set containing only the bottom vertical edge.\nCreating an edge set\ninit(VerticalEdge)\nCreates a set of edges containing only the specified vertical edge.\nRelationships\nConforms To\nEquatable\nExpressibleByArrayLiteral\nOptionSet\nRawRepresentable\nSendable\nSetAlgebra"
    },
    {
        "title": "VerticalEdge.top",
        "url": "https://developer.apple.com/documentation/swiftui/verticaledge/top",
        "html": "See Also\nGetting the edges\ncase bottom\nThe bottom edge."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/form/init(_:)",
        "html": "Parameters\nconfiguration\n\nThe properties of the form."
    },
    {
        "title": "init(_:action:)",
        "url": "https://developer.apple.com/documentation/swiftui/button/init(_:action:)-1asy",
        "html": "Parameters\ntitleKey\n\nThe key for the button\u2019s localized title, that describes the purpose of the button\u2019s action.\n\naction\n\nThe action to perform when the user triggers the button.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nTo initialize a button with a string variable, use init(_:action:) instead.\n\nSee Also\nCreating a button\ninit(action: () -> Void, label: () -> Label)\nCreates a button that displays a custom label.\ninit<S>(S, action: () -> Void)\nCreates a button that generates its label from a string.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:image:role:action:)",
        "url": "https://developer.apple.com/documentation/swiftui/button/init(_:image:role:action:)-5h9p",
        "html": "Parameters\ntitle\n\nA string that describes the purpose of the button\u2019s action.\n\nimage\n\nThe image resource to lookup.\n\nrole\n\nAn optional semantic role describing the button. A value of nil means that the button doesn\u2019t have an assigned role.\n\naction\n\nThe action to perform when the user interacts with the button.\n\nDiscussion\n\nThis initializer creates a Label view on your behalf, and treats the title similar to init(_:). See Text for more information about localizing strings.\n\nSee Also\nCreating a button with an image resource\ninit(LocalizedStringKey, image: ImageResource, action: () -> Void)\nCreates a button that generates its label from a localized string key and image resource.\nAvailable when Label is Label<Text, Image>.\ninit<S>(S, image: ImageResource, action: () -> Void)\nCreates a button that generates its label from a string and image resource.\nAvailable when Label is Label<Text, Image>.\ninit(LocalizedStringKey, image: ImageResource, role: ButtonRole?, action: () -> Void)\nCreates a button with a specified role that generates its label from a localized string key and an image resource.\nAvailable when Label is Label<Text, Image>."
    },
    {
        "title": "init(_:image:role:action:)",
        "url": "https://developer.apple.com/documentation/swiftui/button/init(_:image:role:action:)-3i76f",
        "html": "Parameters\ntitleKey\n\nThe key for the button\u2019s localized title, that describes the purpose of the button\u2019s action.\n\nimage\n\nThe image resource to lookup.\n\nrole\n\nAn optional semantic role describing the button. A value of nil means that the button doesn\u2019t have an assigned role.\n\naction\n\nThe action to perform when the user triggers the button.\n\nDiscussion\n\nThis initializer creates a Label view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a button with an image resource\ninit(LocalizedStringKey, image: ImageResource, action: () -> Void)\nCreates a button that generates its label from a localized string key and image resource.\nAvailable when Label is Label<Text, Image>.\ninit<S>(S, image: ImageResource, action: () -> Void)\nCreates a button that generates its label from a string and image resource.\nAvailable when Label is Label<Text, Image>.\ninit<S>(S, image: ImageResource, role: ButtonRole?, action: () -> Void)\nCreates a button with a specified role that generates its label from a string and an image resource.\nAvailable when Label is Label<Text, Image>."
    },
    {
        "title": "init(_:image:action:)",
        "url": "https://developer.apple.com/documentation/swiftui/button/init(_:image:action:)-6dqq9",
        "html": "Parameters\ntitleKey\n\nThe key for the button\u2019s localized title, that describes the purpose of the button\u2019s action.\n\nimage\n\nThe image resource to lookup.\n\naction\n\nThe action to perform when the user triggers the button.\n\nDiscussion\n\nThis initializer creates a Label view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a button with an image resource\ninit<S>(S, image: ImageResource, action: () -> Void)\nCreates a button that generates its label from a string and image resource.\nAvailable when Label is Label<Text, Image>.\ninit(LocalizedStringKey, image: ImageResource, role: ButtonRole?, action: () -> Void)\nCreates a button with a specified role that generates its label from a localized string key and an image resource.\nAvailable when Label is Label<Text, Image>.\ninit<S>(S, image: ImageResource, role: ButtonRole?, action: () -> Void)\nCreates a button with a specified role that generates its label from a string and an image resource.\nAvailable when Label is Label<Text, Image>."
    },
    {
        "title": "init(role:action:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/button/init(role:action:label:)",
        "html": "Parameters\nrole\n\nAn optional semantic role that describes the button. A value of nil means that the button doesn\u2019t have an assigned role.\n\naction\n\nThe action to perform when the user interacts with the button.\n\nlabel\n\nA view that describes the purpose of the button\u2019s action.\n\nSee Also\nCreating a button with a role\ninit(LocalizedStringKey, role: ButtonRole?, action: () -> Void)\nCreates a button with a specified role that generates its label from a localized string key.\nAvailable when Label is Text.\ninit<S>(S, role: ButtonRole?, action: () -> Void)\nCreates a button with a specified role that generates its label from a string.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:systemImage:role:action:)",
        "url": "https://developer.apple.com/documentation/swiftui/button/init(_:systemimage:role:action:)-1ysnm",
        "html": "Parameters\ntitle\n\nA string that describes the purpose of the button\u2019s action.\n\nsystemImage\n\nThe name of the image resource to lookup.\n\nrole\n\nAn optional semantic role describing the button. A value of nil means that the button doesn\u2019t have an assigned role.\n\naction\n\nThe action to perform when the user interacts with the button.\n\nDiscussion\n\nThis initializer creates a Label view on your behalf, and treats the title similar to init(_:). See Text for more information about localizing strings.\n\nSee Also\nCreating a button with a system image\ninit<S>(S, systemImage: String, action: () -> Void)\nCreates a button that generates its label from a string and system image name.\nAvailable when Label is Label<Text, Image>.\ninit(LocalizedStringKey, systemImage: String, action: () -> Void)\nCreates a button that generates its label from a localized string key and system image name.\nAvailable when Label is Label<Text, Image>.\ninit(LocalizedStringKey, systemImage: String, role: ButtonRole?, action: () -> Void)\nCreates a button with a specified role that generates its label from a localized string key and a system image.\nAvailable when Label is Label<Text, Image>."
    },
    {
        "title": "init(_:systemImage:action:)",
        "url": "https://developer.apple.com/documentation/swiftui/button/init(_:systemimage:action:)-6346x",
        "html": "Parameters\ntitleKey\n\nThe key for the button\u2019s localized title, that describes the purpose of the button\u2019s action.\n\nsystemImage\n\nThe name of the image resource to lookup.\n\naction\n\nThe action to perform when the user triggers the button.\n\nDiscussion\n\nThis initializer creates a Label view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a button with a system image\ninit<S>(S, systemImage: String, action: () -> Void)\nCreates a button that generates its label from a string and system image name.\nAvailable when Label is Label<Text, Image>.\ninit<S>(S, systemImage: String, role: ButtonRole?, action: () -> Void)\nCreates a button with a specified role that generates its label from a string and a system image and an image resource.\nAvailable when Label is Label<Text, Image>.\ninit(LocalizedStringKey, systemImage: String, role: ButtonRole?, action: () -> Void)\nCreates a button with a specified role that generates its label from a localized string key and a system image.\nAvailable when Label is Label<Text, Image>."
    },
    {
        "title": "init(_:systemImage:action:)",
        "url": "https://developer.apple.com/documentation/swiftui/button/init(_:systemimage:action:)-3w3be",
        "html": "Parameters\ntitle\n\nA string that describes the purpose of the button\u2019s action.\n\nsystemImage\n\nThe name of the image resource to lookup.\n\naction\n\nThe action to perform when the user triggers the button.\n\nDiscussion\n\nThis initializer creates a Label view on your behalf, and treats the title similar to init(_:). See Text for more information about localizing strings.\n\nSee Also\nCreating a button with a system image\ninit(LocalizedStringKey, systemImage: String, action: () -> Void)\nCreates a button that generates its label from a localized string key and system image name.\nAvailable when Label is Label<Text, Image>.\ninit<S>(S, systemImage: String, role: ButtonRole?, action: () -> Void)\nCreates a button with a specified role that generates its label from a string and a system image and an image resource.\nAvailable when Label is Label<Text, Image>.\ninit(LocalizedStringKey, systemImage: String, role: ButtonRole?, action: () -> Void)\nCreates a button with a specified role that generates its label from a localized string key and a system image.\nAvailable when Label is Label<Text, Image>."
    },
    {
        "title": "init(_:intent:)",
        "url": "https://developer.apple.com/documentation/swiftui/button/init(_:intent:)-1aqo4",
        "html": "Parameters\ntitle\n\nA string that describes the purpose of the button\u2019s intent.\n\nintent\n\nThe AppIntent to execute.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the title similar to init(_:). See Text for more information about localizing strings.\n\nTo initialize a button with a localized string key, use Button/init(_:intent:) instead.\n\nSee Also\nCreating a button to perform an App Intent\ninit<I>(intent: I, label: () -> Label)\nCreates a button that performs an AppIntent.\nAvailable when Label conforms to View.\ninit(LocalizedStringKey, intent: some AppIntent)\nCreates a button that performs an AppIntent and generates its label from a localized string key.\nAvailable when Label is Text.\ninit(LocalizedStringKey, image: ImageResource, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a localized string key and an image resource.\nAvailable when Label is Label<Text, Image>.\ninit(some StringProtocol, image: ImageResource, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that generates its label from a string and an image resource.\nAvailable when Label is Label<Text, Image>.\ninit(LocalizedStringKey, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a localized string key.\nAvailable when Label is Text.\ninit(some StringProtocol, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, systemImage: String, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a localized string key and a system image.\nAvailable when Label is Label<Text, Image>.\ninit(some StringProtocol, systemImage: String, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that generates its label from a string and a system image.\nAvailable when Label is Label<Text, Image>.\ninit(role: ButtonRole?, intent: some AppIntent, label: () -> Label)\nCreates a button with a specified role that performs an AppIntent.\nAvailable when Label conforms to View."
    },
    {
        "title": "init(intent:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/button/init(intent:label:)",
        "html": "Parameters\nintent\n\nThe AppIntent to execute.\n\nlabel\n\nA view that describes the purpose of the button\u2019s action.\n\nSee Also\nCreating a button to perform an App Intent\ninit(LocalizedStringKey, intent: some AppIntent)\nCreates a button that performs an AppIntent and generates its label from a localized string key.\nAvailable when Label is Text.\ninit<S>(S, intent: some AppIntent)\nCreates a button that performs an AppIntent and generates its label from a string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, image: ImageResource, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a localized string key and an image resource.\nAvailable when Label is Label<Text, Image>.\ninit(some StringProtocol, image: ImageResource, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that generates its label from a string and an image resource.\nAvailable when Label is Label<Text, Image>.\ninit(LocalizedStringKey, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a localized string key.\nAvailable when Label is Text.\ninit(some StringProtocol, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, systemImage: String, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a localized string key and a system image.\nAvailable when Label is Label<Text, Image>.\ninit(some StringProtocol, systemImage: String, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that generates its label from a string and a system image.\nAvailable when Label is Label<Text, Image>.\ninit(role: ButtonRole?, intent: some AppIntent, label: () -> Label)\nCreates a button with a specified role that performs an AppIntent.\nAvailable when Label conforms to View."
    },
    {
        "title": "init(_:image:role:intent:)",
        "url": "https://developer.apple.com/documentation/swiftui/button/init(_:image:role:intent:)-8draj",
        "html": "Parameters\ntitle\n\nA string that describes the purpose of the button\u2019s intent.\n\nimage\n\nThe image resource to lookup.\n\nrole\n\nAn optional semantic role describing the button. A value of nil means that the button doesn\u2019t have an assigned role.\n\nintent\n\nThe AppIntent to execute.\n\nDiscussion\n\nThis initializer creates a Label view on your behalf, and treats the title similar to init(_:). See Text for more information about localizing strings.\n\nSee Also\nCreating a button to perform an App Intent\ninit<I>(intent: I, label: () -> Label)\nCreates a button that performs an AppIntent.\nAvailable when Label conforms to View.\ninit(LocalizedStringKey, intent: some AppIntent)\nCreates a button that performs an AppIntent and generates its label from a localized string key.\nAvailable when Label is Text.\ninit<S>(S, intent: some AppIntent)\nCreates a button that performs an AppIntent and generates its label from a string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, image: ImageResource, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a localized string key and an image resource.\nAvailable when Label is Label<Text, Image>.\ninit(LocalizedStringKey, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a localized string key.\nAvailable when Label is Text.\ninit(some StringProtocol, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, systemImage: String, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a localized string key and a system image.\nAvailable when Label is Label<Text, Image>.\ninit(some StringProtocol, systemImage: String, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that generates its label from a string and a system image.\nAvailable when Label is Label<Text, Image>.\ninit(role: ButtonRole?, intent: some AppIntent, label: () -> Label)\nCreates a button with a specified role that performs an AppIntent.\nAvailable when Label conforms to View."
    },
    {
        "title": "wrappedValue",
        "url": "https://developer.apple.com/documentation/swiftui/focusedobject/wrappedvalue",
        "html": "Discussion\n\nThis property provides primary access to the value\u2019s data. However, you don\u2019t access wrappedValue directly. Instead, you use the property variable created with the FocusedObject attribute.\n\nWhen a mutable value changes, the new value is immediately available. However, a view displaying the value is updated asynchronously and may not show the new value immediately.\n\nSee Also\nGetting the value\nvar projectedValue: FocusedObject<ObjectType>.Wrapper?\nA projection of the focused object that creates bindings to its properties using dynamic member lookup.\nstruct Wrapper\nA wrapper around the underlying focused object that can create bindings to its properties using dynamic member lookup."
    },
    {
        "title": "init(content:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/labeledcontent/init(content:label:)",
        "html": "Parameters\ncontent\n\nThe view that conveys the value of the resulting labeled element.\n\nlabel\n\nThe label that describes the purpose of the result.\n\nSee Also\nCreating labeled content\ninit(LocalizedStringKey, content: () -> Content)\nCreates a labeled view that generates its label from a localized string key.\nAvailable when Label is Text and Content conforms to View.\ninit<S>(S, content: () -> Content)\nCreates a labeled view that generates its label from a string.\nAvailable when Label is Text and Content conforms to View."
    },
    {
        "title": "wrappedValue",
        "url": "https://developer.apple.com/documentation/swiftui/gesturestate/wrappedvalue",
        "html": "See Also\nGetting the state\nvar projectedValue: GestureState<Value>\nA binding to the gesture state property."
    },
    {
        "title": "init(_:role:intent:)",
        "url": "https://developer.apple.com/documentation/swiftui/button/init(_:role:intent:)-58k2d",
        "html": "Parameters\ntitleKey\n\nThe key for the button\u2019s localized title, that describes the purpose of the button\u2019s intent.\n\nrole\n\nAn optional semantic role describing the button. A value of nil means that the button doesn\u2019t have an assigned role.\n\nintent\n\nThe AppIntent to execute.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating a button to perform an App Intent\ninit<I>(intent: I, label: () -> Label)\nCreates a button that performs an AppIntent.\nAvailable when Label conforms to View.\ninit(LocalizedStringKey, intent: some AppIntent)\nCreates a button that performs an AppIntent and generates its label from a localized string key.\nAvailable when Label is Text.\ninit<S>(S, intent: some AppIntent)\nCreates a button that performs an AppIntent and generates its label from a string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, image: ImageResource, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a localized string key and an image resource.\nAvailable when Label is Label<Text, Image>.\ninit(some StringProtocol, image: ImageResource, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that generates its label from a string and an image resource.\nAvailable when Label is Label<Text, Image>.\ninit(some StringProtocol, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, systemImage: String, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that performs an AppIntent and generates its label from a localized string key and a system image.\nAvailable when Label is Label<Text, Image>.\ninit(some StringProtocol, systemImage: String, role: ButtonRole?, intent: some AppIntent)\nCreates a button with a specified role that generates its label from a string and a system image.\nAvailable when Label is Label<Text, Image>.\ninit(role: ButtonRole?, intent: some AppIntent, label: () -> Label)\nCreates a button with a specified role that performs an AppIntent.\nAvailable when Label conforms to View."
    },
    {
        "title": "subscript(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/layoutsubviews/subscript(_:)-56yi8",
        "html": "See Also\nAccessing subviews\nsubscript(Int) -> LayoutSubviews.Element\nGets the subview proxy at a specified index.\nsubscript(Range<Int>) -> LayoutSubviews\nGets the subview proxies in the specified range.\nvar startIndex: Int\nThe index of the first subview.\nvar endIndex: Int\nAn index that\u2019s one higher than the last subview.\ntypealias Element\nA type that contains a proxy value.\ntypealias Index\nA type that you can use to index proxy values.\ntypealias SubSequence\nA type that contains a subsequence of proxy values."
    },
    {
        "title": "init(content:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/controlgroup/init(content:label:)",
        "html": "Parameters\ncontent\n\nThe content to display.\n\nlabel\n\nA view that describes the purpose of the group.\n\nSee Also\nCreating a control group\ninit(content: () -> Content)\nCreates a new ControlGroup with the specified children\ninit<C, S>(S, content: () -> C)\nCreates a new control group with the specified content that generates its label from a string.\nAvailable when Content conforms to View.\ninit<C>(LocalizedStringKey, content: () -> C)\nCreates a new control group with the specified content that generates its label from a localized string key.\nAvailable when Content conforms to View."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/angle/init(_:)",
        "html": "See Also\nCreating an angle\ninit()\ninit(degrees: Double)\ninit(radians: Double)"
    },
    {
        "title": "scrollIndicators",
        "url": "https://developer.apple.com/documentation/swiftui/contentmarginplacement/scrollindicators",
        "html": "Discussion\n\nScrollable views like ScrollView will use this placement to inset their scroll indicators, but not their content.\n\nSee Also\nGetting the placement\nstatic var automatic: ContentMarginPlacement\nThe automatic placement.\nstatic var scrollContent: ContentMarginPlacement\nThe scroll content placement."
    },
    {
        "title": "init(_:value:)",
        "url": "https://developer.apple.com/documentation/swiftui/labeledcontent/init(_:value:)-4wicl",
        "html": "Parameters\ntitleKey\n\nThe key for the view\u2019s localized title, that describes the purpose of the view.\n\nvalue\n\nThe value being labeled.\n\nDiscussion\n\nThis initializer creates a Text label on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nForm {\n    LabeledContent(\"Name\", value: person.name)\n}\n\n\nIn some contexts, this text will be selectable by default.\n\nSee Also\nCreating informational views\ninit<S1, S2>(S1, value: S2)\nCreates a labeled informational view.\nAvailable when Label is Text and Content is Text."
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/labeledcontent/init(_:content:)-68t8g",
        "html": "Parameters\ntitleKey\n\nThe key for the view\u2019s localized title, that describes the purpose of the view.\n\ncontent\n\nThe value content being labeled.\n\nDiscussion\n\nThis initializer creates a Text label on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nSee Also\nCreating labeled content\ninit<S>(S, content: () -> Content)\nCreates a labeled view that generates its label from a string.\nAvailable when Label is Text and Content conforms to View.\ninit(content: () -> Content, label: () -> Label)\nCreates a standard labeled element, with a view that conveys the value of the element and a label.\nAvailable when Label conforms to View and Content conforms to View."
    },
    {
        "title": "FocusedObject.Wrapper",
        "url": "https://developer.apple.com/documentation/swiftui/focusedobject/wrapper",
        "html": "Topics\nAccessing members\nsubscript<T>(dynamicMember _: ReferenceWritableKeyPath<ObjectType, T>) -> Binding<T>\nReturns a binding to the value of a given key path.\nSee Also\nGetting the value\nvar projectedValue: FocusedObject<ObjectType>.Wrapper?\nA projection of the focused object that creates bindings to its properties using dynamic member lookup.\nvar wrappedValue: ObjectType?\nThe underlying value referenced by the focused object."
    },
    {
        "title": "Edge.leading",
        "url": "https://developer.apple.com/documentation/swiftui/edge/leading",
        "html": "See Also\nGetting the edges\ncase top\ncase bottom\ncase trailing"
    },
    {
        "title": "targetedToAnyEntity()",
        "url": "https://developer.apple.com/documentation/swiftui/gesture/targetedtoanyentity()",
        "html": "Return Value\n\nA RealityCoordinateSpaceConvertiblevalue containing the original gesture value along with the targeted entity.\n\nSee Also\nUsing a gesture with a RealityKit entity\nfunc targetedToEntity(Entity) -> some Gesture<EntityTargetValue<Self.Value>>\nRequire this gesture to target entity or a descendant of entity. This is equivalent to targetedToEntity(.descendingFrom(entity)).\nBeta\nfunc targetedToEntity(where: QueryPredicate<Entity>) -> some Gesture<EntityTargetValue<Self.Value>>\nRequire this gesture to target an entity that can be found in the results of the specified QueryPredicate\nBeta"
    },
    {
        "title": "targetedToEntity(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/gesture/targetedtoentity(_:)",
        "html": "Parameters\nentity\n\nThe entity the gesture should target.\n\nReturn Value\n\nA RealityCoordinateSpaceConverting value containing the original gesture value along with the targeted entity.\n\nSee Also\nUsing a gesture with a RealityKit entity\nfunc targetedToAnyEntity() -> some Gesture<EntityTargetValue<Self.Value>>\nRequire this gesture to target an entity.\nBeta\nfunc targetedToEntity(where: QueryPredicate<Entity>) -> some Gesture<EntityTargetValue<Self.Value>>\nRequire this gesture to target an entity that can be found in the results of the specified QueryPredicate\nBeta"
    },
    {
        "title": "targetedToEntity(where:)",
        "url": "https://developer.apple.com/documentation/swiftui/gesture/targetedtoentity(where:)",
        "html": "Parameters\nquery\n\na QueryPredicate<Entity> to filter which entity the gesture should target\n\nReturn Value\n\nA RealityCoordinateSpaceConverting value containing the original gesture value along with the targeted entity.\n\nSee Also\nUsing a gesture with a RealityKit entity\nfunc targetedToAnyEntity() -> some Gesture<EntityTargetValue<Self.Value>>\nRequire this gesture to target an entity.\nBeta\nfunc targetedToEntity(Entity) -> some Gesture<EntityTargetValue<Self.Value>>\nRequire this gesture to target entity or a descendant of entity. This is equivalent to targetedToEntity(.descendingFrom(entity)).\nBeta"
    },
    {
        "title": "init(minimumScaleDelta:)",
        "url": "https://developer.apple.com/documentation/swiftui/magnificationgesture/init(minimumscaledelta:)",
        "html": "Deprecated\n\nUse MagnifyGesture instead.\n\nSee Also\nCreating the gesture\nvar minimumScaleDelta: CGFloat\nThe minimum required delta before the gesture starts.\nDeprecated"
    },
    {
        "title": "userInitiated",
        "url": "https://developer.apple.com/documentation/swiftui/defaultfocusevaluationpriority/userinitiated",
        "html": "See Also\nGetting the priorities\nstatic let automatic: DefaultFocusEvaluationPriority\nUse the default focus preference when focus moves into the affected branch automatically, but ignore it when the movement is driven by a user-initiated navigation command."
    },
    {
        "title": "center",
        "url": "https://developer.apple.com/documentation/swiftui/verticalalignment/center",
        "html": "Discussion\n\nUse this guide to align the centers of views:\n\nThe following code generates the image above using an HStack:\n\nstruct VerticalAlignmentCenter: View {\n    var body: some View {\n        HStack(alignment: .center, spacing: 0) {\n            Color.red.frame(height: 1)\n            Text(\"Center\").font(.title).border(.gray)\n            Color.red.frame(height: 1)\n        }\n    }\n}\n\nSee Also\nGetting guides\nstatic let top: VerticalAlignment\nA guide that marks the top edge of the view.\nstatic let bottom: VerticalAlignment\nA guide that marks the bottom edge of the view.\nstatic let firstTextBaseline: VerticalAlignment\nA guide that marks the top-most text baseline in a view.\nstatic let lastTextBaseline: VerticalAlignment\nA guide that marks the bottom-most text baseline in a view."
    },
    {
        "title": "combineExplicit(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/verticalalignment/combineexplicit(_:)",
        "html": "Discussion\n\nFor most alignment types, this method returns the mean of all non-nil values. However, some types use other rules. For example, firstTextBaseline returns the minimum value, while lastTextBaseline returns the maximum value.\n\nSee Also\nCreating a custom alignment\ninit(AlignmentID.Type)\nCreates a custom vertical alignment of the specified type."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/verticalalignment/init(_:)",
        "html": "Parameters\nid\n\nThe type of an identifier that uniquely identifies a vertical alignment.\n\nDiscussion\n\nUse this initializer to create a custom vertical alignment. Define an AlignmentID type, and then use that type to create a new static property on VerticalAlignment:\n\nprivate struct FirstThirdAlignment: AlignmentID {\n    static func defaultValue(in context: ViewDimensions) -> CGFloat {\n        context.height / 3\n    }\n}\n\n\nextension VerticalAlignment {\n    static let firstThird = VerticalAlignment(FirstThirdAlignment.self)\n}\n\n\nEvery vertical alignment instance that you create needs a unique identifier. For more information, see AlignmentID.\n\nSee Also\nCreating a custom alignment\nfunc combineExplicit<S>(S) -> CGFloat?\nMerges a sequence of explicit alignment values produced by this instance."
    },
    {
        "title": "topLeading",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint/topleading",
        "html": "Discussion\n\nThis point occupies the position where the horizontal and vertical alignment guides intersect for topLeading alignment. The leading edge appears on the left in a left-to-right language environment and on the right in a right-to-left environment.\n\nSee Also\nGetting top points\nstatic let top: UnitPoint\nA point that\u2019s centered horizontally on the top edge of a view.\nstatic let topTrailing: UnitPoint\nA point that\u2019s in the top, trailing corner of a view."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/horizontalalignment/init(_:)",
        "html": "Parameters\nid\n\nThe type of an identifier that uniquely identifies a horizontal alignment.\n\nDiscussion\n\nUse this initializer to create a custom horizontal alignment. Define an AlignmentID type, and then use that type to create a new static property on HorizontalAlignment:\n\nprivate struct OneQuarterAlignment: AlignmentID {\n    static func defaultValue(in context: ViewDimensions) -> CGFloat {\n        context.width / 4\n    }\n}\n\n\nextension HorizontalAlignment {\n    static let oneQuarter = HorizontalAlignment(OneQuarterAlignment.self)\n}\n\n\nEvery horizontal alignment instance that you create needs a unique identifier. For more information, see AlignmentID.\n\nSee Also\nCreating a custom alignment\nfunc combineExplicit<S>(S) -> CGFloat?\nMerges a sequence of explicit alignment values produced by this instance."
    },
    {
        "title": "lastTextBaseline",
        "url": "https://developer.apple.com/documentation/swiftui/verticalalignment/lasttextbaseline",
        "html": "Discussion\n\nUse this guide to align with the baseline of the bottom-most text in a view. The guide aligns with the bottom of a view that contains no text.\n\nThe following code generates the image above using an HStack:\n\nstruct VerticalAlignmentLastTextBaseline: View {\n    var body: some View {\n        HStack(alignment: .lastTextBaseline, spacing: 0) {\n            Color.red.frame(height: 1)\n            Text(\"Last Text Baseline\").font(.title).border(.gray)\n            Color.red.frame(height: 1)\n        }\n    }\n}\n\nSee Also\nGetting guides\nstatic let top: VerticalAlignment\nA guide that marks the top edge of the view.\nstatic let center: VerticalAlignment\nA guide that marks the vertical center of the view.\nstatic let bottom: VerticalAlignment\nA guide that marks the bottom edge of the view.\nstatic let firstTextBaseline: VerticalAlignment\nA guide that marks the top-most text baseline in a view."
    },
    {
        "title": "listRowSeparatorLeading",
        "url": "https://developer.apple.com/documentation/swiftui/horizontalalignment/listrowseparatorleading",
        "html": "Discussion\n\nUse this guide to align the leading end of the bottom List row separator with any other horizontal guide of a view that is part of the cell content.\n\nThe following example shows the row separator aligned with the leading edge of the Text containing the name of food:\n\nList {\n    ForEach(favoriteFoods) { food in\n        HStack {\n            Text(food.emoji)\n                .font(.system(size: 40))\n            Text(food.name)\n                .alignmentGuide(.listRowSeparatorLeading) {\n                    $0[.leading]\n                }\n        }\n    }\n}\n\n\nTo change the visibility or tint of the row separator use respectively listRowSeparator(_:edges:) and listRowSeparatorTint(_:edges:).\n\nSee Also\nGetting guides\nstatic let leading: HorizontalAlignment\nA guide that marks the leading edge of the view.\nstatic let center: HorizontalAlignment\nA guide that marks the horizontal center of the view.\nstatic let trailing: HorizontalAlignment\nA guide that marks the trailing edge of the view.\nstatic let listRowSeparatorTrailing: HorizontalAlignment\nA guide marking the trailing edge of a List row separator."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/layoutproperties/init()",
        "html": "Discussion\n\nUse a layout properties instance to provide information about a type that conforms to the Layout protocol. For example, you can create a layout properties instance in your layout\u2019s implementation of the layoutProperties method, and use it to indicate that the layout has a Axis.vertical orientation:\n\nextension BasicVStack {\n    static var layoutProperties: LayoutProperties {\n        var properties = LayoutProperties()\n        properties.stackOrientation = .vertical\n        return properties\n    }\n}\n"
    },
    {
        "title": "init(minimumDuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/longpressgesture/init(minimumduration:)",
        "html": "Parameters\nminimumDuration\n\nThe minimum duration of the long press that must elapse before the gesture succeeds.\n\nSee Also\nCreating a long press gesture\ninit(minimumDuration: Double, maximumDistance: CGFloat)\nCreates a long-press gesture with a minimum duration and a maximum distance that the interaction can move before the gesture fails.\nvar minimumDuration: Double\nThe minimum duration of the long press that must elapse before the gesture succeeds.\nvar maximumDistance: CGFloat\nThe maximum distance that the long press can move before the gesture fails."
    },
    {
        "title": "listRowSeparatorTrailing",
        "url": "https://developer.apple.com/documentation/swiftui/horizontalalignment/listrowseparatortrailing",
        "html": "Discussion\n\nUse this guide to align the trailing end of the bottom List row separator with any other horizontal guide of a view that is part of the cell content.\n\nTo change the visibility or tint of the row separator use respectively listRowSeparator(_:edges:) and listRowSeparatorTint(_:edges:).\n\nSee Also\nGetting guides\nstatic let leading: HorizontalAlignment\nA guide that marks the leading edge of the view.\nstatic let center: HorizontalAlignment\nA guide that marks the horizontal center of the view.\nstatic let trailing: HorizontalAlignment\nA guide that marks the trailing edge of the view.\nstatic let listRowSeparatorLeading: HorizontalAlignment\nA guide marking the leading edge of a List row separator."
    },
    {
        "title": "bottomLeading",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint/bottomleading",
        "html": "Discussion\n\nThis point occupies the position where the horizontal and vertical alignment guides intersect for bottomLeading alignment. The leading edge appears on the left in a left-to-right language environment and on the right in a right-to-left environment.\n\nSee Also\nGetting bottom points\nstatic let bottom: UnitPoint\nA point that\u2019s centered horizontally on the bottom edge of a view.\nstatic let bottomTrailing: UnitPoint\nA point that\u2019s in the bottom, trailing corner of a view."
    },
    {
        "title": "layoutProperties",
        "url": "https://developer.apple.com/documentation/swiftui/layout/layoutproperties-5rb5b",
        "html": "Required Default implementation provided.\n\nDiscussion\n\nImplement this property in a type that conforms to the Layout protocol to characterize your custom layout container. For example, you can indicate that your layout has a vertical stackOrientation:\n\nextension BasicVStack {\n    static var layoutProperties: LayoutProperties {\n        var properties = LayoutProperties()\n        properties.stackOrientation = .vertical\n        return properties\n    }\n}\n\n\nIf you don\u2019t implement this property in your custom layout, the protocol provides a default implementation, namely layoutProperties, that returns a LayoutProperties instance with default values.\n\nDefault Implementations\nLayout Implementations\nstatic var layoutProperties: LayoutProperties\nThe default property values for a layout.\nSee Also\nReporting layout container characteristics\nfunc explicitAlignment(of: HorizontalAlignment, in: CGRect, proposal: ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CGFloat?\nReturns the position of the specified horizontal alignment guide along the x axis.\n\nRequired Default implementations provided.\n\nfunc explicitAlignment(of: VerticalAlignment, in: CGRect, proposal: ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CGFloat?\nReturns the position of the specified vertical alignment guide along the y axis.\n\nRequired Default implementations provided.\n\nfunc spacing(subviews: Self.Subviews, cache: inout Self.Cache) -> ViewSpacing\nReturns the preferred spacing values of the composite view.\n\nRequired Default implementation provided."
    },
    {
        "title": "init(x:y:)",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint/init(x:y:)",
        "html": "Parameters\nx\n\nThe normalized distance from the origin to the point in the horizontal direction.\n\ny\n\nThe normalized distance from the origin to the point in the vertical direction.\n\nDiscussion\n\nValues outside the range [0, 1] project to points outside of a view.\n\nSee Also\nCreating a point\ninit()\nCreates a unit point at the origin."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint/init()",
        "html": "Discussion\n\nA view\u2019s origin appears in the top-left corner in a left-to-right language environment, with positive x toward the right. It appears in the top-right corner in a right-to-left language, with positive x toward the left. Positive y is always toward the bottom of the view.\n\nSee Also\nCreating a point\ninit(x: CGFloat, y: CGFloat)\nCreates a unit point with the specified horizontal and vertical offsets."
    },
    {
        "title": "center",
        "url": "https://developer.apple.com/documentation/swiftui/horizontalalignment/center",
        "html": "Discussion\n\nUse this guide to align the centers of views:\n\nThe following code generates the image above using a VStack:\n\nstruct HorizontalAlignmentCenter: View {\n    var body: some View {\n        VStack(alignment: .center, spacing: 0) {\n            Color.red.frame(width: 1)\n            Text(\"Center\").font(.title).border(.gray)\n            Color.red.frame(width: 1)\n        }\n    }\n}\n\nSee Also\nGetting guides\nstatic let leading: HorizontalAlignment\nA guide that marks the leading edge of the view.\nstatic let trailing: HorizontalAlignment\nA guide that marks the trailing edge of the view.\nstatic let listRowSeparatorLeading: HorizontalAlignment\nA guide marking the leading edge of a List row separator.\nstatic let listRowSeparatorTrailing: HorizontalAlignment\nA guide marking the trailing edge of a List row separator."
    },
    {
        "title": "zero",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint/zero",
        "html": "Discussion\n\nA view\u2019s origin appears in the top-left corner in a left-to-right language environment, with positive x toward the right. It appears in the top-right corner in a right-to-left language, with positive x toward the left. Positive y is always toward the bottom of the view."
    },
    {
        "title": "union(_:edges:)",
        "url": "https://developer.apple.com/documentation/swiftui/viewspacing/union(_:edges:)",
        "html": "Parameters\nother\n\nAnother spacing preferences instance to merge with this one.\n\nedges\n\nThe edges to merge. Edges that you don\u2019t specify are unchanged after the method completes.\n\nReturn Value\n\nA new view spacing preferences instance with the merged values.\n\nDiscussion\n\nThis method behaves like formUnion(_:edges:), except that it creates a copy of the original spacing preferences instance before merging, leaving the original instance unmodified.\n\nSee Also\nMerging spacing instances\nfunc formUnion(ViewSpacing, edges: Edge.Set)\nMerges the spacing preferences of another spacing instance with this instance for a specified set of edges."
    },
    {
        "title": "top",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint/top",
        "html": "Discussion\n\nThis point occupies the position where the horizontal and vertical alignment guides intersect for top alignment.\n\nSee Also\nGetting top points\nstatic let topLeading: UnitPoint\nA point that\u2019s in the top, leading corner of a view.\nstatic let topTrailing: UnitPoint\nA point that\u2019s in the top, trailing corner of a view."
    },
    {
        "title": "leading",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint/leading",
        "html": "Discussion\n\nThis point occupies the position where the horizontal and vertical alignment guides intersect for leading alignment. The leading edge appears on the left in a left-to-right language environment and on the right in a right-to-left environment.\n\nSee Also\nGetting middle points\nstatic let center: UnitPoint\nA point that\u2019s centered in a view.\nstatic let trailing: UnitPoint\nA point that\u2019s centered vertically on the trailing edge of a view."
    },
    {
        "title": "callAsFunction(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/layout/callasfunction(_:)",
        "html": "Parameters\ncontent\n\nA ViewBuilder that contains the views to lay out.\n\nReturn Value\n\nA composite view that combines all the input views.\n\nDiscussion\n\nDon\u2019t call this method directly. SwiftUI calls it when you instantiate a custom layout that conforms to the Layout protocol:\n\nBasicVStack { // Implicitly calls callAsFunction.\n    Text(\"A View\")\n    Text(\"Another View\")\n}\n\n\nFor information about how Swift uses the callAsFunction() method to simplify call site syntax, see Methods with Special Names in The Swift Programming Language."
    },
    {
        "title": "trailing",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint/trailing",
        "html": "Discussion\n\nThis point occupies the position where the horizontal and vertical alignment guides intersect for trailing alignment. The trailing edge appears on the right in a left-to-right language environment and on the left in a right-to-left environment.\n\nSee Also\nGetting middle points\nstatic let leading: UnitPoint\nA point that\u2019s centered vertically on the leading edge of a view.\nstatic let center: UnitPoint\nA point that\u2019s centered in a view."
    },
    {
        "title": "explicitAlignment(of:in:proposal:subviews:cache:)",
        "url": "https://developer.apple.com/documentation/swiftui/layout/explicitalignment(of:in:proposal:subviews:cache:)-8ofeu",
        "html": "Required Default implementations provided.\n\nParameters\nguide\n\nThe HorizontalAlignment guide that the method calculates the position of.\n\nbounds\n\nThe region that the container view\u2019s parent allocates to the container view, specified in the parent\u2019s coordinate space.\n\nproposal\n\nA proposed size for the container.\n\nsubviews\n\nA collection of proxy instances that represent the views arranged by the container. You can use the proxies in the collection to get information about the subviews as you determine where to place the guide.\n\ncache\n\nOptional storage for calculated data that you can share among the methods of your custom layout container. See makeCache(subviews:) for details.\n\nReturn Value\n\nThe guide\u2019s position relative to the bounds. Return nil to indicate that the guide doesn\u2019t have an explicit value.\n\nDiscussion\n\nImplement this method to return a value for the specified alignment guide of a custom layout container. The value you return affects the placement of the container as a whole, but it doesn\u2019t affect how the container arranges subviews relative to one another.\n\nYou can use this method to put an alignment guide in a nonstandard position. For example, you can indent the container\u2019s leading edge alignment guide by 10 points:\n\nextension BasicVStack {\n    func explicitAlignment(\n        of guide: HorizontalAlignment,\n        in bounds: CGRect,\n        proposal: ProposedViewSize,\n        subviews: Subviews,\n        cache: inout ()\n    ) -> CGFloat? {\n        if guide == .leading {\n            return bounds.minX + 10\n        }\n        return nil\n    }\n}\n\n\nThe above example returns nil for other guides to indicate that they don\u2019t have an explicit value. A guide without an explicit value behaves as it would for any other view. If you don\u2019t implement the method, the protocol\u2019s default implementation merges the subviews\u2019 guides.\n\nDefault Implementations\nLayout Implementations\nfunc explicitAlignment(of: VerticalAlignment, in: CGRect, proposal: ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CGFloat?\nReturns the result of merging the vertical alignment guides of all subviews.\nfunc explicitAlignment(of: HorizontalAlignment, in: CGRect, proposal: ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CGFloat?\nReturns the result of merging the horizontal alignment guides of all subviews.\nSee Also\nReporting layout container characteristics\nfunc explicitAlignment(of: VerticalAlignment, in: CGRect, proposal: ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CGFloat?\nReturns the position of the specified vertical alignment guide along the y axis.\n\nRequired Default implementations provided.\n\nfunc spacing(subviews: Self.Subviews, cache: inout Self.Cache) -> ViewSpacing\nReturns the preferred spacing values of the composite view.\n\nRequired Default implementation provided.\n\nstatic var layoutProperties: LayoutProperties\nProperties of a layout container.\n\nRequired Default implementation provided."
    },
    {
        "title": "init(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/groupbox/init(content:)",
        "html": "Parameters\ncontent\n\nA ViewBuilder that produces the content for the group box.\n\nSee Also\nCreating a group box\ninit(content: () -> Content, label: () -> Label)\nCreates a group box with the provided label and view content.\ninit(LocalizedStringKey, content: () -> Content)\nCreates a group box with the provided view content and title.\nAvailable when Label is Text and Content conforms to View.\ninit<S>(S, content: () -> Content)\nCreates a group box with the provided view content.\nAvailable when Label is Text and Content conforms to View."
    },
    {
        "title": "resetOrder()",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumncustomization/resetorder()",
        "html": "Discussion\n\nTables that are bound to this state will order their columns as described by their column builder.\n\nSee Also\nManaging the customization\nsubscript(visibility _: String) -> Visibility\nThe visibility of the column identified by its identifier."
    },
    {
        "title": "Value",
        "url": "https://developer.apple.com/documentation/swiftui/layoutvaluekey/value",
        "html": "Required\n\nDiscussion\n\nSwift typically infers this type from your implementation of the defaultValue property, so you don\u2019t have to define it explicitly.\n\nSee Also\nProviding a default value\nstatic var defaultValue: Self.Value\nThe default value of the key.\n\nRequired"
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/anylayout/init(_:)",
        "html": "Discussion\n\nYou can switch between type-erased layouts without losing the state of the subviews."
    },
    {
        "title": "numeric",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnalignment/numeric",
        "html": "Discussion\n\nUse this alignment when a table column is primarily displaying numeric content, so that the values are easy to visually scan and compare.\n\nThis uses the current locale\u2019s numbering system to determine the alignment:\n\nFor left to right numbering systems, this is equivalent to right.\n\nFor right to left numbering systems, this is equivalent to left.\n\nSee Also\nGetting the alignment\nstatic var automatic: TableColumnAlignment\nThe default column alignment.\nstatic var leading: TableColumnAlignment\nLeading column alignment.\nstatic var center: TableColumnAlignment\nCenter column alignment.\nstatic var trailing: TableColumnAlignment\nTrailing column alignment.\nstatic func numeric(Locale.NumberingSystem) -> TableColumnAlignment\nColumn alignment appropriate for numeric content."
    },
    {
        "title": "numeric(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnalignment/numeric(_:)",
        "html": "Discussion\n\nUse this alignment when a table column is primarily displaying numeric content, so that the values are easy to visually scan and compare.\n\nThis uses the provided numbering system to determine the alignment:\n\nFor left to right numbering systems, this is equivalent to right.\n\nFor right to left numbering systems, this is equivalent to left.\n\nSee Also\nGetting the alignment\nstatic var automatic: TableColumnAlignment\nThe default column alignment.\nstatic var leading: TableColumnAlignment\nLeading column alignment.\nstatic var center: TableColumnAlignment\nCenter column alignment.\nstatic var trailing: TableColumnAlignment\nTrailing column alignment.\nstatic var numeric: TableColumnAlignment\nColumn alignment appropriate for numeric content."
    },
    {
        "title": "top",
        "url": "https://developer.apple.com/documentation/swiftui/edgeinsets3d/top",
        "html": "See Also\nGetting edge insets\nvar bottom: CGFloat\nThe inset distance along the bottom face of a 3D volume.\nBeta\nvar leading: CGFloat\nThe inset distance along the leading face of a 3D volume.\nBeta\nvar trailing: CGFloat\nThe inset distance along the top trailing of a 3D volume.\nBeta\nvar front: CGFloat\nThe inset distance along the top front of a 3D volume.\nBeta\nvar back: CGFloat\nThe inset distance along the top back of a 3D volume.\nBeta"
    },
    {
        "title": "horizontal",
        "url": "https://developer.apple.com/documentation/swiftui/edge/set/horizontal",
        "html": "See Also\nGetting edge sets\nstatic let all: Edge.Set\nstatic let top: Edge.Set\nstatic let bottom: Edge.Set\nstatic let leading: Edge.Set\nstatic let trailing: Edge.Set\nstatic let vertical: Edge.Set"
    },
    {
        "title": "init(_:isExpanded:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/disclosuretablerow/init(_:isexpanded:content:)",
        "html": "Parameters\nvalue\n\nThe value of the disclosable table row.\n\nisExpanded\n\nA binding to a Boolean value that determines the group\u2019s expansion state (expanded or collapsed).\n\ncontent\n\nThe table row shown when the disclosure group expands."
    },
    {
        "title": "trailing",
        "url": "https://developer.apple.com/documentation/swiftui/edgeinsets3d/trailing",
        "html": "See Also\nGetting edge insets\nvar top: CGFloat\nThe inset distance along the top face of a 3D volume.\nBeta\nvar bottom: CGFloat\nThe inset distance along the bottom face of a 3D volume.\nBeta\nvar leading: CGFloat\nThe inset distance along the leading face of a 3D volume.\nBeta\nvar front: CGFloat\nThe inset distance along the top front of a 3D volume.\nBeta\nvar back: CGFloat\nThe inset distance along the top back of a 3D volume.\nBeta"
    },
    {
        "title": "Edge.trailing",
        "url": "https://developer.apple.com/documentation/swiftui/edge/trailing",
        "html": "See Also\nGetting the edges\ncase top\ncase bottom\ncase leading"
    },
    {
        "title": "init(horizontal:vertical:depth:)",
        "url": "https://developer.apple.com/documentation/swiftui/edgeinsets3d/init(horizontal:vertical:depth:)",
        "html": "Parameters\nhorizontal\n\nThe insets to apply along the horizontal axis.\n\nvertical\n\nThe insets to apply along the vertical axis.\n\ndepth\n\nThe insets to apply along the depth axis.\n\nSee Also\nCreating an edge inset\ninit(top: CGFloat, leading: CGFloat, bottom: CGFloat, trailing: CGFloat, front: CGFloat, back: CGFloat)\nCreates an EdgeInsets3D value with values provided for each face.\nBeta"
    },
    {
        "title": "back",
        "url": "https://developer.apple.com/documentation/swiftui/edgeinsets3d/back",
        "html": "See Also\nGetting edge insets\nvar top: CGFloat\nThe inset distance along the top face of a 3D volume.\nBeta\nvar bottom: CGFloat\nThe inset distance along the bottom face of a 3D volume.\nBeta\nvar leading: CGFloat\nThe inset distance along the leading face of a 3D volume.\nBeta\nvar trailing: CGFloat\nThe inset distance along the top trailing of a 3D volume.\nBeta\nvar front: CGFloat\nThe inset distance along the top front of a 3D volume.\nBeta"
    },
    {
        "title": "HorizontalEdge.Set",
        "url": "https://developer.apple.com/documentation/swiftui/horizontaledge/set",
        "html": "Topics\nGetting edge sets\nstatic let all: HorizontalEdge.Set\nA set containing the leading and trailing horizontal edges.\nstatic let leading: HorizontalEdge.Set\nA set containing only the leading horizontal edge.\nstatic let trailing: HorizontalEdge.Set\nA set containing only the trailing horizontal edge.\nCreating an edge set\ninit(HorizontalEdge)\nCreates a set of edges containing only the specified horizontal edge.\nRelationships\nConforms To\nEquatable\nExpressibleByArrayLiteral\nOptionSet\nRawRepresentable\nSendable\nSetAlgebra"
    },
    {
        "title": "init(top:leading:bottom:trailing:front:back:)",
        "url": "https://developer.apple.com/documentation/swiftui/edgeinsets3d/init(top:leading:bottom:trailing:front:back:)",
        "html": "See Also\nCreating an edge inset\ninit(horizontal: CGFloat, vertical: CGFloat, depth: CGFloat)\nCreates an EdgeInsets3D value with values provided for each axis.\nBeta"
    },
    {
        "title": "UserInterfaceSizeClass.regular",
        "url": "https://developer.apple.com/documentation/swiftui/userinterfacesizeclass/regular",
        "html": "See Also\nGetting size classes\ncase compact\nThe compact size class."
    },
    {
        "title": "subscript(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/layoutsubviews/subscript(_:)-73d8a",
        "html": "See Also\nAccessing subviews\nsubscript(Int) -> LayoutSubviews.Element\nGets the subview proxy at a specified index.\nsubscript<S>(S) -> LayoutSubviews\nGets the subview proxies with the specified indicies.\nvar startIndex: Int\nThe index of the first subview.\nvar endIndex: Int\nAn index that\u2019s one higher than the last subview.\ntypealias Element\nA type that contains a proxy value.\ntypealias Index\nA type that you can use to index proxy values.\ntypealias SubSequence\nA type that contains a subsequence of proxy values."
    },
    {
        "title": "Edge.bottom",
        "url": "https://developer.apple.com/documentation/swiftui/edge/bottom",
        "html": "See Also\nGetting the edges\ncase top\ncase leading\ncase trailing"
    },
    {
        "title": "subscript(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/layoutsubviews/subscript(_:)-1gzie",
        "html": "See Also\nAccessing subviews\nsubscript<S>(S) -> LayoutSubviews\nGets the subview proxies with the specified indicies.\nsubscript(Range<Int>) -> LayoutSubviews\nGets the subview proxies in the specified range.\nvar startIndex: Int\nThe index of the first subview.\nvar endIndex: Int\nAn index that\u2019s one higher than the last subview.\ntypealias Element\nA type that contains a proxy value.\ntypealias Index\nA type that you can use to index proxy values.\ntypealias SubSequence\nA type that contains a subsequence of proxy values."
    },
    {
        "title": "startIndex",
        "url": "https://developer.apple.com/documentation/swiftui/layoutsubviews/startindex",
        "html": "See Also\nAccessing subviews\nsubscript(Int) -> LayoutSubviews.Element\nGets the subview proxy at a specified index.\nsubscript<S>(S) -> LayoutSubviews\nGets the subview proxies with the specified indicies.\nsubscript(Range<Int>) -> LayoutSubviews\nGets the subview proxies in the specified range.\nvar endIndex: Int\nAn index that\u2019s one higher than the last subview.\ntypealias Element\nA type that contains a proxy value.\ntypealias Index\nA type that you can use to index proxy values.\ntypealias SubSequence\nA type that contains a subsequence of proxy values."
    },
    {
        "title": "endIndex",
        "url": "https://developer.apple.com/documentation/swiftui/layoutsubviews/endindex",
        "html": "See Also\nAccessing subviews\nsubscript(Int) -> LayoutSubviews.Element\nGets the subview proxy at a specified index.\nsubscript<S>(S) -> LayoutSubviews\nGets the subview proxies with the specified indicies.\nsubscript(Range<Int>) -> LayoutSubviews\nGets the subview proxies in the specified range.\nvar startIndex: Int\nThe index of the first subview.\ntypealias Element\nA type that contains a proxy value.\ntypealias Index\nA type that you can use to index proxy values.\ntypealias SubSequence\nA type that contains a subsequence of proxy values."
    },
    {
        "title": "LayoutSubviews.Element",
        "url": "https://developer.apple.com/documentation/swiftui/layoutsubviews/element",
        "html": "See Also\nAccessing subviews\nsubscript(Int) -> LayoutSubviews.Element\nGets the subview proxy at a specified index.\nsubscript<S>(S) -> LayoutSubviews\nGets the subview proxies with the specified indicies.\nsubscript(Range<Int>) -> LayoutSubviews\nGets the subview proxies in the specified range.\nvar startIndex: Int\nThe index of the first subview.\nvar endIndex: Int\nAn index that\u2019s one higher than the last subview.\ntypealias Index\nA type that you can use to index proxy values.\ntypealias SubSequence\nA type that contains a subsequence of proxy values."
    },
    {
        "title": "LayoutSubviews.Index",
        "url": "https://developer.apple.com/documentation/swiftui/layoutsubviews/index",
        "html": "See Also\nAccessing subviews\nsubscript(Int) -> LayoutSubviews.Element\nGets the subview proxy at a specified index.\nsubscript<S>(S) -> LayoutSubviews\nGets the subview proxies with the specified indicies.\nsubscript(Range<Int>) -> LayoutSubviews\nGets the subview proxies in the specified range.\nvar startIndex: Int\nThe index of the first subview.\nvar endIndex: Int\nAn index that\u2019s one higher than the last subview.\ntypealias Element\nA type that contains a proxy value.\ntypealias SubSequence\nA type that contains a subsequence of proxy values."
    },
    {
        "title": "LayoutSubviews.SubSequence",
        "url": "https://developer.apple.com/documentation/swiftui/layoutsubviews/subsequence",
        "html": "See Also\nAccessing subviews\nsubscript(Int) -> LayoutSubviews.Element\nGets the subview proxy at a specified index.\nsubscript<S>(S) -> LayoutSubviews\nGets the subview proxies with the specified indicies.\nsubscript(Range<Int>) -> LayoutSubviews\nGets the subview proxies in the specified range.\nvar startIndex: Int\nThe index of the first subview.\nvar endIndex: Int\nAn index that\u2019s one higher than the last subview.\ntypealias Element\nA type that contains a proxy value.\ntypealias Index\nA type that you can use to index proxy values."
    },
    {
        "title": "infinity",
        "url": "https://developer.apple.com/documentation/swiftui/proposedviewsize/infinity",
        "html": "Discussion\n\nBoth dimensions contain infinity in this size proposal. Subviews of a custom layout return their maximum size when you propose this value using the dimensions(in:) method. A custom layout should also return its maximum size from the sizeThatFits(proposal:subviews:cache:) method for this value.\n\nSee Also\nGetting standard proposals\nstatic let zero: ProposedViewSize\nA size proposal that contains zero in both dimensions.\nstatic let unspecified: ProposedViewSize\nThe proposed size with both dimensions left unspecified."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/proposedviewsize/init(_:)",
        "html": "Parameters\nsize\n\nA proposed size with dimensions measured in points.\n\nSee Also\nCreating a custom size proposal\ninit(width: CGFloat?, height: CGFloat?)\nCreates a new proposed size using the specified width and height."
    },
    {
        "title": "zero",
        "url": "https://developer.apple.com/documentation/swiftui/proposedviewsize/zero",
        "html": "Discussion\n\nSubviews of a custom layout return their minimum size when you propose this value using the dimensions(in:) method. A custom layout should also return its minimum size from the sizeThatFits(proposal:subviews:cache:) method for this value.\n\nSee Also\nGetting standard proposals\nstatic let infinity: ProposedViewSize\nA size proposal that contains infinity in both dimensions.\nstatic let unspecified: ProposedViewSize\nThe proposed size with both dimensions left unspecified."
    },
    {
        "title": "width",
        "url": "https://developer.apple.com/documentation/swiftui/proposedviewsize/width",
        "html": "Discussion\n\nA value of nil represents an unspecified width proposal, which a view interprets to mean that it should use its ideal width.\n\nSee Also\nGetting the proposal\u2019s dimensions\nvar height: CGFloat?\nThe proposed vertical size measured in points."
    },
    {
        "title": "degrees",
        "url": "https://developer.apple.com/documentation/swiftui/angle/degrees",
        "html": "See Also\nGetting the angle size\nvar radians: Double"
    },
    {
        "title": "init(width:height:)",
        "url": "https://developer.apple.com/documentation/swiftui/proposedviewsize/init(width:height:)",
        "html": "Parameters\nwidth\n\nA proposed width in points. Use a value of nil to indicate that the width is unspecified for this proposal.\n\nheight\n\nA proposed height in points. Use a value of nil to indicate that the height is unspecified for this proposal.\n\nSee Also\nCreating a custom size proposal\ninit(CGSize)\nCreates a new proposed size from a specified size."
    },
    {
        "title": "Edge3D.Set",
        "url": "https://developer.apple.com/documentation/swiftui/edge3d/set",
        "html": "Topics\nGetting edge sets\nstatic let all: Edge3D.Set\nstatic let top: Edge3D.Set\nstatic let bottom: Edge3D.Set\nstatic let leading: Edge3D.Set\nstatic let front: Edge3D.Set\nstatic let back: Edge3D.Set\nstatic let trailing: Edge3D.Set\nstatic let horizontal: Edge3D.Set\nstatic let vertical: Edge3D.Set\nstatic let depth: Edge3D.Set\nCreating an edge set\ninit(Edge)\ninit(Edge3D)\nCreates a set of edges containing only the specified edge.\nRelationships\nConforms To\nEquatable\nExpressibleByArrayLiteral\nOptionSet\nRawRepresentable\nSendable\nSetAlgebra"
    },
    {
        "title": "unspecified",
        "url": "https://developer.apple.com/documentation/swiftui/proposedviewsize/unspecified",
        "html": "Discussion\n\nBoth dimensions contain nil in this size proposal. Subviews of a custom layout return their ideal size when you propose this value using the dimensions(in:) method. A custom layout should also return its ideal size from the sizeThatFits(proposal:subviews:cache:) method for this value.\n\nSee Also\nGetting standard proposals\nstatic let zero: ProposedViewSize\nA size proposal that contains zero in both dimensions.\nstatic let infinity: ProposedViewSize\nA size proposal that contains infinity in both dimensions."
    },
    {
        "title": "ColorRenderingMode.linear",
        "url": "https://developer.apple.com/documentation/swiftui/colorrenderingmode/linear",
        "html": "Discussion\n\nColor component values outside the range [0, 1] produce undefined results. This color space isn\u2019t gamma corrected.\n\nSee Also\nGetting rendering modes\ncase extendedLinear\nThe extended linear sRGB working color space.\ncase nonLinear\nThe non-linear sRGB working color space."
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/controlgroup/init(_:content:)-2jixj",
        "html": "Parameters\ntitle\n\nA string that describes the contents of the group.\n\nlabel\n\nA view that describes the purpose of the group.\n\nSee Also\nCreating a control group\ninit(content: () -> Content)\nCreates a new ControlGroup with the specified children\ninit<C, L>(content: () -> C, label: () -> L)\nCreates a new control group with the specified content and a label.\nAvailable when Content conforms to View.\ninit<C>(LocalizedStringKey, content: () -> C)\nCreates a new control group with the specified content that generates its label from a localized string key.\nAvailable when Content conforms to View."
    },
    {
        "title": "radians",
        "url": "https://developer.apple.com/documentation/swiftui/angle/radians",
        "html": "See Also\nGetting the angle size\nvar degrees: Double"
    },
    {
        "title": "height",
        "url": "https://developer.apple.com/documentation/swiftui/proposedviewsize/height",
        "html": "Discussion\n\nA value of nil represents an unspecified height proposal, which a view interprets to mean that it should use its ideal height.\n\nSee Also\nGetting the proposal\u2019s dimensions\nvar width: CGFloat?\nThe proposed horizontal size measured in points."
    },
    {
        "title": "front",
        "url": "https://developer.apple.com/documentation/swiftui/depthalignment/front",
        "html": "See Also\nGetting guides\nstatic let back: DepthAlignment\nA guide marking the bottom edge of the view.\nBeta\nstatic let center: DepthAlignment\nA guide marking the vertical center of the view.\nBeta"
    },
    {
        "title": "ColorRenderingMode.extendedLinear",
        "url": "https://developer.apple.com/documentation/swiftui/colorrenderingmode/extendedlinear",
        "html": "Discussion\n\nColor component values outside the range [0, 1] are preserved. This color space isn\u2019t gamma corrected.\n\nSee Also\nGetting rendering modes\ncase linear\nThe linear sRGB working color space.\ncase nonLinear\nThe non-linear sRGB working color space."
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/labeledcontent/init(_:content:)-6g03w",
        "html": "Parameters\ntitle\n\nA string that describes the purpose of the view.\n\ncontent\n\nThe value content being labeled.\n\nDiscussion\n\nThis initializer creates a Text label on your behalf, and treats the title similar to init(_:). See Text for more information about localizing strings.\n\nSee Also\nCreating labeled content\ninit(LocalizedStringKey, content: () -> Content)\nCreates a labeled view that generates its label from a localized string key.\nAvailable when Label is Text and Content conforms to View.\ninit(content: () -> Content, label: () -> Label)\nCreates a standard labeled element, with a view that conveys the value of the element and a label.\nAvailable when Label conforms to View and Content conforms to View."
    },
    {
        "title": "init(_:value:format:)",
        "url": "https://developer.apple.com/documentation/swiftui/labeledcontent/init(_:value:format:)-4suhi",
        "html": "Parameters\ntitleKey\n\nThe key for the view\u2019s localized title, that describes the purpose of the view.\n\nvalue\n\nThe value being labeled.\n\nformat\n\nA format style of type F to convert the underlying value of type F.FormatInput to a string representation.\n\nDiscussion\n\nThis initializer creates a Text label on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nForm {\n    LabeledContent(\"Age\", value: person.age, format: .number)\n    LabeledContent(\"Height\", value: person.height,\n        format: .measurement(width: .abbreviated))\n}\n\nSee Also\nCreating formatted labeled content\ninit<S, F>(S, value: F.FormatInput, format: F)\nCreates a labeled informational view from a formatted value.\nAvailable when Label is Text and Content is Text."
    },
    {
        "title": "init(_:value:format:)",
        "url": "https://developer.apple.com/documentation/swiftui/labeledcontent/init(_:value:format:)-9xjga",
        "html": "Parameters\ntitle\n\nA string that describes the purpose of the view.\n\nvalue\n\nThe value being labeled.\n\nformat\n\nA format style of type F to convert the underlying value of type F.FormatInput to a string representation.\n\nDiscussion\n\nThis initializer creates a Text label on your behalf, and treats the title similar to init(_:). See Text for more information about localizing strings.\n\nForm {\n    Section(\"Downloads\") {\n        ForEach(download) { file in\n            LabeledContent(file.name, value: file.downloadSize,\n                format: .byteCount(style: .file))\n       }\n    }\n}\n\nSee Also\nCreating formatted labeled content\ninit<F>(LocalizedStringKey, value: F.FormatInput, format: F)\nCreates a labeled informational view from a formatted value.\nAvailable when Label is Text and Content is Text."
    },
    {
        "title": "init(_:value:)",
        "url": "https://developer.apple.com/documentation/swiftui/labeledcontent/init(_:value:)-4dkc2",
        "html": "Parameters\ntitle\n\nA string that describes the purpose of the view.\n\nvalue\n\nThe value being labeled.\n\nDiscussion\n\nThis initializer creates a Text label on your behalf, and treats the title similar to init(_:). See Text for more information about localizing strings.\n\nForm {\n    ForEach(person.pet) { pet in\n        LabeledContent(pet.species, value: pet.name)\n    }\n}\n\nSee Also\nCreating informational views\ninit<S>(LocalizedStringKey, value: S)\nCreates a labeled informational view.\nAvailable when Label is Text and Content is Text."
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/controlgroup/init(_:content:)-83ip",
        "html": "Parameters\ntitleKey\n\nThe key for the group\u2019s localized title, that describes the contents of the group.\n\nlabel\n\nA view that describes the purpose of the group.\n\nSee Also\nCreating a control group\ninit(content: () -> Content)\nCreates a new ControlGroup with the specified children\ninit<C, L>(content: () -> C, label: () -> L)\nCreates a new control group with the specified content and a label.\nAvailable when Content conforms to View.\ninit<C, S>(S, content: () -> C)\nCreates a new control group with the specified content that generates its label from a string.\nAvailable when Content conforms to View."
    },
    {
        "title": "init(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/controlgroup/init(content:)",
        "html": "Parameters\ncontent\n\nthe children to display\n\nSee Also\nCreating a control group\ninit<C, L>(content: () -> C, label: () -> L)\nCreates a new control group with the specified content and a label.\nAvailable when Content conforms to View.\ninit<C, S>(S, content: () -> C)\nCreates a new control group with the specified content that generates its label from a string.\nAvailable when Content conforms to View.\ninit<C>(LocalizedStringKey, content: () -> C)\nCreates a new control group with the specified content that generates its label from a localized string key.\nAvailable when Content conforms to View."
    },
    {
        "title": "init(_:image:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/controlgroup/init(_:image:content:)-2tthq",
        "html": "Parameters\ntitleKey\n\nThe key for the group\u2019s localized title, that describes the contents of the group.\n\nsystemImage\n\nThe name of the image resource to lookup.\n\nlabel\n\nA view that describes the purpose of the group.\n\nSee Also\nCreating a control group with an image\ninit<C, S>(S, image: ImageResource, content: () -> C)\nCreates a new control group with the specified content that generates its label from a string and image name.\nAvailable when Content conforms to View.\ninit<C>(LocalizedStringKey, systemImage: String, content: () -> C)\nCreates a new control group with the specified content that generates its label from a localized string key and image name.\nAvailable when Content conforms to View.\ninit<C, S>(S, systemImage: String, content: () -> C)\nCreates a new control group with the specified content that generates its label from a string and image name.\nAvailable when Content conforms to View."
    },
    {
        "title": "init(_:image:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/controlgroup/init(_:image:content:)-8jmtv",
        "html": "Parameters\ntitle\n\nA string that describes the contents of the group.\n\nsystemImage\n\nThe name of the image resource to lookup.\n\nlabel\n\nA view that describes the purpose of the group.\n\nSee Also\nCreating a control group with an image\ninit<C>(LocalizedStringKey, image: ImageResource, content: () -> C)\nCreates a new control group with the specified content that generates its label from a localized string key and image resource.\nAvailable when Content conforms to View.\ninit<C>(LocalizedStringKey, systemImage: String, content: () -> C)\nCreates a new control group with the specified content that generates its label from a localized string key and image name.\nAvailable when Content conforms to View.\ninit<C, S>(S, systemImage: String, content: () -> C)\nCreates a new control group with the specified content that generates its label from a string and image name.\nAvailable when Content conforms to View."
    },
    {
        "title": "init(_:systemImage:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/controlgroup/init(_:systemimage:content:)-7xx4a",
        "html": "Parameters\ntitle\n\nA string that describes the contents of the group.\n\nsystemImage\n\nThe name of the image resource to lookup.\n\nlabel\n\nA view that describes the purpose of the group.\n\nSee Also\nCreating a control group with an image\ninit<C>(LocalizedStringKey, image: ImageResource, content: () -> C)\nCreates a new control group with the specified content that generates its label from a localized string key and image resource.\nAvailable when Content conforms to View.\ninit<C, S>(S, image: ImageResource, content: () -> C)\nCreates a new control group with the specified content that generates its label from a string and image name.\nAvailable when Content conforms to View.\ninit<C>(LocalizedStringKey, systemImage: String, content: () -> C)\nCreates a new control group with the specified content that generates its label from a localized string key and image name.\nAvailable when Content conforms to View."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/labeledcontent/init(_:)",
        "html": "Parameters\nconfiguration\n\nThe properties of the labeled content\n\nDiscussion\n\nYou can use this initializer within the makeBody(configuration:) method of a LabeledContentStyle to create a labeled content instance. This is useful for custom styles that only modify the current style, as opposed to implementing a brand new style.\n\nFor example, the following style adds a red border around the labeled content, but otherwise preserves the current style:\n\nstruct RedBorderLabeledContentStyle: LabeledContentStyle {\n    func makeBody(configuration: Configuration) -> some View {\n        LabeledContent(configuration)\n            .border(.red)\n    }\n}\n"
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/groupbox/init(_:)",
        "html": "Parameters\nconfiguration\n\nThe properties of the group box instance being created.\n\nDiscussion\n\nUse this initializer within the makeBody(configuration:) method of a GroupBoxStyle instance to create a styled group box, with customizations, while preserving its existing style.\n\nThe following example adds a pink border around the group box, without overriding its current style:\n\nstruct PinkBorderGroupBoxStyle: GroupBoxStyle {\n    func makeBody(configuration: Configuration) -> some View {\n        GroupBox(configuration)\n            .border(Color.pink)\n    }\n}\n"
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/controlgroup/init(_:)",
        "html": "Discussion\n\nUse this initializer within the makeBody(configuration:) method of a ControlGroupStyle instance to create an instance of the control group being styled. This is useful for custom control group styles that modify the current control group style.\n\nFor example, the following code creates a new, custom style that places a red border around the current control group:\n\nstruct RedBorderControlGroupStyle: ControlGroupStyle {\n    func makeBody(configuration: Configuration) -> some View {\n        ControlGroup(configuration)\n            .border(Color.red)\n    }\n}\n"
    },
    {
        "title": "cgColor",
        "url": "https://developer.apple.com/documentation/swiftui/color/cgcolor",
        "html": "Discussion\n\nYou can get a CGColor instance from a constant SwiftUI color. This includes colors you create from a Core Graphics color, from RGB or HSB components, or from constant UIKit and AppKit colors.\n\nFor a dynamic color, like one you load from an Asset Catalog using init(_:bundle:), or one you create from a dynamic UIKit or AppKit color, this property is nil. To evaluate all types of colors, use the resolve(in:) method.\n\nSee Also\nDeprecated symbols\ninit(UIColor)\nCreates a color from a UIKit color.\nDeprecated\ninit(NSColor)\nCreates a color from an AppKit color.\nDeprecated\ninit(CGColor)\nCreates a color from a Core Graphics color.\nDeprecated"
    },
    {
        "title": "secondary",
        "url": "https://developer.apple.com/documentation/swiftui/color/secondary",
        "html": "See Also\nGetting semantic colors\nstatic var accentColor: Color\nA color that reflects the accent color of the system or app.\nstatic let primary: Color\nThe color to use for primary content."
    },
    {
        "title": "scrollView",
        "url": "https://developer.apple.com/documentation/swiftui/coordinatespaceprotocol/scrollview",
        "html": "See Also\nGetting built-in coordinate spaces\nstatic var global: GlobalCoordinateSpace\nThe global coordinate space at the root of the view hierarchy.\nAvailable when Self is GlobalCoordinateSpace.\nstatic var local: LocalCoordinateSpace\nThe local coordinate space of the current view.\nAvailable when Self is LocalCoordinateSpace.\nstatic func named(some Hashable) -> NamedCoordinateSpace\nCreates a named coordinate space using the given value.\nAvailable when Self is NamedCoordinateSpace.\nstatic func scrollView(axis: Axis) -> Self\nThe named coordinate space that is added by the system for the innermost containing scroll view that allows scrolling along the provided axis.\nAvailable when Self is NamedCoordinateSpace."
    },
    {
        "title": "center",
        "url": "https://developer.apple.com/documentation/swiftui/depthalignment/center",
        "html": "See Also\nGetting guides\nstatic let back: DepthAlignment\nA guide marking the bottom edge of the view.\nBeta\nstatic let front: DepthAlignment\nA guide marking the top edge of the view.\nBeta"
    },
    {
        "title": "formUnion(_:edges:)",
        "url": "https://developer.apple.com/documentation/swiftui/viewspacing/formunion(_:edges:)",
        "html": "Parameters\nother\n\nAnother spacing preferences instances to merge with this one.\n\nedges\n\nThe edges to merge. Edges that you don\u2019t specify are unchanged after the method completes.\n\nDiscussion\n\nWhen you merge another spacing preference instance with this one, this instance ends up with the greater of its original value or the other instance\u2019s value for each of the specified edges. You can call the method repeatedly with each value in a collection to merge a collection of preferences. The result has the smallest preferences on each edge that meets the largest requirements of all the inputs for that edge.\n\nIf you want to merge preferences without modifying the original instance, use union(_:edges:) instead.\n\nSee Also\nMerging spacing instances\nfunc union(ViewSpacing, edges: Edge.Set) -> ViewSpacing\nGets a new value that merges the spacing preferences of another spacing instance with this instance for a specified set of edges."
    },
    {
        "title": "subscript(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/layoutsubview/subscript(_:)",
        "html": "Overview\n\nIf you define a custom layout value using LayoutValueKey, you can read the key\u2019s associated value for a given subview in a layout container by indexing the container\u2019s subviews with the key type. For example, if you define a Flexibility key type, you can put the associated values of all the layout\u2019s subviews into an array:\n\nlet flexibilities = subviews.map { subview in\n    subview[Flexibility.self]\n}\n\n\nFor more information about creating a custom layout, see Layout."
    },
    {
        "title": "back",
        "url": "https://developer.apple.com/documentation/swiftui/depthalignment/back",
        "html": "See Also\nGetting guides\nstatic let center: DepthAlignment\nA guide marking the vertical center of the view.\nBeta\nstatic let front: DepthAlignment\nA guide marking the top edge of the view.\nBeta"
    },
    {
        "title": "scrollContent",
        "url": "https://developer.apple.com/documentation/swiftui/contentmarginplacement/scrollcontent",
        "html": "Discussion\n\nScrollable views like ScrollView will use this placement to inset their content, but not their scroll indicators.\n\nSee Also\nGetting the placement\nstatic var automatic: ContentMarginPlacement\nThe automatic placement.\nstatic var scrollIndicators: ContentMarginPlacement\nThe scroll indicators placement."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/contentmarginplacement/automatic",
        "html": "Discussion\n\nViews that support margin customization can automatically use margins with this placement. For example, a ScrollView will use this placement to automatically inset both its content and scroll indicators by the specified amount.\n\nSee Also\nGetting the placement\nstatic var scrollContent: ContentMarginPlacement\nThe scroll content placement.\nstatic var scrollIndicators: ContentMarginPlacement\nThe scroll indicators placement."
    },
    {
        "title": "distance(to:along:)",
        "url": "https://developer.apple.com/documentation/swiftui/viewspacing/distance(to:along:)",
        "html": "Parameters\nnext\n\nThe spacing preferences instance of the adjacent view.\n\naxis\n\nThe axis that the two views align on.\n\nReturn Value\n\nA floating point value that represents the smallest distance in points between two views that satisfies the spacing preferences of both this view and the adjacent views on their shared edge.\n\nDiscussion\n\nCall this method from your implementation of Layout protocol methods if you need to measure the default spacing between two views in a custom layout. Call the method on the first view\u2019s preferences instance, and provide the second view\u2019s preferences instance as input.\n\nFor example, consider two views that appear in a custom horizontal stack. The following distance call gets the preferred spacing between these views, where spacing1 contains the preferences of a first view, and spacing2 contains the preferences of a second view:\n\nlet distance = spacing1.distance(to: spacing2, axis: .horizontal)\n\n\nThe method first determines, based on the axis and the ordering, that the views abut on the trailing edge of the first view and the leading edge of the second. It then gets the spacing preferences for the corresponding edges of each view, and returns the greater of the two values. This results in the smallest value that provides enough space to satisfy the preferences of both views.\n\nNote\n\nThis method returns the default spacing between views, but a layout can choose to ignore the value and use custom spacing instead."
    },
    {
        "title": "zero",
        "url": "https://developer.apple.com/documentation/swiftui/viewspacing/zero",
        "html": "Discussion\n\nYou typically only use this value for an empty view.\n\nSee Also\nCreating spacing instances\ninit()\nInitializes an instance with default spacing values."
    },
    {
        "title": "Layout.Subviews",
        "url": "https://developer.apple.com/documentation/swiftui/layout/subviews",
        "html": "Discussion\n\nThis collection doesn\u2019t store views. Instead it stores instances of LayoutSubview, each of which acts as a proxy for one of the views arranged by the layout. Use the proxies to get information about the views, and to tell the views where to appear.\n\nFor more information about the behavior of the underlying collection type, see LayoutSubviews.\n\nSee Also\nSizing the container and placing subviews\nfunc sizeThatFits(proposal: ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CGSize\nReturns the size of the composite view, given a proposed size and the view\u2019s subviews.\n\nRequired\n\nfunc placeSubviews(in: CGRect, proposal: ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache)\nAssigns positions to each of the layout\u2019s subviews.\n\nRequired"
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/viewspacing/init()",
        "html": "Discussion\n\nUse this initializer to create a spacing preferences instance with default values. Then use formUnion(_:edges:) to combine preferences from other views with the new instance. You typically do this in a custom layout\u2019s implementation of the spacing(subviews:cache:) method.\n\nSee Also\nCreating spacing instances\nstatic let zero: ViewSpacing\nA view spacing instance that contains zero on all edges."
    },
    {
        "title": "orange",
        "url": "https://developer.apple.com/documentation/swiftui/color/orange",
        "html": "See Also\nGetting standard colors\nstatic let black: Color\nA black color suitable for use in UI elements.\nstatic let blue: Color\nA context-dependent blue color suitable for use in UI elements.\nstatic let brown: Color\nA context-dependent brown color suitable for use in UI elements.\nstatic let clear: Color\nA clear color suitable for use in UI elements.\nstatic let cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nstatic let gray: Color\nA context-dependent gray color suitable for use in UI elements.\nstatic let green: Color\nA context-dependent green color suitable for use in UI elements.\nstatic let indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nstatic let mint: Color\nA context-dependent mint color suitable for use in UI elements.\nstatic let pink: Color\nA context-dependent pink color suitable for use in UI elements.\nstatic let purple: Color\nA context-dependent purple color suitable for use in UI elements.\nstatic let red: Color\nA context-dependent red color suitable for use in UI elements.\nstatic let teal: Color\nA context-dependent teal color suitable for use in UI elements.\nstatic let white: Color\nA white color suitable for use in UI elements.\nstatic let yellow: Color\nA context-dependent yellow color suitable for use in UI elements."
    },
    {
        "title": "black",
        "url": "https://developer.apple.com/documentation/swiftui/color/black",
        "html": "See Also\nGetting standard colors\nstatic let blue: Color\nA context-dependent blue color suitable for use in UI elements.\nstatic let brown: Color\nA context-dependent brown color suitable for use in UI elements.\nstatic let clear: Color\nA clear color suitable for use in UI elements.\nstatic let cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nstatic let gray: Color\nA context-dependent gray color suitable for use in UI elements.\nstatic let green: Color\nA context-dependent green color suitable for use in UI elements.\nstatic let indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nstatic let mint: Color\nA context-dependent mint color suitable for use in UI elements.\nstatic let orange: Color\nA context-dependent orange color suitable for use in UI elements.\nstatic let pink: Color\nA context-dependent pink color suitable for use in UI elements.\nstatic let purple: Color\nA context-dependent purple color suitable for use in UI elements.\nstatic let red: Color\nA context-dependent red color suitable for use in UI elements.\nstatic let teal: Color\nA context-dependent teal color suitable for use in UI elements.\nstatic let white: Color\nA white color suitable for use in UI elements.\nstatic let yellow: Color\nA context-dependent yellow color suitable for use in UI elements."
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/groupbox/init(_:content:)-24usz",
        "html": "Parameters\ntitle\n\nA string that describes the content of the group box.\n\ncontent\n\nA ViewBuilder that produces the content for the group box.\n\nSee Also\nCreating a group box\ninit(content: () -> Content)\nCreates an unlabeled group box with the provided view content.\nAvailable when Label is EmptyView and Content conforms to View.\ninit(content: () -> Content, label: () -> Label)\nCreates a group box with the provided label and view content.\ninit(LocalizedStringKey, content: () -> Content)\nCreates a group box with the provided view content and title.\nAvailable when Label is Text and Content conforms to View."
    },
    {
        "title": "purple",
        "url": "https://developer.apple.com/documentation/swiftui/color/purple",
        "html": "See Also\nGetting standard colors\nstatic let black: Color\nA black color suitable for use in UI elements.\nstatic let blue: Color\nA context-dependent blue color suitable for use in UI elements.\nstatic let brown: Color\nA context-dependent brown color suitable for use in UI elements.\nstatic let clear: Color\nA clear color suitable for use in UI elements.\nstatic let cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nstatic let gray: Color\nA context-dependent gray color suitable for use in UI elements.\nstatic let green: Color\nA context-dependent green color suitable for use in UI elements.\nstatic let indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nstatic let mint: Color\nA context-dependent mint color suitable for use in UI elements.\nstatic let orange: Color\nA context-dependent orange color suitable for use in UI elements.\nstatic let pink: Color\nA context-dependent pink color suitable for use in UI elements.\nstatic let red: Color\nA context-dependent red color suitable for use in UI elements.\nstatic let teal: Color\nA context-dependent teal color suitable for use in UI elements.\nstatic let white: Color\nA white color suitable for use in UI elements.\nstatic let yellow: Color\nA context-dependent yellow color suitable for use in UI elements."
    },
    {
        "title": "b3",
        "url": "https://developer.apple.com/documentation/swiftui/colormatrix/b3",
        "html": "See Also\nThird column\nvar r3: Float\nvar g3: Float\nvar a3: Float"
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/groupbox/init(_:content:)-6z4l9",
        "html": "Parameters\ntitleKey\n\nThe key for the group box\u2019s title, which describes the content of the group box.\n\ncontent\n\nA ViewBuilder that produces the content for the group box.\n\nSee Also\nCreating a group box\ninit(content: () -> Content)\nCreates an unlabeled group box with the provided view content.\nAvailable when Label is EmptyView and Content conforms to View.\ninit(content: () -> Content, label: () -> Label)\nCreates a group box with the provided label and view content.\ninit<S>(S, content: () -> Content)\nCreates a group box with the provided view content.\nAvailable when Label is Text and Content conforms to View."
    },
    {
        "title": "customizationID(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumncontent/customizationid(_:)",
        "html": "Parameters\nid\n\nThe identifier to associate with a column.\n\nDiscussion\n\nThis is required to allow user customization of a specific table column, in addition to the table as a whole being provided a binding to a TableColumnCustomization.\n\nThe identifier needs to to be stable, including across app version updates, since it is used to persist the user customization.\n\nSee Also\nConfiguring the content\nfunc alignment(TableColumnAlignment) -> some TableColumnContent<Self.TableRowValue, Self.TableColumnSortComparator>\nSets the alignment of the column, applying to both its column header label and the row view content for that column.\nfunc defaultVisibility(Visibility) -> some TableColumnContent<Self.TableRowValue, Self.TableColumnSortComparator>\nSets the default visibility of a table column.\nfunc disabledCustomizationBehavior(TableColumnCustomizationBehavior) -> some TableColumnContent<Self.TableRowValue, Self.TableColumnSortComparator>\nSets the disabled customization behavior for a table column."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnalignment/automatic",
        "html": "Discussion\n\nThis is equivalent to leading.\n\nSee Also\nGetting the alignment\nstatic var leading: TableColumnAlignment\nLeading column alignment.\nstatic var center: TableColumnAlignment\nCenter column alignment.\nstatic var trailing: TableColumnAlignment\nTrailing column alignment.\nstatic var numeric: TableColumnAlignment\nColumn alignment appropriate for numeric content.\nstatic func numeric(Locale.NumberingSystem) -> TableColumnAlignment\nColumn alignment appropriate for numeric content."
    },
    {
        "title": "init(content:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/groupbox/init(content:label:)",
        "html": "Parameters\ncontent\n\nA ViewBuilder that produces the content for the group box.\n\nlabel\n\nA ViewBuilder that produces a label for the group box.\n\nSee Also\nCreating a group box\ninit(content: () -> Content)\nCreates an unlabeled group box with the provided view content.\nAvailable when Label is EmptyView and Content conforms to View.\ninit(LocalizedStringKey, content: () -> Content)\nCreates a group box with the provided view content and title.\nAvailable when Label is Text and Content conforms to View.\ninit<S>(S, content: () -> Content)\nCreates a group box with the provided view content.\nAvailable when Label is Text and Content conforms to View."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumncustomization/init()",
        "html": "Discussion\n\nWith an empty customization, columns will be ordered as described by the table\u2019s column builder."
    },
    {
        "title": "subscript(visibility:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumncustomization/subscript(visibility:)",
        "html": "Overview\n\nExplicit identifiers can be associated with a TableColumn using the customizationID(_:) modifier.\n\nTableColumn(\"Number of Reports\", value: \\.duplicateCount) {\n    Text($0.duplicateCount, format: .number)\n}\n.customizationID(\"numberOfReports\")\n\n\n...\n\n\ncolumnsCustomization[visibility: \"numberOfReports\"] = .hidden\n\n\nIf the ID isn\u2019t associated with the state, a default value of .automatic is returned.\n\nSee Also\nManaging the customization\nfunc resetOrder()\nResets the column order back to the default, preserving the customized visibility and size."
    },
    {
        "title": "center",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnalignment/center",
        "html": "See Also\nGetting the alignment\nstatic var automatic: TableColumnAlignment\nThe default column alignment.\nstatic var leading: TableColumnAlignment\nLeading column alignment.\nstatic var trailing: TableColumnAlignment\nTrailing column alignment.\nstatic var numeric: TableColumnAlignment\nColumn alignment appropriate for numeric content.\nstatic func numeric(Locale.NumberingSystem) -> TableColumnAlignment\nColumn alignment appropriate for numeric content."
    },
    {
        "title": "trailing",
        "url": "https://developer.apple.com/documentation/swiftui/tablecolumnalignment/trailing",
        "html": "Discussion\n\nWith a layoutDirection of leftToRight, this is equivalent to right; and with a layoutDirection of rightToLeft, this is equivalent to left.\n\nSee Also\nGetting the alignment\nstatic var automatic: TableColumnAlignment\nThe default column alignment.\nstatic var leading: TableColumnAlignment\nLeading column alignment.\nstatic var center: TableColumnAlignment\nCenter column alignment.\nstatic var numeric: TableColumnAlignment\nColumn alignment appropriate for numeric content.\nstatic func numeric(Locale.NumberingSystem) -> TableColumnAlignment\nColumn alignment appropriate for numeric content."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablerow/init(_:)",
        "html": "Parameters\nvalue\n\nThe value of the row.\n\nDiscussion\n\nThe table provides the value of a row to each column of a table, which produces the cells for each row in the column.\n\nThe following example creates a row for one instance of the Person type. The table delivers this value to its columns, which displays different fields of Person.\n\n TableRow(Person(givenName: \"Tom\", familyName: \"Clark\"))\n"
    },
    {
        "title": "vertical",
        "url": "https://developer.apple.com/documentation/swiftui/edge/set/vertical",
        "html": "See Also\nGetting edge sets\nstatic let all: Edge.Set\nstatic let top: Edge.Set\nstatic let bottom: Edge.Set\nstatic let leading: Edge.Set\nstatic let trailing: Edge.Set\nstatic let horizontal: Edge.Set"
    },
    {
        "title": "leading",
        "url": "https://developer.apple.com/documentation/swiftui/edgeinsets3d/leading",
        "html": "See Also\nGetting edge insets\nvar top: CGFloat\nThe inset distance along the top face of a 3D volume.\nBeta\nvar bottom: CGFloat\nThe inset distance along the bottom face of a 3D volume.\nBeta\nvar trailing: CGFloat\nThe inset distance along the top trailing of a 3D volume.\nBeta\nvar front: CGFloat\nThe inset distance along the top front of a 3D volume.\nBeta\nvar back: CGFloat\nThe inset distance along the top back of a 3D volume.\nBeta"
    },
    {
        "title": "bottom",
        "url": "https://developer.apple.com/documentation/swiftui/edgeinsets3d/bottom",
        "html": "See Also\nGetting edge insets\nvar top: CGFloat\nThe inset distance along the top face of a 3D volume.\nBeta\nvar leading: CGFloat\nThe inset distance along the leading face of a 3D volume.\nBeta\nvar trailing: CGFloat\nThe inset distance along the top trailing of a 3D volume.\nBeta\nvar front: CGFloat\nThe inset distance along the top front of a 3D volume.\nBeta\nvar back: CGFloat\nThe inset distance along the top back of a 3D volume.\nBeta"
    },
    {
        "title": "HorizontalEdge.trailing",
        "url": "https://developer.apple.com/documentation/swiftui/horizontaledge/trailing",
        "html": "See Also\nGetting the edges\ncase leading\nThe leading edge."
    },
    {
        "title": "HorizontalEdge.leading",
        "url": "https://developer.apple.com/documentation/swiftui/horizontaledge/leading",
        "html": "See Also\nGetting the edges\ncase trailing\nThe trailing edge."
    },
    {
        "title": "firstTextBaseline",
        "url": "https://developer.apple.com/documentation/swiftui/verticalalignment/firsttextbaseline",
        "html": "Discussion\n\nUse this guide to align with the baseline of the top-most text in a view. The guide aligns with the bottom of a view that contains no text:\n\nThe following code generates the image above using an HStack:\n\nstruct VerticalAlignmentFirstTextBaseline: View {\n    var body: some View {\n        HStack(alignment: .firstTextBaseline, spacing: 0) {\n            Color.red.frame(height: 1)\n            Text(\"First Text Baseline\").font(.title).border(.gray)\n            Color.red.frame(height: 1)\n        }\n    }\n}\n\nSee Also\nGetting guides\nstatic let top: VerticalAlignment\nA guide that marks the top edge of the view.\nstatic let center: VerticalAlignment\nA guide that marks the vertical center of the view.\nstatic let bottom: VerticalAlignment\nA guide that marks the bottom edge of the view.\nstatic let lastTextBaseline: VerticalAlignment\nA guide that marks the bottom-most text baseline in a view."
    },
    {
        "title": "horizontalSpacing",
        "url": "https://developer.apple.com/documentation/swiftui/gridlayout/horizontalspacing",
        "html": "Discussion\n\nSet this value to nil to use default horizonal distances between subviews.\n\nSee Also\nGetting the grid\u2019s properties\nvar alignment: Alignment\nThe alignment of subviews.\nvar verticalSpacing: CGFloat?\nThe vertical distance between adjacent subviews."
    },
    {
        "title": "bottom",
        "url": "https://developer.apple.com/documentation/swiftui/verticalalignment/bottom",
        "html": "Discussion\n\nUse this guide to align the bottom edges of views:\n\nThe following code generates the image above using an HStack:\n\nstruct VerticalAlignmentBottom: View {\n    var body: some View {\n        HStack(alignment: .bottom, spacing: 0) {\n            Color.red.frame(height: 1)\n            Text(\"Bottom\").font(.title).border(.gray)\n            Color.red.frame(height: 1)\n        }\n    }\n}\n\nSee Also\nGetting guides\nstatic let top: VerticalAlignment\nA guide that marks the top edge of the view.\nstatic let center: VerticalAlignment\nA guide that marks the vertical center of the view.\nstatic let firstTextBaseline: VerticalAlignment\nA guide that marks the top-most text baseline in a view.\nstatic let lastTextBaseline: VerticalAlignment\nA guide that marks the bottom-most text baseline in a view."
    },
    {
        "title": "defaultValue",
        "url": "https://developer.apple.com/documentation/swiftui/layoutvaluekey/defaultvalue",
        "html": "Required\n\nDiscussion\n\nImplement the defaultValue property for a type that conforms to the LayoutValueKey protocol. For example, you can create a Flexibility layout value that defaults to nil:\n\nprivate struct Flexibility: LayoutValueKey {\n    static let defaultValue: CGFloat? = nil\n}\n\n\nThe type that you declare for the defaultValue sets the layout key\u2019s Value associated type. The Swift compiler infers the key\u2019s associated type in the above example as an optional CGFloat.\n\nAny view that you don\u2019t explicitly set a value for uses the default value. Override the default value for a view using the layoutValue(key:value:) modifier.\n\nSee Also\nProviding a default value\nassociatedtype Value\nThe type of the key\u2019s value.\n\nRequired"
    },
    {
        "title": "alignment",
        "url": "https://developer.apple.com/documentation/swiftui/hstacklayout/alignment",
        "html": "See Also\nGetting the stack\u2019s properties\nvar spacing: CGFloat?\nThe distance between adjacent subviews."
    },
    {
        "title": "UserInterfaceSizeClass.compact",
        "url": "https://developer.apple.com/documentation/swiftui/userinterfacesizeclass/compact",
        "html": "See Also\nGetting size classes\ncase regular\nThe regular size class."
    },
    {
        "title": "init(alignment:spacing:)",
        "url": "https://developer.apple.com/documentation/swiftui/vstacklayout/init(alignment:spacing:)",
        "html": "Parameters\nalignment\n\nThe guide for aligning the subviews in this stack. It has the same horizontal screen coordinate for all subviews.\n\nspacing\n\nThe distance between adjacent subviews. Set this value to nil to use default distances between subviews."
    },
    {
        "title": "alignment",
        "url": "https://developer.apple.com/documentation/swiftui/vstacklayout/alignment",
        "html": "See Also\nGetting the stack\u2019s properties\nvar spacing: CGFloat?\nThe distance between adjacent subviews."
    },
    {
        "title": "init(alignment:horizontalSpacing:verticalSpacing:)",
        "url": "https://developer.apple.com/documentation/swiftui/gridlayout/init(alignment:horizontalspacing:verticalspacing:)",
        "html": "Parameters\nalignment\n\nThe guide for aligning subviews within the space allocated for a given cell. The default is center.\n\nhorizontalSpacing\n\nThe horizontal distance between each cell, given in points. The value is nil by default, which results in a default distance between cells that\u2019s appropriate for the platform.\n\nverticalSpacing\n\nThe vertical distance between each cell, given in points. The value is nil by default, which results in a default distance between cells that\u2019s appropriate for the platform."
    },
    {
        "title": "alignment",
        "url": "https://developer.apple.com/documentation/swiftui/gridlayout/alignment",
        "html": "See Also\nGetting the grid\u2019s properties\nvar horizontalSpacing: CGFloat?\nThe horizontal distance between adjacent subviews.\nvar verticalSpacing: CGFloat?\nThe vertical distance between adjacent subviews."
    },
    {
        "title": "init(alignment:)",
        "url": "https://developer.apple.com/documentation/swiftui/zstacklayout/init(alignment:)",
        "html": "Parameters\nalignment\n\nThe guide for aligning the subviews in this stack on both the x- and y-axes."
    },
    {
        "title": "init(alignment:spacing:)",
        "url": "https://developer.apple.com/documentation/swiftui/hstacklayout/init(alignment:spacing:)",
        "html": "Parameters\nalignment\n\nThe guide for aligning the subviews in this stack. It has the same vertical screen coordinate for all subviews.\n\nspacing\n\nThe distance between adjacent subviews. Set this value to nil to use default distances between subviews."
    },
    {
        "title": "spacing",
        "url": "https://developer.apple.com/documentation/swiftui/hstacklayout/spacing",
        "html": "Discussion\n\nSet this value to nil to use default distances between subviews.\n\nSee Also\nGetting the stack\u2019s properties\nvar alignment: VerticalAlignment\nThe vertical alignment of subviews."
    },
    {
        "title": "verticalSpacing",
        "url": "https://developer.apple.com/documentation/swiftui/gridlayout/verticalspacing",
        "html": "Discussion\n\nSet this value to nil to use default vertical distances between subviews.\n\nSee Also\nGetting the grid\u2019s properties\nvar alignment: Alignment\nThe alignment of subviews.\nvar horizontalSpacing: CGFloat?\nThe horizontal distance between adjacent subviews."
    },
    {
        "title": "spacing",
        "url": "https://developer.apple.com/documentation/swiftui/vstacklayout/spacing",
        "html": "Discussion\n\nSet this value to nil to use default distances between subviews.\n\nSee Also\nGetting the stack\u2019s properties\nvar alignment: HorizontalAlignment\nThe horizontal alignment of subviews."
    },
    {
        "title": "Layout Implementations",
        "url": "https://developer.apple.com/documentation/swiftui/gridlayout/layout-implementations",
        "html": "Topics\nStructures\nstruct Cache\nA stateful grid layout algorithm."
    },
    {
        "title": "layoutDirection",
        "url": "https://developer.apple.com/documentation/swiftui/layoutsubviews/layoutdirection",
        "html": "Discussion\n\nSwiftUI supports both left-to-right and right-to-left directions. Read this property within a custom layout container to find out which environment the container is in.\n\nIn most cases, you don\u2019t need to take any action based on this value. SwiftUI horizontally flips the x position of each view within its parent when the mode switches, so layout calculations automatically produce the desired effect for both directions."
    },
    {
        "title": "colorEffect(_:isEnabled:)",
        "url": "https://developer.apple.com/documentation/swiftui/visualeffect/coloreffect(_:isenabled:)",
        "html": "Parameters\nshader\n\nThe shader to apply to self as a color filter.\n\nisEnabled\n\nWhether the effect is enabled or not.\n\nReturn Value\n\nA new view that renders self with the shader applied as a color filter.\n\nDiscussion\n\nFor a shader function to act as a color filter it must have a function signature matching:\n\n[[ stitchable ]] half4 name(float2 position, half4 color, args...)\n\n\nwhere position is the user-space coordinates of the pixel applied to the shader and color its source color, as a pre-multiplied color in the destination color space. args... should be compatible with the uniform arguments bound to shader. The function should return the modified color value.\n\nImportant\n\nViews backed by AppKit or UIKit views may not render into the filtered layer. Instead, they log a warning and display a placeholder image to highlight the error.\n\nSee Also\nAdjusting Color\nfunc brightness(Double) -> some VisualEffect\nBrightens the view by the specified amount.\nfunc contrast(Double) -> some VisualEffect\nSets the contrast and separation between similar colors in the view.\nfunc grayscale(Double) -> some VisualEffect\nAdds a grayscale effect to the view.\nfunc hueRotation(Angle) -> some VisualEffect\nApplies a hue rotation effect to the view.\nfunc saturation(Double) -> some VisualEffect\nAdjusts the color saturation of the view.\nfunc opacity(Double) -> some VisualEffect\nSets the transparency of the view."
    },
    {
        "title": "all",
        "url": "https://developer.apple.com/documentation/swiftui/safearearegions/all",
        "html": "See Also\nGetting safe area regions\nstatic let container: SafeAreaRegions\nThe safe area defined by the device and containers within the user interface, including elements such as top and bottom bars.\nstatic let keyboard: SafeAreaRegions\nThe safe area matching the current extent of any software keyboard displayed over the view content."
    },
    {
        "title": "keyboard",
        "url": "https://developer.apple.com/documentation/swiftui/safearearegions/keyboard",
        "html": "See Also\nGetting safe area regions\nstatic let all: SafeAreaRegions\nAll safe area regions.\nstatic let container: SafeAreaRegions\nThe safe area defined by the device and containers within the user interface, including elements such as top and bottom bars."
    },
    {
        "title": "minLength",
        "url": "https://developer.apple.com/documentation/swiftui/spacer/minlength",
        "html": "Discussion\n\nIf nil, the system default spacing between views is used.\n\nSee Also\nCreating a spacer\ninit(minLength: CGFloat?)"
    },
    {
        "title": "init(minLength:)",
        "url": "https://developer.apple.com/documentation/swiftui/spacer/init(minlength:)",
        "html": "See Also\nCreating a spacer\nvar minLength: CGFloat?\nThe minimum length this spacer can be shrunk to, along the axis or axes of expansion."
    },
    {
        "title": "Transferable Implementations",
        "url": "https://developer.apple.com/documentation/swiftui/color/transferable-implementations",
        "html": "Topics\nType Properties\nstatic var transferRepresentation: some TransferRepresentation\nOne group of colors\u2013constant colors\u2013created with explicitly specified component values are transferred as is."
    },
    {
        "title": "ShapeStyle Implementations",
        "url": "https://developer.apple.com/documentation/swiftui/color/shapestyle-implementations",
        "html": "Topics\nStructures\nstruct Resolved\nA concrete color value."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/color/init(_:)-1uwrw",
        "html": "Deprecated\n\nUse init(nsColor:) instead.\n\nParameters\ncolor\n\nAn NSColor instance from which to create a color.\n\nDiscussion\n\nUse this method to create a SwiftUI color from an NSColor instance. The new color preserves the adaptability of the original. For example, you can create a rectangle using linkColor to see how the shade adjusts to match the user\u2019s system settings:\n\nstruct Box: View {\n    var body: some View {\n        Color(NSColor.linkColor)\n            .frame(width: 200, height: 100)\n    }\n}\n\n\nThe Box view defined above automatically changes its appearance when the user turns on Dark Mode. With the light and dark appearances placed side by side, you can see the subtle difference in shades:\n\nNote\n\nUse this initializer only if you need to convert an existing NSColor to a SwiftUI color. Otherwise, create a SwiftUI Color using an initializer like init(_:red:green:blue:opacity:), or use a system color like blue.\n\nSee Also\nDeprecated symbols\ninit(UIColor)\nCreates a color from a UIKit color.\nDeprecated\ninit(CGColor)\nCreates a color from a Core Graphics color.\nDeprecated\nvar cgColor: CGColor?\nA Core Graphics representation of the color, if available."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/color/==(_:_:)",
        "html": "Parameters\nlhs\n\nThe first color to compare.\n\nrhs\n\nThe second color to compare.\n\nReturn Value\n\nA Boolean that\u2019s set to true if the two colors are equal.\n\nSee Also\nComparing colors\nfunc hash(into: inout Hasher)\nHashes the essential components of the color by feeding them into the given hash function."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/color/init(_:)-9rl8m",
        "html": "Deprecated\n\nUse init(uiColor:) instead.\n\nParameters\ncolor\n\nA UIColor instance from which to create a color.\n\nDiscussion\n\nUse this method to create a SwiftUI color from a UIColor instance. The new color preserves the adaptability of the original. For example, you can create a rectangle using link to see how the shade adjusts to match the user\u2019s system settings:\n\nstruct Box: View {\n    var body: some View {\n        Color(UIColor.link)\n            .frame(width: 200, height: 100)\n    }\n}\n\n\nThe Box view defined above automatically changes its appearance when the user turns on Dark Mode. With the light and dark appearances placed side by side, you can see the subtle difference in shades:\n\nNote\n\nUse this initializer only if you need to convert an existing UIColor to a SwiftUI color. Otherwise, create a SwiftUI Color using an initializer like init(_:red:green:blue:opacity:), or use a system color like blue.\n\nSee Also\nDeprecated symbols\ninit(NSColor)\nCreates a color from an AppKit color.\nDeprecated\ninit(CGColor)\nCreates a color from a Core Graphics color.\nDeprecated\nvar cgColor: CGColor?\nA Core Graphics representation of the color, if available."
    },
    {
        "title": "hash(into:)",
        "url": "https://developer.apple.com/documentation/swiftui/color/hash(into:)",
        "html": "Parameters\nhasher\n\nThe hash function to use when combining the components of the color.\n\nSee Also\nComparing colors\nstatic func == (Color, Color) -> Bool\nIndicates whether two colors are equal."
    },
    {
        "title": "primary",
        "url": "https://developer.apple.com/documentation/swiftui/color/primary",
        "html": "See Also\nGetting semantic colors\nstatic var accentColor: Color\nA color that reflects the accent color of the system or app.\nstatic let secondary: Color\nThe color to use for secondary content."
    },
    {
        "title": "description",
        "url": "https://developer.apple.com/documentation/swiftui/color/description",
        "html": "Discussion\n\nUse this method to get a string that represents the color. The print(_:separator:terminator:) function uses this property to get a string representing an instance:\n\nprint(Color.red)\n// Prints \"red\"\n"
    },
    {
        "title": "opacity(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/color/opacity(_:)",
        "html": "Parameters\nopacity\n\nThe amount by which to multiply the opacity of the color.\n\nReturn Value\n\nA view with modified opacity.\n\nSee Also\nModifying a color\nvar gradient: AnyGradient\nReturns the standard gradient for the color self."
    },
    {
        "title": "red",
        "url": "https://developer.apple.com/documentation/swiftui/color/red",
        "html": "See Also\nGetting standard colors\nstatic let black: Color\nA black color suitable for use in UI elements.\nstatic let blue: Color\nA context-dependent blue color suitable for use in UI elements.\nstatic let brown: Color\nA context-dependent brown color suitable for use in UI elements.\nstatic let clear: Color\nA clear color suitable for use in UI elements.\nstatic let cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nstatic let gray: Color\nA context-dependent gray color suitable for use in UI elements.\nstatic let green: Color\nA context-dependent green color suitable for use in UI elements.\nstatic let indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nstatic let mint: Color\nA context-dependent mint color suitable for use in UI elements.\nstatic let orange: Color\nA context-dependent orange color suitable for use in UI elements.\nstatic let pink: Color\nA context-dependent pink color suitable for use in UI elements.\nstatic let purple: Color\nA context-dependent purple color suitable for use in UI elements.\nstatic let teal: Color\nA context-dependent teal color suitable for use in UI elements.\nstatic let white: Color\nA white color suitable for use in UI elements.\nstatic let yellow: Color\nA context-dependent yellow color suitable for use in UI elements."
    },
    {
        "title": "white",
        "url": "https://developer.apple.com/documentation/swiftui/color/white",
        "html": "See Also\nGetting standard colors\nstatic let black: Color\nA black color suitable for use in UI elements.\nstatic let blue: Color\nA context-dependent blue color suitable for use in UI elements.\nstatic let brown: Color\nA context-dependent brown color suitable for use in UI elements.\nstatic let clear: Color\nA clear color suitable for use in UI elements.\nstatic let cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nstatic let gray: Color\nA context-dependent gray color suitable for use in UI elements.\nstatic let green: Color\nA context-dependent green color suitable for use in UI elements.\nstatic let indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nstatic let mint: Color\nA context-dependent mint color suitable for use in UI elements.\nstatic let orange: Color\nA context-dependent orange color suitable for use in UI elements.\nstatic let pink: Color\nA context-dependent pink color suitable for use in UI elements.\nstatic let purple: Color\nA context-dependent purple color suitable for use in UI elements.\nstatic let red: Color\nA context-dependent red color suitable for use in UI elements.\nstatic let teal: Color\nA context-dependent teal color suitable for use in UI elements.\nstatic let yellow: Color\nA context-dependent yellow color suitable for use in UI elements."
    },
    {
        "title": "init(_:white:opacity:)",
        "url": "https://developer.apple.com/documentation/swiftui/color/init(_:white:opacity:)",
        "html": "Parameters\ncolorSpace\n\nThe profile that specifies how to interpret the color for display. The default is Color.RGBColorSpace.sRGB.\n\nwhite\n\nA value that indicates how white the color is, with higher values closer to 100% white, and lower values closer to 100% black.\n\nopacity\n\nAn optional degree of opacity, given in the range 0 to 1. A value of 0 means 100% transparency, while a value of 1 means 100% opacity. The default is 1.\n\nDiscussion\n\nThis initializer creates a constant color that doesn\u2019t change based on context. For example, it doesn\u2019t have distinct light and dark appearances, unlike various system-defined colors, or a color that you load from an Asset Catalog with init(_:bundle:).\n\nA standard sRGB color space clamps the white component to a range of 0 to 1, but SwiftUI colors use an extended sRGB color space, so you can use component values outside that range. This makes it possible to create colors using the Color.RGBColorSpace.sRGB or Color.RGBColorSpace.sRGBLinear color space that make full use of the wider gamut of a diplay that supports Color.RGBColorSpace.displayP3.\n\nSee Also\nCreating a color from component values\ninit(hue: Double, saturation: Double, brightness: Double, opacity: Double)\nCreates a constant color from hue, saturation, and brightness values.\ninit(Color.RGBColorSpace, red: Double, green: Double, blue: Double, opacity: Double)\nCreates a constant color from red, green, and blue component values.\nenum RGBColorSpace\nA profile that specifies how to interpret a color value for display."
    },
    {
        "title": "accentColor",
        "url": "https://developer.apple.com/documentation/swiftui/color/accentcolor",
        "html": "Discussion\n\nThe accent color is a broad theme color applied to views and controls. You can set it at the application level by specifying an accent color in your app\u2019s asset catalog.\n\nNote\n\nIn macOS, SwiftUI applies customization of the accent color only if the user chooses Multicolor under General > Accent color in System Preferences.\n\nThe following code renders a Text view using the app\u2019s accent color:\n\nText(\"Accent Color\")\n    .foregroundStyle(Color.accentColor)\n\nSee Also\nGetting semantic colors\nstatic let primary: Color\nThe color to use for primary content.\nstatic let secondary: Color\nThe color to use for secondary content."
    },
    {
        "title": "Color.RGBColorSpace",
        "url": "https://developer.apple.com/documentation/swiftui/color/rgbcolorspace",
        "html": "Topics\nGetting color spaces\ncase sRGB\nThe extended red, green, blue (sRGB) color space.\ncase sRGBLinear\nThe extended sRGB color space with a linear transfer function.\ncase displayP3\nThe Display P3 color space.\nRelationships\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nCreating a color from component values\ninit(hue: Double, saturation: Double, brightness: Double, opacity: Double)\nCreates a constant color from hue, saturation, and brightness values.\ninit(Color.RGBColorSpace, white: Double, opacity: Double)\nCreates a constant grayscale color.\ninit(Color.RGBColorSpace, red: Double, green: Double, blue: Double, opacity: Double)\nCreates a constant color from red, green, and blue component values."
    },
    {
        "title": "init(hue:saturation:brightness:opacity:)",
        "url": "https://developer.apple.com/documentation/swiftui/color/init(hue:saturation:brightness:opacity:)",
        "html": "Parameters\nhue\n\nA value in the range 0 to 1 that maps to an angle from 0\u00b0 to 360\u00b0 to represent a shade on the color wheel.\n\nsaturation\n\nA value in the range 0 to 1 that indicates how strongly the hue affects the color. A value of 0 removes the effect of the hue, resulting in gray. As the value increases, the hue becomes more prominent.\n\nbrightness\n\nA value in the range 0 to 1 that indicates how bright a color is. A value of 0 results in black, regardless of the other components. The color lightens as you increase this component.\n\nopacity\n\nAn optional degree of opacity, given in the range 0 to 1. A value of 0 means 100% transparency, while a value of 1 means 100% opacity. The default is 1.\n\nDiscussion\n\nThis initializer creates a constant color that doesn\u2019t change based on context. For example, it doesn\u2019t have distinct light and dark appearances, unlike various system-defined colors, or a color that you load from an Asset Catalog with init(_:bundle:).\n\nSee Also\nCreating a color from component values\ninit(Color.RGBColorSpace, white: Double, opacity: Double)\nCreates a constant grayscale color.\ninit(Color.RGBColorSpace, red: Double, green: Double, blue: Double, opacity: Double)\nCreates a constant color from red, green, and blue component values.\nenum RGBColorSpace\nA profile that specifies how to interpret a color value for display."
    },
    {
        "title": "init(_:red:green:blue:opacity:)",
        "url": "https://developer.apple.com/documentation/swiftui/color/init(_:red:green:blue:opacity:)",
        "html": "Parameters\ncolorSpace\n\nThe profile that specifies how to interpret the color for display. The default is Color.RGBColorSpace.sRGB.\n\nred\n\nThe amount of red in the color.\n\ngreen\n\nThe amount of green in the color.\n\nblue\n\nThe amount of blue in the color.\n\nopacity\n\nAn optional degree of opacity, given in the range 0 to 1. A value of 0 means 100% transparency, while a value of 1 means 100% opacity. The default is 1.\n\nDiscussion\n\nThis initializer creates a constant color that doesn\u2019t change based on context. For example, it doesn\u2019t have distinct light and dark appearances, unlike various system-defined colors, or a color that you load from an Asset Catalog with init(_:bundle:).\n\nA standard sRGB color space clamps each color component \u2014 red, green, and blue \u2014 to a range of 0 to 1, but SwiftUI colors use an extended sRGB color space, so you can use component values outside that range. This makes it possible to create colors using the Color.RGBColorSpace.sRGB or Color.RGBColorSpace.sRGBLinear color space that make full use of the wider gamut of a diplay that supports Color.RGBColorSpace.displayP3.\n\nSee Also\nCreating a color from component values\ninit(hue: Double, saturation: Double, brightness: Double, opacity: Double)\nCreates a constant color from hue, saturation, and brightness values.\ninit(Color.RGBColorSpace, white: Double, opacity: Double)\nCreates a constant grayscale color.\nenum RGBColorSpace\nA profile that specifies how to interpret a color value for display."
    },
    {
        "title": "init(nsColor:)",
        "url": "https://developer.apple.com/documentation/swiftui/color/init(nscolor:)",
        "html": "Parameters\ncolor\n\nAn NSColor instance from which to create a color.\n\nDiscussion\n\nUse this method to create a SwiftUI color from an NSColor instance. The new color preserves the adaptability of the original. For example, you can create a rectangle using linkColor to see how the shade adjusts to match the user\u2019s system settings:\n\nstruct Box: View {\n    var body: some View {\n        Color(nsColor: .linkColor)\n            .frame(width: 200, height: 100)\n    }\n}\n\n\nThe Box view defined above automatically changes its appearance when the user turns on Dark Mode. With the light and dark appearances placed side by side, you can see the subtle difference in shades:\n\nNote\n\nUse this initializer only if you need to convert an existing NSColor to a SwiftUI color. Otherwise, create a SwiftUI Color using an initializer like init(_:red:green:blue:opacity:), or use a system color like blue.\n\nSee Also\nCreating a color from another color\ninit(uiColor: UIColor)\nCreates a color from a UIKit color.\ninit(cgColor: CGColor)\nCreates a color from a Core Graphics color."
    },
    {
        "title": "init(_:bundle:)",
        "url": "https://developer.apple.com/documentation/swiftui/color/init(_:bundle:)",
        "html": "Parameters\nname\n\nThe name of the color resource to look up.\n\nbundle\n\nThe bundle in which to search for the color resource. If you don\u2019t indicate a bundle, the initializer looks in your app\u2019s main bundle by default.\n\nDiscussion\n\nUse this initializer to load a color from a color set stored in an Asset Catalog. The system determines which color within the set to use based on the environment at render time. For example, you can provide light and dark versions for background and foreground colors:\n\nYou can then instantiate colors by referencing the names of the assets:\n\nstruct Hello: View {\n    var body: some View {\n        ZStack {\n            Color(\"background\")\n            Text(\"Hello, world!\")\n                .foregroundStyle(Color(\"foreground\"))\n        }\n        .frame(width: 200, height: 100)\n    }\n}\n\n\nSwiftUI renders the appropriate colors for each appearance:"
    },
    {
        "title": "resolve(in:)",
        "url": "https://developer.apple.com/documentation/swiftui/color/resolve(in:)",
        "html": "See Also\nCreating a custom color\ninit<T>(T)\nCreates a color that represents the specified custom color.\ninit(Color.Resolved)\nCreates a constant color with the values specified by the resolved color."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/color/init(_:)-35ok0",
        "html": "See Also\nCreating a custom color\ninit(Color.Resolved)\nCreates a constant color with the values specified by the resolved color.\nfunc resolve(in: EnvironmentValues) -> Color.Resolved\nEvaluates this color to a resolved color given the current context."
    },
    {
        "title": "init(uiColor:)",
        "url": "https://developer.apple.com/documentation/swiftui/color/init(uicolor:)",
        "html": "Parameters\ncolor\n\nA UIColor instance from which to create a color.\n\nDiscussion\n\nUse this method to create a SwiftUI color from a UIColor instance. The new color preserves the adaptability of the original. For example, you can create a rectangle using link to see how the shade adjusts to match the user\u2019s system settings:\n\nstruct Box: View {\n    var body: some View {\n        Color(uiColor: .link)\n            .frame(width: 200, height: 100)\n    }\n}\n\n\nThe Box view defined above automatically changes its appearance when the user turns on Dark Mode. With the light and dark appearances placed side by side, you can see the subtle difference in shades:\n\nNote\n\nUse this initializer only if you need to convert an existing UIColor to a SwiftUI color. Otherwise, create a SwiftUI Color using an initializer like init(_:red:green:blue:opacity:), or use a system color like blue.\n\nSee Also\nCreating a color from another color\ninit(nsColor: NSColor)\nCreates a color from an AppKit color.\ninit(cgColor: CGColor)\nCreates a color from a Core Graphics color."
    },
    {
        "title": "init(cgColor:)",
        "url": "https://developer.apple.com/documentation/swiftui/color/init(cgcolor:)",
        "html": "Parameters\ncolor\n\nA CGColor instance from which to create a color.\n\nSee Also\nCreating a color from another color\ninit(uiColor: UIColor)\nCreates a color from a UIKit color.\ninit(nsColor: NSColor)\nCreates a color from an AppKit color."
    },
    {
        "title": "subscript(explicit:)",
        "url": "https://developer.apple.com/documentation/swiftui/viewdimensions/subscript(explicit:)-4krm2",
        "html": "Overview\n\nFind the vertical offset of a particular guide in the corresponding view by using that guide as an index to read from the context:\n\n.alignmentGuide(.top) { context in\n    context[.top] - 10\n}\n\n\nThis subscript returns nil if no value exists for the guide.\n\nFor information about using subscripts in Swift to access member elements of a collection, list, or, sequence, see Subscripts in The Swift Programming Language.\n\nSee Also\nAccessing guide values\nsubscript(VerticalAlignment) -> CGFloat\nGets the value of the given vertical guide.\nsubscript(HorizontalAlignment) -> CGFloat\nGets the value of the given horizontal guide.\nsubscript(explicit _: HorizontalAlignment) -> CGFloat?\nGets the explicit value of the given horizontal alignment guide."
    },
    {
        "title": "dimensions(in:)",
        "url": "https://developer.apple.com/documentation/swiftui/layoutsubview/dimensions(in:)",
        "html": "Parameters\nproposal\n\nA proposed size for the subview. In SwiftUI, views choose their own size, but can take a size proposal from their parent view into account when doing so.\n\nReturn Value\n\nA ViewDimensions instance that includes a height and width, as well as a set of alignment guides.\n\nDiscussion\n\nCall this method to ask a subview of a custom Layout type about its size and alignment properties. You can call it from your implementation of any of that protocol\u2019s methods, like placeSubviews(in:proposal:subviews:cache:) or sizeThatFits(proposal:subviews:cache:), to get information for your layout calculations.\n\nWhen you call this method, you propose a size using the proposal parameter. The subview can choose its own size, but might take the proposal into account. You can call this method more than once with different proposals to find out if the view is flexible. For example, you can propose:\n\nzero to get the subview\u2019s minimum size.\n\ninfinity to get the subview\u2019s maximum size.\n\nunspecified to get the subview\u2019s ideal size.\n\nIf you need only the view\u2019s height and width, you can use the sizeThatFits(_:) method instead.\n\nSee Also\nGetting subview characteristics\nfunc sizeThatFits(ProposedViewSize) -> CGSize\nAsks the subview for its size.\nvar spacing: ViewSpacing\nThe subviews\u2019s preferred spacing values.\nvar priority: Double\nThe layout priority of the subview."
    },
    {
        "title": "subscript(explicit:)",
        "url": "https://developer.apple.com/documentation/swiftui/viewdimensions/subscript(explicit:)-61812",
        "html": "Overview\n\nFind the horizontal offset of a particular guide in the corresponding view by using that guide as an index to read from the context:\n\n.alignmentGuide(.leading) { context in\n    context[.leading] - 10\n}\n\n\nThis subscript returns nil if no value exists for the guide.\n\nFor information about using subscripts in Swift to access member elements of a collection, list, or, sequence, see Subscripts in The Swift Programming Language.\n\nSee Also\nAccessing guide values\nsubscript(VerticalAlignment) -> CGFloat\nGets the value of the given vertical guide.\nsubscript(HorizontalAlignment) -> CGFloat\nGets the value of the given horizontal guide.\nsubscript(explicit _: VerticalAlignment) -> CGFloat?\nGets the explicit value of the given vertical alignment guide"
    },
    {
        "title": "updateCache(_:subviews:)",
        "url": "https://developer.apple.com/documentation/swiftui/layout/updatecache(_:subviews:)-9hkj9",
        "html": "Required Default implementation provided.\n\nParameters\ncache\n\nStorage for calculated data that you share among the methods of your custom layout container.\n\nsubviews\n\nA collection of proxy instances that represent the views arranged by the container. You can use the proxies in the collection to get information about the subviews as you calculate values to store in the cache.\n\nDiscussion\n\nIf your custom layout container creates a cache by implementing the makeCache(subviews:) method, SwiftUI calls the update method when your layout or its subviews change, giving you an opportunity to modify or invalidate the contents of the cache. The method\u2019s default implementation recreates the cache by calling the makeCache(subviews:) method, but you can provide your own implementation to take an incremental approach, if appropriate.\n\nDefault Implementations\nLayout Implementations\nfunc updateCache(inout Self.Cache, subviews: Self.Subviews)\nReinitializes a cache to a new value.\nSee Also\nManaging a cache\nfunc makeCache(subviews: Self.Subviews) -> Self.Cache\nCreates and initializes a cache for a layout instance.\n\nRequired Default implementation provided.\n\nassociatedtype Cache = Void\nCached values associated with the layout instance.\n\nRequired"
    },
    {
        "title": "place(at:anchor:proposal:)",
        "url": "https://developer.apple.com/documentation/swiftui/layoutsubview/place(at:anchor:proposal:)",
        "html": "Parameters\nposition\n\nThe place where the anchor of the subview should appear in its container view, relative to container\u2019s bounds.\n\nanchor\n\nThe unit point on the subview that appears at position. You can use a built-in point, like center, or you can create a custom UnitPoint.\n\nproposal\n\nA proposed size for the subview. In SwiftUI, views choose their own size, but can take a size proposal from their parent view into account when doing so.\n\nDiscussion\n\nCall this method from your implementation of the Layout protocol\u2019s placeSubviews(in:proposal:subviews:cache:) method for each subview arranged by the layout. Provide a position within the container\u2019s bounds where the subview should appear, and an anchor that indicates which part of the subview appears at that point.\n\nInclude a proposed size that the subview can take into account when sizing itself. To learn the subview\u2019s size for a given proposal before calling this method, you can call the dimensions(in:) or sizeThatFits(_:) method on the subview with the same proposal. That enables you to know subview sizes before committing to subview positions.\n\nImportant\n\nCall this method only from within your Layout type\u2019s implementation of the placeSubviews(in:proposal:subviews:cache:) method.\n\nIf you call this method more than once for a subview, the last call takes precedence. If you don\u2019t call this method for a subview, the subview appears at the center of its layout container and uses the layout container\u2019s size proposal."
    },
    {
        "title": "makeCache(subviews:)",
        "url": "https://developer.apple.com/documentation/swiftui/layout/makecache(subviews:)-23agy",
        "html": "Required Default implementation provided.\n\nParameters\nsubviews\n\nA collection of proxy instances that represent the views that the container arranges. You can use the proxies in the collection to get information about the subviews as you calculate values to store in the cache.\n\nReturn Value\n\nStorage for calculated data that you share among the methods of your custom layout container.\n\nDiscussion\n\nYou can optionally use a cache to preserve calculated values across calls to a layout container\u2019s methods. Many layout types don\u2019t need a cache, because SwiftUI automatically reuses both the results of calls into the layout and the values that the layout reads from its subviews. Rely on the protocol\u2019s default implementation of this method if you don\u2019t need a cache.\n\nHowever you might find a cache useful when:\n\nThe layout container repeats complex, intermediate calculations across calls like sizeThatFits(proposal:subviews:cache:), placeSubviews(in:proposal:subviews:cache:), and explicitAlignment(of:in:proposal:subviews:cache:). You might be able to improve performance by calculating values once and storing them in a cache.\n\nThe layout container reads many LayoutValueKey values from subviews. It might be more efficient to do that once and store the results in the cache, rather than rereading the subviews\u2019 values before each layout call.\n\nYou want to maintain working storage, like temporary Swift arrays, across calls into the layout, to minimize the number of allocation events.\n\nOnly implement a cache if profiling shows that it improves performance.\n\nInitialize a cache\n\nImplement the makeCache(subviews:) method to create a cache. You can add computed values to the cache right away, using information from the subviews input parameter, or you can do that later. The methods of the Layout protocol that can access the cache take the cache as an in-out parameter, which enables you to modify the cache anywhere that you can read it.\n\nYou can use any storage type that makes sense for your layout algorithm, but be sure that you only store data that you derive from the layout and its subviews (lazily, if possible). For this to work correctly, SwiftUI needs to be able to call this method to recreate the cache without changing the layout result.\n\nWhen you return a cache from this method, you implicitly define a type for your cache. Be sure to either make the type of the cache parameters on your other Layout protocol methods match, or use a type alias to define the Cache associated type.\n\nUpdate the cache\n\nIf the layout container or any of its subviews change, SwiftUI calls the updateCache(_:subviews:) method so you can modify or invalidate the contents of the cache. The default implementation of that method calls the makeCache(subviews:) method to recreate the cache, but you can provide your own implementation of the update method to take an incremental approach, if appropriate.\n\nDefault Implementations\nLayout Implementations\nfunc makeCache(subviews: Self.Subviews) -> Self.Cache\nReturns the empty value when your layout doesn\u2019t require a cache.\nAvailable when Cache is ().\nSee Also\nManaging a cache\nfunc updateCache(inout Self.Cache, subviews: Self.Subviews)\nUpdates the layout\u2019s cache when something changes.\n\nRequired Default implementation provided.\n\nassociatedtype Cache = Void\nCached values associated with the layout instance.\n\nRequired"
    },
    {
        "title": "sizeThatFits(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/layoutsubview/sizethatfits(_:)",
        "html": "Parameters\nproposal\n\nA proposed size for the subview. In SwiftUI, views choose their own size, but can take a size proposal from their parent view into account when doing so.\n\nReturn Value\n\nThe size that the subview chooses for itself, given the proposal from its container view.\n\nDiscussion\n\nUse this method as a convenience to get the width and height properties of the ViewDimensions instance returned by the dimensions(in:) method, reported as a CGSize instance.\n\nSee Also\nGetting subview characteristics\nfunc dimensions(in: ProposedViewSize) -> ViewDimensions\nAsks the subview for its dimensions and alignment guides.\nvar spacing: ViewSpacing\nThe subviews\u2019s preferred spacing values.\nvar priority: Double\nThe layout priority of the subview."
    },
    {
        "title": "spacing",
        "url": "https://developer.apple.com/documentation/swiftui/layoutsubview/spacing",
        "html": "Discussion\n\nThis ViewSpacing instance indicates how much space a subview in a custom layout prefers to have between it and the next view. It contains preferences for all edges, and might take into account the type of both this and the adjacent view. If your Layout type places subviews based on spacing preferences, use this instance to compute a distance between this subview and the next. See placeSubviews(in:proposal:subviews:cache:) for an example.\n\nYou can also merge this instance with instances from other subviews to construct a new instance that\u2019s suitable for the subviews\u2019 container. See spacing(subviews:cache:).\n\nSee Also\nGetting subview characteristics\nfunc dimensions(in: ProposedViewSize) -> ViewDimensions\nAsks the subview for its dimensions and alignment guides.\nfunc sizeThatFits(ProposedViewSize) -> CGSize\nAsks the subview for its size.\nvar priority: Double\nThe layout priority of the subview."
    },
    {
        "title": "priority",
        "url": "https://developer.apple.com/documentation/swiftui/layoutsubview/priority",
        "html": "Discussion\n\nIf you define a custom layout type using the Layout protocol, you can read this value from subviews and use the value when deciding how to assign space to subviews. For example, you can read all of the subview priorities into an array before placing the subviews in a custom layout type called BasicVStack:\n\nextension BasicVStack {\n    func placeSubviews(\n        in bounds: CGRect,\n        proposal: ProposedViewSize,\n        subviews: Subviews,\n        cache: inout ()\n    ) {\n        let priorities = subviews.map { subview in\n            subview.priority\n        }\n\n\n        // Place views, based on priorities.\n    }\n}\n\n\nSet the layout priority for a view that appears in your layout by applying the layoutPriority(_:) view modifier. For example, you can assign two different priorities to views that you arrange with BasicVStack:\n\nBasicVStack {\n    Text(\"High priority\")\n        .layoutPriority(10)\n    Text(\"Low priority\")\n        .layoutPriority(1)\n}\n\nSee Also\nGetting subview characteristics\nfunc dimensions(in: ProposedViewSize) -> ViewDimensions\nAsks the subview for its dimensions and alignment guides.\nfunc sizeThatFits(ProposedViewSize) -> CGSize\nAsks the subview for its size.\nvar spacing: ViewSpacing\nThe subviews\u2019s preferred spacing values."
    },
    {
        "title": "transformEffect(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/visualeffect/transformeffect(_:)-p663",
        "html": "Parameters\ntransform\n\nA ProjectionTransform to apply to the view.\n\nReturn Value\n\nAn effect that applies a projection transformation to the view\u2019s rendered output.\n\nDiscussion\n\nUse transformEffect(_:) to rotate, scale, translate, or skew the output of the view according to the provided ProjectionTransform.\n\nSee Also\nApplying a transform\nfunc transform3DEffect(AffineTransform3D) -> some VisualEffect\nApplies a 3D transformation to the receiver.\nBeta\nfunc transformEffect(CGAffineTransform) -> some VisualEffect\nApplies an affine transformation to the view\u2019s rendered output."
    },
    {
        "title": "init(wrappedValue:from:)",
        "url": "https://developer.apple.com/documentation/swiftui/physicalmetric/init(wrappedvalue:from:)-6yomd",
        "html": "See Also\nCreating a metric\ninit(wrappedValue: Value, from: UnitLength)\nCreates a value that maps the specified set of physical length measurements, in the specified unit, to a corresponding set of values measured in points in the associated scene.\nBeta\ninit(wrappedValue: CGPoint, from: UnitLength)\nCreates a value that maps the specified point, whose dimensions are specified in physical length measurements in the given unit, to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: CGSize, from: UnitLength)\nCreates a value that maps the specified size, in the specified unit to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: Size3D, from: UnitLength)\nCreates a value that maps the specified size, in the specified unit to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: Value, from: UnitLength)\nCreates a value that maps the specified single physical length measurement, in the specified unit, to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: CGRect, from: UnitLength)\nCreates a value that maps the specified rectangle, whose dimensions are specified in physical length measurements in the given unit, to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: Rect3D, from: UnitLength)\nCreates a value that maps the specified Rect3D, whose dimensions are specified in physical length measurements in the given unit, to the corresponding value in points in the associated scene.\nBeta"
    },
    {
        "title": "scaleEffect(_:anchor:)",
        "url": "https://developer.apple.com/documentation/swiftui/visualeffect/scaleeffect(_:anchor:)-96mc0",
        "html": "Parameters\ns\n\nThe scale factor for this view.\n\nanchor\n\nThe anchor point about which to scale the view. Defaults to center.\n\nReturn Value\n\nAn effect that scales this view by s in all dimensions.\n\nDiscussion\n\nThe original dimensions of the view are considered to be unchanged by scaling the contents. To change the dimensions of the view, use a modifier like frame() instead.\n\nSee Also\nScaling\nfunc scaleEffect(CGFloat, anchor: UnitPoint) -> some VisualEffect\nScales the view\u2019s rendered output by the given amount in both the horizontal and vertical directions, relative to an anchor point.\nfunc scaleEffect(CGSize, anchor: UnitPoint) -> some VisualEffect\nScales the view\u2019s rendered output by the given vertical and horizontal size amounts, relative to an anchor point.\nfunc scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some VisualEffect\nScales the view\u2019s rendered output by the given horizontal and vertical amounts, relative to an anchor point.\nfunc scaleEffect(Size3D, anchor: UnitPoint3D) -> some VisualEffect\nScales this view uniformly by the specified size in each dimension.\nBeta\nfunc scaleEffect(x: CGFloat, y: CGFloat, z: CGFloat, anchor: UnitPoint3D) -> some VisualEffect\nScales this view by the specified horizontal, vertical, and depth factors.\nBeta"
    },
    {
        "title": "init(wrappedValue:from:)",
        "url": "https://developer.apple.com/documentation/swiftui/physicalmetric/init(wrappedvalue:from:)-6wc61",
        "html": "See Also\nCreating a metric\ninit(wrappedValue: Value, from: UnitLength)\nCreates a value that maps the specified set of physical length measurements, in the specified unit, to a corresponding set of values measured in points in the associated scene.\nBeta\ninit(wrappedValue: CGPoint, from: UnitLength)\nCreates a value that maps the specified point, whose dimensions are specified in physical length measurements in the given unit, to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: CGSize, from: UnitLength)\nCreates a value that maps the specified size, in the specified unit to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: Point3D, from: UnitLength)\nCreates a value that maps the specified point, whose dimensions are specified in physical length measurements in the given unit, to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: Value, from: UnitLength)\nCreates a value that maps the specified single physical length measurement, in the specified unit, to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: CGRect, from: UnitLength)\nCreates a value that maps the specified rectangle, whose dimensions are specified in physical length measurements in the given unit, to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: Rect3D, from: UnitLength)\nCreates a value that maps the specified Rect3D, whose dimensions are specified in physical length measurements in the given unit, to the corresponding value in points in the associated scene.\nBeta"
    },
    {
        "title": "scaleEffect(_:anchor:)",
        "url": "https://developer.apple.com/documentation/swiftui/visualeffect/scaleeffect(_:anchor:)-9tvs2",
        "html": "Parameters\nscale\n\nA CGSize that represents the horizontal and vertical amount to scale the view.\n\nanchor\n\nThe point with a default of center that defines the location within the view from which to apply the transformation.\n\nReturn Value\n\nAn effect that scales the view\u2019s rendered output.\n\nSee Also\nScaling\nfunc scaleEffect(CGFloat, anchor: UnitPoint) -> some VisualEffect\nScales the view\u2019s rendered output by the given amount in both the horizontal and vertical directions, relative to an anchor point.\nfunc scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some VisualEffect\nScales the view\u2019s rendered output by the given horizontal and vertical amounts, relative to an anchor point.\nfunc scaleEffect(Size3D, anchor: UnitPoint3D) -> some VisualEffect\nScales this view uniformly by the specified size in each dimension.\nBeta\nfunc scaleEffect(CGFloat, anchor: UnitPoint3D) -> some VisualEffect\nScales this view uniformly by the specified factor.\nBeta\nfunc scaleEffect(x: CGFloat, y: CGFloat, z: CGFloat, anchor: UnitPoint3D) -> some VisualEffect\nScales this view by the specified horizontal, vertical, and depth factors.\nBeta"
    },
    {
        "title": "sizeThatFits(proposal:subviews:cache:)",
        "url": "https://developer.apple.com/documentation/swiftui/layout/sizethatfits(proposal:subviews:cache:)",
        "html": "Required\n\nParameters\nproposal\n\nA size proposal for the container. The container\u2019s parent view that calls this method might call the method more than once with different proposals to learn more about the container\u2019s flexibility before deciding which proposal to use for placement.\n\nsubviews\n\nA collection of proxies that represent the views that the container arranges. You can use the proxies in the collection to get information about the subviews as you determine how much space the container needs to display them.\n\ncache\n\nOptional storage for calculated data that you can share among the methods of your custom layout container. See makeCache(subviews:) for details.\n\nReturn Value\n\nA size that indicates how much space the container needs to arrange its subviews.\n\nDiscussion\n\nImplement this method to tell your custom layout container\u2019s parent view how much space the container needs for a set of subviews, given a size proposal. The parent might call this method more than once during a layout pass with different proposed sizes to test the flexibility of the container, using proposals like:\n\nThe zero proposal; respond with the layout\u2019s minimum size.\n\nThe infinity proposal; respond with the layout\u2019s maximum size.\n\nThe unspecified proposal; respond with the layout\u2019s ideal size.\n\nThe parent might also choose to test flexibility in one dimension at a time. For example, a horizontal stack might propose a fixed height and an infinite width, and then the same height with a zero width.\n\nThe following example calculates the size for a basic vertical stack that places views in a column, with no spacing between the views:\n\nprivate struct BasicVStack: Layout {\n    func sizeThatFits(\n        proposal: ProposedViewSize,\n        subviews: Subviews,\n        cache: inout ()\n    ) -> CGSize {\n        subviews.reduce(CGSize.zero) { result, subview in\n            let size = subview.sizeThatFits(.unspecified)\n            return CGSize(\n                width: max(result.width, size.width),\n                height: result.height + size.height)\n        }\n    }\n\n\n    // This layout also needs a placeSubviews() implementation.\n}\n\n\nThe implementation asks each subview for its ideal size by calling the sizeThatFits(_:) method with an unspecified proposed size. It then reduces these values into a single size that represents the maximum subview width and the sum of subview heights. Because this example isn\u2019t flexible, it ignores its size proposal input and always returns the same value for a given set of subviews.\n\nSwiftUI views choose their own size, so the layout engine always uses a value that you return from this method as the actual size of the composite view. That size factors into the construction of the bounds input to the placeSubviews(in:proposal:subviews:cache:) method.\n\nSee Also\nSizing the container and placing subviews\nfunc placeSubviews(in: CGRect, proposal: ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache)\nAssigns positions to each of the layout\u2019s subviews.\n\nRequired\n\ntypealias Subviews\nA collection of proxies for the subviews of a layout view."
    },
    {
        "title": "replacingUnspecifiedDimensions(by:)",
        "url": "https://developer.apple.com/documentation/swiftui/proposedviewsize/replacingunspecifieddimensions(by:)",
        "html": "Parameters\nsize\n\nA set of concrete values to use for the size proposal in place of any unspecified dimensions. The default value is 10 for both dimensions.\n\nReturn Value\n\nA new, fully specified size proposal.\n\nDiscussion\n\nUse the default value to prevent a flexible view from disappearing into a zero-sized frame, and ensure the unspecified value remains visible during debugging."
    },
    {
        "title": "rotation3DEffect(_:anchor:)",
        "url": "https://developer.apple.com/documentation/swiftui/visualeffect/rotation3deffect(_:anchor:)",
        "html": "Parameters\nrotation\n\nA rotation to apply to the content.\n\nanchor\n\nThe unit point within the content about which to perform the rotation. The default value is center.\n\nReturn Value\n\nA rotation effect.\n\nDiscussion\n\nThis effect causes the content to appear rotated, but doesn\u2019t change the content\u2019s frame. The following code applies a rotation of 45\u00b0 about the y-axis, using the default anchor point at the center of the content:\n\nModel3D(named: \"robot\")\n    .visualEffect { content, geometryProxy in\n        content\n            .rotation3DEffect(Rotation3D(angle: .degrees(45), axis: .y))\n    }\n\nSee Also\nRotating\nfunc rotationEffect(Angle, anchor: UnitPoint) -> some VisualEffect\nRotates content in two dimensions around the specified point.\nfunc rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some VisualEffect\nRenders content as if it\u2019s rotated in three dimensions around the specified axis.\nfunc perspectiveRotationEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint3D, perspective: CGFloat) -> some VisualEffect\nRenders content as if it\u2019s rotated in three dimensions around the specified axis.\nBeta\nfunc rotation3DEffect(Angle, axis: RotationAxis3D, anchor: UnitPoint3D) -> some VisualEffect\nRotates content by an angle about an axis that you specify as a rotation axis value.\nBeta\nfunc rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint3D) -> some VisualEffect\nRotates content by an angle about an axis that you specify as a tuple of elements.\nBeta"
    },
    {
        "title": "rotation3DEffect(_:axis:anchor:anchorZ:perspective:)",
        "url": "https://developer.apple.com/documentation/swiftui/visualeffect/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
        "html": "Parameters\nangle\n\nThe angle by which to rotate the content.\n\naxis\n\nThe axis of rotation, specified as a tuple with named elements for each of the three spatial dimensions.\n\nanchor\n\nA two dimensional unit point within the content about which to perform the rotation. The default value is center.\n\nanchorZ\n\nThe location on the z-axis around which to rotate the content. The default is 0.\n\nperspective\n\nThe relative vanishing point for the rotation. The default is 1.\n\nReturn Value\n\nA rotation effect.\n\nDiscussion\n\nUse this method to create the effect of rotating a two dimensional view in three dimensions around a specified axis of rotation. The effect projects the rotated content onto the original content\u2019s plane. Use the perspective input to control the renderer\u2019s vanishing point. The following example creates the appearance of rotating text 45\u02da about the y-axis:\n\nText(\"Rotation by passing an angle in degrees\")\n    .visualEffect { content, geometryProxy in\n        content\n            .rotation3DEffect(\n                .degrees(45),\n                axis: (x: 0.0, y: 1.0, z: 0.0),\n                anchor: .center,\n                anchorZ: 0,\n                perspective: 1)\n        }\n    .border(Color.gray)\n\n\nImportant\n\nIn visionOS, create this effect with perspectiveRotationEffect(_:axis:anchor:perspective:) instead. To truly rotate a view in three dimensions, use a 3D rotation effect without a perspective input like rotation3DEffect(_:axis:anchor:).\n\nSee Also\nRotating\nfunc rotationEffect(Angle, anchor: UnitPoint) -> some VisualEffect\nRotates content in two dimensions around the specified point.\nfunc perspectiveRotationEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint3D, perspective: CGFloat) -> some VisualEffect\nRenders content as if it\u2019s rotated in three dimensions around the specified axis.\nBeta\nfunc rotation3DEffect(Rotation3D, anchor: UnitPoint3D) -> some VisualEffect\nRotates content by the specified 3D rotation value.\nBeta\nfunc rotation3DEffect(Angle, axis: RotationAxis3D, anchor: UnitPoint3D) -> some VisualEffect\nRotates content by an angle about an axis that you specify as a rotation axis value.\nBeta\nfunc rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint3D) -> some VisualEffect\nRotates content by an angle about an axis that you specify as a tuple of elements.\nBeta"
    },
    {
        "title": "rotation3DEffect(_:axis:anchor:)",
        "url": "https://developer.apple.com/documentation/swiftui/visualeffect/rotation3deffect(_:axis:anchor:)-6lbql",
        "html": "Parameters\nangle\n\nThe angle by which to rotate the view\u2019s content.\n\naxis\n\nThe axis of rotation.\n\nanchor\n\nThe unit point within the content about which to perform the rotation. The default value is center.\n\nReturn Value\n\nA rotation effect.\n\nDiscussion\n\nThis effect causes the content to appear rotated, but doesn\u2019t change the content\u2019s frame. The following code applies a rotation of 45\u00b0 about the y-axis, using the default anchor point at the center of the content:\n\nModel3D(named: \"robot\")\n    .visualEffect { content, geometryProxy in\n        content\n            .rotation3DEffect(.degrees(45), axis: .y)\n    }\n\nSee Also\nRotating\nfunc rotationEffect(Angle, anchor: UnitPoint) -> some VisualEffect\nRotates content in two dimensions around the specified point.\nfunc rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some VisualEffect\nRenders content as if it\u2019s rotated in three dimensions around the specified axis.\nfunc perspectiveRotationEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint3D, perspective: CGFloat) -> some VisualEffect\nRenders content as if it\u2019s rotated in three dimensions around the specified axis.\nBeta\nfunc rotation3DEffect(Rotation3D, anchor: UnitPoint3D) -> some VisualEffect\nRotates content by the specified 3D rotation value.\nBeta\nfunc rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint3D) -> some VisualEffect\nRotates content by an angle about an axis that you specify as a tuple of elements.\nBeta"
    },
    {
        "title": "scaleEffect(x:y:anchor:)",
        "url": "https://developer.apple.com/documentation/swiftui/visualeffect/scaleeffect(x:y:anchor:)",
        "html": "Parameters\nx\n\nAn amount that represents the horizontal amount to scale the view. The default value is 1.0.\n\ny\n\nAn amount that represents the vertical amount to scale the view. The default value is 1.0.\n\nanchor\n\nThe point with a default of center that defines the location within the view from which to apply the transformation.\n\nReturn Value\n\nAn effect that scales the view\u2019s rendered output.\n\nSee Also\nScaling\nfunc scaleEffect(CGFloat, anchor: UnitPoint) -> some VisualEffect\nScales the view\u2019s rendered output by the given amount in both the horizontal and vertical directions, relative to an anchor point.\nfunc scaleEffect(CGSize, anchor: UnitPoint) -> some VisualEffect\nScales the view\u2019s rendered output by the given vertical and horizontal size amounts, relative to an anchor point.\nfunc scaleEffect(Size3D, anchor: UnitPoint3D) -> some VisualEffect\nScales this view uniformly by the specified size in each dimension.\nBeta\nfunc scaleEffect(CGFloat, anchor: UnitPoint3D) -> some VisualEffect\nScales this view uniformly by the specified factor.\nBeta\nfunc scaleEffect(x: CGFloat, y: CGFloat, z: CGFloat, anchor: UnitPoint3D) -> some VisualEffect\nScales this view by the specified horizontal, vertical, and depth factors.\nBeta"
    },
    {
        "title": "coordinateSpace",
        "url": "https://developer.apple.com/documentation/swiftui/coordinatespaceprotocol/coordinatespace",
        "html": "Required"
    },
    {
        "title": "opacity",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/opacity",
        "html": "Discussion\n\nSet this value to affect the opacity of content that you subsequently draw into the context. Changing this value has no impact on the content you previously drew into the context.\n\nSee Also\nSetting opacity and the blend mode\nvar blendMode: GraphicsContext.BlendMode\nThe blend mode used by drawing operations in the context.\nstruct BlendMode\nThe ways that a graphics context combines new content with background content."
    },
    {
        "title": "scrollView(axis:)",
        "url": "https://developer.apple.com/documentation/swiftui/coordinatespaceprotocol/scrollview(axis:)",
        "html": "See Also\nGetting built-in coordinate spaces\nstatic var global: GlobalCoordinateSpace\nThe global coordinate space at the root of the view hierarchy.\nAvailable when Self is GlobalCoordinateSpace.\nstatic var local: LocalCoordinateSpace\nThe local coordinate space of the current view.\nAvailable when Self is LocalCoordinateSpace.\nstatic func named(some Hashable) -> NamedCoordinateSpace\nCreates a named coordinate space using the given value.\nAvailable when Self is NamedCoordinateSpace.\nstatic var scrollView: NamedCoordinateSpace\nThe named coordinate space that is added by the system for the innermost containing scroll view.\nAvailable when Self is NamedCoordinateSpace."
    },
    {
        "title": "Cache",
        "url": "https://developer.apple.com/documentation/swiftui/layout/cache",
        "html": "Required\n\nDiscussion\n\nIf you create a cache for your custom layout, you can use a type alias to define this type as your data storage type. Alternatively, you can refer to the data storage type directly in all the places where you work with the cache.\n\nSee makeCache(subviews:) for more information.\n\nSee Also\nManaging a cache\nfunc makeCache(subviews: Self.Subviews) -> Self.Cache\nCreates and initializes a cache for a layout instance.\n\nRequired Default implementation provided.\n\nfunc updateCache(inout Self.Cache, subviews: Self.Subviews)\nUpdates the layout\u2019s cache when something changes.\n\nRequired Default implementation provided."
    },
    {
        "title": "environment",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/environment",
        "html": "Discussion\n\nSwiftUI initially sets this to the environment of the context\u2019s enclosing view. The context uses values like display resolution and the color scheme from the environment to resolve types like Image and Color. You can also access values stored in the environment for your own purposes."
    },
    {
        "title": "explicitAlignment(of:in:proposal:subviews:cache:)",
        "url": "https://developer.apple.com/documentation/swiftui/layout/explicitalignment(of:in:proposal:subviews:cache:)-3iqmu",
        "html": "Required Default implementations provided.\n\nParameters\nguide\n\nThe VerticalAlignment guide that the method calculates the position of.\n\nbounds\n\nThe region that the container view\u2019s parent allocates to the container view, specified in the parent\u2019s coordinate space.\n\nproposal\n\nA proposed size for the container.\n\nsubviews\n\nA collection of proxy instances that represent the views arranged by the container. You can use the proxies in the collection to get information about the subviews as you determine where to place the guide.\n\ncache\n\nOptional storage for calculated data that you can share among the methods of your custom layout container. See makeCache(subviews:) for details.\n\nReturn Value\n\nThe guide\u2019s position relative to the bounds. Return nil to indicate that the guide doesn\u2019t have an explicit value.\n\nDiscussion\n\nImplement this method to return a value for the specified alignment guide of a custom layout container. The value you return affects the placement of the container as a whole, but it doesn\u2019t affect how the container arranges subviews relative to one another.\n\nYou can use this method to put an alignment guide in a nonstandard position. For example, you can raise the container\u2019s bottom edge alignment guide by 10 points:\n\nextension BasicVStack {\n    func explicitAlignment(\n        of guide: VerticalAlignment,\n        in bounds: CGRect,\n        proposal: ProposedViewSize,\n        subviews: Subviews,\n        cache: inout ()\n    ) -> CGFloat? {\n        if guide == .bottom {\n            return bounds.minY - 10\n        }\n        return nil\n    }\n}\n\n\nThe above example returns nil for other guides to indicate that they don\u2019t have an explicit value. A guide without an explicit value behaves as it would for any other view. If you don\u2019t implement the method, the protocol\u2019s default implementation merges the subviews\u2019 guides.\n\nDefault Implementations\nLayout Implementations\nfunc explicitAlignment(of: VerticalAlignment, in: CGRect, proposal: ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CGFloat?\nReturns the result of merging the vertical alignment guides of all subviews.\nfunc explicitAlignment(of: HorizontalAlignment, in: CGRect, proposal: ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CGFloat?\nReturns the result of merging the horizontal alignment guides of all subviews.\nSee Also\nReporting layout container characteristics\nfunc explicitAlignment(of: HorizontalAlignment, in: CGRect, proposal: ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CGFloat?\nReturns the position of the specified horizontal alignment guide along the x axis.\n\nRequired Default implementations provided.\n\nfunc spacing(subviews: Self.Subviews, cache: inout Self.Cache) -> ViewSpacing\nReturns the preferred spacing values of the composite view.\n\nRequired Default implementation provided.\n\nstatic var layoutProperties: LayoutProperties\nProperties of a layout container.\n\nRequired Default implementation provided."
    },
    {
        "title": "spacing(subviews:cache:)",
        "url": "https://developer.apple.com/documentation/swiftui/layout/spacing(subviews:cache:)-86z2e",
        "html": "Required Default implementation provided.\n\nParameters\nsubviews\n\nA collection of proxy instances that represent the views that the container arranges. You can use the proxies in the collection to get information about the subviews as you determine how much spacing the container prefers around it.\n\ncache\n\nOptional storage for calculated data that you can share among the methods of your custom layout container. See makeCache(subviews:) for details.\n\nReturn Value\n\nA ViewSpacing instance that describes the preferred spacing around the container view.\n\nDiscussion\n\nImplement this method to provide custom spacing preferences for a layout container. The value you return affects the spacing around the container, but it doesn\u2019t affect how the container arranges subviews relative to one another inside the container.\n\nCreate a custom ViewSpacing instance for your container by initializing one with default values, and then merging that with spacing instances of certain subviews. For example, if you define a basic vertical stack that places subviews in a column, you could use the spacing preferences of the subview edges that make contact with the container\u2019s edges:\n\nextension BasicVStack {\n    func spacing(subviews: Subviews, cache: inout ()) -> ViewSpacing {\n        var spacing = ViewSpacing()\n\n\n        for index in subviews.indices {\n            var edges: Edge.Set = [.leading, .trailing]\n            if index == 0 { edges.formUnion(.top) }\n            if index == subviews.count - 1 { edges.formUnion(.bottom) }\n            spacing.formUnion(subviews[index].spacing, edges: edges)\n        }\n\n\n        return spacing\n    }\n}\n\n\nIn the above example, the first and last subviews contribute to the spacing above and below the container, respectively, while all subviews affect the spacing on the leading and trailing edges.\n\nIf you don\u2019t implement this method, the protocol provides a default implementation, namely spacing(subviews:cache:), that merges the spacing preferences across all subviews on all edges.\n\nDefault Implementations\nLayout Implementations\nfunc spacing(subviews: Self.Subviews, cache: inout Self.Cache) -> ViewSpacing\nReturns the union of all subview spacing.\nSee Also\nReporting layout container characteristics\nfunc explicitAlignment(of: HorizontalAlignment, in: CGRect, proposal: ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CGFloat?\nReturns the position of the specified horizontal alignment guide along the x axis.\n\nRequired Default implementations provided.\n\nfunc explicitAlignment(of: VerticalAlignment, in: CGRect, proposal: ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CGFloat?\nReturns the position of the specified vertical alignment guide along the y axis.\n\nRequired Default implementations provided.\n\nstatic var layoutProperties: LayoutProperties\nProperties of a layout container.\n\nRequired Default implementation provided."
    },
    {
        "title": "safeAreaInsets",
        "url": "https://developer.apple.com/documentation/swiftui/geometryproxy3d/safeareainsets",
        "html": "See Also\nAccessing geometry characteristics\nfunc frame(in: some CoordinateSpaceProtocol) -> Rect3D\nThe container view\u2019s bounds rectangle converted to a defined coordinate space.\nBeta\nvar size: Size3D\nThe size of the container view.\nBeta\nsubscript<T>(Anchor<T>) -> T\nResolves the value of an anchor to the container view.\nBeta\nfunc transform(in: some CoordinateSpaceProtocol) -> AffineTransform3D?\nThe container view\u2019s 3D transform converted to a defined coordinate space.\nBeta"
    },
    {
        "title": "colorMatrix(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/filter/colormatrix(_:)",
        "html": "Parameters\nmatrix\n\nA ColorMatrix instance used by the filter.\n\nReturn Value\n\nA filter that transforms color using the given matrix.\n\nDiscussion\n\nThis filter is equivalent to the feColorMatrix filter primitive defined by the Scalable Vector Graphics (SVG) specification.\n\nThe filter creates the output color [R', G', B', A'] at each pixel from an input color [R, G, B, A] by multiplying the input color by the square matrix formed by the first four columns of the ColorMatrix, then adding the fifth column to the result:\n\nR' = r1 \u2715 R + r2 \u2715 G + r3 \u2715 B + r4 \u2715 A + r5\nG' = g1 \u2715 R + g2 \u2715 G + g3 \u2715 B + g4 \u2715 A + g5\nB' = b1 \u2715 R + b2 \u2715 G + b3 \u2715 B + b4 \u2715 A + b5\nA' = a1 \u2715 R + a2 \u2715 G + a3 \u2715 B + a4 \u2715 A + a5\n\nSee Also\nManipulating color\nstatic func saturation(Double) -> GraphicsContext.Filter\nReturns a filter that applies a saturation adjustment.\nstatic func colorInvert(Double) -> GraphicsContext.Filter\nReturns a filter that inverts the color of their results.\nstatic func colorMultiply(Color) -> GraphicsContext.Filter\nReturns a filter that multiplies each color component by the matching component of a given color.\nstatic func hueRotation(Angle) -> GraphicsContext.Filter\nReturns a filter that applies a hue rotation adjustment.\nstatic func grayscale(Double) -> GraphicsContext.Filter\nReturns a filter that applies a grayscale adjustment."
    },
    {
        "title": "r3",
        "url": "https://developer.apple.com/documentation/swiftui/colormatrix/r3",
        "html": "See Also\nThird column\nvar g3: Float\nvar b3: Float\nvar a3: Float"
    },
    {
        "title": "r1",
        "url": "https://developer.apple.com/documentation/swiftui/colormatrix/r1",
        "html": "See Also\nFirst column\nvar g1: Float\nvar b1: Float\nvar a1: Float"
    },
    {
        "title": "g3",
        "url": "https://developer.apple.com/documentation/swiftui/colormatrix/g3",
        "html": "See Also\nThird column\nvar r3: Float\nvar b3: Float\nvar a3: Float"
    },
    {
        "title": "b2",
        "url": "https://developer.apple.com/documentation/swiftui/colormatrix/b2",
        "html": "See Also\nSecond column\nvar r2: Float\nvar g2: Float\nvar a2: Float"
    },
    {
        "title": "a5",
        "url": "https://developer.apple.com/documentation/swiftui/colormatrix/a5",
        "html": "See Also\nFifth column\nvar r5: Float\nvar g5: Float\nvar b5: Float"
    },
    {
        "title": "a3",
        "url": "https://developer.apple.com/documentation/swiftui/colormatrix/a3",
        "html": "See Also\nThird column\nvar r3: Float\nvar g3: Float\nvar b3: Float"
    },
    {
        "title": "container",
        "url": "https://developer.apple.com/documentation/swiftui/safearearegions/container",
        "html": "See Also\nGetting safe area regions\nstatic let all: SafeAreaRegions\nAll safe area regions.\nstatic let keyboard: SafeAreaRegions\nThe safe area matching the current extent of any software keyboard displayed over the view content."
    },
    {
        "title": "brightness(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/visualeffect/brightness(_:)",
        "html": "Parameters\namount\n\nA value between 0 (no effect) and 1 (full white brightening) that represents the intensity of the brightness effect.\n\nReturn Value\n\nAn effect that brightens the view by the specified amount.\n\nSee Also\nAdjusting Color\nfunc colorEffect(Shader, isEnabled: Bool) -> some VisualEffect\nReturns a new visual effect that applies shader to self as a filter effect on the color of each pixel.\nfunc contrast(Double) -> some VisualEffect\nSets the contrast and separation between similar colors in the view.\nfunc grayscale(Double) -> some VisualEffect\nAdds a grayscale effect to the view.\nfunc hueRotation(Angle) -> some VisualEffect\nApplies a hue rotation effect to the view.\nfunc saturation(Double) -> some VisualEffect\nAdjusts the color saturation of the view.\nfunc opacity(Double) -> some VisualEffect\nSets the transparency of the view."
    },
    {
        "title": "grayscale(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/visualeffect/grayscale(_:)",
        "html": "Parameters\namount\n\nThe intensity of grayscale to apply from 0.0 to less than 1.0. Values closer to 0.0 are more colorful, and values closer to 1.0 are less colorful.\n\nReturn Value\n\nAn effect that reduces the intensity of colors in the view.\n\nDiscussion\n\nA grayscale effect reduces the intensity of colors in the view.\n\nSee Also\nAdjusting Color\nfunc brightness(Double) -> some VisualEffect\nBrightens the view by the specified amount.\nfunc colorEffect(Shader, isEnabled: Bool) -> some VisualEffect\nReturns a new visual effect that applies shader to self as a filter effect on the color of each pixel.\nfunc contrast(Double) -> some VisualEffect\nSets the contrast and separation between similar colors in the view.\nfunc hueRotation(Angle) -> some VisualEffect\nApplies a hue rotation effect to the view.\nfunc saturation(Double) -> some VisualEffect\nAdjusts the color saturation of the view.\nfunc opacity(Double) -> some VisualEffect\nSets the transparency of the view."
    },
    {
        "title": "top",
        "url": "https://developer.apple.com/documentation/swiftui/verticalalignment/top",
        "html": "Discussion\n\nUse this guide to align the top edges of views:\n\nThe following code generates the image above using an HStack:\n\nstruct VerticalAlignmentTop: View {\n    var body: some View {\n        HStack(alignment: .top, spacing: 0) {\n            Color.red.frame(height: 1)\n            Text(\"Top\").font(.title).border(.gray)\n            Color.red.frame(height: 1)\n        }\n    }\n}\n\nSee Also\nGetting guides\nstatic let center: VerticalAlignment\nA guide that marks the vertical center of the view.\nstatic let bottom: VerticalAlignment\nA guide that marks the bottom edge of the view.\nstatic let firstTextBaseline: VerticalAlignment\nA guide that marks the top-most text baseline in a view.\nstatic let lastTextBaseline: VerticalAlignment\nA guide that marks the bottom-most text baseline in a view."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/color/init(_:)-1cwqj",
        "html": "Deprecated\n\nUse init(cgColor:) instead.\n\nParameters\ncolor\n\nA CGColor instance from which to create a color.\n\nSee Also\nDeprecated symbols\ninit(UIColor)\nCreates a color from a UIKit color.\nDeprecated\ninit(NSColor)\nCreates a color from an AppKit color.\nDeprecated\nvar cgColor: CGColor?\nA Core Graphics representation of the color, if available."
    },
    {
        "title": "yellow",
        "url": "https://developer.apple.com/documentation/swiftui/color/yellow",
        "html": "See Also\nGetting standard colors\nstatic let black: Color\nA black color suitable for use in UI elements.\nstatic let blue: Color\nA context-dependent blue color suitable for use in UI elements.\nstatic let brown: Color\nA context-dependent brown color suitable for use in UI elements.\nstatic let clear: Color\nA clear color suitable for use in UI elements.\nstatic let cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nstatic let gray: Color\nA context-dependent gray color suitable for use in UI elements.\nstatic let green: Color\nA context-dependent green color suitable for use in UI elements.\nstatic let indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nstatic let mint: Color\nA context-dependent mint color suitable for use in UI elements.\nstatic let orange: Color\nA context-dependent orange color suitable for use in UI elements.\nstatic let pink: Color\nA context-dependent pink color suitable for use in UI elements.\nstatic let purple: Color\nA context-dependent purple color suitable for use in UI elements.\nstatic let red: Color\nA context-dependent red color suitable for use in UI elements.\nstatic let teal: Color\nA context-dependent teal color suitable for use in UI elements.\nstatic let white: Color\nA white color suitable for use in UI elements."
    },
    {
        "title": "teal",
        "url": "https://developer.apple.com/documentation/swiftui/color/teal",
        "html": "See Also\nGetting standard colors\nstatic let black: Color\nA black color suitable for use in UI elements.\nstatic let blue: Color\nA context-dependent blue color suitable for use in UI elements.\nstatic let brown: Color\nA context-dependent brown color suitable for use in UI elements.\nstatic let clear: Color\nA clear color suitable for use in UI elements.\nstatic let cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nstatic let gray: Color\nA context-dependent gray color suitable for use in UI elements.\nstatic let green: Color\nA context-dependent green color suitable for use in UI elements.\nstatic let indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nstatic let mint: Color\nA context-dependent mint color suitable for use in UI elements.\nstatic let orange: Color\nA context-dependent orange color suitable for use in UI elements.\nstatic let pink: Color\nA context-dependent pink color suitable for use in UI elements.\nstatic let purple: Color\nA context-dependent purple color suitable for use in UI elements.\nstatic let red: Color\nA context-dependent red color suitable for use in UI elements.\nstatic let white: Color\nA white color suitable for use in UI elements.\nstatic let yellow: Color\nA context-dependent yellow color suitable for use in UI elements."
    },
    {
        "title": "mint",
        "url": "https://developer.apple.com/documentation/swiftui/color/mint",
        "html": "See Also\nGetting standard colors\nstatic let black: Color\nA black color suitable for use in UI elements.\nstatic let blue: Color\nA context-dependent blue color suitable for use in UI elements.\nstatic let brown: Color\nA context-dependent brown color suitable for use in UI elements.\nstatic let clear: Color\nA clear color suitable for use in UI elements.\nstatic let cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nstatic let gray: Color\nA context-dependent gray color suitable for use in UI elements.\nstatic let green: Color\nA context-dependent green color suitable for use in UI elements.\nstatic let indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nstatic let orange: Color\nA context-dependent orange color suitable for use in UI elements.\nstatic let pink: Color\nA context-dependent pink color suitable for use in UI elements.\nstatic let purple: Color\nA context-dependent purple color suitable for use in UI elements.\nstatic let red: Color\nA context-dependent red color suitable for use in UI elements.\nstatic let teal: Color\nA context-dependent teal color suitable for use in UI elements.\nstatic let white: Color\nA white color suitable for use in UI elements.\nstatic let yellow: Color\nA context-dependent yellow color suitable for use in UI elements."
    },
    {
        "title": "indigo",
        "url": "https://developer.apple.com/documentation/swiftui/color/indigo",
        "html": "See Also\nGetting standard colors\nstatic let black: Color\nA black color suitable for use in UI elements.\nstatic let blue: Color\nA context-dependent blue color suitable for use in UI elements.\nstatic let brown: Color\nA context-dependent brown color suitable for use in UI elements.\nstatic let clear: Color\nA clear color suitable for use in UI elements.\nstatic let cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nstatic let gray: Color\nA context-dependent gray color suitable for use in UI elements.\nstatic let green: Color\nA context-dependent green color suitable for use in UI elements.\nstatic let mint: Color\nA context-dependent mint color suitable for use in UI elements.\nstatic let orange: Color\nA context-dependent orange color suitable for use in UI elements.\nstatic let pink: Color\nA context-dependent pink color suitable for use in UI elements.\nstatic let purple: Color\nA context-dependent purple color suitable for use in UI elements.\nstatic let red: Color\nA context-dependent red color suitable for use in UI elements.\nstatic let teal: Color\nA context-dependent teal color suitable for use in UI elements.\nstatic let white: Color\nA white color suitable for use in UI elements.\nstatic let yellow: Color\nA context-dependent yellow color suitable for use in UI elements."
    },
    {
        "title": "brown",
        "url": "https://developer.apple.com/documentation/swiftui/color/brown",
        "html": "See Also\nGetting standard colors\nstatic let black: Color\nA black color suitable for use in UI elements.\nstatic let blue: Color\nA context-dependent blue color suitable for use in UI elements.\nstatic let clear: Color\nA clear color suitable for use in UI elements.\nstatic let cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nstatic let gray: Color\nA context-dependent gray color suitable for use in UI elements.\nstatic let green: Color\nA context-dependent green color suitable for use in UI elements.\nstatic let indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nstatic let mint: Color\nA context-dependent mint color suitable for use in UI elements.\nstatic let orange: Color\nA context-dependent orange color suitable for use in UI elements.\nstatic let pink: Color\nA context-dependent pink color suitable for use in UI elements.\nstatic let purple: Color\nA context-dependent purple color suitable for use in UI elements.\nstatic let red: Color\nA context-dependent red color suitable for use in UI elements.\nstatic let teal: Color\nA context-dependent teal color suitable for use in UI elements.\nstatic let white: Color\nA white color suitable for use in UI elements.\nstatic let yellow: Color\nA context-dependent yellow color suitable for use in UI elements."
    },
    {
        "title": "clear",
        "url": "https://developer.apple.com/documentation/swiftui/color/clear",
        "html": "See Also\nGetting standard colors\nstatic let black: Color\nA black color suitable for use in UI elements.\nstatic let blue: Color\nA context-dependent blue color suitable for use in UI elements.\nstatic let brown: Color\nA context-dependent brown color suitable for use in UI elements.\nstatic let cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nstatic let gray: Color\nA context-dependent gray color suitable for use in UI elements.\nstatic let green: Color\nA context-dependent green color suitable for use in UI elements.\nstatic let indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nstatic let mint: Color\nA context-dependent mint color suitable for use in UI elements.\nstatic let orange: Color\nA context-dependent orange color suitable for use in UI elements.\nstatic let pink: Color\nA context-dependent pink color suitable for use in UI elements.\nstatic let purple: Color\nA context-dependent purple color suitable for use in UI elements.\nstatic let red: Color\nA context-dependent red color suitable for use in UI elements.\nstatic let teal: Color\nA context-dependent teal color suitable for use in UI elements.\nstatic let white: Color\nA white color suitable for use in UI elements.\nstatic let yellow: Color\nA context-dependent yellow color suitable for use in UI elements."
    },
    {
        "title": "cyan",
        "url": "https://developer.apple.com/documentation/swiftui/color/cyan",
        "html": "See Also\nGetting standard colors\nstatic let black: Color\nA black color suitable for use in UI elements.\nstatic let blue: Color\nA context-dependent blue color suitable for use in UI elements.\nstatic let brown: Color\nA context-dependent brown color suitable for use in UI elements.\nstatic let clear: Color\nA clear color suitable for use in UI elements.\nstatic let gray: Color\nA context-dependent gray color suitable for use in UI elements.\nstatic let green: Color\nA context-dependent green color suitable for use in UI elements.\nstatic let indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nstatic let mint: Color\nA context-dependent mint color suitable for use in UI elements.\nstatic let orange: Color\nA context-dependent orange color suitable for use in UI elements.\nstatic let pink: Color\nA context-dependent pink color suitable for use in UI elements.\nstatic let purple: Color\nA context-dependent purple color suitable for use in UI elements.\nstatic let red: Color\nA context-dependent red color suitable for use in UI elements.\nstatic let teal: Color\nA context-dependent teal color suitable for use in UI elements.\nstatic let white: Color\nA white color suitable for use in UI elements.\nstatic let yellow: Color\nA context-dependent yellow color suitable for use in UI elements."
    },
    {
        "title": "green",
        "url": "https://developer.apple.com/documentation/swiftui/color/green",
        "html": "See Also\nGetting standard colors\nstatic let black: Color\nA black color suitable for use in UI elements.\nstatic let blue: Color\nA context-dependent blue color suitable for use in UI elements.\nstatic let brown: Color\nA context-dependent brown color suitable for use in UI elements.\nstatic let clear: Color\nA clear color suitable for use in UI elements.\nstatic let cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nstatic let gray: Color\nA context-dependent gray color suitable for use in UI elements.\nstatic let indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nstatic let mint: Color\nA context-dependent mint color suitable for use in UI elements.\nstatic let orange: Color\nA context-dependent orange color suitable for use in UI elements.\nstatic let pink: Color\nA context-dependent pink color suitable for use in UI elements.\nstatic let purple: Color\nA context-dependent purple color suitable for use in UI elements.\nstatic let red: Color\nA context-dependent red color suitable for use in UI elements.\nstatic let teal: Color\nA context-dependent teal color suitable for use in UI elements.\nstatic let white: Color\nA white color suitable for use in UI elements.\nstatic let yellow: Color\nA context-dependent yellow color suitable for use in UI elements."
    },
    {
        "title": "blue",
        "url": "https://developer.apple.com/documentation/swiftui/color/blue",
        "html": "See Also\nGetting standard colors\nstatic let black: Color\nA black color suitable for use in UI elements.\nstatic let brown: Color\nA context-dependent brown color suitable for use in UI elements.\nstatic let clear: Color\nA clear color suitable for use in UI elements.\nstatic let cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nstatic let gray: Color\nA context-dependent gray color suitable for use in UI elements.\nstatic let green: Color\nA context-dependent green color suitable for use in UI elements.\nstatic let indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nstatic let mint: Color\nA context-dependent mint color suitable for use in UI elements.\nstatic let orange: Color\nA context-dependent orange color suitable for use in UI elements.\nstatic let pink: Color\nA context-dependent pink color suitable for use in UI elements.\nstatic let purple: Color\nA context-dependent purple color suitable for use in UI elements.\nstatic let red: Color\nA context-dependent red color suitable for use in UI elements.\nstatic let teal: Color\nA context-dependent teal color suitable for use in UI elements.\nstatic let white: Color\nA white color suitable for use in UI elements.\nstatic let yellow: Color\nA context-dependent yellow color suitable for use in UI elements."
    },
    {
        "title": "subscript(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/viewdimensions/subscript(_:)-965l2",
        "html": "Overview\n\nFind the offset of a particular guide in the corresponding view by using that guide as an index to read from the context:\n\n.alignmentGuide(.leading) { context in\n    context[.leading] - 10\n}\n\n\nFor information about using subscripts in Swift to access member elements of a collection, list, or, sequence, see Subscripts in The Swift Programming Language.\n\nSee Also\nAccessing guide values\nsubscript(VerticalAlignment) -> CGFloat\nGets the value of the given vertical guide.\nsubscript(explicit _: VerticalAlignment) -> CGFloat?\nGets the explicit value of the given vertical alignment guide\nsubscript(explicit _: HorizontalAlignment) -> CGFloat?\nGets the explicit value of the given horizontal alignment guide."
    },
    {
        "title": "gray",
        "url": "https://developer.apple.com/documentation/swiftui/color/gray",
        "html": "See Also\nGetting standard colors\nstatic let black: Color\nA black color suitable for use in UI elements.\nstatic let blue: Color\nA context-dependent blue color suitable for use in UI elements.\nstatic let brown: Color\nA context-dependent brown color suitable for use in UI elements.\nstatic let clear: Color\nA clear color suitable for use in UI elements.\nstatic let cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nstatic let green: Color\nA context-dependent green color suitable for use in UI elements.\nstatic let indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nstatic let mint: Color\nA context-dependent mint color suitable for use in UI elements.\nstatic let orange: Color\nA context-dependent orange color suitable for use in UI elements.\nstatic let pink: Color\nA context-dependent pink color suitable for use in UI elements.\nstatic let purple: Color\nA context-dependent purple color suitable for use in UI elements.\nstatic let red: Color\nA context-dependent red color suitable for use in UI elements.\nstatic let teal: Color\nA context-dependent teal color suitable for use in UI elements.\nstatic let white: Color\nA white color suitable for use in UI elements.\nstatic let yellow: Color\nA context-dependent yellow color suitable for use in UI elements."
    },
    {
        "title": "width",
        "url": "https://developer.apple.com/documentation/swiftui/viewdimensions/width",
        "html": "See Also\nGetting dimensions\nvar height: CGFloat\nThe view\u2019s height."
    },
    {
        "title": "defaultValue(in:)",
        "url": "https://developer.apple.com/documentation/swiftui/alignmentid/defaultvalue(in:)",
        "html": "Required\n\nParameters\ncontext\n\nThe context of the view that you apply the alignment guide to. The context gives you the view\u2019s dimensions, as well as the values of other alignment guides that apply to the view, including both built-in and custom guides. You can use any of these values, if helpful, to calculate the value for your custom guide.\n\nReturn Value\n\nThe offset of the guide from the origin in the view\u2019s coordinate space.\n\nDiscussion\n\nImplement this method when you create a type that conforms to the AlignmentID protocol. Use the method to calculate the default offset of the corresponding alignment guide. SwiftUI interprets the value that you return as an offset in the coordinate space of the view that\u2019s being laid out. For example, you can use the context to return a value that\u2019s one-third of the height of the view:\n\nprivate struct FirstThirdAlignment: AlignmentID {\n    static func defaultValue(in context: ViewDimensions) -> CGFloat {\n        context.height / 3\n    }\n}\n\n\nYou can override the default value that this method returns for a particular guide by adding the alignmentGuide(_:computeValue:) view modifier to a particular view."
    },
    {
        "title": "subscript(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/viewdimensions/subscript(_:)-7dtda",
        "html": "Overview\n\nFind the offset of a particular guide in the corresponding view by using that guide as an index to read from the context:\n\n.alignmentGuide(.top) { context in\n    context[.top] - 10\n}\n\n\nFor information about using subscripts in Swift to access member elements of a collection, list, or, sequence, see Subscripts in The Swift Programming Language.\n\nSee Also\nAccessing guide values\nsubscript(HorizontalAlignment) -> CGFloat\nGets the value of the given horizontal guide.\nsubscript(explicit _: VerticalAlignment) -> CGFloat?\nGets the explicit value of the given vertical alignment guide\nsubscript(explicit _: HorizontalAlignment) -> CGFloat?\nGets the explicit value of the given horizontal alignment guide."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/color/init(_:)-4y4hk",
        "html": "See Also\nCreating a custom color\ninit<T>(T)\nCreates a color that represents the specified custom color.\nfunc resolve(in: EnvironmentValues) -> Color.Resolved\nEvaluates this color to a resolved color given the current context."
    },
    {
        "title": "height",
        "url": "https://developer.apple.com/documentation/swiftui/viewdimensions/height",
        "html": "See Also\nGetting dimensions\nvar width: CGFloat\nThe view\u2019s width."
    },
    {
        "title": "pink",
        "url": "https://developer.apple.com/documentation/swiftui/color/pink",
        "html": "See Also\nGetting standard colors\nstatic let black: Color\nA black color suitable for use in UI elements.\nstatic let blue: Color\nA context-dependent blue color suitable for use in UI elements.\nstatic let brown: Color\nA context-dependent brown color suitable for use in UI elements.\nstatic let clear: Color\nA clear color suitable for use in UI elements.\nstatic let cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nstatic let gray: Color\nA context-dependent gray color suitable for use in UI elements.\nstatic let green: Color\nA context-dependent green color suitable for use in UI elements.\nstatic let indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nstatic let mint: Color\nA context-dependent mint color suitable for use in UI elements.\nstatic let orange: Color\nA context-dependent orange color suitable for use in UI elements.\nstatic let purple: Color\nA context-dependent purple color suitable for use in UI elements.\nstatic let red: Color\nA context-dependent red color suitable for use in UI elements.\nstatic let teal: Color\nA context-dependent teal color suitable for use in UI elements.\nstatic let white: Color\nA white color suitable for use in UI elements.\nstatic let yellow: Color\nA context-dependent yellow color suitable for use in UI elements."
    },
    {
        "title": "scaleEffect(_:anchor:)",
        "url": "https://developer.apple.com/documentation/swiftui/visualeffect/scaleeffect(_:anchor:)-3cxql",
        "html": "Parameters\ns\n\nThe amount to scale the view in the view in both the horizontal and vertical directions.\n\nanchor\n\nThe point with a default of center that defines the location within the view from which to apply the transformation.\n\nReturn Value\n\nAn effect that scales the view\u2019s rendered output.\n\nSee Also\nScaling\nfunc scaleEffect(CGSize, anchor: UnitPoint) -> some VisualEffect\nScales the view\u2019s rendered output by the given vertical and horizontal size amounts, relative to an anchor point.\nfunc scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some VisualEffect\nScales the view\u2019s rendered output by the given horizontal and vertical amounts, relative to an anchor point.\nfunc scaleEffect(Size3D, anchor: UnitPoint3D) -> some VisualEffect\nScales this view uniformly by the specified size in each dimension.\nBeta\nfunc scaleEffect(CGFloat, anchor: UnitPoint3D) -> some VisualEffect\nScales this view uniformly by the specified factor.\nBeta\nfunc scaleEffect(x: CGFloat, y: CGFloat, z: CGFloat, anchor: UnitPoint3D) -> some VisualEffect\nScales this view by the specified horizontal, vertical, and depth factors.\nBeta"
    },
    {
        "title": "scaleEffect(x:y:z:anchor:)",
        "url": "https://developer.apple.com/documentation/swiftui/visualeffect/scaleeffect(x:y:z:anchor:)",
        "html": "Parameters\nx\n\nThe horizontal scale factor for this view.\n\ny\n\nThe vertical scale factor for this view.\n\nz\n\nThe depth scale factor for this view.\n\nanchor\n\nThe anchor point about which to scale the view. Defaults to center.\n\nReturn Value\n\nAn effect that scales this view by x,y, and z.\n\nDiscussion\n\nThe original dimensions of the view are considered to be unchanged by scaling the contents. To change the dimensions of the view, use a modifier like frame() instead.\n\nSee Also\nScaling\nfunc scaleEffect(CGFloat, anchor: UnitPoint) -> some VisualEffect\nScales the view\u2019s rendered output by the given amount in both the horizontal and vertical directions, relative to an anchor point.\nfunc scaleEffect(CGSize, anchor: UnitPoint) -> some VisualEffect\nScales the view\u2019s rendered output by the given vertical and horizontal size amounts, relative to an anchor point.\nfunc scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some VisualEffect\nScales the view\u2019s rendered output by the given horizontal and vertical amounts, relative to an anchor point.\nfunc scaleEffect(Size3D, anchor: UnitPoint3D) -> some VisualEffect\nScales this view uniformly by the specified size in each dimension.\nBeta\nfunc scaleEffect(CGFloat, anchor: UnitPoint3D) -> some VisualEffect\nScales this view uniformly by the specified factor.\nBeta"
    },
    {
        "title": "rotationEffect(_:anchor:)",
        "url": "https://developer.apple.com/documentation/swiftui/visualeffect/rotationeffect(_:anchor:)",
        "html": "Parameters\nangle\n\nThe angle by which to rotate the content.\n\nanchor\n\nA unit point within the content about which to perform the rotation. The default value is center.\n\nReturn Value\n\nA rotation effect.\n\nDiscussion\n\nThis effect rotates the content around the axis that points out of the xy-plane. It has no effect on the content\u2019s frame. The following code rotates text by 22\u02da and then draws a border around the modified view to show that the frame remains unchanged by the rotation:\n\nText(\"Rotation by passing an angle in degrees\")\n    .visualEffect { content, geometryProxy in\n        content\n            .rotationEffect(.degrees(22))\n    }\n    .border(Color.gray)\n\n\nSee Also\nRotating\nfunc rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some VisualEffect\nRenders content as if it\u2019s rotated in three dimensions around the specified axis.\nfunc perspectiveRotationEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint3D, perspective: CGFloat) -> some VisualEffect\nRenders content as if it\u2019s rotated in three dimensions around the specified axis.\nBeta\nfunc rotation3DEffect(Rotation3D, anchor: UnitPoint3D) -> some VisualEffect\nRotates content by the specified 3D rotation value.\nBeta\nfunc rotation3DEffect(Angle, axis: RotationAxis3D, anchor: UnitPoint3D) -> some VisualEffect\nRotates content by an angle about an axis that you specify as a rotation axis value.\nBeta\nfunc rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint3D) -> some VisualEffect\nRotates content by an angle about an axis that you specify as a tuple of elements.\nBeta"
    },
    {
        "title": "perspectiveRotationEffect(_:axis:anchor:perspective:)",
        "url": "https://developer.apple.com/documentation/swiftui/visualeffect/perspectiverotationeffect(_:axis:anchor:perspective:)",
        "html": "Parameters\nangle\n\nThe angle by which to rotate the content.\n\naxis\n\nThe axis of rotation, specified as a tuple with named elements for each of the three spatial dimensions.\n\nanchor\n\nA unit point within the content about which to perform the rotation. The default value is center.\n\nperspective\n\nThe relative vanishing point for the rotation. The default is 1.\n\nReturn Value\n\nA rotation effect.\n\nDiscussion\n\nUse this method to create the effect of rotating content in three dimensions around a specified axis of rotation. The modifier projects two dimensional content onto the original content\u2019s plane. Use the perspective input to control the renderer\u2019s vanishing point. The following example creates the appearance of rotating text 45\u02da about the y-axis:\n\nText(\"Rotation by passing an angle in degrees\")\n    .visualEffect { content, geometryProxy in\n        content\n            .perspectiveRotationEffect(\n                .degrees(45),\n                axis: (x: 0.0, y: 1.0, z: 0.0),\n                anchor: .center,\n                perspective: 1)\n        }\n    .border(Color.gray)\n\n\nImportant\n\nTo truly rotate content in three dimensions, use a 3D rotation effect without a perspective input like rotation3DEffect(_:axis:anchor:).\n\nSee Also\nRotating\nfunc rotationEffect(Angle, anchor: UnitPoint) -> some VisualEffect\nRotates content in two dimensions around the specified point.\nfunc rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some VisualEffect\nRenders content as if it\u2019s rotated in three dimensions around the specified axis.\nfunc rotation3DEffect(Rotation3D, anchor: UnitPoint3D) -> some VisualEffect\nRotates content by the specified 3D rotation value.\nBeta\nfunc rotation3DEffect(Angle, axis: RotationAxis3D, anchor: UnitPoint3D) -> some VisualEffect\nRotates content by an angle about an axis that you specify as a rotation axis value.\nBeta\nfunc rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint3D) -> some VisualEffect\nRotates content by an angle about an axis that you specify as a tuple of elements.\nBeta"
    },
    {
        "title": "rotation3DEffect(_:axis:anchor:)",
        "url": "https://developer.apple.com/documentation/swiftui/visualeffect/rotation3deffect(_:axis:anchor:)-3j5nl",
        "html": "Parameters\nangle\n\nThe angle by which to rotate the content.\n\naxis\n\nThe axis of rotation, specified as a tuple with named elements for each of the three spatial dimensions.\n\nanchor\n\nThe unit point within the content about which to perform the rotation. The default value is center.\n\nReturn Value\n\nA rotation effect.\n\nDiscussion\n\nThis effect causes the content to appear rotated, but doesn\u2019t change the content\u2019s frame. The following code applies a rotation of 45\u00b0 about the y-axis, using the default anchor point at the center of the content:\n\nModel3D(named: \"robot\")\n    .visualEffect { content, geometryProxy in\n        content\n            .rotation3DEffect(.degrees(45), axis: (x: 0, y: 1, z: 0))\n    }\n\nSee Also\nRotating\nfunc rotationEffect(Angle, anchor: UnitPoint) -> some VisualEffect\nRotates content in two dimensions around the specified point.\nfunc rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some VisualEffect\nRenders content as if it\u2019s rotated in three dimensions around the specified axis.\nfunc perspectiveRotationEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint3D, perspective: CGFloat) -> some VisualEffect\nRenders content as if it\u2019s rotated in three dimensions around the specified axis.\nBeta\nfunc rotation3DEffect(Rotation3D, anchor: UnitPoint3D) -> some VisualEffect\nRotates content by the specified 3D rotation value.\nBeta\nfunc rotation3DEffect(Angle, axis: RotationAxis3D, anchor: UnitPoint3D) -> some VisualEffect\nRotates content by an angle about an axis that you specify as a rotation axis value.\nBeta"
    },
    {
        "title": "named(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/coordinatespaceprotocol/named(_:)",
        "html": "Parameters\nname\n\nA unique value that identifies the coordinate space.\n\nReturn Value\n\nA named coordinate space identified by the given value.\n\nDiscussion\n\nUse the coordinateSpace(_:) modifier to assign a name to the local coordinate space of a parent view. Child views can then refer to that coordinate space using .named(_:).\n\nSee Also\nGetting built-in coordinate spaces\nstatic var global: GlobalCoordinateSpace\nThe global coordinate space at the root of the view hierarchy.\nAvailable when Self is GlobalCoordinateSpace.\nstatic var local: LocalCoordinateSpace\nThe local coordinate space of the current view.\nAvailable when Self is LocalCoordinateSpace.\nstatic var scrollView: NamedCoordinateSpace\nThe named coordinate space that is added by the system for the innermost containing scroll view.\nAvailable when Self is NamedCoordinateSpace.\nstatic func scrollView(axis: Axis) -> Self\nThe named coordinate space that is added by the system for the innermost containing scroll view that allows scrolling along the provided axis.\nAvailable when Self is NamedCoordinateSpace."
    },
    {
        "title": "LocalCoordinateSpace",
        "url": "https://developer.apple.com/documentation/swiftui/localcoordinatespace",
        "html": "Topics\nCreating the coordinate space\ninit()\nRelationships\nConforms To\nCoordinateSpaceProtocol\nSee Also\nSupporting types\nstruct GlobalCoordinateSpace\nThe global coordinate space at the root of the view hierarchy.\nstruct NamedCoordinateSpace\nA named coordinate space."
    },
    {
        "title": "size",
        "url": "https://developer.apple.com/documentation/swiftui/geometryproxy3d/size",
        "html": "See Also\nAccessing geometry characteristics\nfunc frame(in: some CoordinateSpaceProtocol) -> Rect3D\nThe container view\u2019s bounds rectangle converted to a defined coordinate space.\nBeta\nvar safeAreaInsets: EdgeInsets3D\nThe safe area inset of the container view.\nBeta\nsubscript<T>(Anchor<T>) -> T\nResolves the value of an anchor to the container view.\nBeta\nfunc transform(in: some CoordinateSpaceProtocol) -> AffineTransform3D?\nThe container view\u2019s 3D transform converted to a defined coordinate space.\nBeta"
    },
    {
        "title": "GlobalCoordinateSpace",
        "url": "https://developer.apple.com/documentation/swiftui/globalcoordinatespace",
        "html": "Topics\nCreating the coordinate space\ninit()\nRelationships\nConforms To\nCoordinateSpaceProtocol\nSee Also\nSupporting types\nstruct LocalCoordinateSpace\nThe local coordinate space of the current view.\nstruct NamedCoordinateSpace\nA named coordinate space."
    },
    {
        "title": "NamedCoordinateSpace",
        "url": "https://developer.apple.com/documentation/swiftui/namedcoordinatespace",
        "html": "Overview\n\nUse the coordinateSpace(_:) modifier to assign a name to the local coordinate space of a parent view. Child views can then refer to that coordinate space using .named(_:).\n\nRelationships\nConforms To\nCoordinateSpaceProtocol\nEquatable\nSee Also\nSupporting types\nstruct GlobalCoordinateSpace\nThe global coordinate space at the root of the view hierarchy.\nstruct LocalCoordinateSpace\nThe local coordinate space of the current view."
    },
    {
        "title": "frame(in:)",
        "url": "https://developer.apple.com/documentation/swiftui/geometryproxy3d/frame(in:)",
        "html": "See Also\nAccessing geometry characteristics\nvar size: Size3D\nThe size of the container view.\nBeta\nvar safeAreaInsets: EdgeInsets3D\nThe safe area inset of the container view.\nBeta\nsubscript<T>(Anchor<T>) -> T\nResolves the value of an anchor to the container view.\nBeta\nfunc transform(in: some CoordinateSpaceProtocol) -> AffineTransform3D?\nThe container view\u2019s 3D transform converted to a defined coordinate space.\nBeta"
    },
    {
        "title": "transform(in:)",
        "url": "https://developer.apple.com/documentation/swiftui/geometryproxy3d/transform(in:)",
        "html": "Discussion\n\nIf the view doesn\u2019t have a well-defined transform, such as if it\u2019s affected by a projection transform, this function may return nil.\n\nSee Also\nAccessing geometry characteristics\nfunc frame(in: some CoordinateSpaceProtocol) -> Rect3D\nThe container view\u2019s bounds rectangle converted to a defined coordinate space.\nBeta\nvar size: Size3D\nThe size of the container view.\nBeta\nvar safeAreaInsets: EdgeInsets3D\nThe safe area inset of the container view.\nBeta\nsubscript<T>(Anchor<T>) -> T\nResolves the value of an anchor to the container view.\nBeta"
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/menuactiondismissbehavior/automatic",
        "html": "Discussion\n\nIn most cases, the default behavior is enabled. There are some cases, like Stepper, that use disabled by default.\n\nSee Also\nGetting dismiss behaviors\nstatic let disabled: MenuActionDismissBehavior\nNever dismiss the presented menu after performing an action.\nstatic let enabled: MenuActionDismissBehavior\nAlways dismiss the presented menu after performing an action."
    },
    {
        "title": "subscript(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/geometryproxy3d/subscript(_:)",
        "html": "See Also\nAccessing geometry characteristics\nfunc frame(in: some CoordinateSpaceProtocol) -> Rect3D\nThe container view\u2019s bounds rectangle converted to a defined coordinate space.\nBeta\nvar size: Size3D\nThe size of the container view.\nBeta\nvar safeAreaInsets: EdgeInsets3D\nThe safe area inset of the container view.\nBeta\nfunc transform(in: some CoordinateSpaceProtocol) -> AffineTransform3D?\nThe container view\u2019s 3D transform converted to a defined coordinate space.\nBeta"
    },
    {
        "title": "enabled",
        "url": "https://developer.apple.com/documentation/swiftui/menuactiondismissbehavior/enabled",
        "html": "See Also\nGetting dismiss behaviors\nstatic let automatic: MenuActionDismissBehavior\nUse the a dismissal behavior that\u2019s appropriate for the given context.\nstatic let disabled: MenuActionDismissBehavior\nNever dismiss the presented menu after performing an action."
    },
    {
        "title": "z",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/z",
        "html": "See Also\nGetting the point\u2019s coordinates\nvar x: CGFloat\nThe normalized distance from the origin to the point in the horizontal direction.\nBeta\nvar y: CGFloat\nThe normalized distance from the origin to the point in the vertical dimension.\nBeta"
    },
    {
        "title": "disabled",
        "url": "https://developer.apple.com/documentation/swiftui/menuactiondismissbehavior/disabled",
        "html": "See Also\nGetting dismiss behaviors\nstatic let automatic: MenuActionDismissBehavior\nUse the a dismissal behavior that\u2019s appropriate for the given context.\nstatic let enabled: MenuActionDismissBehavior\nAlways dismiss the presented menu after performing an action."
    },
    {
        "title": "g1",
        "url": "https://developer.apple.com/documentation/swiftui/colormatrix/g1",
        "html": "See Also\nFirst column\nvar r1: Float\nvar b1: Float\nvar a1: Float"
    },
    {
        "title": "b1",
        "url": "https://developer.apple.com/documentation/swiftui/colormatrix/b1",
        "html": "See Also\nFirst column\nvar r1: Float\nvar g1: Float\nvar a1: Float"
    },
    {
        "title": "r5",
        "url": "https://developer.apple.com/documentation/swiftui/colormatrix/r5",
        "html": "See Also\nFifth column\nvar g5: Float\nvar b5: Float\nvar a5: Float"
    },
    {
        "title": "g5",
        "url": "https://developer.apple.com/documentation/swiftui/colormatrix/g5",
        "html": "See Also\nFifth column\nvar r5: Float\nvar b5: Float\nvar a5: Float"
    },
    {
        "title": "b5",
        "url": "https://developer.apple.com/documentation/swiftui/colormatrix/b5",
        "html": "See Also\nFifth column\nvar r5: Float\nvar g5: Float\nvar a5: Float"
    },
    {
        "title": "saturation(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/visualeffect/saturation(_:)",
        "html": "Parameters\namount\n\nThe amount of saturation to apply to the view.\n\nReturn Value\n\nAn effect that adjusts the saturation of the view.\n\nDiscussion\n\nUse color saturation to increase or decrease the intensity of colors in a view.\n\nSee Also\n\ncontrast(_:)\n\nSee Also\nAdjusting Color\nfunc brightness(Double) -> some VisualEffect\nBrightens the view by the specified amount.\nfunc colorEffect(Shader, isEnabled: Bool) -> some VisualEffect\nReturns a new visual effect that applies shader to self as a filter effect on the color of each pixel.\nfunc contrast(Double) -> some VisualEffect\nSets the contrast and separation between similar colors in the view.\nfunc grayscale(Double) -> some VisualEffect\nAdds a grayscale effect to the view.\nfunc hueRotation(Angle) -> some VisualEffect\nApplies a hue rotation effect to the view.\nfunc opacity(Double) -> some VisualEffect\nSets the transparency of the view."
    },
    {
        "title": "contrast(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/visualeffect/contrast(_:)",
        "html": "Parameters\namount\n\nThe intensity of color contrast to apply. negative values invert colors in addition to applying contrast.\n\nReturn Value\n\nAn effect that applies color contrast to the view.\n\nDiscussion\n\nApply contrast to a view to increase or decrease the separation between similar colors in the view.\n\nSee Also\nAdjusting Color\nfunc brightness(Double) -> some VisualEffect\nBrightens the view by the specified amount.\nfunc colorEffect(Shader, isEnabled: Bool) -> some VisualEffect\nReturns a new visual effect that applies shader to self as a filter effect on the color of each pixel.\nfunc grayscale(Double) -> some VisualEffect\nAdds a grayscale effect to the view.\nfunc hueRotation(Angle) -> some VisualEffect\nApplies a hue rotation effect to the view.\nfunc saturation(Double) -> some VisualEffect\nAdjusts the color saturation of the view.\nfunc opacity(Double) -> some VisualEffect\nSets the transparency of the view."
    },
    {
        "title": "r2",
        "url": "https://developer.apple.com/documentation/swiftui/colormatrix/r2",
        "html": "See Also\nSecond column\nvar g2: Float\nvar b2: Float\nvar a2: Float"
    },
    {
        "title": "ColorRenderingMode.nonLinear",
        "url": "https://developer.apple.com/documentation/swiftui/colorrenderingmode/nonlinear",
        "html": "Discussion\n\nColor component values outside the range [0, 1] produce undefined results. This color space is gamma corrected.\n\nSee Also\nGetting rendering modes\ncase extendedLinear\nThe extended linear sRGB working color space.\ncase linear\nThe linear sRGB working color space."
    },
    {
        "title": "a1",
        "url": "https://developer.apple.com/documentation/swiftui/colormatrix/a1",
        "html": "See Also\nFirst column\nvar r1: Float\nvar g1: Float\nvar b1: Float"
    },
    {
        "title": "hueRotation(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/visualeffect/huerotation(_:)",
        "html": "Parameters\nangle\n\nThe hue rotation angle to apply to the colors in the view.\n\nReturn Value\n\nAn effect that shifts all of the colors in the view.\n\nDiscussion\n\nUse hue rotation effect to shift all of the colors in a view according to the angle you specify.\n\nSee Also\nAdjusting Color\nfunc brightness(Double) -> some VisualEffect\nBrightens the view by the specified amount.\nfunc colorEffect(Shader, isEnabled: Bool) -> some VisualEffect\nReturns a new visual effect that applies shader to self as a filter effect on the color of each pixel.\nfunc contrast(Double) -> some VisualEffect\nSets the contrast and separation between similar colors in the view.\nfunc grayscale(Double) -> some VisualEffect\nAdds a grayscale effect to the view.\nfunc saturation(Double) -> some VisualEffect\nAdjusts the color saturation of the view.\nfunc opacity(Double) -> some VisualEffect\nSets the transparency of the view."
    },
    {
        "title": "opacity(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/visualeffect/opacity(_:)",
        "html": "Parameters\nopacity\n\nA value between 0 (fully transparent) and 1 (fully opaque).\n\nReturn Value\n\nAn effect that sets the transparency of the view.\n\nDiscussion\n\nWhen applying the opacity(_:) effect to a view that has already had its opacity transformed, the effect of the underlying opacity transformation is multiplied.\n\nSee Also\nAdjusting Color\nfunc brightness(Double) -> some VisualEffect\nBrightens the view by the specified amount.\nfunc colorEffect(Shader, isEnabled: Bool) -> some VisualEffect\nReturns a new visual effect that applies shader to self as a filter effect on the color of each pixel.\nfunc contrast(Double) -> some VisualEffect\nSets the contrast and separation between similar colors in the view.\nfunc grayscale(Double) -> some VisualEffect\nAdds a grayscale effect to the view.\nfunc hueRotation(Angle) -> some VisualEffect\nApplies a hue rotation effect to the view.\nfunc saturation(Double) -> some VisualEffect\nAdjusts the color saturation of the view."
    },
    {
        "title": "g2",
        "url": "https://developer.apple.com/documentation/swiftui/colormatrix/g2",
        "html": "See Also\nSecond column\nvar r2: Float\nvar b2: Float\nvar a2: Float"
    },
    {
        "title": "b4",
        "url": "https://developer.apple.com/documentation/swiftui/colormatrix/b4",
        "html": "See Also\nFourth column\nvar r4: Float\nvar g4: Float\nvar a4: Float"
    },
    {
        "title": "a2",
        "url": "https://developer.apple.com/documentation/swiftui/colormatrix/a2",
        "html": "See Also\nSecond column\nvar r2: Float\nvar g2: Float\nvar b2: Float"
    },
    {
        "title": "r4",
        "url": "https://developer.apple.com/documentation/swiftui/colormatrix/r4",
        "html": "See Also\nFourth column\nvar g4: Float\nvar b4: Float\nvar a4: Float"
    },
    {
        "title": "a4",
        "url": "https://developer.apple.com/documentation/swiftui/colormatrix/a4",
        "html": "See Also\nFourth column\nvar r4: Float\nvar g4: Float\nvar b4: Float"
    },
    {
        "title": "g4",
        "url": "https://developer.apple.com/documentation/swiftui/colormatrix/g4",
        "html": "See Also\nFourth column\nvar r4: Float\nvar b4: Float\nvar a4: Float"
    },
    {
        "title": "draw(_:at:anchor:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/draw(_:at:anchor:)-7l217",
        "html": "Parameters\nimage\n\nThe Image to draw. Before drawing, the method converts the image to a GraphicsContext.ResolvedImage by calling resolve(_:).\n\npoint\n\nA point within the rectangle of the resolved image to anchor to a point in the context.\n\nanchor\n\nA UnitPoint within the context to align the image with. The default is center.\n\nDiscussion\n\nThe current context state defines the full drawing operation. For example, the current transformation and clip shapes affect how SwiftUI draws the image.\n\nSee Also\nDrawing an image\nfunc draw(Image, in: CGRect, style: FillStyle)\nDraws an image into the context, using the specified rectangle as a layout frame.\nfunc draw(GraphicsContext.ResolvedImage, at: CGPoint, anchor: UnitPoint)\nDraws a resolved image into the context, aligning an anchor within the image to a point in the context.\nfunc draw(GraphicsContext.ResolvedImage, in: CGRect, style: FillStyle)\nDraws a resolved image into the context, using the specified rectangle as a layout frame.\nfunc resolve(Image) -> GraphicsContext.ResolvedImage\nGets a version of an image that\u2019s fixed with the current values of the graphics context\u2019s environment.\nstruct ResolvedImage\nAn image resolved to a particular environment."
    },
    {
        "title": "draw(_:at:anchor:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/draw(_:at:anchor:)-7jmr8",
        "html": "Parameters\nsymbol\n\nThe GraphicsContext.ResolvedSymbol view to draw. Get a resolved symbol by calling resolveSymbol(id:) with the identifier that you use to tag the corresponding child view during Canvas initialization.\n\npoint\n\nA point within the rectangle of the resolved symbol to anchor to a point in the context.\n\nanchor\n\nA UnitPoint within the context to align the symbol with. The default is center.\n\nDiscussion\n\nThe current context state defines the full drawing operation. For example, the current transformation and clip shapes affect how SwiftUI draws the symbol.\n\nSee Also\nDrawing a child view\nfunc draw(GraphicsContext.ResolvedSymbol, in: CGRect)\nDraws a resolved symbol into the context, using the specified rectangle as a layout frame.\nfunc resolveSymbol<ID>(id: ID) -> GraphicsContext.ResolvedSymbol?\nGets the identified child view as a resolved symbol, if the view exists.\nstruct ResolvedSymbol\nA static sequence of drawing operations that may be drawn multiple times, preserving their resolution independence."
    },
    {
        "title": "draw(_:in:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/draw(_:in:)-7r5go",
        "html": "Parameters\nsymbol\n\nThe GraphicsContext.ResolvedSymbol to draw. Get a resolved symbol by calling resolveSymbol(id:) with the identifier that you use to tag the corresponding child view during Canvas initialization.\n\nrect\n\nThe rectangle in the current user space to draw the symbol in.\n\nDiscussion\n\nThe current context state defines the full drawing operation. For example, the current transformation and clip shapes affect how SwiftUI draws the symbol.\n\nSee Also\nDrawing a child view\nfunc draw(GraphicsContext.ResolvedSymbol, at: CGPoint, anchor: UnitPoint)\nDraws a resolved symbol into the context, aligning an anchor within the symbol to a point in the context.\nfunc resolveSymbol<ID>(id: ID) -> GraphicsContext.ResolvedSymbol?\nGets the identified child view as a resolved symbol, if the view exists.\nstruct ResolvedSymbol\nA static sequence of drawing operations that may be drawn multiple times, preserving their resolution independence."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/init()",
        "html": "Discussion\n\nA view\u2019s origin appears in the top-left-back corner in a left-to-right language environment, with positive x toward the right. It appears in the top-right-back corner in a right-to-left language, with positive x toward the left. Positive y is always toward the bottom of the view, and positive z points toward the front.\n\nSee Also\nCreating a point\ninit(x: CGFloat, y: CGFloat, z: CGFloat)\nCreates a 3D unit point with the specified offsets.\nBeta"
    },
    {
        "title": "subscript(dynamicMember:)",
        "url": "https://developer.apple.com/documentation/swiftui/shaderlibrary/subscript(dynamicmember:)-swift.type.subscript",
        "html": "Overview\n\nTypically this subscript is used implicitly via the dynamic member syntax, for example:\n\nlet fn = ShaderLibrary.myFunction\n\nwhich creates a reference to the MSL function called myFunction()."
    },
    {
        "title": "GraphicsContext.FilterOptions",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/filteroptions",
        "html": "Overview\n\nYou can use filter options to configure a GraphicsContext.Filter that you apply to a GraphicsContext with the addFilter(_:options:) method.\n\nTopics\nGetting filter options\nstatic var linearColor: GraphicsContext.FilterOptions\nAn option that causes the filter to perform calculations in a linear color space.\nRelationships\nConforms To\nEquatable\nExpressibleByArrayLiteral\nOptionSet\nRawRepresentable\nSendable\nSetAlgebra\nSee Also\nFiltering\nfunc addFilter(GraphicsContext.Filter, options: GraphicsContext.FilterOptions)\nAdds a filter that applies to subsequent drawing operations.\nstruct Filter\nA type that applies image processing operations to rendered content.\nstruct BlurOptions\nOptions that configure the graphics context filter that creates blur.\nstruct ShadowOptions\nOptions that configure the graphics context filter that creates shadows."
    },
    {
        "title": "CoordinateSpace.named(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/coordinatespace/named(_:)",
        "html": "See Also\nGetting coordinate spaces\ncase global\nThe global coordinate space at the root of the view hierarchy.\ncase local\nThe local coordinate space of the current view."
    },
    {
        "title": "subscript(dynamicMember:)",
        "url": "https://developer.apple.com/documentation/swiftui/shaderlibrary/subscript(dynamicmember:)-swift.subscript",
        "html": "Overview\n\nTypically this subscript is used implicitly via the dynamic member syntax, for example:\n\nlet fn = ShaderLibrary.default.myFunction\n\nwhich creates a reference to the MSL function called myFunction()."
    },
    {
        "title": "y",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/y",
        "html": "See Also\nGetting the point\u2019s coordinates\nvar x: CGFloat\nThe normalized distance from the origin to the point in the horizontal direction.\nBeta\nvar z: CGFloat\nThe normalized distance from the origin to the point in the depth dimension.\nBeta"
    },
    {
        "title": "topLeading",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/topleading",
        "html": "Discussion\n\nThe leading edge appears on the left in a left-to-right language environment and on the right in a right-to-left environment.\n\nSee Also\nGetting top points\nstatic let topLeadingBack: UnitPoint3D\nA point that\u2019s in the top-leading-back corner of a view.\nBeta\nstatic let topLeadingFront: UnitPoint3D\nA point that\u2019s in the top-leading-front corner of a view.\nBeta\nstatic let topBack: UnitPoint3D\nA point that\u2019s centered horizontally on the top-back edge of a view.\nBeta\nstatic let top: UnitPoint3D\nA point that\u2019s centered horizontally and in the depth dimension on the top face of a view.\nBeta\nstatic let topFront: UnitPoint3D\nA point that\u2019s centered horizontally on the top-front edge of a view.\nBeta\nstatic let topTrailingBack: UnitPoint3D\nA point that\u2019s in the top-trailing-back corner of a view.\nBeta\nstatic let topTrailing: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the top-trailing edge of a view.\nBeta\nstatic let topTrailingFront: UnitPoint3D\nA point that\u2019s in the top-trailing-front corner of a view.\nBeta"
    },
    {
        "title": "GraphicsContext.Filter",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/filter",
        "html": "Overview\n\nCreate and configure a filter that produces an image processing effect, like adding a drop shadow or a blur effect, by calling one of the factory methods defined by the Filter structure. Call the addFilter(_:options:) method to add the filter to a GraphicsContext. The filter only affects content that you draw into the context after adding the filter.\n\nTopics\nChanging brightness and contrast\nstatic func brightness(Double) -> GraphicsContext.Filter\nReturns a filter that applies a brightness adjustment.\nstatic func contrast(Double) -> GraphicsContext.Filter\nReturns a filter that applies a contrast adjustment.\nManipulating color\nstatic func saturation(Double) -> GraphicsContext.Filter\nReturns a filter that applies a saturation adjustment.\nstatic func colorInvert(Double) -> GraphicsContext.Filter\nReturns a filter that inverts the color of their results.\nstatic func colorMultiply(Color) -> GraphicsContext.Filter\nReturns a filter that multiplies each color component by the matching component of a given color.\nstatic func hueRotation(Angle) -> GraphicsContext.Filter\nReturns a filter that applies a hue rotation adjustment.\nstatic func grayscale(Double) -> GraphicsContext.Filter\nReturns a filter that applies a grayscale adjustment.\nstatic func colorMatrix(ColorMatrix) -> GraphicsContext.Filter\nReturns a filter that multiplies by a given color matrix.\nAdding blur\nstatic func blur(radius: CGFloat, options: GraphicsContext.BlurOptions) -> GraphicsContext.Filter\nReturns a filter that applies a Gaussian blur.\nAdding a shadow\nstatic func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat, blendMode: GraphicsContext.BlendMode, options: GraphicsContext.ShadowOptions) -> GraphicsContext.Filter\nReturns a filter that adds a shadow.\nAdjusting opacity\nstatic var luminanceToAlpha: GraphicsContext.Filter\nReturns a filter that sets the opacity of each pixel based on its luminance.\nstatic func alphaThreshold(min: Double, max: Double, color: Color) -> GraphicsContext.Filter\nReturns a filter that replaces each pixel with alpha components within a range by a constant color, or transparency otherwise.\nAdding a transformation\nstatic func projectionTransform(ProjectionTransform) -> GraphicsContext.Filter\nReturns a filter that that transforms the rasterized form of subsequent graphics primitives.\nUsing a custom Metal shader\nstatic func colorShader(Shader) -> GraphicsContext.Filter\nReturns a filter that applies shader to the color of each source pixel.\nstatic func distortionShader(Shader, maxSampleOffset: CGSize) -> GraphicsContext.Filter\nReturns a filter that applies shader as a geometric distortion effect on the location of each pixel.\nstatic func layerShader(Shader, maxSampleOffset: CGSize) -> GraphicsContext.Filter\nReturns a filter that applies shader to the contents of the source layer.\nRelationships\nConforms To\nSendable\nSee Also\nFiltering\nfunc addFilter(GraphicsContext.Filter, options: GraphicsContext.FilterOptions)\nAdds a filter that applies to subsequent drawing operations.\nstruct FilterOptions\nOptions that configure a filter that you add to a graphics context.\nstruct BlurOptions\nOptions that configure the graphics context filter that creates blur.\nstruct ShadowOptions\nOptions that configure the graphics context filter that creates shadows."
    },
    {
        "title": "transform",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/transform",
        "html": "Discussion\n\nModify this matrix to transform content that you subsequently draw into the context. Changes that you make don\u2019t affect existing content.\n\nSee Also\nApplying transforms\nfunc scaleBy(x: CGFloat, y: CGFloat)\nScales subsequent drawing operations by an amount in each dimension.\nfunc rotate(by: Angle)\nRotates subsequent drawing operations by an angle.\nfunc translateBy(x: CGFloat, y: CGFloat)\nMoves subsequent drawing operations by an amount in each dimension.\nfunc concatenate(CGAffineTransform)\nAppends the given transform to the context\u2019s existing transform."
    },
    {
        "title": "topLeadingFront",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/topleadingfront",
        "html": "Discussion\n\nThe leading edge appears on the left in a left-to-right language environment and on the right in a right-to-left environment.\n\nSee Also\nGetting top points\nstatic let topLeadingBack: UnitPoint3D\nA point that\u2019s in the top-leading-back corner of a view.\nBeta\nstatic let topLeading: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the top-leading edge of a view.\nBeta\nstatic let topBack: UnitPoint3D\nA point that\u2019s centered horizontally on the top-back edge of a view.\nBeta\nstatic let top: UnitPoint3D\nA point that\u2019s centered horizontally and in the depth dimension on the top face of a view.\nBeta\nstatic let topFront: UnitPoint3D\nA point that\u2019s centered horizontally on the top-front edge of a view.\nBeta\nstatic let topTrailingBack: UnitPoint3D\nA point that\u2019s in the top-trailing-back corner of a view.\nBeta\nstatic let topTrailing: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the top-trailing edge of a view.\nBeta\nstatic let topTrailingFront: UnitPoint3D\nA point that\u2019s in the top-trailing-front corner of a view.\nBeta"
    },
    {
        "title": "top",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/top",
        "html": "See Also\nGetting top points\nstatic let topLeadingBack: UnitPoint3D\nA point that\u2019s in the top-leading-back corner of a view.\nBeta\nstatic let topLeading: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the top-leading edge of a view.\nBeta\nstatic let topLeadingFront: UnitPoint3D\nA point that\u2019s in the top-leading-front corner of a view.\nBeta\nstatic let topBack: UnitPoint3D\nA point that\u2019s centered horizontally on the top-back edge of a view.\nBeta\nstatic let topFront: UnitPoint3D\nA point that\u2019s centered horizontally on the top-front edge of a view.\nBeta\nstatic let topTrailingBack: UnitPoint3D\nA point that\u2019s in the top-trailing-back corner of a view.\nBeta\nstatic let topTrailing: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the top-trailing edge of a view.\nBeta\nstatic let topTrailingFront: UnitPoint3D\nA point that\u2019s in the top-trailing-front corner of a view.\nBeta"
    },
    {
        "title": "withCGContext(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/withcgcontext(content:)",
        "html": "Parameters\ncontent\n\nA closure that receives a CGContext that you use to perform drawing operations, just like you draw into a GraphicsContext instance. Any filters, blend mode settings, clip masks, and other state set before calling withCGContext(content:) apply to drawing operations in the Core Graphics context as well. Any state you set on the Core Graphics context is lost when the closure returns. Accessing the Core Graphics context after the closure returns produces undefined behavior.\n\nDiscussion\n\nUse this method to use existing drawing code that relies on Core Graphics primitives."
    },
    {
        "title": "translateBy(x:y:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/translateby(x:y:)",
        "html": "Parameters\nx\n\nThe amount to move in the horizontal direction.\n\ny\n\nThe amount to move in the vertical direction.\n\nDiscussion\n\nCalling this method is equivalent to updating the context\u2019s transform directly using the given translation amount:\n\ntransform = transform.translatedBy(x: x, y: y)\n\nSee Also\nApplying transforms\nfunc scaleBy(x: CGFloat, y: CGFloat)\nScales subsequent drawing operations by an amount in each dimension.\nfunc rotate(by: Angle)\nRotates subsequent drawing operations by an angle.\nfunc concatenate(CGAffineTransform)\nAppends the given transform to the context\u2019s existing transform.\nvar transform: CGAffineTransform\nThe current transform matrix, defining user space coordinates."
    },
    {
        "title": "back",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/back",
        "html": "See Also\nGetting middle points\nstatic let leadingBack: UnitPoint3D\nA point that\u2019s centered vertically on the leading-back edge of a view.\nBeta\nstatic let leading: UnitPoint3D\nA point that\u2019s centered vertically and in the depth dimension on the leading face of a view.\nBeta\nstatic let leadingFront: UnitPoint3D\nA point that\u2019s centered vertically on the leading-front edge of a view.\nBeta\nstatic let center: UnitPoint3D\nA point that\u2019s centered in a view.\nBeta\nstatic let front: UnitPoint3D\nA point that\u2019s centered horizontally and vertically on the front face of a view.\nBeta\nstatic let trailingBack: UnitPoint3D\nA point that\u2019s centered vertically on the trailing-back edge of a view.\nBeta\nstatic let trailing: UnitPoint3D\nA point that\u2019s centered vertically and in the depth dimension on the trailing face of a view.\nBeta\nstatic let trailingFront: UnitPoint3D\nA point that\u2019s centered vertically on the trailing-front edge of a view.\nBeta"
    },
    {
        "title": "rotate(by:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/rotate(by:)",
        "html": "Parameters\nangle\n\nThe amount to rotate.\n\nDiscussion\n\nCalling this method is equivalent to updating the context\u2019s transform directly using the angle parameter:\n\ntransform = transform.rotated(by: angle.radians)\n\nSee Also\nApplying transforms\nfunc scaleBy(x: CGFloat, y: CGFloat)\nScales subsequent drawing operations by an amount in each dimension.\nfunc translateBy(x: CGFloat, y: CGFloat)\nMoves subsequent drawing operations by an amount in each dimension.\nfunc concatenate(CGAffineTransform)\nAppends the given transform to the context\u2019s existing transform.\nvar transform: CGAffineTransform\nThe current transform matrix, defining user space coordinates."
    },
    {
        "title": "GraphicsContext.ShadowOptions",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/shadowoptions",
        "html": "Overview\n\nYou can use a set of these options when you call shadow(color:radius:x:y:blendMode:options:) to create a GraphicsContext.Filter that adds a drop shadow to an object that you draw into a GraphicsContext.\n\nTopics\nGetting shadow options\nstatic var disablesGroup: GraphicsContext.ShadowOptions\nAn option that causes the filter to composite the object and its shadow separately in the current layer.\nstatic var invertsAlpha: GraphicsContext.ShadowOptions\nAn option that causes the filter to invert the alpha of the shadow.\nstatic var shadowAbove: GraphicsContext.ShadowOptions\nAn option that causes the filter to draw the shadow above the object, rather than below it.\nstatic var shadowOnly: GraphicsContext.ShadowOptions\nAn option that causes the filter to draw only the shadow, and omit the source object.\nRelationships\nConforms To\nEquatable\nExpressibleByArrayLiteral\nOptionSet\nRawRepresentable\nSendable\nSetAlgebra\nSee Also\nFiltering\nfunc addFilter(GraphicsContext.Filter, options: GraphicsContext.FilterOptions)\nAdds a filter that applies to subsequent drawing operations.\nstruct Filter\nA type that applies image processing operations to rendered content.\nstruct FilterOptions\nOptions that configure a filter that you add to a graphics context.\nstruct BlurOptions\nOptions that configure the graphics context filter that creates blur."
    },
    {
        "title": "scaleBy(x:y:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/scaleby(x:y:)",
        "html": "Parameters\nx\n\nThe amount to scale in the horizontal direction.\n\ny\n\nThe amount to scale in the vertical direction.\n\nDiscussion\n\nCalling this method is equivalent to updating the context\u2019s transform directly using the given scale factors:\n\ntransform = transform.scaledBy(x: x, y: y)\n\nSee Also\nApplying transforms\nfunc rotate(by: Angle)\nRotates subsequent drawing operations by an angle.\nfunc translateBy(x: CGFloat, y: CGFloat)\nMoves subsequent drawing operations by an amount in each dimension.\nfunc concatenate(CGAffineTransform)\nAppends the given transform to the context\u2019s existing transform.\nvar transform: CGAffineTransform\nThe current transform matrix, defining user space coordinates."
    },
    {
        "title": "GraphicsContext.BlendMode",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.struct",
        "html": "Overview\n\nUse one of these values to set the blendMode property of a GraphicsContext. The value that you set affects how content that you draw replaces or combines with content that you previously drew into the context.\n\nTopics\nGetting the default\nstatic var normal: GraphicsContext.BlendMode\nA mode that paints source image samples over the background image samples.\nDarkening\nstatic var darken: GraphicsContext.BlendMode\nA mode that creates composite image samples by choosing the darker samples from either the source image or the background.\nstatic var multiply: GraphicsContext.BlendMode\nA mode that multiplies the source image samples with the background image samples.\nstatic var colorBurn: GraphicsContext.BlendMode\nA mode that darkens background image samples to reflect the source image samples.\nstatic var plusDarker: GraphicsContext.BlendMode\nA mode that adds the inverse of the color components of the source and background images, and then inverts the result, producing a darkened composite.\nLightening\nstatic var lighten: GraphicsContext.BlendMode\nA mode that creates composite image samples by choosing the lighter samples from either the source image or the background.\nstatic var screen: GraphicsContext.BlendMode\nA mode that multiplies the inverse of the source image samples with the inverse of the background image samples.\nstatic var colorDodge: GraphicsContext.BlendMode\nA mode that brightens the background image samples to reflect the source image samples.\nstatic var plusLighter: GraphicsContext.BlendMode\nA mode that adds the components of the source and background images, resulting in a lightened composite.\nAdding contrast\nstatic var overlay: GraphicsContext.BlendMode\nA mode that either multiplies or screens the source image samples with the background image samples, depending on the background color.\nstatic var softLight: GraphicsContext.BlendMode\nA mode that either darkens or lightens colors, depending on the source image sample color.\nstatic var hardLight: GraphicsContext.BlendMode\nA mode that either multiplies or screens colors, depending on the source image sample color.\nInverting\nstatic var difference: GraphicsContext.BlendMode\nA mode that subtracts the brighter of the source image sample color or the background image sample color from the other.\nstatic var exclusion: GraphicsContext.BlendMode\nA mode that produces an effect similar to that produced by the difference blend mode, but with lower contrast.\nMixing color components\nstatic var hue: GraphicsContext.BlendMode\nA mode that uses the luminance and saturation values of the background with the hue of the source image.\nstatic var saturation: GraphicsContext.BlendMode\nA mode that uses the luminance and hue values of the background with the saturation of the source image.\nstatic var color: GraphicsContext.BlendMode\nA mode that uses the luminance values of the background with the hue and saturation values of the source image.\nstatic var luminosity: GraphicsContext.BlendMode\nA mode that uses the hue and saturation of the background with the luminance of the source image.\nAccessing porter-duff modes\nstatic var clear: GraphicsContext.BlendMode\nA mode that clears any pixels that the source image overwrites.\nstatic var copy: GraphicsContext.BlendMode\nA mode that replaces background image samples with source image samples.\nstatic var sourceIn: GraphicsContext.BlendMode\nA mode that you use to paint the source image, including its transparency, onto the opaque parts of the background.\nstatic var sourceOut: GraphicsContext.BlendMode\nA mode that you use to paint the source image onto the transparent parts of the background, while erasing the background.\nstatic var sourceAtop: GraphicsContext.BlendMode\nA mode that you use to paint the opaque parts of the source image onto the opaque parts of the background.\nstatic var destinationOver: GraphicsContext.BlendMode\nA mode that you use to paint the source image under the background.\nstatic var destinationIn: GraphicsContext.BlendMode\nA mode that you use to erase any of the background that isn\u2019t covered by opaque source pixels.\nstatic var destinationOut: GraphicsContext.BlendMode\nA mode that you use to erase any of the background that is covered by opaque source pixels.\nstatic var destinationAtop: GraphicsContext.BlendMode\nA mode that you use to paint the source image under the background, while erasing any of the background not matched by opaque pixels from the source image.\nstatic var xor: GraphicsContext.BlendMode\nA mode that you use to clear pixels where both the source and background images are opaque.\nRelationships\nConforms To\nEquatable\nRawRepresentable\nSendable\nSee Also\nSetting opacity and the blend mode\nvar opacity: Double\nThe opacity of drawing operations in the context.\nvar blendMode: GraphicsContext.BlendMode\nThe blend mode used by drawing operations in the context."
    },
    {
        "title": "front",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/front",
        "html": "See Also\nGetting middle points\nstatic let leadingBack: UnitPoint3D\nA point that\u2019s centered vertically on the leading-back edge of a view.\nBeta\nstatic let leading: UnitPoint3D\nA point that\u2019s centered vertically and in the depth dimension on the leading face of a view.\nBeta\nstatic let leadingFront: UnitPoint3D\nA point that\u2019s centered vertically on the leading-front edge of a view.\nBeta\nstatic let back: UnitPoint3D\nA point that\u2019s centered horizontally and vertically on the back face of a view.\nBeta\nstatic let center: UnitPoint3D\nA point that\u2019s centered in a view.\nBeta\nstatic let trailingBack: UnitPoint3D\nA point that\u2019s centered vertically on the trailing-back edge of a view.\nBeta\nstatic let trailing: UnitPoint3D\nA point that\u2019s centered vertically and in the depth dimension on the trailing face of a view.\nBeta\nstatic let trailingFront: UnitPoint3D\nA point that\u2019s centered vertically on the trailing-front edge of a view.\nBeta"
    },
    {
        "title": "topTrailing",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/toptrailing",
        "html": "Discussion\n\nThe trailing edge appears on the right in a left-to-right language environment and on the left in a right-to-left environment.\n\nSee Also\nGetting top points\nstatic let topLeadingBack: UnitPoint3D\nA point that\u2019s in the top-leading-back corner of a view.\nBeta\nstatic let topLeading: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the top-leading edge of a view.\nBeta\nstatic let topLeadingFront: UnitPoint3D\nA point that\u2019s in the top-leading-front corner of a view.\nBeta\nstatic let topBack: UnitPoint3D\nA point that\u2019s centered horizontally on the top-back edge of a view.\nBeta\nstatic let top: UnitPoint3D\nA point that\u2019s centered horizontally and in the depth dimension on the top face of a view.\nBeta\nstatic let topFront: UnitPoint3D\nA point that\u2019s centered horizontally on the top-front edge of a view.\nBeta\nstatic let topTrailingBack: UnitPoint3D\nA point that\u2019s in the top-trailing-back corner of a view.\nBeta\nstatic let topTrailingFront: UnitPoint3D\nA point that\u2019s in the top-trailing-front corner of a view.\nBeta"
    },
    {
        "title": "bottomLeadingBack",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/bottomleadingback",
        "html": "Discussion\n\nThe leading edge appears on the left in a left-to-right language environment and on the right in a right-to-left environment.\n\nSee Also\nGetting bottom points\nstatic let bottomLeading: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the bottom-leading edge of a view.\nBeta\nstatic let bottomLeadingFront: UnitPoint3D\nA point that\u2019s in the bottom-leading-front corner of a view.\nBeta\nstatic let bottomBack: UnitPoint3D\nA point that\u2019s centered horizontally on the bottom-back edge of a view.\nBeta\nstatic let bottom: UnitPoint3D\nA point that\u2019s centered horizontally and in the depth dimension on the bottom face of a view.\nBeta\nstatic let bottomFront: UnitPoint3D\nA point that\u2019s centered horizontally on the bottom-front edge of a view.\nBeta\nstatic let bottomTrailingBack: UnitPoint3D\nA point that\u2019s in the bottom-trailing-back corner of a view.\nBeta\nstatic let bottomTrailing: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the bottom-trailing edge of a view.\nBeta\nstatic let bottomTrailingFront: UnitPoint3D\nA point that\u2019s in the bottom-trailing-front corner of a view.\nBeta"
    },
    {
        "title": "leading",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/leading",
        "html": "Discussion\n\nThe leading edge appears on the left in a left-to-right language environment and on the right in a right-to-left environment.\n\nSee Also\nGetting middle points\nstatic let leadingBack: UnitPoint3D\nA point that\u2019s centered vertically on the leading-back edge of a view.\nBeta\nstatic let leadingFront: UnitPoint3D\nA point that\u2019s centered vertically on the leading-front edge of a view.\nBeta\nstatic let back: UnitPoint3D\nA point that\u2019s centered horizontally and vertically on the back face of a view.\nBeta\nstatic let center: UnitPoint3D\nA point that\u2019s centered in a view.\nBeta\nstatic let front: UnitPoint3D\nA point that\u2019s centered horizontally and vertically on the front face of a view.\nBeta\nstatic let trailingBack: UnitPoint3D\nA point that\u2019s centered vertically on the trailing-back edge of a view.\nBeta\nstatic let trailing: UnitPoint3D\nA point that\u2019s centered vertically and in the depth dimension on the trailing face of a view.\nBeta\nstatic let trailingFront: UnitPoint3D\nA point that\u2019s centered vertically on the trailing-front edge of a view.\nBeta"
    },
    {
        "title": "trailing",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/trailing",
        "html": "Discussion\n\nThe trailing edge appears on the right in a left-to-right language environment and on the left in a right-to-left environment.\n\nSee Also\nGetting middle points\nstatic let leadingBack: UnitPoint3D\nA point that\u2019s centered vertically on the leading-back edge of a view.\nBeta\nstatic let leading: UnitPoint3D\nA point that\u2019s centered vertically and in the depth dimension on the leading face of a view.\nBeta\nstatic let leadingFront: UnitPoint3D\nA point that\u2019s centered vertically on the leading-front edge of a view.\nBeta\nstatic let back: UnitPoint3D\nA point that\u2019s centered horizontally and vertically on the back face of a view.\nBeta\nstatic let center: UnitPoint3D\nA point that\u2019s centered in a view.\nBeta\nstatic let front: UnitPoint3D\nA point that\u2019s centered horizontally and vertically on the front face of a view.\nBeta\nstatic let trailingBack: UnitPoint3D\nA point that\u2019s centered vertically on the trailing-back edge of a view.\nBeta\nstatic let trailingFront: UnitPoint3D\nA point that\u2019s centered vertically on the trailing-front edge of a view.\nBeta"
    },
    {
        "title": "trailingBack",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/trailingback",
        "html": "Discussion\n\nThe trailing edge appears on the right in a left-to-right language environment and on the left in a right-to-left environment.\n\nSee Also\nGetting middle points\nstatic let leadingBack: UnitPoint3D\nA point that\u2019s centered vertically on the leading-back edge of a view.\nBeta\nstatic let leading: UnitPoint3D\nA point that\u2019s centered vertically and in the depth dimension on the leading face of a view.\nBeta\nstatic let leadingFront: UnitPoint3D\nA point that\u2019s centered vertically on the leading-front edge of a view.\nBeta\nstatic let back: UnitPoint3D\nA point that\u2019s centered horizontally and vertically on the back face of a view.\nBeta\nstatic let center: UnitPoint3D\nA point that\u2019s centered in a view.\nBeta\nstatic let front: UnitPoint3D\nA point that\u2019s centered horizontally and vertically on the front face of a view.\nBeta\nstatic let trailing: UnitPoint3D\nA point that\u2019s centered vertically and in the depth dimension on the trailing face of a view.\nBeta\nstatic let trailingFront: UnitPoint3D\nA point that\u2019s centered vertically on the trailing-front edge of a view.\nBeta"
    },
    {
        "title": "draw(_:in:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/draw(_:in:)-5opqf",
        "html": "Parameters\ntext\n\nThe Text view to draw. Before drawing, the method converts the view to GraphicsContext.ResolvedText by calling resolve(_:).\n\nrect\n\nThe rectangle in the current user space to draw the text in.\n\nDiscussion\n\nThe current context state defines the full drawing operation. For example, the current transformation and clip shapes affect how SwiftUI draws the text.\n\nSee Also\nDrawing text\nfunc draw(Text, at: CGPoint, anchor: UnitPoint)\nDraws text into the context, aligning an anchor within the ideal size of the rendered text to a point in the context.\nfunc draw(GraphicsContext.ResolvedText, at: CGPoint, anchor: UnitPoint)\nDraws resolved text into the context, aligning an anchor within the ideal size of the text to a point in the context.\nfunc draw(GraphicsContext.ResolvedText, in: CGRect)\nDraws resolved text into the context using the specified rectangle as a layout frame.\nfunc resolve(Text) -> GraphicsContext.ResolvedText\nGets a version of a text view that\u2019s fixed with the current values of the graphics context\u2019s environment.\nstruct ResolvedText\nA text view resolved to a particular environment."
    },
    {
        "title": "bottomLeading",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/bottomleading",
        "html": "Discussion\n\nThe leading edge appears on the left in a left-to-right language environment and on the right in a right-to-left environment.\n\nSee Also\nGetting bottom points\nstatic let bottomLeadingBack: UnitPoint3D\nA point that\u2019s in the bottom-leading-back corner of a view.\nBeta\nstatic let bottomLeadingFront: UnitPoint3D\nA point that\u2019s in the bottom-leading-front corner of a view.\nBeta\nstatic let bottomBack: UnitPoint3D\nA point that\u2019s centered horizontally on the bottom-back edge of a view.\nBeta\nstatic let bottom: UnitPoint3D\nA point that\u2019s centered horizontally and in the depth dimension on the bottom face of a view.\nBeta\nstatic let bottomFront: UnitPoint3D\nA point that\u2019s centered horizontally on the bottom-front edge of a view.\nBeta\nstatic let bottomTrailingBack: UnitPoint3D\nA point that\u2019s in the bottom-trailing-back corner of a view.\nBeta\nstatic let bottomTrailing: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the bottom-trailing edge of a view.\nBeta\nstatic let bottomTrailingFront: UnitPoint3D\nA point that\u2019s in the bottom-trailing-front corner of a view.\nBeta"
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/menubutton/init(_:content:)-1yfkd",
        "html": "Deprecated\n\nUse Menu instead.\n\nSee Also\nCreating a menu button\ninit<S>(S, content: () -> Content)\nCreates a menu button with the specified title and content.\nAvailable when Label is Text and Content conforms to View.\nDeprecated\ninit(label: Label, content: () -> Content)\nCreates a menu button with the specified label and content.\nDeprecated"
    },
    {
        "title": "shadow(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/shadow(_:)-swift.method",
        "html": "Parameters\nstyle\n\nThe shadow style to apply.\n\nReturn Value\n\nA new shape style that uses the specified shadow style.\n\nDiscussion\n\nFor example, you can create a rectangle that adds a drop shadow to the red shape style.\n\nRectangle().fill(.red.shadow(.drop(radius: 2, y: 3)))\n\nSee Also\nModifying a shape style\nfunc blendMode(BlendMode) -> some ShapeStyle\nReturns a new style based on self that applies the specified blend mode when drawing.\nfunc opacity(Double) -> some ShapeStyle\nReturns a new style based on self that multiplies by the specified opacity when drawing."
    },
    {
        "title": "fill(_:with:style:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/fill(_:with:style:)",
        "html": "Parameters\npath\n\nThe outline of the region to fill.\n\nshading\n\nThe color or pattern to use when filling the region bounded by path.\n\nstyle\n\nA style that indicates how to rasterize the path.\n\nDiscussion\n\nThe current drawing state of the context defines the full drawing operation. For example, the current transformation and clip shapes, and any styles applied to the result, affect the final result.\n\nSee Also\nDrawing a path\nfunc stroke(Path, with: GraphicsContext.Shading, lineWidth: CGFloat)\nDraws a path into the context with a specified line width.\nfunc stroke(Path, with: GraphicsContext.Shading, style: StrokeStyle)\nDraws a path into the context with a specified stroke style.\nfunc resolve(GraphicsContext.Shading) -> GraphicsContext.Shading\nReturns a version of a shading resolved with the current values of the graphics context\u2019s environment.\nstruct Shading\nA color or pattern that you can use to outline or fill a path.\nstruct GradientOptions\nOptions that affect the rendering of color gradients."
    },
    {
        "title": "default",
        "url": "https://developer.apple.com/documentation/swiftui/shaderlibrary/default",
        "html": "See Also\nGetting the default shader library\nstatic func bundle(Bundle) -> ShaderLibrary\nReturns the default shader library of the specified bundle."
    },
    {
        "title": "resolve(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/resolve(_:)-28u0d",
        "html": "Discussion\n\nCalling this function once and then drawing multiple times with the result will often have less overhead than drawing with the original shading multiple times.\n\nSee Also\nDrawing a path\nfunc stroke(Path, with: GraphicsContext.Shading, lineWidth: CGFloat)\nDraws a path into the context with a specified line width.\nfunc stroke(Path, with: GraphicsContext.Shading, style: StrokeStyle)\nDraws a path into the context with a specified stroke style.\nfunc fill(Path, with: GraphicsContext.Shading, style: FillStyle)\nDraws a path into the context and fills the outlined region.\nstruct Shading\nA color or pattern that you can use to outline or fill a path.\nstruct GradientOptions\nOptions that affect the rendering of color gradients."
    },
    {
        "title": "GraphicsContext.Shading",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/shading",
        "html": "Overview\n\nUse a shading instance to describe the color or pattern of a path that you outline with a method like stroke(_:with:style:), or of the interior of a region that you fill with the fill(_:with:style:) method. Get a shading instance by calling one of the Shading structure\u2019s factory methods. You can base shading on:\n\nA Color.\n\nA Gradient.\n\nAny type that conforms to ShapeStyle.\n\nAn Image.\n\nWhat you\u2019ve already drawn into the context.\n\nA collection of other shading instances.\n\nTopics\nColors\nstatic func color(Color) -> GraphicsContext.Shading\nReturns a shading instance that fills with a color.\nstatic func color(Color.RGBColorSpace, red: Double, green: Double, blue: Double, opacity: Double) -> GraphicsContext.Shading\nReturns a shading instance that fills with a color in the given color space.\nstatic func color(Color.RGBColorSpace, white: Double, opacity: Double) -> GraphicsContext.Shading\nReturns a shading instance that fills with a monochrome color in the given color space.\nGradients\nstatic func linearGradient(Gradient, startPoint: CGPoint, endPoint: CGPoint, options: GraphicsContext.GradientOptions) -> GraphicsContext.Shading\nReturns a shading instance that fills a linear (axial) gradient.\nstatic func radialGradient(Gradient, center: CGPoint, startRadius: CGFloat, endRadius: CGFloat, options: GraphicsContext.GradientOptions) -> GraphicsContext.Shading\nReturns a shading instance that fills a radial gradient.\nstatic func conicGradient(Gradient, center: CGPoint, angle: Angle, options: GraphicsContext.GradientOptions) -> GraphicsContext.Shading\nReturns a shading instance that fills a conic (angular) gradient.\nOther shape styles\nstatic func style<S>(S) -> GraphicsContext.Shading\nReturns a shading instance that fills with the given shape style.\nstatic var foreground: GraphicsContext.Shading\nA shading instance that fills with the foreground style from the graphics context\u2019s environment.\nImages\nstatic func tiledImage(Image, origin: CGPoint, sourceRect: CGRect, scale: CGFloat) -> GraphicsContext.Shading\nReturns a shading instance that tiles an image across the infinite plane.\nComposite shading types\nstatic func palette([GraphicsContext.Shading]) -> GraphicsContext.Shading\nReturns a multilevel shading instance constructed from an array of shading instances.\nstatic var backdrop: GraphicsContext.Shading\nA shading instance that draws a copy of the current background.\nUsing a custom Metal shader\nstatic func shader(Shader, bounds: CGRect) -> GraphicsContext.Shading\nReturns a shading instance that fills with the results of querying a shader for each pixel.\nRelationships\nConforms To\nSendable\nSee Also\nDrawing a path\nfunc stroke(Path, with: GraphicsContext.Shading, lineWidth: CGFloat)\nDraws a path into the context with a specified line width.\nfunc stroke(Path, with: GraphicsContext.Shading, style: StrokeStyle)\nDraws a path into the context with a specified stroke style.\nfunc fill(Path, with: GraphicsContext.Shading, style: FillStyle)\nDraws a path into the context and fills the outlined region.\nfunc resolve(GraphicsContext.Shading) -> GraphicsContext.Shading\nReturns a version of a shading resolved with the current values of the graphics context\u2019s environment.\nstruct GradientOptions\nOptions that affect the rendering of color gradients."
    },
    {
        "title": "bottomLeadingFront",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/bottomleadingfront",
        "html": "Discussion\n\nThe leading edge appears on the left in a left-to-right language environment and on the right in a right-to-left environment.\n\nSee Also\nGetting bottom points\nstatic let bottomLeadingBack: UnitPoint3D\nA point that\u2019s in the bottom-leading-back corner of a view.\nBeta\nstatic let bottomLeading: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the bottom-leading edge of a view.\nBeta\nstatic let bottomBack: UnitPoint3D\nA point that\u2019s centered horizontally on the bottom-back edge of a view.\nBeta\nstatic let bottom: UnitPoint3D\nA point that\u2019s centered horizontally and in the depth dimension on the bottom face of a view.\nBeta\nstatic let bottomFront: UnitPoint3D\nA point that\u2019s centered horizontally on the bottom-front edge of a view.\nBeta\nstatic let bottomTrailingBack: UnitPoint3D\nA point that\u2019s in the bottom-trailing-back corner of a view.\nBeta\nstatic let bottomTrailing: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the bottom-trailing edge of a view.\nBeta\nstatic let bottomTrailingFront: UnitPoint3D\nA point that\u2019s in the bottom-trailing-front corner of a view.\nBeta"
    },
    {
        "title": "scaleEffect(_:anchor:)",
        "url": "https://developer.apple.com/documentation/swiftui/visualeffect/scaleeffect(_:anchor:)-5dxyh",
        "html": "Parameters\nscale\n\nThe scale factor for this view in each dimension.\n\nanchor\n\nThe anchor point about which to scale the view. Defaults to center.\n\nReturn Value\n\nAn effect that scales this view by scale.\n\nDiscussion\n\nThe original dimensions of the view are considered to be unchanged by scaling the contents. To change the dimensions of the view, use a modifier like frame() instead.\n\nSee Also\nScaling\nfunc scaleEffect(CGFloat, anchor: UnitPoint) -> some VisualEffect\nScales the view\u2019s rendered output by the given amount in both the horizontal and vertical directions, relative to an anchor point.\nfunc scaleEffect(CGSize, anchor: UnitPoint) -> some VisualEffect\nScales the view\u2019s rendered output by the given vertical and horizontal size amounts, relative to an anchor point.\nfunc scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some VisualEffect\nScales the view\u2019s rendered output by the given horizontal and vertical amounts, relative to an anchor point.\nfunc scaleEffect(CGFloat, anchor: UnitPoint3D) -> some VisualEffect\nScales this view uniformly by the specified factor.\nBeta\nfunc scaleEffect(x: CGFloat, y: CGFloat, z: CGFloat, anchor: UnitPoint3D) -> some VisualEffect\nScales this view by the specified horizontal, vertical, and depth factors.\nBeta"
    },
    {
        "title": "init(wrappedValue:from:)",
        "url": "https://developer.apple.com/documentation/swiftui/physicalmetric/init(wrappedvalue:from:)-8r7gf",
        "html": "See Also\nCreating a metric\ninit(wrappedValue: Value, from: UnitLength)\nCreates a value that maps the specified set of physical length measurements, in the specified unit, to a corresponding set of values measured in points in the associated scene.\nBeta\ninit(wrappedValue: CGPoint, from: UnitLength)\nCreates a value that maps the specified point, whose dimensions are specified in physical length measurements in the given unit, to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: CGSize, from: UnitLength)\nCreates a value that maps the specified size, in the specified unit to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: Size3D, from: UnitLength)\nCreates a value that maps the specified size, in the specified unit to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: Point3D, from: UnitLength)\nCreates a value that maps the specified point, whose dimensions are specified in physical length measurements in the given unit, to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: CGRect, from: UnitLength)\nCreates a value that maps the specified rectangle, whose dimensions are specified in physical length measurements in the given unit, to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: Rect3D, from: UnitLength)\nCreates a value that maps the specified Rect3D, whose dimensions are specified in physical length measurements in the given unit, to the corresponding value in points in the associated scene.\nBeta"
    },
    {
        "title": "offset(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/visualeffect/offset(_:)",
        "html": "Parameters\noffset\n\nThe distance to offset the view.\n\nReturn Value\n\nAn effect that offsets the view by offset.\n\nSee Also\nTranslating\nfunc offset(x: CGFloat, y: CGFloat) -> some VisualEffect\nOffsets the view by the specified horizontal and vertical distances.\nfunc offset(z: CGFloat) -> some VisualEffect\nBrings a view forward in Z by the provided distance in points.\nBeta"
    },
    {
        "title": "init(wrappedValue:from:)",
        "url": "https://developer.apple.com/documentation/swiftui/physicalmetric/init(wrappedvalue:from:)-2vcvi",
        "html": "See Also\nCreating a metric\ninit(wrappedValue: CGPoint, from: UnitLength)\nCreates a value that maps the specified point, whose dimensions are specified in physical length measurements in the given unit, to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: CGSize, from: UnitLength)\nCreates a value that maps the specified size, in the specified unit to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: Size3D, from: UnitLength)\nCreates a value that maps the specified size, in the specified unit to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: Point3D, from: UnitLength)\nCreates a value that maps the specified point, whose dimensions are specified in physical length measurements in the given unit, to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: Value, from: UnitLength)\nCreates a value that maps the specified single physical length measurement, in the specified unit, to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: CGRect, from: UnitLength)\nCreates a value that maps the specified rectangle, whose dimensions are specified in physical length measurements in the given unit, to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: Rect3D, from: UnitLength)\nCreates a value that maps the specified Rect3D, whose dimensions are specified in physical length measurements in the given unit, to the corresponding value in points in the associated scene.\nBeta"
    },
    {
        "title": "init(wrappedValue:from:)",
        "url": "https://developer.apple.com/documentation/swiftui/physicalmetric/init(wrappedvalue:from:)-acph",
        "html": "See Also\nCreating a metric\ninit(wrappedValue: Value, from: UnitLength)\nCreates a value that maps the specified set of physical length measurements, in the specified unit, to a corresponding set of values measured in points in the associated scene.\nBeta\ninit(wrappedValue: CGPoint, from: UnitLength)\nCreates a value that maps the specified point, whose dimensions are specified in physical length measurements in the given unit, to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: CGSize, from: UnitLength)\nCreates a value that maps the specified size, in the specified unit to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: Size3D, from: UnitLength)\nCreates a value that maps the specified size, in the specified unit to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: Point3D, from: UnitLength)\nCreates a value that maps the specified point, whose dimensions are specified in physical length measurements in the given unit, to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: Value, from: UnitLength)\nCreates a value that maps the specified single physical length measurement, in the specified unit, to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: Rect3D, from: UnitLength)\nCreates a value that maps the specified Rect3D, whose dimensions are specified in physical length measurements in the given unit, to the corresponding value in points in the associated scene.\nBeta"
    },
    {
        "title": "init(wrappedValue:from:)",
        "url": "https://developer.apple.com/documentation/swiftui/physicalmetric/init(wrappedvalue:from:)-6shpk",
        "html": "See Also\nCreating a metric\ninit(wrappedValue: Value, from: UnitLength)\nCreates a value that maps the specified set of physical length measurements, in the specified unit, to a corresponding set of values measured in points in the associated scene.\nBeta\ninit(wrappedValue: CGPoint, from: UnitLength)\nCreates a value that maps the specified point, whose dimensions are specified in physical length measurements in the given unit, to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: Size3D, from: UnitLength)\nCreates a value that maps the specified size, in the specified unit to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: Point3D, from: UnitLength)\nCreates a value that maps the specified point, whose dimensions are specified in physical length measurements in the given unit, to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: Value, from: UnitLength)\nCreates a value that maps the specified single physical length measurement, in the specified unit, to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: CGRect, from: UnitLength)\nCreates a value that maps the specified rectangle, whose dimensions are specified in physical length measurements in the given unit, to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: Rect3D, from: UnitLength)\nCreates a value that maps the specified Rect3D, whose dimensions are specified in physical length measurements in the given unit, to the corresponding value in points in the associated scene.\nBeta"
    },
    {
        "title": "layerEffect(_:maxSampleOffset:isEnabled:)",
        "url": "https://developer.apple.com/documentation/swiftui/visualeffect/layereffect(_:maxsampleoffset:isenabled:)",
        "html": "Parameters\nshader\n\nThe shader to apply as a layer effect.\n\nmaxSampleOffset\n\nIf the shader function samples from the layer at locations not equal to the destination position, this value must specify the maximum sampling distance in each axis, for all source pixels.\n\nisEnabled\n\nWhether the effect is enabled or not.\n\nReturn Value\n\nA new view that renders self with the shader applied as a distortion effect.\n\nDiscussion\n\nFor a shader function to act as a layer effect it must have a function signature matching:\n\n[[ stitchable ]] half4 name(float2 position,\n  SwiftUI::Layer layer, args...)\n\n\nwhere position is the user-space coordinates of the destination pixel applied to the shader, and layer is a subregion of the rasterized contents of self. args... should be compatible with the uniform arguments bound to shader.\n\nThe SwiftUI::Layer type is defined in the <SwiftUI/SwiftUI.h> header file. It exports a single sample() function that returns a linearly-filtered pixel value from a position in the source content, as a premultiplied RGBA pixel value:\n\nnamespace SwiftUI {\n  struct Layer {\n    half4 sample(float2 position) const;\n  };\n};\n\n\nThe function should return the color mapping to the destination pixel, typically by sampling one or more pixels from layer at location(s) derived from position and them applying some kind of transformation to produce a new color.\n\nImportant\n\nViews backed by AppKit or UIKit views may not render into the filtered layer. Instead, they log a warning and display a placeholder image to highlight the error.\n\nSee Also\nApplying other effects\nfunc blur(radius: CGFloat, opaque: Bool) -> some VisualEffect\nApplies a Gaussian blur to the view.\nfunc distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some VisualEffect\nReturns a new visual effect that applies shader to self as a geometric distortion effect on the location of each pixel."
    },
    {
        "title": "local",
        "url": "https://developer.apple.com/documentation/swiftui/coordinatespaceprotocol/local",
        "html": "See Also\nGetting built-in coordinate spaces\nstatic var global: GlobalCoordinateSpace\nThe global coordinate space at the root of the view hierarchy.\nAvailable when Self is GlobalCoordinateSpace.\nstatic func named(some Hashable) -> NamedCoordinateSpace\nCreates a named coordinate space using the given value.\nAvailable when Self is NamedCoordinateSpace.\nstatic var scrollView: NamedCoordinateSpace\nThe named coordinate space that is added by the system for the innermost containing scroll view.\nAvailable when Self is NamedCoordinateSpace.\nstatic func scrollView(axis: Axis) -> Self\nThe named coordinate space that is added by the system for the innermost containing scroll view that allows scrolling along the provided axis.\nAvailable when Self is NamedCoordinateSpace."
    },
    {
        "title": "init(wrappedValue:from:)",
        "url": "https://developer.apple.com/documentation/swiftui/physicalmetric/init(wrappedvalue:from:)-mktq",
        "html": "See Also\nCreating a metric\ninit(wrappedValue: Value, from: UnitLength)\nCreates a value that maps the specified set of physical length measurements, in the specified unit, to a corresponding set of values measured in points in the associated scene.\nBeta\ninit(wrappedValue: CGPoint, from: UnitLength)\nCreates a value that maps the specified point, whose dimensions are specified in physical length measurements in the given unit, to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: CGSize, from: UnitLength)\nCreates a value that maps the specified size, in the specified unit to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: Size3D, from: UnitLength)\nCreates a value that maps the specified size, in the specified unit to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: Point3D, from: UnitLength)\nCreates a value that maps the specified point, whose dimensions are specified in physical length measurements in the given unit, to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: Value, from: UnitLength)\nCreates a value that maps the specified single physical length measurement, in the specified unit, to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: CGRect, from: UnitLength)\nCreates a value that maps the specified rectangle, whose dimensions are specified in physical length measurements in the given unit, to the corresponding value in points in the associated scene.\nBeta"
    },
    {
        "title": "offset(x:y:)",
        "url": "https://developer.apple.com/documentation/swiftui/visualeffect/offset(x:y:)",
        "html": "Parameters\nx\n\nThe horizontal distance to offset the view.\n\ny\n\nThe vertical distance to offset the view.\n\nReturn Value\n\nAn effect that offsets the view by x and y.\n\nSee Also\nTranslating\nfunc offset(CGSize) -> some VisualEffect\nOffsets the view by the horizontal and vertical amount specified in the offset parameter.\nfunc offset(z: CGFloat) -> some VisualEffect\nBrings a view forward in Z by the provided distance in points.\nBeta"
    },
    {
        "title": "blur(radius:opaque:)",
        "url": "https://developer.apple.com/documentation/swiftui/visualeffect/blur(radius:opaque:)",
        "html": "Parameters\nradius\n\nThe radial size of the blur. A blur is more diffuse when its radius is large.\n\nopaque\n\nA Boolean value that indicates whether the blur renderer permits transparency in the blur output. Set to true to create an opaque blur, or set to false to permit transparency.\n\nReturn Value\n\nAn effect that blurs the view.\n\nDiscussion\n\nUse blur(radius:opaque:) to apply a gaussian blur effect to the rendering of the view.\n\nSee Also\nApplying other effects\nfunc distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some VisualEffect\nReturns a new visual effect that applies shader to self as a geometric distortion effect on the location of each pixel.\nfunc layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some VisualEffect\nReturns a new visual effect that applies shader to self as a filter on the raster layer created from self."
    },
    {
        "title": "distortionEffect(_:maxSampleOffset:isEnabled:)",
        "url": "https://developer.apple.com/documentation/swiftui/visualeffect/distortioneffect(_:maxsampleoffset:isenabled:)",
        "html": "Parameters\nshader\n\nThe shader to apply as a distortion effect.\n\nmaxSampleOffset\n\nThe maximum distance in each axis between the returned source pixel position and the destination pixel position, for all source pixels.\n\nisEnabled\n\nWhether the effect is enabled or not.\n\nReturn Value\n\nA new view that renders self with the shader applied as a distortion effect.\n\nDiscussion\n\nFor a shader function to act as a distortion effect it must have a function signature matching:\n\n[[ stitchable ]] float2 name(float2 position, args...)\n\n\nwhere position is the user-space coordinates of the destination pixel applied to the shader. args... should be compatible with the uniform arguments bound to shader. The function should return the user-space coordinates of the corresponding source pixel.\n\nImportant\n\nViews backed by AppKit or UIKit views may not render into the filtered layer. Instead, they log a warning and display a placeholder image to highlight the error.\n\nSee Also\nApplying other effects\nfunc blur(radius: CGFloat, opaque: Bool) -> some VisualEffect\nApplies a Gaussian blur to the view.\nfunc layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some VisualEffect\nReturns a new visual effect that applies shader to self as a filter on the raster layer created from self."
    },
    {
        "title": "init(wrappedValue:from:)",
        "url": "https://developer.apple.com/documentation/swiftui/physicalmetric/init(wrappedvalue:from:)-41bww",
        "html": "See Also\nCreating a metric\ninit(wrappedValue: Value, from: UnitLength)\nCreates a value that maps the specified set of physical length measurements, in the specified unit, to a corresponding set of values measured in points in the associated scene.\nBeta\ninit(wrappedValue: CGSize, from: UnitLength)\nCreates a value that maps the specified size, in the specified unit to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: Size3D, from: UnitLength)\nCreates a value that maps the specified size, in the specified unit to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: Point3D, from: UnitLength)\nCreates a value that maps the specified point, whose dimensions are specified in physical length measurements in the given unit, to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: Value, from: UnitLength)\nCreates a value that maps the specified single physical length measurement, in the specified unit, to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: CGRect, from: UnitLength)\nCreates a value that maps the specified rectangle, whose dimensions are specified in physical length measurements in the given unit, to the corresponding value in points in the associated scene.\nBeta\ninit(wrappedValue: Rect3D, from: UnitLength)\nCreates a value that maps the specified Rect3D, whose dimensions are specified in physical length measurements in the given unit, to the corresponding value in points in the associated scene.\nBeta"
    },
    {
        "title": "transformEffect(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/visualeffect/transformeffect(_:)-27xd8",
        "html": "Parameters\ntransform\n\nA CGAffineTransform to apply to the view.\n\nReturn Value\n\nAn effect that applies an affine transformation to the view\u2019s rendered output.\n\nDiscussion\n\nUse transformEffect(_:) to rotate, scale, translate, or skew the output of the view according to the provided CGAffineTransform.\n\nSee Also\nApplying a transform\nfunc transform3DEffect(AffineTransform3D) -> some VisualEffect\nApplies a 3D transformation to the receiver.\nBeta\nfunc transformEffect(ProjectionTransform) -> some VisualEffect\nApplies a projection transformation to the view\u2019s rendered output."
    },
    {
        "title": "transform3DEffect(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/visualeffect/transform3deffect(_:)",
        "html": "Parameters\ntransform\n\nThe 3D transformation to apply to the view, interpreting it as a 3D plane in space.\n\nReturn Value\n\nAn effect that renders transformed according to the provided transform\n\nSee Also\nApplying a transform\nfunc transformEffect(CGAffineTransform) -> some VisualEffect\nApplies an affine transformation to the view\u2019s rendered output.\nfunc transformEffect(ProjectionTransform) -> some VisualEffect\nApplies a projection transformation to the view\u2019s rendered output."
    },
    {
        "title": "global",
        "url": "https://developer.apple.com/documentation/swiftui/coordinatespaceprotocol/global",
        "html": "See Also\nGetting built-in coordinate spaces\nstatic var local: LocalCoordinateSpace\nThe local coordinate space of the current view.\nAvailable when Self is LocalCoordinateSpace.\nstatic func named(some Hashable) -> NamedCoordinateSpace\nCreates a named coordinate space using the given value.\nAvailable when Self is NamedCoordinateSpace.\nstatic var scrollView: NamedCoordinateSpace\nThe named coordinate space that is added by the system for the innermost containing scroll view.\nAvailable when Self is NamedCoordinateSpace.\nstatic func scrollView(axis: Axis) -> Self\nThe named coordinate space that is added by the system for the innermost containing scroll view that allows scrolling along the provided axis.\nAvailable when Self is NamedCoordinateSpace."
    },
    {
        "title": "offset(z:)",
        "url": "https://developer.apple.com/documentation/swiftui/visualeffect/offset(z:)",
        "html": "Parameters\ndistance\n\nThe distance to extrude the view forward in Z, in points.\n\nReturn Value\n\nAn effect that is extruded forward in Z by distance.\n\nSee Also\nTranslating\nfunc offset(CGSize) -> some VisualEffect\nOffsets the view by the horizontal and vertical amount specified in the offset parameter.\nfunc offset(x: CGFloat, y: CGFloat) -> some VisualEffect\nOffsets the view by the specified horizontal and vertical distances."
    },
    {
        "title": "GraphicsContext.GradientOptions",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/gradientoptions",
        "html": "Overview\n\nUse these options to affect how SwiftUI manages a gradient that you create for a GraphicsContext.Shading instance for use in a GraphicsContext.\n\nTopics\nGetting gradient options\nstatic var linearColor: GraphicsContext.GradientOptions\nAn option that interpolates between colors in a linear color space.\nstatic var mirror: GraphicsContext.GradientOptions\nAn option that repeats the gradient outside its nominal range, reflecting every other instance.\nstatic var `repeat`: GraphicsContext.GradientOptions\nAn option that repeats the gradient outside its nominal range.\nRelationships\nConforms To\nEquatable\nExpressibleByArrayLiteral\nOptionSet\nRawRepresentable\nSendable\nSetAlgebra\nSee Also\nDrawing a path\nfunc stroke(Path, with: GraphicsContext.Shading, lineWidth: CGFloat)\nDraws a path into the context with a specified line width.\nfunc stroke(Path, with: GraphicsContext.Shading, style: StrokeStyle)\nDraws a path into the context with a specified stroke style.\nfunc fill(Path, with: GraphicsContext.Shading, style: FillStyle)\nDraws a path into the context and fills the outlined region.\nfunc resolve(GraphicsContext.Shading) -> GraphicsContext.Shading\nReturns a version of a shading resolved with the current values of the graphics context\u2019s environment.\nstruct Shading\nA color or pattern that you can use to outline or fill a path."
    },
    {
        "title": "GraphicsContext.ResolvedText",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/resolvedtext",
        "html": "Overview\n\nYou resolve a Text view in preparation for drawing it into a context, either manually by calling resolve(_:) or automatically when calling draw(_:in:) or draw(_:at:anchor:). The resolved text view takes into account environment values like the display resolution and current color scheme.\n\nTopics\nGetting the text properties\nfunc firstBaseline(in: CGSize) -> CGFloat\nGets the distance from the first line\u2019s ascender to its baseline.\nfunc lastBaseline(in: CGSize) -> CGFloat\nGets the distance from the first line\u2019s ascender to the last line\u2019s baseline.\nfunc measure(in: CGSize) -> CGSize\nMeasures the size of the resolved text for a given area into which the text should be placed.\nvar shading: GraphicsContext.Shading\nThe shading to fill uncolored text regions with.\nSee Also\nDrawing text\nfunc draw(Text, at: CGPoint, anchor: UnitPoint)\nDraws text into the context, aligning an anchor within the ideal size of the rendered text to a point in the context.\nfunc draw(Text, in: CGRect)\nDraws text into the context using the specified rectangle as a layout frame.\nfunc draw(GraphicsContext.ResolvedText, at: CGPoint, anchor: UnitPoint)\nDraws resolved text into the context, aligning an anchor within the ideal size of the text to a point in the context.\nfunc draw(GraphicsContext.ResolvedText, in: CGRect)\nDraws resolved text into the context using the specified rectangle as a layout frame.\nfunc resolve(Text) -> GraphicsContext.ResolvedText\nGets a version of a text view that\u2019s fixed with the current values of the graphics context\u2019s environment."
    },
    {
        "title": "draw(_:at:anchor:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/draw(_:at:anchor:)-6xr87",
        "html": "Parameters\ntext\n\nThe GraphicsContext.ResolvedText to draw. Get resolved text from a Text view by calling resolve(_:). Alternatively, you can call draw(_:at:anchor:) with a Text view, and that method performs the resolution automatically.\n\npoint\n\nA point within the rectangle of the ideal size of the resolved text to anchor to a point in the context.\n\nanchor\n\nA UnitPoint within the context to align the text with. The default is center.\n\nDiscussion\n\nThe current context state defines the full drawing operation. For example, the current transformation and clip shapes affect how SwiftUI draws the text.\n\nSee Also\nDrawing text\nfunc draw(Text, at: CGPoint, anchor: UnitPoint)\nDraws text into the context, aligning an anchor within the ideal size of the rendered text to a point in the context.\nfunc draw(Text, in: CGRect)\nDraws text into the context using the specified rectangle as a layout frame.\nfunc draw(GraphicsContext.ResolvedText, in: CGRect)\nDraws resolved text into the context using the specified rectangle as a layout frame.\nfunc resolve(Text) -> GraphicsContext.ResolvedText\nGets a version of a text view that\u2019s fixed with the current values of the graphics context\u2019s environment.\nstruct ResolvedText\nA text view resolved to a particular environment."
    },
    {
        "title": "clipToLayer(opacity:options:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/cliptolayer(opacity:options:content:)",
        "html": "Parameters\nopacity\n\nA value that SwiftUI uses to multiply the alpha channel of the rasterized layer that you define in the content closure. The alpha values that result define the clip shape.\n\noptions\n\nA set of options that tell SwiftUI how to interpret the clip shape. For example, you can invert the clip shape by setting the inverse option.\n\ncontent\n\nA closure that receives as input a new GraphicsContext, which represents a new transparency layer. The alpha channel of content that you draw into this context, multiplied by the opacity parameter, defines the clip shape.\n\nDiscussion\n\nCall this method to add a shape to the array of clip shapes that the context uses to define a clipping mask. Shapes that you add affect only subsequent drawing operations.\n\nSee Also\nMasking\nfunc clip(to: Path, style: FillStyle, options: GraphicsContext.ClipOptions)\nAdds a path to the context\u2019s array of clip shapes.\nvar clipBoundingRect: CGRect\nThe bounding rectangle of the intersection of all current clip shapes in the current user space.\nstruct ClipOptions\nOptions that affect the use of clip shapes."
    },
    {
        "title": "drawLayer(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/drawlayer(content:)",
        "html": "Parameters\ncontext\n\nA closure that receives a new GraphicsContext as input. This context represents a new transparency layer that you can draw into. When the closure returns, SwiftUI draws the new layer into the current context."
    },
    {
        "title": "blendMode",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/blendmode-swift.property",
        "html": "Discussion\n\nSet this value to affect how any content that you subsequently draw into the context blends with content that\u2019s already in the context. Use one of the GraphicsContext.BlendMode values.\n\nSee Also\nSetting opacity and the blend mode\nvar opacity: Double\nThe opacity of drawing operations in the context.\nstruct BlendMode\nThe ways that a graphics context combines new content with background content."
    },
    {
        "title": "clipBoundingRect",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/clipboundingrect",
        "html": "See Also\nMasking\nfunc clip(to: Path, style: FillStyle, options: GraphicsContext.ClipOptions)\nAdds a path to the context\u2019s array of clip shapes.\nfunc clipToLayer(opacity: Double, options: GraphicsContext.ClipOptions, content: (inout GraphicsContext) throws -> Void) rethrows\nAdds a clip shape that you define in a new layer to the context\u2019s array of clip shapes.\nstruct ClipOptions\nOptions that affect the use of clip shapes."
    },
    {
        "title": "Shader.Argument",
        "url": "https://developer.apple.com/documentation/swiftui/shader/argument",
        "html": "Topics\nCreating argument values\nstatic var boundingRect: Shader.Argument\nReturns an argument value representing the bounding rect of the shape or view that the shader is attached to, as float4(x, y, width, height). This value is undefined for shaders that do not have a natural bounding rect (e.g. filter effects drawn into GraphicsContext).\nstatic func color(Color) -> Shader.Argument\nReturns an argument value representing color. When passed to a MSL function it will convert to a half4 value, as a premultiplied color in the target color space.\nstatic func colorArray([Color]) -> Shader.Argument\nReturns an argument value defined by the provided array of color values. When passed to an MSL function it will convert to a device const half4 *ptr, int count pair of parameters.\nstatic func data(Data) -> Shader.Argument\nReturns an argument value defined by the provided data value. When passed to an MSL function it will convert to a device const void *ptr, int size_in_bytes pair of parameters.\nstatic func float<T>(T) -> Shader.Argument\nReturns an argument value representing the MSL value float(x).\nstatic func float2(CGVector) -> Shader.Argument\nReturns an argument value representing the MSL value float2(vector.dx, vector.dy).\nstatic func float2(CGPoint) -> Shader.Argument\nReturns an argument value representing the MSL value float2(point.x, point.y).\nstatic func float2(CGSize) -> Shader.Argument\nReturns an argument value representing the MSL value float2(size.width, size.height).\nstatic func float2<T>(T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float2(x, y).\nstatic func float3<T>(T, T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float3(x, y, z).\nstatic func float4<T>(T, T, T, T) -> Shader.Argument\nReturns an argument value representing the MSL value float4(x, y, z, w).\nstatic func floatArray([Float]) -> Shader.Argument\nReturns an argument value defined by the provided array of floating point numbers. When passed to an MSL function it will convert to a device const float *ptr, int count pair of parameters.\nstatic func image(Image) -> Shader.Argument\nReturns an argument value defined by the provided image. When passed to an MSL function it will convert to a texture2d<half> value. Currently only one image parameter is supported per Shader instance.\nRelationships\nConforms To\nEquatable\nSendable\nSee Also\nCreating a shader\ninit(function: ShaderFunction, arguments: [Shader.Argument])\nCreates a new shader from a function and the uniform argument values to bind to the function."
    },
    {
        "title": "GraphicsContext.ClipOptions",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/clipoptions",
        "html": "Overview\n\nUse these options to affect how SwiftUI interprets a clip shape when you call clip(to:style:options:) to add a path to the array of clip shapes, or when you call clipToLayer(opacity:options:content:) to add a clipping layer.\n\nTopics\nGetting clip options\nstatic var inverse: GraphicsContext.ClipOptions\nAn option to invert the shape or layer alpha as the clip mask.\nRelationships\nConforms To\nEquatable\nExpressibleByArrayLiteral\nOptionSet\nRawRepresentable\nSendable\nSetAlgebra\nSee Also\nMasking\nfunc clip(to: Path, style: FillStyle, options: GraphicsContext.ClipOptions)\nAdds a path to the context\u2019s array of clip shapes.\nfunc clipToLayer(opacity: Double, options: GraphicsContext.ClipOptions, content: (inout GraphicsContext) throws -> Void) rethrows\nAdds a clip shape that you define in a new layer to the context\u2019s array of clip shapes.\nvar clipBoundingRect: CGRect\nThe bounding rectangle of the intersection of all current clip shapes in the current user space."
    },
    {
        "title": "radialGradient(stops:center:startRadius:endRadius:)",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/radialgradient(stops:center:startradius:endradius:)",
        "html": "Discussion\n\nThe gradient applies the color function as the distance from a center point, scaled to fit within the defined start and end radii. The gradient maps the unit space center point into the bounding rectangle of each shape filled with the gradient.\n\nFor information about how to use shape styles, see ShapeStyle.\n\nSee Also\nRadial gradients\nstatic func radialGradient(Gradient, center: UnitPoint, startRadius: CGFloat, endRadius: CGFloat) -> RadialGradient\nA radial gradient.\nAvailable when Self is RadialGradient.\nstatic func radialGradient(AnyGradient, center: UnitPoint, startRadius: CGFloat, endRadius: CGFloat) -> some ShapeStyle\nA radial gradient.\nAvailable when Self is RadialGradient.\nstatic func radialGradient(colors: [Color], center: UnitPoint, startRadius: CGFloat, endRadius: CGFloat) -> RadialGradient\nA radial gradient defined by a collection of colors.\nAvailable when Self is RadialGradient."
    },
    {
        "title": "init(url:)",
        "url": "https://developer.apple.com/documentation/swiftui/shaderlibrary/init(url:)",
        "html": "See Also\nCreating a shader library\ninit(data: Data)\nCreates a new Metal shader library from data, which must be the contents of precompiled Metal library. Functions compiled from the returned library will only be cached as long as the returned library exists."
    },
    {
        "title": "BlendMode.multiply",
        "url": "https://developer.apple.com/documentation/swiftui/blendmode/multiply",
        "html": "See Also\nDarkening\ncase darken\ncase colorBurn\ncase plusDarker"
    },
    {
        "title": "BlendMode.destinationOver",
        "url": "https://developer.apple.com/documentation/swiftui/blendmode/destinationover",
        "html": "See Also\nAccessing porter-duff modes\ncase sourceAtop\ncase destinationOut"
    },
    {
        "title": "BlendMode.plusDarker",
        "url": "https://developer.apple.com/documentation/swiftui/blendmode/plusdarker",
        "html": "See Also\nDarkening\ncase darken\ncase multiply\ncase colorBurn"
    },
    {
        "title": "BlendMode.saturation",
        "url": "https://developer.apple.com/documentation/swiftui/blendmode/saturation",
        "html": "See Also\nMixing color components\ncase hue\ncase color\ncase luminosity"
    },
    {
        "title": "BlendMode.softLight",
        "url": "https://developer.apple.com/documentation/swiftui/blendmode/softlight",
        "html": "See Also\nAdding contrast\ncase overlay\ncase hardLight"
    },
    {
        "title": "bounds(of:)",
        "url": "https://developer.apple.com/documentation/swiftui/geometryproxy/bounds(of:)",
        "html": "See Also\nAccessing geometry characteristics\nfunc frame(in: CoordinateSpace) -> CGRect\nReturns the container view\u2019s bounds rectangle, converted to a defined coordinate space.\nfunc frame(in: some CoordinateSpaceProtocol) -> CGRect\nReturns the container view\u2019s bounds rectangle, converted to a defined coordinate space.\nvar size: CGSize\nThe size of the container view.\nvar safeAreaInsets: EdgeInsets\nThe safe area inset of the container view.\nsubscript<T>(Anchor<T>) -> T\nResolves the value of an anchor to the container view.\nfunc transform(in: some CoordinateSpaceProtocol) -> AffineTransform3D?\nThe container view\u2019s 3D transform converted to a defined coordinate space.\nBeta"
    },
    {
        "title": "BlendMode.overlay",
        "url": "https://developer.apple.com/documentation/swiftui/blendmode/overlay",
        "html": "See Also\nAdding contrast\ncase softLight\ncase hardLight"
    },
    {
        "title": "BlendMode.plusLighter",
        "url": "https://developer.apple.com/documentation/swiftui/blendmode/pluslighter",
        "html": "See Also\nLightening\ncase lighten\ncase screen\ncase colorDodge"
    },
    {
        "title": "zero",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/zero",
        "html": "Discussion\n\nThis point is equivalent to the origin. A view\u2019s origin appears in the top-left-back corner in a left-to-right language environment, with positive x toward the right. It appears in the top-right-back corner in a right-to-left language, with positive x toward the left. Positive y is always toward the bottom of the view, and positive z points toward the front.\n\nSee Also\nGetting the origin\nstatic let origin: UnitPoint3D\nThe origin of a view.\nBeta"
    },
    {
        "title": "BlendMode.color",
        "url": "https://developer.apple.com/documentation/swiftui/blendmode/color",
        "html": "See Also\nMixing color components\ncase hue\ncase saturation\ncase luminosity"
    },
    {
        "title": "BlendMode.luminosity",
        "url": "https://developer.apple.com/documentation/swiftui/blendmode/luminosity",
        "html": "See Also\nMixing color components\ncase hue\ncase saturation\ncase color"
    },
    {
        "title": "BlendMode.difference",
        "url": "https://developer.apple.com/documentation/swiftui/blendmode/difference",
        "html": "See Also\nInverting\ncase exclusion"
    },
    {
        "title": "BlendMode.hue",
        "url": "https://developer.apple.com/documentation/swiftui/blendmode/hue",
        "html": "See Also\nMixing color components\ncase saturation\ncase color\ncase luminosity"
    },
    {
        "title": "BlendMode.exclusion",
        "url": "https://developer.apple.com/documentation/swiftui/blendmode/exclusion",
        "html": "See Also\nInverting\ncase difference"
    },
    {
        "title": "BlendMode.hardLight",
        "url": "https://developer.apple.com/documentation/swiftui/blendmode/hardlight",
        "html": "See Also\nAdding contrast\ncase overlay\ncase softLight"
    },
    {
        "title": "topLeadingBack",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/topleadingback",
        "html": "Discussion\n\nThe leading edge appears on the left in a left-to-right language environment and on the right in a right-to-left environment.\n\nSee Also\nGetting top points\nstatic let topLeading: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the top-leading edge of a view.\nBeta\nstatic let topLeadingFront: UnitPoint3D\nA point that\u2019s in the top-leading-front corner of a view.\nBeta\nstatic let topBack: UnitPoint3D\nA point that\u2019s centered horizontally on the top-back edge of a view.\nBeta\nstatic let top: UnitPoint3D\nA point that\u2019s centered horizontally and in the depth dimension on the top face of a view.\nBeta\nstatic let topFront: UnitPoint3D\nA point that\u2019s centered horizontally on the top-front edge of a view.\nBeta\nstatic let topTrailingBack: UnitPoint3D\nA point that\u2019s in the top-trailing-back corner of a view.\nBeta\nstatic let topTrailing: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the top-trailing edge of a view.\nBeta\nstatic let topTrailingFront: UnitPoint3D\nA point that\u2019s in the top-trailing-front corner of a view.\nBeta"
    },
    {
        "title": "BlendMode.sourceAtop",
        "url": "https://developer.apple.com/documentation/swiftui/blendmode/sourceatop",
        "html": "See Also\nAccessing porter-duff modes\ncase destinationOver\ncase destinationOut"
    },
    {
        "title": "frame(in:)",
        "url": "https://developer.apple.com/documentation/swiftui/geometryproxy/frame(in:)-68tks",
        "html": "See Also\nAccessing geometry characteristics\nfunc bounds(of: NamedCoordinateSpace) -> CGRect?\nReturns the given coordinate space\u2019s bounds rectangle, converted to the local coordinate space.\nfunc frame(in: CoordinateSpace) -> CGRect\nReturns the container view\u2019s bounds rectangle, converted to a defined coordinate space.\nvar size: CGSize\nThe size of the container view.\nvar safeAreaInsets: EdgeInsets\nThe safe area inset of the container view.\nsubscript<T>(Anchor<T>) -> T\nResolves the value of an anchor to the container view.\nfunc transform(in: some CoordinateSpaceProtocol) -> AffineTransform3D?\nThe container view\u2019s 3D transform converted to a defined coordinate space.\nBeta"
    },
    {
        "title": "BlendMode.destinationOut",
        "url": "https://developer.apple.com/documentation/swiftui/blendmode/destinationout",
        "html": "See Also\nAccessing porter-duff modes\ncase sourceAtop\ncase destinationOver"
    },
    {
        "title": "topBack",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/topback",
        "html": "See Also\nGetting top points\nstatic let topLeadingBack: UnitPoint3D\nA point that\u2019s in the top-leading-back corner of a view.\nBeta\nstatic let topLeading: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the top-leading edge of a view.\nBeta\nstatic let topLeadingFront: UnitPoint3D\nA point that\u2019s in the top-leading-front corner of a view.\nBeta\nstatic let top: UnitPoint3D\nA point that\u2019s centered horizontally and in the depth dimension on the top face of a view.\nBeta\nstatic let topFront: UnitPoint3D\nA point that\u2019s centered horizontally on the top-front edge of a view.\nBeta\nstatic let topTrailingBack: UnitPoint3D\nA point that\u2019s in the top-trailing-back corner of a view.\nBeta\nstatic let topTrailing: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the top-trailing edge of a view.\nBeta\nstatic let topTrailingFront: UnitPoint3D\nA point that\u2019s in the top-trailing-front corner of a view.\nBeta"
    },
    {
        "title": "topFront",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/topfront",
        "html": "See Also\nGetting top points\nstatic let topLeadingBack: UnitPoint3D\nA point that\u2019s in the top-leading-back corner of a view.\nBeta\nstatic let topLeading: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the top-leading edge of a view.\nBeta\nstatic let topLeadingFront: UnitPoint3D\nA point that\u2019s in the top-leading-front corner of a view.\nBeta\nstatic let topBack: UnitPoint3D\nA point that\u2019s centered horizontally on the top-back edge of a view.\nBeta\nstatic let top: UnitPoint3D\nA point that\u2019s centered horizontally and in the depth dimension on the top face of a view.\nBeta\nstatic let topTrailingBack: UnitPoint3D\nA point that\u2019s in the top-trailing-back corner of a view.\nBeta\nstatic let topTrailing: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the top-trailing edge of a view.\nBeta\nstatic let topTrailingFront: UnitPoint3D\nA point that\u2019s in the top-trailing-front corner of a view.\nBeta"
    },
    {
        "title": "frame(in:)",
        "url": "https://developer.apple.com/documentation/swiftui/geometryproxy/frame(in:)-4d7dw",
        "html": "See Also\nAccessing geometry characteristics\nfunc bounds(of: NamedCoordinateSpace) -> CGRect?\nReturns the given coordinate space\u2019s bounds rectangle, converted to the local coordinate space.\nfunc frame(in: some CoordinateSpaceProtocol) -> CGRect\nReturns the container view\u2019s bounds rectangle, converted to a defined coordinate space.\nvar size: CGSize\nThe size of the container view.\nvar safeAreaInsets: EdgeInsets\nThe safe area inset of the container view.\nsubscript<T>(Anchor<T>) -> T\nResolves the value of an anchor to the container view.\nfunc transform(in: some CoordinateSpaceProtocol) -> AffineTransform3D?\nThe container view\u2019s 3D transform converted to a defined coordinate space.\nBeta"
    },
    {
        "title": "x",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/x",
        "html": "See Also\nGetting the point\u2019s coordinates\nvar y: CGFloat\nThe normalized distance from the origin to the point in the vertical dimension.\nBeta\nvar z: CGFloat\nThe normalized distance from the origin to the point in the depth dimension.\nBeta"
    },
    {
        "title": "topTrailingFront",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/toptrailingfront",
        "html": "Discussion\n\nThe trailing edge appears on the right in a left-to-right language environment and on the left in a right-to-left environment.\n\nSee Also\nGetting top points\nstatic let topLeadingBack: UnitPoint3D\nA point that\u2019s in the top-leading-back corner of a view.\nBeta\nstatic let topLeading: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the top-leading edge of a view.\nBeta\nstatic let topLeadingFront: UnitPoint3D\nA point that\u2019s in the top-leading-front corner of a view.\nBeta\nstatic let topBack: UnitPoint3D\nA point that\u2019s centered horizontally on the top-back edge of a view.\nBeta\nstatic let top: UnitPoint3D\nA point that\u2019s centered horizontally and in the depth dimension on the top face of a view.\nBeta\nstatic let topFront: UnitPoint3D\nA point that\u2019s centered horizontally on the top-front edge of a view.\nBeta\nstatic let topTrailingBack: UnitPoint3D\nA point that\u2019s in the top-trailing-back corner of a view.\nBeta\nstatic let topTrailing: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the top-trailing edge of a view.\nBeta"
    },
    {
        "title": "origin",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/origin",
        "html": "Discussion\n\nA view\u2019s origin appears in the top-left-back corner in a left-to-right language environment, with positive x toward the right. It appears in the top-right-back corner in a right-to-left language, with positive x toward the left. Positive y is always toward the bottom of the view, and positive z points toward the front.\n\nSee Also\nGetting the origin\nstatic let zero: UnitPoint3D\nA 3D unit point with all components equal to zero.\nBeta"
    },
    {
        "title": "topTrailingBack",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/toptrailingback",
        "html": "Discussion\n\nThe trailing edge appears on the right in a left-to-right language environment and on the left in a right-to-left environment.\n\nSee Also\nGetting top points\nstatic let topLeadingBack: UnitPoint3D\nA point that\u2019s in the top-leading-back corner of a view.\nBeta\nstatic let topLeading: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the top-leading edge of a view.\nBeta\nstatic let topLeadingFront: UnitPoint3D\nA point that\u2019s in the top-leading-front corner of a view.\nBeta\nstatic let topBack: UnitPoint3D\nA point that\u2019s centered horizontally on the top-back edge of a view.\nBeta\nstatic let top: UnitPoint3D\nA point that\u2019s centered horizontally and in the depth dimension on the top face of a view.\nBeta\nstatic let topFront: UnitPoint3D\nA point that\u2019s centered horizontally on the top-front edge of a view.\nBeta\nstatic let topTrailing: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the top-trailing edge of a view.\nBeta\nstatic let topTrailingFront: UnitPoint3D\nA point that\u2019s in the top-trailing-front corner of a view.\nBeta"
    },
    {
        "title": "GraphicsContext.BlurOptions",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/bluroptions",
        "html": "Overview\n\nYou can use a set of these options when you call blur(radius:options:) to create a GraphicsContext.Filter that adds blur to an object that you draw into a GraphicsContext.\n\nTopics\nGetting blur options\nstatic var dithersResult: GraphicsContext.BlurOptions\nAn option that causes the filter to dither the result, to reduce banding.\nstatic var opaque: GraphicsContext.BlurOptions\nAn option that causes the filter to ensure the result is completely opaque.\nRelationships\nConforms To\nEquatable\nExpressibleByArrayLiteral\nOptionSet\nRawRepresentable\nSendable\nSetAlgebra\nSee Also\nFiltering\nfunc addFilter(GraphicsContext.Filter, options: GraphicsContext.FilterOptions)\nAdds a filter that applies to subsequent drawing operations.\nstruct Filter\nA type that applies image processing operations to rendered content.\nstruct FilterOptions\nOptions that configure a filter that you add to a graphics context.\nstruct ShadowOptions\nOptions that configure the graphics context filter that creates shadows."
    },
    {
        "title": "leadingFront",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/leadingfront",
        "html": "Discussion\n\nThe leading edge appears on the left in a left-to-right language environment and on the right in a right-to-left environment.\n\nSee Also\nGetting middle points\nstatic let leadingBack: UnitPoint3D\nA point that\u2019s centered vertically on the leading-back edge of a view.\nBeta\nstatic let leading: UnitPoint3D\nA point that\u2019s centered vertically and in the depth dimension on the leading face of a view.\nBeta\nstatic let back: UnitPoint3D\nA point that\u2019s centered horizontally and vertically on the back face of a view.\nBeta\nstatic let center: UnitPoint3D\nA point that\u2019s centered in a view.\nBeta\nstatic let front: UnitPoint3D\nA point that\u2019s centered horizontally and vertically on the front face of a view.\nBeta\nstatic let trailingBack: UnitPoint3D\nA point that\u2019s centered vertically on the trailing-back edge of a view.\nBeta\nstatic let trailing: UnitPoint3D\nA point that\u2019s centered vertically and in the depth dimension on the trailing face of a view.\nBeta\nstatic let trailingFront: UnitPoint3D\nA point that\u2019s centered vertically on the trailing-front edge of a view.\nBeta"
    },
    {
        "title": "concatenate(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/concatenate(_:)",
        "html": "Parameters\nmatrix\n\nA transform to append to the existing transform.\n\nDiscussion\n\nCalling this method is equivalent to updating the context\u2019s transform directly using the matrix parameter:\n\ntransform = matrix.concatenating(transform)\n\nSee Also\nApplying transforms\nfunc scaleBy(x: CGFloat, y: CGFloat)\nScales subsequent drawing operations by an amount in each dimension.\nfunc rotate(by: Angle)\nRotates subsequent drawing operations by an angle.\nfunc translateBy(x: CGFloat, y: CGFloat)\nMoves subsequent drawing operations by an amount in each dimension.\nvar transform: CGAffineTransform\nThe current transform matrix, defining user space coordinates."
    },
    {
        "title": "leadingBack",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/leadingback",
        "html": "Discussion\n\nThe leading edge appears on the left in a left-to-right language environment and on the right in a right-to-left environment.\n\nSee Also\nGetting middle points\nstatic let leading: UnitPoint3D\nA point that\u2019s centered vertically and in the depth dimension on the leading face of a view.\nBeta\nstatic let leadingFront: UnitPoint3D\nA point that\u2019s centered vertically on the leading-front edge of a view.\nBeta\nstatic let back: UnitPoint3D\nA point that\u2019s centered horizontally and vertically on the back face of a view.\nBeta\nstatic let center: UnitPoint3D\nA point that\u2019s centered in a view.\nBeta\nstatic let front: UnitPoint3D\nA point that\u2019s centered horizontally and vertically on the front face of a view.\nBeta\nstatic let trailingBack: UnitPoint3D\nA point that\u2019s centered vertically on the trailing-back edge of a view.\nBeta\nstatic let trailing: UnitPoint3D\nA point that\u2019s centered vertically and in the depth dimension on the trailing face of a view.\nBeta\nstatic let trailingFront: UnitPoint3D\nA point that\u2019s centered vertically on the trailing-front edge of a view.\nBeta"
    },
    {
        "title": "in(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/in(_:)",
        "html": "Parameters\nrect\n\nA rectangle that gives the absolute coordinates over which to map the shape style.\n\nReturn Value\n\nA new shape style mapped to the coordinates given by rect.\n\nDiscussion\n\nSome shape styles have colors or patterns that vary with position based on UnitPoint coordinates. For example, you can create a LinearGradient using top and bottom as the start and end points:\n\nlet gradient = LinearGradient(\n    colors: [.red, .yellow],\n    startPoint: .top,\n    endPoint: .bottom)\n\n\nWhen rendering such styles, SwiftUI maps the unit space coordinates to the absolute coordinates of the filled shape. However, you can tell SwiftUI to use a different set of coordinates by supplying a rectangle to the in(_:) method. Consider two resizable rectangles using the gradient defined above:\n\nHStack {\n    Rectangle()\n        .fill(gradient)\n    Rectangle()\n        .fill(gradient.in(CGRect(x: 0, y: 0, width: 0, height: 300)))\n}\n.onTapGesture { isBig.toggle() }\n.frame(height: isBig ? 300 : 50)\n.animation(.easeInOut)\n\n\nWhen isBig is true \u2014 defined elsewhere as a private State variable \u2014 the rectangles look the same, because their heights match that of the modified gradient:\n\nWhen the user toggles isBig by tapping the HStack, the rectangles shrink, but the gradients each react in a different way:\n\nSwiftUI remaps the gradient of the first rectangle to the new frame height, so that you continue to see the full range of colors in a smaller area. For the second rectangle, the modified gradient retains a mapping to the full height, so you instead see only a small part of the overall gradient. Animation helps to visualize the difference."
    },
    {
        "title": "subscript(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/geometryproxy/subscript(_:)",
        "html": "See Also\nAccessing geometry characteristics\nfunc bounds(of: NamedCoordinateSpace) -> CGRect?\nReturns the given coordinate space\u2019s bounds rectangle, converted to the local coordinate space.\nfunc frame(in: CoordinateSpace) -> CGRect\nReturns the container view\u2019s bounds rectangle, converted to a defined coordinate space.\nfunc frame(in: some CoordinateSpaceProtocol) -> CGRect\nReturns the container view\u2019s bounds rectangle, converted to a defined coordinate space.\nvar size: CGSize\nThe size of the container view.\nvar safeAreaInsets: EdgeInsets\nThe safe area inset of the container view.\nfunc transform(in: some CoordinateSpaceProtocol) -> AffineTransform3D?\nThe container view\u2019s 3D transform converted to a defined coordinate space.\nBeta"
    },
    {
        "title": "buildBlock(_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/commandsbuilder/buildblock(_:_:_:)",
        "html": "See Also\nBuilding content\nstatic func buildBlock() -> EmptyCommands\nBuilds an empty command set from a block containing no statements.\nstatic func buildBlock<C>(C) -> C\nPasses a single command group written as a child group through modified.\nstatic func buildBlock<C0, C1>(C0, C1) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some Commands"
    },
    {
        "title": "trailingFront",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/trailingfront",
        "html": "Discussion\n\nThe trailing edge appears on the right in a left-to-right language environment and on the left in a right-to-left environment.\n\nSee Also\nGetting middle points\nstatic let leadingBack: UnitPoint3D\nA point that\u2019s centered vertically on the leading-back edge of a view.\nBeta\nstatic let leading: UnitPoint3D\nA point that\u2019s centered vertically and in the depth dimension on the leading face of a view.\nBeta\nstatic let leadingFront: UnitPoint3D\nA point that\u2019s centered vertically on the leading-front edge of a view.\nBeta\nstatic let back: UnitPoint3D\nA point that\u2019s centered horizontally and vertically on the back face of a view.\nBeta\nstatic let center: UnitPoint3D\nA point that\u2019s centered in a view.\nBeta\nstatic let front: UnitPoint3D\nA point that\u2019s centered horizontally and vertically on the front face of a view.\nBeta\nstatic let trailingBack: UnitPoint3D\nA point that\u2019s centered vertically on the trailing-back edge of a view.\nBeta\nstatic let trailing: UnitPoint3D\nA point that\u2019s centered vertically and in the depth dimension on the trailing face of a view.\nBeta"
    },
    {
        "title": "stroke(_:with:style:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/stroke(_:with:style:)",
        "html": "Parameters\npath\n\nThe path to outline.\n\nshading\n\nThe color or pattern to use when outlining the path.\n\nstyle\n\nA style that indicates how to outline the path.\n\nDiscussion\n\nIf you only need to control the style\u2019s lineWidth property, use stroke(_:with:lineWidth:) instead.\n\nSee Also\nDrawing a path\nfunc stroke(Path, with: GraphicsContext.Shading, lineWidth: CGFloat)\nDraws a path into the context with a specified line width.\nfunc fill(Path, with: GraphicsContext.Shading, style: FillStyle)\nDraws a path into the context and fills the outlined region.\nfunc resolve(GraphicsContext.Shading) -> GraphicsContext.Shading\nReturns a version of a shading resolved with the current values of the graphics context\u2019s environment.\nstruct Shading\nA color or pattern that you can use to outline or fill a path.\nstruct GradientOptions\nOptions that affect the rendering of color gradients."
    },
    {
        "title": "init(columns:alignment:spacing:pinnedViews:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/lazyvgrid/init(columns:alignment:spacing:pinnedviews:content:)",
        "html": "Parameters\ncolumns\n\nAn array of grid items to size and position each row of the grid.\n\nalignment\n\nThe alignment of the grid within its parent view.\n\nspacing\n\nThe spacing between the grid and the next item in its parent view.\n\npinnedViews\n\nViews to pin to the bounds of a parent scroll view.\n\ncontent\n\nThe content of the grid."
    },
    {
        "title": "size",
        "url": "https://developer.apple.com/documentation/swiftui/geometryproxy/size",
        "html": "See Also\nAccessing geometry characteristics\nfunc bounds(of: NamedCoordinateSpace) -> CGRect?\nReturns the given coordinate space\u2019s bounds rectangle, converted to the local coordinate space.\nfunc frame(in: CoordinateSpace) -> CGRect\nReturns the container view\u2019s bounds rectangle, converted to a defined coordinate space.\nfunc frame(in: some CoordinateSpaceProtocol) -> CGRect\nReturns the container view\u2019s bounds rectangle, converted to a defined coordinate space.\nvar safeAreaInsets: EdgeInsets\nThe safe area inset of the container view.\nsubscript<T>(Anchor<T>) -> T\nResolves the value of an anchor to the container view.\nfunc transform(in: some CoordinateSpaceProtocol) -> AffineTransform3D?\nThe container view\u2019s 3D transform converted to a defined coordinate space.\nBeta"
    },
    {
        "title": "thinMaterial",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/thinmaterial",
        "html": "See Also\nMaterials\nstatic var ultraThinMaterial: Material\nA mostly translucent material.\nAvailable when Self is Material.\nstatic var regularMaterial: Material\nA material that\u2019s somewhat translucent.\nAvailable when Self is Material.\nstatic var thickMaterial: Material\nA material that\u2019s more opaque than translucent.\nAvailable when Self is Material.\nstatic var ultraThickMaterial: Material\nA mostly opaque material.\nAvailable when Self is Material.\nstatic var bar: Material\nA material matching the style of system toolbars.\nAvailable when Self is Material."
    },
    {
        "title": "alignment",
        "url": "https://developer.apple.com/documentation/swiftui/griditem/alignment",
        "html": "Discussion\n\nUse this property to anchor the view\u2019s relative position to the same relative position in the view\u2019s assigned grid space.\n\nSee Also\nInspecting grid item properties\nvar spacing: CGFloat?\nThe spacing to the next item.\nvar size: GridItem.Size\nThe size of the item, which is the width of a column item or the height of a row item.\nenum Size\nThe size in the minor axis of one or more rows or columns in a grid layout."
    },
    {
        "title": "init(after:addition:)",
        "url": "https://developer.apple.com/documentation/swiftui/commandgroup/init(after:addition:)",
        "html": "See Also\nCreating a command group\ninit(before: CommandGroupPlacement, addition: () -> Content)\nA value describing the addition of the given views to the beginning of the indicated group.\ninit(replacing: CommandGroupPlacement, addition: () -> Content)\nA value describing the complete replacement of the contents of the indicated group with the given views."
    },
    {
        "title": "bottomBack",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/bottomback",
        "html": "See Also\nGetting bottom points\nstatic let bottomLeadingBack: UnitPoint3D\nA point that\u2019s in the bottom-leading-back corner of a view.\nBeta\nstatic let bottomLeading: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the bottom-leading edge of a view.\nBeta\nstatic let bottomLeadingFront: UnitPoint3D\nA point that\u2019s in the bottom-leading-front corner of a view.\nBeta\nstatic let bottom: UnitPoint3D\nA point that\u2019s centered horizontally and in the depth dimension on the bottom face of a view.\nBeta\nstatic let bottomFront: UnitPoint3D\nA point that\u2019s centered horizontally on the bottom-front edge of a view.\nBeta\nstatic let bottomTrailingBack: UnitPoint3D\nA point that\u2019s in the bottom-trailing-back corner of a view.\nBeta\nstatic let bottomTrailing: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the bottom-trailing edge of a view.\nBeta\nstatic let bottomTrailingFront: UnitPoint3D\nA point that\u2019s in the bottom-trailing-front corner of a view.\nBeta"
    },
    {
        "title": "bottom",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/bottom",
        "html": "See Also\nGetting bottom points\nstatic let bottomLeadingBack: UnitPoint3D\nA point that\u2019s in the bottom-leading-back corner of a view.\nBeta\nstatic let bottomLeading: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the bottom-leading edge of a view.\nBeta\nstatic let bottomLeadingFront: UnitPoint3D\nA point that\u2019s in the bottom-leading-front corner of a view.\nBeta\nstatic let bottomBack: UnitPoint3D\nA point that\u2019s centered horizontally on the bottom-back edge of a view.\nBeta\nstatic let bottomFront: UnitPoint3D\nA point that\u2019s centered horizontally on the bottom-front edge of a view.\nBeta\nstatic let bottomTrailingBack: UnitPoint3D\nA point that\u2019s in the bottom-trailing-back corner of a view.\nBeta\nstatic let bottomTrailing: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the bottom-trailing edge of a view.\nBeta\nstatic let bottomTrailingFront: UnitPoint3D\nA point that\u2019s in the bottom-trailing-front corner of a view.\nBeta"
    },
    {
        "title": "draw(_:in:style:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/draw(_:in:style:)-blhz",
        "html": "Parameters\nimage\n\nThe Image to draw. Before drawing, the method converts the image to a GraphicsContext.ResolvedImage by calling resolve(_:).\n\nrect\n\nThe rectangle in the current user space to draw the image in.\n\nstyle\n\nA fill style to use when rasterizing the image.\n\nDiscussion\n\nThe current context state defines the full drawing operation. For example, the current transformation and clip shapes affect how SwiftUI draws the image.\n\nSee Also\nDrawing an image\nfunc draw(Image, at: CGPoint, anchor: UnitPoint)\nDraws an image into the context, aligning an anchor within the image to a point in the context.\nfunc draw(GraphicsContext.ResolvedImage, at: CGPoint, anchor: UnitPoint)\nDraws a resolved image into the context, aligning an anchor within the image to a point in the context.\nfunc draw(GraphicsContext.ResolvedImage, in: CGRect, style: FillStyle)\nDraws a resolved image into the context, using the specified rectangle as a layout frame.\nfunc resolve(Image) -> GraphicsContext.ResolvedImage\nGets a version of an image that\u2019s fixed with the current values of the graphics context\u2019s environment.\nstruct ResolvedImage\nAn image resolved to a particular environment."
    },
    {
        "title": "bottomFront",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/bottomfront",
        "html": "See Also\nGetting bottom points\nstatic let bottomLeadingBack: UnitPoint3D\nA point that\u2019s in the bottom-leading-back corner of a view.\nBeta\nstatic let bottomLeading: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the bottom-leading edge of a view.\nBeta\nstatic let bottomLeadingFront: UnitPoint3D\nA point that\u2019s in the bottom-leading-front corner of a view.\nBeta\nstatic let bottomBack: UnitPoint3D\nA point that\u2019s centered horizontally on the bottom-back edge of a view.\nBeta\nstatic let bottom: UnitPoint3D\nA point that\u2019s centered horizontally and in the depth dimension on the bottom face of a view.\nBeta\nstatic let bottomTrailingBack: UnitPoint3D\nA point that\u2019s in the bottom-trailing-back corner of a view.\nBeta\nstatic let bottomTrailing: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the bottom-trailing edge of a view.\nBeta\nstatic let bottomTrailingFront: UnitPoint3D\nA point that\u2019s in the bottom-trailing-front corner of a view.\nBeta"
    },
    {
        "title": "bottomTrailingBack",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/bottomtrailingback",
        "html": "Discussion\n\nThe trailing edge appears on the right in a left-to-right language environment and on the left in a right-to-left environment.\n\nSee Also\nGetting bottom points\nstatic let bottomLeadingBack: UnitPoint3D\nA point that\u2019s in the bottom-leading-back corner of a view.\nBeta\nstatic let bottomLeading: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the bottom-leading edge of a view.\nBeta\nstatic let bottomLeadingFront: UnitPoint3D\nA point that\u2019s in the bottom-leading-front corner of a view.\nBeta\nstatic let bottomBack: UnitPoint3D\nA point that\u2019s centered horizontally on the bottom-back edge of a view.\nBeta\nstatic let bottom: UnitPoint3D\nA point that\u2019s centered horizontally and in the depth dimension on the bottom face of a view.\nBeta\nstatic let bottomFront: UnitPoint3D\nA point that\u2019s centered horizontally on the bottom-front edge of a view.\nBeta\nstatic let bottomTrailing: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the bottom-trailing edge of a view.\nBeta\nstatic let bottomTrailingFront: UnitPoint3D\nA point that\u2019s in the bottom-trailing-front corner of a view.\nBeta"
    },
    {
        "title": "draw(_:at:anchor:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/draw(_:at:anchor:)-1z5wt",
        "html": "Parameters\nimage\n\nThe GraphicsContext.ResolvedImage to draw. Get a resolved image from an Image by calling resolve(_:). Alternatively, you can call draw(_:at:anchor:) with an Image, and that method performs the resolution automatically.\n\npoint\n\nA point within the rectangle of the resolved image to anchor to a point in the context.\n\nanchor\n\nA UnitPoint within the context to align the image with. The default is center.\n\nDiscussion\n\nThe current context state defines the full drawing operation. For example, the current transformation and clip shapes affect how SwiftUI draws the image.\n\nSee Also\nDrawing an image\nfunc draw(Image, at: CGPoint, anchor: UnitPoint)\nDraws an image into the context, aligning an anchor within the image to a point in the context.\nfunc draw(Image, in: CGRect, style: FillStyle)\nDraws an image into the context, using the specified rectangle as a layout frame.\nfunc draw(GraphicsContext.ResolvedImage, in: CGRect, style: FillStyle)\nDraws a resolved image into the context, using the specified rectangle as a layout frame.\nfunc resolve(Image) -> GraphicsContext.ResolvedImage\nGets a version of an image that\u2019s fixed with the current values of the graphics context\u2019s environment.\nstruct ResolvedImage\nAn image resolved to a particular environment."
    },
    {
        "title": "bottomTrailing",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/bottomtrailing",
        "html": "Discussion\n\nThe trailing edge appears on the right in a left-to-right language environment and on the left in a right-to-left environment.\n\nSee Also\nGetting bottom points\nstatic let bottomLeadingBack: UnitPoint3D\nA point that\u2019s in the bottom-leading-back corner of a view.\nBeta\nstatic let bottomLeading: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the bottom-leading edge of a view.\nBeta\nstatic let bottomLeadingFront: UnitPoint3D\nA point that\u2019s in the bottom-leading-front corner of a view.\nBeta\nstatic let bottomBack: UnitPoint3D\nA point that\u2019s centered horizontally on the bottom-back edge of a view.\nBeta\nstatic let bottom: UnitPoint3D\nA point that\u2019s centered horizontally and in the depth dimension on the bottom face of a view.\nBeta\nstatic let bottomFront: UnitPoint3D\nA point that\u2019s centered horizontally on the bottom-front edge of a view.\nBeta\nstatic let bottomTrailingBack: UnitPoint3D\nA point that\u2019s in the bottom-trailing-back corner of a view.\nBeta\nstatic let bottomTrailingFront: UnitPoint3D\nA point that\u2019s in the bottom-trailing-front corner of a view.\nBeta"
    },
    {
        "title": "draw(_:in:style:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/draw(_:in:style:)-7rvee",
        "html": "Parameters\nimage\n\nThe GraphicsContext.ResolvedImage to draw. Get a resolved image from an Image by calling resolve(_:). Alternatively, you can call draw(_:in:style:) with an Image, and that method performs the resolution automatically.\n\nrect\n\nThe rectangle in the current user space to draw the image in.\n\nstyle\n\nA fill style to use when rasterizing the image.\n\nDiscussion\n\nThe current context state defines the full drawing operation. For example, the current transformation and clip shapes affect how SwiftUI draws the image.\n\nSee Also\nDrawing an image\nfunc draw(Image, at: CGPoint, anchor: UnitPoint)\nDraws an image into the context, aligning an anchor within the image to a point in the context.\nfunc draw(Image, in: CGRect, style: FillStyle)\nDraws an image into the context, using the specified rectangle as a layout frame.\nfunc draw(GraphicsContext.ResolvedImage, at: CGPoint, anchor: UnitPoint)\nDraws a resolved image into the context, aligning an anchor within the image to a point in the context.\nfunc resolve(Image) -> GraphicsContext.ResolvedImage\nGets a version of an image that\u2019s fixed with the current values of the graphics context\u2019s environment.\nstruct ResolvedImage\nAn image resolved to a particular environment."
    },
    {
        "title": "bottomTrailingFront",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/bottomtrailingfront",
        "html": "Discussion\n\nThe trailing edge appears on the right in a left-to-right language environment and on the left in a right-to-left environment.\n\nSee Also\nGetting bottom points\nstatic let bottomLeadingBack: UnitPoint3D\nA point that\u2019s in the bottom-leading-back corner of a view.\nBeta\nstatic let bottomLeading: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the bottom-leading edge of a view.\nBeta\nstatic let bottomLeadingFront: UnitPoint3D\nA point that\u2019s in the bottom-leading-front corner of a view.\nBeta\nstatic let bottomBack: UnitPoint3D\nA point that\u2019s centered horizontally on the bottom-back edge of a view.\nBeta\nstatic let bottom: UnitPoint3D\nA point that\u2019s centered horizontally and in the depth dimension on the bottom face of a view.\nBeta\nstatic let bottomFront: UnitPoint3D\nA point that\u2019s centered horizontally on the bottom-front edge of a view.\nBeta\nstatic let bottomTrailingBack: UnitPoint3D\nA point that\u2019s in the bottom-trailing-back corner of a view.\nBeta\nstatic let bottomTrailing: UnitPoint3D\nA point that\u2019s centered in the depth dimension on the bottom-trailing edge of a view.\nBeta"
    },
    {
        "title": "resolve(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/resolve(_:)-898z6",
        "html": "Parameters\nimage\n\nThe Image to resolve.\n\nReturn Value\n\nAn image that\u2019s resolved into the current context\u2019s environment, taking into account environment values like the display resolution and current color scheme.\n\nDiscussion\n\nYou can measure the resolved image by looking at its size and baseline properties. You can draw the resolved image with the context\u2019s draw(_:in:style:) or draw(_:at:anchor:) method.\n\nSee Also\nDrawing an image\nfunc draw(Image, at: CGPoint, anchor: UnitPoint)\nDraws an image into the context, aligning an anchor within the image to a point in the context.\nfunc draw(Image, in: CGRect, style: FillStyle)\nDraws an image into the context, using the specified rectangle as a layout frame.\nfunc draw(GraphicsContext.ResolvedImage, at: CGPoint, anchor: UnitPoint)\nDraws a resolved image into the context, aligning an anchor within the image to a point in the context.\nfunc draw(GraphicsContext.ResolvedImage, in: CGRect, style: FillStyle)\nDraws a resolved image into the context, using the specified rectangle as a layout frame.\nstruct ResolvedImage\nAn image resolved to a particular environment."
    },
    {
        "title": "BlendMode.darken",
        "url": "https://developer.apple.com/documentation/swiftui/blendmode/darken",
        "html": "See Also\nDarkening\ncase multiply\ncase colorBurn\ncase plusDarker"
    },
    {
        "title": "clip(to:style:options:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/clip(to:style:options:)",
        "html": "Parameters\npath\n\nA Path that defines the shape of the clipping mask.\n\nstyle\n\nA FillStyle that defines how to rasterize the shape.\n\noptions\n\nClip options that tell SwiftUI how to interpret the path as a clip shape. For example, you can invert the clip shape by setting the inverse option.\n\nDiscussion\n\nCall this method to add a shape to the array of clip shapes that the context uses to define a clipping mask. Shapes that you add affect only subsequent drawing operations.\n\nSee Also\nMasking\nfunc clipToLayer(opacity: Double, options: GraphicsContext.ClipOptions, content: (inout GraphicsContext) throws -> Void) rethrows\nAdds a clip shape that you define in a new layer to the context\u2019s array of clip shapes.\nvar clipBoundingRect: CGRect\nThe bounding rectangle of the intersection of all current clip shapes in the current user space.\nstruct ClipOptions\nOptions that affect the use of clip shapes."
    },
    {
        "title": "init(function:arguments:)",
        "url": "https://developer.apple.com/documentation/swiftui/shader/init(function:arguments:)",
        "html": "See Also\nCreating a shader\nstruct Argument\nA single uniform argument value to a shader function."
    },
    {
        "title": "init(x:y:z:)",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/init(x:y:z:)",
        "html": "Parameters\nx\n\nThe normalized distance from the origin to the point in the horizontal dimension.\n\ny\n\nThe normalized distance from the origin to the point in the vertical dimension.\n\nz\n\nThe normalized distance from the origin to the point in the depth dimension.\n\nDiscussion\n\nValues outside the range [0, 1] project to points outside of a view.\n\nSee Also\nCreating a point\ninit()\nCreates a 3D unit point at the origin.\nBeta"
    },
    {
        "title": "draw(_:at:anchor:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/draw(_:at:anchor:)-5dgmd",
        "html": "Parameters\ntext\n\nThe Text view to draw. Before drawing, the method converts the view to GraphicsContext.ResolvedText by calling resolve(_:).\n\npoint\n\nA point within the rectangle of the resolved text to anchor to a point in the context.\n\nanchor\n\nA UnitPoint within the context to align the text with. The default is center.\n\nDiscussion\n\nThe current context state defines the full drawing operation. For example, the current transformation and clip shapes affect how SwiftUI draws the text.\n\nSee Also\nDrawing text\nfunc draw(Text, in: CGRect)\nDraws text into the context using the specified rectangle as a layout frame.\nfunc draw(GraphicsContext.ResolvedText, at: CGPoint, anchor: UnitPoint)\nDraws resolved text into the context, aligning an anchor within the ideal size of the text to a point in the context.\nfunc draw(GraphicsContext.ResolvedText, in: CGRect)\nDraws resolved text into the context using the specified rectangle as a layout frame.\nfunc resolve(Text) -> GraphicsContext.ResolvedText\nGets a version of a text view that\u2019s fixed with the current values of the graphics context\u2019s environment.\nstruct ResolvedText\nA text view resolved to a particular environment."
    },
    {
        "title": "GraphicsContext.ResolvedImage",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/resolvedimage",
        "html": "Overview\n\nYou resolve an Image in preparation for drawing it into a context, either manually by calling resolve(_:), or automatically when calling draw(_:in:style:) or draw(_:at:anchor:). The resolved image takes into account environment values like the display resolution and current color scheme.\n\nTopics\nGetting the image properties\nvar size: CGSize\nThe size of the image.\nlet baseline: CGFloat\nThe distance from the top of the image to its baseline.\nvar shading: GraphicsContext.Shading?\nAn optional shading to fill the image with.\nSee Also\nDrawing an image\nfunc draw(Image, at: CGPoint, anchor: UnitPoint)\nDraws an image into the context, aligning an anchor within the image to a point in the context.\nfunc draw(Image, in: CGRect, style: FillStyle)\nDraws an image into the context, using the specified rectangle as a layout frame.\nfunc draw(GraphicsContext.ResolvedImage, at: CGPoint, anchor: UnitPoint)\nDraws a resolved image into the context, aligning an anchor within the image to a point in the context.\nfunc draw(GraphicsContext.ResolvedImage, in: CGRect, style: FillStyle)\nDraws a resolved image into the context, using the specified rectangle as a layout frame.\nfunc resolve(Image) -> GraphicsContext.ResolvedImage\nGets a version of an image that\u2019s fixed with the current values of the graphics context\u2019s environment."
    },
    {
        "title": "resolve(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/resolve(_:)-4dx65",
        "html": "Parameters\ntext\n\nThe Text view to resolve.\n\nReturn Value\n\nA text view that\u2019s resolved into the current context\u2019s environment, taking into account environment values like the display resolution and current color scheme.\n\nDiscussion\n\nYou can measure the resolved text by calling its measure(in:) method. You can draw the resolved text with the context\u2019s draw(_:in:) or draw(_:at:anchor:) method.\n\nSee Also\nDrawing text\nfunc draw(Text, at: CGPoint, anchor: UnitPoint)\nDraws text into the context, aligning an anchor within the ideal size of the rendered text to a point in the context.\nfunc draw(Text, in: CGRect)\nDraws text into the context using the specified rectangle as a layout frame.\nfunc draw(GraphicsContext.ResolvedText, at: CGPoint, anchor: UnitPoint)\nDraws resolved text into the context, aligning an anchor within the ideal size of the text to a point in the context.\nfunc draw(GraphicsContext.ResolvedText, in: CGRect)\nDraws resolved text into the context using the specified rectangle as a layout frame.\nstruct ResolvedText\nA text view resolved to a particular environment."
    },
    {
        "title": "function",
        "url": "https://developer.apple.com/documentation/swiftui/shader/function",
        "html": "See Also\nGetting the shader function\nvar arguments: [Shader.Argument]\nThe uniform argument values passed to the shader function."
    },
    {
        "title": "BlendMode.screen",
        "url": "https://developer.apple.com/documentation/swiftui/blendmode/screen",
        "html": "See Also\nLightening\ncase lighten\ncase colorDodge\ncase plusLighter"
    },
    {
        "title": "BlendMode.colorBurn",
        "url": "https://developer.apple.com/documentation/swiftui/blendmode/colorburn",
        "html": "See Also\nDarkening\ncase darken\ncase multiply\ncase plusDarker"
    },
    {
        "title": "draw(_:in:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/draw(_:in:)-69ad8",
        "html": "Parameters\ntext\n\nThe GraphicsContext.ResolvedText to draw. Get resolved text from a Text view by calling resolve(_:). Alternatively, you can call draw(_:in:) with a Text view, and that method performs the resolution automatically.\n\nrect\n\nThe rectangle in the current user space to draw the text in.\n\nDiscussion\n\nThe current context state defines the full drawing operation. For example, the current transformation and clip shapes affect how SwiftUI draws the text.\n\nSee Also\nDrawing text\nfunc draw(Text, at: CGPoint, anchor: UnitPoint)\nDraws text into the context, aligning an anchor within the ideal size of the rendered text to a point in the context.\nfunc draw(Text, in: CGRect)\nDraws text into the context using the specified rectangle as a layout frame.\nfunc draw(GraphicsContext.ResolvedText, at: CGPoint, anchor: UnitPoint)\nDraws resolved text into the context, aligning an anchor within the ideal size of the text to a point in the context.\nfunc resolve(Text) -> GraphicsContext.ResolvedText\nGets a version of a text view that\u2019s fixed with the current values of the graphics context\u2019s environment.\nstruct ResolvedText\nA text view resolved to a particular environment."
    },
    {
        "title": "init(data:)",
        "url": "https://developer.apple.com/documentation/swiftui/shaderlibrary/init(data:)",
        "html": "See Also\nCreating a shader library\ninit(url: URL)\nCreates a new Metal shader library from the contents of url, which must be the location of precompiled Metal library. Functions compiled from the returned library will only be cached as long as the returned library exists."
    },
    {
        "title": "library",
        "url": "https://developer.apple.com/documentation/swiftui/shaderfunction/library",
        "html": "See Also\nConfiguring a function\nvar name: String\nThe name of the shader function in the library.\nfunc dynamicallyCall(withArguments: [Shader.Argument]) -> Shader\nReturns a new shader by applying the provided argument values to the referenced function."
    },
    {
        "title": "arguments",
        "url": "https://developer.apple.com/documentation/swiftui/shader/arguments",
        "html": "See Also\nGetting the shader function\nvar function: ShaderFunction\nThe shader function called by the shader."
    },
    {
        "title": "bundle(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/shaderlibrary/bundle(_:)",
        "html": "See Also\nGetting the default shader library\nstatic let `default`: ShaderLibrary\nThe default shader library of the main (i.e. app) bundle."
    },
    {
        "title": "GraphicsContext.ResolvedSymbol",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/resolvedsymbol",
        "html": "Overview\n\nYou resolve a child view in preparation for drawing it into a context by calling resolveSymbol(id:). The resolved view takes into account environment values like the display resolution and current color scheme.\n\nTopics\nGetting the symbol properties\nvar size: CGSize\nThe dimensions of the resolved symbol.\nSee Also\nDrawing a child view\nfunc draw(GraphicsContext.ResolvedSymbol, at: CGPoint, anchor: UnitPoint)\nDraws a resolved symbol into the context, aligning an anchor within the symbol to a point in the context.\nfunc draw(GraphicsContext.ResolvedSymbol, in: CGRect)\nDraws a resolved symbol into the context, using the specified rectangle as a layout frame.\nfunc resolveSymbol<ID>(id: ID) -> GraphicsContext.ResolvedSymbol?\nGets the identified child view as a resolved symbol, if the view exists."
    },
    {
        "title": "dynamicallyCall(withArguments:)",
        "url": "https://developer.apple.com/documentation/swiftui/shaderfunction/dynamicallycall(witharguments:)",
        "html": "Discussion\n\nTypically this subscript is used implicitly via function-call syntax, for example:\n\nlet shader = ShaderLibrary.default.myFunction(.float(42))\n\nwhich creates a shader passing the value 42 to the first unbound parameter of myFunction().\n\nSee Also\nConfiguring a function\nvar library: ShaderLibrary\nThe shader library storing the function.\nvar name: String\nThe name of the shader function in the library."
    },
    {
        "title": "resolveSymbol(id:)",
        "url": "https://developer.apple.com/documentation/swiftui/graphicscontext/resolvesymbol(id:)",
        "html": "Parameters\nid\n\nThe value that you used to tag the view when you define it in the symbols parameter of the Canvas initializer init(opaque:colorMode:rendersAsynchronously:renderer:symbols:).\n\nReturn Value\n\nThe resolved symbol, or nil if SwiftUI can\u2019t find a child view with the given id.\n\nSee Also\nDrawing a child view\nfunc draw(GraphicsContext.ResolvedSymbol, at: CGPoint, anchor: UnitPoint)\nDraws a resolved symbol into the context, aligning an anchor within the symbol to a point in the context.\nfunc draw(GraphicsContext.ResolvedSymbol, in: CGRect)\nDraws a resolved symbol into the context, using the specified rectangle as a layout frame.\nstruct ResolvedSymbol\nA static sequence of drawing operations that may be drawn multiple times, preserving their resolution independence."
    },
    {
        "title": "name",
        "url": "https://developer.apple.com/documentation/swiftui/shaderfunction/name",
        "html": "See Also\nConfiguring a function\nvar library: ShaderLibrary\nThe shader library storing the function.\nfunc dynamicallyCall(withArguments: [Shader.Argument]) -> Shader\nReturns a new shader by applying the provided argument values to the referenced function."
    },
    {
        "title": "BlendMode.colorDodge",
        "url": "https://developer.apple.com/documentation/swiftui/blendmode/colordodge",
        "html": "See Also\nLightening\ncase lighten\ncase screen\ncase plusLighter"
    },
    {
        "title": "BlendMode.lighten",
        "url": "https://developer.apple.com/documentation/swiftui/blendmode/lighten",
        "html": "See Also\nLightening\ncase screen\ncase colorDodge\ncase plusLighter"
    },
    {
        "title": "bottom",
        "url": "https://developer.apple.com/documentation/swiftui/alignment/bottom",
        "html": "Discussion\n\nThis alignment combines the center horizontal guide and the bottom vertical guide:\n\nSee Also\nGetting bottom guides\nstatic let bottomLeading: Alignment\nA guide that marks the bottom and leading edges of the view.\nstatic let bottomTrailing: Alignment\nA guide that marks the bottom and trailing edges of the view."
    },
    {
        "title": "center",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint/center",
        "html": "Discussion\n\nThis point occupies the position where the horizontal and vertical alignment guides intersect for center alignment.\n\nSee Also\nGetting middle points\nstatic let leading: UnitPoint\nA point that\u2019s centered vertically on the leading edge of a view.\nstatic let trailing: UnitPoint\nA point that\u2019s centered vertically on the trailing edge of a view."
    },
    {
        "title": "topTrailing",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint/toptrailing",
        "html": "Discussion\n\nThis point occupies the position where the horizontal and vertical alignment guides intersect for topTrailing alignment. The trailing edge appears on the right in a left-to-right language environment and on the left in a right-to-left environment.\n\nSee Also\nGetting top points\nstatic let topLeading: UnitPoint\nA point that\u2019s in the top, leading corner of a view.\nstatic let top: UnitPoint\nA point that\u2019s centered horizontally on the top edge of a view."
    },
    {
        "title": "bottomLeading",
        "url": "https://developer.apple.com/documentation/swiftui/alignment/bottomleading",
        "html": "Discussion\n\nThis alignment combines the leading horizontal guide and the bottom vertical guide:\n\nSee Also\nGetting bottom guides\nstatic let bottom: Alignment\nA guide that marks the bottom edge of the view.\nstatic let bottomTrailing: Alignment\nA guide that marks the bottom and trailing edges of the view."
    },
    {
        "title": "init(alignment:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/zstack/init(alignment:content:)",
        "html": "Parameters\nalignment\n\nThe guide for aligning the subviews in this stack on both the x- and y-axes.\n\ncontent\n\nA view builder that creates the content of this stack."
    },
    {
        "title": "buildBlock()",
        "url": "https://developer.apple.com/documentation/swiftui/commandsbuilder/buildblock()",
        "html": "See Also\nBuilding content\nstatic func buildBlock<C>(C) -> C\nPasses a single command group written as a child group through modified.\nstatic func buildBlock<C0, C1>(C0, C1) -> some Commands\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some Commands"
    },
    {
        "title": "buildBlock(_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/commandsbuilder/buildblock(_:_:)",
        "html": "See Also\nBuilding content\nstatic func buildBlock() -> EmptyCommands\nBuilds an empty command set from a block containing no statements.\nstatic func buildBlock<C>(C) -> C\nPasses a single command group written as a child group through modified.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some Commands"
    },
    {
        "title": "buildBlock(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/commandsbuilder/buildblock(_:_:_:_:)",
        "html": "See Also\nBuilding content\nstatic func buildBlock() -> EmptyCommands\nBuilds an empty command set from a block containing no statements.\nstatic func buildBlock<C>(C) -> C\nPasses a single command group written as a child group through modified.\nstatic func buildBlock<C0, C1>(C0, C1) -> some Commands\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some Commands"
    },
    {
        "title": "buildBlock(_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/commandsbuilder/buildblock(_:_:_:_:_:)",
        "html": "See Also\nBuilding content\nstatic func buildBlock() -> EmptyCommands\nBuilds an empty command set from a block containing no statements.\nstatic func buildBlock<C>(C) -> C\nPasses a single command group written as a child group through modified.\nstatic func buildBlock<C0, C1>(C0, C1) -> some Commands\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some Commands"
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/commandsbuilder/buildblock(_:_:_:_:_:_:)",
        "html": "See Also\nBuilding content\nstatic func buildBlock() -> EmptyCommands\nBuilds an empty command set from a block containing no statements.\nstatic func buildBlock<C>(C) -> C\nPasses a single command group written as a child group through modified.\nstatic func buildBlock<C0, C1>(C0, C1) -> some Commands\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some Commands"
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/commandsbuilder/buildblock(_:_:_:_:_:_:_:)",
        "html": "See Also\nBuilding content\nstatic func buildBlock() -> EmptyCommands\nBuilds an empty command set from a block containing no statements.\nstatic func buildBlock<C>(C) -> C\nPasses a single command group written as a child group through modified.\nstatic func buildBlock<C0, C1>(C0, C1) -> some Commands\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some Commands"
    },
    {
        "title": "pink",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/pink",
        "html": "See Also\nSystem colors\nstatic var black: Color\nA black color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var blue: Color\nA context-dependent blue color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var brown: Color\nA context-dependent brown color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var clear: Color\nA clear color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var gray: Color\nA context-dependent gray color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var green: Color\nA context-dependent green color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var mint: Color\nA context-dependent mint color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var orange: Color\nA context-dependent orange color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var purple: Color\nA context-dependent purple color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var red: Color\nA context-dependent red color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var teal: Color\nA context-dependent teal color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var white: Color\nA white color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var yellow: Color\nA context-dependent yellow color suitable for use in UI elements.\nAvailable when Self is Color."
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/commandsbuilder/buildblock(_:_:_:_:_:_:_:_:_:)",
        "html": "See Also\nBuilding content\nstatic func buildBlock() -> EmptyCommands\nBuilds an empty command set from a block containing no statements.\nstatic func buildBlock<C>(C) -> C\nPasses a single command group written as a child group through modified.\nstatic func buildBlock<C0, C1>(C0, C1) -> some Commands\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some Commands"
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/commandsbuilder/buildblock(_:_:_:_:_:_:_:_:_:_:)",
        "html": "See Also\nBuilding content\nstatic func buildBlock() -> EmptyCommands\nBuilds an empty command set from a block containing no statements.\nstatic func buildBlock<C>(C) -> C\nPasses a single command group written as a child group through modified.\nstatic func buildBlock<C0, C1>(C0, C1) -> some Commands\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some Commands"
    },
    {
        "title": "buildEither(second:)",
        "url": "https://developer.apple.com/documentation/swiftui/commandsbuilder/buildeither(second:)",
        "html": "See Also\nBuilding conditionally\nstatic func buildEither<T, F>(first: T) -> _ConditionalContent<T, F>\nProduces content for a conditional statement in a multi-statement closure when the condition is true.\nstatic func buildIf<C>(C?) -> C?\nProduces an optional widget for conditional statements in multi-statement closures that\u2019s only visible when the condition evaluates to true.\nstatic func buildLimitedAvailability<C>(C) -> some Commands\nProcesses commands for a conditional compiler-control statement that performs an availability check.\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder."
    },
    {
        "title": "buildIf(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/commandsbuilder/buildif(_:)",
        "html": "See Also\nBuilding conditionally\nstatic func buildEither<T, F>(first: T) -> _ConditionalContent<T, F>\nProduces content for a conditional statement in a multi-statement closure when the condition is true.\nstatic func buildEither<T, F>(second: F) -> _ConditionalContent<T, F>\nProduces content for a conditional statement in a multi-statement closure when the condition is false.\nstatic func buildLimitedAvailability<C>(C) -> some Commands\nProcesses commands for a conditional compiler-control statement that performs an availability check.\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder."
    },
    {
        "title": "buildEither(first:)",
        "url": "https://developer.apple.com/documentation/swiftui/commandsbuilder/buildeither(first:)",
        "html": "See Also\nBuilding conditionally\nstatic func buildEither<T, F>(second: F) -> _ConditionalContent<T, F>\nProduces content for a conditional statement in a multi-statement closure when the condition is false.\nstatic func buildIf<C>(C?) -> C?\nProduces an optional widget for conditional statements in multi-statement closures that\u2019s only visible when the condition evaluates to true.\nstatic func buildLimitedAvailability<C>(C) -> some Commands\nProcesses commands for a conditional compiler-control statement that performs an availability check.\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder."
    },
    {
        "title": "buildLimitedAvailability(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/commandsbuilder/buildlimitedavailability(_:)",
        "html": "See Also\nBuilding conditionally\nstatic func buildEither<T, F>(first: T) -> _ConditionalContent<T, F>\nProduces content for a conditional statement in a multi-statement closure when the condition is true.\nstatic func buildEither<T, F>(second: F) -> _ConditionalContent<T, F>\nProduces content for a conditional statement in a multi-statement closure when the condition is false.\nstatic func buildIf<C>(C?) -> C?\nProduces an optional widget for conditional statements in multi-statement closures that\u2019s only visible when the condition evaluates to true.\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder."
    },
    {
        "title": "leadingFirstTextBaseline",
        "url": "https://developer.apple.com/documentation/swiftui/alignment/leadingfirsttextbaseline",
        "html": "Discussion\n\nThis alignment combines the leading horizontal guide and the firstTextBaseline vertical guide:\n\nSee Also\nGetting text baseline guides\nstatic var centerFirstTextBaseline: Alignment\nA guide that marks the top-most text baseline in a view.\nstatic var trailingFirstTextBaseline: Alignment\nA guide that marks the trailing edge and top-most text baseline in a view.\nstatic var leadingLastTextBaseline: Alignment\nA guide that marks the leading edge and bottom-most text baseline in a view.\nstatic var centerLastTextBaseline: Alignment\nA guide that marks the bottom-most text baseline in a view.\nstatic var trailingLastTextBaseline: Alignment\nA guide that marks the trailing edge and bottom-most text baseline in a view."
    },
    {
        "title": "trailing",
        "url": "https://developer.apple.com/documentation/swiftui/horizontalalignment/trailing",
        "html": "Discussion\n\nUse this guide to align the trailing edges of views. For a device that uses a left-to-right language, the trailing edge is on the right:\n\nThe following code generates the image above using a VStack:\n\nstruct HorizontalAlignmentTrailing: View {\n    var body: some View {\n        VStack(alignment: .trailing, spacing: 0) {\n            Color.red.frame(width: 1)\n            Text(\"Trailing\").font(.title).border(.gray)\n            Color.red.frame(width: 1)\n        }\n    }\n}\n\nSee Also\nGetting guides\nstatic let leading: HorizontalAlignment\nA guide that marks the leading edge of the view.\nstatic let center: HorizontalAlignment\nA guide that marks the horizontal center of the view.\nstatic let listRowSeparatorLeading: HorizontalAlignment\nA guide marking the leading edge of a List row separator.\nstatic let listRowSeparatorTrailing: HorizontalAlignment\nA guide marking the trailing edge of a List row separator."
    },
    {
        "title": "buildExpression(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/commandsbuilder/buildexpression(_:)",
        "html": "See Also\nBuilding conditionally\nstatic func buildEither<T, F>(first: T) -> _ConditionalContent<T, F>\nProduces content for a conditional statement in a multi-statement closure when the condition is true.\nstatic func buildEither<T, F>(second: F) -> _ConditionalContent<T, F>\nProduces content for a conditional statement in a multi-statement closure when the condition is false.\nstatic func buildIf<C>(C?) -> C?\nProduces an optional widget for conditional statements in multi-statement closures that\u2019s only visible when the condition evaluates to true.\nstatic func buildLimitedAvailability<C>(C) -> some Commands\nProcesses commands for a conditional compiler-control statement that performs an availability check."
    },
    {
        "title": "init(alignment:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/gridrow/init(alignment:content:)",
        "html": "Parameters\nalignment\n\nAn optional VerticalAlignment for the row. If you don\u2019t specify a value, the row uses the vertical alignment component of the Alignment parameter that you specify in the grid\u2019s init(alignment:horizontalSpacing:verticalSpacing:content:) initializer, which is center by default.\n\ncontent\n\nThe builder closure that contains the child views. Each view in the closure implicitly maps to a cell in the grid.\n\nDiscussion\n\nUse this initializer to create a GridRow inside of a Grid. Provide a content closure that defines the cells of the row, and optionally customize the vertical alignment of content within each cell. The following example customizes the vertical alignment of the cells in the first and third rows:\n\nGrid(alignment: .trailing) {\n    GridRow(alignment: .top) { // Use top vertical alignment.\n        Text(\"Top\")\n        Color.red.frame(width: 1, height: 50)\n        Color.blue.frame(width: 50, height: 1)\n    }\n    GridRow { // Use the default (center) alignment.\n        Text(\"Center\")\n        Color.red.frame(width: 1, height: 50)\n        Color.blue.frame(width: 50, height: 1)\n    }\n    GridRow(alignment: .bottom) { // Use bottom vertical alignment.\n        Text(\"Bottom\")\n        Color.red.frame(width: 1, height: 50)\n        Color.blue.frame(width: 50, height: 1)\n    }\n}\n\n\nThe example above specifies trailing alignment for the grid, which is composed of center vertical alignment and trailing horizontal alignment. The middle row relies on the center vertical alignment, but the other two rows specify custom vertical alignments:\n\nImportant\n\nA grid row behaves like a Group if you create it outside of a grid.\n\nTo override column alignment, use gridColumnAlignment(_:). To override alignment for a single cell, use gridCellAnchor(_:)."
    },
    {
        "title": "appInfo",
        "url": "https://developer.apple.com/documentation/swiftui/commandgroupplacement/appinfo",
        "html": "Discussion\n\nBy default, this group includes the following command in macOS:\n\nAbout App\n\nSee Also\nApp interactions\nstatic let appSettings: CommandGroupPlacement\nPlacement for commands that expose app settings and preferences.\nstatic let appTermination: CommandGroupPlacement\nPlacement for commands that result in app termination.\nstatic let appVisibility: CommandGroupPlacement\nPlacement for commands that control the visibility of running apps.\nstatic let systemServices: CommandGroupPlacement\nPlacement for commands that expose services other apps provide."
    },
    {
        "title": "textEditing",
        "url": "https://developer.apple.com/documentation/swiftui/commandgroupplacement/textediting",
        "html": "Discussion\n\nBy default, this group includes the following commands in macOS:\n\nFind submenu\n\nSpelling and Grammar submenu\n\nSubstitutions submenu\n\nTransformations submenu\n\nSpeech submenu\n\nSee Also\nContent updates\nstatic let pasteboard: CommandGroupPlacement\nPlacement for commands that interact with the Clipboard and manipulate content that is currently selected in the app\u2019s view hierarchy.\nstatic let textFormatting: CommandGroupPlacement\nPlacement for commands that manipulate and transform the styles applied to text selections.\nstatic let undoRedo: CommandGroupPlacement\nPlacement for commands that control the Undo Manager."
    },
    {
        "title": "help",
        "url": "https://developer.apple.com/documentation/swiftui/commandgroupplacement/help",
        "html": "Discussion\n\nBy default, this group includes the following command in macOS:\n\nApp Help"
    },
    {
        "title": "windowList",
        "url": "https://developer.apple.com/documentation/swiftui/commandgroupplacement/windowlist",
        "html": "Discussion\n\nSwiftUI manages this group automatically in macOS.\n\nSee Also\nWindows\nstatic let singleWindowList: CommandGroupPlacement\nPlacement for commands that describe and reveal any windows that the app defines.\nstatic let windowArrangement: CommandGroupPlacement\nPlacement for commands that arrange all of an app\u2019s windows.\nstatic let windowSize: CommandGroupPlacement\nPlacement for commands that control the size of the window."
    },
    {
        "title": "windowSize",
        "url": "https://developer.apple.com/documentation/swiftui/commandgroupplacement/windowsize",
        "html": "Discussion\n\nBy default, this group includes the following commands in macOS:\n\nMinimize\n\nZoom\n\nSee Also\nWindows\nstatic let singleWindowList: CommandGroupPlacement\nPlacement for commands that describe and reveal any windows that the app defines.\nstatic let windowArrangement: CommandGroupPlacement\nPlacement for commands that arrange all of an app\u2019s windows.\nstatic let windowList: CommandGroupPlacement\nPlacement for commands that describe and reveal the app\u2019s open windows."
    },
    {
        "title": "clear",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/clear",
        "html": "See Also\nSystem colors\nstatic var black: Color\nA black color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var blue: Color\nA context-dependent blue color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var brown: Color\nA context-dependent brown color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var gray: Color\nA context-dependent gray color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var green: Color\nA context-dependent green color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var mint: Color\nA context-dependent mint color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var orange: Color\nA context-dependent orange color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var pink: Color\nA context-dependent pink color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var purple: Color\nA context-dependent purple color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var red: Color\nA context-dependent red color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var teal: Color\nA context-dependent teal color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var white: Color\nA white color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var yellow: Color\nA context-dependent yellow color suitable for use in UI elements.\nAvailable when Self is Color."
    },
    {
        "title": "undoRedo",
        "url": "https://developer.apple.com/documentation/swiftui/commandgroupplacement/undoredo",
        "html": "Discussion\n\nBy default, this group includes the following commands in macOS:\n\nUndo\n\nRedo\n\nSee Also\nContent updates\nstatic let pasteboard: CommandGroupPlacement\nPlacement for commands that interact with the Clipboard and manipulate content that is currently selected in the app\u2019s view hierarchy.\nstatic let textEditing: CommandGroupPlacement\nPlacement for commands that manipulate and transform text selections.\nstatic let textFormatting: CommandGroupPlacement\nPlacement for commands that manipulate and transform the styles applied to text selections."
    },
    {
        "title": "pasteboard",
        "url": "https://developer.apple.com/documentation/swiftui/commandgroupplacement/pasteboard",
        "html": "Discussion\n\nBy default, this group includes the following commands in macOS:\n\nCut\n\nCopy\n\nPaste\n\nPaste and Match Style\n\nDelete\n\nSelect All\n\nSee Also\nContent updates\nstatic let textEditing: CommandGroupPlacement\nPlacement for commands that manipulate and transform text selections.\nstatic let textFormatting: CommandGroupPlacement\nPlacement for commands that manipulate and transform the styles applied to text selections.\nstatic let undoRedo: CommandGroupPlacement\nPlacement for commands that control the Undo Manager."
    },
    {
        "title": "textFormatting",
        "url": "https://developer.apple.com/documentation/swiftui/commandgroupplacement/textformatting",
        "html": "Discussion\n\nBy default, this group includes the following commands in macOS:\n\nFont submenu\n\nText submenu\n\nSee Also\nContent updates\nstatic let pasteboard: CommandGroupPlacement\nPlacement for commands that interact with the Clipboard and manipulate content that is currently selected in the app\u2019s view hierarchy.\nstatic let textEditing: CommandGroupPlacement\nPlacement for commands that manipulate and transform text selections.\nstatic let undoRedo: CommandGroupPlacement\nPlacement for commands that control the Undo Manager."
    },
    {
        "title": "toolbar",
        "url": "https://developer.apple.com/documentation/swiftui/commandgroupplacement/toolbar",
        "html": "Discussion\n\nBy default, this group includes the following commands in macOS:\n\nShow/Hide Toolbar\n\nCustomize Toolbar\n\nSee Also\nBars\nstatic let sidebar: CommandGroupPlacement\nPlacement for commands that control the app\u2019s sidebar and full-screen modes."
    },
    {
        "title": "transform(in:)",
        "url": "https://developer.apple.com/documentation/swiftui/geometryproxy/transform(in:)",
        "html": "Discussion\n\nIf the view doesn\u2019t have a well defined transform, such as if it is affected by a projection transform, this function may return nil.\n\nSee Also\nAccessing geometry characteristics\nfunc bounds(of: NamedCoordinateSpace) -> CGRect?\nReturns the given coordinate space\u2019s bounds rectangle, converted to the local coordinate space.\nfunc frame(in: CoordinateSpace) -> CGRect\nReturns the container view\u2019s bounds rectangle, converted to a defined coordinate space.\nfunc frame(in: some CoordinateSpaceProtocol) -> CGRect\nReturns the container view\u2019s bounds rectangle, converted to a defined coordinate space.\nvar size: CGSize\nThe size of the container view.\nvar safeAreaInsets: EdgeInsets\nThe safe area inset of the container view.\nsubscript<T>(Anchor<T>) -> T\nResolves the value of an anchor to the container view."
    },
    {
        "title": "sidebar",
        "url": "https://developer.apple.com/documentation/swiftui/commandgroupplacement/sidebar",
        "html": "Discussion\n\nBy default, this group includes the following commands in macOS:\n\nShow/Hide Sidebar\n\nEnter/Exit Full Screen\n\nSee Also\nBars\nstatic let toolbar: CommandGroupPlacement\nPlacement for commands that manipulate the toolbar."
    },
    {
        "title": "windowArrangement",
        "url": "https://developer.apple.com/documentation/swiftui/commandgroupplacement/windowarrangement",
        "html": "Discussion\n\nBy default, this group includes the following command in macOS:\n\nBring All to Front\n\nSee Also\nWindows\nstatic let singleWindowList: CommandGroupPlacement\nPlacement for commands that describe and reveal any windows that the app defines.\nstatic let windowList: CommandGroupPlacement\nPlacement for commands that describe and reveal the app\u2019s open windows.\nstatic let windowSize: CommandGroupPlacement\nPlacement for commands that control the size of the window."
    },
    {
        "title": "safeAreaInsets",
        "url": "https://developer.apple.com/documentation/swiftui/geometryproxy/safeareainsets",
        "html": "See Also\nAccessing geometry characteristics\nfunc bounds(of: NamedCoordinateSpace) -> CGRect?\nReturns the given coordinate space\u2019s bounds rectangle, converted to the local coordinate space.\nfunc frame(in: CoordinateSpace) -> CGRect\nReturns the container view\u2019s bounds rectangle, converted to a defined coordinate space.\nfunc frame(in: some CoordinateSpaceProtocol) -> CGRect\nReturns the container view\u2019s bounds rectangle, converted to a defined coordinate space.\nvar size: CGSize\nThe size of the container view.\nsubscript<T>(Anchor<T>) -> T\nResolves the value of an anchor to the container view.\nfunc transform(in: some CoordinateSpaceProtocol) -> AffineTransform3D?\nThe container view\u2019s 3D transform converted to a defined coordinate space.\nBeta"
    },
    {
        "title": "init(_:id:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/foreach/init(_:id:content:)-82hm4",
        "html": "Parameters\ndata\n\nThe data that the ForEach instance uses to create views dynamically.\n\nid\n\nThe key path to the provided data\u2019s identifier.\n\ncontent\n\nThe view builder that creates views dynamically.\n\nDiscussion\n\nIt\u2019s important that the id of a data element doesn\u2019t change, unless SwiftUI considers the data element to have been replaced with a new data element that has a new identity. If the id of a data element changes, then the content view generated from that data element will lose any current state and animations.\n\nSee Also\nCreating a collection from data\ninit(Data, content: (Data.Element) -> Content)\nCreates an instance that uniquely identifies and creates views across updates based on the identity of the underlying data.\nAvailable when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Content conforms to View, and Data.Element conforms to Identifiable.\ninit<C>(Binding<C>, content: (Binding<C.Element>) -> Content)\nCreates an instance that uniquely identifies and creates views across updates based on the identity of the underlying data.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to View.\ninit<C>(Binding<C>, id: KeyPath<C.Element, ID>, content: (Binding<C.Element>) -> Content)\nCreates an instance that uniquely identifies and creates views across updates based on the identity of the underlying data.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to View.\ninit(Data)\nCreates an instance that uniquely identifies and creates table rows across updates based on the identity of the underlying data.\nAvailable when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to TableRowContent."
    },
    {
        "title": "orange",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/orange",
        "html": "See Also\nSystem colors\nstatic var black: Color\nA black color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var blue: Color\nA context-dependent blue color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var brown: Color\nA context-dependent brown color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var clear: Color\nA clear color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var gray: Color\nA context-dependent gray color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var green: Color\nA context-dependent green color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var mint: Color\nA context-dependent mint color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var pink: Color\nA context-dependent pink color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var purple: Color\nA context-dependent purple color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var red: Color\nA context-dependent red color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var teal: Color\nA context-dependent teal color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var white: Color\nA white color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var yellow: Color\nA context-dependent yellow color suitable for use in UI elements.\nAvailable when Self is Color."
    },
    {
        "title": "singleWindowList",
        "url": "https://developer.apple.com/documentation/swiftui/commandgroupplacement/singlewindowlist",
        "html": "See Also\nWindows\nstatic let windowArrangement: CommandGroupPlacement\nPlacement for commands that arrange all of an app\u2019s windows.\nstatic let windowList: CommandGroupPlacement\nPlacement for commands that describe and reveal the app\u2019s open windows.\nstatic let windowSize: CommandGroupPlacement\nPlacement for commands that control the size of the window."
    },
    {
        "title": "ContentSizeCategory.accessibilityExtraExtraExtraLarge",
        "url": "https://developer.apple.com/documentation/swiftui/contentsizecategory/accessibilityextraextraextralarge",
        "html": "See Also\nContent size categories\ncase accessibilityExtraExtraLarge\ncase accessibilityExtraLarge\ncase accessibilityLarge\ncase accessibilityMedium\ncase extraExtraExtraLarge\ncase extraExtraLarge\ncase extraLarge\ncase extraSmall\ncase large\ncase medium\ncase small"
    },
    {
        "title": "CoordinateSpace.global",
        "url": "https://developer.apple.com/documentation/swiftui/coordinatespace/global",
        "html": "See Also\nGetting coordinate spaces\ncase local\nThe local coordinate space of the current view.\ncase named(AnyHashable)\nA named reference to a view\u2019s local coordinate space."
    },
    {
        "title": "gradient",
        "url": "https://developer.apple.com/documentation/swiftui/color/gradient",
        "html": "Discussion\n\nFor example, filling a rectangle with a gradient derived from the standard blue color:\n\nRectangle().fill(.blue.gradient)\n\nSee Also\nModifying a color\nfunc opacity(Double) -> Color\nMultiplies the opacity of the color by the given amount."
    },
    {
        "title": "isGlobal",
        "url": "https://developer.apple.com/documentation/swiftui/coordinatespace/isglobal",
        "html": "See Also\nTesting a space\nvar isLocal: Bool"
    },
    {
        "title": "Axis.vertical",
        "url": "https://developer.apple.com/documentation/swiftui/axis/vertical",
        "html": "See Also\nGetting axes\ncase horizontal\nThe horizontal dimension."
    },
    {
        "title": "CoordinateSpace.local",
        "url": "https://developer.apple.com/documentation/swiftui/coordinatespace/local",
        "html": "See Also\nGetting coordinate spaces\ncase global\nThe global coordinate space at the root of the view hierarchy.\ncase named(AnyHashable)\nA named reference to a view\u2019s local coordinate space."
    },
    {
        "title": "content",
        "url": "https://developer.apple.com/documentation/swiftui/geometryreader/content",
        "html": "See Also\nCreating a geometry reader\ninit(content: (GeometryProxy) -> Content)"
    },
    {
        "title": "init(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/geometryreader3d/init(content:)",
        "html": "See Also\nCreating a geometry reader\nvar content: (GeometryProxy3D) -> Content\nBeta"
    },
    {
        "title": "isLocal",
        "url": "https://developer.apple.com/documentation/swiftui/coordinatespace/islocal",
        "html": "See Also\nTesting a space\nvar isGlobal: Bool"
    },
    {
        "title": "content",
        "url": "https://developer.apple.com/documentation/swiftui/geometryreader3d/content",
        "html": "See Also\nCreating a geometry reader\ninit(content: (GeometryProxy3D) -> Content)\nBeta"
    },
    {
        "title": "init(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/geometryreader/init(content:)",
        "html": "See Also\nCreating a geometry reader\nvar content: (GeometryProxy) -> Content"
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/menubutton/init(_:content:)-55r93",
        "html": "Deprecated\n\nUse Menu instead.\n\nSee Also\nCreating a menu button\ninit(LocalizedStringKey, content: () -> Content)\nCreates a menu button with the specified localized title and content.\nAvailable when Label is Text and Content conforms to View.\nDeprecated\ninit(label: Label, content: () -> Content)\nCreates a menu button with the specified label and content.\nDeprecated"
    },
    {
        "title": "foreground",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/foreground",
        "html": "Discussion\n\nAccess this value to get the style SwiftUI uses for foreground elements, like text, symbols, and shapes, in the current context. Use the foregroundStyle(_:) modifier to set a new foreground style for a given view and its child views.\n\nFor information about how to use shape styles, see ShapeStyle.\n\nSee Also\nSemantic styles\nstatic var background: BackgroundStyle\nThe background style in the current context.\nAvailable when Self is BackgroundStyle.\nstatic var selection: SelectionShapeStyle\nA style used to visually indicate selection following platform conventional colors and behaviors.\nAvailable when Self is SelectionShapeStyle.\nstatic var separator: SeparatorShapeStyle\nA style appropriate for foreground separator or border lines.\nAvailable when Self is SeparatorShapeStyle.\nstatic var tint: TintShapeStyle\nA style that reflects the current tint color.\nAvailable when Self is TintShapeStyle.\nstatic var placeholder: PlaceholderTextShapeStyle\nA style appropriate for placeholder text.\nAvailable when Self is PlaceholderTextShapeStyle.\nstatic var link: LinkShapeStyle\nA style appropriate for links.\nAvailable when Self is LinkShapeStyle.\nstatic var fill: FillShapeStyle\nAn overlay fill style for filling shapes.\nAvailable when Self is FillShapeStyle.\nstatic var windowBackground: WindowBackgroundShapeStyle\nA style appropriate for elements that should match the background of their containing window.\nAvailable when Self is WindowBackgroundShapeStyle."
    },
    {
        "title": "init(label:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/menubutton/init(label:content:)",
        "html": "Deprecated\n\nUse Menu instead.\n\nSee Also\nCreating a menu button\ninit(LocalizedStringKey, content: () -> Content)\nCreates a menu button with the specified localized title and content.\nAvailable when Label is Text and Content conforms to View.\nDeprecated\ninit<S>(S, content: () -> Content)\nCreates a menu button with the specified title and content.\nAvailable when Label is Text and Content conforms to View.\nDeprecated"
    },
    {
        "title": "MenuButtonStyle",
        "url": "https://developer.apple.com/documentation/swiftui/menubuttonstyle",
        "html": "Deprecated\n\nUse MenuStyle instead.\n\nTopics\nSupporting types\nstruct BorderlessButtonMenuButtonStyle\nA menu button style which manifests as a borderless button with no visual embelishments.\nstruct BorderlessPullDownMenuButtonStyle\nA menu button style which manifests as a borderless pull-down button.\nstruct DefaultMenuButtonStyle\nThe default menu button style.\nstruct PullDownMenuButtonStyle\nA menu button style which manifests as a pull-down button.\nRelationships\nConforming Types\nBorderlessButtonMenuButtonStyle\nBorderlessPullDownMenuButtonStyle\nDefaultMenuButtonStyle\nPullDownMenuButtonStyle\nSee Also\nStyling a menu button\nfunc menuButtonStyle<S>(S) -> some View\nSets the style for menu buttons within this view.\nDeprecated"
    },
    {
        "title": "menuButtonStyle(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/menubuttonstyle(_:)",
        "html": "Deprecated\n\nUse menuStyle(_:) instead.\n\nSee Also\nStyling a menu button\nprotocol MenuButtonStyle\nA custom specification for the appearance and interaction of a menu button.\nDeprecated"
    },
    {
        "title": "ContentSizeCategory.accessibilityExtraExtraLarge",
        "url": "https://developer.apple.com/documentation/swiftui/contentsizecategory/accessibilityextraextralarge",
        "html": "See Also\nContent size categories\ncase accessibilityExtraExtraExtraLarge\ncase accessibilityExtraLarge\ncase accessibilityLarge\ncase accessibilityMedium\ncase extraExtraExtraLarge\ncase extraExtraLarge\ncase extraLarge\ncase extraSmall\ncase large\ncase medium\ncase small"
    },
    {
        "title": "opacity(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/opacity(_:)-swift.method",
        "html": "See Also\nModifying a shape style\nfunc blendMode(BlendMode) -> some ShapeStyle\nReturns a new style based on self that applies the specified blend mode when drawing.\nfunc shadow(ShadowStyle) -> some ShapeStyle\nApplies the specified shadow effect to the shape style."
    },
    {
        "title": "uppercaseSmallCaps()",
        "url": "https://developer.apple.com/documentation/swiftui/font/uppercasesmallcaps()",
        "html": "Discussion\n\nThis feature turns capital characters into small capitals. It is generally used for words which would otherwise be set in all caps, such as acronyms, but which are desired in small-cap form to avoid disrupting the flow of text.\n\nSee Also\nStyling a font\nfunc bold() -> Font\nAdds bold styling to the font.\nfunc italic() -> Font\nAdds italics to the font.\nfunc monospaced() -> Font\nReturns a fixed-width font from the same family as the base font.\nfunc monospacedDigit() -> Font\nReturns a modified font that uses fixed-width digits, while leaving other characters proportionally spaced.\nfunc smallCaps() -> Font\nAdjusts the font to enable all small capitals.\nfunc lowercaseSmallCaps() -> Font\nAdjusts the font to enable lowercase small capitals.\nfunc weight(Font.Weight) -> Font\nSets the weight of the font.\nfunc width(Font.Width) -> Font\nSets the width of the font.\nstruct Width\nA width to use for fonts that have multiple widths.\nfunc leading(Font.Leading) -> Font\nAdjusts the line spacing of a font.\nenum Leading\nA line spacing adjustment that you can apply to a font."
    },
    {
        "title": "TintShapeStyle",
        "url": "https://developer.apple.com/documentation/swiftui/tintshapestyle",
        "html": "Overview\n\nYou can set the tint color with the tint(_:) modifier. If no explicit tint is set, the tint is derived from the app\u2019s accent color.\n\nYou can also use tint to construct this style.\n\nTopics\nCreating a tint shape style\ninit()\nCreates a tint shape style.\nRelationships\nConforms To\nSendable\nShapeStyle\nSee Also\nSupporting types\nstruct AngularGradient\nAn angular gradient.\nstruct EllipticalGradient\nA radial gradient that draws an ellipse.\nstruct LinearGradient\nA linear gradient.\nstruct RadialGradient\nA radial gradient.\nstruct Material\nA background material type.\nstruct ImagePaint\nA shape style that fills a shape by repeating a region of an image.\nstruct HierarchicalShapeStyle\nA shape style that maps to one of the numbered content styles.\nstruct HierarchicalShapeStyleModifier\nStyles that you can apply to hierarchical shapes.\nstruct ForegroundStyle\nThe foreground style in the current context.\nstruct BackgroundStyle\nThe background style in the current context.\nstruct SelectionShapeStyle\nA style used to visually indicate selection following platform conventional colors and behaviors.\nstruct SeparatorShapeStyle\nA style appropriate for foreground separator or border lines.\nstruct FillShapeStyle\nA shape style that displays one of the overlay fills.\nstruct LinkShapeStyle\nA style appropriate for links.\nstruct PlaceholderTextShapeStyle\nA style appropriate for placeholder text.\nstruct WindowBackgroundShapeStyle\nA style appropriate for elements that should match the background of their containing window."
    },
    {
        "title": "init(_:systemImage:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/menu/init(_:systemimage:content:)-7axwe",
        "html": "Parameters\ntitle\n\nA string that describes the contents of the menu.\n\nsystemImage\n\nThe name of the image resource to lookup.\n\ncontent\n\nA group of menu items.\n\nDiscussion\n\nTo create the label with a localized string key, use init(_:content:) instead.\n\nSee Also\nCreating a menu with an image label\ninit<S>(S, image: ImageResource, content: () -> Content)\nCreates a menu that generates its label from a string and image resource.\nAvailable when Label is Label<Text, Image> and Content conforms to View.\ninit(LocalizedStringKey, image: ImageResource, content: () -> Content)\nCreates a menu that generates its label from a localized string key and image resource.\nAvailable when Label is Label<Text, Image> and Content conforms to View.\ninit(LocalizedStringKey, image: ImageResource, content: () -> Content, primaryAction: () -> Void)\nCreates a menu with a custom primary action that generates its label from a localized string key.\nAvailable when Label is Label<Text, Image> and Content conforms to View.\ninit(LocalizedStringKey, systemImage: String, content: () -> Content)\nCreates a menu that generates its label from a localized string key and system image.\nAvailable when Label is Label<Text, Image> and Content conforms to View.\ninit(LocalizedStringKey, systemImage: String, content: () -> Content, primaryAction: () -> Void)\nCreates a menu with a custom primary action that generates its label from a localized string key and system image.\nAvailable when Label is Label<Text, Image> and Content conforms to View."
    },
    {
        "title": "ContentSizeCategory.extraSmall",
        "url": "https://developer.apple.com/documentation/swiftui/contentsizecategory/extrasmall",
        "html": "See Also\nContent size categories\ncase accessibilityExtraExtraExtraLarge\ncase accessibilityExtraExtraLarge\ncase accessibilityExtraLarge\ncase accessibilityLarge\ncase accessibilityMedium\ncase extraExtraExtraLarge\ncase extraExtraLarge\ncase extraLarge\ncase large\ncase medium\ncase small"
    },
    {
        "title": "LinkShapeStyle",
        "url": "https://developer.apple.com/documentation/swiftui/linkshapestyle",
        "html": "Topics\nCreating the style\ninit()\nCreates a new link shape style instance.\nRelationships\nConforms To\nSendable\nShapeStyle\nSee Also\nSupporting types\nstruct AngularGradient\nAn angular gradient.\nstruct EllipticalGradient\nA radial gradient that draws an ellipse.\nstruct LinearGradient\nA linear gradient.\nstruct RadialGradient\nA radial gradient.\nstruct Material\nA background material type.\nstruct ImagePaint\nA shape style that fills a shape by repeating a region of an image.\nstruct HierarchicalShapeStyle\nA shape style that maps to one of the numbered content styles.\nstruct HierarchicalShapeStyleModifier\nStyles that you can apply to hierarchical shapes.\nstruct ForegroundStyle\nThe foreground style in the current context.\nstruct BackgroundStyle\nThe background style in the current context.\nstruct SelectionShapeStyle\nA style used to visually indicate selection following platform conventional colors and behaviors.\nstruct SeparatorShapeStyle\nA style appropriate for foreground separator or border lines.\nstruct TintShapeStyle\nA style that reflects the current tint color.\nstruct FillShapeStyle\nA shape style that displays one of the overlay fills.\nstruct PlaceholderTextShapeStyle\nA style appropriate for placeholder text.\nstruct WindowBackgroundShapeStyle\nA style appropriate for elements that should match the background of their containing window."
    },
    {
        "title": "PlaceholderTextShapeStyle",
        "url": "https://developer.apple.com/documentation/swiftui/placeholdertextshapestyle",
        "html": "Topics\nCreating the style\ninit()\nCreates a new placeholder text shape style.\nRelationships\nConforms To\nSendable\nShapeStyle\nSee Also\nSupporting types\nstruct AngularGradient\nAn angular gradient.\nstruct EllipticalGradient\nA radial gradient that draws an ellipse.\nstruct LinearGradient\nA linear gradient.\nstruct RadialGradient\nA radial gradient.\nstruct Material\nA background material type.\nstruct ImagePaint\nA shape style that fills a shape by repeating a region of an image.\nstruct HierarchicalShapeStyle\nA shape style that maps to one of the numbered content styles.\nstruct HierarchicalShapeStyleModifier\nStyles that you can apply to hierarchical shapes.\nstruct ForegroundStyle\nThe foreground style in the current context.\nstruct BackgroundStyle\nThe background style in the current context.\nstruct SelectionShapeStyle\nA style used to visually indicate selection following platform conventional colors and behaviors.\nstruct SeparatorShapeStyle\nA style appropriate for foreground separator or border lines.\nstruct TintShapeStyle\nA style that reflects the current tint color.\nstruct FillShapeStyle\nA shape style that displays one of the overlay fills.\nstruct LinkShapeStyle\nA style appropriate for links.\nstruct WindowBackgroundShapeStyle\nA style appropriate for elements that should match the background of their containing window."
    },
    {
        "title": "init(alignment:spacing:pinnedViews:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/lazyvstack/init(alignment:spacing:pinnedviews:content:)",
        "html": "Parameters\nalignment\n\nThe guide for aligning the subviews in this stack. All child views have the same horizontal screen coordinate.\n\nspacing\n\nThe distance between adjacent subviews, or nil if you want the stack to choose a default distance for each pair of subviews.\n\npinnedViews\n\nThe kinds of child views that will be pinned.\n\ncontent\n\nA view builder that creates the content of this stack."
    },
    {
        "title": "SeparatorShapeStyle",
        "url": "https://developer.apple.com/documentation/swiftui/separatorshapestyle",
        "html": "Overview\n\nYou can also use separator to construct this style.\n\nTopics\nCreating a separator shape style\ninit()\nCreates a new separator shape style instance.\nRelationships\nConforms To\nSendable\nShapeStyle\nSee Also\nSupporting types\nstruct AngularGradient\nAn angular gradient.\nstruct EllipticalGradient\nA radial gradient that draws an ellipse.\nstruct LinearGradient\nA linear gradient.\nstruct RadialGradient\nA radial gradient.\nstruct Material\nA background material type.\nstruct ImagePaint\nA shape style that fills a shape by repeating a region of an image.\nstruct HierarchicalShapeStyle\nA shape style that maps to one of the numbered content styles.\nstruct HierarchicalShapeStyleModifier\nStyles that you can apply to hierarchical shapes.\nstruct ForegroundStyle\nThe foreground style in the current context.\nstruct BackgroundStyle\nThe background style in the current context.\nstruct SelectionShapeStyle\nA style used to visually indicate selection following platform conventional colors and behaviors.\nstruct TintShapeStyle\nA style that reflects the current tint color.\nstruct FillShapeStyle\nA shape style that displays one of the overlay fills.\nstruct LinkShapeStyle\nA style appropriate for links.\nstruct PlaceholderTextShapeStyle\nA style appropriate for placeholder text.\nstruct WindowBackgroundShapeStyle\nA style appropriate for elements that should match the background of their containing window."
    },
    {
        "title": "onSelect",
        "url": "https://developer.apple.com/documentation/swiftui/textinputdictationactivation/onselect",
        "html": "See Also\nGetting activation values\nstatic let onLook: TextInputDictationActivation\nA configuration that activates dictation when someone selects the microphone or looks at the entry field."
    },
    {
        "title": "SelectionShapeStyle",
        "url": "https://developer.apple.com/documentation/swiftui/selectionshapestyle",
        "html": "Overview\n\nYou can also use selection to construct this style.\n\nTopics\nCreating a selection shape style\ninit()\nCreates a selection shape style.\nRelationships\nConforms To\nSendable\nShapeStyle\nSee Also\nSupporting types\nstruct AngularGradient\nAn angular gradient.\nstruct EllipticalGradient\nA radial gradient that draws an ellipse.\nstruct LinearGradient\nA linear gradient.\nstruct RadialGradient\nA radial gradient.\nstruct Material\nA background material type.\nstruct ImagePaint\nA shape style that fills a shape by repeating a region of an image.\nstruct HierarchicalShapeStyle\nA shape style that maps to one of the numbered content styles.\nstruct HierarchicalShapeStyleModifier\nStyles that you can apply to hierarchical shapes.\nstruct ForegroundStyle\nThe foreground style in the current context.\nstruct BackgroundStyle\nThe background style in the current context.\nstruct SeparatorShapeStyle\nA style appropriate for foreground separator or border lines.\nstruct TintShapeStyle\nA style that reflects the current tint color.\nstruct FillShapeStyle\nA shape style that displays one of the overlay fills.\nstruct LinkShapeStyle\nA style appropriate for links.\nstruct PlaceholderTextShapeStyle\nA style appropriate for placeholder text.\nstruct WindowBackgroundShapeStyle\nA style appropriate for elements that should match the background of their containing window."
    },
    {
        "title": "ImagePaint",
        "url": "https://developer.apple.com/documentation/swiftui/imagepaint",
        "html": "Overview\n\nYou can also use image(_:sourceRect:scale:) to construct this style.\n\nTopics\nCreating an image paint style\ninit(image: Image, sourceRect: CGRect, scale: CGFloat)\nCreates a shape-filling shape style.\nConfiguring the image paint style\nvar image: Image\nThe image to be drawn.\nvar scale: CGFloat\nA scale factor applied to the image while being drawn.\nvar sourceRect: CGRect\nA unit-space rectangle defining how much of the source image to draw.\nRelationships\nConforms To\nSendable\nShapeStyle\nSee Also\nSupporting types\nstruct AngularGradient\nAn angular gradient.\nstruct EllipticalGradient\nA radial gradient that draws an ellipse.\nstruct LinearGradient\nA linear gradient.\nstruct RadialGradient\nA radial gradient.\nstruct Material\nA background material type.\nstruct HierarchicalShapeStyle\nA shape style that maps to one of the numbered content styles.\nstruct HierarchicalShapeStyleModifier\nStyles that you can apply to hierarchical shapes.\nstruct ForegroundStyle\nThe foreground style in the current context.\nstruct BackgroundStyle\nThe background style in the current context.\nstruct SelectionShapeStyle\nA style used to visually indicate selection following platform conventional colors and behaviors.\nstruct SeparatorShapeStyle\nA style appropriate for foreground separator or border lines.\nstruct TintShapeStyle\nA style that reflects the current tint color.\nstruct FillShapeStyle\nA shape style that displays one of the overlay fills.\nstruct LinkShapeStyle\nA style appropriate for links.\nstruct PlaceholderTextShapeStyle\nA style appropriate for placeholder text.\nstruct WindowBackgroundShapeStyle\nA style appropriate for elements that should match the background of their containing window."
    },
    {
        "title": "BackgroundStyle",
        "url": "https://developer.apple.com/documentation/swiftui/backgroundstyle",
        "html": "Overview\n\nYou can also use background to construct this style.\n\nTopics\nCreating a background style\ninit()\nCreates a background style instance.\nRelationships\nConforms To\nSendable\nShapeStyle\nSee Also\nSupporting types\nstruct AngularGradient\nAn angular gradient.\nstruct EllipticalGradient\nA radial gradient that draws an ellipse.\nstruct LinearGradient\nA linear gradient.\nstruct RadialGradient\nA radial gradient.\nstruct Material\nA background material type.\nstruct ImagePaint\nA shape style that fills a shape by repeating a region of an image.\nstruct HierarchicalShapeStyle\nA shape style that maps to one of the numbered content styles.\nstruct HierarchicalShapeStyleModifier\nStyles that you can apply to hierarchical shapes.\nstruct ForegroundStyle\nThe foreground style in the current context.\nstruct SelectionShapeStyle\nA style used to visually indicate selection following platform conventional colors and behaviors.\nstruct SeparatorShapeStyle\nA style appropriate for foreground separator or border lines.\nstruct TintShapeStyle\nA style that reflects the current tint color.\nstruct FillShapeStyle\nA shape style that displays one of the overlay fills.\nstruct LinkShapeStyle\nA style appropriate for links.\nstruct PlaceholderTextShapeStyle\nA style appropriate for placeholder text.\nstruct WindowBackgroundShapeStyle\nA style appropriate for elements that should match the background of their containing window."
    },
    {
        "title": "buildBlock(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/commandsbuilder/buildblock(_:)",
        "html": "See Also\nBuilding content\nstatic func buildBlock() -> EmptyCommands\nBuilds an empty command set from a block containing no statements.\nstatic func buildBlock<C0, C1>(C0, C1) -> some Commands\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some Commands"
    },
    {
        "title": "HierarchicalShapeStyleModifier",
        "url": "https://developer.apple.com/documentation/swiftui/hierarchicalshapestylemodifier",
        "html": "Relationships\nConforms To\nSendable\nShapeStyle\nSee Also\nSupporting types\nstruct AngularGradient\nAn angular gradient.\nstruct EllipticalGradient\nA radial gradient that draws an ellipse.\nstruct LinearGradient\nA linear gradient.\nstruct RadialGradient\nA radial gradient.\nstruct Material\nA background material type.\nstruct ImagePaint\nA shape style that fills a shape by repeating a region of an image.\nstruct HierarchicalShapeStyle\nA shape style that maps to one of the numbered content styles.\nstruct ForegroundStyle\nThe foreground style in the current context.\nstruct BackgroundStyle\nThe background style in the current context.\nstruct SelectionShapeStyle\nA style used to visually indicate selection following platform conventional colors and behaviors.\nstruct SeparatorShapeStyle\nA style appropriate for foreground separator or border lines.\nstruct TintShapeStyle\nA style that reflects the current tint color.\nstruct FillShapeStyle\nA shape style that displays one of the overlay fills.\nstruct LinkShapeStyle\nA style appropriate for links.\nstruct PlaceholderTextShapeStyle\nA style appropriate for placeholder text.\nstruct WindowBackgroundShapeStyle\nA style appropriate for elements that should match the background of their containing window."
    },
    {
        "title": "body",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/body",
        "html": "Discussion\n\nFor a ShapeStyle that also conforms to the View protocol, like Color or LinearGradient, this default implementation of the body property provides a visual representation for the shape style. As a result, you can use the shape style in a view hierarchy like any other view:\n\nZStack {\n    Color.cyan\n    Text(\"Hello!\")\n}\n.frame(width: 200, height: 50)\n"
    },
    {
        "title": "Resolved",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/resolved",
        "html": "Required\n\nDiscussion\n\nWhen you create a custom shape style, Swift infers this type from your implementation of the required resolve function.\n\nSee Also\nResolving a shape style in an environment\nfunc resolve(in: EnvironmentValues) -> Self.Resolved\nEvaluate to a resolved shape style given the current environment.\n\nRequired Default implementation provided."
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/commandsbuilder/buildblock(_:_:_:_:_:_:_:_:)",
        "html": "See Also\nBuilding content\nstatic func buildBlock() -> EmptyCommands\nBuilds an empty command set from a block containing no statements.\nstatic func buildBlock<C>(C) -> C\nPasses a single command group written as a child group through modified.\nstatic func buildBlock<C0, C1>(C0, C1) -> some Commands\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some Commands\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some Commands"
    },
    {
        "title": "Axis.horizontal",
        "url": "https://developer.apple.com/documentation/swiftui/axis/horizontal",
        "html": "See Also\nGetting axes\ncase vertical\nThe vertical dimension."
    },
    {
        "title": "GridItem.Size",
        "url": "https://developer.apple.com/documentation/swiftui/griditem/size-swift.enum",
        "html": "Overview\n\nUse a Size instance when you create a GridItem. The value tells a LazyHGrid how to size its rows, or a LazyVGrid how to size its columns.\n\nTopics\nGetting the sizes\ncase adaptive(minimum: CGFloat, maximum: CGFloat)\nMultiple items in the space of a single flexible item.\ncase fixed(CGFloat)\nA single item with the specified fixed size.\ncase flexible(minimum: CGFloat, maximum: CGFloat)\nA single flexible item.\nRelationships\nConforms To\nSendable\nSee Also\nInspecting grid item properties\nvar alignment: Alignment?\nThe alignment to use when placing each view.\nvar spacing: CGFloat?\nThe spacing to the next item.\nvar size: GridItem.Size\nThe size of the item, which is the width of a column item or the height of a row item."
    },
    {
        "title": "appSettings",
        "url": "https://developer.apple.com/documentation/swiftui/commandgroupplacement/appsettings",
        "html": "Discussion\n\nBy default, this group includes the following command in macOS:\n\nPreferences\n\nSee Also\nApp interactions\nstatic let appInfo: CommandGroupPlacement\nPlacement for commands that provide information about the app, the terms of the user\u2019s license agreement, and so on.\nstatic let appTermination: CommandGroupPlacement\nPlacement for commands that result in app termination.\nstatic let appVisibility: CommandGroupPlacement\nPlacement for commands that control the visibility of running apps.\nstatic let systemServices: CommandGroupPlacement\nPlacement for commands that expose services other apps provide."
    },
    {
        "title": "init(alignment:spacing:pinnedViews:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/lazyhstack/init(alignment:spacing:pinnedviews:content:)",
        "html": "Parameters\nalignment\n\nThe guide for aligning the subviews in this stack. All child views have the same vertical screen coordinate.\n\nspacing\n\nThe distance between adjacent subviews, or nil if you want the stack to choose a default distance for each pair of subviews.\n\npinnedViews\n\nThe kinds of child views that will be pinned.\n\ncontent\n\nA view builder that creates the content of this stack."
    },
    {
        "title": "init(alignment:horizontalSpacing:verticalSpacing:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/grid/init(alignment:horizontalspacing:verticalspacing:content:)",
        "html": "Parameters\nalignment\n\nThe guide for aligning the child views within the space allocated for a given cell. The default is center.\n\nhorizontalSpacing\n\nThe horizontal distance between each cell, given in points. The value is nil by default, which results in a default distance between cells that\u2019s appropriate for the platform.\n\nverticalSpacing\n\nThe vertical distance between each cell, given in points. The value is nil by default, which results in a default distance between cells that\u2019s appropriate for the platform.\n\ncontent\n\nA closure that creates the grid\u2019s rows.\n\nDiscussion\n\nUse this initializer to create a Grid. Provide a content closure that defines the rows of the grid, and optionally customize the spacing between cells and the alignment of content within each cell. The following example customizes the spacing between cells:\n\nGrid(horizontalSpacing: 30, verticalSpacing: 30) {\n    ForEach(0..<5) { row in\n        GridRow {\n            ForEach(0..<5) { column in\n                Text(\"(\\(column), \\(row))\")\n            }\n        }\n    }\n}\n\n\nYou can list rows and the cells within rows directly, or you can use a ForEach structure to generate either, as the example above does:\n\nBy default, the grid\u2019s alignment value applies to all of the cells in the grid. However, you can also change the alignment for particular cells or groups of cells:\n\nOverride the vertical alignment for the cells in a row by specifying a VerticalAlignment parameter to the corresponding row\u2019s init(alignment:content:) initializer.\n\nOverride the horizontal alignment for the cells in a column by adding a gridColumnAlignment(_:) view modifier to exactly one of the cells in the column, and specifying a HorizontalAlignment parameter.\n\nSpecify a custom alignment anchor for a particular cell by using the gridCellAnchor(_:) modifier on the cell\u2019s view."
    },
    {
        "title": "init(_:spacing:alignment:)",
        "url": "https://developer.apple.com/documentation/swiftui/griditem/init(_:spacing:alignment:)",
        "html": "Parameters\nsize\n\nThe size of the grid item.\n\nspacing\n\nThe spacing to use between this and the next item.\n\nalignment\n\nThe alignment to use for this grid item."
    },
    {
        "title": "size",
        "url": "https://developer.apple.com/documentation/swiftui/griditem/size-swift.property",
        "html": "See Also\nInspecting grid item properties\nvar alignment: Alignment?\nThe alignment to use when placing each view.\nvar spacing: CGFloat?\nThe spacing to the next item.\nenum Size\nThe size in the minor axis of one or more rows or columns in a grid layout."
    },
    {
        "title": "init(rows:alignment:spacing:pinnedViews:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/lazyhgrid/init(rows:alignment:spacing:pinnedviews:content:)",
        "html": "Parameters\nrows\n\nAn array of grid items that size and position each column of the grid.\n\nalignment\n\nThe alignment of the grid within its parent view.\n\nspacing\n\nThe spacing between the grid and the next item in its parent view.\n\npinnedViews\n\nViews to pin to the bounds of a parent scroll view.\n\ncontent\n\nThe content of the grid."
    },
    {
        "title": "spacing",
        "url": "https://developer.apple.com/documentation/swiftui/griditem/spacing",
        "html": "Discussion\n\nIf this value is nil, the item uses a reasonable default for the current platform.\n\nSee Also\nInspecting grid item properties\nvar alignment: Alignment?\nThe alignment to use when placing each view.\nvar size: GridItem.Size\nThe size of the item, which is the width of a column item or the height of a row item.\nenum Size\nThe size in the minor axis of one or more rows or columns in a grid layout."
    },
    {
        "title": "Body",
        "url": "https://developer.apple.com/documentation/swiftui/commands/body-swift.associatedtype",
        "html": "Required\n\nDiscussion\n\nWhen you create custom commands, Swift infers this type from your implementation of the required body property.\n\nSee Also\nImplementing commands\nvar body: Self.Body\nThe contents of the command hierarchy.\n\nRequired"
    },
    {
        "title": "body",
        "url": "https://developer.apple.com/documentation/swiftui/commands/body-swift.property",
        "html": "Required\n\nDiscussion\n\nFor any commands that you create, provide a computed body property that defines the scene as a composition of other scenes. You can assemble a command hierarchy from built-in commands that SwiftUI provides, as well as other commands that you\u2019ve defined.\n\nSee Also\nImplementing commands\nassociatedtype Body : Commands\nThe type of commands that represents the body of this command hierarchy.\n\nRequired"
    },
    {
        "title": "importExport",
        "url": "https://developer.apple.com/documentation/swiftui/commandgroupplacement/importexport",
        "html": "Discussion\n\nEmpty by default in macOS.\n\nSee Also\nFile manipulation\nstatic let newItem: CommandGroupPlacement\nPlacement for commands that create and open different kinds of documents.\nstatic let printItem: CommandGroupPlacement\nPlacement for commands related to printing app content.\nstatic let saveItem: CommandGroupPlacement\nPlacement for commands that save open documents and close windows."
    },
    {
        "title": "systemServices",
        "url": "https://developer.apple.com/documentation/swiftui/commandgroupplacement/systemservices",
        "html": "Discussion\n\nBy default, this group includes the following command in macOS:\n\nServices submenu (managed automatically)\n\nSee Also\nApp interactions\nstatic let appInfo: CommandGroupPlacement\nPlacement for commands that provide information about the app, the terms of the user\u2019s license agreement, and so on.\nstatic let appSettings: CommandGroupPlacement\nPlacement for commands that expose app settings and preferences.\nstatic let appTermination: CommandGroupPlacement\nPlacement for commands that result in app termination.\nstatic let appVisibility: CommandGroupPlacement\nPlacement for commands that control the visibility of running apps."
    },
    {
        "title": "Axis.Set",
        "url": "https://developer.apple.com/documentation/swiftui/axis/set",
        "html": "Topics\nGetting axis sets\nstatic let horizontal: Axis.Set\nstatic let vertical: Axis.Set\nRelationships\nConforms To\nEquatable\nExpressibleByArrayLiteral\nOptionSet\nRawRepresentable\nSendable\nSetAlgebra"
    },
    {
        "title": "appTermination",
        "url": "https://developer.apple.com/documentation/swiftui/commandgroupplacement/apptermination",
        "html": "Discussion\n\nBy default, this group includes the following command in macOS:\n\nQuit App\n\nSee Also\nApp interactions\nstatic let appInfo: CommandGroupPlacement\nPlacement for commands that provide information about the app, the terms of the user\u2019s license agreement, and so on.\nstatic let appSettings: CommandGroupPlacement\nPlacement for commands that expose app settings and preferences.\nstatic let appVisibility: CommandGroupPlacement\nPlacement for commands that control the visibility of running apps.\nstatic let systemServices: CommandGroupPlacement\nPlacement for commands that expose services other apps provide."
    },
    {
        "title": "newItem",
        "url": "https://developer.apple.com/documentation/swiftui/commandgroupplacement/newitem",
        "html": "Discussion\n\nBy default, this group includes the following commands in macOS:\n\nNew\n\nOpen\n\nOpen Recent submenu (managed automatically)\n\nSee Also\nFile manipulation\nstatic let importExport: CommandGroupPlacement\nPlacement for commands that relate to importing and exporting data using formats that the app doesn\u2019t natively support.\nstatic let printItem: CommandGroupPlacement\nPlacement for commands related to printing app content.\nstatic let saveItem: CommandGroupPlacement\nPlacement for commands that save open documents and close windows."
    },
    {
        "title": "appVisibility",
        "url": "https://developer.apple.com/documentation/swiftui/commandgroupplacement/appvisibility",
        "html": "Discussion\n\nBy default, this group includes the following commands in macOS:\n\nHide App\n\nHide Others\n\nShow All\n\nSee Also\nApp interactions\nstatic let appInfo: CommandGroupPlacement\nPlacement for commands that provide information about the app, the terms of the user\u2019s license agreement, and so on.\nstatic let appSettings: CommandGroupPlacement\nPlacement for commands that expose app settings and preferences.\nstatic let appTermination: CommandGroupPlacement\nPlacement for commands that result in app termination.\nstatic let systemServices: CommandGroupPlacement\nPlacement for commands that expose services other apps provide."
    },
    {
        "title": "blue",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/blue",
        "html": "See Also\nSystem colors\nstatic var black: Color\nA black color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var brown: Color\nA context-dependent brown color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var clear: Color\nA clear color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var gray: Color\nA context-dependent gray color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var green: Color\nA context-dependent green color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var mint: Color\nA context-dependent mint color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var orange: Color\nA context-dependent orange color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var pink: Color\nA context-dependent pink color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var purple: Color\nA context-dependent purple color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var red: Color\nA context-dependent red color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var teal: Color\nA context-dependent teal color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var white: Color\nA white color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var yellow: Color\nA context-dependent yellow color suitable for use in UI elements.\nAvailable when Self is Color."
    },
    {
        "title": "resolve(in:)",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/resolve(in:)-mq46",
        "html": "Required Default implementation provided.\n\nDefault Implementations\nShapeStyle Implementations\nfunc resolve(in: EnvironmentValues) -> Never\nEvaluate to a resolved shape style given the current environment.\nAvailable when Resolved is Never.\nSee Also\nResolving a shape style in an environment\nassociatedtype Resolved : ShapeStyle = Never\nThe type of shape style this will resolve to.\n\nRequired"
    },
    {
        "title": "radialGradient(_:center:startRadius:endRadius:)",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/radialgradient(_:center:startradius:endradius:)-49kel",
        "html": "Discussion\n\nThe gradient applies the color function as the distance from a center point, scaled to fit within the defined start and end radii. The gradient maps the unit space center point into the bounding rectangle of each shape filled with the gradient.\n\nFor information about how to use shape styles, see ShapeStyle.\n\nSee Also\nRadial gradients\nstatic func radialGradient(AnyGradient, center: UnitPoint, startRadius: CGFloat, endRadius: CGFloat) -> some ShapeStyle\nA radial gradient.\nAvailable when Self is RadialGradient.\nstatic func radialGradient(colors: [Color], center: UnitPoint, startRadius: CGFloat, endRadius: CGFloat) -> RadialGradient\nA radial gradient defined by a collection of colors.\nAvailable when Self is RadialGradient.\nstatic func radialGradient(stops: [Gradient.Stop], center: UnitPoint, startRadius: CGFloat, endRadius: CGFloat) -> RadialGradient\nA radial gradient defined by a collection of color stops.\nAvailable when Self is RadialGradient."
    },
    {
        "title": "shadow(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/shadow(_:)-swift.type.method",
        "html": "Parameters\nstyle\n\nThe shadow style to apply.\n\nReturn Value\n\nA new shape style based on the current style that uses the specified shadow style.\n\nDiscussion\n\nIn most contexts the current style is the foreground, but not always. For example, when setting the value of the background style, that becomes the current implicit style.\n\nThe following example creates a circle filled with the current foreground style that uses an inner shadow:\n\nCircle().fill(.shadow(.inner(radius: 1, y: 1)))\n\nSee Also\nConfiguring the default shape style\nstatic func blendMode(BlendMode) -> some ShapeStyle\nReturns a new style based on the current style that uses mode as its blend mode when drawing.\nAvailable when Self is AnyShapeStyle.\nstatic func opacity(Double) -> some ShapeStyle\nReturns a new style based on the current style that multiplies by opacity when drawing.\nAvailable when Self is AnyShapeStyle."
    },
    {
        "title": "linearGradient(_:startPoint:endPoint:)",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/lineargradient(_:startpoint:endpoint:)-753nc",
        "html": "Discussion\n\nThe gradient applies the color function along an axis, as defined by its start and end points. The gradient maps the unit space points into the bounding rectangle of each shape filled with the gradient.\n\nFor information about how to use shape styles, see ShapeStyle.\n\nSee Also\nLinear gradients\nstatic func linearGradient(AnyGradient, startPoint: UnitPoint, endPoint: UnitPoint) -> some ShapeStyle\nA linear gradient.\nAvailable when Self is LinearGradient.\nstatic func linearGradient(colors: [Color], startPoint: UnitPoint, endPoint: UnitPoint) -> LinearGradient\nA linear gradient defined by a collection of colors.\nAvailable when Self is LinearGradient.\nstatic func linearGradient(stops: [Gradient.Stop], startPoint: UnitPoint, endPoint: UnitPoint) -> LinearGradient\nA linear gradient defined by a collection of color stops.\nAvailable when Self is LinearGradient."
    },
    {
        "title": "blendMode(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/blendmode(_:)-swift.type.method",
        "html": "Discussion\n\nIn most contexts the current style is the foreground but e.g. when setting the value of the background style, that becomes the current implicit style.\n\nFor example, a circle filled with the current foreground style and the overlay blend mode:\n\nCircle().fill(.blendMode(.overlay))\n\nSee Also\nConfiguring the default shape style\nstatic func opacity(Double) -> some ShapeStyle\nReturns a new style based on the current style that multiplies by opacity when drawing.\nAvailable when Self is AnyShapeStyle.\nstatic func shadow(ShadowStyle) -> some ShapeStyle\nReturns a shape style that applies the specified shadow style to the current style.\nAvailable when Self is AnyShapeStyle."
    },
    {
        "title": "blendMode(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/blendmode(_:)-swift.method",
        "html": "See Also\nModifying a shape style\nfunc opacity(Double) -> some ShapeStyle\nReturns a new style based on self that multiplies by the specified opacity when drawing.\nfunc shadow(ShadowStyle) -> some ShapeStyle\nApplies the specified shadow effect to the shape style."
    },
    {
        "title": "windowBackground",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/windowbackground",
        "html": "Discussion\n\nOn macOS, this has a unique appearance compared to the default ShapeStyle.background. It matches the default background of a window: a wallpaper-tinted light gray in the light appearance and a wallpaper-tinted dark gray in the dark appearance.\n\nOn visionOS, the default glass window background can only be created using glassBackgroundEffect.\n\nFor information about how to use shape styles, see ShapeStyle.\n\nSee Also\nSemantic styles\nstatic var foreground: ForegroundStyle\nThe foreground style in the current context.\nAvailable when Self is ForegroundStyle.\nstatic var background: BackgroundStyle\nThe background style in the current context.\nAvailable when Self is BackgroundStyle.\nstatic var selection: SelectionShapeStyle\nA style used to visually indicate selection following platform conventional colors and behaviors.\nAvailable when Self is SelectionShapeStyle.\nstatic var separator: SeparatorShapeStyle\nA style appropriate for foreground separator or border lines.\nAvailable when Self is SeparatorShapeStyle.\nstatic var tint: TintShapeStyle\nA style that reflects the current tint color.\nAvailable when Self is TintShapeStyle.\nstatic var placeholder: PlaceholderTextShapeStyle\nA style appropriate for placeholder text.\nAvailable when Self is PlaceholderTextShapeStyle.\nstatic var link: LinkShapeStyle\nA style appropriate for links.\nAvailable when Self is LinkShapeStyle.\nstatic var fill: FillShapeStyle\nAn overlay fill style for filling shapes.\nAvailable when Self is FillShapeStyle."
    },
    {
        "title": "selection",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/selection",
        "html": "Discussion\n\nFor example:\n\nForEach(items) {\n   ItemView(value: item, isSelected: item.id == selectedID)\n}\n\n\nstruct ItemView {\n    var value: item\n    var isSelected: Bool\n\n\n    var body: some View {\n        // construct the actual cell content\n            .background(isSelected\n                ? AnyShapeStyle(.selection)\n                    : AnyShapeStyle(.fill.quaternary),\n                in: .rect(cornerRadius: 6))\n    }\n}\n\n\nOn macOS and iPadOS this automatically reflects window key state and focus state, where the emphasized appearance will be used only when the window is key and the nearest focusable element is actually focused. On iPhone, this will always fill with the environment\u2019s accent color.\n\nWhen applied as a background of another view, it will automatically set the EnvironmentValues.backgroundProminence for the environment of that view to match the current prominence of the selection.\n\nFor information about how to use shape styles, see ShapeStyle.\n\nSee Also\nSemantic styles\nstatic var foreground: ForegroundStyle\nThe foreground style in the current context.\nAvailable when Self is ForegroundStyle.\nstatic var background: BackgroundStyle\nThe background style in the current context.\nAvailable when Self is BackgroundStyle.\nstatic var separator: SeparatorShapeStyle\nA style appropriate for foreground separator or border lines.\nAvailable when Self is SeparatorShapeStyle.\nstatic var tint: TintShapeStyle\nA style that reflects the current tint color.\nAvailable when Self is TintShapeStyle.\nstatic var placeholder: PlaceholderTextShapeStyle\nA style appropriate for placeholder text.\nAvailable when Self is PlaceholderTextShapeStyle.\nstatic var link: LinkShapeStyle\nA style appropriate for links.\nAvailable when Self is LinkShapeStyle.\nstatic var fill: FillShapeStyle\nAn overlay fill style for filling shapes.\nAvailable when Self is FillShapeStyle.\nstatic var windowBackground: WindowBackgroundShapeStyle\nA style appropriate for elements that should match the background of their containing window.\nAvailable when Self is WindowBackgroundShapeStyle."
    },
    {
        "title": "link",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/link",
        "html": "Discussion\n\nFor information about how to use shape styles, see ShapeStyle.\n\nSee Also\nSemantic styles\nstatic var foreground: ForegroundStyle\nThe foreground style in the current context.\nAvailable when Self is ForegroundStyle.\nstatic var background: BackgroundStyle\nThe background style in the current context.\nAvailable when Self is BackgroundStyle.\nstatic var selection: SelectionShapeStyle\nA style used to visually indicate selection following platform conventional colors and behaviors.\nAvailable when Self is SelectionShapeStyle.\nstatic var separator: SeparatorShapeStyle\nA style appropriate for foreground separator or border lines.\nAvailable when Self is SeparatorShapeStyle.\nstatic var tint: TintShapeStyle\nA style that reflects the current tint color.\nAvailable when Self is TintShapeStyle.\nstatic var placeholder: PlaceholderTextShapeStyle\nA style appropriate for placeholder text.\nAvailable when Self is PlaceholderTextShapeStyle.\nstatic var fill: FillShapeStyle\nAn overlay fill style for filling shapes.\nAvailable when Self is FillShapeStyle.\nstatic var windowBackground: WindowBackgroundShapeStyle\nA style appropriate for elements that should match the background of their containing window.\nAvailable when Self is WindowBackgroundShapeStyle."
    },
    {
        "title": "angularGradient(stops:center:startAngle:endAngle:)",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/angulargradient(stops:center:startangle:endangle:)",
        "html": "Parameters\nstops\n\nThe color stops of the gradient, defining each component color and their relative location along the gradient\u2019s full length.\n\ncenter\n\nThe relative center of the gradient, mapped from the unit space into the bounding rectangle of the filled shape.\n\nstartAngle\n\nThe angle that marks the beginning of the gradient.\n\nendAngle\n\nThe angle that marks the end of the gradient.\n\nDiscussion\n\nFor more information on how to use angular gradients, see angularGradient(_:center:startAngle:endAngle:).\n\nSee Also\nAngular gradients\nstatic func angularGradient(Gradient, center: UnitPoint, startAngle: Angle, endAngle: Angle) -> AngularGradient\nAn angular gradient, which applies the color function as the angle changes between the start and end angles, and anchored to a relative center point within the filled shape.\nAvailable when Self is AngularGradient.\nstatic func angularGradient(AnyGradient, center: UnitPoint, startAngle: Angle, endAngle: Angle) -> some ShapeStyle\nAn angular gradient, which applies the color function as the angle changes between the start and end angles, and anchored to a relative center point within the filled shape.\nAvailable when Self is AngularGradient.\nstatic func angularGradient(colors: [Color], center: UnitPoint, startAngle: Angle, endAngle: Angle) -> AngularGradient\nAn angular gradient defined by a collection of colors.\nAvailable when Self is AngularGradient."
    },
    {
        "title": "tertiary",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/tertiary-swift.property",
        "html": "See Also\nHierarchical styles\nvar secondary: some ShapeStyle\nReturns the second level of this shape style.\nvar quaternary: some ShapeStyle\nReturns the fourth level of this shape style.\nvar quinary: some ShapeStyle\nReturns the fifth level of this shape style.\nstatic var primary: HierarchicalShapeStyle\nA shape style that maps to the first level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var secondary: HierarchicalShapeStyle\nA shape style that maps to the second level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var tertiary: HierarchicalShapeStyle\nA shape style that maps to the third level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var quaternary: HierarchicalShapeStyle\nA shape style that maps to the fourth level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var quinary: HierarchicalShapeStyle\nA shape style that maps to the fifth level of the current content style.\nAvailable when Self is HierarchicalShapeStyle."
    },
    {
        "title": "radialGradient(_:center:startRadius:endRadius:)",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/radialgradient(_:center:startradius:endradius:)-2blwe",
        "html": "Discussion\n\nThe gradient applies the color function as the distance from a center point, scaled to fit within the defined start and end radii. The gradient maps the unit space center point into the bounding rectangle of each shape filled with the gradient.\n\nFor example, a radial gradient used as a background:\n\nContentView()\n    .background(.radialGradient(.red.gradient, endRadius: 100))\n\n\nFor information about how to use shape styles, see ShapeStyle.\n\nSee Also\nRadial gradients\nstatic func radialGradient(Gradient, center: UnitPoint, startRadius: CGFloat, endRadius: CGFloat) -> RadialGradient\nA radial gradient.\nAvailable when Self is RadialGradient.\nstatic func radialGradient(colors: [Color], center: UnitPoint, startRadius: CGFloat, endRadius: CGFloat) -> RadialGradient\nA radial gradient defined by a collection of colors.\nAvailable when Self is RadialGradient.\nstatic func radialGradient(stops: [Gradient.Stop], center: UnitPoint, startRadius: CGFloat, endRadius: CGFloat) -> RadialGradient\nA radial gradient defined by a collection of color stops.\nAvailable when Self is RadialGradient."
    },
    {
        "title": "angularGradient(_:center:startAngle:endAngle:)",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/angulargradient(_:center:startangle:endangle:)-7pe7x",
        "html": "Parameters\ngradient\n\nThe gradient to use for filling the shape, providing the colors and their relative stop locations.\n\ncenter\n\nThe relative center of the gradient, mapped from the unit space into the bounding rectangle of the filled shape.\n\nstartAngle\n\nThe angle that marks the beginning of the gradient.\n\nendAngle\n\nThe angle that marks the end of the gradient.\n\nDiscussion\n\nAn angular gradient is also known as a \u201cconic\u201d gradient. If endAngle - startAngle > 2\u03c0, the gradient only draws the last complete turn. If endAngle - startAngle < 2\u03c0, the gradient fills the missing area with the colors defined by gradient stop locations at 0 and 1, transitioning between the two halfway across the missing area.\n\nFor example, an angular gradient used as a background:\n\nContentView()\n    .background(.angularGradient(.red.gradient))\n\n\nFor information about how to use shape styles, see ShapeStyle.\n\nSee Also\nAngular gradients\nstatic func angularGradient(Gradient, center: UnitPoint, startAngle: Angle, endAngle: Angle) -> AngularGradient\nAn angular gradient, which applies the color function as the angle changes between the start and end angles, and anchored to a relative center point within the filled shape.\nAvailable when Self is AngularGradient.\nstatic func angularGradient(colors: [Color], center: UnitPoint, startAngle: Angle, endAngle: Angle) -> AngularGradient\nAn angular gradient defined by a collection of colors.\nAvailable when Self is AngularGradient.\nstatic func angularGradient(stops: [Gradient.Stop], center: UnitPoint, startAngle: Angle, endAngle: Angle) -> AngularGradient\nAn angular gradient defined by a collection of color stops.\nAvailable when Self is AngularGradient."
    },
    {
        "title": "separator",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/separator",
        "html": "Discussion\n\nFor information about how to use shape styles, see ShapeStyle.\n\nSee Also\nSemantic styles\nstatic var foreground: ForegroundStyle\nThe foreground style in the current context.\nAvailable when Self is ForegroundStyle.\nstatic var background: BackgroundStyle\nThe background style in the current context.\nAvailable when Self is BackgroundStyle.\nstatic var selection: SelectionShapeStyle\nA style used to visually indicate selection following platform conventional colors and behaviors.\nAvailable when Self is SelectionShapeStyle.\nstatic var tint: TintShapeStyle\nA style that reflects the current tint color.\nAvailable when Self is TintShapeStyle.\nstatic var placeholder: PlaceholderTextShapeStyle\nA style appropriate for placeholder text.\nAvailable when Self is PlaceholderTextShapeStyle.\nstatic var link: LinkShapeStyle\nA style appropriate for links.\nAvailable when Self is LinkShapeStyle.\nstatic var fill: FillShapeStyle\nAn overlay fill style for filling shapes.\nAvailable when Self is FillShapeStyle.\nstatic var windowBackground: WindowBackgroundShapeStyle\nA style appropriate for elements that should match the background of their containing window.\nAvailable when Self is WindowBackgroundShapeStyle."
    },
    {
        "title": "angularGradient(_:center:startAngle:endAngle:)",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/angulargradient(_:center:startangle:endangle:)-378tu",
        "html": "Parameters\ngradient\n\nThe gradient to use for filling the shape, providing the colors and their relative stop locations.\n\ncenter\n\nThe relative center of the gradient, mapped from the unit space into the bounding rectangle of the filled shape.\n\nstartAngle\n\nThe angle that marks the beginning of the gradient.\n\nendAngle\n\nThe angle that marks the end of the gradient.\n\nDiscussion\n\nAn angular gradient is also known as a \u201cconic\u201d gradient. If endAngle - startAngle > 2\u03c0, the gradient only draws the last complete turn. If endAngle - startAngle < 2\u03c0, the gradient fills the missing area with the colors defined by gradient stop locations at 0 and 1, transitioning between the two halfway across the missing area.\n\nFor example, an angular gradient used as a background:\n\nlet gradient = Gradient(colors: [.red, .yellow])\n\n\nContentView()\n    .background(.angularGradient(gradient))\n\n\nFor information about how to use shape styles, see ShapeStyle.\n\nSee Also\nAngular gradients\nstatic func angularGradient(AnyGradient, center: UnitPoint, startAngle: Angle, endAngle: Angle) -> some ShapeStyle\nAn angular gradient, which applies the color function as the angle changes between the start and end angles, and anchored to a relative center point within the filled shape.\nAvailable when Self is AngularGradient.\nstatic func angularGradient(colors: [Color], center: UnitPoint, startAngle: Angle, endAngle: Angle) -> AngularGradient\nAn angular gradient defined by a collection of colors.\nAvailable when Self is AngularGradient.\nstatic func angularGradient(stops: [Gradient.Stop], center: UnitPoint, startAngle: Angle, endAngle: Angle) -> AngularGradient\nAn angular gradient defined by a collection of color stops.\nAvailable when Self is AngularGradient."
    },
    {
        "title": "conicGradient(colors:center:angle:)",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/conicgradient(colors:center:angle:)",
        "html": "Parameters\ncolors\n\nThe colors of the gradient, evenly spaced along its full length.\n\ncenter\n\nThe relative center of the gradient, mapped from the unit space into the bounding rectangle of the filled shape.\n\nangle\n\nThe angle to offset the beginning of the gradient\u2019s full turn.\n\nDiscussion\n\nFor more information on how to use conic gradients, see conicGradient(_:center:angle:).\n\nSee Also\nConic gradients\nstatic func conicGradient(Gradient, center: UnitPoint, angle: Angle) -> AngularGradient\nA conic gradient that completes a full turn, optionally starting from a given angle and anchored to a relative center point within the filled shape.\nAvailable when Self is AngularGradient.\nstatic func conicGradient(AnyGradient, center: UnitPoint, angle: Angle) -> some ShapeStyle\nA conic gradient that completes a full turn, optionally starting from a given angle and anchored to a relative center point within the filled shape.\nAvailable when Self is AngularGradient.\nstatic func conicGradient(stops: [Gradient.Stop], center: UnitPoint, angle: Angle) -> AngularGradient\nA conic gradient defined by a collection of color stops that completes a full turn.\nAvailable when Self is AngularGradient."
    },
    {
        "title": "angularGradient(colors:center:startAngle:endAngle:)",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/angulargradient(colors:center:startangle:endangle:)",
        "html": "Parameters\ncolors\n\nThe colors of the gradient, evenly spaced along its full length.\n\ncenter\n\nThe relative center of the gradient, mapped from the unit space into the bounding rectangle of the filled shape.\n\nstartAngle\n\nThe angle that marks the beginning of the gradient.\n\nendAngle\n\nThe angle that marks the end of the gradient.\n\nDiscussion\n\nFor more information on how to use angular gradients, see angularGradient(_:center:startAngle:endAngle:).\n\nSee Also\nAngular gradients\nstatic func angularGradient(Gradient, center: UnitPoint, startAngle: Angle, endAngle: Angle) -> AngularGradient\nAn angular gradient, which applies the color function as the angle changes between the start and end angles, and anchored to a relative center point within the filled shape.\nAvailable when Self is AngularGradient.\nstatic func angularGradient(AnyGradient, center: UnitPoint, startAngle: Angle, endAngle: Angle) -> some ShapeStyle\nAn angular gradient, which applies the color function as the angle changes between the start and end angles, and anchored to a relative center point within the filled shape.\nAvailable when Self is AngularGradient.\nstatic func angularGradient(stops: [Gradient.Stop], center: UnitPoint, startAngle: Angle, endAngle: Angle) -> AngularGradient\nAn angular gradient defined by a collection of color stops.\nAvailable when Self is AngularGradient."
    },
    {
        "title": "tertiary",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/tertiary-swift.type.property",
        "html": "Discussion\n\nThis hierarchical style maps to the third level of the current foreground style, or to the third level of the default foreground style if you haven\u2019t set a foreground style in the view\u2019s environment. You typically set a foreground style by supplying a non-hierarchical style to the foregroundStyle(_:) modifier.\n\nFor information about how to use shape styles, see ShapeStyle.\n\nSee Also\nHierarchical styles\nvar secondary: some ShapeStyle\nReturns the second level of this shape style.\nvar tertiary: some ShapeStyle\nReturns the third level of this shape style.\nvar quaternary: some ShapeStyle\nReturns the fourth level of this shape style.\nvar quinary: some ShapeStyle\nReturns the fifth level of this shape style.\nstatic var primary: HierarchicalShapeStyle\nA shape style that maps to the first level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var secondary: HierarchicalShapeStyle\nA shape style that maps to the second level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var quaternary: HierarchicalShapeStyle\nA shape style that maps to the fourth level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var quinary: HierarchicalShapeStyle\nA shape style that maps to the fifth level of the current content style.\nAvailable when Self is HierarchicalShapeStyle."
    },
    {
        "title": "conicGradient(_:center:angle:)",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/conicgradient(_:center:angle:)-e0rd",
        "html": "Parameters\ngradient\n\nThe gradient to use for filling the shape, providing the colors and their relative stop locations.\n\ncenter\n\nThe relative center of the gradient, mapped from the unit space into the bounding rectangle of the filled shape.\n\nangle\n\nThe angle to offset the beginning of the gradient\u2019s full turn.\n\nDiscussion\n\nFor example, a conic gradient used as a background:\n\nlet gradient = Gradient(colors: [.red, .yellow])\n\n\nContentView()\n    .background(.conicGradient(gradient))\n\n\nFor information about how to use shape styles, see ShapeStyle.\n\nSee Also\nConic gradients\nstatic func conicGradient(AnyGradient, center: UnitPoint, angle: Angle) -> some ShapeStyle\nA conic gradient that completes a full turn, optionally starting from a given angle and anchored to a relative center point within the filled shape.\nAvailable when Self is AngularGradient.\nstatic func conicGradient(colors: [Color], center: UnitPoint, angle: Angle) -> AngularGradient\nA conic gradient defined by a collection of colors that completes a full turn.\nAvailable when Self is AngularGradient.\nstatic func conicGradient(stops: [Gradient.Stop], center: UnitPoint, angle: Angle) -> AngularGradient\nA conic gradient defined by a collection of color stops that completes a full turn.\nAvailable when Self is AngularGradient."
    },
    {
        "title": "yellow",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/yellow",
        "html": "See Also\nSystem colors\nstatic var black: Color\nA black color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var blue: Color\nA context-dependent blue color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var brown: Color\nA context-dependent brown color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var clear: Color\nA clear color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var gray: Color\nA context-dependent gray color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var green: Color\nA context-dependent green color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var mint: Color\nA context-dependent mint color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var orange: Color\nA context-dependent orange color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var pink: Color\nA context-dependent pink color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var purple: Color\nA context-dependent purple color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var red: Color\nA context-dependent red color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var teal: Color\nA context-dependent teal color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var white: Color\nA white color suitable for use in UI elements.\nAvailable when Self is Color."
    },
    {
        "title": "tint",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/tint",
        "html": "Discussion\n\nYou can set the tint color with the tint(_:) modifier. If no explicit tint is set, the tint is derived from the app\u2019s accent color.\n\nSee Also\nSemantic styles\nstatic var foreground: ForegroundStyle\nThe foreground style in the current context.\nAvailable when Self is ForegroundStyle.\nstatic var background: BackgroundStyle\nThe background style in the current context.\nAvailable when Self is BackgroundStyle.\nstatic var selection: SelectionShapeStyle\nA style used to visually indicate selection following platform conventional colors and behaviors.\nAvailable when Self is SelectionShapeStyle.\nstatic var separator: SeparatorShapeStyle\nA style appropriate for foreground separator or border lines.\nAvailable when Self is SeparatorShapeStyle.\nstatic var placeholder: PlaceholderTextShapeStyle\nA style appropriate for placeholder text.\nAvailable when Self is PlaceholderTextShapeStyle.\nstatic var link: LinkShapeStyle\nA style appropriate for links.\nAvailable when Self is LinkShapeStyle.\nstatic var fill: FillShapeStyle\nAn overlay fill style for filling shapes.\nAvailable when Self is FillShapeStyle.\nstatic var windowBackground: WindowBackgroundShapeStyle\nA style appropriate for elements that should match the background of their containing window.\nAvailable when Self is WindowBackgroundShapeStyle."
    },
    {
        "title": "green",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/green",
        "html": "See Also\nSystem colors\nstatic var black: Color\nA black color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var blue: Color\nA context-dependent blue color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var brown: Color\nA context-dependent brown color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var clear: Color\nA clear color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var gray: Color\nA context-dependent gray color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var mint: Color\nA context-dependent mint color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var orange: Color\nA context-dependent orange color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var pink: Color\nA context-dependent pink color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var purple: Color\nA context-dependent purple color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var red: Color\nA context-dependent red color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var teal: Color\nA context-dependent teal color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var white: Color\nA white color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var yellow: Color\nA context-dependent yellow color suitable for use in UI elements.\nAvailable when Self is Color."
    },
    {
        "title": "conicGradient(_:center:angle:)",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/conicgradient(_:center:angle:)-2f9fy",
        "html": "Parameters\ngradient\n\nThe gradient to use for filling the shape, providing the colors and their relative stop locations.\n\ncenter\n\nThe relative center of the gradient, mapped from the unit space into the bounding rectangle of the filled shape.\n\nangle\n\nThe angle to offset the beginning of the gradient\u2019s full turn.\n\nDiscussion\n\nFor example, a conic gradient used as a background:\n\nlet gradient = Gradient(colors: [.red, .yellow])\n\n\nContentView()\n    .background(.conicGradient(gradient))\n\n\nFor information about how to use shape styles, see ShapeStyle.\n\nSee Also\nConic gradients\nstatic func conicGradient(Gradient, center: UnitPoint, angle: Angle) -> AngularGradient\nA conic gradient that completes a full turn, optionally starting from a given angle and anchored to a relative center point within the filled shape.\nAvailable when Self is AngularGradient.\nstatic func conicGradient(colors: [Color], center: UnitPoint, angle: Angle) -> AngularGradient\nA conic gradient defined by a collection of colors that completes a full turn.\nAvailable when Self is AngularGradient.\nstatic func conicGradient(stops: [Gradient.Stop], center: UnitPoint, angle: Angle) -> AngularGradient\nA conic gradient defined by a collection of color stops that completes a full turn.\nAvailable when Self is AngularGradient."
    },
    {
        "title": "quinary",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/quinary-swift.property",
        "html": "See Also\nHierarchical styles\nvar secondary: some ShapeStyle\nReturns the second level of this shape style.\nvar tertiary: some ShapeStyle\nReturns the third level of this shape style.\nvar quaternary: some ShapeStyle\nReturns the fourth level of this shape style.\nstatic var primary: HierarchicalShapeStyle\nA shape style that maps to the first level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var secondary: HierarchicalShapeStyle\nA shape style that maps to the second level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var tertiary: HierarchicalShapeStyle\nA shape style that maps to the third level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var quaternary: HierarchicalShapeStyle\nA shape style that maps to the fourth level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var quinary: HierarchicalShapeStyle\nA shape style that maps to the fifth level of the current content style.\nAvailable when Self is HierarchicalShapeStyle."
    },
    {
        "title": "quaternary",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/quaternary-swift.type.property",
        "html": "Discussion\n\nThis hierarchical style maps to the fourth level of the current foreground style, or to the fourth level of the default foreground style if you haven\u2019t set a foreground style in the view\u2019s environment. You typically set a foreground style by supplying a non-hierarchical style to the foregroundStyle(_:) modifier.\n\nFor information about how to use shape styles, see ShapeStyle.\n\nSee Also\nHierarchical styles\nvar secondary: some ShapeStyle\nReturns the second level of this shape style.\nvar tertiary: some ShapeStyle\nReturns the third level of this shape style.\nvar quaternary: some ShapeStyle\nReturns the fourth level of this shape style.\nvar quinary: some ShapeStyle\nReturns the fifth level of this shape style.\nstatic var primary: HierarchicalShapeStyle\nA shape style that maps to the first level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var secondary: HierarchicalShapeStyle\nA shape style that maps to the second level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var tertiary: HierarchicalShapeStyle\nA shape style that maps to the third level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var quinary: HierarchicalShapeStyle\nA shape style that maps to the fifth level of the current content style.\nAvailable when Self is HierarchicalShapeStyle."
    },
    {
        "title": "secondary",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/secondary-swift.type.property",
        "html": "Discussion\n\nThis hierarchical style maps to the second level of the current foreground style, or to the second level of the default foreground style if you haven\u2019t set a foreground style in the view\u2019s environment. You typically set a foreground style by supplying a non-hierarchical style to the foregroundStyle(_:) modifier.\n\nFor information about how to use shape styles, see ShapeStyle.\n\nSee Also\nHierarchical styles\nvar secondary: some ShapeStyle\nReturns the second level of this shape style.\nvar tertiary: some ShapeStyle\nReturns the third level of this shape style.\nvar quaternary: some ShapeStyle\nReturns the fourth level of this shape style.\nvar quinary: some ShapeStyle\nReturns the fifth level of this shape style.\nstatic var primary: HierarchicalShapeStyle\nA shape style that maps to the first level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var tertiary: HierarchicalShapeStyle\nA shape style that maps to the third level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var quaternary: HierarchicalShapeStyle\nA shape style that maps to the fourth level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var quinary: HierarchicalShapeStyle\nA shape style that maps to the fifth level of the current content style.\nAvailable when Self is HierarchicalShapeStyle."
    },
    {
        "title": "quaternary",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/quaternary-swift.property",
        "html": "See Also\nHierarchical styles\nvar secondary: some ShapeStyle\nReturns the second level of this shape style.\nvar tertiary: some ShapeStyle\nReturns the third level of this shape style.\nvar quinary: some ShapeStyle\nReturns the fifth level of this shape style.\nstatic var primary: HierarchicalShapeStyle\nA shape style that maps to the first level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var secondary: HierarchicalShapeStyle\nA shape style that maps to the second level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var tertiary: HierarchicalShapeStyle\nA shape style that maps to the third level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var quaternary: HierarchicalShapeStyle\nA shape style that maps to the fourth level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var quinary: HierarchicalShapeStyle\nA shape style that maps to the fifth level of the current content style.\nAvailable when Self is HierarchicalShapeStyle."
    },
    {
        "title": "preventDictation",
        "url": "https://developer.apple.com/documentation/swiftui/textinputdictationbehavior/preventdictation",
        "html": "See Also\nGetting behavior values\nstatic let automatic: TextInputDictationBehavior\nA platform-appropriate default text input dictation behavior.\nstatic func inline(activation: TextInputDictationActivation) -> TextInputDictationBehavior\nAdds a dictation microphone in the search bar."
    },
    {
        "title": "ellipticalGradient(_:center:startRadiusFraction:endRadiusFraction:)",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/ellipticalgradient(_:center:startradiusfraction:endradiusfraction:)-fmox",
        "html": "Discussion\n\nThe gradient maps its coordinate space to the unit space square in which its center and radii are defined, then stretches that square to fill its bounding rect, possibly also stretching the circular gradient to have elliptical contours.\n\nFor example, an elliptical gradient used as a background:\n\nlet gradient = Gradient(colors: [.red, .yellow])\n\n\nContentView()\n    .background(.ellipticalGradient(gradient))\n\n\nFor information about how to use shape styles, see ShapeStyle.\n\nSee Also\nElliptical gradients\nstatic func ellipticalGradient(AnyGradient, center: UnitPoint, startRadiusFraction: CGFloat, endRadiusFraction: CGFloat) -> some ShapeStyle\nA radial gradient that draws an ellipse.\nAvailable when Self is EllipticalGradient.\nstatic func ellipticalGradient(colors: [Color], center: UnitPoint, startRadiusFraction: CGFloat, endRadiusFraction: CGFloat) -> EllipticalGradient\nA radial gradient that draws an ellipse defined by a collection of colors.\nAvailable when Self is EllipticalGradient.\nstatic func ellipticalGradient(stops: [Gradient.Stop], center: UnitPoint, startRadiusFraction: CGFloat, endRadiusFraction: CGFloat) -> EllipticalGradient\nA radial gradient that draws an ellipse defined by a collection of color stops.\nAvailable when Self is EllipticalGradient."
    },
    {
        "title": "conicGradient(stops:center:angle:)",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/conicgradient(stops:center:angle:)",
        "html": "Parameters\nstops\n\nThe color stops of the gradient, defining each component color and their relative location along the gradient\u2019s full length.\n\ncenter\n\nThe relative center of the gradient, mapped from the unit space into the bounding rectangle of the filled shape.\n\nangle\n\nThe angle to offset the beginning of the gradient\u2019s full turn.\n\nDiscussion\n\nFor more information on how to use conic gradients, see conicGradient(_:center:angle:).\n\nSee Also\nConic gradients\nstatic func conicGradient(Gradient, center: UnitPoint, angle: Angle) -> AngularGradient\nA conic gradient that completes a full turn, optionally starting from a given angle and anchored to a relative center point within the filled shape.\nAvailable when Self is AngularGradient.\nstatic func conicGradient(AnyGradient, center: UnitPoint, angle: Angle) -> some ShapeStyle\nA conic gradient that completes a full turn, optionally starting from a given angle and anchored to a relative center point within the filled shape.\nAvailable when Self is AngularGradient.\nstatic func conicGradient(colors: [Color], center: UnitPoint, angle: Angle) -> AngularGradient\nA conic gradient defined by a collection of colors that completes a full turn.\nAvailable when Self is AngularGradient."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/textinputdictationbehavior/automatic",
        "html": "Discussion\n\nThe automatic behavior uses a TextInputDictationActivation value of onLook for visionOS apps and onSelect for iOS apps.\n\nSee Also\nGetting behavior values\nstatic func inline(activation: TextInputDictationActivation) -> TextInputDictationBehavior\nAdds a dictation microphone in the search bar.\nstatic let preventDictation: TextInputDictationBehavior\nPrevents the search bar from having a dictation microphone.\nBeta"
    },
    {
        "title": "onLook",
        "url": "https://developer.apple.com/documentation/swiftui/textinputdictationactivation/onlook",
        "html": "See Also\nGetting activation values\nstatic let onSelect: TextInputDictationActivation\nA configuration that activates dictation when someone selects the microphone."
    },
    {
        "title": "navigation",
        "url": "https://developer.apple.com/documentation/swiftui/containerbackgroundplacement/navigation",
        "html": "See Also\nGetting placements\nstatic let tabView: ContainerBackgroundPlacement\nA background placement inside a TabView.\nstatic let widget: ContainerBackgroundPlacement\nThe container background placement for a widget."
    },
    {
        "title": "immediately",
        "url": "https://developer.apple.com/documentation/swiftui/scrolldismisseskeyboardmode/immediately",
        "html": "See Also\nGetting modes\nstatic var automatic: ScrollDismissesKeyboardMode\nDetermine the mode automatically based on the surrounding context.\nstatic var interactively: ScrollDismissesKeyboardMode\nEnable people to interactively dismiss the keyboard as part of the scroll operation.\nstatic var never: ScrollDismissesKeyboardMode\nNever dismiss the keyboard automatically as a result of scrolling."
    },
    {
        "title": "center",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint3d/center",
        "html": "See Also\nGetting middle points\nstatic let leadingBack: UnitPoint3D\nA point that\u2019s centered vertically on the leading-back edge of a view.\nBeta\nstatic let leading: UnitPoint3D\nA point that\u2019s centered vertically and in the depth dimension on the leading face of a view.\nBeta\nstatic let leadingFront: UnitPoint3D\nA point that\u2019s centered vertically on the leading-front edge of a view.\nBeta\nstatic let back: UnitPoint3D\nA point that\u2019s centered horizontally and vertically on the back face of a view.\nBeta\nstatic let front: UnitPoint3D\nA point that\u2019s centered horizontally and vertically on the front face of a view.\nBeta\nstatic let trailingBack: UnitPoint3D\nA point that\u2019s centered vertically on the trailing-back edge of a view.\nBeta\nstatic let trailing: UnitPoint3D\nA point that\u2019s centered vertically and in the depth dimension on the trailing face of a view.\nBeta\nstatic let trailingFront: UnitPoint3D\nA point that\u2019s centered vertically on the trailing-front edge of a view.\nBeta"
    },
    {
        "title": "ForegroundStyle",
        "url": "https://developer.apple.com/documentation/swiftui/foregroundstyle",
        "html": "Overview\n\nYou can also use foreground to construct this style.\n\nTopics\nCreating a foreground style\ninit()\nCreates a foreground style instance.\nRelationships\nConforms To\nSendable\nShapeStyle\nSee Also\nSupporting types\nstruct AngularGradient\nAn angular gradient.\nstruct EllipticalGradient\nA radial gradient that draws an ellipse.\nstruct LinearGradient\nA linear gradient.\nstruct RadialGradient\nA radial gradient.\nstruct Material\nA background material type.\nstruct ImagePaint\nA shape style that fills a shape by repeating a region of an image.\nstruct HierarchicalShapeStyle\nA shape style that maps to one of the numbered content styles.\nstruct HierarchicalShapeStyleModifier\nStyles that you can apply to hierarchical shapes.\nstruct BackgroundStyle\nThe background style in the current context.\nstruct SelectionShapeStyle\nA style used to visually indicate selection following platform conventional colors and behaviors.\nstruct SeparatorShapeStyle\nA style appropriate for foreground separator or border lines.\nstruct TintShapeStyle\nA style that reflects the current tint color.\nstruct FillShapeStyle\nA shape style that displays one of the overlay fills.\nstruct LinkShapeStyle\nA style appropriate for links.\nstruct PlaceholderTextShapeStyle\nA style appropriate for placeholder text.\nstruct WindowBackgroundShapeStyle\nA style appropriate for elements that should match the background of their containing window."
    },
    {
        "title": "WindowBackgroundShapeStyle",
        "url": "https://developer.apple.com/documentation/swiftui/windowbackgroundshapestyle",
        "html": "Topics\nCreating the style\ninit()\nCreates a new window background shape style instance.\nRelationships\nConforms To\nSendable\nShapeStyle\nSee Also\nSupporting types\nstruct AngularGradient\nAn angular gradient.\nstruct EllipticalGradient\nA radial gradient that draws an ellipse.\nstruct LinearGradient\nA linear gradient.\nstruct RadialGradient\nA radial gradient.\nstruct Material\nA background material type.\nstruct ImagePaint\nA shape style that fills a shape by repeating a region of an image.\nstruct HierarchicalShapeStyle\nA shape style that maps to one of the numbered content styles.\nstruct HierarchicalShapeStyleModifier\nStyles that you can apply to hierarchical shapes.\nstruct ForegroundStyle\nThe foreground style in the current context.\nstruct BackgroundStyle\nThe background style in the current context.\nstruct SelectionShapeStyle\nA style used to visually indicate selection following platform conventional colors and behaviors.\nstruct SeparatorShapeStyle\nA style appropriate for foreground separator or border lines.\nstruct TintShapeStyle\nA style that reflects the current tint color.\nstruct FillShapeStyle\nA shape style that displays one of the overlay fills.\nstruct LinkShapeStyle\nA style appropriate for links.\nstruct PlaceholderTextShapeStyle\nA style appropriate for placeholder text."
    },
    {
        "title": "init(_:systemImage:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/menu/init(_:systemimage:content:)-9ljee",
        "html": "Parameters\ntitleKey\n\nThe key for the link\u2019s localized title, which describes the contents of the menu.\n\nsystemImage\n\nThe name of the image resource to lookup.\n\ncontent\n\nA group of menu items.\n\nSee Also\nCreating a menu with an image label\ninit<S>(S, image: ImageResource, content: () -> Content)\nCreates a menu that generates its label from a string and image resource.\nAvailable when Label is Label<Text, Image> and Content conforms to View.\ninit(LocalizedStringKey, image: ImageResource, content: () -> Content)\nCreates a menu that generates its label from a localized string key and image resource.\nAvailable when Label is Label<Text, Image> and Content conforms to View.\ninit(LocalizedStringKey, image: ImageResource, content: () -> Content, primaryAction: () -> Void)\nCreates a menu with a custom primary action that generates its label from a localized string key.\nAvailable when Label is Label<Text, Image> and Content conforms to View.\ninit<S>(S, systemImage: String, content: () -> Content)\nCreates a menu that generates its label from a string and system image.\nAvailable when Label is Label<Text, Image> and Content conforms to View.\ninit(LocalizedStringKey, systemImage: String, content: () -> Content, primaryAction: () -> Void)\nCreates a menu with a custom primary action that generates its label from a localized string key and system image.\nAvailable when Label is Label<Text, Image> and Content conforms to View."
    },
    {
        "title": "init(before:addition:)",
        "url": "https://developer.apple.com/documentation/swiftui/commandgroup/init(before:addition:)",
        "html": "See Also\nCreating a command group\ninit(after: CommandGroupPlacement, addition: () -> Content)\nA value describing the addition of the given views to the end of the indicated group.\ninit(replacing: CommandGroupPlacement, addition: () -> Content)\nA value describing the complete replacement of the contents of the indicated group with the given views."
    },
    {
        "title": "init(alignment:spacing:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/vstack/init(alignment:spacing:content:)",
        "html": "Parameters\nalignment\n\nThe guide for aligning the subviews in this stack. This guide has the same vertical screen coordinate for every subview.\n\nspacing\n\nThe distance between adjacent subviews, or nil if you want the stack to choose a default distance for each pair of subviews.\n\ncontent\n\nA view builder that creates the content of this stack."
    },
    {
        "title": "sectionHeaders",
        "url": "https://developer.apple.com/documentation/swiftui/pinnedscrollableviews/sectionheaders",
        "html": "See Also\nGetting scrollable view types\nstatic let sectionFooters: PinnedScrollableViews\nThe footer view of each Section will be pinned."
    },
    {
        "title": "init(replacing:addition:)",
        "url": "https://developer.apple.com/documentation/swiftui/commandgroup/init(replacing:addition:)",
        "html": "See Also\nCreating a command group\ninit(after: CommandGroupPlacement, addition: () -> Content)\nA value describing the addition of the given views to the end of the indicated group.\ninit(before: CommandGroupPlacement, addition: () -> Content)\nA value describing the addition of the given views to the beginning of the indicated group."
    },
    {
        "title": "FillShapeStyle",
        "url": "https://developer.apple.com/documentation/swiftui/fillshapestyle",
        "html": "Topics\nCreating the style\ninit()\nAn overlay fill style for filling shapes.\nRelationships\nConforms To\nSendable\nShapeStyle\nSee Also\nSupporting types\nstruct AngularGradient\nAn angular gradient.\nstruct EllipticalGradient\nA radial gradient that draws an ellipse.\nstruct LinearGradient\nA linear gradient.\nstruct RadialGradient\nA radial gradient.\nstruct Material\nA background material type.\nstruct ImagePaint\nA shape style that fills a shape by repeating a region of an image.\nstruct HierarchicalShapeStyle\nA shape style that maps to one of the numbered content styles.\nstruct HierarchicalShapeStyleModifier\nStyles that you can apply to hierarchical shapes.\nstruct ForegroundStyle\nThe foreground style in the current context.\nstruct BackgroundStyle\nThe background style in the current context.\nstruct SelectionShapeStyle\nA style used to visually indicate selection following platform conventional colors and behaviors.\nstruct SeparatorShapeStyle\nA style appropriate for foreground separator or border lines.\nstruct TintShapeStyle\nA style that reflects the current tint color.\nstruct LinkShapeStyle\nA style appropriate for links.\nstruct PlaceholderTextShapeStyle\nA style appropriate for placeholder text.\nstruct WindowBackgroundShapeStyle\nA style appropriate for elements that should match the background of their containing window."
    },
    {
        "title": "sectionFooters",
        "url": "https://developer.apple.com/documentation/swiftui/pinnedscrollableviews/sectionfooters",
        "html": "See Also\nGetting scrollable view types\nstatic let sectionHeaders: PinnedScrollableViews\nThe header view of each Section will be pinned."
    },
    {
        "title": "ellipticalGradient(_:center:startRadiusFraction:endRadiusFraction:)",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/ellipticalgradient(_:center:startradiusfraction:endradiusfraction:)-4nzly",
        "html": "Discussion\n\nThe gradient maps its coordinate space to the unit space square in which its center and radii are defined, then stretches that square to fill its bounding rect, possibly also stretching the circular gradient to have elliptical contours.\n\nFor example, an elliptical gradient used as a background:\n\nContentView()\n    .background(.ellipticalGradient(.red.gradient))\n\n\nFor information about how to use shape styles, see ShapeStyle.\n\nSee Also\nElliptical gradients\nstatic func ellipticalGradient(Gradient, center: UnitPoint, startRadiusFraction: CGFloat, endRadiusFraction: CGFloat) -> EllipticalGradient\nA radial gradient that draws an ellipse.\nAvailable when Self is EllipticalGradient.\nstatic func ellipticalGradient(colors: [Color], center: UnitPoint, startRadiusFraction: CGFloat, endRadiusFraction: CGFloat) -> EllipticalGradient\nA radial gradient that draws an ellipse defined by a collection of colors.\nAvailable when Self is EllipticalGradient.\nstatic func ellipticalGradient(stops: [Gradient.Stop], center: UnitPoint, startRadiusFraction: CGFloat, endRadiusFraction: CGFloat) -> EllipticalGradient\nA radial gradient that draws an ellipse defined by a collection of color stops.\nAvailable when Self is EllipticalGradient."
    },
    {
        "title": "widget",
        "url": "https://developer.apple.com/documentation/swiftui/containerbackgroundplacement/widget",
        "html": "Discussion\n\nPass the container background placement to the containerBackground(_:for:) function to configure the background of your widgets.\n\nSee Also\nGetting placements\nstatic let navigation: ContainerBackgroundPlacement\nA background placement inside a NavigationStack or NavigationSplitView\nstatic let tabView: ContainerBackgroundPlacement\nA background placement inside a TabView."
    },
    {
        "title": "ContentSizeCategory.extraExtraExtraLarge",
        "url": "https://developer.apple.com/documentation/swiftui/contentsizecategory/extraextraextralarge",
        "html": "See Also\nContent size categories\ncase accessibilityExtraExtraExtraLarge\ncase accessibilityExtraExtraLarge\ncase accessibilityExtraLarge\ncase accessibilityLarge\ncase accessibilityMedium\ncase extraExtraLarge\ncase extraLarge\ncase extraSmall\ncase large\ncase medium\ncase small"
    },
    {
        "title": "ellipticalGradient(colors:center:startRadiusFraction:endRadiusFraction:)",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/ellipticalgradient(colors:center:startradiusfraction:endradiusfraction:)",
        "html": "Discussion\n\nThe gradient maps its coordinate space to the unit space square in which its center and radii are defined, then stretches that square to fill its bounding rect, possibly also stretching the circular gradient to have elliptical contours.\n\nFor example, an elliptical gradient used as a background:\n\n.background(.elliptical(colors: [.red, .yellow]))\n\n\nFor information about how to use shape styles, see ShapeStyle.\n\nSee Also\nElliptical gradients\nstatic func ellipticalGradient(Gradient, center: UnitPoint, startRadiusFraction: CGFloat, endRadiusFraction: CGFloat) -> EllipticalGradient\nA radial gradient that draws an ellipse.\nAvailable when Self is EllipticalGradient.\nstatic func ellipticalGradient(AnyGradient, center: UnitPoint, startRadiusFraction: CGFloat, endRadiusFraction: CGFloat) -> some ShapeStyle\nA radial gradient that draws an ellipse.\nAvailable when Self is EllipticalGradient.\nstatic func ellipticalGradient(stops: [Gradient.Stop], center: UnitPoint, startRadiusFraction: CGFloat, endRadiusFraction: CGFloat) -> EllipticalGradient\nA radial gradient that draws an ellipse defined by a collection of color stops.\nAvailable when Self is EllipticalGradient."
    },
    {
        "title": "settlingDuration(fromValue:toValue:initialVelocity:epsilon:)",
        "url": "https://developer.apple.com/documentation/swiftui/spring/settlingduration(fromvalue:tovalue:initialvelocity:epsilon:)",
        "html": "Discussion\n\nThe epsilon value specifies the threshhold for how small all subsequent values need to be before the spring is considered to have settled.\n\nSee Also\nCalculating forces and durations\nfunc force<V>(target: V, position: V, velocity: V) -> V\nCalculates the force upon the spring given a current position, target, and velocity amount of change.\nfunc force<V>(fromValue: V, toValue: V, position: V, velocity: V) -> V\nCalculates the force upon the spring given a current position, velocity, and divisor from the starting and end values for the spring to travel.\nfunc settlingDuration<V>(target: V, initialVelocity: V, epsilon: Double) -> TimeInterval\nThe estimated duration required for the spring system to be considered at rest."
    },
    {
        "title": "inner(color:radius:x:y:)",
        "url": "https://developer.apple.com/documentation/swiftui/shadowstyle/inner(color:radius:x:y:)",
        "html": "Parameters\ncolor\n\nThe shadow\u2019s color.\n\nradius\n\nThe shadow\u2019s size.\n\nx\n\nA horizontal offset you use to position the shadow relative to this view.\n\ny\n\nA vertical offset you use to position the shadow relative to this view.\n\nReturn Value\n\nA new shadow style.\n\nDiscussion\n\nInner shadows draw on top of the source content by blurring, tinting, inverting and offsetting its per-pixel alpha values.\n\nSee Also\nGetting shadow styles\nstatic func drop(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> ShadowStyle\nCreates a custom drop shadow style."
    },
    {
        "title": "init(_:image:content:primaryAction:)",
        "url": "https://developer.apple.com/documentation/swiftui/menu/init(_:image:content:primaryaction:)",
        "html": "Parameters\ntitleKey\n\nThe key for the link\u2019s localized title, which describes the contents of the menu.\n\nimage\n\nThe name of the image resource to lookup.\n\nprimaryAction\n\nThe action to perform on primary interaction with the menu.\n\ncontent\n\nA group of menu items.\n\nSee Also\nCreating a menu with an image label\ninit<S>(S, image: ImageResource, content: () -> Content)\nCreates a menu that generates its label from a string and image resource.\nAvailable when Label is Label<Text, Image> and Content conforms to View.\ninit(LocalizedStringKey, image: ImageResource, content: () -> Content)\nCreates a menu that generates its label from a localized string key and image resource.\nAvailable when Label is Label<Text, Image> and Content conforms to View.\ninit<S>(S, systemImage: String, content: () -> Content)\nCreates a menu that generates its label from a string and system image.\nAvailable when Label is Label<Text, Image> and Content conforms to View.\ninit(LocalizedStringKey, systemImage: String, content: () -> Content)\nCreates a menu that generates its label from a localized string key and system image.\nAvailable when Label is Label<Text, Image> and Content conforms to View.\ninit(LocalizedStringKey, systemImage: String, content: () -> Content, primaryAction: () -> Void)\nCreates a menu with a custom primary action that generates its label from a localized string key and system image.\nAvailable when Label is Label<Text, Image> and Content conforms to View."
    },
    {
        "title": "drop(color:radius:x:y:)",
        "url": "https://developer.apple.com/documentation/swiftui/shadowstyle/drop(color:radius:x:y:)",
        "html": "Parameters\ncolor\n\nThe shadow\u2019s color.\n\nradius\n\nThe shadow\u2019s size.\n\nx\n\nA horizontal offset you use to position the shadow relative to this view.\n\ny\n\nA vertical offset you use to position the shadow relative to this view.\n\nReturn Value\n\nA new shadow style.\n\nDiscussion\n\nDrop shadows draw behind the source content by blurring, tinting and offsetting its per-pixel alpha values.\n\nSee Also\nGetting shadow styles\nstatic func inner(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> ShadowStyle\nCreates a custom inner shadow style."
    },
    {
        "title": "ContentSizeCategory.extraLarge",
        "url": "https://developer.apple.com/documentation/swiftui/contentsizecategory/extralarge",
        "html": "See Also\nContent size categories\ncase accessibilityExtraExtraExtraLarge\ncase accessibilityExtraExtraLarge\ncase accessibilityExtraLarge\ncase accessibilityLarge\ncase accessibilityMedium\ncase extraExtraExtraLarge\ncase extraExtraLarge\ncase extraSmall\ncase large\ncase medium\ncase small"
    },
    {
        "title": "init(colors:)",
        "url": "https://developer.apple.com/documentation/swiftui/gradient/init(colors:)",
        "html": "Discussion\n\nThe gradient synthesizes its location values to evenly space the colors along the gradient."
    },
    {
        "title": "stops",
        "url": "https://developer.apple.com/documentation/swiftui/gradient/stops",
        "html": "See Also\nCreating a gradient from stops\ninit(stops: [Gradient.Stop])\nCreates a gradient from an array of color stops.\nstruct Stop\nOne color stop in the gradient."
    },
    {
        "title": "mass",
        "url": "https://developer.apple.com/documentation/swiftui/spring/mass",
        "html": "Discussion\n\nThe default mass is 1. Increasing this value will increase the spring\u2019s effect: the attached object will be subject to more oscillations and greater overshoot, resulting in an increased settling duration. Decreasing the mass will reduce the spring effect: there will be fewer oscillations and a reduced overshoot, resulting in a decreased settling duration.\n\nSee Also\nGetting spring characteristics\nvar bounce: Double\nHow bouncy the spring is.\nvar damping: Double\nDefines how the spring\u2019s motion should be damped due to the forces of friction.\nvar dampingRatio: Double\nThe amount of drag applied, as a fraction of the amount needed to produce critical damping.\nvar duration: TimeInterval\nThe perceptual duration, which defines the pace of the spring.\nvar response: Double\nThe stiffness of the spring, defined as an approximate duration in seconds.\nvar settlingDuration: TimeInterval\nThe estimated duration required for the spring system to be considered at rest.\nvar stiffness: Double\nThe spring stiffness coefficient."
    },
    {
        "title": "init(_:content:primaryAction:)",
        "url": "https://developer.apple.com/documentation/swiftui/menu/init(_:content:primaryaction:)-1349t",
        "html": "Parameters\ntitleKey\n\nThe key for the link\u2019s localized title, which describes the contents of the menu.\n\nprimaryAction\n\nThe action to perform on primary interaction with the menu.\n\ncontent\n\nA group of menu items.\n\nSee Also\nCreating a menu with a primary action\ninit(content: () -> Content, label: () -> Label, primaryAction: () -> Void)\nCreates a menu with a custom primary action and custom label.\nAvailable when Label conforms to View and Content conforms to View.\ninit<S>(S, content: () -> Content, primaryAction: () -> Void)\nCreates a menu with a custom primary action that generates its label from a string.\nAvailable when Label conforms to View and Content conforms to View."
    },
    {
        "title": "ContentSizeCategory.accessibilityExtraLarge",
        "url": "https://developer.apple.com/documentation/swiftui/contentsizecategory/accessibilityextralarge",
        "html": "See Also\nContent size categories\ncase accessibilityExtraExtraExtraLarge\ncase accessibilityExtraExtraLarge\ncase accessibilityLarge\ncase accessibilityMedium\ncase extraExtraExtraLarge\ncase extraExtraLarge\ncase extraLarge\ncase extraSmall\ncase large\ncase medium\ncase small"
    },
    {
        "title": "ContentSizeCategory.extraExtraLarge",
        "url": "https://developer.apple.com/documentation/swiftui/contentsizecategory/extraextralarge",
        "html": "See Also\nContent size categories\ncase accessibilityExtraExtraExtraLarge\ncase accessibilityExtraExtraLarge\ncase accessibilityExtraLarge\ncase accessibilityLarge\ncase accessibilityMedium\ncase extraExtraExtraLarge\ncase extraLarge\ncase extraSmall\ncase large\ncase medium\ncase small"
    },
    {
        "title": "opacity(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/opacity(_:)-swift.type.method",
        "html": "Discussion\n\nIn most contexts the current style is the foreground but e.g. when setting the value of the background style, that becomes the current implicit style.\n\nFor example, a circle filled with the current foreground style at fifty-percent opacity:\n\nCircle().fill(.opacity(0.5))\n\nSee Also\nConfiguring the default shape style\nstatic func blendMode(BlendMode) -> some ShapeStyle\nReturns a new style based on the current style that uses mode as its blend mode when drawing.\nAvailable when Self is AnyShapeStyle.\nstatic func shadow(ShadowStyle) -> some ShapeStyle\nReturns a shape style that applies the specified shadow style to the current style.\nAvailable when Self is AnyShapeStyle."
    },
    {
        "title": "placeholder",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/placeholder",
        "html": "Discussion\n\nFor information about how to use shape styles, see ShapeStyle.\n\nSee Also\nSemantic styles\nstatic var foreground: ForegroundStyle\nThe foreground style in the current context.\nAvailable when Self is ForegroundStyle.\nstatic var background: BackgroundStyle\nThe background style in the current context.\nAvailable when Self is BackgroundStyle.\nstatic var selection: SelectionShapeStyle\nA style used to visually indicate selection following platform conventional colors and behaviors.\nAvailable when Self is SelectionShapeStyle.\nstatic var separator: SeparatorShapeStyle\nA style appropriate for foreground separator or border lines.\nAvailable when Self is SeparatorShapeStyle.\nstatic var tint: TintShapeStyle\nA style that reflects the current tint color.\nAvailable when Self is TintShapeStyle.\nstatic var link: LinkShapeStyle\nA style appropriate for links.\nAvailable when Self is LinkShapeStyle.\nstatic var fill: FillShapeStyle\nAn overlay fill style for filling shapes.\nAvailable when Self is FillShapeStyle.\nstatic var windowBackground: WindowBackgroundShapeStyle\nA style appropriate for elements that should match the background of their containing window.\nAvailable when Self is WindowBackgroundShapeStyle."
    },
    {
        "title": "quinary",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/quinary-swift.type.property",
        "html": "Discussion\n\nThis hierarchical style maps to the fifth level of the current foreground style, or to the fifth level of the default foreground style if you haven\u2019t set a foreground style in the view\u2019s environment. You typically set a foreground style by supplying a non-hierarchical style to the foregroundStyle(_:) modifier.\n\nFor information about how to use shape styles, see ShapeStyle.\n\nSee Also\nHierarchical styles\nvar secondary: some ShapeStyle\nReturns the second level of this shape style.\nvar tertiary: some ShapeStyle\nReturns the third level of this shape style.\nvar quaternary: some ShapeStyle\nReturns the fourth level of this shape style.\nvar quinary: some ShapeStyle\nReturns the fifth level of this shape style.\nstatic var primary: HierarchicalShapeStyle\nA shape style that maps to the first level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var secondary: HierarchicalShapeStyle\nA shape style that maps to the second level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var tertiary: HierarchicalShapeStyle\nA shape style that maps to the third level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var quaternary: HierarchicalShapeStyle\nA shape style that maps to the fourth level of the current content style.\nAvailable when Self is HierarchicalShapeStyle."
    },
    {
        "title": "secondary",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/secondary-swift.property",
        "html": "See Also\nHierarchical styles\nvar tertiary: some ShapeStyle\nReturns the third level of this shape style.\nvar quaternary: some ShapeStyle\nReturns the fourth level of this shape style.\nvar quinary: some ShapeStyle\nReturns the fifth level of this shape style.\nstatic var primary: HierarchicalShapeStyle\nA shape style that maps to the first level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var secondary: HierarchicalShapeStyle\nA shape style that maps to the second level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var tertiary: HierarchicalShapeStyle\nA shape style that maps to the third level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var quaternary: HierarchicalShapeStyle\nA shape style that maps to the fourth level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var quinary: HierarchicalShapeStyle\nA shape style that maps to the fifth level of the current content style.\nAvailable when Self is HierarchicalShapeStyle."
    },
    {
        "title": "white",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/white",
        "html": "See Also\nSystem colors\nstatic var black: Color\nA black color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var blue: Color\nA context-dependent blue color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var brown: Color\nA context-dependent brown color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var clear: Color\nA clear color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var gray: Color\nA context-dependent gray color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var green: Color\nA context-dependent green color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var mint: Color\nA context-dependent mint color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var orange: Color\nA context-dependent orange color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var pink: Color\nA context-dependent pink color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var purple: Color\nA context-dependent purple color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var red: Color\nA context-dependent red color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var teal: Color\nA context-dependent teal color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var yellow: Color\nA context-dependent yellow color suitable for use in UI elements.\nAvailable when Self is Color."
    },
    {
        "title": "black",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/black",
        "html": "See Also\nSystem colors\nstatic var blue: Color\nA context-dependent blue color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var brown: Color\nA context-dependent brown color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var clear: Color\nA clear color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var gray: Color\nA context-dependent gray color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var green: Color\nA context-dependent green color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var mint: Color\nA context-dependent mint color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var orange: Color\nA context-dependent orange color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var pink: Color\nA context-dependent pink color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var purple: Color\nA context-dependent purple color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var red: Color\nA context-dependent red color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var teal: Color\nA context-dependent teal color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var white: Color\nA white color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var yellow: Color\nA context-dependent yellow color suitable for use in UI elements.\nAvailable when Self is Color."
    },
    {
        "title": "bar",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/bar",
        "html": "See Also\nMaterials\nstatic var ultraThinMaterial: Material\nA mostly translucent material.\nAvailable when Self is Material.\nstatic var thinMaterial: Material\nA material that\u2019s more translucent than opaque.\nAvailable when Self is Material.\nstatic var regularMaterial: Material\nA material that\u2019s somewhat translucent.\nAvailable when Self is Material.\nstatic var thickMaterial: Material\nA material that\u2019s more opaque than translucent.\nAvailable when Self is Material.\nstatic var ultraThickMaterial: Material\nA mostly opaque material.\nAvailable when Self is Material."
    },
    {
        "title": "brown",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/brown",
        "html": "See Also\nSystem colors\nstatic var black: Color\nA black color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var blue: Color\nA context-dependent blue color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var clear: Color\nA clear color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var gray: Color\nA context-dependent gray color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var green: Color\nA context-dependent green color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var mint: Color\nA context-dependent mint color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var orange: Color\nA context-dependent orange color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var pink: Color\nA context-dependent pink color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var purple: Color\nA context-dependent purple color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var red: Color\nA context-dependent red color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var teal: Color\nA context-dependent teal color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var white: Color\nA white color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var yellow: Color\nA context-dependent yellow color suitable for use in UI elements.\nAvailable when Self is Color."
    },
    {
        "title": "radialGradient(colors:center:startRadius:endRadius:)",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/radialgradient(colors:center:startradius:endradius:)",
        "html": "Discussion\n\nThe gradient applies the color function as the distance from a center point, scaled to fit within the defined start and end radii. The gradient maps the unit space center point into the bounding rectangle of each shape filled with the gradient.\n\nFor information about how to use shape styles, see ShapeStyle.\n\nSee Also\nRadial gradients\nstatic func radialGradient(Gradient, center: UnitPoint, startRadius: CGFloat, endRadius: CGFloat) -> RadialGradient\nA radial gradient.\nAvailable when Self is RadialGradient.\nstatic func radialGradient(AnyGradient, center: UnitPoint, startRadius: CGFloat, endRadius: CGFloat) -> some ShapeStyle\nA radial gradient.\nAvailable when Self is RadialGradient.\nstatic func radialGradient(stops: [Gradient.Stop], center: UnitPoint, startRadius: CGFloat, endRadius: CGFloat) -> RadialGradient\nA radial gradient defined by a collection of color stops.\nAvailable when Self is RadialGradient."
    },
    {
        "title": "linearGradient(_:startPoint:endPoint:)",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/lineargradient(_:startpoint:endpoint:)-5xsg4",
        "html": "Discussion\n\nThe gradient applies the color function along an axis, as defined by its start and end points. The gradient maps the unit space points into the bounding rectangle of each shape filled with the gradient.\n\nFor example, a linear gradient used as a background:\n\nContentView()\n    .background(.linearGradient(.red.gradient,\n        startPoint: .top, endPoint: .bottom))\n\n\nFor information about how to use shape styles, see ShapeStyle.\n\nSee Also\nLinear gradients\nstatic func linearGradient(Gradient, startPoint: UnitPoint, endPoint: UnitPoint) -> LinearGradient\nA linear gradient.\nAvailable when Self is LinearGradient.\nstatic func linearGradient(colors: [Color], startPoint: UnitPoint, endPoint: UnitPoint) -> LinearGradient\nA linear gradient defined by a collection of colors.\nAvailable when Self is LinearGradient.\nstatic func linearGradient(stops: [Gradient.Stop], startPoint: UnitPoint, endPoint: UnitPoint) -> LinearGradient\nA linear gradient defined by a collection of color stops.\nAvailable when Self is LinearGradient."
    },
    {
        "title": "indigo",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/indigo",
        "html": "See Also\nSystem colors\nstatic var black: Color\nA black color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var blue: Color\nA context-dependent blue color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var brown: Color\nA context-dependent brown color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var clear: Color\nA clear color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var gray: Color\nA context-dependent gray color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var green: Color\nA context-dependent green color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var mint: Color\nA context-dependent mint color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var orange: Color\nA context-dependent orange color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var pink: Color\nA context-dependent pink color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var purple: Color\nA context-dependent purple color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var red: Color\nA context-dependent red color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var teal: Color\nA context-dependent teal color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var white: Color\nA white color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var yellow: Color\nA context-dependent yellow color suitable for use in UI elements.\nAvailable when Self is Color."
    },
    {
        "title": "mint",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/mint",
        "html": "See Also\nSystem colors\nstatic var black: Color\nA black color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var blue: Color\nA context-dependent blue color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var brown: Color\nA context-dependent brown color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var clear: Color\nA clear color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var gray: Color\nA context-dependent gray color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var green: Color\nA context-dependent green color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var orange: Color\nA context-dependent orange color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var pink: Color\nA context-dependent pink color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var purple: Color\nA context-dependent purple color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var red: Color\nA context-dependent red color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var teal: Color\nA context-dependent teal color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var white: Color\nA white color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var yellow: Color\nA context-dependent yellow color suitable for use in UI elements.\nAvailable when Self is Color."
    },
    {
        "title": "linearGradient(stops:startPoint:endPoint:)",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/lineargradient(stops:startpoint:endpoint:)",
        "html": "Discussion\n\nThe gradient applies the color function along an axis, as defined by its start and end points. The gradient maps the unit space points into the bounding rectangle of each shape filled with the gradient.\n\nFor information about how to use shape styles, see ShapeStyle.\n\nSee Also\nLinear gradients\nstatic func linearGradient(Gradient, startPoint: UnitPoint, endPoint: UnitPoint) -> LinearGradient\nA linear gradient.\nAvailable when Self is LinearGradient.\nstatic func linearGradient(AnyGradient, startPoint: UnitPoint, endPoint: UnitPoint) -> some ShapeStyle\nA linear gradient.\nAvailable when Self is LinearGradient.\nstatic func linearGradient(colors: [Color], startPoint: UnitPoint, endPoint: UnitPoint) -> LinearGradient\nA linear gradient defined by a collection of colors.\nAvailable when Self is LinearGradient."
    },
    {
        "title": "image(_:sourceRect:scale:)",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/image(_:sourcerect:scale:)",
        "html": "Parameters\nimage\n\nThe image to be drawn.\n\nsourceRect\n\nA unit-space rectangle defining how much of the source image to draw. The results are undefined if sourceRect selects areas outside the [0, 1] range in either axis.\n\nscale\n\nA scale factor applied to the image during rendering.\n\nDiscussion\n\nFor information about how to use shape styles, see ShapeStyle."
    },
    {
        "title": "linearGradient(colors:startPoint:endPoint:)",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/lineargradient(colors:startpoint:endpoint:)",
        "html": "Discussion\n\nThe gradient applies the color function along an axis, as defined by its start and end points. The gradient maps the unit space points into the bounding rectangle of each shape filled with the gradient.\n\nFor information about how to use shape styles, see ShapeStyle.\n\nSee Also\nLinear gradients\nstatic func linearGradient(Gradient, startPoint: UnitPoint, endPoint: UnitPoint) -> LinearGradient\nA linear gradient.\nAvailable when Self is LinearGradient.\nstatic func linearGradient(AnyGradient, startPoint: UnitPoint, endPoint: UnitPoint) -> some ShapeStyle\nA linear gradient.\nAvailable when Self is LinearGradient.\nstatic func linearGradient(stops: [Gradient.Stop], startPoint: UnitPoint, endPoint: UnitPoint) -> LinearGradient\nA linear gradient defined by a collection of color stops.\nAvailable when Self is LinearGradient."
    },
    {
        "title": "thickMaterial",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/thickmaterial",
        "html": "See Also\nMaterials\nstatic var ultraThinMaterial: Material\nA mostly translucent material.\nAvailable when Self is Material.\nstatic var thinMaterial: Material\nA material that\u2019s more translucent than opaque.\nAvailable when Self is Material.\nstatic var regularMaterial: Material\nA material that\u2019s somewhat translucent.\nAvailable when Self is Material.\nstatic var ultraThickMaterial: Material\nA mostly opaque material.\nAvailable when Self is Material.\nstatic var bar: Material\nA material matching the style of system toolbars.\nAvailable when Self is Material."
    },
    {
        "title": "ultraThickMaterial",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/ultrathickmaterial",
        "html": "See Also\nMaterials\nstatic var ultraThinMaterial: Material\nA mostly translucent material.\nAvailable when Self is Material.\nstatic var thinMaterial: Material\nA material that\u2019s more translucent than opaque.\nAvailable when Self is Material.\nstatic var regularMaterial: Material\nA material that\u2019s somewhat translucent.\nAvailable when Self is Material.\nstatic var thickMaterial: Material\nA material that\u2019s more opaque than translucent.\nAvailable when Self is Material.\nstatic var bar: Material\nA material matching the style of system toolbars.\nAvailable when Self is Material."
    },
    {
        "title": "cyan",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/cyan",
        "html": "See Also\nSystem colors\nstatic var black: Color\nA black color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var blue: Color\nA context-dependent blue color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var brown: Color\nA context-dependent brown color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var clear: Color\nA clear color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var gray: Color\nA context-dependent gray color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var green: Color\nA context-dependent green color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var mint: Color\nA context-dependent mint color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var orange: Color\nA context-dependent orange color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var pink: Color\nA context-dependent pink color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var purple: Color\nA context-dependent purple color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var red: Color\nA context-dependent red color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var teal: Color\nA context-dependent teal color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var white: Color\nA white color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var yellow: Color\nA context-dependent yellow color suitable for use in UI elements.\nAvailable when Self is Color."
    },
    {
        "title": "primary",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/primary",
        "html": "Discussion\n\nThis hierarchical style maps to the first level of the current foreground style, or to the first level of the default foreground style if you haven\u2019t set a foreground style in the view\u2019s environment. You typically set a foreground style by supplying a non-hierarchical style to the foregroundStyle(_:) modifier.\n\nFor information about how to use shape styles, see ShapeStyle.\n\nSee Also\nHierarchical styles\nvar secondary: some ShapeStyle\nReturns the second level of this shape style.\nvar tertiary: some ShapeStyle\nReturns the third level of this shape style.\nvar quaternary: some ShapeStyle\nReturns the fourth level of this shape style.\nvar quinary: some ShapeStyle\nReturns the fifth level of this shape style.\nstatic var secondary: HierarchicalShapeStyle\nA shape style that maps to the second level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var tertiary: HierarchicalShapeStyle\nA shape style that maps to the third level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var quaternary: HierarchicalShapeStyle\nA shape style that maps to the fourth level of the current content style.\nAvailable when Self is HierarchicalShapeStyle.\nstatic var quinary: HierarchicalShapeStyle\nA shape style that maps to the fifth level of the current content style.\nAvailable when Self is HierarchicalShapeStyle."
    },
    {
        "title": "red",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/red",
        "html": "See Also\nSystem colors\nstatic var black: Color\nA black color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var blue: Color\nA context-dependent blue color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var brown: Color\nA context-dependent brown color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var clear: Color\nA clear color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var gray: Color\nA context-dependent gray color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var green: Color\nA context-dependent green color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var mint: Color\nA context-dependent mint color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var orange: Color\nA context-dependent orange color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var pink: Color\nA context-dependent pink color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var purple: Color\nA context-dependent purple color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var teal: Color\nA context-dependent teal color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var white: Color\nA white color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var yellow: Color\nA context-dependent yellow color suitable for use in UI elements.\nAvailable when Self is Color."
    },
    {
        "title": "gray",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/gray",
        "html": "See Also\nSystem colors\nstatic var black: Color\nA black color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var blue: Color\nA context-dependent blue color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var brown: Color\nA context-dependent brown color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var clear: Color\nA clear color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var green: Color\nA context-dependent green color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var mint: Color\nA context-dependent mint color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var orange: Color\nA context-dependent orange color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var pink: Color\nA context-dependent pink color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var purple: Color\nA context-dependent purple color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var red: Color\nA context-dependent red color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var teal: Color\nA context-dependent teal color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var white: Color\nA white color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var yellow: Color\nA context-dependent yellow color suitable for use in UI elements.\nAvailable when Self is Color."
    },
    {
        "title": "background",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/background",
        "html": "Discussion\n\nAccess this value to get the style SwiftUI uses for the background in the current context. The specific color that SwiftUI renders depends on factors like the platform and whether the user has turned on Dark Mode.\n\nFor information about how to use shape styles, see ShapeStyle.\n\nSee Also\nSemantic styles\nstatic var foreground: ForegroundStyle\nThe foreground style in the current context.\nAvailable when Self is ForegroundStyle.\nstatic var selection: SelectionShapeStyle\nA style used to visually indicate selection following platform conventional colors and behaviors.\nAvailable when Self is SelectionShapeStyle.\nstatic var separator: SeparatorShapeStyle\nA style appropriate for foreground separator or border lines.\nAvailable when Self is SeparatorShapeStyle.\nstatic var tint: TintShapeStyle\nA style that reflects the current tint color.\nAvailable when Self is TintShapeStyle.\nstatic var placeholder: PlaceholderTextShapeStyle\nA style appropriate for placeholder text.\nAvailable when Self is PlaceholderTextShapeStyle.\nstatic var link: LinkShapeStyle\nA style appropriate for links.\nAvailable when Self is LinkShapeStyle.\nstatic var fill: FillShapeStyle\nAn overlay fill style for filling shapes.\nAvailable when Self is FillShapeStyle.\nstatic var windowBackground: WindowBackgroundShapeStyle\nA style appropriate for elements that should match the background of their containing window.\nAvailable when Self is WindowBackgroundShapeStyle."
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/commandmenu/init(_:content:)-50ti4",
        "html": "See Also\nCreating a command menu\ninit(LocalizedStringKey, content: () -> Content)\nCreates a new menu with a localized name for a collection of app- specific commands, inserted in the standard location for app menus (after the View menu, in order with other menus declared without an explicit location).\ninit<S>(S, content: () -> Content)\nCreates a new menu for a collection of app-specific commands, inserted in the standard location for app menus (after the View menu, in order with other menus declared without an explicit location)."
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/commandmenu/init(_:content:)-h0l3",
        "html": "See Also\nCreating a command menu\ninit(LocalizedStringKey, content: () -> Content)\nCreates a new menu with a localized name for a collection of app- specific commands, inserted in the standard location for app menus (after the View menu, in order with other menus declared without an explicit location).\ninit(Text, content: () -> Content)\nCreates a new menu for a collection of app-specific commands, inserted in the standard location for app menus (after the View menu, in order with other menus declared without an explicit location)."
    },
    {
        "title": "subscriptionStoreFullHeight",
        "url": "https://developer.apple.com/documentation/swiftui/containerbackgroundplacement/subscriptionstorefullheight",
        "html": "See Also\nGetting StoreKit placements\nstatic var subscriptionStore: ContainerBackgroundPlacement\nA background placement inside a SubscriptionStoreView.\nstatic var subscriptionStoreHeader: ContainerBackgroundPlacement\nA background placement inside the marketing content of a SubscriptionStoreView"
    },
    {
        "title": "subscriptionStoreHeader",
        "url": "https://developer.apple.com/documentation/swiftui/containerbackgroundplacement/subscriptionstoreheader",
        "html": "See Also\nGetting StoreKit placements\nstatic var subscriptionStore: ContainerBackgroundPlacement\nA background placement inside a SubscriptionStoreView.\nstatic var subscriptionStoreFullHeight: ContainerBackgroundPlacement\nA background placement that spans the full height of a SubscriptionStoreView."
    },
    {
        "title": "ultraThinMaterial",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/ultrathinmaterial",
        "html": "See Also\nMaterials\nstatic var thinMaterial: Material\nA material that\u2019s more translucent than opaque.\nAvailable when Self is Material.\nstatic var regularMaterial: Material\nA material that\u2019s somewhat translucent.\nAvailable when Self is Material.\nstatic var thickMaterial: Material\nA material that\u2019s more opaque than translucent.\nAvailable when Self is Material.\nstatic var ultraThickMaterial: Material\nA mostly opaque material.\nAvailable when Self is Material.\nstatic var bar: Material\nA material matching the style of system toolbars.\nAvailable when Self is Material."
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/menu/init(_:content:)-7v768",
        "html": "Parameters\ntitleKey\n\nThe key for the link\u2019s localized title, which describes the contents of the menu.\n\ncontent\n\nA group of menu items.\n\nSee Also\nCreating a menu from content\ninit(content: () -> Content, label: () -> Label)\nCreates a menu with a custom label.\nAvailable when Label conforms to View and Content conforms to View.\ninit<S>(S, content: () -> Content)\nCreates a menu that generates its label from a string.\nAvailable when Label conforms to View and Content conforms to View."
    },
    {
        "title": "init(content:label:primaryAction:)",
        "url": "https://developer.apple.com/documentation/swiftui/menu/init(content:label:primaryaction:)",
        "html": "Parameters\ncontent\n\nA group of menu items.\n\nlabel\n\nA view describing the content of the menu.\n\nprimaryAction\n\nThe action to perform on primary interaction with the menu.\n\nSee Also\nCreating a menu with a primary action\ninit(LocalizedStringKey, content: () -> Content, primaryAction: () -> Void)\nCreates a menu with a custom primary action that generates its label from a localized string key.\nAvailable when Label conforms to View and Content conforms to View.\ninit<S>(S, content: () -> Content, primaryAction: () -> Void)\nCreates a menu with a custom primary action that generates its label from a string.\nAvailable when Label conforms to View and Content conforms to View."
    },
    {
        "title": "init(_:content:primaryAction:)",
        "url": "https://developer.apple.com/documentation/swiftui/menu/init(_:content:primaryaction:)-1t1lw",
        "html": "Parameters\ntitle\n\nA string that describes the contents of the menu.\n\nprimaryAction\n\nThe action to perform on primary interaction with the menu.\n\ncontent\n\nA group of menu items.\n\nDiscussion\n\nTo create the label with a localized string key, use Menu(_:primaryAction:content:) instead.\n\nSee Also\nCreating a menu with a primary action\ninit(content: () -> Content, label: () -> Label, primaryAction: () -> Void)\nCreates a menu with a custom primary action and custom label.\nAvailable when Label conforms to View and Content conforms to View.\ninit(LocalizedStringKey, content: () -> Content, primaryAction: () -> Void)\nCreates a menu with a custom primary action that generates its label from a localized string key.\nAvailable when Label conforms to View and Content conforms to View."
    },
    {
        "title": "Font.Leading",
        "url": "https://developer.apple.com/documentation/swiftui/font/leading",
        "html": "Overview\n\nApply one of the Leading values to a font using the leading(_:) method to increase or decrease the line spacing.\n\nTopics\nGetting leading line spacing options\ncase standard\nThe font\u2019s default line spacing.\ncase loose\nIncreased line spacing.\ncase tight\nReduced line spacing.\nRelationships\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nStyling a font\nfunc bold() -> Font\nAdds bold styling to the font.\nfunc italic() -> Font\nAdds italics to the font.\nfunc monospaced() -> Font\nReturns a fixed-width font from the same family as the base font.\nfunc monospacedDigit() -> Font\nReturns a modified font that uses fixed-width digits, while leaving other characters proportionally spaced.\nfunc smallCaps() -> Font\nAdjusts the font to enable all small capitals.\nfunc lowercaseSmallCaps() -> Font\nAdjusts the font to enable lowercase small capitals.\nfunc uppercaseSmallCaps() -> Font\nAdjusts the font to enable uppercase small capitals.\nfunc weight(Font.Weight) -> Font\nSets the weight of the font.\nfunc width(Font.Width) -> Font\nSets the width of the font.\nstruct Width\nA width to use for fonts that have multiple widths.\nfunc leading(Font.Leading) -> Font\nAdjusts the line spacing of a font."
    },
    {
        "title": "leading(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/font/leading(_:)",
        "html": "Parameters\nleading\n\nThe line spacing adjustment to apply.\n\nReturn Value\n\nA modified font that uses the specified line spacing, or the original font if it doesn\u2019t support line spacing adjustments.\n\nDiscussion\n\nYou can change a font\u2019s line spacing while maintaining other characteristics of the font by applying this modifier. For example, you can decrease spacing of the body font by applying the Font.Leading.tight value to it:\n\nlet myFont = Font.body.leading(.tight)\n\n\nThe availability of leading adjustments depends on the font. For some fonts, the modifier has no effect and returns the original font.\n\nSee Also\nStyling a font\nfunc bold() -> Font\nAdds bold styling to the font.\nfunc italic() -> Font\nAdds italics to the font.\nfunc monospaced() -> Font\nReturns a fixed-width font from the same family as the base font.\nfunc monospacedDigit() -> Font\nReturns a modified font that uses fixed-width digits, while leaving other characters proportionally spaced.\nfunc smallCaps() -> Font\nAdjusts the font to enable all small capitals.\nfunc lowercaseSmallCaps() -> Font\nAdjusts the font to enable lowercase small capitals.\nfunc uppercaseSmallCaps() -> Font\nAdjusts the font to enable uppercase small capitals.\nfunc weight(Font.Weight) -> Font\nSets the weight of the font.\nfunc width(Font.Width) -> Font\nSets the width of the font.\nstruct Width\nA width to use for fonts that have multiple widths.\nenum Leading\nA line spacing adjustment that you can apply to a font."
    },
    {
        "title": "system(size:weight:design:)",
        "url": "https://developer.apple.com/documentation/swiftui/font/system(size:weight:design:)-697b2",
        "html": "Discussion\n\nUse this function to create a system font by specifying the size and weight, and a type design together. The following styles the system font as 17 point, semibold text:\n\nText(\"Hello\").font(.system(size: 17, weight: .semibold))\n\n\nWhile the following styles the text as 17 point bold, and applies a serif Font.Design to the system font:\n\nText(\"Hello\").font(.system(size: 17, weight: .bold, design: .serif))\n\n\nBoth weight and design can be optional. When you do not provide a weight or design, the system can pick one based on the current context, which may not be regular or Font.Design.default in certain context. The following example styles the text as 17 point system font using Font.Design.rounded design, while its weight can depend on the current context:\n\nText(\"Hello\").font(.system(size: 17, design: .rounded))\n\nSee Also\nGetting system fonts\nstatic func system(Font.TextStyle, design: Font.Design?, weight: Font.Weight?) -> Font\nGets a system font that uses the specified style, design, and weight.\nenum Design\nA design to use for fonts.\nenum TextStyle\nA dynamic text style to use for fonts.\nstruct Weight\nA weight to use for fonts."
    },
    {
        "title": "footnote",
        "url": "https://developer.apple.com/documentation/swiftui/font/footnote",
        "html": "See Also\nGetting standard fonts\nstatic let extraLargeTitle2: Font\nCreate a font with the second level extra large title text style.\nBeta\nstatic let extraLargeTitle: Font\nCreate a font with the extra large title text style.\nBeta\nstatic let largeTitle: Font\nA font with the large title text style.\nstatic let title: Font\nA font with the title text style.\nstatic let title2: Font\nCreate a font for second level hierarchical headings.\nstatic let title3: Font\nCreate a font for third level hierarchical headings.\nstatic let headline: Font\nA font with the headline text style.\nstatic let subheadline: Font\nA font with the subheadline text style.\nstatic let body: Font\nA font with the body text style.\nstatic let callout: Font\nA font with the callout text style.\nstatic let caption: Font\nA font with the caption text style.\nstatic let caption2: Font\nCreate a font with the alternate caption text style."
    },
    {
        "title": "system(_:design:weight:)",
        "url": "https://developer.apple.com/documentation/swiftui/font/system(_:design:weight:)",
        "html": "Discussion\n\nUse this method to create a system font that has the specified properties. The following example creates a system font with the Font.TextStyle.body text style, a Font.Design.serif design, and a bold weight, and applies the font to a Text view using the font(_:) view modifier:\n\nText(\"Hello\").font(.system(.body, design: .serif, weight: .bold))\n\n\nThe design and weight parameters are both optional. If you omit either, the system uses a default value for that parameter. The default values are typically Font.Design.default and regular, respectively, but might vary depending on the context.\n\nSee Also\nGetting system fonts\nstatic func system(size: CGFloat, weight: Font.Weight?, design: Font.Design?) -> Font\nSpecifies a system font to use, along with the style, weight, and any design parameters you want applied to the text.\nenum Design\nA design to use for fonts.\nenum TextStyle\nA dynamic text style to use for fonts.\nstruct Weight\nA weight to use for fonts."
    },
    {
        "title": "custom(_:fixedSize:)",
        "url": "https://developer.apple.com/documentation/swiftui/font/custom(_:fixedsize:)",
        "html": "See Also\nCreating custom fonts\nstatic func custom(String, size: CGFloat, relativeTo: Font.TextStyle) -> Font\nCreate a custom font with the given name and size that scales relative to the given textStyle.\nstatic func custom(String, size: CGFloat) -> Font\nCreate a custom font with the given name and size that scales with the body text style."
    },
    {
        "title": "Font.TextStyle",
        "url": "https://developer.apple.com/documentation/swiftui/font/textstyle",
        "html": "Topics\nGetting font text styles\ncase extraLargeTitle2\nThe font used for second level extra large titles.\nBeta\ncase extraLargeTitle\nThe font used for extra large titles.\nBeta\ncase largeTitle\nThe font style for large titles.\ncase title\nThe font used for first level hierarchical headings.\ncase title2\nThe font used for second level hierarchical headings.\ncase title3\nThe font used for third level hierarchical headings.\ncase headline\nThe font used for headings.\ncase subheadline\nThe font used for subheadings.\ncase body\nThe font used for body text.\ncase callout\nThe font used for callouts.\ncase caption\nThe font used for standard captions.\ncase caption2\nThe font used for alternate captions.\ncase footnote\nThe font used in footnotes.\nRelationships\nConforms To\nCaseIterable\nEquatable\nHashable\nSendable\nSee Also\nGetting system fonts\nstatic func system(Font.TextStyle, design: Font.Design?, weight: Font.Weight?) -> Font\nGets a system font that uses the specified style, design, and weight.\nstatic func system(size: CGFloat, weight: Font.Weight?, design: Font.Design?) -> Font\nSpecifies a system font to use, along with the style, weight, and any design parameters you want applied to the text.\nenum Design\nA design to use for fonts.\nstruct Weight\nA weight to use for fonts."
    },
    {
        "title": "width(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/font/width(_:)",
        "html": "See Also\nStyling a font\nfunc bold() -> Font\nAdds bold styling to the font.\nfunc italic() -> Font\nAdds italics to the font.\nfunc monospaced() -> Font\nReturns a fixed-width font from the same family as the base font.\nfunc monospacedDigit() -> Font\nReturns a modified font that uses fixed-width digits, while leaving other characters proportionally spaced.\nfunc smallCaps() -> Font\nAdjusts the font to enable all small capitals.\nfunc lowercaseSmallCaps() -> Font\nAdjusts the font to enable lowercase small capitals.\nfunc uppercaseSmallCaps() -> Font\nAdjusts the font to enable uppercase small capitals.\nfunc weight(Font.Weight) -> Font\nSets the weight of the font.\nstruct Width\nA width to use for fonts that have multiple widths.\nfunc leading(Font.Leading) -> Font\nAdjusts the line spacing of a font.\nenum Leading\nA line spacing adjustment that you can apply to a font."
    },
    {
        "title": "extraLargeTitle",
        "url": "https://developer.apple.com/documentation/swiftui/font/extralargetitle",
        "html": "See Also\nGetting standard fonts\nstatic let extraLargeTitle2: Font\nCreate a font with the second level extra large title text style.\nBeta\nstatic let largeTitle: Font\nA font with the large title text style.\nstatic let title: Font\nA font with the title text style.\nstatic let title2: Font\nCreate a font for second level hierarchical headings.\nstatic let title3: Font\nCreate a font for third level hierarchical headings.\nstatic let headline: Font\nA font with the headline text style.\nstatic let subheadline: Font\nA font with the subheadline text style.\nstatic let body: Font\nA font with the body text style.\nstatic let callout: Font\nA font with the callout text style.\nstatic let caption: Font\nA font with the caption text style.\nstatic let caption2: Font\nCreate a font with the alternate caption text style.\nstatic let footnote: Font\nA font with the footnote text style."
    },
    {
        "title": "ellipticalGradient(stops:center:startRadiusFraction:endRadiusFraction:)",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/ellipticalgradient(stops:center:startradiusfraction:endradiusfraction:)",
        "html": "Discussion\n\nThe gradient maps its coordinate space to the unit space square in which its center and radii are defined, then stretches that square to fill its bounding rect, possibly also stretching the circular gradient to have elliptical contours.\n\nFor example, an elliptical gradient used as a background:\n\n.background(.ellipticalGradient(stops: [\n    .init(color: .red, location: 0.0),\n    .init(color: .yellow, location: 0.9),\n    .init(color: .yellow, location: 1.0),\n]))\n\n\nFor information about how to use shape styles, see ShapeStyle.\n\nSee Also\nElliptical gradients\nstatic func ellipticalGradient(Gradient, center: UnitPoint, startRadiusFraction: CGFloat, endRadiusFraction: CGFloat) -> EllipticalGradient\nA radial gradient that draws an ellipse.\nAvailable when Self is EllipticalGradient.\nstatic func ellipticalGradient(AnyGradient, center: UnitPoint, startRadiusFraction: CGFloat, endRadiusFraction: CGFloat) -> some ShapeStyle\nA radial gradient that draws an ellipse.\nAvailable when Self is EllipticalGradient.\nstatic func ellipticalGradient(colors: [Color], center: UnitPoint, startRadiusFraction: CGFloat, endRadiusFraction: CGFloat) -> EllipticalGradient\nA radial gradient that draws an ellipse defined by a collection of colors.\nAvailable when Self is EllipticalGradient."
    },
    {
        "title": "title3",
        "url": "https://developer.apple.com/documentation/swiftui/font/title3",
        "html": "See Also\nGetting standard fonts\nstatic let extraLargeTitle2: Font\nCreate a font with the second level extra large title text style.\nBeta\nstatic let extraLargeTitle: Font\nCreate a font with the extra large title text style.\nBeta\nstatic let largeTitle: Font\nA font with the large title text style.\nstatic let title: Font\nA font with the title text style.\nstatic let title2: Font\nCreate a font for second level hierarchical headings.\nstatic let headline: Font\nA font with the headline text style.\nstatic let subheadline: Font\nA font with the subheadline text style.\nstatic let body: Font\nA font with the body text style.\nstatic let callout: Font\nA font with the callout text style.\nstatic let caption: Font\nA font with the caption text style.\nstatic let caption2: Font\nCreate a font with the alternate caption text style.\nstatic let footnote: Font\nA font with the footnote text style."
    },
    {
        "title": "callout",
        "url": "https://developer.apple.com/documentation/swiftui/font/callout",
        "html": "See Also\nGetting standard fonts\nstatic let extraLargeTitle2: Font\nCreate a font with the second level extra large title text style.\nBeta\nstatic let extraLargeTitle: Font\nCreate a font with the extra large title text style.\nBeta\nstatic let largeTitle: Font\nA font with the large title text style.\nstatic let title: Font\nA font with the title text style.\nstatic let title2: Font\nCreate a font for second level hierarchical headings.\nstatic let title3: Font\nCreate a font for third level hierarchical headings.\nstatic let headline: Font\nA font with the headline text style.\nstatic let subheadline: Font\nA font with the subheadline text style.\nstatic let body: Font\nA font with the body text style.\nstatic let caption: Font\nA font with the caption text style.\nstatic let caption2: Font\nCreate a font with the alternate caption text style.\nstatic let footnote: Font\nA font with the footnote text style."
    },
    {
        "title": "headline",
        "url": "https://developer.apple.com/documentation/swiftui/font/headline",
        "html": "See Also\nGetting standard fonts\nstatic let extraLargeTitle2: Font\nCreate a font with the second level extra large title text style.\nBeta\nstatic let extraLargeTitle: Font\nCreate a font with the extra large title text style.\nBeta\nstatic let largeTitle: Font\nA font with the large title text style.\nstatic let title: Font\nA font with the title text style.\nstatic let title2: Font\nCreate a font for second level hierarchical headings.\nstatic let title3: Font\nCreate a font for third level hierarchical headings.\nstatic let subheadline: Font\nA font with the subheadline text style.\nstatic let body: Font\nA font with the body text style.\nstatic let callout: Font\nA font with the callout text style.\nstatic let caption: Font\nA font with the caption text style.\nstatic let caption2: Font\nCreate a font with the alternate caption text style.\nstatic let footnote: Font\nA font with the footnote text style."
    },
    {
        "title": "subheadline",
        "url": "https://developer.apple.com/documentation/swiftui/font/subheadline",
        "html": "See Also\nGetting standard fonts\nstatic let extraLargeTitle2: Font\nCreate a font with the second level extra large title text style.\nBeta\nstatic let extraLargeTitle: Font\nCreate a font with the extra large title text style.\nBeta\nstatic let largeTitle: Font\nA font with the large title text style.\nstatic let title: Font\nA font with the title text style.\nstatic let title2: Font\nCreate a font for second level hierarchical headings.\nstatic let title3: Font\nCreate a font for third level hierarchical headings.\nstatic let headline: Font\nA font with the headline text style.\nstatic let body: Font\nA font with the body text style.\nstatic let callout: Font\nA font with the callout text style.\nstatic let caption: Font\nA font with the caption text style.\nstatic let caption2: Font\nCreate a font with the alternate caption text style.\nstatic let footnote: Font\nA font with the footnote text style."
    },
    {
        "title": "title2",
        "url": "https://developer.apple.com/documentation/swiftui/font/title2",
        "html": "See Also\nGetting standard fonts\nstatic let extraLargeTitle2: Font\nCreate a font with the second level extra large title text style.\nBeta\nstatic let extraLargeTitle: Font\nCreate a font with the extra large title text style.\nBeta\nstatic let largeTitle: Font\nA font with the large title text style.\nstatic let title: Font\nA font with the title text style.\nstatic let title3: Font\nCreate a font for third level hierarchical headings.\nstatic let headline: Font\nA font with the headline text style.\nstatic let subheadline: Font\nA font with the subheadline text style.\nstatic let body: Font\nA font with the body text style.\nstatic let callout: Font\nA font with the callout text style.\nstatic let caption: Font\nA font with the caption text style.\nstatic let caption2: Font\nCreate a font with the alternate caption text style.\nstatic let footnote: Font\nA font with the footnote text style."
    },
    {
        "title": "caption2",
        "url": "https://developer.apple.com/documentation/swiftui/font/caption2",
        "html": "See Also\nGetting standard fonts\nstatic let extraLargeTitle2: Font\nCreate a font with the second level extra large title text style.\nBeta\nstatic let extraLargeTitle: Font\nCreate a font with the extra large title text style.\nBeta\nstatic let largeTitle: Font\nA font with the large title text style.\nstatic let title: Font\nA font with the title text style.\nstatic let title2: Font\nCreate a font for second level hierarchical headings.\nstatic let title3: Font\nCreate a font for third level hierarchical headings.\nstatic let headline: Font\nA font with the headline text style.\nstatic let subheadline: Font\nA font with the subheadline text style.\nstatic let body: Font\nA font with the body text style.\nstatic let callout: Font\nA font with the callout text style.\nstatic let caption: Font\nA font with the caption text style.\nstatic let footnote: Font\nA font with the footnote text style."
    },
    {
        "title": "colorSpace(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/anygradient/colorspace(_:)",
        "html": "Parameters\nspace\n\nThe color space the new gradient will use to interpolate its constituent colors.\n\nReturn Value\n\nA new gradient that interpolates its colors in the specified color space.\n\nDiscussion\nRectangle().fill(.linearGradient(\n    colors: [.white, .blue]).colorSpace(.perceptual))\n"
    },
    {
        "title": "ContentSizeCategory.large",
        "url": "https://developer.apple.com/documentation/swiftui/contentsizecategory/large",
        "html": "See Also\nContent size categories\ncase accessibilityExtraExtraExtraLarge\ncase accessibilityExtraExtraLarge\ncase accessibilityExtraLarge\ncase accessibilityLarge\ncase accessibilityMedium\ncase extraExtraExtraLarge\ncase extraExtraLarge\ncase extraLarge\ncase extraSmall\ncase medium\ncase small"
    },
    {
        "title": "init(stops:)",
        "url": "https://developer.apple.com/documentation/swiftui/gradient/init(stops:)",
        "html": "See Also\nCreating a gradient from stops\nvar stops: [Gradient.Stop]\nThe array of color stops.\nstruct Stop\nOne color stop in the gradient."
    },
    {
        "title": "Gradient.Stop",
        "url": "https://developer.apple.com/documentation/swiftui/gradient/stop",
        "html": "Topics\nCreating a gradient stop\ninit(color: Color, location: CGFloat)\nCreates a color stop with a color and location.\nConfiguring a gradient stop\nvar color: Color\nThe color for the stop.\nvar location: CGFloat\nThe parametric location of the stop.\nRelationships\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nCreating a gradient from stops\ninit(stops: [Gradient.Stop])\nCreates a gradient from an array of color stops.\nvar stops: [Gradient.Stop]\nThe array of color stops."
    },
    {
        "title": "ContentSizeCategory.medium",
        "url": "https://developer.apple.com/documentation/swiftui/contentsizecategory/medium",
        "html": "See Also\nContent size categories\ncase accessibilityExtraExtraExtraLarge\ncase accessibilityExtraExtraLarge\ncase accessibilityExtraLarge\ncase accessibilityLarge\ncase accessibilityMedium\ncase extraExtraExtraLarge\ncase extraExtraLarge\ncase extraLarge\ncase extraSmall\ncase large\ncase small"
    },
    {
        "title": "ContentSizeCategory.small",
        "url": "https://developer.apple.com/documentation/swiftui/contentsizecategory/small",
        "html": "See Also\nContent size categories\ncase accessibilityExtraExtraExtraLarge\ncase accessibilityExtraExtraLarge\ncase accessibilityExtraLarge\ncase accessibilityLarge\ncase accessibilityMedium\ncase extraExtraExtraLarge\ncase extraExtraLarge\ncase extraLarge\ncase extraSmall\ncase large\ncase medium"
    },
    {
        "title": "purple",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/purple",
        "html": "See Also\nSystem colors\nstatic var black: Color\nA black color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var blue: Color\nA context-dependent blue color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var brown: Color\nA context-dependent brown color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var clear: Color\nA clear color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var gray: Color\nA context-dependent gray color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var green: Color\nA context-dependent green color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var mint: Color\nA context-dependent mint color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var orange: Color\nA context-dependent orange color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var pink: Color\nA context-dependent pink color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var red: Color\nA context-dependent red color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var teal: Color\nA context-dependent teal color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var white: Color\nA white color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var yellow: Color\nA context-dependent yellow color suitable for use in UI elements.\nAvailable when Self is Color."
    },
    {
        "title": "Gradient.ColorSpace",
        "url": "https://developer.apple.com/documentation/swiftui/gradient/colorspace",
        "html": "Topics\nGetting an interpolation method\nstatic let device: Gradient.ColorSpace\nInterpolates gradient colors in the output color space.\nstatic let perceptual: Gradient.ColorSpace\nInterpolates gradient colors in a perceptual color space.\nRelationships\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nWorking with color spaces\nfunc colorSpace(Gradient.ColorSpace) -> AnyGradient\nReturns a version of the gradient that will use a specified color space for interpolating between its colors."
    },
    {
        "title": "colorSpace(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/gradient/colorspace(_:)",
        "html": "Parameters\nspace\n\nThe color space the new gradient will use to interpolate its constituent colors.\n\nReturn Value\n\nA new gradient that interpolates its colors in the specified color space.\n\nDiscussion\nRectangle().fill(.linearGradient(\n    colors: [.white, .blue]).colorSpace(.perceptual))\n\nSee Also\nWorking with color spaces\nstruct ColorSpace\nA method of interpolating between the colors in a gradient."
    },
    {
        "title": "ContentSizeCategory.accessibilityMedium",
        "url": "https://developer.apple.com/documentation/swiftui/contentsizecategory/accessibilitymedium",
        "html": "See Also\nContent size categories\ncase accessibilityExtraExtraExtraLarge\ncase accessibilityExtraExtraLarge\ncase accessibilityExtraLarge\ncase accessibilityLarge\ncase extraExtraExtraLarge\ncase extraExtraLarge\ncase extraLarge\ncase extraSmall\ncase large\ncase medium\ncase small"
    },
    {
        "title": "init(duration:bounce:)",
        "url": "https://developer.apple.com/documentation/swiftui/spring/init(duration:bounce:)",
        "html": "Parameters\nduration\n\nDefines the pace of the spring. This is approximately equal to the settling duration, but for springs with very large bounce values, will be the duration of the period of oscillation for the spring.\n\nbounce\n\nHow bouncy the spring should be. A value of 0 indicates no bounces (a critically damped spring), positive values indicate increasing amounts of bounciness up to a maximum of 1.0 (corresponding to undamped oscillation), and negative values indicate overdamped springs with a minimum value of -1.0.\n\nSee Also\nCreating a spring\ninit(mass: Double, stiffness: Double, damping: Double, allowOverDamping: Bool)\nCreates a spring with the specified mass, stiffness, and damping.\ninit(response: Double, dampingRatio: Double)\nCreates a spring with the specified response and damping ratio.\ninit(settlingDuration: TimeInterval, dampingRatio: Double, epsilon: Double)\nCreates a spring with the specified duration and damping ratio."
    },
    {
        "title": "bouncy(duration:extraBounce:)",
        "url": "https://developer.apple.com/documentation/swiftui/spring/bouncy(duration:extrabounce:)",
        "html": "Parameters\nduration\n\nThe perceptual duration, which defines the pace of the spring. This is approximately equal to the settling duration, but for very bouncy springs, will be the duration of the period of oscillation for the spring.\n\nextraBounce\n\nHow much additional bounce should be added to the base bounce of 0.3.\n\nblendDuration\n\nThe duration in seconds over which to interpolate changes to the duration.\n\nSee Also\nGetting built-in springs\nstatic var bouncy: Spring\nA spring with a predefined duration and higher amount of bounce.\nstatic var smooth: Spring\nA smooth spring with a predefined duration and no bounce.\nstatic func smooth(duration: TimeInterval, extraBounce: Double) -> Spring\nA smooth spring with a predefined duration and no bounce that can be tuned.\nstatic var snappy: Spring\nA spring with a predefined duration and small amount of bounce that feels more snappy.\nstatic func snappy(duration: TimeInterval, extraBounce: Double) -> Spring\nA spring with a predefined duration and small amount of bounce that feels more snappy and can be tuned."
    },
    {
        "title": "easeIn",
        "url": "https://developer.apple.com/documentation/swiftui/unitcurve/easein",
        "html": "Discussion\n\nThe start and end control points are located at (x: 0.42, y: 0) and (x: 1, y: 1).\n\nSee Also\nGetting easing curves\nstatic let easeOut: UnitCurve\nA bezier curve that starts out quickly, then slows down as it approaches the end.\nstatic let easeInOut: UnitCurve\nA bezier curve that starts out slowly, speeds up over the middle, then slows down again as it approaches the end.\nstatic let circularEaseIn: UnitCurve\nA curve that starts out slowly, then speeds up as it finishes.\nstatic let circularEaseOut: UnitCurve\nA circular curve that starts out quickly, then slows down as it approaches the end.\nstatic let circularEaseInOut: UnitCurve\nA circular curve that starts out slowly, speeds up over the middle, then slows down again as it approaches the end."
    },
    {
        "title": "easeOut",
        "url": "https://developer.apple.com/documentation/swiftui/unitcurve/easeout",
        "html": "Discussion\n\nThe start and end control points are located at (x: 0, y: 0) and (x: 0.58, y: 1).\n\nSee Also\nGetting easing curves\nstatic let easeIn: UnitCurve\nA bezier curve that starts out slowly, then speeds up as it finishes.\nstatic let easeInOut: UnitCurve\nA bezier curve that starts out slowly, speeds up over the middle, then slows down again as it approaches the end.\nstatic let circularEaseIn: UnitCurve\nA curve that starts out slowly, then speeds up as it finishes.\nstatic let circularEaseOut: UnitCurve\nA circular curve that starts out quickly, then slows down as it approaches the end.\nstatic let circularEaseInOut: UnitCurve\nA circular curve that starts out slowly, speeds up over the middle, then slows down again as it approaches the end."
    },
    {
        "title": "monospacedDigit()",
        "url": "https://developer.apple.com/documentation/swiftui/font/monospaceddigit()",
        "html": "Return Value\n\nA font that uses fixed-width numeric characters.\n\nDiscussion\n\nThis modifier only affects numeric characters, and leaves all other characters unchanged. If the base font doesn\u2019t support fixed-width, or monospace digits, the font remains unchanged.\n\nThe following example shows two text fields arranged in a VStack. Both text fields specify the 12-point system font, with the second adding the monospacedDigit() modifier to the font. Because the text includes the digit 1, normally a narrow character in proportional fonts, the second text field becomes wider than the first.\n\n@State private var userText = \"Effect of monospacing digits: 111,111.\"\n\n\nvar body: some View {\n    VStack {\n        TextField(\"Proportional\", text: $userText)\n            .font(.system(size: 12))\n        TextField(\"Monospaced\", text: $userText)\n            .font(.system(size: 12).monospacedDigit())\n    }\n    .padding()\n    .navigationTitle(Text(\"Font + monospacedDigit()\"))\n}\n\n\nSee Also\nStyling a font\nfunc bold() -> Font\nAdds bold styling to the font.\nfunc italic() -> Font\nAdds italics to the font.\nfunc monospaced() -> Font\nReturns a fixed-width font from the same family as the base font.\nfunc smallCaps() -> Font\nAdjusts the font to enable all small capitals.\nfunc lowercaseSmallCaps() -> Font\nAdjusts the font to enable lowercase small capitals.\nfunc uppercaseSmallCaps() -> Font\nAdjusts the font to enable uppercase small capitals.\nfunc weight(Font.Weight) -> Font\nSets the weight of the font.\nfunc width(Font.Width) -> Font\nSets the width of the font.\nstruct Width\nA width to use for fonts that have multiple widths.\nfunc leading(Font.Leading) -> Font\nAdjusts the line spacing of a font.\nenum Leading\nA line spacing adjustment that you can apply to a font."
    },
    {
        "title": "init(_:value:format:prompt:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(_:value:format:prompt:)-6ug7k",
        "html": "Parameters\ntitle\n\nThe title of the text field, describing its purpose.\n\nvalue\n\nThe underlying value to edit.\n\nformat\n\nA format style of type F to use when converting between the string the user edits and the underlying value of type F.FormatInput. If format can\u2019t perform the conversion, the text field sets binding.value to nil.\n\nprompt\n\nA Text which provides users with guidance on what to type into the text field.\n\nDiscussion\n\nUse this initializer to create a text field that binds to a bound optional value, using a ParseableFormatStyle to convert to and from this type. Changes to the bound value update the string displayed by the text field. Editing the text field updates the bound value, as long as the format style can parse the text. If the format style can\u2019t parse the input, the text field sets the bound value to nil.\n\nUse the onSubmit(of:_:) modifier to invoke an action whenever the user submits this text field.\n\nThe following example uses an optional Double as the bound currency value, and a FloatingPointFormatStyle.Currency instance to convert to and from a representation as U.S. dollars. As the user types, a View.onChange(of:_:) modifier logs the new value to the console. If the user enters an invalid currency value, like letters or emoji, the console output is Optional(nil).\n\n@State private var label = \"Currency (USD)\"\n@State private var myMoney: Double? = 300.0\nvar body: some View {\n    TextField(\n        label,\n        value: $myMoney,\n        format: .currency(code: \"USD\")\n    )\n    .onChange(of: myMoney) { newValue in\n        print (\"myMoney: \\(newValue)\")\n    }\n}\n\nSee Also\nCreating a text field with an optional\ninit<F>(LocalizedStringKey, value: Binding<F.FormatInput?>, format: F, prompt: Text?)\nCreates a text field that applies a format style to a bound optional value, with a label generated from a localized title string.\nAvailable when Label is Text.\ninit<F>(value: Binding<F.FormatInput?>, format: F, prompt: Text?, label: () -> Label)\nCreates a text field that applies a format style to a bound optional value, with a label generated from a view builder.\nAvailable when Label conforms to View."
    },
    {
        "title": "init(_:text:axis:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(_:text:axis:)-8rujz",
        "html": "Parameters\ntitle\n\nThe title of the text view, describing its purpose.\n\ntext\n\nThe text to display and edit.\n\naxis\n\nThe axis in which to scroll text when it doesn\u2019t fit in the available space.\n\nDiscussion\n\nSpecify a preferred axis in which the text field should scroll its content when it does not fit in the available space. Depending on the style of the field, this axis may not be respected.\n\nUse the onSubmit(of:_:) modifier to invoke an action whenever the user submits this text field.\n\nSee Also\nCreating a scrollable text field\ninit(LocalizedStringKey, text: Binding<String>, axis: Axis)\nCreates a text field with a preferred axis and a text label generated from a localized title string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, text: Binding<String>, prompt: Text?, axis: Axis)\nCreates a text field with a preferred axis and a text label generated from a localized title string.\nAvailable when Label is Text.\ninit<S>(S, text: Binding<String>, prompt: Text?, axis: Axis)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text.\ninit(text: Binding<String>, prompt: Text?, axis: Axis, label: () -> Label)\nCreates a text field with a preferred axis and a prompt generated from a Text.\nAvailable when Label conforms to View."
    },
    {
        "title": "smallCaps()",
        "url": "https://developer.apple.com/documentation/swiftui/font/smallcaps()",
        "html": "Discussion\n\nSee lowercaseSmallCaps() and uppercaseSmallCaps() for more details.\n\nSee Also\nStyling a font\nfunc bold() -> Font\nAdds bold styling to the font.\nfunc italic() -> Font\nAdds italics to the font.\nfunc monospaced() -> Font\nReturns a fixed-width font from the same family as the base font.\nfunc monospacedDigit() -> Font\nReturns a modified font that uses fixed-width digits, while leaving other characters proportionally spaced.\nfunc lowercaseSmallCaps() -> Font\nAdjusts the font to enable lowercase small capitals.\nfunc uppercaseSmallCaps() -> Font\nAdjusts the font to enable uppercase small capitals.\nfunc weight(Font.Weight) -> Font\nSets the weight of the font.\nfunc width(Font.Width) -> Font\nSets the width of the font.\nstruct Width\nA width to use for fonts that have multiple widths.\nfunc leading(Font.Leading) -> Font\nAdjusts the line spacing of a font.\nenum Leading\nA line spacing adjustment that you can apply to a font."
    },
    {
        "title": "stiffness",
        "url": "https://developer.apple.com/documentation/swiftui/spring/stiffness",
        "html": "Discussion\n\nIncreasing the stiffness reduces the number of oscillations and will reduce the settling duration. Decreasing the stiffness increases the the number of oscillations and will increase the settling duration.\n\nSee Also\nGetting spring characteristics\nvar bounce: Double\nHow bouncy the spring is.\nvar damping: Double\nDefines how the spring\u2019s motion should be damped due to the forces of friction.\nvar dampingRatio: Double\nThe amount of drag applied, as a fraction of the amount needed to produce critical damping.\nvar duration: TimeInterval\nThe perceptual duration, which defines the pace of the spring.\nvar mass: Double\nThe mass of the object attached to the end of the spring.\nvar response: Double\nThe stiffness of the spring, defined as an approximate duration in seconds.\nvar settlingDuration: TimeInterval\nThe estimated duration required for the spring system to be considered at rest."
    },
    {
        "title": "never",
        "url": "https://developer.apple.com/documentation/swiftui/textinputautocapitalization/never",
        "html": "See Also\nGetting autocapitalization options\nstatic var characters: TextInputAutocapitalization\nDefines an autocapitalizing behavior that will capitalize every letter.\nstatic var sentences: TextInputAutocapitalization\nDefines an autocapitalizing behavior that will capitalize the first letter in every sentence.\nstatic var words: TextInputAutocapitalization\nDefines an autocapitalizing behavior that will capitalize the first letter of every word."
    },
    {
        "title": "velocity(fromValue:toValue:initialVelocity:time:)",
        "url": "https://developer.apple.com/documentation/swiftui/spring/velocity(fromvalue:tovalue:initialvelocity:time:)",
        "html": "See Also\nGetting spring state\nfunc value<V>(target: V, initialVelocity: V, time: TimeInterval) -> V\nCalculates the value of the spring at a given time given a target amount of change.\nfunc value<V>(fromValue: V, toValue: V, initialVelocity: V, time: TimeInterval) -> V\nCalculates the value of the spring at a given time for a starting and ending value for the spring to travel.\nfunc velocity<V>(target: V, initialVelocity: V, time: TimeInterval) -> V\nCalculates the velocity of the spring at a given time given a target amount of change."
    },
    {
        "title": "init(_:text:prompt:)",
        "url": "https://developer.apple.com/documentation/swiftui/securefield/init(_:text:prompt:)-2tcxm",
        "html": "Parameters\ntitleKey\n\nThe key for the localized title of self, describing its purpose.\n\ntext\n\nThe text to display and edit\n\nprompt\n\nA Text representing the prompt of the secure field which provides users with guidance on what to type into the secure field.\n\nDiscussion\n\nUse the onSubmit(of:_:) modifier to invoke an action whenever the user submits this secure field.\n\nSee Also\nCreating a secure text field\ninit<S>(S, text: Binding<String>, prompt: Text?)\nCreates a secure field with a prompt generated from a Text.\nAvailable when Label is Text.\ninit(text: Binding<String>, prompt: Text?, label: () -> Label)\nCreates a secure field with a prompt generated from a Text.\nAvailable when Label conforms to View.\ninit(LocalizedStringKey, text: Binding<String>)\nCreates a secure field with a prompt generated from a Text.\nAvailable when Label is Text.\ninit<S>(S, text: Binding<String>)\nCreates a secure field with a prompt generated from a Text.\nAvailable when Label is Text."
    },
    {
        "title": "velocity(target:initialVelocity:time:)",
        "url": "https://developer.apple.com/documentation/swiftui/spring/velocity(target:initialvelocity:time:)",
        "html": "See Also\nGetting spring state\nfunc value<V>(target: V, initialVelocity: V, time: TimeInterval) -> V\nCalculates the value of the spring at a given time given a target amount of change.\nfunc value<V>(fromValue: V, toValue: V, initialVelocity: V, time: TimeInterval) -> V\nCalculates the value of the spring at a given time for a starting and ending value for the spring to travel.\nfunc velocity<V>(fromValue: V, toValue: V, initialVelocity: V, time: TimeInterval) -> V\nCalculates the velocity of the spring at a given time given a starting and ending value for the spring to travel."
    },
    {
        "title": "dampingRatio",
        "url": "https://developer.apple.com/documentation/swiftui/spring/dampingratio",
        "html": "Discussion\n\nWhen dampingRatio is 1, the spring will smoothly decelerate to its final position without oscillating. Damping ratios less than 1 will oscillate more and more before coming to a complete stop.\n\nSee Also\nGetting spring characteristics\nvar bounce: Double\nHow bouncy the spring is.\nvar damping: Double\nDefines how the spring\u2019s motion should be damped due to the forces of friction.\nvar duration: TimeInterval\nThe perceptual duration, which defines the pace of the spring.\nvar mass: Double\nThe mass of the object attached to the end of the spring.\nvar response: Double\nThe stiffness of the spring, defined as an approximate duration in seconds.\nvar settlingDuration: TimeInterval\nThe estimated duration required for the spring system to be considered at rest.\nvar stiffness: Double\nThe spring stiffness coefficient."
    },
    {
        "title": "words",
        "url": "https://developer.apple.com/documentation/swiftui/textinputautocapitalization/words",
        "html": "See Also\nGetting autocapitalization options\nstatic var characters: TextInputAutocapitalization\nDefines an autocapitalizing behavior that will capitalize every letter.\nstatic var sentences: TextInputAutocapitalization\nDefines an autocapitalizing behavior that will capitalize the first letter in every sentence.\nstatic var never: TextInputAutocapitalization\nDefines an autocapitalizing behavior that will not capitalize anything."
    },
    {
        "title": "contextMenu(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/contextmenu(_:)",
        "html": "Deprecated\n\nUse contextMenu(menuItems:) instead.\n\nParameters\ncontextMenu\n\nA context menu container for views that you present as menu items in a context menu.\n\nReturn Value\n\nA view that can show a context menu.\n\nDiscussion\n\nUse this method to attach a specified context menu to a view. You can make the context menu unavailable by conditionally passing nil as the value for the contextMenu.\n\nThe example below creates a ContextMenu that contains two items and passes them into the modifier. The Boolean value shouldShowMenu, which defaults to true, controls the context menu availability:\n\nprivate let menuItems = ContextMenu {\n    Button {\n        // Add this item to a list of favorites.\n    } label: {\n        Label(\"Add to Favorites\", systemImage: \"heart\")\n    }\n    Button {\n        // Open Maps and center it on this item.\n    } label: {\n        Label(\"Show in Maps\", systemImage: \"mappin\")\n    }\n}\n\n\nprivate struct ContextMenuMenuItems: View {\n    @State private var shouldShowMenu = true\n\n\n    var body: some View {\n        Text(\"Turtle Rock\")\n            .contextMenu(shouldShowMenu ? menuItems : nil)\n    }\n}\n\n\nSee Also\nAuxiliary view modifiers\nfunc navigationBarTitle(Text) -> some View\nSets the title in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle(LocalizedStringKey) -> some View\nSets the title of this view\u2019s navigation bar with a localized string.\nDeprecated\nfunc navigationBarTitle<S>(S) -> some View\nSets the title of this view\u2019s navigation bar with a string.\nDeprecated\nfunc navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View\nSets the title and display mode in the navigation bar for this view.\nDeprecated\nfunc navigationBarItems<L>(leading: L) -> some View\nSets the navigation bar items for this view.\nDeprecated\nfunc navigationBarItems<L, T>(leading: L, trailing: T) -> some View\nSets the navigation bar items for this view.\nDeprecated\nfunc navigationBarItems<T>(trailing: T) -> some View\nConfigures the navigation bar items for this view.\nDeprecated\nfunc navigationBarHidden(Bool) -> some View\nHides the navigation bar for this view.\nDeprecated\nfunc statusBar(hidden: Bool) -> some View\nSets the visibility of the status bar.\nDeprecated"
    },
    {
        "title": "inline(activation:)",
        "url": "https://developer.apple.com/documentation/swiftui/textinputdictationbehavior/inline(activation:)",
        "html": "See Also\nGetting behavior values\nstatic let automatic: TextInputDictationBehavior\nA platform-appropriate default text input dictation behavior.\nstatic let preventDictation: TextInputDictationBehavior\nPrevents the search bar from having a dictation microphone.\nBeta"
    },
    {
        "title": "background(_:alignment:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/background(_:alignment:)",
        "html": "Deprecated\n\nUse background(alignment:content:) instead.\n\nParameters\nbackground\n\nThe view to draw behind this view.\n\nalignment\n\nThe alignment with a default value of center that you use to position the background view.\n\nDiscussion\n\nUse background(_:alignment:) when you need to place one view behind another, with the background view optionally aligned with a specified edge of the frontmost view.\n\nThe example below creates two views: the Frontmost view, and the DiamondBackground view. The Frontmost view uses the DiamondBackground view for the background of the image element inside the Frontmost view\u2019s VStack.\n\nstruct DiamondBackground: View {\n    var body: some View {\n        VStack {\n            Rectangle()\n                .fill(Color.gray)\n                .frame(width: 250, height: 250, alignment: .center)\n                .rotationEffect(.degrees(45.0))\n        }\n    }\n}\n\n\nstruct Frontmost: View {\n    var body: some View {\n        VStack {\n            Image(systemName: \"folder\")\n                .font(.system(size: 128, weight: .ultraLight))\n                .background(DiamondBackground())\n        }\n    }\n}\n\n\nSee Also\nAppearance modifiers\nfunc colorScheme(ColorScheme) -> some View\nSets this view\u2019s color scheme.\nDeprecated\nfunc listRowPlatterColor(Color?) -> some View\nSets the color that the system applies to the row background when this view is placed in a list.\nDeprecated\nfunc overlay<Overlay>(Overlay, alignment: Alignment) -> some View\nLayers a secondary view in front of this view.\nDeprecated\nfunc foregroundColor(Color?) -> some View\nSets the color of the foreground elements displayed by this view.\nDeprecated"
    },
    {
        "title": "overlay(_:alignment:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/overlay(_:alignment:)",
        "html": "Deprecated\n\nUse overlay(alignment:content:) instead.\n\nParameters\noverlay\n\nThe view to layer in front of this view.\n\nalignment\n\nThe alignment for overlay in relation to this view.\n\nReturn Value\n\nA view that layers overlay in front of the view.\n\nDiscussion\n\nWhen you apply an overlay to a view, the original view continues to provide the layout characteristics for the resulting view. In the following example, the heart image is shown overlaid in front of, and aligned to the bottom of the folder image.\n\nImage(systemName: \"folder\")\n    .font(.system(size: 55, weight: .thin))\n    .overlay(Text(\"\u2764\ufe0f\"), alignment: .bottom)\n\n\nSee Also\nAppearance modifiers\nfunc colorScheme(ColorScheme) -> some View\nSets this view\u2019s color scheme.\nDeprecated\nfunc listRowPlatterColor(Color?) -> some View\nSets the color that the system applies to the row background when this view is placed in a list.\nDeprecated\nfunc background<Background>(Background, alignment: Alignment) -> some View\nLayers the given view behind this view.\nDeprecated\nfunc foregroundColor(Color?) -> some View\nSets the color of the foreground elements displayed by this view.\nDeprecated"
    },
    {
        "title": "TextAlignment.trailing",
        "url": "https://developer.apple.com/documentation/swiftui/textalignment/trailing",
        "html": "See Also\nGetting text alignments\ncase center\ncase leading"
    },
    {
        "title": "TextAlignment.leading",
        "url": "https://developer.apple.com/documentation/swiftui/textalignment/leading",
        "html": "See Also\nGetting text alignments\ncase center\ncase trailing"
    },
    {
        "title": "TextAlignment.center",
        "url": "https://developer.apple.com/documentation/swiftui/textalignment/center",
        "html": "See Also\nGetting text alignments\ncase leading\ncase trailing"
    },
    {
        "title": "onDelete(perform:)",
        "url": "https://developer.apple.com/documentation/swiftui/dynamicviewcontent/ondelete(perform:)",
        "html": "Parameters\naction\n\nThe action that you want SwiftUI to perform when elements in the view are deleted. SwiftUI passes a set of indices to the closure that\u2019s relative to the dynamic view\u2019s underlying collection of data.\n\nReturn Value\n\nA view that calls action when elements are deleted from the original view.\n\nSee Also\nResponding to updates\nfunc onInsert(of: [UTType], perform: (Int, [NSItemProvider]) -> Void) -> some DynamicViewContent\nSets the insert action for the dynamic view.\nfunc onMove(perform: Optional<(IndexSet, Int) -> Void>) -> some DynamicViewContent\nSets the move action for the dynamic view.\nfunc dropDestination<T>(for: T.Type, action: ([T], Int) -> Void) -> some DynamicViewContent\nSets the insert action for the dynamic view."
    },
    {
        "title": "leading",
        "url": "https://developer.apple.com/documentation/swiftui/horizontalalignment/leading",
        "html": "Discussion\n\nUse this guide to align the leading edges of views. For a device that uses a left-to-right language, the leading edge is on the left:\n\nThe following code generates the image above using a VStack:\n\nstruct HorizontalAlignmentLeading: View {\n    var body: some View {\n        VStack(alignment: .leading, spacing: 0) {\n            Color.red.frame(width: 1)\n            Text(\"Leading\").font(.title).border(.gray)\n            Color.red.frame(width: 1)\n        }\n    }\n}\n\nSee Also\nGetting guides\nstatic let center: HorizontalAlignment\nA guide that marks the horizontal center of the view.\nstatic let trailing: HorizontalAlignment\nA guide that marks the trailing edge of the view.\nstatic let listRowSeparatorLeading: HorizontalAlignment\nA guide marking the leading edge of a List row separator.\nstatic let listRowSeparatorTrailing: HorizontalAlignment\nA guide marking the trailing edge of a List row separator."
    },
    {
        "title": "never",
        "url": "https://developer.apple.com/documentation/swiftui/scrolldismisseskeyboardmode/never",
        "html": "See Also\nGetting modes\nstatic var automatic: ScrollDismissesKeyboardMode\nDetermine the mode automatically based on the surrounding context.\nstatic var immediately: ScrollDismissesKeyboardMode\nDismiss the keyboard as soon as scrolling starts.\nstatic var interactively: ScrollDismissesKeyboardMode\nEnable people to interactively dismiss the keyboard as part of the scroll operation."
    },
    {
        "title": "init(alignment:spacing:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/hstack/init(alignment:spacing:content:)",
        "html": "Parameters\nalignment\n\nThe guide for aligning the subviews in this stack. This guide has the same vertical screen coordinate for every subview.\n\nspacing\n\nThe distance between adjacent subviews, or nil if you want the stack to choose a default distance for each pair of subviews.\n\ncontent\n\nA view builder that creates the content of this stack."
    },
    {
        "title": "init(menuItems:)",
        "url": "https://developer.apple.com/documentation/swiftui/contextmenu/init(menuitems:)",
        "html": "Deprecated\n\nUse contextMenu(menuItems:) instead."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/menuorder/automatic",
        "html": "Discussion\n\nOn iOS, this order resolves to fixed for menus presented within scrollable content. Pickers that use the menu style also default to fixed order. In all other cases, menus default to priority order.\n\nOn macOS, tvOS and watchOS, the automatic order always resolves to fixed order.\n\nSee Also\nGetting menu orders\nstatic let fixed: MenuOrder\nOrder items from top to bottom.\nstatic let priority: MenuOrder\nKeep the first items closest to user\u2019s interaction point."
    },
    {
        "title": "fixed",
        "url": "https://developer.apple.com/documentation/swiftui/menuorder/fixed",
        "html": "See Also\nGetting menu orders\nstatic let automatic: MenuOrder\nThe ordering of the menu chosen by the system for the current context.\nstatic let priority: MenuOrder\nKeep the first items closest to user\u2019s interaction point."
    },
    {
        "title": "priority",
        "url": "https://developer.apple.com/documentation/swiftui/menuorder/priority",
        "html": "See Also\nGetting menu orders\nstatic let automatic: MenuOrder\nThe ordering of the menu chosen by the system for the current context.\nstatic let fixed: MenuOrder\nOrder items from top to bottom."
    },
    {
        "title": "Edge.Set",
        "url": "https://developer.apple.com/documentation/swiftui/edge/set",
        "html": "Topics\nGetting edge sets\nstatic let all: Edge.Set\nstatic let top: Edge.Set\nstatic let bottom: Edge.Set\nstatic let leading: Edge.Set\nstatic let trailing: Edge.Set\nstatic let horizontal: Edge.Set\nstatic let vertical: Edge.Set\nCreating an edge set\ninit(Edge)\nCreates set of edges containing only the specified edge.\nRelationships\nConforms To\nEquatable\nExpressibleByArrayLiteral\nOptionSet\nRawRepresentable\nSendable\nSetAlgebra"
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/commandmenu/init(_:content:)-19al4",
        "html": "See Also\nCreating a command menu\ninit(Text, content: () -> Content)\nCreates a new menu for a collection of app-specific commands, inserted in the standard location for app menus (after the View menu, in order with other menus declared without an explicit location).\ninit<S>(S, content: () -> Content)\nCreates a new menu for a collection of app-specific commands, inserted in the standard location for app menus (after the View menu, in order with other menus declared without an explicit location)."
    },
    {
        "title": "identity",
        "url": "https://developer.apple.com/documentation/swiftui/contenttransition/identity",
        "html": "Discussion\n\nYou can pass this value to a contentTransition(_:) modifier to selectively disable animations that would otherwise be applied by a withAnimation(_:_:) block.\n\nSee Also\nGetting content transitions\nstatic let interpolate: ContentTransition\nA content transition that indicates the views attempt to interpolate their contents during transitions, where appropriate.\nstatic func numericText(countsDown: Bool) -> ContentTransition\nCreates a content transition intended to be used with Text views displaying numeric text. In certain environments changes to the text will enable a nonstandard transition tailored to numeric characters that count up or down.\nstatic func numericText(value: Double) -> ContentTransition\nCreates a content transition intended to be used with Text views displaying numbers.\nstatic let opacity: ContentTransition\nA content transition that indicates content fades from transparent to opaque on insertion, and from opaque to transparent on removal.\nstatic var symbolEffect: ContentTransition\nA content transition that applies the default symbol effect transition to symbol images within the inserted or removed view hierarchy. Other views are unaffected by this transition.\nstatic func symbolEffect<T>(T, options: SymbolEffectOptions) -> ContentTransition\nCreates a content transition that applies the symbol Replace animation to symbol images that it is applied to."
    },
    {
        "title": "all",
        "url": "https://developer.apple.com/documentation/swiftui/edge/set/all",
        "html": "See Also\nGetting edge sets\nstatic let top: Edge.Set\nstatic let bottom: Edge.Set\nstatic let leading: Edge.Set\nstatic let trailing: Edge.Set\nstatic let horizontal: Edge.Set\nstatic let vertical: Edge.Set"
    },
    {
        "title": "tabView",
        "url": "https://developer.apple.com/documentation/swiftui/containerbackgroundplacement/tabview",
        "html": "See Also\nGetting placements\nstatic let navigation: ContainerBackgroundPlacement\nA background placement inside a NavigationStack or NavigationSplitView\nstatic let widget: ContainerBackgroundPlacement\nThe container background placement for a widget."
    },
    {
        "title": "subscriptionStore",
        "url": "https://developer.apple.com/documentation/swiftui/containerbackgroundplacement/subscriptionstore",
        "html": "See Also\nGetting StoreKit placements\nstatic var subscriptionStoreFullHeight: ContainerBackgroundPlacement\nA background placement that spans the full height of a SubscriptionStoreView.\nstatic var subscriptionStoreHeader: ContainerBackgroundPlacement\nA background placement inside the marketing content of a SubscriptionStoreView"
    },
    {
        "title": "numericText(countsDown:)",
        "url": "https://developer.apple.com/documentation/swiftui/contenttransition/numerictext(countsdown:)",
        "html": "Parameters\ncountsDown\n\ntrue if the numbers represented by the text are counting downwards.\n\nReturn Value\n\na new content transition.\n\nSee Also\nGetting content transitions\nstatic let identity: ContentTransition\nThe identity content transition, which indicates that content changes shouldn\u2019t animate.\nstatic let interpolate: ContentTransition\nA content transition that indicates the views attempt to interpolate their contents during transitions, where appropriate.\nstatic func numericText(value: Double) -> ContentTransition\nCreates a content transition intended to be used with Text views displaying numbers.\nstatic let opacity: ContentTransition\nA content transition that indicates content fades from transparent to opaque on insertion, and from opaque to transparent on removal.\nstatic var symbolEffect: ContentTransition\nA content transition that applies the default symbol effect transition to symbol images within the inserted or removed view hierarchy. Other views are unaffected by this transition.\nstatic func symbolEffect<T>(T, options: SymbolEffectOptions) -> ContentTransition\nCreates a content transition that applies the symbol Replace animation to symbol images that it is applied to."
    },
    {
        "title": "Material",
        "url": "https://developer.apple.com/documentation/swiftui/material",
        "html": "Overview\n\nYou can apply a blur effect to a view that appears behind another view by adding a material with the background(_:ignoresSafeAreaEdges:) modifier:\n\nZStack {\n    Color.teal\n    Label(\"Flag\", systemImage: \"flag.fill\")\n        .padding()\n        .background(.regularMaterial)\n}\n\n\nIn the example above, the ZStack layers a Label on top of the color teal. The background modifier inserts the regular material below the label, blurring the part of the background that the label \u2014 including its padding \u2014 covers:\n\nA material isn\u2019t a view, but adding a material is like inserting a translucent layer between the modified view and its background:\n\nThe blurring effect provided by the material isn\u2019t simple opacity. Instead, it uses a platform-specific blending that produces an effect that resembles heavily frosted glass. You can see this more easily with a complex background, like an image:\n\nZStack {\n    Image(\"chili_peppers\")\n        .resizable()\n        .aspectRatio(contentMode: .fit)\n    Label(\"Flag\", systemImage: \"flag.fill\")\n        .padding()\n        .background(.regularMaterial)\n}\n\n\nFor physical materials, the degree to which the background colors pass through depends on the thickness. The effect also varies with light and dark appearance:\n\nIf you need a material to have a particular shape, you can use the background(_:in:fillStyle:) modifier. For example, you can create a material with rounded corners:\n\nZStack {\n    Color.teal\n    Label(\"Flag\", systemImage: \"flag.fill\")\n        .padding()\n        .background(.regularMaterial, in: RoundedRectangle(cornerRadius: 8))\n}\n\n\nWhen you add a material, foreground elements exhibit vibrancy, a context-specific blend of the foreground and background colors that improves contrast. However using foregroundStyle(_:) to set a custom foreground style \u2014 excluding the hierarchical styles, like secondary \u2014 disables vibrancy.\n\nNote\n\nA material blurs a background that\u2019s part of your app, but not what appears behind your app on the screen. For example, the content on the Home Screen doesn\u2019t affect the appearance of a widget.\n\nTopics\nGetting material types\nstatic let ultraThin: Material\nA mostly translucent material.\nstatic let thin: Material\nA material that\u2019s more translucent than opaque.\nstatic let regular: Material\nA material that\u2019s somewhat translucent.\nstatic let thick: Material\nA material that\u2019s more opaque than translucent.\nstatic let ultraThick: Material\nA mostly opaque material.\nstatic let bar: Material\nA material matching the style of system toolbars.\nRelationships\nConforms To\nSendable\nShapeStyle\nSee Also\nSupporting types\nstruct AngularGradient\nAn angular gradient.\nstruct EllipticalGradient\nA radial gradient that draws an ellipse.\nstruct LinearGradient\nA linear gradient.\nstruct RadialGradient\nA radial gradient.\nstruct ImagePaint\nA shape style that fills a shape by repeating a region of an image.\nstruct HierarchicalShapeStyle\nA shape style that maps to one of the numbered content styles.\nstruct HierarchicalShapeStyleModifier\nStyles that you can apply to hierarchical shapes.\nstruct ForegroundStyle\nThe foreground style in the current context.\nstruct BackgroundStyle\nThe background style in the current context.\nstruct SelectionShapeStyle\nA style used to visually indicate selection following platform conventional colors and behaviors.\nstruct SeparatorShapeStyle\nA style appropriate for foreground separator or border lines.\nstruct TintShapeStyle\nA style that reflects the current tint color.\nstruct FillShapeStyle\nA shape style that displays one of the overlay fills.\nstruct LinkShapeStyle\nA style appropriate for links.\nstruct PlaceholderTextShapeStyle\nA style appropriate for placeholder text.\nstruct WindowBackgroundShapeStyle\nA style appropriate for elements that should match the background of their containing window."
    },
    {
        "title": "numericText(value:)",
        "url": "https://developer.apple.com/documentation/swiftui/contenttransition/numerictext(value:)",
        "html": "Parameters\nvalue\n\nthe value represented by the Text view being animated. The difference between the old and new values when the text changes will be used to determine the animation direction.\n\nReturn Value\n\na new content transition.\n\nDiscussion\n\nThe example below creates a text view displaying a particular value, assigning the same value to the associated transition:\n\nText(\"\\(value)\")\n    .contentTransition(.numericText(value: value))\n\nSee Also\nGetting content transitions\nstatic let identity: ContentTransition\nThe identity content transition, which indicates that content changes shouldn\u2019t animate.\nstatic let interpolate: ContentTransition\nA content transition that indicates the views attempt to interpolate their contents during transitions, where appropriate.\nstatic func numericText(countsDown: Bool) -> ContentTransition\nCreates a content transition intended to be used with Text views displaying numeric text. In certain environments changes to the text will enable a nonstandard transition tailored to numeric characters that count up or down.\nstatic let opacity: ContentTransition\nA content transition that indicates content fades from transparent to opaque on insertion, and from opaque to transparent on removal.\nstatic var symbolEffect: ContentTransition\nA content transition that applies the default symbol effect transition to symbol images within the inserted or removed view hierarchy. Other views are unaffected by this transition.\nstatic func symbolEffect<T>(T, options: SymbolEffectOptions) -> ContentTransition\nCreates a content transition that applies the symbol Replace animation to symbol images that it is applied to."
    },
    {
        "title": "teal",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/teal",
        "html": "See Also\nSystem colors\nstatic var black: Color\nA black color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var blue: Color\nA context-dependent blue color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var brown: Color\nA context-dependent brown color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var clear: Color\nA clear color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var cyan: Color\nA context-dependent cyan color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var gray: Color\nA context-dependent gray color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var green: Color\nA context-dependent green color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var indigo: Color\nA context-dependent indigo color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var mint: Color\nA context-dependent mint color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var orange: Color\nA context-dependent orange color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var pink: Color\nA context-dependent pink color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var purple: Color\nA context-dependent purple color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var red: Color\nA context-dependent red color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var white: Color\nA white color suitable for use in UI elements.\nAvailable when Self is Color.\nstatic var yellow: Color\nA context-dependent yellow color suitable for use in UI elements.\nAvailable when Self is Color."
    },
    {
        "title": "init(_:image:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/menu/init(_:image:content:)-qtm2",
        "html": "Parameters\ntitleKey\n\nThe key for the link\u2019s localized title, which describes the contents of the menu.\n\nimage\n\nThe name of the image resource to lookup.\n\ncontent\n\nA group of menu items.\n\nSee Also\nCreating a menu with an image label\ninit<S>(S, image: ImageResource, content: () -> Content)\nCreates a menu that generates its label from a string and image resource.\nAvailable when Label is Label<Text, Image> and Content conforms to View.\ninit(LocalizedStringKey, image: ImageResource, content: () -> Content, primaryAction: () -> Void)\nCreates a menu with a custom primary action that generates its label from a localized string key.\nAvailable when Label is Label<Text, Image> and Content conforms to View.\ninit<S>(S, systemImage: String, content: () -> Content)\nCreates a menu that generates its label from a string and system image.\nAvailable when Label is Label<Text, Image> and Content conforms to View.\ninit(LocalizedStringKey, systemImage: String, content: () -> Content)\nCreates a menu that generates its label from a localized string key and system image.\nAvailable when Label is Label<Text, Image> and Content conforms to View.\ninit(LocalizedStringKey, systemImage: String, content: () -> Content, primaryAction: () -> Void)\nCreates a menu with a custom primary action that generates its label from a localized string key and system image.\nAvailable when Label is Label<Text, Image> and Content conforms to View."
    },
    {
        "title": "init(_:systemImage:content:primaryAction:)",
        "url": "https://developer.apple.com/documentation/swiftui/menu/init(_:systemimage:content:primaryaction:)",
        "html": "Parameters\ntitleKey\n\nThe key for the link\u2019s localized title, which describes the contents of the menu.\n\nsystemImage\n\nThe name of the image resource to lookup.\n\nprimaryAction\n\nThe action to perform on primary interaction with the menu.\n\ncontent\n\nA group of menu items.\n\nSee Also\nCreating a menu with an image label\ninit<S>(S, image: ImageResource, content: () -> Content)\nCreates a menu that generates its label from a string and image resource.\nAvailable when Label is Label<Text, Image> and Content conforms to View.\ninit(LocalizedStringKey, image: ImageResource, content: () -> Content)\nCreates a menu that generates its label from a localized string key and image resource.\nAvailable when Label is Label<Text, Image> and Content conforms to View.\ninit(LocalizedStringKey, image: ImageResource, content: () -> Content, primaryAction: () -> Void)\nCreates a menu with a custom primary action that generates its label from a localized string key.\nAvailable when Label is Label<Text, Image> and Content conforms to View.\ninit<S>(S, systemImage: String, content: () -> Content)\nCreates a menu that generates its label from a string and system image.\nAvailable when Label is Label<Text, Image> and Content conforms to View.\ninit(LocalizedStringKey, systemImage: String, content: () -> Content)\nCreates a menu that generates its label from a localized string key and system image.\nAvailable when Label is Label<Text, Image> and Content conforms to View."
    },
    {
        "title": "system(size:weight:design:)",
        "url": "https://developer.apple.com/documentation/swiftui/font/system(size:weight:design:)-73a88",
        "html": "Deprecated\n\nUse system(size:weight:design:) instead.\n\nDiscussion\n\nUse this function to create a system font by specifying the size and weight, and a type design together. The following styles the system font as 17 point, semibold text:\n\nText(\"Hello\").font(.system(size: 17, weight: .semibold))\n\n\nWhile the following styles the text as 17 point bold, and applies a serif Font.Design to the system font:\n\nText(\"Hello\").font(.system(size: 17, weight: .bold, design: .serif))\n\n\nIf you want to use the default Font.Weight (regular), you don\u2019t need to specify the weight in the method. The following example styles the text as 17 point regular, and uses a Font.Design.rounded system font:\n\nText(\"Hello\").font(.system(size: 17, design: .rounded))\n\nSee Also\nDeprecated symbols\nstatic func system(Font.TextStyle, design: Font.Design) -> Font\nGets a system font with the given text style and design.\nDeprecated"
    },
    {
        "title": "HierarchicalShapeStyle",
        "url": "https://developer.apple.com/documentation/swiftui/hierarchicalshapestyle",
        "html": "Topics\nGetting hierarchical shape styles\nstatic let primary: HierarchicalShapeStyle\nA shape style that maps to the first level of the current content style.\nstatic let secondary: HierarchicalShapeStyle\nA shape style that maps to the second level of the current content style.\nstatic let tertiary: HierarchicalShapeStyle\nA shape style that maps to the third level of the current content style.\nstatic let quaternary: HierarchicalShapeStyle\nA shape style that maps to the fourth level of the current content style.\nType Properties\nstatic let quinary: HierarchicalShapeStyle\nA shape style that maps to the fifth level of the current content style.\nRelationships\nConforms To\nSendable\nShapeStyle\nSee Also\nSupporting types\nstruct AngularGradient\nAn angular gradient.\nstruct EllipticalGradient\nA radial gradient that draws an ellipse.\nstruct LinearGradient\nA linear gradient.\nstruct RadialGradient\nA radial gradient.\nstruct Material\nA background material type.\nstruct ImagePaint\nA shape style that fills a shape by repeating a region of an image.\nstruct HierarchicalShapeStyleModifier\nStyles that you can apply to hierarchical shapes.\nstruct ForegroundStyle\nThe foreground style in the current context.\nstruct BackgroundStyle\nThe background style in the current context.\nstruct SelectionShapeStyle\nA style used to visually indicate selection following platform conventional colors and behaviors.\nstruct SeparatorShapeStyle\nA style appropriate for foreground separator or border lines.\nstruct TintShapeStyle\nA style that reflects the current tint color.\nstruct FillShapeStyle\nA shape style that displays one of the overlay fills.\nstruct LinkShapeStyle\nA style appropriate for links.\nstruct PlaceholderTextShapeStyle\nA style appropriate for placeholder text.\nstruct WindowBackgroundShapeStyle\nA style appropriate for elements that should match the background of their containing window."
    },
    {
        "title": "regularMaterial",
        "url": "https://developer.apple.com/documentation/swiftui/shapestyle/regularmaterial",
        "html": "See Also\nMaterials\nstatic var ultraThinMaterial: Material\nA mostly translucent material.\nAvailable when Self is Material.\nstatic var thinMaterial: Material\nA material that\u2019s more translucent than opaque.\nAvailable when Self is Material.\nstatic var thickMaterial: Material\nA material that\u2019s more opaque than translucent.\nAvailable when Self is Material.\nstatic var ultraThickMaterial: Material\nA mostly opaque material.\nAvailable when Self is Material.\nstatic var bar: Material\nA material matching the style of system toolbars.\nAvailable when Self is Material."
    },
    {
        "title": "system(_:design:)",
        "url": "https://developer.apple.com/documentation/swiftui/font/system(_:design:)",
        "html": "Deprecated\n\nUse system(_:design:weight:) instead.\n\nSee Also\nDeprecated symbols\nstatic func system(size: CGFloat, weight: Font.Weight, design: Font.Design) -> Font\nSpecifies a system font to use, along with the style, weight, and any design parameters you want applied to the text.\nDeprecated"
    },
    {
        "title": "extraLargeTitle2",
        "url": "https://developer.apple.com/documentation/swiftui/font/extralargetitle2",
        "html": "See Also\nGetting standard fonts\nstatic let extraLargeTitle: Font\nCreate a font with the extra large title text style.\nBeta\nstatic let largeTitle: Font\nA font with the large title text style.\nstatic let title: Font\nA font with the title text style.\nstatic let title2: Font\nCreate a font for second level hierarchical headings.\nstatic let title3: Font\nCreate a font for third level hierarchical headings.\nstatic let headline: Font\nA font with the headline text style.\nstatic let subheadline: Font\nA font with the subheadline text style.\nstatic let body: Font\nA font with the body text style.\nstatic let callout: Font\nA font with the callout text style.\nstatic let caption: Font\nA font with the caption text style.\nstatic let caption2: Font\nCreate a font with the alternate caption text style.\nstatic let footnote: Font\nA font with the footnote text style."
    },
    {
        "title": "contextMenu(menuItems:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablerowcontent/contextmenu(menuitems:)",
        "html": "Parameters\nmenuItems\n\nA closure that produces the menu\u2019s contents. You can deactivate the context menu by returning nothing from the closure.\n\nReturn Value\n\nA row that can display a context menu.\n\nDiscussion\n\nUse this modifier to add a context menu to a table row. Compose the menu by returning controls like Button, Toggle, and Picker from the menuItems closure. You can also use Menu to define submenus, or Section to group items.\n\nThe following example adds a context menu to each row in a table that people can use to send an email to the person represented by that row:\n\nTable(of: Person.self) {\n    TableColumn(\"Given Name\", value: \\.givenName)\n    TableColumn(\"Family Name\", value: \\.familyName)\n} rows: {\n    ForEach(people) { person in\n        TableRow(person)\n            .contextMenu {\n                Button(\"Send Email...\") { }\n            }\n    }\n}\n\n\nIf you want to display a preview beside the context menu, use contextMenu(menuItems:preview:). If you want to display a context menu that\u2019s based on the current selection, use contextMenu(forSelectionType:menu:primaryAction:). To add context menus to other kinds of views, use contextMenu(menuItems:).\n\nSee Also\nAdding a context menu to a row\nfunc contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> ModifiedContent<Self, _ContextMenuPreviewTableRowModifier<M, P>>\nAdds a context menu with a preview to a table row."
    },
    {
        "title": "leading",
        "url": "https://developer.apple.com/documentation/swiftui/alignment/leading",
        "html": "Discussion\n\nThis alignment combines the leading horizontal guide and the center vertical guide:\n\nSee Also\nGetting middle guides\nstatic let center: Alignment\nA guide that marks the center of the view.\nstatic let trailing: Alignment\nA guide that marks the trailing edge of the view."
    },
    {
        "title": "init(_:image:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/menu/init(_:image:content:)-5odut",
        "html": "Parameters\ntitle\n\nA string that describes the contents of the menu.\n\nimage\n\nThe name of the image resource to lookup.\n\ncontent\n\nA group of menu items.\n\nDiscussion\n\nTo create the label with a localized string key, use init(_:content:) instead.\n\nSee Also\nCreating a menu with an image label\ninit(LocalizedStringKey, image: ImageResource, content: () -> Content)\nCreates a menu that generates its label from a localized string key and image resource.\nAvailable when Label is Label<Text, Image> and Content conforms to View.\ninit(LocalizedStringKey, image: ImageResource, content: () -> Content, primaryAction: () -> Void)\nCreates a menu with a custom primary action that generates its label from a localized string key.\nAvailable when Label is Label<Text, Image> and Content conforms to View.\ninit<S>(S, systemImage: String, content: () -> Content)\nCreates a menu that generates its label from a string and system image.\nAvailable when Label is Label<Text, Image> and Content conforms to View.\ninit(LocalizedStringKey, systemImage: String, content: () -> Content)\nCreates a menu that generates its label from a localized string key and system image.\nAvailable when Label is Label<Text, Image> and Content conforms to View.\ninit(LocalizedStringKey, systemImage: String, content: () -> Content, primaryAction: () -> Void)\nCreates a menu with a custom primary action that generates its label from a localized string key and system image.\nAvailable when Label is Label<Text, Image> and Content conforms to View."
    },
    {
        "title": "init(in:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/viewthatfits/init(in:content:)",
        "html": "Parameters\naxes\n\nA set of axes to constrain children to. The set may contain Axis.horizontal, Axis.vertical, or both of these. ViewThatFits chooses the first child whose size fits within the proposed size on these axes. If axes is an empty set, ViewThatFits uses the first child view. By default, ViewThatFits uses both axes.\n\ncontent\n\nA view builder that provides the child views for this container, in order of preference. The builder chooses the first child view that fits within the proposed width, height, or both, as defined by axes."
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/menu/init(_:content:)-7tkrw",
        "html": "Parameters\ntitle\n\nA string that describes the contents of the menu.\n\ncontent\n\nA group of menu items.\n\nDiscussion\n\nTo create the label with a localized string key, use init(_:content:) instead.\n\nSee Also\nCreating a menu from content\ninit(content: () -> Content, label: () -> Label)\nCreates a menu with a custom label.\nAvailable when Label conforms to View and Content conforms to View.\ninit(LocalizedStringKey, content: () -> Content)\nCreates a menu that generates its label from a localized string key.\nAvailable when Label conforms to View and Content conforms to View."
    },
    {
        "title": "symbolEffect",
        "url": "https://developer.apple.com/documentation/swiftui/contenttransition/symboleffect",
        "html": "See Also\nGetting content transitions\nstatic let identity: ContentTransition\nThe identity content transition, which indicates that content changes shouldn\u2019t animate.\nstatic let interpolate: ContentTransition\nA content transition that indicates the views attempt to interpolate their contents during transitions, where appropriate.\nstatic func numericText(countsDown: Bool) -> ContentTransition\nCreates a content transition intended to be used with Text views displaying numeric text. In certain environments changes to the text will enable a nonstandard transition tailored to numeric characters that count up or down.\nstatic func numericText(value: Double) -> ContentTransition\nCreates a content transition intended to be used with Text views displaying numbers.\nstatic let opacity: ContentTransition\nA content transition that indicates content fades from transparent to opaque on insertion, and from opaque to transparent on removal.\nstatic func symbolEffect<T>(T, options: SymbolEffectOptions) -> ContentTransition\nCreates a content transition that applies the symbol Replace animation to symbol images that it is applied to."
    },
    {
        "title": "init(mass:stiffness:damping:allowOverDamping:)",
        "url": "https://developer.apple.com/documentation/swiftui/spring/init(mass:stiffness:damping:allowoverdamping:)",
        "html": "Parameters\nmass\n\nSpecifies that property of the object attached to the end of the spring.\n\nstiffness\n\nThe corresponding spring coefficient.\n\ndamping\n\nDefines how the spring\u2019s motion should be damped due to the forces of friction.\n\nallowOverdamping\n\nA value of true specifies that over-damping should be allowed when appropriate based on the other inputs, and a value of false specifies that such cases should instead be treated as critically damped.\n\nSee Also\nCreating a spring\ninit(duration: TimeInterval, bounce: Double)\nCreates a spring with the specified duration and bounce.\ninit(response: Double, dampingRatio: Double)\nCreates a spring with the specified response and damping ratio.\ninit(settlingDuration: TimeInterval, dampingRatio: Double, epsilon: Double)\nCreates a spring with the specified duration and damping ratio."
    },
    {
        "title": "init(response:dampingRatio:)",
        "url": "https://developer.apple.com/documentation/swiftui/spring/init(response:dampingratio:)",
        "html": "Parameters\nresponse\n\nDefines the stiffness of the spring as an approximate duration in seconds.\n\ndampingRatio\n\nDefines the amount of drag applied as a fraction the amount needed to produce critical damping.\n\nSee Also\nCreating a spring\ninit(duration: TimeInterval, bounce: Double)\nCreates a spring with the specified duration and bounce.\ninit(mass: Double, stiffness: Double, damping: Double, allowOverDamping: Bool)\nCreates a spring with the specified mass, stiffness, and damping.\ninit(settlingDuration: TimeInterval, dampingRatio: Double, epsilon: Double)\nCreates a spring with the specified duration and damping ratio."
    },
    {
        "title": "init(settlingDuration:dampingRatio:epsilon:)",
        "url": "https://developer.apple.com/documentation/swiftui/spring/init(settlingduration:dampingratio:epsilon:)",
        "html": "Parameters\nsettlingDuration\n\nThe approximate time it will take for the spring to come to rest.\n\ndampingRatio\n\nThe amount of drag applied as a fraction of the amount needed to produce critical damping.\n\nepsilon\n\nThe threshhold for how small all subsequent values need to be before the spring is considered to have settled.\n\nSee Also\nCreating a spring\ninit(duration: TimeInterval, bounce: Double)\nCreates a spring with the specified duration and bounce.\ninit(mass: Double, stiffness: Double, damping: Double, allowOverDamping: Bool)\nCreates a spring with the specified mass, stiffness, and damping.\ninit(response: Double, dampingRatio: Double)\nCreates a spring with the specified response and damping ratio."
    },
    {
        "title": "bouncy",
        "url": "https://developer.apple.com/documentation/swiftui/spring/bouncy",
        "html": "See Also\nGetting built-in springs\nstatic func bouncy(duration: TimeInterval, extraBounce: Double) -> Spring\nA spring with a predefined duration and higher amount of bounce that can be tuned.\nstatic var smooth: Spring\nA smooth spring with a predefined duration and no bounce.\nstatic func smooth(duration: TimeInterval, extraBounce: Double) -> Spring\nA smooth spring with a predefined duration and no bounce that can be tuned.\nstatic var snappy: Spring\nA spring with a predefined duration and small amount of bounce that feels more snappy.\nstatic func snappy(duration: TimeInterval, extraBounce: Double) -> Spring\nA spring with a predefined duration and small amount of bounce that feels more snappy and can be tuned."
    },
    {
        "title": "smooth",
        "url": "https://developer.apple.com/documentation/swiftui/spring/smooth",
        "html": "See Also\nGetting built-in springs\nstatic var bouncy: Spring\nA spring with a predefined duration and higher amount of bounce.\nstatic func bouncy(duration: TimeInterval, extraBounce: Double) -> Spring\nA spring with a predefined duration and higher amount of bounce that can be tuned.\nstatic func smooth(duration: TimeInterval, extraBounce: Double) -> Spring\nA smooth spring with a predefined duration and no bounce that can be tuned.\nstatic var snappy: Spring\nA spring with a predefined duration and small amount of bounce that feels more snappy.\nstatic func snappy(duration: TimeInterval, extraBounce: Double) -> Spring\nA spring with a predefined duration and small amount of bounce that feels more snappy and can be tuned."
    },
    {
        "title": "force(target:position:velocity:)",
        "url": "https://developer.apple.com/documentation/swiftui/spring/force(target:position:velocity:)",
        "html": "Discussion\n\nThis value is in units of the vector type per second squared.\n\nSee Also\nCalculating forces and durations\nfunc force<V>(fromValue: V, toValue: V, position: V, velocity: V) -> V\nCalculates the force upon the spring given a current position, velocity, and divisor from the starting and end values for the spring to travel.\nfunc settlingDuration<V>(target: V, initialVelocity: V, epsilon: Double) -> TimeInterval\nThe estimated duration required for the spring system to be considered at rest.\nfunc settlingDuration<V>(fromValue: V, toValue: V, initialVelocity: V, epsilon: Double) -> TimeInterval\nThe estimated duration required for the spring system to be considered at rest."
    },
    {
        "title": "circularEaseIn",
        "url": "https://developer.apple.com/documentation/swiftui/unitcurve/circulareasein",
        "html": "Discussion\n\nThe shape of the curve is equal to the fourth (bottom right) quadrant of a unit circle.\n\nSee Also\nGetting easing curves\nstatic let easeIn: UnitCurve\nA bezier curve that starts out slowly, then speeds up as it finishes.\nstatic let easeOut: UnitCurve\nA bezier curve that starts out quickly, then slows down as it approaches the end.\nstatic let easeInOut: UnitCurve\nA bezier curve that starts out slowly, speeds up over the middle, then slows down again as it approaches the end.\nstatic let circularEaseOut: UnitCurve\nA circular curve that starts out quickly, then slows down as it approaches the end.\nstatic let circularEaseInOut: UnitCurve\nA circular curve that starts out slowly, speeds up over the middle, then slows down again as it approaches the end."
    },
    {
        "title": "easeInOut",
        "url": "https://developer.apple.com/documentation/swiftui/unitcurve/easeinout",
        "html": "Discussion\n\nThe start and end control points are located at (x: 0.42, y: 0) and (x: 0.58, y: 1).\n\nSee Also\nGetting easing curves\nstatic let easeIn: UnitCurve\nA bezier curve that starts out slowly, then speeds up as it finishes.\nstatic let easeOut: UnitCurve\nA bezier curve that starts out quickly, then slows down as it approaches the end.\nstatic let circularEaseIn: UnitCurve\nA curve that starts out slowly, then speeds up as it finishes.\nstatic let circularEaseOut: UnitCurve\nA circular curve that starts out quickly, then slows down as it approaches the end.\nstatic let circularEaseInOut: UnitCurve\nA circular curve that starts out slowly, speeds up over the middle, then slows down again as it approaches the end."
    },
    {
        "title": "circularEaseOut",
        "url": "https://developer.apple.com/documentation/swiftui/unitcurve/circulareaseout",
        "html": "Discussion\n\nThe shape of the curve is equal to the second (top left) quadrant of a unit circle.\n\nSee Also\nGetting easing curves\nstatic let easeIn: UnitCurve\nA bezier curve that starts out slowly, then speeds up as it finishes.\nstatic let easeOut: UnitCurve\nA bezier curve that starts out quickly, then slows down as it approaches the end.\nstatic let easeInOut: UnitCurve\nA bezier curve that starts out slowly, speeds up over the middle, then slows down again as it approaches the end.\nstatic let circularEaseIn: UnitCurve\nA curve that starts out slowly, then speeds up as it finishes.\nstatic let circularEaseInOut: UnitCurve\nA circular curve that starts out slowly, speeds up over the middle, then slows down again as it approaches the end."
    },
    {
        "title": "bezier(startControlPoint:endControlPoint:)",
        "url": "https://developer.apple.com/documentation/swiftui/unitcurve/bezier(startcontrolpoint:endcontrolpoint:)",
        "html": "Parameters\nstartControlPoint\n\nThe cubic B\u00e9zier control point associated with the curve\u2019s start point at (0, 0). The tangent vector from the start point to its control point defines the initial velocity of the timing function.\n\nendControlPoint\n\nThe cubic B\u00e9zier control point associated with the curve\u2019s end point at (1, 1). The tangent vector from the end point to its control point defines the final velocity of the timing function.\n\nDiscussion\n\nThe x components of the control points are clamped to the range [0,1] when the curve is evaluated."
    },
    {
        "title": "inverse",
        "url": "https://developer.apple.com/documentation/swiftui/unitcurve/inverse",
        "html": "Discussion\n\nThe inverse can be used to solve a curve in reverse: given a known output (y) value, the corresponding input (x) value can be found by using inverse:\n\nlet curve = UnitCurve.easeInOut\n\n\n/// The input time for which an easeInOut curve returns 0.6.\nlet inputTime = curve.inverse.evaluate(at: 0.6)\n"
    },
    {
        "title": "velocity(at:)",
        "url": "https://developer.apple.com/documentation/swiftui/unitcurve/velocity(at:)",
        "html": "Parameters\nprogress\n\nThe input progress (x component). The provided value is clamped to the range [0,1].\n\nReturn Value\n\nThe velocity of the output value (y component) of the curve at the given time.\n\nSee Also\nGetting curve characteristics\nfunc value(at: Double) -> Double\nReturns the output value (y component) of the curve at the given time."
    },
    {
        "title": "Value",
        "url": "https://developer.apple.com/documentation/swiftui/animationstatekey/value",
        "html": "Required\n\nSee Also\nSetting the default value\nstatic var defaultValue: Self.Value\nThe default value for the animation state key.\n\nRequired"
    },
    {
        "title": "value(at:)",
        "url": "https://developer.apple.com/documentation/swiftui/unitcurve/value(at:)",
        "html": "Parameters\ntime\n\nThe input progress (x component). The provided value is clamped to the range [0,1].\n\nReturn Value\n\nThe output value (y component) of the curve at the given progress.\n\nSee Also\nGetting curve characteristics\nfunc velocity(at: Double) -> Double\nReturns the rate of change (first derivative) of the output value of the curve at the given time."
    },
    {
        "title": "subscript(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/animationstate/subscript(_:)",
        "html": "Overview\n\nCreate a custom animation state value by defining a key that conforms to the AnimationStateKey protocol and provide the defaultValue for the key. Also include properties to read and write state values that your CustomAnimation uses. For example, the following code defines a key named PausableState that has two state values, paused and pauseTime:\n\nprivate struct PausableState<Value: VectorArithmetic>: AnimationStateKey {\n    var paused = false\n    var pauseTime: TimeInterval = 0.0\n\n\n    static var defaultValue: Self { .init() }\n}\n\n\nUse that key with the subscript operator of the AnimationState structure to get and set a value for the key. For more convenient access to the key value, extend AnimationContext with a computed property that gets and sets the key\u2019s value.\n\nextension AnimationContext {\n    fileprivate var pausableState: PausableState<Value> {\n        get { state[PausableState<Value>.self] }\n        set { state[PausableState<Value>.self] = newValue }\n    }\n}\n\n\nTo access the state values in a CustomAnimation, call the custom computed property, then read and write the state values that the custom AnimationStateKey provides.\n\nstruct PausableAnimation: CustomAnimation {\n    let base: Animation\n\n\n    func animate<V>(value: V, time: TimeInterval, context: inout AnimationContext<V>) -> V? where V : VectorArithmetic {\n        let paused = context.environment.animationPaused\n\n\n        let pausableState = context.pausableState\n        var pauseTime = pausableState.pauseTime\n        if pausableState.paused != paused {\n            pauseTime = time - pauseTime\n            context.pausableState = PausableState(paused: paused, pauseTime: pauseTime)\n        }\n\n\n        let effectiveTime = paused ? pauseTime : time - pauseTime\n        let result = base.animate(value: value, time: effectiveTime, context: &context)\n        return result\n    }\n}\n"
    },
    {
        "title": "circularEaseInOut",
        "url": "https://developer.apple.com/documentation/swiftui/unitcurve/circulareaseinout",
        "html": "Discussion\n\nThe shape of the curve is defined by a piecewise combination of circularEaseIn and circularEaseOut.\n\nSee Also\nGetting easing curves\nstatic let easeIn: UnitCurve\nA bezier curve that starts out slowly, then speeds up as it finishes.\nstatic let easeOut: UnitCurve\nA bezier curve that starts out quickly, then slows down as it approaches the end.\nstatic let easeInOut: UnitCurve\nA bezier curve that starts out slowly, speeds up over the middle, then slows down again as it approaches the end.\nstatic let circularEaseIn: UnitCurve\nA curve that starts out slowly, then speeds up as it finishes.\nstatic let circularEaseOut: UnitCurve\nA circular curve that starts out quickly, then slows down as it approaches the end."
    },
    {
        "title": "Text.LineStyle.Pattern",
        "url": "https://developer.apple.com/documentation/swiftui/text/linestyle/pattern",
        "html": "Topics\nGetting line style patterns\nstatic let solid: Text.LineStyle.Pattern\nDraw a solid line.\nstatic let dot: Text.LineStyle.Pattern\nDraw a line of dots.\nstatic let dash: Text.LineStyle.Pattern\nDraw a line of dashes.\nstatic let dashDot: Text.LineStyle.Pattern\nstatic let dashDotDot: Text.LineStyle.Pattern\nDraw a line of alternating dashes and two dots.\nRelationships\nConforms To\nSendable\nSee Also\nCreating a text line style\ninit?(nsUnderlineStyle: NSUnderlineStyle)\nCreates a Text.LineStyle from NSUnderlineStyle.\ninit(pattern: Text.LineStyle.Pattern, color: Color?)\nCreates a line style."
    },
    {
        "title": "isContinuous",
        "url": "https://developer.apple.com/documentation/swiftui/transaction/iscontinuous",
        "html": "Discussion\n\nThis value is true if a continuous action created the transaction, and is false otherwise. Continuous actions include things like dragging a slider or pressing and holding a stepper, as opposed to tapping a button.\n\nSee Also\nGetting information about a transaction\nvar scrollTargetAnchor: UnitPoint?\nThe preferred alignment of the view within a scroll view\u2019s visible region when scrolling to a view.\nvar tracksVelocity: Bool\nWhether this transaction will track the velocity of any animatable properties that change.\nsubscript<K>(K.Type) -> K.Value\nAccesses the transaction value associated with a custom key."
    },
    {
        "title": "scrollTargetAnchor",
        "url": "https://developer.apple.com/documentation/swiftui/transaction/scrolltargetanchor",
        "html": "Discussion\n\nUse this API in conjunction with a ScrollViewProxy/scrollTo(_:anchor) or when updating the binding provided to a scrollPosition(id:anchor:).\n\n@Binding var position: Item.ID?\n\n\nvar body: some View {\n    ScrollView {\n        LazyVStack {\n            ForEach(items) { item in\n                ItemView(item)\n            }\n        }\n        .scrollTargetLayout()\n    }\n    .scrollPosition(id: $position)\n    .safeAreaInset(edge: .bottom) {\n        Button(\"Scroll To Bottom\") {\n            withAnimation {\n                withTransaction(\\.scrollTargetAnchor, .bottom) {\n                    position = items.last?.id\n                }\n            }\n        }\n    }\n}\n\n\nWhen used with the scrollPosition(id:anchor:) modifier, this value will be preferred over the anchor specified in the modifier for the current transaction.\n\nSee Also\nGetting information about a transaction\nvar isContinuous: Bool\nA Boolean value that indicates whether the transaction originated from an action that produces a sequence of values.\nvar tracksVelocity: Bool\nWhether this transaction will track the velocity of any animatable properties that change.\nsubscript<K>(K.Type) -> K.Value\nAccesses the transaction value associated with a custom key."
    },
    {
        "title": "disablesAnimations",
        "url": "https://developer.apple.com/documentation/swiftui/transaction/disablesanimations",
        "html": "Discussion\n\nThis value is true during the initial phase of a two-part transition update, to prevent View/animation(_:) from inserting new animations into the transaction.\n\nSee Also\nManaging animations\nvar animation: Animation?\nThe animation, if any, associated with the current state change.\nfunc addAnimationCompletion(criteria: AnimationCompletionCriteria, () -> Void)\nAdds a completion to run when the animations created with this transaction are all complete."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/animationstate/init()",
        "html": "Discussion\n\nYou don\u2019t typically create an instance of AnimationState directly. Instead, the AnimationContext provides the animation state to an instance of CustomAnimation."
    },
    {
        "title": "easeInEaseOut",
        "url": "https://developer.apple.com/documentation/swiftui/unitcurve/easeineaseout",
        "html": "Deprecated\n\nUse easeInOut instead."
    },
    {
        "title": "defaultValue",
        "url": "https://developer.apple.com/documentation/swiftui/animationstatekey/defaultvalue",
        "html": "Required\n\nSee Also\nSetting the default value\nassociatedtype Value\nThe associated type representing the type of the animation state key\u2019s value.\n\nRequired"
    },
    {
        "title": "dismissBehavior",
        "url": "https://developer.apple.com/documentation/swiftui/transaction/dismissbehavior",
        "html": "Discussion\n\nThe default value is .interactive.\n\nYou can use this property to dismiss windows which may be showing a modal presentation by using the .destructive value:\n\nstruct DismissWindowButton: View {\n    @Environment(\\.dismissWindow) private var dismissWindow\n\n\n    var body: some View {\n        Button(\"Close Auxiliary Window\") {\n            withTransaction(\\.dismissBehavior, .destructive) {\n                dismissWindow(id: \"auxiliary\")\n            }\n        }\n    }\n}\n"
    },
    {
        "title": "init(animation:)",
        "url": "https://developer.apple.com/documentation/swiftui/transaction/init(animation:)",
        "html": "Parameters\nanimation\n\nThe animation to perform when the current state changes.\n\nSee Also\nCreating a transaction\ninit()\nCreates a transaction."
    },
    {
        "title": "addAnimationCompletion(criteria:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/transaction/addanimationcompletion(criteria:_:)",
        "html": "Discussion\n\nThe completion callback will always be fired exactly one time. If no animations are created by the changes in body, then the callback will be called immediately after body.\n\nSee Also\nManaging animations\nvar animation: Animation?\nThe animation, if any, associated with the current state change.\nvar disablesAnimations: Bool\nA Boolean value that indicates whether views should disable animations."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/transaction/init()",
        "html": "See Also\nCreating a transaction\ninit(animation: Animation?)\nCreates a transaction and assigns its animation property."
    },
    {
        "title": "init(_:text:)",
        "url": "https://developer.apple.com/documentation/swiftui/securefield/init(_:text:)-31aup",
        "html": "Parameters\ntitleKey\n\nThe key for the localized title of self, describing its purpose.\n\ntext\n\nThe text to display and edit\n\nprompt\n\nA Text representing the prompt of the secure field which provides users with guidance on what to type into the secure field.\n\nDiscussion\n\nUse the onSubmit(of:_:) modifier to invoke an action whenever the user submits this secure field.\n\nSee Also\nCreating a secure text field\ninit(LocalizedStringKey, text: Binding<String>, prompt: Text?)\nCreates a secure field with a prompt generated from a Text.\nAvailable when Label is Text.\ninit<S>(S, text: Binding<String>, prompt: Text?)\nCreates a secure field with a prompt generated from a Text.\nAvailable when Label is Text.\ninit(text: Binding<String>, prompt: Text?, label: () -> Label)\nCreates a secure field with a prompt generated from a Text.\nAvailable when Label conforms to View.\ninit<S>(S, text: Binding<String>)\nCreates a secure field with a prompt generated from a Text.\nAvailable when Label is Text."
    },
    {
        "title": "init(text:prompt:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/securefield/init(text:prompt:label:)",
        "html": "Parameters\ntext\n\nThe text to display and edit.\n\nprompt\n\nA Text representing the prompt of the secure field which provides users with guidance on what to type into the secure field.\n\nlabel\n\nA view that describes the purpose of the secure field.\n\nSee Also\nCreating a secure text field\ninit(LocalizedStringKey, text: Binding<String>, prompt: Text?)\nCreates a secure field with a prompt generated from a Text.\nAvailable when Label is Text.\ninit<S>(S, text: Binding<String>, prompt: Text?)\nCreates a secure field with a prompt generated from a Text.\nAvailable when Label is Text.\ninit(LocalizedStringKey, text: Binding<String>)\nCreates a secure field with a prompt generated from a Text.\nAvailable when Label is Text.\ninit<S>(S, text: Binding<String>)\nCreates a secure field with a prompt generated from a Text.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:text:)",
        "url": "https://developer.apple.com/documentation/swiftui/securefield/init(_:text:)-6w9bq",
        "html": "Parameters\ntitle\n\nThe title of self, describing its purpose.\n\ntext\n\nThe text to display and edit.\n\nprompt\n\nA Text representing the prompt of the secure field which provides users with guidance on what to type into the secure field.\n\nDiscussion\n\nUse the onSubmit(of:_:) modifier to invoke an action whenever the user submits this secure field.\n\nSee Also\nCreating a secure text field\ninit(LocalizedStringKey, text: Binding<String>, prompt: Text?)\nCreates a secure field with a prompt generated from a Text.\nAvailable when Label is Text.\ninit<S>(S, text: Binding<String>, prompt: Text?)\nCreates a secure field with a prompt generated from a Text.\nAvailable when Label is Text.\ninit(text: Binding<String>, prompt: Text?, label: () -> Label)\nCreates a secure field with a prompt generated from a Text.\nAvailable when Label conforms to View.\ninit(LocalizedStringKey, text: Binding<String>)\nCreates a secure field with a prompt generated from a Text.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:text:prompt:)",
        "url": "https://developer.apple.com/documentation/swiftui/securefield/init(_:text:prompt:)-40n4d",
        "html": "Parameters\ntitle\n\nThe title of self, describing its purpose.\n\ntext\n\nThe text to display and edit.\n\nprompt\n\nA Text representing the prompt of the secure field which provides users with guidance on what to type into the secure field.\n\nDiscussion\n\nUse the onSubmit(of:_:) modifier to invoke an action whenever the user submits this secure field.\n\nSee Also\nCreating a secure text field\ninit(LocalizedStringKey, text: Binding<String>, prompt: Text?)\nCreates a secure field with a prompt generated from a Text.\nAvailable when Label is Text.\ninit(text: Binding<String>, prompt: Text?, label: () -> Label)\nCreates a secure field with a prompt generated from a Text.\nAvailable when Label conforms to View.\ninit(LocalizedStringKey, text: Binding<String>)\nCreates a secure field with a prompt generated from a Text.\nAvailable when Label is Text.\ninit<S>(S, text: Binding<String>)\nCreates a secure field with a prompt generated from a Text.\nAvailable when Label is Text."
    },
    {
        "title": "speechSpellsOutCharacters(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/speechspellsoutcharacters(_:)",
        "html": "Parameters\nvalue\n\nA Boolean value that when true indicates VoiceOver should speak text as individual characters. Defaults to true.\n\nDiscussion\n\nUse this modifier when you want VoiceOver to speak text as individual letters, character by character. This is important for text that is not meant to be spoken together, like:\n\nAn acronym that isn\u2019t a word, like APPL, spoken as \u201cA-P-P-L\u201d.\n\nA number representing a series of digits, like 25, spoken as \u201ctwo-five\u201d rather than \u201ctwenty-five\u201d.\n\nSee Also\nConfiguring voiceover\nfunc speechAdjustedPitch(Double) -> Text\nRaises or lowers the pitch of spoken text.\nfunc speechAlwaysIncludesPunctuation(Bool) -> Text\nSets whether VoiceOver should always speak all punctuation in the text view.\nfunc speechAnnouncementsQueued(Bool) -> Text\nControls whether to queue pending announcements behind existing speech rather than interrupting speech in progress."
    },
    {
        "title": "accessibilityHeading(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/accessibilityheading(_:)",
        "html": "Parameters\nlevel\n\nThe heading level to associate with this element from the available AccessibilityHeadingLevel levels.\n\nDiscussion\n\nUse this modifier to set the level of this heading in relation to other headings. The system speaks the level number of levels AccessibilityHeadingLevel.h1 through AccessibilityHeadingLevel.h6 alongside the text.\n\nThe default heading level if you don\u2019t use this modifier is AccessibilityHeadingLevel.unspecified.\n\nSee Also\nProviding accessibility information\nfunc accessibilityLabel<S>(S) -> Text\nAdds a label to the view that describes its contents.\nfunc accessibilityLabel(Text) -> Text\nAdds a label to the view that describes its contents.\nfunc accessibilityLabel(LocalizedStringKey) -> Text\nAdds a label to the view that describes its contents.\nfunc accessibilityTextContentType(AccessibilityTextContentType) -> Text\nSets an accessibility text content type."
    },
    {
        "title": "bold()",
        "url": "https://developer.apple.com/documentation/swiftui/font/bold()",
        "html": "See Also\nStyling a font\nfunc italic() -> Font\nAdds italics to the font.\nfunc monospaced() -> Font\nReturns a fixed-width font from the same family as the base font.\nfunc monospacedDigit() -> Font\nReturns a modified font that uses fixed-width digits, while leaving other characters proportionally spaced.\nfunc smallCaps() -> Font\nAdjusts the font to enable all small capitals.\nfunc lowercaseSmallCaps() -> Font\nAdjusts the font to enable lowercase small capitals.\nfunc uppercaseSmallCaps() -> Font\nAdjusts the font to enable uppercase small capitals.\nfunc weight(Font.Weight) -> Font\nSets the weight of the font.\nfunc width(Font.Width) -> Font\nSets the width of the font.\nstruct Width\nA width to use for fonts that have multiple widths.\nfunc leading(Font.Leading) -> Font\nAdjusts the line spacing of a font.\nenum Leading\nA line spacing adjustment that you can apply to a font."
    },
    {
        "title": "init(_:text:prompt:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(_:text:prompt:)-70zi2",
        "html": "Parameters\ntitleKey\n\nThe key for the localized title of the text field, describing its purpose.\n\ntext\n\nThe text to display and edit.\n\nprompt\n\nA Text representing the prompt of the text field which provides users with guidance on what to type into the text field.\n\nDiscussion\n\nUse the onSubmit(of:_:) modifier to invoke an action whenever the user submits this text field.\n\nSee Also\nCreating a text field with a string\ninit(LocalizedStringKey, text: Binding<String>)\nCreates a text field with a text label generated from a localized title string.\nAvailable when Label is Text.\ninit<S>(S, text: Binding<String>)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text.\ninit<S>(S, text: Binding<String>, prompt: Text?)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text.\ninit(text: Binding<String>, prompt: Text?, label: () -> Label)\nCreates a text field with a prompt generated from a Text.\nAvailable when Label conforms to View."
    },
    {
        "title": "monospaced()",
        "url": "https://developer.apple.com/documentation/swiftui/font/monospaced()",
        "html": "Return Value\n\nA fixed-width font from the same family as the base font, if one is available, and a default fixed-width font otherwise.\n\nDiscussion\n\nIf there\u2019s no suitable font face in the same family, SwiftUI returns a default fixed-width font.\n\nThe following example adds the monospaced() modifier to the default system font, then applies this font to a Text view:\n\nstruct ContentView: View {\n    let myFont = Font\n        .system(size: 24)\n        .monospaced()\n\n\n    var body: some View {\n        Text(\"Hello, world!\")\n            .font(myFont)\n            .padding()\n            .navigationTitle(\"Monospaced\")\n    }\n}\n\n\nSwiftUI may provide different fixed-width replacements for standard user interface fonts (such as title, or a system font created with system(_:design:)) than for those same fonts when created by name with custom(_:size:).\n\nThe font(_:) modifier applies the font to all text within the view. To mix fixed-width text with other styles in the same Text view, use the init(_:) initializer to use an appropropriately-styled AttributedString for the text view\u2019s content. You can use the init(markdown:options:baseURL:) initializer to provide a Markdown-formatted string containing the backtick-syntax (`\u2026`) to apply code voice to specific ranges of the attributed string.\n\nSee Also\nStyling a font\nfunc bold() -> Font\nAdds bold styling to the font.\nfunc italic() -> Font\nAdds italics to the font.\nfunc monospacedDigit() -> Font\nReturns a modified font that uses fixed-width digits, while leaving other characters proportionally spaced.\nfunc smallCaps() -> Font\nAdjusts the font to enable all small capitals.\nfunc lowercaseSmallCaps() -> Font\nAdjusts the font to enable lowercase small capitals.\nfunc uppercaseSmallCaps() -> Font\nAdjusts the font to enable uppercase small capitals.\nfunc weight(Font.Weight) -> Font\nSets the weight of the font.\nfunc width(Font.Width) -> Font\nSets the width of the font.\nstruct Width\nA width to use for fonts that have multiple widths.\nfunc leading(Font.Leading) -> Font\nAdjusts the line spacing of a font.\nenum Leading\nA line spacing adjustment that you can apply to a font."
    },
    {
        "title": "init(_:text:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(_:text:)-2laoi",
        "html": "Parameters\ntitle\n\nThe title of the text view, describing its purpose.\n\ntext\n\nThe text to display and edit.\n\nSee Also\nCreating a text field with a string\ninit(LocalizedStringKey, text: Binding<String>)\nCreates a text field with a text label generated from a localized title string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, text: Binding<String>, prompt: Text?)\nCreates a text field with a text label generated from a localized title string.\nAvailable when Label is Text.\ninit<S>(S, text: Binding<String>, prompt: Text?)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text.\ninit(text: Binding<String>, prompt: Text?, label: () -> Label)\nCreates a text field with a prompt generated from a Text.\nAvailable when Label conforms to View."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/font/init(_:)",
        "html": "Discussion\n\nInitializing Font with platform font instance (CTFont) can bridge SwiftUI Font with NSFont or UIFont, both of which are toll-free bridged to CTFont. For example:\n\n// Use native Core Text API to create desired ctFont.\nlet ctFont = CTFontCreateUIFontForLanguage(.system, 12, nil)!\n\n\n// Create SwiftUI Text with the CTFont instance.\nlet text = Text(\"Hello\").font(Font(ctFont))\n"
    },
    {
        "title": "init(_:text:onCommit:)",
        "url": "https://developer.apple.com/documentation/swiftui/securefield/init(_:text:oncommit:)-712gd",
        "html": "Deprecated\n\nUse init(_:text:prompt:) instead. Add the onSubmit(of:_:) view modifier for the onCommit behavior.\n\nParameters\ntitleKey\n\nThe key for the localized title of self, describing its purpose.\n\ntext\n\nThe text to display and edit.\n\nonCommit\n\nThe action to perform when the user performs an action (usually pressing the Return key) while the secure field has focus.\n\nSee Also\nDeprecated initializers\ninit<S>(S, text: Binding<String>, onCommit: () -> Void)\nCreates an instance.\nAvailable when Label is Text.\nDeprecated"
    },
    {
        "title": "init(_:text:onCommit:)",
        "url": "https://developer.apple.com/documentation/swiftui/securefield/init(_:text:oncommit:)-7haty",
        "html": "Deprecated\n\nUse init(_:text:prompt:) instead. Add the onSubmit(of:_:) view modifier for the onCommit behavior.\n\nParameters\ntitle\n\nThe title of self, describing its purpose.\n\ntext\n\nThe text to display and edit.\n\nonCommit\n\nThe action to perform when the user performs an action (usually pressing the Return key) while the secure field has focus.\n\nSee Also\nDeprecated initializers\ninit(LocalizedStringKey, text: Binding<String>, onCommit: () -> Void)\nCreates an instance.\nAvailable when Label is Text.\nDeprecated"
    },
    {
        "title": "custom(_:size:relativeTo:)",
        "url": "https://developer.apple.com/documentation/swiftui/font/custom(_:size:relativeto:)",
        "html": "See Also\nCreating custom fonts\nstatic func custom(String, fixedSize: CGFloat) -> Font\nCreate a custom font with the given name and a fixed size that does not scale with Dynamic Type.\nstatic func custom(String, size: CGFloat) -> Font\nCreate a custom font with the given name and size that scales with the body text style."
    },
    {
        "title": "defaultValue",
        "url": "https://developer.apple.com/documentation/swiftui/transactionkey/defaultvalue",
        "html": "Required\n\nSee Also\nSetting a default value\nassociatedtype Value\nThe associated type representing the type of the transaction key\u2019s value.\n\nRequired"
    },
    {
        "title": "init(_:text:prompt:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(_:text:prompt:)-4kzyv",
        "html": "Parameters\ntitle\n\nThe title of the text view, describing its purpose.\n\ntext\n\nThe text to display and edit.\n\nprompt\n\nA Text representing the prompt of the text field which provides users with guidance on what to type into the text field.\n\nDiscussion\n\nUse the onSubmit(of:_:) modifier to invoke an action whenever the user submits this text field.\n\nSee Also\nCreating a text field with a string\ninit(LocalizedStringKey, text: Binding<String>)\nCreates a text field with a text label generated from a localized title string.\nAvailable when Label is Text.\ninit<S>(S, text: Binding<String>)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, text: Binding<String>, prompt: Text?)\nCreates a text field with a text label generated from a localized title string.\nAvailable when Label is Text.\ninit(text: Binding<String>, prompt: Text?, label: () -> Label)\nCreates a text field with a prompt generated from a Text.\nAvailable when Label conforms to View."
    },
    {
        "title": "init(_:text:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(_:text:)-4lffk",
        "html": "Parameters\ntitleKey\n\nThe key for the localized title of the text field, describing its purpose.\n\ntext\n\nThe text to display and edit.\n\nSee Also\nCreating a text field with a string\ninit<S>(S, text: Binding<String>)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, text: Binding<String>, prompt: Text?)\nCreates a text field with a text label generated from a localized title string.\nAvailable when Label is Text.\ninit<S>(S, text: Binding<String>, prompt: Text?)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text.\ninit(text: Binding<String>, prompt: Text?, label: () -> Label)\nCreates a text field with a prompt generated from a Text.\nAvailable when Label conforms to View."
    },
    {
        "title": "lowercaseSmallCaps()",
        "url": "https://developer.apple.com/documentation/swiftui/font/lowercasesmallcaps()",
        "html": "Discussion\n\nThis function turns lowercase characters into small capitals for the font. It is generally used for display lines set in large and small caps, such as titles. It may include forms related to small capitals, such as old-style figures.\n\nSee Also\nStyling a font\nfunc bold() -> Font\nAdds bold styling to the font.\nfunc italic() -> Font\nAdds italics to the font.\nfunc monospaced() -> Font\nReturns a fixed-width font from the same family as the base font.\nfunc monospacedDigit() -> Font\nReturns a modified font that uses fixed-width digits, while leaving other characters proportionally spaced.\nfunc smallCaps() -> Font\nAdjusts the font to enable all small capitals.\nfunc uppercaseSmallCaps() -> Font\nAdjusts the font to enable uppercase small capitals.\nfunc weight(Font.Weight) -> Font\nSets the weight of the font.\nfunc width(Font.Width) -> Font\nSets the width of the font.\nstruct Width\nA width to use for fonts that have multiple widths.\nfunc leading(Font.Leading) -> Font\nAdjusts the line spacing of a font.\nenum Leading\nA line spacing adjustment that you can apply to a font."
    },
    {
        "title": "init(value:format:prompt:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(value:format:prompt:label:)-5325h",
        "html": "Parameters\nvalue\n\nThe underlying value to edit.\n\nformat\n\nA format style of type F to use when converting between the string the user edits and the underlying value of type F.FormatInput. If format can\u2019t perform the conversion, the text field sets binding.value to nil.\n\nprompt\n\nA Text which provides users with guidance on what to type into the text field.\n\nlabel\n\nA view builder that produces a label for the text field, describing its purpose.\n\nDiscussion\n\nUse this initializer to create a text field that binds to a bound optional value, using a ParseableFormatStyle to convert to and from this type. Changes to the bound value update the string displayed by the text field. Editing the text field updates the bound value, as long as the format style can parse the text. If the format style can\u2019t parse the input, the text field sets the bound value to nil.\n\nUse the onSubmit(of:_:) modifier to invoke an action whenever the user submits this text field.\n\nThe following example uses an optional Double as the bound currency value, and a FloatingPointFormatStyle.Currency instance to convert to and from a representation as U.S. dollars. As the user types, a View.onChange(of:_:) modifier logs the new value to the console. If the user enters an invalid currency value, like letters or emoji, the console output is Optional(nil).\n\n@State private var myMoney: Double? = 300.0\nvar body: some View {\n    TextField(\n        value: $myMoney,\n        format: .currency(code: \"USD\")\n    ) {\n        Text(\"Currency (USD)\")\n    }\n    .onChange(of: myMoney) { newValue in\n        print (\"myMoney: \\(newValue)\")\n    }\n}\n\nSee Also\nCreating a text field with an optional\ninit<F>(LocalizedStringKey, value: Binding<F.FormatInput?>, format: F, prompt: Text?)\nCreates a text field that applies a format style to a bound optional value, with a label generated from a localized title string.\nAvailable when Label is Text.\ninit<S, F>(S, value: Binding<F.FormatInput?>, format: F, prompt: Text?)\nCreates a text field that applies a format style to a bound optional value, with a label generated from a title string.\nAvailable when Label is Text."
    },
    {
        "title": "monospacedDigit()",
        "url": "https://developer.apple.com/documentation/swiftui/text/monospaceddigit()",
        "html": "Return Value\n\nA text view with a modified font that uses fixed-width numeric characters, while leaving other characters proportionally spaced.\n\nDiscussion\n\nThis modifier only affects numeric characters, and leaves all other characters unchanged.\n\nThe following example shows the effect of monospacedDigit() on a text view. It arranges two text views in a VStack, each displaying a formatted date that contains many instances of the character 1. The second text view uses the monospacedDigit(). Because 1 is usually a narrow character in proportional fonts, applying the modifier widens all of the 1s, and the text view as a whole. The non-digit characters in the text view remain unaffected.\n\nlet myDate = DateComponents(\n    calendar: Calendar(identifier: .gregorian),\n    timeZone: TimeZone(identifier: \"EST\"),\n    year: 2011,\n    month: 1,\n    day: 11,\n    hour: 11,\n    minute: 11\n).date!\n\n\nvar body: some View {\n    VStack(alignment: .leading) {\n        Text(myDate.formatted(date: .long, time: .complete))\n            .font(.system(size: 20))\n        Text(myDate.formatted(date: .long, time: .complete))\n            .font(.system(size: 20))\n            .monospacedDigit()\n    }\n    .padding()\n    .navigationTitle(\"monospacedDigit() Modifier\")\n}\n\n\nIf the base font of the text view doesn\u2019t support fixed-width digits, the font remains unchanged.\n\nSee Also\nStyling the view\u2019s text\nfunc foregroundStyle<S>(S) -> Text\nSets the style of the text displayed by this view.\nfunc bold() -> Text\nApplies a bold font weight to the text.\nfunc bold(Bool) -> Text\nApplies a bold font weight to the text.\nfunc italic() -> Text\nApplies italics to the text.\nfunc italic(Bool) -> Text\nApplies italics to the text.\nfunc strikethrough(Bool, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc underline(Bool, color: Color?) -> Text\nApplies an underline to the text.\nfunc underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies an underline to the text.\nfunc monospaced(Bool) -> Text\nModifies the font of the text to use the fixed-width variant of the current font, if possible.\nfunc kerning(CGFloat) -> Text\nSets the spacing, or kerning, between characters.\nfunc tracking(CGFloat) -> Text\nSets the tracking for the text.\nfunc baselineOffset(CGFloat) -> Text\nSets the vertical offset for the text relative to its baseline.\nenum Case\nA scheme for transforming the capitalization of characters within text.\nstruct DateStyle\nA predefined style used to display a Date.\nstruct LineStyle\nDescription of the style used to draw the line for StrikethroughStyleAttribute and UnderlineStyleAttribute."
    },
    {
        "title": "LocalizedStringKey.StringInterpolation",
        "url": "https://developer.apple.com/documentation/swiftui/localizedstringkey/stringinterpolation",
        "html": "Topics\nAppending to an interpolation\nThe compiler uses these methods when interpreting string interpolations; don\u2019t call them directly.\nfunc appendInterpolation(String)\nAppends a literal string segment to a string interpolation.\nfunc appendInterpolation(AttributedString)\nAppends an attributed string to a string interpolation.\nfunc appendInterpolation<T>(T)\nAppends a type, convertible to a string by using a default format specifier, to a string interpolation.\nfunc appendInterpolation<T>(T, specifier: String)\nAppends a type, convertible to a string with a format specifier, to a string interpolation.\nfunc appendInterpolation(ClosedRange<Date>)\nAppends a date range to a string interpolation.\nfunc appendInterpolation(DateInterval)\nAppends a date interval to a string interpolation.\nfunc appendInterpolation<F>(F.FormatInput, format: F)\nAppends the formatted representation of a nonstring type supported by a corresponding format style.\nfunc appendInterpolation<Subject>(Subject, formatter: Formatter?)\nAppends an optionally-formatted instance of an Objective-C subclass to a string interpolation.\nfunc appendInterpolation<Subject>(Subject, formatter: Formatter?)\nAppends an optionally-formatted instance of a Foundation type to a string interpolation.\nfunc appendInterpolation(Date, style: Text.DateStyle)\nAppends a formatted date to a string interpolation.\nfunc appendInterpolation(Text)\nAppends the string displayed by a text view to a string interpolation.\nfunc appendInterpolation(Image)\nAppends an image to a string interpolation.\nfunc appendInterpolation(LocalizedStringResource)\nAppends the localized string resource to a string interpolation.\nfunc appendInterpolation(timerInterval: ClosedRange<Date>, pauseTime: Date?, countsDown: Bool, showsHours: Bool)\nAppends a timer interval to a string interpolation.\nfunc appendLiteral(String)\nAppends a literal string.\nRelationships\nConforms To\nStringInterpolationProtocol\nSee Also\nCreating a key from an interpolation\ninit(stringInterpolation: LocalizedStringKey.StringInterpolation)\nCreates a localized string key from the given string interpolation."
    },
    {
        "title": "characters",
        "url": "https://developer.apple.com/documentation/swiftui/textinputautocapitalization/characters",
        "html": "See Also\nGetting autocapitalization options\nstatic var sentences: TextInputAutocapitalization\nDefines an autocapitalizing behavior that will capitalize the first letter in every sentence.\nstatic var words: TextInputAutocapitalization\nDefines an autocapitalizing behavior that will capitalize the first letter of every word.\nstatic var never: TextInputAutocapitalization\nDefines an autocapitalizing behavior that will not capitalize anything."
    },
    {
        "title": "init(stringLiteral:)",
        "url": "https://developer.apple.com/documentation/swiftui/localizedstringkey/init(stringliteral:)",
        "html": "Parameters\nvalue\n\nThe string literal to use as a localization key.\n\nSee Also\nCreating a key from a literal value\ninit(String)\nCreates a localized string key from the given string value."
    },
    {
        "title": "explicit(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/typesettinglanguage/explicit(_:)",
        "html": "Parameters\nlanguage\n\nThe language to use for typesetting.\n\nReturn Value\n\nA TypesettingLanguage.\n\nDiscussion\n\nAn explicit language will be used for typesetting. For example, if used with Thai language the line heights will be as tall as needed to accommodate Thai.\n\nSee Also\nGetting language behavior\nstatic let automatic: TypesettingLanguage\nAutomatic language behavior."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/typesettinglanguage/automatic",
        "html": "Discussion\n\nWhen determining the language to use for typesetting the current UI language and preferred languages will be considiered. For example, if the current UI locale is for English and Thai is included in the preferred languages then line heights will be taller to accommodate the taller glyphs used by Thai.\n\nSee Also\nGetting language behavior\nstatic func explicit(Locale.Language) -> TypesettingLanguage\nUse explicit language."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/localizedstringkey/init(_:)",
        "html": "Parameters\nvalue\n\nThe string to use as a localization key.\n\nSee Also\nCreating a key from a literal value\ninit(stringLiteral: String)\nCreates a localized string key from the given string literal."
    },
    {
        "title": "init(stringInterpolation:)",
        "url": "https://developer.apple.com/documentation/swiftui/localizedstringkey/init(stringinterpolation:)",
        "html": "Parameters\nstringInterpolation\n\nThe string interpolation to use as the localization key.\n\nDiscussion\n\nTo create a localized string key from a string interpolation, use the \\() string interpolation syntax. Swift matches the parameter types in the expression to one of the appendInterpolation methods in LocalizedStringKey.StringInterpolation. The interpolated types can include numeric values, Foundation types, and SwiftUI Text and Image instances.\n\nThe following example uses a string interpolation with two arguments: an unlabeled Date and a Text.DateStyle labeled style. The compiler maps these to the method appendInterpolation(_:style:) as it builds the string that it creates the LocalizedStringKey with.\n\nlet key = LocalizedStringKey(\"Date is \\(company.foundedDate, style: .offset)\")\nlet text = Text(key) // Text contains \"Date is +45 years\"\n\n\nYou can write this example more concisely, implicitly creating a LocalizedStringKey as the parameter to the Text initializer:\n\nlet text = Text(\"Date is \\(company.foundedDate, style: .offset)\")\n\nSee Also\nCreating a key from an interpolation\nstruct StringInterpolation\nRepresents the contents of a string literal with interpolations while it\u2019s being built, for use in creating a localized string key."
    },
    {
        "title": "init(_:value:format:prompt:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(_:value:format:prompt:)-3fh51",
        "html": "Parameters\ntitleKey\n\nThe title of the text field, describing its purpose.\n\nvalue\n\nThe underlying value to edit.\n\nformat\n\nA format style of type F to use when converting between the string the user edits and the underlying value of type F.FormatInput. If format can\u2019t perform the conversion, the text field leaves binding.value unchanged. If the user stops editing the text in an invalid state, the text field updates the field\u2019s text to the last known valid value.\n\nprompt\n\nA Text which provides users with guidance on what to type into the text field.\n\nDiscussion\n\nUse this initializer to create a text field that binds to a bound value, using a ParseableFormatStyle to convert to and from this type. Changes to the bound value update the string displayed by the text field. Editing the text field updates the bound value, as long as the format style can parse the text. If the format style can\u2019t parse the input, the bound value remains unchanged.\n\nUse the onSubmit(of:_:) modifier to invoke an action whenever the user submits this text field.\n\nThe following example uses a Double as the bound value, and a FloatingPointFormatStyle instance to convert to and from a string representation. As the user types, the bound value updates, which in turn updates three Text views that use different format styles. If the user enters text that doesn\u2019t represent a valid Double, the bound value doesn\u2019t update.\n\n@State private var myDouble: Double = 0.673\nvar body: some View {\n    VStack {\n        TextField(\n            \"Double\",\n            value: $myDouble,\n            format: .number\n        )\n        Text(myDouble, format: .number)\n        Text(myDouble, format: .number.precision(.significantDigits(5)))\n        Text(myDouble, format: .number.notation(.scientific))\n    }\n}\n\n\nSee Also\nCreating a text field with a value\ninit<S, F>(S, value: Binding<F.FormatInput>, format: F, prompt: Text?)\nCreates a text field that applies a format style to a bound value, with a label generated from a title string.\nAvailable when Label is Text.\ninit<F>(value: Binding<F.FormatInput>, format: F, prompt: Text?, label: () -> Label)\nCreates a text field that applies a format style to a bound value, with a label generated from a view builder.\nAvailable when Label conforms to View.\ninit<S, V>(S, value: Binding<V>, formatter: Formatter)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter, prompt: Text?)\nCreates a text field that applies a formatter to a bound value, with a label generated from a localized title string.\nAvailable when Label is Text.\ninit<S, V>(S, value: Binding<V>, formatter: Formatter, prompt: Text?)\nCreates a text field that applies a formatter to a bound value, with a label generated from a title string.\nAvailable when Label is Text.\ninit<V>(value: Binding<V>, formatter: Formatter, prompt: Text?, label: () -> Label)\nCreates a text field that applies a formatter to a bound optional value, with a label generated from a view builder.\nAvailable when Label conforms to View."
    },
    {
        "title": "sentences",
        "url": "https://developer.apple.com/documentation/swiftui/textinputautocapitalization/sentences",
        "html": "See Also\nGetting autocapitalization options\nstatic var characters: TextInputAutocapitalization\nDefines an autocapitalizing behavior that will capitalize every letter.\nstatic var words: TextInputAutocapitalization\nDefines an autocapitalizing behavior that will capitalize the first letter of every word.\nstatic var never: TextInputAutocapitalization\nDefines an autocapitalizing behavior that will not capitalize anything."
    },
    {
        "title": "makeBody(configuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/datepickerstyle/makebody(configuration:)",
        "html": "Required\n\nParameters\nconfiguration\n\nThe properties of the date picker.\n\nDiscussion\n\nThe system calls this method for each DatePicker instance in a view hierarchy where this style is the current date picker style.\n\nSee Also\nCreating custom date picker styles\nstruct DatePickerStyleConfiguration\nThe properties of a DatePicker.\ntypealias Configuration\nA type alias for the properties of a DatePicker.\nassociatedtype Body : View\nA view representing the appearance and interaction of a DatePicker.\n\nRequired"
    },
    {
        "title": "init(_:format:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/init(_:format:)",
        "html": "Parameters\ninput\n\nThe underlying value to display.\n\nformat\n\nA format style of type F to convert the underlying value of type F.FormatInput to a string representation.\n\nDiscussion\n\nUse this initializer to create a text view backed by a nonstring value, using a FormatStyle to convert the type to a string representation. Any changes to the value update the string displayed by the text view.\n\nIn the following example, three Text views present a date with different combinations of date and time fields, by using different Date.FormatStyle options.\n\n@State private var myDate = Date()\nvar body: some View {\n    VStack {\n        Text(myDate, format: Date.FormatStyle(date: .numeric, time: .omitted))\n        Text(myDate, format: Date.FormatStyle(date: .complete, time: .complete))\n        Text(myDate, format: Date.FormatStyle().hour(.defaultDigitsNoAMPM).minute())\n    }\n}\n\n\nSee Also\nCreating a text view with formatting\ninit<Subject>(Subject, formatter: Formatter)\nCreates a text view that displays the formatted representation of a reference-convertible value.\ninit<Subject>(Subject, formatter: Formatter)\nCreates a text view that displays the formatted representation of a Foundation object."
    },
    {
        "title": "init(value:format:prompt:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(value:format:prompt:label:)-99ntf",
        "html": "Parameters\nvalue\n\nThe underlying value to edit.\n\nformat\n\nA format style of type F to use when converting between the string the user edits and the underlying value of type F.FormatInput. If format can\u2019t perform the conversion, the text field leaves the value unchanged. If the user stops editing the text in an invalid state, the text field updates the field\u2019s text to the last known valid value.\n\nprompt\n\nA Text which provides users with guidance on what to type into the text field.\n\nlabel\n\nA view builder that produces a label for the text field, describing its purpose.\n\nDiscussion\n\nUse this initializer to create a text field that binds to a bound value, using a ParseableFormatStyle to convert to and from this type. Changes to the bound value update the string displayed by the text field. Editing the text field updates the bound value, as long as the format style can parse the text. If the format style can\u2019t parse the input, the bound value remains unchanged.\n\nUse the onSubmit(of:_:) modifier to invoke an action whenever the user submits this text field.\n\nThe following example uses a Double as the bound value, and a FloatingPointFormatStyle instance to convert to and from a string representation. As the user types, the bound value updates, which in turn updates three Text views that use different format styles. If the user enters text that doesn\u2019t represent a valid Double, the bound value doesn\u2019t update.\n\n@State private var myDouble: Double = 0.673\nvar body: some View {\n    VStack {\n        TextField(\n            value: $myDouble,\n            format: .number\n        ) {\n            Text(\"Double\")\n        }\n        Text(myDouble, format: .number)\n        Text(myDouble, format: .number.precision(.significantDigits(5)))\n        Text(myDouble, format: .number.notation(.scientific))\n    }\n}\n\n\nSee Also\nCreating a text field with a value\ninit<F>(LocalizedStringKey, value: Binding<F.FormatInput>, format: F, prompt: Text?)\nCreates a text field that applies a format style to a bound value, with a label generated from a localized title string.\nAvailable when Label is Text.\ninit<S, F>(S, value: Binding<F.FormatInput>, format: F, prompt: Text?)\nCreates a text field that applies a format style to a bound value, with a label generated from a title string.\nAvailable when Label is Text.\ninit<S, V>(S, value: Binding<V>, formatter: Formatter)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter, prompt: Text?)\nCreates a text field that applies a formatter to a bound value, with a label generated from a localized title string.\nAvailable when Label is Text.\ninit<S, V>(S, value: Binding<V>, formatter: Formatter, prompt: Text?)\nCreates a text field that applies a formatter to a bound value, with a label generated from a title string.\nAvailable when Label is Text.\ninit<V>(value: Binding<V>, formatter: Formatter, prompt: Text?, label: () -> Label)\nCreates a text field that applies a formatter to a bound optional value, with a label generated from a view builder.\nAvailable when Label conforms to View."
    },
    {
        "title": "init(_:formatter:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/init(_:formatter:)-2he2c",
        "html": "Parameters\nsubject\n\nA ReferenceConvertible instance compatible with formatter.\n\nformatter\n\nA Formatter capable of converting subject into a string representation.\n\nDiscussion\n\nUse this initializer to create a text view that formats subject using formatter.\n\nSee Also\nCreating a text view with formatting\ninit<F>(F.FormatInput, format: F)\nCreates a text view that displays the formatted representation of a nonstring type supported by a corresponding format style.\ninit<Subject>(Subject, formatter: Formatter)\nCreates a text view that displays the formatted representation of a Foundation object."
    },
    {
        "title": "init(_:value:format:prompt:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(_:value:format:prompt:)-7flsn",
        "html": "Parameters\ntitle\n\nThe title of the text field, describing its purpose.\n\nvalue\n\nThe underlying value to edit.\n\nformat\n\nA format style of type F to use when converting between the string the user edits and the underlying value of type F.FormatInput. If format can\u2019t perform the conversion, the text field leaves binding.value unchanged. If the user stops editing the text in an invalid state, the text field updates the field\u2019s text to the last known valid value.\n\nprompt\n\nA Text which provides users with guidance on what to type into the text field.\n\nDiscussion\n\nUse this initializer to create a text field that binds to a bound value, using a ParseableFormatStyle to convert to and from this type. Changes to the bound value update the string displayed by the text field. Editing the text field updates the bound value, as long as the format style can parse the text. If the format style can\u2019t parse the input, the bound value remains unchanged.\n\nUse the onSubmit(of:_:) modifier to invoke an action whenever the user submits this text field.\n\nThe following example uses a Double as the bound value, and a FloatingPointFormatStyle instance to convert to and from a string representation. As the user types, the bound value updates, which in turn updates three Text views that use different format styles. If the user enters text that doesn\u2019t represent a valid Double, the bound value doesn\u2019t update.\n\n@State private var label = \"Double\"\n@State private var myDouble: Double = 0.673\nvar body: some View {\n    VStack {\n        TextField(\n            label,\n            value: $myDouble,\n            format: .number\n        )\n        Text(myDouble, format: .number)\n        Text(myDouble, format: .number.precision(.significantDigits(5)))\n        Text(myDouble, format: .number.notation(.scientific))\n    }\n}\n\n\nSee Also\nCreating a text field with a value\ninit<F>(LocalizedStringKey, value: Binding<F.FormatInput>, format: F, prompt: Text?)\nCreates a text field that applies a format style to a bound value, with a label generated from a localized title string.\nAvailable when Label is Text.\ninit<F>(value: Binding<F.FormatInput>, format: F, prompt: Text?, label: () -> Label)\nCreates a text field that applies a format style to a bound value, with a label generated from a view builder.\nAvailable when Label conforms to View.\ninit<S, V>(S, value: Binding<V>, formatter: Formatter)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter, prompt: Text?)\nCreates a text field that applies a formatter to a bound value, with a label generated from a localized title string.\nAvailable when Label is Text.\ninit<S, V>(S, value: Binding<V>, formatter: Formatter, prompt: Text?)\nCreates a text field that applies a formatter to a bound value, with a label generated from a title string.\nAvailable when Label is Text.\ninit<V>(value: Binding<V>, formatter: Formatter, prompt: Text?, label: () -> Label)\nCreates a text field that applies a formatter to a bound optional value, with a label generated from a view builder.\nAvailable when Label conforms to View."
    },
    {
        "title": "init(_:value:formatter:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(_:value:formatter:)-4013v",
        "html": "Parameters\ntitle\n\nThe title of the text view, describing its purpose.\n\nvalue\n\nThe underlying value to edit.\n\nformatter\n\nA formatter to use when converting between the string the user edits and the underlying value of type V. If formatter can\u2019t perform the conversion, the text field doesn\u2019t modify binding.value.\n\nDiscussion\n\nUse this initializer to create a text field that binds to a bound optional value, using a Formatter to convert to and from this type. Changes to the bound value update the string displayed by the text field. Editing the text field updates the bound value, as long as the formatter can parse the text. If the format style can\u2019t parse the input, the bound value remains unchanged.\n\nUse the onSubmit(of:_:) modifier to invoke an action whenever the user submits this text field.\n\nThe following example uses a Double as the bound value, and a NumberFormatter instance to convert to and from a string representation. The formatter uses the NumberFormatter.Style.decimal style, to allow entering a fractional part. As the user types, the bound value updates, which in turn updates three Text views that use different format styles. If the user enters text that doesn\u2019t represent a valid Double, the bound value doesn\u2019t update.\n\n@State private var myDouble: Double = 0.673\n@State private var numberFormatter: NumberFormatter = {\n    var nf = NumberFormatter()\n    nf.numberStyle = .decimal\n    return nf\n}()\n\n\nvar body: some View {\n    VStack {\n        TextField(\n            value: $myDouble,\n            formatter: numberFormatter\n        ) {\n            Text(\"Double\")\n        }\n        Text(myDouble, format: .number)\n        Text(myDouble, format: .number.precision(.significantDigits(5)))\n        Text(myDouble, format: .number.notation(.scientific))\n    }\n}\n\nSee Also\nCreating a text field with a value\ninit<F>(LocalizedStringKey, value: Binding<F.FormatInput>, format: F, prompt: Text?)\nCreates a text field that applies a format style to a bound value, with a label generated from a localized title string.\nAvailable when Label is Text.\ninit<S, F>(S, value: Binding<F.FormatInput>, format: F, prompt: Text?)\nCreates a text field that applies a format style to a bound value, with a label generated from a title string.\nAvailable when Label is Text.\ninit<F>(value: Binding<F.FormatInput>, format: F, prompt: Text?, label: () -> Label)\nCreates a text field that applies a format style to a bound value, with a label generated from a view builder.\nAvailable when Label conforms to View.\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter, prompt: Text?)\nCreates a text field that applies a formatter to a bound value, with a label generated from a localized title string.\nAvailable when Label is Text.\ninit<S, V>(S, value: Binding<V>, formatter: Formatter, prompt: Text?)\nCreates a text field that applies a formatter to a bound value, with a label generated from a title string.\nAvailable when Label is Text.\ninit<V>(value: Binding<V>, formatter: Formatter, prompt: Text?, label: () -> Label)\nCreates a text field that applies a formatter to a bound optional value, with a label generated from a view builder.\nAvailable when Label conforms to View."
    },
    {
        "title": "init(text:prompt:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(text:prompt:label:)",
        "html": "Parameters\ntext\n\nThe text to display and edit.\n\nprompt\n\nA Text representing the prompt of the text field which provides users with guidance on what to type into the text field.\n\nlabel\n\nA view that describes the purpose of the text field.\n\nDiscussion\n\nUse the onSubmit(of:_:) modifier to invoke an action whenever the user submits this text field.\n\nSee Also\nCreating a text field with a string\ninit(LocalizedStringKey, text: Binding<String>)\nCreates a text field with a text label generated from a localized title string.\nAvailable when Label is Text.\ninit<S>(S, text: Binding<String>)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, text: Binding<String>, prompt: Text?)\nCreates a text field with a text label generated from a localized title string.\nAvailable when Label is Text.\ninit<S>(S, text: Binding<String>, prompt: Text?)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:value:formatter:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(_:value:formatter:)-dym8",
        "html": "Parameters\ntitleKey\n\nThe key for the localized title of the text field, describing its purpose.\n\nvalue\n\nThe underlying value to edit.\n\nformatter\n\nA formatter to use when converting between the string the user edits and the underlying value of type V. If formatter can\u2019t perform the conversion, the text field doesn\u2019t modify binding.value.\n\nDiscussion\n\nUse this initializer to create a text field that binds to a bound optional value, using a Formatter to convert to and from this type. Changes to the bound value update the string displayed by the text field. Editing the text field updates the bound value, as long as the formatter can parse the text. If the format style can\u2019t parse the input, the bound value remains unchanged.\n\nUse the onSubmit(of:_:) modifier to invoke an action whenever the user submits this text field.\n\nThe following example uses a Double as the bound value, and a NumberFormatter instance to convert to and from a string representation. The formatter uses the NumberFormatter.Style.decimal style, to allow entering a fractional part. As the user types, the bound value updates, which in turn updates three Text views that use different format styles. If the user enters text that doesn\u2019t represent a valid Double, the bound value doesn\u2019t update.\n\n@State private var myDouble: Double = 0.673\n@State private var numberFormatter: NumberFormatter = {\n    var nf = NumberFormatter()\n    nf.numberStyle = .decimal\n    return nf\n}()\n\n\nvar body: some View {\n    VStack {\n        TextField(\n            value: $myDouble,\n            formatter: numberFormatter\n        ) {\n            Text(\"Double\")\n        }\n        Text(myDouble, format: .number)\n        Text(myDouble, format: .number.precision(.significantDigits(5)))\n        Text(myDouble, format: .number.notation(.scientific))\n    }\n}\n\nSee Also\nCreating a text field with a value\ninit<F>(LocalizedStringKey, value: Binding<F.FormatInput>, format: F, prompt: Text?)\nCreates a text field that applies a format style to a bound value, with a label generated from a localized title string.\nAvailable when Label is Text.\ninit<S, F>(S, value: Binding<F.FormatInput>, format: F, prompt: Text?)\nCreates a text field that applies a format style to a bound value, with a label generated from a title string.\nAvailable when Label is Text.\ninit<F>(value: Binding<F.FormatInput>, format: F, prompt: Text?, label: () -> Label)\nCreates a text field that applies a format style to a bound value, with a label generated from a view builder.\nAvailable when Label conforms to View.\ninit<S, V>(S, value: Binding<V>, formatter: Formatter)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter, prompt: Text?)\nCreates a text field that applies a formatter to a bound value, with a label generated from a localized title string.\nAvailable when Label is Text.\ninit<S, V>(S, value: Binding<V>, formatter: Formatter, prompt: Text?)\nCreates a text field that applies a formatter to a bound value, with a label generated from a title string.\nAvailable when Label is Text.\ninit<V>(value: Binding<V>, formatter: Formatter, prompt: Text?, label: () -> Label)\nCreates a text field that applies a formatter to a bound optional value, with a label generated from a view builder.\nAvailable when Label conforms to View."
    },
    {
        "title": "Deprecated initializers",
        "url": "https://developer.apple.com/documentation/swiftui/textfield-deprecated",
        "html": "Overview\n\nUse view modifiers to specify change and commit behaviors for a text field when replacing these initializers. Use the onSubmit(of:_:) view modifier to get the behavior provided by the onCommit parameter. Use focused(_:equals:) and FocusState to get the behavior provided by the onEditingChanged parameter.\n\nTopics\nCreating a text field with a string\ninit(LocalizedStringKey, text: Binding<String>, onEditingChanged: (Bool) -> Void, onCommit: () -> Void)\nCreates a text field with a text label generated from a localized title string.\nAvailable when Label is Text.\nDeprecated\ninit<S>(S, text: Binding<String>, onEditingChanged: (Bool) -> Void, onCommit: () -> Void)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text.\nDeprecated\ninit<S>(S, text: Binding<String>, onCommit: () -> Void)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, text: Binding<String>, onCommit: () -> Void)\nCreates a text field with a text label generated from a localized title string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, text: Binding<String>, onEditingChanged: (Bool) -> Void)\nCreates a text field with a text label generated from a localized title string.\nAvailable when Label is Text.\ninit<S>(S, text: Binding<String>, onEditingChanged: (Bool) -> Void)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text.\nCreating a text field with a value\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter, onEditingChanged: (Bool) -> Void, onCommit: () -> Void)\nCreates an instance which binds over an arbitrary type, T.\nAvailable when Label is Text.\nDeprecated\ninit<S, V>(S, value: Binding<V>, formatter: Formatter, onEditingChanged: (Bool) -> Void, onCommit: () -> Void)\nCreates an instance which binds over an arbitrary type, T.\nAvailable when Label is Text.\nDeprecated\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter, onCommit: () -> Void)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<S, V>(S, value: Binding<V>, formatter: Formatter, onCommit: () -> Void)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter, onEditingChanged: (Bool) -> Void)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<S, V>(S, value: Binding<V>, formatter: Formatter, onEditingChanged: (Bool) -> Void)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text."
    },
    {
        "title": "buildExpression(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/keyframesbuilder/buildexpression(_:)-3jslc",
        "html": "See Also\nBuilding keyframes\nstatic func buildArray([some KeyframeTrackContent<Value>]) -> some KeyframeTrackContent<Value>\nstatic func buildBlock() -> some Keyframes<Value>\nstatic func buildBlock() -> some KeyframeTrackContent<Value>\nstatic func buildEither<First, Second>(first: First) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildEither<First, Second>(second: Second) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildExpression<K>(K) -> K\nstatic func buildFinalResult<Content>(Content) -> KeyframeTrack<Value, Value, Content>\nstatic func buildFinalResult<Content>(Content) -> Content\nstatic func buildPartialBlock(accumulated: some KeyframeTrackContent<Value>, next: some KeyframeTrackContent<Value>) -> some KeyframeTrackContent<Value>\nstatic func buildPartialBlock(accumulated: some Keyframes<Value>, next: some Keyframes<Value>) -> some Keyframes<Value>\nstatic func buildPartialBlock<Content>(first: Content) -> Content\nstatic func buildPartialBlock<K>(first: K) -> K"
    },
    {
        "title": "init(_:value:formatter:prompt:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(_:value:formatter:prompt:)-8xa65",
        "html": "Parameters\ntitle\n\nThe title of the text field, describing its purpose.\n\nvalue\n\nThe underlying value to edit.\n\nformatter\n\nA formatter to use when converting between the string the user edits and the underlying value of type V. If formatter can\u2019t perform the conversion, the text field doesn\u2019t modify binding.value.\n\nprompt\n\nA Text which provides users with guidance on what to enter into the text field.\n\nDiscussion\n\nUse this initializer to create a text field that binds to a bound value, using a Formatter to convert to and from this type. Changes to the bound value update the string displayed by the text field. Editing the text field updates the bound value, as long as the formatter can parse the text. If the format style can\u2019t parse the input, the bound value remains unchanged.\n\nUse the onSubmit(of:_:) modifier to invoke an action whenever the user submits this text field.\n\nThe following example uses a Double as the bound value, and a NumberFormatter instance to convert to and from a string representation. The formatter uses the NumberFormatter.Style.decimal style, to allow entering a fractional part. As the user types, the bound value updates, which in turn updates three Text views that use different format styles. If the user enters text that doesn\u2019t represent a valid Double, the bound value doesn\u2019t update.\n\n@State private var label = \"Double\"\n@State private var myDouble: Double = 0.673\n@State private var numberFormatter: NumberFormatter = {\n    var nf = NumberFormatter()\n    nf.numberStyle = .decimal\n    return nf\n}()\n\n\nvar body: some View {\n    VStack {\n        TextField(\n            label,\n            value: $myDouble,\n            formatter: numberFormatter\n        )\n        Text(myDouble, format: .number)\n        Text(myDouble, format: .number.precision(.significantDigits(5)))\n        Text(myDouble, format: .number.notation(.scientific))\n    }\n}\n\nSee Also\nCreating a text field with a value\ninit<F>(LocalizedStringKey, value: Binding<F.FormatInput>, format: F, prompt: Text?)\nCreates a text field that applies a format style to a bound value, with a label generated from a localized title string.\nAvailable when Label is Text.\ninit<S, F>(S, value: Binding<F.FormatInput>, format: F, prompt: Text?)\nCreates a text field that applies a format style to a bound value, with a label generated from a title string.\nAvailable when Label is Text.\ninit<F>(value: Binding<F.FormatInput>, format: F, prompt: Text?, label: () -> Label)\nCreates a text field that applies a format style to a bound value, with a label generated from a view builder.\nAvailable when Label conforms to View.\ninit<S, V>(S, value: Binding<V>, formatter: Formatter)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter, prompt: Text?)\nCreates a text field that applies a formatter to a bound value, with a label generated from a localized title string.\nAvailable when Label is Text.\ninit<V>(value: Binding<V>, formatter: Formatter, prompt: Text?, label: () -> Label)\nCreates a text field that applies a formatter to a bound optional value, with a label generated from a view builder.\nAvailable when Label conforms to View."
    },
    {
        "title": "foregroundColor(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/foregroundcolor(_:)",
        "html": "Deprecated\n\nUse foregroundStyle(_:) instead.\n\nParameters\ncolor\n\nThe color to use when displaying this text.\n\nReturn Value\n\nA text view that uses the color value you supply.\n\nDiscussion\n\nUse this method to change the color of the text rendered by a text view.\n\nFor example, you can display the names of the colors red, green, and blue in their respective colors:\n\nHStack {\n    Text(\"Red\").foregroundColor(.red)\n    Text(\"Green\").foregroundColor(.green)\n    Text(\"Blue\").foregroundColor(.blue)\n}\n"
    },
    {
        "title": "symbolEffect(_:options:)",
        "url": "https://developer.apple.com/documentation/swiftui/contenttransition/symboleffect(_:options:)",
        "html": "Parameters\nconfig\n\nthe animation configuration value.\n\nReturn Value\n\na new content transition.\n\nSee Also\nGetting content transitions\nstatic let identity: ContentTransition\nThe identity content transition, which indicates that content changes shouldn\u2019t animate.\nstatic let interpolate: ContentTransition\nA content transition that indicates the views attempt to interpolate their contents during transitions, where appropriate.\nstatic func numericText(countsDown: Bool) -> ContentTransition\nCreates a content transition intended to be used with Text views displaying numeric text. In certain environments changes to the text will enable a nonstandard transition tailored to numeric characters that count up or down.\nstatic func numericText(value: Double) -> ContentTransition\nCreates a content transition intended to be used with Text views displaying numbers.\nstatic let opacity: ContentTransition\nA content transition that indicates content fades from transparent to opaque on insertion, and from opaque to transparent on removal.\nstatic var symbolEffect: ContentTransition\nA content transition that applies the default symbol effect transition to symbol images within the inserted or removed view hierarchy. Other views are unaffected by this transition."
    },
    {
        "title": "value(target:initialVelocity:time:)",
        "url": "https://developer.apple.com/documentation/swiftui/spring/value(target:initialvelocity:time:)",
        "html": "See Also\nGetting spring state\nfunc value<V>(fromValue: V, toValue: V, initialVelocity: V, time: TimeInterval) -> V\nCalculates the value of the spring at a given time for a starting and ending value for the spring to travel.\nfunc velocity<V>(target: V, initialVelocity: V, time: TimeInterval) -> V\nCalculates the velocity of the spring at a given time given a target amount of change.\nfunc velocity<V>(fromValue: V, toValue: V, initialVelocity: V, time: TimeInterval) -> V\nCalculates the velocity of the spring at a given time given a starting and ending value for the spring to travel."
    },
    {
        "title": "response",
        "url": "https://developer.apple.com/documentation/swiftui/spring/response",
        "html": "See Also\nGetting spring characteristics\nvar bounce: Double\nHow bouncy the spring is.\nvar damping: Double\nDefines how the spring\u2019s motion should be damped due to the forces of friction.\nvar dampingRatio: Double\nThe amount of drag applied, as a fraction of the amount needed to produce critical damping.\nvar duration: TimeInterval\nThe perceptual duration, which defines the pace of the spring.\nvar mass: Double\nThe mass of the object attached to the end of the spring.\nvar settlingDuration: TimeInterval\nThe estimated duration required for the spring system to be considered at rest.\nvar stiffness: Double\nThe spring stiffness coefficient."
    },
    {
        "title": "snappy",
        "url": "https://developer.apple.com/documentation/swiftui/spring/snappy",
        "html": "See Also\nGetting built-in springs\nstatic var bouncy: Spring\nA spring with a predefined duration and higher amount of bounce.\nstatic func bouncy(duration: TimeInterval, extraBounce: Double) -> Spring\nA spring with a predefined duration and higher amount of bounce that can be tuned.\nstatic var smooth: Spring\nA smooth spring with a predefined duration and no bounce.\nstatic func smooth(duration: TimeInterval, extraBounce: Double) -> Spring\nA smooth spring with a predefined duration and no bounce that can be tuned.\nstatic func snappy(duration: TimeInterval, extraBounce: Double) -> Spring\nA spring with a predefined duration and small amount of bounce that feels more snappy and can be tuned."
    },
    {
        "title": "snappy(duration:extraBounce:)",
        "url": "https://developer.apple.com/documentation/swiftui/spring/snappy(duration:extrabounce:)",
        "html": "Parameters\nduration\n\nThe perceptual duration, which defines the pace of the spring. This is approximately equal to the settling duration, but for very bouncy springs, will be the duration of the period of oscillation for the spring.\n\nextraBounce\n\nHow much additional bounciness should be added to the base bounce of 0.15.\n\nSee Also\nGetting built-in springs\nstatic var bouncy: Spring\nA spring with a predefined duration and higher amount of bounce.\nstatic func bouncy(duration: TimeInterval, extraBounce: Double) -> Spring\nA spring with a predefined duration and higher amount of bounce that can be tuned.\nstatic var smooth: Spring\nA smooth spring with a predefined duration and no bounce.\nstatic func smooth(duration: TimeInterval, extraBounce: Double) -> Spring\nA smooth spring with a predefined duration and no bounce that can be tuned.\nstatic var snappy: Spring\nA spring with a predefined duration and small amount of bounce that feels more snappy."
    },
    {
        "title": "force(fromValue:toValue:position:velocity:)",
        "url": "https://developer.apple.com/documentation/swiftui/spring/force(fromvalue:tovalue:position:velocity:)",
        "html": "Discussion\n\nThis value is in units of the vector type per second squared.\n\nSee Also\nCalculating forces and durations\nfunc force<V>(target: V, position: V, velocity: V) -> V\nCalculates the force upon the spring given a current position, target, and velocity amount of change.\nfunc settlingDuration<V>(target: V, initialVelocity: V, epsilon: Double) -> TimeInterval\nThe estimated duration required for the spring system to be considered at rest.\nfunc settlingDuration<V>(fromValue: V, toValue: V, initialVelocity: V, epsilon: Double) -> TimeInterval\nThe estimated duration required for the spring system to be considered at rest."
    },
    {
        "title": "settlingDuration(target:initialVelocity:epsilon:)",
        "url": "https://developer.apple.com/documentation/swiftui/spring/settlingduration(target:initialvelocity:epsilon:)",
        "html": "Discussion\n\nThe epsilon value specifies the threshhold for how small all subsequent values need to be before the spring is considered to have settled.\n\nSee Also\nCalculating forces and durations\nfunc force<V>(target: V, position: V, velocity: V) -> V\nCalculates the force upon the spring given a current position, target, and velocity amount of change.\nfunc force<V>(fromValue: V, toValue: V, position: V, velocity: V) -> V\nCalculates the force upon the spring given a current position, velocity, and divisor from the starting and end values for the spring to travel.\nfunc settlingDuration<V>(fromValue: V, toValue: V, initialVelocity: V, epsilon: Double) -> TimeInterval\nThe estimated duration required for the spring system to be considered at rest."
    },
    {
        "title": "damping",
        "url": "https://developer.apple.com/documentation/swiftui/spring/damping",
        "html": "Discussion\n\nReducing this value reduces the energy loss with each oscillation: the spring will overshoot its destination. Increasing the value increases the energy loss with each duration: there will be fewer and smaller oscillations.\n\nSee Also\nGetting spring characteristics\nvar bounce: Double\nHow bouncy the spring is.\nvar dampingRatio: Double\nThe amount of drag applied, as a fraction of the amount needed to produce critical damping.\nvar duration: TimeInterval\nThe perceptual duration, which defines the pace of the spring.\nvar mass: Double\nThe mass of the object attached to the end of the spring.\nvar response: Double\nThe stiffness of the spring, defined as an approximate duration in seconds.\nvar settlingDuration: TimeInterval\nThe estimated duration required for the spring system to be considered at rest.\nvar stiffness: Double\nThe spring stiffness coefficient."
    },
    {
        "title": "value(fromValue:toValue:initialVelocity:time:)",
        "url": "https://developer.apple.com/documentation/swiftui/spring/value(fromvalue:tovalue:initialvelocity:time:)",
        "html": "See Also\nGetting spring state\nfunc value<V>(target: V, initialVelocity: V, time: TimeInterval) -> V\nCalculates the value of the spring at a given time given a target amount of change.\nfunc velocity<V>(target: V, initialVelocity: V, time: TimeInterval) -> V\nCalculates the velocity of the spring at a given time given a target amount of change.\nfunc velocity<V>(fromValue: V, toValue: V, initialVelocity: V, time: TimeInterval) -> V\nCalculates the velocity of the spring at a given time given a starting and ending value for the spring to travel."
    },
    {
        "title": "smooth(duration:extraBounce:)",
        "url": "https://developer.apple.com/documentation/swiftui/spring/smooth(duration:extrabounce:)",
        "html": "Parameters\nduration\n\nThe perceptual duration, which defines the pace of the spring. This is approximately equal to the settling duration, but for very bouncy springs, will be the duration of the period of oscillation for the spring.\n\nextraBounce\n\nHow much additional bounce should be added to the base bounce of 0.\n\nSee Also\nGetting built-in springs\nstatic var bouncy: Spring\nA spring with a predefined duration and higher amount of bounce.\nstatic func bouncy(duration: TimeInterval, extraBounce: Double) -> Spring\nA spring with a predefined duration and higher amount of bounce that can be tuned.\nstatic var smooth: Spring\nA smooth spring with a predefined duration and no bounce.\nstatic var snappy: Spring\nA spring with a predefined duration and small amount of bounce that feels more snappy.\nstatic func snappy(duration: TimeInterval, extraBounce: Double) -> Spring\nA spring with a predefined duration and small amount of bounce that feels more snappy and can be tuned."
    },
    {
        "title": "settlingDuration",
        "url": "https://developer.apple.com/documentation/swiftui/spring/settlingduration",
        "html": "Discussion\n\nThis uses a target of 1.0, an initialVelocity of 0, and an epsilon of 0.001.\n\nSee Also\nGetting spring characteristics\nvar bounce: Double\nHow bouncy the spring is.\nvar damping: Double\nDefines how the spring\u2019s motion should be damped due to the forces of friction.\nvar dampingRatio: Double\nThe amount of drag applied, as a fraction of the amount needed to produce critical damping.\nvar duration: TimeInterval\nThe perceptual duration, which defines the pace of the spring.\nvar mass: Double\nThe mass of the object attached to the end of the spring.\nvar response: Double\nThe stiffness of the spring, defined as an approximate duration in seconds.\nvar stiffness: Double\nThe spring stiffness coefficient."
    },
    {
        "title": "bounce",
        "url": "https://developer.apple.com/documentation/swiftui/spring/bounce",
        "html": "Discussion\n\nA value of 0 indicates no bounces (a critically damped spring), positive values indicate increasing amounts of bounciness up to a maximum of 1.0 (corresponding to undamped oscillation), and negative values indicate overdamped springs with a minimum value of -1.0.\n\nSee Also\nGetting spring characteristics\nvar damping: Double\nDefines how the spring\u2019s motion should be damped due to the forces of friction.\nvar dampingRatio: Double\nThe amount of drag applied, as a fraction of the amount needed to produce critical damping.\nvar duration: TimeInterval\nThe perceptual duration, which defines the pace of the spring.\nvar mass: Double\nThe mass of the object attached to the end of the spring.\nvar response: Double\nThe stiffness of the spring, defined as an approximate duration in seconds.\nvar settlingDuration: TimeInterval\nThe estimated duration required for the spring system to be considered at rest.\nvar stiffness: Double\nThe spring stiffness coefficient."
    },
    {
        "title": "tracksVelocity",
        "url": "https://developer.apple.com/documentation/swiftui/transaction/tracksvelocity",
        "html": "Discussion\n\nThis property can be enabled in an interactive context to track velocity during a user interaction so that when the interaction ends, an animation can use the accumulated velocities to create animations that preserve them. This tracking is mutually exclusive with an animation being used during a view change, since if there is an animation, it is responsible for managing its own velocity.\n\nGesture onChanged and updating callbacks automatically set this property to true.\n\nThis example shows an interaction which applies changes, tracking velocity until the final change, which applies an animation (which will start with the velocity that was tracked during the previous changes). These changes could come from a server or from an interactive control like a slider.\n\nfunc receiveChange(change: ChangeInfo) {\n    var transaction = Transaction()\n    if change.isFinal {\n        transaction.animation = .spring\n    } else {\n        transaction.tracksVelocity = true\n    }\n    withTransaction(transaction) {\n        state.applyChange(change)\n    }\n}\n\nSee Also\nGetting information about a transaction\nvar isContinuous: Bool\nA Boolean value that indicates whether the transaction originated from an action that produces a sequence of values.\nvar scrollTargetAnchor: UnitPoint?\nThe preferred alignment of the view within a scroll view\u2019s visible region when scrolling to a view.\nsubscript<K>(K.Type) -> K.Value\nAccesses the transaction value associated with a custom key."
    },
    {
        "title": "duration",
        "url": "https://developer.apple.com/documentation/swiftui/spring/duration",
        "html": "See Also\nGetting spring characteristics\nvar bounce: Double\nHow bouncy the spring is.\nvar damping: Double\nDefines how the spring\u2019s motion should be damped due to the forces of friction.\nvar dampingRatio: Double\nThe amount of drag applied, as a fraction of the amount needed to produce critical damping.\nvar mass: Double\nThe mass of the object attached to the end of the spring.\nvar response: Double\nThe stiffness of the spring, defined as an approximate duration in seconds.\nvar settlingDuration: TimeInterval\nThe estimated duration required for the spring system to be considered at rest.\nvar stiffness: Double\nThe spring stiffness coefficient."
    },
    {
        "title": "update(value:velocity:target:deltaTime:)",
        "url": "https://developer.apple.com/documentation/swiftui/spring/update(value:velocity:target:deltatime:)",
        "html": "Parameters\nvalue\n\nThe current value of the spring.\n\nvelocity\n\nThe current velocity of the spring.\n\ntarget\n\nThe target that value is moving towards.\n\ndeltaTime\n\nThe amount of time that has passed since the spring was at the position specified by value."
    },
    {
        "title": "subscript(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/transaction/subscript(_:)",
        "html": "Overview\n\nCreate custom transaction values by defining a key that conforms to the TransactionKey protocol, and then using that key with the subscript operator of the Transaction structure to get and set a value for that key:\n\nprivate struct MyTransactionKey: TransactionKey {\n    static let defaultValue = false\n}\n\n\nextension Transaction {\n    var myCustomValue: Bool {\n        get { self[MyTransactionKey.self] }\n        set { self[MyTransactionKey.self] = newValue }\n    }\n}\n\nSee Also\nGetting information about a transaction\nvar isContinuous: Bool\nA Boolean value that indicates whether the transaction originated from an action that produces a sequence of values.\nvar scrollTargetAnchor: UnitPoint?\nThe preferred alignment of the view within a scroll view\u2019s visible region when scrolling to a view.\nvar tracksVelocity: Bool\nWhether this transaction will track the velocity of any animatable properties that change."
    },
    {
        "title": "linear",
        "url": "https://developer.apple.com/documentation/swiftui/unitcurve/linear",
        "html": "Discussion\n\nAs the linear curve is a straight line from (0, 0) to (1, 1), the output progress is always equal to the input progress, and the velocity is always equal to 1.0."
    },
    {
        "title": "speechAlwaysIncludesPunctuation(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/speechalwaysincludespunctuation(_:)",
        "html": "Parameters\nvalue\n\nA Boolean value that you set to true if VoiceOver should speak all punctuation in the text. Defaults to true.\n\nDiscussion\n\nUse this modifier to control whether the system speaks punctuation characters in the text. You might use this for code or other text where the punctuation is relevant, or where you want VoiceOver to speak a verbatim transcription of the text you provide. For example, given the text:\n\nText(\"All the world's a stage, \" +\n     \"And all the men and women merely players;\")\n     .speechAlwaysIncludesPunctuation()\n\n\nVoiceOver would speak \u201cAll the world apostrophe s a stage comma and all the men and women merely players semicolon\u201d.\n\nBy default, VoiceOver voices punctuation based on surrounding context.\n\nSee Also\nConfiguring voiceover\nfunc speechAdjustedPitch(Double) -> Text\nRaises or lowers the pitch of spoken text.\nfunc speechAnnouncementsQueued(Bool) -> Text\nControls whether to queue pending announcements behind existing speech rather than interrupting speech in progress.\nfunc speechSpellsOutCharacters(Bool) -> Text\nSets whether VoiceOver should speak the contents of the text view character by character."
    },
    {
        "title": "speechAnnouncementsQueued(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/speechannouncementsqueued(_:)",
        "html": "Parameters\nvalue\n\nA Boolean value that determines if VoiceOver speaks changes to text immediately or enqueues them behind existing speech. Defaults to true.\n\nDiscussion\n\nUse this modifier when you want affect the order in which the accessibility system delivers spoken text. Announcements can occur automatically when the label or value of an accessibility element changes.\n\nSee Also\nConfiguring voiceover\nfunc speechAdjustedPitch(Double) -> Text\nRaises or lowers the pitch of spoken text.\nfunc speechAlwaysIncludesPunctuation(Bool) -> Text\nSets whether VoiceOver should always speak all punctuation in the text view.\nfunc speechSpellsOutCharacters(Bool) -> Text\nSets whether VoiceOver should speak the contents of the text view character by character."
    },
    {
        "title": "typesettingLanguage(_:isEnabled:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/typesettinglanguage(_:isenabled:)-85e9h",
        "html": "Parameters\nlanguage\n\nThe language to use for typesetting.\n\nisEnabled\n\nA Boolean value that indicates whether text language is added\n\nReturn Value\n\nText with the typesetting language set to the value you supply.\n\nDiscussion\n\nIn some cases Text may contain text of a particular language which doesn\u2019t match the device UI language. In that case it\u2019s useful to specify a language so line height, line breaking and spacing will respect the script used for that language. For example:\n\nText(verbatim: \"\u0e41\u0e2d\u0e1b\u0e40\u0e1b\u0e34\u0e25\").typesettingLanguage(\n    .explicit(.init(languageCode: .thai)))\n\n\nNote: this language does not affect text localized localization.\n\nSee Also\nLocalizing text\nfunc typesettingLanguage(Locale.Language, isEnabled: Bool) -> Text\nSpecifies the language for typesetting."
    },
    {
        "title": "speechAdjustedPitch(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/speechadjustedpitch(_:)",
        "html": "Parameters\nvalue\n\nThe amount to raise or lower the pitch. Values between -1 and 0 result in a lower pitch while values between 0 and 1 result in a higher pitch. The method clamps values to the range -1 to 1.\n\nDiscussion\n\nUse this modifier when you want to change the pitch of spoken text. The value indicates how much higher or lower to change the pitch.\n\nSee Also\nConfiguring voiceover\nfunc speechAlwaysIncludesPunctuation(Bool) -> Text\nSets whether VoiceOver should always speak all punctuation in the text view.\nfunc speechAnnouncementsQueued(Bool) -> Text\nControls whether to queue pending announcements behind existing speech rather than interrupting speech in progress.\nfunc speechSpellsOutCharacters(Bool) -> Text\nSets whether VoiceOver should speak the contents of the text view character by character."
    },
    {
        "title": "Text.LineStyle",
        "url": "https://developer.apple.com/documentation/swiftui/text/linestyle",
        "html": "Overview\n\nUse this type to specify underlineStyle and strikethroughStyle SwiftUI attributes of an AttributedString.\n\nTopics\nGetting text line styles\nstatic let single: Text.LineStyle\nDraw a single solid line.\nCreating a text line style\ninit?(nsUnderlineStyle: NSUnderlineStyle)\nCreates a Text.LineStyle from NSUnderlineStyle.\ninit(pattern: Text.LineStyle.Pattern, color: Color?)\nCreates a line style.\nstruct Pattern\nThe pattern, that the line has.\nRelationships\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nStyling the view\u2019s text\nfunc foregroundStyle<S>(S) -> Text\nSets the style of the text displayed by this view.\nfunc bold() -> Text\nApplies a bold font weight to the text.\nfunc bold(Bool) -> Text\nApplies a bold font weight to the text.\nfunc italic() -> Text\nApplies italics to the text.\nfunc italic(Bool) -> Text\nApplies italics to the text.\nfunc strikethrough(Bool, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc underline(Bool, color: Color?) -> Text\nApplies an underline to the text.\nfunc underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies an underline to the text.\nfunc monospaced(Bool) -> Text\nModifies the font of the text to use the fixed-width variant of the current font, if possible.\nfunc monospacedDigit() -> Text\nModifies the text view\u2019s font to use fixed-width digits, while leaving other characters proportionally spaced.\nfunc kerning(CGFloat) -> Text\nSets the spacing, or kerning, between characters.\nfunc tracking(CGFloat) -> Text\nSets the tracking for the text.\nfunc baselineOffset(CGFloat) -> Text\nSets the vertical offset for the text relative to its baseline.\nenum Case\nA scheme for transforming the capitalization of characters within text.\nstruct DateStyle\nA predefined style used to display a Date."
    },
    {
        "title": "Text.DateStyle",
        "url": "https://developer.apple.com/documentation/swiftui/text/datestyle",
        "html": "Topics\nGetting text date styles\nstatic let date: Text.DateStyle\nA style displaying a date.\nstatic let offset: Text.DateStyle\nA style displaying a date as offset from now.\nstatic let relative: Text.DateStyle\nA style displaying a date as relative to now.\nstatic let time: Text.DateStyle\nA style displaying only the time component for a date.\nstatic let timer: Text.DateStyle\nA style displaying a date as timer counting from now.\nRelationships\nConforms To\nDecodable\nEncodable\nEquatable\nSendable\nSee Also\nStyling the view\u2019s text\nfunc foregroundStyle<S>(S) -> Text\nSets the style of the text displayed by this view.\nfunc bold() -> Text\nApplies a bold font weight to the text.\nfunc bold(Bool) -> Text\nApplies a bold font weight to the text.\nfunc italic() -> Text\nApplies italics to the text.\nfunc italic(Bool) -> Text\nApplies italics to the text.\nfunc strikethrough(Bool, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc underline(Bool, color: Color?) -> Text\nApplies an underline to the text.\nfunc underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies an underline to the text.\nfunc monospaced(Bool) -> Text\nModifies the font of the text to use the fixed-width variant of the current font, if possible.\nfunc monospacedDigit() -> Text\nModifies the text view\u2019s font to use fixed-width digits, while leaving other characters proportionally spaced.\nfunc kerning(CGFloat) -> Text\nSets the spacing, or kerning, between characters.\nfunc tracking(CGFloat) -> Text\nSets the tracking for the text.\nfunc baselineOffset(CGFloat) -> Text\nSets the vertical offset for the text relative to its baseline.\nenum Case\nA scheme for transforming the capitalization of characters within text.\nstruct LineStyle\nDescription of the style used to draw the line for StrikethroughStyleAttribute and UnderlineStyleAttribute."
    },
    {
        "title": "baselineOffset(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/baselineoffset(_:)",
        "html": "Parameters\nbaselineOffset\n\nThe amount to shift the text vertically (up or down) relative to its baseline.\n\nReturn Value\n\nText that\u2019s above or below its baseline.\n\nDiscussion\n\nChange the baseline offset to move the text in the view (in points) up or down relative to its baseline. The bounds of the view expand to contain the moved text.\n\nHStack(alignment: .top) {\n    Text(\"Hello\")\n        .baselineOffset(-10)\n        .border(Color.red)\n    Text(\"Hello\")\n        .border(Color.green)\n    Text(\"Hello\")\n        .baselineOffset(10)\n        .border(Color.blue)\n}\n.background(Color(white: 0.9))\n\n\nBy drawing a border around each text view, you can see how the text moves, and how that affects the view.\n\nThe first view, with a negative offset, grows downward to handle the lowered text. The last view, with a positive offset, grows upward. The enclosing HStack instance, shown in gray, ensures all the text views remain aligned at their top edge, regardless of the offset.\n\nSee Also\nStyling the view\u2019s text\nfunc foregroundStyle<S>(S) -> Text\nSets the style of the text displayed by this view.\nfunc bold() -> Text\nApplies a bold font weight to the text.\nfunc bold(Bool) -> Text\nApplies a bold font weight to the text.\nfunc italic() -> Text\nApplies italics to the text.\nfunc italic(Bool) -> Text\nApplies italics to the text.\nfunc strikethrough(Bool, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc underline(Bool, color: Color?) -> Text\nApplies an underline to the text.\nfunc underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies an underline to the text.\nfunc monospaced(Bool) -> Text\nModifies the font of the text to use the fixed-width variant of the current font, if possible.\nfunc monospacedDigit() -> Text\nModifies the text view\u2019s font to use fixed-width digits, while leaving other characters proportionally spaced.\nfunc kerning(CGFloat) -> Text\nSets the spacing, or kerning, between characters.\nfunc tracking(CGFloat) -> Text\nSets the tracking for the text.\nenum Case\nA scheme for transforming the capitalization of characters within text.\nstruct DateStyle\nA predefined style used to display a Date.\nstruct LineStyle\nDescription of the style used to draw the line for StrikethroughStyleAttribute and UnderlineStyleAttribute."
    },
    {
        "title": "Text.Case",
        "url": "https://developer.apple.com/documentation/swiftui/text/case",
        "html": "Topics\nGetting text cases\ncase lowercase\nDisplays text in all lowercase characters.\ncase uppercase\nDisplays text in all uppercase characters.\nRelationships\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nStyling the view\u2019s text\nfunc foregroundStyle<S>(S) -> Text\nSets the style of the text displayed by this view.\nfunc bold() -> Text\nApplies a bold font weight to the text.\nfunc bold(Bool) -> Text\nApplies a bold font weight to the text.\nfunc italic() -> Text\nApplies italics to the text.\nfunc italic(Bool) -> Text\nApplies italics to the text.\nfunc strikethrough(Bool, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc underline(Bool, color: Color?) -> Text\nApplies an underline to the text.\nfunc underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies an underline to the text.\nfunc monospaced(Bool) -> Text\nModifies the font of the text to use the fixed-width variant of the current font, if possible.\nfunc monospacedDigit() -> Text\nModifies the text view\u2019s font to use fixed-width digits, while leaving other characters proportionally spaced.\nfunc kerning(CGFloat) -> Text\nSets the spacing, or kerning, between characters.\nfunc tracking(CGFloat) -> Text\nSets the tracking for the text.\nfunc baselineOffset(CGFloat) -> Text\nSets the vertical offset for the text relative to its baseline.\nstruct DateStyle\nA predefined style used to display a Date.\nstruct LineStyle\nDescription of the style used to draw the line for StrikethroughStyleAttribute and UnderlineStyleAttribute."
    },
    {
        "title": "underline(_:color:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/underline(_:color:)",
        "html": "Parameters\nisActive\n\nA Boolean value that indicates whether the text has an underline.\n\ncolor\n\nThe color of the underline. If color is nil, the underline uses the default foreground color.\n\nReturn Value\n\nText with a line running along its baseline.\n\nSee Also\nStyling the view\u2019s text\nfunc foregroundStyle<S>(S) -> Text\nSets the style of the text displayed by this view.\nfunc bold() -> Text\nApplies a bold font weight to the text.\nfunc bold(Bool) -> Text\nApplies a bold font weight to the text.\nfunc italic() -> Text\nApplies italics to the text.\nfunc italic(Bool) -> Text\nApplies italics to the text.\nfunc strikethrough(Bool, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies an underline to the text.\nfunc monospaced(Bool) -> Text\nModifies the font of the text to use the fixed-width variant of the current font, if possible.\nfunc monospacedDigit() -> Text\nModifies the text view\u2019s font to use fixed-width digits, while leaving other characters proportionally spaced.\nfunc kerning(CGFloat) -> Text\nSets the spacing, or kerning, between characters.\nfunc tracking(CGFloat) -> Text\nSets the tracking for the text.\nfunc baselineOffset(CGFloat) -> Text\nSets the vertical offset for the text relative to its baseline.\nenum Case\nA scheme for transforming the capitalization of characters within text.\nstruct DateStyle\nA predefined style used to display a Date.\nstruct LineStyle\nDescription of the style used to draw the line for StrikethroughStyleAttribute and UnderlineStyleAttribute."
    },
    {
        "title": "strikethrough(_:pattern:color:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/strikethrough(_:pattern:color:)",
        "html": "Parameters\nisActive\n\nA Boolean value that indicates whether strikethrough is added. The default value is true.\n\npattern\n\nThe pattern of the line.\n\ncolor\n\nThe color of the strikethrough. If color is nil, the strikethrough uses the default foreground color.\n\nReturn Value\n\nText with a line through its center.\n\nSee Also\nStyling the view\u2019s text\nfunc foregroundStyle<S>(S) -> Text\nSets the style of the text displayed by this view.\nfunc bold() -> Text\nApplies a bold font weight to the text.\nfunc bold(Bool) -> Text\nApplies a bold font weight to the text.\nfunc italic() -> Text\nApplies italics to the text.\nfunc italic(Bool) -> Text\nApplies italics to the text.\nfunc strikethrough(Bool, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc underline(Bool, color: Color?) -> Text\nApplies an underline to the text.\nfunc underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies an underline to the text.\nfunc monospaced(Bool) -> Text\nModifies the font of the text to use the fixed-width variant of the current font, if possible.\nfunc monospacedDigit() -> Text\nModifies the text view\u2019s font to use fixed-width digits, while leaving other characters proportionally spaced.\nfunc kerning(CGFloat) -> Text\nSets the spacing, or kerning, between characters.\nfunc tracking(CGFloat) -> Text\nSets the tracking for the text.\nfunc baselineOffset(CGFloat) -> Text\nSets the vertical offset for the text relative to its baseline.\nenum Case\nA scheme for transforming the capitalization of characters within text.\nstruct DateStyle\nA predefined style used to display a Date.\nstruct LineStyle\nDescription of the style used to draw the line for StrikethroughStyleAttribute and UnderlineStyleAttribute."
    },
    {
        "title": "underline(_:pattern:color:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/underline(_:pattern:color:)",
        "html": "Parameters\nisActive\n\nA Boolean value that indicates whether underline styling is added. The default value is true.\n\npattern\n\nThe pattern of the line.\n\ncolor\n\nThe color of the underline. If color is nil, the underline uses the default foreground color.\n\nReturn Value\n\nText with a line running along its baseline.\n\nSee Also\nStyling the view\u2019s text\nfunc foregroundStyle<S>(S) -> Text\nSets the style of the text displayed by this view.\nfunc bold() -> Text\nApplies a bold font weight to the text.\nfunc bold(Bool) -> Text\nApplies a bold font weight to the text.\nfunc italic() -> Text\nApplies italics to the text.\nfunc italic(Bool) -> Text\nApplies italics to the text.\nfunc strikethrough(Bool, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc underline(Bool, color: Color?) -> Text\nApplies an underline to the text.\nfunc monospaced(Bool) -> Text\nModifies the font of the text to use the fixed-width variant of the current font, if possible.\nfunc monospacedDigit() -> Text\nModifies the text view\u2019s font to use fixed-width digits, while leaving other characters proportionally spaced.\nfunc kerning(CGFloat) -> Text\nSets the spacing, or kerning, between characters.\nfunc tracking(CGFloat) -> Text\nSets the tracking for the text.\nfunc baselineOffset(CGFloat) -> Text\nSets the vertical offset for the text relative to its baseline.\nenum Case\nA scheme for transforming the capitalization of characters within text.\nstruct DateStyle\nA predefined style used to display a Date.\nstruct LineStyle\nDescription of the style used to draw the line for StrikethroughStyleAttribute and UnderlineStyleAttribute."
    },
    {
        "title": "italic(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/italic(_:)",
        "html": "Parameters\nisActive\n\nA Boolean value that indicates whether italic styling is added.\n\nReturn Value\n\nItalic text.\n\nSee Also\nStyling the view\u2019s text\nfunc foregroundStyle<S>(S) -> Text\nSets the style of the text displayed by this view.\nfunc bold() -> Text\nApplies a bold font weight to the text.\nfunc bold(Bool) -> Text\nApplies a bold font weight to the text.\nfunc italic() -> Text\nApplies italics to the text.\nfunc strikethrough(Bool, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc underline(Bool, color: Color?) -> Text\nApplies an underline to the text.\nfunc underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies an underline to the text.\nfunc monospaced(Bool) -> Text\nModifies the font of the text to use the fixed-width variant of the current font, if possible.\nfunc monospacedDigit() -> Text\nModifies the text view\u2019s font to use fixed-width digits, while leaving other characters proportionally spaced.\nfunc kerning(CGFloat) -> Text\nSets the spacing, or kerning, between characters.\nfunc tracking(CGFloat) -> Text\nSets the tracking for the text.\nfunc baselineOffset(CGFloat) -> Text\nSets the vertical offset for the text relative to its baseline.\nenum Case\nA scheme for transforming the capitalization of characters within text.\nstruct DateStyle\nA predefined style used to display a Date.\nstruct LineStyle\nDescription of the style used to draw the line for StrikethroughStyleAttribute and UnderlineStyleAttribute."
    },
    {
        "title": "bold(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/bold(_:)",
        "html": "Parameters\nisActive\n\nA Boolean value that indicates whether text has bold styling.\n\nReturn Value\n\nBold text.\n\nSee Also\nStyling the view\u2019s text\nfunc foregroundStyle<S>(S) -> Text\nSets the style of the text displayed by this view.\nfunc bold() -> Text\nApplies a bold font weight to the text.\nfunc italic() -> Text\nApplies italics to the text.\nfunc italic(Bool) -> Text\nApplies italics to the text.\nfunc strikethrough(Bool, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc underline(Bool, color: Color?) -> Text\nApplies an underline to the text.\nfunc underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies an underline to the text.\nfunc monospaced(Bool) -> Text\nModifies the font of the text to use the fixed-width variant of the current font, if possible.\nfunc monospacedDigit() -> Text\nModifies the text view\u2019s font to use fixed-width digits, while leaving other characters proportionally spaced.\nfunc kerning(CGFloat) -> Text\nSets the spacing, or kerning, between characters.\nfunc tracking(CGFloat) -> Text\nSets the tracking for the text.\nfunc baselineOffset(CGFloat) -> Text\nSets the vertical offset for the text relative to its baseline.\nenum Case\nA scheme for transforming the capitalization of characters within text.\nstruct DateStyle\nA predefined style used to display a Date.\nstruct LineStyle\nDescription of the style used to draw the line for StrikethroughStyleAttribute and UnderlineStyleAttribute."
    },
    {
        "title": "foregroundStyle(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/foregroundstyle(_:)",
        "html": "Parameters\nstyle\n\nThe style to use when displaying this text.\n\nReturn Value\n\nA text view that uses the color value you supply.\n\nDiscussion\n\nUse this method to change the rendering style of the text rendered by a text view.\n\nFor example, you can display the names of the colors red, green, and blue in their respective colors:\n\nHStack {\n    Text(\"Red\").foregroundStyle(.red)\n    Text(\"Green\").foregroundStyle(.green)\n    Text(\"Blue\").foregroundStyle(.blue)\n}\n\n\nSee Also\nStyling the view\u2019s text\nfunc bold() -> Text\nApplies a bold font weight to the text.\nfunc bold(Bool) -> Text\nApplies a bold font weight to the text.\nfunc italic() -> Text\nApplies italics to the text.\nfunc italic(Bool) -> Text\nApplies italics to the text.\nfunc strikethrough(Bool, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc underline(Bool, color: Color?) -> Text\nApplies an underline to the text.\nfunc underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies an underline to the text.\nfunc monospaced(Bool) -> Text\nModifies the font of the text to use the fixed-width variant of the current font, if possible.\nfunc monospacedDigit() -> Text\nModifies the text view\u2019s font to use fixed-width digits, while leaving other characters proportionally spaced.\nfunc kerning(CGFloat) -> Text\nSets the spacing, or kerning, between characters.\nfunc tracking(CGFloat) -> Text\nSets the tracking for the text.\nfunc baselineOffset(CGFloat) -> Text\nSets the vertical offset for the text relative to its baseline.\nenum Case\nA scheme for transforming the capitalization of characters within text.\nstruct DateStyle\nA predefined style used to display a Date.\nstruct LineStyle\nDescription of the style used to draw the line for StrikethroughStyleAttribute and UnderlineStyleAttribute."
    },
    {
        "title": "fontWeight(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/fontweight(_:)",
        "html": "Parameters\nweight\n\nOne of the available font weights.\n\nReturn Value\n\nText that uses the font weight you specify.\n\nSee Also\nChoosing a font\nfunc font(Font?) -> Text\nSets the default font for text in the view.\nfunc fontDesign(Font.Design?) -> Text\nSets the font design of the text.\nfunc fontWidth(Font.Width?) -> Text\nSets the font width of the text."
    },
    {
        "title": "fontDesign(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/fontdesign(_:)",
        "html": "Parameters\ndesign\n\nOne of the available font designs.\n\nReturn Value\n\nText that uses the font design you specify.\n\nSee Also\nChoosing a font\nfunc font(Font?) -> Text\nSets the default font for text in the view.\nfunc fontWeight(Font.Weight?) -> Text\nSets the font weight of the text.\nfunc fontWidth(Font.Width?) -> Text\nSets the font width of the text."
    },
    {
        "title": "init(timerInterval:pauseTime:countsDown:showsHours:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/init(timerinterval:pausetime:countsdown:showshours:)",
        "html": "Parameters\ntimerInterval\n\nThe interval between where to run the timer.\n\npauseTime\n\nIf present, the date at which to pause the timer. The default is nil which indicates to never pause.\n\ncountsDown\n\nWhether to count up or down. The default is true.\n\nshowsHours\n\nWhether to include an hours component if there are more than 60 minutes left on the timer. The default is true.\n\nDiscussion\nText(\n    timerInterval: Date.now...Date(timeInterval: 12 * 60, since: .now))\n    pauseTime: Date.now + (10 * 60))\n\n\nThe example above shows a text that displays a timer counting down from \u201c12:00\u201d and will pause when reaching \u201c10:00\u201d."
    },
    {
        "title": "italic()",
        "url": "https://developer.apple.com/documentation/swiftui/text/italic()",
        "html": "Return Value\n\nItalic text.\n\nSee Also\nStyling the view\u2019s text\nfunc foregroundStyle<S>(S) -> Text\nSets the style of the text displayed by this view.\nfunc bold() -> Text\nApplies a bold font weight to the text.\nfunc bold(Bool) -> Text\nApplies a bold font weight to the text.\nfunc italic(Bool) -> Text\nApplies italics to the text.\nfunc strikethrough(Bool, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc underline(Bool, color: Color?) -> Text\nApplies an underline to the text.\nfunc underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies an underline to the text.\nfunc monospaced(Bool) -> Text\nModifies the font of the text to use the fixed-width variant of the current font, if possible.\nfunc monospacedDigit() -> Text\nModifies the text view\u2019s font to use fixed-width digits, while leaving other characters proportionally spaced.\nfunc kerning(CGFloat) -> Text\nSets the spacing, or kerning, between characters.\nfunc tracking(CGFloat) -> Text\nSets the tracking for the text.\nfunc baselineOffset(CGFloat) -> Text\nSets the vertical offset for the text relative to its baseline.\nenum Case\nA scheme for transforming the capitalization of characters within text.\nstruct DateStyle\nA predefined style used to display a Date.\nstruct LineStyle\nDescription of the style used to draw the line for StrikethroughStyleAttribute and UnderlineStyleAttribute."
    },
    {
        "title": "renderingMode(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/image/renderingmode(_:)",
        "html": "Parameters\nrenderingMode\n\nThe mode SwiftUI uses to render images.\n\nReturn Value\n\nA modified Image.\n\nDiscussion\n\nThe Image.TemplateRenderingMode enumeration has two cases: Image.TemplateRenderingMode.original and Image.TemplateRenderingMode.template. The original mode renders pixels as they appear in the original source image. Template mode renders all nontransparent pixels as the foreground color, which you can use for purposes like creating image masks.\n\nThe following example shows both rendering modes, as applied to an icon image of a green circle with darker green border:\n\nImage(\"dot_green\")\n    .renderingMode(.original)\nImage(\"dot_green\")\n    .renderingMode(.template)\n\n\nYou also use renderingMode to produce multicolored system graphics from the SF Symbols set. Use the Image.TemplateRenderingMode.original mode to apply a foreground color to all parts of the symbol except those that have a distinct color in the graphic. The following example shows three uses of the person.crop.circle.badge.plus symbol to achieve different effects:\n\nA default appearance with no foreground color or template rendering mode specified. The symbol appears all black in light mode, and all white in Dark Mode.\n\nThe multicolor behavior achieved by using original template rendering mode, along with a blue foreground color. This mode causes the graphic to override the foreground color for distinctive parts of the image, in this case the plus icon.\n\nA single-color template behavior achieved by using template rendering mode with a blue foreground color. This mode applies the foreground color to the entire image, regardless of the user\u2019s Appearance preferences.\n\nHStack {\n   Image(systemName: \"person.crop.circle.badge.plus\")\n   Image(systemName: \"person.crop.circle.badge.plus\")\n       .renderingMode(.original)\n       .foregroundColor(.blue)\n   Image(systemName: \"person.crop.circle.badge.plus\")\n       .renderingMode(.template)\n       .foregroundColor(.blue)\n}\n.font(.largeTitle)\n\n\nUse the SF Symbols app to find system images that offer the multicolor feature. Keep in mind that some multicolor symbols use both the foreground and accent colors.\n\nSee Also\nSpecifying rendering behavior\nfunc antialiased(Bool) -> Image\nSpecifies whether SwiftUI applies antialiasing when rendering the image.\nfunc symbolRenderingMode(SymbolRenderingMode?) -> Image\nSets the rendering mode for symbol images within this view.\nfunc interpolation(Image.Interpolation) -> Image\nSpecifies the current level of quality for rendering an image that requires interpolation.\nenum TemplateRenderingMode\nA type that indicates how SwiftUI renders images.\nenum Interpolation\nThe level of quality for rendering an image that requires interpolation, such as a scaled image."
    },
    {
        "title": "Image.DynamicRange",
        "url": "https://developer.apple.com/documentation/swiftui/image/dynamicrange",
        "html": "Topics\nGetting dynamic range values\nstatic let standard: Image.DynamicRange\nRestrict the image content dynamic range to the standard range.\nstatic let high: Image.DynamicRange\nAllow image content to use an unrestricted extended range.\nstatic let constrainedHigh: Image.DynamicRange\nAllow image content to use some extended range. This is appropriate for placing HDR content next to SDR content.\nRelationships\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nSpecifying dynamic range\nfunc allowedDynamicRange(Image.DynamicRange?) -> Image\nReturns a new image configured with the specified allowed dynamic range.\nvar allowedDynamicRange: Image.DynamicRange?\nThe allowed dynamic range for the view, or nil."
    },
    {
        "title": "isIdentity",
        "url": "https://developer.apple.com/documentation/swiftui/transitionphase/isidentity",
        "html": "Discussion\n\nThis is true in the identity phase.\n\nSee Also\nGetting phase characteristics\nvar value: Double\nA value that can be used to multiply effects that are applied differently depending on the phase."
    },
    {
        "title": "antialiased(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/image/antialiased(_:)",
        "html": "Parameters\nisAntialiased\n\nA Boolean value that specifies whether to allow antialiasing. Pass true to allow antialising, false otherwise.\n\nReturn Value\n\nAn image with the antialiasing behavior set.\n\nSee Also\nSpecifying rendering behavior\nfunc symbolRenderingMode(SymbolRenderingMode?) -> Image\nSets the rendering mode for symbol images within this view.\nfunc renderingMode(Image.TemplateRenderingMode?) -> Image\nIndicates whether SwiftUI renders an image as-is, or by using a different mode.\nfunc interpolation(Image.Interpolation) -> Image\nSpecifies the current level of quality for rendering an image that requires interpolation.\nenum TemplateRenderingMode\nA type that indicates how SwiftUI renders images.\nenum Interpolation\nThe level of quality for rendering an image that requires interpolation, such as a scaled image."
    },
    {
        "title": "init(_:formatter:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/init(_:formatter:)-1v7mr",
        "html": "Parameters\nsubject\n\nAn NSObject instance compatible with formatter.\n\nformatter\n\nA Formatter capable of converting subject into a string representation.\n\nDiscussion\n\nUse this initializer to create a text view that formats subject using formatter.\n\nSee Also\nCreating a text view with formatting\ninit<F>(F.FormatInput, format: F)\nCreates a text view that displays the formatted representation of a nonstring type supported by a corresponding format style.\ninit<Subject>(Subject, formatter: Formatter)\nCreates a text view that displays the formatted representation of a reference-convertible value."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/init(_:)-56n81",
        "html": "Parameters\ninterval\n\nThe date interval to display\n\nDiscussion\nText(DateInterval(start: event.startDate, duration: event.duration))\n\n\nExample output: 9:30AM - 3:30PM\n\nSee Also\nCreating a text view for a date\ninit(ClosedRange<Date>)\nCreates an instance that displays a localized range between two dates.\ninit(Date, style: Text.DateStyle)\nCreates an instance that displays localized dates and times using a specific style."
    },
    {
        "title": "init(_:style:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/init(_:style:)",
        "html": "Parameters\ndate\n\nThe target date to display.\n\nstyle\n\nThe style used when displaying a date.\n\nSee Also\nCreating a text view for a date\ninit(ClosedRange<Date>)\nCreates an instance that displays a localized range between two dates.\ninit(DateInterval)\nCreates an instance that displays a localized time interval."
    },
    {
        "title": "DatePickerStyleConfiguration",
        "url": "https://developer.apple.com/documentation/swiftui/datepickerstyleconfiguration",
        "html": "Topics\nEstablishing the date range\nvar minimumDate: Date?\nThe oldest selectable date.\nvar maximumDate: Date?\nThe most recent selectable date.\nLabeling the date picker\nlet label: DatePickerStyleConfiguration.Label\nA description of the DatePicker.\nstruct Label\nA type-erased label of a DatePicker.\nvar displayedComponents: DatePickerComponents\nThe date components that the user is able to view and edit.\nSelecting the date\nvar selection: Date\nThe date value being displayed and selected.\nvar $selection: Binding<Date>\nSee Also\nCreating custom date picker styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nReturns the appearance and interaction content for a DatePicker.\n\nRequired\n\ntypealias Configuration\nA type alias for the properties of a DatePicker.\nassociatedtype Body : View\nA view representing the appearance and interaction of a DatePicker.\n\nRequired"
    },
    {
        "title": "stepperField",
        "url": "https://developer.apple.com/documentation/swiftui/datepickerstyle/stepperfield",
        "html": "Discussion\n\nThis style is useful when space is constrained and users expect to make specific date and time selections.\n\nSee Also\nGetting built-in date picker styles\nstatic var automatic: DefaultDatePickerStyle\nThe default style for date pickers.\nAvailable when Self is DefaultDatePickerStyle.\nstatic var compact: CompactDatePickerStyle\nA date picker style that displays the components in a compact, textual format.\nAvailable when Self is CompactDatePickerStyle.\nstatic var field: FieldDatePickerStyle\nA date picker style that displays the components in an editable field.\nAvailable when Self is FieldDatePickerStyle.\nstatic var graphical: GraphicalDatePickerStyle\nA date picker style that displays an interactive calendar or clock.\nAvailable when Self is GraphicalDatePickerStyle.\nstatic var wheel: WheelDatePickerStyle\nA date picker style that displays each component as columns in a scrollable wheel.\nAvailable when Self is WheelDatePickerStyle."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/init(_:)-4k7ab",
        "html": "Parameters\ndates\n\nThe range of dates to display\n\nSee Also\nCreating a text view for a date\ninit(DateInterval)\nCreates an instance that displays a localized time interval.\ninit(Date, style: Text.DateStyle)\nCreates an instance that displays localized dates and times using a specific style."
    },
    {
        "title": "wheel",
        "url": "https://developer.apple.com/documentation/swiftui/datepickerstyle/wheel",
        "html": "See Also\nGetting built-in date picker styles\nstatic var automatic: DefaultDatePickerStyle\nThe default style for date pickers.\nAvailable when Self is DefaultDatePickerStyle.\nstatic var compact: CompactDatePickerStyle\nA date picker style that displays the components in a compact, textual format.\nAvailable when Self is CompactDatePickerStyle.\nstatic var field: FieldDatePickerStyle\nA date picker style that displays the components in an editable field.\nAvailable when Self is FieldDatePickerStyle.\nstatic var graphical: GraphicalDatePickerStyle\nA date picker style that displays an interactive calendar or clock.\nAvailable when Self is GraphicalDatePickerStyle.\nstatic var stepperField: StepperFieldDatePickerStyle\nA system style that displays the components in an editable field, with adjoining stepper that can increment/decrement the selected component.\nAvailable when Self is StepperFieldDatePickerStyle."
    },
    {
        "title": "init(nsImage:)",
        "url": "https://developer.apple.com/documentation/swiftui/image/init(nsimage:)",
        "html": "Parameters\nnsImage\n\nThe AppKit image to wrap with a SwiftUI Image. instance.\n\nSee Also\nCreating an image from another image\ninit(uiImage: UIImage)\nCreates a SwiftUI image from a UIKit image instance."
    },
    {
        "title": "field",
        "url": "https://developer.apple.com/documentation/swiftui/datepickerstyle/field",
        "html": "Discussion\n\nYou can use this style when space is constrained and users expect to make specific date and time selections. However, you should generally use stepperField instead of this style, unless your your app requires hiding the stepper.\n\nSee Also\nGetting built-in date picker styles\nstatic var automatic: DefaultDatePickerStyle\nThe default style for date pickers.\nAvailable when Self is DefaultDatePickerStyle.\nstatic var compact: CompactDatePickerStyle\nA date picker style that displays the components in a compact, textual format.\nAvailable when Self is CompactDatePickerStyle.\nstatic var graphical: GraphicalDatePickerStyle\nA date picker style that displays an interactive calendar or clock.\nAvailable when Self is GraphicalDatePickerStyle.\nstatic var stepperField: StepperFieldDatePickerStyle\nA system style that displays the components in an editable field, with adjoining stepper that can increment/decrement the selected component.\nAvailable when Self is StepperFieldDatePickerStyle.\nstatic var wheel: WheelDatePickerStyle\nA date picker style that displays each component as columns in a scrollable wheel.\nAvailable when Self is WheelDatePickerStyle."
    },
    {
        "title": "compact",
        "url": "https://developer.apple.com/documentation/swiftui/datepickerstyle/compact",
        "html": "Discussion\n\nUse this style when space is constrained and users expect to make specific date and time selections. Some variants may include rich editing controls in a pop up.\n\nSee Also\nGetting built-in date picker styles\nstatic var automatic: DefaultDatePickerStyle\nThe default style for date pickers.\nAvailable when Self is DefaultDatePickerStyle.\nstatic var field: FieldDatePickerStyle\nA date picker style that displays the components in an editable field.\nAvailable when Self is FieldDatePickerStyle.\nstatic var graphical: GraphicalDatePickerStyle\nA date picker style that displays an interactive calendar or clock.\nAvailable when Self is GraphicalDatePickerStyle.\nstatic var stepperField: StepperFieldDatePickerStyle\nA system style that displays the components in an editable field, with adjoining stepper that can increment/decrement the selected component.\nAvailable when Self is StepperFieldDatePickerStyle.\nstatic var wheel: WheelDatePickerStyle\nA date picker style that displays each component as columns in a scrollable wheel.\nAvailable when Self is WheelDatePickerStyle."
    },
    {
        "title": "init(text:)",
        "url": "https://developer.apple.com/documentation/swiftui/texteditor/init(text:)",
        "html": "Parameters\ntext\n\nA Binding to the variable containing the text to edit.\n\nDiscussion\n\nUse a TextEditor instance to create a view in which users can enter and edit long-form text.\n\nIn this example, the text editor renders gray text using the 13 point Helvetica Neue font with 5 points of spacing between each line:\n\nstruct TextEditingView: View {\n    @State private var fullText: String = \"This is some editable text...\"\n\n\n    var body: some View {\n        TextEditor(text: $fullText)\n            .foregroundColor(Color.gray)\n            .font(.custom(\"HelveticaNeue\", size: 13))\n            .lineSpacing(5)\n    }\n}\n\n\nYou can define the styling for the text within the view, including the text color, font, and line spacing. You define these styles by applying standard view modifiers to the view.\n\nThe default text editor doesn\u2019t support rich text, such as styling of individual elements within the editor\u2019s view. The styles you set apply globally to all text in the view."
    },
    {
        "title": "graphical",
        "url": "https://developer.apple.com/documentation/swiftui/datepickerstyle/graphical",
        "html": "Discussion\n\nThis style is useful when you want to allow browsing through days in a calendar, or when the look of a clock face is appropriate.\n\nSee Also\nGetting built-in date picker styles\nstatic var automatic: DefaultDatePickerStyle\nThe default style for date pickers.\nAvailable when Self is DefaultDatePickerStyle.\nstatic var compact: CompactDatePickerStyle\nA date picker style that displays the components in a compact, textual format.\nAvailable when Self is CompactDatePickerStyle.\nstatic var field: FieldDatePickerStyle\nA date picker style that displays the components in an editable field.\nAvailable when Self is FieldDatePickerStyle.\nstatic var stepperField: StepperFieldDatePickerStyle\nA system style that displays the components in an editable field, with adjoining stepper that can increment/decrement the selected component.\nAvailable when Self is StepperFieldDatePickerStyle.\nstatic var wheel: WheelDatePickerStyle\nA date picker style that displays each component as columns in a scrollable wheel.\nAvailable when Self is WheelDatePickerStyle."
    },
    {
        "title": "init(_:value:formatter:prompt:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(_:value:formatter:prompt:)-8kpfa",
        "html": "Parameters\ntitleKey\n\nThe key for the localized title of the text field, describing its purpose.\n\nvalue\n\nThe underlying value to edit.\n\nformatter\n\nA formatter to use when converting between the string the user edits and the underlying value of type V. If formatter can\u2019t perform the conversion, the text field doesn\u2019t modify binding.value.\n\nprompt\n\nA Text which provides users with guidance on what to enter into the text field.\n\nDiscussion\n\nUse this initializer to create a text field that binds to a bound value, using a Formatter to convert to and from this type. Changes to the bound value update the string displayed by the text field. Editing the text field updates the bound value, as long as the formatter can parse the text. If the format style can\u2019t parse the input, the bound value remains unchanged.\n\nUse the onSubmit(of:_:) modifier to invoke an action whenever the user submits this text field.\n\nThe following example uses a Double as the bound value, and a NumberFormatter instance to convert to and from a string representation. The formatter uses the NumberFormatter.Style.decimal style, to allow entering a fractional part. As the user types, the bound value updates, which in turn updates three Text views that use different format styles. If the user enters text that doesn\u2019t represent a valid Double, the bound value doesn\u2019t update.\n\n@State private var myDouble: Double = 0.673\n@State private var numberFormatter: NumberFormatter = {\n    var nf = NumberFormatter()\n    nf.numberStyle = .decimal\n    return nf\n}()\n\n\nvar body: some View {\n    VStack {\n        TextField(\n            \"Double\",\n            value: $myDouble,\n            formatter: numberFormatter\n        )\n        Text(myDouble, format: .number)\n        Text(myDouble, format: .number.precision(.significantDigits(5)))\n        Text(myDouble, format: .number.notation(.scientific))\n    }\n}\n\nSee Also\nCreating a text field with a value\ninit<F>(LocalizedStringKey, value: Binding<F.FormatInput>, format: F, prompt: Text?)\nCreates a text field that applies a format style to a bound value, with a label generated from a localized title string.\nAvailable when Label is Text.\ninit<S, F>(S, value: Binding<F.FormatInput>, format: F, prompt: Text?)\nCreates a text field that applies a format style to a bound value, with a label generated from a title string.\nAvailable when Label is Text.\ninit<F>(value: Binding<F.FormatInput>, format: F, prompt: Text?, label: () -> Label)\nCreates a text field that applies a format style to a bound value, with a label generated from a view builder.\nAvailable when Label conforms to View.\ninit<S, V>(S, value: Binding<V>, formatter: Formatter)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<S, V>(S, value: Binding<V>, formatter: Formatter, prompt: Text?)\nCreates a text field that applies a formatter to a bound value, with a label generated from a title string.\nAvailable when Label is Text.\ninit<V>(value: Binding<V>, formatter: Formatter, prompt: Text?, label: () -> Label)\nCreates a text field that applies a formatter to a bound optional value, with a label generated from a view builder.\nAvailable when Label conforms to View."
    },
    {
        "title": "init(text:prompt:axis:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(text:prompt:axis:label:)",
        "html": "Parameters\ntext\n\nThe text to display and edit.\n\nprompt\n\nA Text representing the prompt of the text field which provides users with guidance on what to type into the text field.\n\naxis\n\nThe axis in which to scroll text when it doesn\u2019t fit in the available space.\n\nlabel\n\nA view that describes the purpose of the text field.\n\nDiscussion\n\nSpecify a preferred axis in which the text field should scroll its content when it does not fit in the available space. Depending on the style of the field, this axis may not be respected.\n\nUse the onSubmit(of:_:) modifier to invoke an action whenever the user submits this text field.\n\nSee Also\nCreating a scrollable text field\ninit(LocalizedStringKey, text: Binding<String>, axis: Axis)\nCreates a text field with a preferred axis and a text label generated from a localized title string.\nAvailable when Label is Text.\ninit<S>(S, text: Binding<String>, axis: Axis)\nCreates a text field with a preferred axis and a text label generated from a title string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, text: Binding<String>, prompt: Text?, axis: Axis)\nCreates a text field with a preferred axis and a text label generated from a localized title string.\nAvailable when Label is Text.\ninit<S>(S, text: Binding<String>, prompt: Text?, axis: Axis)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:text:axis:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(_:text:axis:)-7n1bm",
        "html": "Parameters\ntitleKey\n\nThe key for the localized title of the text field, describing its purpose.\n\ntext\n\nThe text to display and edit.\n\naxis\n\nThe axis in which to scroll text when it doesn\u2019t fit in the available space.\n\nDiscussion\n\nSpecify a preferred axis in which the text field should scroll its content when it does not fit in the available space. Depending on the style of the field, this axis may not be respected.\n\nUse the onSubmit(of:_:) modifier to invoke an action whenever the user submits this text field.\n\nSee Also\nCreating a scrollable text field\ninit<S>(S, text: Binding<String>, axis: Axis)\nCreates a text field with a preferred axis and a text label generated from a title string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, text: Binding<String>, prompt: Text?, axis: Axis)\nCreates a text field with a preferred axis and a text label generated from a localized title string.\nAvailable when Label is Text.\ninit<S>(S, text: Binding<String>, prompt: Text?, axis: Axis)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text.\ninit(text: Binding<String>, prompt: Text?, axis: Axis, label: () -> Label)\nCreates a text field with a preferred axis and a prompt generated from a Text.\nAvailable when Label conforms to View."
    },
    {
        "title": "init(_:text:prompt:axis:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(_:text:prompt:axis:)-8qr48",
        "html": "Parameters\ntitleKey\n\nThe key for the localized title of the text field, describing its purpose.\n\ntext\n\nThe text to display and edit.\n\nprompt\n\nA Text representing the prompt of the text field which provides users with guidance on what to type into the text field.\n\naxis\n\nThe axis in which to scroll text when it doesn\u2019t fit in the available space.\n\nDiscussion\n\nSpecify a preferred axis in which the text field should scroll its content when it does not fit in the available space. Depending on the style of the field, this axis may not be respected.\n\nUse the onSubmit(of:_:) modifier to invoke an action whenever the user submits this text field.\n\nSee Also\nCreating a scrollable text field\ninit(LocalizedStringKey, text: Binding<String>, axis: Axis)\nCreates a text field with a preferred axis and a text label generated from a localized title string.\nAvailable when Label is Text.\ninit<S>(S, text: Binding<String>, axis: Axis)\nCreates a text field with a preferred axis and a text label generated from a title string.\nAvailable when Label is Text.\ninit<S>(S, text: Binding<String>, prompt: Text?, axis: Axis)\nCreates a text field with a text label generated from a title string.\nAvailable when Label is Text.\ninit(text: Binding<String>, prompt: Text?, axis: Axis, label: () -> Label)\nCreates a text field with a preferred axis and a prompt generated from a Text.\nAvailable when Label conforms to View."
    },
    {
        "title": "textScale(_:isEnabled:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/textscale(_:isenabled:)",
        "html": "Parameters\nscale\n\nThe text scale to apply.\n\nisEnabled\n\nIf true the text scale is applied; otherwise text scale is unchanged.\n\nReturn Value\n\nText with the specified scale applied.\n\nSee Also\nFitting text into available space\nstruct Scale\nDefines text scales\nenum TruncationMode\nThe type of truncation to apply to a line of text when it\u2019s too long to fit in the available space."
    },
    {
        "title": "init(_:text:prompt:axis:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(_:text:prompt:axis:)-9r5m8",
        "html": "Parameters\ntitle\n\nThe title of the text view, describing its purpose.\n\ntext\n\nThe text to display and edit.\n\nprompt\n\nA Text representing the prompt of the text field which provides users with guidance on what to type into the text field.\n\naxis\n\nThe axis in which to scroll text when it doesn\u2019t fit in the available space.\n\nDiscussion\n\nSpecify a preferred axis in which the text field should scroll its content when it does not fit in the available space. Depending on the style of the field, this axis may not be respected.\n\nUse the onSubmit(of:_:) modifier to invoke an action whenever the user submits this text field.\n\nSee Also\nCreating a scrollable text field\ninit(LocalizedStringKey, text: Binding<String>, axis: Axis)\nCreates a text field with a preferred axis and a text label generated from a localized title string.\nAvailable when Label is Text.\ninit<S>(S, text: Binding<String>, axis: Axis)\nCreates a text field with a preferred axis and a text label generated from a title string.\nAvailable when Label is Text.\ninit(LocalizedStringKey, text: Binding<String>, prompt: Text?, axis: Axis)\nCreates a text field with a preferred axis and a text label generated from a localized title string.\nAvailable when Label is Text.\ninit(text: Binding<String>, prompt: Text?, axis: Axis, label: () -> Label)\nCreates a text field with a preferred axis and a prompt generated from a Text.\nAvailable when Label conforms to View."
    },
    {
        "title": "init(_:value:format:prompt:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(_:value:format:prompt:)-4g6if",
        "html": "Parameters\ntitleKey\n\nThe title of the text field, describing its purpose.\n\nvalue\n\nThe underlying value to edit.\n\nformat\n\nA format style of type F to use when converting between the string the user edits and the underlying value of type F.FormatInput. If format can\u2019t perform the conversion, the text field sets binding.value to nil.\n\nprompt\n\nA Text which provides users with guidance on what to type into the text field.\n\nDiscussion\n\nUse this initializer to create a text field that binds to a bound optional value, using a ParseableFormatStyle to convert to and from this type. Changes to the bound value update the string displayed by the text field. Editing the text field updates the bound value, as long as the format style can parse the text. If the format style can\u2019t parse the input, the text field sets the bound value to nil.\n\nUse the onSubmit(of:_:) modifier to invoke an action whenever the user submits this text field.\n\nThe following example uses an optional Double as the bound currency value, and a FloatingPointFormatStyle.Currency instance to convert to and from a representation as U.S. dollars. As the user types, a View.onChange(of:_:) modifier logs the new value to the console. If the user enters an invalid currency value, like letters or emoji, the console output is Optional(nil).\n\n@State private var myMoney: Double? = 300.0\nvar body: some View {\n    TextField(\n        \"Currency (USD)\",\n        value: $myMoney,\n        format: .currency(code: \"USD\")\n    )\n    .onChange(of: myMoney) { newValue in\n        print (\"myMoney: \\(newValue)\")\n    }\n}\n\nSee Also\nCreating a text field with an optional\ninit<S, F>(S, value: Binding<F.FormatInput?>, format: F, prompt: Text?)\nCreates a text field that applies a format style to a bound optional value, with a label generated from a title string.\nAvailable when Label is Text.\ninit<F>(value: Binding<F.FormatInput?>, format: F, prompt: Text?, label: () -> Label)\nCreates a text field that applies a format style to a bound optional value, with a label generated from a view builder.\nAvailable when Label conforms to View."
    },
    {
        "title": "init(value:formatter:prompt:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/textfield/init(value:formatter:prompt:label:)",
        "html": "Parameters\nvalue\n\nThe underlying value to edit.\n\nformatter\n\nA formatter to use when converting between the string the user edits and the underlying value of type V. If formatter can\u2019t perform the conversion, the text field doesn\u2019t modify binding.value.\n\nprompt\n\nA Text which provides users with guidance on what to enter into the text field.\n\nlabel\n\nA view that describes the purpose of the text field.\n\nDiscussion\n\nUse this initializer to create a text field that binds to a bound optional value, using a Formatter to convert to and from this type. Changes to the bound value update the string displayed by the text field. Editing the text field updates the bound value, as long as the formatter can parse the text. If the format style can\u2019t parse the input, the bound value remains unchanged.\n\nUse the onSubmit(of:_:) modifier to invoke an action whenever the user submits this text field.\n\nThe following example uses a Double as the bound value, and a NumberFormatter instance to convert to and from a string representation. The formatter uses the NumberFormatter.Style.decimal style, to allow entering a fractional part. As the user types, the bound value updates, which in turn updates three Text views that use different format styles. If the user enters text that doesn\u2019t represent a valid Double, the bound value doesn\u2019t update.\n\n@State private var myDouble: Double = 0.673\n@State private var numberFormatter: NumberFormatter = {\n    var nf = NumberFormatter()\n    nf.numberStyle = .decimal\n    return nf\n}()\n\n\nvar body: some View {\n    VStack {\n        TextField(\n            value: $myDouble,\n            formatter: numberFormatter\n        ) {\n            Text(\"Double\")\n        }\n        Text(myDouble, format: .number)\n        Text(myDouble, format: .number.precision(.significantDigits(5)))\n        Text(myDouble, format: .number.notation(.scientific))\n    }\n}\n\nSee Also\nCreating a text field with a value\ninit<F>(LocalizedStringKey, value: Binding<F.FormatInput>, format: F, prompt: Text?)\nCreates a text field that applies a format style to a bound value, with a label generated from a localized title string.\nAvailable when Label is Text.\ninit<S, F>(S, value: Binding<F.FormatInput>, format: F, prompt: Text?)\nCreates a text field that applies a format style to a bound value, with a label generated from a title string.\nAvailable when Label is Text.\ninit<F>(value: Binding<F.FormatInput>, format: F, prompt: Text?, label: () -> Label)\nCreates a text field that applies a format style to a bound value, with a label generated from a view builder.\nAvailable when Label conforms to View.\ninit<S, V>(S, value: Binding<V>, formatter: Formatter)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter)\nCreate an instance which binds over an arbitrary type, V.\nAvailable when Label is Text.\ninit<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter, prompt: Text?)\nCreates a text field that applies a formatter to a bound value, with a label generated from a localized title string.\nAvailable when Label is Text.\ninit<S, V>(S, value: Binding<V>, formatter: Formatter, prompt: Text?)\nCreates a text field that applies a formatter to a bound value, with a label generated from a title string.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:bundle:)",
        "url": "https://developer.apple.com/documentation/swiftui/image/init(_:bundle:)",
        "html": "Parameters\nname\n\nThe name of the image resource to lookup, as well as the localization key with which to label the image.\n\nbundle\n\nThe bundle to search for the image resource and localization content. If nil, SwiftUI uses the main Bundle. Defaults to nil.\n\nSee Also\nCreating an image\ninit(String, variableValue: Double?, bundle: Bundle?)\nCreates a labeled image that you can use as content for controls, with a variable value.\ninit(ImageResource)\nInitialize an Image with an image resource."
    },
    {
        "title": "+(_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/+(_:_:)",
        "html": "Parameters\nlhs\n\nThe first text view with text to combine.\n\nrhs\n\nThe second text view with text to combine.\n\nReturn Value\n\nA new text view containing the combined contents of the two input text views."
    },
    {
        "title": "accessibilityLabel(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/accessibilitylabel(_:)-8cg4f",
        "html": "Parameters\nlabelKey\n\nThe string key for the alternative accessibility label.\n\nDiscussion\n\nUse this method to provide an alternative accessibility label to the text that is displayed. For example, you can give an alternate label to a navigation title:\n\nvar body: some View {\n    NavigationView {\n        ContentView()\n            .navigationTitle(Text(\"\udbc0\ude24\").accessibilityLabel(\"Inbox\"))\n    }\n}\n\nSee Also\nProviding accessibility information\nfunc accessibilityHeading(AccessibilityHeadingLevel) -> Text\nSets the accessibility level of this heading.\nfunc accessibilityLabel<S>(S) -> Text\nAdds a label to the view that describes its contents.\nfunc accessibilityLabel(Text) -> Text\nAdds a label to the view that describes its contents.\nfunc accessibilityTextContentType(AccessibilityTextContentType) -> Text\nSets an accessibility text content type."
    },
    {
        "title": "accessibilityTextContentType(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/accessibilitytextcontenttype(_:)",
        "html": "Parameters\nvalue\n\nThe accessibility content type from the available AccessibilityTextContentType options.\n\nDiscussion\n\nUse this modifier to set the content type of this accessibility element. Assistive technologies can use this property to choose an appropriate way to output the text. For example, when encountering a source coding context, VoiceOver could choose to speak all punctuation.\n\nIf you don\u2019t set a value with this method, the default content type is plain.\n\nSee Also\nProviding accessibility information\nfunc accessibilityHeading(AccessibilityHeadingLevel) -> Text\nSets the accessibility level of this heading.\nfunc accessibilityLabel<S>(S) -> Text\nAdds a label to the view that describes its contents.\nfunc accessibilityLabel(Text) -> Text\nAdds a label to the view that describes its contents.\nfunc accessibilityLabel(LocalizedStringKey) -> Text\nAdds a label to the view that describes its contents."
    },
    {
        "title": "buildEither(first:)",
        "url": "https://developer.apple.com/documentation/swiftui/keyframesbuilder/buildeither(first:)",
        "html": "See Also\nBuilding keyframes\nstatic func buildArray([some KeyframeTrackContent<Value>]) -> some KeyframeTrackContent<Value>\nstatic func buildBlock() -> some Keyframes<Value>\nstatic func buildBlock() -> some KeyframeTrackContent<Value>\nstatic func buildEither<First, Second>(second: Second) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildExpression<K>(K) -> K\nstatic func buildExpression<Content>(Content) -> Content\nKeyframes\nstatic func buildFinalResult<Content>(Content) -> KeyframeTrack<Value, Value, Content>\nstatic func buildFinalResult<Content>(Content) -> Content\nstatic func buildPartialBlock(accumulated: some KeyframeTrackContent<Value>, next: some KeyframeTrackContent<Value>) -> some KeyframeTrackContent<Value>\nstatic func buildPartialBlock(accumulated: some Keyframes<Value>, next: some Keyframes<Value>) -> some Keyframes<Value>\nstatic func buildPartialBlock<Content>(first: Content) -> Content\nstatic func buildPartialBlock<K>(first: K) -> K"
    },
    {
        "title": "interpolation(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/image/interpolation(_:)",
        "html": "Parameters\ninterpolation\n\nThe quality level, expressed as a value of the Interpolation type, that SwiftUI applies when interpolating an image.\n\nReturn Value\n\nAn image with the given interpolation value set.\n\nDiscussion\n\nSee the article Fitting images into available space for examples of using interpolation(_:) when scaling an Image.\n\nSee Also\nSpecifying rendering behavior\nfunc antialiased(Bool) -> Image\nSpecifies whether SwiftUI applies antialiasing when rendering the image.\nfunc symbolRenderingMode(SymbolRenderingMode?) -> Image\nSets the rendering mode for symbol images within this view.\nfunc renderingMode(Image.TemplateRenderingMode?) -> Image\nIndicates whether SwiftUI renders an image as-is, or by using a different mode.\nenum TemplateRenderingMode\nA type that indicates how SwiftUI renders images.\nenum Interpolation\nThe level of quality for rendering an image that requires interpolation, such as a scaled image."
    },
    {
        "title": "accessibilityLabel(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/accessibilitylabel(_:)-64xko",
        "html": "Parameters\nlabel\n\nThe text view to add the label to.\n\nDiscussion\n\nUse this method to provide an alternative accessibility label to the text that is displayed. For example, you can give an alternate label to a navigation title:\n\nvar body: some View {\n    NavigationView {\n        ContentView()\n            .navigationTitle(Text(\"\udbc0\ude24\").accessibilityLabel(\"Inbox\"))\n    }\n}\n\n\nYou can\u2019t style the label that you add\n\nSee Also\nProviding accessibility information\nfunc accessibilityHeading(AccessibilityHeadingLevel) -> Text\nSets the accessibility level of this heading.\nfunc accessibilityLabel<S>(S) -> Text\nAdds a label to the view that describes its contents.\nfunc accessibilityLabel(LocalizedStringKey) -> Text\nAdds a label to the view that describes its contents.\nfunc accessibilityTextContentType(AccessibilityTextContentType) -> Text\nSets an accessibility text content type."
    },
    {
        "title": "buildBlock()",
        "url": "https://developer.apple.com/documentation/swiftui/keyframesbuilder/buildblock()-77krb",
        "html": "See Also\nBuilding keyframes\nstatic func buildArray([some KeyframeTrackContent<Value>]) -> some KeyframeTrackContent<Value>\nstatic func buildBlock() -> some Keyframes<Value>\nstatic func buildEither<First, Second>(first: First) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildEither<First, Second>(second: Second) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildExpression<K>(K) -> K\nstatic func buildExpression<Content>(Content) -> Content\nKeyframes\nstatic func buildFinalResult<Content>(Content) -> KeyframeTrack<Value, Value, Content>\nstatic func buildFinalResult<Content>(Content) -> Content\nstatic func buildPartialBlock(accumulated: some KeyframeTrackContent<Value>, next: some KeyframeTrackContent<Value>) -> some KeyframeTrackContent<Value>\nstatic func buildPartialBlock(accumulated: some Keyframes<Value>, next: some Keyframes<Value>) -> some Keyframes<Value>\nstatic func buildPartialBlock<Content>(first: Content) -> Content\nstatic func buildPartialBlock<K>(first: K) -> K"
    },
    {
        "title": "buildArray(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/keyframesbuilder/buildarray(_:)",
        "html": "See Also\nBuilding keyframes\nstatic func buildBlock() -> some Keyframes<Value>\nstatic func buildBlock() -> some KeyframeTrackContent<Value>\nstatic func buildEither<First, Second>(first: First) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildEither<First, Second>(second: Second) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildExpression<K>(K) -> K\nstatic func buildExpression<Content>(Content) -> Content\nKeyframes\nstatic func buildFinalResult<Content>(Content) -> KeyframeTrack<Value, Value, Content>\nstatic func buildFinalResult<Content>(Content) -> Content\nstatic func buildPartialBlock(accumulated: some KeyframeTrackContent<Value>, next: some KeyframeTrackContent<Value>) -> some KeyframeTrackContent<Value>\nstatic func buildPartialBlock(accumulated: some Keyframes<Value>, next: some Keyframes<Value>) -> some Keyframes<Value>\nstatic func buildPartialBlock<Content>(first: Content) -> Content\nstatic func buildPartialBlock<K>(first: K) -> K"
    },
    {
        "title": "TransitionPhase.willAppear",
        "url": "https://developer.apple.com/documentation/swiftui/transitionphase/willappear",
        "html": "Discussion\n\nIn this phase, a transition should show the appearance that will be animated from to make the appearance transition.\n\nSee Also\nGetting the phase\ncase identity\nThe transition is being applied to a view that is in the view hierarchy.\ncase didDisappear\nThe transition is being applied to a view that has been requested to be removed from the view hierarchy."
    },
    {
        "title": "Body",
        "url": "https://developer.apple.com/documentation/swiftui/keyframetrackcontent/body-swift.associatedtype",
        "html": "Required\n\nSee Also\nCreating a keyframe\nvar body: Self.Body\nThe composition of content that comprise the keyframe track.\n\nRequired\n\nassociatedtype Value : Animatable = Self.Body.Value\n\nRequired"
    },
    {
        "title": "TimelineView.Context",
        "url": "https://developer.apple.com/documentation/swiftui/timelineview/context",
        "html": "Overview\n\nThe context includes both the date from the schedule that triggered the callback, and a cadence that you can use to customize the appearance of your view. For example, you might choose to display the second hand of an analog clock only when the cadence is TimelineView.Context.Cadence.seconds or faster.\n\nTopics\nGetting the date\nlet date: Date\nThe date from the schedule that triggered the current view update.\nGetting the cadence\nlet cadence: TimelineView<Schedule, Content>.Context.Cadence\nThe rate at which the timeline updates the view.\nenum Cadence\nA rate at which timeline views can receive updates.\nInvalidating the context\nfunc invalidateTimelineContent()\nResets any pre-rendered views the system has from the timeline.\nAvailable when Schedule conforms to TimelineSchedule.\nSee Also\nCreating a timeline\ninit(Schedule, content: (TimelineViewDefaultContext) -> Content)\nCreates a new timeline view that uses the given schedule.\nAvailable when Schedule conforms to TimelineSchedule and Content conforms to View."
    },
    {
        "title": "buildEither(second:)",
        "url": "https://developer.apple.com/documentation/swiftui/keyframesbuilder/buildeither(second:)",
        "html": "See Also\nBuilding keyframes\nstatic func buildArray([some KeyframeTrackContent<Value>]) -> some KeyframeTrackContent<Value>\nstatic func buildBlock() -> some Keyframes<Value>\nstatic func buildBlock() -> some KeyframeTrackContent<Value>\nstatic func buildEither<First, Second>(first: First) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildExpression<K>(K) -> K\nstatic func buildExpression<Content>(Content) -> Content\nKeyframes\nstatic func buildFinalResult<Content>(Content) -> KeyframeTrack<Value, Value, Content>\nstatic func buildFinalResult<Content>(Content) -> Content\nstatic func buildPartialBlock(accumulated: some KeyframeTrackContent<Value>, next: some KeyframeTrackContent<Value>) -> some KeyframeTrackContent<Value>\nstatic func buildPartialBlock(accumulated: some Keyframes<Value>, next: some Keyframes<Value>) -> some Keyframes<Value>\nstatic func buildPartialBlock<Content>(first: Content) -> Content\nstatic func buildPartialBlock<K>(first: K) -> K"
    },
    {
        "title": "buildExpression(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/keyframesbuilder/buildexpression(_:)-29778",
        "html": "See Also\nBuilding keyframes\nstatic func buildArray([some KeyframeTrackContent<Value>]) -> some KeyframeTrackContent<Value>\nstatic func buildBlock() -> some Keyframes<Value>\nstatic func buildBlock() -> some KeyframeTrackContent<Value>\nstatic func buildEither<First, Second>(first: First) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildEither<First, Second>(second: Second) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildExpression<Content>(Content) -> Content\nKeyframes\nstatic func buildFinalResult<Content>(Content) -> KeyframeTrack<Value, Value, Content>\nstatic func buildFinalResult<Content>(Content) -> Content\nstatic func buildPartialBlock(accumulated: some KeyframeTrackContent<Value>, next: some KeyframeTrackContent<Value>) -> some KeyframeTrackContent<Value>\nstatic func buildPartialBlock(accumulated: some Keyframes<Value>, next: some Keyframes<Value>) -> some Keyframes<Value>\nstatic func buildPartialBlock<Content>(first: Content) -> Content\nstatic func buildPartialBlock<K>(first: K) -> K"
    },
    {
        "title": "TransitionPhase.identity",
        "url": "https://developer.apple.com/documentation/swiftui/transitionphase/identity",
        "html": "Discussion\n\nIn this phase, a transition should show its steady state appearance, which will generally not make any visual change to the view.\n\nSee Also\nGetting the phase\ncase willAppear\nThe transition is being applied to a view that is about to be inserted into the view hierarchy.\ncase didDisappear\nThe transition is being applied to a view that has been requested to be removed from the view hierarchy."
    },
    {
        "title": "buildPartialBlock(accumulated:next:)",
        "url": "https://developer.apple.com/documentation/swiftui/keyframesbuilder/buildpartialblock(accumulated:next:)-1ijqb",
        "html": "See Also\nBuilding keyframes\nstatic func buildArray([some KeyframeTrackContent<Value>]) -> some KeyframeTrackContent<Value>\nstatic func buildBlock() -> some Keyframes<Value>\nstatic func buildBlock() -> some KeyframeTrackContent<Value>\nstatic func buildEither<First, Second>(first: First) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildEither<First, Second>(second: Second) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildExpression<K>(K) -> K\nstatic func buildExpression<Content>(Content) -> Content\nKeyframes\nstatic func buildFinalResult<Content>(Content) -> KeyframeTrack<Value, Value, Content>\nstatic func buildFinalResult<Content>(Content) -> Content\nstatic func buildPartialBlock(accumulated: some Keyframes<Value>, next: some Keyframes<Value>) -> some Keyframes<Value>\nstatic func buildPartialBlock<Content>(first: Content) -> Content\nstatic func buildPartialBlock<K>(first: K) -> K"
    },
    {
        "title": "DisclosureGroupStyle.Configuration",
        "url": "https://developer.apple.com/documentation/swiftui/disclosuregroupstyle/configuration",
        "html": "See Also\nCreating custom disclosure group styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view that represents the body of a disclosure group.\n\nRequired\n\nstruct DisclosureGroupStyleConfiguration\nThe properties of a disclosure group instance.\nassociatedtype Body : View\nA view that represents the body of a disclosure group.\n\nRequired"
    },
    {
        "title": "body",
        "url": "https://developer.apple.com/documentation/swiftui/keyframes/body-swift.property",
        "html": "Required\n\nSee Also\nCreating a keyframe\nassociatedtype Body : Keyframes\nThe type of keyframes representing the body of this type.\n\nRequired\n\nassociatedtype Value = Self.Body.Value\nThe type of value animated by this keyframes type\n\nRequired"
    },
    {
        "title": "typesettingLanguage(_:isEnabled:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/typesettinglanguage(_:isenabled:)-8dobz",
        "html": "Parameters\nlanguage\n\nThe explicit language to use for typesetting.\n\nisEnabled\n\nA Boolean value that indicates whether text langauge is added\n\nReturn Value\n\nText with the typesetting language set to the value you supply.\n\nDiscussion\n\nIn some cases Text may contain text of a particular language which doesn\u2019t match the device UI language. In that case it\u2019s useful to specify a language so line height, line breaking and spacing will respect the script used for that language. For example:\n\nText(verbatim: \"\u0e41\u0e2d\u0e1b\u0e40\u0e1b\u0e34\u0e25\")\n    .typesettingLanguage(.init(languageCode: .thai))\n\n\nNote: this language does not affect text localization.\n\nSee Also\nLocalizing text\nfunc typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> Text\nSpecifies the language for typesetting."
    },
    {
        "title": "value(time:)",
        "url": "https://developer.apple.com/documentation/swiftui/keyframetimeline/value(time:)",
        "html": "See Also\nGetting an interpolated value\nfunc value(progress: Double) -> Value\nReturns the interpolated value at the given progress in the range zero to one."
    },
    {
        "title": "accessibilityLabel(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/accessibilitylabel(_:)-2du7z",
        "html": "Parameters\nlabel\n\nThe string for the alternative accessibility label.\n\nDiscussion\n\nUse this method to provide an alternative accessibility label to the text that is displayed. For example, you can give an alternate label to a navigation title:\n\nvar body: some View {\n    NavigationView {\n        ContentView()\n            .navigationTitle(Text(\"\udbc0\ude24\").accessibilityLabel(\"Inbox\"))\n    }\n}\n\nSee Also\nProviding accessibility information\nfunc accessibilityHeading(AccessibilityHeadingLevel) -> Text\nSets the accessibility level of this heading.\nfunc accessibilityLabel(Text) -> Text\nAdds a label to the view that describes its contents.\nfunc accessibilityLabel(LocalizedStringKey) -> Text\nAdds a label to the view that describes its contents.\nfunc accessibilityTextContentType(AccessibilityTextContentType) -> Text\nSets an accessibility text content type."
    },
    {
        "title": "strikethrough(_:color:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/strikethrough(_:color:)",
        "html": "Parameters\nisActive\n\nA Boolean value that indicates whether the text has a strikethrough applied.\n\ncolor\n\nThe color of the strikethrough. If color is nil, the strikethrough uses the default foreground color.\n\nReturn Value\n\nText with a line through its center.\n\nSee Also\nStyling the view\u2019s text\nfunc foregroundStyle<S>(S) -> Text\nSets the style of the text displayed by this view.\nfunc bold() -> Text\nApplies a bold font weight to the text.\nfunc bold(Bool) -> Text\nApplies a bold font weight to the text.\nfunc italic() -> Text\nApplies italics to the text.\nfunc italic(Bool) -> Text\nApplies italics to the text.\nfunc strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc underline(Bool, color: Color?) -> Text\nApplies an underline to the text.\nfunc underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies an underline to the text.\nfunc monospaced(Bool) -> Text\nModifies the font of the text to use the fixed-width variant of the current font, if possible.\nfunc monospacedDigit() -> Text\nModifies the text view\u2019s font to use fixed-width digits, while leaving other characters proportionally spaced.\nfunc kerning(CGFloat) -> Text\nSets the spacing, or kerning, between characters.\nfunc tracking(CGFloat) -> Text\nSets the tracking for the text.\nfunc baselineOffset(CGFloat) -> Text\nSets the vertical offset for the text relative to its baseline.\nenum Case\nA scheme for transforming the capitalization of characters within text.\nstruct DateStyle\nA predefined style used to display a Date.\nstruct LineStyle\nDescription of the style used to draw the line for StrikethroughStyleAttribute and UnderlineStyleAttribute."
    },
    {
        "title": "kerning(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/kerning(_:)",
        "html": "Parameters\nkerning\n\nThe spacing to use between individual characters in this text. Value of 0 sets the kerning to the system default value.\n\nReturn Value\n\nText with the specified amount of kerning.\n\nDiscussion\n\nKerning defines the offset, in points, that a text view should shift characters from the default spacing. Use positive kerning to widen the spacing between characters. Use negative kerning to tighten the spacing between characters.\n\nVStack(alignment: .leading) {\n    Text(\"ABCDEF\").kerning(-3)\n    Text(\"ABCDEF\")\n    Text(\"ABCDEF\").kerning(3)\n}\n\n\nThe last character in the first case, which uses negative kerning, experiences cropping because the kerning affects the trailing edge of the text view as well.\n\nKerning attempts to maintain ligatures. For example, the Hoefler Text font uses a ligature for the letter combination ffl, as in the word raffle, shown here with a small negative and a small positive kerning:\n\nThe ffl letter combination keeps a constant shape as the other letters move together or apart. Beyond a certain point in either direction, however, kerning does disable nonessential ligatures.\n\nImportant\n\nIf you add both the tracking(_:) and kerning(_:) modifiers to a view, the view applies the tracking and ignores the kerning.\n\nSee Also\nStyling the view\u2019s text\nfunc foregroundStyle<S>(S) -> Text\nSets the style of the text displayed by this view.\nfunc bold() -> Text\nApplies a bold font weight to the text.\nfunc bold(Bool) -> Text\nApplies a bold font weight to the text.\nfunc italic() -> Text\nApplies italics to the text.\nfunc italic(Bool) -> Text\nApplies italics to the text.\nfunc strikethrough(Bool, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc underline(Bool, color: Color?) -> Text\nApplies an underline to the text.\nfunc underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies an underline to the text.\nfunc monospaced(Bool) -> Text\nModifies the font of the text to use the fixed-width variant of the current font, if possible.\nfunc monospacedDigit() -> Text\nModifies the text view\u2019s font to use fixed-width digits, while leaving other characters proportionally spaced.\nfunc tracking(CGFloat) -> Text\nSets the tracking for the text.\nfunc baselineOffset(CGFloat) -> Text\nSets the vertical offset for the text relative to its baseline.\nenum Case\nA scheme for transforming the capitalization of characters within text.\nstruct DateStyle\nA predefined style used to display a Date.\nstruct LineStyle\nDescription of the style used to draw the line for StrikethroughStyleAttribute and UnderlineStyleAttribute."
    },
    {
        "title": "tracking(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/tracking(_:)",
        "html": "Parameters\ntracking\n\nThe amount of additional space, in points, that the view should add to each character cluster after layout. Value of 0 sets the tracking to the system default value.\n\nReturn Value\n\nText with the specified amount of tracking.\n\nDiscussion\n\nTracking adds space, measured in points, between the characters in the text view. A positive value increases the spacing between characters, while a negative value brings the characters closer together.\n\nVStack(alignment: .leading) {\n    Text(\"ABCDEF\").tracking(-3)\n    Text(\"ABCDEF\")\n    Text(\"ABCDEF\").tracking(3)\n}\n\n\nThe code above uses an unusually large amount of tracking to make it easy to see the effect.\n\nThe effect of tracking resembles that of the kerning(_:) modifier, but adds or removes trailing whitespace, rather than changing character offsets. Also, using any nonzero amount of tracking disables nonessential ligatures, whereas kerning attempts to maintain ligatures.\n\nImportant\n\nIf you add both the tracking(_:) and kerning(_:) modifiers to a view, the view applies the tracking and ignores the kerning.\n\nSee Also\nStyling the view\u2019s text\nfunc foregroundStyle<S>(S) -> Text\nSets the style of the text displayed by this view.\nfunc bold() -> Text\nApplies a bold font weight to the text.\nfunc bold(Bool) -> Text\nApplies a bold font weight to the text.\nfunc italic() -> Text\nApplies italics to the text.\nfunc italic(Bool) -> Text\nApplies italics to the text.\nfunc strikethrough(Bool, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc underline(Bool, color: Color?) -> Text\nApplies an underline to the text.\nfunc underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies an underline to the text.\nfunc monospaced(Bool) -> Text\nModifies the font of the text to use the fixed-width variant of the current font, if possible.\nfunc monospacedDigit() -> Text\nModifies the text view\u2019s font to use fixed-width digits, while leaving other characters proportionally spaced.\nfunc kerning(CGFloat) -> Text\nSets the spacing, or kerning, between characters.\nfunc baselineOffset(CGFloat) -> Text\nSets the vertical offset for the text relative to its baseline.\nenum Case\nA scheme for transforming the capitalization of characters within text.\nstruct DateStyle\nA predefined style used to display a Date.\nstruct LineStyle\nDescription of the style used to draw the line for StrikethroughStyleAttribute and UnderlineStyleAttribute."
    },
    {
        "title": "fontWidth(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/fontwidth(_:)",
        "html": "Parameters\nwidth\n\nOne of the available font widths.\n\nReturn Value\n\nText that uses the font width you specify, if available.\n\nSee Also\nChoosing a font\nfunc font(Font?) -> Text\nSets the default font for text in the view.\nfunc fontWeight(Font.Weight?) -> Text\nSets the font weight of the text.\nfunc fontDesign(Font.Design?) -> Text\nSets the font design of the text."
    },
    {
        "title": "monospaced(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/monospaced(_:)",
        "html": "Parameters\nisActive\n\nA Boolean value that indicates whether monospaced styling is added. Default value is true.\n\nReturn Value\n\nMonospaced text.\n\nSee Also\nStyling the view\u2019s text\nfunc foregroundStyle<S>(S) -> Text\nSets the style of the text displayed by this view.\nfunc bold() -> Text\nApplies a bold font weight to the text.\nfunc bold(Bool) -> Text\nApplies a bold font weight to the text.\nfunc italic() -> Text\nApplies italics to the text.\nfunc italic(Bool) -> Text\nApplies italics to the text.\nfunc strikethrough(Bool, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc underline(Bool, color: Color?) -> Text\nApplies an underline to the text.\nfunc underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies an underline to the text.\nfunc monospacedDigit() -> Text\nModifies the text view\u2019s font to use fixed-width digits, while leaving other characters proportionally spaced.\nfunc kerning(CGFloat) -> Text\nSets the spacing, or kerning, between characters.\nfunc tracking(CGFloat) -> Text\nSets the tracking for the text.\nfunc baselineOffset(CGFloat) -> Text\nSets the vertical offset for the text relative to its baseline.\nenum Case\nA scheme for transforming the capitalization of characters within text.\nstruct DateStyle\nA predefined style used to display a Date.\nstruct LineStyle\nDescription of the style used to draw the line for StrikethroughStyleAttribute and UnderlineStyleAttribute."
    },
    {
        "title": "Body",
        "url": "https://developer.apple.com/documentation/swiftui/datepickerstyle/body",
        "html": "Required\n\nSee Also\nCreating custom date picker styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nReturns the appearance and interaction content for a DatePicker.\n\nRequired\n\nstruct DatePickerStyleConfiguration\nThe properties of a DatePicker.\ntypealias Configuration\nA type alias for the properties of a DatePicker."
    },
    {
        "title": "Text.Scale",
        "url": "https://developer.apple.com/documentation/swiftui/text/scale",
        "html": "Overview\n\nText scale provides a way to pick a logical text scale relative to the base font which is used.\n\nTopics\nGettingn built-in text scales\nstatic let `default`: Text.Scale\nDefines default text scale\nstatic let secondary: Text.Scale\nDefines secondary text scale\nRelationships\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nFitting text into available space\nfunc textScale(Text.Scale, isEnabled: Bool) -> Text\nApplies a text scale to the text.\nenum TruncationMode\nThe type of truncation to apply to a line of text when it\u2019s too long to fit in the available space."
    },
    {
        "title": "StepperFieldDatePickerStyle",
        "url": "https://developer.apple.com/documentation/swiftui/stepperfielddatepickerstyle",
        "html": "Overview\n\nYou can also use stepperField to construct this style.\n\nTopics\nCreating the date picker style\ninit()\nCreates an instance of the field date picker style.\nRelationships\nConforms To\nDatePickerStyle\nSee Also\nSuporting types\nstruct DefaultDatePickerStyle\nThe default style for date pickers.\nstruct CompactDatePickerStyle\nA date picker style that displays the components in a compact, textual format.\nstruct FieldDatePickerStyle\nA date picker style that displays the components in an editable field.\nstruct GraphicalDatePickerStyle\nA date picker style that displays an interactive calendar or clock.\nstruct WheelDatePickerStyle\nA date picker style that displays each component as columns in a scrollable wheel."
    },
    {
        "title": "GraphicalDatePickerStyle",
        "url": "https://developer.apple.com/documentation/swiftui/graphicaldatepickerstyle",
        "html": "Overview\n\nYou can also use graphical to construct this style.\n\nTopics\nCreating the date picker style\ninit()\nCreates an instance of the graphical date picker style.\nRelationships\nConforms To\nDatePickerStyle\nSee Also\nSuporting types\nstruct DefaultDatePickerStyle\nThe default style for date pickers.\nstruct CompactDatePickerStyle\nA date picker style that displays the components in a compact, textual format.\nstruct FieldDatePickerStyle\nA date picker style that displays the components in an editable field.\nstruct StepperFieldDatePickerStyle\nA system style that displays the components in an editable field, with adjoining stepper that can increment/decrement the selected component.\nstruct WheelDatePickerStyle\nA date picker style that displays each component as columns in a scrollable wheel."
    },
    {
        "title": "DatePickerStyle.Configuration",
        "url": "https://developer.apple.com/documentation/swiftui/datepickerstyle/configuration",
        "html": "See Also\nCreating custom date picker styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nReturns the appearance and interaction content for a DatePicker.\n\nRequired\n\nstruct DatePickerStyleConfiguration\nThe properties of a DatePicker.\nassociatedtype Body : View\nA view representing the appearance and interaction of a DatePicker.\n\nRequired"
    },
    {
        "title": "init(wrappedValue:relativeTo:)",
        "url": "https://developer.apple.com/documentation/swiftui/scaledmetric/init(wrappedvalue:relativeto:)",
        "html": "See Also\nCreating the metric\ninit(wrappedValue: Value)\nCreates the scaled metric with an unscaled value using the default scaling."
    },
    {
        "title": "Font.Weight",
        "url": "https://developer.apple.com/documentation/swiftui/font/weight",
        "html": "Topics\nGetting font weights\nstatic let black: Font.Weight\nstatic let bold: Font.Weight\nstatic let heavy: Font.Weight\nstatic let light: Font.Weight\nstatic let medium: Font.Weight\nstatic let regular: Font.Weight\nstatic let semibold: Font.Weight\nstatic let thin: Font.Weight\nstatic let ultraLight: Font.Weight\nRelationships\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nGetting system fonts\nstatic func system(Font.TextStyle, design: Font.Design?, weight: Font.Weight?) -> Font\nGets a system font that uses the specified style, design, and weight.\nstatic func system(size: CGFloat, weight: Font.Weight?, design: Font.Design?) -> Font\nSpecifies a system font to use, along with the style, weight, and any design parameters you want applied to the text.\nenum Design\nA design to use for fonts.\nenum TextStyle\nA dynamic text style to use for fonts."
    },
    {
        "title": "DefaultDatePickerStyle",
        "url": "https://developer.apple.com/documentation/swiftui/defaultdatepickerstyle",
        "html": "Overview\n\nYou can also use automatic to construct this style.\n\nTopics\nCreating the date picker style\ninit()\nCreates an instance of the default date picker style.\nRelationships\nConforms To\nDatePickerStyle\nSee Also\nSuporting types\nstruct CompactDatePickerStyle\nA date picker style that displays the components in a compact, textual format.\nstruct FieldDatePickerStyle\nA date picker style that displays the components in an editable field.\nstruct GraphicalDatePickerStyle\nA date picker style that displays an interactive calendar or clock.\nstruct StepperFieldDatePickerStyle\nA system style that displays the components in an editable field, with adjoining stepper that can increment/decrement the selected component.\nstruct WheelDatePickerStyle\nA date picker style that displays each component as columns in a scrollable wheel."
    },
    {
        "title": "Font.Width",
        "url": "https://developer.apple.com/documentation/swiftui/font/width",
        "html": "Topics\nGetting standard font widths\nstatic let compressed: Font.Width\nstatic let condensed: Font.Width\nstatic let expanded: Font.Width\nstatic let standard: Font.Width\nCreating an explicit font width\ninit(CGFloat)\nAccessing the width\u2019s value\nvar value: CGFloat\nRelationships\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nStyling a font\nfunc bold() -> Font\nAdds bold styling to the font.\nfunc italic() -> Font\nAdds italics to the font.\nfunc monospaced() -> Font\nReturns a fixed-width font from the same family as the base font.\nfunc monospacedDigit() -> Font\nReturns a modified font that uses fixed-width digits, while leaving other characters proportionally spaced.\nfunc smallCaps() -> Font\nAdjusts the font to enable all small capitals.\nfunc lowercaseSmallCaps() -> Font\nAdjusts the font to enable lowercase small capitals.\nfunc uppercaseSmallCaps() -> Font\nAdjusts the font to enable uppercase small capitals.\nfunc weight(Font.Weight) -> Font\nSets the weight of the font.\nfunc width(Font.Width) -> Font\nSets the width of the font.\nfunc leading(Font.Leading) -> Font\nAdjusts the line spacing of a font.\nenum Leading\nA line spacing adjustment that you can apply to a font."
    },
    {
        "title": "init(wrappedValue:)",
        "url": "https://developer.apple.com/documentation/swiftui/scaledmetric/init(wrappedvalue:)",
        "html": "See Also\nCreating the metric\ninit(wrappedValue: Value, relativeTo: Font.TextStyle)\nCreates the scaled metric with an unscaled value and a text style to scale relative to."
    },
    {
        "title": "CompactDatePickerStyle",
        "url": "https://developer.apple.com/documentation/swiftui/compactdatepickerstyle",
        "html": "Overview\n\nYou can also use compact to construct this style.\n\nTopics\nCreating the date picker style\ninit()\nCreates an instance of the compact date picker style.\nRelationships\nConforms To\nDatePickerStyle\nSee Also\nSuporting types\nstruct DefaultDatePickerStyle\nThe default style for date pickers.\nstruct FieldDatePickerStyle\nA date picker style that displays the components in an editable field.\nstruct GraphicalDatePickerStyle\nA date picker style that displays an interactive calendar or clock.\nstruct StepperFieldDatePickerStyle\nA system style that displays the components in an editable field, with adjoining stepper that can increment/decrement the selected component.\nstruct WheelDatePickerStyle\nA date picker style that displays each component as columns in a scrollable wheel."
    },
    {
        "title": "Value",
        "url": "https://developer.apple.com/documentation/swiftui/transactionkey/value",
        "html": "Required\n\nSee Also\nSetting a default value\nstatic var defaultValue: Self.Value\nThe default value for the transaction key.\n\nRequired"
    },
    {
        "title": "WheelDatePickerStyle",
        "url": "https://developer.apple.com/documentation/swiftui/wheeldatepickerstyle",
        "html": "Overview\n\nYou can also use wheel to construct this style.\n\nTopics\nCreating the date picker style\ninit()\nCreates an instance of the wheel date picker style.\nRelationships\nConforms To\nDatePickerStyle\nSee Also\nSuporting types\nstruct DefaultDatePickerStyle\nThe default style for date pickers.\nstruct CompactDatePickerStyle\nA date picker style that displays the components in a compact, textual format.\nstruct FieldDatePickerStyle\nA date picker style that displays the components in an editable field.\nstruct GraphicalDatePickerStyle\nA date picker style that displays an interactive calendar or clock.\nstruct StepperFieldDatePickerStyle\nA system style that displays the components in an editable field, with adjoining stepper that can increment/decrement the selected component."
    },
    {
        "title": "FieldDatePickerStyle",
        "url": "https://developer.apple.com/documentation/swiftui/fielddatepickerstyle",
        "html": "Overview\n\nYou can also use field to construct this style.\n\nTopics\nCreating the date picker style\ninit()\nCreates an instance of the field date picker style.\nRelationships\nConforms To\nDatePickerStyle\nSee Also\nSuporting types\nstruct DefaultDatePickerStyle\nThe default style for date pickers.\nstruct CompactDatePickerStyle\nA date picker style that displays the components in a compact, textual format.\nstruct GraphicalDatePickerStyle\nA date picker style that displays an interactive calendar or clock.\nstruct StepperFieldDatePickerStyle\nA system style that displays the components in an editable field, with adjoining stepper that can increment/decrement the selected component.\nstruct WheelDatePickerStyle\nA date picker style that displays each component as columns in a scrollable wheel."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/init(_:)-1a4oh",
        "html": "Parameters\nattributedContent\n\nAn attributed string to style and display, in accordance with its attributes.\n\nDiscussion\n\nUse this initializer to style text according to attributes found in the specified AttributedString. Attributes in the attributed string take precedence over styles added by view modifiers. For example, the attributed text in the following example appears in blue, despite the use of the foregroundColor(_:) modifier to use red throughout the enclosing VStack:\n\nvar content: AttributedString {\n    var attributedString = AttributedString(\"Blue text\")\n    attributedString.foregroundColor = .blue\n    return attributedString\n}\n\n\nvar body: some View {\n    VStack {\n        Text(content)\n        Text(\"Red text\")\n    }\n    .foregroundColor(.red)\n}\n\n\nSwiftUI combines text attributes with SwiftUI modifiers whenever possible. For example, the following listing creates text that is both bold and red:\n\nvar content: AttributedString {\n    var content = AttributedString(\"Some text\")\n    content.inlinePresentationIntent = .stronglyEmphasized\n    return content\n}\n\n\nvar body: some View {\n    Text(content).foregroundColor(Color.red)\n}\n\n\nA SwiftUI Text view renders most of the styles defined by the Foundation attribute inlinePresentationIntent, like the stronglyEmphasized value, which SwiftUI presents as bold text.\n\nImportant\n\nText uses only a subset of the attributes defined in AttributeScopes.FoundationAttributes. Text renders all InlinePresentationIntent attributes except for lineBreak and softBreak. It also renders the link attribute as a clickable link. Text ignores any other Foundation-defined attributes in an attributed string.\n\nSwiftUI also defines additional attributes in the attribute scope AttributeScopes.SwiftUIAttributes which you can access from an attributed string\u2019s swiftUI property. SwiftUI attributes take precedence over equivalent attributes from other frameworks, such as AttributeScopes.UIKitAttributes and AttributeScopes.AppKitAttributes.\n\nYou can create an AttributedString with Markdown syntax, which allows you to style distinct runs within a Text view:\n\nlet content = try! AttributedString(\n    markdown: \"**Thank You!** Please visit our [website](http://example.com).\")\n\n\nvar body: some View {\n    Text(content)\n}\n\n\nThe ** syntax around \u201cThank You!\u201d applies an inlinePresentationIntent attribute with the value stronglyEmphasized. SwiftUI renders this as bold text, as described earlier. The link syntax around \u201cwebsite\u201d creates a link attribute, which Text styles to indicate it\u2019s a link; by default, clicking or tapping the link opens the linked URL in the user\u2019s default browser. Alternatively, you can perform custom link handling by putting an OpenURLAction in the text view\u2019s environment.\n\nYou can also use Markdown syntax in localized string keys, which means you can write the above example without needing to explicitly create an AttributedString:\n\nvar body: some View {\n    Text(\"**Thank You!** Please visit our [website](https://example.com).\")\n}\n\n\nIn your app\u2019s strings files, use Markdown syntax to apply styling to the app\u2019s localized strings. You also use this approach when you want to perform automatic grammar agreement on localized strings, with the ^[text](inflect:true) syntax.\n\nFor details about Markdown syntax support in SwiftUI, see init(_:tableName:bundle:comment:)."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/init(_:)-9d1g4",
        "html": "Parameters\ncontent\n\nThe string value to display without localization.\n\nDiscussion\n\nUse this initializer to create a text view that displays \u2014 without localization \u2014 the text in a string variable.\n\nText(someString) // Displays the contents of `someString` without localization.\n\n\nSwiftUI doesn\u2019t call the init(_:) method when you initialize a text view with a string literal as the input. Instead, a string literal triggers the init(_:tableName:bundle:comment:) method \u2014 which treats the input as a LocalizedStringKey instance \u2014 and attempts to perform localization.\n\nBy default, SwiftUI assumes that you don\u2019t want to localize stored strings, but if you do, you can first create a localized string key from the value, and initialize the text view with that. Using a key as input triggers the init(_:tableName:bundle:comment:) method instead.\n\nSee Also\nCreating a text view from a string\ninit(LocalizedStringKey, tableName: String?, bundle: Bundle?, comment: StaticString?)\nCreates a text view that displays localized content identified by a key.\ninit(LocalizedStringResource)\nCreates a text view that displays a localized string resource.\ninit(verbatim: String)\nCreates a text view that displays a string literal without localization."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/init(_:)-1s6o1",
        "html": "Discussion\n\nUse this initializer to display a localized string that is represented by a LocalizedStringResource\n\nvar object = LocalizedStringResource(\"pencil\")\nText(object) // Localizes the resource if possible, or displays \"pencil\" if not.\n\nSee Also\nCreating a text view from a string\ninit(LocalizedStringKey, tableName: String?, bundle: Bundle?, comment: StaticString?)\nCreates a text view that displays localized content identified by a key.\ninit<S>(S)\nCreates a text view that displays a stored string without localization.\ninit(verbatim: String)\nCreates a text view that displays a string literal without localization."
    },
    {
        "title": "init(verbatim:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/init(verbatim:)",
        "html": "Parameters\ncontent\n\nA string to display without localization.\n\nDiscussion\n\nUse this initializer to create a text view with a string literal without performing localization:\n\nText(verbatim: \"pencil\") // Displays the string \"pencil\" in any locale.\n\n\nIf you want to localize a string literal before displaying it, use the init(_:tableName:bundle:comment:) initializer instead. If you want to display a string variable, use the init(_:) initializer, which also bypasses localization.\n\nSee Also\nCreating a text view from a string\ninit(LocalizedStringKey, tableName: String?, bundle: Bundle?, comment: StaticString?)\nCreates a text view that displays localized content identified by a key.\ninit(LocalizedStringResource)\nCreates a text view that displays a localized string resource.\ninit<S>(S)\nCreates a text view that displays a stored string without localization."
    },
    {
        "title": "ContentMode.fit",
        "url": "https://developer.apple.com/documentation/swiftui/contentmode/fit",
        "html": "Discussion\n\nThis mode preserves the content\u2019s aspect ratio. If the content doesn\u2019t have the same aspect ratio as the available space, the content becomes the same size as the available space on one axis and leaves empty space on the other.\n\nSee Also\nGetting content modes\ncase fill\nAn option that resizes the content so it occupies all available space, both vertically and horizontally."
    },
    {
        "title": "Value",
        "url": "https://developer.apple.com/documentation/swiftui/keyframetrackcontent/value",
        "html": "Required\n\nSee Also\nCreating a keyframe\nvar body: Self.Body\nThe composition of content that comprise the keyframe track.\n\nRequired\n\nassociatedtype Body : KeyframeTrackContent\n\nRequired"
    },
    {
        "title": "interpolate",
        "url": "https://developer.apple.com/documentation/swiftui/contenttransition/interpolate",
        "html": "Discussion\n\nText views can interpolate transitions when the text views have identical strings. Matching glyph pairs can animate changes to their color, position, size, and any variable properties. Interpolation can apply within a Font.Design case, but not between cases, or between entirely different fonts. For example, you can interpolate a change between thin and black variations of a font, since these are both cases of Font.Weight. However, you can\u2019t interpolate between the default design of a font and its Italic version, because these are different fonts. Any changes that can\u2019t show an interpolated animation use an opacity animation instead.\n\nSymbol images created with the init(systemName:) initializer work the same way as text: changes within the same symbol attempt to interpolate the symbol\u2019s paths. When interpolation is unavailable, the system uses an opacity transition instead.\n\nSee Also\nGetting content transitions\nstatic let identity: ContentTransition\nThe identity content transition, which indicates that content changes shouldn\u2019t animate.\nstatic func numericText(countsDown: Bool) -> ContentTransition\nCreates a content transition intended to be used with Text views displaying numeric text. In certain environments changes to the text will enable a nonstandard transition tailored to numeric characters that count up or down.\nstatic func numericText(value: Double) -> ContentTransition\nCreates a content transition intended to be used with Text views displaying numbers.\nstatic let opacity: ContentTransition\nA content transition that indicates content fades from transparent to opaque on insertion, and from opaque to transparent on removal.\nstatic var symbolEffect: ContentTransition\nA content transition that applies the default symbol effect transition to symbol images within the inserted or removed view hierarchy. Other views are unaffected by this transition.\nstatic func symbolEffect<T>(T, options: SymbolEffectOptions) -> ContentTransition\nCreates a content transition that applies the symbol Replace animation to symbol images that it is applied to."
    },
    {
        "title": "opacity",
        "url": "https://developer.apple.com/documentation/swiftui/contenttransition/opacity",
        "html": "See Also\nGetting content transitions\nstatic let identity: ContentTransition\nThe identity content transition, which indicates that content changes shouldn\u2019t animate.\nstatic let interpolate: ContentTransition\nA content transition that indicates the views attempt to interpolate their contents during transitions, where appropriate.\nstatic func numericText(countsDown: Bool) -> ContentTransition\nCreates a content transition intended to be used with Text views displaying numeric text. In certain environments changes to the text will enable a nonstandard transition tailored to numeric characters that count up or down.\nstatic func numericText(value: Double) -> ContentTransition\nCreates a content transition intended to be used with Text views displaying numbers.\nstatic var symbolEffect: ContentTransition\nA content transition that applies the default symbol effect transition to symbol images within the inserted or removed view hierarchy. Other views are unaffected by this transition.\nstatic func symbolEffect<T>(T, options: SymbolEffectOptions) -> ContentTransition\nCreates a content transition that applies the symbol Replace animation to symbol images that it is applied to."
    },
    {
        "title": "TransitionPhase.didDisappear",
        "url": "https://developer.apple.com/documentation/swiftui/transitionphase/diddisappear",
        "html": "Discussion\n\nIn this phase, a transition should show the appearance that will be animated to to make the disappearance transition.\n\nSee Also\nGetting the phase\ncase identity\nThe transition is being applied to a view that is in the view hierarchy.\ncase willAppear\nThe transition is being applied to a view that is about to be inserted into the view hierarchy."
    },
    {
        "title": "entries(from:mode:)",
        "url": "https://developer.apple.com/documentation/swiftui/timelineschedule/entries(from:mode:)",
        "html": "Required\n\nParameters\nstartDate\n\nThe date by which the sequence begins.\n\nmode\n\nAn indication of whether the schedule updates normally, or with some other cadence.\n\nReturn Value\n\nA sequence of dates in ascending order.\n\nDiscussion\n\nA TimelineView that you create calls this method to figure out when to update its content. The method returns a sequence of dates in increasing order that represent points in time when the timeline view should update. Types that conform to the TimelineSchedule protocol, like the one returned by periodic(from:by:), or a custom schedule that you define, implement a custom version of this method to implement a particular kind of schedule.\n\nOne or more dates in the sequence might be before the given startDate, in which case the timeline view performs its first update at startDate using the entry that most closely precedes that date. For example, if in response to a startDate of 10:09:55, the method returns a sequence with the values 10:09:00, 10:10:00, 10:11:00, and so on, the timeline view performs an initial update at 10:09:55 (using the 10:09:00 entry), followed by another update at the beginning of every minute, starting at 10:10:00.\n\nA type that conforms should adjust its behavior based on the mode when possible. For example, a periodic schedule providing updates for a timer could restrict updates to once per minute while in the TimelineScheduleMode.lowFrequency mode:\n\nfunc entries(\n    from startDate: Date, mode: TimelineScheduleMode\n) -> PeriodicTimelineSchedule {\n    .periodic(\n        from: startDate, by: (mode == .lowFrequency ? 60.0 : 1.0)\n    )\n}\n\nSee Also\nGetting a sequence of dates\nassociatedtype Entries : Sequence\nThe sequence of dates within a schedule.\n\nRequired"
    },
    {
        "title": "AnimationTimelineSchedule",
        "url": "https://developer.apple.com/documentation/swiftui/animationtimelineschedule",
        "html": "Overview\n\nYou can also use animation(minimumInterval:paused:) to construct this schedule.\n\nTopics\nCreating a schedule\ninit(minimumInterval: Double?, paused: Bool)\nCreate a pausable schedule of dates updating at a frequency no more quickly than the provided interval.\nGetting the sequence of dates\nfunc entries(from: Date, mode: TimelineScheduleMode) -> AnimationTimelineSchedule.Entries\nReturns entries at the frequency of the animation schedule.\nRelationships\nConforms To\nSendable\nTimelineSchedule\nSee Also\nSupporting types\nstruct EveryMinuteTimelineSchedule\nA schedule for updating a timeline view at the start of every minute.\nstruct ExplicitTimelineSchedule\nA schedule for updating a timeline view at explicit points in time.\nstruct PeriodicTimelineSchedule\nA schedule for updating a timeline view at regular intervals."
    },
    {
        "title": "TimelineScheduleMode",
        "url": "https://developer.apple.com/documentation/swiftui/timelineschedulemode",
        "html": "Overview\n\nA TimelineView provides a mode when calling its schedule\u2019s entries(from:mode:) method. The view chooses a mode based on the state of the system. For example, a watchOS view might request a lower frequency of updates, using the TimelineScheduleMode.lowFrequency mode, when the user lowers their wrist.\n\nTopics\nGetting timeline schedule modes\ncase normal\nA mode that produces schedule updates at the schedule\u2019s natural cadence.\ncase lowFrequency\nA mode that produces schedule updates at a reduced rate.\nRelationships\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nSpecifying a mode\ntypealias Mode\nAn alias for the timeline schedule update mode."
    },
    {
        "title": "TimelineSchedule.Mode",
        "url": "https://developer.apple.com/documentation/swiftui/timelineschedule/mode",
        "html": "See Also\nSpecifying a mode\nenum TimelineScheduleMode\nA mode of operation for timeline schedule updates."
    },
    {
        "title": "Entries",
        "url": "https://developer.apple.com/documentation/swiftui/timelineschedule/entries",
        "html": "Required\n\nDiscussion\n\nThe entries(from:mode:) method returns a value of this type, which is a Sequence of dates in ascending order. A TimelineView that you create with a schedule updates its content at the moments in time corresponding to the dates included in the sequence.\n\nSee Also\nGetting a sequence of dates\nfunc entries(from: Date, mode: Self.Mode) -> Self.Entries\nProvides a sequence of dates starting around a given date.\n\nRequired"
    },
    {
        "title": "EveryMinuteTimelineSchedule",
        "url": "https://developer.apple.com/documentation/swiftui/everyminutetimelineschedule",
        "html": "Overview\n\nYou can also use everyMinute to construct this schedule.\n\nTopics\nCreating a schedule\ninit()\nCreates a per-minute update schedule.\nGetting the sequence of dates\nfunc entries(from: Date, mode: TimelineScheduleMode) -> EveryMinuteTimelineSchedule.Entries\nProvides a sequence of per-minute dates starting from a given date.\nstruct Entries\nThe sequence of dates in an every minute schedule.\nRelationships\nConforms To\nSendable\nTimelineSchedule\nSee Also\nSupporting types\nstruct AnimationTimelineSchedule\nA pausable schedule of dates updating at a frequency no more quickly than the provided interval.\nstruct ExplicitTimelineSchedule\nA schedule for updating a timeline view at explicit points in time.\nstruct PeriodicTimelineSchedule\nA schedule for updating a timeline view at regular intervals."
    },
    {
        "title": "PeriodicTimelineSchedule",
        "url": "https://developer.apple.com/documentation/swiftui/periodictimelineschedule",
        "html": "Overview\n\nYou can also use periodic(from:by:) to construct this schedule.\n\nTopics\nCreating a schedule\ninit(from: Date, by: TimeInterval)\nCreates a periodic update schedule.\nGetting the sequence of dates\nfunc entries(from: Date, mode: TimelineScheduleMode) -> PeriodicTimelineSchedule.Entries\nProvides a sequence of periodic dates starting from around a given date.\nstruct Entries\nThe sequence of dates in periodic schedule.\nRelationships\nConforms To\nSendable\nTimelineSchedule\nSee Also\nSupporting types\nstruct AnimationTimelineSchedule\nA pausable schedule of dates updating at a frequency no more quickly than the provided interval.\nstruct EveryMinuteTimelineSchedule\nA schedule for updating a timeline view at the start of every minute.\nstruct ExplicitTimelineSchedule\nA schedule for updating a timeline view at explicit points in time."
    },
    {
        "title": "first",
        "url": "https://developer.apple.com/documentation/swiftui/animatablepair/first",
        "html": "See Also\nGetting the constituent animations\nvar second: Second\nThe second value."
    },
    {
        "title": "everyMinute",
        "url": "https://developer.apple.com/documentation/swiftui/timelineschedule/everyminute",
        "html": "Discussion\n\nInitialize a TimelineView with an every minute timeline schedule when you want to schedule timeline view updates at the start of every minute:\n\nTimelineView(.everyMinute) { context in\n    Text(context.date.description)\n}\n\n\nThe schedule provides the first date as the beginning of the minute in which you use it to initialize the timeline view. For example, if you create the timeline view at 10:09:38, the schedule\u2019s first entry is 10:09:00. In response, the timeline view performs its first update immediately, providing the beginning of the current minute, namely 10:09:00, as context to its content. Subsequent updates happen at the beginning of each minute that follows.\n\nThe schedule defines the EveryMinuteTimelineSchedule.Entries structure to return the sequence of dates when the timeline view calls the entries(from:mode:) method.\n\nSee Also\nGetting built-in schedules\nstatic var animation: AnimationTimelineSchedule\nA pausable schedule of dates updating at a frequency no more quickly than the provided interval.\nAvailable when Self is AnimationTimelineSchedule.\nstatic func animation(minimumInterval: Double?, paused: Bool) -> AnimationTimelineSchedule\nA pausable schedule of dates updating at a frequency no more quickly than the provided interval.\nAvailable when Self is AnimationTimelineSchedule.\nstatic func explicit<S>(S) -> ExplicitTimelineSchedule<S>\nA schedule for updating a timeline view at explicit points in time.\nstatic func periodic(from: Date, by: TimeInterval) -> PeriodicTimelineSchedule\nA schedule for updating a timeline view at regular intervals.\nAvailable when Self is PeriodicTimelineSchedule."
    },
    {
        "title": "ExplicitTimelineSchedule",
        "url": "https://developer.apple.com/documentation/swiftui/explicittimelineschedule",
        "html": "Overview\n\nYou can also use explicit(_:) to construct this schedule.\n\nTopics\nCreating a schedule\ninit(Entries)\nCreates a schedule composed of an explicit sequence of dates.\nGetting the sequence of dates\nfunc entries(from: Date, mode: TimelineScheduleMode) -> Entries\nProvides the sequence of dates with which you initialized the schedule.\nRelationships\nConforms To\nTimelineSchedule\nSee Also\nSupporting types\nstruct AnimationTimelineSchedule\nA pausable schedule of dates updating at a frequency no more quickly than the provided interval.\nstruct EveryMinuteTimelineSchedule\nA schedule for updating a timeline view at the start of every minute.\nstruct PeriodicTimelineSchedule\nA schedule for updating a timeline view at regular intervals."
    },
    {
        "title": "periodic(from:by:)",
        "url": "https://developer.apple.com/documentation/swiftui/timelineschedule/periodic(from:by:)",
        "html": "Parameters\nstartDate\n\nThe date on which to start the sequence.\n\ninterval\n\nThe time interval between successive sequence entries.\n\nDiscussion\n\nInitialize a TimelineView with a periodic timeline schedule when you want to schedule timeline view updates periodically with a custom interval:\n\nTimelineView(.periodic(from: startDate, by: 3.0)) { context in\n    Text(context.date.description)\n}\n\n\nThe timeline view updates its content at the start date, and then again at dates separated in time by the interval amount, which is every three seconds in the example above. For a start date in the past, the view updates immediately, providing as context the date corresponding to the most recent interval boundary. The view then refreshes normally at subsequent interval boundaries. For a start date in the future, the view updates once with the current date, and then begins regular updates at the start date.\n\nThe schedule defines the PeriodicTimelineSchedule.Entries structure to return the sequence of dates when the timeline view calls the entries(from:mode:) method.\n\nSee Also\nGetting built-in schedules\nstatic var animation: AnimationTimelineSchedule\nA pausable schedule of dates updating at a frequency no more quickly than the provided interval.\nAvailable when Self is AnimationTimelineSchedule.\nstatic func animation(minimumInterval: Double?, paused: Bool) -> AnimationTimelineSchedule\nA pausable schedule of dates updating at a frequency no more quickly than the provided interval.\nAvailable when Self is AnimationTimelineSchedule.\nstatic var everyMinute: EveryMinuteTimelineSchedule\nA schedule for updating a timeline view at the start of every minute.\nAvailable when Self is EveryMinuteTimelineSchedule.\nstatic func explicit<S>(S) -> ExplicitTimelineSchedule<S>\nA schedule for updating a timeline view at explicit points in time."
    },
    {
        "title": "explicit(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/timelineschedule/explicit(_:)",
        "html": "Parameters\ndates\n\nThe sequence of dates at which a timeline view updates. Use a monotonically increasing sequence of dates, and ensure that at least one is in the future.\n\nDiscussion\n\nInitialize a TimelineView with an explicit timeline schedule when you want to schedule view updates at particular points in time:\n\nlet dates = [\n    Date(timeIntervalSinceNow: 10), // Update ten seconds from now,\n    Date(timeIntervalSinceNow: 12) // and a few seconds later.\n]\n\n\nstruct MyView: View {\n    var body: some View {\n        TimelineView(.explicit(dates)) { context in\n            Text(context.date.description)\n        }\n    }\n}\n\n\nThe timeline view updates its content on exactly the dates that you specify, until it runs out of dates, after which it stops changing. If the dates you provide are in the past, the timeline view updates exactly once with the last entry. If you only provide dates in the future, the timeline view renders with the current date until the first date arrives. If you provide one or more dates in the past and one or more in the future, the view renders the most recent past date, refreshing normally on all subsequent dates.\n\nSee Also\nGetting built-in schedules\nstatic var animation: AnimationTimelineSchedule\nA pausable schedule of dates updating at a frequency no more quickly than the provided interval.\nAvailable when Self is AnimationTimelineSchedule.\nstatic func animation(minimumInterval: Double?, paused: Bool) -> AnimationTimelineSchedule\nA pausable schedule of dates updating at a frequency no more quickly than the provided interval.\nAvailable when Self is AnimationTimelineSchedule.\nstatic var everyMinute: EveryMinuteTimelineSchedule\nA schedule for updating a timeline view at the start of every minute.\nAvailable when Self is EveryMinuteTimelineSchedule.\nstatic func periodic(from: Date, by: TimeInterval) -> PeriodicTimelineSchedule\nA schedule for updating a timeline view at regular intervals.\nAvailable when Self is PeriodicTimelineSchedule."
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/timelineview/init(_:content:)-1mlmj",
        "html": "Parameters\nschedule\n\nA schedule that produces a sequence of dates that indicate the instances when the view should update. Use a type that conforms to TimelineSchedule, like everyMinute, or a custom timeline schedule that you define.\n\ncontent\n\nA closure that generates view content at the moments indicated by the schedule. The closure takes an input of type TimelineViewDefaultContext that includes the date from the schedule that prompted the update, as well as a TimelineView.Context.Cadence value that the view can use to customize its appearance.\n\nSee Also\nCreating a timeline\nstruct Context\nInformation passed to a timeline view\u2019s content callback."
    },
    {
        "title": "cadence",
        "url": "https://developer.apple.com/documentation/swiftui/timelineview/context/cadence-swift.property",
        "html": "Discussion\n\nUse this value to hide information that updates faster than the view\u2019s current update rate. For example, you could hide the millisecond component of a digital timer when the cadence is anything slower than TimelineView.Context.Cadence.live.\n\nBecause the TimelineView.Context.Cadence enumeration conforms to the Comparable protocol, you can compare cadences with relational operators. Slower cadences have higher values, so you could perform the check described above with the following comparison:\n\nlet hideMilliseconds = cadence > .live\n\nSee Also\nGetting the cadence\nenum Cadence\nA rate at which timeline views can receive updates."
    },
    {
        "title": "buildFinalResult(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/keyframesbuilder/buildfinalresult(_:)-161lq",
        "html": "See Also\nBuilding keyframes\nstatic func buildArray([some KeyframeTrackContent<Value>]) -> some KeyframeTrackContent<Value>\nstatic func buildBlock() -> some Keyframes<Value>\nstatic func buildBlock() -> some KeyframeTrackContent<Value>\nstatic func buildEither<First, Second>(first: First) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildEither<First, Second>(second: Second) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildExpression<K>(K) -> K\nstatic func buildExpression<Content>(Content) -> Content\nKeyframes\nstatic func buildFinalResult<Content>(Content) -> Content\nstatic func buildPartialBlock(accumulated: some KeyframeTrackContent<Value>, next: some KeyframeTrackContent<Value>) -> some KeyframeTrackContent<Value>\nstatic func buildPartialBlock(accumulated: some Keyframes<Value>, next: some Keyframes<Value>) -> some Keyframes<Value>\nstatic func buildPartialBlock<Content>(first: Content) -> Content\nstatic func buildPartialBlock<K>(first: K) -> K"
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/timelineview/init(_:content:)-67h35",
        "html": "Deprecated\n\nUse init(_:content:) instead. The replacement initializer\u2019s context closure takes a TimelineViewDefaultContext as its input rather than a TimelineView.Context to prevent introducing an unnecessary generic parameter dependency on the context type.\n\nParameters\nschedule\n\nA schedule that produces a sequence of dates that indicate the instances when the view should update. Use a type that conforms to TimelineSchedule, like everyMinute, or a custom timeline schedule that you define.\n\ncontent\n\nA closure that generates view content at the moments indicated by the schedule. The closure takes an input of type TimelineView.Context that includes the date from the schedule that prompted the update, as well as a TimelineView.Context.Cadence value that the view can use to customize its appearance."
    },
    {
        "title": "date",
        "url": "https://developer.apple.com/documentation/swiftui/timelineview/context/date",
        "html": "Discussion\n\nThe first time a TimelineView closure receives this date, it might be in the past. For example, if you create an everyMinute schedule at 10:09:55, the schedule creates entries 10:09:00, 10:10:00, 10:11:00, and so on. In response, the timeline view performs an initial update immediately, at 10:09:55, but the context contains the 10:09:00 date entry. Subsequent entries arrive at their corresponding times."
    },
    {
        "title": "buildPartialBlock(first:)",
        "url": "https://developer.apple.com/documentation/swiftui/keyframesbuilder/buildpartialblock(first:)-1zpci",
        "html": "See Also\nBuilding keyframes\nstatic func buildArray([some KeyframeTrackContent<Value>]) -> some KeyframeTrackContent<Value>\nstatic func buildBlock() -> some Keyframes<Value>\nstatic func buildBlock() -> some KeyframeTrackContent<Value>\nstatic func buildEither<First, Second>(first: First) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildEither<First, Second>(second: Second) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildExpression<K>(K) -> K\nstatic func buildExpression<Content>(Content) -> Content\nKeyframes\nstatic func buildFinalResult<Content>(Content) -> KeyframeTrack<Value, Value, Content>\nstatic func buildFinalResult<Content>(Content) -> Content\nstatic func buildPartialBlock(accumulated: some KeyframeTrackContent<Value>, next: some KeyframeTrackContent<Value>) -> some KeyframeTrackContent<Value>\nstatic func buildPartialBlock(accumulated: some Keyframes<Value>, next: some Keyframes<Value>) -> some Keyframes<Value>\nstatic func buildPartialBlock<K>(first: K) -> K"
    },
    {
        "title": "buildFinalResult(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/keyframesbuilder/buildfinalresult(_:)-7d3ar",
        "html": "See Also\nBuilding keyframes\nstatic func buildArray([some KeyframeTrackContent<Value>]) -> some KeyframeTrackContent<Value>\nstatic func buildBlock() -> some Keyframes<Value>\nstatic func buildBlock() -> some KeyframeTrackContent<Value>\nstatic func buildEither<First, Second>(first: First) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildEither<First, Second>(second: Second) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildExpression<K>(K) -> K\nstatic func buildExpression<Content>(Content) -> Content\nKeyframes\nstatic func buildFinalResult<Content>(Content) -> KeyframeTrack<Value, Value, Content>\nstatic func buildPartialBlock(accumulated: some KeyframeTrackContent<Value>, next: some KeyframeTrackContent<Value>) -> some KeyframeTrackContent<Value>\nstatic func buildPartialBlock(accumulated: some Keyframes<Value>, next: some Keyframes<Value>) -> some Keyframes<Value>\nstatic func buildPartialBlock<Content>(first: Content) -> Content\nstatic func buildPartialBlock<K>(first: K) -> K"
    },
    {
        "title": "buildPartialBlock(accumulated:next:)",
        "url": "https://developer.apple.com/documentation/swiftui/keyframesbuilder/buildpartialblock(accumulated:next:)-2dqhd",
        "html": "See Also\nBuilding keyframes\nstatic func buildArray([some KeyframeTrackContent<Value>]) -> some KeyframeTrackContent<Value>\nstatic func buildBlock() -> some Keyframes<Value>\nstatic func buildBlock() -> some KeyframeTrackContent<Value>\nstatic func buildEither<First, Second>(first: First) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildEither<First, Second>(second: Second) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildExpression<K>(K) -> K\nstatic func buildExpression<Content>(Content) -> Content\nKeyframes\nstatic func buildFinalResult<Content>(Content) -> KeyframeTrack<Value, Value, Content>\nstatic func buildFinalResult<Content>(Content) -> Content\nstatic func buildPartialBlock(accumulated: some KeyframeTrackContent<Value>, next: some KeyframeTrackContent<Value>) -> some KeyframeTrackContent<Value>\nstatic func buildPartialBlock<Content>(first: Content) -> Content\nstatic func buildPartialBlock<K>(first: K) -> K"
    },
    {
        "title": "buildPartialBlock(first:)",
        "url": "https://developer.apple.com/documentation/swiftui/keyframesbuilder/buildpartialblock(first:)-6va20",
        "html": "See Also\nBuilding keyframes\nstatic func buildArray([some KeyframeTrackContent<Value>]) -> some KeyframeTrackContent<Value>\nstatic func buildBlock() -> some Keyframes<Value>\nstatic func buildBlock() -> some KeyframeTrackContent<Value>\nstatic func buildEither<First, Second>(first: First) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildEither<First, Second>(second: Second) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildExpression<K>(K) -> K\nstatic func buildExpression<Content>(Content) -> Content\nKeyframes\nstatic func buildFinalResult<Content>(Content) -> KeyframeTrack<Value, Value, Content>\nstatic func buildFinalResult<Content>(Content) -> Content\nstatic func buildPartialBlock(accumulated: some KeyframeTrackContent<Value>, next: some KeyframeTrackContent<Value>) -> some KeyframeTrackContent<Value>\nstatic func buildPartialBlock(accumulated: some Keyframes<Value>, next: some Keyframes<Value>) -> some Keyframes<Value>\nstatic func buildPartialBlock<Content>(first: Content) -> Content"
    },
    {
        "title": "second",
        "url": "https://developer.apple.com/documentation/swiftui/animatablepair/second",
        "html": "See Also\nGetting the constituent animations\nvar first: First\nThe first value."
    },
    {
        "title": "buildBlock()",
        "url": "https://developer.apple.com/documentation/swiftui/keyframesbuilder/buildblock()-74zhl",
        "html": "See Also\nBuilding keyframes\nstatic func buildArray([some KeyframeTrackContent<Value>]) -> some KeyframeTrackContent<Value>\nstatic func buildBlock() -> some KeyframeTrackContent<Value>\nstatic func buildEither<First, Second>(first: First) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildEither<First, Second>(second: Second) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildExpression<K>(K) -> K\nstatic func buildExpression<Content>(Content) -> Content\nKeyframes\nstatic func buildFinalResult<Content>(Content) -> KeyframeTrack<Value, Value, Content>\nstatic func buildFinalResult<Content>(Content) -> Content\nstatic func buildPartialBlock(accumulated: some KeyframeTrackContent<Value>, next: some KeyframeTrackContent<Value>) -> some KeyframeTrackContent<Value>\nstatic func buildPartialBlock(accumulated: some Keyframes<Value>, next: some Keyframes<Value>) -> some Keyframes<Value>\nstatic func buildPartialBlock<Content>(first: Content) -> Content\nstatic func buildPartialBlock<K>(first: K) -> K"
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/datepickerstyle/automatic",
        "html": "See Also\nGetting built-in date picker styles\nstatic var compact: CompactDatePickerStyle\nA date picker style that displays the components in a compact, textual format.\nAvailable when Self is CompactDatePickerStyle.\nstatic var field: FieldDatePickerStyle\nA date picker style that displays the components in an editable field.\nAvailable when Self is FieldDatePickerStyle.\nstatic var graphical: GraphicalDatePickerStyle\nA date picker style that displays an interactive calendar or clock.\nAvailable when Self is GraphicalDatePickerStyle.\nstatic var stepperField: StepperFieldDatePickerStyle\nA system style that displays the components in an editable field, with adjoining stepper that can increment/decrement the selected component.\nAvailable when Self is StepperFieldDatePickerStyle.\nstatic var wheel: WheelDatePickerStyle\nA date picker style that displays each component as columns in a scrollable wheel.\nAvailable when Self is WheelDatePickerStyle."
    },
    {
        "title": "init(initialValue:repeating:content:keyframes:)",
        "url": "https://developer.apple.com/documentation/swiftui/keyframeanimator/init(initialvalue:repeating:content:keyframes:)",
        "html": "Parameters\ninitialValue\n\nThe initial value that the keyframes will animate from.\n\nrepeating\n\nWhether the keyframes are currently repeating. If false, the value at the beginning of the keyframe timeline will be provided to the content closure.\n\ncontent\n\nA view builder closure that takes the interpolated value generated by the keyframes as its single argument.\n\nkeyframes\n\nKeyframes defining how the value changes over time. The current value of the animator is the single argument, which is equal to initialValue when the view first appears, then is equal to the end value of the previous keyframe animation on subsequent calls.\n\nDiscussion\n\nNote that the content closure will be updated on every frame while animating, so avoid performing any expensive operations directly within content.\n\nSee Also\nCreating a phase animator\ninit(initialValue: Value, trigger: some Equatable, content: (Value) -> Content, keyframes: (Value) -> KeyframePath)\nPlays the given keyframes when the given trigger value changes, updating the view using the modifiers you apply in body."
    },
    {
        "title": "init(initialValue:trigger:content:keyframes:)",
        "url": "https://developer.apple.com/documentation/swiftui/keyframeanimator/init(initialvalue:trigger:content:keyframes:)",
        "html": "Parameters\ninitialValue\n\nThe initial value that the keyframes will animate from.\n\ntrigger\n\nA value to observe for changes.\n\ncontent\n\nA view builder closure that takes the interpolated value generated by the keyframes as its single argument.\n\nkeyframes\n\nKeyframes defining how the value changes over time. The current value of the animator is the single argument, which is equal to initialValue when the view first appears, then is equal to the end value of the previous keyframe animation on subsequent calls.\n\nDiscussion\n\nNote that the content closure will be updated on every frame while animating, so avoid performing any expensive operations directly within content.\n\nIf the trigger value changes while animating, the keyframes closure will be called with the current interpolated value, and the keyframes that you return define a new animation that replaces the old one. The previous velocity will be preserved, so cubic or spring keyframes will maintain continuity from the previous animation if they do not specify a custom initial velocity.\n\nWhen a keyframe animation finishes, the animator will remain at the end value, which becomes the initial value for the next animation.\n\nSee Also\nCreating a phase animator\ninit(initialValue: Value, repeating: Bool, content: (Value) -> Content, keyframes: (Value) -> KeyframePath)\nLoops the given keyframes continuously, updating the view using the modifiers you apply in body."
    },
    {
        "title": "value(progress:)",
        "url": "https://developer.apple.com/documentation/swiftui/keyframetimeline/value(progress:)",
        "html": "See Also\nGetting an interpolated value\nfunc value(time: Double) -> Value\nReturns the interpolated value at the given time."
    },
    {
        "title": "init(_:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/keyframetrack/init(_:content:)",
        "html": "Parameters\nkeyPath\n\nThe property to animate.\n\nkeyframes\n\nA keyframe collection builder closure containing the keyframes that control the interpolation curve.\n\nSee Also\nCreating a keyframe track\ninit(content: () -> Content)\nCreates an instance that animates the entire value from the root of the key path."
    },
    {
        "title": "Body",
        "url": "https://developer.apple.com/documentation/swiftui/keyframes/body-swift.associatedtype",
        "html": "Required\n\nDiscussion\n\nWhen you create a custom keyframes type, Swift infers this type from your implementation of the required body property.\n\nSee Also\nCreating a keyframe\nvar body: Self.Body\nThe composition of content that comprise the keyframes.\n\nRequired\n\nassociatedtype Value = Self.Body.Value\nThe type of value animated by this keyframes type\n\nRequired"
    },
    {
        "title": "init(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/keyframetrack/init(content:)",
        "html": "Parameters\nkeyframes\n\nA keyframe collection builder closure containing the keyframes that control the interpolation curve.\n\nSee Also\nCreating a keyframe track\ninit(WritableKeyPath<Root, Value>, content: () -> Content)\nCreates an instance that animates the property of the root value at the given key path."
    },
    {
        "title": "Value",
        "url": "https://developer.apple.com/documentation/swiftui/keyframes/value",
        "html": "Required\n\nSee Also\nCreating a keyframe\nvar body: Self.Body\nThe composition of content that comprise the keyframes.\n\nRequired\n\nassociatedtype Body : Keyframes\nThe type of keyframes representing the body of this type.\n\nRequired"
    },
    {
        "title": "init(_:duration:startVelocity:endVelocity:)",
        "url": "https://developer.apple.com/documentation/swiftui/cubickeyframe/init(_:duration:startvelocity:endvelocity:)",
        "html": "Parameters\nto\n\nThe value of the keyframe.\n\nstartVelocity\n\nThe velocity of the value at the beginning of the segment, or nil to automatically compute the velocity to maintain smooth motion.\n\nendVelocity\n\nThe velocity of the value at the end of the segment, or nil to automatically compute the velocity to maintain smooth motion.\n\nduration\n\nThe duration of the segment defined by this keyframe."
    },
    {
        "title": "offset(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/anytransition/offset(_:)",
        "html": "See Also\nGetting built-in transitions\nstatic let identity: AnyTransition\nA transition that returns the input view, unmodified, as the output view.\nstatic func move(edge: Edge) -> AnyTransition\nReturns a transition that moves the view away, towards the specified edge of the view.\nstatic func offset(x: CGFloat, y: CGFloat) -> AnyTransition\nstatic let opacity: AnyTransition\nA transition from transparent to opaque on insertion, and from opaque to transparent on removal.\nstatic func push(from: Edge) -> AnyTransition\nCreates a transition that when added to a view will animate the view\u2019s insertion by moving it in from the specified edge while fading it in, and animate its removal by moving it out towards the opposite edge and fading it out.\nstatic var scale: AnyTransition\nReturns a transition that scales the view.\nstatic func scale(scale: CGFloat, anchor: UnitPoint) -> AnyTransition\nReturns a transition that scales the view by the specified amount.\nstatic var slide: AnyTransition\nA transition that inserts by moving in from the leading edge, and removes by moving out towards the trailing edge."
    },
    {
        "title": "init(_:content:animation:)",
        "url": "https://developer.apple.com/documentation/swiftui/phaseanimator/init(_:content:animation:)",
        "html": "Parameters\nphases\n\nThe sequence of phases to cycle through. Ensure that the sequence isn\u2019t empty. If it is, SwiftUI logs a runtime warning and also returns a visual warning as the output view.\n\ncontent\n\nA view builder closure that takes the current phase as an input. Return a view that\u2019s based on the current phase.\n\nanimation\n\nA closure that takes the current phase as input. Return the animation to use when transitioning to the next phase. If you return nil, the transition doesn\u2019t animate. If you don\u2019t set this parameter, SwiftUI uses a default animation.\n\nDiscussion\n\nWhen the phase animator first appears, this initializer renders the content closure using the first phase as input to the closure. The animator then begins immediately animating to the view produced by sending the second phase to the content closure using the animation returned from the animation closure. This procedure repeats for successive phases until reaching the last phase, after which the animator loops back to the first phase again.\n\nSee Also\nCreating a phase animator\ninit(some Sequence<Phase>, trigger: some Equatable, content: (Phase) -> Content, animation: (Phase) -> Animation?)\nCycles through a sequence of phases in response to changes in a specified value, animating updates to a view on each phase change."
    },
    {
        "title": "DynamicTypeSize.large",
        "url": "https://developer.apple.com/documentation/swiftui/dynamictypesize/large",
        "html": "See Also\nGetting type sizes\ncase xSmall\nAn extra small size.\ncase small\nA small size.\ncase medium\nA medium size.\ncase xLarge\nAn extra large size.\ncase xxLarge\nAn extra extra large size.\ncase xxxLarge\nAn extra extra extra large size."
    },
    {
        "title": "init(_:trigger:content:animation:)",
        "url": "https://developer.apple.com/documentation/swiftui/phaseanimator/init(_:trigger:content:animation:)",
        "html": "Parameters\nphases\n\nThe sequence of phases to cycle through. Ensure that the sequence isn\u2019t empty. If it is, SwiftUI logs a runtime warning and also returns a visual warning as the output view.\n\ntrigger\n\nA value whose changes cause the animator to use the next phase.\n\ncontent\n\nA view builder closure that takes the current phase as an input. Return a view that\u2019s based on the phase input.\n\nanimation\n\nA closure that takes the current phase as input. Return the animation to use when transitioning to the next phase. If you return nil, the transition doesn\u2019t animate. If you don\u2019t set this parameter, SwiftUI uses a default animation.\n\nDiscussion\n\nWhen the phase animator first appears, this initializer renders the content closure using the first phase as input to the closure. When the value of the trigger input changes, the animator reevaluates the content closure using the value from the second phase and animates the change. This procedure repeats with each successive phase until reaching the last phase, at which point the animator loops back to the first phase.\n\nSee Also\nCreating a phase animator\ninit(some Sequence<Phase>, content: (Phase) -> Content, animation: (Phase) -> Animation?)\nCycles through a sequence of phases continuously, animating updates to a view on each phase change."
    },
    {
        "title": "timingCurve(_:duration:)",
        "url": "https://developer.apple.com/documentation/swiftui/animation/timingcurve(_:duration:)",
        "html": "Parameters\ntimingCurve\n\nA curve that describes the speed of the animation over its duration.\n\nduration\n\nThe duration of the animation, in seconds.\n\nSee Also\nCreating custom animations\ninit<A>(A)\nCreate an Animation that contains the specified custom animation.\nstatic func timingCurve(Double, Double, Double, Double, duration: TimeInterval) -> Animation\nAn animation created from a cubic B\u00e9zier timing curve."
    },
    {
        "title": "interpolate(towards:amount:)",
        "url": "https://developer.apple.com/documentation/swiftui/vectorarithmetic/interpolate(towards:amount:)",
        "html": "Discussion\n\nThis is equivalent to self = self + (other - self) * amount.\n\nSee Also\nManipulating values\nvar magnitudeSquared: Double\nReturns the dot-product of this vector arithmetic instance with itself.\n\nRequired\n\nfunc scale(by: Double)\nMultiplies each component of this value by the given value.\n\nRequired Default implementation provided.\n\nfunc scaled(by: Double) -> Self\nReturns a value with each component of this value multiplied by the given value.\nfunc interpolated(towards: Self, amount: Double) -> Self\nReturns this value interpolated with other by the specified amount."
    },
    {
        "title": "interpolated(towards:amount:)",
        "url": "https://developer.apple.com/documentation/swiftui/vectorarithmetic/interpolated(towards:amount:)",
        "html": "Discussion\n\nThis result is equivalent to self + (other - self) * amount.\n\nSee Also\nManipulating values\nvar magnitudeSquared: Double\nReturns the dot-product of this vector arithmetic instance with itself.\n\nRequired\n\nfunc scale(by: Double)\nMultiplies each component of this value by the given value.\n\nRequired Default implementation provided.\n\nfunc scaled(by: Double) -> Self\nReturns a value with each component of this value multiplied by the given value.\nfunc interpolate(towards: Self, amount: Double)\nInterpolates this value with other by the specified amount."
    },
    {
        "title": "Body",
        "url": "https://developer.apple.com/documentation/swiftui/disclosuregroupstyle/body",
        "html": "Required\n\nSee Also\nCreating custom disclosure group styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view that represents the body of a disclosure group.\n\nRequired\n\nstruct DisclosureGroupStyleConfiguration\nThe properties of a disclosure group instance.\ntypealias Configuration\nThe properties of a disclosure group instance."
    },
    {
        "title": "scaled(by:)",
        "url": "https://developer.apple.com/documentation/swiftui/vectorarithmetic/scaled(by:)",
        "html": "See Also\nManipulating values\nvar magnitudeSquared: Double\nReturns the dot-product of this vector arithmetic instance with itself.\n\nRequired\n\nfunc scale(by: Double)\nMultiplies each component of this value by the given value.\n\nRequired Default implementation provided.\n\nfunc interpolate(towards: Self, amount: Double)\nInterpolates this value with other by the specified amount.\nfunc interpolated(towards: Self, amount: Double) -> Self\nReturns this value interpolated with other by the specified amount."
    },
    {
        "title": "AutomaticDisclosureGroupStyle",
        "url": "https://developer.apple.com/documentation/swiftui/automaticdisclosuregroupstyle",
        "html": "Overview\n\nUse automatic to construct this style.\n\nTopics\nCreating the disclosure group style\ninit()\nCreates an automatic disclosure group style.\nRelationships\nConforms To\nDisclosureGroupStyle"
    },
    {
        "title": "italic()",
        "url": "https://developer.apple.com/documentation/swiftui/font/italic()",
        "html": "See Also\nStyling a font\nfunc bold() -> Font\nAdds bold styling to the font.\nfunc monospaced() -> Font\nReturns a fixed-width font from the same family as the base font.\nfunc monospacedDigit() -> Font\nReturns a modified font that uses fixed-width digits, while leaving other characters proportionally spaced.\nfunc smallCaps() -> Font\nAdjusts the font to enable all small capitals.\nfunc lowercaseSmallCaps() -> Font\nAdjusts the font to enable lowercase small capitals.\nfunc uppercaseSmallCaps() -> Font\nAdjusts the font to enable uppercase small capitals.\nfunc weight(Font.Weight) -> Font\nSets the weight of the font.\nfunc width(Font.Width) -> Font\nSets the width of the font.\nstruct Width\nA width to use for fonts that have multiple widths.\nfunc leading(Font.Leading) -> Font\nAdjusts the line spacing of a font.\nenum Leading\nA line spacing adjustment that you can apply to a font."
    },
    {
        "title": "Text.TruncationMode.tail",
        "url": "https://developer.apple.com/documentation/swiftui/text/truncationmode/tail",
        "html": "Discussion\n\nUse this kind of truncation to omit characters from the end of the string. For example, you could truncate the English alphabet as \u201cabcd\u2026\u201d.\n\nSee Also\nGetting text truncation modes\ncase head\nTruncate at the beginning of the line.\ncase middle\nTruncate in the middle of the line."
    },
    {
        "title": "weight(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/font/weight(_:)",
        "html": "See Also\nStyling a font\nfunc bold() -> Font\nAdds bold styling to the font.\nfunc italic() -> Font\nAdds italics to the font.\nfunc monospaced() -> Font\nReturns a fixed-width font from the same family as the base font.\nfunc monospacedDigit() -> Font\nReturns a modified font that uses fixed-width digits, while leaving other characters proportionally spaced.\nfunc smallCaps() -> Font\nAdjusts the font to enable all small capitals.\nfunc lowercaseSmallCaps() -> Font\nAdjusts the font to enable lowercase small capitals.\nfunc uppercaseSmallCaps() -> Font\nAdjusts the font to enable uppercase small capitals.\nfunc width(Font.Width) -> Font\nSets the width of the font.\nstruct Width\nA width to use for fonts that have multiple widths.\nfunc leading(Font.Leading) -> Font\nAdjusts the line spacing of a font.\nenum Leading\nA line spacing adjustment that you can apply to a font."
    },
    {
        "title": "body",
        "url": "https://developer.apple.com/documentation/swiftui/font/body",
        "html": "See Also\nGetting standard fonts\nstatic let extraLargeTitle2: Font\nCreate a font with the second level extra large title text style.\nBeta\nstatic let extraLargeTitle: Font\nCreate a font with the extra large title text style.\nBeta\nstatic let largeTitle: Font\nA font with the large title text style.\nstatic let title: Font\nA font with the title text style.\nstatic let title2: Font\nCreate a font for second level hierarchical headings.\nstatic let title3: Font\nCreate a font for third level hierarchical headings.\nstatic let headline: Font\nA font with the headline text style.\nstatic let subheadline: Font\nA font with the subheadline text style.\nstatic let callout: Font\nA font with the callout text style.\nstatic let caption: Font\nA font with the caption text style.\nstatic let caption2: Font\nCreate a font with the alternate caption text style.\nstatic let footnote: Font\nA font with the footnote text style."
    },
    {
        "title": "ContentSizeCategory.accessibilityLarge",
        "url": "https://developer.apple.com/documentation/swiftui/contentsizecategory/accessibilitylarge",
        "html": "See Also\nContent size categories\ncase accessibilityExtraExtraExtraLarge\ncase accessibilityExtraExtraLarge\ncase accessibilityExtraLarge\ncase accessibilityMedium\ncase extraExtraExtraLarge\ncase extraExtraLarge\ncase extraLarge\ncase extraSmall\ncase large\ncase medium\ncase small"
    },
    {
        "title": "largeTitle",
        "url": "https://developer.apple.com/documentation/swiftui/font/largetitle",
        "html": "See Also\nGetting standard fonts\nstatic let extraLargeTitle2: Font\nCreate a font with the second level extra large title text style.\nBeta\nstatic let extraLargeTitle: Font\nCreate a font with the extra large title text style.\nBeta\nstatic let title: Font\nA font with the title text style.\nstatic let title2: Font\nCreate a font for second level hierarchical headings.\nstatic let title3: Font\nCreate a font for third level hierarchical headings.\nstatic let headline: Font\nA font with the headline text style.\nstatic let subheadline: Font\nA font with the subheadline text style.\nstatic let body: Font\nA font with the body text style.\nstatic let callout: Font\nA font with the callout text style.\nstatic let caption: Font\nA font with the caption text style.\nstatic let caption2: Font\nCreate a font with the alternate caption text style.\nstatic let footnote: Font\nA font with the footnote text style."
    },
    {
        "title": "font(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/font(_:)",
        "html": "Parameters\nfont\n\nThe font to use when displaying this text.\n\nReturn Value\n\nText that uses the font you specify.\n\nDiscussion\n\nUse font(_:) to apply a specific font to an individual Text View, or all of the text views in a container.\n\nIn the example below, the first text field has a font set directly, while the font applied to the following container applies to all of the text views inside that container:\n\nVStack {\n    Text(\"Font applied to a text view.\")\n        .font(.largeTitle)\n\n\n    VStack {\n        Text(\"These two text views have the same font\")\n        Text(\"applied to their parent view.\")\n    }\n    .font(.system(size: 16, weight: .light, design: .default))\n}\n\n\nSee Also\nChoosing a font\nfunc fontWeight(Font.Weight?) -> Text\nSets the font weight of the text.\nfunc fontDesign(Font.Design?) -> Text\nSets the font design of the text.\nfunc fontWidth(Font.Width?) -> Text\nSets the font width of the text."
    },
    {
        "title": "custom(_:size:)",
        "url": "https://developer.apple.com/documentation/swiftui/font/custom(_:size:)",
        "html": "See Also\nCreating custom fonts\nstatic func custom(String, fixedSize: CGFloat) -> Font\nCreate a custom font with the given name and a fixed size that does not scale with Dynamic Type.\nstatic func custom(String, size: CGFloat, relativeTo: Font.TextStyle) -> Font\nCreate a custom font with the given name and size that scales relative to the given textStyle."
    },
    {
        "title": "enabled",
        "url": "https://developer.apple.com/documentation/swiftui/textselectability/enabled",
        "html": "Discussion\n\nEnabling text selection allows people to perform actions on the text content, such as copying and sharing. Enable text selection in views where those operations are useful, such as copying unique IDs or error messages. This allows people to paste the data into emails or documents.\n\nThe following example enables text selection on the second of two Text views in a VStack.\n\nVStack {\n    Text(\"Event Invite\")\n        .font(.title)\n    Text(invite.date.formatted(date: .long, time: .shortened))\n        .textSelection(.enabled)\n}\n\nSee Also\nGetting selectability options\nstatic var disabled: DisabledTextSelectability\nA selectability value that disables text selection by the person using your app.\nAvailable when Self is DisabledTextSelectability."
    },
    {
        "title": "init(_:duration:timingCurve:)",
        "url": "https://developer.apple.com/documentation/swiftui/linearkeyframe/init(_:duration:timingcurve:)",
        "html": "Parameters\nto\n\nThe value of the keyframe.\n\nduration\n\nThe duration of the segment defined by this keyframe.\n\ntimingCurve\n\nA unit curve that controls the speed of interpolation."
    },
    {
        "title": "init(_:duration:spring:startVelocity:)",
        "url": "https://developer.apple.com/documentation/swiftui/springkeyframe/init(_:duration:spring:startvelocity:)",
        "html": "Parameters\nto\n\nThe value of the keyframe.\n\nduration\n\nThe duration of the segment defined by this keyframe, or nil to use the settling duration of the spring.\n\nspring\n\nThe spring that defines the shape of the segment befire this keyframe\n\nstartVelocity\n\nThe velocity of the value at the start of the segment, or nil to automatically compute the velocity to maintain smooth motion."
    },
    {
        "title": "allowedDynamicRange(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/image/alloweddynamicrange(_:)",
        "html": "Parameters\nrange\n\nthe requested dynamic range, or nil to restore the default allowed range.\n\nReturn Value\n\na new image.\n\nDiscussion\n\nThe following example enables HDR rendering for a specific image view, assuming that the image has an HDR (ITU-R 2100) color space and the output device supports it:\n\nImage(\"hdr-asset\").allowedDynamicRange(.high)\n\nSee Also\nSpecifying dynamic range\nvar allowedDynamicRange: Image.DynamicRange?\nThe allowed dynamic range for the view, or nil.\nstruct DynamicRange"
    },
    {
        "title": "Image.TemplateRenderingMode",
        "url": "https://developer.apple.com/documentation/swiftui/image/templaterenderingmode",
        "html": "Topics\nGetting rendering modes\ncase original\nA mode that renders pixels of bitmap images as-is.\ncase template\nA mode that renders all non-transparent pixels as the foreground color.\nRelationships\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nSpecifying rendering behavior\nfunc antialiased(Bool) -> Image\nSpecifies whether SwiftUI applies antialiasing when rendering the image.\nfunc symbolRenderingMode(SymbolRenderingMode?) -> Image\nSets the rendering mode for symbol images within this view.\nfunc renderingMode(Image.TemplateRenderingMode?) -> Image\nIndicates whether SwiftUI renders an image as-is, or by using a different mode.\nfunc interpolation(Image.Interpolation) -> Image\nSpecifies the current level of quality for rendering an image that requires interpolation.\nenum Interpolation\nThe level of quality for rendering an image that requires interpolation, such as a scaled image."
    },
    {
        "title": "Image.Interpolation.medium",
        "url": "https://developer.apple.com/documentation/swiftui/image/interpolation/medium",
        "html": "See Also\nGetting interpolation options\ncase high\nA value that indicates a high level of interpolation quality, which may slow down image rendering.\ncase low\nA value that indicates a low level of interpolation quality, which may speed up image rendering.\ncase none\nA value that indicates SwiftUI doesn\u2019t interpolate image data."
    },
    {
        "title": "animation(minimumInterval:paused:)",
        "url": "https://developer.apple.com/documentation/swiftui/timelineschedule/animation(minimuminterval:paused:)",
        "html": "Parameters\nminimumInterval\n\nThe minimum interval to update the schedule at. Pass nil to let the system pick an appropriate update interval.\n\npaused\n\nIf the schedule should stop generating updates.\n\nSee Also\nGetting built-in schedules\nstatic var animation: AnimationTimelineSchedule\nA pausable schedule of dates updating at a frequency no more quickly than the provided interval.\nAvailable when Self is AnimationTimelineSchedule.\nstatic var everyMinute: EveryMinuteTimelineSchedule\nA schedule for updating a timeline view at the start of every minute.\nAvailable when Self is EveryMinuteTimelineSchedule.\nstatic func explicit<S>(S) -> ExplicitTimelineSchedule<S>\nA schedule for updating a timeline view at explicit points in time.\nstatic func periodic(from: Date, by: TimeInterval) -> PeriodicTimelineSchedule\nA schedule for updating a timeline view at regular intervals.\nAvailable when Self is PeriodicTimelineSchedule."
    },
    {
        "title": "Image.Interpolation",
        "url": "https://developer.apple.com/documentation/swiftui/image/interpolation",
        "html": "Overview\n\nThe interpolation(_:) modifier specifies the interpolation behavior when using the resizable(capInsets:resizingMode:) modifier on an Image. Use this behavior to prioritize rendering performance or image quality.\n\nTopics\nGetting interpolation options\ncase high\nA value that indicates a high level of interpolation quality, which may slow down image rendering.\ncase low\nA value that indicates a low level of interpolation quality, which may speed up image rendering.\ncase medium\nA value that indicates a medium level of interpolation quality, between the low- and high-quality values.\ncase none\nA value that indicates SwiftUI doesn\u2019t interpolate image data.\nRelationships\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nSpecifying rendering behavior\nfunc antialiased(Bool) -> Image\nSpecifies whether SwiftUI applies antialiasing when rendering the image.\nfunc symbolRenderingMode(SymbolRenderingMode?) -> Image\nSets the rendering mode for symbol images within this view.\nfunc renderingMode(Image.TemplateRenderingMode?) -> Image\nIndicates whether SwiftUI renders an image as-is, or by using a different mode.\nfunc interpolation(Image.Interpolation) -> Image\nSpecifies the current level of quality for rendering an image that requires interpolation.\nenum TemplateRenderingMode\nA type that indicates how SwiftUI renders images."
    },
    {
        "title": "animation",
        "url": "https://developer.apple.com/documentation/swiftui/timelineschedule/animation",
        "html": "See Also\nGetting built-in schedules\nstatic func animation(minimumInterval: Double?, paused: Bool) -> AnimationTimelineSchedule\nA pausable schedule of dates updating at a frequency no more quickly than the provided interval.\nAvailable when Self is AnimationTimelineSchedule.\nstatic var everyMinute: EveryMinuteTimelineSchedule\nA schedule for updating a timeline view at the start of every minute.\nAvailable when Self is EveryMinuteTimelineSchedule.\nstatic func explicit<S>(S) -> ExplicitTimelineSchedule<S>\nA schedule for updating a timeline view at explicit points in time.\nstatic func periodic(from: Date, by: TimeInterval) -> PeriodicTimelineSchedule\nA schedule for updating a timeline view at regular intervals.\nAvailable when Self is PeriodicTimelineSchedule."
    },
    {
        "title": "value",
        "url": "https://developer.apple.com/documentation/swiftui/transitionphase/value",
        "html": "Return Value\n\nZero when in the identity case, -1.0 for willAppear, and 1.0 for didDisappear.\n\nSee Also\nGetting phase characteristics\nvar isIdentity: Bool\nA Boolean that indicates whether the transition should have an identity effect, i.e. not change the appearance of its view."
    },
    {
        "title": "Image.Interpolation.none",
        "url": "https://developer.apple.com/documentation/swiftui/image/interpolation/none",
        "html": "See Also\nGetting interpolation options\ncase high\nA value that indicates a high level of interpolation quality, which may slow down image rendering.\ncase low\nA value that indicates a low level of interpolation quality, which may speed up image rendering.\ncase medium\nA value that indicates a medium level of interpolation quality, between the low- and high-quality values."
    },
    {
        "title": "init(decorative:bundle:)",
        "url": "https://developer.apple.com/documentation/swiftui/image/init(decorative:bundle:)",
        "html": "Parameters\nname\n\nThe name of the image resource to lookup\n\nbundle\n\nThe bundle to search for the image resource. If nil, SwiftUI uses the main Bundle. Defaults to nil.\n\nDiscussion\n\nSwiftUI ignores this image for accessibility purposes.\n\nSee Also\nCreating an image for decorative use\ninit(decorative: String, variableValue: Double?, bundle: Bundle?)\nCreates an unlabeled, decorative image, with a variable value.\ninit(decorative: CGImage, scale: CGFloat, orientation: Image.Orientation)\nCreates an unlabeled, decorative image based on a Core Graphics image instance."
    },
    {
        "title": "TimelineView.Context.Cadence.seconds",
        "url": "https://developer.apple.com/documentation/swiftui/timelineview/context/cadence-swift.enum/seconds",
        "html": "See Also\nGetting cadences\ncase live\nUpdates the view continuously.\ncase minutes\nUpdates the view approximately once per minute."
    },
    {
        "title": "init(systemName:)",
        "url": "https://developer.apple.com/documentation/swiftui/image/init(systemname:)",
        "html": "Parameters\nsystemName\n\nThe name of the system symbol image. Use the SF Symbols app to look up the names of system symbol images.\n\nDiscussion\n\nThis initializer creates an image using a system-provided symbol. Use SF Symbols to find symbols and their corresponding names.\n\nTo create a custom symbol image from your app\u2019s asset catalog, use init(_:bundle:) instead.\n\nSee Also\nCreating a system symbol image\ninit(systemName: String, variableValue: Double?)\nCreates a system symbol image with a variable value."
    },
    {
        "title": "init(decorative:variableValue:bundle:)",
        "url": "https://developer.apple.com/documentation/swiftui/image/init(decorative:variablevalue:bundle:)",
        "html": "Parameters\nname\n\nThe name of the image resource to lookup.\n\nvariableValue\n\nAn optional value between 0.0 and 1.0 that the rendered image can use to customize its appearance, if specified. If the symbol doesn\u2019t support variable values, this parameter has no effect.\n\nbundle\n\nThe bundle to search for the image resource. If nil, SwiftUI uses the main Bundle. Defaults to nil.\n\nDiscussion\n\nThis initializer creates an image using a using a symbol in the specified bundle. The rendered symbol may alter its appearance to represent the value provided in variableValue.\n\nNote\n\nSee WWDC22 session 10158: Adopt variable color in SF Symbols for details on how to create symbols that support variable values.\n\nSwiftUI ignores this image for accessibility purposes.\n\nSee Also\nCreating an image for decorative use\ninit(decorative: String, bundle: Bundle?)\nCreates an unlabeled, decorative image.\ninit(decorative: CGImage, scale: CGFloat, orientation: Image.Orientation)\nCreates an unlabeled, decorative image based on a Core Graphics image instance."
    },
    {
        "title": "init(systemName:variableValue:)",
        "url": "https://developer.apple.com/documentation/swiftui/image/init(systemname:variablevalue:)",
        "html": "Parameters\nsystemName\n\nThe name of the system symbol image. Use the SF Symbols app to look up the names of system symbol images.\n\nvariableValue\n\nAn optional value between 0.0 and 1.0 that the rendered image can use to customize its appearance, if specified. If the symbol doesn\u2019t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.\n\nDiscussion\n\nThis initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in variableValue. Use SF Symbols (version 4.0 or later) to find system symbols that support variable values and their corresponding names.\n\nThe following example shows the effect of creating the \"chart.bar.fill\" symbol with different values.\n\nHStack{\n    Image(systemName: \"chart.bar.fill\", variableValue: 0.3)\n    Image(systemName: \"chart.bar.fill\", variableValue: 0.6)\n    Image(systemName: \"chart.bar.fill\", variableValue: 1.0)\n}\n.font(.system(.largeTitle))\n\n\nTo create a custom symbol image from your app\u2019s asset catalog, use init(_:variableValue:bundle:) instead.\n\nSee Also\nCreating a system symbol image\ninit(systemName: String)\nCreates a system symbol image."
    },
    {
        "title": "symbolRenderingMode(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/image/symbolrenderingmode(_:)",
        "html": "Parameters\nmode\n\nThe symbol rendering mode to use.\n\nReturn Value\n\nA view that uses the rendering mode you supply.\n\nSee Also\nSpecifying rendering behavior\nfunc antialiased(Bool) -> Image\nSpecifies whether SwiftUI applies antialiasing when rendering the image.\nfunc renderingMode(Image.TemplateRenderingMode?) -> Image\nIndicates whether SwiftUI renders an image as-is, or by using a different mode.\nfunc interpolation(Image.Interpolation) -> Image\nSpecifies the current level of quality for rendering an image that requires interpolation.\nenum TemplateRenderingMode\nA type that indicates how SwiftUI renders images.\nenum Interpolation\nThe level of quality for rendering an image that requires interpolation, such as a scaled image."
    },
    {
        "title": "init(decorative:scale:orientation:)",
        "url": "https://developer.apple.com/documentation/swiftui/image/init(decorative:scale:orientation:)",
        "html": "Parameters\ncgImage\n\nThe base graphical image.\n\nscale\n\nThe scale factor for the image, with a value like 1.0, 2.0, or 3.0.\n\norientation\n\nThe orientation of the image. The default is Image.Orientation.up.\n\nDiscussion\n\nSwiftUI ignores this image for accessibility purposes.\n\nSee Also\nCreating an image for decorative use\ninit(decorative: String, bundle: Bundle?)\nCreates an unlabeled, decorative image.\ninit(decorative: String, variableValue: Double?, bundle: Bundle?)\nCreates an unlabeled, decorative image, with a variable value."
    },
    {
        "title": "init(uiImage:)",
        "url": "https://developer.apple.com/documentation/swiftui/image/init(uiimage:)",
        "html": "Parameters\nuiImage\n\nThe UIKit image to wrap with a SwiftUI Image instance.\n\nSee Also\nCreating an image from another image\ninit(nsImage: NSImage)\nCreates a SwiftUI image from an AppKit image instance."
    },
    {
        "title": "body",
        "url": "https://developer.apple.com/documentation/swiftui/keyframetrackcontent/body-swift.property",
        "html": "Required\n\nSee Also\nCreating a keyframe\nassociatedtype Body : KeyframeTrackContent\n\nRequired\n\nassociatedtype Value : Animatable = Self.Body.Value\n\nRequired"
    },
    {
        "title": "hierarchical",
        "url": "https://developer.apple.com/documentation/swiftui/symbolrenderingmode/hierarchical",
        "html": "Discussion\n\nSwiftUI fills the first layer with the foreground style, and the others the secondary, and tertiary variants of the foreground style. You can specify these styles explicitly using the foregroundStyle(_:_:) and foregroundStyle(_:_:_:) modifiers. If you only specify a primary foreground style, SwiftUI automatically derives the others from that style. For example, you can render a filled exclamation mark triangle with purple as the tint color for the exclamation mark, and lower opacity purple for the triangle:\n\nImage(systemName: \"exclamationmark.triangle.fill\")\n    .symbolRenderingMode(.hierarchical)\n    .foregroundStyle(Color.purple)\n\nSee Also\nGetting symbol rendering modes\nstatic let monochrome: SymbolRenderingMode\nA mode that renders symbols as a single layer filled with the foreground style.\nstatic let multicolor: SymbolRenderingMode\nA mode that renders symbols as multiple layers with their inherit styles.\nstatic let palette: SymbolRenderingMode\nA mode that renders symbols as multiple layers, with different styles applied to the layers."
    },
    {
        "title": "init(_:variableValue:bundle:)",
        "url": "https://developer.apple.com/documentation/swiftui/image/init(_:variablevalue:bundle:)",
        "html": "Parameters\nname\n\nThe name of the image resource to lookup, as well as the localization key with which to label the image.\n\nvariableValue\n\nAn optional value between 0.0 and 1.0 that the rendered image can use to customize its appearance, if specified. If the symbol doesn\u2019t support variable values, this parameter has no effect.\n\nbundle\n\nThe bundle to search for the image resource and localization content. If nil, SwiftUI uses the main Bundle. Defaults to nil.\n\nDiscussion\n\nThis initializer creates an image using a using a symbol in the specified bundle. The rendered symbol may alter its appearance to represent the value provided in variableValue.\n\nNote\n\nSee WWDC22 session 10158: Adopt variable color in SF Symbols for details on how to create symbols that support variable values.\n\nSee Also\nCreating an image\ninit(String, bundle: Bundle?)\nCreates a labeled image that you can use as content for controls.\ninit(ImageResource)\nInitialize an Image with an image resource."
    },
    {
        "title": "palette",
        "url": "https://developer.apple.com/documentation/swiftui/symbolrenderingmode/palette",
        "html": "Discussion\n\nIn this mode SwiftUI maps each successively defined layer in the image to the next of the primary, secondary, and tertiary variants of the foreground style. You can specify these styles explicitly using the foregroundStyle(_:_:) and foregroundStyle(_:_:_:) modifiers. If you only specify a primary foreground style, SwiftUI automatically derives the others from that style. For example, you can render a filled exclamation mark triangle with yellow as the tint color for the exclamation mark, and fill the triangle with cyan:\n\nImage(systemName: \"exclamationmark.triangle.fill\")\n    .symbolRenderingMode(.palette)\n    .foregroundStyle(Color.yellow, Color.cyan)\n\n\nYou can also omit the symbol rendering mode, as specifying multiple foreground styles implies switching to palette rendering mode:\n\nImage(systemName: \"exclamationmark.triangle.fill\")\n    .foregroundStyle(Color.yellow, Color.cyan)\n\nSee Also\nGetting symbol rendering modes\nstatic let hierarchical: SymbolRenderingMode\nA mode that renders symbols as multiple layers, with different opacities applied to the foreground style.\nstatic let monochrome: SymbolRenderingMode\nA mode that renders symbols as a single layer filled with the foreground style.\nstatic let multicolor: SymbolRenderingMode\nA mode that renders symbols as multiple layers with their inherit styles."
    },
    {
        "title": "multicolor",
        "url": "https://developer.apple.com/documentation/swiftui/symbolrenderingmode/multicolor",
        "html": "Discussion\n\nThe layers may be filled with their own inherent styles, or the foreground style. For example, you can render a filled exclamation mark triangle in its inherent colors, with yellow for the triangle and white for the exclamation mark:\n\nImage(systemName: \"exclamationmark.triangle.fill\")\n    .symbolRenderingMode(.multicolor)\n\nSee Also\nGetting symbol rendering modes\nstatic let hierarchical: SymbolRenderingMode\nA mode that renders symbols as multiple layers, with different opacities applied to the foreground style.\nstatic let monochrome: SymbolRenderingMode\nA mode that renders symbols as a single layer filled with the foreground style.\nstatic let palette: SymbolRenderingMode\nA mode that renders symbols as multiple layers, with different styles applied to the layers."
    },
    {
        "title": "monochrome",
        "url": "https://developer.apple.com/documentation/swiftui/symbolrenderingmode/monochrome",
        "html": "Discussion\n\nFor example, you can render a filled exclamation mark triangle in purple:\n\nImage(systemName: \"exclamationmark.triangle.fill\")\n    .symbolRenderingMode(.monochrome)\n    .foregroundStyle(Color.purple)\n\nSee Also\nGetting symbol rendering modes\nstatic let hierarchical: SymbolRenderingMode\nA mode that renders symbols as multiple layers, with different opacities applied to the foreground style.\nstatic let multicolor: SymbolRenderingMode\nA mode that renders symbols as multiple layers with their inherit styles.\nstatic let palette: SymbolRenderingMode\nA mode that renders symbols as multiple layers, with different styles applied to the layers."
    },
    {
        "title": "init(_:scale:orientation:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/image/init(_:scale:orientation:label:)",
        "html": "Parameters\ncgImage\n\nThe base graphical image.\n\nscale\n\nThe scale factor for the image, with a value like 1.0, 2.0, or 3.0.\n\norientation\n\nThe orientation of the image. The default is Image.Orientation.up.\n\nlabel\n\nThe label associated with the image. SwiftUI uses the label for accessibility.\n\nSee Also\nCreating an image for use as a control\ninit(String, bundle: Bundle?, label: Text)\nCreates a labeled image that you can use as content for controls, with the specified label.\ninit(String, variableValue: Double?, bundle: Bundle?, label: Text)\nCreates a labeled image that you can use as content for controls, with the specified label and variable value."
    },
    {
        "title": "init(_:bundle:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/image/init(_:bundle:label:)",
        "html": "Parameters\nname\n\nThe name of the image resource to lookup\n\nbundle\n\nThe bundle to search for the image resource. If nil, SwiftUI uses the main Bundle. Defaults to nil.\n\nlabel\n\nThe label associated with the image. SwiftUI uses the label for accessibility.\n\nSee Also\nCreating an image for use as a control\ninit(String, variableValue: Double?, bundle: Bundle?, label: Text)\nCreates a labeled image that you can use as content for controls, with the specified label and variable value.\ninit(CGImage, scale: CGFloat, orientation: Image.Orientation, label: Text)\nCreates a labeled image based on a Core Graphics image instance, usable as content for controls."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/image/init(_:)",
        "html": "See Also\nCreating an image\ninit(String, bundle: Bundle?)\nCreates a labeled image that you can use as content for controls.\ninit(String, variableValue: Double?, bundle: Bundle?)\nCreates a labeled image that you can use as content for controls, with a variable value."
    },
    {
        "title": "init(_:variableValue:bundle:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/image/init(_:variablevalue:bundle:label:)",
        "html": "Parameters\nname\n\nThe name of the image resource to lookup.\n\nvariableValue\n\nAn optional value between 0.0 and 1.0 that the rendered image can use to customize its appearance, if specified. If the symbol doesn\u2019t support variable values, this parameter has no effect.\n\nbundle\n\nThe bundle to search for the image resource. If nil, SwiftUI uses the main Bundle. Defaults to nil.\n\nlabel\n\nThe label associated with the image. SwiftUI uses the label for accessibility.\n\nDiscussion\n\nThis initializer creates an image using a using a symbol in the specified bundle. The rendered symbol may alter its appearance to represent the value provided in variableValue.\n\nNote\n\nSee WWDC22 session 10158: Adopt variable color in SF Symbols for details on how to create symbols that support variable values.\n\nSee Also\nCreating an image for use as a control\ninit(String, bundle: Bundle?, label: Text)\nCreates a labeled image that you can use as content for controls, with the specified label.\ninit(CGImage, scale: CGFloat, orientation: Image.Orientation, label: Text)\nCreates a labeled image based on a Core Graphics image instance, usable as content for controls."
    },
    {
        "title": "DynamicTypeSize.accessibility2",
        "url": "https://developer.apple.com/documentation/swiftui/dynamictypesize/accessibility2",
        "html": "See Also\nGetting accessibility type sizes\ncase accessibility1\nThe first accessibility size.\ncase accessibility3\nThe third accessibility size.\ncase accessibility4\nThe fourth accessibility size.\ncase accessibility5\nThe fifth accessibility size.\nvar isAccessibilitySize: Bool\nA Boolean value indicating whether the size is one that is associated with accessibility."
    },
    {
        "title": "scale(scale:anchor:)",
        "url": "https://developer.apple.com/documentation/swiftui/anytransition/scale(scale:anchor:)",
        "html": "See Also\nGetting built-in transitions\nstatic let identity: AnyTransition\nA transition that returns the input view, unmodified, as the output view.\nstatic func move(edge: Edge) -> AnyTransition\nReturns a transition that moves the view away, towards the specified edge of the view.\nstatic func offset(CGSize) -> AnyTransition\nstatic func offset(x: CGFloat, y: CGFloat) -> AnyTransition\nstatic let opacity: AnyTransition\nA transition from transparent to opaque on insertion, and from opaque to transparent on removal.\nstatic func push(from: Edge) -> AnyTransition\nCreates a transition that when added to a view will animate the view\u2019s insertion by moving it in from the specified edge while fading it in, and animate its removal by moving it out towards the opposite edge and fading it out.\nstatic var scale: AnyTransition\nReturns a transition that scales the view.\nstatic var slide: AnyTransition\nA transition that inserts by moving in from the leading edge, and removes by moving out towards the trailing edge."
    },
    {
        "title": "move(edge:)",
        "url": "https://developer.apple.com/documentation/swiftui/anytransition/move(edge:)",
        "html": "See Also\nGetting built-in transitions\nstatic let identity: AnyTransition\nA transition that returns the input view, unmodified, as the output view.\nstatic func offset(CGSize) -> AnyTransition\nstatic func offset(x: CGFloat, y: CGFloat) -> AnyTransition\nstatic let opacity: AnyTransition\nA transition from transparent to opaque on insertion, and from opaque to transparent on removal.\nstatic func push(from: Edge) -> AnyTransition\nCreates a transition that when added to a view will animate the view\u2019s insertion by moving it in from the specified edge while fading it in, and animate its removal by moving it out towards the opposite edge and fading it out.\nstatic var scale: AnyTransition\nReturns a transition that scales the view.\nstatic func scale(scale: CGFloat, anchor: UnitPoint) -> AnyTransition\nReturns a transition that scales the view by the specified amount.\nstatic var slide: AnyTransition\nA transition that inserts by moving in from the leading edge, and removes by moving out towards the trailing edge."
    },
    {
        "title": "DynamicTypeSize.accessibility5",
        "url": "https://developer.apple.com/documentation/swiftui/dynamictypesize/accessibility5",
        "html": "See Also\nGetting accessibility type sizes\ncase accessibility1\nThe first accessibility size.\ncase accessibility2\nThe second accessibility size.\ncase accessibility3\nThe third accessibility size.\ncase accessibility4\nThe fourth accessibility size.\nvar isAccessibilitySize: Bool\nA Boolean value indicating whether the size is one that is associated with accessibility."
    },
    {
        "title": "EnabledTextSelectability",
        "url": "https://developer.apple.com/documentation/swiftui/enabledtextselectability",
        "html": "Overview\n\nDon\u2019t use this type directly. Instead, use enabled.\n\nRelationships\nConforms To\nTextSelectability\nSee Also\nSupporting types\nstruct DisabledTextSelectability\nA selectability type that disables text selection by the person using your app."
    },
    {
        "title": "allowsSelection",
        "url": "https://developer.apple.com/documentation/swiftui/textselectability/allowsselection",
        "html": "Required\n\nDiscussion\n\nConforming types, such as EnabledTextSelectability and DisabledTextSelectability, return true or false for this property as appropriate. SwiftUI expects this value for a given selectability type to be constant, unaffected by global state."
    },
    {
        "title": "Font.Design",
        "url": "https://developer.apple.com/documentation/swiftui/font/design",
        "html": "Topics\nGetting font designs\ncase `default`\ncase monospaced\ncase rounded\ncase serif\nRelationships\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nGetting system fonts\nstatic func system(Font.TextStyle, design: Font.Design?, weight: Font.Weight?) -> Font\nGets a system font that uses the specified style, design, and weight.\nstatic func system(size: CGFloat, weight: Font.Weight?, design: Font.Design?) -> Font\nSpecifies a system font to use, along with the style, weight, and any design parameters you want applied to the text.\nenum TextStyle\nA dynamic text style to use for fonts.\nstruct Weight\nA weight to use for fonts."
    },
    {
        "title": "DynamicTypeSize.xxxLarge",
        "url": "https://developer.apple.com/documentation/swiftui/dynamictypesize/xxxlarge",
        "html": "See Also\nGetting type sizes\ncase xSmall\nAn extra small size.\ncase small\nA small size.\ncase medium\nA medium size.\ncase large\nA large size.\ncase xLarge\nAn extra large size.\ncase xxLarge\nAn extra extra large size."
    },
    {
        "title": "modifier(active:identity:)",
        "url": "https://developer.apple.com/documentation/swiftui/anytransition/modifier(active:identity:)",
        "html": "See Also\nCreating a custom transition\ninit<T>(T)\nCreate an instance that type-erases transition."
    },
    {
        "title": "makeBody(configuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/menustyle/makebody(configuration:)",
        "html": "Required\n\nParameters\nconfiguration\n\nThe properties of the menu.\n\nDiscussion\n\nThe system calls this method for each Menu instance in a view hierarchy where this style is the current menu style.\n\nSee Also\nCreating custom menu styles\ntypealias Configuration\nThe properties of a menu.\nassociatedtype Body : View\nA view that represents the body of a menu.\n\nRequired"
    },
    {
        "title": "isLogicallyComplete",
        "url": "https://developer.apple.com/documentation/swiftui/animationcontext/islogicallycomplete",
        "html": "Discussion\n\nThis controls when AnimationCompletionCriteria.logicallyComplete completion callbacks are fired. This should be set to true at most once in the life of an animation, changing back to false later will be ignored. If this is never set to true, the behavior is equivalent to if this had been set to true just as the animation finished (by returning nil)."
    },
    {
        "title": "Body",
        "url": "https://developer.apple.com/documentation/swiftui/menustyle/body",
        "html": "Required\n\nSee Also\nCreating custom menu styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view that represents the body of a menu.\n\nRequired\n\ntypealias Configuration\nThe properties of a menu."
    },
    {
        "title": "borderlessButton",
        "url": "https://developer.apple.com/documentation/swiftui/menustyle/borderlessbutton",
        "html": "Deprecated\n\nUse menuStyle(_:) with button and buttonStyle(_:) with borderless.\n\nDiscussion\n\nOn macOS, the button optionally displays an arrow indicating that it presents a menu.\n\nPressing and then dragging into the contents triggers the chosen action on release.\n\nSee Also\nGetting built-in menu styles\nstatic var automatic: DefaultMenuStyle\nThe default menu style, based on the menu\u2019s context.\nAvailable when Self is DefaultMenuStyle.\nstatic var button: ButtonMenuStyle\nA menu style that displays a button that toggles the display of the menu\u2019s contents when pressed.\nAvailable when Self is ButtonMenuStyle.\nstatic var borderedButton: BorderedButtonMenuStyle\nA menu style that displays a bordered button that toggles the display of the menu\u2019s contents when pressed.\nAvailable when Self is BorderedButtonMenuStyle.\nDeprecated"
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/menustyle/automatic",
        "html": "Discussion\n\nThe default menu style can vary by platform. By default, macOS uses the bordered button style.\n\nIf you create a menu inside a container, the style resolves to the recommended style for menus inside that container for that specific platform. For example, a menu nested within another menu will resolve to a submenu:\n\nMenu(\"Edit\") {\n    Menu(\"Arrange\") {\n        Button(\"Bring to Front\", action: moveSelectionToFront)\n        Button(\"Send to Back\", action: moveSelectionToBack)\n    }\n    Button(\"Delete\", action: deleteSelection)\n}\n\n\nYou can override a menu\u2019s style. To apply the default style to a menu, or to a view that contains a menu, use the menuStyle(_:) modifier.\n\nSee Also\nGetting built-in menu styles\nstatic var button: ButtonMenuStyle\nA menu style that displays a button that toggles the display of the menu\u2019s contents when pressed.\nAvailable when Self is ButtonMenuStyle.\nstatic var borderedButton: BorderedButtonMenuStyle\nA menu style that displays a bordered button that toggles the display of the menu\u2019s contents when pressed.\nAvailable when Self is BorderedButtonMenuStyle.\nDeprecated\nstatic var borderlessButton: BorderlessButtonMenuStyle\nA menu style that displays a borderless button that toggles the display of the menu\u2019s contents when pressed.\nAvailable when Self is BorderlessButtonMenuStyle.\nDeprecated"
    },
    {
        "title": "DefaultMenuStyle",
        "url": "https://developer.apple.com/documentation/swiftui/defaultmenustyle",
        "html": "Overview\n\nYou can also use automatic to construct this style.\n\nTopics\nCreating the menu style\ninit()\nCreates a default menu style.\nRelationships\nConforms To\nMenuStyle\nSee Also\nSupporting types\nstruct ButtonMenuStyle\nA menu style that displays a button that toggles the display of the menu\u2019s contents when pressed.\nstruct BorderlessButtonMenuStyle\nA menu style that displays a borderless button that toggles the display of the menu\u2019s contents when pressed.\nDeprecated\nstruct BorderedButtonMenuStyle\nA menu style that displays a bordered button that toggles the display of the menu\u2019s contents when pressed.\nDeprecated"
    },
    {
        "title": "button",
        "url": "https://developer.apple.com/documentation/swiftui/menustyle/button",
        "html": "Discussion\n\nOn macOS, the button displays an arrow to indicate that it presents a menu.\n\nPressing and then dragging into the contents activates the selected action on release.\n\nSee Also\nGetting built-in menu styles\nstatic var automatic: DefaultMenuStyle\nThe default menu style, based on the menu\u2019s context.\nAvailable when Self is DefaultMenuStyle.\nstatic var borderedButton: BorderedButtonMenuStyle\nA menu style that displays a bordered button that toggles the display of the menu\u2019s contents when pressed.\nAvailable when Self is BorderedButtonMenuStyle.\nDeprecated\nstatic var borderlessButton: BorderlessButtonMenuStyle\nA menu style that displays a borderless button that toggles the display of the menu\u2019s contents when pressed.\nAvailable when Self is BorderlessButtonMenuStyle.\nDeprecated"
    },
    {
        "title": "ButtonMenuStyle",
        "url": "https://developer.apple.com/documentation/swiftui/buttonmenustyle",
        "html": "Overview\n\nUse button to construct this style.\n\nTopics\nCreating the menu style\ninit()\nCreates a button menu style.\nRelationships\nConforms To\nMenuStyle\nSee Also\nSupporting types\nstruct DefaultMenuStyle\nThe default menu style, based on the menu\u2019s context.\nstruct BorderlessButtonMenuStyle\nA menu style that displays a borderless button that toggles the display of the menu\u2019s contents when pressed.\nDeprecated\nstruct BorderedButtonMenuStyle\nA menu style that displays a bordered button that toggles the display of the menu\u2019s contents when pressed.\nDeprecated"
    },
    {
        "title": "BorderlessButtonMenuStyle",
        "url": "https://developer.apple.com/documentation/swiftui/borderlessbuttonmenustyle",
        "html": "Deprecated\n\nUse menuStyle(_:) with button and buttonStyle(_:) with borderless.\n\nOverview\n\nUse borderlessButton to construct this style.\n\nTopics\nCreating a bordeless button menu style\ninit()\nCreates a borderless button menu style.\ninit(showsMenuIndicator: Bool)\nCreates a borderless button menu style, specifying whether to show a visual menu indicator.\nRelationships\nConforms To\nMenuStyle\nSee Also\nSupporting types\nstruct DefaultMenuStyle\nThe default menu style, based on the menu\u2019s context.\nstruct ButtonMenuStyle\nA menu style that displays a button that toggles the display of the menu\u2019s contents when pressed.\nstruct BorderedButtonMenuStyle\nA menu style that displays a bordered button that toggles the display of the menu\u2019s contents when pressed.\nDeprecated"
    },
    {
        "title": "MenuStyle.Configuration",
        "url": "https://developer.apple.com/documentation/swiftui/menustyle/configuration",
        "html": "See Also\nCreating custom menu styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view that represents the body of a menu.\n\nRequired\n\nassociatedtype Body : View\nA view that represents the body of a menu.\n\nRequired"
    },
    {
        "title": "BorderedButtonMenuStyle",
        "url": "https://developer.apple.com/documentation/swiftui/borderedbuttonmenustyle",
        "html": "Deprecated\n\nUse menuStyle(_:) with button and buttonStyle(_:) with bordered.\n\nOverview\n\nUse borderedButton to construct this style.\n\nTopics\nCreating a bordered button menu style\ninit()\nCreates a bordered button menu style.\nRelationships\nConforms To\nMenuStyle\nSee Also\nSupporting types\nstruct DefaultMenuStyle\nThe default menu style, based on the menu\u2019s context.\nstruct ButtonMenuStyle\nA menu style that displays a button that toggles the display of the menu\u2019s contents when pressed.\nstruct BorderlessButtonMenuStyle\nA menu style that displays a borderless button that toggles the display of the menu\u2019s contents when pressed.\nDeprecated"
    },
    {
        "title": "velocity(value:time:context:)",
        "url": "https://developer.apple.com/documentation/swiftui/animation/velocity(value:time:context:)",
        "html": "Return Value\n\nThe current velocity of the animation, or nil if the the velocity isn\u2019t available."
    },
    {
        "title": "logicallyComplete(after:)",
        "url": "https://developer.apple.com/documentation/swiftui/animation/logicallycomplete(after:)",
        "html": "Parameters\nduration\n\nThe duration after which the animation should report that it is logically complete.\n\nReturn Value\n\nAn animation that reports logical completion after the given duration.\n\nDiscussion\n\nNote that the indicated duration will not cause the animation to continue running after the base animation has fully completed.\n\nIf the animation is removed before the given duration is reached, logical completion will be reported immediately."
    },
    {
        "title": "timingCurve(_:_:_:_:duration:)",
        "url": "https://developer.apple.com/documentation/swiftui/animation/timingcurve(_:_:_:_:duration:)",
        "html": "Parameters\np1x\n\nThe x-coordinate of the first control point of the cubic B\u00e9zier curve.\n\np1y\n\nThe y-coordinate of the first control point of the cubic B\u00e9zier curve.\n\np2x\n\nThe x-coordinate of the second control point of the cubic B\u00e9zier curve.\n\np2y\n\nThe y-coordinate of the second control point of the cubic B\u00e9zier curve.\n\nduration\n\nThe length of time, expressed in seconds, the animation takes to complete.\n\nReturn Value\n\nA cubic B\u00e9zier timing curve animation.\n\nDiscussion\n\nUse this method to create a timing curve based on the control points of a cubic B\u00e9zier curve. A cubic B\u00e9zier timing curve consists of a line whose starting point is (0, 0) and whose end point is (1, 1). Two additional control points, (p1x, p1y) and (p2x, p2y), define the shape of the curve.\n\nThe slope of the line defines the speed of the animation at that point in time. A steep slopes causes the animation to appear to run faster, while a shallower slope appears to run slower. The following illustration shows a timing curve where the animation starts and finishes fast, but appears slower through the middle section of the animation.\n\nThe following code uses the timing curve from the previous illustration to animate a Circle as its size changes.\n\nstruct ContentView: View {\n    @State private var scale = 1.0\n\n\n    var body: some View {\n        VStack {\n            Circle()\n                .scaleEffect(scale)\n                .animation(\n                    .timingCurve(0.1, 0.75, 0.85, 0.35, duration: 2.0),\n                    value: scale)\n\n\n            Button(\"Animate\") {\n                if scale == 1.0 {\n                    scale = 0.25\n                } else {\n                    scale = 1.0\n                }\n            }\n        }\n    }\n}\n\nPlay\nSee Also\nCreating custom animations\ninit<A>(A)\nCreate an Animation that contains the specified custom animation.\nstatic func timingCurve(UnitCurve, duration: TimeInterval) -> Animation\nCreates a new animation with speed controlled by the given curve."
    },
    {
        "title": "interpolatingSpring(_:initialVelocity:)",
        "url": "https://developer.apple.com/documentation/swiftui/animation/interpolatingspring(_:initialvelocity:)",
        "html": "Discussion\n\nThese vales are used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation.\n\nSee Also\nCustomizing spring animations\nstatic var spring: Animation\nA persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the response values between springs over a time period.\nstatic func spring(Spring, blendDuration: TimeInterval) -> Animation\nA persistent spring animation.\nstatic func spring(duration: TimeInterval, bounce: Double, blendDuration: Double) -> Animation\nA persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the duration values between springs over a time period.\nstatic func spring(response: Double, dampingFraction: Double, blendDuration: TimeInterval) -> Animation\nA persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the response values between springs over a time period.\nstatic var interactiveSpring: Animation\nA convenience for a spring animation with a lower duration value, intended for driving interactive animations.\nstatic func interactiveSpring(response: Double, dampingFraction: Double, blendDuration: TimeInterval) -> Animation\nA convenience for a spring animation with a lower response value, intended for driving interactive animations.\nstatic var interpolatingSpring: Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation.\nstatic func interpolatingSpring(duration: TimeInterval, bounce: Double, initialVelocity: Double) -> Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation.\nstatic func interpolatingSpring(mass: Double, stiffness: Double, damping: Double, initialVelocity: Double) -> Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation."
    },
    {
        "title": "animate(value:time:context:)",
        "url": "https://developer.apple.com/documentation/swiftui/animation/animate(value:time:context:)",
        "html": "Return Value\n\nThe current value of the animation, or nil if the animation has finished."
    },
    {
        "title": "interpolatingSpring(mass:stiffness:damping:initialVelocity:)",
        "url": "https://developer.apple.com/documentation/swiftui/animation/interpolatingspring(mass:stiffness:damping:initialvelocity:)",
        "html": "Parameters\nmass\n\nThe mass of the object attached to the spring.\n\nstiffness\n\nThe stiffness of the spring.\n\ndamping\n\nThe spring damping value.\n\ninitialVelocity\n\nthe initial velocity of the spring, as a value in the range [0, 1] representing the magnitude of the value being animated.\n\nReturn Value\n\na spring animation.\n\nSee Also\nCustomizing spring animations\nstatic var spring: Animation\nA persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the response values between springs over a time period.\nstatic func spring(Spring, blendDuration: TimeInterval) -> Animation\nA persistent spring animation.\nstatic func spring(duration: TimeInterval, bounce: Double, blendDuration: Double) -> Animation\nA persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the duration values between springs over a time period.\nstatic func spring(response: Double, dampingFraction: Double, blendDuration: TimeInterval) -> Animation\nA persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the response values between springs over a time period.\nstatic var interactiveSpring: Animation\nA convenience for a spring animation with a lower duration value, intended for driving interactive animations.\nstatic func interactiveSpring(response: Double, dampingFraction: Double, blendDuration: TimeInterval) -> Animation\nA convenience for a spring animation with a lower response value, intended for driving interactive animations.\nstatic var interpolatingSpring: Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation.\nstatic func interpolatingSpring(Spring, initialVelocity: Double) -> Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range of one to zero.\nstatic func interpolatingSpring(duration: TimeInterval, bounce: Double, initialVelocity: Double) -> Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation."
    },
    {
        "title": "interpolatingSpring(duration:bounce:initialVelocity:)",
        "url": "https://developer.apple.com/documentation/swiftui/animation/interpolatingspring(duration:bounce:initialvelocity:)",
        "html": "Parameters\nduration\n\nThe perceptual duration, which defines the pace of the spring. This is approximately equal to the settling duration, but for very bouncy springs, will be the duration of the period of oscillation for the spring.\n\nbounce\n\nHow bouncy the spring should be. A value of 0 indicates no bounces (a critically damped spring), positive values indicate increasing amounts of bounciness up to a maximum of 1.0 (corresponding to undamped oscillation), and negative values indicate overdamped springs with a minimum value of -1.0.\n\ninitialVelocity\n\nthe initial velocity of the spring, as a value in the range [0, 1] representing the magnitude of the value being animated.\n\nReturn Value\n\na spring animation.\n\nSee Also\nCustomizing spring animations\nstatic var spring: Animation\nA persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the response values between springs over a time period.\nstatic func spring(Spring, blendDuration: TimeInterval) -> Animation\nA persistent spring animation.\nstatic func spring(duration: TimeInterval, bounce: Double, blendDuration: Double) -> Animation\nA persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the duration values between springs over a time period.\nstatic func spring(response: Double, dampingFraction: Double, blendDuration: TimeInterval) -> Animation\nA persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the response values between springs over a time period.\nstatic var interactiveSpring: Animation\nA convenience for a spring animation with a lower duration value, intended for driving interactive animations.\nstatic func interactiveSpring(response: Double, dampingFraction: Double, blendDuration: TimeInterval) -> Animation\nA convenience for a spring animation with a lower response value, intended for driving interactive animations.\nstatic var interpolatingSpring: Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation.\nstatic func interpolatingSpring(Spring, initialVelocity: Double) -> Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range of one to zero.\nstatic func interpolatingSpring(mass: Double, stiffness: Double, damping: Double, initialVelocity: Double) -> Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation."
    },
    {
        "title": "interpolatingSpring",
        "url": "https://developer.apple.com/documentation/swiftui/animation/interpolatingspring",
        "html": "Discussion\n\nThis uses the default parameter values.\n\nSee Also\nCustomizing spring animations\nstatic var spring: Animation\nA persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the response values between springs over a time period.\nstatic func spring(Spring, blendDuration: TimeInterval) -> Animation\nA persistent spring animation.\nstatic func spring(duration: TimeInterval, bounce: Double, blendDuration: Double) -> Animation\nA persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the duration values between springs over a time period.\nstatic func spring(response: Double, dampingFraction: Double, blendDuration: TimeInterval) -> Animation\nA persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the response values between springs over a time period.\nstatic var interactiveSpring: Animation\nA convenience for a spring animation with a lower duration value, intended for driving interactive animations.\nstatic func interactiveSpring(response: Double, dampingFraction: Double, blendDuration: TimeInterval) -> Animation\nA convenience for a spring animation with a lower response value, intended for driving interactive animations.\nstatic func interpolatingSpring(Spring, initialVelocity: Double) -> Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range of one to zero.\nstatic func interpolatingSpring(duration: TimeInterval, bounce: Double, initialVelocity: Double) -> Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation.\nstatic func interpolatingSpring(mass: Double, stiffness: Double, damping: Double, initialVelocity: Double) -> Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation."
    },
    {
        "title": "interactiveSpring",
        "url": "https://developer.apple.com/documentation/swiftui/animation/interactivespring",
        "html": "Discussion\n\nThis uses the default parameter values.\n\nSee Also\nCustomizing spring animations\nstatic var spring: Animation\nA persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the response values between springs over a time period.\nstatic func spring(Spring, blendDuration: TimeInterval) -> Animation\nA persistent spring animation.\nstatic func spring(duration: TimeInterval, bounce: Double, blendDuration: Double) -> Animation\nA persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the duration values between springs over a time period.\nstatic func spring(response: Double, dampingFraction: Double, blendDuration: TimeInterval) -> Animation\nA persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the response values between springs over a time period.\nstatic func interactiveSpring(response: Double, dampingFraction: Double, blendDuration: TimeInterval) -> Animation\nA convenience for a spring animation with a lower response value, intended for driving interactive animations.\nstatic var interpolatingSpring: Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation.\nstatic func interpolatingSpring(Spring, initialVelocity: Double) -> Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range of one to zero.\nstatic func interpolatingSpring(duration: TimeInterval, bounce: Double, initialVelocity: Double) -> Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation.\nstatic func interpolatingSpring(mass: Double, stiffness: Double, damping: Double, initialVelocity: Double) -> Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation."
    },
    {
        "title": "spring(duration:bounce:blendDuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/animation/spring(duration:bounce:blendduration:)",
        "html": "Parameters\nduration\n\nThe perceptual duration, which defines the pace of the spring. This is approximately equal to the settling duration, but for very bouncy springs, will be the duration of the period of oscillation for the spring.\n\nbounce\n\nHow bouncy the spring should be. A value of 0 indicates no bounces (a critically damped spring), positive values indicate increasing amounts of bounciness up to a maximum of 1.0 (corresponding to undamped oscillation), and negative values indicate overdamped springs with a minimum value of -1.0.\n\nblendDuration\n\nThe duration in seconds over which to interpolate changes to the duration.\n\nReturn Value\n\na spring animation.\n\nSee Also\nCustomizing spring animations\nstatic var spring: Animation\nA persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the response values between springs over a time period.\nstatic func spring(Spring, blendDuration: TimeInterval) -> Animation\nA persistent spring animation.\nstatic func spring(response: Double, dampingFraction: Double, blendDuration: TimeInterval) -> Animation\nA persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the response values between springs over a time period.\nstatic var interactiveSpring: Animation\nA convenience for a spring animation with a lower duration value, intended for driving interactive animations.\nstatic func interactiveSpring(response: Double, dampingFraction: Double, blendDuration: TimeInterval) -> Animation\nA convenience for a spring animation with a lower response value, intended for driving interactive animations.\nstatic var interpolatingSpring: Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation.\nstatic func interpolatingSpring(Spring, initialVelocity: Double) -> Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range of one to zero.\nstatic func interpolatingSpring(duration: TimeInterval, bounce: Double, initialVelocity: Double) -> Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation.\nstatic func interpolatingSpring(mass: Double, stiffness: Double, damping: Double, initialVelocity: Double) -> Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation."
    },
    {
        "title": "spring(response:dampingFraction:blendDuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/animation/spring(response:dampingfraction:blendduration:)",
        "html": "Parameters\nresponse\n\nThe stiffness of the spring, defined as an approximate duration in seconds. A value of zero requests an infinitely-stiff spring, suitable for driving interactive animations.\n\ndampingFraction\n\nThe amount of drag applied to the value being animated, as a fraction of an estimate of amount needed to produce critical damping.\n\nblendDuration\n\nThe duration in seconds over which to interpolate changes to the response value of the spring.\n\nReturn Value\n\na spring animation.\n\nSee Also\nCustomizing spring animations\nstatic var spring: Animation\nA persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the response values between springs over a time period.\nstatic func spring(Spring, blendDuration: TimeInterval) -> Animation\nA persistent spring animation.\nstatic func spring(duration: TimeInterval, bounce: Double, blendDuration: Double) -> Animation\nA persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the duration values between springs over a time period.\nstatic var interactiveSpring: Animation\nA convenience for a spring animation with a lower duration value, intended for driving interactive animations.\nstatic func interactiveSpring(response: Double, dampingFraction: Double, blendDuration: TimeInterval) -> Animation\nA convenience for a spring animation with a lower response value, intended for driving interactive animations.\nstatic var interpolatingSpring: Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation.\nstatic func interpolatingSpring(Spring, initialVelocity: Double) -> Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range of one to zero.\nstatic func interpolatingSpring(duration: TimeInterval, bounce: Double, initialVelocity: Double) -> Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation.\nstatic func interpolatingSpring(mass: Double, stiffness: Double, damping: Double, initialVelocity: Double) -> Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation."
    },
    {
        "title": "spring",
        "url": "https://developer.apple.com/documentation/swiftui/animation/spring",
        "html": "Discussion\n\nThis uses the default parameter values.\n\nSee Also\nCustomizing spring animations\nstatic func spring(Spring, blendDuration: TimeInterval) -> Animation\nA persistent spring animation.\nstatic func spring(duration: TimeInterval, bounce: Double, blendDuration: Double) -> Animation\nA persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the duration values between springs over a time period.\nstatic func spring(response: Double, dampingFraction: Double, blendDuration: TimeInterval) -> Animation\nA persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the response values between springs over a time period.\nstatic var interactiveSpring: Animation\nA convenience for a spring animation with a lower duration value, intended for driving interactive animations.\nstatic func interactiveSpring(response: Double, dampingFraction: Double, blendDuration: TimeInterval) -> Animation\nA convenience for a spring animation with a lower response value, intended for driving interactive animations.\nstatic var interpolatingSpring: Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation.\nstatic func interpolatingSpring(Spring, initialVelocity: Double) -> Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range of one to zero.\nstatic func interpolatingSpring(duration: TimeInterval, bounce: Double, initialVelocity: Double) -> Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation.\nstatic func interpolatingSpring(mass: Double, stiffness: Double, damping: Double, initialVelocity: Double) -> Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation."
    },
    {
        "title": "snappy",
        "url": "https://developer.apple.com/documentation/swiftui/animation/snappy",
        "html": "See Also\nGetting built-in spring animations\nstatic var bouncy: Animation\nA spring animation with a predefined duration and higher amount of bounce.\nstatic func bouncy(duration: TimeInterval, extraBounce: Double) -> Animation\nA spring animation with a predefined duration and higher amount of bounce that can be tuned.\nstatic var smooth: Animation\nA smooth spring animation with a predefined duration and no bounce.\nstatic func smooth(duration: TimeInterval, extraBounce: Double) -> Animation\nA smooth spring animation with a predefined duration and no bounce that can be tuned.\nstatic func snappy(duration: TimeInterval, extraBounce: Double) -> Animation\nA spring animation with a predefined duration and small amount of bounce that feels more snappy and can be tuned."
    },
    {
        "title": "snappy(duration:extraBounce:)",
        "url": "https://developer.apple.com/documentation/swiftui/animation/snappy(duration:extrabounce:)",
        "html": "Parameters\nduration\n\nThe perceptual duration, which defines the pace of the spring. This is approximately equal to the settling duration, but for very bouncy springs, will be the duration of the period of oscillation for the spring.\n\nextraBounce\n\nHow much additional bounce should be added to the base bounce of 0.15.\n\nblendDuration\n\nThe duration in seconds over which to interpolate changes to the duration.\n\nSee Also\nGetting built-in spring animations\nstatic var bouncy: Animation\nA spring animation with a predefined duration and higher amount of bounce.\nstatic func bouncy(duration: TimeInterval, extraBounce: Double) -> Animation\nA spring animation with a predefined duration and higher amount of bounce that can be tuned.\nstatic var smooth: Animation\nA smooth spring animation with a predefined duration and no bounce.\nstatic func smooth(duration: TimeInterval, extraBounce: Double) -> Animation\nA smooth spring animation with a predefined duration and no bounce that can be tuned.\nstatic var snappy: Animation\nA spring animation with a predefined duration and small amount of bounce that feels more snappy."
    },
    {
        "title": "speed(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/animation/speed(_:)",
        "html": "Parameters\nspeed\n\nThe speed at which SwiftUI performs the animation.\n\nReturn Value\n\nAn animation with the adjusted speed.\n\nDiscussion\n\nSetting the speed of an animation changes the duration of the animation by a factor of speed. A higher speed value causes a faster animation sequence due to a shorter duration. For example, a one-second animation with a speed of 2.0 completes in half the time (half a second).\n\nstruct ContentView: View {\n    @State private var adjustBy = 100.0\n\n\n    private var oneSecondAnimation: Animation {\n       .easeInOut(duration: 1.0)\n    }\n\n\n    var body: some View {\n        VStack(spacing: 40) {\n            HStack(alignment: .bottom) {\n                Capsule()\n                    .frame(width: 50, height: 175 - adjustBy)\n                Capsule()\n                    .frame(width: 50, height: 175 + adjustBy)\n            }\n            .animation(oneSecondAnimation.speed(2.0), value: adjustBy)\n\n\n            Button(\"Animate\") {\n                adjustBy *= -1\n            }\n        }\n    }\n}\n\nPlay\n\nSetting speed to a lower number slows the animation, extending its duration. For example, a one-second animation with a speed of 0.25 takes four seconds to complete.\n\nstruct ContentView: View {\n    @State private var adjustBy = 100.0\n\n\n    private var oneSecondAnimation: Animation {\n       .easeInOut(duration: 1.0)\n    }\n\n\n    var body: some View {\n        VStack(spacing: 40) {\n            HStack(alignment: .bottom) {\n                Capsule()\n                    .frame(width: 50, height: 175 - adjustBy)\n                Capsule()\n                    .frame(width: 50, height: 175 + adjustBy)\n            }\n            .animation(oneSecondAnimation.speed(0.25), value: adjustBy)\n\n\n            Button(\"Animate\") {\n                adjustBy *= -1\n            }\n        }\n    }\n}\n\nPlay\nSee Also\nConfiguring an animation\nfunc delay(TimeInterval) -> Animation\nDelays the start of the animation by the specified number of seconds.\nfunc repeatCount(Int, autoreverses: Bool) -> Animation\nRepeats the animation for a specific number of times.\nfunc repeatForever(autoreverses: Bool) -> Animation\nRepeats the animation for the lifespan of the view containing the animation."
    },
    {
        "title": "repeatForever(autoreverses:)",
        "url": "https://developer.apple.com/documentation/swiftui/animation/repeatforever(autoreverses:)",
        "html": "Parameters\nautoreverses\n\nA Boolean value that indicates whether the animation sequence plays in reverse after playing forward.\n\nReturn Value\n\nAn animation that continuously repeats.\n\nDiscussion\n\nUse this method to repeat the animation until the instance of the view no longer exists, or the view\u2019s explicit or structural identity changes. For example, the following code continuously rotates a gear symbol for the lifespan of the view.\n\nstruct ContentView: View {\n    @State private var rotationDegrees = 0.0\n\n\n    private var animation: Animation {\n        .linear\n        .speed(0.1)\n        .repeatForever(autoreverses: false)\n    }\n\n\n    var body: some View {\n        Image(systemName: \"gear\")\n            .font(.system(size: 86))\n            .rotationEffect(.degrees(rotationDegrees))\n            .onAppear {\n                withAnimation(animation) {\n                    rotationDegrees = 360.0\n                }\n            }\n    }\n}\n\nPlay\nSee Also\nConfiguring an animation\nfunc delay(TimeInterval) -> Animation\nDelays the start of the animation by the specified number of seconds.\nfunc repeatCount(Int, autoreverses: Bool) -> Animation\nRepeats the animation for a specific number of times.\nfunc speed(Double) -> Animation\nChanges the duration of an animation by adjusting its speed."
    },
    {
        "title": "delay(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/animation/delay(_:)",
        "html": "Parameters\ndelay\n\nThe number of seconds to delay the start of the animation.\n\nReturn Value\n\nAn animation with a delayed start.\n\nDiscussion\n\nUse this method to delay the start of an animation. For example, the following code animates the height change of two capsules. Animation of the first Capsule begins immediately. However, animation of the second one doesn\u2019t begin until a half second later.\n\nstruct ContentView: View {\n    @State private var adjustBy = 100.0\n\n\n    var body: some View {\n        VStack(spacing: 40) {\n            HStack(alignment: .bottom) {\n                Capsule()\n                    .frame(width: 50, height: 175 - adjustBy)\n                    .animation(.easeInOut, value: adjustBy)\n                Capsule()\n                    .frame(width: 50, height: 175 + adjustBy)\n                    .animation(.easeInOut.delay(0.5), value: adjustBy)\n            }\n\n\n            Button(\"Animate\") {\n                adjustBy *= -1\n            }\n        }\n    }\n}\n\nPlay\nSee Also\nConfiguring an animation\nfunc repeatCount(Int, autoreverses: Bool) -> Animation\nRepeats the animation for a specific number of times.\nfunc repeatForever(autoreverses: Bool) -> Animation\nRepeats the animation for the lifespan of the view containing the animation.\nfunc speed(Double) -> Animation\nChanges the duration of an animation by adjusting its speed."
    },
    {
        "title": "easeInOut(duration:)",
        "url": "https://developer.apple.com/documentation/swiftui/animation/easeinout(duration:)",
        "html": "Parameters\nduration\n\nThe length of time, expressed in seconds, that the animation takes to complete.\n\nReturn Value\n\nAn ease-in ease-out animation with a specified duration.\n\nDiscussion\n\nAn easing animation provides motion with a natural feel by varying the acceleration and deceleration of the animation, which matches how things tend to move in reality. An ease in and out animation starts slowly, increasing its speed towards the halfway point, and finally decreasing the speed towards the end of the animation.\n\nUse easeInOut(duration:) when you want to specify the time it takes for the animation to complete. Otherwise, use easeInOut to perform the animation for a default length of time.\n\nThe following code shows an example of animating the size changes of a Circle using an ease in and out animation with a duration of one second.\n\nstruct ContentView: View {\n    @State private var scale = 0.5\n\n\n    var body: some View {\n        VStack {\n            Circle()\n                .scale(scale)\n                .animation(.easeInOut(duration: 1.0), value: scale)\n            HStack {\n                Button(\"+\") { scale += 0.1 }\n                Button(\"-\") { scale -= 0.1 }\n            }\n        }\n    }\n}\n\nPlay\nSee Also\nGetting eased animations\nstatic var easeIn: Animation\nAn animation that starts slowly and then increases speed towards the end of the movement.\nstatic func easeIn(duration: TimeInterval) -> Animation\nAn animation with a specified duration that starts slowly and then increases speed towards the end of the movement.\nstatic var easeOut: Animation\nAn animation that starts quickly and then slows towards the end of the movement.\nstatic func easeOut(duration: TimeInterval) -> Animation\nAn animation with a specified duration that starts quickly and then slows towards the end of the movement.\nstatic var easeInOut: Animation\nAn animation that combines the behaviors of in and out easing animations."
    },
    {
        "title": "repeatCount(_:autoreverses:)",
        "url": "https://developer.apple.com/documentation/swiftui/animation/repeatcount(_:autoreverses:)",
        "html": "Parameters\nrepeatCount\n\nThe number of times that the animation repeats. Each repeated sequence starts at the beginning when autoreverse is false.\n\nautoreverses\n\nA Boolean value that indicates whether the animation sequence plays in reverse after playing forward. Autoreverse counts towards the repeatCount. For instance, a repeatCount of one plays the animation forward once, but it doesn\u2019t play in reverse even if autoreverse is true. When autoreverse is true and repeatCount is 2, the animation moves forward, then reverses, then stops.\n\nReturn Value\n\nAn animation that repeats for specific number of times.\n\nDiscussion\n\nUse this method to repeat the animation a specific number of times. For example, in the following code, the animation moves a truck from one edge of the view to the other edge. It repeats this animation three times.\n\nstruct ContentView: View {\n    @State private var driveForward = true\n\n\n    private var driveAnimation: Animation {\n        .easeInOut\n        .repeatCount(3, autoreverses: true)\n        .speed(0.5)\n    }\n\n\n    var body: some View {\n        VStack(alignment: driveForward ? .leading : .trailing, spacing: 40) {\n            Image(systemName: \"box.truck\")\n                .font(.system(size: 48))\n                .animation(driveAnimation, value: driveForward)\n\n\n            HStack {\n                Spacer()\n                Button(\"Animate\") {\n                    driveForward.toggle()\n                }\n                Spacer()\n            }\n        }\n    }\n}\n\nPlay\n\nThe first time the animation runs, the truck moves from the leading edge to the trailing edge of the view. The second time the animation runs, the truck moves from the trailing edge to the leading edge because autoreverse is true. If autoreverse were false, the truck would jump back to leading edge before moving to the trailing edge. The third time the animation runs, the truck moves from the leading to the trailing edge of the view.\n\nSee Also\nConfiguring an animation\nfunc delay(TimeInterval) -> Animation\nDelays the start of the animation by the specified number of seconds.\nfunc repeatForever(autoreverses: Bool) -> Animation\nRepeats the animation for the lifespan of the view containing the animation.\nfunc speed(Double) -> Animation\nChanges the duration of an animation by adjusting its speed."
    },
    {
        "title": "smooth",
        "url": "https://developer.apple.com/documentation/swiftui/animation/smooth",
        "html": "See Also\nGetting built-in spring animations\nstatic var bouncy: Animation\nA spring animation with a predefined duration and higher amount of bounce.\nstatic func bouncy(duration: TimeInterval, extraBounce: Double) -> Animation\nA spring animation with a predefined duration and higher amount of bounce that can be tuned.\nstatic func smooth(duration: TimeInterval, extraBounce: Double) -> Animation\nA smooth spring animation with a predefined duration and no bounce that can be tuned.\nstatic var snappy: Animation\nA spring animation with a predefined duration and small amount of bounce that feels more snappy.\nstatic func snappy(duration: TimeInterval, extraBounce: Double) -> Animation\nA spring animation with a predefined duration and small amount of bounce that feels more snappy and can be tuned."
    },
    {
        "title": "bouncy(duration:extraBounce:)",
        "url": "https://developer.apple.com/documentation/swiftui/animation/bouncy(duration:extrabounce:)",
        "html": "Parameters\nduration\n\nThe perceptual duration, which defines the pace of the spring. This is approximately equal to the settling duration, but for very bouncy springs, will be the duration of the period of oscillation for the spring.\n\nextraBounce\n\nHow much additional bounce should be added to the base bounce of 0.3.\n\nblendDuration\n\nThe duration in seconds over which to interpolate changes to the duration.\n\nSee Also\nGetting built-in spring animations\nstatic var bouncy: Animation\nA spring animation with a predefined duration and higher amount of bounce.\nstatic var smooth: Animation\nA smooth spring animation with a predefined duration and no bounce.\nstatic func smooth(duration: TimeInterval, extraBounce: Double) -> Animation\nA smooth spring animation with a predefined duration and no bounce that can be tuned.\nstatic var snappy: Animation\nA spring animation with a predefined duration and small amount of bounce that feels more snappy.\nstatic func snappy(duration: TimeInterval, extraBounce: Double) -> Animation\nA spring animation with a predefined duration and small amount of bounce that feels more snappy and can be tuned."
    },
    {
        "title": "magnitudeSquared",
        "url": "https://developer.apple.com/documentation/swiftui/vectorarithmetic/magnitudesquared",
        "html": "Required\n\nSee Also\nManipulating values\nfunc scale(by: Double)\nMultiplies each component of this value by the given value.\n\nRequired Default implementation provided.\n\nfunc scaled(by: Double) -> Self\nReturns a value with each component of this value multiplied by the given value.\nfunc interpolate(towards: Self, amount: Double)\nInterpolates this value with other by the specified amount.\nfunc interpolated(towards: Self, amount: Double) -> Self\nReturns this value interpolated with other by the specified amount."
    },
    {
        "title": "Text.TruncationMode",
        "url": "https://developer.apple.com/documentation/swiftui/text/truncationmode",
        "html": "Overview\n\nWhen a text view contains more text than it\u2019s able to display, the view might truncate the text and place an ellipsis (\u2026) at the truncation point. Use the truncationMode(_:) modifier with one of the TruncationMode values to indicate which part of the text to truncate, either at the beginning, in the middle, or at the end.\n\nTopics\nGetting text truncation modes\ncase head\nTruncate at the beginning of the line.\ncase middle\nTruncate in the middle of the line.\ncase tail\nTruncate at the end of the line.\nRelationships\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nFitting text into available space\nfunc textScale(Text.Scale, isEnabled: Bool) -> Text\nApplies a text scale to the text.\nstruct Scale\nDefines text scales"
    },
    {
        "title": "title",
        "url": "https://developer.apple.com/documentation/swiftui/font/title",
        "html": "See Also\nGetting standard fonts\nstatic let extraLargeTitle2: Font\nCreate a font with the second level extra large title text style.\nBeta\nstatic let extraLargeTitle: Font\nCreate a font with the extra large title text style.\nBeta\nstatic let largeTitle: Font\nA font with the large title text style.\nstatic let title2: Font\nCreate a font for second level hierarchical headings.\nstatic let title3: Font\nCreate a font for third level hierarchical headings.\nstatic let headline: Font\nA font with the headline text style.\nstatic let subheadline: Font\nA font with the subheadline text style.\nstatic let body: Font\nA font with the body text style.\nstatic let callout: Font\nA font with the callout text style.\nstatic let caption: Font\nA font with the caption text style.\nstatic let caption2: Font\nCreate a font with the alternate caption text style.\nstatic let footnote: Font\nA font with the footnote text style."
    },
    {
        "title": "Image.Orientation.upMirrored",
        "url": "https://developer.apple.com/documentation/swiftui/image/orientation/upmirrored",
        "html": "See Also\nGetting mirrored image orientation\ncase downMirrored\nA value that indicates a vertical flip of the image from the orientation of its original pixel data.\ncase leftMirrored\nA value that indicates a 90\u00b0 clockwise rotation and horizontal flip of the image from the orientation of its original pixel data.\ncase rightMirrored\nA value that indicates a 90\u00b0 counterclockwise rotation and horizontal flip from the orientation of its original pixel data."
    },
    {
        "title": "scale(by:)",
        "url": "https://developer.apple.com/documentation/swiftui/vectorarithmetic/scale(by:)-5tc5x",
        "html": "Required Default implementation provided.\n\nDefault Implementations\nVectorArithmetic Implementations\nfunc scale(by: Double)\nMultiplies each component of this value by the given value.\nAvailable when Self conforms to Scalable3D.\nBeta\nSee Also\nManipulating values\nvar magnitudeSquared: Double\nReturns the dot-product of this vector arithmetic instance with itself.\n\nRequired\n\nfunc scaled(by: Double) -> Self\nReturns a value with each component of this value multiplied by the given value.\nfunc interpolate(towards: Self, amount: Double)\nInterpolates this value with other by the specified amount.\nfunc interpolated(towards: Self, amount: Double) -> Self\nReturns this value interpolated with other by the specified amount."
    },
    {
        "title": "DisclosureGroupStyleConfiguration",
        "url": "https://developer.apple.com/documentation/swiftui/disclosuregroupstyleconfiguration",
        "html": "Topics\nConfiguring the label\nlet label: DisclosureGroupStyleConfiguration.Label\nThe label for the disclosure group.\nstruct Label\nA type-erased label of a disclosure group.\nConfiguring the content\nlet content: DisclosureGroupStyleConfiguration.Content\nThe content of the disclosure group.\nstruct Content\nA type-erased content of a disclosure group.\nManaging disclosure\nvar isExpanded: Bool\nA binding to a Boolean that indicates whether the disclosure group is expanded.\nvar $isExpanded: Binding<Bool>\nSee Also\nCreating custom disclosure group styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view that represents the body of a disclosure group.\n\nRequired\n\ntypealias Configuration\nThe properties of a disclosure group instance.\nassociatedtype Body : View\nA view that represents the body of a disclosure group.\n\nRequired"
    },
    {
        "title": "makeBody(configuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/disclosuregroupstyle/makebody(configuration:)",
        "html": "Required\n\nParameters\nconfiguration\n\nThe properties of the instance being created.\n\nDiscussion\n\nSwiftUI calls this method for each instance of DisclosureGroup that you create within a view hierarchy where this style is the current DisclosureGroupStyle.\n\nSee Also\nCreating custom disclosure group styles\nstruct DisclosureGroupStyleConfiguration\nThe properties of a disclosure group instance.\ntypealias Configuration\nThe properties of a disclosure group instance.\nassociatedtype Body : View\nA view that represents the body of a disclosure group.\n\nRequired"
    },
    {
        "title": "animate(value:time:context:)",
        "url": "https://developer.apple.com/documentation/swiftui/customanimation/animate(value:time:context:)",
        "html": "Required\n\nParameters\nvalue\n\nThe vector to animate towards.\n\ntime\n\nThe elapsed time since the start of the animation.\n\ncontext\n\nAn instance of AnimationContext that provides access to state and the animation environment.\n\nReturn Value\n\nThe current value of the animation, or nil if the animation has finished.\n\nDiscussion\n\nImplement this method to calculate and return the value of the animation at a given point in time. If the animation has finished, return nil as the value. This signals to the system that it can remove the animation.\n\nIf your custom animation needs to maintain state between calls to the animate(value:time:context:) method, store the state data in context. This makes the data available to the method next time the system calls it. To learn more about managing state data in a custom animation, see AnimationContext."
    },
    {
        "title": "disabled",
        "url": "https://developer.apple.com/documentation/swiftui/textselectability/disabled",
        "html": "Discussion\n\nUse this property to disable text selection of views that you don\u2019t want people to select and copy, even if contained within an overall context that allows text selection.\n\ncontent // Content that might contain Text views.\n   .textSelection(.disabled)\n   .padding()\n   .contentShape(Rectangle())\n   .gesture(someGesture)\n\nSee Also\nGetting selectability options\nstatic var enabled: EnabledTextSelectability\nA selectability value that enables text selection by a person using your app.\nAvailable when Self is EnabledTextSelectability."
    },
    {
        "title": "scale",
        "url": "https://developer.apple.com/documentation/swiftui/transition/scale",
        "html": "See Also\nGetting built-in transitions\nstatic var identity: IdentityTransition\nA transition that returns the input view, unmodified, as the output view.\nAvailable when Self is IdentityTransition.\nstatic func move(edge: Edge) -> Self\nReturns a transition that moves the view away, towards the specified edge of the view.\nAvailable when Self is MoveTransition.\nstatic func offset(CGSize) -> Self\nReturns a transition that offset the view by the specified amount.\nAvailable when Self is OffsetTransition.\nstatic func offset(x: CGFloat, y: CGFloat) -> Self\nReturns a transition that offset the view by the specified x and y values.\nAvailable when Self is OffsetTransition.\nstatic var opacity: OpacityTransition\nA transition from transparent to opaque on insertion, and from opaque to transparent on removal.\nAvailable when Self is OpacityTransition.\nstatic func push(from: Edge) -> Self\nCreates a transition that when added to a view will animate the view\u2019s insertion by moving it in from the specified edge while fading it in, and animate its removal by moving it out towards the opposite edge and fading it out.\nAvailable when Self is PushTransition.\nstatic func scale(Double, anchor: UnitPoint) -> Self\nReturns a transition that scales the view by the specified amount.\nAvailable when Self is ScaleTransition.\nstatic var slide: SlideTransition\nA transition that inserts by moving in from the leading edge, and removes by moving out towards the trailing edge.\nAvailable when Self is SlideTransition.\nstatic var symbolEffect: SymbolEffectTransition\nA transition that applies the default symbol effect transition to symbol images within the inserted or removed view hierarchy. Other views are unaffected by this transition.\nAvailable when Self is SymbolEffectTransition.\nstatic func symbolEffect<T>(T, options: SymbolEffectOptions) -> SymbolEffectTransition\nCreates a transition that applies the provided effect to symbol images within the inserted or removed view hierarchy. Other views are unaffected by this transition.\nAvailable when Self is SymbolEffectTransition."
    },
    {
        "title": "opacity",
        "url": "https://developer.apple.com/documentation/swiftui/transition/opacity",
        "html": "See Also\nGetting built-in transitions\nstatic var identity: IdentityTransition\nA transition that returns the input view, unmodified, as the output view.\nAvailable when Self is IdentityTransition.\nstatic func move(edge: Edge) -> Self\nReturns a transition that moves the view away, towards the specified edge of the view.\nAvailable when Self is MoveTransition.\nstatic func offset(CGSize) -> Self\nReturns a transition that offset the view by the specified amount.\nAvailable when Self is OffsetTransition.\nstatic func offset(x: CGFloat, y: CGFloat) -> Self\nReturns a transition that offset the view by the specified x and y values.\nAvailable when Self is OffsetTransition.\nstatic func push(from: Edge) -> Self\nCreates a transition that when added to a view will animate the view\u2019s insertion by moving it in from the specified edge while fading it in, and animate its removal by moving it out towards the opposite edge and fading it out.\nAvailable when Self is PushTransition.\nstatic var scale: ScaleTransition\nReturns a transition that scales the view.\nAvailable when Self is ScaleTransition.\nstatic func scale(Double, anchor: UnitPoint) -> Self\nReturns a transition that scales the view by the specified amount.\nAvailable when Self is ScaleTransition.\nstatic var slide: SlideTransition\nA transition that inserts by moving in from the leading edge, and removes by moving out towards the trailing edge.\nAvailable when Self is SlideTransition.\nstatic var symbolEffect: SymbolEffectTransition\nA transition that applies the default symbol effect transition to symbol images within the inserted or removed view hierarchy. Other views are unaffected by this transition.\nAvailable when Self is SymbolEffectTransition.\nstatic func symbolEffect<T>(T, options: SymbolEffectOptions) -> SymbolEffectTransition\nCreates a transition that applies the provided effect to symbol images within the inserted or removed view hierarchy. Other views are unaffected by this transition.\nAvailable when Self is SymbolEffectTransition."
    },
    {
        "title": "velocity(value:time:context:)",
        "url": "https://developer.apple.com/documentation/swiftui/customanimation/velocity(value:time:context:)-1317j",
        "html": "Required Default implementation provided.\n\nParameters\nvalue\n\nThe vector to animate towards.\n\ntime\n\nThe amount of time since the start of the animation.\n\ncontext\n\nAn instance of AnimationContext that provides access to state and the animation environment.\n\nReturn Value\n\nThe current velocity of the animation, or nil if the animation has finished.\n\nDiscussion\n\nImplement this method to provide the velocity of the animation at a given time. Should subsequent animations merge with the animation, the system preserves continuity of the velocity between animations.\n\nThe default implementation of this method returns nil.\n\nNote\n\nState and environment data is available to this method via the context parameter, but context is read-only. This behavior is different than with animate(value:time:context:) and shouldMerge(previous:value:time:context:) where context is an inout parameter, letting you change the context including state data of the animation. For more information about managing state data in a custom animation, see AnimationContext.\n\nDefault Implementations\nCustomAnimation Implementations\nfunc velocity<V>(value: V, time: TimeInterval, context: AnimationContext<V>) -> V?\nCalculates the velocity of the animation at a specified time."
    },
    {
        "title": "rectangle",
        "url": "https://developer.apple.com/documentation/swiftui/symbolvariants/rectangle-swift.property",
        "html": "Discussion\n\nUse this property to modify a variant like fill so that it\u2019s also contained in a rectangle:\n\nLabel(\"Fill Rectangle\", systemImage: \"plus\")\n    .symbolVariant(.fill.rectangle)\n\n\nSee Also\nModifying a variant\nvar circle: SymbolVariants\nA version of the variant that\u2019s encapsulated in a circle.\nvar square: SymbolVariants\nA version of the variant that\u2019s encapsulated in a square.\nvar fill: SymbolVariants\nA filled version of the variant.\nvar slash: SymbolVariants\nA slashed version of the variant."
    },
    {
        "title": "isOpaque",
        "url": "https://developer.apple.com/documentation/swiftui/imagerenderer/isopaque",
        "html": "Discussion\n\nSetting this value to true, meaning the alpha channel is opaque, may improve performance. Don\u2019t render non-opaque pixels to a renderer declared as opaque. This property defaults to false.\n\nSee Also\nAccessing renderer properties\nvar proposedSize: ProposedViewSize\nThe size proposed to the root view.\nvar scale: CGFloat\nThe scale at which to render the image.\nvar colorMode: ColorRenderingMode\nThe working color space and storage format of the image."
    },
    {
        "title": "init(url:scale:content:placeholder:)",
        "url": "https://developer.apple.com/documentation/swiftui/asyncimage/init(url:scale:content:placeholder:)",
        "html": "Parameters\nurl\n\nThe URL of the image to display.\n\nscale\n\nThe scale to use for the image. The default is 1. Set a different value when loading images designed for higher resolution displays. For example, set a value of 2 for an image that you would name with the @2x suffix if stored in a file on disk.\n\ncontent\n\nA closure that takes the loaded image as an input, and returns the view to show. You can return the image directly, or modify it as needed before returning it.\n\nplaceholder\n\nA closure that returns the view to show until the load operation completes successfully.\n\nDiscussion\n\nUntil the image loads, SwiftUI displays the placeholder view that you specify. When the load operation completes successfully, SwiftUI updates the view to show content that you specify, which you create using the loaded image. For example, you can show a green placeholder, followed by a tiled version of the loaded image:\n\nAsyncImage(url: URL(string: \"https://example.com/icon.png\")) { image in\n    image.resizable(resizingMode: .tile)\n} placeholder: {\n    Color.green\n}\n\n\nIf the load operation fails, SwiftUI continues to display the placeholder. To be able to display a different view on a load error, use the init(url:scale:transaction:content:) initializer instead.\n\nSee Also\nLoading an image\ninit(url: URL?, scale: CGFloat)\nLoads and displays an image from the specified URL."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/movekeyframe/init(_:)",
        "html": "Parameters\nto\n\nThe value of the keyframe."
    },
    {
        "title": "slash",
        "url": "https://developer.apple.com/documentation/swiftui/symbolvariants/slash-swift.type.property",
        "html": "Discussion\n\nUse this variant with a call to the symbolVariant(_:) modifier to draw symbols with a slash, for those symbols that have such a variant:\n\nVStack(spacing: 20) {\n    HStack(spacing: 20) {\n        Image(systemName: \"flag\")\n        Image(systemName: \"heart\")\n        Image(systemName: \"bolt\")\n        Image(systemName: \"star\")\n    }\n    HStack(spacing: 20) {\n        Image(systemName: \"flag\")\n        Image(systemName: \"heart\")\n        Image(systemName: \"bolt\")\n        Image(systemName: \"star\")\n    }\n    .symbolVariant(.slash)\n}\n\n\nSee Also\nGetting symbol variants\nstatic let none: SymbolVariants\nNo variant for a symbol.\nstatic let circle: SymbolVariants\nA variant that encapsulates the symbol in a circle.\nstatic let square: SymbolVariants\nA variant that encapsulates the symbol in a square.\nstatic let rectangle: SymbolVariants\nA variant that encapsulates the symbol in a rectangle.\nstatic let fill: SymbolVariants\nA variant that fills the symbol."
    },
    {
        "title": "easeOut(duration:)",
        "url": "https://developer.apple.com/documentation/swiftui/animation/easeout(duration:)",
        "html": "Parameters\nduration\n\nThe length of time, expressed in seconds, that the animation takes to complete.\n\nReturn Value\n\nAn ease-out animation with a specified duration.\n\nDiscussion\n\nAn easing animation provides motion with a natural feel by varying the acceleration and deceleration of the animation, which matches how things tend to move in reality. With an ease out animation, the motion starts quickly and decreases its speed towards the end.\n\nUse easeOut(duration:) when you want to specify the time it takes for the animation to complete. Otherwise, use easeOut to perform the animation for a default length of time.\n\nThe following code shows an example of animating the size changes of a Circle using an ease out animation with a duration of one second.\n\nstruct ContentView: View {\n    @State private var scale = 0.5\n\n\n    var body: some View {\n        VStack {\n            Circle()\n                .scale(scale)\n                .animation(.easeOut(duration: 1.0), value: scale)\n            HStack {\n                Button(\"+\") { scale += 0.1 }\n                Button(\"-\") { scale -= 0.1 }\n            }\n        }\n    }\n}\n\nPlay\nSee Also\nGetting eased animations\nstatic var easeIn: Animation\nAn animation that starts slowly and then increases speed towards the end of the movement.\nstatic func easeIn(duration: TimeInterval) -> Animation\nAn animation with a specified duration that starts slowly and then increases speed towards the end of the movement.\nstatic var easeOut: Animation\nAn animation that starts quickly and then slows towards the end of the movement.\nstatic var easeInOut: Animation\nAn animation that combines the behaviors of in and out easing animations.\nstatic func easeInOut(duration: TimeInterval) -> Animation\nAn animation with a specified duration that combines the behaviors of in and out easing animations."
    },
    {
        "title": "removed",
        "url": "https://developer.apple.com/documentation/swiftui/animationcompletioncriteria/removed",
        "html": "Discussion\n\nIf a subsequent change occurs that creates additional animations on properties with removed completion callbacks registered, then those callbacks will only fire when all of the created animations are complete.\n\nSee Also\nGetting the completion criteria\nstatic let logicallyComplete: AnimationCompletionCriteria\nThe animation has logically completed, but may still be in its long tail."
    },
    {
        "title": "default",
        "url": "https://developer.apple.com/documentation/swiftui/animation/default",
        "html": "Discussion\n\nThe default animation is spring(response:dampingFraction:blendDuration:) with:\n\nresponse equal to 0.55\n\ndampingFraction equal to 1.0\n\nblendDuration equal to 0.0\n\nPrior to iOS 17, macOS 14, tvOS 17, and watchOS 10, the default animation is easeInOut.\n\nThe global function withAnimation(_:_:) uses the default animation if you don\u2019t provide one. For instance, the following code listing shows an example of using the default animation to flip the text \u201cHello\u201d each time someone clicks the Animate button.\n\nstruct ContentView: View {\n    @State private var degrees = Double.zero\n\n\n    var body: some View {\n        VStack {\n            Spacer()\n            Text(\"Hello\")\n                .font(.largeTitle)\n                .rotation3DEffect(.degrees(degrees), axis: (x: 0, y: 1, z: 0))\n\n\n            Spacer()\n            Button(\"Animate\") {\n                withAnimation {\n                    degrees = (degrees == .zero) ? 180 : .zero\n                }\n            }\n        }\n    }\n}\n\nPlay\n\nTo use the default animation when adding the animation(_:value:) view modifier, specify it explicitly as the animation type. For instance, the following code shows an example of the default animation to spin the text \u201cHello\u201d each time someone clicks the Animate button.\n\nstruct ContentView: View {\n    @State private var degrees = Double.zero\n\n\n    var body: some View {\n        VStack {\n            Spacer()\n            Text(\"Hello\")\n                .font(.largeTitle)\n                .rotationEffect(.degrees(degrees))\n                .animation(.default, value: degrees)\n\n\n            Spacer()\n            Button(\"Animate\") {\n                degrees = (degrees == .zero) ? 360 : .zero\n            }\n        }\n    }\n}\n\nPlay\n\nA default animation instance is only equal to other default animation instances (using ==), and not equal to other animation instances even when the animations are identical. For example, if you create an animation using the spring(response:dampingFraction:blendDuration:) modifier with the same parameter values that default uses, the animation isn\u2019t equal to default. This behavior lets you differentiate between animations that you intentionally choose and those that use the default animation."
    },
    {
        "title": "easeIn(duration:)",
        "url": "https://developer.apple.com/documentation/swiftui/animation/easein(duration:)",
        "html": "Parameters\nduration\n\nThe length of time, expressed in seconds, that the animation takes to complete.\n\nReturn Value\n\nAn ease-in animation with a specified duration.\n\nDiscussion\n\nAn easing animation provides motion with a natural feel by varying the acceleration and deceleration of the animation, which matches how things tend to move in reality. With an ease in animation, the motion starts slowly and increases its speed towards the end.\n\nUse easeIn(duration:) when you want to specify the time it takes for the animation to complete. Otherwise, use easeIn to perform the animation for a default length of time.\n\nThe following code shows an example of animating the size changes of a Circle using an ease in animation with a duration of one second.\n\nstruct ContentView: View {\n    @State private var scale = 0.5\n\n\n    var body: some View {\n        VStack {\n            Circle()\n                .scale(scale)\n                .animation(.easeIn(duration: 1.0), value: scale)\n            HStack {\n                Button(\"+\") { scale += 0.1 }\n                Button(\"-\") { scale -= 0.1 }\n            }\n        }\n    }\n}\n\nPlay\nSee Also\nGetting eased animations\nstatic var easeIn: Animation\nAn animation that starts slowly and then increases speed towards the end of the movement.\nstatic var easeOut: Animation\nAn animation that starts quickly and then slows towards the end of the movement.\nstatic func easeOut(duration: TimeInterval) -> Animation\nAn animation with a specified duration that starts quickly and then slows towards the end of the movement.\nstatic var easeInOut: Animation\nAn animation that combines the behaviors of in and out easing animations.\nstatic func easeInOut(duration: TimeInterval) -> Animation\nAn animation with a specified duration that combines the behaviors of in and out easing animations."
    },
    {
        "title": "circle",
        "url": "https://developer.apple.com/documentation/swiftui/symbolvariants/circle-swift.property",
        "html": "Discussion\n\nUse this property to modify a variant like fill so that it\u2019s also contained in a circle:\n\nLabel(\"Fill Circle\", systemImage: \"bolt\")\n    .symbolVariant(.fill.circle)\n\n\nSee Also\nModifying a variant\nvar square: SymbolVariants\nA version of the variant that\u2019s encapsulated in a square.\nvar rectangle: SymbolVariants\nA version of the variant that\u2019s encapsulated in a rectangle.\nvar fill: SymbolVariants\nA filled version of the variant.\nvar slash: SymbolVariants\nA slashed version of the variant."
    },
    {
        "title": "NavigationLinkPickerStyle",
        "url": "https://developer.apple.com/documentation/swiftui/navigationlinkpickerstyle",
        "html": "Overview\n\nIn navigation stacks, prefer the default menu style. Consider the navigation link style when you have a large number of options or your design is better expressed by pushing onto a stack.\n\nYou can also use navigationLink to construct this style.\n\nTopics\nCreating the picker style\ninit()\nCreates a navigation link picker style.\nRelationships\nConforms To\nPickerStyle\nSee Also\nSupporting types\nstruct DefaultPickerStyle\nThe default picker style, based on the picker\u2019s context.\nstruct InlinePickerStyle\nA PickerStyle where each option is displayed inline with other views in the current container.\nstruct MenuPickerStyle\nA picker style that presents the options as a menu when the user presses a button, or as a submenu when nested within a larger menu.\nstruct PalettePickerStyle\nA picker style that presents the options as a row of compact elements.\nstruct RadioGroupPickerStyle\nA picker style that presents the options as a group of radio buttons.\nstruct SegmentedPickerStyle\nA picker style that presents the options in a segmented control.\nstruct WheelPickerStyle\nA picker style that presents the options in a scrollable wheel that shows the selected option and a few neighboring options."
    },
    {
        "title": "logicallyComplete",
        "url": "https://developer.apple.com/documentation/swiftui/animationcompletioncriteria/logicallycomplete",
        "html": "Discussion\n\nIf a subsequent change occurs that creates additional animations on properties with logicallyComplete completion callbacks registered, then those callbacks will fire when the animations from the change that they were registered with logically complete, ignoring the new animations.\n\nSee Also\nGetting the completion criteria\nstatic let removed: AnimationCompletionCriteria\nThe entire animation is finished and will now be removed."
    },
    {
        "title": "DisabledTextSelectability",
        "url": "https://developer.apple.com/documentation/swiftui/disabledtextselectability",
        "html": "Overview\n\nDon\u2019t use this type directly. Instead, use disabled.\n\nRelationships\nConforms To\nTextSelectability\nSee Also\nSupporting types\nstruct EnabledTextSelectability\nA selectability type that enables text selection by the person using your app."
    },
    {
        "title": "DynamicTypeSize.xSmall",
        "url": "https://developer.apple.com/documentation/swiftui/dynamictypesize/xsmall",
        "html": "See Also\nGetting type sizes\ncase small\nA small size.\ncase medium\nA medium size.\ncase large\nA large size.\ncase xLarge\nAn extra large size.\ncase xxLarge\nAn extra extra large size.\ncase xxxLarge\nAn extra extra extra large size."
    },
    {
        "title": "push(from:)",
        "url": "https://developer.apple.com/documentation/swiftui/anytransition/push(from:)",
        "html": "Parameters\nedge\n\nthe edge from which the view will be animated in.\n\nReturn Value\n\nA transition that animates a view by moving and fading it.\n\nSee Also\nGetting built-in transitions\nstatic let identity: AnyTransition\nA transition that returns the input view, unmodified, as the output view.\nstatic func move(edge: Edge) -> AnyTransition\nReturns a transition that moves the view away, towards the specified edge of the view.\nstatic func offset(CGSize) -> AnyTransition\nstatic func offset(x: CGFloat, y: CGFloat) -> AnyTransition\nstatic let opacity: AnyTransition\nA transition from transparent to opaque on insertion, and from opaque to transparent on removal.\nstatic var scale: AnyTransition\nReturns a transition that scales the view.\nstatic func scale(scale: CGFloat, anchor: UnitPoint) -> AnyTransition\nReturns a transition that scales the view by the specified amount.\nstatic var slide: AnyTransition\nA transition that inserts by moving in from the leading edge, and removes by moving out towards the trailing edge."
    },
    {
        "title": "offset(x:y:)",
        "url": "https://developer.apple.com/documentation/swiftui/anytransition/offset(x:y:)",
        "html": "See Also\nGetting built-in transitions\nstatic let identity: AnyTransition\nA transition that returns the input view, unmodified, as the output view.\nstatic func move(edge: Edge) -> AnyTransition\nReturns a transition that moves the view away, towards the specified edge of the view.\nstatic func offset(CGSize) -> AnyTransition\nstatic let opacity: AnyTransition\nA transition from transparent to opaque on insertion, and from opaque to transparent on removal.\nstatic func push(from: Edge) -> AnyTransition\nCreates a transition that when added to a view will animate the view\u2019s insertion by moving it in from the specified edge while fading it in, and animate its removal by moving it out towards the opposite edge and fading it out.\nstatic var scale: AnyTransition\nReturns a transition that scales the view.\nstatic func scale(scale: CGFloat, anchor: UnitPoint) -> AnyTransition\nReturns a transition that scales the view by the specified amount.\nstatic var slide: AnyTransition\nA transition that inserts by moving in from the leading edge, and removes by moving out towards the trailing edge."
    },
    {
        "title": "Color.Resolved",
        "url": "https://developer.apple.com/documentation/swiftui/color/resolved",
        "html": "Overview\n\nColor.Resolved is a set of RGBA values that represent a color that can be shown. The values are in Linear sRGB color space, extended range. This is a low-level type, most colors are represented by the Color type.\n\nSee Also\n\nColor\n\nTopics\nInitializers\ninit(colorSpace: Color.RGBColorSpace, red: Float, green: Float, blue: Float, opacity: Float)\nCreates a resolved color from red, green, and blue component values.\nInstance Properties\nvar blue: Float\nThe amount of blue in the color in the sRGB color space.\nvar cgColor: CGColor\nA Core Graphics representation of the color.\nvar green: Float\nThe amount of green in the color in the sRGB color space.\nvar linearBlue: Float\nThe amount of blue in the color in the sRGB linear color space.\nvar linearGreen: Float\nThe amount of green in the color in the sRGB linear color space.\nvar linearRed: Float\nThe amount of red in the color in the sRGB linear color space.\nvar opacity: Float\nThe degree of opacity in the color, given in the range 0 to 1.\nvar red: Float\nThe amount of red in the color in the sRGB color space.\nRelationships\nConforms To\nAnimatable\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nHashable\nSendable\nShapeStyle"
    },
    {
        "title": "DynamicTypeSize.accessibility4",
        "url": "https://developer.apple.com/documentation/swiftui/dynamictypesize/accessibility4",
        "html": "See Also\nGetting accessibility type sizes\ncase accessibility1\nThe first accessibility size.\ncase accessibility2\nThe second accessibility size.\ncase accessibility3\nThe third accessibility size.\ncase accessibility5\nThe fifth accessibility size.\nvar isAccessibilitySize: Bool\nA Boolean value indicating whether the size is one that is associated with accessibility."
    },
    {
        "title": "DynamicTypeSize.accessibility3",
        "url": "https://developer.apple.com/documentation/swiftui/dynamictypesize/accessibility3",
        "html": "See Also\nGetting accessibility type sizes\ncase accessibility1\nThe first accessibility size.\ncase accessibility2\nThe second accessibility size.\ncase accessibility4\nThe fourth accessibility size.\ncase accessibility5\nThe fifth accessibility size.\nvar isAccessibilitySize: Bool\nA Boolean value indicating whether the size is one that is associated with accessibility."
    },
    {
        "title": "DynamicTypeSize.xLarge",
        "url": "https://developer.apple.com/documentation/swiftui/dynamictypesize/xlarge",
        "html": "See Also\nGetting type sizes\ncase xSmall\nAn extra small size.\ncase small\nA small size.\ncase medium\nA medium size.\ncase large\nA large size.\ncase xxLarge\nAn extra extra large size.\ncase xxxLarge\nAn extra extra extra large size."
    },
    {
        "title": "identity",
        "url": "https://developer.apple.com/documentation/swiftui/anytransition/identity",
        "html": "See Also\nGetting built-in transitions\nstatic func move(edge: Edge) -> AnyTransition\nReturns a transition that moves the view away, towards the specified edge of the view.\nstatic func offset(CGSize) -> AnyTransition\nstatic func offset(x: CGFloat, y: CGFloat) -> AnyTransition\nstatic let opacity: AnyTransition\nA transition from transparent to opaque on insertion, and from opaque to transparent on removal.\nstatic func push(from: Edge) -> AnyTransition\nCreates a transition that when added to a view will animate the view\u2019s insertion by moving it in from the specified edge while fading it in, and animate its removal by moving it out towards the opposite edge and fading it out.\nstatic var scale: AnyTransition\nReturns a transition that scales the view.\nstatic func scale(scale: CGFloat, anchor: UnitPoint) -> AnyTransition\nReturns a transition that scales the view by the specified amount.\nstatic var slide: AnyTransition\nA transition that inserts by moving in from the leading edge, and removes by moving out towards the trailing edge."
    },
    {
        "title": "animatableData",
        "url": "https://developer.apple.com/documentation/swiftui/animatable/animatabledata-6nydg",
        "html": "Required Default implementations provided.\n\nDefault Implementations\nAnimatable Implementations\nvar animatableData: Self\nThe data to animate.\nAvailable when Self conforms to VectorArithmetic.\nvar animatableData: EmptyAnimatableData\nThe data to animate.\nAvailable when AnimatableData is EmptyAnimatableData.\nSee Also\nAnimating data\nassociatedtype AnimatableData : VectorArithmetic\nThe type defining the data to animate.\n\nRequired"
    },
    {
        "title": "isAccessibilitySize",
        "url": "https://developer.apple.com/documentation/swiftui/dynamictypesize/isaccessibilitysize",
        "html": "See Also\nGetting accessibility type sizes\ncase accessibility1\nThe first accessibility size.\ncase accessibility2\nThe second accessibility size.\ncase accessibility3\nThe third accessibility size.\ncase accessibility4\nThe fourth accessibility size.\ncase accessibility5\nThe fifth accessibility size."
    },
    {
        "title": "DynamicTypeSize.accessibility1",
        "url": "https://developer.apple.com/documentation/swiftui/dynamictypesize/accessibility1",
        "html": "See Also\nGetting accessibility type sizes\ncase accessibility2\nThe second accessibility size.\ncase accessibility3\nThe third accessibility size.\ncase accessibility4\nThe fourth accessibility size.\ncase accessibility5\nThe fifth accessibility size.\nvar isAccessibilitySize: Bool\nA Boolean value indicating whether the size is one that is associated with accessibility."
    },
    {
        "title": "DynamicTypeSize.small",
        "url": "https://developer.apple.com/documentation/swiftui/dynamictypesize/small",
        "html": "See Also\nGetting type sizes\ncase xSmall\nAn extra small size.\ncase medium\nA medium size.\ncase large\nA large size.\ncase xLarge\nAn extra large size.\ncase xxLarge\nAn extra extra large size.\ncase xxxLarge\nAn extra extra extra large size."
    },
    {
        "title": "opacity",
        "url": "https://developer.apple.com/documentation/swiftui/anytransition/opacity",
        "html": "See Also\nGetting built-in transitions\nstatic let identity: AnyTransition\nA transition that returns the input view, unmodified, as the output view.\nstatic func move(edge: Edge) -> AnyTransition\nReturns a transition that moves the view away, towards the specified edge of the view.\nstatic func offset(CGSize) -> AnyTransition\nstatic func offset(x: CGFloat, y: CGFloat) -> AnyTransition\nstatic func push(from: Edge) -> AnyTransition\nCreates a transition that when added to a view will animate the view\u2019s insertion by moving it in from the specified edge while fading it in, and animate its removal by moving it out towards the opposite edge and fading it out.\nstatic var scale: AnyTransition\nReturns a transition that scales the view.\nstatic func scale(scale: CGFloat, anchor: UnitPoint) -> AnyTransition\nReturns a transition that scales the view by the specified amount.\nstatic var slide: AnyTransition\nA transition that inserts by moving in from the leading edge, and removes by moving out towards the trailing edge."
    },
    {
        "title": "DynamicTypeSize.medium",
        "url": "https://developer.apple.com/documentation/swiftui/dynamictypesize/medium",
        "html": "See Also\nGetting type sizes\ncase xSmall\nAn extra small size.\ncase small\nA small size.\ncase large\nA large size.\ncase xLarge\nAn extra large size.\ncase xxLarge\nAn extra extra large size.\ncase xxxLarge\nAn extra extra extra large size."
    },
    {
        "title": "combined(with:)",
        "url": "https://developer.apple.com/documentation/swiftui/anytransition/combined(with:)",
        "html": "See Also\nCombining and configuring transitions\nfunc animation(Animation?) -> AnyTransition\nAttaches an animation to this transition.\nstatic func asymmetric(insertion: AnyTransition, removal: AnyTransition) -> AnyTransition\nProvides a composite transition that uses a different transition for insertion versus removal."
    },
    {
        "title": "AnimatableData",
        "url": "https://developer.apple.com/documentation/swiftui/animatable/animatabledata-swift.associatedtype",
        "html": "Required\n\nSee Also\nAnimating data\nvar animatableData: Self.AnimatableData\nThe data to animate.\n\nRequired Default implementations provided."
    },
    {
        "title": "animation(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/anytransition/animation(_:)",
        "html": "See Also\nCombining and configuring transitions\nstatic func asymmetric(insertion: AnyTransition, removal: AnyTransition) -> AnyTransition\nProvides a composite transition that uses a different transition for insertion versus removal.\nfunc combined(with: AnyTransition) -> AnyTransition\nCombines this transition with another, returning a new transition that is the result of both transitions being applied."
    },
    {
        "title": "DynamicTypeSize.xxLarge",
        "url": "https://developer.apple.com/documentation/swiftui/dynamictypesize/xxlarge",
        "html": "See Also\nGetting type sizes\ncase xSmall\nAn extra small size.\ncase small\nA small size.\ncase medium\nA medium size.\ncase large\nA large size.\ncase xLarge\nAn extra large size.\ncase xxxLarge\nAn extra extra extra large size."
    },
    {
        "title": "asymmetric(insertion:removal:)",
        "url": "https://developer.apple.com/documentation/swiftui/anytransition/asymmetric(insertion:removal:)",
        "html": "See Also\nCombining and configuring transitions\nfunc animation(Animation?) -> AnyTransition\nAttaches an animation to this transition.\nfunc combined(with: AnyTransition) -> AnyTransition\nCombines this transition with another, returning a new transition that is the result of both transitions being applied."
    },
    {
        "title": "withState(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/animationcontext/withstate(_:)",
        "html": "Parameters\nstate\n\nThe initial state for the new context.\n\nReturn Value\n\nA new context that contains the specified state.\n\nDiscussion\n\nUse this method to create a new context that contains the state that you provide and view environment values from the original context."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/anytransition/init(_:)",
        "html": "See Also\nCreating a custom transition\nstatic func modifier<E>(active: E, identity: E) -> AnyTransition\nReturns a transition defined between an active modifier and an identity modifier."
    },
    {
        "title": "borderedButton",
        "url": "https://developer.apple.com/documentation/swiftui/menustyle/borderedbutton",
        "html": "Deprecated\n\nUse menuStyle(_:) with button and buttonStyle(_:) with bordered.\n\nDiscussion\n\nOn macOS, the button displays an arrow indicating that it presents a menu.\n\nPressing and then dragging into the contents triggers the chosen action on release.\n\nSee Also\nGetting built-in menu styles\nstatic var automatic: DefaultMenuStyle\nThe default menu style, based on the menu\u2019s context.\nAvailable when Self is DefaultMenuStyle.\nstatic var button: ButtonMenuStyle\nA menu style that displays a button that toggles the display of the menu\u2019s contents when pressed.\nAvailable when Self is ButtonMenuStyle.\nstatic var borderlessButton: BorderlessButtonMenuStyle\nA menu style that displays a borderless button that toggles the display of the menu\u2019s contents when pressed.\nAvailable when Self is BorderlessButtonMenuStyle.\nDeprecated"
    },
    {
        "title": "interactiveSpring(response:dampingFraction:blendDuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/animation/interactivespring(response:dampingfraction:blendduration:)",
        "html": "See Also\nCustomizing spring animations\nstatic var spring: Animation\nA persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the response values between springs over a time period.\nstatic func spring(Spring, blendDuration: TimeInterval) -> Animation\nA persistent spring animation.\nstatic func spring(duration: TimeInterval, bounce: Double, blendDuration: Double) -> Animation\nA persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the duration values between springs over a time period.\nstatic func spring(response: Double, dampingFraction: Double, blendDuration: TimeInterval) -> Animation\nA persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the response values between springs over a time period.\nstatic var interactiveSpring: Animation\nA convenience for a spring animation with a lower duration value, intended for driving interactive animations.\nstatic var interpolatingSpring: Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation.\nstatic func interpolatingSpring(Spring, initialVelocity: Double) -> Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range of one to zero.\nstatic func interpolatingSpring(duration: TimeInterval, bounce: Double, initialVelocity: Double) -> Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation.\nstatic func interpolatingSpring(mass: Double, stiffness: Double, damping: Double, initialVelocity: Double) -> Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation."
    },
    {
        "title": "spring(_:blendDuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/animation/spring(_:blendduration:)",
        "html": "Discussion\n\nWhen mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the duration values between springs over a time period.\n\nSee Also\nCustomizing spring animations\nstatic var spring: Animation\nA persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the response values between springs over a time period.\nstatic func spring(duration: TimeInterval, bounce: Double, blendDuration: Double) -> Animation\nA persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the duration values between springs over a time period.\nstatic func spring(response: Double, dampingFraction: Double, blendDuration: TimeInterval) -> Animation\nA persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the response values between springs over a time period.\nstatic var interactiveSpring: Animation\nA convenience for a spring animation with a lower duration value, intended for driving interactive animations.\nstatic func interactiveSpring(response: Double, dampingFraction: Double, blendDuration: TimeInterval) -> Animation\nA convenience for a spring animation with a lower response value, intended for driving interactive animations.\nstatic var interpolatingSpring: Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation.\nstatic func interpolatingSpring(Spring, initialVelocity: Double) -> Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range of one to zero.\nstatic func interpolatingSpring(duration: TimeInterval, bounce: Double, initialVelocity: Double) -> Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation.\nstatic func interpolatingSpring(mass: Double, stiffness: Double, damping: Double, initialVelocity: Double) -> Animation\nAn interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation."
    },
    {
        "title": "fill",
        "url": "https://developer.apple.com/documentation/swiftui/symbolvariants/fill-swift.type.property",
        "html": "Discussion\n\nUse this variant with a call to the symbolVariant(_:) modifier to draw filled symbols, for those symbols that have a filled variant:\n\nVStack(spacing: 20) {\n    HStack(spacing: 20) {\n        Image(systemName: \"flag\")\n        Image(systemName: \"heart\")\n        Image(systemName: \"bolt\")\n        Image(systemName: \"star\")\n    }\n    HStack(spacing: 20) {\n        Image(systemName: \"flag\")\n        Image(systemName: \"heart\")\n        Image(systemName: \"bolt\")\n        Image(systemName: \"star\")\n    }\n    .symbolVariant(.fill)\n}\n\n\nSee Also\nGetting symbol variants\nstatic let none: SymbolVariants\nNo variant for a symbol.\nstatic let circle: SymbolVariants\nA variant that encapsulates the symbol in a circle.\nstatic let square: SymbolVariants\nA variant that encapsulates the symbol in a square.\nstatic let rectangle: SymbolVariants\nA variant that encapsulates the symbol in a rectangle.\nstatic let slash: SymbolVariants\nA variant that draws a slash through the symbol."
    },
    {
        "title": "identity",
        "url": "https://developer.apple.com/documentation/swiftui/transition/identity",
        "html": "See Also\nGetting built-in transitions\nstatic func move(edge: Edge) -> Self\nReturns a transition that moves the view away, towards the specified edge of the view.\nAvailable when Self is MoveTransition.\nstatic func offset(CGSize) -> Self\nReturns a transition that offset the view by the specified amount.\nAvailable when Self is OffsetTransition.\nstatic func offset(x: CGFloat, y: CGFloat) -> Self\nReturns a transition that offset the view by the specified x and y values.\nAvailable when Self is OffsetTransition.\nstatic var opacity: OpacityTransition\nA transition from transparent to opaque on insertion, and from opaque to transparent on removal.\nAvailable when Self is OpacityTransition.\nstatic func push(from: Edge) -> Self\nCreates a transition that when added to a view will animate the view\u2019s insertion by moving it in from the specified edge while fading it in, and animate its removal by moving it out towards the opposite edge and fading it out.\nAvailable when Self is PushTransition.\nstatic var scale: ScaleTransition\nReturns a transition that scales the view.\nAvailable when Self is ScaleTransition.\nstatic func scale(Double, anchor: UnitPoint) -> Self\nReturns a transition that scales the view by the specified amount.\nAvailable when Self is ScaleTransition.\nstatic var slide: SlideTransition\nA transition that inserts by moving in from the leading edge, and removes by moving out towards the trailing edge.\nAvailable when Self is SlideTransition.\nstatic var symbolEffect: SymbolEffectTransition\nA transition that applies the default symbol effect transition to symbol images within the inserted or removed view hierarchy. Other views are unaffected by this transition.\nAvailable when Self is SymbolEffectTransition.\nstatic func symbolEffect<T>(T, options: SymbolEffectOptions) -> SymbolEffectTransition\nCreates a transition that applies the provided effect to symbol images within the inserted or removed view hierarchy. Other views are unaffected by this transition.\nAvailable when Self is SymbolEffectTransition."
    },
    {
        "title": "resizable(capInsets:resizingMode:)",
        "url": "https://developer.apple.com/documentation/swiftui/image/resizable(capinsets:resizingmode:)",
        "html": "Parameters\ncapInsets\n\nInset values that indicate a portion of the image that SwiftUI doesn\u2019t resize.\n\nresizingMode\n\nThe mode by which SwiftUI resizes the image.\n\nReturn Value\n\nAn image, with the new resizing behavior set."
    },
    {
        "title": "square",
        "url": "https://developer.apple.com/documentation/swiftui/symbolvariants/square-swift.type.property",
        "html": "Discussion\n\nUse this variant with a call to the symbolVariant(_:) modifier to draw symbols in a square, for those symbols that have a square variant:\n\nVStack(spacing: 20) {\n    HStack(spacing: 20) {\n        Image(systemName: \"flag\")\n        Image(systemName: \"heart\")\n        Image(systemName: \"bolt\")\n        Image(systemName: \"star\")\n    }\n    HStack(spacing: 20) {\n        Image(systemName: \"flag\")\n        Image(systemName: \"heart\")\n        Image(systemName: \"bolt\")\n        Image(systemName: \"star\")\n    }\n    .symbolVariant(.square)\n}\n\n\nSee Also\nGetting symbol variants\nstatic let none: SymbolVariants\nNo variant for a symbol.\nstatic let circle: SymbolVariants\nA variant that encapsulates the symbol in a circle.\nstatic let rectangle: SymbolVariants\nA variant that encapsulates the symbol in a rectangle.\nstatic let fill: SymbolVariants\nA variant that fills the symbol.\nstatic let slash: SymbolVariants\nA variant that draws a slash through the symbol."
    },
    {
        "title": "PushTransition",
        "url": "https://developer.apple.com/documentation/swiftui/pushtransition",
        "html": "Topics\nCreating the transition\ninit(edge: Edge)\nCreates a transition that animates a view by moving and fading it.\nvar edge: Edge\nThe edge from which the view will be animated in.\nRelationships\nConforms To\nTransition\nSee Also\nSupporting types\nstruct IdentityTransition\nA transition that returns the input view, unmodified, as the output view.\nstruct MoveTransition\nReturns a transition that moves the view away, towards the specified edge of the view.\nstruct OffsetTransition\nReturns a transition that offset the view by the specified amount.\nstruct OpacityTransition\nA transition from transparent to opaque on insertion, and from opaque to transparent on removal.\nstruct ScaleTransition\nReturns a transition that scales the view.\nstruct SlideTransition\nA transition that inserts by moving in from the leading edge, and removes by moving out towards the trailing edge."
    },
    {
        "title": "offset(x:y:)",
        "url": "https://developer.apple.com/documentation/swiftui/transition/offset(x:y:)",
        "html": "See Also\nGetting built-in transitions\nstatic var identity: IdentityTransition\nA transition that returns the input view, unmodified, as the output view.\nAvailable when Self is IdentityTransition.\nstatic func move(edge: Edge) -> Self\nReturns a transition that moves the view away, towards the specified edge of the view.\nAvailable when Self is MoveTransition.\nstatic func offset(CGSize) -> Self\nReturns a transition that offset the view by the specified amount.\nAvailable when Self is OffsetTransition.\nstatic var opacity: OpacityTransition\nA transition from transparent to opaque on insertion, and from opaque to transparent on removal.\nAvailable when Self is OpacityTransition.\nstatic func push(from: Edge) -> Self\nCreates a transition that when added to a view will animate the view\u2019s insertion by moving it in from the specified edge while fading it in, and animate its removal by moving it out towards the opposite edge and fading it out.\nAvailable when Self is PushTransition.\nstatic var scale: ScaleTransition\nReturns a transition that scales the view.\nAvailable when Self is ScaleTransition.\nstatic func scale(Double, anchor: UnitPoint) -> Self\nReturns a transition that scales the view by the specified amount.\nAvailable when Self is ScaleTransition.\nstatic var slide: SlideTransition\nA transition that inserts by moving in from the leading edge, and removes by moving out towards the trailing edge.\nAvailable when Self is SlideTransition.\nstatic var symbolEffect: SymbolEffectTransition\nA transition that applies the default symbol effect transition to symbol images within the inserted or removed view hierarchy. Other views are unaffected by this transition.\nAvailable when Self is SymbolEffectTransition.\nstatic func symbolEffect<T>(T, options: SymbolEffectOptions) -> SymbolEffectTransition\nCreates a transition that applies the provided effect to symbol images within the inserted or removed view hierarchy. Other views are unaffected by this transition.\nAvailable when Self is SymbolEffectTransition."
    },
    {
        "title": "Image.Orientation.left",
        "url": "https://developer.apple.com/documentation/swiftui/image/orientation/left",
        "html": "See Also\nGetting image orientations\ncase up\nA value that indicates the original pixel data matches the image\u2019s intended display orientation.\ncase down\nA value that indicates a 180\u00b0 rotation of the image from the orientation of its original pixel data.\ncase right\nA value that indicates a 90\u00b0 clockwise rotation of the image from the orientation of its original pixel data."
    },
    {
        "title": "Image.ResizingMode.stretch",
        "url": "https://developer.apple.com/documentation/swiftui/image/resizingmode/stretch",
        "html": "See Also\nGetting resizing modes\ncase tile\nA mode to repeat the image at its original size, as many times as necessary to fill the available space."
    },
    {
        "title": "scale(_:anchor:)",
        "url": "https://developer.apple.com/documentation/swiftui/transition/scale(_:anchor:)",
        "html": "See Also\nGetting built-in transitions\nstatic var identity: IdentityTransition\nA transition that returns the input view, unmodified, as the output view.\nAvailable when Self is IdentityTransition.\nstatic func move(edge: Edge) -> Self\nReturns a transition that moves the view away, towards the specified edge of the view.\nAvailable when Self is MoveTransition.\nstatic func offset(CGSize) -> Self\nReturns a transition that offset the view by the specified amount.\nAvailable when Self is OffsetTransition.\nstatic func offset(x: CGFloat, y: CGFloat) -> Self\nReturns a transition that offset the view by the specified x and y values.\nAvailable when Self is OffsetTransition.\nstatic var opacity: OpacityTransition\nA transition from transparent to opaque on insertion, and from opaque to transparent on removal.\nAvailable when Self is OpacityTransition.\nstatic func push(from: Edge) -> Self\nCreates a transition that when added to a view will animate the view\u2019s insertion by moving it in from the specified edge while fading it in, and animate its removal by moving it out towards the opposite edge and fading it out.\nAvailable when Self is PushTransition.\nstatic var scale: ScaleTransition\nReturns a transition that scales the view.\nAvailable when Self is ScaleTransition.\nstatic var slide: SlideTransition\nA transition that inserts by moving in from the leading edge, and removes by moving out towards the trailing edge.\nAvailable when Self is SlideTransition.\nstatic var symbolEffect: SymbolEffectTransition\nA transition that applies the default symbol effect transition to symbol images within the inserted or removed view hierarchy. Other views are unaffected by this transition.\nAvailable when Self is SymbolEffectTransition.\nstatic func symbolEffect<T>(T, options: SymbolEffectOptions) -> SymbolEffectTransition\nCreates a transition that applies the provided effect to symbol images within the inserted or removed view hierarchy. Other views are unaffected by this transition.\nAvailable when Self is SymbolEffectTransition."
    },
    {
        "title": "Image.Orientation.right",
        "url": "https://developer.apple.com/documentation/swiftui/image/orientation/right",
        "html": "See Also\nGetting image orientations\ncase up\nA value that indicates the original pixel data matches the image\u2019s intended display orientation.\ncase down\nA value that indicates a 180\u00b0 rotation of the image from the orientation of its original pixel data.\ncase left\nA value that indicates a 90\u00b0 counterclockwise rotation from the orientation of its original pixel data."
    },
    {
        "title": "init(url:scale:transaction:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/asyncimage/init(url:scale:transaction:content:)",
        "html": "Parameters\nurl\n\nThe URL of the image to display.\n\nscale\n\nThe scale to use for the image. The default is 1. Set a different value when loading images designed for higher resolution displays. For example, set a value of 2 for an image that you would name with the @2x suffix if stored in a file on disk.\n\ntransaction\n\nThe transaction to use when the phase changes.\n\ncontent\n\nA closure that takes the load phase as an input, and returns the view to display for the specified phase.\n\nDiscussion\n\nIf you set the asynchronous image\u2019s URL to nil, or after you set the URL to a value but before the load operation completes, the phase is AsyncImagePhase.empty. After the operation completes, the phase becomes either AsyncImagePhase.failure(_:) or AsyncImagePhase.success(_:). In the first case, the phase\u2019s error value indicates the reason for failure. In the second case, the phase\u2019s image property contains the loaded image. Use the phase to drive the output of the content closure, which defines the view\u2019s appearance:\n\nAsyncImage(url: URL(string: \"https://example.com/icon.png\")) { phase in\n    if let image = phase.image {\n        image // Displays the loaded image.\n    } else if phase.error != nil {\n        Color.red // Indicates an error.\n    } else {\n        Color.blue // Acts as a placeholder.\n    }\n}\n\n\nTo add transitions when you change the URL, apply an identifier to the AsyncImage."
    },
    {
        "title": "push(from:)",
        "url": "https://developer.apple.com/documentation/swiftui/transition/push(from:)",
        "html": "Parameters\nedge\n\nthe edge from which the view will be animated in.\n\nReturn Value\n\nA transition that animates a view by moving and fading it.\n\nSee Also\nGetting built-in transitions\nstatic var identity: IdentityTransition\nA transition that returns the input view, unmodified, as the output view.\nAvailable when Self is IdentityTransition.\nstatic func move(edge: Edge) -> Self\nReturns a transition that moves the view away, towards the specified edge of the view.\nAvailable when Self is MoveTransition.\nstatic func offset(CGSize) -> Self\nReturns a transition that offset the view by the specified amount.\nAvailable when Self is OffsetTransition.\nstatic func offset(x: CGFloat, y: CGFloat) -> Self\nReturns a transition that offset the view by the specified x and y values.\nAvailable when Self is OffsetTransition.\nstatic var opacity: OpacityTransition\nA transition from transparent to opaque on insertion, and from opaque to transparent on removal.\nAvailable when Self is OpacityTransition.\nstatic var scale: ScaleTransition\nReturns a transition that scales the view.\nAvailable when Self is ScaleTransition.\nstatic func scale(Double, anchor: UnitPoint) -> Self\nReturns a transition that scales the view by the specified amount.\nAvailable when Self is ScaleTransition.\nstatic var slide: SlideTransition\nA transition that inserts by moving in from the leading edge, and removes by moving out towards the trailing edge.\nAvailable when Self is SlideTransition.\nstatic var symbolEffect: SymbolEffectTransition\nA transition that applies the default symbol effect transition to symbol images within the inserted or removed view hierarchy. Other views are unaffected by this transition.\nAvailable when Self is SymbolEffectTransition.\nstatic func symbolEffect<T>(T, options: SymbolEffectOptions) -> SymbolEffectTransition\nCreates a transition that applies the provided effect to symbol images within the inserted or removed view hierarchy. Other views are unaffected by this transition.\nAvailable when Self is SymbolEffectTransition."
    },
    {
        "title": "Image.Orientation.down",
        "url": "https://developer.apple.com/documentation/swiftui/image/orientation/down",
        "html": "See Also\nGetting image orientations\ncase up\nA value that indicates the original pixel data matches the image\u2019s intended display orientation.\ncase left\nA value that indicates a 90\u00b0 counterclockwise rotation from the orientation of its original pixel data.\ncase right\nA value that indicates a 90\u00b0 clockwise rotation of the image from the orientation of its original pixel data."
    },
    {
        "title": "slide",
        "url": "https://developer.apple.com/documentation/swiftui/transition/slide",
        "html": "Discussion\n\nSee Also\n\nAnyTransition.move(edge:)\n\nSee Also\nGetting built-in transitions\nstatic var identity: IdentityTransition\nA transition that returns the input view, unmodified, as the output view.\nAvailable when Self is IdentityTransition.\nstatic func move(edge: Edge) -> Self\nReturns a transition that moves the view away, towards the specified edge of the view.\nAvailable when Self is MoveTransition.\nstatic func offset(CGSize) -> Self\nReturns a transition that offset the view by the specified amount.\nAvailable when Self is OffsetTransition.\nstatic func offset(x: CGFloat, y: CGFloat) -> Self\nReturns a transition that offset the view by the specified x and y values.\nAvailable when Self is OffsetTransition.\nstatic var opacity: OpacityTransition\nA transition from transparent to opaque on insertion, and from opaque to transparent on removal.\nAvailable when Self is OpacityTransition.\nstatic func push(from: Edge) -> Self\nCreates a transition that when added to a view will animate the view\u2019s insertion by moving it in from the specified edge while fading it in, and animate its removal by moving it out towards the opposite edge and fading it out.\nAvailable when Self is PushTransition.\nstatic var scale: ScaleTransition\nReturns a transition that scales the view.\nAvailable when Self is ScaleTransition.\nstatic func scale(Double, anchor: UnitPoint) -> Self\nReturns a transition that scales the view by the specified amount.\nAvailable when Self is ScaleTransition.\nstatic var symbolEffect: SymbolEffectTransition\nA transition that applies the default symbol effect transition to symbol images within the inserted or removed view hierarchy. Other views are unaffected by this transition.\nAvailable when Self is SymbolEffectTransition.\nstatic func symbolEffect<T>(T, options: SymbolEffectOptions) -> SymbolEffectTransition\nCreates a transition that applies the provided effect to symbol images within the inserted or removed view hierarchy. Other views are unaffected by this transition.\nAvailable when Self is SymbolEffectTransition."
    },
    {
        "title": "image",
        "url": "https://developer.apple.com/documentation/swiftui/asyncimagephase/image",
        "html": "Discussion\n\nIf this value isn\u2019t nil, the image load operation has finished, and you can use the image to update the view. You can use the image directly, or you can modify it in some way. For example, you can add a resizable(capInsets:resizingMode:) modifier to make the image resizable."
    },
    {
        "title": "AsyncImagePhase.success(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/asyncimagephase/success(_:)",
        "html": "See Also\nGetting load phases\ncase empty\nNo image is loaded.\ncase failure(Error)\nAn image failed to load with an error."
    },
    {
        "title": "AsyncImagePhase.empty",
        "url": "https://developer.apple.com/documentation/swiftui/asyncimagephase/empty",
        "html": "See Also\nGetting load phases\ncase success(Image)\nAn image succesfully loaded.\ncase failure(Error)\nAn image failed to load with an error."
    },
    {
        "title": "Image.Scale.medium",
        "url": "https://developer.apple.com/documentation/swiftui/image/scale/medium",
        "html": "See Also\nGetting image scales\ncase small\nA scale that produces small images.\ncase large\nA scale that produces large images."
    },
    {
        "title": "hasMotion",
        "url": "https://developer.apple.com/documentation/swiftui/transitionproperties/hasmotion",
        "html": "Discussion\n\nWhen this behavior is included in a transition, that transition will be replaced by opacity when Reduce Motion is enabled.\n\nDefaults to true.\n\nSee Also\nCreating the transition properties\ninit(hasMotion: Bool)"
    },
    {
        "title": "Image.Scale.large",
        "url": "https://developer.apple.com/documentation/swiftui/image/scale/large",
        "html": "See Also\nGetting image scales\ncase small\nA scale that produces small images.\ncase medium\nA scale that produces medium-sized images."
    },
    {
        "title": "Namespace.ID",
        "url": "https://developer.apple.com/documentation/swiftui/namespace/id",
        "html": "Relationships\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nGetting the namespace\nvar wrappedValue: Namespace.ID"
    },
    {
        "title": "Body",
        "url": "https://developer.apple.com/documentation/swiftui/labeledcontentstyle/body",
        "html": "Required\n\nSee Also\nCreating custom labeled content styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view that represents the body of labeled content.\n\nRequired\n\ntypealias Configuration\nThe properties of a labeled content instance."
    },
    {
        "title": "wrappedValue",
        "url": "https://developer.apple.com/documentation/swiftui/namespace/wrappedvalue",
        "html": "See Also\nGetting the namespace\nstruct ID\nA namespace defined by the persistent identity of an @Namespace dynamic property."
    },
    {
        "title": "makeBody(configuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/labeledcontentstyle/makebody(configuration:)",
        "html": "Required\n\nSee Also\nCreating custom labeled content styles\ntypealias Configuration\nThe properties of a labeled content instance.\nassociatedtype Body : View\nA view that represents the appearance and behavior of labeled content.\n\nRequired"
    },
    {
        "title": "scale",
        "url": "https://developer.apple.com/documentation/swiftui/imagerenderer/scale",
        "html": "Discussion\n\nThis value is a ratio of view points to image pixels. This relationship means that values greater than 1.0 create an image larger than the original content view, and less than 1.0 creates a smaller image. The following example shows a 100 x 50 rectangle view and an image rendered from it with a scale of 2.0, resulting in an image size of 200 x 100.\n\nlet rectangle = Rectangle()\n    .frame(width: 100, height: 50)\nlet renderer = ImageRenderer(content: rectangle)\nrenderer.scale = 2.0\nif let rendered = renderer.cgImage {\n    print(\"Scaled image: \\(rendered.width) x \\(rendered.height)\")\n}\n// Prints \"Scaled image: 200 x 100\"\n\n\nThe default value of this property is 1.0.\n\nSee Also\nAccessing renderer properties\nvar proposedSize: ProposedViewSize\nThe size proposed to the root view.\nvar isOpaque: Bool\nA Boolean value that indicates whether the alpha channel of the image is fully opaque.\nvar colorMode: ColorRenderingMode\nThe working color space and storage format of the image."
    },
    {
        "title": "init(size:label:opaque:colorMode:renderer:)",
        "url": "https://developer.apple.com/documentation/swiftui/image/init(size:label:opaque:colormode:renderer:)",
        "html": "Parameters\nsize\n\nThe size of the newly-created image.\n\nlabel\n\nThe label associated with the image. SwiftUI uses the label for accessibility.\n\nopaque\n\nA Boolean value that indicates whether the image is fully opaque. This may improve performance when true. Don\u2019t render non-opaque pixels to an image declared as opaque. Defaults to false.\n\ncolorMode\n\nThe working color space and storage format of the image. Defaults to ColorRenderingMode.nonLinear.\n\nrenderer\n\nA closure to draw the contents of the image. The closure receives a GraphicsContext as its parameter.\n\nDiscussion\n\nUse this initializer to create an image by calling drawing commands on a GraphicsContext provided to the renderer closure.\n\nThe following example shows a custom image created by passing a GraphicContext to draw an ellipse and fill it with a gradient:\n\nlet mySize = CGSize(width: 300, height: 200)\nlet image = Image(size: mySize) { context in\n    context.fill(\n        Path(\n            ellipseIn: CGRect(origin: .zero, size: mySize)),\n            with: .linearGradient(\n                Gradient(colors: [.yellow, .orange]),\n                startPoint: .zero,\n                endPoint: CGPoint(x: mySize.width, y:mySize.height))\n    )\n}\n"
    },
    {
        "title": "LabeledContentStyle.Configuration",
        "url": "https://developer.apple.com/documentation/swiftui/labeledcontentstyle/configuration",
        "html": "See Also\nCreating custom labeled content styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view that represents the body of labeled content.\n\nRequired\n\nassociatedtype Body : View\nA view that represents the appearance and behavior of labeled content.\n\nRequired"
    },
    {
        "title": "init(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/imagerenderer/init(content:)",
        "html": "Parameters\nview\n\nA View to render."
    },
    {
        "title": "easeInOut",
        "url": "https://developer.apple.com/documentation/swiftui/animation/easeinout",
        "html": "Return Value\n\nAn ease-in ease-out animation with the default duration.\n\nDiscussion\n\nAn easing animation provides motion with a natural feel by varying the acceleration and deceleration of the animation, which matches how things tend to move in reality. An ease in and out animation starts slowly, increasing its speed towards the halfway point, and finally decreasing the speed towards the end of the animation.\n\nThe easeInOut animation has a default duration of 0.35 seconds. To specify the duration, use the easeInOut(duration:) method.\n\nThe following code shows an example of animating the size changes of a Circle using an ease in and out animation.\n\nstruct ContentView: View {\n    @State private var scale = 0.5\n\n\n    var body: some View {\n        VStack {\n            Circle()\n                .scale(scale)\n                .animation(.easeInOut, value: scale)\n            HStack {\n                Button(\"+\") { scale += 0.1 }\n                Button(\"-\") { scale -= 0.1 }\n            }\n        }\n    }\n}\n\nPlay\nSee Also\nGetting eased animations\nstatic var easeIn: Animation\nAn animation that starts slowly and then increases speed towards the end of the movement.\nstatic func easeIn(duration: TimeInterval) -> Animation\nAn animation with a specified duration that starts slowly and then increases speed towards the end of the movement.\nstatic var easeOut: Animation\nAn animation that starts quickly and then slows towards the end of the movement.\nstatic func easeOut(duration: TimeInterval) -> Animation\nAn animation with a specified duration that starts quickly and then slows towards the end of the movement.\nstatic func easeInOut(duration: TimeInterval) -> Animation\nAn animation with a specified duration that combines the behaviors of in and out easing animations."
    },
    {
        "title": "proposedSize",
        "url": "https://developer.apple.com/documentation/swiftui/imagerenderer/proposedsize",
        "html": "Discussion\n\nThe default value of this property, unspecified, produces an image that matches the original view size. You can provide a custom ProposedViewSize to override the view\u2019s size in one or both dimensions.\n\nSee Also\nAccessing renderer properties\nvar scale: CGFloat\nThe scale at which to render the image.\nvar isOpaque: Bool\nA Boolean value that indicates whether the alpha channel of the image is fully opaque.\nvar colorMode: ColorRenderingMode\nThe working color space and storage format of the image."
    },
    {
        "title": "AutomaticLabeledContentStyle",
        "url": "https://developer.apple.com/documentation/swiftui/automaticlabeledcontentstyle",
        "html": "Overview\n\nUse automatic to construct this style.\n\nTopics\nCreating the labeled content style\ninit()\nCreates an automatic labeled content style.\nRelationships\nConforms To\nLabeledContentStyle"
    },
    {
        "title": "easeOut",
        "url": "https://developer.apple.com/documentation/swiftui/animation/easeout",
        "html": "Return Value\n\nAn ease-out animation with the default duration.\n\nDiscussion\n\nAn easing animation provides motion with a natural feel by varying the acceleration and deceleration of the animation, which matches how things tend to move in reality. With an ease out animation, the motion starts quickly and decreases its speed towards the end.\n\nThe easeOut animation has a default duration of 0.35 seconds. To specify a different duration, use easeOut(duration:).\n\nThe following code shows an example of animating the size changes of a Circle using an ease out animation.\n\nstruct ContentView: View {\n    @State private var scale = 0.5\n\n\n    var body: some View {\n        VStack {\n            Circle()\n                .scale(scale)\n                .animation(.easeOut, value: scale)\n            HStack {\n                Button(\"+\") { scale += 0.1 }\n                Button(\"-\") { scale -= 0.1 }\n            }\n        }\n    }\n}\n\nPlay\nSee Also\nGetting eased animations\nstatic var easeIn: Animation\nAn animation that starts slowly and then increases speed towards the end of the movement.\nstatic func easeIn(duration: TimeInterval) -> Animation\nAn animation with a specified duration that starts slowly and then increases speed towards the end of the movement.\nstatic func easeOut(duration: TimeInterval) -> Animation\nAn animation with a specified duration that starts quickly and then slows towards the end of the movement.\nstatic var easeInOut: Animation\nAn animation that combines the behaviors of in and out easing animations.\nstatic func easeInOut(duration: TimeInterval) -> Animation\nAn animation with a specified duration that combines the behaviors of in and out easing animations."
    },
    {
        "title": "slash",
        "url": "https://developer.apple.com/documentation/swiftui/symbolvariants/slash-swift.property",
        "html": "Discussion\n\nUse this property to modify a shape variant like circle so that it\u2019s also covered by a slash:\n\nLabel(\"Circle Slash\", systemImage: \"flag\")\n    .symbolVariant(.circle.slash)\n\n\nSee Also\nModifying a variant\nvar circle: SymbolVariants\nA version of the variant that\u2019s encapsulated in a circle.\nvar square: SymbolVariants\nA version of the variant that\u2019s encapsulated in a square.\nvar rectangle: SymbolVariants\nA version of the variant that\u2019s encapsulated in a rectangle.\nvar fill: SymbolVariants\nA filled version of the variant."
    },
    {
        "title": "animation",
        "url": "https://developer.apple.com/documentation/swiftui/transaction/animation",
        "html": "See Also\nManaging animations\nvar disablesAnimations: Bool\nA Boolean value that indicates whether views should disable animations.\nfunc addAnimationCompletion(criteria: AnimationCompletionCriteria, () -> Void)\nAdds a completion to run when the animations created with this transaction are all complete."
    },
    {
        "title": "state",
        "url": "https://developer.apple.com/documentation/swiftui/animationcontext/state",
        "html": "Discussion\n\nAn instance of CustomAnimation uses this property to read and write state values as the animation runs.\n\nAn alternative to using the state property in a custom animation is to create an AnimationStateKey type and extend AnimationContext with a custom property that returns the state as a custom type. For example, the following code creates a state key named PausableState. It\u2019s convenient to store state values in the key type, so the PausableState structure includes properties for the stored state values paused and pauseTime.\n\nprivate struct PausableState<Value: VectorArithmetic>: AnimationStateKey {\n    var paused = false\n    var pauseTime: TimeInterval = 0.0\n\n\n    static var defaultValue: Self { .init() }\n}\n\n\nTo provide access the pausable state, the following code extends AnimationContext to include the pausableState property. This property returns an instance of the custom PausableState structure stored in state, and it can also store a new PausableState instance in state.\n\nextension AnimationContext {\n    fileprivate var pausableState: PausableState<Value> {\n        get { state[PausableState<Value>.self] }\n        set { state[PausableState<Value>.self] = newValue }\n    }\n}\n\n\nNow a custom animation can use the pausableState property instead of the state property as a convenient way to read and write state values as the animation runs.\n\nstruct PausableAnimation: CustomAnimation {\n    func animate<V>(value: V, time: TimeInterval, context: inout AnimationContext<V>) -> V? where V : VectorArithmetic {\n        let pausableState = context.pausableState\n        var pauseTime = pausableState.pauseTime\n        ...\n    }\n}\n"
    },
    {
        "title": "rectangle",
        "url": "https://developer.apple.com/documentation/swiftui/symbolvariants/rectangle-swift.type.property",
        "html": "Discussion\n\nUse this variant with a call to the symbolVariant(_:) modifier to draw symbols in a rectangle, for those symbols that have a rectangle variant:\n\nVStack(spacing: 20) {\n    HStack(spacing: 20) {\n        Image(systemName: \"plus\")\n        Image(systemName: \"minus\")\n        Image(systemName: \"xmark\")\n        Image(systemName: \"checkmark\")\n    }\n    HStack(spacing: 20) {\n        Image(systemName: \"plus\")\n        Image(systemName: \"minus\")\n        Image(systemName: \"xmark\")\n        Image(systemName: \"checkmark\")\n    }\n    .symbolVariant(.rectangle)\n}\n\n\nSee Also\nGetting symbol variants\nstatic let none: SymbolVariants\nNo variant for a symbol.\nstatic let circle: SymbolVariants\nA variant that encapsulates the symbol in a circle.\nstatic let square: SymbolVariants\nA variant that encapsulates the symbol in a square.\nstatic let fill: SymbolVariants\nA variant that fills the symbol.\nstatic let slash: SymbolVariants\nA variant that draws a slash through the symbol."
    },
    {
        "title": "easeIn",
        "url": "https://developer.apple.com/documentation/swiftui/animation/easein",
        "html": "Return Value\n\nAn ease-in animation with the default duration.\n\nDiscussion\n\nAn easing animation provides motion with a natural feel by varying the acceleration and deceleration of the animation, which matches how things tend to move in reality. With an ease in animation, the motion starts slowly and increases its speed towards the end.\n\nThe easeIn animation has a default duration of 0.35 seconds. To specify a different duration, use easeIn(duration:).\n\nThe following code shows an example of animating the size changes of a Circle using the ease in animation.\n\nstruct ContentView: View {\n    @State private var scale = 0.5\n\n\n    var body: some View {\n        VStack {\n            Circle()\n                .scale(scale)\n                .animation(.easeIn, value: scale)\n            HStack {\n                Button(\"+\") { scale += 0.1 }\n                Button(\"-\") { scale -= 0.1 }\n            }\n        }\n    }\n}\n\nPlay\nSee Also\nGetting eased animations\nstatic func easeIn(duration: TimeInterval) -> Animation\nAn animation with a specified duration that starts slowly and then increases speed towards the end of the movement.\nstatic var easeOut: Animation\nAn animation that starts quickly and then slows towards the end of the movement.\nstatic func easeOut(duration: TimeInterval) -> Animation\nAn animation with a specified duration that starts quickly and then slows towards the end of the movement.\nstatic var easeInOut: Animation\nAn animation that combines the behaviors of in and out easing animations.\nstatic func easeInOut(duration: TimeInterval) -> Animation\nAn animation with a specified duration that combines the behaviors of in and out easing animations."
    },
    {
        "title": "linear",
        "url": "https://developer.apple.com/documentation/swiftui/animation/linear",
        "html": "Return Value\n\nA linear animation with the default duration.\n\nDiscussion\n\nA linear animation provides a mechanical feel to the motion because its speed is consistent from start to finish of the animation. This constant speed makes a linear animation ideal for animating the movement of objects where changes in the speed might feel awkward, such as with an activity indicator.\n\nThe following code shows an example of using linear animation to animate the movement of a circle as it moves between the leading and trailing edges of the view. The circle also animates its color change as it moves across the view.\n\nstruct ContentView: View {\n    @State private var isActive = false\n\n\n    var body: some View {\n        VStack(alignment: isActive ? .trailing : .leading) {\n            Circle()\n                .fill(isActive ? Color.red : Color.blue)\n                .frame(width: 50, height: 50)\n\n\n            Button(\"Animate\") {\n                withAnimation(.linear) {\n                    isActive.toggle()\n                }\n            }\n            .frame(maxWidth: .infinity)\n        }\n    }\n}\n\nPlay\n\nThe linear animation has a default duration of 0.35 seconds. To specify a different duration, use linear(duration:).\n\nSee Also\nGetting linear animations\nstatic func linear(duration: TimeInterval) -> Animation\nAn animation that moves at a constant speed during a specified duration."
    },
    {
        "title": "linear(duration:)",
        "url": "https://developer.apple.com/documentation/swiftui/animation/linear(duration:)",
        "html": "Parameters\nduration\n\nThe length of time, expressed in seconds, that the animation takes to complete.\n\nReturn Value\n\nA linear animation with a specified duration.\n\nDiscussion\n\nA linear animation provides a mechanical feel to the motion because its speed is consistent from start to finish of the animation. This constant speed makes a linear animation ideal for animating the movement of objects where changes in the speed might feel awkward, such as with an activity indicator.\n\nUse linear(duration:) when you want to specify the time it takes for the animation to complete. Otherwise, use linear to perform the animation for a default length of time.\n\nThe following code shows an example of using linear animation with a duration of two seconds to animate the movement of a circle as it moves between the leading and trailing edges of the view. The color of the circle also animates from red to blue as it moves across the view.\n\nstruct ContentView: View {\n    @State private var isActive = false\n\n\n    var body: some View {\n        VStack(alignment: isActive ? .trailing : .leading) {\n            Circle()\n                .fill(isActive ? Color.red : Color.blue)\n                .frame(width: 50, height: 50)\n\n\n            Button(\"Animate\") {\n                withAnimation(.linear(duration: 2.0)) {\n                    isActive.toggle()\n                }\n            }\n            .frame(maxWidth: .infinity)\n        }\n    }\n}\n\nPlay\nSee Also\nGetting linear animations\nstatic var linear: Animation\nAn animation that moves at a constant speed."
    },
    {
        "title": "bouncy",
        "url": "https://developer.apple.com/documentation/swiftui/animation/bouncy",
        "html": "See Also\nGetting built-in spring animations\nstatic func bouncy(duration: TimeInterval, extraBounce: Double) -> Animation\nA spring animation with a predefined duration and higher amount of bounce that can be tuned.\nstatic var smooth: Animation\nA smooth spring animation with a predefined duration and no bounce.\nstatic func smooth(duration: TimeInterval, extraBounce: Double) -> Animation\nA smooth spring animation with a predefined duration and no bounce that can be tuned.\nstatic var snappy: Animation\nA spring animation with a predefined duration and small amount of bounce that feels more snappy.\nstatic func snappy(duration: TimeInterval, extraBounce: Double) -> Animation\nA spring animation with a predefined duration and small amount of bounce that feels more snappy and can be tuned."
    },
    {
        "title": "fill",
        "url": "https://developer.apple.com/documentation/swiftui/symbolvariants/fill-swift.property",
        "html": "Discussion\n\nUse this property to modify a shape variant like circle so that it\u2019s also filled:\n\nLabel(\"Circle Fill\", systemImage: \"flag\")\n    .symbolVariant(.circle.fill)\n\n\nSee Also\nModifying a variant\nvar circle: SymbolVariants\nA version of the variant that\u2019s encapsulated in a circle.\nvar square: SymbolVariants\nA version of the variant that\u2019s encapsulated in a square.\nvar rectangle: SymbolVariants\nA version of the variant that\u2019s encapsulated in a rectangle.\nvar slash: SymbolVariants\nA slashed version of the variant."
    },
    {
        "title": "environment",
        "url": "https://developer.apple.com/documentation/swiftui/animationcontext/environment",
        "html": "Discussion\n\nAn instance of CustomAnimation uses this property to read environment values from the view that created the animation. To learn more about environment values including how to define custom environment values, see EnvironmentValues."
    },
    {
        "title": "shouldMerge(previous:value:time:context:)",
        "url": "https://developer.apple.com/documentation/swiftui/customanimation/shouldmerge(previous:value:time:context:)-7f4ts",
        "html": "Required Default implementation provided.\n\nParameters\nprevious\n\nThe previous running animation.\n\nvalue\n\nThe vector to animate towards.\n\ntime\n\nThe amount of time since the start of the previous animation.\n\ncontext\n\nAn instance of AnimationContext that provides access to state and the animation environment.\n\nReturn Value\n\nA Boolean value of true if the animation should merge with the previous animation; otherwise, false.\n\nDiscussion\n\nWhen a view creates a new animation on an animatable value that already has a running animation of the same animation type, the system calls the shouldMerge(previous:value:time:context:) method on the new instance to determine whether it can merge the two instance. Implement this method if the animation can merge with another instance. The default implementation returns false.\n\nIf shouldMerge(previous:value:time:context:) returns true, the system merges the new animation instance with the previous animation. The system provides to the new instance the state and elapsed time from the previous one. Then it removes the previous animation.\n\nIf this method returns false, the system doesn\u2019t merge the animation with the previous one. Instead, both animations run together and the system combines their results.\n\nIf your custom animation needs to maintain state between calls to the shouldMerge(previous:value:time:context:) method, store the state data in context. This makes the data available to the method next time the system calls it. To learn more, see AnimationContext.\n\nDefault Implementations\nCustomAnimation Implementations\nfunc shouldMerge<V>(previous: Animation, value: V, time: TimeInterval, context: inout AnimationContext<V>) -> Bool\nDetermines whether an instance of the animation can merge with other instance of the same type."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/animation/init(_:)",
        "html": "See Also\nCreating custom animations\nstatic func timingCurve(UnitCurve, duration: TimeInterval) -> Animation\nCreates a new animation with speed controlled by the given curve.\nstatic func timingCurve(Double, Double, Double, Double, duration: TimeInterval) -> Animation\nAn animation created from a cubic B\u00e9zier timing curve."
    },
    {
        "title": "contains(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/symbolvariants/contains(_:)",
        "html": "Parameters\nother\n\nA variant to look for in this variant.\n\nReturn Value\n\ntrue if this variant contains other; otherwise, false."
    },
    {
        "title": "circle",
        "url": "https://developer.apple.com/documentation/swiftui/symbolvariants/circle-swift.type.property",
        "html": "Discussion\n\nUse this variant with a call to the symbolVariant(_:) modifier to draw symbols in a circle, for those symbols that have a circle variant:\n\nVStack(spacing: 20) {\n    HStack(spacing: 20) {\n        Image(systemName: \"flag\")\n        Image(systemName: \"heart\")\n        Image(systemName: \"bolt\")\n        Image(systemName: \"star\")\n    }\n    HStack(spacing: 20) {\n        Image(systemName: \"flag\")\n        Image(systemName: \"heart\")\n        Image(systemName: \"bolt\")\n        Image(systemName: \"star\")\n    }\n    .symbolVariant(.circle)\n}\n\n\nSee Also\nGetting symbol variants\nstatic let none: SymbolVariants\nNo variant for a symbol.\nstatic let square: SymbolVariants\nA variant that encapsulates the symbol in a square.\nstatic let rectangle: SymbolVariants\nA variant that encapsulates the symbol in a rectangle.\nstatic let fill: SymbolVariants\nA variant that fills the symbol.\nstatic let slash: SymbolVariants\nA variant that draws a slash through the symbol."
    },
    {
        "title": "square",
        "url": "https://developer.apple.com/documentation/swiftui/symbolvariants/square-swift.property",
        "html": "Discussion\n\nUse this property to modify a variant like fill so that it\u2019s also contained in a square:\n\nLabel(\"Fill Square\", systemImage: \"star\")\n    .symbolVariant(.fill.square)\n\n\nSee Also\nModifying a variant\nvar circle: SymbolVariants\nA version of the variant that\u2019s encapsulated in a circle.\nvar rectangle: SymbolVariants\nA version of the variant that\u2019s encapsulated in a rectangle.\nvar fill: SymbolVariants\nA filled version of the variant.\nvar slash: SymbolVariants\nA slashed version of the variant."
    },
    {
        "title": "borderless",
        "url": "https://developer.apple.com/documentation/swiftui/primitivebuttonstyle/borderless",
        "html": "Discussion\n\nTo apply this style to a button, or to a view that contains buttons, use the buttonStyle(_:) modifier.\n\nOn tvOS, this button style adds a default hover effect to the first image of the button\u2019s content, if one exists. You can supply a different hover effect by using the hoverEffect(_:) modifier in the button\u2019s label.\n\nSee Also\nGetting built-in button styles\nstatic var automatic: DefaultButtonStyle\nThe default button style, based on the button\u2019s context.\nAvailable when Self is DefaultButtonStyle.\nstatic var accessoryBar: AccessoryBarButtonStyle\nA button style that is typically used in the context of an accessory toolbar (sometimes refererred to as a \u201cscope bar\u201d), for buttons that narrow the focus of a search or other operation.\nAvailable when Self is AccessoryBarButtonStyle.\nstatic var accessoryBarAction: AccessoryBarActionButtonStyle\nA button style that you use for extra actions in an accessory toolbar.\nAvailable when Self is AccessoryBarActionButtonStyle.\nstatic var bordered: BorderedButtonStyle\nA button style that applies standard border artwork based on the button\u2019s context.\nAvailable when Self is BorderedButtonStyle.\nstatic var borderedProminent: BorderedProminentButtonStyle\nA button style that applies standard border prominent artwork based on the button\u2019s context.\nAvailable when Self is BorderedProminentButtonStyle.\nstatic var card: CardButtonStyle\nA button style that doesn\u2019t pad the content, and applies a motion effect when a button has focus.\nAvailable when Self is CardButtonStyle.\nstatic var link: LinkButtonStyle\nA button style for buttons that emulate links.\nAvailable when Self is LinkButtonStyle.\nstatic var plain: PlainButtonStyle\nA button style that doesn\u2019t style or decorate its content while idle, but may apply a visual effect to indicate the pressed, focused, or enabled state of the button.\nAvailable when Self is PlainButtonStyle."
    },
    {
        "title": "colorMode",
        "url": "https://developer.apple.com/documentation/swiftui/imagerenderer/colormode",
        "html": "See Also\nAccessing renderer properties\nvar proposedSize: ProposedViewSize\nThe size proposed to the root view.\nvar scale: CGFloat\nThe scale at which to render the image.\nvar isOpaque: Bool\nA Boolean value that indicates whether the alpha channel of the image is fully opaque."
    },
    {
        "title": "objectWillChange",
        "url": "https://developer.apple.com/documentation/swiftui/imagerenderer/objectwillchange",
        "html": "Discussion\n\nThe renderer\u2019s ObjectWillChangePublisher publishes Void elements. Subscribers should interpret any event as indicating that the contents of the image may have changed."
    },
    {
        "title": "render(rasterizationScale:renderer:)",
        "url": "https://developer.apple.com/documentation/swiftui/imagerenderer/render(rasterizationscale:renderer:)",
        "html": "Parameters\nrasterizationScale\n\nThe scale factor for converting user interface points to pixels when rasterizing parts of the view that can\u2019t be represented as native Core Graphics drawing commands.\n\nrenderer\n\nThe closure that sets up the Core Graphics context and renders the view. This closure receives two parameters: the size of the view and a function that you invoke in the closure to render the view at the reported size. This function takes a CGContext parameter, and assumes a bottom-left coordinate space origin.\n\nDiscussion\n\nUse this method to rasterize the renderer\u2019s content to a CGContext you provide. The renderer closure receives two parameters: the current size of the view, and a function that renders the view to your CGContext. Implement the closure to provide a suitable CGContext, then invoke the function to render the content to that context.\n\nSee Also\nRendering images\nvar cgImage: CGImage?\nThe current contents of the view, rasterized as a Core Graphics image.\nvar nsImage: NSImage?\nThe current contents of the view, rasterized as an AppKit image.\nvar uiImage: UIImage?\nThe current contents of the view, rasterized as a UIKit image."
    },
    {
        "title": "nsImage",
        "url": "https://developer.apple.com/documentation/swiftui/imagerenderer/nsimage",
        "html": "Discussion\n\nThe renderer notifies its objectWillChange publisher when the contents of the image may have changed.\n\nSee Also\nRendering images\nfunc render(rasterizationScale: CGFloat, renderer: (CGSize, (CGContext) -> Void) -> Void)\nDraws the renderer\u2019s current contents to an arbitrary Core Graphics context.\nvar cgImage: CGImage?\nThe current contents of the view, rasterized as a Core Graphics image.\nvar uiImage: UIImage?\nThe current contents of the view, rasterized as a UIKit image."
    },
    {
        "title": "uiImage",
        "url": "https://developer.apple.com/documentation/swiftui/imagerenderer/uiimage",
        "html": "Discussion\n\nThe renderer notifies its objectWillChange publisher when the contents of the image may have changed.\n\nSee Also\nRendering images\nfunc render(rasterizationScale: CGFloat, renderer: (CGSize, (CGContext) -> Void) -> Void)\nDraws the renderer\u2019s current contents to an arbitrary Core Graphics context.\nvar cgImage: CGImage?\nThe current contents of the view, rasterized as a Core Graphics image.\nvar nsImage: NSImage?\nThe current contents of the view, rasterized as an AppKit image."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/tabviewstyle/automatic",
        "html": "See Also\nGetting built-in tab view styles\nstatic var carousel: CarouselTabViewStyle\nA style that implements the carousel interaction and appearance.\nAvailable when Self is CarouselTabViewStyle.\nDeprecated\nstatic var page: PageTabViewStyle\nA TabViewStyle that implements a paged scrolling TabView.\nAvailable when Self is PageTabViewStyle.\nstatic func page(indexDisplayMode: PageTabViewStyle.IndexDisplayMode) -> PageTabViewStyle\nA TabViewStyle that implements a paged scrolling TabView with an index display mode.\nAvailable when Self is PageTabViewStyle.\nstatic var verticalPage: VerticalPageTabViewStyle\nA TabViewStyle that implements the vertical page TabView interaction and appearance.\nAvailable when Self is VerticalPageTabViewStyle.\nstatic func verticalPage(transitionStyle: VerticalPageTabViewStyle.TransitionStyle) -> VerticalPageTabViewStyle\nA TabViewStyle that implements the vertical page TabView interaction and appearance, and performs the specified transition.\nAvailable when Self is VerticalPageTabViewStyle."
    },
    {
        "title": "content",
        "url": "https://developer.apple.com/documentation/swiftui/labeledcontentstyleconfiguration/content-swift.property",
        "html": "See Also\nConfiguring the content\nstruct Content\nA type-erased content of a labeled content instance."
    },
    {
        "title": "apply(content:phase:)",
        "url": "https://developer.apple.com/documentation/swiftui/transition/apply(content:phase:)",
        "html": "See Also\nUsing a transition\nfunc combined<T>(with: T) -> some Transition"
    },
    {
        "title": "page(indexDisplayMode:)",
        "url": "https://developer.apple.com/documentation/swiftui/tabviewstyle/page(indexdisplaymode:)",
        "html": "See Also\nGetting built-in tab view styles\nstatic var automatic: DefaultTabViewStyle\nThe default TabView style.\nAvailable when Self is DefaultTabViewStyle.\nstatic var carousel: CarouselTabViewStyle\nA style that implements the carousel interaction and appearance.\nAvailable when Self is CarouselTabViewStyle.\nDeprecated\nstatic var page: PageTabViewStyle\nA TabViewStyle that implements a paged scrolling TabView.\nAvailable when Self is PageTabViewStyle.\nstatic var verticalPage: VerticalPageTabViewStyle\nA TabViewStyle that implements the vertical page TabView interaction and appearance.\nAvailable when Self is VerticalPageTabViewStyle.\nstatic func verticalPage(transitionStyle: VerticalPageTabViewStyle.TransitionStyle) -> VerticalPageTabViewStyle\nA TabViewStyle that implements the vertical page TabView interaction and appearance, and performs the specified transition.\nAvailable when Self is VerticalPageTabViewStyle."
    },
    {
        "title": "carousel",
        "url": "https://developer.apple.com/documentation/swiftui/tabviewstyle/carousel",
        "html": "Deprecated\n\nUse verticalPage or verticalPage(transitionStyle:) instead.\n\nSee Also\nGetting built-in tab view styles\nstatic var automatic: DefaultTabViewStyle\nThe default TabView style.\nAvailable when Self is DefaultTabViewStyle.\nstatic var page: PageTabViewStyle\nA TabViewStyle that implements a paged scrolling TabView.\nAvailable when Self is PageTabViewStyle.\nstatic func page(indexDisplayMode: PageTabViewStyle.IndexDisplayMode) -> PageTabViewStyle\nA TabViewStyle that implements a paged scrolling TabView with an index display mode.\nAvailable when Self is PageTabViewStyle.\nstatic var verticalPage: VerticalPageTabViewStyle\nA TabViewStyle that implements the vertical page TabView interaction and appearance.\nAvailable when Self is VerticalPageTabViewStyle.\nstatic func verticalPage(transitionStyle: VerticalPageTabViewStyle.TransitionStyle) -> VerticalPageTabViewStyle\nA TabViewStyle that implements the vertical page TabView interaction and appearance, and performs the specified transition.\nAvailable when Self is VerticalPageTabViewStyle."
    },
    {
        "title": "PageTabViewStyle",
        "url": "https://developer.apple.com/documentation/swiftui/pagetabviewstyle",
        "html": "Overview\n\nYou can also use page or page(indexDisplayMode:) to construct this style.\n\nTopics\nCreating a page tab view style\ninit(indexDisplayMode: PageTabViewStyle.IndexDisplayMode)\nCreates a new PageTabViewStyle with an index display mode\nstruct IndexDisplayMode\nA style for displaying the page index view\nRelationships\nConforms To\nTabViewStyle\nSee Also\nSupporting types\nstruct DefaultTabViewStyle\nThe default TabView style.\nstruct CarouselTabViewStyle\nA style that implements the carousel interaction and appearance.\nDeprecated\nstruct VerticalPageTabViewStyle\nA TabViewStyle that implements the vertical TabView interaction and appearance."
    },
    {
        "title": "page",
        "url": "https://developer.apple.com/documentation/swiftui/tabviewstyle/page",
        "html": "See Also\nGetting built-in tab view styles\nstatic var automatic: DefaultTabViewStyle\nThe default TabView style.\nAvailable when Self is DefaultTabViewStyle.\nstatic var carousel: CarouselTabViewStyle\nA style that implements the carousel interaction and appearance.\nAvailable when Self is CarouselTabViewStyle.\nDeprecated\nstatic func page(indexDisplayMode: PageTabViewStyle.IndexDisplayMode) -> PageTabViewStyle\nA TabViewStyle that implements a paged scrolling TabView with an index display mode.\nAvailable when Self is PageTabViewStyle.\nstatic var verticalPage: VerticalPageTabViewStyle\nA TabViewStyle that implements the vertical page TabView interaction and appearance.\nAvailable when Self is VerticalPageTabViewStyle.\nstatic func verticalPage(transitionStyle: VerticalPageTabViewStyle.TransitionStyle) -> VerticalPageTabViewStyle\nA TabViewStyle that implements the vertical page TabView interaction and appearance, and performs the specified transition.\nAvailable when Self is VerticalPageTabViewStyle."
    },
    {
        "title": "CarouselTabViewStyle",
        "url": "https://developer.apple.com/documentation/swiftui/carouseltabviewstyle",
        "html": "Deprecated\n\nUse VerticalPageTabViewStyle instead.\n\nTopics\nCreating the tab view style\ninit()\nCreates a carousel table view style.\nRelationships\nConforms To\nTabViewStyle\nSee Also\nSupporting types\nstruct DefaultTabViewStyle\nThe default TabView style.\nstruct PageTabViewStyle\nA TabViewStyle that implements a paged scrolling TabView.\nstruct VerticalPageTabViewStyle\nA TabViewStyle that implements the vertical TabView interaction and appearance."
    },
    {
        "title": "Image.Orientation.rightMirrored",
        "url": "https://developer.apple.com/documentation/swiftui/image/orientation/rightmirrored",
        "html": "See Also\nGetting mirrored image orientation\ncase upMirrored\nA value that indicates a horizontal flip of the image from the orientation of its original pixel data.\ncase downMirrored\nA value that indicates a vertical flip of the image from the orientation of its original pixel data.\ncase leftMirrored\nA value that indicates a 90\u00b0 clockwise rotation and horizontal flip of the image from the orientation of its original pixel data."
    },
    {
        "title": "Image.Orientation.leftMirrored",
        "url": "https://developer.apple.com/documentation/swiftui/image/orientation/leftmirrored",
        "html": "See Also\nGetting mirrored image orientation\ncase upMirrored\nA value that indicates a horizontal flip of the image from the orientation of its original pixel data.\ncase downMirrored\nA value that indicates a vertical flip of the image from the orientation of its original pixel data.\ncase rightMirrored\nA value that indicates a 90\u00b0 counterclockwise rotation and horizontal flip from the orientation of its original pixel data."
    },
    {
        "title": "Image.Orientation.downMirrored",
        "url": "https://developer.apple.com/documentation/swiftui/image/orientation/downmirrored",
        "html": "See Also\nGetting mirrored image orientation\ncase upMirrored\nA value that indicates a horizontal flip of the image from the orientation of its original pixel data.\ncase leftMirrored\nA value that indicates a 90\u00b0 clockwise rotation and horizontal flip of the image from the orientation of its original pixel data.\ncase rightMirrored\nA value that indicates a 90\u00b0 counterclockwise rotation and horizontal flip from the orientation of its original pixel data."
    },
    {
        "title": "none",
        "url": "https://developer.apple.com/documentation/swiftui/symbolvariants/none",
        "html": "Discussion\n\nUsing this variant with the symbolVariant(_:) modifier doesn\u2019t have any effect. Instead, to show a symbol that ignores the current variant, directly set the symbolVariants environment value to none using the environment(_:_:) modifer:\n\nHStack {\n    Image(systemName: \"heart\")\n    Image(systemName: \"heart\")\n        .environment(\\.symbolVariants, .none)\n}\n.symbolVariant(.fill)\n\n\nSee Also\nGetting symbol variants\nstatic let circle: SymbolVariants\nA variant that encapsulates the symbol in a circle.\nstatic let square: SymbolVariants\nA variant that encapsulates the symbol in a square.\nstatic let rectangle: SymbolVariants\nA variant that encapsulates the symbol in a rectangle.\nstatic let fill: SymbolVariants\nA variant that fills the symbol.\nstatic let slash: SymbolVariants\nA variant that draws a slash through the symbol."
    },
    {
        "title": "Image.Orientation.up",
        "url": "https://developer.apple.com/documentation/swiftui/image/orientation/up",
        "html": "See Also\nGetting image orientations\ncase down\nA value that indicates a 180\u00b0 rotation of the image from the orientation of its original pixel data.\ncase left\nA value that indicates a 90\u00b0 counterclockwise rotation from the orientation of its original pixel data.\ncase right\nA value that indicates a 90\u00b0 clockwise rotation of the image from the orientation of its original pixel data."
    },
    {
        "title": "Image.Scale.small",
        "url": "https://developer.apple.com/documentation/swiftui/image/scale/small",
        "html": "See Also\nGetting image scales\ncase medium\nA scale that produces medium-sized images.\ncase large\nA scale that produces large images."
    },
    {
        "title": "init(url:scale:)",
        "url": "https://developer.apple.com/documentation/swiftui/asyncimage/init(url:scale:)",
        "html": "Parameters\nurl\n\nThe URL of the image to display.\n\nscale\n\nThe scale to use for the image. The default is 1. Set a different value when loading images designed for higher resolution displays. For example, set a value of 2 for an image that you would name with the @2x suffix if stored in a file on disk.\n\nDiscussion\n\nUntil the image loads, SwiftUI displays a default placeholder. When the load operation completes successfully, SwiftUI updates the view to show the loaded image. If the operation fails, SwiftUI continues to display the placeholder. The following example loads and displays an icon from an example server:\n\nAsyncImage(url: URL(string: \"https://example.com/icon.png\"))\n\n\nIf you want to customize the placeholder or apply image-specific modifiers \u2014 like resizable(capInsets:resizingMode:) \u2014 to the loaded image, use the init(url:scale:content:placeholder:) initializer instead.\n\nSee Also\nLoading an image\ninit<I, P>(url: URL?, scale: CGFloat, content: (Image) -> I, placeholder: () -> P)\nLoads and displays a modifiable image from the specified URL using a custom placeholder until the image loads."
    },
    {
        "title": "AsyncImagePhase.failure(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/asyncimagephase/failure(_:)",
        "html": "See Also\nGetting load phases\ncase empty\nNo image is loaded.\ncase success(Image)\nAn image succesfully loaded."
    },
    {
        "title": "offset(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/transition/offset(_:)",
        "html": "See Also\nGetting built-in transitions\nstatic var identity: IdentityTransition\nA transition that returns the input view, unmodified, as the output view.\nAvailable when Self is IdentityTransition.\nstatic func move(edge: Edge) -> Self\nReturns a transition that moves the view away, towards the specified edge of the view.\nAvailable when Self is MoveTransition.\nstatic func offset(x: CGFloat, y: CGFloat) -> Self\nReturns a transition that offset the view by the specified x and y values.\nAvailable when Self is OffsetTransition.\nstatic var opacity: OpacityTransition\nA transition from transparent to opaque on insertion, and from opaque to transparent on removal.\nAvailable when Self is OpacityTransition.\nstatic func push(from: Edge) -> Self\nCreates a transition that when added to a view will animate the view\u2019s insertion by moving it in from the specified edge while fading it in, and animate its removal by moving it out towards the opposite edge and fading it out.\nAvailable when Self is PushTransition.\nstatic var scale: ScaleTransition\nReturns a transition that scales the view.\nAvailable when Self is ScaleTransition.\nstatic func scale(Double, anchor: UnitPoint) -> Self\nReturns a transition that scales the view by the specified amount.\nAvailable when Self is ScaleTransition.\nstatic var slide: SlideTransition\nA transition that inserts by moving in from the leading edge, and removes by moving out towards the trailing edge.\nAvailable when Self is SlideTransition.\nstatic var symbolEffect: SymbolEffectTransition\nA transition that applies the default symbol effect transition to symbol images within the inserted or removed view hierarchy. Other views are unaffected by this transition.\nAvailable when Self is SymbolEffectTransition.\nstatic func symbolEffect<T>(T, options: SymbolEffectOptions) -> SymbolEffectTransition\nCreates a transition that applies the provided effect to symbol images within the inserted or removed view hierarchy. Other views are unaffected by this transition.\nAvailable when Self is SymbolEffectTransition."
    },
    {
        "title": "move(edge:)",
        "url": "https://developer.apple.com/documentation/swiftui/transition/move(edge:)",
        "html": "See Also\nGetting built-in transitions\nstatic var identity: IdentityTransition\nA transition that returns the input view, unmodified, as the output view.\nAvailable when Self is IdentityTransition.\nstatic func offset(CGSize) -> Self\nReturns a transition that offset the view by the specified amount.\nAvailable when Self is OffsetTransition.\nstatic func offset(x: CGFloat, y: CGFloat) -> Self\nReturns a transition that offset the view by the specified x and y values.\nAvailable when Self is OffsetTransition.\nstatic var opacity: OpacityTransition\nA transition from transparent to opaque on insertion, and from opaque to transparent on removal.\nAvailable when Self is OpacityTransition.\nstatic func push(from: Edge) -> Self\nCreates a transition that when added to a view will animate the view\u2019s insertion by moving it in from the specified edge while fading it in, and animate its removal by moving it out towards the opposite edge and fading it out.\nAvailable when Self is PushTransition.\nstatic var scale: ScaleTransition\nReturns a transition that scales the view.\nAvailable when Self is ScaleTransition.\nstatic func scale(Double, anchor: UnitPoint) -> Self\nReturns a transition that scales the view by the specified amount.\nAvailable when Self is ScaleTransition.\nstatic var slide: SlideTransition\nA transition that inserts by moving in from the leading edge, and removes by moving out towards the trailing edge.\nAvailable when Self is SlideTransition.\nstatic var symbolEffect: SymbolEffectTransition\nA transition that applies the default symbol effect transition to symbol images within the inserted or removed view hierarchy. Other views are unaffected by this transition.\nAvailable when Self is SymbolEffectTransition.\nstatic func symbolEffect<T>(T, options: SymbolEffectOptions) -> SymbolEffectTransition\nCreates a transition that applies the provided effect to symbol images within the inserted or removed view hierarchy. Other views are unaffected by this transition.\nAvailable when Self is SymbolEffectTransition."
    },
    {
        "title": "Image.ResizingMode.tile",
        "url": "https://developer.apple.com/documentation/swiftui/image/resizingmode/tile",
        "html": "See Also\nGetting resizing modes\ncase stretch\nA mode to enlarge or reduce the size of an image so that it fills the available space."
    },
    {
        "title": "symbolEffect(_:options:)",
        "url": "https://developer.apple.com/documentation/swiftui/transition/symboleffect(_:options:)",
        "html": "Parameters\neffect\n\nthe symbol effect value.\n\nReturn Value\n\na new transition.\n\nSee Also\nGetting built-in transitions\nstatic var identity: IdentityTransition\nA transition that returns the input view, unmodified, as the output view.\nAvailable when Self is IdentityTransition.\nstatic func move(edge: Edge) -> Self\nReturns a transition that moves the view away, towards the specified edge of the view.\nAvailable when Self is MoveTransition.\nstatic func offset(CGSize) -> Self\nReturns a transition that offset the view by the specified amount.\nAvailable when Self is OffsetTransition.\nstatic func offset(x: CGFloat, y: CGFloat) -> Self\nReturns a transition that offset the view by the specified x and y values.\nAvailable when Self is OffsetTransition.\nstatic var opacity: OpacityTransition\nA transition from transparent to opaque on insertion, and from opaque to transparent on removal.\nAvailable when Self is OpacityTransition.\nstatic func push(from: Edge) -> Self\nCreates a transition that when added to a view will animate the view\u2019s insertion by moving it in from the specified edge while fading it in, and animate its removal by moving it out towards the opposite edge and fading it out.\nAvailable when Self is PushTransition.\nstatic var scale: ScaleTransition\nReturns a transition that scales the view.\nAvailable when Self is ScaleTransition.\nstatic func scale(Double, anchor: UnitPoint) -> Self\nReturns a transition that scales the view by the specified amount.\nAvailable when Self is ScaleTransition.\nstatic var slide: SlideTransition\nA transition that inserts by moving in from the leading edge, and removes by moving out towards the trailing edge.\nAvailable when Self is SlideTransition.\nstatic var symbolEffect: SymbolEffectTransition\nA transition that applies the default symbol effect transition to symbol images within the inserted or removed view hierarchy. Other views are unaffected by this transition.\nAvailable when Self is SymbolEffectTransition."
    },
    {
        "title": "init(hasMotion:)",
        "url": "https://developer.apple.com/documentation/swiftui/transitionproperties/init(hasmotion:)",
        "html": "See Also\nCreating the transition properties\nvar hasMotion: Bool\nWhether the transition includes motion."
    },
    {
        "title": "properties",
        "url": "https://developer.apple.com/documentation/swiftui/transition/properties-5zij4",
        "html": "Required Default implementation provided.\n\nDiscussion\n\nDefaults to TransitionProperties().\n\nDefault Implementations\nTransition Implementations\nstatic var properties: TransitionProperties\nReturns the properties this transition type has.\nSee Also\nConfiguring a transition\nfunc animation(Animation?) -> some Transition\nAttaches an animation to this transition."
    },
    {
        "title": "symbolEffect",
        "url": "https://developer.apple.com/documentation/swiftui/transition/symboleffect",
        "html": "See Also\nGetting built-in transitions\nstatic var identity: IdentityTransition\nA transition that returns the input view, unmodified, as the output view.\nAvailable when Self is IdentityTransition.\nstatic func move(edge: Edge) -> Self\nReturns a transition that moves the view away, towards the specified edge of the view.\nAvailable when Self is MoveTransition.\nstatic func offset(CGSize) -> Self\nReturns a transition that offset the view by the specified amount.\nAvailable when Self is OffsetTransition.\nstatic func offset(x: CGFloat, y: CGFloat) -> Self\nReturns a transition that offset the view by the specified x and y values.\nAvailable when Self is OffsetTransition.\nstatic var opacity: OpacityTransition\nA transition from transparent to opaque on insertion, and from opaque to transparent on removal.\nAvailable when Self is OpacityTransition.\nstatic func push(from: Edge) -> Self\nCreates a transition that when added to a view will animate the view\u2019s insertion by moving it in from the specified edge while fading it in, and animate its removal by moving it out towards the opposite edge and fading it out.\nAvailable when Self is PushTransition.\nstatic var scale: ScaleTransition\nReturns a transition that scales the view.\nAvailable when Self is ScaleTransition.\nstatic func scale(Double, anchor: UnitPoint) -> Self\nReturns a transition that scales the view by the specified amount.\nAvailable when Self is ScaleTransition.\nstatic var slide: SlideTransition\nA transition that inserts by moving in from the leading edge, and removes by moving out towards the trailing edge.\nAvailable when Self is SlideTransition.\nstatic func symbolEffect<T>(T, options: SymbolEffectOptions) -> SymbolEffectTransition\nCreates a transition that applies the provided effect to symbol images within the inserted or removed view hierarchy. Other views are unaffected by this transition.\nAvailable when Self is SymbolEffectTransition."
    },
    {
        "title": "OffsetTransition",
        "url": "https://developer.apple.com/documentation/swiftui/offsettransition",
        "html": "Topics\nCreating the transition\ninit(CGSize)\nCreates a transition that offset the view by the specified amount.\nvar offset: CGSize\nThe amount to offset the view by.\nRelationships\nConforms To\nTransition\nSee Also\nSupporting types\nstruct IdentityTransition\nA transition that returns the input view, unmodified, as the output view.\nstruct MoveTransition\nReturns a transition that moves the view away, towards the specified edge of the view.\nstruct OpacityTransition\nA transition from transparent to opaque on insertion, and from opaque to transparent on removal.\nstruct PushTransition\nA transition that when added to a view will animate the view\u2019s insertion by moving it in from the specified edge while fading it in, and animate its removal by moving it out towards the opposite edge and fading it out.\nstruct ScaleTransition\nReturns a transition that scales the view.\nstruct SlideTransition\nA transition that inserts by moving in from the leading edge, and removes by moving out towards the trailing edge."
    },
    {
        "title": "combined(with:)",
        "url": "https://developer.apple.com/documentation/swiftui/transition/combined(with:)",
        "html": "See Also\nUsing a transition\nfunc apply<V>(content: V, phase: TransitionPhase) -> some View"
    },
    {
        "title": "animation(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/transition/animation(_:)",
        "html": "See Also\nConfiguring a transition\nstatic var properties: TransitionProperties\nReturns the properties this transition type has.\n\nRequired Default implementation provided."
    },
    {
        "title": "body(content:phase:)",
        "url": "https://developer.apple.com/documentation/swiftui/transition/body(content:phase:)",
        "html": "Required\n\nDiscussion\n\ncontent is a proxy for the view that will have the modifier represented by Self applied to it.\n\nSee Also\nCreating a custom transition\nassociatedtype Body : View\nThe type of view representing the body.\n\nRequired\n\ntypealias Content\nThe content view type passed to body()."
    },
    {
        "title": "OpacityTransition",
        "url": "https://developer.apple.com/documentation/swiftui/opacitytransition",
        "html": "Topics\nCreating the transition\ninit()\nRelationships\nConforms To\nTransition\nSee Also\nSupporting types\nstruct IdentityTransition\nA transition that returns the input view, unmodified, as the output view.\nstruct MoveTransition\nReturns a transition that moves the view away, towards the specified edge of the view.\nstruct OffsetTransition\nReturns a transition that offset the view by the specified amount.\nstruct PushTransition\nA transition that when added to a view will animate the view\u2019s insertion by moving it in from the specified edge while fading it in, and animate its removal by moving it out towards the opposite edge and fading it out.\nstruct ScaleTransition\nReturns a transition that scales the view.\nstruct SlideTransition\nA transition that inserts by moving in from the leading edge, and removes by moving out towards the trailing edge."
    },
    {
        "title": "ScaleTransition",
        "url": "https://developer.apple.com/documentation/swiftui/scaletransition",
        "html": "Topics\nCreating the transition\ninit(Double, anchor: UnitPoint)\nCreates a transition that scales the view by the specified amount.\nvar anchor: UnitPoint\nThe anchor point to scale the view around.\nvar scale: Double\nThe amount to scale the view by.\nRelationships\nConforms To\nTransition\nSee Also\nSupporting types\nstruct IdentityTransition\nA transition that returns the input view, unmodified, as the output view.\nstruct MoveTransition\nReturns a transition that moves the view away, towards the specified edge of the view.\nstruct OffsetTransition\nReturns a transition that offset the view by the specified amount.\nstruct OpacityTransition\nA transition from transparent to opaque on insertion, and from opaque to transparent on removal.\nstruct PushTransition\nA transition that when added to a view will animate the view\u2019s insertion by moving it in from the specified edge while fading it in, and animate its removal by moving it out towards the opposite edge and fading it out.\nstruct SlideTransition\nA transition that inserts by moving in from the leading edge, and removes by moving out towards the trailing edge."
    },
    {
        "title": "MoveTransition",
        "url": "https://developer.apple.com/documentation/swiftui/movetransition",
        "html": "Topics\nCreating the transition\ninit(edge: Edge)\nCreates a transition that moves the view away, towards the specified edge of the view.\nvar edge: Edge\nThe edge to move the view towards.\nRelationships\nConforms To\nTransition\nSee Also\nSupporting types\nstruct IdentityTransition\nA transition that returns the input view, unmodified, as the output view.\nstruct OffsetTransition\nReturns a transition that offset the view by the specified amount.\nstruct OpacityTransition\nA transition from transparent to opaque on insertion, and from opaque to transparent on removal.\nstruct PushTransition\nA transition that when added to a view will animate the view\u2019s insertion by moving it in from the specified edge while fading it in, and animate its removal by moving it out towards the opposite edge and fading it out.\nstruct ScaleTransition\nReturns a transition that scales the view.\nstruct SlideTransition\nA transition that inserts by moving in from the leading edge, and removes by moving out towards the trailing edge."
    },
    {
        "title": "IdentityTransition",
        "url": "https://developer.apple.com/documentation/swiftui/identitytransition",
        "html": "Topics\nCreating the transition\ninit()\nRelationships\nConforms To\nTransition\nSee Also\nSupporting types\nstruct MoveTransition\nReturns a transition that moves the view away, towards the specified edge of the view.\nstruct OffsetTransition\nReturns a transition that offset the view by the specified amount.\nstruct OpacityTransition\nA transition from transparent to opaque on insertion, and from opaque to transparent on removal.\nstruct PushTransition\nA transition that when added to a view will animate the view\u2019s insertion by moving it in from the specified edge while fading it in, and animate its removal by moving it out towards the opposite edge and fading it out.\nstruct ScaleTransition\nReturns a transition that scales the view.\nstruct SlideTransition\nA transition that inserts by moving in from the leading edge, and removes by moving out towards the trailing edge."
    },
    {
        "title": "Transition.Content",
        "url": "https://developer.apple.com/documentation/swiftui/transition/content",
        "html": "See Also\nCreating a custom transition\nfunc body(content: Self.Content, phase: TransitionPhase) -> Self.Body\nGets the current body of the caller.\n\nRequired\n\nassociatedtype Body : View\nThe type of view representing the body.\n\nRequired"
    },
    {
        "title": "Body",
        "url": "https://developer.apple.com/documentation/swiftui/transition/body",
        "html": "Required\n\nSee Also\nCreating a custom transition\nfunc body(content: Self.Content, phase: TransitionPhase) -> Self.Body\nGets the current body of the caller.\n\nRequired\n\ntypealias Content\nThe content view type passed to body()."
    },
    {
        "title": "removal",
        "url": "https://developer.apple.com/documentation/swiftui/asymmetrictransition/removal",
        "html": "See Also\nGetting transition properties\nvar insertion: Insertion\nThe Transition defining the insertion phase of self."
    },
    {
        "title": "insertion",
        "url": "https://developer.apple.com/documentation/swiftui/asymmetrictransition/insertion",
        "html": "See Also\nGetting transition properties\nvar removal: Removal\nThe Transition defining the removal phase of self."
    },
    {
        "title": "SlideTransition",
        "url": "https://developer.apple.com/documentation/swiftui/slidetransition",
        "html": "Overview\n\nSee Also\n\nMoveTransition\n\nTopics\nCreating the transition\ninit()\nRelationships\nConforms To\nTransition\nSee Also\nSupporting types\nstruct IdentityTransition\nA transition that returns the input view, unmodified, as the output view.\nstruct MoveTransition\nReturns a transition that moves the view away, towards the specified edge of the view.\nstruct OffsetTransition\nReturns a transition that offset the view by the specified amount.\nstruct OpacityTransition\nA transition from transparent to opaque on insertion, and from opaque to transparent on removal.\nstruct PushTransition\nA transition that when added to a view will animate the view\u2019s insertion by moving it in from the specified edge while fading it in, and animate its removal by moving it out towards the opposite edge and fading it out.\nstruct ScaleTransition\nReturns a transition that scales the view."
    },
    {
        "title": "frame",
        "url": "https://developer.apple.com/documentation/swiftui/matchedgeometryproperties/frame",
        "html": "See Also\nMatching properties\nstatic let position: MatchedGeometryProperties\nThe view\u2019s position, in window coordinates.\nstatic let size: MatchedGeometryProperties\nThe view\u2019s size, in local coordinates."
    },
    {
        "title": "ignoredByLayout()",
        "url": "https://developer.apple.com/documentation/swiftui/geometryeffect/ignoredbylayout()",
        "html": "Discussion\n\nUse this method to disable layout changes during transitions. The view ignores the transform returned by this method while the view is performing its layout calculations.\n\nSee Also\nApplying effects\nfunc effectValue(size: CGSize) -> ProjectionTransform\nReturns the current value of the effect.\n\nRequired"
    },
    {
        "title": "position",
        "url": "https://developer.apple.com/documentation/swiftui/matchedgeometryproperties/position",
        "html": "See Also\nMatching properties\nstatic let frame: MatchedGeometryProperties\nBoth the position and size properties.\nstatic let size: MatchedGeometryProperties\nThe view\u2019s size, in local coordinates."
    },
    {
        "title": "size",
        "url": "https://developer.apple.com/documentation/swiftui/matchedgeometryproperties/size",
        "html": "See Also\nMatching properties\nstatic let frame: MatchedGeometryProperties\nBoth the position and size properties.\nstatic let position: MatchedGeometryProperties\nThe view\u2019s position, in window coordinates."
    },
    {
        "title": "effectValue(size:)",
        "url": "https://developer.apple.com/documentation/swiftui/geometryeffect/effectvalue(size:)",
        "html": "Required\n\nSee Also\nApplying effects\nfunc ignoredByLayout() -> _IgnoredByLayoutEffect<Self>\nReturns an effect that produces the same geometry transform as this effect, but only applies the transform while rendering its view."
    },
    {
        "title": "Body",
        "url": "https://developer.apple.com/documentation/swiftui/buttonstyle/body",
        "html": "Required\n\nSee Also\nCustom button styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view that represents the body of a button.\n\nRequired\n\ntypealias Configuration\nThe properties of a button."
    },
    {
        "title": "role",
        "url": "https://developer.apple.com/documentation/swiftui/buttonstyleconfiguration/role",
        "html": "Discussion\n\nA value of nil means that the Button doesn\u2019t have an assigned role. If the button does have a role, use it to make adjustments to the button\u2019s appearance. The following example shows a custom style that uses bold text when the role is cancel, red text when the role is destructive, and adds no special styling otherwise:\n\nstruct MyButtonStyle: ButtonStyle {\n    func makeBody(configuration: Configuration) -> some View {\n        configuration.label\n            .font(\n                configuration.role == .cancel ? .title2.bold() : .title2)\n            .foregroundColor(\n                configuration.role == .destructive ? Color.red : nil)\n    }\n}\n\n\nYou can create one of each button using this style to see the effect:\n\nVStack(spacing: 20) {\n    Button(\"Cancel\", role: .cancel) {}\n    Button(\"Delete\", role: .destructive) {}\n    Button(\"Continue\") {}\n}\n.buttonStyle(MyButtonStyle())\n"
    },
    {
        "title": "AutomaticNavigationSplitViewStyle",
        "url": "https://developer.apple.com/documentation/swiftui/automaticnavigationsplitviewstyle",
        "html": "Overview\n\nUse automatic to construct this style.\n\nTopics\nCreating the navigation split view style\ninit()\nCreates an instance of the automatic navigation split view style.\nRelationships\nConforms To\nNavigationSplitViewStyle\nSee Also\nSupporting types\nstruct BalancedNavigationSplitViewStyle\nA navigation split style that reduces the size of the detail content to make room when showing the leading column or columns.\nstruct ProminentDetailNavigationSplitViewStyle\nA navigation split style that attempts to maintain the size of the detail content when hiding or showing the leading columns.\nstruct NavigationSplitViewStyleConfiguration\nThe properties of a navigation split view instance."
    },
    {
        "title": "balanced",
        "url": "https://developer.apple.com/documentation/swiftui/navigationsplitviewstyle/balanced",
        "html": "See Also\nCreating built-in styles\nstatic var automatic: AutomaticNavigationSplitViewStyle\nA navigation split style that resolves its appearance automatically based on the current context.\nAvailable when Self is AutomaticNavigationSplitViewStyle.\nstatic var prominentDetail: ProminentDetailNavigationSplitViewStyle\nA navigation split style that attempts to maintain the size of the detail content when hiding or showing the leading columns.\nAvailable when Self is ProminentDetailNavigationSplitViewStyle."
    },
    {
        "title": "prominentDetail",
        "url": "https://developer.apple.com/documentation/swiftui/navigationsplitviewstyle/prominentdetail",
        "html": "See Also\nCreating built-in styles\nstatic var automatic: AutomaticNavigationSplitViewStyle\nA navigation split style that resolves its appearance automatically based on the current context.\nAvailable when Self is AutomaticNavigationSplitViewStyle.\nstatic var balanced: BalancedNavigationSplitViewStyle\nA navigation split style that reduces the size of the detail content to make room when showing the leading column or columns.\nAvailable when Self is BalancedNavigationSplitViewStyle."
    },
    {
        "title": "makeBody(configuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/navigationsplitviewstyle/makebody(configuration:)",
        "html": "Required\n\nParameters\nconfiguration\n\nThe properties of the instance to create.\n\nDiscussion\n\nSwiftUI calls this method for each instance of NavigationSplitView, where this style is the current NavigationSplitViewStyle.\n\nSee Also\nCreating custom styles\ntypealias Configuration\nThe properties of a navigation split view instance.\nassociatedtype Body : View\nA view that represents the body of a navigation split view.\n\nRequired"
    },
    {
        "title": "ProminentDetailNavigationSplitViewStyle",
        "url": "https://developer.apple.com/documentation/swiftui/prominentdetailnavigationsplitviewstyle",
        "html": "Overview\n\nUse prominentDetail to construct this style.\n\nTopics\nCreating the navigation split view style\ninit()\nCreates an instance of ProminentDetailNavigationSplitViewStyle.\nRelationships\nConforms To\nNavigationSplitViewStyle\nSee Also\nSupporting types\nstruct AutomaticNavigationSplitViewStyle\nA navigation split style that resolves its appearance automatically based on the current context.\nstruct BalancedNavigationSplitViewStyle\nA navigation split style that reduces the size of the detail content to make room when showing the leading column or columns.\nstruct NavigationSplitViewStyleConfiguration\nThe properties of a navigation split view instance."
    },
    {
        "title": "NavigationSplitViewStyle.Configuration",
        "url": "https://developer.apple.com/documentation/swiftui/navigationsplitviewstyle/configuration",
        "html": "See Also\nCreating custom styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view that represents the body of a navigation split view.\n\nRequired\n\nassociatedtype Body : View\nA view that represents the body of a navigation split view.\n\nRequired"
    },
    {
        "title": "BalancedNavigationSplitViewStyle",
        "url": "https://developer.apple.com/documentation/swiftui/balancednavigationsplitviewstyle",
        "html": "Overview\n\nUse balanced to construct this style.\n\nTopics\nCreating the navigation split view style\ninit()\nCreates an instance of BalancedNavigationSplitViewStyle.\nRelationships\nConforms To\nNavigationSplitViewStyle\nSee Also\nSupporting types\nstruct AutomaticNavigationSplitViewStyle\nA navigation split style that resolves its appearance automatically based on the current context.\nstruct ProminentDetailNavigationSplitViewStyle\nA navigation split style that attempts to maintain the size of the detail content when hiding or showing the leading columns.\nstruct NavigationSplitViewStyleConfiguration\nThe properties of a navigation split view instance."
    },
    {
        "title": "grouped",
        "url": "https://developer.apple.com/documentation/swiftui/liststyle/grouped",
        "html": "Discussion\n\nOn iOS, the grouped list style displays a larger header and footer than the plain style, which visually distances the members of different sections.\n\nSee Also\nGetting built-in list styles\nstatic var automatic: DefaultListStyle\nThe list style that describes a platform\u2019s default behavior and appearance for a list.\nAvailable when Self is DefaultListStyle.\nstatic var bordered: BorderedListStyle\nThe list style that describes the behavior and appearance of a list with standard border.\nAvailable when Self is BorderedListStyle.\nstatic var carousel: CarouselListStyle\nThe carousel list style.\nAvailable when Self is CarouselListStyle.\nstatic var elliptical: EllipticalListStyle\nThe list style that describes the behavior and appearance of an elliptical list.\nAvailable when Self is EllipticalListStyle.\nstatic var inset: InsetListStyle\nThe list style that describes the behavior and appearance of an inset list.\nAvailable when Self is InsetListStyle.\nstatic var insetGrouped: InsetGroupedListStyle\nThe list style that describes the behavior and appearance of an inset grouped list.\nAvailable when Self is InsetGroupedListStyle.\nstatic var plain: PlainListStyle\nThe list style that describes the behavior and appearance of a plain list.\nAvailable when Self is PlainListStyle.\nstatic var sidebar: SidebarListStyle\nThe list style that describes the behavior and appearance of a sidebar list.\nAvailable when Self is SidebarListStyle."
    },
    {
        "title": "elliptical",
        "url": "https://developer.apple.com/documentation/swiftui/liststyle/elliptical",
        "html": "Discussion\n\nOn watchOS, the elliptical list style uses a transform for items rolling off the top or bottom of the list, as if on a rounded surface that faces the user.\n\nApple Watch Series 3 does not support this style and will instead fall back to using the plain style.\n\nSee Also\nGetting built-in list styles\nstatic var automatic: DefaultListStyle\nThe list style that describes a platform\u2019s default behavior and appearance for a list.\nAvailable when Self is DefaultListStyle.\nstatic var bordered: BorderedListStyle\nThe list style that describes the behavior and appearance of a list with standard border.\nAvailable when Self is BorderedListStyle.\nstatic var carousel: CarouselListStyle\nThe carousel list style.\nAvailable when Self is CarouselListStyle.\nstatic var grouped: GroupedListStyle\nThe list style that describes the behavior and appearance of a grouped list.\nAvailable when Self is GroupedListStyle.\nstatic var inset: InsetListStyle\nThe list style that describes the behavior and appearance of an inset list.\nAvailable when Self is InsetListStyle.\nstatic var insetGrouped: InsetGroupedListStyle\nThe list style that describes the behavior and appearance of an inset grouped list.\nAvailable when Self is InsetGroupedListStyle.\nstatic var plain: PlainListStyle\nThe list style that describes the behavior and appearance of a plain list.\nAvailable when Self is PlainListStyle.\nstatic var sidebar: SidebarListStyle\nThe list style that describes the behavior and appearance of a sidebar list.\nAvailable when Self is SidebarListStyle."
    },
    {
        "title": "NavigationSplitViewStyleConfiguration",
        "url": "https://developer.apple.com/documentation/swiftui/navigationsplitviewstyleconfiguration",
        "html": "See Also\nSupporting types\nstruct AutomaticNavigationSplitViewStyle\nA navigation split style that resolves its appearance automatically based on the current context.\nstruct BalancedNavigationSplitViewStyle\nA navigation split style that reduces the size of the detail content to make room when showing the leading column or columns.\nstruct ProminentDetailNavigationSplitViewStyle\nA navigation split style that attempts to maintain the size of the detail content when hiding or showing the leading columns."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/liststyle/automatic",
        "html": "See Also\nGetting built-in list styles\nstatic var bordered: BorderedListStyle\nThe list style that describes the behavior and appearance of a list with standard border.\nAvailable when Self is BorderedListStyle.\nstatic var carousel: CarouselListStyle\nThe carousel list style.\nAvailable when Self is CarouselListStyle.\nstatic var elliptical: EllipticalListStyle\nThe list style that describes the behavior and appearance of an elliptical list.\nAvailable when Self is EllipticalListStyle.\nstatic var grouped: GroupedListStyle\nThe list style that describes the behavior and appearance of a grouped list.\nAvailable when Self is GroupedListStyle.\nstatic var inset: InsetListStyle\nThe list style that describes the behavior and appearance of an inset list.\nAvailable when Self is InsetListStyle.\nstatic var insetGrouped: InsetGroupedListStyle\nThe list style that describes the behavior and appearance of an inset grouped list.\nAvailable when Self is InsetGroupedListStyle.\nstatic var plain: PlainListStyle\nThe list style that describes the behavior and appearance of a plain list.\nAvailable when Self is PlainListStyle.\nstatic var sidebar: SidebarListStyle\nThe list style that describes the behavior and appearance of a sidebar list.\nAvailable when Self is SidebarListStyle."
    },
    {
        "title": "carousel",
        "url": "https://developer.apple.com/documentation/swiftui/liststyle/carousel",
        "html": "See Also\nGetting built-in list styles\nstatic var automatic: DefaultListStyle\nThe list style that describes a platform\u2019s default behavior and appearance for a list.\nAvailable when Self is DefaultListStyle.\nstatic var bordered: BorderedListStyle\nThe list style that describes the behavior and appearance of a list with standard border.\nAvailable when Self is BorderedListStyle.\nstatic var elliptical: EllipticalListStyle\nThe list style that describes the behavior and appearance of an elliptical list.\nAvailable when Self is EllipticalListStyle.\nstatic var grouped: GroupedListStyle\nThe list style that describes the behavior and appearance of a grouped list.\nAvailable when Self is GroupedListStyle.\nstatic var inset: InsetListStyle\nThe list style that describes the behavior and appearance of an inset list.\nAvailable when Self is InsetListStyle.\nstatic var insetGrouped: InsetGroupedListStyle\nThe list style that describes the behavior and appearance of an inset grouped list.\nAvailable when Self is InsetGroupedListStyle.\nstatic var plain: PlainListStyle\nThe list style that describes the behavior and appearance of a plain list.\nAvailable when Self is PlainListStyle.\nstatic var sidebar: SidebarListStyle\nThe list style that describes the behavior and appearance of a sidebar list.\nAvailable when Self is SidebarListStyle."
    },
    {
        "title": "insetGrouped",
        "url": "https://developer.apple.com/documentation/swiftui/liststyle/insetgrouped",
        "html": "Discussion\n\nOn iOS, the inset grouped list style displays a continuous background color that extends from the section header, around both sides of list items in the section, and down to the section footer. This visually groups the items to a greater degree than either the inset or grouped styles do.\n\nSee Also\nGetting built-in list styles\nstatic var automatic: DefaultListStyle\nThe list style that describes a platform\u2019s default behavior and appearance for a list.\nAvailable when Self is DefaultListStyle.\nstatic var bordered: BorderedListStyle\nThe list style that describes the behavior and appearance of a list with standard border.\nAvailable when Self is BorderedListStyle.\nstatic var carousel: CarouselListStyle\nThe carousel list style.\nAvailable when Self is CarouselListStyle.\nstatic var elliptical: EllipticalListStyle\nThe list style that describes the behavior and appearance of an elliptical list.\nAvailable when Self is EllipticalListStyle.\nstatic var grouped: GroupedListStyle\nThe list style that describes the behavior and appearance of a grouped list.\nAvailable when Self is GroupedListStyle.\nstatic var inset: InsetListStyle\nThe list style that describes the behavior and appearance of an inset list.\nAvailable when Self is InsetListStyle.\nstatic var plain: PlainListStyle\nThe list style that describes the behavior and appearance of a plain list.\nAvailable when Self is PlainListStyle.\nstatic var sidebar: SidebarListStyle\nThe list style that describes the behavior and appearance of a sidebar list.\nAvailable when Self is SidebarListStyle."
    },
    {
        "title": "inset",
        "url": "https://developer.apple.com/documentation/swiftui/liststyle/inset",
        "html": "See Also\nGetting built-in list styles\nstatic var automatic: DefaultListStyle\nThe list style that describes a platform\u2019s default behavior and appearance for a list.\nAvailable when Self is DefaultListStyle.\nstatic var bordered: BorderedListStyle\nThe list style that describes the behavior and appearance of a list with standard border.\nAvailable when Self is BorderedListStyle.\nstatic var carousel: CarouselListStyle\nThe carousel list style.\nAvailable when Self is CarouselListStyle.\nstatic var elliptical: EllipticalListStyle\nThe list style that describes the behavior and appearance of an elliptical list.\nAvailable when Self is EllipticalListStyle.\nstatic var grouped: GroupedListStyle\nThe list style that describes the behavior and appearance of a grouped list.\nAvailable when Self is GroupedListStyle.\nstatic var insetGrouped: InsetGroupedListStyle\nThe list style that describes the behavior and appearance of an inset grouped list.\nAvailable when Self is InsetGroupedListStyle.\nstatic var plain: PlainListStyle\nThe list style that describes the behavior and appearance of a plain list.\nAvailable when Self is PlainListStyle.\nstatic var sidebar: SidebarListStyle\nThe list style that describes the behavior and appearance of a sidebar list.\nAvailable when Self is SidebarListStyle."
    },
    {
        "title": "plain",
        "url": "https://developer.apple.com/documentation/swiftui/liststyle/plain",
        "html": "See Also\nGetting built-in list styles\nstatic var automatic: DefaultListStyle\nThe list style that describes a platform\u2019s default behavior and appearance for a list.\nAvailable when Self is DefaultListStyle.\nstatic var bordered: BorderedListStyle\nThe list style that describes the behavior and appearance of a list with standard border.\nAvailable when Self is BorderedListStyle.\nstatic var carousel: CarouselListStyle\nThe carousel list style.\nAvailable when Self is CarouselListStyle.\nstatic var elliptical: EllipticalListStyle\nThe list style that describes the behavior and appearance of an elliptical list.\nAvailable when Self is EllipticalListStyle.\nstatic var grouped: GroupedListStyle\nThe list style that describes the behavior and appearance of a grouped list.\nAvailable when Self is GroupedListStyle.\nstatic var inset: InsetListStyle\nThe list style that describes the behavior and appearance of an inset list.\nAvailable when Self is InsetListStyle.\nstatic var insetGrouped: InsetGroupedListStyle\nThe list style that describes the behavior and appearance of an inset grouped list.\nAvailable when Self is InsetGroupedListStyle.\nstatic var sidebar: SidebarListStyle\nThe list style that describes the behavior and appearance of a sidebar list.\nAvailable when Self is SidebarListStyle."
    },
    {
        "title": "bordered(alternatesRowBackgrounds:)",
        "url": "https://developer.apple.com/documentation/swiftui/liststyle/bordered(alternatesrowbackgrounds:)",
        "html": "Deprecated\n\nUse the bordered style and add the alternatingRowBackgrounds(_:) view modifier instead.\n\nParameters\nalternatesRowBackgrounds\n\nWhether the rows should alternate their backgrounds to help visually distinguish them from each other.\n\nDiscussion\n\nBordered lists are expected to be inset from their outer containers, but do not have inset style rows or selection.\n\nSee Also\nDeprecated styles\nstatic func inset(alternatesRowBackgrounds: Bool) -> InsetListStyle\nThe list style that describes the behavior and appearance of an inset list with optional alternating row backgrounds.\nAvailable when Self is InsetListStyle.\nDeprecated"
    },
    {
        "title": "DefaultListStyle",
        "url": "https://developer.apple.com/documentation/swiftui/defaultliststyle",
        "html": "Overview\n\nYou can also use automatic to construct this style.\n\nTopics\nCreating the list style\ninit()\nCreates a default list style.\nRelationships\nConforms To\nListStyle\nSee Also\nSupporting types\nstruct BorderedListStyle\nThe list style that describes the behavior and appearance of a list with standard border.\nstruct CarouselListStyle\nThe carousel list style.\nstruct EllipticalListStyle\nThe list style that describes the behavior and appearance of an elliptical list.\nstruct GroupedListStyle\nThe list style that describes the behavior and appearance of a grouped list.\nstruct InsetListStyle\nThe list style that describes the behavior and appearance of an inset list.\nstruct InsetGroupedListStyle\nThe list style that describes the behavior and appearance of an inset grouped list.\nstruct PlainListStyle\nThe list style that describes the behavior and appearance of a plain list.\nstruct SidebarListStyle\nThe list style that describes the behavior and appearance of a sidebar list."
    },
    {
        "title": "EllipticalListStyle",
        "url": "https://developer.apple.com/documentation/swiftui/ellipticalliststyle",
        "html": "Overview\n\nYou can also use elliptical to construct this style.\n\nTopics\nCreating the list style\ninit()\nCreates an elliptical list style.\nRelationships\nConforms To\nListStyle\nSee Also\nSupporting types\nstruct DefaultListStyle\nThe list style that describes a platform\u2019s default behavior and appearance for a list.\nstruct BorderedListStyle\nThe list style that describes the behavior and appearance of a list with standard border.\nstruct CarouselListStyle\nThe carousel list style.\nstruct GroupedListStyle\nThe list style that describes the behavior and appearance of a grouped list.\nstruct InsetListStyle\nThe list style that describes the behavior and appearance of an inset list.\nstruct InsetGroupedListStyle\nThe list style that describes the behavior and appearance of an inset grouped list.\nstruct PlainListStyle\nThe list style that describes the behavior and appearance of a plain list.\nstruct SidebarListStyle\nThe list style that describes the behavior and appearance of a sidebar list."
    },
    {
        "title": "InsetListStyle",
        "url": "https://developer.apple.com/documentation/swiftui/insetliststyle",
        "html": "Overview\n\nYou can also use inset to construct this style.\n\nTopics\nCreating the list style\ninit()\nCreates an inset list style.\ninit(alternatesRowBackgrounds: Bool)\nCreates an inset list style with optional alternating row backgrounds.\nDeprecated\nRelationships\nConforms To\nListStyle\nSee Also\nSupporting types\nstruct DefaultListStyle\nThe list style that describes a platform\u2019s default behavior and appearance for a list.\nstruct BorderedListStyle\nThe list style that describes the behavior and appearance of a list with standard border.\nstruct CarouselListStyle\nThe carousel list style.\nstruct EllipticalListStyle\nThe list style that describes the behavior and appearance of an elliptical list.\nstruct GroupedListStyle\nThe list style that describes the behavior and appearance of a grouped list.\nstruct InsetGroupedListStyle\nThe list style that describes the behavior and appearance of an inset grouped list.\nstruct PlainListStyle\nThe list style that describes the behavior and appearance of a plain list.\nstruct SidebarListStyle\nThe list style that describes the behavior and appearance of a sidebar list."
    },
    {
        "title": "inset(alternatesRowBackgrounds:)",
        "url": "https://developer.apple.com/documentation/swiftui/liststyle/inset(alternatesrowbackgrounds:)",
        "html": "Deprecated\n\nUse the inset style and add the alternatingRowBackgrounds(_:) view modifier instead.\n\nParameters\nalternatesRowBackgrounds\n\nWhether the rows should alternate their backgrounds to help visually distinguish them from each other.\n\nSee Also\nDeprecated styles\nstatic func bordered(alternatesRowBackgrounds: Bool) -> BorderedListStyle\nThe list style that describes the behavior and appearance of a list with standard border.\nAvailable when Self is BorderedListStyle.\nDeprecated"
    },
    {
        "title": "CarouselListStyle",
        "url": "https://developer.apple.com/documentation/swiftui/carouselliststyle",
        "html": "Overview\n\nYou can also use carousel to construct this style.\n\nTopics\nCreating the list style\ninit()\nCreates a carousel list style.\nRelationships\nConforms To\nListStyle\nSee Also\nSupporting types\nstruct DefaultListStyle\nThe list style that describes a platform\u2019s default behavior and appearance for a list.\nstruct BorderedListStyle\nThe list style that describes the behavior and appearance of a list with standard border.\nstruct EllipticalListStyle\nThe list style that describes the behavior and appearance of an elliptical list.\nstruct GroupedListStyle\nThe list style that describes the behavior and appearance of a grouped list.\nstruct InsetListStyle\nThe list style that describes the behavior and appearance of an inset list.\nstruct InsetGroupedListStyle\nThe list style that describes the behavior and appearance of an inset grouped list.\nstruct PlainListStyle\nThe list style that describes the behavior and appearance of a plain list.\nstruct SidebarListStyle\nThe list style that describes the behavior and appearance of a sidebar list."
    },
    {
        "title": "BorderedListStyle",
        "url": "https://developer.apple.com/documentation/swiftui/borderedliststyle",
        "html": "Overview\n\nYou can also use bordered to construct this style.\n\nTopics\nCreating the list style\ninit()\nCreates a bordered list style.\ninit(alternatesRowBackgrounds: Bool)\nCreates a bordered list style with optional alternating row backgrounds.\nDeprecated\nRelationships\nConforms To\nListStyle\nSee Also\nSupporting types\nstruct DefaultListStyle\nThe list style that describes a platform\u2019s default behavior and appearance for a list.\nstruct CarouselListStyle\nThe carousel list style.\nstruct EllipticalListStyle\nThe list style that describes the behavior and appearance of an elliptical list.\nstruct GroupedListStyle\nThe list style that describes the behavior and appearance of a grouped list.\nstruct InsetListStyle\nThe list style that describes the behavior and appearance of an inset list.\nstruct InsetGroupedListStyle\nThe list style that describes the behavior and appearance of an inset grouped list.\nstruct PlainListStyle\nThe list style that describes the behavior and appearance of a plain list.\nstruct SidebarListStyle\nThe list style that describes the behavior and appearance of a sidebar list."
    },
    {
        "title": "GroupedListStyle",
        "url": "https://developer.apple.com/documentation/swiftui/groupedliststyle",
        "html": "Overview\n\nYou can also use grouped to construct this style.\n\nTopics\nCreating the list style\ninit()\nCreates a grouped list style.\nRelationships\nConforms To\nListStyle\nSee Also\nSupporting types\nstruct DefaultListStyle\nThe list style that describes a platform\u2019s default behavior and appearance for a list.\nstruct BorderedListStyle\nThe list style that describes the behavior and appearance of a list with standard border.\nstruct CarouselListStyle\nThe carousel list style.\nstruct EllipticalListStyle\nThe list style that describes the behavior and appearance of an elliptical list.\nstruct InsetListStyle\nThe list style that describes the behavior and appearance of an inset list.\nstruct InsetGroupedListStyle\nThe list style that describes the behavior and appearance of an inset grouped list.\nstruct PlainListStyle\nThe list style that describes the behavior and appearance of a plain list.\nstruct SidebarListStyle\nThe list style that describes the behavior and appearance of a sidebar list."
    },
    {
        "title": "InsetGroupedListStyle",
        "url": "https://developer.apple.com/documentation/swiftui/insetgroupedliststyle",
        "html": "Overview\n\nYou can also use insetGrouped to construct this style.\n\nTopics\nCreating the list style\ninit()\nCreates an inset grouped list style.\nRelationships\nConforms To\nListStyle\nSee Also\nSupporting types\nstruct DefaultListStyle\nThe list style that describes a platform\u2019s default behavior and appearance for a list.\nstruct BorderedListStyle\nThe list style that describes the behavior and appearance of a list with standard border.\nstruct CarouselListStyle\nThe carousel list style.\nstruct EllipticalListStyle\nThe list style that describes the behavior and appearance of an elliptical list.\nstruct GroupedListStyle\nThe list style that describes the behavior and appearance of a grouped list.\nstruct InsetListStyle\nThe list style that describes the behavior and appearance of an inset list.\nstruct PlainListStyle\nThe list style that describes the behavior and appearance of a plain list.\nstruct SidebarListStyle\nThe list style that describes the behavior and appearance of a sidebar list."
    },
    {
        "title": "bordered",
        "url": "https://developer.apple.com/documentation/swiftui/tablestyle/bordered",
        "html": "Discussion\n\nBordered tables are expected to be inset from their outer containers, but do not have inset style rows or selection.\n\nTo customize whether the rows of the table should alternate their backgrounds, use alternatingRowBackgrounds(_:).\n\nSee Also\nGetting built-in table styles\nstatic var automatic: AutomaticTableStyle\nThe default table style in the current context.\nAvailable when Self is AutomaticTableStyle.\nstatic var inset: InsetTableStyle\nThe table style that describes the behavior and appearance of a table with its content and selection inset from the table edges.\nAvailable when Self is InsetTableStyle."
    },
    {
        "title": "PlainListStyle",
        "url": "https://developer.apple.com/documentation/swiftui/plainliststyle",
        "html": "Overview\n\nYou can also use plain to construct this style.\n\nTopics\nCreating the list style\ninit()\nCreates a plain list style.\nRelationships\nConforms To\nListStyle\nSee Also\nSupporting types\nstruct DefaultListStyle\nThe list style that describes a platform\u2019s default behavior and appearance for a list.\nstruct BorderedListStyle\nThe list style that describes the behavior and appearance of a list with standard border.\nstruct CarouselListStyle\nThe carousel list style.\nstruct EllipticalListStyle\nThe list style that describes the behavior and appearance of an elliptical list.\nstruct GroupedListStyle\nThe list style that describes the behavior and appearance of a grouped list.\nstruct InsetListStyle\nThe list style that describes the behavior and appearance of an inset list.\nstruct InsetGroupedListStyle\nThe list style that describes the behavior and appearance of an inset grouped list.\nstruct SidebarListStyle\nThe list style that describes the behavior and appearance of a sidebar list."
    },
    {
        "title": "SidebarListStyle",
        "url": "https://developer.apple.com/documentation/swiftui/sidebarliststyle",
        "html": "Overview\n\nYou can also use sidebar to construct this style.\n\nTopics\nCreating the list style\ninit()\nCreates a sidebar list style.\nRelationships\nConforms To\nListStyle\nSee Also\nSupporting types\nstruct DefaultListStyle\nThe list style that describes a platform\u2019s default behavior and appearance for a list.\nstruct BorderedListStyle\nThe list style that describes the behavior and appearance of a list with standard border.\nstruct CarouselListStyle\nThe carousel list style.\nstruct EllipticalListStyle\nThe list style that describes the behavior and appearance of an elliptical list.\nstruct GroupedListStyle\nThe list style that describes the behavior and appearance of a grouped list.\nstruct InsetListStyle\nThe list style that describes the behavior and appearance of an inset list.\nstruct InsetGroupedListStyle\nThe list style that describes the behavior and appearance of an inset grouped list.\nstruct PlainListStyle\nThe list style that describes the behavior and appearance of a plain list."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/tablestyle/automatic",
        "html": "See Also\nGetting built-in table styles\nstatic var inset: InsetTableStyle\nThe table style that describes the behavior and appearance of a table with its content and selection inset from the table edges.\nAvailable when Self is InsetTableStyle.\nstatic var bordered: BorderedTableStyle\nThe table style that describes the behavior and appearance of a table with standard border.\nAvailable when Self is BorderedTableStyle."
    },
    {
        "title": "makeBody(configuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablestyle/makebody(configuration:)",
        "html": "Required\n\nParameters\nconfiguration\n\nThe properties of the table.\n\nDiscussion\n\nThe system calls this method for each Table instance in a view hierarchy where this style is the current table style.\n\nSee Also\nCreating custom table styles\ntypealias Configuration\nThe properties of a table.\nassociatedtype Body : View\nA view that represents the body of a table.\n\nRequired"
    },
    {
        "title": "MenuPickerStyle",
        "url": "https://developer.apple.com/documentation/swiftui/menupickerstyle",
        "html": "Overview\n\nYou can also use menu to construct this style.\n\nTopics\nCreating the picker style\ninit()\nCreates a menu picker style.\nRelationships\nConforms To\nPickerStyle\nSee Also\nSupporting types\nstruct DefaultPickerStyle\nThe default picker style, based on the picker\u2019s context.\nstruct InlinePickerStyle\nA PickerStyle where each option is displayed inline with other views in the current container.\nstruct NavigationLinkPickerStyle\nA picker style represented by a navigation link that presents the options by pushing a List-style picker view.\nstruct PalettePickerStyle\nA picker style that presents the options as a row of compact elements.\nstruct RadioGroupPickerStyle\nA picker style that presents the options as a group of radio buttons.\nstruct SegmentedPickerStyle\nA picker style that presents the options in a segmented control.\nstruct WheelPickerStyle\nA picker style that presents the options in a scrollable wheel that shows the selected option and a few neighboring options."
    },
    {
        "title": "inset",
        "url": "https://developer.apple.com/documentation/swiftui/tablestyle/inset",
        "html": "Discussion\n\nTo customize whether the rows of the table should alternate their backgrounds, use alternatingRowBackgrounds(_:).\n\nSee Also\nGetting built-in table styles\nstatic var automatic: AutomaticTableStyle\nThe default table style in the current context.\nAvailable when Self is AutomaticTableStyle.\nstatic var bordered: BorderedTableStyle\nThe table style that describes the behavior and appearance of a table with standard border.\nAvailable when Self is BorderedTableStyle."
    },
    {
        "title": "PalettePickerStyle",
        "url": "https://developer.apple.com/documentation/swiftui/palettepickerstyle",
        "html": "Overview\n\nYou can also use palette to construct this style.\n\nTopics\nCreating the picker style\ninit()\nCreates a palette picker style.\nRelationships\nConforms To\nPickerStyle\nSee Also\nSupporting types\nstruct DefaultPickerStyle\nThe default picker style, based on the picker\u2019s context.\nstruct InlinePickerStyle\nA PickerStyle where each option is displayed inline with other views in the current container.\nstruct MenuPickerStyle\nA picker style that presents the options as a menu when the user presses a button, or as a submenu when nested within a larger menu.\nstruct NavigationLinkPickerStyle\nA picker style represented by a navigation link that presents the options by pushing a List-style picker view.\nstruct RadioGroupPickerStyle\nA picker style that presents the options as a group of radio buttons.\nstruct SegmentedPickerStyle\nA picker style that presents the options in a segmented control.\nstruct WheelPickerStyle\nA picker style that presents the options in a scrollable wheel that shows the selected option and a few neighboring options."
    },
    {
        "title": "InlinePickerStyle",
        "url": "https://developer.apple.com/documentation/swiftui/inlinepickerstyle",
        "html": "Overview\n\nYou can also use inline to construct this style.\n\nTopics\nCreating the picker style\ninit()\nCreates an inline picker style.\nRelationships\nConforms To\nPickerStyle\nSee Also\nSupporting types\nstruct DefaultPickerStyle\nThe default picker style, based on the picker\u2019s context.\nstruct MenuPickerStyle\nA picker style that presents the options as a menu when the user presses a button, or as a submenu when nested within a larger menu.\nstruct NavigationLinkPickerStyle\nA picker style represented by a navigation link that presents the options by pushing a List-style picker view.\nstruct PalettePickerStyle\nA picker style that presents the options as a row of compact elements.\nstruct RadioGroupPickerStyle\nA picker style that presents the options as a group of radio buttons.\nstruct SegmentedPickerStyle\nA picker style that presents the options in a segmented control.\nstruct WheelPickerStyle\nA picker style that presents the options in a scrollable wheel that shows the selected option and a few neighboring options."
    },
    {
        "title": "plain",
        "url": "https://developer.apple.com/documentation/swiftui/primitivebuttonstyle/plain",
        "html": "Discussion\n\nTo apply this style to a button, or to a view that contains buttons, use the buttonStyle(_:) modifier.\n\nSee Also\nGetting built-in button styles\nstatic var automatic: DefaultButtonStyle\nThe default button style, based on the button\u2019s context.\nAvailable when Self is DefaultButtonStyle.\nstatic var accessoryBar: AccessoryBarButtonStyle\nA button style that is typically used in the context of an accessory toolbar (sometimes refererred to as a \u201cscope bar\u201d), for buttons that narrow the focus of a search or other operation.\nAvailable when Self is AccessoryBarButtonStyle.\nstatic var accessoryBarAction: AccessoryBarActionButtonStyle\nA button style that you use for extra actions in an accessory toolbar.\nAvailable when Self is AccessoryBarActionButtonStyle.\nstatic var bordered: BorderedButtonStyle\nA button style that applies standard border artwork based on the button\u2019s context.\nAvailable when Self is BorderedButtonStyle.\nstatic var borderedProminent: BorderedProminentButtonStyle\nA button style that applies standard border prominent artwork based on the button\u2019s context.\nAvailable when Self is BorderedProminentButtonStyle.\nstatic var borderless: BorderlessButtonStyle\nA button style that doesn\u2019t apply a border.\nAvailable when Self is BorderlessButtonStyle.\nstatic var card: CardButtonStyle\nA button style that doesn\u2019t pad the content, and applies a motion effect when a button has focus.\nAvailable when Self is CardButtonStyle.\nstatic var link: LinkButtonStyle\nA button style for buttons that emulate links.\nAvailable when Self is LinkButtonStyle."
    },
    {
        "title": "PopUpButtonPickerStyle",
        "url": "https://developer.apple.com/documentation/swiftui/popupbuttonpickerstyle",
        "html": "Deprecated\n\nUse MenuPickerStyle instead.\n\nOverview\n\nUse this style when there are more than five options. Consider using RadioGroupPickerStyle when there are fewer than five options.\n\nThe button itself indicates the selected option. You can include additional controls in the set of options, such as a button to customize the list of options.\n\nTo apply this style to a picker, or to a view that contains pickers, use the pickerStyle(_:) modifier.\n\nCreating the picker style\n\ninit()\n\nTopics\nInitializers\ninit()\nCreates a pop-up button picker style.\nRelationships\nConforms To\nPickerStyle"
    },
    {
        "title": "RadioGroupPickerStyle",
        "url": "https://developer.apple.com/documentation/swiftui/radiogrouppickerstyle",
        "html": "Overview\n\nYou can also use radioGroup to construct this style.\n\nTopics\nCreating the picker style\ninit()\nCreates a radio group picker style.\nRelationships\nConforms To\nPickerStyle\nSee Also\nSupporting types\nstruct DefaultPickerStyle\nThe default picker style, based on the picker\u2019s context.\nstruct InlinePickerStyle\nA PickerStyle where each option is displayed inline with other views in the current container.\nstruct MenuPickerStyle\nA picker style that presents the options as a menu when the user presses a button, or as a submenu when nested within a larger menu.\nstruct NavigationLinkPickerStyle\nA picker style represented by a navigation link that presents the options by pushing a List-style picker view.\nstruct PalettePickerStyle\nA picker style that presents the options as a row of compact elements.\nstruct SegmentedPickerStyle\nA picker style that presents the options in a segmented control.\nstruct WheelPickerStyle\nA picker style that presents the options in a scrollable wheel that shows the selected option and a few neighboring options."
    },
    {
        "title": "borderedProminent",
        "url": "https://developer.apple.com/documentation/swiftui/primitivebuttonstyle/borderedprominent",
        "html": "Discussion\n\nTo apply this style to a button, or to a view that contains buttons, use the buttonStyle(_:) modifier.\n\nSee Also\nGetting built-in button styles\nstatic var automatic: DefaultButtonStyle\nThe default button style, based on the button\u2019s context.\nAvailable when Self is DefaultButtonStyle.\nstatic var accessoryBar: AccessoryBarButtonStyle\nA button style that is typically used in the context of an accessory toolbar (sometimes refererred to as a \u201cscope bar\u201d), for buttons that narrow the focus of a search or other operation.\nAvailable when Self is AccessoryBarButtonStyle.\nstatic var accessoryBarAction: AccessoryBarActionButtonStyle\nA button style that you use for extra actions in an accessory toolbar.\nAvailable when Self is AccessoryBarActionButtonStyle.\nstatic var bordered: BorderedButtonStyle\nA button style that applies standard border artwork based on the button\u2019s context.\nAvailable when Self is BorderedButtonStyle.\nstatic var borderless: BorderlessButtonStyle\nA button style that doesn\u2019t apply a border.\nAvailable when Self is BorderlessButtonStyle.\nstatic var card: CardButtonStyle\nA button style that doesn\u2019t pad the content, and applies a motion effect when a button has focus.\nAvailable when Self is CardButtonStyle.\nstatic var link: LinkButtonStyle\nA button style for buttons that emulate links.\nAvailable when Self is LinkButtonStyle.\nstatic var plain: PlainButtonStyle\nA button style that doesn\u2019t style or decorate its content while idle, but may apply a visual effect to indicate the pressed, focused, or enabled state of the button.\nAvailable when Self is PlainButtonStyle."
    },
    {
        "title": "WheelPickerStyle",
        "url": "https://developer.apple.com/documentation/swiftui/wheelpickerstyle",
        "html": "Overview\n\nYou can also use wheel to construct this style.\n\nTopics\nCreating the picker style\ninit()\nSets the picker style to display an item wheel from which the user makes a selection.\nRelationships\nConforms To\nPickerStyle\nSee Also\nSupporting types\nstruct DefaultPickerStyle\nThe default picker style, based on the picker\u2019s context.\nstruct InlinePickerStyle\nA PickerStyle where each option is displayed inline with other views in the current container.\nstruct MenuPickerStyle\nA picker style that presents the options as a menu when the user presses a button, or as a submenu when nested within a larger menu.\nstruct NavigationLinkPickerStyle\nA picker style represented by a navigation link that presents the options by pushing a List-style picker view.\nstruct PalettePickerStyle\nA picker style that presents the options as a row of compact elements.\nstruct RadioGroupPickerStyle\nA picker style that presents the options as a group of radio buttons.\nstruct SegmentedPickerStyle\nA picker style that presents the options in a segmented control."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/primitivebuttonstyle/automatic",
        "html": "Discussion\n\nIf you create a button directly on a blank canvas, the style varies by platform. iOS uses the borderless button style by default, whereas macOS, tvOS, and watchOS use the bordered button style.\n\nIf you create a button inside a container, like a List, the style resolves to the recommended style for buttons inside that container for that specific platform.\n\nYou can override a button\u2019s style. To apply the default style to a button, or to a view that contains buttons, use the buttonStyle(_:) modifier.\n\nSee Also\nGetting built-in button styles\nstatic var accessoryBar: AccessoryBarButtonStyle\nA button style that is typically used in the context of an accessory toolbar (sometimes refererred to as a \u201cscope bar\u201d), for buttons that narrow the focus of a search or other operation.\nAvailable when Self is AccessoryBarButtonStyle.\nstatic var accessoryBarAction: AccessoryBarActionButtonStyle\nA button style that you use for extra actions in an accessory toolbar.\nAvailable when Self is AccessoryBarActionButtonStyle.\nstatic var bordered: BorderedButtonStyle\nA button style that applies standard border artwork based on the button\u2019s context.\nAvailable when Self is BorderedButtonStyle.\nstatic var borderedProminent: BorderedProminentButtonStyle\nA button style that applies standard border prominent artwork based on the button\u2019s context.\nAvailable when Self is BorderedProminentButtonStyle.\nstatic var borderless: BorderlessButtonStyle\nA button style that doesn\u2019t apply a border.\nAvailable when Self is BorderlessButtonStyle.\nstatic var card: CardButtonStyle\nA button style that doesn\u2019t pad the content, and applies a motion effect when a button has focus.\nAvailable when Self is CardButtonStyle.\nstatic var link: LinkButtonStyle\nA button style for buttons that emulate links.\nAvailable when Self is LinkButtonStyle.\nstatic var plain: PlainButtonStyle\nA button style that doesn\u2019t style or decorate its content while idle, but may apply a visual effect to indicate the pressed, focused, or enabled state of the button.\nAvailable when Self is PlainButtonStyle."
    },
    {
        "title": "wheel",
        "url": "https://developer.apple.com/documentation/swiftui/pickerstyle/wheel",
        "html": "Discussion\n\nBecause most options aren\u2019t visible, organize them in a predictable order, such as alphabetically.\n\nTo apply this style to a picker, or to a view that contains pickers, use the pickerStyle(_:) modifier.\n\nSee Also\nGetting built-in picker styles\nstatic var automatic: DefaultPickerStyle\nThe default picker style, based on the picker\u2019s context.\nAvailable when Self is DefaultPickerStyle.\nstatic var inline: InlinePickerStyle\nA PickerStyle where each option is displayed inline with other views in the current container.\nAvailable when Self is InlinePickerStyle.\nstatic var menu: MenuPickerStyle\nA picker style that presents the options as a menu when the user presses a button, or as a submenu when nested within a larger menu.\nAvailable when Self is MenuPickerStyle.\nstatic var navigationLink: NavigationLinkPickerStyle\nA picker style represented by a navigation link that presents the options by pushing a List-style picker view.\nAvailable when Self is NavigationLinkPickerStyle.\nstatic var palette: PalettePickerStyle\nA picker style that presents the options as a row of compact elements.\nAvailable when Self is PalettePickerStyle.\nstatic var radioGroup: RadioGroupPickerStyle\nA picker style that presents the options as a group of radio buttons.\nAvailable when Self is RadioGroupPickerStyle.\nstatic var segmented: SegmentedPickerStyle\nA picker style that presents the options in a segmented control.\nAvailable when Self is SegmentedPickerStyle."
    },
    {
        "title": "SegmentedPickerStyle",
        "url": "https://developer.apple.com/documentation/swiftui/segmentedpickerstyle",
        "html": "Overview\n\nYou can also use segmented to construct this style.\n\nTopics\nCreating the picker style\ninit()\nCreates a segmented picker style.\nRelationships\nConforms To\nPickerStyle\nSee Also\nSupporting types\nstruct DefaultPickerStyle\nThe default picker style, based on the picker\u2019s context.\nstruct InlinePickerStyle\nA PickerStyle where each option is displayed inline with other views in the current container.\nstruct MenuPickerStyle\nA picker style that presents the options as a menu when the user presses a button, or as a submenu when nested within a larger menu.\nstruct NavigationLinkPickerStyle\nA picker style represented by a navigation link that presents the options by pushing a List-style picker view.\nstruct PalettePickerStyle\nA picker style that presents the options as a row of compact elements.\nstruct RadioGroupPickerStyle\nA picker style that presents the options as a group of radio buttons.\nstruct WheelPickerStyle\nA picker style that presents the options in a scrollable wheel that shows the selected option and a few neighboring options."
    },
    {
        "title": "card",
        "url": "https://developer.apple.com/documentation/swiftui/primitivebuttonstyle/card",
        "html": "Discussion\n\nThis style doesn\u2019t apply padding to its contents, so images, text, and other content display edge-to-edge. A button with this style appears partially translucent. When the user focuses on a card button, the button animates up to a raised position with more opacity. This style also applies the standard background colors for unfocused and focused states in both light and dark mode.\n\nTo apply this style to a button, or to a view that contains buttons, use the buttonStyle(_:) modifier.\n\nSee Also\nGetting built-in button styles\nstatic var automatic: DefaultButtonStyle\nThe default button style, based on the button\u2019s context.\nAvailable when Self is DefaultButtonStyle.\nstatic var accessoryBar: AccessoryBarButtonStyle\nA button style that is typically used in the context of an accessory toolbar (sometimes refererred to as a \u201cscope bar\u201d), for buttons that narrow the focus of a search or other operation.\nAvailable when Self is AccessoryBarButtonStyle.\nstatic var accessoryBarAction: AccessoryBarActionButtonStyle\nA button style that you use for extra actions in an accessory toolbar.\nAvailable when Self is AccessoryBarActionButtonStyle.\nstatic var bordered: BorderedButtonStyle\nA button style that applies standard border artwork based on the button\u2019s context.\nAvailable when Self is BorderedButtonStyle.\nstatic var borderedProminent: BorderedProminentButtonStyle\nA button style that applies standard border prominent artwork based on the button\u2019s context.\nAvailable when Self is BorderedProminentButtonStyle.\nstatic var borderless: BorderlessButtonStyle\nA button style that doesn\u2019t apply a border.\nAvailable when Self is BorderlessButtonStyle.\nstatic var link: LinkButtonStyle\nA button style for buttons that emulate links.\nAvailable when Self is LinkButtonStyle.\nstatic var plain: PlainButtonStyle\nA button style that doesn\u2019t style or decorate its content while idle, but may apply a visual effect to indicate the pressed, focused, or enabled state of the button.\nAvailable when Self is PlainButtonStyle."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/controlgroupstyle/automatic",
        "html": "Discussion\n\nThe default control group style can vary by platform. By default, both platforms use a momentary segmented control style that\u2019s appropriate for the environment in which it is rendered.\n\nYou can override a control group\u2019s style. To apply the default style to a control group or to a view that contains a control group, use the controlGroupStyle(_:) modifier.\n\nSee Also\nGetting built-in control group styles\nstatic var compactMenu: CompactMenuControlGroupStyle\nA control group style that presents its content as a compact menu when the user presses the control, or as a submenu when nested within a larger menu.\nAvailable when Self is CompactMenuControlGroupStyle.\nstatic var menu: MenuControlGroupStyle\nA control group style that presents its content as a menu when the user presses the control, or as a submenu when nested within a larger menu.\nAvailable when Self is MenuControlGroupStyle.\nstatic var navigation: NavigationControlGroupStyle\nThe navigation control group style.\nAvailable when Self is NavigationControlGroupStyle.\nstatic var palette: PaletteControlGroupStyle\nA control group style that presents its content as a palette.\nAvailable when Self is PaletteControlGroupStyle."
    },
    {
        "title": "link",
        "url": "https://developer.apple.com/documentation/swiftui/primitivebuttonstyle/link",
        "html": "Discussion\n\nTo apply this style to a button, or to a view that contains buttons, use the buttonStyle(_:) modifier.\n\nSee Also\nGetting built-in button styles\nstatic var automatic: DefaultButtonStyle\nThe default button style, based on the button\u2019s context.\nAvailable when Self is DefaultButtonStyle.\nstatic var accessoryBar: AccessoryBarButtonStyle\nA button style that is typically used in the context of an accessory toolbar (sometimes refererred to as a \u201cscope bar\u201d), for buttons that narrow the focus of a search or other operation.\nAvailable when Self is AccessoryBarButtonStyle.\nstatic var accessoryBarAction: AccessoryBarActionButtonStyle\nA button style that you use for extra actions in an accessory toolbar.\nAvailable when Self is AccessoryBarActionButtonStyle.\nstatic var bordered: BorderedButtonStyle\nA button style that applies standard border artwork based on the button\u2019s context.\nAvailable when Self is BorderedButtonStyle.\nstatic var borderedProminent: BorderedProminentButtonStyle\nA button style that applies standard border prominent artwork based on the button\u2019s context.\nAvailable when Self is BorderedProminentButtonStyle.\nstatic var borderless: BorderlessButtonStyle\nA button style that doesn\u2019t apply a border.\nAvailable when Self is BorderlessButtonStyle.\nstatic var card: CardButtonStyle\nA button style that doesn\u2019t pad the content, and applies a motion effect when a button has focus.\nAvailable when Self is CardButtonStyle.\nstatic var plain: PlainButtonStyle\nA button style that doesn\u2019t style or decorate its content while idle, but may apply a visual effect to indicate the pressed, focused, or enabled state of the button.\nAvailable when Self is PlainButtonStyle."
    },
    {
        "title": "makeBody(configuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/primitivebuttonstyle/makebody(configuration:)",
        "html": "Required\n\nParameters\nconfiguration\n\nThe properties of the button.\n\nDiscussion\n\nThe system calls this method for each Button instance in a view hierarchy where this style is the current button style.\n\nSee Also\nCreating custom button styles\ntypealias Configuration\nThe properties of a button.\nassociatedtype Body : View\nA view that represents the body of a button.\n\nRequired"
    },
    {
        "title": "cgImage",
        "url": "https://developer.apple.com/documentation/swiftui/imagerenderer/cgimage",
        "html": "Discussion\n\nThe renderer notifies its objectWillChange publisher when the contents of the image may have changed.\n\nSee Also\nRendering images\nfunc render(rasterizationScale: CGFloat, renderer: (CGSize, (CGContext) -> Void) -> Void)\nDraws the renderer\u2019s current contents to an arbitrary Core Graphics context.\nvar nsImage: NSImage?\nThe current contents of the view, rasterized as an AppKit image.\nvar uiImage: UIImage?\nThe current contents of the view, rasterized as a UIKit image."
    },
    {
        "title": "label",
        "url": "https://developer.apple.com/documentation/swiftui/labeledcontentstyleconfiguration/label-swift.property",
        "html": "See Also\nConfiguring the label\nstruct Label\nA type-erased label of a labeled content instance."
    },
    {
        "title": "PrimitiveButtonStyle.Configuration",
        "url": "https://developer.apple.com/documentation/swiftui/primitivebuttonstyle/configuration",
        "html": "See Also\nCreating custom button styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view that represents the body of a button.\n\nRequired\n\nassociatedtype Body : View\nA view that represents the body of a button.\n\nRequired"
    },
    {
        "title": "Body",
        "url": "https://developer.apple.com/documentation/swiftui/primitivebuttonstyle/body",
        "html": "Required\n\nSee Also\nCreating custom button styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view that represents the body of a button.\n\nRequired\n\ntypealias Configuration\nThe properties of a button."
    },
    {
        "title": "verticalPage",
        "url": "https://developer.apple.com/documentation/swiftui/tabviewstyle/verticalpage",
        "html": "See Also\nGetting built-in tab view styles\nstatic var automatic: DefaultTabViewStyle\nThe default TabView style.\nAvailable when Self is DefaultTabViewStyle.\nstatic var carousel: CarouselTabViewStyle\nA style that implements the carousel interaction and appearance.\nAvailable when Self is CarouselTabViewStyle.\nDeprecated\nstatic var page: PageTabViewStyle\nA TabViewStyle that implements a paged scrolling TabView.\nAvailable when Self is PageTabViewStyle.\nstatic func page(indexDisplayMode: PageTabViewStyle.IndexDisplayMode) -> PageTabViewStyle\nA TabViewStyle that implements a paged scrolling TabView with an index display mode.\nAvailable when Self is PageTabViewStyle.\nstatic func verticalPage(transitionStyle: VerticalPageTabViewStyle.TransitionStyle) -> VerticalPageTabViewStyle\nA TabViewStyle that implements the vertical page TabView interaction and appearance, and performs the specified transition.\nAvailable when Self is VerticalPageTabViewStyle."
    },
    {
        "title": "DefaultTabViewStyle",
        "url": "https://developer.apple.com/documentation/swiftui/defaulttabviewstyle",
        "html": "Overview\n\nYou can also use automatic to construct this style.\n\nTopics\nCreating the tab view style\ninit()\nRelationships\nConforms To\nTabViewStyle\nSee Also\nSupporting types\nstruct CarouselTabViewStyle\nA style that implements the carousel interaction and appearance.\nDeprecated\nstruct PageTabViewStyle\nA TabViewStyle that implements a paged scrolling TabView.\nstruct VerticalPageTabViewStyle\nA TabViewStyle that implements the vertical TabView interaction and appearance."
    },
    {
        "title": "verticalPage(transitionStyle:)",
        "url": "https://developer.apple.com/documentation/swiftui/tabviewstyle/verticalpage(transitionstyle:)",
        "html": "See Also\nGetting built-in tab view styles\nstatic var automatic: DefaultTabViewStyle\nThe default TabView style.\nAvailable when Self is DefaultTabViewStyle.\nstatic var carousel: CarouselTabViewStyle\nA style that implements the carousel interaction and appearance.\nAvailable when Self is CarouselTabViewStyle.\nDeprecated\nstatic var page: PageTabViewStyle\nA TabViewStyle that implements a paged scrolling TabView.\nAvailable when Self is PageTabViewStyle.\nstatic func page(indexDisplayMode: PageTabViewStyle.IndexDisplayMode) -> PageTabViewStyle\nA TabViewStyle that implements a paged scrolling TabView with an index display mode.\nAvailable when Self is PageTabViewStyle.\nstatic var verticalPage: VerticalPageTabViewStyle\nA TabViewStyle that implements the vertical page TabView interaction and appearance.\nAvailable when Self is VerticalPageTabViewStyle."
    },
    {
        "title": "VerticalPageTabViewStyle",
        "url": "https://developer.apple.com/documentation/swiftui/verticalpagetabviewstyle",
        "html": "Overview\n\nYou can also use verticalPage to construct this style.\n\nTopics\nCreating the tab view style\ninit()\ninit(transitionStyle: VerticalPageTabViewStyle.TransitionStyle)\nCreates a new VerticalPageTabViewStyle with a transition style.\nstruct TransitionStyle\nA transition style used between tabs.\nRelationships\nConforms To\nTabViewStyle\nSee Also\nSupporting types\nstruct DefaultTabViewStyle\nThe default TabView style.\nstruct CarouselTabViewStyle\nA style that implements the carousel interaction and appearance.\nDeprecated\nstruct PageTabViewStyle\nA TabViewStyle that implements a paged scrolling TabView."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/navigationsplitviewstyle/automatic",
        "html": "See Also\nCreating built-in styles\nstatic var balanced: BalancedNavigationSplitViewStyle\nA navigation split style that reduces the size of the detail content to make room when showing the leading column or columns.\nAvailable when Self is BalancedNavigationSplitViewStyle.\nstatic var prominentDetail: ProminentDetailNavigationSplitViewStyle\nA navigation split style that attempts to maintain the size of the detail content when hiding or showing the leading columns.\nAvailable when Self is ProminentDetailNavigationSplitViewStyle."
    },
    {
        "title": "DynamicProperty Implementations",
        "url": "https://developer.apple.com/documentation/swiftui/fetchrequest/dynamicproperty-implementations",
        "html": "Topics\nInstance Methods\nfunc update()\nUpdates the fetched results.\nAvailable when Result conforms to NSFetchRequestResult."
    },
    {
        "title": "Body",
        "url": "https://developer.apple.com/documentation/swiftui/navigationsplitviewstyle/body",
        "html": "Required\n\nSee Also\nCreating custom styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view that represents the body of a navigation split view.\n\nRequired\n\ntypealias Configuration\nThe properties of a navigation split view instance."
    },
    {
        "title": "buildExpression(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/keyframetrackcontentbuilder/buildexpression(_:)",
        "html": "See Also\nBuilding keyframe track content\nstatic func buildArray([some KeyframeTrackContent<Value>]) -> some KeyframeTrackContent<Value>\nstatic func buildBlock() -> some KeyframeTrackContent<Value>\nstatic func buildEither<First, Second>(first: First) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildEither<First, Second>(second: Second) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildPartialBlock(accumulated: some KeyframeTrackContent<Value>, next: some KeyframeTrackContent<Value>) -> some KeyframeTrackContent<Value>\nstatic func buildPartialBlock<K>(first: K) -> K\nstruct Conditional\nA conditional result from the result builder.\nAvailable when Value conforms to Animatable."
    },
    {
        "title": "ColumnsFormStyle",
        "url": "https://developer.apple.com/documentation/swiftui/columnsformstyle",
        "html": "Overview\n\nUse the columns static variable to create this style:\n\nForm {\n   ...\n}\n.formStyle(.columns)\n\nTopics\nCreating the form style\ninit()\nA non-scrolling form style with a trailing aligned column of labels next to a leading aligned column of values.\nRelationships\nConforms To\nFormStyle\nSee Also\nSupporting types\nstruct AutomaticFormStyle\nThe default form style.\nstruct GroupedFormStyle\nA form style with grouped rows."
    },
    {
        "title": "TitleOnlyLabelStyle",
        "url": "https://developer.apple.com/documentation/swiftui/titleonlylabelstyle",
        "html": "Overview\n\nYou can also use titleOnly to construct this style.\n\nTopics\nCreating the label style\ninit()\nCreates a title-only label style.\nRelationships\nConforms To\nLabelStyle\nSee Also\nSupporting types\nstruct DefaultLabelStyle\nThe default label style in the current context.\nstruct IconOnlyLabelStyle\nA label style that only displays the icon of the label.\nstruct TitleAndIconLabelStyle\nA label style that shows both the title and icon of the label using a system-standard layout."
    },
    {
        "title": "label",
        "url": "https://developer.apple.com/documentation/swiftui/controlgroupstyleconfiguration/label-swift.property",
        "html": "See Also\nConfiguring the label\nstruct Label\nA type-erased label of a ControlGroup."
    },
    {
        "title": "content",
        "url": "https://developer.apple.com/documentation/swiftui/controlgroupstyleconfiguration/content-swift.property",
        "html": "See Also\nConfiguring the content\nstruct Content\nA type-erased content of a ControlGroup."
    },
    {
        "title": "AccessoryBarActionButtonStyle",
        "url": "https://developer.apple.com/documentation/swiftui/accessorybaractionbuttonstyle",
        "html": "Overview\n\nUse this style for buttons that perform extra actions relative to the accessory toolbar\u2019s main functions, like adding or editing filters. This style also affects other view types that you apply a button style to, like Toggle, Picker, and Menu instances.\n\nUse accessoryBarAction to construct this style.\n\nTopics\nCreating the button style\ninit()\nCreates an accessory toolbar action button style\nSupporting types\nfunc makeBody(configuration: AccessoryBarActionButtonStyle.Configuration) -> some View\nCreates a view that represents the body of a button.\nRelationships\nConforms To\nPrimitiveButtonStyle\nSee Also\nSupporting types\nstruct DefaultButtonStyle\nThe default button style, based on the button\u2019s context.\nstruct AccessoryBarButtonStyle\nA button style that you use for actions in an accessory toolbar that narrow the focus of a search or other operation.\nstruct BorderedButtonStyle\nA button style that applies standard border artwork based on the button\u2019s context.\nstruct BorderedProminentButtonStyle\nA button style that applies standard border prominent artwork based on the button\u2019s context.\nstruct BorderlessButtonStyle\nA button style that doesn\u2019t apply a border.\nstruct CardButtonStyle\nA button style that doesn\u2019t pad the content, and applies a motion effect when a button has focus.\nstruct LinkButtonStyle\nA button style for buttons that emulate links.\nstruct PlainButtonStyle\nA button style that doesn\u2019t style or decorate its content while idle, but may apply a visual effect to indicate the pressed, focused, or enabled state of the button."
    },
    {
        "title": "CardButtonStyle",
        "url": "https://developer.apple.com/documentation/swiftui/cardbuttonstyle",
        "html": "Overview\n\nYou can also use card to construct this style.\n\nTopics\nCreating the button style\ninit()\nCreates a style that doesn\u2019t pad a button\u2019s content and applies a motion effect to a focused button.\nSupporting types\nfunc makeBody(configuration: CardButtonStyle.Configuration) -> some View\nCreates a view that represents the body of a button.\nRelationships\nConforms To\nPrimitiveButtonStyle\nSee Also\nRelated Documentation\nclass TVCardView\nA view that responds to focus interaction with a motion effect it applies to all of its subviews.\nSupporting types\nstruct DefaultButtonStyle\nThe default button style, based on the button\u2019s context.\nstruct AccessoryBarButtonStyle\nA button style that you use for actions in an accessory toolbar that narrow the focus of a search or other operation.\nstruct AccessoryBarActionButtonStyle\nA button style that you use for extra actions in an accessory toolbar.\nstruct BorderedButtonStyle\nA button style that applies standard border artwork based on the button\u2019s context.\nstruct BorderedProminentButtonStyle\nA button style that applies standard border prominent artwork based on the button\u2019s context.\nstruct BorderlessButtonStyle\nA button style that doesn\u2019t apply a border.\nstruct LinkButtonStyle\nA button style for buttons that emulate links.\nstruct PlainButtonStyle\nA button style that doesn\u2019t style or decorate its content while idle, but may apply a visual effect to indicate the pressed, focused, or enabled state of the button."
    },
    {
        "title": "PlainButtonStyle",
        "url": "https://developer.apple.com/documentation/swiftui/plainbuttonstyle",
        "html": "Overview\n\nYou can also use plain to construct this style.\n\nTopics\nCreating the button style\ninit()\nCreates a plain button style.\nSupporting types\nfunc makeBody(configuration: PlainButtonStyle.Configuration) -> some View\nCreates a view that represents the body of a button.\nRelationships\nConforms To\nPrimitiveButtonStyle\nSee Also\nSupporting types\nstruct DefaultButtonStyle\nThe default button style, based on the button\u2019s context.\nstruct AccessoryBarButtonStyle\nA button style that you use for actions in an accessory toolbar that narrow the focus of a search or other operation.\nstruct AccessoryBarActionButtonStyle\nA button style that you use for extra actions in an accessory toolbar.\nstruct BorderedButtonStyle\nA button style that applies standard border artwork based on the button\u2019s context.\nstruct BorderedProminentButtonStyle\nA button style that applies standard border prominent artwork based on the button\u2019s context.\nstruct BorderlessButtonStyle\nA button style that doesn\u2019t apply a border.\nstruct CardButtonStyle\nA button style that doesn\u2019t pad the content, and applies a motion effect when a button has focus.\nstruct LinkButtonStyle\nA button style for buttons that emulate links."
    },
    {
        "title": "buildEither(second:)",
        "url": "https://developer.apple.com/documentation/swiftui/keyframetrackcontentbuilder/buildeither(second:)",
        "html": "See Also\nBuilding keyframe track content\nstatic func buildArray([some KeyframeTrackContent<Value>]) -> some KeyframeTrackContent<Value>\nstatic func buildBlock() -> some KeyframeTrackContent<Value>\nstatic func buildEither<First, Second>(first: First) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildExpression<K>(K) -> K\nstatic func buildPartialBlock(accumulated: some KeyframeTrackContent<Value>, next: some KeyframeTrackContent<Value>) -> some KeyframeTrackContent<Value>\nstatic func buildPartialBlock<K>(first: K) -> K\nstruct Conditional\nA conditional result from the result builder.\nAvailable when Value conforms to Animatable."
    },
    {
        "title": "makeBody(configuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/buttonstyle/makebody(configuration:)",
        "html": "Required\n\nParameters\nconfiguration\n\nThe properties of the button.\n\nDiscussion\n\nThe system calls this method for each Button instance in a view hierarchy where this style is the current button style.\n\nSee Also\nCustom button styles\ntypealias Configuration\nThe properties of a button.\nassociatedtype Body : View\nA view that represents the body of a button.\n\nRequired"
    },
    {
        "title": "bordered",
        "url": "https://developer.apple.com/documentation/swiftui/liststyle/bordered",
        "html": "Discussion\n\nBordered lists are expected to be inset from their outer containers, but do not have inset style rows or selection.\n\nTo customize whether the rows of the list should alternate their backgrounds, use bordered(alternatesRowBackgrounds:).\n\nSee Also\nGetting built-in list styles\nstatic var automatic: DefaultListStyle\nThe list style that describes a platform\u2019s default behavior and appearance for a list.\nAvailable when Self is DefaultListStyle.\nstatic var carousel: CarouselListStyle\nThe carousel list style.\nAvailable when Self is CarouselListStyle.\nstatic var elliptical: EllipticalListStyle\nThe list style that describes the behavior and appearance of an elliptical list.\nAvailable when Self is EllipticalListStyle.\nstatic var grouped: GroupedListStyle\nThe list style that describes the behavior and appearance of a grouped list.\nAvailable when Self is GroupedListStyle.\nstatic var inset: InsetListStyle\nThe list style that describes the behavior and appearance of an inset list.\nAvailable when Self is InsetListStyle.\nstatic var insetGrouped: InsetGroupedListStyle\nThe list style that describes the behavior and appearance of an inset grouped list.\nAvailable when Self is InsetGroupedListStyle.\nstatic var plain: PlainListStyle\nThe list style that describes the behavior and appearance of a plain list.\nAvailable when Self is PlainListStyle.\nstatic var sidebar: SidebarListStyle\nThe list style that describes the behavior and appearance of a sidebar list.\nAvailable when Self is SidebarListStyle."
    },
    {
        "title": "sidebar",
        "url": "https://developer.apple.com/documentation/swiftui/liststyle/sidebar",
        "html": "Discussion\n\nOn macOS and iOS, the sidebar list style displays disclosure indicators in the section headers that allow the user to collapse and expand sections.\n\nSee Also\nGetting built-in list styles\nstatic var automatic: DefaultListStyle\nThe list style that describes a platform\u2019s default behavior and appearance for a list.\nAvailable when Self is DefaultListStyle.\nstatic var bordered: BorderedListStyle\nThe list style that describes the behavior and appearance of a list with standard border.\nAvailable when Self is BorderedListStyle.\nstatic var carousel: CarouselListStyle\nThe carousel list style.\nAvailable when Self is CarouselListStyle.\nstatic var elliptical: EllipticalListStyle\nThe list style that describes the behavior and appearance of an elliptical list.\nAvailable when Self is EllipticalListStyle.\nstatic var grouped: GroupedListStyle\nThe list style that describes the behavior and appearance of a grouped list.\nAvailable when Self is GroupedListStyle.\nstatic var inset: InsetListStyle\nThe list style that describes the behavior and appearance of an inset list.\nAvailable when Self is InsetListStyle.\nstatic var insetGrouped: InsetGroupedListStyle\nThe list style that describes the behavior and appearance of an inset grouped list.\nAvailable when Self is InsetGroupedListStyle.\nstatic var plain: PlainListStyle\nThe list style that describes the behavior and appearance of a plain list.\nAvailable when Self is PlainListStyle."
    },
    {
        "title": "TableStyle.Configuration",
        "url": "https://developer.apple.com/documentation/swiftui/tablestyle/configuration",
        "html": "See Also\nCreating custom table styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view that represents the body of a table.\n\nRequired\n\nassociatedtype Body : View\nA view that represents the body of a table.\n\nRequired"
    },
    {
        "title": "AutomaticTableStyle",
        "url": "https://developer.apple.com/documentation/swiftui/automatictablestyle",
        "html": "Overview\n\nYou can also use automatic to construct this style.\n\nRelationships\nConforms To\nTableStyle\nSee Also\nSupporting types\nstruct InsetTableStyle\nThe table style that describes the behavior and appearance of a table with its content and selection inset from the table edges.\nstruct BorderedTableStyle\nThe table style that describes the behavior and appearance of a table with standard border."
    },
    {
        "title": "inset(alternatesRowBackgrounds:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablestyle/inset(alternatesrowbackgrounds:)",
        "html": "Deprecated\n\nUse the inset style and add the alternatingRowBackgrounds(_:) view modifier instead.\n\nParameters\nalternatesRowBackgrounds\n\nWhether the rows should alternate their backgrounds to help visually distinguish them from each other.\n\nSee Also\nDeprecated styles\nstatic func bordered(alternatesRowBackgrounds: Bool) -> BorderedTableStyle\nThe table style that describes the behavior and appearance of a table with standard border.\nAvailable when Self is BorderedTableStyle.\nDeprecated"
    },
    {
        "title": "DefaultPickerStyle",
        "url": "https://developer.apple.com/documentation/swiftui/defaultpickerstyle",
        "html": "Overview\n\nYou can also use automatic to construct this style.\n\nTopics\nCreating the picker style\ninit()\nCreates a default picker style.\nRelationships\nConforms To\nPickerStyle\nSee Also\nSupporting types\nstruct InlinePickerStyle\nA PickerStyle where each option is displayed inline with other views in the current container.\nstruct MenuPickerStyle\nA picker style that presents the options as a menu when the user presses a button, or as a submenu when nested within a larger menu.\nstruct NavigationLinkPickerStyle\nA picker style represented by a navigation link that presents the options by pushing a List-style picker view.\nstruct PalettePickerStyle\nA picker style that presents the options as a row of compact elements.\nstruct RadioGroupPickerStyle\nA picker style that presents the options as a group of radio buttons.\nstruct SegmentedPickerStyle\nA picker style that presents the options in a segmented control.\nstruct WheelPickerStyle\nA picker style that presents the options in a scrollable wheel that shows the selected option and a few neighboring options."
    },
    {
        "title": "bordered(alternatesRowBackgrounds:)",
        "url": "https://developer.apple.com/documentation/swiftui/tablestyle/bordered(alternatesrowbackgrounds:)",
        "html": "Deprecated\n\nUse the bordered style and add the alternatingRowBackgrounds(_:) view modifier instead.\n\nParameters\nalternatesRowBackgrounds\n\nWhether the rows should alternate their backgrounds to help visually distinguish them from each other.\n\nDiscussion\n\nBordered tables are expected to be inset from their outer containers, but do not have inset style rows or selection.\n\nSee Also\nDeprecated styles\nstatic func inset(alternatesRowBackgrounds: Bool) -> InsetTableStyle\nThe table style that describes the behavior and appearance of a table with its content and selection inset from the table edges.\nAvailable when Self is InsetTableStyle.\nDeprecated"
    },
    {
        "title": "BorderedTableStyle",
        "url": "https://developer.apple.com/documentation/swiftui/borderedtablestyle",
        "html": "Overview\n\nYou can also use bordered to construct this style.\n\nTopics\nCreating the table style\ninit()\nCreates a default bordered table style, with alternating row backgrounds.\ninit(alternatesRowBackgrounds: Bool)\nCreates an inset table style with optional alternating row backgrounds.\nDeprecated\nRelationships\nConforms To\nTableStyle\nSee Also\nSupporting types\nstruct AutomaticTableStyle\nThe default table style in the current context.\nstruct InsetTableStyle\nThe table style that describes the behavior and appearance of a table with its content and selection inset from the table edges."
    },
    {
        "title": "InsetTableStyle",
        "url": "https://developer.apple.com/documentation/swiftui/insettablestyle",
        "html": "Overview\n\nYou can also use inset to construct this style.\n\nTopics\nCreating the table style\ninit()\nCreates a default inset table style, with alternating row backgrounds.\ninit(alternatesRowBackgrounds: Bool)\nCreates an inset table style with optional alternating row backgrounds.\nDeprecated\nRelationships\nConforms To\nTableStyle\nSee Also\nSupporting types\nstruct AutomaticTableStyle\nThe default table style in the current context.\nstruct BorderedTableStyle\nThe table style that describes the behavior and appearance of a table with standard border."
    },
    {
        "title": "Body",
        "url": "https://developer.apple.com/documentation/swiftui/tablestyle/body",
        "html": "Required\n\nSee Also\nCreating custom table styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view that represents the body of a table.\n\nRequired\n\ntypealias Configuration\nThe properties of a table."
    },
    {
        "title": "accessoryBarAction",
        "url": "https://developer.apple.com/documentation/swiftui/primitivebuttonstyle/accessorybaraction",
        "html": "Discussion\n\nUse this style for buttons that perform extra actions relative to the accessory toolbar\u2019s main functions, like adding or editing filters. This style also affects other view types that you apply a button style to, like Toggle, Picker, and Menu instances.\n\nSee Also\nGetting built-in button styles\nstatic var automatic: DefaultButtonStyle\nThe default button style, based on the button\u2019s context.\nAvailable when Self is DefaultButtonStyle.\nstatic var accessoryBar: AccessoryBarButtonStyle\nA button style that is typically used in the context of an accessory toolbar (sometimes refererred to as a \u201cscope bar\u201d), for buttons that narrow the focus of a search or other operation.\nAvailable when Self is AccessoryBarButtonStyle.\nstatic var bordered: BorderedButtonStyle\nA button style that applies standard border artwork based on the button\u2019s context.\nAvailable when Self is BorderedButtonStyle.\nstatic var borderedProminent: BorderedProminentButtonStyle\nA button style that applies standard border prominent artwork based on the button\u2019s context.\nAvailable when Self is BorderedProminentButtonStyle.\nstatic var borderless: BorderlessButtonStyle\nA button style that doesn\u2019t apply a border.\nAvailable when Self is BorderlessButtonStyle.\nstatic var card: CardButtonStyle\nA button style that doesn\u2019t pad the content, and applies a motion effect when a button has focus.\nAvailable when Self is CardButtonStyle.\nstatic var link: LinkButtonStyle\nA button style for buttons that emulate links.\nAvailable when Self is LinkButtonStyle.\nstatic var plain: PlainButtonStyle\nA button style that doesn\u2019t style or decorate its content while idle, but may apply a visual effect to indicate the pressed, focused, or enabled state of the button.\nAvailable when Self is PlainButtonStyle."
    },
    {
        "title": "inline",
        "url": "https://developer.apple.com/documentation/swiftui/pickerstyle/inline",
        "html": "See Also\nGetting built-in picker styles\nstatic var automatic: DefaultPickerStyle\nThe default picker style, based on the picker\u2019s context.\nAvailable when Self is DefaultPickerStyle.\nstatic var menu: MenuPickerStyle\nA picker style that presents the options as a menu when the user presses a button, or as a submenu when nested within a larger menu.\nAvailable when Self is MenuPickerStyle.\nstatic var navigationLink: NavigationLinkPickerStyle\nA picker style represented by a navigation link that presents the options by pushing a List-style picker view.\nAvailable when Self is NavigationLinkPickerStyle.\nstatic var palette: PalettePickerStyle\nA picker style that presents the options as a row of compact elements.\nAvailable when Self is PalettePickerStyle.\nstatic var radioGroup: RadioGroupPickerStyle\nA picker style that presents the options as a group of radio buttons.\nAvailable when Self is RadioGroupPickerStyle.\nstatic var segmented: SegmentedPickerStyle\nA picker style that presents the options in a segmented control.\nAvailable when Self is SegmentedPickerStyle.\nstatic var wheel: WheelPickerStyle\nA picker style that presents the options in a scrollable wheel that shows the selected option and a few neighboring options.\nAvailable when Self is WheelPickerStyle."
    },
    {
        "title": "bordered",
        "url": "https://developer.apple.com/documentation/swiftui/primitivebuttonstyle/bordered",
        "html": "Discussion\n\nTo apply this style to a button, or to a view that contains buttons, use the buttonStyle(_:) modifier.\n\nSee Also\nGetting built-in button styles\nstatic var automatic: DefaultButtonStyle\nThe default button style, based on the button\u2019s context.\nAvailable when Self is DefaultButtonStyle.\nstatic var accessoryBar: AccessoryBarButtonStyle\nA button style that is typically used in the context of an accessory toolbar (sometimes refererred to as a \u201cscope bar\u201d), for buttons that narrow the focus of a search or other operation.\nAvailable when Self is AccessoryBarButtonStyle.\nstatic var accessoryBarAction: AccessoryBarActionButtonStyle\nA button style that you use for extra actions in an accessory toolbar.\nAvailable when Self is AccessoryBarActionButtonStyle.\nstatic var borderedProminent: BorderedProminentButtonStyle\nA button style that applies standard border prominent artwork based on the button\u2019s context.\nAvailable when Self is BorderedProminentButtonStyle.\nstatic var borderless: BorderlessButtonStyle\nA button style that doesn\u2019t apply a border.\nAvailable when Self is BorderlessButtonStyle.\nstatic var card: CardButtonStyle\nA button style that doesn\u2019t pad the content, and applies a motion effect when a button has focus.\nAvailable when Self is CardButtonStyle.\nstatic var link: LinkButtonStyle\nA button style for buttons that emulate links.\nAvailable when Self is LinkButtonStyle.\nstatic var plain: PlainButtonStyle\nA button style that doesn\u2019t style or decorate its content while idle, but may apply a visual effect to indicate the pressed, focused, or enabled state of the button.\nAvailable when Self is PlainButtonStyle."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/pickerstyle/automatic",
        "html": "Discussion\n\nHow a picker using the default picker style appears largely depends on the platform and the view type in which it appears. For example, in a standard view, the default picker styles by platform are:\n\nOn iOS and watchOS the default is a wheel.\n\nOn macOS, the default is a pop-up button.\n\nOn tvOS, the default is a segmented control.\n\nThe default picker style may also take into account other factors \u2014 like whether the picker appears in a container view \u2014 when setting the appearance of a picker.\n\nYou can override a picker\u2019s style. To apply the default style to a picker, or to a view that contains pickers, use the pickerStyle(_:) modifier.\n\nSee Also\nGetting built-in picker styles\nstatic var inline: InlinePickerStyle\nA PickerStyle where each option is displayed inline with other views in the current container.\nAvailable when Self is InlinePickerStyle.\nstatic var menu: MenuPickerStyle\nA picker style that presents the options as a menu when the user presses a button, or as a submenu when nested within a larger menu.\nAvailable when Self is MenuPickerStyle.\nstatic var navigationLink: NavigationLinkPickerStyle\nA picker style represented by a navigation link that presents the options by pushing a List-style picker view.\nAvailable when Self is NavigationLinkPickerStyle.\nstatic var palette: PalettePickerStyle\nA picker style that presents the options as a row of compact elements.\nAvailable when Self is PalettePickerStyle.\nstatic var radioGroup: RadioGroupPickerStyle\nA picker style that presents the options as a group of radio buttons.\nAvailable when Self is RadioGroupPickerStyle.\nstatic var segmented: SegmentedPickerStyle\nA picker style that presents the options in a segmented control.\nAvailable when Self is SegmentedPickerStyle.\nstatic var wheel: WheelPickerStyle\nA picker style that presents the options in a scrollable wheel that shows the selected option and a few neighboring options.\nAvailable when Self is WheelPickerStyle."
    },
    {
        "title": "segmented",
        "url": "https://developer.apple.com/documentation/swiftui/pickerstyle/segmented",
        "html": "Discussion\n\nUse this style when there are two to five options. Consider using menu when there are more than five options.\n\nFor each option\u2019s label, use sentence-style capitalization without ending punctuation, like a period or colon.\n\nTo apply this style to a picker, or to a view that contains pickers, use the pickerStyle(_:) modifier.\n\nSee Also\nGetting built-in picker styles\nstatic var automatic: DefaultPickerStyle\nThe default picker style, based on the picker\u2019s context.\nAvailable when Self is DefaultPickerStyle.\nstatic var inline: InlinePickerStyle\nA PickerStyle where each option is displayed inline with other views in the current container.\nAvailable when Self is InlinePickerStyle.\nstatic var menu: MenuPickerStyle\nA picker style that presents the options as a menu when the user presses a button, or as a submenu when nested within a larger menu.\nAvailable when Self is MenuPickerStyle.\nstatic var navigationLink: NavigationLinkPickerStyle\nA picker style represented by a navigation link that presents the options by pushing a List-style picker view.\nAvailable when Self is NavigationLinkPickerStyle.\nstatic var palette: PalettePickerStyle\nA picker style that presents the options as a row of compact elements.\nAvailable when Self is PalettePickerStyle.\nstatic var radioGroup: RadioGroupPickerStyle\nA picker style that presents the options as a group of radio buttons.\nAvailable when Self is RadioGroupPickerStyle.\nstatic var wheel: WheelPickerStyle\nA picker style that presents the options in a scrollable wheel that shows the selected option and a few neighboring options.\nAvailable when Self is WheelPickerStyle."
    },
    {
        "title": "palette",
        "url": "https://developer.apple.com/documentation/swiftui/pickerstyle/palette",
        "html": "Discussion\n\nNote\n\nWhen used outside of menus, this style is rendered as a segmented picker. If that is the intended usage, consider segmented instead.\n\nFor each option\u2019s label, use one symbol per item, if you add more than 6 options, the picker scrolls horizontally on iOS.\n\nThe following example creates a palette picker:\n\nenum Reaction: Identifiable, CaseIterable {\n    case thumbsup, thumbsdown, heart, questionMark\n    var id: Self { self }\n}\n\n\n@State private var selection: Reaction? = .none\n\n\nvar body: some View {\n    Menu(\"Reactions\") {\n        Picker(\"Palette\", selection: $selection) {\n            Label(\"Thumbs up\", systemImage: \"hand.thumbsup\")\n                .tag(Reaction.thumbsup)\n            Label(\"Thumbs down\", systemImage: \"hand.thumbsdown\")\n                .tag(Reaction.thumbsdown)\n            Label(\"Like\", systemImage: \"heart\")\n                .tag(Reaction.heart)\n            Label(\"Question mark\", systemImage: \"questionmark\")\n                .tag(Reaction.questionMark)\n        }\n        .pickerStyle(.palette)\n        Button(\"Reply...\") { ... }\n    }\n}\n\n\nPalette pickers will display the selection of untinted SF Symbols or template images by applying the system tint. For tinted SF Symbols, a stroke is outlined around the symbol upon selection. If you would like to supply a particular image (or SF Symbol) to signify selection, we suggest using custom. This deactivates any system selection behavior, allowing the provided image to solely indicate selection instead.\n\nThe following example creates a palette picker that disables the system selection behaviour:\n\nMenu {\n    Picker(\"Palettes\", selection: $selection) {\n        ForEach(palettes) { palette in\n            Label(palette.title, systemImage: selection == palette ?\n                  \"circle.dashed.inset.filled\" : \"circle.fill\")\n            .tint(palette.tint)\n            .tag(palette)\n        }\n    }\n    .pickerStyle(.palette)\n    .paletteSelectionEffect(.custom)\n} label: {\n    ...\n}\n\n\nIf a specific SF Symbol variant is preferable instead, use symbolVariant(_:):\n\nMenu {\n    Picker(\"Flags\", selection: $selectedFlag) {\n        ForEach(flags) { flag in\n            Label(flag.title, systemImage: \"flag\")\n                .tint(flag.color)\n                .tag(flag)\n        }\n    }\n    .pickerStyle(.palette)\n    .paletteSelectionEffect(.symbolVariant(.slash))\n} label: {\n    ...\n}\n\n\nTo apply this style to a picker, or to a view that contains pickers, use the pickerStyle(_:) modifier.\n\nSee Also\nGetting built-in picker styles\nstatic var automatic: DefaultPickerStyle\nThe default picker style, based on the picker\u2019s context.\nAvailable when Self is DefaultPickerStyle.\nstatic var inline: InlinePickerStyle\nA PickerStyle where each option is displayed inline with other views in the current container.\nAvailable when Self is InlinePickerStyle.\nstatic var menu: MenuPickerStyle\nA picker style that presents the options as a menu when the user presses a button, or as a submenu when nested within a larger menu.\nAvailable when Self is MenuPickerStyle.\nstatic var navigationLink: NavigationLinkPickerStyle\nA picker style represented by a navigation link that presents the options by pushing a List-style picker view.\nAvailable when Self is NavigationLinkPickerStyle.\nstatic var radioGroup: RadioGroupPickerStyle\nA picker style that presents the options as a group of radio buttons.\nAvailable when Self is RadioGroupPickerStyle.\nstatic var segmented: SegmentedPickerStyle\nA picker style that presents the options in a segmented control.\nAvailable when Self is SegmentedPickerStyle.\nstatic var wheel: WheelPickerStyle\nA picker style that presents the options in a scrollable wheel that shows the selected option and a few neighboring options.\nAvailable when Self is WheelPickerStyle."
    },
    {
        "title": "radioGroup",
        "url": "https://developer.apple.com/documentation/swiftui/pickerstyle/radiogroup",
        "html": "Discussion\n\nUse this style when there are two to five options. Consider using menu when there are more than five options.\n\nFor each option\u2019s label, use sentence-style capitalization without ending punctuation, like a period or colon.\n\nTo apply this style to a picker, or to a view that contains pickers, use the pickerStyle(_:) modifier.\n\nSee Also\nGetting built-in picker styles\nstatic var automatic: DefaultPickerStyle\nThe default picker style, based on the picker\u2019s context.\nAvailable when Self is DefaultPickerStyle.\nstatic var inline: InlinePickerStyle\nA PickerStyle where each option is displayed inline with other views in the current container.\nAvailable when Self is InlinePickerStyle.\nstatic var menu: MenuPickerStyle\nA picker style that presents the options as a menu when the user presses a button, or as a submenu when nested within a larger menu.\nAvailable when Self is MenuPickerStyle.\nstatic var navigationLink: NavigationLinkPickerStyle\nA picker style represented by a navigation link that presents the options by pushing a List-style picker view.\nAvailable when Self is NavigationLinkPickerStyle.\nstatic var palette: PalettePickerStyle\nA picker style that presents the options as a row of compact elements.\nAvailable when Self is PalettePickerStyle.\nstatic var segmented: SegmentedPickerStyle\nA picker style that presents the options in a segmented control.\nAvailable when Self is SegmentedPickerStyle.\nstatic var wheel: WheelPickerStyle\nA picker style that presents the options in a scrollable wheel that shows the selected option and a few neighboring options.\nAvailable when Self is WheelPickerStyle."
    },
    {
        "title": "menu",
        "url": "https://developer.apple.com/documentation/swiftui/pickerstyle/menu",
        "html": "Discussion\n\nUse this style when there are more than five options. Consider using inline when there are fewer than five options.\n\nThe button itself indicates the selected option. You can include additional controls in the set of options, such as a button to customize the list of options.\n\nTo apply this style to a picker, or to a view that contains pickers, use the pickerStyle(_:) modifier.\n\nSee Also\nGetting built-in picker styles\nstatic var automatic: DefaultPickerStyle\nThe default picker style, based on the picker\u2019s context.\nAvailable when Self is DefaultPickerStyle.\nstatic var inline: InlinePickerStyle\nA PickerStyle where each option is displayed inline with other views in the current container.\nAvailable when Self is InlinePickerStyle.\nstatic var navigationLink: NavigationLinkPickerStyle\nA picker style represented by a navigation link that presents the options by pushing a List-style picker view.\nAvailable when Self is NavigationLinkPickerStyle.\nstatic var palette: PalettePickerStyle\nA picker style that presents the options as a row of compact elements.\nAvailable when Self is PalettePickerStyle.\nstatic var radioGroup: RadioGroupPickerStyle\nA picker style that presents the options as a group of radio buttons.\nAvailable when Self is RadioGroupPickerStyle.\nstatic var segmented: SegmentedPickerStyle\nA picker style that presents the options in a segmented control.\nAvailable when Self is SegmentedPickerStyle.\nstatic var wheel: WheelPickerStyle\nA picker style that presents the options in a scrollable wheel that shows the selected option and a few neighboring options.\nAvailable when Self is WheelPickerStyle."
    },
    {
        "title": "MenuControlGroupStyle",
        "url": "https://developer.apple.com/documentation/swiftui/menucontrolgroupstyle",
        "html": "Overview\n\nUse menu to construct this style.\n\nTopics\nCreating the control group style\ninit()\nCreates a menu control group style.\nRelationships\nConforms To\nControlGroupStyle\nSee Also\nSupporting types\nstruct AutomaticControlGroupStyle\nThe default control group style.\nstruct CompactMenuControlGroupStyle\nA control group style that presents its content as a compact menu when the user presses the control, or as a submenu when nested within a larger menu.\nstruct NavigationControlGroupStyle\nThe navigation control group style.\nstruct PaletteControlGroupStyle\nA control group style that presents its content as a palette."
    },
    {
        "title": "navigationLink",
        "url": "https://developer.apple.com/documentation/swiftui/pickerstyle/navigationlink",
        "html": "Discussion\n\nIn navigation stacks, prefer the default menu style. Consider the navigation link style when you have a large number of options or your design is better expressed by pushing onto a stack.\n\nTo apply this style to a picker, or to a view that contains pickers, use the pickerStyle(_:) modifier.\n\nSee Also\nGetting built-in picker styles\nstatic var automatic: DefaultPickerStyle\nThe default picker style, based on the picker\u2019s context.\nAvailable when Self is DefaultPickerStyle.\nstatic var inline: InlinePickerStyle\nA PickerStyle where each option is displayed inline with other views in the current container.\nAvailable when Self is InlinePickerStyle.\nstatic var menu: MenuPickerStyle\nA picker style that presents the options as a menu when the user presses a button, or as a submenu when nested within a larger menu.\nAvailable when Self is MenuPickerStyle.\nstatic var palette: PalettePickerStyle\nA picker style that presents the options as a row of compact elements.\nAvailable when Self is PalettePickerStyle.\nstatic var radioGroup: RadioGroupPickerStyle\nA picker style that presents the options as a group of radio buttons.\nAvailable when Self is RadioGroupPickerStyle.\nstatic var segmented: SegmentedPickerStyle\nA picker style that presents the options in a segmented control.\nAvailable when Self is SegmentedPickerStyle.\nstatic var wheel: WheelPickerStyle\nA picker style that presents the options in a scrollable wheel that shows the selected option and a few neighboring options.\nAvailable when Self is WheelPickerStyle."
    },
    {
        "title": "accessoryBar",
        "url": "https://developer.apple.com/documentation/swiftui/primitivebuttonstyle/accessorybar",
        "html": "Discussion\n\nThis is the default button style for views in accessory toolbars, created with ToolbarItemPlacement.init(id:_), and for searchable scopes.\n\nThis style will also affect button style Toggles, as well as button style Pickers and Menus.\n\nHStack(alignment: .firstTextBaseline) {\n    Button(\"Button\") {}\n\n\n    Toggle(\"Toggle\", isOn: $isToggleOn)\n        .toggleStyle(.button)\n\n\n    Picker(\"Picker\", selection: $selection) {\n        Text(\"Option 1\").tag(0)\n        Text(\"Option 2\").tag(1)\n    }\n\n\n    Picker(\"Inline Picker\", selection: $selection) {\n        Text(\"Option 1\").tag(0)\n        Text(\"Option 2\").tag(1)\n    }\n    .pickerStyle(.inline)\n\n\n    Menu(\"Menu\") {\n        Button(\"Item\") {}\n    }\n}\n.buttonStyle(.accessoryBar)\n\nSee Also\nGetting built-in button styles\nstatic var automatic: DefaultButtonStyle\nThe default button style, based on the button\u2019s context.\nAvailable when Self is DefaultButtonStyle.\nstatic var accessoryBarAction: AccessoryBarActionButtonStyle\nA button style that you use for extra actions in an accessory toolbar.\nAvailable when Self is AccessoryBarActionButtonStyle.\nstatic var bordered: BorderedButtonStyle\nA button style that applies standard border artwork based on the button\u2019s context.\nAvailable when Self is BorderedButtonStyle.\nstatic var borderedProminent: BorderedProminentButtonStyle\nA button style that applies standard border prominent artwork based on the button\u2019s context.\nAvailable when Self is BorderedProminentButtonStyle.\nstatic var borderless: BorderlessButtonStyle\nA button style that doesn\u2019t apply a border.\nAvailable when Self is BorderlessButtonStyle.\nstatic var card: CardButtonStyle\nA button style that doesn\u2019t pad the content, and applies a motion effect when a button has focus.\nAvailable when Self is CardButtonStyle.\nstatic var link: LinkButtonStyle\nA button style for buttons that emulate links.\nAvailable when Self is LinkButtonStyle.\nstatic var plain: PlainButtonStyle\nA button style that doesn\u2019t style or decorate its content while idle, but may apply a visual effect to indicate the pressed, focused, or enabled state of the button.\nAvailable when Self is PlainButtonStyle."
    },
    {
        "title": "resolve(in:)",
        "url": "https://developer.apple.com/documentation/swiftui/environmentalmodifier/resolve(in:)",
        "html": "Required\n\nSee Also\nResolving a modifier\nassociatedtype ResolvedModifier : ViewModifier\nThe type of modifier to use after being resolved.\n\nRequired"
    },
    {
        "title": "makeBody(configuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/labelstyle/makebody(configuration:)",
        "html": "Required\n\nParameters\nconfiguration\n\nThe properties of the label.\n\nDiscussion\n\nThe system calls this method for each Label instance in a view hierarchy where this style is the current label style.\n\nSee Also\nCreating custom label styles\ntypealias Configuration\nThe properties of a label.\nassociatedtype Body : View\nA view that represents the body of a label.\n\nRequired"
    },
    {
        "title": "init(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/equatableview/init(content:)",
        "html": "See Also\nCreating an equatable view\nvar content: Content"
    },
    {
        "title": "KeyframeTrackContentBuilder.Conditional",
        "url": "https://developer.apple.com/documentation/swiftui/keyframetrackcontentbuilder/conditional",
        "html": "Relationships\nConforms To\nKeyframeTrackContent\nSee Also\nBuilding keyframe track content\nstatic func buildArray([some KeyframeTrackContent<Value>]) -> some KeyframeTrackContent<Value>\nstatic func buildBlock() -> some KeyframeTrackContent<Value>\nstatic func buildEither<First, Second>(first: First) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildEither<First, Second>(second: Second) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildExpression<K>(K) -> K\nstatic func buildPartialBlock(accumulated: some KeyframeTrackContent<Value>, next: some KeyframeTrackContent<Value>) -> some KeyframeTrackContent<Value>\nstatic func buildPartialBlock<K>(first: K) -> K"
    },
    {
        "title": "content",
        "url": "https://developer.apple.com/documentation/swiftui/equatableview/content",
        "html": "See Also\nCreating an equatable view\ninit(content: Content)"
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/tupleview/init(_:)",
        "html": "See Also\nCreating a tuple view\nvar value: T"
    },
    {
        "title": "update()",
        "url": "https://developer.apple.com/documentation/swiftui/fetchrequest/update()",
        "html": "Discussion\n\nSwiftUI calls this function before rendering a view\u2019s body to ensure the view has the most recent fetched results.\n\nSee Also\nGetting the fetched results\nvar wrappedValue: FetchedResults<Result>\nThe fetched results of the fetch request."
    },
    {
        "title": "wrappedValue",
        "url": "https://developer.apple.com/documentation/swiftui/fetchrequest/wrappedvalue",
        "html": "Discussion\n\nSwiftUI returns the value associated with this property when you use FetchRequest as a property wrapper, and then access the wrapped property by name. For example, consider the following quakes property declaration that fetches a Quake type that the Loading and Displaying a Large Data Feed sample code project defines:\n\n@FetchRequest(fetchRequest: request)\nprivate var quakes: FetchedResults<Quake>\n\n\nYou access the request\u2019s wrappedValue, which contains a FetchedResults instance, by referring to the quakes property by name:\n\nText(\"Found \\(quakes.count) earthquakes\")\n\n\nIf you need to separate the request and the result entities, you can declare quakes in two steps by using the request\u2019s wrappedValue to obtain the results:\n\nvar fetchRequest = FetchRequest<Quake>(fetchRequest: request)\nvar quakes: FetchedResults<Quake> { fetchRequest.wrappedValue }\n\n\nThe wrappedValue property returns an empty array when there are no fetched results \u2014 for example, because no entities satisfy the predicate, or because the data store is empty.\n\nSee Also\nGetting the fetched results\nfunc update()\nUpdates the fetched results.\nAvailable when Result conforms to NSFetchRequestResult."
    },
    {
        "title": "projectedValue",
        "url": "https://developer.apple.com/documentation/swiftui/fetchrequest/projectedvalue",
        "html": "Discussion\n\nSwiftUI returns the value associated with this property when you use FetchRequest as a property wrapper on a FetchedResults instance, and then access the results with a dollar sign ($) prefix. The value that SwiftUI returns is a Binding to the request\u2019s FetchRequest.Configuration structure, which dynamically configures the request.\n\nFor example, consider the following fetch request for a type that the Loading and Displaying a Large Data Feed sample code project defines to store earthquake data, sorted based on the time property:\n\n@FetchRequest(sortDescriptors: [SortDescriptor(\\.time, order: .reverse)])\nprivate var quakes: FetchedResults<Quake>\n\n\nYou can use the projected value to enable a Table instance to make updates:\n\nTable(quakes, sortOrder: $quakes.sortDescriptors) {\n    TableColumn(\"Place\", value: \\.place)\n    TableColumn(\"Time\", value: \\.time) { quake in\n        Text(quake.time, style: .time)\n    }\n}\n\n\nBecause you initialize the table using a binding to the descriptors, the table can modify the sort in response to actions that the user takes, like clicking a column header.\n\nSee Also\nConfiguring a request dynamically\nstruct Configuration\nThe request\u2019s configurable properties."
    },
    {
        "title": "PreferredColorSchemeKey",
        "url": "https://developer.apple.com/documentation/swiftui/preferredcolorschemekey",
        "html": "Overview\n\nDon\u2019t use this key directly. Instead, set a preferred color scheme for a view using the preferredColorScheme(_:) view modifier. Get the current color scheme for a view by accessing the colorScheme value.\n\nRelationships\nConforms To\nPreferenceKey"
    },
    {
        "title": "ColorScheme.dark",
        "url": "https://developer.apple.com/documentation/swiftui/colorscheme/dark",
        "html": "See Also\nGetting color schemes\ncase light\nThe color scheme that corresponds to a light appearance."
    },
    {
        "title": "page(backgroundDisplayMode:)",
        "url": "https://developer.apple.com/documentation/swiftui/indexviewstyle/page(backgrounddisplaymode:)",
        "html": "Parameters\nbackgroundDisplayMode\n\nThe display mode of the background of any page index views receiving this style\n\nSee Also\nGetting built-in index view styles\nstatic var page: PageIndexViewStyle\nAn index view style that places a page index view over its content.\nAvailable when Self is PageIndexViewStyle."
    },
    {
        "title": "label",
        "url": "https://developer.apple.com/documentation/swiftui/groupboxstyleconfiguration/label-swift.property",
        "html": "See Also\nConfiguring the label\nstruct Label\nA type-erased label of a group box."
    },
    {
        "title": "FetchRequest.Configuration",
        "url": "https://developer.apple.com/documentation/swiftui/fetchrequest/configuration",
        "html": "Overview\n\nYou initialize a FetchRequest with an optional predicate and sort descriptors, either explicitly or using a configured NSFetchRequest. Later, you can dynamically update the predicate and sort parameters using the request\u2019s configuration structure.\n\nYou access or bind to a request\u2019s configuration components through properties on the associated FetchedResults instance.\n\nConfigure using a binding\n\nGet a Binding to a fetch request\u2019s configuration structure by accessing the request\u2019s projectedValue, which you do by using the dollar sign ($) prefix on the associated results property. For example, you can create a request for Quake entities \u2014 a managed object type that the Loading and Displaying a Large Data Feed sample code project defines \u2014 that initially sorts the results by time:\n\n@FetchRequest(sortDescriptors: [SortDescriptor(\\.time, order: .reverse)])\nprivate var quakes: FetchedResults<Quake>\n\n\nThen you can bind the request\u2019s sort descriptors, which you access through the quakes result, to those of a Table instance:\n\nTable(quakes, sortOrder: $quakes.sortDescriptors) {\n    TableColumn(\"Place\", value: \\.place)\n    TableColumn(\"Time\", value: \\.time) { quake in\n        Text(quake.time, style: .time)\n    }\n}\n\n\nA user who clicks on a table column header initiates the following sequence of events:\n\nThe table updates the sort descriptors through the binding.\n\nThe modified sort descriptors reconfigure the request.\n\nThe reconfigured request fetches new results.\n\nSwiftUI redraws the table in response to new results.\n\nSet configuration directly\n\nIf you need to access the fetch request\u2019s configuration elements directly, use the nsPredicate and sortDescriptors or nsSortDescriptors properties of the FetchedResults instance. Continuing the example above, to enable the user to dynamically update the predicate, declare a State property to hold a query string:\n\n@State private var query = \"\"\n\n\nThen add an onChange(of:initial:_:) modifier to the Table that sets a new predicate any time the query changes:\n\n.onChange(of: query) { _, value in\n    quakes.nsPredicate = query.isEmpty\n        ? nil\n        : NSPredicate(format: \"place CONTAINS %@\", value)\n}\n\n\nTo give the user control over the string, add a TextField in your user interface that\u2019s bound to the query state:\n\nTextField(\"Filter\", text: $query)\n\n\nWhen the user types into the text field, the predicate updates, the request fetches new results, and SwiftUI redraws the table.\n\nTopics\nSetting a predicate\nvar nsPredicate: NSPredicate?\nThe request\u2019s predicate.\nSetting sort descriptors\nvar sortDescriptors: [SortDescriptor<Result>]\nThe request\u2019s sort descriptors, accessed as value types.\nAvailable when Result inherits NSManagedObject.\nvar nsSortDescriptors: [NSSortDescriptor]\nThe request\u2019s sort descriptors, accessed as reference types.\nSee Also\nConfiguring a request dynamically\nvar projectedValue: Binding<FetchRequest<Result>.Configuration>\nA binding to the request\u2019s mutable configuration properties."
    },
    {
        "title": "ColorScheme.light",
        "url": "https://developer.apple.com/documentation/swiftui/colorscheme/light",
        "html": "See Also\nGetting color schemes\ncase dark\nThe color scheme that corresponds to a dark appearance."
    },
    {
        "title": "content",
        "url": "https://developer.apple.com/documentation/swiftui/groupboxstyleconfiguration/content-swift.property",
        "html": "See Also\nConfiguring the content\nstruct Content\nA type-erased content of a group box."
    },
    {
        "title": "init(entity:sortDescriptors:predicate:animation:)",
        "url": "https://developer.apple.com/documentation/swiftui/fetchrequest/init(entity:sortdescriptors:predicate:animation:)",
        "html": "Parameters\nentity\n\nThe description of the Core Data entity to fetch.\n\nsortDescriptors\n\nAn array of sort descriptors that define the sort order of the fetched results.\n\npredicate\n\nAn NSPredicate instance that defines logical conditions used to filter the fetched results.\n\nanimation\n\nThe animation to use for user interface changes that result from changes to the fetched results.\n\nDiscussion\n\nUse this initializer if you need to explicitly specify the entity type for the request. If you specify a placeholder Result type in the request declaration, use the init(sortDescriptors:predicate:animation:) initializer to let the request infer the entity type. If you need more control over the fetch request configuration, use init(fetchRequest:animation:).\n\nSee Also\nCreating a fetch request\ninit(sortDescriptors: [SortDescriptor<Result>], predicate: NSPredicate?, animation: Animation?)\nCreates a fetch request based on a predicate and value type sort parameters.\nAvailable when Result inherits NSManagedObject.\ninit(sortDescriptors: [NSSortDescriptor], predicate: NSPredicate?, animation: Animation?)\nCreates a fetch request based on a predicate and reference type sort parameters.\nAvailable when Result inherits NSManagedObject."
    },
    {
        "title": "init(sortDescriptors:predicate:animation:)",
        "url": "https://developer.apple.com/documentation/swiftui/fetchrequest/init(sortdescriptors:predicate:animation:)-462jp",
        "html": "Parameters\nsortDescriptors\n\nAn array of sort descriptors that define the sort order of the fetched results.\n\npredicate\n\nAn NSPredicate instance that defines logical conditions used to filter the fetched results.\n\nanimation\n\nThe animation to use for user interface changes that result from changes to the fetched results.\n\nDiscussion\n\nThe request gets the entity type from the Result instance by calling that managed object\u2019s entity() type method. If you need to specify the entity type explicitly, use the init(entity:sortDescriptors:predicate:animation:) initializer instead. If you need more control over the fetch request configuration, use init(fetchRequest:animation:). For reference type sort descriptors, use init(sortDescriptors:predicate:animation:).\n\nSee Also\nCreating a fetch request\ninit(sortDescriptors: [NSSortDescriptor], predicate: NSPredicate?, animation: Animation?)\nCreates a fetch request based on a predicate and reference type sort parameters.\nAvailable when Result inherits NSManagedObject.\ninit(entity: NSEntityDescription, sortDescriptors: [NSSortDescriptor], predicate: NSPredicate?, animation: Animation?)\nCreates a fetch request for a specified entity description, based on a predicate and sort parameters.\nAvailable when Result conforms to NSFetchRequestResult."
    },
    {
        "title": "init(fetchRequest:animation:)",
        "url": "https://developer.apple.com/documentation/swiftui/fetchrequest/init(fetchrequest:animation:)",
        "html": "Parameters\nfetchRequest\n\nAn NSFetchRequest instance that describes the search criteria for retrieving data from the persistent store.\n\nanimation\n\nThe animation to use for user interface changes that result from changes to the fetched results.\n\nDiscussion\n\nUse this initializer when you want to configure a fetch request with more than a predicate and sort descriptors. For example, you can vend a request from a Quake managed object that the Loading and Displaying a Large Data Feed sample code project defines to store earthquake data. Limit the number of results to 1000 by setting a fetchLimit for the request:\n\nextension Quake {\n    var request: NSFetchRequest<Quake> {\n        let request = NSFetchRequest<Quake>(entityName: \"Quake\")\n        request.sortDescriptors = [\n            NSSortDescriptor(\n                keyPath: \\Quake.time,\n                ascending: true)]\n        request.fetchLimit = 1000\n        return request\n    }\n}\n\n\nUse the request to define a FetchedResults property:\n\n@FetchRequest(fetchRequest: Quake.request)\nprivate var quakes: FetchedResults<Quake>\n\n\nIf you only need to configure the request\u2019s predicate and sort descriptors, use init(sortDescriptors:predicate:animation:) instead. If you need to specify a Transaction rather than an optional Animation, use init(fetchRequest:transaction:).\n\nSee Also\nCreating a fully configured fetch request\ninit(fetchRequest: NSFetchRequest<Result>, transaction: Transaction)\nCreates a fully configured fetch request that uses the specified transaction when updating results.\nAvailable when Result conforms to NSFetchRequestResult."
    },
    {
        "title": "navigation",
        "url": "https://developer.apple.com/documentation/swiftui/controlgroupstyle/navigation",
        "html": "Discussion\n\nUse this style to group controls related to navigation, such as back/forward buttons or timeline navigation controls.\n\nThe navigation control group style can vary by platform. On iOS, it renders as individual borderless buttons, while on macOS, it displays as a separated momentary segmented control.\n\nTo apply this style to a control group or to a view that contains a control group, use the controlGroupStyle(_:) modifier.\n\nSee Also\nGetting built-in control group styles\nstatic var automatic: AutomaticControlGroupStyle\nThe default control group style.\nAvailable when Self is AutomaticControlGroupStyle.\nstatic var compactMenu: CompactMenuControlGroupStyle\nA control group style that presents its content as a compact menu when the user presses the control, or as a submenu when nested within a larger menu.\nAvailable when Self is CompactMenuControlGroupStyle.\nstatic var menu: MenuControlGroupStyle\nA control group style that presents its content as a menu when the user presses the control, or as a submenu when nested within a larger menu.\nAvailable when Self is MenuControlGroupStyle.\nstatic var palette: PaletteControlGroupStyle\nA control group style that presents its content as a palette.\nAvailable when Self is PaletteControlGroupStyle."
    },
    {
        "title": "init(sortDescriptors:predicate:animation:)",
        "url": "https://developer.apple.com/documentation/swiftui/fetchrequest/init(sortdescriptors:predicate:animation:)-4obxy",
        "html": "Parameters\nsortDescriptors\n\nAn array of sort descriptors that define the sort order of the fetched results.\n\npredicate\n\nAn NSPredicate instance that defines logical conditions used to filter the fetched results.\n\nanimation\n\nThe animation to use for user interface changes that result from changes to the fetched results.\n\nDiscussion\n\nThe request gets the entity type from the Result instance by calling that managed object\u2019s entity() type method. If you need to specify the entity type explicitly, use the init(entity:sortDescriptors:predicate:animation:) initializer instead. If you need more control over the fetch request configuration, use init(fetchRequest:animation:). For value type sort descriptors, use init(sortDescriptors:predicate:animation:).\n\nSee Also\nCreating a fetch request\ninit(sortDescriptors: [SortDescriptor<Result>], predicate: NSPredicate?, animation: Animation?)\nCreates a fetch request based on a predicate and value type sort parameters.\nAvailable when Result inherits NSManagedObject.\ninit(entity: NSEntityDescription, sortDescriptors: [NSSortDescriptor], predicate: NSPredicate?, animation: Animation?)\nCreates a fetch request for a specified entity description, based on a predicate and sort parameters.\nAvailable when Result conforms to NSFetchRequestResult."
    },
    {
        "title": "Visibility.hidden",
        "url": "https://developer.apple.com/documentation/swiftui/visibility/hidden",
        "html": "Discussion\n\nSome APIs may use this value to represent a hint or preference, rather than a mandatory assertion. For example, setting confirmation dialog title visibility to hidden using the confirmationDialog(_:isPresented:titleVisibility:actions:) modifier may not always hide the dialog title, which is required on some platforms.\n\nSee Also\nGetting visibility options\ncase automatic\nThe element may be visible or hidden depending on the policies of the component accepting the visibility configuration.\ncase visible\nThe element may be visible."
    },
    {
        "title": "Body",
        "url": "https://developer.apple.com/documentation/swiftui/formstyle/body",
        "html": "Required\n\nSee Also\nCreating custom form styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view that represents the body of a form.\n\nRequired\n\ntypealias Configuration\nThe properties of a form instance."
    },
    {
        "title": "PageIndexViewStyle",
        "url": "https://developer.apple.com/documentation/swiftui/pageindexviewstyle",
        "html": "Overview\n\nYou can also use page to construct this style.\n\nTopics\nCreating the control group style\ninit(backgroundDisplayMode: PageIndexViewStyle.BackgroundDisplayMode)\nCreates a page index view style.\nstruct BackgroundDisplayMode\nThe background style for the page index view.\nRelationships\nConforms To\nIndexViewStyle"
    },
    {
        "title": "FormStyle.Configuration",
        "url": "https://developer.apple.com/documentation/swiftui/formstyle/configuration",
        "html": "Discussion\n\nYou receive a configuration parameter of this type \u2014 which is an alias for the FormStyleConfiguration type \u2014 when you implement the required makeBody(configuration:) method in a custom form style implementation.\n\nSee Also\nCreating custom form styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view that represents the body of a form.\n\nRequired\n\nassociatedtype Body : View\nA view that represents the appearance and interaction of a form.\n\nRequired"
    },
    {
        "title": "AutomaticFormStyle",
        "url": "https://developer.apple.com/documentation/swiftui/automaticformstyle",
        "html": "Overview\n\nUse the automatic static variable to create this style:\n\nForm {\n   ...\n}\n.formStyle(.automatic)\n\nTopics\nCreating the form style\ninit()\nCreates a default form style.\nRelationships\nConforms To\nFormStyle\nSee Also\nSupporting types\nstruct ColumnsFormStyle\nA non-scrolling form style with a trailing aligned column of labels next to a leading aligned column of values.\nstruct GroupedFormStyle\nA form style with grouped rows."
    },
    {
        "title": "ColorSchemeContrast.standard",
        "url": "https://developer.apple.com/documentation/swiftui/colorschemecontrast/standard",
        "html": "See Also\nGetting contrast options\ncase increased\nSwiftUI displays views with increased contrast between the app\u2019s foreground and background colors."
    },
    {
        "title": "GroupedFormStyle",
        "url": "https://developer.apple.com/documentation/swiftui/groupedformstyle",
        "html": "Overview\n\nRows in this form style have leading aligned labels and trailing aligned controls within visually grouped sections.\n\nUse the grouped static variable to create this style:\n\nForm {\n   ...\n}\n.formStyle(.grouped)\n\nTopics\nCreating the form style\ninit()\nCreates a form style with scrolling, grouped rows.\nRelationships\nConforms To\nFormStyle\nSee Also\nSupporting types\nstruct AutomaticFormStyle\nThe default form style.\nstruct ColumnsFormStyle\nA non-scrolling form style with a trailing aligned column of labels next to a leading aligned column of values."
    },
    {
        "title": "content",
        "url": "https://developer.apple.com/documentation/swiftui/formstyleconfiguration/content-swift.property",
        "html": "See Also\nGetting configuration content\nstruct Content\nA type-erased content of a form."
    },
    {
        "title": "ColorSchemeContrast.increased",
        "url": "https://developer.apple.com/documentation/swiftui/colorschemecontrast/increased",
        "html": "See Also\nGetting contrast options\ncase standard\nSwiftUI displays views with standard contrast between the app\u2019s foreground and background colors."
    },
    {
        "title": "body",
        "url": "https://developer.apple.com/documentation/swiftui/view/body-44706",
        "html": "Discussion\n\nWhen you implement a custom view, you must implement a computed body property to provide the content for your view. Return a view that\u2019s composed of built-in views that SwiftUI provides, plus other composite views that you\u2019ve already defined:\n\nstruct MyView: View {\n    var body: some View {\n        Text(\"Hello, World!\")\n    }\n}\n\n\nFor more information about composing views and a view hierarchy, see Declaring a custom view."
    },
    {
        "title": "BorderedButtonStyle",
        "url": "https://developer.apple.com/documentation/swiftui/borderedbuttonstyle",
        "html": "Overview\n\nYou can also use bordered to construct this style.\n\nTopics\nCreating the button style\ninit()\nCreates a bordered button style.\nSupporting types\nfunc makeBody(configuration: BorderedButtonStyle.Configuration) -> some View\nCreates a view that represents the body of a button.\nDeprecated symbols\ninit(tint: Color)\nCreates a bordered button style with a tint color.\nDeprecated\nRelationships\nConforms To\nPrimitiveButtonStyle\nSee Also\nSupporting types\nstruct DefaultButtonStyle\nThe default button style, based on the button\u2019s context.\nstruct AccessoryBarButtonStyle\nA button style that you use for actions in an accessory toolbar that narrow the focus of a search or other operation.\nstruct AccessoryBarActionButtonStyle\nA button style that you use for extra actions in an accessory toolbar.\nstruct BorderedProminentButtonStyle\nA button style that applies standard border prominent artwork based on the button\u2019s context.\nstruct BorderlessButtonStyle\nA button style that doesn\u2019t apply a border.\nstruct CardButtonStyle\nA button style that doesn\u2019t pad the content, and applies a motion effect when a button has focus.\nstruct LinkButtonStyle\nA button style for buttons that emulate links.\nstruct PlainButtonStyle\nA button style that doesn\u2019t style or decorate its content while idle, but may apply a visual effect to indicate the pressed, focused, or enabled state of the button."
    },
    {
        "title": "BorderedProminentButtonStyle",
        "url": "https://developer.apple.com/documentation/swiftui/borderedprominentbuttonstyle",
        "html": "Overview\n\nUse borderedProminent to construct this style.\n\nTopics\nCreating the button style\ninit()\nCreates a bordered prominent button style.\nRelationships\nConforms To\nPrimitiveButtonStyle\nSee Also\nSupporting types\nstruct DefaultButtonStyle\nThe default button style, based on the button\u2019s context.\nstruct AccessoryBarButtonStyle\nA button style that you use for actions in an accessory toolbar that narrow the focus of a search or other operation.\nstruct AccessoryBarActionButtonStyle\nA button style that you use for extra actions in an accessory toolbar.\nstruct BorderedButtonStyle\nA button style that applies standard border artwork based on the button\u2019s context.\nstruct BorderlessButtonStyle\nA button style that doesn\u2019t apply a border.\nstruct CardButtonStyle\nA button style that doesn\u2019t pad the content, and applies a motion effect when a button has focus.\nstruct LinkButtonStyle\nA button style for buttons that emulate links.\nstruct PlainButtonStyle\nA button style that doesn\u2019t style or decorate its content while idle, but may apply a visual effect to indicate the pressed, focused, or enabled state of the button."
    },
    {
        "title": "AccessoryBarButtonStyle",
        "url": "https://developer.apple.com/documentation/swiftui/accessorybarbuttonstyle",
        "html": "Overview\n\nThis is the default button style for views in accessory toolbars, which you create with init(id:), and for searchable scopes. This style also affects other view types that you apply a button style to, like Toggle, Picker, and Menu instances.\n\nUse accessoryBar to construct this style.\n\nTopics\nCreating the button style\ninit()\nCreates an accessory toolbar style\nSupporting types\nfunc makeBody(configuration: AccessoryBarButtonStyle.Configuration) -> some View\nCreates a view that represents the body of a button.\nRelationships\nConforms To\nPrimitiveButtonStyle\nSee Also\nSupporting types\nstruct DefaultButtonStyle\nThe default button style, based on the button\u2019s context.\nstruct AccessoryBarActionButtonStyle\nA button style that you use for extra actions in an accessory toolbar.\nstruct BorderedButtonStyle\nA button style that applies standard border artwork based on the button\u2019s context.\nstruct BorderedProminentButtonStyle\nA button style that applies standard border prominent artwork based on the button\u2019s context.\nstruct BorderlessButtonStyle\nA button style that doesn\u2019t apply a border.\nstruct CardButtonStyle\nA button style that doesn\u2019t pad the content, and applies a motion effect when a button has focus.\nstruct LinkButtonStyle\nA button style for buttons that emulate links.\nstruct PlainButtonStyle\nA button style that doesn\u2019t style or decorate its content while idle, but may apply a visual effect to indicate the pressed, focused, or enabled state of the button."
    },
    {
        "title": "BorderlessButtonStyle",
        "url": "https://developer.apple.com/documentation/swiftui/borderlessbuttonstyle",
        "html": "Overview\n\nYou can also use borderless to construct this style.\n\nTopics\nCreating the button style\ninit()\nCreates a borderless button style.\nSupporting types\nfunc makeBody(configuration: BorderlessButtonStyle.Configuration) -> some View\nCreates a view that represents the body of a button.\nRelationships\nConforms To\nPrimitiveButtonStyle\nSee Also\nSupporting types\nstruct DefaultButtonStyle\nThe default button style, based on the button\u2019s context.\nstruct AccessoryBarButtonStyle\nA button style that you use for actions in an accessory toolbar that narrow the focus of a search or other operation.\nstruct AccessoryBarActionButtonStyle\nA button style that you use for extra actions in an accessory toolbar.\nstruct BorderedButtonStyle\nA button style that applies standard border artwork based on the button\u2019s context.\nstruct BorderedProminentButtonStyle\nA button style that applies standard border prominent artwork based on the button\u2019s context.\nstruct CardButtonStyle\nA button style that doesn\u2019t pad the content, and applies a motion effect when a button has focus.\nstruct LinkButtonStyle\nA button style for buttons that emulate links.\nstruct PlainButtonStyle\nA button style that doesn\u2019t style or decorate its content while idle, but may apply a visual effect to indicate the pressed, focused, or enabled state of the button."
    },
    {
        "title": "DefaultButtonStyle",
        "url": "https://developer.apple.com/documentation/swiftui/defaultbuttonstyle",
        "html": "Overview\n\nYou can also use automatic to construct this style.\n\nTopics\nCreating the button style\ninit()\nCreates a default button style.\nSupporting types\nfunc makeBody(configuration: DefaultButtonStyle.Configuration) -> some View\nCreates a view that represents the body of a button.\nRelationships\nConforms To\nPrimitiveButtonStyle\nSee Also\nSupporting types\nstruct AccessoryBarButtonStyle\nA button style that you use for actions in an accessory toolbar that narrow the focus of a search or other operation.\nstruct AccessoryBarActionButtonStyle\nA button style that you use for extra actions in an accessory toolbar.\nstruct BorderedButtonStyle\nA button style that applies standard border artwork based on the button\u2019s context.\nstruct BorderedProminentButtonStyle\nA button style that applies standard border prominent artwork based on the button\u2019s context.\nstruct BorderlessButtonStyle\nA button style that doesn\u2019t apply a border.\nstruct CardButtonStyle\nA button style that doesn\u2019t pad the content, and applies a motion effect when a button has focus.\nstruct LinkButtonStyle\nA button style for buttons that emulate links.\nstruct PlainButtonStyle\nA button style that doesn\u2019t style or decorate its content while idle, but may apply a visual effect to indicate the pressed, focused, or enabled state of the button."
    },
    {
        "title": "LinkButtonStyle",
        "url": "https://developer.apple.com/documentation/swiftui/linkbuttonstyle",
        "html": "Overview\n\nYou can also use link to construct this style.\n\nTopics\nCreating the button style\ninit()\nCreates a link button style.\nSupporting types\nfunc makeBody(configuration: LinkButtonStyle.Configuration) -> some View\nCreates a view that represents the body of a button.\nRelationships\nConforms To\nPrimitiveButtonStyle\nSee Also\nSupporting types\nstruct DefaultButtonStyle\nThe default button style, based on the button\u2019s context.\nstruct AccessoryBarButtonStyle\nA button style that you use for actions in an accessory toolbar that narrow the focus of a search or other operation.\nstruct AccessoryBarActionButtonStyle\nA button style that you use for extra actions in an accessory toolbar.\nstruct BorderedButtonStyle\nA button style that applies standard border artwork based on the button\u2019s context.\nstruct BorderedProminentButtonStyle\nA button style that applies standard border prominent artwork based on the button\u2019s context.\nstruct BorderlessButtonStyle\nA button style that doesn\u2019t apply a border.\nstruct CardButtonStyle\nA button style that doesn\u2019t pad the content, and applies a motion effect when a button has focus.\nstruct PlainButtonStyle\nA button style that doesn\u2019t style or decorate its content while idle, but may apply a visual effect to indicate the pressed, focused, or enabled state of the button."
    },
    {
        "title": "buildBlock()",
        "url": "https://developer.apple.com/documentation/swiftui/keyframetrackcontentbuilder/buildblock()",
        "html": "See Also\nBuilding keyframe track content\nstatic func buildArray([some KeyframeTrackContent<Value>]) -> some KeyframeTrackContent<Value>\nstatic func buildEither<First, Second>(first: First) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildEither<First, Second>(second: Second) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildExpression<K>(K) -> K\nstatic func buildPartialBlock(accumulated: some KeyframeTrackContent<Value>, next: some KeyframeTrackContent<Value>) -> some KeyframeTrackContent<Value>\nstatic func buildPartialBlock<K>(first: K) -> K\nstruct Conditional\nA conditional result from the result builder.\nAvailable when Value conforms to Animatable."
    },
    {
        "title": "ButtonStyle.Configuration",
        "url": "https://developer.apple.com/documentation/swiftui/buttonstyle/configuration",
        "html": "See Also\nCustom button styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view that represents the body of a button.\n\nRequired\n\nassociatedtype Body : View\nA view that represents the body of a button.\n\nRequired"
    },
    {
        "title": "buildArray(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/keyframetrackcontentbuilder/buildarray(_:)",
        "html": "See Also\nBuilding keyframe track content\nstatic func buildBlock() -> some KeyframeTrackContent<Value>\nstatic func buildEither<First, Second>(first: First) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildEither<First, Second>(second: Second) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildExpression<K>(K) -> K\nstatic func buildPartialBlock(accumulated: some KeyframeTrackContent<Value>, next: some KeyframeTrackContent<Value>) -> some KeyframeTrackContent<Value>\nstatic func buildPartialBlock<K>(first: K) -> K\nstruct Conditional\nA conditional result from the result builder.\nAvailable when Value conforms to Animatable."
    },
    {
        "title": "buildEither(first:)",
        "url": "https://developer.apple.com/documentation/swiftui/keyframetrackcontentbuilder/buildeither(first:)",
        "html": "See Also\nBuilding keyframe track content\nstatic func buildArray([some KeyframeTrackContent<Value>]) -> some KeyframeTrackContent<Value>\nstatic func buildBlock() -> some KeyframeTrackContent<Value>\nstatic func buildEither<First, Second>(second: Second) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildExpression<K>(K) -> K\nstatic func buildPartialBlock(accumulated: some KeyframeTrackContent<Value>, next: some KeyframeTrackContent<Value>) -> some KeyframeTrackContent<Value>\nstatic func buildPartialBlock<K>(first: K) -> K\nstruct Conditional\nA conditional result from the result builder.\nAvailable when Value conforms to Animatable."
    },
    {
        "title": "buildPartialBlock(accumulated:next:)",
        "url": "https://developer.apple.com/documentation/swiftui/keyframetrackcontentbuilder/buildpartialblock(accumulated:next:)",
        "html": "See Also\nBuilding keyframe track content\nstatic func buildArray([some KeyframeTrackContent<Value>]) -> some KeyframeTrackContent<Value>\nstatic func buildBlock() -> some KeyframeTrackContent<Value>\nstatic func buildEither<First, Second>(first: First) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildEither<First, Second>(second: Second) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildExpression<K>(K) -> K\nstatic func buildPartialBlock<K>(first: K) -> K\nstruct Conditional\nA conditional result from the result builder.\nAvailable when Value conforms to Animatable."
    },
    {
        "title": "buildPartialBlock(first:)",
        "url": "https://developer.apple.com/documentation/swiftui/keyframetrackcontentbuilder/buildpartialblock(first:)",
        "html": "See Also\nBuilding keyframe track content\nstatic func buildArray([some KeyframeTrackContent<Value>]) -> some KeyframeTrackContent<Value>\nstatic func buildBlock() -> some KeyframeTrackContent<Value>\nstatic func buildEither<First, Second>(first: First) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildEither<First, Second>(second: Second) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>\nstatic func buildExpression<K>(K) -> K\nstatic func buildPartialBlock(accumulated: some KeyframeTrackContent<Value>, next: some KeyframeTrackContent<Value>) -> some KeyframeTrackContent<Value>\nstruct Conditional\nA conditional result from the result builder.\nAvailable when Value conforms to Animatable."
    },
    {
        "title": "label",
        "url": "https://developer.apple.com/documentation/swiftui/buttonstyleconfiguration/label-swift.property",
        "html": "See Also\nConfiguring a button\u2019s label\nstruct Label\nA type-erased label of a button."
    },
    {
        "title": "label",
        "url": "https://developer.apple.com/documentation/swiftui/primitivebuttonstyleconfiguration/label-swift.property",
        "html": "See Also\nConfiguring a button\u2019s label\nstruct Label\nA type-erased label of a button."
    },
    {
        "title": "role",
        "url": "https://developer.apple.com/documentation/swiftui/primitivebuttonstyleconfiguration/role",
        "html": "Discussion\n\nA value of nil means that the Button has no assigned role. If the button does have a role, use it to make adjustments to the button\u2019s appearance. The following example shows a custom style that uses bold text when the role is cancel, red text when the role is destructive, and adds no special styling otherwise:\n\nstruct MyButtonStyle: PrimitiveButtonStyle {\n    func makeBody(configuration: Configuration) -> some View {\n        configuration.label\n            .onTapGesture {\n                configuration.trigger()\n            }\n            .font(\n                configuration.role == .cancel ? .title2.bold() : .title2)\n            .foregroundColor(\n                configuration.role == .destructive ? Color.red : nil)\n    }\n}\n\n\nYou can create one of each button using this style to see the effect:\n\nVStack(spacing: 20) {\n    Button(\"Cancel\", role: .cancel) {}\n    Button(\"Delete\", role: .destructive) {}\n    Button(\"Continue\") {}\n}\n.buttonStyle(MyButtonStyle())\n"
    },
    {
        "title": "titleOnly",
        "url": "https://developer.apple.com/documentation/swiftui/labelstyle/titleonly",
        "html": "See Also\nGetting built-in label styles\nstatic var automatic: DefaultLabelStyle\nA label style that resolves its appearance automatically based on the current context.\nAvailable when Self is DefaultLabelStyle.\nstatic var iconOnly: IconOnlyLabelStyle\nA label style that only displays the icon of the label.\nAvailable when Self is IconOnlyLabelStyle.\nstatic var titleAndIcon: TitleAndIconLabelStyle\nA label style that shows both the title and icon of the label using a system-standard layout.\nAvailable when Self is TitleAndIconLabelStyle."
    },
    {
        "title": "LabelStyle.Configuration",
        "url": "https://developer.apple.com/documentation/swiftui/labelstyle/configuration",
        "html": "See Also\nCreating custom label styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view that represents the body of a label.\n\nRequired\n\nassociatedtype Body : View\nA view that represents the body of a label.\n\nRequired"
    },
    {
        "title": "IconOnlyLabelStyle",
        "url": "https://developer.apple.com/documentation/swiftui/icononlylabelstyle",
        "html": "Overview\n\nYou can also use iconOnly to construct this style.\n\nTopics\nCreating the label style\ninit()\nCreates an icon-only label style.\nRelationships\nConforms To\nLabelStyle\nSee Also\nSupporting types\nstruct DefaultLabelStyle\nThe default label style in the current context.\nstruct TitleAndIconLabelStyle\nA label style that shows both the title and icon of the label using a system-standard layout.\nstruct TitleOnlyLabelStyle\nA label style that only displays the title of the label."
    },
    {
        "title": "init(wrappedValue:_:store:)",
        "url": "https://developer.apple.com/documentation/swiftui/appstorage/init(wrappedvalue:_:store:)-26q9z",
        "html": "Parameters\nwrappedValue\n\nThe default value if an integer value is not specified for the given key.\n\nkey\n\nThe key to read and write the value to in the user defaults store.\n\nstore\n\nThe user defaults store to read and write to. A value of nil will use the user default store from the environment.\n\nDiscussion\n\nA common usage is with enumerations:\n\nenum MyEnum: Int { case a case b case c } struct MyView: View { @AppStorage(\u201cMyEnumValue\u201d) private var value = MyEnum.a var body: some View { \u2026 } }\n\nSee Also\nStoring a value\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a string user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a user default as data.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to an integer user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a string user default, transforming that to RawRepresentable data type.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a url user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a double user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a boolean user default.\ninit<RowValue>(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can save and restore table column state.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a user default as data via PersistentIdentifier."
    },
    {
        "title": "DefaultLabelStyle",
        "url": "https://developer.apple.com/documentation/swiftui/defaultlabelstyle",
        "html": "Overview\n\nYou can also use automatic to construct this style.\n\nTopics\nCreating the label style\ninit()\nCreates an automatic label style.\nRelationships\nConforms To\nLabelStyle\nSee Also\nSupporting types\nstruct IconOnlyLabelStyle\nA label style that only displays the icon of the label.\nstruct TitleAndIconLabelStyle\nA label style that shows both the title and icon of the label using a system-standard layout.\nstruct TitleOnlyLabelStyle\nA label style that only displays the title of the label."
    },
    {
        "title": "Body",
        "url": "https://developer.apple.com/documentation/swiftui/labelstyle/body",
        "html": "Required\n\nSee Also\nCreating custom label styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view that represents the body of a label.\n\nRequired\n\ntypealias Configuration\nThe properties of a label."
    },
    {
        "title": "init(_:image:)",
        "url": "https://developer.apple.com/documentation/swiftui/label/init(_:image:)-6zbvg",
        "html": "Parameters\ntitle\n\nA string used as the label\u2019s title.\n\nimage\n\nThe name of the image resource to lookup.\n\nSee Also\nCreating a label from text and an image\ninit(LocalizedStringKey, image: String)\nCreates a label with an icon image and a title generated from a localized string.\nAvailable when Title is Text and Icon is Image."
    },
    {
        "title": "init(_:image:)",
        "url": "https://developer.apple.com/documentation/swiftui/label/init(_:image:)-mqa5",
        "html": "Parameters\ntitle\n\nA string used as the label\u2019s title.\n\nimage\n\nThe image resource to lookup.\n\nSee Also\nCreating a label from an image resource\ninit(LocalizedStringKey, image: ImageResource)\nCreates a label with an icon image and a title generated from a localized string.\nAvailable when Title is Text and Icon is Image."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/scenestorage/init(_:)-3ehpo",
        "html": "Parameters\nkey\n\na key used to save and restore the value.\n\nDiscussion\n\nDefaults to nil if there is no restored value\n\nA common usage is with enumerations:\n\nenum MyEnum: Int {\n    case a\n    case b\n    case c\n}\nstruct MyView: View {\n    @SceneStorage(\"MyEnumValue\") private var value: MyEnum?\n    var body: some View { ... }\n}\n\nSee Also\nStoring an optional value\ninit(String)\nCreates a property that can save and restore an Optional string.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional double.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional boolean.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional data.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional URL.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional integer.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit<R>(String)\nCreates a property that can save and restore an Optional string, transforming it to an Optional RawRepresentable data type.\ninit(String)\nCreates a property that can read and write an Optional data user default via PersistentIdentifier."
    },
    {
        "title": "wrappedValue",
        "url": "https://developer.apple.com/documentation/swiftui/sectionedfetchrequest/wrappedvalue",
        "html": "Discussion\n\nThis property behaves like the wrappedValue of a FetchRequest. In particular, SwiftUI returns the value associated with this property when you use SectionedFetchRequest as a property wrapper and then access the wrapped property by name. For example, consider the following quakes property declaration that fetches a Quake type that the Loading and Displaying a Large Data Feed sample code project defines:\n\n@SectionedFetchRequest<String, Quake>(\n    sectionIdentifier: \\.day,\n    sortDescriptors: [SortDescriptor(\\.time, order: .reverse)]\n)\nprivate var quakes: SectionedFetchResults<String, Quake>\n\n\nYou access the request\u2019s wrappedValue, which contains a SectionedFetchResults instance, by referring to the quakes property by name. That value is a collection of sections, each of which contains a group of managed objects:\n\nText(\"Found \\(quakes.count) days of earthquakes\")\n\n\nIf you need to separate the request and the result entities, you can declare quakes in two steps by using the request\u2019s wrappedValue to obtain the results:\n\nvar fetchRequest = SectionedFetchRequest<String, Quake>(\n    fetchRequest: request,\n    sectionIdentifier: \\.day)\nvar quakes: SectionedFetchedResults<String, Quake> { fetchRequest.wrappedValue }\n\n\nThe wrappedValue property returns an empty array when there are no fetched results; for example, because no entities satisfy the predicate, or because the data store is empty.\n\nSee Also\nGetting the fetched results\nfunc update()\nUpdates the fetched results.\nAvailable when SectionIdentifier conforms to Hashable and Result conforms to NSFetchRequestResult."
    },
    {
        "title": "init(_:image:)",
        "url": "https://developer.apple.com/documentation/swiftui/label/init(_:image:)-73eec",
        "html": "Parameters\ntitleKey\n\nA title generated from a localized string.\n\nimage\n\nThe name of the image resource to lookup.\n\nSee Also\nCreating a label from text and an image\ninit<S>(S, image: String)\nCreates a label with an icon image and a title generated from a string.\nAvailable when Title is Text and Icon is Image."
    },
    {
        "title": "nsSortDescriptors",
        "url": "https://developer.apple.com/documentation/swiftui/fetchedresults/nssortdescriptors",
        "html": "Discussion\n\nSet this value to cause the associated FetchRequest to execute a fetch with a new collection of NSSortDescriptor instances. The order of managed objects stored in the results collection may change as a result.\n\nIf you want to use SortDescriptor instances, set sortDescriptors instead.\n\nSee Also\nConfiguring the associated fetch request\nvar nsPredicate: NSPredicate?\nThe request\u2019s predicate.\nvar sortDescriptors: [SortDescriptor<Result>]\nThe request\u2019s sort descriptors, accessed as value types.\nAvailable when Result inherits NSManagedObject."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/label/init(_:)-2ue2r",
        "html": "Parameters\nconfiguration\n\nThe label style to use.\n\nDiscussion\n\nYou can use this initializer within the makeBody(configuration:) method of a LabelStyle instance to create an instance of the label that\u2019s being styled. This is useful for custom label styles that only wish to modify the current style, as opposed to implementing a brand new style.\n\nFor example, the following style adds a red border around the label, but otherwise preserves the current style:\n\nstruct RedBorderedLabelStyle: LabelStyle {\n    func makeBody(configuration: Configuration) -> some View {\n        Label(configuration)\n            .border(Color.red)\n    }\n}\n"
    },
    {
        "title": "init(wrappedValue:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/scenestorage/init(wrappedvalue:_:)-48yjd",
        "html": "Parameters\nwrappedValue\n\nThe default value if a boolean is not available for the given key.\n\nkey\n\na key used to save and restore the value.\n\nSee Also\nStoring a value\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a URL.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore an integer.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a double.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a string.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a string, transforming it to a RawRepresentable data type.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore data.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore an integer, transforming it to a RawRepresentable data type.\ninit<RowValue>(wrappedValue: Value, String)\nCreates a property that can save and restore table column state.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a PersistentIdentifier."
    },
    {
        "title": "buildLimitedAvailability(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/viewbuilder/buildlimitedavailability(_:)",
        "html": "See Also\nConditionally building content\nstatic func buildEither<TrueContent, FalseContent>(first: TrueContent) -> _ConditionalContent<TrueContent, FalseContent>\nProduces content for a conditional statement in a multi-statement closure when the condition is true.\nstatic func buildEither<TrueContent, FalseContent>(second: FalseContent) -> _ConditionalContent<TrueContent, FalseContent>\nProduces content for a conditional statement in a multi-statement closure when the condition is false.\nstatic func buildIf<Content>(Content?) -> Content?\nProduces an optional view for conditional statements in multi-statement closures that\u2019s only visible when the condition evaluates to true."
    },
    {
        "title": "buildEither(second:)",
        "url": "https://developer.apple.com/documentation/swiftui/viewbuilder/buildeither(second:)",
        "html": "See Also\nConditionally building content\nstatic func buildEither<TrueContent, FalseContent>(first: TrueContent) -> _ConditionalContent<TrueContent, FalseContent>\nProduces content for a conditional statement in a multi-statement closure when the condition is true.\nstatic func buildIf<Content>(Content?) -> Content?\nProduces an optional view for conditional statements in multi-statement closures that\u2019s only visible when the condition evaluates to true.\nstatic func buildLimitedAvailability<Content>(Content) -> AnyView\nProcesses view content for a conditional compiler-control statement that performs an availability check."
    },
    {
        "title": "AutomaticTextEditorStyle",
        "url": "https://developer.apple.com/documentation/swiftui/automatictexteditorstyle",
        "html": "Overview\n\nYou can also use automatic to construct this style.\n\nTopics\nCreating the text editor style\ninit()\nRelationships\nConforms To\nTextEditorStyle\nSee Also\nSupporting types\nstruct PlainTextEditorStyle\nA text editor style with no decoration.\nstruct RoundedBorderTextEditorStyle\nA text editor style with a system-defined rounded border.\nBeta"
    },
    {
        "title": "init(wrappedValue:_:store:)",
        "url": "https://developer.apple.com/documentation/swiftui/appstorage/init(wrappedvalue:_:store:)-33hrf",
        "html": "Parameters\nwrappedValue\n\nThe default value if a data value is not specified for the given key.\n\nkey\n\nThe key to read and write the value to in the user defaults store.\n\nstore\n\nThe user defaults store to read and write to. A value of nil will use the user default store from the environment.\n\nDiscussion\n\nAvoid storing large data blobs in user defaults, such as image data, as it can negatively affect performance of your app. On tvOS, a NSUserDefaultsSizeLimitExceededNotification notification is posted if the total user default size reaches 512kB.\n\nSee Also\nStoring a value\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a string user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to an integer user default, transforming that to RawRepresentable data type.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to an integer user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a string user default, transforming that to RawRepresentable data type.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a url user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a double user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a boolean user default.\ninit<RowValue>(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can save and restore table column state.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a user default as data via PersistentIdentifier."
    },
    {
        "title": "makeBody(configuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/texteditorstyle/makebody(configuration:)",
        "html": "Required\n\nParameters\nconfiguration\n\nThe properties of the text editor.\n\nDiscussion\n\nThe system calls this method for each TextEditor instance in a view hierarchy where this style is the current text editor style.\n\nSee Also\nCreating custom styles\ntypealias Configuration\nThe properties of a text editor.\nassociatedtype Body : View\nA view that represents the body of a text editor.\n\nRequired"
    },
    {
        "title": "roundedBorder",
        "url": "https://developer.apple.com/documentation/swiftui/texteditorstyle/roundedborder",
        "html": "See Also\nGetting built-in styles\nstatic var automatic: AutomaticTextEditorStyle\nThe default text editor style, based on the text editor\u2019s context.\nAvailable when Self is AutomaticTextEditorStyle.\nstatic var plain: PlainTextEditorStyle\nA text editor style with no decoration.\nAvailable when Self is PlainTextEditorStyle."
    },
    {
        "title": "TextEditorStyle.Configuration",
        "url": "https://developer.apple.com/documentation/swiftui/texteditorstyle/configuration",
        "html": "See Also\nCreating custom styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view that represents the body of a text editor.\n\nRequired\n\nassociatedtype Body : View\nA view that represents the body of a text editor.\n\nRequired"
    },
    {
        "title": "PlainTextEditorStyle",
        "url": "https://developer.apple.com/documentation/swiftui/plaintexteditorstyle",
        "html": "Overview\n\nYou can also use plain to create this style.\n\nTopics\nCreating the text editor style\ninit()\nRelationships\nConforms To\nTextEditorStyle\nSee Also\nSupporting types\nstruct AutomaticTextEditorStyle\nThe default text editor style, based on the text editor\u2019s context.\nstruct RoundedBorderTextEditorStyle\nA text editor style with a system-defined rounded border.\nBeta"
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/labelstyle/automatic",
        "html": "See Also\nGetting built-in label styles\nstatic var iconOnly: IconOnlyLabelStyle\nA label style that only displays the icon of the label.\nAvailable when Self is IconOnlyLabelStyle.\nstatic var titleAndIcon: TitleAndIconLabelStyle\nA label style that shows both the title and icon of the label using a system-standard layout.\nAvailable when Self is TitleAndIconLabelStyle.\nstatic var titleOnly: TitleOnlyLabelStyle\nA label style that only displays the title of the label.\nAvailable when Self is TitleOnlyLabelStyle."
    },
    {
        "title": "icon",
        "url": "https://developer.apple.com/documentation/swiftui/labelstyleconfiguration/icon-swift.property",
        "html": "See Also\nSetting the icon\nstruct Icon\nA type-erased icon view of a label."
    },
    {
        "title": "value",
        "url": "https://developer.apple.com/documentation/swiftui/tupleview/value",
        "html": "See Also\nCreating a tuple view\ninit(T)"
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/formstyle/automatic",
        "html": "See Also\nGetting built-in form styles\nstatic var columns: ColumnsFormStyle\nA non-scrolling form style with a trailing aligned column of labels next to a leading aligned column of values.\nAvailable when Self is ColumnsFormStyle.\nstatic var grouped: GroupedFormStyle\nA form style with grouped rows.\nAvailable when Self is GroupedFormStyle."
    },
    {
        "title": "init(fetchRequest:transaction:)",
        "url": "https://developer.apple.com/documentation/swiftui/fetchrequest/init(fetchrequest:transaction:)",
        "html": "Parameters\nfetchRequest\n\nAn NSFetchRequest instance that describes the search criteria for retrieving data from the persistent store.\n\ntransaction\n\nA transaction to use for user interface changes that result from changes to the fetched results.\n\nDiscussion\n\nUse this initializer if you need a fetch request with updates that affect the user interface based on a Transaction. Otherwise, use init(fetchRequest:animation:).\n\nSee Also\nCreating a fully configured fetch request\ninit(fetchRequest: NSFetchRequest<Result>, animation: Animation?)\nCreates a fully configured fetch request that uses the specified animation when updating results.\nAvailable when Result conforms to NSFetchRequestResult."
    },
    {
        "title": "NavigationControlGroupStyle",
        "url": "https://developer.apple.com/documentation/swiftui/navigationcontrolgroupstyle",
        "html": "Overview\n\nYou can also use navigation to construct this style.\n\nTopics\nCreating the control group style\ninit()\nCreates a navigation control group style.\nRelationships\nConforms To\nControlGroupStyle\nSee Also\nSupporting types\nstruct AutomaticControlGroupStyle\nThe default control group style.\nstruct CompactMenuControlGroupStyle\nA control group style that presents its content as a compact menu when the user presses the control, or as a submenu when nested within a larger menu.\nstruct MenuControlGroupStyle\nA control group style that presents its content as a menu when the user presses the control, or as a submenu when nested within a larger menu.\nstruct PaletteControlGroupStyle\nA control group style that presents its content as a palette."
    },
    {
        "title": "Body",
        "url": "https://developer.apple.com/documentation/swiftui/controlgroupstyle/body",
        "html": "Required\n\nSee Also\nCreating custom control group styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view representing the body of a control group.\n\nRequired\n\ntypealias Configuration\nThe properties of a ControlGroup instance being created."
    },
    {
        "title": "makeBody(configuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/controlgroupstyle/makebody(configuration:)",
        "html": "Required\n\nParameters\nconfiguration\n\nThe properties of the control group instance being created.\n\nDiscussion\n\nThis method will be called for each instance of ControlGroup created within a view hierarchy where this style is the current ControlGroupStyle.\n\nSee Also\nCreating custom control group styles\ntypealias Configuration\nThe properties of a ControlGroup instance being created.\nassociatedtype Body : View\nA view representing the body of a control group.\n\nRequired"
    },
    {
        "title": "columns",
        "url": "https://developer.apple.com/documentation/swiftui/formstyle/columns",
        "html": "See Also\nGetting built-in form styles\nstatic var automatic: AutomaticFormStyle\nThe default form style.\nAvailable when Self is AutomaticFormStyle.\nstatic var grouped: GroupedFormStyle\nA form style with grouped rows.\nAvailable when Self is GroupedFormStyle."
    },
    {
        "title": "AutomaticControlGroupStyle",
        "url": "https://developer.apple.com/documentation/swiftui/automaticcontrolgroupstyle",
        "html": "Overview\n\nYou can also use automatic to construct this style.\n\nRelationships\nConforms To\nControlGroupStyle\nSee Also\nSupporting types\nstruct CompactMenuControlGroupStyle\nA control group style that presents its content as a compact menu when the user presses the control, or as a submenu when nested within a larger menu.\nstruct MenuControlGroupStyle\nA control group style that presents its content as a menu when the user presses the control, or as a submenu when nested within a larger menu.\nstruct NavigationControlGroupStyle\nThe navigation control group style.\nstruct PaletteControlGroupStyle\nA control group style that presents its content as a palette."
    },
    {
        "title": "menu",
        "url": "https://developer.apple.com/documentation/swiftui/controlgroupstyle/menu",
        "html": "Discussion\n\nTo apply this style to a control group, or to a view that contains control groups, use the controlGroupStyle(_:) modifier.\n\nSee Also\nGetting built-in control group styles\nstatic var automatic: AutomaticControlGroupStyle\nThe default control group style.\nAvailable when Self is AutomaticControlGroupStyle.\nstatic var compactMenu: CompactMenuControlGroupStyle\nA control group style that presents its content as a compact menu when the user presses the control, or as a submenu when nested within a larger menu.\nAvailable when Self is CompactMenuControlGroupStyle.\nstatic var navigation: NavigationControlGroupStyle\nThe navigation control group style.\nAvailable when Self is NavigationControlGroupStyle.\nstatic var palette: PaletteControlGroupStyle\nA control group style that presents its content as a palette.\nAvailable when Self is PaletteControlGroupStyle."
    },
    {
        "title": "palette",
        "url": "https://developer.apple.com/documentation/swiftui/controlgroupstyle/palette",
        "html": "Discussion\n\nNote\n\nWhen used outside of menus, this style is rendered as a segmented control.\n\nUse this style to render a multi-select or a stateless palette. The following example creates a control group that contains both type of shelves:\n\nMenu {\n    // A multi select palette\n    ControlGroup {\n        ForEach(ColorTags.allCases) { colorTag in\n            Toggle(isOn: $selectedColorTags[colorTag]) {\n                Label(colorTag.name, systemImage: \"circle\")\n            }\n            .tint(colorTag.color)\n        }\n    }\n    .controlGroupStyle(.palette)\n    .paletteSelectionEffect(.symbolVariant(.fill))\n\n\n    // A momentary / stateless palette\n    ControlGroup {\n        ForEach(Emotes.allCases) { emote in\n            Button {\n                sendEmote(emote)\n            } label: {\n                Label(emote.name, systemImage: emote.systemImage)\n            }\n        }\n    }\n    .controlGroupStyle(.palette)\n}\n\n\nTo apply this style to a control group, or to a view that contains control groups, use the controlGroupStyle(_:) modifier.\n\nSee Also\nGetting built-in control group styles\nstatic var automatic: AutomaticControlGroupStyle\nThe default control group style.\nAvailable when Self is AutomaticControlGroupStyle.\nstatic var compactMenu: CompactMenuControlGroupStyle\nA control group style that presents its content as a compact menu when the user presses the control, or as a submenu when nested within a larger menu.\nAvailable when Self is CompactMenuControlGroupStyle.\nstatic var menu: MenuControlGroupStyle\nA control group style that presents its content as a menu when the user presses the control, or as a submenu when nested within a larger menu.\nAvailable when Self is MenuControlGroupStyle.\nstatic var navigation: NavigationControlGroupStyle\nThe navigation control group style.\nAvailable when Self is NavigationControlGroupStyle."
    },
    {
        "title": "CompactMenuControlGroupStyle",
        "url": "https://developer.apple.com/documentation/swiftui/compactmenucontrolgroupstyle",
        "html": "Overview\n\nUse compactMenu to construct this style.\n\nTopics\nCreating the control group style\ninit()\nCreates a compact menu control group style.\nRelationships\nConforms To\nControlGroupStyle\nSee Also\nSupporting types\nstruct AutomaticControlGroupStyle\nThe default control group style.\nstruct MenuControlGroupStyle\nA control group style that presents its content as a menu when the user presses the control, or as a submenu when nested within a larger menu.\nstruct NavigationControlGroupStyle\nThe navigation control group style.\nstruct PaletteControlGroupStyle\nA control group style that presents its content as a palette."
    },
    {
        "title": "PaletteControlGroupStyle",
        "url": "https://developer.apple.com/documentation/swiftui/palettecontrolgroupstyle",
        "html": "Overview\n\nUse palette to construct this style.\n\nTopics\nCreating the control group style\ninit()\nCreates a palette control group style.\nRelationships\nConforms To\nControlGroupStyle\nSee Also\nSupporting types\nstruct AutomaticControlGroupStyle\nThe default control group style.\nstruct CompactMenuControlGroupStyle\nA control group style that presents its content as a compact menu when the user presses the control, or as a submenu when nested within a larger menu.\nstruct MenuControlGroupStyle\nA control group style that presents its content as a menu when the user presses the control, or as a submenu when nested within a larger menu.\nstruct NavigationControlGroupStyle\nThe navigation control group style."
    },
    {
        "title": "ControlGroupStyle.Configuration",
        "url": "https://developer.apple.com/documentation/swiftui/controlgroupstyle/configuration",
        "html": "See Also\nCreating custom control group styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view representing the body of a control group.\n\nRequired\n\nassociatedtype Body : View\nA view representing the body of a control group.\n\nRequired"
    },
    {
        "title": "makeBody(configuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/groupboxstyle/makebody(configuration:)",
        "html": "Required\n\nParameters\nconfiguration\n\nThe properties of the group box instance being created.\n\nDiscussion\n\nSwiftUI calls this method for each instance of GroupBox created within a view hierarchy where this style is the current group box style.\n\nSee Also\nCreating custom group box styles\ntypealias Configuration\nThe properties of a group box instance.\nassociatedtype Body : View\nA view that represents the body of a group box.\n\nRequired"
    },
    {
        "title": "Body",
        "url": "https://developer.apple.com/documentation/swiftui/groupboxstyle/body",
        "html": "Required\n\nSee Also\nCreating custom group box styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view representing the body of a group box.\n\nRequired\n\ntypealias Configuration\nThe properties of a group box instance."
    },
    {
        "title": "grouped",
        "url": "https://developer.apple.com/documentation/swiftui/formstyle/grouped",
        "html": "Discussion\n\nRows in a grouped rows form have leading aligned labels and trailing aligned controls within visually grouped sections.\n\nSee Also\nGetting built-in form styles\nstatic var automatic: AutomaticFormStyle\nThe default form style.\nAvailable when Self is AutomaticFormStyle.\nstatic var columns: ColumnsFormStyle\nA non-scrolling form style with a trailing aligned column of labels next to a leading aligned column of values.\nAvailable when Self is ColumnsFormStyle."
    },
    {
        "title": "GroupBoxStyle.Configuration",
        "url": "https://developer.apple.com/documentation/swiftui/groupboxstyle/configuration",
        "html": "See Also\nCreating custom group box styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view representing the body of a group box.\n\nRequired\n\nassociatedtype Body : View\nA view that represents the body of a group box.\n\nRequired"
    },
    {
        "title": "DefaultGroupBoxStyle",
        "url": "https://developer.apple.com/documentation/swiftui/defaultgroupboxstyle",
        "html": "Overview\n\nYou can also use automatic to construct this style.\n\nTopics\nCreating the group box style\ninit()\nRelationships\nConforms To\nGroupBoxStyle"
    },
    {
        "title": "compactMenu",
        "url": "https://developer.apple.com/documentation/swiftui/controlgroupstyle/compactmenu",
        "html": "Discussion\n\nTo apply this style to a control group, or to a view that contains control groups, use the controlGroupStyle(_:) modifier.\n\nSee Also\nGetting built-in control group styles\nstatic var automatic: AutomaticControlGroupStyle\nThe default control group style.\nAvailable when Self is AutomaticControlGroupStyle.\nstatic var menu: MenuControlGroupStyle\nA control group style that presents its content as a menu when the user presses the control, or as a submenu when nested within a larger menu.\nAvailable when Self is MenuControlGroupStyle.\nstatic var navigation: NavigationControlGroupStyle\nThe navigation control group style.\nAvailable when Self is NavigationControlGroupStyle.\nstatic var palette: PaletteControlGroupStyle\nA control group style that presents its content as a palette.\nAvailable when Self is PaletteControlGroupStyle."
    },
    {
        "title": "page",
        "url": "https://developer.apple.com/documentation/swiftui/indexviewstyle/page",
        "html": "See Also\nGetting built-in index view styles\nstatic func page(backgroundDisplayMode: PageIndexViewStyle.BackgroundDisplayMode) -> PageIndexViewStyle\nAn index view style that places a page index view over its content.\nAvailable when Self is PageIndexViewStyle."
    },
    {
        "title": "makeBody(configuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/formstyle/makebody(configuration:)",
        "html": "Required\n\nParameters\nconfiguration\n\nThe properties of the form.\n\nReturn Value\n\nA view that has behavior and appearance that enables it to function as a Form.\n\nSee Also\nCreating custom form styles\ntypealias Configuration\nThe properties of a form instance.\nassociatedtype Body : View\nA view that represents the appearance and interaction of a form.\n\nRequired"
    },
    {
        "title": "PlainTextFieldStyle",
        "url": "https://developer.apple.com/documentation/swiftui/plaintextfieldstyle",
        "html": "Overview\n\nYou can also use plain to construct this style.\n\nTopics\nCreating the text field style\ninit()\nRelationships\nConforms To\nTextFieldStyle\nSee Also\nSupporting types\nstruct DefaultTextFieldStyle\nThe default text field style, based on the text field\u2019s context.\nstruct RoundedBorderTextFieldStyle\nA text field style with a system-defined rounded border.\nstruct SquareBorderTextFieldStyle\nA text field style with a system-defined square border."
    },
    {
        "title": "DefaultTextFieldStyle",
        "url": "https://developer.apple.com/documentation/swiftui/defaulttextfieldstyle",
        "html": "Overview\n\nYou can also use automatic to construct this style.\n\nTopics\nCreating the text field style\ninit()\nRelationships\nConforms To\nTextFieldStyle\nSee Also\nSupporting types\nstruct PlainTextFieldStyle\nA text field style with no decoration.\nstruct RoundedBorderTextFieldStyle\nA text field style with a system-defined rounded border.\nstruct SquareBorderTextFieldStyle\nA text field style with a system-defined square border."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/textfieldstyle/automatic",
        "html": "Discussion\n\nThe default style represents the recommended style based on the current platform and the text field\u2019s context within the view hierarchy.\n\nSee Also\nGetting built-in text field styles\nstatic var plain: PlainTextFieldStyle\nA text field style with no decoration.\nAvailable when Self is PlainTextFieldStyle.\nstatic var roundedBorder: RoundedBorderTextFieldStyle\nA text field style with a system-defined rounded border.\nAvailable when Self is RoundedBorderTextFieldStyle.\nstatic var squareBorder: SquareBorderTextFieldStyle\nA text field style with a system-defined square border.\nAvailable when Self is SquareBorderTextFieldStyle."
    },
    {
        "title": "plain",
        "url": "https://developer.apple.com/documentation/swiftui/textfieldstyle/plain",
        "html": "See Also\nGetting built-in text field styles\nstatic var automatic: DefaultTextFieldStyle\nThe default text field style, based on the text field\u2019s context.\nAvailable when Self is DefaultTextFieldStyle.\nstatic var roundedBorder: RoundedBorderTextFieldStyle\nA text field style with a system-defined rounded border.\nAvailable when Self is RoundedBorderTextFieldStyle.\nstatic var squareBorder: SquareBorderTextFieldStyle\nA text field style with a system-defined square border.\nAvailable when Self is SquareBorderTextFieldStyle."
    },
    {
        "title": "roundedBorder",
        "url": "https://developer.apple.com/documentation/swiftui/textfieldstyle/roundedborder",
        "html": "See Also\nGetting built-in text field styles\nstatic var automatic: DefaultTextFieldStyle\nThe default text field style, based on the text field\u2019s context.\nAvailable when Self is DefaultTextFieldStyle.\nstatic var plain: PlainTextFieldStyle\nA text field style with no decoration.\nAvailable when Self is PlainTextFieldStyle.\nstatic var squareBorder: SquareBorderTextFieldStyle\nA text field style with a system-defined square border.\nAvailable when Self is SquareBorderTextFieldStyle."
    },
    {
        "title": "squareBorder",
        "url": "https://developer.apple.com/documentation/swiftui/textfieldstyle/squareborder",
        "html": "See Also\nGetting built-in text field styles\nstatic var automatic: DefaultTextFieldStyle\nThe default text field style, based on the text field\u2019s context.\nAvailable when Self is DefaultTextFieldStyle.\nstatic var plain: PlainTextFieldStyle\nA text field style with no decoration.\nAvailable when Self is PlainTextFieldStyle.\nstatic var roundedBorder: RoundedBorderTextFieldStyle\nA text field style with a system-defined rounded border.\nAvailable when Self is RoundedBorderTextFieldStyle."
    },
    {
        "title": "RoundedBorderTextFieldStyle",
        "url": "https://developer.apple.com/documentation/swiftui/roundedbordertextfieldstyle",
        "html": "Overview\n\nYou can also use roundedBorder to construct this style.\n\nTopics\nCreating the text field style\ninit()\nRelationships\nConforms To\nTextFieldStyle\nSee Also\nSupporting types\nstruct DefaultTextFieldStyle\nThe default text field style, based on the text field\u2019s context.\nstruct PlainTextFieldStyle\nA text field style with no decoration.\nstruct SquareBorderTextFieldStyle\nA text field style with a system-defined square border."
    },
    {
        "title": "init(_:image:)",
        "url": "https://developer.apple.com/documentation/swiftui/label/init(_:image:)-7or2",
        "html": "Parameters\ntitleKey\n\nA title generated from a localized string.\n\nimage\n\nThe image resource to lookup.\n\nSee Also\nCreating a label from an image resource\ninit<S>(S, image: ImageResource)\nCreates a label with an icon image and a title generated from a string.\nAvailable when Title is Text and Icon is Image."
    },
    {
        "title": "SectionedFetchRequest.Configuration",
        "url": "https://developer.apple.com/documentation/swiftui/sectionedfetchrequest/configuration",
        "html": "Overview\n\nYou initialize a SectionedFetchRequest with a section identifier, an optional predicate, and sort descriptors, either explicitly or with a configured NSFetchRequest. Later, you can dynamically update the identifier, predicate, and sort parameters using the request\u2019s configuration structure.\n\nYou access or bind to a request\u2019s configuration components through properties on the associated SectionedFetchResults instance, just like you do for a FetchRequest using FetchRequest.Configuration.\n\nWhen configuring a sectioned fetch request, ensure that the combination of the section identifier and the primary sort descriptor doesn\u2019t create discontiguous sections.\n\nTopics\nSetting the section identifier\nvar sectionIdentifier: KeyPath<Result, SectionIdentifier>\nThe request\u2019s section identifier key path.\nSetting a predicate\nvar nsPredicate: NSPredicate?\nThe request\u2019s predicate.\nSetting sort descriptors\nvar sortDescriptors: [SortDescriptor<Result>]\nThe request\u2019s sort descriptors, accessed as value types.\nAvailable when SectionIdentifier conforms to Hashable and Result inherits NSManagedObject.\nvar nsSortDescriptors: [NSSortDescriptor]\nThe request\u2019s sort descriptors, accessed as reference types.\nSee Also\nConfiguring a request dynamically\nvar projectedValue: Binding<SectionedFetchRequest<SectionIdentifier, Result>.Configuration>\nA binding to the request\u2019s mutable configuration properties."
    },
    {
        "title": "projectedValue",
        "url": "https://developer.apple.com/documentation/swiftui/sectionedfetchrequest/projectedvalue",
        "html": "Discussion\n\nThis property behaves like the projectedValue of a FetchRequest. In particular, SwiftUI returns the value associated with this property when you use SectionedFetchRequest as a property wrapper on a SectionedFetchResults instance and then access the results with a dollar sign ($) prefix. The value that SwiftUI returns is a Binding to the request\u2019s SectionedFetchRequest.Configuration structure, which dynamically configures the request.\n\nSee Also\nConfiguring a request dynamically\nstruct Configuration\nThe request\u2019s configurable properties."
    },
    {
        "title": "sortDescriptors",
        "url": "https://developer.apple.com/documentation/swiftui/fetchedresults/sortdescriptors",
        "html": "Discussion\n\nSet this value to cause the associated FetchRequest to execute a fetch with a new collection of SortDescriptor instances. The order of entities stored in the results collection may change as a result.\n\nIf you want to use NSSortDescriptor instances, set nsSortDescriptors instead.\n\nSee Also\nConfiguring the associated fetch request\nvar nsPredicate: NSPredicate?\nThe request\u2019s predicate.\nvar nsSortDescriptors: [NSSortDescriptor]\nThe request\u2019s sort descriptors, accessed as reference types."
    },
    {
        "title": "update()",
        "url": "https://developer.apple.com/documentation/swiftui/sectionedfetchrequest/update()",
        "html": "Discussion\n\nSwiftUI calls this function before rendering a view\u2019s body to ensure the view has the most recent fetched results.\n\nSee Also\nGetting the fetched results\nvar wrappedValue: SectionedFetchResults<SectionIdentifier, Result>\nThe fetched results of the fetch request."
    },
    {
        "title": "init(entity:sectionIdentifier:sortDescriptors:predicate:animation:)",
        "url": "https://developer.apple.com/documentation/swiftui/sectionedfetchrequest/init(entity:sectionidentifier:sortdescriptors:predicate:animation:)",
        "html": "Parameters\nentity\n\nThe description of the Core Data entity to fetch.\n\nsectionIdentifier\n\nA key path that SwiftUI applies to the Result type to get an object\u2019s section identifier.\n\nsortDescriptors\n\nAn array of sort descriptors that define the sort order of the fetched results.\n\npredicate\n\nAn NSPredicate instance that defines logical conditions used to filter the fetched results.\n\nanimation\n\nThe animation to use for user interface changes that result from changes to the fetched results.\n\nDiscussion\n\nUse this initializer if you need to explicitly specify the entity type for the request. If you specify a placeholder Result type in the request declaration, use the init(sectionIdentifier:sortDescriptors:predicate:animation:) initializer to let the request infer the entity type. If you need more control over the fetch request configuration, use init(fetchRequest:sectionIdentifier:animation:).\n\nSee Also\nCreating a fetch request\ninit(sectionIdentifier: KeyPath<Result, SectionIdentifier>, sortDescriptors: [SortDescriptor<Result>], predicate: NSPredicate?, animation: Animation?)\nCreates a sectioned fetch request based on a section identifier, a predicate, and value type sort parameters.\nAvailable when SectionIdentifier conforms to Hashable and Result inherits NSManagedObject.\ninit(sectionIdentifier: KeyPath<Result, SectionIdentifier>, sortDescriptors: [NSSortDescriptor], predicate: NSPredicate?, animation: Animation?)\nCreates a sectioned fetch request based on a section identifier, a predicate, and reference type sort parameters.\nAvailable when SectionIdentifier conforms to Hashable and Result inherits NSManagedObject."
    },
    {
        "title": "init(sectionIdentifier:sortDescriptors:predicate:animation:)",
        "url": "https://developer.apple.com/documentation/swiftui/sectionedfetchrequest/init(sectionidentifier:sortdescriptors:predicate:animation:)-5l7hu",
        "html": "Parameters\nsectionIdentifier\n\nA key path that SwiftUI applies to the Result type to get an object\u2019s section identifier.\n\nsortDescriptors\n\nAn array of sort descriptors that define the sort order of the fetched results.\n\npredicate\n\nAn NSPredicate instance that defines logical conditions used to filter the fetched results.\n\nanimation\n\nThe animation to use for user interface changes that result from changes to the fetched results.\n\nDiscussion\n\nThe request gets the entity type from the Result instance by calling that managed object\u2019s entity() type method. If you need to specify the entity type explicitly, use the init(entity:sectionIdentifier:sortDescriptors:predicate:animation:) initializer instead. If you need more control over the fetch request configuration, use init(fetchRequest:sectionIdentifier:animation:). For reference type sort descriptors, use init(sectionIdentifier:sortDescriptors:predicate:animation:).\n\nSee Also\nCreating a fetch request\ninit(sectionIdentifier: KeyPath<Result, SectionIdentifier>, sortDescriptors: [NSSortDescriptor], predicate: NSPredicate?, animation: Animation?)\nCreates a sectioned fetch request based on a section identifier, a predicate, and reference type sort parameters.\nAvailable when SectionIdentifier conforms to Hashable and Result inherits NSManagedObject.\ninit(entity: NSEntityDescription, sectionIdentifier: KeyPath<Result, SectionIdentifier>, sortDescriptors: [NSSortDescriptor], predicate: NSPredicate?, animation: Animation?)\nCreates a sectioned fetch request for a specified entity description, based on a section identifier, a predicate, and sort parameters.\nAvailable when SectionIdentifier conforms to Hashable and Result conforms to NSFetchRequestResult."
    },
    {
        "title": "DynamicProperty Implementations",
        "url": "https://developer.apple.com/documentation/swiftui/sectionedfetchrequest/dynamicproperty-implementations",
        "html": "Topics\nInstance Methods\nfunc update()\nUpdates the fetched results.\nAvailable when SectionIdentifier conforms to Hashable and Result conforms to NSFetchRequestResult."
    },
    {
        "title": "startIndex",
        "url": "https://developer.apple.com/documentation/swiftui/fetchedresults/startindex",
        "html": "See Also\nGetting indices\nvar endIndex: Int\nThe index that\u2019s one greater than the last valid subscript argument."
    },
    {
        "title": "nsPredicate",
        "url": "https://developer.apple.com/documentation/swiftui/fetchedresults/nspredicate",
        "html": "Discussion\n\nSet this value to cause the associated FetchRequest to execute a fetch with a new predicate, producing an updated collection of results.\n\nSee Also\nConfiguring the associated fetch request\nvar sortDescriptors: [SortDescriptor<Result>]\nThe request\u2019s sort descriptors, accessed as value types.\nAvailable when Result inherits NSManagedObject.\nvar nsSortDescriptors: [NSSortDescriptor]\nThe request\u2019s sort descriptors, accessed as reference types."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/texteditorstyle/automatic",
        "html": "Discussion\n\nThe default style represents the recommended style based on the current platform and the text editor\u2019s context within the view hierarchy.\n\nSee Also\nGetting built-in styles\nstatic var plain: PlainTextEditorStyle\nA text editor style with no decoration.\nAvailable when Self is PlainTextEditorStyle.\nstatic var roundedBorder: RoundedBorderTextEditorStyle\nA text editor style with a system-defined rounded border.\nAvailable when Self is RoundedBorderTextEditorStyle.\nBeta"
    },
    {
        "title": "Body",
        "url": "https://developer.apple.com/documentation/swiftui/texteditorstyle/body",
        "html": "Required\n\nSee Also\nCreating custom styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view that represents the body of a text editor.\n\nRequired\n\ntypealias Configuration\nThe properties of a text editor."
    },
    {
        "title": "init(sectionIdentifier:sortDescriptors:predicate:animation:)",
        "url": "https://developer.apple.com/documentation/swiftui/sectionedfetchrequest/init(sectionidentifier:sortdescriptors:predicate:animation:)-5lpfo",
        "html": "Parameters\nsectionIdentifier\n\nA key path that SwiftUI applies to the Result type to get an object\u2019s section identifier.\n\nsortDescriptors\n\nAn array of sort descriptors that define the sort order of the fetched results.\n\npredicate\n\nAn NSPredicate instance that defines logical conditions used to filter the fetched results.\n\nanimation\n\nThe animation to use for user interface changes that result from changes to the fetched results.\n\nDiscussion\n\nThe request gets the entity type from the Result instance by calling that managed object\u2019s entity() type method. If you need to specify the entity type explicitly, use the init(entity:sectionIdentifier:sortDescriptors:predicate:animation:) initializer instead. If you need more control over the fetch request configuration, use init(fetchRequest:sectionIdentifier:animation:). For value type sort descriptors, use init(sectionIdentifier:sortDescriptors:predicate:animation:).\n\nSee Also\nCreating a fetch request\ninit(sectionIdentifier: KeyPath<Result, SectionIdentifier>, sortDescriptors: [SortDescriptor<Result>], predicate: NSPredicate?, animation: Animation?)\nCreates a sectioned fetch request based on a section identifier, a predicate, and value type sort parameters.\nAvailable when SectionIdentifier conforms to Hashable and Result inherits NSManagedObject.\ninit(entity: NSEntityDescription, sectionIdentifier: KeyPath<Result, SectionIdentifier>, sortDescriptors: [NSSortDescriptor], predicate: NSPredicate?, animation: Animation?)\nCreates a sectioned fetch request for a specified entity description, based on a section identifier, a predicate, and sort parameters.\nAvailable when SectionIdentifier conforms to Hashable and Result conforms to NSFetchRequestResult."
    },
    {
        "title": "init(fetchRequest:sectionIdentifier:animation:)",
        "url": "https://developer.apple.com/documentation/swiftui/sectionedfetchrequest/init(fetchrequest:sectionidentifier:animation:)",
        "html": "Parameters\nfetchRequest\n\nAn NSFetchRequest instance that describes the search criteria for retrieving data from the persistent store.\n\nsectionIdentifier\n\nA key path that SwiftUI applies to the Result type to get an object\u2019s section identifier.\n\nanimation\n\nThe animation to use for user interface changes that result from changes to the fetched results.\n\nDiscussion\n\nUse this initializer when you want to configure a fetch request with more than a predicate and sort descriptors. For example, you can vend a request from a Quake managed object that the Loading and Displaying a Large Data Feed sample code project defines to store earthquake data. Limit the number of results to 1000 by setting a fetchLimit for the request:\n\nextension Quake {\n    var request: NSFetchRequest<Quake> {\n        let request = NSFetchRequest<Quake>(entityName: \"Quake\")\n        request.sortDescriptors = [\n            NSSortDescriptor(\n                keyPath: \\Quake.time,\n                ascending: true)]\n        request.fetchLimit = 1000\n        return request\n    }\n}\n\n\nUse the request to define a SectionedFetchedResults property:\n\n@SectionedFetchRequest<String, Quake>(\n    fetchRequest: Quake.request,\n    sectionIdentifier: \\.day)\nprivate var quakes: FetchedResults<String, Quake>\n\n\nIf you only need to configure the request\u2019s section identifier, predicate, and sort descriptors, use init(sectionIdentifier:sortDescriptors:predicate:animation:) instead. If you need to specify a Transaction rather than an optional Animation, use init(fetchRequest:sectionIdentifier:transaction:).\n\nSee Also\nCreating a fully configured fetch request\ninit(fetchRequest: NSFetchRequest<Result>, sectionIdentifier: KeyPath<Result, SectionIdentifier>, transaction: Transaction)\nCreates a fully configured sectioned fetch request that uses the specified transaction when updating results.\nAvailable when SectionIdentifier conforms to Hashable and Result conforms to NSFetchRequestResult."
    },
    {
        "title": "endIndex",
        "url": "https://developer.apple.com/documentation/swiftui/fetchedresults/endindex",
        "html": "See Also\nGetting indices\nvar startIndex: Int\nThe index of the first entity in the results collection."
    },
    {
        "title": "init(wrappedValue:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/scenestorage/init(wrappedvalue:_:)-2vvmx",
        "html": "Parameters\nwrappedValue\n\nThe default value if a URL is not available for the given key.\n\nkey\n\na key used to save and restore the value.\n\nSee Also\nStoring a value\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore an integer.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a double.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a string.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a boolean.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a string, transforming it to a RawRepresentable data type.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore data.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore an integer, transforming it to a RawRepresentable data type.\ninit<RowValue>(wrappedValue: Value, String)\nCreates a property that can save and restore table column state.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a PersistentIdentifier."
    },
    {
        "title": "init(fetchRequest:sectionIdentifier:transaction:)",
        "url": "https://developer.apple.com/documentation/swiftui/sectionedfetchrequest/init(fetchrequest:sectionidentifier:transaction:)",
        "html": "Parameters\nfetchRequest\n\nAn NSFetchRequest instance that describes the search criteria for retrieving data from the persistent store.\n\nsectionIdentifier\n\nA key path that SwiftUI applies to the Result type to get an object\u2019s section identifier.\n\ntransaction\n\nA transaction to use for user interface changes that result from changes to the fetched results.\n\nDiscussion\n\nUse this initializer if you need a fetch request with updates that affect the user interface based on a Transaction. Otherwise, use init(fetchRequest:sectionIdentifier:animation:).\n\nSee Also\nCreating a fully configured fetch request\ninit(fetchRequest: NSFetchRequest<Result>, sectionIdentifier: KeyPath<Result, SectionIdentifier>, animation: Animation?)\nCreates a fully configured sectioned fetch request that uses the specified animation when updating results.\nAvailable when SectionIdentifier conforms to Hashable and Result conforms to NSFetchRequestResult."
    },
    {
        "title": "RoundedBorderTextEditorStyle",
        "url": "https://developer.apple.com/documentation/swiftui/roundedbordertexteditorstyle",
        "html": "Overview\n\nYou can also use roundedBorder to construct this style.\n\nTopics\nCreating the text editor style\ninit()\nRelationships\nConforms To\nTextEditorStyle\nSee Also\nSupporting types\nstruct AutomaticTextEditorStyle\nThe default text editor style, based on the text editor\u2019s context.\nstruct PlainTextEditorStyle\nA text editor style with no decoration."
    },
    {
        "title": "init(wrappedValue:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/scenestorage/init(wrappedvalue:_:)-3kgmn",
        "html": "Parameters\nwrappedValue\n\nThe default value if an integer is not available for the given key.\n\nkey\n\na key used to save and restore the value.\n\nSee Also\nStoring a value\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a URL.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a double.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a string.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a boolean.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a string, transforming it to a RawRepresentable data type.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore data.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore an integer, transforming it to a RawRepresentable data type.\ninit<RowValue>(wrappedValue: Value, String)\nCreates a property that can save and restore table column state.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a PersistentIdentifier."
    },
    {
        "title": "init(wrappedValue:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/scenestorage/init(wrappedvalue:_:)-3tmsv",
        "html": "Parameters\nwrappedValue\n\nThe default value if a double is not available for the given key.\n\nkey\n\na key used to save and restore the value.\n\nSee Also\nStoring a value\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a URL.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore an integer.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a string.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a boolean.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a string, transforming it to a RawRepresentable data type.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore data.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore an integer, transforming it to a RawRepresentable data type.\ninit<RowValue>(wrappedValue: Value, String)\nCreates a property that can save and restore table column state.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a PersistentIdentifier."
    },
    {
        "title": "init(wrappedValue:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/scenestorage/init(wrappedvalue:_:)-40fny",
        "html": "Parameters\nwrappedValue\n\nThe default value if a string is not available for the given key.\n\nkey\n\na key used to save and restore the value.\n\nSee Also\nStoring a value\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a URL.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore an integer.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a double.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a boolean.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a string, transforming it to a RawRepresentable data type.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore data.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore an integer, transforming it to a RawRepresentable data type.\ninit<RowValue>(wrappedValue: Value, String)\nCreates a property that can save and restore table column state.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a PersistentIdentifier."
    },
    {
        "title": "init(wrappedValue:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/scenestorage/init(wrappedvalue:_:)-8hd2d",
        "html": "Parameters\nwrappedValue\n\nThe default value if a String value is not available for the given key.\n\nkey\n\na key used to save and restore the value.\n\nDiscussion\n\nA common usage is with enumerations:\n\nenum MyEnum: String { case a case b case c } struct MyView: View { @SceneStorage(\u201cMyEnumValue\u201d) private var value = MyEnum.a var body: some View { \u2026 } }\n\nSee Also\nStoring a value\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a URL.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore an integer.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a double.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a string.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a boolean.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore data.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore an integer, transforming it to a RawRepresentable data type.\ninit<RowValue>(wrappedValue: Value, String)\nCreates a property that can save and restore table column state.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a PersistentIdentifier."
    },
    {
        "title": "iconOnly",
        "url": "https://developer.apple.com/documentation/swiftui/labelstyle/icononly",
        "html": "Discussion\n\nThe title of the label is still used for non-visual descriptions, such as VoiceOver.\n\nSee Also\nGetting built-in label styles\nstatic var automatic: DefaultLabelStyle\nA label style that resolves its appearance automatically based on the current context.\nAvailable when Self is DefaultLabelStyle.\nstatic var titleAndIcon: TitleAndIconLabelStyle\nA label style that shows both the title and icon of the label using a system-standard layout.\nAvailable when Self is TitleAndIconLabelStyle.\nstatic var titleOnly: TitleOnlyLabelStyle\nA label style that only displays the title of the label.\nAvailable when Self is TitleOnlyLabelStyle."
    },
    {
        "title": "init(wrappedValue:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/scenestorage/init(wrappedvalue:_:)-933r9",
        "html": "Parameters\nwrappedValue\n\nThe default value if data is not available for the given key.\n\nkey\n\na key used to save and restore the value.\n\nDiscussion\n\nAvoid storing large data blobs, such as image data, as it can negatively affect performance of your app.\n\nSee Also\nStoring a value\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a URL.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore an integer.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a double.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a string.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a boolean.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a string, transforming it to a RawRepresentable data type.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore an integer, transforming it to a RawRepresentable data type.\ninit<RowValue>(wrappedValue: Value, String)\nCreates a property that can save and restore table column state.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a PersistentIdentifier."
    },
    {
        "title": "Anchor.Source",
        "url": "https://developer.apple.com/documentation/swiftui/anchor/source",
        "html": "Overview\n\nSwiftUI passes anchored geometry values around the view tree via preference keys. It then converts them back into the local coordinate space using a GeometryProxy value.\n\nTopics\nGetting point anchor sources\nstatic func point(CGPoint) -> Anchor<Value>.Source\nAvailable when Value is CGPoint.\nstatic func unitPoint(UnitPoint) -> Anchor<Value>.Source\nAvailable when Value is CGPoint.\nGetting rectangle anchor sources\nstatic func rect(CGRect) -> Anchor<Value>.Source\nReturns an anchor source rect defined by r in the current view.\nAvailable when Value is CGRect.\nstatic var bounds: Anchor<CGRect>.Source\nAn anchor source rect defined as the entire bounding rect of the current view.\nAvailable when Value is CGRect.\nGetting top anchor sources\nstatic var topLeading: Anchor<CGPoint>.Source\nAvailable when Value is CGPoint.\nstatic var top: Anchor<CGPoint>.Source\nAvailable when Value is CGPoint.\nstatic var topTrailing: Anchor<CGPoint>.Source\nAvailable when Value is CGPoint.\nGetting middle anchor sources\nstatic var leading: Anchor<CGPoint>.Source\nAvailable when Value is CGPoint.\nstatic var center: Anchor<CGPoint>.Source\nAvailable when Value is CGPoint.\nstatic var trailing: Anchor<CGPoint>.Source\nAvailable when Value is CGPoint.\nGetting bottom anchor sources\nstatic var bottomTrailing: Anchor<CGPoint>.Source\nAvailable when Value is CGPoint.\nstatic var bottom: Anchor<CGPoint>.Source\nAvailable when Value is CGPoint.\nstatic var bottomLeading: Anchor<CGPoint>.Source\nAvailable when Value is CGPoint.\nCreating an anchor source\ninit<T>(Anchor<T>.Source?)\ninit<T>([Anchor<T>.Source])\nRelationships\nConforms To\nSendable"
    },
    {
        "title": "init(wrappedValue:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/scenestorage/init(wrappedvalue:_:)-vggm",
        "html": "Parameters\nwrappedValue\n\nThe default value if an integer value is not available for the given key.\n\nkey\n\na key used to save and restore the value.\n\nDiscussion\n\nA common usage is with enumerations:\n\nenum MyEnum: Int { case a case b case c } struct MyView: View { @SceneStorage(\u201cMyEnumValue\u201d) private var value = MyEnum.a var body: some View { \u2026 } }\n\nSee Also\nStoring a value\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a URL.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore an integer.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a double.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a string.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a boolean.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a string, transforming it to a RawRepresentable data type.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore data.\ninit<RowValue>(wrappedValue: Value, String)\nCreates a property that can save and restore table column state.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a PersistentIdentifier."
    },
    {
        "title": "init(wrappedValue:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/scenestorage/init(wrappedvalue:_:)-47bbm",
        "html": "Parameters\nwrappedValue\n\nThe default value if table column state is not available for the given key.\n\nkey\n\na key used to save and restore the value.\n\nSee Also\nStoring a value\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a URL.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore an integer.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a double.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a string.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a boolean.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a string, transforming it to a RawRepresentable data type.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore data.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore an integer, transforming it to a RawRepresentable data type.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a PersistentIdentifier."
    },
    {
        "title": "plain",
        "url": "https://developer.apple.com/documentation/swiftui/texteditorstyle/plain",
        "html": "See Also\nGetting built-in styles\nstatic var automatic: AutomaticTextEditorStyle\nThe default text editor style, based on the text editor\u2019s context.\nAvailable when Self is AutomaticTextEditorStyle.\nstatic var roundedBorder: RoundedBorderTextEditorStyle\nA text editor style with a system-defined rounded border.\nAvailable when Self is RoundedBorderTextEditorStyle.\nBeta"
    },
    {
        "title": "buildIf(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/viewbuilder/buildif(_:)",
        "html": "See Also\nConditionally building content\nstatic func buildEither<TrueContent, FalseContent>(first: TrueContent) -> _ConditionalContent<TrueContent, FalseContent>\nProduces content for a conditional statement in a multi-statement closure when the condition is true.\nstatic func buildEither<TrueContent, FalseContent>(second: FalseContent) -> _ConditionalContent<TrueContent, FalseContent>\nProduces content for a conditional statement in a multi-statement closure when the condition is false.\nstatic func buildLimitedAvailability<Content>(Content) -> AnyView\nProcesses view content for a conditional compiler-control statement that performs an availability check."
    },
    {
        "title": "buildBlock()",
        "url": "https://developer.apple.com/documentation/swiftui/viewbuilder/buildblock()",
        "html": "See Also\nBuilding content\nstatic func buildBlock<Content>(Content) -> Content\nPasses a single view written as a child view through unmodified.\nstatic func buildBlock<each Content>(repeat each Content) -> TupleView<(repeat each Content)>\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder."
    },
    {
        "title": "accessoryLinear",
        "url": "https://developer.apple.com/documentation/swiftui/gaugestyle/accessorylinear",
        "html": "Discussion\n\nApply this style to a Gauge or to a view hierarchy that contains gauges using the gaugeStyle(_:) modifier:\n\nGauge(value: batteryLevel, in: 0...100) {\n    Text(\"Battery Level\")\n}\n.gaugeStyle(.accessoryLinear)\n\n\nIf you provide minimumValueLabel and maximumValueLabel parameters when you create the gauge, they appear on leading and trailing edges of the bar, respectively. Otherwise, the gauge displays the currentValueLabel value on the leading edge.\n\nSee Also\nGetting linear gauge styles\nstatic var linear: LinearGaugeStyle\nA gauge style that displays a bar with a marker that appears at a point along the bar to indicate the gauge\u2019s current value.\nAvailable when Self is LinearGaugeStyle.\nstatic var linearCapacity: LinearCapacityGaugeStyle\nA gauge style that displays a bar that fills from leading to trailing edges as the gauge\u2019s current value increases.\nAvailable when Self is LinearCapacityGaugeStyle.\nstatic var accessoryLinearCapacity: AccessoryLinearCapacityGaugeStyle\nA gauge style that displays bar that fills from leading to trailing edges as the gauge\u2019s current value increases.\nAvailable when Self is AccessoryLinearCapacityGaugeStyle."
    },
    {
        "title": "init(_:store:)",
        "url": "https://developer.apple.com/documentation/swiftui/appstorage/init(_:store:)-9lku2",
        "html": "Parameters\nkey\n\nThe key to read and write the value to in the user defaults store.\n\nstore\n\nThe user defaults store to read and write to. A value of nil will use the user default store from the environment.\n\nDiscussion\n\nDefaults to nil if there is no restored value.\n\n@Model class Recipe { ... }\nstruct RecipeList: View {\n    @Query var recipes: [Recipe]\n    @SceneStorage(\"selectedID\") var selectedRecipeID: Recipe.ID?\n\n\n    var body: some View {\n        List(recipes, selection: $selectedRecipeID) { recipe in\n            RecipeDetail(recipe)\n        }\n    }\n}\n\nSee Also\nStoring an optional value\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional integer user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional string user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional double user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit<R>(String, store: UserDefaults?)\nCreates a property that can save and restore an Optional integer, transforming it to an Optional RawRepresentable data type.\ninit<R>(String, store: UserDefaults?)\nCreates a property that can save and restore an Optional string, transforming it to an Optional RawRepresentable data type.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional data user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional boolean user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional URL user default.\nAvailable when Value conforms to ExpressibleByNilLiteral."
    },
    {
        "title": "buildEither(first:)",
        "url": "https://developer.apple.com/documentation/swiftui/viewbuilder/buildeither(first:)",
        "html": "See Also\nConditionally building content\nstatic func buildEither<TrueContent, FalseContent>(second: FalseContent) -> _ConditionalContent<TrueContent, FalseContent>\nProduces content for a conditional statement in a multi-statement closure when the condition is false.\nstatic func buildIf<Content>(Content?) -> Content?\nProduces an optional view for conditional statements in multi-statement closures that\u2019s only visible when the condition evaluates to true.\nstatic func buildLimitedAvailability<Content>(Content) -> AnyView\nProcesses view content for a conditional compiler-control statement that performs an availability check."
    },
    {
        "title": "buildBlock(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/viewbuilder/buildblock(_:)-6hhua",
        "html": "Discussion\n\nAn example of a single view written as a child view is { Text(\"Hello\") }.\n\nSee Also\nBuilding content\nstatic func buildBlock() -> EmptyView\nBuilds an empty view from a block containing no statements.\nstatic func buildBlock<each Content>(repeat each Content) -> TupleView<(repeat each Content)>\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder."
    },
    {
        "title": "buildExpression(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/viewbuilder/buildexpression(_:)",
        "html": "See Also\nBuilding content\nstatic func buildBlock() -> EmptyView\nBuilds an empty view from a block containing no statements.\nstatic func buildBlock<Content>(Content) -> Content\nPasses a single view written as a child view through unmodified.\nstatic func buildBlock<each Content>(repeat each Content) -> TupleView<(repeat each Content)>"
    },
    {
        "title": "buildBlock(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/viewbuilder/buildblock(_:)-2bj1g",
        "html": "See Also\nBuilding content\nstatic func buildBlock() -> EmptyView\nBuilds an empty view from a block containing no statements.\nstatic func buildBlock<Content>(Content) -> Content\nPasses a single view written as a child view through unmodified.\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder."
    },
    {
        "title": "includeHiddenFiles",
        "url": "https://developer.apple.com/documentation/swiftui/filedialogbrowseroptions/includehiddenfiles",
        "html": "See Also\nGetting browser options\nstatic let displayFileExtensions: FileDialogBrowserOptions\nOn iOS, configures the fileExporter, fileImporter, or fileMover to show or hide file extensions. Default behavior is to hide them. On macOS, this option has no effect.\nstatic let enumeratePackages: FileDialogBrowserOptions\nAllows enumerating packages contents in contrast to the default behavior when packages are represented flatly, similar to files."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/progressviewstyle/automatic",
        "html": "Discussion\n\nThe default style represents the recommended style based on the original initialization parameters of the progress view, and the progress view\u2019s context within the view hierarchy.\n\nSee Also\nGetting built-in progress view styles\nstatic var circular: CircularProgressViewStyle\nThe style of a progress view that uses a circular gauge to indicate the partial completion of an activity.\nAvailable when Self is CircularProgressViewStyle.\nstatic var linear: LinearProgressViewStyle\nA progress view that visually indicates its progress using a horizontal bar.\nAvailable when Self is LinearProgressViewStyle."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/scenestorage/init(_:)-8plse",
        "html": "Parameters\nkey\n\na key used to save and restore the value.\n\nDiscussion\n\nDefaults to nil if there is no restored value\n\nSee Also\nStoring an optional value\ninit(String)\nCreates a property that can save and restore an Optional string.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit<R>(String)\nCreates a property that can save and restore an Optional integer, transforming it to an Optional RawRepresentable data type.\ninit(String)\nCreates a property that can save and restore an Optional double.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional boolean.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional data.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional URL.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit<R>(String)\nCreates a property that can save and restore an Optional string, transforming it to an Optional RawRepresentable data type.\ninit(String)\nCreates a property that can read and write an Optional data user default via PersistentIdentifier."
    },
    {
        "title": "ActionSheet.Button",
        "url": "https://developer.apple.com/documentation/swiftui/actionsheet/button",
        "html": "Deprecated\n\nUse a View modifier like confirmationDialog(_:isPresented:titleVisibility:presenting:actions:message:) instead.\n\nDiscussion\n\nThe ActionSheet button is type-aliased to the Alert button type, which provides default, cancel, and destructive styles."
    },
    {
        "title": "GlassBackgroundDisplayMode.never",
        "url": "https://developer.apple.com/documentation/swiftui/glassbackgrounddisplaymode/never",
        "html": "See Also\nGetting the mode\ncase always\nAlways display the glass material.\nBeta\ncase implicit\nDisplay the glass material only when the view isn\u2019t already contained in glass.\nBeta"
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/scenestorage/init(_:)-6fdio",
        "html": "Parameters\nkey\n\na key used to save and restore the value.\n\nDiscussion\n\nDefaults to nil if there is no restored value\n\nSee Also\nStoring an optional value\ninit(String)\nCreates a property that can save and restore an Optional string.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit<R>(String)\nCreates a property that can save and restore an Optional integer, transforming it to an Optional RawRepresentable data type.\ninit(String)\nCreates a property that can save and restore an Optional double.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional boolean.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional URL.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional integer.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit<R>(String)\nCreates a property that can save and restore an Optional string, transforming it to an Optional RawRepresentable data type.\ninit(String)\nCreates a property that can read and write an Optional data user default via PersistentIdentifier."
    },
    {
        "title": "TitleAndIconLabelStyle",
        "url": "https://developer.apple.com/documentation/swiftui/titleandiconlabelstyle",
        "html": "Overview\n\nYou can also use titleAndIcon to construct this style.\n\nTopics\nCreating the label style\ninit()\nCreates a label style that shows both the title and icon of the label using a system-standard layout.\nRelationships\nConforms To\nLabelStyle\nSee Also\nSupporting types\nstruct DefaultLabelStyle\nThe default label style in the current context.\nstruct IconOnlyLabelStyle\nA label style that only displays the icon of the label.\nstruct TitleOnlyLabelStyle\nA label style that only displays the title of the label."
    },
    {
        "title": "projectedValue",
        "url": "https://developer.apple.com/documentation/swiftui/scenestorage/projectedvalue",
        "html": "Discussion\n\nThis works identically to State.projectedValue.\n\nSee Also\n\nState.projectedValue\n\nSee Also\nGetting the value\nvar wrappedValue: Value\nThe underlying value referenced by the state variable."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/scenestorage/init(_:)-8yt5m",
        "html": "Parameters\nkey\n\na key used to save and restore the value.\n\nDiscussion\n\nDefaults to nil if there is no restored value\n\nA common usage is with enumerations:\n\nenum MyEnum: String {\n    case a\n    case b\n    case c\n}\nstruct MyView: View {\n    @SceneStorage(\"MyEnumValue\") private var value: MyEnum?\n    var body: some View { ... }\n}\n\nSee Also\nStoring an optional value\ninit(String)\nCreates a property that can save and restore an Optional string.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit<R>(String)\nCreates a property that can save and restore an Optional integer, transforming it to an Optional RawRepresentable data type.\ninit(String)\nCreates a property that can save and restore an Optional double.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional boolean.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional data.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional URL.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional integer.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can read and write an Optional data user default via PersistentIdentifier."
    },
    {
        "title": "init(_:store:)",
        "url": "https://developer.apple.com/documentation/swiftui/appstorage/init(_:store:)-57agx",
        "html": "Parameters\nkey\n\nThe key to read and write the value to in the user defaults store.\n\nstore\n\nThe user defaults store to read and write to. A value of nil will use the user default store from the environment.\n\nDiscussion\n\nDefaults to nil if there is no restored value.\n\nSee Also\nStoring an optional value\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional integer user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional string user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit<R>(String, store: UserDefaults?)\nCreates a property that can save and restore an Optional integer, transforming it to an Optional RawRepresentable data type.\ninit<R>(String, store: UserDefaults?)\nCreates a property that can save and restore an Optional string, transforming it to an Optional RawRepresentable data type.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional data user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional boolean user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional URL user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional data user default via PersistentIdentifier."
    },
    {
        "title": "init(wrappedValue:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/scenestorage/init(wrappedvalue:_:)-9eye6",
        "html": "Parameters\nwrappedValue\n\nThe default value when there is no saved value for the given key.\n\nkey\n\na key used to save and restore the value.\n\nDiscussion\n@Model class Recipe { ... }\nstruct RecipeList: View {\n    @Query var recipes: [Recipe]\n    @SceneStorage(\"selectedID\")\n    var selectedRecipeID: Recipe.ID = RecipeStore.recipes[0].id\n\n\n    var body: some View {\n        List(recipes, selection: $selectedRecipeID) { recipe in\n            RecipeDetail(recipe)\n        }\n    }\n}\n\nSee Also\nStoring a value\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a URL.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore an integer.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a double.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a string.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a boolean.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore a string, transforming it to a RawRepresentable data type.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore data.\ninit(wrappedValue: Value, String)\nCreates a property that can save and restore an integer, transforming it to a RawRepresentable data type.\ninit<RowValue>(wrappedValue: Value, String)\nCreates a property that can save and restore table column state."
    },
    {
        "title": "PopoverAttachmentAnchor.point(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/popoverattachmentanchor/point(_:)",
        "html": "See Also\nGetting attachment anchors\ncase rect(Anchor<CGRect>.Source)\nThe anchor point for the popover relative to the source\u2019s frame."
    },
    {
        "title": "init(wrappedValue:_:store:)",
        "url": "https://developer.apple.com/documentation/swiftui/appstorage/init(wrappedvalue:_:store:)-1f5o6",
        "html": "Parameters\nwrappedValue\n\nThe default value if a string value is not specified for the given key.\n\nkey\n\nThe key to read and write the value to in the user defaults store.\n\nstore\n\nThe user defaults store to read and write to. A value of nil will use the user default store from the environment.\n\nSee Also\nStoring a value\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to an integer user default, transforming that to RawRepresentable data type.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a user default as data.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to an integer user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a string user default, transforming that to RawRepresentable data type.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a url user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a double user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a boolean user default.\ninit<RowValue>(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can save and restore table column state.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a user default as data via PersistentIdentifier."
    },
    {
        "title": "init(_:store:)",
        "url": "https://developer.apple.com/documentation/swiftui/appstorage/init(_:store:)-22mh4",
        "html": "Parameters\nkey\n\nThe key to read and write the value to in the user defaults store.\n\nstore\n\nThe user defaults store to read and write to. A value of nil will use the user default store from the environment.\n\nDiscussion\n\nDefaults to nil if there is no restored value.\n\nSee Also\nStoring an optional value\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional string user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional double user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit<R>(String, store: UserDefaults?)\nCreates a property that can save and restore an Optional integer, transforming it to an Optional RawRepresentable data type.\ninit<R>(String, store: UserDefaults?)\nCreates a property that can save and restore an Optional string, transforming it to an Optional RawRepresentable data type.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional data user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional boolean user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional URL user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional data user default via PersistentIdentifier."
    },
    {
        "title": "titleAndIcon",
        "url": "https://developer.apple.com/documentation/swiftui/labelstyle/titleandicon",
        "html": "Discussion\n\nIn most cases, labels show both their title and icon by default. However, some containers might apply a different default label style to their content, such as only showing icons within toolbars on macOS and iOS. To opt in to showing both the title and the icon, you can apply the title and icon label style:\n\nLabel(\"Lightning\", systemImage: \"bolt.fill\")\n    .labelStyle(.titleAndIcon)\n\n\nTo apply the title and icon style to a group of labels, apply the style to the view hierarchy that contains the labels:\n\nVStack {\n    Label(\"Rain\", systemImage: \"cloud.rain\")\n    Label(\"Snow\", systemImage: \"snow\")\n    Label(\"Sun\", systemImage: \"sun.max\")\n}\n.labelStyle(.titleAndIcon)\n\n\nThe relative layout of the title and icon is dependent on the context it is displayed in. In most cases, however, the label is arranged horizontally with the icon leading.\n\nSee Also\nGetting built-in label styles\nstatic var automatic: DefaultLabelStyle\nA label style that resolves its appearance automatically based on the current context.\nAvailable when Self is DefaultLabelStyle.\nstatic var iconOnly: IconOnlyLabelStyle\nA label style that only displays the icon of the label.\nAvailable when Self is IconOnlyLabelStyle.\nstatic var titleOnly: TitleOnlyLabelStyle\nA label style that only displays the title of the label.\nAvailable when Self is TitleOnlyLabelStyle."
    },
    {
        "title": "init(_:store:)",
        "url": "https://developer.apple.com/documentation/swiftui/appstorage/init(_:store:)-488wr",
        "html": "Parameters\nkey\n\nThe key to read and write the value to in the user defaults store.\n\nstore\n\nThe user defaults store to read and write to. A value of nil will use the user default store from the environment.\n\nDiscussion\n\nDefaults to nil if there is no restored value.\n\nSee Also\nStoring an optional value\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional integer user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional double user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit<R>(String, store: UserDefaults?)\nCreates a property that can save and restore an Optional integer, transforming it to an Optional RawRepresentable data type.\ninit<R>(String, store: UserDefaults?)\nCreates a property that can save and restore an Optional string, transforming it to an Optional RawRepresentable data type.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional data user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional boolean user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional URL user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional data user default via PersistentIdentifier."
    },
    {
        "title": "SquareBorderTextFieldStyle",
        "url": "https://developer.apple.com/documentation/swiftui/squarebordertextfieldstyle",
        "html": "Overview\n\nYou can also use squareBorder to construct this style.\n\nTopics\nCreating the text field style\ninit()\nRelationships\nConforms To\nTextFieldStyle\nSee Also\nSupporting types\nstruct DefaultTextFieldStyle\nThe default text field style, based on the text field\u2019s context.\nstruct PlainTextFieldStyle\nA text field style with no decoration.\nstruct RoundedBorderTextFieldStyle\nA text field style with a system-defined rounded border."
    },
    {
        "title": "title",
        "url": "https://developer.apple.com/documentation/swiftui/labelstyleconfiguration/title-swift.property",
        "html": "See Also\nSetting the title\nstruct Title\nA type-erased title view of a label."
    },
    {
        "title": "init(_:systemImage:)",
        "url": "https://developer.apple.com/documentation/swiftui/label/init(_:systemimage:)-2veqt",
        "html": "Parameters\ntitleKey\n\nA title generated from a localized string.\n\nsystemImage\n\nThe name of the image resource to lookup.\n\nSee Also\nCreating a label from text and an SF Symbol\ninit<S>(S, systemImage: String)\nCreates a label with a system icon image and a title generated from a string.\nAvailable when Title is Text and Icon is Image."
    },
    {
        "title": "endIndex",
        "url": "https://developer.apple.com/documentation/swiftui/sectionedfetchresults/endindex",
        "html": "See Also\nGetting indices\nvar startIndex: Int\nThe index of the first section in the results collection."
    },
    {
        "title": "init(erasing:)",
        "url": "https://developer.apple.com/documentation/swiftui/anyview/init(erasing:)",
        "html": "See Also\nCreating a view\ninit<V>(V)\nCreate an instance that type-erases view."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/anyview/init(_:)",
        "html": "See Also\nCreating a view\ninit<V>(erasing: V)"
    },
    {
        "title": "content",
        "url": "https://developer.apple.com/documentation/swiftui/subscriptionview/content",
        "html": "See Also\nManaging the subscription\nvar publisher: PublisherType\nThe Publisher that is being subscribed.\nvar action: (PublisherType.Output) -> Void\nThe Action executed when publisher emits an event."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/label/init(_:)-6rpls",
        "html": "See Also\nCreating a family activity label\ninit(ApplicationToken)\nCreates a label representing a family activity application.\nAvailable when Title is FamilyActivityTitleView and Icon is FamilyActivityIconView.\ninit(ActivityCategoryToken)\nCreates a label representing a family activity category.\nAvailable when Title is FamilyActivityTitleView and Icon is FamilyActivityIconView."
    },
    {
        "title": "publisher",
        "url": "https://developer.apple.com/documentation/swiftui/subscriptionview/publisher",
        "html": "See Also\nManaging the subscription\nvar action: (PublisherType.Output) -> Void\nThe Action executed when publisher emits an event.\nvar content: Content\nThe content view."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/label/init(_:)-85p2n",
        "html": "See Also\nCreating a family activity label\ninit(ApplicationToken)\nCreates a label representing a family activity application.\nAvailable when Title is FamilyActivityTitleView and Icon is FamilyActivityIconView.\ninit(WebDomainToken)\nCreates a label representing a family activity web domain.\nAvailable when Title is FamilyActivityTitleView and Icon is FamilyActivityIconView."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/label/init(_:)-39rkz",
        "html": "See Also\nCreating a family activity label\ninit(WebDomainToken)\nCreates a label representing a family activity web domain.\nAvailable when Title is FamilyActivityTitleView and Icon is FamilyActivityIconView.\ninit(ActivityCategoryToken)\nCreates a label representing a family activity category.\nAvailable when Title is FamilyActivityTitleView and Icon is FamilyActivityIconView."
    },
    {
        "title": "init(_:systemImage:)",
        "url": "https://developer.apple.com/documentation/swiftui/label/init(_:systemimage:)-2z97t",
        "html": "Parameters\ntitle\n\nA string used as the label\u2019s title.\n\nsystemImage\n\nThe name of the image resource to lookup.\n\nSee Also\nCreating a label from text and an SF Symbol\ninit(LocalizedStringKey, systemImage: String)\nCreates a label with a system icon image and a title generated from a localized string.\nAvailable when Title is Text and Icon is Image."
    },
    {
        "title": "action",
        "url": "https://developer.apple.com/documentation/swiftui/subscriptionview/action",
        "html": "See Also\nManaging the subscription\nvar publisher: PublisherType\nThe Publisher that is being subscribed.\nvar content: Content\nThe content view."
    },
    {
        "title": "startIndex",
        "url": "https://developer.apple.com/documentation/swiftui/sectionedfetchresults/startindex",
        "html": "See Also\nGetting indices\nvar endIndex: Int\nThe index that\u2019s one greater than that of the last section."
    },
    {
        "title": "SectionedFetchResults.Section",
        "url": "https://developer.apple.com/documentation/swiftui/sectionedfetchresults/section",
        "html": "Overview\n\nExamine a Section instance to find the entities that satisfy a SectionedFetchRequest predicate, and that have a particular property with the value stored in the section\u2019s id parameter. You specify which property by setting the fetch request\u2019s sectionIdentifier parameter during initialization, or by modifying the corresponding SectionedFetchResults instance\u2019s sectionIdentifier property.\n\nObtain specific sections by treating the fetch results as a collection. For example, consider the following property declaration that fetches Quake managed objects that the Loading and Displaying a Large Data Feed sample code project defines to store earthquake data:\n\n@SectionedFetchRequest<String, Quake>(\n    sectionIdentifier: \\.day,\n    sortDescriptors: [SortDescriptor(\\.time, order: .reverse)]\n)\nprivate var quakes: SectionedFetchResults<String, Quake>\n\n\nGet the first section using a subscript:\n\nlet firstSection = quakes[0]\n\n\nAlternatively, you can loop over the sections to create a list of sections.\n\nForEach(quakes) { section in\n    Text(\"Section \\(section.id) has \\(section.count) elements\")\n}\n\n\nThe sections also act as collections, which means you can use elements like the count property in the example above.\n\nTopics\nIdentifying the section\nlet id: SectionIdentifier\nThe value that all entities in the section share for a specified key path.\nGetting indices\nvar startIndex: Int\nThe index of the first entity in the section.\nvar endIndex: Int\nThe index that\u2019s one greater than that of the last entity in the section.\nGetting results\nsubscript(Int) -> Result\nGets the entity at the specified index within the section.\nRelationships\nConforms To\nBidirectionalCollection\nCollection\nIdentifiable\nRandomAccessCollection\nSequence\nSee Also\nConfiguring the associated sectioned fetch request\nvar nsPredicate: NSPredicate?\nThe request\u2019s predicate.\nvar sortDescriptors: [SortDescriptor<Result>]\nThe request\u2019s sort descriptors, accessed as value types.\nAvailable when SectionIdentifier conforms to Hashable and Result inherits NSManagedObject.\nvar nsSortDescriptors: [NSSortDescriptor]\nThe request\u2019s sort descriptors, accessed as reference types.\nvar sectionIdentifier: KeyPath<Result, SectionIdentifier>\nThe key path that the system uses to group fetched results into sections."
    },
    {
        "title": "sectionIdentifier",
        "url": "https://developer.apple.com/documentation/swiftui/sectionedfetchresults/sectionidentifier",
        "html": "Discussion\n\nSet this value to cause the associated SectionedFetchRequest to execute a fetch with a new section identifier, producing an updated collection of results. Changing this value produces a new set of sections. Use care to coordinate section and sort updates, as described in SectionedFetchRequest.Configuration.\n\nSee Also\nConfiguring the associated sectioned fetch request\nvar nsPredicate: NSPredicate?\nThe request\u2019s predicate.\nvar sortDescriptors: [SortDescriptor<Result>]\nThe request\u2019s sort descriptors, accessed as value types.\nAvailable when SectionIdentifier conforms to Hashable and Result inherits NSManagedObject.\nvar nsSortDescriptors: [NSSortDescriptor]\nThe request\u2019s sort descriptors, accessed as reference types.\nstruct Section\nA collection of fetched results that share a specified identifier."
    },
    {
        "title": "nsPredicate",
        "url": "https://developer.apple.com/documentation/swiftui/sectionedfetchresults/nspredicate",
        "html": "Discussion\n\nSet this value to cause the associated SectionedFetchRequest to execute a fetch with a new predicate, producing an updated collection of results.\n\nSee Also\nConfiguring the associated sectioned fetch request\nvar sortDescriptors: [SortDescriptor<Result>]\nThe request\u2019s sort descriptors, accessed as value types.\nAvailable when SectionIdentifier conforms to Hashable and Result inherits NSManagedObject.\nvar nsSortDescriptors: [NSSortDescriptor]\nThe request\u2019s sort descriptors, accessed as reference types.\nvar sectionIdentifier: KeyPath<Result, SectionIdentifier>\nThe key path that the system uses to group fetched results into sections.\nstruct Section\nA collection of fetched results that share a specified identifier."
    },
    {
        "title": "nsSortDescriptors",
        "url": "https://developer.apple.com/documentation/swiftui/sectionedfetchresults/nssortdescriptors",
        "html": "Discussion\n\nSet this value to cause the associated SectionedFetchRequest to execute a fetch with a new collection of NSSortDescriptor instances. The order of managed objects stored in the results collection may change as a result. Use care to coordinate section and sort updates, as described in SectionedFetchRequest.Configuration.\n\nIf you want to use SortDescriptor instances, set sortDescriptors instead.\n\nSee Also\nConfiguring the associated sectioned fetch request\nvar nsPredicate: NSPredicate?\nThe request\u2019s predicate.\nvar sortDescriptors: [SortDescriptor<Result>]\nThe request\u2019s sort descriptors, accessed as value types.\nAvailable when SectionIdentifier conforms to Hashable and Result inherits NSManagedObject.\nvar sectionIdentifier: KeyPath<Result, SectionIdentifier>\nThe key path that the system uses to group fetched results into sections.\nstruct Section\nA collection of fetched results that share a specified identifier."
    },
    {
        "title": "ResolvedModifier",
        "url": "https://developer.apple.com/documentation/swiftui/environmentalmodifier/resolvedmodifier",
        "html": "Required\n\nSee Also\nResolving a modifier\nfunc resolve(in: EnvironmentValues) -> Self.ResolvedModifier\nResolve to a concrete modifier in the given environment.\n\nRequired"
    },
    {
        "title": "sortDescriptors",
        "url": "https://developer.apple.com/documentation/swiftui/sectionedfetchresults/sortdescriptors",
        "html": "Discussion\n\nSet this value to cause the associated SectionedFetchRequest to execute a fetch with a new collection of SortDescriptor instances. The order of entities stored in the results collection may change as a result. Use care to coordinate section and sort updates, as described in SectionedFetchRequest.Configuration.\n\nIf you want to use NSSortDescriptor instances, set nsSortDescriptors instead.\n\nSee Also\nConfiguring the associated sectioned fetch request\nvar nsPredicate: NSPredicate?\nThe request\u2019s predicate.\nvar nsSortDescriptors: [NSSortDescriptor]\nThe request\u2019s sort descriptors, accessed as reference types.\nvar sectionIdentifier: KeyPath<Result, SectionIdentifier>\nThe key path that the system uses to group fetched results into sections.\nstruct Section\nA collection of fetched results that share a specified identifier."
    },
    {
        "title": "wrappedValue",
        "url": "https://developer.apple.com/documentation/swiftui/appstorage/wrappedvalue",
        "html": "See Also\nGetting the value\nvar projectedValue: Binding<Value>"
    },
    {
        "title": "accessibilityInputLabels(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilityinputlabels(_:)-36y1m",
        "html": "Discussion\n\nIf you don\u2019t specify any input labels, the user can still refer to the view using the accessibility label that you add with the accessibilityLabel() modifier. Provide labels in descending order of importance. Voice Control and Full Keyboard Access use the input labels."
    },
    {
        "title": "Configure your apps navigation titles",
        "url": "https://developer.apple.com/documentation/swiftui/configure-your-apps-navigation-titles",
        "html": "Overview\n\nOn iOS and watchOS, when a view is navigated to inside of a navigation stack, that view\u2019s title is displayed in the navigation bar. On iPadOS, the primary destination\u2019s navigation title is reflected as the window\u2019s title in the App Switcher. Similarly on macOS, the primary destination\u2019s title is used as the window title in the titlebar, Windows menu and Mission Control.\n\nIn its simplest form, you can provide a string or a localized string key to a navigation title modifier directly.\n\nContentView()\n    .navigationTitle(\"My Title\")\n\n\nThe title of your apps toolbar can be further customized using additional navigation related modifiers. For example, you can associate a URL or your own type conforming to Transferable to your view using the navigation document modifier.\n\nContentView()\n    .navigationTitle(\"My Title\")\n    .navigationDocument(myURL)\n\n\nIn iOS and iPadOS, this will construct a title that can present a menu by tapping the navigation title in the app\u2019s navigation bar. The menu contains content providing information related to the URL and a draggable icon for sharing.\n\nIn macOS, this item will construct a proxy icon for manipulating the file backing the document.\n\nWhen providing a transferable type, you should typically provide a SharePreview which provides the appropriate content for rendering the preview in the header of the menu.\n\nContentView()\n    .navigationTitle(\"My Title\")\n    .navigationDocument(\n        myDocument, \n        preview: SharePreview(\n            \"My Preview Title\", image: myDocument.image))\n\nRenaming\n\nYou can provide a text binding to the navigation title modifier and SwiftUI will automatically configure the toolbar to allow editing of the navigation title on iOS or macOS. SwiftUI automatically syncs the navigation title with the value of the string binding provided to the text field.\n\nYou can provide a string binding to the navigation title to configure the title\u2019s text field. SwiftUI will automatically place a rename action in the titl menu alongside the actions originating from your app\u2019s commands.\n\nContentView()\n    .navigationTitle($contentTitle)\n\n\nIn iOS, when using a text field in a navigation title, SwiftUI creates a button in the toolbar title. When triggered, this button updates the navigation title to display an inline text field that will update the binding you provide as the user types.\n\nSee Also\nNavigation titles\nfunc navigationTitle(LocalizedStringKey) -> some View\nConfigures the view\u2019s title for purposes of navigation, using a localized string.\nfunc navigationTitle(Text) -> some View\nConfigures the view\u2019s title for purposes of navigation.\nfunc navigationTitle<S>(S) -> some View\nConfigures the view\u2019s title for purposes of navigation, using a string.\nfunc navigationTitle<V>(() -> V) -> some View\nConfigures the view\u2019s title for purposes of navigation, using a custom view.\nfunc navigationTitle(Binding<String>) -> some View\nConfigures the view\u2019s title for purposes of navigation, using a string binding.\nfunc navigationSubtitle<S>(S) -> some View\nConfigures the view\u2019s subtitle for purposes of navigation, using a string.\nfunc navigationSubtitle(Text) -> some View\nConfigures the view\u2019s subtitle for purposes of navigation.\nfunc navigationSubtitle(LocalizedStringKey) -> some View\nConfigures the view\u2019s subtitle for purposes of navigation, using a localized string."
    },
    {
        "title": "actionSheet(isPresented:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/actionsheet(ispresented:content:)",
        "html": "Deprecated\n\nUse confirmationDialog(_:isPresented:titleVisibility:actions:message:) instead.\n\nParameters\nisPresented\n\nA binding to a Boolean value that determines whether to present the action sheet that you create in the modifier\u2019s content closure. When the user presses or taps the sheet\u2019s default action button the system sets this value to false dismissing the sheet.\n\ncontent\n\nA closure returning the ActionSheet to present.\n\nDiscussion\n\nIn the example below, a button conditionally presents an action sheet depending upon the value of a bound Boolean variable. When the Boolean value is set to true, the system displays an action sheet with both destructive and default actions:\n\nstruct ConfirmEraseItems: View {\n    @State private var isShowingSheet = false\n    var body: some View {\n        Button(\"Show Action Sheet\", action: {\n            isShowingSheet = true\n        })\n        .actionSheet(isPresented: $isShowingSheet) {\n            ActionSheet(\n                title: Text(\"Permanently erase the items in the Trash?\"),\n                message: Text(\"You can't undo this action.\"),\n                buttons:[\n                    .destructive(Text(\"Empty Trash\"),\n                                 action: emptyTrashAction),\n                    .cancel()\n                ]\n            )}\n    }\n\n\n    func emptyTrashAction() {\n        // Handle empty trash action.\n    }\n}\n\n\nNote\n\nIn regular size classes in iOS, the system renders alert sheets as a popover that the user dismisses by tapping anywhere outside the popover, rather than displaying the default dismiss button.\n\nSee Also\nView presentation modifiers\nfunc actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View\nPresents an action sheet using the given item as a data source for the sheet\u2019s content.\nDeprecated\nfunc alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View\nPresents an alert to the user.\nDeprecated\nfunc alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View\nPresents an alert to the user.\nDeprecated"
    },
    {
        "title": "alert(isPresented:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/alert(ispresented:content:)",
        "html": "Deprecated\n\nUse alert(_:isPresented:actions:message:) instead.\n\nParameters\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert that you create in the modifier\u2019s content closure. When the user presses or taps OK the system sets isPresented to false which dismisses the alert.\n\ncontent\n\nA closure returning the alert to present.\n\nDiscussion\n\nUse this method when you need to show an alert to the user. The example below displays an alert that is shown when the user toggles a Boolean value that controls the presentation of the alert:\n\nstruct OrderCompleteAlert: View {\n    @State private var isPresented = false\n    var body: some View {\n        Button(\"Show Alert\", action: {\n            isPresented = true\n        })\n        .alert(isPresented: $isPresented) {\n            Alert(title: Text(\"Order Complete\"),\n                  message: Text(\"Thank you for shopping with us.\"),\n                  dismissButton: .default(Text(\"OK\")))\n        }\n    }\n}\n\n\nSee Also\nView presentation modifiers\nfunc actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View\nPresents an action sheet when a given condition is true.\nDeprecated\nfunc actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View\nPresents an action sheet using the given item as a data source for the sheet\u2019s content.\nDeprecated\nfunc alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View\nPresents an alert to the user.\nDeprecated"
    },
    {
        "title": "Alert.Button",
        "url": "https://developer.apple.com/documentation/swiftui/alert/button",
        "html": "Deprecated\n\nUse a View modifier like alert(_:isPresented:presenting:actions:message:) instead.\n\nTopics\nGetting a button\nstatic func `default`(Text, action: (() -> Void)?) -> Alert.Button\nCreates an alert button with the default style.\nstatic func cancel((() -> Void)?) -> Alert.Button\nCreates an alert button that indicates cancellation, with a system-provided label.\nstatic func cancel(Text, action: (() -> Void)?) -> Alert.Button\nCreates an alert button that indicates cancellation, with a custom label.\nstatic func destructive(Text, action: (() -> Void)?) -> Alert.Button\nCreates an alert button with a style that indicates a destructive action."
    },
    {
        "title": "sideBySideButtons(title:message:primaryButton:secondaryButton:)",
        "url": "https://developer.apple.com/documentation/swiftui/alert/sidebysidebuttons(title:message:primarybutton:secondarybutton:)",
        "html": "Deprecated\n\nUse a View modifier like alert(_:isPresented:presenting:actions:message:) instead.\n\nParameters\ntitle\n\nThe title of the alert.\n\nmessage\n\nThe message to display in the body of the alert.\n\nprimaryButton\n\nThe first button to show in the alert.\n\nsecondaryButton\n\nThe second button to show in the alert.\n\nDiscussion\n\nThe system determines the visual ordering of the buttons.\n\nSee Also\nCreating an alert\ninit(title: Text, message: Text?, dismissButton: Alert.Button?)\nCreates an alert with one button.\nDeprecated\ninit(title: Text, message: Text?, primaryButton: Alert.Button, secondaryButton: Alert.Button)\nCreates an alert with two buttons.\nDeprecated"
    },
    {
        "title": "value",
        "url": "https://developer.apple.com/documentation/swiftui/gaugestyleconfiguration/value",
        "html": "Discussion\n\nThe valid range is 0.0...1.0.\n\nSee Also\nSetting the value\nvar currentValueLabel: GaugeStyleConfiguration.CurrentValueLabel?\nA view that describes the current value.\nstruct CurrentValueLabel\nA type-erased value label of a gauge that contains the current value.\nstruct MarkedValueLabel\nA type-erased label describing a specific value of a gauge."
    },
    {
        "title": "linearCapacity",
        "url": "https://developer.apple.com/documentation/swiftui/gaugestyle/linearcapacity",
        "html": "Discussion\n\nApply this style to a Gauge or to a view hierarchy that contains gauges using the gaugeStyle(_:) modifier:\n\nGauge(value: batteryLevel, in: 0...100) {\n    Text(\"Battery Level\")\n}\n.gaugeStyle(.linearCapacity)\n\n\nIf you provide minimumValueLabel and maximumValueLabel parameters when you create the gauge, they appear on leading and trailing edges of the bar, respectively. The label appears above the gauge, and the currentValueLabel appears below.\n\nSee Also\nGetting linear gauge styles\nstatic var linear: LinearGaugeStyle\nA gauge style that displays a bar with a marker that appears at a point along the bar to indicate the gauge\u2019s current value.\nAvailable when Self is LinearGaugeStyle.\nstatic var accessoryLinear: AccessoryLinearGaugeStyle\nA gauge style that displays bar with a marker that appears at a point along the bar to indicate the gauge\u2019s current value.\nAvailable when Self is AccessoryLinearGaugeStyle.\nstatic var accessoryLinearCapacity: AccessoryLinearCapacityGaugeStyle\nA gauge style that displays bar that fills from leading to trailing edges as the gauge\u2019s current value increases.\nAvailable when Self is AccessoryLinearCapacityGaugeStyle."
    },
    {
        "title": "circular",
        "url": "https://developer.apple.com/documentation/swiftui/gaugestyle/circular",
        "html": "Discussion\n\nApply this style to a Gauge or to a view hierarchy that contains gauges using the gaugeStyle(_:) modifier:\n\nGauge(value: batteryLevel, in: 0...100) {\n    Text(\"Battery Level\")\n}\n.gaugeStyle(.circular)\n\n\nThis style displays the gauge\u2019s currentValueLabel value at the center of the gauge. If you provide minimumValueLabel and maximumValueLabel parameters when you create the gauge, they appear in the opening at the bottom of the ring. Otherwise, the gauge places its label in that location.\n\nSee Also\nGetting circular gauge styles\nstatic var accessoryCircular: AccessoryCircularGaugeStyle\nA gauge style that displays an open ring with a marker that appears at a point along the ring to indicate the gauge\u2019s current value.\nAvailable when Self is AccessoryCircularGaugeStyle.\nstatic var accessoryCircularCapacity: AccessoryCircularCapacityGaugeStyle\nA gauge style that displays a closed ring that\u2019s partially filled in to indicate the gauge\u2019s current value.\nAvailable when Self is AccessoryCircularCapacityGaugeStyle."
    },
    {
        "title": "linear",
        "url": "https://developer.apple.com/documentation/swiftui/gaugestyle/linear",
        "html": "Discussion\n\nApply this style to a Gauge or to a view hierarchy that contains gauges using the gaugeStyle(_:) modifier:\n\nGauge(value: batteryLevel, in: 0...100) {\n    Text(\"Battery Level\")\n}\n.gaugeStyle(.linear)\n\n\nIf you provide minimumValueLabel and maximumValueLabel parameters when you create the gauge, they appear on leading and trailing edges of the bar, respectively. Otherwise, the gauge displays the currentValueLabel value on the leading edge.\n\nSee Also\nGetting linear gauge styles\nstatic var linearCapacity: LinearCapacityGaugeStyle\nA gauge style that displays a bar that fills from leading to trailing edges as the gauge\u2019s current value increases.\nAvailable when Self is LinearCapacityGaugeStyle.\nstatic var accessoryLinear: AccessoryLinearGaugeStyle\nA gauge style that displays bar with a marker that appears at a point along the bar to indicate the gauge\u2019s current value.\nAvailable when Self is AccessoryLinearGaugeStyle.\nstatic var accessoryLinearCapacity: AccessoryLinearCapacityGaugeStyle\nA gauge style that displays bar that fills from leading to trailing edges as the gauge\u2019s current value increases.\nAvailable when Self is AccessoryLinearCapacityGaugeStyle."
    },
    {
        "title": "label",
        "url": "https://developer.apple.com/documentation/swiftui/gaugestyleconfiguration/label-swift.property",
        "html": "See Also\nDescribing the purpose of the gauge\nstruct Label\nA type-erased label of a gauge, describing its purpose."
    },
    {
        "title": "GaugeStyle.Configuration",
        "url": "https://developer.apple.com/documentation/swiftui/gaugestyle/configuration",
        "html": "See Also\nCreating custom gauge styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view representing the body of a gauge.\n\nRequired\n\nassociatedtype Body : View\nA view representing the body of a gauge.\n\nRequired"
    },
    {
        "title": "DefaultGaugeStyle",
        "url": "https://developer.apple.com/documentation/swiftui/defaultgaugestyle",
        "html": "Overview\n\nYou can also use automatic to construct this style.\n\nTopics\nCreating the gauge style\ninit()\nCreates a default gauge style.\nRelationships\nConforms To\nGaugeStyle\nSee Also\nSupporting types\nstruct CircularGaugeStyle\nA gauge style that displays an open ring with a marker that appears at a point along the ring to indicate the gauge\u2019s current value.\nstruct AccessoryCircularGaugeStyle\nA gauge style that displays an open ring with a marker that appears at a point along the ring to indicate the gauge\u2019s current value.\nstruct AccessoryCircularCapacityGaugeStyle\nA gauge style that displays a closed ring that\u2019s partially filled in to indicate the gauge\u2019s current value.\nstruct LinearGaugeStyle\nA gauge style that displays a bar with a marker that appears at a point along the bar to indicate the gauge\u2019s current value.\nstruct LinearCapacityGaugeStyle\nA gauge style that displays bar that fills from leading to trailing edges as the gauge\u2019s current value increases.\nstruct AccessoryLinearGaugeStyle\nA gauge style that displays bar with a marker that appears at a point along the bar to indicate the gauge\u2019s current value.\nstruct AccessoryLinearCapacityGaugeStyle\nA gauge style that displays bar that fills from leading to trailing edges as the gauge\u2019s current value increases."
    },
    {
        "title": "AccessoryCircularGaugeStyle",
        "url": "https://developer.apple.com/documentation/swiftui/accessorycirculargaugestyle",
        "html": "Overview\n\nUse accessoryCircular to construct this style.\n\nTopics\nCreating the gauge style\ninit()\nCreates an accessory circular gauge style.\nRelationships\nConforms To\nGaugeStyle\nSee Also\nSupporting types\nstruct DefaultGaugeStyle\nThe default gauge view style in the current context of the view being styled.\nstruct CircularGaugeStyle\nA gauge style that displays an open ring with a marker that appears at a point along the ring to indicate the gauge\u2019s current value.\nstruct AccessoryCircularCapacityGaugeStyle\nA gauge style that displays a closed ring that\u2019s partially filled in to indicate the gauge\u2019s current value.\nstruct LinearGaugeStyle\nA gauge style that displays a bar with a marker that appears at a point along the bar to indicate the gauge\u2019s current value.\nstruct LinearCapacityGaugeStyle\nA gauge style that displays bar that fills from leading to trailing edges as the gauge\u2019s current value increases.\nstruct AccessoryLinearGaugeStyle\nA gauge style that displays bar with a marker that appears at a point along the bar to indicate the gauge\u2019s current value.\nstruct AccessoryLinearCapacityGaugeStyle\nA gauge style that displays bar that fills from leading to trailing edges as the gauge\u2019s current value increases."
    },
    {
        "title": "AccessoryLinearGaugeStyle",
        "url": "https://developer.apple.com/documentation/swiftui/accessorylineargaugestyle",
        "html": "Overview\n\nUse accessoryLinear to construct this style.\n\nTopics\nCreating the gauge style\ninit()\nCreates an accessory linear gauge style.\nRelationships\nConforms To\nGaugeStyle\nSee Also\nSupporting types\nstruct DefaultGaugeStyle\nThe default gauge view style in the current context of the view being styled.\nstruct CircularGaugeStyle\nA gauge style that displays an open ring with a marker that appears at a point along the ring to indicate the gauge\u2019s current value.\nstruct AccessoryCircularGaugeStyle\nA gauge style that displays an open ring with a marker that appears at a point along the ring to indicate the gauge\u2019s current value.\nstruct AccessoryCircularCapacityGaugeStyle\nA gauge style that displays a closed ring that\u2019s partially filled in to indicate the gauge\u2019s current value.\nstruct LinearGaugeStyle\nA gauge style that displays a bar with a marker that appears at a point along the bar to indicate the gauge\u2019s current value.\nstruct LinearCapacityGaugeStyle\nA gauge style that displays bar that fills from leading to trailing edges as the gauge\u2019s current value increases.\nstruct AccessoryLinearCapacityGaugeStyle\nA gauge style that displays bar that fills from leading to trailing edges as the gauge\u2019s current value increases."
    },
    {
        "title": "accessoryLinearCapacity",
        "url": "https://developer.apple.com/documentation/swiftui/gaugestyle/accessorylinearcapacity",
        "html": "Discussion\n\nApply this style to a Gauge or to a view hierarchy that contains gauges using the gaugeStyle(_:) modifier:\n\nGauge(value: batteryLevel, in: 0...100) {\n    Text(\"Battery Level\")\n}\n.gaugeStyle(.accessoryLinearCapacity)\n\n\nIf you provide minimumValueLabel and maximumValueLabel parameters when you create the gauge, they appear on leading and trailing edges of the bar, respectively. The label appears above the gauge, and the currentValueLabel appears below.\n\nSee Also\nGetting linear gauge styles\nstatic var linear: LinearGaugeStyle\nA gauge style that displays a bar with a marker that appears at a point along the bar to indicate the gauge\u2019s current value.\nAvailable when Self is LinearGaugeStyle.\nstatic var linearCapacity: LinearCapacityGaugeStyle\nA gauge style that displays a bar that fills from leading to trailing edges as the gauge\u2019s current value increases.\nAvailable when Self is LinearCapacityGaugeStyle.\nstatic var accessoryLinear: AccessoryLinearGaugeStyle\nA gauge style that displays bar with a marker that appears at a point along the bar to indicate the gauge\u2019s current value.\nAvailable when Self is AccessoryLinearGaugeStyle."
    },
    {
        "title": "AccessoryCircularCapacityGaugeStyle",
        "url": "https://developer.apple.com/documentation/swiftui/accessorycircularcapacitygaugestyle",
        "html": "Overview\n\nUse accessoryCircularCapacity to construct this style.\n\nTopics\nCreating the gauge style\ninit()\nCreates an accessory circular capacity gauge style.\nRelationships\nConforms To\nGaugeStyle\nSee Also\nSupporting types\nstruct DefaultGaugeStyle\nThe default gauge view style in the current context of the view being styled.\nstruct CircularGaugeStyle\nA gauge style that displays an open ring with a marker that appears at a point along the ring to indicate the gauge\u2019s current value.\nstruct AccessoryCircularGaugeStyle\nA gauge style that displays an open ring with a marker that appears at a point along the ring to indicate the gauge\u2019s current value.\nstruct LinearGaugeStyle\nA gauge style that displays a bar with a marker that appears at a point along the bar to indicate the gauge\u2019s current value.\nstruct LinearCapacityGaugeStyle\nA gauge style that displays bar that fills from leading to trailing edges as the gauge\u2019s current value increases.\nstruct AccessoryLinearGaugeStyle\nA gauge style that displays bar with a marker that appears at a point along the bar to indicate the gauge\u2019s current value.\nstruct AccessoryLinearCapacityGaugeStyle\nA gauge style that displays bar that fills from leading to trailing edges as the gauge\u2019s current value increases."
    },
    {
        "title": "AccessoryLinearCapacityGaugeStyle",
        "url": "https://developer.apple.com/documentation/swiftui/accessorylinearcapacitygaugestyle",
        "html": "Overview\n\nUse accessoryLinearCapacity to construct this style.\n\nTopics\nCreating the gauge style\ninit()\nCreates an accessory linear capacity gauge style.\nRelationships\nConforms To\nGaugeStyle\nSee Also\nSupporting types\nstruct DefaultGaugeStyle\nThe default gauge view style in the current context of the view being styled.\nstruct CircularGaugeStyle\nA gauge style that displays an open ring with a marker that appears at a point along the ring to indicate the gauge\u2019s current value.\nstruct AccessoryCircularGaugeStyle\nA gauge style that displays an open ring with a marker that appears at a point along the ring to indicate the gauge\u2019s current value.\nstruct AccessoryCircularCapacityGaugeStyle\nA gauge style that displays a closed ring that\u2019s partially filled in to indicate the gauge\u2019s current value.\nstruct LinearGaugeStyle\nA gauge style that displays a bar with a marker that appears at a point along the bar to indicate the gauge\u2019s current value.\nstruct LinearCapacityGaugeStyle\nA gauge style that displays bar that fills from leading to trailing edges as the gauge\u2019s current value increases.\nstruct AccessoryLinearGaugeStyle\nA gauge style that displays bar with a marker that appears at a point along the bar to indicate the gauge\u2019s current value."
    },
    {
        "title": "GlassBackgroundDisplayMode.always",
        "url": "https://developer.apple.com/documentation/swiftui/glassbackgrounddisplaymode/always",
        "html": "See Also\nGetting the mode\ncase implicit\nDisplay the glass material only when the view isn\u2019t already contained in glass.\nBeta\ncase never\nNever display the glass material.\nBeta"
    },
    {
        "title": "ToggleStyle.Configuration",
        "url": "https://developer.apple.com/documentation/swiftui/togglestyle/configuration",
        "html": "Discussion\n\nYou receive a configuration parameter of this type \u2014 which is an alias for the ToggleStyleConfiguration type \u2014 when you implement the required makeBody(configuration:) method in a custom toggle style implementation.\n\nSee Also\nCreating custom toggle styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view that represents the body of a toggle.\n\nRequired\n\nstruct ToggleStyleConfiguration\nThe properties of a toggle instance.\nassociatedtype Body : View\nA view that represents the appearance and interaction of a toggle.\n\nRequired"
    },
    {
        "title": "DefaultToggleStyle",
        "url": "https://developer.apple.com/documentation/swiftui/defaulttogglestyle",
        "html": "Overview\n\nUse the automatic static variable to create this style:\n\nToggle(\"Enhance Sound\", isOn: $isEnhanced)\n    .toggleStyle(.automatic)\n\nTopics\nCreating the toggle style\ninit()\nCreates a default toggle style.\nSupporting types\nfunc makeBody(configuration: DefaultToggleStyle.Configuration) -> some View\nCreates a view that represents the body of a toggle.\nRelationships\nConforms To\nToggleStyle\nSee Also\nSupporting types\nstruct ButtonToggleStyle\nA toggle style that displays as a button with its label as the title.\nstruct CheckboxToggleStyle\nA toggle style that displays a checkbox followed by its label.\nstruct SwitchToggleStyle\nA toggle style that displays a leading label and a trailing switch."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/togglestyle/automatic",
        "html": "Discussion\n\nUse this ToggleStyle to let SwiftUI pick a suitable style for the current platform and context. Toggles use the automatic style by default, but you might need to set it explicitly using the toggleStyle(_:) modifier to override another style in the environment. For example, you can request automatic styling for a toggle in an HStack that\u2019s otherwise configured to use the button style:\n\nHStack {\n    Toggle(isOn: $isShuffling) {\n        Label(\"Shuffle\", systemImage: \"shuffle\")\n    }\n    Toggle(isOn: $isRepeating) {\n        Label(\"Repeat\", systemImage: \"repeat\")\n    }\n\n\n    Divider()\n\n\n    Toggle(\"Enhance Sound\", isOn: $isEnhanced)\n        .toggleStyle(.automatic) // Set the style automatically here.\n}\n.toggleStyle(.button) // Use button style for toggles in the stack.\n\nPlatform defaults\n\nThe automatic style produces an appearance that varies by platform, using the following styles in most contexts:\n\nPlatform\n\n\t\n\nDefault style\n\n\n\n\niOS, iPadOS\n\n\t\n\nswitch\n\n\n\n\nmacOS\n\n\t\n\ncheckbox\n\n\n\n\ntvOS\n\n\t\n\nA tvOS-specific button style (see below)\n\n\n\n\nwatchOS\n\n\t\n\nswitch\n\nThe default style for tvOS behaves like a button. However, unlike the button style that\u2019s available in some other platforms, the tvOS toggle takes as much horizontal space as its parent offers, and displays both the toggle\u2019s label and a text field that indicates the toggle\u2019s state. You typically collect tvOS toggles into a List:\n\nList {\n    Toggle(\"Show Lyrics\", isOn: $isShowingLyrics)\n    Toggle(\"Shuffle\", isOn: $isShuffling)\n    Toggle(\"Repeat\", isOn: $isRepeating)\n}\n\n\nContextual defaults\n\nA toggle\u2019s automatic appearance varies in certain contexts:\n\nA toggle that appears as part of the content that you provide to one of the toolbar modifiers, like toolbar(content:), uses the button style by default.\n\nA toggle in a Menu uses a style that you can\u2019t create explicitly:\n\nMenu(\"Playback\") {\n    Toggle(\"Show Lyrics\", isOn: $isShowingLyrics)\n    Toggle(\"Shuffle\", isOn: $isShuffling)\n    Toggle(\"Repeat\", isOn: $isRepeating)\n}\n\n\nSwiftUI shows the toggle\u2019s label with a checkmark that appears only in the on state:\n\nPlatform\n\n\t\n\nAppearance\n\n\n\n\niOS, iPadOS\n\n\t\n\n\n\n\nmacOS\n\n\t\n\nSee Also\nGetting built-in toggle styles\nstatic var button: ButtonToggleStyle\nA toggle style that displays as a button with its label as the title.\nAvailable when Self is ButtonToggleStyle.\nstatic var checkbox: CheckboxToggleStyle\nA toggle style that displays a checkbox followed by its label.\nAvailable when Self is CheckboxToggleStyle.\nstatic var `switch`: SwitchToggleStyle\nA toggle style that displays a leading label and a trailing switch.\nAvailable when Self is SwitchToggleStyle."
    },
    {
        "title": "DefaultProgressViewStyle",
        "url": "https://developer.apple.com/documentation/swiftui/defaultprogressviewstyle",
        "html": "Overview\n\nUse automatic to construct this style.\n\nTopics\nCreating the progress view style\ninit()\nCreates a default progress view style.\nRelationships\nConforms To\nProgressViewStyle\nSee Also\nSupporting types\nstruct CircularProgressViewStyle\nA progress view that uses a circular gauge to indicate the partial completion of an activity.\nstruct LinearProgressViewStyle\nA progress view that visually indicates its progress using a horizontal bar."
    },
    {
        "title": "ProgressViewStyle.Configuration",
        "url": "https://developer.apple.com/documentation/swiftui/progressviewstyle/configuration",
        "html": "See Also\nCreating custom progress view styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view representing the body of a progress view.\n\nRequired\n\nassociatedtype Body : View\nA view representing the body of a progress view.\n\nRequired"
    },
    {
        "title": "CircularProgressViewStyle",
        "url": "https://developer.apple.com/documentation/swiftui/circularprogressviewstyle",
        "html": "Overview\n\nOn watchOS, and in widgets and complications, a circular progress view appears as a gauge with the accessoryCircularCapacity style. If the progress view is indeterminate, the gauge is empty.\n\nIn cases where no determinate circular progress view style is available, circular progress views use an indeterminate style.\n\nUse circular to construct the circular progress view style.\n\nTopics\nCreating the progress view style\ninit()\nCreates a circular progress view style.\nDeprecated initializers\ninit(tint: Color)\nCreates a circular progress view style with a tint color.\nDeprecated\nRelationships\nConforms To\nProgressViewStyle\nSee Also\nSupporting types\nstruct DefaultProgressViewStyle\nThe default progress view style in the current context of the view being styled.\nstruct LinearProgressViewStyle\nA progress view that visually indicates its progress using a horizontal bar."
    },
    {
        "title": "LinearProgressViewStyle",
        "url": "https://developer.apple.com/documentation/swiftui/linearprogressviewstyle",
        "html": "Overview\n\nUse linear to construct this style.\n\nTopics\nCreating the progress view style\ninit()\nCreates a linear progress view style.\nDeprecated initializers\ninit(tint: Color)\nCreates a linear progress view style with a tint color.\nDeprecated\nRelationships\nConforms To\nProgressViewStyle\nSee Also\nSupporting types\nstruct DefaultProgressViewStyle\nThe default progress view style in the current context of the view being styled.\nstruct CircularProgressViewStyle\nA progress view that uses a circular gauge to indicate the partial completion of an activity."
    },
    {
        "title": "linear",
        "url": "https://developer.apple.com/documentation/swiftui/progressviewstyle/linear",
        "html": "See Also\nGetting built-in progress view styles\nstatic var automatic: DefaultProgressViewStyle\nThe default progress view style in the current context of the view being styled.\nAvailable when Self is DefaultProgressViewStyle.\nstatic var circular: CircularProgressViewStyle\nThe style of a progress view that uses a circular gauge to indicate the partial completion of an activity.\nAvailable when Self is CircularProgressViewStyle."
    },
    {
        "title": "CheckboxToggleStyle",
        "url": "https://developer.apple.com/documentation/swiftui/checkboxtogglestyle",
        "html": "Overview\n\nUse the checkbox static variable to create this style:\n\nToggle(\"Close windows when quitting an app\", isOn: $doesClose)\n    .toggleStyle(.checkbox)\n\nTopics\nCreating the toggle style\ninit()\nCreates a checkbox toggle style.\nSupporting types\nfunc makeBody(configuration: CheckboxToggleStyle.Configuration) -> some View\nCreates a view that represents the body of a toggle checkbox.\nRelationships\nConforms To\nToggleStyle\nSee Also\nSupporting types\nstruct DefaultToggleStyle\nThe default toggle style.\nstruct ButtonToggleStyle\nA toggle style that displays as a button with its label as the title.\nstruct SwitchToggleStyle\nA toggle style that displays a leading label and a trailing switch."
    },
    {
        "title": "$isOn",
        "url": "https://developer.apple.com/documentation/swiftui/togglestyleconfiguration/$ison",
        "html": "See Also\nManaging the toggle state\nvar isMixed: Bool\nWhether the Toggle is currently in a mixed state.\nvar isOn: Bool\nA binding to a state property that indicates whether the toggle is on."
    },
    {
        "title": "circular",
        "url": "https://developer.apple.com/documentation/swiftui/progressviewstyle/circular",
        "html": "Discussion\n\nOn watchOS, and in widgets and complications, a circular progress view appears as a gauge with the accessoryCircularCapacity style. If the progress view is indeterminate, the gauge is empty.\n\nIn cases where no determinate circular progress view style is available, circular progress views use an indeterminate style.\n\nSee Also\nGetting built-in progress view styles\nstatic var automatic: DefaultProgressViewStyle\nThe default progress view style in the current context of the view being styled.\nAvailable when Self is DefaultProgressViewStyle.\nstatic var linear: LinearProgressViewStyle\nA progress view that visually indicates its progress using a horizontal bar.\nAvailable when Self is LinearProgressViewStyle."
    },
    {
        "title": "GlassBackgroundDisplayMode.implicit",
        "url": "https://developer.apple.com/documentation/swiftui/glassbackgrounddisplaymode/implicit",
        "html": "Discussion\n\nUse this value to avoid duplicate backgrounds when a view that has a glass background contains another view that also has a glass background.\n\nThis display mode doesn\u2019t suppress duplicate glass backgrounds for views that are offset by any amount in the z-axis. For example, the two subviews of the following HStack behave differently:\n\nHStack {\n    MyView()\n        .glassBackgroundEffect(displayMode: .implicit)\n    MyView()\n        .glassBackgroundEffect(displayMode: .implicit)\n        .offset(z: 100)\n}\n.glassBackgroundEffect(displayMode: .always)\n\n\nThe first instance of MyView doesn\u2019t display a background because its container displays one. However the second instance does display a background because that view is offset from its container by 100 points along the z-axis.\n\nSee Also\nGetting the mode\ncase always\nAlways display the glass material.\nBeta\ncase never\nNever display the glass material.\nBeta"
    },
    {
        "title": "enumeratePackages",
        "url": "https://developer.apple.com/documentation/swiftui/filedialogbrowseroptions/enumeratepackages",
        "html": "See Also\nGetting browser options\nstatic let displayFileExtensions: FileDialogBrowserOptions\nOn iOS, configures the fileExporter, fileImporter, or fileMover to show or hide file extensions. Default behavior is to hide them. On macOS, this option has no effect.\nstatic let includeHiddenFiles: FileDialogBrowserOptions\nDisplays the files that are hidden by default."
    },
    {
        "title": "displayFileExtensions",
        "url": "https://developer.apple.com/documentation/swiftui/filedialogbrowseroptions/displayfileextensions",
        "html": "See Also\nGetting browser options\nstatic let enumeratePackages: FileDialogBrowserOptions\nAllows enumerating packages contents in contrast to the default behavior when packages are represented flatly, similar to files.\nstatic let includeHiddenFiles: FileDialogBrowserOptions\nDisplays the files that are hidden by default."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/scenestorage/init(_:)-7cs7p",
        "html": "Parameters\nkey\n\nThe key to read and write the value to in the scene storage.\n\nDiscussion\n\nDefaults to nil if there is no restored value.\n\n@Model class Recipe { ... }\nstruct RecipeList: View {\n    @Query var recipes: [Recipe]\n    @SceneStorage(\"selectedID\") var selectedRecipeID: Recipe.ID?\n\n\n    var body: some View {\n        List(recipes, selection: $selectedRecipeID) { recipe in\n            RecipeDetail(recipe)\n        }\n    }\n}\n\nSee Also\nStoring an optional value\ninit(String)\nCreates a property that can save and restore an Optional string.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit<R>(String)\nCreates a property that can save and restore an Optional integer, transforming it to an Optional RawRepresentable data type.\ninit(String)\nCreates a property that can save and restore an Optional double.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional boolean.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional data.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional URL.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional integer.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit<R>(String)\nCreates a property that can save and restore an Optional string, transforming it to an Optional RawRepresentable data type."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/scenestorage/init(_:)-3su4w",
        "html": "Parameters\nkey\n\na key used to save and restore the value.\n\nDiscussion\n\nDefaults to nil if there is no restored value\n\nSee Also\nStoring an optional value\ninit(String)\nCreates a property that can save and restore an Optional string.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit<R>(String)\nCreates a property that can save and restore an Optional integer, transforming it to an Optional RawRepresentable data type.\ninit(String)\nCreates a property that can save and restore an Optional boolean.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional data.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional URL.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional integer.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit<R>(String)\nCreates a property that can save and restore an Optional string, transforming it to an Optional RawRepresentable data type.\ninit(String)\nCreates a property that can read and write an Optional data user default via PersistentIdentifier."
    },
    {
        "title": "wrappedValue",
        "url": "https://developer.apple.com/documentation/swiftui/scenestorage/wrappedvalue",
        "html": "Discussion\n\nThis works identically to State.wrappedValue.\n\nSee Also\n\nState.wrappedValue\n\nSee Also\nGetting the value\nvar projectedValue: Binding<Value>\nA binding to the state value."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/scenestorage/init(_:)-19eh9",
        "html": "Parameters\nkey\n\na key used to save and restore the value.\n\nDiscussion\n\nDefaults to nil if there is no restored value\n\nSee Also\nStoring an optional value\ninit<R>(String)\nCreates a property that can save and restore an Optional integer, transforming it to an Optional RawRepresentable data type.\ninit(String)\nCreates a property that can save and restore an Optional double.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional boolean.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional data.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional URL.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional integer.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit<R>(String)\nCreates a property that can save and restore an Optional string, transforming it to an Optional RawRepresentable data type.\ninit(String)\nCreates a property that can read and write an Optional data user default via PersistentIdentifier."
    },
    {
        "title": "sheet",
        "url": "https://developer.apple.com/documentation/swiftui/presentationadaptation/sheet",
        "html": "See Also\nGetting adaptation strategies\nstatic var automatic: PresentationAdaptation\nUse the default presentation adaptation.\nstatic var none: PresentationAdaptation\nDon\u2019t adapt for the size class, if possible.\nstatic var fullScreenCover: PresentationAdaptation\nPrefer a full-screen-cover appearance when adapting for size classes.\nstatic var popover: PresentationAdaptation\nPrefer a popover appearance when adapting for size classes."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/scenestorage/init(_:)-5dsb9",
        "html": "Parameters\nkey\n\na key used to save and restore the value.\n\nDiscussion\n\nDefaults to nil if there is no restored value\n\nSee Also\nStoring an optional value\ninit(String)\nCreates a property that can save and restore an Optional string.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit<R>(String)\nCreates a property that can save and restore an Optional integer, transforming it to an Optional RawRepresentable data type.\ninit(String)\nCreates a property that can save and restore an Optional double.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional data.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional URL.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional integer.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit<R>(String)\nCreates a property that can save and restore an Optional string, transforming it to an Optional RawRepresentable data type.\ninit(String)\nCreates a property that can read and write an Optional data user default via PersistentIdentifier."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/scenestorage/init(_:)-6j1ly",
        "html": "Parameters\nkey\n\na key used to save and restore the value.\n\nDiscussion\n\nDefaults to nil if there is no restored value\n\nSee Also\nStoring an optional value\ninit(String)\nCreates a property that can save and restore an Optional string.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit<R>(String)\nCreates a property that can save and restore an Optional integer, transforming it to an Optional RawRepresentable data type.\ninit(String)\nCreates a property that can save and restore an Optional double.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional boolean.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional data.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String)\nCreates a property that can save and restore an Optional integer.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit<R>(String)\nCreates a property that can save and restore an Optional string, transforming it to an Optional RawRepresentable data type.\ninit(String)\nCreates a property that can read and write an Optional data user default via PersistentIdentifier."
    },
    {
        "title": "defaultValue",
        "url": "https://developer.apple.com/documentation/swiftui/environmentkey/defaultvalue",
        "html": "Required\n\nSee Also\nGetting the default value\nassociatedtype Value\nThe associated type representing the type of the environment key\u2019s value.\n\nRequired"
    },
    {
        "title": "init(wrappedValue:_:store:)",
        "url": "https://developer.apple.com/documentation/swiftui/appstorage/init(wrappedvalue:_:store:)-7zk4r",
        "html": "Parameters\nwrappedValue\n\nThe default value if a string value is not specified for the given key.\n\nkey\n\nThe key to read and write the value to in the user defaults store.\n\nstore\n\nThe user defaults store to read and write to. A value of nil will use the user default store from the environment.\n\nDiscussion\n\nA common usage is with enumerations:\n\nenum MyEnum: String { case a case b case c } struct MyView: View { @AppStorage(\u201cMyEnumValue\u201d) private var value = MyEnum.a var body: some View { \u2026 } }\n\nSee Also\nStoring a value\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a string user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to an integer user default, transforming that to RawRepresentable data type.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a user default as data.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to an integer user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a url user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a double user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a boolean user default.\ninit<RowValue>(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can save and restore table column state.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a user default as data via PersistentIdentifier."
    },
    {
        "title": "init(wrappedValue:_:store:)",
        "url": "https://developer.apple.com/documentation/swiftui/appstorage/init(wrappedvalue:_:store:)-6kizt",
        "html": "Parameters\nwrappedValue\n\nThe default value if an integer value is not specified for the given key.\n\nkey\n\nThe key to read and write the value to in the user defaults store.\n\nstore\n\nThe user defaults store to read and write to. A value of nil will use the user default store from the environment.\n\nSee Also\nStoring a value\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a string user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to an integer user default, transforming that to RawRepresentable data type.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a user default as data.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a string user default, transforming that to RawRepresentable data type.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a url user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a double user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a boolean user default.\ninit<RowValue>(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can save and restore table column state.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a user default as data via PersistentIdentifier."
    },
    {
        "title": "accessibilityLabel(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilitylabel(_:)-2gu84",
        "html": "Discussion\n\nUse this method to provide an accessibility label for a view that doesn\u2019t display text, like an icon. For example, you could use this method to label a button that plays music with the text \u201cPlay\u201d. Don\u2019t include text in the label that repeats information that users already have. For example, don\u2019t use the label \u201cPlay button\u201d because a button already has a trait that identifies it as a button."
    },
    {
        "title": "init(wrappedValue:_:store:)",
        "url": "https://developer.apple.com/documentation/swiftui/appstorage/init(wrappedvalue:_:store:)-83h3v",
        "html": "Parameters\nwrappedValue\n\nThe default value if a url value is not specified for the given key.\n\nkey\n\nThe key to read and write the value to in the user defaults store.\n\nstore\n\nThe user defaults store to read and write to. A value of nil will use the user default store from the environment.\n\nSee Also\nStoring a value\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a string user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to an integer user default, transforming that to RawRepresentable data type.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a user default as data.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to an integer user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a string user default, transforming that to RawRepresentable data type.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a double user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a boolean user default.\ninit<RowValue>(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can save and restore table column state.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a user default as data via PersistentIdentifier."
    },
    {
        "title": "accessibility(identifier:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibility(identifier:)",
        "html": "Deprecated\n\nUse accessibilityIdentifier(_:) instead.\n\nDiscussion\n\nUse this value for testing. It isn\u2019t visible to the user."
    },
    {
        "title": "init(wrappedValue:_:store:)",
        "url": "https://developer.apple.com/documentation/swiftui/appstorage/init(wrappedvalue:_:store:)-93wa7",
        "html": "Parameters\nwrappedValue\n\nThe default value if a double value is not specified for the given key.\n\nkey\n\nThe key to read and write the value to in the user defaults store.\n\nstore\n\nThe user defaults store to read and write to. A value of nil will use the user default store from the environment.\n\nSee Also\nStoring a value\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a string user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to an integer user default, transforming that to RawRepresentable data type.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a user default as data.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to an integer user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a string user default, transforming that to RawRepresentable data type.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a url user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a boolean user default.\ninit<RowValue>(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can save and restore table column state.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a user default as data via PersistentIdentifier."
    },
    {
        "title": "init(wrappedValue:_:store:)",
        "url": "https://developer.apple.com/documentation/swiftui/appstorage/init(wrappedvalue:_:store:)-v58d",
        "html": "Parameters\nwrappedValue\n\nThe default value if a boolean value is not specified for the given key.\n\nkey\n\nThe key to read and write the value to in the user defaults store.\n\nstore\n\nThe user defaults store to read and write to. A value of nil will use the user default store from the environment.\n\nSee Also\nStoring a value\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a string user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to an integer user default, transforming that to RawRepresentable data type.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a user default as data.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to an integer user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a string user default, transforming that to RawRepresentable data type.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a url user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a double user default.\ninit<RowValue>(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can save and restore table column state.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a user default as data via PersistentIdentifier."
    },
    {
        "title": "init(wrappedValue:_:store:)",
        "url": "https://developer.apple.com/documentation/swiftui/appstorage/init(wrappedvalue:_:store:)-5mu67",
        "html": "Parameters\nwrappedValue\n\nThe default value if table column state is not available for the given key.\n\nkey\n\nThe key to read and write the value to in the user defaults store.\n\nstore\n\nThe user defaults store to read and write to. A value of nil will use the user default store from the environment.\n\nDiscussion\n\nTable column state is typically not bound from a table directly to AppStorage, but instead indirecting through State or SceneStorage, and using the app storage value as its initial value kept up to date on changes to the direct backing.\n\nSee Also\nStoring a value\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a string user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to an integer user default, transforming that to RawRepresentable data type.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a user default as data.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to an integer user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a string user default, transforming that to RawRepresentable data type.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a url user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a double user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a boolean user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a user default as data via PersistentIdentifier."
    },
    {
        "title": "accessibilityInputLabels(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilityinputlabels(_:)-8fxkf",
        "html": "Discussion\n\nProvide labels in descending order of importance. Voice Control and Full Keyboard Access use the input labels.\n\nNote\n\nIf you don\u2019t specify any input labels, the user can still refer to the view using the accessibility label that you add with the accessibilityLabel() modifier."
    },
    {
        "title": "accessibilityValue(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilityvalue(_:)-1esu1",
        "html": "Discussion\n\nUse this method to describe the value represented by a view, but only if that\u2019s different than the view\u2019s label. For example, for a slider that you label as \u201cVolume\u201d using accessibilityLabel(), you can provide the current volume setting, like \u201c60%\u201d, using accessibilityValue()."
    },
    {
        "title": "init(wrappedValue:_:store:)",
        "url": "https://developer.apple.com/documentation/swiftui/appstorage/init(wrappedvalue:_:store:)-80wjg",
        "html": "Parameters\nwrappedValue\n\nThe default value if a data value is not specified for the given key.\n\nkey\n\nThe key to read and write the value to in the user defaults store.\n\nstore\n\nThe user defaults store to read and write to. A value of nil will use the user default store from the environment.\n\nDiscussion\n\nUse this property wrapper when the wrapped persistent identifier is known to always be non-optional. For storing optional persistent identifiers, use AppStorage/init(_:store:) instead.\n\nSee Also\nStoring a value\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a string user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to an integer user default, transforming that to RawRepresentable data type.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a user default as data.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to an integer user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a string user default, transforming that to RawRepresentable data type.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a url user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a double user default.\ninit(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can read and write to a boolean user default.\ninit<RowValue>(wrappedValue: Value, String, store: UserDefaults?)\nCreates a property that can save and restore table column state."
    },
    {
        "title": "projectedValue",
        "url": "https://developer.apple.com/documentation/swiftui/appstorage/projectedvalue",
        "html": "See Also\nGetting the value\nvar wrappedValue: Value"
    },
    {
        "title": "init(_:store:)",
        "url": "https://developer.apple.com/documentation/swiftui/appstorage/init(_:store:)-x2f0",
        "html": "Parameters\nkey\n\nThe key to read and write the value to in the user defaults store.\n\nstore\n\nThe user defaults store to read and write to. A value of nil will use the user default store from the environment.\n\nDiscussion\n\nDefaults to nil if there is no restored value.\n\nSee Also\nStoring an optional value\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional integer user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional string user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional double user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit<R>(String, store: UserDefaults?)\nCreates a property that can save and restore an Optional integer, transforming it to an Optional RawRepresentable data type.\ninit<R>(String, store: UserDefaults?)\nCreates a property that can save and restore an Optional string, transforming it to an Optional RawRepresentable data type.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional data user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional boolean user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional data user default via PersistentIdentifier."
    },
    {
        "title": "init(content:modifier:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/init(content:modifier:)",
        "html": "Parameters\ncontent\n\nThe content that the modifier changes.\n\nmodifier\n\nThe modifier to apply to the content.\n\nDiscussion\n\nIf content is a View and modifier is a ViewModifier, the result is a View. If content and modifier are both view modifiers, then the result is a new ViewModifier combining them.\n\nSee Also\nCreating a modified content view\nvar content: Content\nThe content that the modifier transforms into a new view or new view modifier.\nvar modifier: Modifier\nThe view modifier."
    },
    {
        "title": "init(_:store:)",
        "url": "https://developer.apple.com/documentation/swiftui/appstorage/init(_:store:)-6aj8x",
        "html": "Parameters\nkey\n\nThe key to read and write the value to in the user defaults store.\n\nstore\n\nThe user defaults store to read and write to. A value of nil will use the user default store from the environment.\n\nDiscussion\n\nDefaults to nil if there is no restored value\n\nA common usage is with enumerations:\n\nenum MyEnum: String {\n    case a\n    case b\n    case c\n}\nstruct MyView: View {\n    @AppStorage(\"MyEnumValue\") private var value: MyEnum?\n    var body: some View { ... }\n}\n\nSee Also\nStoring an optional value\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional integer user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional string user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional double user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit<R>(String, store: UserDefaults?)\nCreates a property that can save and restore an Optional integer, transforming it to an Optional RawRepresentable data type.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional data user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional boolean user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional URL user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional data user default via PersistentIdentifier."
    },
    {
        "title": "accessoryCircular",
        "url": "https://developer.apple.com/documentation/swiftui/gaugestyle/accessorycircular",
        "html": "Discussion\n\nApply this style to a Gauge or to a view hierarchy that contains gauges using the gaugeStyle(_:) modifier:\n\nGauge(value: batteryLevel, in: 0...100) {\n    Text(\"Battery Level\")\n}\n.gaugeStyle(.accessoryCircular)\n\n\nThis style displays the gauge\u2019s currentValueLabel value at the center of the gauge. If you provide minimumValueLabel and maximumValueLabel parameters when you create the gauge, they appear in the opening at the bottom of the ring. Otherwise, the gauge places its label in that location.\n\nSee Also\nGetting circular gauge styles\nstatic var circular: CircularGaugeStyle\nA gauge style that displays an open ring with a marker that appears at a point along the ring to indicate the gauge\u2019s current value.\nAvailable when Self is CircularGaugeStyle.\nstatic var accessoryCircularCapacity: AccessoryCircularCapacityGaugeStyle\nA gauge style that displays a closed ring that\u2019s partially filled in to indicate the gauge\u2019s current value.\nAvailable when Self is AccessoryCircularCapacityGaugeStyle."
    },
    {
        "title": "init(_:store:)",
        "url": "https://developer.apple.com/documentation/swiftui/appstorage/init(_:store:)-5eqyh",
        "html": "Parameters\nkey\n\nThe key to read and write the value to in the user defaults store.\n\nstore\n\nThe user defaults store to read and write to. A value of nil will use the user default store from the environment.\n\nDiscussion\n\nDefaults to nil if there is no restored value\n\nA common usage is with enumerations:\n\nenum MyEnum: Int {\n    case a\n    case b\n    case c\n}\nstruct MyView: View {\n    @AppStorage(\"MyEnumValue\") private var value: MyEnum?\n    var body: some View { ... }\n}\n\nSee Also\nStoring an optional value\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional integer user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional string user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional double user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit<R>(String, store: UserDefaults?)\nCreates a property that can save and restore an Optional string, transforming it to an Optional RawRepresentable data type.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional data user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional boolean user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional URL user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional data user default via PersistentIdentifier."
    },
    {
        "title": "init(_:store:)",
        "url": "https://developer.apple.com/documentation/swiftui/appstorage/init(_:store:)-85bj",
        "html": "Parameters\nkey\n\nThe key to read and write the value to in the user defaults store.\n\nstore\n\nThe user defaults store to read and write to. A value of nil will use the user default store from the environment.\n\nDiscussion\n\nDefaults to nil if there is no restored value.\n\nSee Also\nStoring an optional value\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional integer user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional string user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional double user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit<R>(String, store: UserDefaults?)\nCreates a property that can save and restore an Optional integer, transforming it to an Optional RawRepresentable data type.\ninit<R>(String, store: UserDefaults?)\nCreates a property that can save and restore an Optional string, transforming it to an Optional RawRepresentable data type.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional data user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional URL user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional data user default via PersistentIdentifier."
    },
    {
        "title": "init(title:message:buttons:)",
        "url": "https://developer.apple.com/documentation/swiftui/actionsheet/init(title:message:buttons:)",
        "html": "Deprecated\n\nUse a View modifier like confirmationDialog(_:isPresented:titleVisibility:presenting:actions:message:) instead.\n\nParameters\ntitle\n\nThe title of the action sheet.\n\nmessage\n\nThe message to display in the body of the action sheet.\n\nbuttons\n\nThe buttons to show in the action sheet."
    },
    {
        "title": "init(_:store:)",
        "url": "https://developer.apple.com/documentation/swiftui/appstorage/init(_:store:)-6nhw0",
        "html": "Parameters\nkey\n\nThe key to read and write the value to in the user defaults store.\n\nstore\n\nThe user defaults store to read and write to. A value of nil will use the user default store from the environment.\n\nDiscussion\n\nDefaults to nil if there is no restored value.\n\nSee Also\nStoring an optional value\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional integer user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional string user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional double user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit<R>(String, store: UserDefaults?)\nCreates a property that can save and restore an Optional integer, transforming it to an Optional RawRepresentable data type.\ninit<R>(String, store: UserDefaults?)\nCreates a property that can save and restore an Optional string, transforming it to an Optional RawRepresentable data type.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional boolean user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional URL user default.\nAvailable when Value conforms to ExpressibleByNilLiteral.\ninit(String, store: UserDefaults?)\nCreates a property that can read and write an Optional data user default via PersistentIdentifier."
    },
    {
        "title": "init(title:message:dismissButton:)",
        "url": "https://developer.apple.com/documentation/swiftui/alert/init(title:message:dismissbutton:)",
        "html": "Deprecated\n\nUse a View modifier like alert(_:isPresented:presenting:actions:message:) instead.\n\nParameters\ntitle\n\nThe title of the alert.\n\nmessage\n\nThe message to display in the body of the alert.\n\ndismissButton\n\nThe button that dismisses the alert.\n\nSee Also\nCreating an alert\ninit(title: Text, message: Text?, primaryButton: Alert.Button, secondaryButton: Alert.Button)\nCreates an alert with two buttons.\nDeprecated\nstatic func sideBySideButtons(title: Text, message: Text?, primaryButton: Alert.Button, secondaryButton: Alert.Button) -> Alert\nCreates a side by side button alert.\nDeprecated"
    },
    {
        "title": "accessoryCircularCapacity",
        "url": "https://developer.apple.com/documentation/swiftui/gaugestyle/accessorycircularcapacity",
        "html": "Discussion\n\nApply this style to a Gauge or to a view hierarchy that contains gauges using the gaugeStyle(_:) modifier:\n\nGauge(value: batteryLevel, in: 0...100) {\n    Text(\"Battery Level\")\n}\n.gaugeStyle(.accessoryCircularCapacity)\n\n\nThis style displays the gauge\u2019s currentValueLabel value at the center of the gauge.\n\nSee Also\nGetting circular gauge styles\nstatic var circular: CircularGaugeStyle\nA gauge style that displays an open ring with a marker that appears at a point along the ring to indicate the gauge\u2019s current value.\nAvailable when Self is CircularGaugeStyle.\nstatic var accessoryCircular: AccessoryCircularGaugeStyle\nA gauge style that displays an open ring with a marker that appears at a point along the ring to indicate the gauge\u2019s current value.\nAvailable when Self is AccessoryCircularGaugeStyle."
    },
    {
        "title": "init(title:message:primaryButton:secondaryButton:)",
        "url": "https://developer.apple.com/documentation/swiftui/alert/init(title:message:primarybutton:secondarybutton:)",
        "html": "Deprecated\n\nUse a View modifier like alert(_:isPresented:presenting:actions:message:) instead.\n\nParameters\ntitle\n\nThe title of the alert.\n\nmessage\n\nThe message to display in the body of the alert.\n\nprimaryButton\n\nThe first button to show in the alert.\n\nsecondaryButton\n\nThe second button to show in the alert.\n\nDiscussion\n\nThe system determines the visual ordering of the buttons.\n\nSee Also\nCreating an alert\ninit(title: Text, message: Text?, dismissButton: Alert.Button?)\nCreates an alert with one button.\nDeprecated\nstatic func sideBySideButtons(title: Text, message: Text?, primaryButton: Alert.Button, secondaryButton: Alert.Button) -> Alert\nCreates a side by side button alert.\nDeprecated"
    },
    {
        "title": "subscript(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/subscript(_:)-7mwy1",
        "html": "Overview\n\nCreate custom environment values by defining a key that conforms to the EnvironmentKey protocol, and then using that key with the subscript operator of the EnvironmentValues structure to get and set a value for that key:\n\nprivate struct MyEnvironmentKey: EnvironmentKey {\n    static let defaultValue: String = \"Default value\"\n}\n\n\nextension EnvironmentValues {\n    var myCustomValue: String {\n        get { self[MyEnvironmentKey.self] }\n        set { self[MyEnvironmentKey.self] = newValue }\n    }\n}\n\n\nYou use custom environment values the same way you use system-provided values, setting a value with the environment(_:_:) view modifier, and reading values with the Environment property wrapper. You can also provide a dedicated view modifier as a convenience for setting the value:\n\nextension View {\n    func myCustomValue(_ myCustomValue: String) -> some View {\n        environment(\\.myCustomValue, myCustomValue)\n    }\n}\n\nSee Also\nCreating and accessing values\ninit()\nCreates an environment values instance.\nsubscript<T>(T.Type) -> T?\nReads an observable object of the specified type from the environment.\nsubscript<K>(K.Type) -> K.Value\nAccesses the environment value associated with a custom key.\nvar description: String\nA string that represents the contents of the environment values instance."
    },
    {
        "title": "makeBody(configuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/gaugestyle/makebody(configuration:)",
        "html": "Required\n\nParameters\nconfiguration\n\nThe properties to apply to the gauge instance.\n\nDiscussion\n\nThe system calls this modifier on each instance of gauge within a view hierarchy where this style is the current gauge style.\n\nSee Also\nCreating custom gauge styles\ntypealias Configuration\nThe properties of a gauge instance.\nassociatedtype Body : View\nA view representing the body of a gauge.\n\nRequired"
    },
    {
        "title": "Body",
        "url": "https://developer.apple.com/documentation/swiftui/gaugestyle/body",
        "html": "Required\n\nSee Also\nCreating custom gauge styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view representing the body of a gauge.\n\nRequired\n\ntypealias Configuration\nThe properties of a gauge instance."
    },
    {
        "title": "CircularGaugeStyle",
        "url": "https://developer.apple.com/documentation/swiftui/circulargaugestyle",
        "html": "Overview\n\nUse circular to construct this style.\n\nTopics\nCreating the gauge style\ninit()\nCreates a circular gauge.\ninit(tint: Color)\nCreates a circular gauge that draws with a specified color.\ninit(tint: Gradient)\nCreates a circular gauge that draws with a specified gradient.\nRelationships\nConforms To\nGaugeStyle\nSee Also\nSupporting types\nstruct DefaultGaugeStyle\nThe default gauge view style in the current context of the view being styled.\nstruct AccessoryCircularGaugeStyle\nA gauge style that displays an open ring with a marker that appears at a point along the ring to indicate the gauge\u2019s current value.\nstruct AccessoryCircularCapacityGaugeStyle\nA gauge style that displays a closed ring that\u2019s partially filled in to indicate the gauge\u2019s current value.\nstruct LinearGaugeStyle\nA gauge style that displays a bar with a marker that appears at a point along the bar to indicate the gauge\u2019s current value.\nstruct LinearCapacityGaugeStyle\nA gauge style that displays bar that fills from leading to trailing edges as the gauge\u2019s current value increases.\nstruct AccessoryLinearGaugeStyle\nA gauge style that displays bar with a marker that appears at a point along the bar to indicate the gauge\u2019s current value.\nstruct AccessoryLinearCapacityGaugeStyle\nA gauge style that displays bar that fills from leading to trailing edges as the gauge\u2019s current value increases."
    },
    {
        "title": "LinearGaugeStyle",
        "url": "https://developer.apple.com/documentation/swiftui/lineargaugestyle",
        "html": "Overview\n\nUse linear to construct this style.\n\nTopics\nCreating the gauge style\ninit()\nCreates a linear gauge style.\nDeprecated initializers\ninit(tint: Color)\nCreates a linear gauge style with a tint color.\nDeprecated\ninit(tint: Gradient)\nCreates a linear gauge style with a tint gradient.\nDeprecated\nRelationships\nConforms To\nGaugeStyle\nSee Also\nSupporting types\nstruct DefaultGaugeStyle\nThe default gauge view style in the current context of the view being styled.\nstruct CircularGaugeStyle\nA gauge style that displays an open ring with a marker that appears at a point along the ring to indicate the gauge\u2019s current value.\nstruct AccessoryCircularGaugeStyle\nA gauge style that displays an open ring with a marker that appears at a point along the ring to indicate the gauge\u2019s current value.\nstruct AccessoryCircularCapacityGaugeStyle\nA gauge style that displays a closed ring that\u2019s partially filled in to indicate the gauge\u2019s current value.\nstruct LinearCapacityGaugeStyle\nA gauge style that displays bar that fills from leading to trailing edges as the gauge\u2019s current value increases.\nstruct AccessoryLinearGaugeStyle\nA gauge style that displays bar with a marker that appears at a point along the bar to indicate the gauge\u2019s current value.\nstruct AccessoryLinearCapacityGaugeStyle\nA gauge style that displays bar that fills from leading to trailing edges as the gauge\u2019s current value increases."
    },
    {
        "title": "LinearCapacityGaugeStyle",
        "url": "https://developer.apple.com/documentation/swiftui/linearcapacitygaugestyle",
        "html": "Overview\n\nUse linearCapacity to construct this style.\n\nTopics\nCreating the gauge style\ninit()\nCreates a linear capacity gauge style.\nRelationships\nConforms To\nGaugeStyle\nSee Also\nSupporting types\nstruct DefaultGaugeStyle\nThe default gauge view style in the current context of the view being styled.\nstruct CircularGaugeStyle\nA gauge style that displays an open ring with a marker that appears at a point along the ring to indicate the gauge\u2019s current value.\nstruct AccessoryCircularGaugeStyle\nA gauge style that displays an open ring with a marker that appears at a point along the ring to indicate the gauge\u2019s current value.\nstruct AccessoryCircularCapacityGaugeStyle\nA gauge style that displays a closed ring that\u2019s partially filled in to indicate the gauge\u2019s current value.\nstruct LinearGaugeStyle\nA gauge style that displays a bar with a marker that appears at a point along the bar to indicate the gauge\u2019s current value.\nstruct AccessoryLinearGaugeStyle\nA gauge style that displays bar with a marker that appears at a point along the bar to indicate the gauge\u2019s current value.\nstruct AccessoryLinearCapacityGaugeStyle\nA gauge style that displays bar that fills from leading to trailing edges as the gauge\u2019s current value increases."
    },
    {
        "title": "makeBody(configuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/togglestyle/makebody(configuration:)",
        "html": "Required\n\nParameters\nconfiguration\n\nThe properties of the toggle, including a label and a binding to the toggle\u2019s state.\n\nReturn Value\n\nA view that has behavior and appearance that enables it to function as a Toggle.\n\nDiscussion\n\nImplement this method when you define a custom toggle style that conforms to the ToggleStyle protocol. Use the configuration input \u2014 a ToggleStyleConfiguration instance \u2014 to access the toggle\u2019s label and state. Return a view that has the appearance and behavior of a toggle. For example you can create a toggle that displays a label and a circle that\u2019s either empty or filled with a checkmark:\n\nstruct ChecklistToggleStyle: ToggleStyle {\n    func makeBody(configuration: Configuration) -> some View {\n        Button {\n            configuration.isOn.toggle()\n        } label: {\n            HStack {\n                Image(systemName: configuration.isOn\n                        ? \"checkmark.circle.fill\"\n                        : \"circle\")\n                configuration.label\n            }\n        }\n        .tint(.primary)\n        .buttonStyle(.borderless)\n    }\n}\n\n\nThe ChecklistToggleStyle toggle style provides a way to both observe and modify the toggle state: the circle fills for the on state, and users can tap or click the toggle to change the state. By using a customized Button to compose the toggle\u2019s body, SwiftUI automatically provides the behaviors that users expect from a control that has button-like characteristics.\n\nYou can present a collection of toggles that use this style in a stack:\n\nWhen updating a view hierarchy, the system calls your implementation of the makeBody(configuration:) method for each Toggle instance that uses the associated style.\n\nModify the current style\n\nRather than create an entirely new style, you can alternatively modify a toggle\u2019s current style. Use the init(_:) initializer inside the makeBody(configuration:) method to create and modify a toggle based on a configuration value. For example, you can create a style that adds padding and a red border to the current style:\n\nstruct RedBorderToggleStyle: ToggleStyle {\n    func makeBody(configuration: Configuration) -> some View {\n        Toggle(configuration)\n            .padding()\n            .border(.red)\n    }\n}\n\n\nIf you create a redBorder static variable from this style, you can apply the style to toggles that already use another style, like the built-in switch and button styles:\n\nToggle(\"Switch\", isOn: $isSwitchOn)\n    .toggleStyle(.redBorder)\n    .toggleStyle(.switch)\n\n\nToggle(\"Button\", isOn: $isButtonOn)\n    .toggleStyle(.redBorder)\n    .toggleStyle(.button)\n\n\nBoth toggles appear with the usual styling, each with a red border:\n\nApply the custom style closer to the toggle than the modified style because SwiftUI evaluates style view modifiers in order from outermost to innermost. If you apply the styles in the other order, the red border style doesn\u2019t have an effect, because the built-in styles override it completely.\n\nSee Also\nCreating custom toggle styles\nstruct ToggleStyleConfiguration\nThe properties of a toggle instance.\ntypealias Configuration\nThe properties of a toggle instance.\nassociatedtype Body : View\nA view that represents the appearance and interaction of a toggle.\n\nRequired"
    },
    {
        "title": "checkbox",
        "url": "https://developer.apple.com/documentation/swiftui/togglestyle/checkbox",
        "html": "Discussion\n\nApply this style to a Toggle or to a view hierarchy that contains toggles using the toggleStyle(_:) modifier:\n\nToggle(\"Close windows when quitting an app\", isOn: $doesClose)\n    .toggleStyle(.checkbox)\n\n\nThe style produces a label that describes the purpose of the toggle and a checkbox that shows the toggle\u2019s state. To change the toggle\u2019s state, the user clicks the checkbox or its label:\n\nThe style aligns the trailing edge of the checkbox with the leading edge of the label, and takes as much horizontal space as it needs to fit the label, up to the amount offered by the toggle\u2019s parent view.\n\nThis is the default style in macOS in most contexts when you don\u2019t set a style, or when you apply the automatic style. A Form is a convenient way to present a collection of checkboxes with proper spacing and alignment. For guidance on using checkboxes in your user interface, see Checkboxes in the Human Interface Guidelines.\n\nSee Also\nGetting built-in toggle styles\nstatic var automatic: DefaultToggleStyle\nThe default toggle style.\nAvailable when Self is DefaultToggleStyle.\nstatic var button: ButtonToggleStyle\nA toggle style that displays as a button with its label as the title.\nAvailable when Self is ButtonToggleStyle.\nstatic var `switch`: SwitchToggleStyle\nA toggle style that displays a leading label and a trailing switch.\nAvailable when Self is SwitchToggleStyle."
    },
    {
        "title": "label",
        "url": "https://developer.apple.com/documentation/swiftui/progressviewstyleconfiguration/label-swift.property",
        "html": "Discussion\n\nIf nil, then the task is self-evident from the surrounding context, and the style does not need to provide any additional description.\n\nIf the progress view is defined using a Progress instance, then this label is equivalent to its localizedDescription.\n\nSee Also\nConfiguring the label\nstruct Label\nA type-erased label describing the task represented by the progress view."
    },
    {
        "title": "switch",
        "url": "https://developer.apple.com/documentation/swiftui/togglestyle/switch",
        "html": "Discussion\n\nApply this style to a Toggle or to a view hierarchy that contains toggles using the toggleStyle(_:) modifier:\n\nToggle(\"Enhance Sound\", isOn: $isEnhanced)\n    .toggleStyle(.switch)\n\n\nThe style produces a label that describes the purpose of the toggle and a switch that shows the toggle\u2019s state. The user taps or clicks the switch to change the toggle\u2019s state. The default appearance is similar across platforms, although the way you use switches in your user interface varies a little, as described in the respective Human Interface Guidelines sections:\n\nPlatform\n\n\t\n\nAppearance\n\n\t\n\nHuman Interface Guidelines\n\n\n\n\niOS, iPadOS\n\n\t\n\n\t\n\nSwitches\n\n\n\n\nmacOS\n\n\t\n\n\t\n\nSwitches\n\n\n\n\nwatchOS\n\n\t\n\n\t\n\nToggles and Switches\n\nIn iOS, iPadOS, and watchOS, the label and switch fill as much horizontal space as the toggle\u2019s parent offers by aligning the label\u2019s leading edge and the switch\u2019s trailing edge with the containing view\u2019s respective leading and trailing edges. In macOS, the style uses a minimum of horizontal space by aligning the trailing edge of the label with the leading edge of the switch. SwiftUI helps you to manage the spacing and alignment when this style appears in a Form.\n\nSwiftUI uses this style as the default for iOS, iPadOS, and watchOS in most contexts when you don\u2019t set a style, or when you apply the automatic style.\n\nSee Also\nGetting built-in toggle styles\nstatic var automatic: DefaultToggleStyle\nThe default toggle style.\nAvailable when Self is DefaultToggleStyle.\nstatic var button: ButtonToggleStyle\nA toggle style that displays as a button with its label as the title.\nAvailable when Self is ButtonToggleStyle.\nstatic var checkbox: CheckboxToggleStyle\nA toggle style that displays a checkbox followed by its label.\nAvailable when Self is CheckboxToggleStyle."
    },
    {
        "title": "init(_:isOn:)",
        "url": "https://developer.apple.com/documentation/swiftui/toggle/init(_:ison:)-8qx3l",
        "html": "Parameters\ntitleKey\n\nThe key for the toggle\u2019s localized title, that describes the purpose of the toggle.\n\nisOn\n\nA binding to a property that indicates whether the toggle is on or off.\n\nDiscussion\n\nThis initializer creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nTo initialize a toggle with a string variable, use init(_:isOn:) instead.\n\nSee Also\nCreating a toggle\ninit(isOn: Binding<Bool>, label: () -> Label)\nCreates a toggle that displays a custom label.\ninit<S>(S, isOn: Binding<Bool>)\nCreates a toggle that generates its label from a string.\nAvailable when Label is Text."
    },
    {
        "title": "init(isOn:label:)",
        "url": "https://developer.apple.com/documentation/swiftui/toggle/init(ison:label:)",
        "html": "Parameters\nisOn\n\nA binding to a property that determines whether the toggle is on or off.\n\nlabel\n\nA view that describes the purpose of the toggle.\n\nSee Also\nCreating a toggle\ninit(LocalizedStringKey, isOn: Binding<Bool>)\nCreates a toggle that generates its label from a localized string key.\nAvailable when Label is Text.\ninit<S>(S, isOn: Binding<Bool>)\nCreates a toggle that generates its label from a string.\nAvailable when Label is Text."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/menu/init(_:)",
        "html": "Discussion\n\nUse this initializer within the makeBody(configuration:) method of a MenuStyle instance to create an instance of the menu being styled. This is useful for custom menu styles that modify the current menu style.\n\nFor example, the following code creates a new, custom style that adds a red border around the current menu style:\n\nstruct RedBorderMenuStyle: MenuStyle {\n    func makeBody(configuration: Configuration) -> some View {\n        Menu(configuration)\n            .border(Color.red)\n    }\n}\n"
    },
    {
        "title": "button",
        "url": "https://developer.apple.com/documentation/swiftui/togglestyle/button",
        "html": "Discussion\n\nApply this style to a Toggle or to a view hierarchy that contains toggles using the toggleStyle(_:) modifier:\n\nToggle(isOn: $isFlagged) {\n    Label(\"Flag\", systemImage: \"flag.fill\")\n}\n.toggleStyle(.button)\n\n\nThe style produces a button with a label that describes the purpose of the toggle. The user taps or clicks the button to change the toggle\u2019s state. The button indicates the on state by filling in the background with its tint color. You can change the tint color using the tint(_:) modifier. SwiftUI uses this style as the default for toggles that appear in a toolbar.\n\nThe following table shows the toggle in both the off and on states, respectively:\n\nPlatform\n\n\t\n\nAppearance\n\n\n\n\niOS, iPadOS\n\n\t\n\n\n\n\nmacOS\n\n\t\n\nA Label instance is a good choice for a button toggle\u2019s label. Based on the context, SwiftUI decides whether to display both the title and icon, as in the example above, or just the icon, like when the toggle appears in a toolbar. You can also control the label\u2019s style by adding a labelStyle(_:) modifier. In any case, SwiftUI always uses the title to identify the control using VoiceOver.\n\nSee Also\nGetting built-in toggle styles\nstatic var automatic: DefaultToggleStyle\nThe default toggle style.\nAvailable when Self is DefaultToggleStyle.\nstatic var checkbox: CheckboxToggleStyle\nA toggle style that displays a checkbox followed by its label.\nAvailable when Self is CheckboxToggleStyle.\nstatic var `switch`: SwitchToggleStyle\nA toggle style that displays a leading label and a trailing switch.\nAvailable when Self is SwitchToggleStyle."
    },
    {
        "title": "isMixed",
        "url": "https://developer.apple.com/documentation/swiftui/togglestyleconfiguration/ismixed",
        "html": "Discussion\n\nUse this property to determine whether the toggle style should render a mixed state presentation. A mixed state corresponds to an underlying collection with a mix of true and false Bindings. To toggle the state, use the Bool.toggle() method on the isOn binding.\n\nIn the following example, a custom style uses the isMixed property to render the correct toggle state using symbols:\n\nstruct SymbolToggleStyle: ToggleStyle {\n    func makeBody(configuration: Configuration) -> some View {\n        Button {\n            configuration.isOn.toggle()\n        } label: {\n            Image(\n                systemName: configuration.isMixed\n                ? \"minus.circle.fill\" : configuration.isOn\n                ? \"checkmark.circle.fill\" : \"circle.fill\")\n            configuration.label\n        }\n    }\n}\n\nSee Also\nManaging the toggle state\nvar isOn: Bool\nA binding to a state property that indicates whether the toggle is on.\nvar $isOn: Binding<Bool>"
    },
    {
        "title": "label",
        "url": "https://developer.apple.com/documentation/swiftui/togglestyleconfiguration/label-swift.property",
        "html": "Discussion\n\nUse this value in your implementation of the makeBody(configuration:) method when defining a custom ToggleStyle. Access it through the that method\u2019s configuration parameter.\n\nBecause the label is a View, you can incorporate it into the view hierarchy that you return from your style definition. For example, you can combine the label with a circle image in an HStack:\n\nHStack {\n    Image(systemName: configuration.isOn\n        ? \"checkmark.circle.fill\"\n        : \"circle\")\n    configuration.label\n}\n\nSee Also\nGetting the label view\nstruct Label\nA type-erased label of a toggle."
    },
    {
        "title": "Body",
        "url": "https://developer.apple.com/documentation/swiftui/togglestyle/body",
        "html": "Required\n\nDiscussion\n\nSwiftUI infers this type automatically based on the View instance that you return from your implementation of the makeBody(configuration:) method.\n\nSee Also\nCreating custom toggle styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view that represents the body of a toggle.\n\nRequired\n\nstruct ToggleStyleConfiguration\nThe properties of a toggle instance.\ntypealias Configuration\nThe properties of a toggle instance."
    },
    {
        "title": "ButtonToggleStyle",
        "url": "https://developer.apple.com/documentation/swiftui/buttontogglestyle",
        "html": "Overview\n\nYou can also use button to construct this style.\n\nToggle(isOn: $isFlagged) {\n    Label(\"Flag\", systemImage: \"flag.fill\")\n}\n.toggleStyle(.button)\n\nTopics\nCreating the toggle style\ninit()\nCreates a button toggle style.\nSupporting types\nfunc makeBody(configuration: ButtonToggleStyle.Configuration) -> some View\nCreates a view that represents the body of a toggle button.\nRelationships\nConforms To\nToggleStyle\nSee Also\nSupporting types\nstruct DefaultToggleStyle\nThe default toggle style.\nstruct CheckboxToggleStyle\nA toggle style that displays a checkbox followed by its label.\nstruct SwitchToggleStyle\nA toggle style that displays a leading label and a trailing switch."
    },
    {
        "title": "SwitchToggleStyle",
        "url": "https://developer.apple.com/documentation/swiftui/switchtogglestyle",
        "html": "Overview\n\nUse the switch static variable to create this style:\n\nToggle(\"Enhance Sound\", isOn: $isEnhanced)\n    .toggleStyle(.switch)\n\nTopics\nCreating the toggle style\ninit()\nCreates a switch toggle style.\nSupporting types\nfunc makeBody(configuration: SwitchToggleStyle.Configuration) -> some View\nCreates a view that represents the body of a toggle switch.\nDeprecated initializers\ninit(tint: Color)\nCreates a switch style with a tint color.\nDeprecated\nRelationships\nConforms To\nToggleStyle\nSee Also\nSupporting types\nstruct DefaultToggleStyle\nThe default toggle style.\nstruct ButtonToggleStyle\nA toggle style that displays as a button with its label as the title.\nstruct CheckboxToggleStyle\nA toggle style that displays a checkbox followed by its label."
    },
    {
        "title": "currentValueLabel",
        "url": "https://developer.apple.com/documentation/swiftui/gaugestyleconfiguration/currentvaluelabel-swift.property",
        "html": "See Also\nSetting the value\nvar value: Double\nThe current value of the gauge.\nstruct CurrentValueLabel\nA type-erased value label of a gauge that contains the current value.\nstruct MarkedValueLabel\nA type-erased label describing a specific value of a gauge."
    },
    {
        "title": "minimumValueLabel",
        "url": "https://developer.apple.com/documentation/swiftui/gaugestyleconfiguration/minimumvaluelabel-swift.property",
        "html": "See Also\nReporting the range\nstruct MinimumValueLabel\nA type-erased value label of a gauge describing the minimum value.\nvar maximumValueLabel: GaugeStyleConfiguration.MaximumValueLabel?\nA view that describes the maximum of the range for the current value.\nstruct MaximumValueLabel\nA type-erased value label of a gauge describing the maximum value."
    },
    {
        "title": "maximumValueLabel",
        "url": "https://developer.apple.com/documentation/swiftui/gaugestyleconfiguration/maximumvaluelabel-swift.property",
        "html": "See Also\nReporting the range\nvar minimumValueLabel: GaugeStyleConfiguration.MinimumValueLabel?\nA view that describes the minimum of the range for the current value.\nstruct MinimumValueLabel\nA type-erased value label of a gauge describing the minimum value.\nstruct MaximumValueLabel\nA type-erased value label of a gauge describing the maximum value."
    },
    {
        "title": "currentValueLabel",
        "url": "https://developer.apple.com/documentation/swiftui/progressviewstyleconfiguration/currentvaluelabel-swift.property",
        "html": "Discussion\n\nIf nil, then the value of the progress view is either self-evident from the surrounding context or unknown, and the style does not need to provide any additional description.\n\nIf the progress view is defined using a Progress instance, then this label is equivalent to its localizedAdditionalDescription.\n\nSee Also\nConfiguring the current value label\nstruct CurrentValueLabel\nA type-erased label that describes the current value of a progress view."
    },
    {
        "title": "isOn",
        "url": "https://developer.apple.com/documentation/swiftui/togglestyleconfiguration/ison",
        "html": "Discussion\n\nBecause this value is a Binding, you can both read and write it in your implementation of the makeBody(configuration:) method when defining a custom ToggleStyle. Access it through that method\u2019s configuration parameter.\n\nRead this value to set the appearance of the toggle. For example, you can choose between empty and filled circles based on the isOn value:\n\nImage(systemName: configuration.isOn\n    ? \"checkmark.circle.fill\"\n    : \"circle\")\n\n\nWrite this value when the user takes an action that\u2019s meant to change the state of the toggle. For example, you can toggle it inside the action closure of a Button instance:\n\nButton {\n    configuration.isOn.toggle()\n} label: {\n    // Draw the toggle.\n}\n\nSee Also\nManaging the toggle state\nvar isMixed: Bool\nWhether the Toggle is currently in a mixed state.\nvar $isOn: Binding<Bool>"
    },
    {
        "title": "makeBody(configuration:)",
        "url": "https://developer.apple.com/documentation/swiftui/progressviewstyle/makebody(configuration:)",
        "html": "Required\n\nParameters\nconfiguration\n\nThe properties of the progress view being created.\n\nconfiguration\n\nThe properties of the progress view, such as its preferred progress type.\n\nDiscussion\n\nThe view hierarchy calls this method for each progress view where this style is the current progress view style.\n\nSee Also\nCreating custom progress view styles\ntypealias Configuration\nA type alias for the properties of a progress view instance.\nassociatedtype Body : View\nA view representing the body of a progress view.\n\nRequired"
    },
    {
        "title": "Body",
        "url": "https://developer.apple.com/documentation/swiftui/progressviewstyle/body",
        "html": "Required\n\nSee Also\nCreating custom progress view styles\nfunc makeBody(configuration: Self.Configuration) -> Self.Body\nCreates a view representing the body of a progress view.\n\nRequired\n\ntypealias Configuration\nA type alias for the properties of a progress view instance."
    },
    {
        "title": "WidgetBundleBuilder",
        "url": "https://developer.apple.com/documentation/swiftui/widgetbundlebuilder",
        "html": "Overview\n\nUse the @WidgetBundleBuilder attribute to group multiple widgets listed in the body property of a widget bundle. For example, the following code defines a widget bundle that consists of two widgets.\n\n@main\nstruct GameWidgets: WidgetBundle {\n   @WidgetBundleBuilder\n   var body: some Widget {\n       GameStatusWidget()\n       CharacterDetailWidget()\n   }\n}\n\nTopics\nBundling widgets\nstatic func buildBlock() -> some Widget\nBuilds an empty Widget from a block containing no statements, { }.\nstatic func buildBlock<Content>(Content) -> some Widget\nBuilds a single Widget written as a child view (e..g, { MyWidget() }) through unmodified.\nstatic func buildBlock<C0, C1>(C0, C1) -> some Widget\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some Widget\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some Widget\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildLimitedAvailability(some Widget) -> Widget & _LimitedAvailabilityWidgetMarker\nProcesses widget content for a conditional compiler-control statement that performs an availability check.\nstatic func buildOptional((Widget & _LimitedAvailabilityWidgetMarker)?) -> some Widget\nProduces an optional widget for conditional statements in multi-statement closures that\u2019s only visible when the condition evaluates to true.\nSee Also\nImplementing a widget bundle\nvar body: Self.Body\nDeclares the group of widgets that an app supports.\n\nRequired\n\nassociatedtype Body : Widget\nThe type of widget that represents the content of the bundle.\n\nRequired"
    },
    {
        "title": "modifier",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/modifier",
        "html": "See Also\nCreating a modified content view\ninit(content: Content, modifier: Modifier)\nA structure that the defines the content and modifier needed to produce a new view or view modifier.\nvar content: Content\nThe content that the modifier transforms into a new view or new view modifier."
    },
    {
        "title": "accessibility(activationPoint:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibility(activationpoint:)-53of9",
        "html": "Deprecated\n\nUse accessibilityActivationPoint(_:) instead."
    },
    {
        "title": "accessibility(addTraits:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibility(addtraits:)",
        "html": "Deprecated\n\nUse accessibilityAddTraits(_:) instead."
    },
    {
        "title": "accessibility(hidden:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibility(hidden:)",
        "html": "Deprecated\n\nUse accessibilityHidden(_:) instead."
    },
    {
        "title": "accessibility(hint:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibility(hint:)",
        "html": "Deprecated\n\nUse accessibilityHint(_:) instead.\n\nDiscussion\n\nProvide a hint in the form of a brief phrase, like \u201cPurchases the item\u201d or \u201cDownloads the attachment\u201d."
    },
    {
        "title": "accessibility(removeTraits:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibility(removetraits:)",
        "html": "Deprecated\n\nUse accessibilityRemoveTraits(_:) instead."
    },
    {
        "title": "accessibility(label:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibility(label:)",
        "html": "Deprecated\n\nUse accessibilityLabel(_:) instead.\n\nDiscussion\n\nUse this method to provide an accessibility label for a view that doesn\u2019t display text, like an icon. For example, you could use this method to label a button that plays music with the text \u201cPlay\u201d. Don\u2019t include text in the label that repeats information that users already have. For example, don\u2019t use the label \u201cPlay button\u201d because a button already has a trait that identifies it as a button."
    },
    {
        "title": "accessibility(selectionIdentifier:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibility(selectionidentifier:)",
        "html": "Deprecated\n\nThis functionality is no longer available.\n\nDiscussion\n\nPicker uses the value to determine what node to use for the accessibility value."
    },
    {
        "title": "accessibility(sortPriority:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibility(sortpriority:)",
        "html": "Deprecated\n\nUse accessibilitySortPriority(_:) instead.\n\nDiscussion\n\nHigher numbers are sorted first. The default sort priority is zero."
    },
    {
        "title": "accessibilityAction(_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilityaction(_:_:)",
        "html": "Discussion\n\nFor example, this is how a .default action to compose a new email could be added to a view.\n\nvar body: some View {\n    ContentView()\n        .accessibilityAction {\n            // Handle action\n        }\n}\n"
    },
    {
        "title": "accessibility(value:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibility(value:)",
        "html": "Deprecated\n\nUse accessibilityValue(_:) instead.\n\nDiscussion\n\nUse this method to describe the value represented by a view, but only if that\u2019s different than the view\u2019s label. For example, for a slider that you label as \u201cVolume\u201d using accessibility(label:), you can provide the current volume setting, like \u201c60%\u201d, using accessibility(value:)."
    },
    {
        "title": "accessibilityAction(named:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilityaction(named:_:)-4ji9i",
        "html": "Discussion\n\nFor example, this is how a custom action to compose a new email could be added to a view.\n\nvar body: some View {\n    ContentView()\n        .accessibilityAction(named: Text(\"New Message\")) {\n            // Handle action\n        }\n}\n"
    },
    {
        "title": "accessibilityAction(named:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilityaction(named:_:)-4kl5v",
        "html": "Discussion\n\nFor example, this is how a custom action to compose a new email could be added to a view.\n\nvar body: some View {\n    ContentView()\n        .accessibilityAction(named: \"New Message\") {\n            // Handle action\n        }\n}\n"
    },
    {
        "title": "accessibilityActivationPoint(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilityactivationpoint(_:)-42dk0",
        "html": "Discussion\n\nUse this modifier to ensure that the activation point for a small element remains accurate even if you present a larger version of the element to VoiceOver.\n\nIf an activation point is not provided, an activation point will be derrived from one of the accessibility elements decendents or from the center of the accessibility frame."
    },
    {
        "title": "accessibilityAdjustableAction(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilityadjustableaction(_:)",
        "html": "Discussion\n\nFor example, this is how an adjustable action to navigate through pages could be added to a view.\n\nvar body: some View {\n    PageControl()\n        .accessibilityAdjustableAction { direction in\n            switch direction {\n            case .increment:\n                // Go to next page\n            case .decrement:\n                // Go to previous page\n            }\n        }\n}\n"
    },
    {
        "title": "accessibilityActivationPoint(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilityactivationpoint(_:)-74w70",
        "html": "Discussion\n\nUse this modifier to ensure that the activation point for a small element remains accurate even if you present a larger version of the element to VoiceOver.\n\nIf an activation point is not provided, an activation point will be derrived from one of the accessibility elements decendents or from the center of the accessibility frame."
    },
    {
        "title": "accessibilityCustomContent(_:_:importance:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilitycustomcontent(_:_:importance:)-54qsg",
        "html": "Parameters\nkey\n\nKey used to specify the identifier and label of the of the additional accessibility information entry.\n\nvalueKey\n\nText value for the additional accessibility information. For example: \u201clandscape.\u201d A value of nil will remove any entry of additional information added earlier for any key with the same identifier.\n\nimportance\n\nImportance of the accessibility information. High-importance information gets read out immediately, while default-importance information must be explicitly asked for by the user.\n\nDiscussion\n\nUse this method to add information you want accessibility users to be able to access about this element, beyond the basics of label, value, and hint. For example, accessibilityCustomContent can be used to add information about the orientation of a photograph, or the number of people found in the picture.\n\nNote\n\nRepeated calls of accessibilityCustomContent with keys having different identifiers will create new entries of additional information. Calling accessibilityAdditionalContent repeatedly with keys having matching identifiers will replace the previous entry."
    },
    {
        "title": "allowedDynamicRange",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/alloweddynamicrange",
        "html": "See Also\nView attributes\nvar backgroundMaterial: Material?\nThe material underneath the current view.\nvar backgroundProminence: BackgroundProminence\nThe prominence of the background underneath views associated with this environment.\nvar backgroundStyle: AnyShapeStyle?\nAn optional style that overrides the default system background style when set.\nvar badgeProminence: BadgeProminence\nThe prominence to apply to badges associated with this environment.\nvar contentTransition: ContentTransition\nThe current method of animating the contents of views.\nvar contentTransitionAddsDrawingGroup: Bool\nA Boolean value that controls whether views that render content transitions use GPU-accelerated rendering.\nvar defaultMinListHeaderHeight: CGFloat?\nThe default minimum height of a header in a list.\nvar defaultMinListRowHeight: CGFloat\nThe default minimum height of a row in a list.\nvar isFocusEffectEnabled: Bool\nA Boolean value that indicates whether the view associated with this environment allows focus effects to be displayed.\nvar headerProminence: Prominence\nThe prominence to apply to section headers within a view.\nvar physicalMetrics: PhysicalMetricsConverter\nThe physical metrics associated with a scene.\nBeta\nvar realityKitScene: Scene?\nBeta\nvar redactionReasons: RedactionReasons\nThe current redaction reasons applied to the view hierarchy.\nvar springLoadingBehavior: SpringLoadingBehavior\nThe behavior of spring loaded interactions for the views associated with this environment.\nvar symbolRenderingMode: SymbolRenderingMode?\nThe current symbol rendering mode, or nil denoting that the mode is picked automatically using the current image and foreground style as parameters.\nvar symbolVariants: SymbolVariants\nThe symbol variant to use in this environment."
    },
    {
        "title": "accessibilityCustomContent(_:_:importance:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilitycustomcontent(_:_:importance:)-37kq6",
        "html": "Parameters\nkey\n\nKey used to specify the identifier and label of the of the additional accessibility information entry.\n\nvalue\n\nText value for the additional accessibility information. For example: \u201clandscape.\u201d A value of nil will remove any entry of additional information added earlier for any key with the same identifier.\n\nimportance\n\nImportance of the accessibility information. High-importance information gets read out immediately, while default-importance information must be explicitly asked for by the user.\n\nDiscussion\n\nUse this method to add information you want accessibility users to be able to access about this element, beyond the basics of label, value, and hint. For example, accessibilityCustomContent can be used to add information about the orientation of a photograph, or the number of people found in the picture.\n\nNote\n\nRepeated calls of accessibilityCustomContent with keys having different identifiers will create new entries of additional information. Calling accessibilityAdditionalContent repeatedly with keys having matching identifiers will replace the previous entry."
    },
    {
        "title": "requestReview",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/requestreview",
        "html": "See Also\nStoreKit configuration\nvar displayStoreKitMessage: DisplayMessageAction"
    },
    {
        "title": "accessibilityPrefersHeadAnchorAlternative",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/accessibilityprefersheadanchoralternative",
        "html": "Discussion\n\nIf this property\u2019s value is true, alternate anchors should be used for most head-anchored UI, such as world anchors.\n\nSee Also\nAccessibility\nvar accessibilityDimFlashingLights: Bool\nWhether the setting to reduce flashing or strobing lights in video content is on. This setting can also be used to determine if UI in playback controls should be shown to indicate upcoming content that includes flashing or strobing lights.\nvar accessibilityDifferentiateWithoutColor: Bool\nWhether the system preference for Differentiate without Color is enabled.\nvar accessibilityEnabled: Bool\nA Boolean value that indicates whether the user has enabled an assistive technology.\nvar accessibilityInvertColors: Bool\nWhether the system preference for Invert Colors is enabled.\nvar accessibilityLargeContentViewerEnabled: Bool\nWhether the Large Content Viewer is enabled.\nvar accessibilityPlayAnimatedImages: Bool\nWhether the setting for playing animations in an animated image is on. When this value is false, any presented image that contains animation should not play automatically.\nvar accessibilityQuickActionsEnabled: Bool\nA Boolean that indicates whether the quick actions feature is enabled.\nvar accessibilityReduceMotion: Bool\nWhether the system preference for Reduce Motion is enabled.\nvar accessibilityReduceTransparency: Bool\nWhether the system preference for Reduce Transparency is enabled.\nvar accessibilityShowButtonShapes: Bool\nWhether the system preference for Show Button Shapes is enabled.\nvar accessibilitySwitchControlEnabled: Bool\nA Boolean value that indicates whether the Switch Control motor accessibility feature is in use.\nvar accessibilityVoiceOverEnabled: Bool\nA Boolean value that indicates whether the VoiceOver screen reader is in use.\nvar legibilityWeight: LegibilityWeight?\nThe font weight to apply to text."
    },
    {
        "title": "strokeBorder(lineWidth:antialiased:)",
        "url": "https://developer.apple.com/documentation/swiftui/insettableshape/strokeborder(linewidth:antialiased:)",
        "html": "See Also\nSetting the stroke border characteristics\nfunc strokeBorder<S>(S, lineWidth: CGFloat, antialiased: Bool) -> StrokeBorderShapeView<Self, S, EmptyView>\nReturns a view that is the result of filling the lineWidth-sized border (aka inner stroke) of self with content. This is equivalent to insetting self by lineWidth / 2 and stroking the resulting shape with lineWidth as the line-width.\nfunc strokeBorder<S>(S, lineWidth: CGFloat, antialiased: Bool) -> some View\nReturns a view that is the result of filling the lineWidth-sized border (aka inner stroke) of self with content. This is equivalent to insetting self by lineWidth / 2 and stroking the resulting shape with lineWidth as the line-width.\nfunc strokeBorder<S>(S, style: StrokeStyle, antialiased: Bool) -> StrokeBorderShapeView<Self, S, EmptyView>\nReturns a view that is the result of insetting self by style.lineWidth / 2, stroking the resulting shape with style, and then filling with content.\nfunc strokeBorder<S>(S, style: StrokeStyle, antialiased: Bool) -> some View\nReturns a view that is the result of insetting self by style.lineWidth / 2, stroking the resulting shape with style, and then filling with content.\nfunc strokeBorder(style: StrokeStyle, antialiased: Bool) -> some View\nReturns a view that is the result of insetting self by style.lineWidth / 2, stroking the resulting shape with style, and then filling with the foreground color."
    },
    {
        "title": "accessibilityEnabled",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/accessibilityenabled",
        "html": "See Also\nAccessibility\nvar accessibilityDimFlashingLights: Bool\nWhether the setting to reduce flashing or strobing lights in video content is on. This setting can also be used to determine if UI in playback controls should be shown to indicate upcoming content that includes flashing or strobing lights.\nvar accessibilityDifferentiateWithoutColor: Bool\nWhether the system preference for Differentiate without Color is enabled.\nvar accessibilityInvertColors: Bool\nWhether the system preference for Invert Colors is enabled.\nvar accessibilityLargeContentViewerEnabled: Bool\nWhether the Large Content Viewer is enabled.\nvar accessibilityPlayAnimatedImages: Bool\nWhether the setting for playing animations in an animated image is on. When this value is false, any presented image that contains animation should not play automatically.\nvar accessibilityPrefersHeadAnchorAlternative: Bool\nWhether the system setting to prefer alternatives to head-anchored content is on.\nBeta\nvar accessibilityQuickActionsEnabled: Bool\nA Boolean that indicates whether the quick actions feature is enabled.\nvar accessibilityReduceMotion: Bool\nWhether the system preference for Reduce Motion is enabled.\nvar accessibilityReduceTransparency: Bool\nWhether the system preference for Reduce Transparency is enabled.\nvar accessibilityShowButtonShapes: Bool\nWhether the system preference for Show Button Shapes is enabled.\nvar accessibilitySwitchControlEnabled: Bool\nA Boolean value that indicates whether the Switch Control motor accessibility feature is in use.\nvar accessibilityVoiceOverEnabled: Bool\nA Boolean value that indicates whether the VoiceOver screen reader is in use.\nvar legibilityWeight: LegibilityWeight?\nThe font weight to apply to text."
    },
    {
        "title": "strokeBorder(_:style:antialiased:)",
        "url": "https://developer.apple.com/documentation/swiftui/insettableshape/strokeborder(_:style:antialiased:)-3vmk4",
        "html": "See Also\nSetting the stroke border characteristics\nfunc strokeBorder<S>(S, lineWidth: CGFloat, antialiased: Bool) -> StrokeBorderShapeView<Self, S, EmptyView>\nReturns a view that is the result of filling the lineWidth-sized border (aka inner stroke) of self with content. This is equivalent to insetting self by lineWidth / 2 and stroking the resulting shape with lineWidth as the line-width.\nfunc strokeBorder<S>(S, lineWidth: CGFloat, antialiased: Bool) -> some View\nReturns a view that is the result of filling the lineWidth-sized border (aka inner stroke) of self with content. This is equivalent to insetting self by lineWidth / 2 and stroking the resulting shape with lineWidth as the line-width.\nfunc strokeBorder(lineWidth: CGFloat, antialiased: Bool) -> some View\nReturns a view that is the result of filling the lineWidth-sized border (aka inner stroke) of self with the foreground color. This is equivalent to insetting self by lineWidth / 2 and stroking the resulting shape with lineWidth as the line-width.\nfunc strokeBorder<S>(S, style: StrokeStyle, antialiased: Bool) -> StrokeBorderShapeView<Self, S, EmptyView>\nReturns a view that is the result of insetting self by style.lineWidth / 2, stroking the resulting shape with style, and then filling with content.\nfunc strokeBorder(style: StrokeStyle, antialiased: Bool) -> some View\nReturns a view that is the result of insetting self by style.lineWidth / 2, stroking the resulting shape with style, and then filling with the foreground color."
    },
    {
        "title": "onSearchPresentation",
        "url": "https://developer.apple.com/documentation/swiftui/searchscopeactivation/onsearchpresentation",
        "html": "See Also\nGetting search scope activiation types\nstatic var automatic: SearchScopeActivation\nThe automatic activation of the scope bar.\nstatic var onTextEntry: SearchScopeActivation\nAn activation where the system shows search scopes when typing begins in the search field and hides search scopes after search cancellation."
    },
    {
        "title": "accessibilityQuickActionsEnabled",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/accessibilityquickactionsenabled",
        "html": "Discussion\n\nThe system uses quick actions to provide users with a fast alternative interaction method. Quick actions can be presented to users with a textual banner at the top of their screen and/or an outline around a view that is already on screen.\n\nSee Also\nAccessibility\nvar accessibilityDimFlashingLights: Bool\nWhether the setting to reduce flashing or strobing lights in video content is on. This setting can also be used to determine if UI in playback controls should be shown to indicate upcoming content that includes flashing or strobing lights.\nvar accessibilityDifferentiateWithoutColor: Bool\nWhether the system preference for Differentiate without Color is enabled.\nvar accessibilityEnabled: Bool\nA Boolean value that indicates whether the user has enabled an assistive technology.\nvar accessibilityInvertColors: Bool\nWhether the system preference for Invert Colors is enabled.\nvar accessibilityLargeContentViewerEnabled: Bool\nWhether the Large Content Viewer is enabled.\nvar accessibilityPlayAnimatedImages: Bool\nWhether the setting for playing animations in an animated image is on. When this value is false, any presented image that contains animation should not play automatically.\nvar accessibilityPrefersHeadAnchorAlternative: Bool\nWhether the system setting to prefer alternatives to head-anchored content is on.\nBeta\nvar accessibilityReduceMotion: Bool\nWhether the system preference for Reduce Motion is enabled.\nvar accessibilityReduceTransparency: Bool\nWhether the system preference for Reduce Transparency is enabled.\nvar accessibilityShowButtonShapes: Bool\nWhether the system preference for Show Button Shapes is enabled.\nvar accessibilitySwitchControlEnabled: Bool\nA Boolean value that indicates whether the Switch Control motor accessibility feature is in use.\nvar accessibilityVoiceOverEnabled: Bool\nA Boolean value that indicates whether the VoiceOver screen reader is in use.\nvar legibilityWeight: LegibilityWeight?\nThe font weight to apply to text."
    },
    {
        "title": "VStack",
        "url": "https://developer.apple.com/documentation/SwiftUI/VStack",
        "html": "Overview\n\nUnlike LazyVStack, which only renders the views when your app needs to display them, a VStack renders the views all at once, regardless of whether they are on- or offscreen. Use the regular VStack when you have a small number of subviews or don\u2019t want the delayed rendering behavior of the \u201clazy\u201d version.\n\nThe following example shows a simple vertical stack of 10 text views:\n\nvar body: some View {\n    VStack(\n        alignment: .leading,\n        spacing: 10\n    ) {\n        ForEach(\n            1...10,\n            id: \\.self\n        ) {\n            Text(\"Item \\($0)\")\n        }\n    }\n}\n\n\nNote\n\nIf you need a vertical stack that conforms to the Layout protocol, like when you want to create a conditional layout using AnyLayout, use VStackLayout instead.\n\nTopics\nCreating a stack\ninit(alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> Content)\nCreates an instance with the given spacing and horizontal alignment.\nRelationships\nConforms To\nView\nSee Also\nStatically arranging views in one dimension\nBuilding layouts with stack views\nCompose complex layouts from primitive container views.\nstruct HStack\nA view that arranges its subviews in a horizontal line."
    },
    {
        "title": "accessibilityZoomAction(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilityzoomaction(_:)",
        "html": "Discussion\n\nFor example, this is how a zoom action is used to transform the scale of a shape which has a MagnificationGesture.\n\nvar body: some View {\n    Circle()\n        .scaleEffect(magnifyBy)\n        .gesture(magnification)\n        .accessibilityLabel(\"Circle Magnifier\")\n        .accessibilityZoomAction { action in\n            switch action.direction {\n            case .zoomIn:\n                magnifyBy += 0.5\n            case .zoomOut:\n                 magnifyBy -= 0.5\n            }\n        }\n}\n"
    },
    {
        "title": "accessibilityValue(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilityvalue(_:)-cz8b",
        "html": "Discussion\n\nUse this method to describe the value represented by a view, but only if that\u2019s different than the view\u2019s label. For example, for a slider that you label as \u201cVolume\u201d using accessibilityLabel(), you can provide the current volume setting, like \u201c60%\u201d, using accessibilityValue()."
    },
    {
        "title": "configurationDisplayName(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/widgetconfiguration/configurationdisplayname(_:)-4v9q",
        "html": "Parameters\ndisplayName\n\nThe key for the localized name to display.\n\nReturn Value\n\nA widget configuration that includes a descriptive name for the widget.\n\nSee Also\nSetting a name\nfunc configurationDisplayName<S>(S) -> some WidgetConfiguration\nSets the name shown for a widget when a user adds or edits it using the specified string.\nfunc configurationDisplayName(Text) -> some WidgetConfiguration\nSets the name shown for a widget when a user adds or edits it using the contents of a text view."
    },
    {
        "title": "accessibilityRespondsToUserInteraction(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilityrespondstouserinteraction(_:)",
        "html": "Discussion\n\nIf this is not set, the value is inferred from the traits of the Accessibility element, the presence of Accessibility actions on the element, or the presence of gestures on the element or containing views."
    },
    {
        "title": "accessibilityTextContentType(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilitytextcontenttype(_:)",
        "html": "Parameters\nvalue\n\nThe accessibility content type from the available AccessibilityTextContentType options.\n\nDiscussion\n\nUse this modifier to set the content type of this accessibility element. Assistive technologies can use this property to choose an appropriate way to output the text. For example, when encountering a source coding context, VoiceOver could choose to speak all punctuation.\n\nThe default content type plain."
    },
    {
        "title": "accessibilityValue(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilityvalue(_:)-6n7us",
        "html": "Discussion\n\nUse this method to describe the value represented by a view, but only if that\u2019s different than the view\u2019s label. For example, for a slider that you label as \u201cVolume\u201d using accessibilityLabel(), you can provide the current volume setting, like \u201c60%\u201d, using accessibilityValue()."
    },
    {
        "title": "accessibilityScrollAction(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilityscrollaction(_:)",
        "html": "Discussion\n\nFor example, this is how a scroll action to trigger a refresh could be added to a view.\n\nvar body: some View {\n    ScrollView {\n        ContentView()\n    }\n    .accessibilityScrollAction { edge in\n        if edge == .top {\n            // Refresh content\n        }\n    }\n}\n"
    },
    {
        "title": "wrappedValue",
        "url": "https://developer.apple.com/documentation/swiftui/bindable/wrappedvalue",
        "html": "See Also\nGetting the value\nvar projectedValue: Bindable<Value>\nThe bindable wrapper for the object that creates bindings to its properties using dynamic member lookup.\nsubscript<Subject>(dynamicMember _: ReferenceWritableKeyPath<Value, Subject>) -> Binding<Subject>\nReturns a binding to the value of a given key path."
    },
    {
        "title": "accessibilitySortPriority(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilitysortpriority(_:)",
        "html": "Discussion\n\nHigher numbers are sorted first. The default sort priority is zero."
    },
    {
        "title": "init(_:tableName:bundle:comment:)",
        "url": "https://developer.apple.com/documentation/swiftui/text/init(_:tablename:bundle:comment:)",
        "html": "Parameters\nkey\n\nThe key for a string in the table identified by tableName.\n\ntableName\n\nThe name of the string table to search. If nil, use the table in the Localizable.strings file.\n\nbundle\n\nThe bundle containing the strings file. If nil, use the main bundle.\n\ncomment\n\nContextual information about this key-value pair.\n\nDiscussion\n\nUse this initializer to look for the key parameter in a localization table and display the associated string value in the initialized text view. If the initializer can\u2019t find the key in the table, or if no table exists, the text view displays the string representation of the key instead.\n\nText(\"pencil\") // Localizes the key if possible, or displays \"pencil\" if not.\n\n\nWhen you initialize a text view with a string literal, the view triggers this initializer because it assumes you want the string localized, even when you don\u2019t explicitly specify a table, as in the above example. If you haven\u2019t provided localization for a particular string, you still get reasonable behavior, because the initializer displays the key, which typically contains the unlocalized string.\n\nIf you initialize a text view with a string variable rather than a string literal, the view triggers the init(_:) initializer instead, because it assumes that you don\u2019t want localization in that case. If you do want to localize the value stored in a string variable, you can choose to call the init(_:tableName:bundle:comment:) initializer by first creating a LocalizedStringKey instance from the string variable:\n\nText(LocalizedStringKey(someString)) // Localizes the contents of `someString`.\n\n\nIf you have a string literal that you don\u2019t want to localize, use the init(verbatim:) initializer instead.\n\nStyling localized strings with markdown\n\nIf the localized string or the fallback key contains Markdown, the view displays the text with appropriate styling. For example, consider an app with the following entry in its Spanish localization file:\n\n\"_Please visit our [website](https://www.example.com)._\" = \"_Visita nuestro [sitio web](https://www.example.com)._\";\n\n\nYou can create a Text view with the Markdown-formatted base language version of the string as the localization key, like this:\n\nText(\"_Please visit our [website](https://www.example.com)._\")\n\n\nWhen viewed in a Spanish locale, the view uses the Spanish text from the strings file, applying the Markdown styling.\n\nImportant\n\nText doesn\u2019t render all styling possible in Markdown. It doesn\u2019t support line breaks, soft breaks, or any style of paragraph- or block-based formatting like lists, block quotes, code blocks, or tables. It also doesn\u2019t support the imageURL attribute. Parsing with SwiftUI treats any whitespace in the Markdown string as described by the AttributedString.MarkdownParsingOptions.InterpretedSyntax.inlineOnlyPreservingWhitespace parsing option.\n\nSee Also\nCreating a text view from a string\ninit(LocalizedStringResource)\nCreates a text view that displays a localized string resource.\ninit<S>(S)\nCreates a text view that displays a stored string without localization.\ninit(verbatim: String)\nCreates a text view that displays a string literal without localization."
    },
    {
        "title": "accessibilityIdentifier(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilityidentifier(_:)",
        "html": "Discussion\n\nUse this value for testing. It isn\u2019t visible to the user."
    },
    {
        "title": "accessibilityLabel(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilitylabel(_:)-4hfls",
        "html": "Discussion\n\nUse this method to provide an accessibility label for a view that doesn\u2019t display text, like an icon. For example, you could use this method to label a button that plays music with the text \u201cPlay\u201d. Don\u2019t include text in the label that repeats information that users already have. For example, don\u2019t use the label \u201cPlay button\u201d because a button already has a trait that identifies it as a button."
    },
    {
        "title": "accessibilityLabel(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilitylabel(_:)-13e9w",
        "html": "Discussion\n\nUse this method to provide an accessibility label for a view that doesn\u2019t display text, like an icon. For example, you could use this method to label a button that plays music with the text \u201cPlay\u201d. Don\u2019t include text in the label that repeats information that users already have. For example, don\u2019t use the label \u201cPlay button\u201d because a button already has a trait that identifies it as a button."
    },
    {
        "title": "accessibilityInputLabels(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilityinputlabels(_:)-21dwf",
        "html": "Discussion\n\nProvide labels in descending order of importance. Voice Control and Full Keyboard Access use the input labels.\n\nNote\n\nIf you don\u2019t specify any input labels, the user can still refer to the view using the accessibility label that you add with the accessibilityLabel() modifier."
    },
    {
        "title": "accessibilityHint(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilityhint(_:)-xrn9",
        "html": "Discussion\n\nProvide a hint in the form of a brief phrase, like \u201cPurchases the item\u201d or \u201cDownloads the attachment\u201d."
    },
    {
        "title": "accessibilityHint(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilityhint(_:)-9youc",
        "html": "Discussion\n\nProvide a hint in the form of a brief phrase, like \u201cPurchases the item\u201d or \u201cDownloads the attachment\u201d."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/state/init()",
        "html": "Discussion\n\nThis initializer behaves like the init(wrappedValue:) initializer with an input of nil. See that initializer for more information.\n\nSee Also\nCreating a state\ninit(wrappedValue: Value)\nCreates a state property that stores an initial wrapped value.\ninit(initialValue: Value)\nCreates a state property that stores an initial value."
    },
    {
        "title": "description",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/description",
        "html": "See Also\nCreating and accessing values\ninit()\nCreates an environment values instance.\nsubscript<K>(K.Type) -> K.Value\nAccesses the environment value associated with a custom key.\nsubscript<T>(T.Type) -> T?\nReads an observable object of the specified type from the environment.\nsubscript<K>(K.Type) -> K.Value\nAccesses the environment value associated with a custom key."
    },
    {
        "title": "accessibilityDirectTouch(_:options:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilitydirecttouch(_:options:)",
        "html": "Discussion\n\nFor example, this is how a direct touch area would allow a VoiceOver user to interact with a view with a rotationEffect controlled by a RotationGesture. The direct touch area would require a user to activate the area before using the direct touch area.\n\nvar body: some View {\n    Rectangle()\n        .frame(width: 200, height: 200, alignment: .center)\n        .rotationEffect(angle)\n        .gesture(rotation)\n        .accessibilityDirectTouch(options: .requiresActivation)\n}\n"
    },
    {
        "title": "accessibilityHint(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilityhint(_:)-cuvd",
        "html": "Discussion\n\nProvide a hint in the form of a brief phrase, like \u201cPurchases the item\u201d or \u201cDownloads the attachment\u201d.\n\nNote\n\nOn macOS, if the view does not have an action and it has been made into a container with accessibilityElement(children: .contain), this will be used to describe the container. For example, if the container is for a graph, the hint could be \u201cgraph\u201d."
    },
    {
        "title": "accessibilityHeading(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilityheading(_:)",
        "html": "Parameters\nlevel\n\nThe heading level to associate with this element from the available AccessibilityHeadingLevel levels.\n\nDiscussion\n\nUse this modifier to set the level of this heading in relation to other headings. The system speaks the level number of levels AccessibilityHeadingLevel.h1 through AccessibilityHeadingLevel.h6 alongside the text.\n\nThe default heading level if you don\u2019t use this modifier is AccessibilityHeadingLevel.unspecified."
    },
    {
        "title": "accessibilityCustomContent(_:_:importance:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilitycustomcontent(_:_:importance:)-8ao4t",
        "html": "Parameters\nlabelKey\n\nLocalized text describing to the user what is contained in this additional information entry. For example: \u201corientation\u201d.\n\nvalue\n\nText value for the additional accessibility information. For example: \u201clandscape.\u201d\n\nimportance\n\nImportance of the accessibility information. High-importance information gets read out immediately, while default-importance information must be explicitly asked for by the user.\n\nDiscussion\n\nUse this method to add information you want accessibility users to be able to access about this element, beyond the basics of label, value, and hint. For example, accessibilityCustomContent can be used to add information about the orientation of a photograph, or the number of people found in the picture.\n\nNote\n\nRepeated calls of accessibilityCustomContent with different labels will create new entries of additional information. Calling accessibilityAdditionalContent repeatedly with the same label will instead replace the previous value and importance."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/dialogseverity/automatic",
        "html": "See Also\nGetting severities\nstatic let standard: DialogSeverity\nA severity that indicates the dialog is being displayed for the purpose of presenting information to the user.\nstatic let critical: DialogSeverity\nA severity that indicates extra attention should be given to the dialog, for example when unexpected data loss may occur as a result of the action taken."
    },
    {
        "title": "accessibilityCustomContent(_:_:importance:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilitycustomcontent(_:_:importance:)-7qjkw",
        "html": "Parameters\nlabelKey\n\nLocalized text describing to the user what is contained in this additional information entry. For example: \u201corientation\u201d.\n\nvalue\n\nText value for the additional accessibility information. For example: \u201clandscape.\u201d\n\nimportance\n\nImportance of the accessibility information. High-importance information gets read out immediately, while default-importance information must be explicitly asked for by the user.\n\nDiscussion\n\nUse this method to add information you want accessibility users to be able to access about this element, beyond the basics of label, value, and hint. For example, accessibilityCustomContent can be used to add information about the orientation of a photograph, or the number of people found in the picture.\n\nNote\n\nRepeated calls of accessibilityCustomContent with different labels will create new entries of additional information. Calling accessibilityAdditionalContent repeatedly with the same label will instead replace the previous value and importance."
    },
    {
        "title": "PopoverAttachmentAnchor.rect(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/popoverattachmentanchor/rect(_:)",
        "html": "See Also\nGetting attachment anchors\ncase point(UnitPoint)\nThe anchor point for the popover expressed as a unit point that describes possible alignments relative to a SwiftUI view."
    },
    {
        "title": "caption",
        "url": "https://developer.apple.com/documentation/swiftui/font/caption",
        "html": "See Also\nGetting standard fonts\nstatic let extraLargeTitle2: Font\nCreate a font with the second level extra large title text style.\nBeta\nstatic let extraLargeTitle: Font\nCreate a font with the extra large title text style.\nBeta\nstatic let largeTitle: Font\nA font with the large title text style.\nstatic let title: Font\nA font with the title text style.\nstatic let title2: Font\nCreate a font for second level hierarchical headings.\nstatic let title3: Font\nCreate a font for third level hierarchical headings.\nstatic let headline: Font\nA font with the headline text style.\nstatic let subheadline: Font\nA font with the subheadline text style.\nstatic let body: Font\nA font with the body text style.\nstatic let callout: Font\nA font with the callout text style.\nstatic let caption2: Font\nCreate a font with the alternate caption text style.\nstatic let footnote: Font\nA font with the footnote text style."
    },
    {
        "title": "content",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/content",
        "html": "See Also\nCreating a modified content view\ninit(content: Content, modifier: Modifier)\nA structure that the defines the content and modifier needed to produce a new view or view modifier.\nvar modifier: Modifier\nThe view modifier."
    },
    {
        "title": "bold()",
        "url": "https://developer.apple.com/documentation/swiftui/text/bold()",
        "html": "Return Value\n\nBold text.\n\nSee Also\nStyling the view\u2019s text\nfunc foregroundStyle<S>(S) -> Text\nSets the style of the text displayed by this view.\nfunc bold(Bool) -> Text\nApplies a bold font weight to the text.\nfunc italic() -> Text\nApplies italics to the text.\nfunc italic(Bool) -> Text\nApplies italics to the text.\nfunc strikethrough(Bool, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc underline(Bool, color: Color?) -> Text\nApplies an underline to the text.\nfunc underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies an underline to the text.\nfunc monospaced(Bool) -> Text\nModifies the font of the text to use the fixed-width variant of the current font, if possible.\nfunc monospacedDigit() -> Text\nModifies the text view\u2019s font to use fixed-width digits, while leaving other characters proportionally spaced.\nfunc kerning(CGFloat) -> Text\nSets the spacing, or kerning, between characters.\nfunc tracking(CGFloat) -> Text\nSets the tracking for the text.\nfunc baselineOffset(CGFloat) -> Text\nSets the vertical offset for the text relative to its baseline.\nenum Case\nA scheme for transforming the capitalization of characters within text.\nstruct DateStyle\nA predefined style used to display a Date.\nstruct LineStyle\nDescription of the style used to draw the line for StrikethroughStyleAttribute and UnderlineStyleAttribute."
    },
    {
        "title": "ProgressView",
        "url": "https://developer.apple.com/documentation/SwiftUI/ProgressView",
        "html": "Overview\n\nUse a progress view to show that a task is incomplete but advancing toward completion. A progress view can show both determinate (percentage complete) and indeterminate (progressing or not) types of progress.\n\nCreate a determinate progress view by initializing a ProgressView with a binding to a numeric value that indicates the progress, and a total value that represents completion of the task. By default, the progress is 0.0 and the total is 1.0.\n\nThe example below uses the state property progress to show progress in a determinate ProgressView. The progress view uses its default total of 1.0, and because progress starts with an initial value of 0.5, the progress view begins half-complete. A \u201cMore\u201d button below the progress view allows people to increment the progress in increments of five percent:\n\nstruct LinearProgressDemoView: View {\n    @State private var progress = 0.5\n\n\n    var body: some View {\n        VStack {\n            ProgressView(value: progress)\n            Button(\"More\") { progress += 0.05 }\n        }\n    }\n}\n\n\nTo create an indeterminate progress view, use an initializer that doesn\u2019t take a progress value:\n\nvar body: some View {\n    ProgressView()\n}\n\n\nYou can also create a progress view that covers a closed range of Date values. As long as the current date is within the range, the progress view automatically updates, filling or depleting the progress view as it nears the end of the range. The following example shows a five-minute timer whose start time is that of the progress view\u2019s initialization:\n\nstruct DateRelativeProgressDemoView: View {\n    let workoutDateRange = Date()...Date().addingTimeInterval(5*60)\n\n\n    var body: some View {\n         ProgressView(timerInterval: workoutDateRange) {\n             Text(\"Workout\")\n         }\n    }\n}\n\n\nStyling progress views\n\nYou can customize the appearance and interaction of progress views by creating styles that conform to the ProgressViewStyle protocol. To set a specific style for all progress view instances within a view, use the progressViewStyle(_:) modifier. In the following example, a custom style adds a rounded pink border to all progress views within the enclosing VStack:\n\nstruct BorderedProgressViews: View {\n    var body: some View {\n        VStack {\n            ProgressView(value: 0.25) { Text(\"25% progress\") }\n            ProgressView(value: 0.75) { Text(\"75% progress\") }\n        }\n        .progressViewStyle(PinkBorderedProgressViewStyle())\n    }\n}\n\n\nstruct PinkBorderedProgressViewStyle: ProgressViewStyle {\n    func makeBody(configuration: Configuration) -> some View {\n        ProgressView(configuration)\n            .padding(4)\n            .border(.pink, width: 3)\n            .cornerRadius(4)\n    }\n}\n\n\nSwiftUI provides two built-in progress view styles, linear and circular, as well as an automatic style that defaults to the most appropriate style in the current context. The following example shows a circular progress view that starts at 60 percent completed.\n\nstruct CircularProgressDemoView: View {\n    @State private var progress = 0.6\n\n\n    var body: some View {\n        VStack {\n            ProgressView(value: progress)\n                .progressViewStyle(.circular)\n        }\n    }\n}\n\n\nOn platforms other than macOS, the circular style may appear as an indeterminate indicator instead.\n\nTopics\nCreating an indeterminate progress view\ninit()\nCreates a progress view for showing indeterminate progress, without a label.\nAvailable when Label conforms to View and CurrentValueLabel is EmptyView.\ninit(label: () -> Label)\nCreates a progress view for showing indeterminate progress that displays a custom label.\nAvailable when Label conforms to View and CurrentValueLabel is EmptyView.\ninit(LocalizedStringKey)\nCreates a progress view for showing indeterminate progress that generates its label from a localized string.\nAvailable when Label conforms to View and CurrentValueLabel is EmptyView.\ninit<S>(S)\nCreates a progress view for showing indeterminate progress that generates its label from a string.\nAvailable when Label conforms to View and CurrentValueLabel is EmptyView.\nCreating a determinate progress view\ninit(Progress)\nCreates a progress view for visualizing the given progress instance.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\ninit<V>(value: V?, total: V)\nCreates a progress view for showing determinate progress.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\ninit<V>(LocalizedStringKey, value: V?, total: V)\nCreates a progress view for showing determinate progress that generates its label from a localized string.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\ninit<S, V>(S, value: V?, total: V)\nCreates a progress view for showing determinate progress that generates its label from a string.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\ninit<V>(value: V?, total: V, label: () -> Label)\nCreates a progress view for showing determinate progress, with a custom label.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\ninit<V>(value: V?, total: V, label: () -> Label, currentValueLabel: () -> CurrentValueLabel)\nCreates a progress view for showing determinate progress, with a custom label.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\nCreate a progress view spanning a date range\ninit(timerInterval: ClosedRange<Date>, countsDown: Bool)\nCreates a progress view for showing continuous progress as time passes.\nAvailable when Label is EmptyView and CurrentValueLabel is DefaultDateProgressLabel.\ninit(timerInterval: ClosedRange<Date>, countsDown: Bool, label: () -> Label)\nCreates a progress view for showing continuous progress as time passes, with a descriptive label.\nAvailable when Label conforms to View and CurrentValueLabel is DefaultDateProgressLabel.\ninit(timerInterval: ClosedRange<Date>, countsDown: Bool, label: () -> Label, currentValueLabel: () -> CurrentValueLabel)\nCreates a progress view for showing continuous progress as time passes, with descriptive and current progress labels.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\nCreating a configured progress view\ninit(ProgressViewStyleConfiguration)\nCreates a progress view based on a style configuration.\nAvailable when Label conforms to View and CurrentValueLabel conforms to View.\nRelationships\nConforms To\nView\nSee Also\nIndicating a value\nstruct Gauge\nA view that shows a value within a range.\nfunc gaugeStyle<S>(S) -> some View\nSets the style for gauges within this view.\nfunc progressViewStyle<S>(S) -> some View\nSets the style for progress views in this view.\nstruct DefaultDateProgressLabel\nThe default type of the current value label when used by a date-relative progress view."
    },
    {
        "title": "body(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/viewmodifier/body(content:)-36wiq",
        "html": "Required Default implementation provided.\n\nDiscussion\n\ncontent is a proxy for the view that will have the modifier represented by Self applied to it.\n\nDefault Implementations\nViewModifier Implementations\nfunc body(content: Self.Content) -> Self.Body\nGets the current body of the caller.\nAvailable when Body is Never.\nSee Also\nCreating a view modifier\nassociatedtype Body : View\nThe type of view representing the body.\n\nRequired\n\ntypealias Content\nThe content view type passed to body()."
    },
    {
        "title": "foregroundColor(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/foregroundcolor(_:)",
        "html": "Deprecated\n\nUse foregroundStyle(_:) instead.\n\nParameters\ncolor\n\nThe foreground color to use when displaying this view. Pass nil to remove any custom foreground color and to allow the system or the container to provide its own foreground color. If a container-specific override doesn\u2019t exist, the system uses the primary color.\n\nReturn Value\n\nA view that uses the foreground color you supply.\n\nSee Also\nAppearance modifiers\nfunc colorScheme(ColorScheme) -> some View\nSets this view\u2019s color scheme.\nDeprecated\nfunc listRowPlatterColor(Color?) -> some View\nSets the color that the system applies to the row background when this view is placed in a list.\nDeprecated\nfunc background<Background>(Background, alignment: Alignment) -> some View\nLayers the given view behind this view.\nDeprecated\nfunc overlay<Overlay>(Overlay, alignment: Alignment) -> some View\nLayers a secondary view in front of this view.\nDeprecated"
    },
    {
        "title": "ViewModifier.Content",
        "url": "https://developer.apple.com/documentation/swiftui/viewmodifier/content",
        "html": "See Also\nCreating a view modifier\nfunc body(content: Self.Content) -> Self.Body\nGets the current body of the caller.\n\nRequired Default implementation provided.\n\nassociatedtype Body : View\nThe type of view representing the body.\n\nRequired"
    },
    {
        "title": "concat(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/viewmodifier/concat(_:)",
        "html": "See Also\nAdding animations to a view\nfunc animation(Animation?) -> some ViewModifier\nReturns a new version of the modifier that will apply animation to all animatable values within the modifier."
    },
    {
        "title": "Edge.top",
        "url": "https://developer.apple.com/documentation/swiftui/edge/top",
        "html": "See Also\nGetting the edges\ncase bottom\ncase leading\ncase trailing"
    },
    {
        "title": "animation(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/viewmodifier/animation(_:)",
        "html": "See Also\nAdding animations to a view\nfunc concat<T>(T) -> ModifiedContent<Self, T>\nReturns a new modifier that is the result of concatenating self with modifier."
    },
    {
        "title": "Body",
        "url": "https://developer.apple.com/documentation/swiftui/viewmodifier/body",
        "html": "Required\n\nSee Also\nCreating a view modifier\nfunc body(content: Self.Content) -> Self.Body\nGets the current body of the caller.\n\nRequired Default implementation provided.\n\ntypealias Content\nThe content view type passed to body()."
    },
    {
        "title": "bounds",
        "url": "https://developer.apple.com/documentation/swiftui/anchor/source/bounds",
        "html": "See Also\nGetting rectangle anchor sources\nstatic func rect(CGRect) -> Anchor<Value>.Source\nReturns an anchor source rect defined by r in the current view.\nAvailable when Value is CGRect."
    },
    {
        "title": "enabled",
        "url": "https://developer.apple.com/documentation/swiftui/presentationbackgroundinteraction/enabled",
        "html": "See Also\nGetting interaction types\nstatic var automatic: PresentationBackgroundInteraction\nThe default background interaction for the presentation.\nstatic var disabled: PresentationBackgroundInteraction\nPeople can\u2019t interact with the view behind a presentation.\nstatic func enabled(upThrough: PresentationDetent) -> PresentationBackgroundInteraction\nPeople can interact with the view behind a presentation up through a specified detent."
    },
    {
        "title": "disabled",
        "url": "https://developer.apple.com/documentation/swiftui/presentationbackgroundinteraction/disabled",
        "html": "See Also\nGetting interaction types\nstatic var automatic: PresentationBackgroundInteraction\nThe default background interaction for the presentation.\nstatic var enabled: PresentationBackgroundInteraction\nPeople can interact with the view behind a presentation.\nstatic func enabled(upThrough: PresentationDetent) -> PresentationBackgroundInteraction\nPeople can interact with the view behind a presentation up through a specified detent."
    },
    {
        "title": "subscript(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/subscript(_:)-9f1xu",
        "html": "Overview\n\nCreate custom environment values by defining a key that conforms to the EnvironmentKey protocol, and then using that key with the subscript operator of the EnvironmentValues structure to get and set a value for that key:\n\nprivate struct MyEnvironmentKey: EnvironmentKey {\n    static let defaultValue: String = \"Default value\"\n}\n\n\nextension EnvironmentValues {\n    var myCustomValue: String {\n        get { self[MyEnvironmentKey.self] }\n        set { self[MyEnvironmentKey.self] = newValue }\n    }\n}\n\n\nYou use custom environment values the same way you use system-provided values, setting a value with the environment(_:_:) view modifier, and reading values with the Environment property wrapper. You can also provide a dedicated view modifier as a convenience for setting the value:\n\nextension View {\n    func myCustomValue(_ myCustomValue: String) -> some View {\n        environment(\\.myCustomValue, myCustomValue)\n    }\n}\n\nSee Also\nCreating and accessing values\ninit()\nCreates an environment values instance.\nsubscript<K>(K.Type) -> K.Value\nAccesses the environment value associated with a custom key.\nsubscript<T>(T.Type) -> T?\nReads an observable object of the specified type from the environment.\nvar description: String\nA string that represents the contents of the environment values instance."
    },
    {
        "title": "subscript(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/subscript(_:)-43hzl",
        "html": "Parameters\nobjectType\n\nThe type of the Observable object to read from the environment.\n\nReturn Value\n\nThe environment object of the specified type, or nil if no object of that type has been set in this environment.\n\nOverview\n\nImportant\n\nThis subscript only supports reading objects that conform to the Observable protocol.\n\nUse this subscript to read the environment object of a specific type from an instance of EnvironmentValues, such as when accessing the environment property of a graphics context:\n\n@Observable final class Profile { ... }\n\n\nCanvas { context, size in\n    let currentProfile = context.environment[Profile.self]\n    ...\n}\n\nSee Also\nCreating and accessing values\ninit()\nCreates an environment values instance.\nsubscript<K>(K.Type) -> K.Value\nAccesses the environment value associated with a custom key.\nsubscript<K>(K.Type) -> K.Value\nAccesses the environment value associated with a custom key.\nvar description: String\nA string that represents the contents of the environment values instance."
    },
    {
        "title": "PresentationDetent.Context",
        "url": "https://developer.apple.com/documentation/swiftui/presentationdetent/context",
        "html": "Topics\nGetting the height\nvar maxDetentValue: CGFloat\nThe height that the presentation appears in.\nSupporting types\nsubscript<T>(dynamicMember _: KeyPath<EnvironmentValues, T>) -> T\nReturns the value specified by the keyPath from the environment.\nSee Also\nCreating custom detents\nstatic func custom<D>(D.Type) -> PresentationDetent\nA custom detent with a calculated height.\nstatic func fraction(CGFloat) -> PresentationDetent\nA custom detent with the specified fractional height.\nstatic func height(CGFloat) -> PresentationDetent\nA custom detent with the specified height."
    },
    {
        "title": "scrolls",
        "url": "https://developer.apple.com/documentation/swiftui/presentationcontentinteraction/scrolls",
        "html": "See Also\nGetting interaction behaviors\nstatic var automatic: PresentationContentInteraction\nThe default swipe behavior for the presentation.\nstatic var resizes: PresentationContentInteraction\nA behavior that prioritizes resizing a presentation when swiping, rather than scrolling the content of the presentation."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/init()",
        "html": "Discussion\n\nYou don\u2019t typically create an instance of EnvironmentValues directly. Doing so would provide access only to default values that don\u2019t update based on system settings or device characteristics. Instead, you rely on an environment values\u2019 instance that SwiftUI manages for you when you use the Environment property wrapper and the environment(_:_:) view modifier.\n\nSee Also\nCreating and accessing values\nsubscript<K>(K.Type) -> K.Value\nAccesses the environment value associated with a custom key.\nsubscript<T>(T.Type) -> T?\nReads an observable object of the specified type from the environment.\nsubscript<K>(K.Type) -> K.Value\nAccesses the environment value associated with a custom key.\nvar description: String\nA string that represents the contents of the environment values instance."
    },
    {
        "title": "init(wrappedValue:)",
        "url": "https://developer.apple.com/documentation/swiftui/stateobject/init(wrappedvalue:)",
        "html": "Parameters\nthunk\n\nAn initial value for the state object.\n\nDiscussion\n\nYou typically don\u2019t call this initializer directly. Instead, SwiftUI calls it for you when you declare a property with the @StateObject attribute in an App, Scene, or View and provide an initial value:\n\nstruct MyView: View {\n    @StateObject private var model = DataModel()\n\n\n    // ...\n}\n\n\nSwiftUI creates only one instance of the state object for each container instance that you declare. In the above code, SwiftUI creates model only the first time it initializes a particular instance of MyView. On the other hand, each instance of MyView creates a distinct instance of the data model. For example, each of the views in the following VStack has its own model storage:\n\nvar body: some View {\n    VStack {\n        MyView()\n        MyView()\n    }\n}\n\nInitialize using external data\n\nIf the initial state of a state object depends on external data, you can call this initializer directly. However, use caution when doing this, because SwiftUI only initializes the object once during the lifetime of the view \u2014 even if you call the state object initializer more than once \u2014 which might result in unexpected behavior. For more information and an example, see StateObject."
    },
    {
        "title": "navigationBarDrawer(displayMode:)",
        "url": "https://developer.apple.com/documentation/swiftui/searchfieldplacement/navigationbardrawer(displaymode:)",
        "html": "Parameters\ndisplayMode\n\nA control that indicates whether to hide the search field in response to scrolling.\n\nDiscussion\n\nThe field appears below any navigation bar title. The system can hide the field in response to scrolling, depending on the displayMode that you set.\n\nSee Also\nGetting a search field placement\nstatic let automatic: SearchFieldPlacement\nSwiftUI places the search field automatically.\nstatic let navigationBarDrawer: SearchFieldPlacement\nThe search field appears in the navigation bar.\nstatic let sidebar: SearchFieldPlacement\nThe search field appears in the sidebar of a navigation view.\nstatic let toolbar: SearchFieldPlacement\nThe search field appears in the toolbar."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/searchfieldplacement/automatic",
        "html": "Discussion\n\nPlacement of the search field depends on the platform:\n\nIn iOS, iPadOS, and macOS, the search field appears in the toolbar.\n\nIn tvOS and watchOS, the search field appears inline with its content.\n\nSee Also\nGetting a search field placement\nstatic let navigationBarDrawer: SearchFieldPlacement\nThe search field appears in the navigation bar.\nstatic func navigationBarDrawer(displayMode: SearchFieldPlacement.NavigationBarDrawerDisplayMode) -> SearchFieldPlacement\nThe search field appears in the navigation bar using the specified display mode.\nstatic let sidebar: SearchFieldPlacement\nThe search field appears in the sidebar of a navigation view.\nstatic let toolbar: SearchFieldPlacement\nThe search field appears in the toolbar."
    },
    {
        "title": "navigationBarDrawer",
        "url": "https://developer.apple.com/documentation/swiftui/searchfieldplacement/navigationbardrawer",
        "html": "Discussion\n\nThe field appears below any navigation bar title and uses the automatic display mode to configure when to hide the search field. To choose a different display mode, use navigationBarDrawer(displayMode:) instead.\n\nSee Also\nGetting a search field placement\nstatic let automatic: SearchFieldPlacement\nSwiftUI places the search field automatically.\nstatic func navigationBarDrawer(displayMode: SearchFieldPlacement.NavigationBarDrawerDisplayMode) -> SearchFieldPlacement\nThe search field appears in the navigation bar using the specified display mode.\nstatic let sidebar: SearchFieldPlacement\nThe search field appears in the sidebar of a navigation view.\nstatic let toolbar: SearchFieldPlacement\nThe search field appears in the toolbar."
    },
    {
        "title": "accessibility(activationPoint:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibility(activationpoint:)-2h84m",
        "html": "Deprecated\n\nUse accessibilityActivationPoint(_:) instead."
    },
    {
        "title": "wrappedValue",
        "url": "https://developer.apple.com/documentation/swiftui/stateobject/wrappedvalue",
        "html": "Discussion\n\nThe wrapped value property provides primary access to the value\u2019s data. However, you don\u2019t typically access it directly. Instead, SwiftUI accesses this property for you when you refer to the variable that you create with the @StateObject attribute:\n\n@StateObject private var contact = Contact()\n\n\nvar body: some View {\n    Text(contact.name) // Reads name from contact's wrapped value.\n}\n\n\nWhen you change a wrapped value, you can access the new value immediately. However, SwiftUI updates views that display the value asynchronously, so the interface might not update immediately.\n\nSee Also\nGetting the value\nvar projectedValue: ObservedObject<ObjectType>.Wrapper\nA projection of the state object that creates bindings to its properties."
    },
    {
        "title": "Value",
        "url": "https://developer.apple.com/documentation/swiftui/environmentkey/value",
        "html": "Required\n\nSee Also\nGetting the default value\nstatic var defaultValue: Self.Value\nThe default value for the environment key.\n\nRequired"
    },
    {
        "title": "accessibility(inputLabels:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibility(inputlabels:)",
        "html": "Deprecated\n\nUse accessibilityInputLabels(_:) instead.\n\nParameters\ninputLabels\n\nAn array of Text elements to use as input labels.\n\nDiscussion\n\nProvide labels in descending order of importance. Voice Control and Full Keyboard Access use the input labels.\n\nNote\n\nIf you don\u2019t specify any input labels, the user can still refer to the view using the accessibility label that you add with the accessibility(label:) modifier."
    },
    {
        "title": "wrappedValue",
        "url": "https://developer.apple.com/documentation/swiftui/environment/wrappedvalue",
        "html": "Discussion\n\nThe wrapped value property provides primary access to the value\u2019s data. However, you don\u2019t access wrappedValue directly. Instead, you read the property variable created with the Environment property wrapper:\n\n@Environment(\\.colorScheme) var colorScheme: ColorScheme\n\n\nvar body: some View {\n    if colorScheme == .dark {\n        DarkContent()\n    } else {\n        LightContent()\n    }\n}\n"
    },
    {
        "title": "init(initialValue:)",
        "url": "https://developer.apple.com/documentation/swiftui/state/init(initialvalue:)",
        "html": "Parameters\nvalue\n\nAn initial value to store in the state property.\n\nDiscussion\n\nThis initializer has the same behavior as the init(wrappedValue:) initializer. See that initializer for more information.\n\nSee Also\nCreating a state\ninit(wrappedValue: Value)\nCreates a state property that stores an initial wrapped value.\ninit()\nCreates a state property without an initial value.\nAvailable when Value conforms to ExpressibleByNilLiteral."
    },
    {
        "title": "projectedValue",
        "url": "https://developer.apple.com/documentation/swiftui/state/projectedvalue",
        "html": "Discussion\n\nUse the projected value to get a Binding to the stored value. The binding provides a two-way connection to the stored value. To access the projectedValue, prefix the property variable with a dollar sign ($).\n\nIn the following example, PlayerView projects a binding of the state property isPlaying to the PlayButton view using $isPlaying. That enables the play button to both read and write the value:\n\nstruct PlayerView: View {\n    var episode: Episode\n    @State private var isPlaying: Bool = false\n\n\n    var body: some View {\n        VStack {\n            Text(episode.title)\n                .foregroundStyle(isPlaying ? .primary : .secondary)\n            PlayButton(isPlaying: $isPlaying)\n        }\n    }\n}\n\nSee Also\nGetting the value\nvar wrappedValue: Value\nThe underlying value referenced by the state variable."
    },
    {
        "title": "accessibilityCustomContent(_:_:importance:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilitycustomcontent(_:_:importance:)-287zy",
        "html": "Parameters\nlabel\n\nLocalized text describing to the user what is contained in this additional information entry. For example: \u201corientation\u201d.\n\nvalue\n\nText value for the additional accessibility information. For example: \u201clandscape.\u201d\n\nimportance\n\nImportance of the accessibility information. High-importance information gets read out immediately, while default-importance information must be explicitly asked for by the user.\n\nDiscussion\n\nUse this method to add information you want accessibility users to be able to access about this element, beyond the basics of label, value, and hint. For example: accessibilityCustomContent can be used to add information about the orientation of a photograph, or the number of people found in the picture.\n\nNote\n\nRepeated calls of accessibilityCustomContent with different labels will create new entries of additional information. Calling accessibilityAdditionalContent repeatedly with the same label will instead replace the previous value and importance."
    },
    {
        "title": "accessibilityCustomContent(_:_:importance:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilitycustomcontent(_:_:importance:)-18uji",
        "html": "Parameters\nlabel\n\nLocalized text describing to the user what is contained in this additional information entry. For example: \u201corientation\u201d.\n\nvalue\n\nText value for the additional accessibility information. For example: \u201clandscape.\u201d\n\nimportance\n\nImportance of the accessibility information. High-importance information gets read out immediately, while default-importance information must be explicitly asked for by the user.\n\nDiscussion\n\nUse this method to add information you want accessibility users to be able to access about this element, beyond the basics of label, value, and hint. For example: accessibilityCustomContent can be used to add information about the orientation of a photograph, or the number of people found in the picture.\n\nNote\n\nRepeated calls of accessibilityCustomContent with different labels will create new entries of additional information. Calling accessibilityAdditionalContent repeatedly with the same label will instead replace the previous value and importance."
    },
    {
        "title": "accessibilityAction(named:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilityaction(named:_:)-8v9cm",
        "html": "Discussion\n\nFor example, this is how a custom action to compose a new email could be added to a view.\n\nvar body: some View {\n    ContentView()\n        .accessibilityAction(named: \"New Message\") {\n            // Handle action\n        }\n}\n"
    },
    {
        "title": "disableAutocorrection",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/disableautocorrection",
        "html": "Discussion\n\nWhen the value is nil, SwiftUI uses the system default. The default value is nil.\n\nSee Also\nDeprecated environment values\nvar sizeCategory: ContentSizeCategory\nThe size of content.\nDeprecated\nvar presentationMode: Binding<PresentationMode>\nA binding to the current presentation mode of the view associated with this environment.\nDeprecated\nstruct PresentationMode\nAn indication whether a view is currently presented by another view.\nDeprecated"
    },
    {
        "title": "modelContext",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/modelcontext",
        "html": "See Also\nGlobal objects\nvar calendar: Calendar\nThe current calendar that views should use when handling dates.\nvar documentConfiguration: DocumentConfiguration?\nThe configuration of a document in a DocumentGroup.\nvar locale: Locale\nThe current locale that views should use.\nvar managedObjectContext: NSManagedObjectContext\nvar timeZone: TimeZone\nThe current time zone that views should use when handling dates.\nvar undoManager: UndoManager?\nThe undo manager used to register a view\u2019s undo operations."
    },
    {
        "title": "physicalMetrics",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/physicalmetrics",
        "html": "Discussion\n\nReading this value returns a PhysicalMetricsConverter corresponding to the window scene associated with the environment\u2019s reader. The converter can convert point sizes into physical measurements of length, and vice versa.\n\nReading this value is only supported in the body of a View or of a type that inherits a View\u2019s environment.\n\nSee Also\nView attributes\nvar allowedDynamicRange: Image.DynamicRange?\nThe allowed dynamic range for the view, or nil.\nvar backgroundMaterial: Material?\nThe material underneath the current view.\nvar backgroundProminence: BackgroundProminence\nThe prominence of the background underneath views associated with this environment.\nvar backgroundStyle: AnyShapeStyle?\nAn optional style that overrides the default system background style when set.\nvar badgeProminence: BadgeProminence\nThe prominence to apply to badges associated with this environment.\nvar contentTransition: ContentTransition\nThe current method of animating the contents of views.\nvar contentTransitionAddsDrawingGroup: Bool\nA Boolean value that controls whether views that render content transitions use GPU-accelerated rendering.\nvar defaultMinListHeaderHeight: CGFloat?\nThe default minimum height of a header in a list.\nvar defaultMinListRowHeight: CGFloat\nThe default minimum height of a row in a list.\nvar isFocusEffectEnabled: Bool\nA Boolean value that indicates whether the view associated with this environment allows focus effects to be displayed.\nvar headerProminence: Prominence\nThe prominence to apply to section headers within a view.\nvar realityKitScene: Scene?\nBeta\nvar redactionReasons: RedactionReasons\nThe current redaction reasons applied to the view hierarchy.\nvar springLoadingBehavior: SpringLoadingBehavior\nThe behavior of spring loaded interactions for the views associated with this environment.\nvar symbolRenderingMode: SymbolRenderingMode?\nThe current symbol rendering mode, or nil denoting that the mode is picked automatically using the current image and foreground style as parameters.\nvar symbolVariants: SymbolVariants\nThe symbol variant to use in this environment."
    },
    {
        "title": "widgetRenderingMode",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/widgetrenderingmode",
        "html": "Discussion\n\nYou can read the rendering mode from the environment values using this key.\n\n@Environment(\\.widgetRenderingMode) var widgetRenderingMode\n\n\nThen modify the widget\u2019s appearance based on the mode.\n\nvar body: some View {\n    ZStack {\n       switch renderingMode {\n        case .fullColor:\n           Text(\"Full color\")\n        case .accented:\n           ZStack {\n               Circle(...)\n               VStack {\n                   Text(\"Accented\")\n                       .widgetAccentable()\n                   Text(\"Normal\")\n               }\n           }\n        case .vibrant:\n           Text(\"Full color\")\n        default:\n           ...\n        }\n    }\n}\n\nSee Also\nWidgets\nvar showsWidgetContainerBackground: Bool\nAn environment variable that indicates whether the background of a widget appears.\nvar showsWidgetLabel: Bool\nA Boolean value that indicates whether an accessory family widget can display an accessory label.\nvar widgetFamily: WidgetFamily\nThe template of the widget \u2014 small, medium, or large.\nvar widgetContentMargins: EdgeInsets\nA property that identifies the content margins of a widget."
    },
    {
        "title": "accessibilityCustomContent(_:_:importance:)",
        "url": "https://developer.apple.com/documentation/swiftui/modifiedcontent/accessibilitycustomcontent(_:_:importance:)-623d0",
        "html": "Parameters\nkey\n\nKey used to specify the identifier and label of the of the additional accessibility information entry.\n\nvalue\n\nText value for the additional accessibility information. For example: \u201clandscape.\u201d A value of nil will remove any entry of additional information added earlier for any key with the same identifier.\n\nDiscussion\n\nUse this method to add information you want accessibility users to be able to access about this element, beyond the basics of label, value, and hint. For example, accessibilityCustomContent can be used to add information about the orientation of a photograph, or the number of people found in the picture.\n\nNote\n\nRepeated calls of accessibilityCustomContent with keys having different identifiers will create new entries of additional information. Calling accessibilityAdditionalContent repeatedly with keys having matching identifiers will replace the previous entry."
    },
    {
        "title": "realityKitScene",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/realitykitscene",
        "html": "See Also\nView attributes\nvar allowedDynamicRange: Image.DynamicRange?\nThe allowed dynamic range for the view, or nil.\nvar backgroundMaterial: Material?\nThe material underneath the current view.\nvar backgroundProminence: BackgroundProminence\nThe prominence of the background underneath views associated with this environment.\nvar backgroundStyle: AnyShapeStyle?\nAn optional style that overrides the default system background style when set.\nvar badgeProminence: BadgeProminence\nThe prominence to apply to badges associated with this environment.\nvar contentTransition: ContentTransition\nThe current method of animating the contents of views.\nvar contentTransitionAddsDrawingGroup: Bool\nA Boolean value that controls whether views that render content transitions use GPU-accelerated rendering.\nvar defaultMinListHeaderHeight: CGFloat?\nThe default minimum height of a header in a list.\nvar defaultMinListRowHeight: CGFloat\nThe default minimum height of a row in a list.\nvar isFocusEffectEnabled: Bool\nA Boolean value that indicates whether the view associated with this environment allows focus effects to be displayed.\nvar headerProminence: Prominence\nThe prominence to apply to section headers within a view.\nvar physicalMetrics: PhysicalMetricsConverter\nThe physical metrics associated with a scene.\nBeta\nvar redactionReasons: RedactionReasons\nThe current redaction reasons applied to the view hierarchy.\nvar springLoadingBehavior: SpringLoadingBehavior\nThe behavior of spring loaded interactions for the views associated with this environment.\nvar symbolRenderingMode: SymbolRenderingMode?\nThe current symbol rendering mode, or nil denoting that the mode is picked automatically using the current image and foreground style as parameters.\nvar symbolVariants: SymbolVariants\nThe symbol variant to use in this environment."
    },
    {
        "title": "displayStoreKitMessage",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/displaystorekitmessage",
        "html": "See Also\nStoreKit configuration\nvar requestReview: RequestReviewAction"
    },
    {
        "title": "sizeCategory",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/sizecategory",
        "html": "Deprecated\n\nUse dynamicTypeSize instead.\n\nSee Also\nDeprecated environment values\nvar disableAutocorrection: Bool?\nA Boolean value that determines whether the view hierarchy has auto-correction enabled.\nvar presentationMode: Binding<PresentationMode>\nA binding to the current presentation mode of the view associated with this environment.\nDeprecated\nstruct PresentationMode\nAn indication whether a view is currently presented by another view.\nDeprecated"
    },
    {
        "title": "PresentationMode",
        "url": "https://developer.apple.com/documentation/swiftui/presentationmode",
        "html": "Deprecated\n\nUse isPresented or dismiss instead.\n\nTopics\nChecking presentation\nvar isPresented: Bool\nIndicates whether a view is currently presented.\nDismissing presentation\nfunc dismiss()\nDismisses the view if it is currently presented.\nSee Also\nDeprecated environment values\nvar disableAutocorrection: Bool?\nA Boolean value that determines whether the view hierarchy has auto-correction enabled.\nvar sizeCategory: ContentSizeCategory\nThe size of content.\nDeprecated\nvar presentationMode: Binding<PresentationMode>\nA binding to the current presentation mode of the view associated with this environment.\nDeprecated"
    },
    {
        "title": "showsWidgetLabel",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/showswidgetlabel",
        "html": "Discussion\n\nUse this value to determine if you can provide additional content, or possibly move some of the widget\u2019s content out of the main view and into the widget label.\n\n\n\n@Environment(\\.widgetFamily) var widgetFamily\n@Environment(\\.showsWidgetLabel) var showsWidgetLabel\n\n\nvar body: some View {\n   switch widgetFamily {\n   case .accessoryCircular:\n       if showsWidgetLabel {\n           Image(\"cat_full\")\n               .widgetLabel(label: Text(\"Cats\"))\n       }\n       else {\n           VStack {\n               Image(\"cat_small\")\n               Text(\"Cats\")\n           }\n       }\n   }\n}\n\n\n\n\nThis environment value is most useful when defining the appearance for the WidgetKit/WidgetFamily/accessoryCircular widget family, because it\u2019s value can change depending on where the widget appears. For example, if the widget is the top circular complication on the Infograph watch face, the value is true. Otherwise it is false. The environment variable is always false in iOS.\n\nOther families always have the same value, regardless of where the widget appears. For the WidgetKit/WidgetFamily/accessoryCorner widget family, the value is always true. For other families, it is false.\n\nSee Also\nWidgets\nvar showsWidgetContainerBackground: Bool\nAn environment variable that indicates whether the background of a widget appears.\nvar widgetFamily: WidgetFamily\nThe template of the widget \u2014 small, medium, or large.\nvar widgetRenderingMode: WidgetRenderingMode\nThe widget\u2019s rendering mode, based on where the system is displaying it.\nvar widgetContentMargins: EdgeInsets\nA property that identifies the content margins of a widget."
    },
    {
        "title": "widgetContentMargins",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/widgetcontentmargins",
        "html": "Return Value\n\nReturns the content margins for the current widget presentation context.\n\nDiscussion\n\nThe content margins of a widget depend on the context in which it appears. The system applies default content margins. However, if you disable automatic application of default content margins with contentMarginsDisabled(), the system uses the widgetContentMargins property in combination with View/padding(_) to selectively apply default content margins.\n\nSee Also\nWidgets\nvar showsWidgetContainerBackground: Bool\nAn environment variable that indicates whether the background of a widget appears.\nvar showsWidgetLabel: Bool\nA Boolean value that indicates whether an accessory family widget can display an accessory label.\nvar widgetFamily: WidgetFamily\nThe template of the widget \u2014 small, medium, or large.\nvar widgetRenderingMode: WidgetRenderingMode\nThe widget\u2019s rendering mode, based on where the system is displaying it."
    },
    {
        "title": "purchase",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/purchase",
        "html": "Discussion\n\nRead this environment value to get an PurchaseAction instance for a given Environment. Call the instance to start an in-app purchase. You call the instance directly because it defines a PurchaseAction/callAsFunction(_:options:) method that Swift calls when you call the instance.\n\nFor example, you can start an in-app purchase when the user taps a button:\n\nstruct PurchaseExample: View {\n    @Environment(\\.purchase) private var purchase\n    let product: Product\n    let purchaseOptions: [Product.PurchaseOption]\n\n\n    var body: some View {\n        Button {\n            Task {\n                let purchaseResult = try? await purchase(product, options: purchaseOptions)\n                // Process purchase result.\n            }\n        } label: {\n            Text(product.displayName)\n        }\n    }\n}\n\nSee Also\nActions\nvar dismiss: DismissAction\nAn action that dismisses the current presentation.\nvar dismissSearch: DismissSearchAction\nAn action that ends the current search interaction.\nvar dismissWindow: DismissWindowAction\nA window dismissal action stored in a view\u2019s environment.\nvar openImmersiveSpace: OpenImmersiveSpaceAction\nAn action that presents an immersive space.\nBeta\nvar dismissImmersiveSpace: DismissImmersiveSpaceAction\nAn immersive space dismissal action stored in a view\u2019s environment.\nBeta\nvar newDocument: NewDocumentAction\nAn action in the environment that presents a new document.\nvar openDocument: OpenDocumentAction\nAn action in the environment that presents an existing document.\nvar openURL: OpenURLAction\nAn action that opens a URL.\nvar openWindow: OpenWindowAction\nA window presentation action stored in a view\u2019s environment.\nvar refresh: RefreshAction?\nA refresh action stored in a view\u2019s environment.\nvar rename: RenameAction?\nAn action that activates the standard rename interaction.\nvar resetFocus: ResetFocusAction\nAn action that requests the focus system to reevaluate default focus."
    },
    {
        "title": "showsWidgetContainerBackground",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/showswidgetcontainerbackground",
        "html": "Return Value\n\ntrue if, by default, the background appears in this context; false otherwise.\n\nDiscussion\n\nIn iOS 16 and earlier, this environment variable is always true for system widgets and false for accessory widgets. In macOS 13 and earlier, and in watchOS 9 and earlier, it always evaluates to true.\n\nIf you pass false to containerBackgroundRemovable(_:) to always show the widget background, the system shows the widget background even if showsWidgetContainerBackground evaluates to true.\n\nSee Also\nWidgets\nvar showsWidgetLabel: Bool\nA Boolean value that indicates whether an accessory family widget can display an accessory label.\nvar widgetFamily: WidgetFamily\nThe template of the widget \u2014 small, medium, or large.\nvar widgetRenderingMode: WidgetRenderingMode\nThe widget\u2019s rendering mode, based on where the system is displaying it.\nvar widgetContentMargins: EdgeInsets\nA property that identifies the content margins of a widget."
    },
    {
        "title": "presentationMode",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/presentationmode",
        "html": "Deprecated\n\nUse isPresented or dismiss instead.\n\nSee Also\nDeprecated environment values\nvar disableAutocorrection: Bool?\nA Boolean value that determines whether the view hierarchy has auto-correction enabled.\nvar sizeCategory: ContentSizeCategory\nThe size of content.\nDeprecated\nstruct PresentationMode\nAn indication whether a view is currently presented by another view.\nDeprecated"
    },
    {
        "title": "widgetFamily",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/widgetfamily",
        "html": "Overview\n\nUse this value to retrieve the widget size that the user chose for a widget.\n\nSee Also\nWidgets\nvar showsWidgetContainerBackground: Bool\nAn environment variable that indicates whether the background of a widget appears.\nvar showsWidgetLabel: Bool\nA Boolean value that indicates whether an accessory family widget can display an accessory label.\nvar widgetRenderingMode: WidgetRenderingMode\nThe widget\u2019s rendering mode, based on where the system is displaying it.\nvar widgetContentMargins: EdgeInsets\nA property that identifies the content margins of a widget."
    },
    {
        "title": "accessibilityVoiceOverEnabled",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/accessibilityvoiceoverenabled",
        "html": "Discussion\n\nThe state changes as the user turns on or off the VoiceOver screen reader.\n\nSee Also\nAccessibility\nvar accessibilityDimFlashingLights: Bool\nWhether the setting to reduce flashing or strobing lights in video content is on. This setting can also be used to determine if UI in playback controls should be shown to indicate upcoming content that includes flashing or strobing lights.\nvar accessibilityDifferentiateWithoutColor: Bool\nWhether the system preference for Differentiate without Color is enabled.\nvar accessibilityEnabled: Bool\nA Boolean value that indicates whether the user has enabled an assistive technology.\nvar accessibilityInvertColors: Bool\nWhether the system preference for Invert Colors is enabled.\nvar accessibilityLargeContentViewerEnabled: Bool\nWhether the Large Content Viewer is enabled.\nvar accessibilityPlayAnimatedImages: Bool\nWhether the setting for playing animations in an animated image is on. When this value is false, any presented image that contains animation should not play automatically.\nvar accessibilityPrefersHeadAnchorAlternative: Bool\nWhether the system setting to prefer alternatives to head-anchored content is on.\nBeta\nvar accessibilityQuickActionsEnabled: Bool\nA Boolean that indicates whether the quick actions feature is enabled.\nvar accessibilityReduceMotion: Bool\nWhether the system preference for Reduce Motion is enabled.\nvar accessibilityReduceTransparency: Bool\nWhether the system preference for Reduce Transparency is enabled.\nvar accessibilityShowButtonShapes: Bool\nWhether the system preference for Show Button Shapes is enabled.\nvar accessibilitySwitchControlEnabled: Bool\nA Boolean value that indicates whether the Switch Control motor accessibility feature is in use.\nvar legibilityWeight: LegibilityWeight?\nThe font weight to apply to text."
    },
    {
        "title": "accessibilitySwitchControlEnabled",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/accessibilityswitchcontrolenabled",
        "html": "Discussion\n\nThe state changes as the user turns on or off the Switch Control feature.\n\nSee Also\nAccessibility\nvar accessibilityDimFlashingLights: Bool\nWhether the setting to reduce flashing or strobing lights in video content is on. This setting can also be used to determine if UI in playback controls should be shown to indicate upcoming content that includes flashing or strobing lights.\nvar accessibilityDifferentiateWithoutColor: Bool\nWhether the system preference for Differentiate without Color is enabled.\nvar accessibilityEnabled: Bool\nA Boolean value that indicates whether the user has enabled an assistive technology.\nvar accessibilityInvertColors: Bool\nWhether the system preference for Invert Colors is enabled.\nvar accessibilityLargeContentViewerEnabled: Bool\nWhether the Large Content Viewer is enabled.\nvar accessibilityPlayAnimatedImages: Bool\nWhether the setting for playing animations in an animated image is on. When this value is false, any presented image that contains animation should not play automatically.\nvar accessibilityPrefersHeadAnchorAlternative: Bool\nWhether the system setting to prefer alternatives to head-anchored content is on.\nBeta\nvar accessibilityQuickActionsEnabled: Bool\nA Boolean that indicates whether the quick actions feature is enabled.\nvar accessibilityReduceMotion: Bool\nWhether the system preference for Reduce Motion is enabled.\nvar accessibilityReduceTransparency: Bool\nWhether the system preference for Reduce Transparency is enabled.\nvar accessibilityShowButtonShapes: Bool\nWhether the system preference for Show Button Shapes is enabled.\nvar accessibilityVoiceOverEnabled: Bool\nA Boolean value that indicates whether the VoiceOver screen reader is in use.\nvar legibilityWeight: LegibilityWeight?\nThe font weight to apply to text."
    },
    {
        "title": "Identifiable Implementations",
        "url": "https://developer.apple.com/documentation/swiftui/binding/identifiable-implementations",
        "html": "Topics\nInstance Properties\nvar id: Value.ID\nThe stable identity of the entity associated with this instance, corresponding to the id of the binding\u2019s wrapped value.\nAvailable when Value conforms to Identifiable."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/bindable/init(_:)",
        "html": "Discussion\n\nThis initializer is equivalent to init(wrappedValue:), but is more succinct when when creating bindable objects nested within other expressions. For example, you can use the initializer to create a bindable object inline with code that declares a view that takes a binding as a parameter:\n\nstruct TitleEditView: View {\n    @Environment(Book.self) private var book\n\n\n    var body: some View {\n        TextField(\"Title\", text: Bindable(book).title)\n    }\n}\n\nSee Also\nCreating a bindable value\ninit(wrappedValue: Value)\nCreates a bindable object from an observable object.\nAvailable when Value conforms to Observable.\ninit(projectedValue: Bindable<Value>)\nCreates a bindable from the value of another bindable.\nAvailable when Value conforms to Observable."
    },
    {
        "title": "center",
        "url": "https://developer.apple.com/documentation/swiftui/alignment/center",
        "html": "Discussion\n\nThis alignment combines the center horizontal guide and the center vertical guide:\n\nSee Also\nGetting middle guides\nstatic let leading: Alignment\nA guide that marks the leading edge of the view.\nstatic let trailing: Alignment\nA guide that marks the trailing edge of the view."
    },
    {
        "title": "callAsFunction(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/newdocumentaction/callasfunction(_:)-3h5h6",
        "html": "Parameters\nnewDocument\n\nThe new file document to present.\n\nDiscussion\n\nDon\u2019t call this method directly. SwiftUI calls it when you call the newDocument action:\n\nnewDocument(TextDocument(text: selectedText))\n\n\nFor information about how Swift uses the callAsFunction() method to simplify call site syntax, see Methods with Special Names in The Swift Programming Language.\n\nSee Also\nCalling the action\nfunc callAsFunction<D>(() -> D)\nPresents a new reference type document window.\nfunc callAsFunction(contentType: UTType)\nPresents a new document window.\nfunc callAsFunction(contentType: UTType, prepareDocument: (ModelContext) -> Void)\nPresents a new document window with preset contents."
    },
    {
        "title": "height(in:)",
        "url": "https://developer.apple.com/documentation/swiftui/custompresentationdetent/height(in:)",
        "html": "Required\n\nParameters\ncontext\n\nInformation that can help to determine the height of the detent.\n\nReturn Value\n\nThe height of the detent, or nil if the detent should be inactive based on the contenxt input.\n\nSee Also\nGetting the height\ntypealias Context\nInformation that you can use to calculate the height of a custom detent."
    },
    {
        "title": "searchSuggestionsPlacement",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/searchsuggestionsplacement",
        "html": "Discussion\n\nSearch suggestions render based on the platform and surrounding context in which you place the searchable modifier containing suggestions. You can render search suggestions in two ways:\n\nIn a menu attached to the search field.\n\nInline with the main content of the app.\n\nYou find the current search suggestion placement by querying the searchSuggestionsPlacement in your search suggestions.\n\nenum FruitSuggestion: String, Identifiable {\n    case apple, banana, orange\n    var id: Self { self }\n}\n\n\n@State private var text: String = \"\"\n@State private var suggestions: [FruitSuggestion] = []\n\n\nvar body: some View {\n    MainContent()\n        .searchable(text: $text) {\n            FruitSuggestions(suggestions: suggestions)\n        }\n}\n\n\nstruct FruitSuggestions: View {\n    var suggestions: [FruitSuggestion]\n\n\n    @Environment(\\.searchSuggestionsPlacement)\n    private var placement\n\n\n    var body: some View {\n        if shouldRender {\n            ForEach(suggestions) { suggestion in\n                Text(suggestion.rawValue.capitalized)\n                    .searchCompletion(suggestion.rawValue)\n            }\n        }\n    }\n\n\n    var shouldRender: Bool {\n        #if os(iOS)\n        placement == .menu\n        #else\n        true\n        #endif\n    }\n}\n\n\nIn the above example, search suggestions only render in iOS if the searchable modifier displays them in a menu. You might want to do this to render suggestions in your own list alongside your own search results when they would render in a list.\n\nSee Also\nControls and input\nvar buttonRepeatBehavior: ButtonRepeatBehavior\nWhether buttons with this associated environment should repeatedly trigger their actions on prolonged interactions.\nvar controlSize: ControlSize\nThe size to apply to controls within a view.\nvar controlActiveState: ControlActiveState\nThe active state of controls in the view.\nvar defaultWheelPickerItemHeight: CGFloat\nThe default height of an item in a wheel-style picker, such as a date picker.\nvar keyboardShortcut: KeyboardShortcut?\nThe keyboard shortcut that buttons in this environment will be triggered with.\nvar menuIndicatorVisibility: Visibility\nThe menu indicator visibility to apply to controls within a view.\nvar menuOrder: MenuOrder\nThe preferred order of items for menus presented from this view."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/searchpresentationtoolbarbehavior/automatic",
        "html": "See Also\nGetting toolbar behaviors\nstatic var avoidHidingContent: SearchPresentationToolbarBehavior\nThe avoid hiding content behavior."
    },
    {
        "title": "content",
        "url": "https://developer.apple.com/documentation/swiftui/searchsuggestionsplacement/content",
        "html": "See Also\nGetting placements\nstatic var automatic: SearchSuggestionsPlacement\nSearch suggestions render automatically based on the surrounding context.\nstatic var menu: SearchSuggestionsPlacement\nSearch suggestions render inside of a menu attached to the search field."
    },
    {
        "title": "avoidHidingContent",
        "url": "https://developer.apple.com/documentation/swiftui/searchpresentationtoolbarbehavior/avoidhidingcontent",
        "html": "Discussion\n\nIn iOS, this will avoid hiding content in the toolbar as it adapts to a search presentation. This has no effect on other platforms.\n\nSee Also\nGetting toolbar behaviors\nstatic var automatic: SearchPresentationToolbarBehavior\nThe automatic behavior."
    },
    {
        "title": "menu",
        "url": "https://developer.apple.com/documentation/swiftui/searchsuggestionsplacement/menu",
        "html": "See Also\nGetting placements\nstatic var automatic: SearchSuggestionsPlacement\nSearch suggestions render automatically based on the surrounding context.\nstatic var content: SearchSuggestionsPlacement\nSearch suggestions render in the main content of the app."
    },
    {
        "title": "enabled(upThrough:)",
        "url": "https://developer.apple.com/documentation/swiftui/presentationbackgroundinteraction/enabled(upthrough:)",
        "html": "Parameters\ndetent\n\nThe largest detent at which people can interact with the view behind the presentation.\n\nDiscussion\n\nAt detents larger than the one you specify, SwiftUI disables interaction.\n\nSee Also\nGetting interaction types\nstatic var automatic: PresentationBackgroundInteraction\nThe default background interaction for the presentation.\nstatic var disabled: PresentationBackgroundInteraction\nPeople can\u2019t interact with the view behind a presentation.\nstatic var enabled: PresentationBackgroundInteraction\nPeople can interact with the view behind a presentation."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/presentationbackgroundinteraction/automatic",
        "html": "See Also\nGetting interaction types\nstatic var disabled: PresentationBackgroundInteraction\nPeople can\u2019t interact with the view behind a presentation.\nstatic var enabled: PresentationBackgroundInteraction\nPeople can interact with the view behind a presentation.\nstatic func enabled(upThrough: PresentationDetent) -> PresentationBackgroundInteraction\nPeople can interact with the view behind a presentation up through a specified detent."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/searchsuggestionsplacement/automatic",
        "html": "Discussion\n\nThe behavior varies by platform:\n\nIn iOS and iPadOS, suggestions render as a list overlaying the main content of the app.\n\nIn macOS, suggestions render in a menu.\n\nIn tvOS, suggestions render as a row underneath the search field.\n\nIn watchOS, suggestions render in a list pushed onto the containing navigation stack.\n\nSee Also\nGetting placements\nstatic var content: SearchSuggestionsPlacement\nSearch suggestions render in the main content of the app.\nstatic var menu: SearchSuggestionsPlacement\nSearch suggestions render inside of a menu attached to the search field."
    },
    {
        "title": "resizes",
        "url": "https://developer.apple.com/documentation/swiftui/presentationcontentinteraction/resizes",
        "html": "See Also\nGetting interaction behaviors\nstatic var automatic: PresentationContentInteraction\nThe default swipe behavior for the presentation.\nstatic var scrolls: PresentationContentInteraction\nA behavior that prioritizes scrolling the content of a presentation when swiping, rather than resizing the presentation."
    },
    {
        "title": "custom(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/presentationdetent/custom(_:)",
        "html": "See Also\nCreating custom detents\nstatic func fraction(CGFloat) -> PresentationDetent\nA custom detent with the specified fractional height.\nstatic func height(CGFloat) -> PresentationDetent\nA custom detent with the specified height.\nstruct Context\nInformation that you use to calculate the presentation\u2019s height."
    },
    {
        "title": "fraction(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/presentationdetent/fraction(_:)",
        "html": "See Also\nCreating custom detents\nstatic func custom<D>(D.Type) -> PresentationDetent\nA custom detent with a calculated height.\nstatic func height(CGFloat) -> PresentationDetent\nA custom detent with the specified height.\nstruct Context\nInformation that you use to calculate the presentation\u2019s height."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/presentationcontentinteraction/automatic",
        "html": "See Also\nGetting interaction behaviors\nstatic var resizes: PresentationContentInteraction\nA behavior that prioritizes resizing a presentation when swiping, rather than scrolling the content of the presentation.\nstatic var scrolls: PresentationContentInteraction\nA behavior that prioritizes scrolling the content of a presentation when swiping, rather than resizing the presentation."
    },
    {
        "title": "popover",
        "url": "https://developer.apple.com/documentation/swiftui/presentationadaptation/popover",
        "html": "See Also\nGetting adaptation strategies\nstatic var automatic: PresentationAdaptation\nUse the default presentation adaptation.\nstatic var none: PresentationAdaptation\nDon\u2019t adapt for the size class, if possible.\nstatic var fullScreenCover: PresentationAdaptation\nPrefer a full-screen-cover appearance when adapting for size classes.\nstatic var sheet: PresentationAdaptation\nPrefer a sheet appearance when adapting for size classes."
    },
    {
        "title": "strokeBorder(_:lineWidth:antialiased:)",
        "url": "https://developer.apple.com/documentation/swiftui/insettableshape/strokeborder(_:linewidth:antialiased:)-6rs04",
        "html": "See Also\nSetting the stroke border characteristics\nfunc strokeBorder<S>(S, lineWidth: CGFloat, antialiased: Bool) -> StrokeBorderShapeView<Self, S, EmptyView>\nReturns a view that is the result of filling the lineWidth-sized border (aka inner stroke) of self with content. This is equivalent to insetting self by lineWidth / 2 and stroking the resulting shape with lineWidth as the line-width.\nfunc strokeBorder(lineWidth: CGFloat, antialiased: Bool) -> some View\nReturns a view that is the result of filling the lineWidth-sized border (aka inner stroke) of self with the foreground color. This is equivalent to insetting self by lineWidth / 2 and stroking the resulting shape with lineWidth as the line-width.\nfunc strokeBorder<S>(S, style: StrokeStyle, antialiased: Bool) -> StrokeBorderShapeView<Self, S, EmptyView>\nReturns a view that is the result of insetting self by style.lineWidth / 2, stroking the resulting shape with style, and then filling with content.\nfunc strokeBorder<S>(S, style: StrokeStyle, antialiased: Bool) -> some View\nReturns a view that is the result of insetting self by style.lineWidth / 2, stroking the resulting shape with style, and then filling with content.\nfunc strokeBorder(style: StrokeStyle, antialiased: Bool) -> some View\nReturns a view that is the result of insetting self by style.lineWidth / 2, stroking the resulting shape with style, and then filling with the foreground color."
    },
    {
        "title": "medium",
        "url": "https://developer.apple.com/documentation/swiftui/presentationdetent/medium",
        "html": "See Also\nGetting built-in detents\nstatic let large: PresentationDetent\nThe system detent for a sheet at full height."
    },
    {
        "title": "none",
        "url": "https://developer.apple.com/documentation/swiftui/presentationadaptation/none",
        "html": "See Also\nGetting adaptation strategies\nstatic var automatic: PresentationAdaptation\nUse the default presentation adaptation.\nstatic var fullScreenCover: PresentationAdaptation\nPrefer a full-screen-cover appearance when adapting for size classes.\nstatic var popover: PresentationAdaptation\nPrefer a popover appearance when adapting for size classes.\nstatic var sheet: PresentationAdaptation\nPrefer a sheet appearance when adapting for size classes."
    },
    {
        "title": "fullScreenCover",
        "url": "https://developer.apple.com/documentation/swiftui/presentationadaptation/fullscreencover",
        "html": "See Also\nGetting adaptation strategies\nstatic var automatic: PresentationAdaptation\nUse the default presentation adaptation.\nstatic var none: PresentationAdaptation\nDon\u2019t adapt for the size class, if possible.\nstatic var popover: PresentationAdaptation\nPrefer a popover appearance when adapting for size classes.\nstatic var sheet: PresentationAdaptation\nPrefer a sheet appearance when adapting for size classes."
    },
    {
        "title": "height(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/presentationdetent/height(_:)",
        "html": "See Also\nCreating custom detents\nstatic func custom<D>(D.Type) -> PresentationDetent\nA custom detent with a calculated height.\nstatic func fraction(CGFloat) -> PresentationDetent\nA custom detent with the specified fractional height.\nstruct Context\nInformation that you use to calculate the presentation\u2019s height."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/presentationadaptation/automatic",
        "html": "See Also\nGetting adaptation strategies\nstatic var none: PresentationAdaptation\nDon\u2019t adapt for the size class, if possible.\nstatic var fullScreenCover: PresentationAdaptation\nPrefer a full-screen-cover appearance when adapting for size classes.\nstatic var popover: PresentationAdaptation\nPrefer a popover appearance when adapting for size classes.\nstatic var sheet: PresentationAdaptation\nPrefer a sheet appearance when adapting for size classes."
    },
    {
        "title": "sidebar",
        "url": "https://developer.apple.com/documentation/swiftui/searchfieldplacement/sidebar",
        "html": "Discussion\n\nThe precise placement depends on the platform:\n\nIn iOS and iPadOS the search field appears in the section of the navigation bar associated with the sidebar.\n\nIn macOS, the search field appears inline with the sidebar\u2019s content.\n\nIf a sidebar isn\u2019t available, like when you apply the searchable modifier to a view other than a navigation split view, SwiftUI uses automatic placement instead.\n\nSee Also\nGetting a search field placement\nstatic let automatic: SearchFieldPlacement\nSwiftUI places the search field automatically.\nstatic let navigationBarDrawer: SearchFieldPlacement\nThe search field appears in the navigation bar.\nstatic func navigationBarDrawer(displayMode: SearchFieldPlacement.NavigationBarDrawerDisplayMode) -> SearchFieldPlacement\nThe search field appears in the navigation bar using the specified display mode.\nstatic let toolbar: SearchFieldPlacement\nThe search field appears in the toolbar."
    },
    {
        "title": "toolbar",
        "url": "https://developer.apple.com/documentation/swiftui/searchfieldplacement/toolbar",
        "html": "Discussion\n\nThe precise placement depends on the platform:\n\nIn iOS and watchOS, the search field appears below the navigation bar and is revealed by scrolling.\n\nIn iPadOS, the search field appears in the trailing navigation bar.\n\nIn macOS, the search field appears in the trailing toolbar.\n\nSee Also\nGetting a search field placement\nstatic let automatic: SearchFieldPlacement\nSwiftUI places the search field automatically.\nstatic let navigationBarDrawer: SearchFieldPlacement\nThe search field appears in the navigation bar.\nstatic func navigationBarDrawer(displayMode: SearchFieldPlacement.NavigationBarDrawerDisplayMode) -> SearchFieldPlacement\nThe search field appears in the navigation bar using the specified display mode.\nstatic let sidebar: SearchFieldPlacement\nThe search field appears in the sidebar of a navigation view."
    },
    {
        "title": "large",
        "url": "https://developer.apple.com/documentation/swiftui/presentationdetent/large",
        "html": "See Also\nGetting built-in detents\nstatic let medium: PresentationDetent\nThe system detent for a sheet that\u2019s approximately half the height of the screen, and is inactive in compact height."
    },
    {
        "title": "SearchFieldPlacement.NavigationBarDrawerDisplayMode",
        "url": "https://developer.apple.com/documentation/swiftui/searchfieldplacement/navigationbardrawerdisplaymode",
        "html": "Topics\nGetting display modes\nstatic let always: SearchFieldPlacement.NavigationBarDrawerDisplayMode\nAlways display the search field regardless of the scroll activity.\nstatic let automatic: SearchFieldPlacement.NavigationBarDrawerDisplayMode\nEnable hiding the search field in response to scrolling.\nRelationships\nConforms To\nSendable"
    },
    {
        "title": "EnvironmentObject.Wrapper",
        "url": "https://developer.apple.com/documentation/swiftui/environmentobject/wrapper",
        "html": "Topics\nGetting a binding value\nsubscript<Subject>(dynamicMember _: ReferenceWritableKeyPath<ObjectType, Subject>) -> Binding<Subject>\nReturns a binding to the resulting value of a given key path.\nSee Also\nGetting the value\nvar wrappedValue: ObjectType\nThe underlying value referenced by the environment object.\nvar projectedValue: EnvironmentObject<ObjectType>.Wrapper\nA projection of the environment object that creates bindings to its properties using dynamic member lookup."
    },
    {
        "title": "update()",
        "url": "https://developer.apple.com/documentation/swiftui/dynamicproperty/update()-29hjo",
        "html": "Required Default implementation provided.\n\nDiscussion\n\nSwiftUI calls this function before rendering a view\u2019s body to ensure the view has the most recent value.\n\nDefault Implementations\nDynamicProperty Implementations\nfunc update()\nUpdates the underlying value of the stored value."
    },
    {
        "title": "main()",
        "url": "https://developer.apple.com/documentation/swiftui/widgetbundle/main()",
        "html": "Overview\n\nBecause you precede your WidgetBundle conformer\u2019s declaration with the @main attribute, the system calls your widget bundle\u2019s main() method to launch the widget bundle. SwiftUI provides a default implementation of the method that manages the launch process in a platform-appropriate way.\n\nSee Also\nRunning a widget bundle\ninit()\nCreates a widget bundle using the bundle\u2019s body as its content.\n\nRequired"
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/widgetbundle/init()",
        "html": "Required\n\nSee Also\nRunning a widget bundle\nstatic func main()\nInitializes and runs the widget bundle."
    },
    {
        "title": "projectedValue",
        "url": "https://developer.apple.com/documentation/swiftui/environmentobject/projectedvalue",
        "html": "Discussion\n\nUse the projected value to pass an environment object down a view hierarchy.\n\nSee Also\nGetting the value\nvar wrappedValue: ObjectType\nThe underlying value referenced by the environment object.\nstruct Wrapper\nA wrapper of the underlying environment object that can create bindings to its properties using dynamic member lookup."
    },
    {
        "title": "ObservedObject.Wrapper",
        "url": "https://developer.apple.com/documentation/swiftui/observedobject/wrapper",
        "html": "Topics\nSubscripts\nsubscript<Subject>(dynamicMember _: ReferenceWritableKeyPath<ObjectType, Subject>) -> Binding<Subject>\nGets a binding to the value of a specified key path.\nSee Also\nGetting the value\nvar wrappedValue: ObjectType\nThe underlying value that the observed object references.\nvar projectedValue: ObservedObject<ObjectType>.Wrapper\nA projection of the observed object that creates bindings to its properties."
    },
    {
        "title": "projectedValue",
        "url": "https://developer.apple.com/documentation/swiftui/observedobject/projectedvalue",
        "html": "Discussion\n\nUse the projected value to get a Binding to a property of an observed object. To access the projected value, prefix the property variable with a dollar sign ($). For example, you can get a binding to a model\u2019s isEnabled Boolean so that a Toggle can control its value:\n\nstruct MySubView: View {\n    @ObservedObject var model: DataModel\n\n\n    var body: some View {\n        Toggle(\"Enabled\", isOn: $model.isEnabled)\n    }\n}\n\nSee Also\nGetting the value\nvar wrappedValue: ObjectType\nThe underlying value that the observed object references.\nstruct Wrapper\nA wrapper of the underlying observable object that can create bindings to its properties."
    },
    {
        "title": "projectedValue",
        "url": "https://developer.apple.com/documentation/swiftui/stateobject/projectedvalue",
        "html": "Discussion\n\nUse the projected value to get a Binding to a property of a state object. To access the projected value, prefix the property name with a dollar sign ($). For example, you can get a binding to a model\u2019s isEnabled Boolean so that a Toggle can control the value:\n\nstruct MyView: View {\n    @StateObject private var model = DataModel()\n\n\n    var body: some View {\n        Toggle(\"Enabled\", isOn: $model.isEnabled)\n    }\n}\n\nSee Also\nGetting the value\nvar wrappedValue: ObjectType\nThe underlying value referenced by the state object."
    },
    {
        "title": "init(initialValue:)",
        "url": "https://developer.apple.com/documentation/swiftui/observedobject/init(initialvalue:)",
        "html": "Parameters\ninitialValue\n\nAn initial value.\n\nDiscussion\n\nThis initializer has the same behavior as the init(wrappedValue:) initializer. See that initializer for more information.\n\nSee Also\nCreating an observed object\ninit(wrappedValue: ObjectType)\nCreates an observed object with an initial wrapped value."
    },
    {
        "title": "init(get:set:)",
        "url": "https://developer.apple.com/documentation/swiftui/binding/init(get:set:)-6g3d5",
        "html": "Parameters\nget\n\nA closure to retrieve the binding value. The closure has no parameters, and returns a value.\n\nset\n\nA closure to set the binding value. The closure has the following parameters:\n\nnewValue: The new value of the binding value.\n\ntransaction: The transaction to apply when setting a new value.\n\nSee Also\nCreating a binding\ninit?(Binding<Value?>)\nCreates a binding by projecting the base value to an unwrapped value.\ninit<V>(Binding<V>)\nCreates a binding by projecting the base value to an optional value.\ninit<V>(Binding<V>)\nCreates a binding by projecting the base value to a hashable value.\ninit(projectedValue: Binding<Value>)\nCreates a binding from the value of another binding.\ninit(get: () -> Value, set: (Value) -> Void)\nCreates a binding with closures that read and write the binding value.\nstatic func constant(Value) -> Binding<Value>\nCreates a binding with an immutable value."
    },
    {
        "title": "wrappedValue",
        "url": "https://developer.apple.com/documentation/swiftui/observedobject/wrappedvalue",
        "html": "Discussion\n\nThe wrapped value property provides primary access to the observed object\u2019s data. However, you don\u2019t typically access it by name. Instead, SwiftUI accesses this property for you when you refer to the variable that you create with the @ObservedObject attribute.\n\nstruct MySubView: View {\n    @ObservedObject var model: DataModel\n\n\n    var body: some View {\n        Text(model.name) // Reads name from model's wrapped value.\n    }\n}\n\n\nWhen you change a wrapped value, you can access the new value immediately. However, SwiftUI updates views that display the value asynchronously, so the interface might not update immediately.\n\nSee Also\nGetting the value\nvar projectedValue: ObservedObject<ObjectType>.Wrapper\nA projection of the observed object that creates bindings to its properties.\nstruct Wrapper\nA wrapper of the underlying observable object that can create bindings to its properties."
    },
    {
        "title": "init(wrappedValue:)",
        "url": "https://developer.apple.com/documentation/swiftui/observedobject/init(wrappedvalue:)",
        "html": "Parameters\nwrappedValue\n\nAn initial value for the observable object.\n\nDiscussion\n\nDon\u2019t call this initializer directly. Instead, declare an input to a view with the @ObservedObject attribute, and pass a value to this input when you instantiate the view. Unlike a StateObject which manages data storage, you use an observed object to refer to storage that you manage elsewhere, as in the following example:\n\nclass DataModel: ObservableObject {\n    @Published var name = \"Some Name\"\n    @Published var isEnabled = false\n}\n\n\nstruct MyView: View {\n    @StateObject private var model = DataModel()\n\n\n    var body: some View {\n        Text(model.name)\n        MySubView(model: model)\n    }\n}\n\n\nstruct MySubView: View {\n    @ObservedObject var model: DataModel\n\n\n    var body: some View {\n        Toggle(\"Enabled\", isOn: $model.isEnabled)\n    }\n}\n\n\nExplicitly calling the observed object initializer in MySubView would behave correctly, but would needlessly recreate the same observed object instance every time SwiftUI calls the view\u2019s initializer to redraw the view.\n\nSee Also\nCreating an observed object\ninit(initialValue: ObjectType)\nCreates an observed object with an initial value."
    },
    {
        "title": "wrappedValue",
        "url": "https://developer.apple.com/documentation/swiftui/binding/wrappedvalue",
        "html": "Discussion\n\nThis property provides primary access to the value\u2019s data. However, you don\u2019t access wrappedValue directly. Instead, you use the property variable created with the Binding attribute. In the following code example, the binding variable isPlaying returns the value of wrappedValue:\n\nstruct PlayButton: View {\n    @Binding var isPlaying: Bool\n\n\n    var body: some View {\n        Button(isPlaying ? \"Pause\" : \"Play\") {\n            isPlaying.toggle()\n        }\n    }\n}\n\n\nWhen a mutable binding value changes, the new value is immediately available. However, updates to a view displaying the value happens asynchronously, so the view may not show the change immediately.\n\nSee Also\nGetting the value\nvar projectedValue: Binding<Value>\nA projection of the binding value that returns a binding.\nsubscript<Subject>(dynamicMember _: WritableKeyPath<Value, Subject>) -> Binding<Subject>\nReturns a binding to the resulting value of a given key path."
    },
    {
        "title": "constant(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/binding/constant(_:)",
        "html": "Parameters\nvalue\n\nAn immutable value.\n\nDiscussion\n\nUse this method to create a binding to a value that cannot change. This can be useful when using a PreviewProvider to see how a view represents different values.\n\n// Example of binding to an immutable value.\nPlayButton(isPlaying: Binding.constant(true))\n\nSee Also\nCreating a binding\ninit?(Binding<Value?>)\nCreates a binding by projecting the base value to an unwrapped value.\ninit<V>(Binding<V>)\nCreates a binding by projecting the base value to an optional value.\ninit<V>(Binding<V>)\nCreates a binding by projecting the base value to a hashable value.\ninit(projectedValue: Binding<Value>)\nCreates a binding from the value of another binding.\ninit(get: () -> Value, set: (Value, Transaction) -> Void)\nCreates a binding with a closure that reads from the binding value, and a closure that applies a transaction when writing to the binding value.\ninit(get: () -> Value, set: (Value) -> Void)\nCreates a binding with closures that read and write the binding value."
    },
    {
        "title": "projectedValue",
        "url": "https://developer.apple.com/documentation/swiftui/binding/projectedvalue",
        "html": "Discussion\n\nUse the projected value to pass a binding value down a view hierarchy. To get the projectedValue, prefix the property variable with $. For example, in the following code example PlayerView projects a binding of the state property isPlaying to the PlayButton view using $isPlaying.\n\nstruct PlayerView: View {\n    var episode: Episode\n    @State private var isPlaying: Bool = false\n\n\n    var body: some View {\n        VStack {\n            Text(episode.title)\n                .foregroundStyle(isPlaying ? .primary : .secondary)\n            PlayButton(isPlaying: $isPlaying)\n        }\n    }\n}\n\nSee Also\nGetting the value\nvar wrappedValue: Value\nThe underlying value referenced by the binding variable.\nsubscript<Subject>(dynamicMember _: WritableKeyPath<Value, Subject>) -> Binding<Subject>\nReturns a binding to the resulting value of a given key path."
    },
    {
        "title": "id",
        "url": "https://developer.apple.com/documentation/swiftui/binding/id",
        "html": "See Also\nManaging changes\nfunc animation(Animation?) -> Binding<Value>\nSpecifies an animation to perform when the binding value changes.\nfunc transaction(Transaction) -> Binding<Value>\nSpecifies a transaction for the binding.\nvar transaction: Transaction\nThe binding\u2019s transaction."
    },
    {
        "title": "transaction(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/binding/transaction(_:)",
        "html": "Parameters\ntransaction\n\nAn instance of a Transaction.\n\nReturn Value\n\nA new binding.\n\nSee Also\nManaging changes\nvar id: Value.ID\nThe stable identity of the entity associated with this instance, corresponding to the id of the binding\u2019s wrapped value.\nAvailable when Value conforms to Identifiable.\nfunc animation(Animation?) -> Binding<Value>\nSpecifies an animation to perform when the binding value changes.\nvar transaction: Transaction\nThe binding\u2019s transaction."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/environment/init(_:)-7pint",
        "html": "Parameters\nobjectType\n\nThe type of the Observable object to read from the environment.\n\nDiscussion\n\nImportant\n\nThis initializer only accepts objects conforming to the Observable protocol. For reading environment objects that conform to ObservableObject, use EnvironmentObject instead.\n\nDon\u2019t call this initializer directly. Instead, declare a property with the Environment property wrapper, passing the object\u2019s type to the wrapper (using this syntax, the object type can be omitted from the end of property declaration):\n\n@Observable final class Profile { ... }\n\n\nstruct MyView: View {\n    @Environment(Profile.self) private var currentProfile\n\n\n    // ...\n}\n\n\nWarning\n\nIf no object has been set in the view\u2019s environment, this property will issue a fatal error when accessed. To safely check for the existence of an environment object, initialize the environment property with an optional object type instead.\n\nSwiftUI automatically updates any parts of MyView that depend on the property when the associated environment object changes.\n\nYou can\u2019t modify the environment object using a property like this. Instead, use the environment(_:) view modifier on a view to set an object for a view hierarchy.\n\nSee Also\nCreating an environment instance\ninit(KeyPath<EnvironmentValues, Value>)\nCreates an environment property to read the specified key path.\ninit<T>(T.Type)\nCreates an environment property to read an observable object from the environment, returning nil if no corresponding object has been set in the current view\u2019s environment."
    },
    {
        "title": "Gauge",
        "url": "https://developer.apple.com/documentation/SwiftUI/Gauge",
        "html": "Overview\n\nA gauge is a view that shows a current level of a value in relation to a specified finite capacity, very much like a fuel gauge in an automobile. Gauge displays are configurable; they can show any combination of the gauge\u2019s current value, the range the gauge can display, and a label describing the purpose of the gauge itself.\n\nIn its most basic form, a gauge displays a single value along the path of the gauge mapped into a range from 0 to 100 percent. The example below sets the gauge\u2019s indicator to a position 40 percent along the gauge\u2019s path:\n\nstruct SimpleGauge: View {\n    @State private var batteryLevel = 0.4\n\n\n    var body: some View {\n        Gauge(value: batteryLevel) {\n            Text(\"Battery Level\")\n        }\n    }\n}\n\n\nYou can make a gauge more descriptive by describing its purpose, showing its current value and its start and end values. This example shows the gauge variant that accepts a range and adds labels using multiple trailing closures describing the current value and the minimum and maximum values of the gauge:\n\nstruct LabeledGauge: View {\n    @State private var current = 67.0\n    @State private var minValue = 0.0\n    @State private var maxValue = 170.0\n\n\n    var body: some View {\n        Gauge(value: current, in: minValue...maxValue) {\n            Text(\"BPM\")\n        } currentValueLabel: {\n            Text(\"\\(Int(current))\")\n        } minimumValueLabel: {\n            Text(\"\\(Int(minValue))\")\n        } maximumValueLabel: {\n            Text(\"\\(Int(maxValue))\")\n        }\n    }\n}\n\n\nAs shown above, the default style for gauges is a linear, continuous bar with an indicator showing the current value, and optional labels describing the gauge\u2019s purpose, current, minimum, and maximum values.\n\nNote\n\nSome visual presentations of Gauge don\u2019t display all the labels required by the API. However, the accessibility system does use the label content and you should use these labels to fully describe the gauge for accessibility users.\n\nTo change the style of a gauge, use the gaugeStyle(_:) view modifier and supply an initializer for a specific gauge style. For example, to display the same gauge in a circular style, apply the circular style to the view:\n\nstruct LabeledGauge: View {\n    @State private var current = 67.0\n    @State private var minValue = 0.0\n    @State private var maxValue = 170.0\n\n\n    var body: some View {\n        Gauge(value: current, in: minValue...maxValue) {\n            Text(\"BPM\")\n        } currentValueLabel: {\n            Text(\"\\(Int(current))\")\n        } minimumValueLabel: {\n            Text(\"\\(Int(minValue))\")\n        } maximumValueLabel: {\n            Text(\"\\(Int(maxValue))\")\n        }\n        .gaugeStyle(.circular)\n    }\n}\n\n\nTo style elements of a gauge\u2019s presentation, you apply view modifiers to the elements that you want to change. In the example below, the current value, minimum and maximum value labels have custom colors:\n\nstruct StyledGauge: View {\n    @State private var current = 67.0\n    @State private var minValue = 50.0\n    @State private var maxValue = 170.0\n\n\n    var body: some View {\n        Gauge(value: current, in: minValue...maxValue) {\n            Image(systemName: \"heart.fill\")\n                .foregroundColor(.red)\n        } currentValueLabel: {\n            Text(\"\\(Int(current))\")\n                .foregroundColor(Color.green)\n        } minimumValueLabel: {\n            Text(\"\\(Int(minValue))\")\n                .foregroundColor(Color.green)\n        } maximumValueLabel: {\n            Text(\"\\(Int(maxValue))\")\n                .foregroundColor(Color.red)\n        }\n        .gaugeStyle(.circular)\n    }\n}\n\n\nYou can further style a gauge\u2019s appearance by supplying a tint color or a gradient to the style\u2019s initializer. The following example shows the effect of a gradient in the initialization of a CircularGaugeStyle gauge with a colorful gradient across the length of the gauge:\n\nstruct StyledGauge: View {\n    @State private var current = 67.0\n    @State private var minValue = 50.0\n    @State private var maxValue = 170.0\n    let gradient = Gradient(colors: [.green, .yellow, .orange, .red])\n\n\n    var body: some View {\n        Gauge(value: current, in: minValue...maxValue) {\n            Image(systemName: \"heart.fill\")\n                .foregroundColor(.red)\n        } currentValueLabel: {\n            Text(\"\\(Int(current))\")\n                .foregroundColor(Color.green)\n        } minimumValueLabel: {\n            Text(\"\\(Int(minValue))\")\n                .foregroundColor(Color.green)\n        } maximumValueLabel: {\n            Text(\"\\(Int(maxValue))\")\n                .foregroundColor(Color.red)\n        }\n        .gaugeStyle(CircularGaugeStyle(tint: gradient))\n    }\n}\n\n\nTopics\nCreating a gauge\ninit<V>(value: V, in: ClosedRange<V>, label: () -> Label)\nCreates a gauge showing a value within a range and describes the gauge\u2019s purpose and current value.\ninit<V>(value: V, in: ClosedRange<V>, label: () -> Label, currentValueLabel: () -> CurrentValueLabel)\nCreates a gauge showing a value within a range and that describes the gauge\u2019s purpose and current value.\ninit<V>(value: V, in: ClosedRange<V>, label: () -> Label, currentValueLabel: () -> CurrentValueLabel, markedValueLabels: () -> MarkedValueLabels)\nCreates a gauge representing a value within a range.\ninit<V>(value: V, in: ClosedRange<V>, label: () -> Label, currentValueLabel: () -> CurrentValueLabel, minimumValueLabel: () -> BoundsLabel, maximumValueLabel: () -> BoundsLabel)\nCreates a gauge showing a value within a range and describes the gauge\u2019s current, minimum, and maximum values.\ninit<V>(value: V, in: ClosedRange<V>, label: () -> Label, currentValueLabel: () -> CurrentValueLabel, minimumValueLabel: () -> BoundsLabel, maximumValueLabel: () -> BoundsLabel, markedValueLabels: () -> MarkedValueLabels)\nCreates a gauge representing a value within a range.\nRelationships\nConforms To\nView\nSee Also\nIndicating a value\nfunc gaugeStyle<S>(S) -> some View\nSets the style for gauges within this view.\nstruct ProgressView\nA view that shows the progress toward completion of a task.\nfunc progressViewStyle<S>(S) -> some View\nSets the style for progress views in this view.\nstruct DefaultDateProgressLabel\nThe default type of the current value label when used by a date-relative progress view."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/environment/init(_:)-8slkf",
        "html": "Parameters\nobjectType\n\nThe type of the Observable object to read from the environment.\n\nDiscussion\n\nImportant\n\nThis initializer only accepts objects conforming to the Observable protocol. For reading environment objects that conform to ObservableObject, use EnvironmentObject instead.\n\nDon\u2019t call this initializer directly. Instead, declare an optional property with the Environment property wrapper, passing the object\u2019s type to the wrapper:\n\n@Observable final class Profile { ... }\n\n\nstruct MyView: View {\n    @Environment(Profile.self) private var currentProfile: Profile?\n\n\n    // ...\n}\n\n\nIf no object has been set in the view\u2019s environment, this property will return nil as its wrapped value.\n\nSwiftUI automatically updates any parts of MyView that depend on the property when the associated environment object changes.\n\nYou can\u2019t modify the environment object using a property like this. Instead, use the environment(_:) view modifier on a view to set an object for a view hierarchy.\n\nSee Also\nCreating an environment instance\ninit(KeyPath<EnvironmentValues, Value>)\nCreates an environment property to read the specified key path.\ninit(Value.Type)\nCreates an environment property to read an observable object from the environment."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/environment/init(_:)-8fge3",
        "html": "Parameters\nkeyPath\n\nA key path to a specific resulting value.\n\nDiscussion\n\nDon\u2019t call this initializer directly. Instead, declare a property with the Environment property wrapper, and provide the key path of the environment value that the property should reflect:\n\nstruct MyView: View {\n    @Environment(\\.colorScheme) var colorScheme: ColorScheme\n\n\n    // ...\n}\n\n\nSwiftUI automatically updates any parts of MyView that depend on the property when the associated environment value changes. You can\u2019t modify the environment value using a property like this. Instead, use the environment(_:_:) view modifier on a view to set a value for a view hierarchy.\n\nSee Also\nCreating an environment instance\ninit(Value.Type)\nCreates an environment property to read an observable object from the environment.\ninit<T>(T.Type)\nCreates an environment property to read an observable object from the environment, returning nil if no corresponding object has been set in the current view\u2019s environment."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/binding/init(_:)-5z9t9",
        "html": "Parameters\nbase\n\nA value to project to an unwrapped value.\n\nReturn Value\n\nA new binding or nil when base is nil.\n\nSee Also\nCreating a binding\ninit<V>(Binding<V>)\nCreates a binding by projecting the base value to an optional value.\ninit<V>(Binding<V>)\nCreates a binding by projecting the base value to a hashable value.\ninit(projectedValue: Binding<Value>)\nCreates a binding from the value of another binding.\ninit(get: () -> Value, set: (Value, Transaction) -> Void)\nCreates a binding with a closure that reads from the binding value, and a closure that applies a transaction when writing to the binding value.\ninit(get: () -> Value, set: (Value) -> Void)\nCreates a binding with closures that read and write the binding value.\nstatic func constant(Value) -> Binding<Value>\nCreates a binding with an immutable value."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/binding/init(_:)-6krsi",
        "html": "Parameters\nbase\n\nA value to project to an optional value.\n\nSee Also\nCreating a binding\ninit?(Binding<Value?>)\nCreates a binding by projecting the base value to an unwrapped value.\ninit<V>(Binding<V>)\nCreates a binding by projecting the base value to a hashable value.\ninit(projectedValue: Binding<Value>)\nCreates a binding from the value of another binding.\ninit(get: () -> Value, set: (Value, Transaction) -> Void)\nCreates a binding with a closure that reads from the binding value, and a closure that applies a transaction when writing to the binding value.\ninit(get: () -> Value, set: (Value) -> Void)\nCreates a binding with closures that read and write the binding value.\nstatic func constant(Value) -> Binding<Value>\nCreates a binding with an immutable value."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/binding/init(_:)-86mwe",
        "html": "Parameters\nbase\n\nA Hashable value to project to an AnyHashable value.\n\nSee Also\nCreating a binding\ninit?(Binding<Value?>)\nCreates a binding by projecting the base value to an unwrapped value.\ninit<V>(Binding<V>)\nCreates a binding by projecting the base value to an optional value.\ninit(projectedValue: Binding<Value>)\nCreates a binding from the value of another binding.\ninit(get: () -> Value, set: (Value, Transaction) -> Void)\nCreates a binding with a closure that reads from the binding value, and a closure that applies a transaction when writing to the binding value.\ninit(get: () -> Value, set: (Value) -> Void)\nCreates a binding with closures that read and write the binding value.\nstatic func constant(Value) -> Binding<Value>\nCreates a binding with an immutable value."
    },
    {
        "title": "init(get:set:)",
        "url": "https://developer.apple.com/documentation/swiftui/binding/init(get:set:)-7ufcp",
        "html": "Parameters\nget\n\nA closure that retrieves the binding value. The closure has no parameters, and returns a value.\n\nset\n\nA closure that sets the binding value. The closure has the following parameter:\n\nnewValue: The new value of the binding value.\n\nSee Also\nCreating a binding\ninit?(Binding<Value?>)\nCreates a binding by projecting the base value to an unwrapped value.\ninit<V>(Binding<V>)\nCreates a binding by projecting the base value to an optional value.\ninit<V>(Binding<V>)\nCreates a binding by projecting the base value to a hashable value.\ninit(projectedValue: Binding<Value>)\nCreates a binding from the value of another binding.\ninit(get: () -> Value, set: (Value, Transaction) -> Void)\nCreates a binding with a closure that reads from the binding value, and a closure that applies a transaction when writing to the binding value.\nstatic func constant(Value) -> Binding<Value>\nCreates a binding with an immutable value."
    },
    {
        "title": "init(projectedValue:)",
        "url": "https://developer.apple.com/documentation/swiftui/bindable/init(projectedvalue:)",
        "html": "See Also\nCreating a bindable value\ninit(Value)\nCreates a bindable object from an observable object.\nAvailable when Value conforms to Observable.\ninit(wrappedValue: Value)\nCreates a bindable object from an observable object.\nAvailable when Value conforms to Observable."
    },
    {
        "title": "projectedValue",
        "url": "https://developer.apple.com/documentation/swiftui/bindable/projectedvalue",
        "html": "See Also\nGetting the value\nvar wrappedValue: Value\nThe wrapped object.\nsubscript<Subject>(dynamicMember _: ReferenceWritableKeyPath<Value, Subject>) -> Binding<Subject>\nReturns a binding to the value of a given key path."
    },
    {
        "title": "init(projectedValue:)",
        "url": "https://developer.apple.com/documentation/swiftui/binding/init(projectedvalue:)",
        "html": "See Also\nCreating a binding\ninit?(Binding<Value?>)\nCreates a binding by projecting the base value to an unwrapped value.\ninit<V>(Binding<V>)\nCreates a binding by projecting the base value to an optional value.\ninit<V>(Binding<V>)\nCreates a binding by projecting the base value to a hashable value.\ninit(get: () -> Value, set: (Value, Transaction) -> Void)\nCreates a binding with a closure that reads from the binding value, and a closure that applies a transaction when writing to the binding value.\ninit(get: () -> Value, set: (Value) -> Void)\nCreates a binding with closures that read and write the binding value.\nstatic func constant(Value) -> Binding<Value>\nCreates a binding with an immutable value."
    },
    {
        "title": "subscript(dynamicMember:)",
        "url": "https://developer.apple.com/documentation/swiftui/binding/subscript(dynamicmember:)",
        "html": "Parameters\nkeyPath\n\nA key path to a specific resulting value.\n\nReturn Value\n\nA new binding.\n\nSee Also\nGetting the value\nvar wrappedValue: Value\nThe underlying value referenced by the binding variable.\nvar projectedValue: Binding<Value>\nA projection of the binding value that returns a binding."
    },
    {
        "title": "Text",
        "url": "https://developer.apple.com/documentation/SwiftUI/Text",
        "html": "Overview\n\nA text view draws a string in your app\u2019s user interface using a body font that\u2019s appropriate for the current platform. You can choose a different standard font, like title or caption, using the font(_:) view modifier.\n\nText(\"Hamlet\")\n    .font(.title)\n\n\nIf you need finer control over the styling of the text, you can use the same modifier to configure a system font or choose a custom font. You can also apply view modifiers like bold() or italic() to further adjust the formatting.\n\nText(\"by William Shakespeare\")\n    .font(.system(size: 12, weight: .light, design: .serif))\n    .italic()\n\n\nTo apply styling within specific portions of the text, you can create the text view from an AttributedString, which in turn allows you to use Markdown to style runs of text. You can mix string attributes and SwiftUI modifiers, with the string attributes taking priority.\n\nlet attributedString = try! AttributedString(\n    markdown: \"_Hamlet_ by William Shakespeare\")\n\n\nvar body: some View {\n    Text(attributedString)\n        .font(.system(size: 12, weight: .light, design: .serif))\n}\n\n\nA text view always uses exactly the amount of space it needs to display its rendered contents, but you can affect the view\u2019s layout. For example, you can use the frame(width:height:alignment:) modifier to propose specific dimensions to the view. If the view accepts the proposal but the text doesn\u2019t fit into the available space, the view uses a combination of wrapping, tightening, scaling, and truncation to make it fit. With a width of 100 points but no constraint on the height, a text view might wrap a long string:\n\nText(\"To be, or not to be, that is the question:\")\n    .frame(width: 100)\n\n\nUse modifiers like lineLimit(_:), allowsTightening(_:), minimumScaleFactor(_:), and truncationMode(_:) to configure how the view handles space constraints. For example, combining a fixed width and a line limit of 1 results in truncation for text that doesn\u2019t fit in that space:\n\nText(\"Brevity is the soul of wit.\")\n    .frame(width: 100)\n    .lineLimit(1)\n\n\nLocalizing strings\n\nIf you initialize a text view with a string literal, the view uses the init(_:tableName:bundle:comment:) initializer, which interprets the string as a localization key and searches for the key in the table you specify, or in the default table if you don\u2019t specify one.\n\nText(\"pencil\") // Searches the default table in the main bundle.\n\n\nFor an app localized in both English and Spanish, the above view displays \u201cpencil\u201d and \u201cl\u00e1piz\u201d for English and Spanish users, respectively. If the view can\u2019t perform localization, it displays the key instead. For example, if the same app lacks Danish localization, the view displays \u201cpencil\u201d for users in that locale. Similarly, an app that lacks any localization information displays \u201cpencil\u201d in any locale.\n\nTo explicitly bypass localization for a string literal, use the init(verbatim:) initializer.\n\nText(verbatim: \"pencil\") // Displays the string \"pencil\" in any locale.\n\n\nIf you intialize a text view with a variable value, the view uses the init(_:) initializer, which doesn\u2019t localize the string. However, you can request localization by creating a LocalizedStringKey instance first, which triggers the init(_:tableName:bundle:comment:) initializer instead:\n\n// Don't localize a string variable...\nText(writingImplement)\n\n\n// ...unless you explicitly convert it to a localized string key.\nText(LocalizedStringKey(writingImplement))\n\n\nWhen localizing a string variable, you can use the default table by omitting the optional initialization parameters \u2014 as in the above example \u2014 just like you might for a string literal.\n\nTopics\nCreating a text view from a string\ninit(LocalizedStringKey, tableName: String?, bundle: Bundle?, comment: StaticString?)\nCreates a text view that displays localized content identified by a key.\ninit(LocalizedStringResource)\nCreates a text view that displays a localized string resource.\ninit<S>(S)\nCreates a text view that displays a stored string without localization.\ninit(verbatim: String)\nCreates a text view that displays a string literal without localization.\nCreating a text view from an attributed string\ninit(AttributedString)\nCreates a text view that displays styled attributed content.\nCreating a text view for a date\ninit(ClosedRange<Date>)\nCreates an instance that displays a localized range between two dates.\ninit(DateInterval)\nCreates an instance that displays a localized time interval.\ninit(Date, style: Text.DateStyle)\nCreates an instance that displays localized dates and times using a specific style.\nCreating a text view with formatting\ninit<F>(F.FormatInput, format: F)\nCreates a text view that displays the formatted representation of a nonstring type supported by a corresponding format style.\ninit<Subject>(Subject, formatter: Formatter)\nCreates a text view that displays the formatted representation of a reference-convertible value.\ninit<Subject>(Subject, formatter: Formatter)\nCreates a text view that displays the formatted representation of a Foundation object.\nCreating a text view from an image\ninit(Image)\nCreates an instance that wraps an Image, suitable for concatenating with other Text\nCreating a text view with a timer\ninit(timerInterval: ClosedRange<Date>, pauseTime: Date?, countsDown: Bool, showsHours: Bool)\nCreates an instance that displays a timer counting within the provided interval.\nChoosing a font\nfunc font(Font?) -> Text\nSets the default font for text in the view.\nfunc fontWeight(Font.Weight?) -> Text\nSets the font weight of the text.\nfunc fontDesign(Font.Design?) -> Text\nSets the font design of the text.\nfunc fontWidth(Font.Width?) -> Text\nSets the font width of the text.\nStyling the view\u2019s text\nfunc foregroundStyle<S>(S) -> Text\nSets the style of the text displayed by this view.\nfunc bold() -> Text\nApplies a bold font weight to the text.\nfunc bold(Bool) -> Text\nApplies a bold font weight to the text.\nfunc italic() -> Text\nApplies italics to the text.\nfunc italic(Bool) -> Text\nApplies italics to the text.\nfunc strikethrough(Bool, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies a strikethrough to the text.\nfunc underline(Bool, color: Color?) -> Text\nApplies an underline to the text.\nfunc underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text\nApplies an underline to the text.\nfunc monospaced(Bool) -> Text\nModifies the font of the text to use the fixed-width variant of the current font, if possible.\nfunc monospacedDigit() -> Text\nModifies the text view\u2019s font to use fixed-width digits, while leaving other characters proportionally spaced.\nfunc kerning(CGFloat) -> Text\nSets the spacing, or kerning, between characters.\nfunc tracking(CGFloat) -> Text\nSets the tracking for the text.\nfunc baselineOffset(CGFloat) -> Text\nSets the vertical offset for the text relative to its baseline.\nenum Case\nA scheme for transforming the capitalization of characters within text.\nstruct DateStyle\nA predefined style used to display a Date.\nstruct LineStyle\nDescription of the style used to draw the line for StrikethroughStyleAttribute and UnderlineStyleAttribute.\nFitting text into available space\nfunc textScale(Text.Scale, isEnabled: Bool) -> Text\nApplies a text scale to the text.\nstruct Scale\nDefines text scales\nenum TruncationMode\nThe type of truncation to apply to a line of text when it\u2019s too long to fit in the available space.\nLocalizing text\nfunc typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> Text\nSpecifies the language for typesetting.\nfunc typesettingLanguage(Locale.Language, isEnabled: Bool) -> Text\nSpecifies the language for typesetting.\nConfiguring voiceover\nfunc speechAdjustedPitch(Double) -> Text\nRaises or lowers the pitch of spoken text.\nfunc speechAlwaysIncludesPunctuation(Bool) -> Text\nSets whether VoiceOver should always speak all punctuation in the text view.\nfunc speechAnnouncementsQueued(Bool) -> Text\nControls whether to queue pending announcements behind existing speech rather than interrupting speech in progress.\nfunc speechSpellsOutCharacters(Bool) -> Text\nSets whether VoiceOver should speak the contents of the text view character by character.\nProviding accessibility information\nfunc accessibilityHeading(AccessibilityHeadingLevel) -> Text\nSets the accessibility level of this heading.\nfunc accessibilityLabel<S>(S) -> Text\nAdds a label to the view that describes its contents.\nfunc accessibilityLabel(Text) -> Text\nAdds a label to the view that describes its contents.\nfunc accessibilityLabel(LocalizedStringKey) -> Text\nAdds a label to the view that describes its contents.\nfunc accessibilityTextContentType(AccessibilityTextContentType) -> Text\nSets an accessibility text content type.\nCombining text views\nstatic func + (Text, Text) -> Text\nConcatenates the text in two text views in a new text view.\nDeprecated symbols\nfunc foregroundColor(Color?) -> Text\nSets the color of the text displayed by this view.\nDeprecated\nRelationships\nConforms To\nEquatable\nSendable\nView\nSee Also\nDisplaying text\nstruct Label\nA standard label for user interface items, consisting of an icon with a title.\nfunc labelStyle<S>(S) -> some View\nSets the style for labels within this view."
    },
    {
        "title": "init(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbartitlemenu/init(content:)",
        "html": "Parameters\ncontent\n\nThe content of the toolbar title menu.\n\nSee Also\nCreating a toolbar title menu\ninit()\nCreates a toolbar title menu where actions are inferred from your apps commands."
    },
    {
        "title": "subscript(dynamicMember:)",
        "url": "https://developer.apple.com/documentation/swiftui/bindable/subscript(dynamicmember:)",
        "html": "See Also\nGetting the value\nvar wrappedValue: Value\nThe wrapped object.\nvar projectedValue: Bindable<Value>\nThe bindable wrapper for the object that creates bindings to its properties using dynamic member lookup."
    },
    {
        "title": "backgroundTask(_:action:)",
        "url": "https://developer.apple.com/documentation/swiftui/widgetconfiguration/backgroundtask(_:action:)",
        "html": "Parameters\ntask\n\nThe type of task the action responds to.\n\naction\n\nThe closure that is called when the system provides a task matching the provided task.\n\nDiscussion\n\nWhen the system wakes your app or extension for one or more background tasks, it will call any actions associated with matching tasks. When your async actions return, the system will put your app back into a suspended state. In Widget Extensions, this modifier can be used to handle URL Session background tasks with urlSession.\n\nSee Also\nManaging background tasks\nfunc onBackgroundURLSessionEvents(matching: ((String) -> Bool)?, (String, () -> Void) -> Void) -> some WidgetConfiguration\nAdds an action to perform when events related to a URL session identified by a closure are waiting to be processed.\nfunc onBackgroundURLSessionEvents(matching: String, (String, () -> Void) -> Void) -> some WidgetConfiguration\nAdds an action to perform when events related to a URL session with a matching identifier are waiting to be processed."
    },
    {
        "title": "init(wrappedValue:)",
        "url": "https://developer.apple.com/documentation/swiftui/bindable/init(wrappedvalue:)",
        "html": "Discussion\n\nYou should not call this initializer directly. Instead, declare a property with the @Bindable attribute, and provide an initial value.\n\nSee Also\nCreating a bindable value\ninit(Value)\nCreates a bindable object from an observable object.\nAvailable when Value conforms to Observable.\ninit(projectedValue: Bindable<Value>)\nCreates a bindable from the value of another bindable.\nAvailable when Value conforms to Observable."
    },
    {
        "title": "navigationBarLeading",
        "url": "https://developer.apple.com/documentation/swiftui/toolbaritemplacement/navigationbarleading",
        "html": "Deprecated\n\nUse topBarLeading instead.\n\nSee Also\nDeprecated symbols\ninit<ID>(id: ID)\nCreates a custom accessory bar item placement.\nDeprecated\nstatic let navigationBarTrailing: ToolbarItemPlacement\nPlaces the item in the trailing edge of the navigation bar.\nDeprecated"
    },
    {
        "title": "wrappedValue",
        "url": "https://developer.apple.com/documentation/swiftui/state/wrappedvalue",
        "html": "Discussion\n\nThis property provides primary access to the value\u2019s data. However, you don\u2019t typically access wrappedValue explicitly. Instead, you gain access to the wrapped value by referring to the property variable that you create with the @State attribute.\n\nIn the following example, the button\u2019s label depends on the value of isPlaying and the button\u2019s action toggles the value of isPlaying. Both of these accesses implicitly access the state property\u2019s wrapped value:\n\nstruct PlayButton: View {\n    @State private var isPlaying: Bool = false\n\n\n    var body: some View {\n        Button(isPlaying ? \"Pause\" : \"Play\") {\n            isPlaying.toggle()\n        }\n    }\n}\n\nSee Also\nGetting the value\nvar projectedValue: Binding<Value>\nA binding to the state value."
    },
    {
        "title": "large",
        "url": "https://developer.apple.com/documentation/swiftui/toolbartitledisplaymode/large",
        "html": "Discussion\n\nIn iOS, and watchOS, this displays the toolbar title below the content of the navigation bar when scrollable content is scrolled to the top and transitions to the center of the toolbar as content is scrolled.\n\nSee Also\nGetting display modes\nstatic var automatic: ToolbarTitleDisplayMode\nThe automatic mode.\nstatic var inline: ToolbarTitleDisplayMode\nThe inline mode.\nstatic var inlineLarge: ToolbarTitleDisplayMode\nThe inline large mode."
    },
    {
        "title": "Image",
        "url": "https://developer.apple.com/documentation/SwiftUI/Image",
        "html": "Overview\n\nUse an Image instance when you want to add images to your SwiftUI app. You can create images from many sources:\n\nImage files in your app\u2019s asset library or bundle. Supported types include PNG, JPEG, HEIC, and more.\n\nInstances of platform-specific image types, like UIImage and NSImage.\n\nA bitmap stored in a Core Graphics CGImage instance.\n\nSystem graphics from the SF Symbols set.\n\nThe following example shows how to load an image from the app\u2019s asset library or bundle and scale it to fit within its container:\n\nImage(\"Landscape_4\")\n    .resizable()\n    .aspectRatio(contentMode: .fit)\nText(\"Water wheel\")\n\n\nYou can use methods on the Image type as well as standard view modifiers to adjust the size of the image to fit your app\u2019s interface. Here, the Image type\u2019s resizable(capInsets:resizingMode:) method scales the image to fit the current view. Then, the aspectRatio(_:contentMode:) view modifier adjusts this resizing behavior to maintain the image\u2019s original aspect ratio, rather than scaling the x- and y-axes independently to fill all four sides of the view. The article Fitting images into available space shows how to apply scaling, clipping, and tiling to Image instances of different sizes.\n\nAn Image is a late-binding token; the system resolves its actual value only when it\u2019s about to use the image in an environment.\n\nMaking images accessible\n\nTo use an image as a control, use one of the initializers that takes a label parameter. This allows the system\u2019s accessibility frameworks to use the label as the name of the control for users who use features like VoiceOver. For images that are only present for aesthetic reasons, use an initializer with the decorative parameter; the accessibility systems ignore these images.\n\nTopics\nCreating an image\ninit(String, bundle: Bundle?)\nCreates a labeled image that you can use as content for controls.\ninit(String, variableValue: Double?, bundle: Bundle?)\nCreates a labeled image that you can use as content for controls, with a variable value.\ninit(ImageResource)\nInitialize an Image with an image resource.\nCreating an image for use as a control\ninit(String, bundle: Bundle?, label: Text)\nCreates a labeled image that you can use as content for controls, with the specified label.\ninit(String, variableValue: Double?, bundle: Bundle?, label: Text)\nCreates a labeled image that you can use as content for controls, with the specified label and variable value.\ninit(CGImage, scale: CGFloat, orientation: Image.Orientation, label: Text)\nCreates a labeled image based on a Core Graphics image instance, usable as content for controls.\nCreating an image for decorative use\ninit(decorative: String, bundle: Bundle?)\nCreates an unlabeled, decorative image.\ninit(decorative: String, variableValue: Double?, bundle: Bundle?)\nCreates an unlabeled, decorative image, with a variable value.\ninit(decorative: CGImage, scale: CGFloat, orientation: Image.Orientation)\nCreates an unlabeled, decorative image based on a Core Graphics image instance.\nCreating a system symbol image\ninit(systemName: String)\nCreates a system symbol image.\ninit(systemName: String, variableValue: Double?)\nCreates a system symbol image with a variable value.\nCreating an image from another image\ninit(uiImage: UIImage)\nCreates a SwiftUI image from a UIKit image instance.\ninit(nsImage: NSImage)\nCreates a SwiftUI image from an AppKit image instance.\nCreating an image from drawing instructions\ninit(size: CGSize, label: Text?, opaque: Bool, colorMode: ColorRenderingMode, renderer: (inout GraphicsContext) -> Void)\nInitializes an image of the given size, with contents provided by a custom rendering closure.\nResizing images\nfunc resizable(capInsets: EdgeInsets, resizingMode: Image.ResizingMode) -> Image\nSets the mode by which SwiftUI resizes an image to fit its space.\nSpecifying rendering behavior\nfunc antialiased(Bool) -> Image\nSpecifies whether SwiftUI applies antialiasing when rendering the image.\nfunc symbolRenderingMode(SymbolRenderingMode?) -> Image\nSets the rendering mode for symbol images within this view.\nfunc renderingMode(Image.TemplateRenderingMode?) -> Image\nIndicates whether SwiftUI renders an image as-is, or by using a different mode.\nfunc interpolation(Image.Interpolation) -> Image\nSpecifies the current level of quality for rendering an image that requires interpolation.\nenum TemplateRenderingMode\nA type that indicates how SwiftUI renders images.\nenum Interpolation\nThe level of quality for rendering an image that requires interpolation, such as a scaled image.\nSpecifying dynamic range\nfunc allowedDynamicRange(Image.DynamicRange?) -> Image\nReturns a new image configured with the specified allowed dynamic range.\nvar allowedDynamicRange: Image.DynamicRange?\nThe allowed dynamic range for the view, or nil.\nstruct DynamicRange\nRelationships\nConforms To\nEquatable\nSendable\nTransferable\nView"
    },
    {
        "title": "callAsFunction()",
        "url": "https://developer.apple.com/documentation/swiftui/dismisssearchaction/callasfunction()",
        "html": "Discussion\n\nDon\u2019t call this method directly. SwiftUI calls it for you when you call the DismissSearchAction structure that you get from the Environment:\n\nstruct SearchedView: View {\n    @Environment(\\.dismissSearch) private var dismissSearch\n\n\n    var body: some View {\n        Button(\"Cancel\") {\n            dismissSearch() // Implicitly calls dismissSearch.callAsFunction()\n        }\n    }\n}\n\n\nFor information about how Swift uses the callAsFunction() method to simplify call site syntax, see Methods with Special Names in The Swift Programming Language."
    },
    {
        "title": "onTextEntry",
        "url": "https://developer.apple.com/documentation/swiftui/searchscopeactivation/ontextentry",
        "html": "See Also\nGetting search scope activiation types\nstatic var automatic: SearchScopeActivation\nThe automatic activation of the scope bar.\nstatic var onSearchPresentation: SearchScopeActivation\nAn activation where the system shows search scopes after presenting search and hides search scopes after search cancellation."
    },
    {
        "title": "defaultAction",
        "url": "https://developer.apple.com/documentation/swiftui/keyboardshortcut/defaultaction",
        "html": "Discussion\n\nOn macOS, the default button is designated with special coloration. If more than one control is assigned this shortcut, only the first one is emphasized.\n\nSee Also\nGetting standard shortcuts\nstatic let cancelAction: KeyboardShortcut\nThe standard keyboard shortcut for cancelling the in-progress action or dismissing a prompt, consisting of the Escape (\u238b) key and no modifiers."
    },
    {
        "title": "init(id:for:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/immersivespace/init(id:for:content:)-44p0c",
        "html": "Parameters\nid\n\nA string that uniquely identifies the immersive space. Ensure that identifiers are unique among the immersive spaces in your app.\n\ntype\n\nThe type of presented data this immersive space accepts.\n\ncontent\n\nAn immersive space content builder that defines the content for each instance of the immersive space. The closure receives a binding to the value that you pass to the openImmersiveSpace action when you call that action to open an immersive space. The system automatically persists and restores the value of this binding during state restoration.\n\nDiscussion\n\nThe space uses the specified content builder to form the content. Your app invokes this initializer when it presents a value of the specified type using the openImmersiveSpace action.\n\nSee Also\nCreating a data-driven immersive space\ninit(for: Data.Type, content: (Binding<Data?>) -> Content)\nCreates the immersive space for a specified type of presented data.\nBeta\ninit<V>(for: Data.Type, content: (Binding<Data?>) -> V)\nCreates the immersive space for a specified type of presented data using view-based content.\nAvailable when Content conforms to ImmersiveSpaceContent, Data conforms to Decodable, Data conforms to Encodable, and Data conforms to Hashable.\nBeta\ninit<V>(id: String, for: Data.Type, content: (Binding<Data?>) -> V)\nCreates the immersive space associated with an identifier for a specified type of presented data using view-based content.\nAvailable when Content conforms to ImmersiveSpaceContent, Data conforms to Decodable, Data conforms to Encodable, and Data conforms to Hashable.\nBeta"
    },
    {
        "title": "thick",
        "url": "https://developer.apple.com/documentation/swiftui/material/thick",
        "html": "See Also\nGetting material types\nstatic let ultraThin: Material\nA mostly translucent material.\nstatic let thin: Material\nA material that\u2019s more translucent than opaque.\nstatic let regular: Material\nA material that\u2019s somewhat translucent.\nstatic let ultraThick: Material\nA mostly opaque material.\nstatic let bar: Material\nA material matching the style of system toolbars."
    },
    {
        "title": "cancel",
        "url": "https://developer.apple.com/documentation/swiftui/buttonrole/cancel",
        "html": "Discussion\n\nUse this role for a button that cancels the current operation.\n\nSee Also\nGetting button roles\nstatic let destructive: ButtonRole\nA role that indicates a destructive button."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/searchscopeactivation/automatic",
        "html": "Discussion\n\nBy default, this is onTextEntry in iOS and onSearchPresentation in macOS.\n\nSee Also\nGetting search scope activiation types\nstatic var onSearchPresentation: SearchScopeActivation\nAn activation where the system shows search scopes after presenting search and hides search scopes after search cancellation.\nstatic var onTextEntry: SearchScopeActivation\nAn activation where the system shows search scopes when typing begins in the search field and hides search scopes after search cancellation."
    },
    {
        "title": "CustomPresentationDetent.Context",
        "url": "https://developer.apple.com/documentation/swiftui/custompresentationdetent/context",
        "html": "See Also\nGetting the height\nstatic func height(in: Self.Context) -> CGFloat?\nCalculates and returns a height based on the context.\n\nRequired"
    },
    {
        "title": "Visibility.automatic",
        "url": "https://developer.apple.com/documentation/swiftui/visibility/automatic",
        "html": "Discussion\n\nFor example, some components employ different automatic behavior depending on factors including the platform, the surrounding container, user settings, etc.\n\nSee Also\nGetting visibility options\ncase visible\nThe element may be visible.\ncase hidden\nThe element may be hidden."
    },
    {
        "title": "Body",
        "url": "https://developer.apple.com/documentation/swiftui/widgetbundle/body-swift.associatedtype",
        "html": "Required\n\nDiscussion\n\nWhen you support more than one widget, Swift infers this type from your implementation of the required body property.\n\nSee Also\nImplementing a widget bundle\nvar body: Self.Body\nDeclares the group of widgets that an app supports.\n\nRequired\n\nstruct WidgetBundleBuilder\nA custom attribute that constructs a widget bundle\u2019s body."
    },
    {
        "title": "body",
        "url": "https://developer.apple.com/documentation/swiftui/widgetbundle/body-swift.property",
        "html": "Required\n\nDiscussion\n\nThe order that the widgets appear in this property determines the order they are shown to the user when adding a widget. The following example shows how to use a widget bundle builder to define a body showing a game status widget first and a character detail widget second:\n\n@main\nstruct GameWidgets: WidgetBundle {\n   var body: some Widget {\n       GameStatusWidget()\n       CharacterDetailWidget()\n   }\n}\n\nSee Also\nImplementing a widget bundle\nassociatedtype Body : Widget\nThe type of widget that represents the content of the bundle.\n\nRequired\n\nstruct WidgetBundleBuilder\nA custom attribute that constructs a widget bundle\u2019s body."
    },
    {
        "title": "main()",
        "url": "https://developer.apple.com/documentation/swiftui/widget/main()",
        "html": "Overview\n\nBecause you precede your Widget conformer\u2019s declaration with the @main attribute, the system calls your widget\u2019s main() method to launch the widget. SwiftUI provides a default implementation of the method that manages the launch process in a platform-appropriate way.\n\nSee Also\nRunning a widget\ninit()\nCreates a widget using body as its content.\n\nRequired"
    },
    {
        "title": "standard",
        "url": "https://developer.apple.com/documentation/swiftui/dialogseverity/standard",
        "html": "See Also\nGetting severities\nstatic let automatic: DialogSeverity\nThe default dialog severity. Alerts that present an error will use .critical and all others will use .standard.\nstatic let critical: DialogSeverity\nA severity that indicates extra attention should be given to the dialog, for example when unexpected data loss may occur as a result of the action taken."
    },
    {
        "title": "body",
        "url": "https://developer.apple.com/documentation/swiftui/widget/body-swift.property",
        "html": "Required\n\nDiscussion\n\nFor any widgets that you create, provide a computed body property that defines the widget as a composition of SwiftUI views.\n\nSwift infers the widget\u2019s Body associated type based on the contents of the body property.\n\nSee Also\nImplementing a widget\nassociatedtype Body : WidgetConfiguration\nThe type of configuration representing the content of the widget.\n\nRequired"
    },
    {
        "title": "critical",
        "url": "https://developer.apple.com/documentation/swiftui/dialogseverity/critical",
        "html": "Discussion\n\nOn macOS, a dialog with critical severity will display a large caution symbol with the app icon as an overlay.\n\nSee Also\nGetting severities\nstatic let automatic: DialogSeverity\nThe default dialog severity. Alerts that present an error will use .critical and all others will use .standard.\nstatic let standard: DialogSeverity\nA severity that indicates the dialog is being displayed for the purpose of presenting information to the user."
    },
    {
        "title": "Body",
        "url": "https://developer.apple.com/documentation/swiftui/widget/body-swift.associatedtype",
        "html": "Required\n\nDiscussion\n\nWhen you create a custom widget, Swift infers this type from your implementation of the required body property.\n\nSee Also\nImplementing a widget\nvar body: Self.Body\nThe content and behavior of the widget.\n\nRequired"
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/widget/init()",
        "html": "Required\n\nSee Also\nRunning a widget\nstatic func main()\nInitializes and runs the widget."
    },
    {
        "title": "alwaysAvailable",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcustomizationoptions/alwaysavailable",
        "html": "Discussion\n\nIn iOS, default customizable toolbar content have the option of always being available in the toolbar regardless of the customization status of the user. These items will always be in the overflow menu of the toolbar. Users can customize whether the items are present as controls in the toolbar itself but will still always be able to access the item if they remove it from the toolbar itself.\n\nConsider using this for items that users should always be able to access, but may not be important enough to always occupy space in the toolbar itself."
    },
    {
        "title": "disabled",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcustomizationbehavior/disabled",
        "html": "Discussion\n\nItems with this behavior may not be removed or moved by the user. They will be placed before other customizatable items. Use this behavior for the most important items that users need for the app to do common functionality.\n\nSee Also\nGetting customization behaviors\nstatic var `default`: ToolbarCustomizationBehavior\nThe default customization behavior.\nstatic var reorderable: ToolbarCustomizationBehavior\nThe reorderable customization behavior."
    },
    {
        "title": "reorderable",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcustomizationbehavior/reorderable",
        "html": "Discussion\n\nItems with this behavior start in the toolbar and can be moved within the toolbar by the user, but can not be removed from the toolbar.\n\nSee Also\nGetting customization behaviors\nstatic var `default`: ToolbarCustomizationBehavior\nThe default customization behavior.\nstatic var disabled: ToolbarCustomizationBehavior\nThe disabled customization behavior."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarrole/automatic",
        "html": "Discussion\n\nIn iOS, tvOS, and watchOS this resolves to the navigationStack role. In macOS, this resolves to the editor role."
    },
    {
        "title": "init(id:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbaritemplacement/init(id:)",
        "html": "Deprecated\n\nUse accessoryBar(id:) instead.\n\nSee Also\nDeprecated symbols\nstatic let navigationBarLeading: ToolbarItemPlacement\nPlaces the item in the leading edge of the navigation bar.\nDeprecated\nstatic let navigationBarTrailing: ToolbarItemPlacement\nPlaces the item in the trailing edge of the navigation bar.\nDeprecated"
    },
    {
        "title": "default",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcustomizationbehavior/default",
        "html": "Discussion\n\nItems with this behavior start in the toolbar and can be moved or removed from the toolbar by the user.\n\nSee Also\nGetting customization behaviors\nstatic var disabled: ToolbarCustomizationBehavior\nThe disabled customization behavior.\nstatic var reorderable: ToolbarCustomizationBehavior\nThe reorderable customization behavior."
    },
    {
        "title": "strokeBorder(_:lineWidth:antialiased:)",
        "url": "https://developer.apple.com/documentation/swiftui/insettableshape/strokeborder(_:linewidth:antialiased:)-5qhjc",
        "html": "See Also\nSetting the stroke border characteristics\nfunc strokeBorder<S>(S, lineWidth: CGFloat, antialiased: Bool) -> some View\nReturns a view that is the result of filling the lineWidth-sized border (aka inner stroke) of self with content. This is equivalent to insetting self by lineWidth / 2 and stroking the resulting shape with lineWidth as the line-width.\nfunc strokeBorder(lineWidth: CGFloat, antialiased: Bool) -> some View\nReturns a view that is the result of filling the lineWidth-sized border (aka inner stroke) of self with the foreground color. This is equivalent to insetting self by lineWidth / 2 and stroking the resulting shape with lineWidth as the line-width.\nfunc strokeBorder<S>(S, style: StrokeStyle, antialiased: Bool) -> StrokeBorderShapeView<Self, S, EmptyView>\nReturns a view that is the result of insetting self by style.lineWidth / 2, stroking the resulting shape with style, and then filling with content.\nfunc strokeBorder<S>(S, style: StrokeStyle, antialiased: Bool) -> some View\nReturns a view that is the result of insetting self by style.lineWidth / 2, stroking the resulting shape with style, and then filling with content.\nfunc strokeBorder(style: StrokeStyle, antialiased: Bool) -> some View\nReturns a view that is the result of insetting self by style.lineWidth / 2, stroking the resulting shape with style, and then filling with the foreground color."
    },
    {
        "title": "disfavoredLocations(_:for:)",
        "url": "https://developer.apple.com/documentation/swiftui/widgetconfiguration/disfavoredlocations(_:for:)",
        "html": "Parameters\nlocations\n\nAn array of disfavored locations for a widget.\n\nfamilies\n\nThe families you want to mark as disfavored in the given locations.\n\nDiscussion\n\nA widget can appear in different contexts on different platforms. For example, a small system widget appears by default on the Home Screen and in Today View on iPhone, on the iPad Lock Screen, and so on. This gives more people opportunity to view data and functionality that your widget provides. However, some widgets may not work well in a location. For example, a widget that heavily relies on high-resolution photos and background colors for its functionality may not work well on the Lock Screen, where the system applies a vibrant treatment to the widget. To tell the system that the widget gallery should show a widget in the \u201cOther\u201d section of the widget gallery for a specific context, use the .disfavoredLocations modifier.\n\nThe following code snippet tells the system to show the small system family widget in the \u201cOther\u201d section of the widget gallery for the disfavored WidgetLocation/lockScreen and WidgetLocation/homeScreen locations.\n\nlockScreenOnlyConfig\n    .disfavoredLocations([.lockScreen, .homeScreen], for: [.systemSmall])\n\n\nYou can use subsequent calls to disfavoredLocations(_:families:) to join them and set disfavored locations for different families:\n\nwidgetConfig\n    .disfavoredLocations([.lockScreen, .homeScreen], for: [.systemSmall])\n    .disfavoredLocations([.homescreen], for: [.systemMedium])\n\nSee Also\nSetting the appearance\nfunc supportedFamilies([WidgetFamily]) -> some WidgetConfiguration\nSets the sizes that a widget supports.\nfunc contentMarginsDisabled() -> some WidgetConfiguration\nDisable default content margins.\nfunc containerBackgroundRemovable(Bool) -> some WidgetConfiguration\nA modifier that marks the background of a widget as removable."
    },
    {
        "title": "contentMarginsDisabled()",
        "url": "https://developer.apple.com/documentation/swiftui/widgetconfiguration/contentmarginsdisabled()",
        "html": "Return Value\n\nA modified widget configuration that doesn\u2019t use default content margins.\n\nDiscussion\n\nWhen you disable content margins for a widget, the system doesn\u2019t automatically add margins around the widget\u2019s content, and you are responsible for specifying margins and padding around your widget content for each context. To specify custom margins, use widgetContentMargins in combination with View/padding(_) to selectively or partially apply the default content margins.\n\nThis modifier has no effect on operation system versions prior to iOS 17, watchOS 10, or macOS 14.\n\nSee Also\nSetting the appearance\nfunc supportedFamilies([WidgetFamily]) -> some WidgetConfiguration\nSets the sizes that a widget supports.\nfunc disfavoredLocations([WidgetLocation], for: [WidgetFamily]) -> some WidgetConfiguration\nSets the disfavored locations for a widget.\nfunc containerBackgroundRemovable(Bool) -> some WidgetConfiguration\nA modifier that marks the background of a widget as removable."
    },
    {
        "title": "onBackgroundURLSessionEvents(matching:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/widgetconfiguration/onbackgroundurlsessionevents(matching:_:)-2e152",
        "html": "Parameters\nmatching\n\nA closure that takes a string identifier and returns a Boolean value indicating whether to perform the action.\n\nurlSessionEvent\n\nA closure that takes a string parameter called identifier and a closure called completion.\n\nReturn Value\n\nA widget that triggers urlSessionEvent when events are generated for a URLSession with the specified identifier.\n\nDiscussion\n\nWhen a widget initiates a background network request, the system delivers events related to the request directly to the widget extension instead of the containing app. To process the events, do the following:\n\nUse the identifier parameter to determine if a corresponding URLSession object exists. If the system hasn\u2019t terminated your widget extension, maintain a reference to the same URLSession object you used for the original background network request. If the system terminated your widget extension, use the identifier to create a new URLSession object so it can receive the events. You might consider lazily initializing, and caching, the URLSession objects in a central location so that your code works regardless of whether your extension remains active, is suspended, or is terminated.\n\nStore a reference to the completion closure to invoke it after the system delivers all events.\n\nAfter the system calls the URLSession delegate\u2019s urlSessionDidFinishEvents(forBackgroundURLSession:) method, invoke the completion closure.\n\nSee Also\nManaging background tasks\nfunc backgroundTask<D, R>(BackgroundTask<D, R>, action: (D) async -> R) -> some WidgetConfiguration\nRuns the given action when the system provides a background task.\nfunc onBackgroundURLSessionEvents(matching: String, (String, () -> Void) -> Void) -> some WidgetConfiguration\nAdds an action to perform when events related to a URL session with a matching identifier are waiting to be processed."
    },
    {
        "title": "supportedFamilies(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/widgetconfiguration/supportedfamilies(_:)",
        "html": "Parameters\nfamilies\n\nThe set of sizes the widget supports.\n\nReturn Value\n\nA widget configuration that supports the sizes you specify.\n\nSee Also\nSetting the appearance\nfunc contentMarginsDisabled() -> some WidgetConfiguration\nDisable default content margins.\nfunc disfavoredLocations([WidgetLocation], for: [WidgetFamily]) -> some WidgetConfiguration\nSets the disfavored locations for a widget.\nfunc containerBackgroundRemovable(Bool) -> some WidgetConfiguration\nA modifier that marks the background of a widget as removable."
    },
    {
        "title": "callAsFunction(contentType:)",
        "url": "https://developer.apple.com/documentation/swiftui/newdocumentaction/callasfunction(contenttype:)",
        "html": "Parameters\ncontentType\n\nThe content type of the document.\n\nDiscussion\n\nDon\u2019t call this method directly. SwiftUI calls it when you call the newDocument action:\n\nnewDocument(contentType: .todoList)\n\n\n extension UTType {\n     static var todoList = UTType(exportedAs: \"com.myApp.todoList\")\n }\n\n\nImportant\n\nIf your app declares custom uniform type identifiers, include corresponding entries in the app\u2019s Info.plist file. For more information, see Defining file and data types for your app. Also, remember to specify the supported Document types in the Info.plist file as well.\n\nFor information about how Swift uses the callAsFunction() method to simplify call site syntax, see Methods with Special Names in The Swift Programming Language.\n\nSee Also\nCalling the action\nfunc callAsFunction<D>(() -> D)\nPresents a new reference type document window.\nfunc callAsFunction<D>(() -> D)\nPresents a new document window.\nfunc callAsFunction(contentType: UTType, prepareDocument: (ModelContext) -> Void)\nPresents a new document window with preset contents."
    },
    {
        "title": "inset(by:)",
        "url": "https://developer.apple.com/documentation/swiftui/insettableshape/inset(by:)",
        "html": "Required\n\nSee Also\nSetting the inset\nassociatedtype InsetShape : InsettableShape\nThe type of the inset shape.\n\nRequired"
    },
    {
        "title": "onBackgroundURLSessionEvents(matching:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/widgetconfiguration/onbackgroundurlsessionevents(matching:_:)-fw6x",
        "html": "Parameters\nmatching\n\nThe identifier of a URL session to monitor for events.\n\nurlSessionEvent\n\nA closure that takes a string identifier and a closure called completion as parameters.\n\nReturn Value\n\nA widget that triggers urlSessionEvent when events are generated for a URLSession with the specified identifier.\n\nDiscussion\n\nWhen a widget initiates a background network request, the system delivers events related to the request directly to the widget extension instead of the containing app. To process the events, do the following:\n\nUse the matching parameter to determine if a corresponding URLSession object exists. If the system hasn\u2019t terminated your widget extension, maintain a reference to the same URLSession object you used for the original background network request. If the system terminated your widget extension, use the identifier to create a new URLSession object so it can receive the events. You might consider lazily initializing, and caching, the URLSession objects in a central location so that your code works regardless of whether your extension remains active, is suspended, or is terminated.\n\nStore a reference to the completion closure of urlSessionEvent to invoke it after the system delivers all events.\n\nAfter the system calls the URLSession delegate\u2019s urlSessionDidFinishEvents(forBackgroundURLSession:) method, invoke the completion closure.\n\nSee Also\nManaging background tasks\nfunc backgroundTask<D, R>(BackgroundTask<D, R>, action: (D) async -> R) -> some WidgetConfiguration\nRuns the given action when the system provides a background task.\nfunc onBackgroundURLSessionEvents(matching: ((String) -> Bool)?, (String, () -> Void) -> Void) -> some WidgetConfiguration\nAdds an action to perform when events related to a URL session identified by a closure are waiting to be processed."
    },
    {
        "title": "description(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/widgetconfiguration/description(_:)-1bvuj",
        "html": "Parameters\ndescription\n\nA text view containing a localized string to display.\n\nReturn Value\n\nA widget configuration with a description of the widget.\n\nSee Also\nSetting a description\nfunc description<S>(S) -> some WidgetConfiguration\nSets the description shown for a widget when a user adds or edits it using the specified string.\nfunc description(LocalizedStringKey) -> some WidgetConfiguration\nSets the localized description shown for a widget when a user adds or edits the widget."
    },
    {
        "title": "customizationBehavior(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/customizabletoolbarcontent/customizationbehavior(_:)",
        "html": "Parameters\nbehavior\n\nThe customization behavior of the customizable toolbar content.\n\nDiscussion\n\nCustomizable toolbar items support different kinds of customization:\n\nA user can add an an item that is not in the toolbar.\n\nA user can remove an item that is in the toolbar.\n\nA user can move an item within the toolbar.\n\nBased on the customization behavior of the toolbar items, different edits will be supported.\n\nUse this modifier to the customization behavior a user can perform on your toolbar items. In the following example, the customizable toolbar item supports all of the different kinds of toolbar customizations and starts in the toolbar.\n\nContentView()\n    .toolbar(id: \"main\") {\n        ToolbarItem(id: \"new\") {\n            // new button here\n        }\n    }\n\n\nYou can create an item that can not be removed from the toolbar or moved within the toolbar by passing a value of disabled to this modifier.\n\nContentView()\n    .toolbar(id: \"main\") {\n        ToolbarItem(id: \"new\") {\n            // new button here\n        }\n        .customizationBehavior(.disabled)\n    }\n\n\nYou can create an item that can not be removed from the toolbar, but can be moved by passing a value of reorderable.\n\nContentView()\n    .toolbar(id: \"main\") {\n        ToolbarItem(id: \"new\") {\n            // new button here\n        }\n        .customizationBehavior(.reorderable)\n    }\n"
    },
    {
        "title": "callAsFunction(contentType:prepareDocument:)",
        "url": "https://developer.apple.com/documentation/swiftui/newdocumentaction/callasfunction(contenttype:preparedocument:)",
        "html": "Parameters\ncontentType\n\nThe content type of the document.\n\nprepareDocument\n\nThe closure that accepts ModelContext associated with the new document. Use this closure to set the document\u2019s initial contents before it is displayed: insert preconfigured models in the provided ModelContext.\n\nDiscussion\n\nDon\u2019t call this method directly. SwiftUI calls it when you call the newDocument action.\n\nFor example, a Todo app might have a way to create a sample prepopulated Todo list as a part of onboarding experience:\n\nnewDocument(contentType: .todoList) { modelContext in\n    let todoList = TodoList(\n        title: \"\ud83c\udfac Movie night\",\n        items: [\n            TodoItem(title: \"\ud83c\udf7f Buy popcorn\"),\n            TodoItem(title: \"\ud83c\udf68 Make some ice cream\",\n            TodoItem(title: \"\ud83d\udca1 Hang a string of lights\")\n        ]\n    )\n    modelContext.insert(todoList)\n}\n\n\nFor information about how Swift uses the callAsFunction() method to simplify call site syntax, see Methods with Special Names in The Swift Programming Language.\n\nSee Also\nCalling the action\nfunc callAsFunction<D>(() -> D)\nPresents a new reference type document window.\nfunc callAsFunction<D>(() -> D)\nPresents a new document window.\nfunc callAsFunction(contentType: UTType)\nPresents a new document window."
    },
    {
        "title": "existingFile",
        "url": "https://developer.apple.com/documentation/swiftui/filedocumentwriteconfiguration/existingfile",
        "html": "See Also\nWriting the content\nlet contentType: UTType\nThe expected uniform type of the file contents."
    },
    {
        "title": "wrappedValue",
        "url": "https://developer.apple.com/documentation/swiftui/environmentobject/wrappedvalue",
        "html": "Discussion\n\nThis property provides primary access to the value\u2019s data. However, you don\u2019t access wrappedValue directly. Instead, you use the property variable created with the EnvironmentObject attribute.\n\nWhen a mutable value changes, the new value is immediately available. However, a view displaying the value is updated asynchronously and may not show the new value immediately.\n\nSee Also\nGetting the value\nvar projectedValue: EnvironmentObject<ObjectType>.Wrapper\nA projection of the environment object that creates bindings to its properties using dynamic member lookup.\nstruct Wrapper\nA wrapper of the underlying environment object that can create bindings to its properties using dynamic member lookup."
    },
    {
        "title": "contentType",
        "url": "https://developer.apple.com/documentation/swiftui/filedocumentwriteconfiguration/contenttype",
        "html": "See Also\nWriting the content\nlet existingFile: FileWrapper?\nThe file wrapper containing the current document content. nil if the document is unsaved."
    },
    {
        "title": "callAsFunction(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/newdocumentaction/callasfunction(_:)-4tgmw",
        "html": "Parameters\nnewDocument\n\nThe new reference type file document to present.\n\nDiscussion\n\nDon\u2019t call this method directly. SwiftUI calls it when you call the newDocument action:\n\nnewDocument(TextDocument(text: selectedText))\n\n\nFor information about how Swift uses the callAsFunction() method to simplify call site syntax, see Methods with Special Names in The Swift Programming Language.\n\nSee Also\nCalling the action\nfunc callAsFunction<D>(() -> D)\nPresents a new document window.\nfunc callAsFunction(contentType: UTType)\nPresents a new document window.\nfunc callAsFunction(contentType: UTType, prepareDocument: (ModelContext) -> Void)\nPresents a new document window with preset contents."
    },
    {
        "title": "init(id:for:content:defaultValue:)",
        "url": "https://developer.apple.com/documentation/swiftui/immersivespace/init(id:for:content:defaultvalue:)-71phd",
        "html": "Parameters\nid\n\nA string that uniquely identifies the immersive space. Ensure that identifiers are unique among the immersive spaces in your app.\n\ntype\n\nThe type of presented data this immersive space accepts.\n\ncontent\n\nAn immersive space content builder that defines the content for each instance of the immersive space. The closure receives a binding to the value that you pass to the openImmersiveSpace action when you call that action to open an immersive space. The system automatically persists and restores the value of this binding during state restoration.\n\ndefaultValue\n\nA closure that returns a value that SwiftUI presents when it doesn\u2019t receive one from you, like when you call the openImmersiveSpace action without providing a value.\n\nDiscussion\n\nThe space uses the specified content builder to form the content. Your app invokes this initializer when it presents a value of the specified type using the openImmersiveSpace action.\n\nSee Also\nProviding default data to an immersive space\ninit(for: Data.Type, content: (Binding<Data>) -> Content, defaultValue: () -> Data)\nCreates an immersive space.\nBeta\ninit<V>(for: Data.Type, content: (Binding<Data>) -> V, defaultValue: () -> Data)\nCreates an immersive space for a specified type of presented data and a default value if the data is not set.\nAvailable when Content conforms to ImmersiveSpaceContent, Data conforms to Decodable, Data conforms to Encodable, and Data conforms to Hashable.\nBeta\ninit<V>(id: String, for: Data.Type, content: (Binding<Data>) -> V, defaultValue: () -> Data)\nCreates the immersive space associated with an identifier for a specified type of presented data and a default value if the data is not set.\nAvailable when Content conforms to ImmersiveSpaceContent, Data conforms to Decodable, Data conforms to Encodable, and Data conforms to Hashable.\nBeta"
    },
    {
        "title": "init(id:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/immersivespace/init(id:content:)-5keb4",
        "html": "Parameters\nid\n\nA string that uniquely identifies the immersive space. Ensure that identifiers are unique among the immersive spaces in your app.\n\ncontent\n\nA view builder that defines the content for each instance of the immersive space.\n\nDiscussion\n\nThe immersive space uses the specified view as a template to form the content of the space."
    },
    {
        "title": "defaultCustomization(_:options:)",
        "url": "https://developer.apple.com/documentation/swiftui/customizabletoolbarcontent/defaultcustomization(_:options:)",
        "html": "Parameters\ndefaultVisibility\n\nThe default visibility of toolbar content with the default customization behavior.\n\noptions\n\nThe customization options to configure the behavior of toolbar content with the default customization behavior.\n\nDiscussion\n\nDefault customizable items support a variety of edits by the user.\n\nA user can add an an item that is not in the toolbar.\n\nA user can remove an item that is in the toolbar.\n\nA user can move an item within the toolbar.\n\nBy default, all default customizable items will be initially present in the toolbar. Provide a value of Visibility.hidden to this modifier to specify that items should initially be hidden from the user, and require them to add those items to the toolbar if desired.\n\nContentView()\n    .toolbar(id: \"main\") {\n        ToolbarItem(id: \"new\") {\n            // new button here\n        }\n        .defaultCustomization(.hidden)\n    }\n\n\nYou can ensure that the user can always use an item with default customizability, even if it\u2019s removed from the customizable toolbar. To do this, provide the alwaysAvailable option. Unlike a customizable item with a customization behavior of ToolbarCustomizationBehavior/none which always remain in the toolbar itself, these items will remain in the overflow if the user removes them from the toolbar.\n\nProvide a value of alwaysAvailable to the options parameter of this modifier to receive this behavior.\n\nContentView()\n    .toolbar(id: \"main\") {\n        ToolbarItem(id: \"new\") {\n            // new button here\n        }\n        .defaultCustomization(options: .alwaysAvailable)\n    }\n\nSee Also\nUsing default options\nfunc defaultCustomization() -> some CustomizableToolbarContent\nConfigures customizable toolbar content with the default visibility and options."
    },
    {
        "title": "init(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/immersivespace/init(content:)-25rvu",
        "html": "Parameters\ncontent\n\nAn immersive space content builder that defines the content of the space.\n\nDiscussion\n\nThe space uses the specified content builder to form the content."
    },
    {
        "title": "ImmersiveSpaceContent",
        "url": "https://developer.apple.com/documentation/swiftui/immersivespacecontent",
        "html": "Topics\nCreating immersive space content\nvar body: Self.Body\n\nRequired\n\nassociatedtype Body : ImmersiveSpaceContent\n\nRequired\n\nRelationships\nConforming Types\nImmersiveSpaceViewContent\nSee Also\nSupporting types\nstruct ImmersiveSpaceViewContent\nImmersive space content that uses a SwiftUI view hierarchy as the content.\nBeta"
    },
    {
        "title": "defaultCustomization()",
        "url": "https://developer.apple.com/documentation/swiftui/customizabletoolbarcontent/defaultcustomization()",
        "html": "Discussion\n\nUse the defaultCustomization(_:options:) modifier providing either a defaultVisibility or options instead.\n\nSee Also\nUsing default options\nfunc defaultCustomization(Visibility, options: ToolbarCustomizationOptions) -> some CustomizableToolbarContent\nConfigures the way customizable toolbar items with the default behavior behave."
    },
    {
        "title": "transaction",
        "url": "https://developer.apple.com/documentation/swiftui/binding/transaction",
        "html": "Discussion\n\nThe transaction captures the information needed to update the view when the binding value changes.\n\nSee Also\nManaging changes\nvar id: Value.ID\nThe stable identity of the entity associated with this instance, corresponding to the id of the binding\u2019s wrapped value.\nAvailable when Value conforms to Identifiable.\nfunc animation(Animation?) -> Binding<Value>\nSpecifies an animation to perform when the binding value changes.\nfunc transaction(Transaction) -> Binding<Value>\nSpecifies a transaction for the binding."
    },
    {
        "title": "init(wrappedValue:)",
        "url": "https://developer.apple.com/documentation/swiftui/state/init(wrappedvalue:)",
        "html": "Parameters\nvalue\n\nAn initial value to store in the state property.\n\nDiscussion\n\nYou don\u2019t call this initializer directly. Instead, SwiftUI calls it for you when you declare a property with the @State attribute and provide an initial value:\n\nstruct MyView: View {\n    @State private var isPlaying: Bool = false\n\n\n    // ...\n}\n\n\nSwiftUI initializes the state\u2019s storage only once for each container instance that you declare. In the above code, SwiftUI creates isPlaying only the first time it initializes a particular instance of MyView. On the other hand, each instance of MyView creates a distinct instance of the state. For example, each of the views in the following VStack has its own isPlaying value:\n\nvar body: some View {\n    VStack {\n        MyView()\n        MyView()\n    }\n}\n\nSee Also\nCreating a state\ninit(initialValue: Value)\nCreates a state property that stores an initial value.\ninit()\nCreates a state property without an initial value.\nAvailable when Value conforms to ExpressibleByNilLiteral."
    },
    {
        "title": "FocusState.Binding",
        "url": "https://developer.apple.com/documentation/swiftui/focusstate/binding",
        "html": "Topics\nInspecting the binding\nvar projectedValue: FocusState<Value>.Binding\nA projection of the binding value that returns a binding.\nvar wrappedValue: Value\nThe underlying value referenced by the bound property.\nSee Also\nInspecting the focus state\nvar projectedValue: FocusState<Value>.Binding\nA projection of the focus state value that returns a binding.\nvar wrappedValue: Value\nThe current state value, taking into account whatever bindings might be in effect due to the current location of focus."
    },
    {
        "title": "configurationDisplayName(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/widgetconfiguration/configurationdisplayname(_:)-2c3zv",
        "html": "Parameters\ndisplayName\n\nA string describing the widget.\n\nReturn Value\n\nA widget configuration that includes a descriptive name for the widget.\n\nSee Also\nSetting a name\nfunc configurationDisplayName(Text) -> some WidgetConfiguration\nSets the name shown for a widget when a user adds or edits it using the contents of a text view.\nfunc configurationDisplayName(LocalizedStringKey) -> some WidgetConfiguration\nSets the localized name shown for a widget when a user adds or edits the widget."
    },
    {
        "title": "configurationDisplayName(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/widgetconfiguration/configurationdisplayname(_:)-3sbn4",
        "html": "Parameters\ndisplayName\n\nA text view containing a localized string to display.\n\nReturn Value\n\nA widget configuration with a descriptive name for the widget.\n\nSee Also\nSetting a name\nfunc configurationDisplayName<S>(S) -> some WidgetConfiguration\nSets the name shown for a widget when a user adds or edits it using the specified string.\nfunc configurationDisplayName(LocalizedStringKey) -> some WidgetConfiguration\nSets the localized name shown for a widget when a user adds or edits the widget."
    },
    {
        "title": "destructiveAction",
        "url": "https://developer.apple.com/documentation/swiftui/toolbaritemplacement/destructiveaction",
        "html": "Discussion\n\nDestructive actions represent the opposite of a confirmation action. For example, a button labeled \u201cDon\u2019t Save\u201d that allows the user to discard unsaved changes to a document before quitting.\n\nIn macOS and in Mac Catalyst apps, the system places destructiveAction items in the leading edge of the sheet and gives them a special appearance to caution against accidental use.\n\nIn iOS, tvOS, and watchOS, the system places destructiveAction items in the trailing edge of the navigation bar.\n\nSee Also\nGetting placement for specific actions\nstatic let primaryAction: ToolbarItemPlacement\nThe item represents a primary action.\nstatic let secondaryAction: ToolbarItemPlacement\nThe item represents a secondary action.\nstatic let confirmationAction: ToolbarItemPlacement\nThe item represents a confirmation action for a modal interface.\nstatic let cancellationAction: ToolbarItemPlacement\nThe item represents a cancellation action for a modal interface.\nstatic let navigation: ToolbarItemPlacement\nThe item represents a navigation action."
    },
    {
        "title": "inlineLarge",
        "url": "https://developer.apple.com/documentation/swiftui/toolbartitledisplaymode/inlinelarge",
        "html": "Discussion\n\nIn iOS, this behavior displays the title as large inside the toolbar and moves any leading or centered toolbar items into the overflow menu of the toolbar. This has no effect in macOS.\n\nSee Also\nGetting display modes\nstatic var automatic: ToolbarTitleDisplayMode\nThe automatic mode.\nstatic var inline: ToolbarTitleDisplayMode\nThe inline mode.\nstatic var large: ToolbarTitleDisplayMode\nThe large mode."
    },
    {
        "title": "navigationStack",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarrole/navigationstack",
        "html": "Discussion\n\nUse this role for content that can be pushed and popped.\n\nSee Also\nBehavior-specific roles\nstatic var browser: ToolbarRole\nThe browser role.\nstatic var editor: ToolbarRole\nThe editor role."
    },
    {
        "title": "buildExpression(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildexpression(_:)-5z4fa",
        "html": "See Also\nBuilding conditional toolbar content\nstatic func buildIf<Content>(Content?) -> Content?\nstatic func buildIf<Content>(Content?) -> Content?\nstatic func buildEither<TrueContent, FalseContent>(first: TrueContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildEither<TrueContent, FalseContent>(first: TrueContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildEither<TrueContent, FalseContent>(second: FalseContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildEither<TrueContent, FalseContent>(second: FalseContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildLimitedAvailability<Content>(Content) -> some ToolbarContent\nstatic func buildLimitedAvailability<Content>(Content) -> some CustomizableToolbarContent"
    },
    {
        "title": "init(id:for:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/immersivespace/init(id:for:content:)-6i5bn",
        "html": "Parameters\nid\n\nA string that uniquely identifies the immersive space. Ensure that identifiers are unique among the immersive spaces in your app.\n\ntype\n\nThe type of presented data this immersive space accepts.\n\ncontent\n\nA view builder that defines the content for each instance of the immersive space. The closure receives a binding to the value that you pass to the openImmersiveSpace action when you use it to open an immersive space. The system automatically persists and restores the value of this binding during state restoration.\n\nDiscussion\n\nThe immersive space uses the specified view as a template to form the content of the space. Your app invokes this initializer when it presents a value of the specified type using the openImmersiveSpace action.\n\nSee Also\nCreating a data-driven immersive space\ninit(for: Data.Type, content: (Binding<Data?>) -> Content)\nCreates the immersive space for a specified type of presented data.\nBeta\ninit<V>(for: Data.Type, content: (Binding<Data?>) -> V)\nCreates the immersive space for a specified type of presented data using view-based content.\nAvailable when Content conforms to ImmersiveSpaceContent, Data conforms to Decodable, Data conforms to Encodable, and Data conforms to Hashable.\nBeta\ninit(id: String, for: Data.Type, content: (Binding<Data?>) -> Content)\nCreates the immersive space associated with an identifier for a specified type of presented data.\nBeta"
    },
    {
        "title": "init(for:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/immersivespace/init(for:content:)-2lwds",
        "html": "Parameters\ntype\n\nThe type of presented data this immersive space accepts.\n\ncontent\n\nA view builder that defines the content for each instance of the immersive space. The closure receives a binding to the value that you pass to the openImmersiveSpace action when you use it to open an immersive space. The system automatically persists and restores the value of this binding during state restoration.\n\nDiscussion\n\nThe immersive space uses the specified view as a template to form the content of the space. Your app invokes this initializer when it presents a value of the specified type using the openImmersiveSpace action.\n\nSee Also\nCreating a data-driven immersive space\ninit(for: Data.Type, content: (Binding<Data?>) -> Content)\nCreates the immersive space for a specified type of presented data.\nBeta\ninit(id: String, for: Data.Type, content: (Binding<Data?>) -> Content)\nCreates the immersive space associated with an identifier for a specified type of presented data.\nBeta\ninit<V>(id: String, for: Data.Type, content: (Binding<Data?>) -> V)\nCreates the immersive space associated with an identifier for a specified type of presented data using view-based content.\nAvailable when Content conforms to ImmersiveSpaceContent, Data conforms to Decodable, Data conforms to Encodable, and Data conforms to Hashable.\nBeta"
    },
    {
        "title": "body",
        "url": "https://developer.apple.com/documentation/swiftui/widgetconfiguration/body-swift.property",
        "html": "Required\n\nSee Also\nImplementing a widget\nassociatedtype Body : WidgetConfiguration\nThe type of widget configuration representing the body of this configuration.\n\nRequired"
    },
    {
        "title": "init(id:for:content:defaultValue:)",
        "url": "https://developer.apple.com/documentation/swiftui/immersivespace/init(id:for:content:defaultvalue:)-2v7qr",
        "html": "Parameters\nid\n\nA string that uniquely identifies the immersive space. Ensure that identifiers are unique among the immersive spaces in your app.\n\ntype\n\nThe type of presented data this immersive space accepts.\n\ncontent\n\nA view builder that defines the content for each instance of the immersive space. The closure receives a binding to the value that you pass to the openImmersiveSpace action when you use it to open an immersive space. The system automatically persists and restores the value of this binding during state restoration.\n\ndefaultValue\n\nA closure that returns a value that SwiftUI presents when it doesn\u2019t receive one from you, like when you call the openImmersiveSpace action without providing a value.\n\nDiscussion\n\nThe immersive space uses the specified view as a template to form the content of the space. Your app invokes this initializer when it presents a value of the specified type using the openImmersiveSpace action.\n\nSee Also\nProviding default data to an immersive space\ninit(for: Data.Type, content: (Binding<Data>) -> Content, defaultValue: () -> Data)\nCreates an immersive space.\nBeta\ninit<V>(for: Data.Type, content: (Binding<Data>) -> V, defaultValue: () -> Data)\nCreates an immersive space for a specified type of presented data and a default value if the data is not set.\nAvailable when Content conforms to ImmersiveSpaceContent, Data conforms to Decodable, Data conforms to Encodable, and Data conforms to Hashable.\nBeta\ninit(id: String, for: Data.Type, content: (Binding<Data>) -> Content, defaultValue: () -> Data)\nCreates the immersive space associated with an identifier for a specified type of presented data, and a default value, if the data is not set.\nBeta"
    },
    {
        "title": "init(id:placement:showsByDefault:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbaritem/init(id:placement:showsbydefault:content:)",
        "html": "Parameters\nid\n\nA unique identifier for this item.\n\nplacement\n\nWhich section of the toolbar the item should be placed in.\n\nshowsByDefault\n\nWhether the item appears by default in the toolbar, or only shows if the user explicitly adds it via customization.\n\ncontent\n\nThe content of the item.\n\nSee Also\nCreating a toolbar item\ninit(placement: ToolbarItemPlacement, content: () -> Content)\nCreates a toolbar item with the specified placement and content.\nAvailable when ID is () and Content conforms to View.\ninit(id: String, placement: ToolbarItemPlacement, content: () -> Content)\nCreates a toolbar item with the specified placement and content, which allows for user customization.\nAvailable when ID is String and Content conforms to View."
    },
    {
        "title": "Body",
        "url": "https://developer.apple.com/documentation/swiftui/widgetconfiguration/body-swift.associatedtype",
        "html": "Required\n\nDiscussion\n\nWhen you create a custom widget, Swift infers this type from your implementation of the required body property.\n\nSee Also\nImplementing a widget\nvar body: Self.Body\nThe content and behavior of this widget.\n\nRequired"
    },
    {
        "title": "Body",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontent/body-swift.associatedtype",
        "html": "Required\n\nSee Also\nImplementing toolbar content\nvar body: Self.Body\nThe composition of content that comprise the toolbar content.\n\nRequired"
    },
    {
        "title": "buildExpression(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildexpression(_:)-76w0r",
        "html": "See Also\nBuilding conditional toolbar content\nstatic func buildIf<Content>(Content?) -> Content?\nstatic func buildIf<Content>(Content?) -> Content?\nstatic func buildEither<TrueContent, FalseContent>(first: TrueContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildEither<TrueContent, FalseContent>(first: TrueContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildEither<TrueContent, FalseContent>(second: FalseContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildEither<TrueContent, FalseContent>(second: FalseContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildLimitedAvailability<Content>(Content) -> some ToolbarContent\nstatic func buildLimitedAvailability<Content>(Content) -> some CustomizableToolbarContent"
    },
    {
        "title": "editor",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarrole/editor",
        "html": "Discussion\n\nUse this role for a toolbar that primarily displays controls geared towards editing document-like content. In iPadOS, this will leading align the navigation title, allow for toolbar items to occupy the center of the navigation bar, and provide a custom appearance for any back button present in the toolbar.\n\nSee Also\nBehavior-specific roles\nstatic var browser: ToolbarRole\nThe browser role.\nstatic var navigationStack: ToolbarRole\nThe navigationStack role."
    },
    {
        "title": "init(id:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarplacement/init(id:)",
        "html": "Deprecated\n\nUse init(id:) instead."
    },
    {
        "title": "contentType",
        "url": "https://developer.apple.com/documentation/swiftui/filedocumentreadconfiguration/contenttype",
        "html": "See Also\nReading the content\nlet file: FileWrapper\nThe file wrapper containing the document content."
    },
    {
        "title": "Visibility.visible",
        "url": "https://developer.apple.com/documentation/swiftui/visibility/visible",
        "html": "Discussion\n\nSome APIs may use this value to represent a hint or preference, rather than a mandatory assertion. For example, setting list row separator visibility to visible using the listRowSeparator(_:edges:) modifier may not always result in any visible separators, especially for list styles that do not include separators as part of their design.\n\nSee Also\nGetting visibility options\ncase automatic\nThe element may be visible or hidden depending on the policies of the component accepting the visibility configuration.\ncase hidden\nThe element may be hidden."
    },
    {
        "title": "browser",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarrole/browser",
        "html": "Discussion\n\nUse this role for content that can be navigated forwards and backwards. In iPadOS, this will leading align the navigation title and allow for toolbar items to occupy the center of the navigation bar.\n\nSee Also\nBehavior-specific roles\nstatic var editor: ToolbarRole\nThe editor role.\nstatic var navigationStack: ToolbarRole\nThe navigationStack role."
    },
    {
        "title": "bottomOrnament",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarplacement/bottomornament",
        "html": "See Also\nGetting placements\nstatic var automatic: ToolbarPlacement\nThe primary toolbar.\nstatic func accessoryBar<ID>(id: ID) -> ToolbarPlacement\nCreates a unique accessory bar placement.\nstatic var bottomBar: ToolbarPlacement\nThe bottom toolbar of an app.\nstatic var navigationBar: ToolbarPlacement\nThe navigation bar of an app.\nstatic var tabBar: ToolbarPlacement\nThe tab bar of an app.\nstatic var windowToolbar: ToolbarPlacement\nThe window toolbar of an app."
    },
    {
        "title": "buildBlock(_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildblock(_:_:_:)-11axj",
        "html": "See Also\nBuilding customizable toolbar content\nstatic func buildBlock<Content>(Content) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1>(C0, C1) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some CustomizableToolbarContent"
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildblock(_:_:_:_:_:_:_:_:_:)-6pokm",
        "html": "See Also\nBuilding toolbar content\nstatic func buildBlock<Content>(Content) -> some ToolbarContent\nstatic func buildBlock<C0, C1>(C0, C1) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some ToolbarContent"
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildblock(_:_:_:_:_:_:_:)-6f1h8",
        "html": "See Also\nBuilding toolbar content\nstatic func buildBlock<Content>(Content) -> some ToolbarContent\nstatic func buildBlock<C0, C1>(C0, C1) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some ToolbarContent"
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildblock(_:_:_:_:_:_:)-5vqsj",
        "html": "See Also\nBuilding toolbar content\nstatic func buildBlock<Content>(Content) -> some ToolbarContent\nstatic func buildBlock<C0, C1>(C0, C1) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some ToolbarContent"
    },
    {
        "title": "navigationBarTrailing",
        "url": "https://developer.apple.com/documentation/swiftui/toolbaritemplacement/navigationbartrailing",
        "html": "Deprecated\n\nUse topBarTrailing instead.\n\nSee Also\nDeprecated symbols\ninit<ID>(id: ID)\nCreates a custom accessory bar item placement.\nDeprecated\nstatic let navigationBarLeading: ToolbarItemPlacement\nPlaces the item in the leading edge of the navigation bar.\nDeprecated"
    },
    {
        "title": "buildBlock(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildblock(_:)-v03j",
        "html": "See Also\nBuilding customizable toolbar content\nstatic func buildBlock<C0, C1>(C0, C1) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some CustomizableToolbarContent"
    },
    {
        "title": "navigationBar",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarplacement/navigationbar",
        "html": "See Also\nGetting placements\nstatic var automatic: ToolbarPlacement\nThe primary toolbar.\nstatic func accessoryBar<ID>(id: ID) -> ToolbarPlacement\nCreates a unique accessory bar placement.\nstatic var bottomBar: ToolbarPlacement\nThe bottom toolbar of an app.\nstatic var bottomOrnament: ToolbarPlacement\nThe bottom ornament of an app.\nBeta\nstatic var tabBar: ToolbarPlacement\nThe tab bar of an app.\nstatic var windowToolbar: ToolbarPlacement\nThe window toolbar of an app."
    },
    {
        "title": "buildBlock(_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildblock(_:_:)-5bq2u",
        "html": "See Also\nBuilding customizable toolbar content\nstatic func buildBlock<Content>(Content) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some CustomizableToolbarContent"
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildblock(_:_:_:_:_:_:_:_:_:_:)-51l35",
        "html": "See Also\nBuilding toolbar content\nstatic func buildBlock<Content>(Content) -> some ToolbarContent\nstatic func buildBlock<C0, C1>(C0, C1) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some ToolbarContent"
    },
    {
        "title": "containerBackgroundRemovable(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/widgetconfiguration/containerbackgroundremovable(_:)",
        "html": "Parameters\nisRemovable\n\nIf true, the widget supports removal of the container background in contexts that prefer no backgrounds. If false, the system doesn\u2019t remove the background.\n\nReturn Value\n\nA modified widget configuration.\n\nDiscussion\n\nIn most cases, mark the background container of a widget as removable to allow people to place the widget in as many contexts as possible. If you mark the background as nonremovable, the widget becomes ineligible in various contexts that require a removable background. For example, a small widget without a removable background doesn\u2019t appear in the widget gallery on the iPad Lock Screen.\n\nIf you mark a background as nonremovable, the system always displays the background container of the widget. Note that the background may render differently; for example, it can appear faded or desaturated.\n\nThis modifier has no effect on operation system versions prior to iOS 17, watchOS 10, or macOS 14.\n\nSee Also\nSetting the appearance\nfunc supportedFamilies([WidgetFamily]) -> some WidgetConfiguration\nSets the sizes that a widget supports.\nfunc contentMarginsDisabled() -> some WidgetConfiguration\nDisable default content margins.\nfunc disfavoredLocations([WidgetLocation], for: [WidgetFamily]) -> some WidgetConfiguration\nSets the disfavored locations for a widget."
    },
    {
        "title": "buildBlock(_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildblock(_:_:_:_:_:)-61jaj",
        "html": "See Also\nBuilding toolbar content\nstatic func buildBlock<Content>(Content) -> some ToolbarContent\nstatic func buildBlock<C0, C1>(C0, C1) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some ToolbarContent"
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildblock(_:_:_:_:_:_:_:_:)-7t10z",
        "html": "See Also\nBuilding toolbar content\nstatic func buildBlock<Content>(Content) -> some ToolbarContent\nstatic func buildBlock<C0, C1>(C0, C1) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some ToolbarContent"
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarplacement/automatic",
        "html": "Discussion\n\nDepending on the context, this may refer to the navigation bar of an app on iOS, or watchOS, the tab bar of an app on tvOS, or the window toolbar of an app on macOS.\n\nSee Also\nGetting placements\nstatic func accessoryBar<ID>(id: ID) -> ToolbarPlacement\nCreates a unique accessory bar placement.\nstatic var bottomBar: ToolbarPlacement\nThe bottom toolbar of an app.\nstatic var bottomOrnament: ToolbarPlacement\nThe bottom ornament of an app.\nBeta\nstatic var navigationBar: ToolbarPlacement\nThe navigation bar of an app.\nstatic var tabBar: ToolbarPlacement\nThe tab bar of an app.\nstatic var windowToolbar: ToolbarPlacement\nThe window toolbar of an app."
    },
    {
        "title": "buildBlock(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildblock(_:_:_:_:)-59oav",
        "html": "See Also\nBuilding toolbar content\nstatic func buildBlock<Content>(Content) -> some ToolbarContent\nstatic func buildBlock<C0, C1>(C0, C1) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some ToolbarContent"
    },
    {
        "title": "bottomBar",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarplacement/bottombar",
        "html": "See Also\nGetting placements\nstatic var automatic: ToolbarPlacement\nThe primary toolbar.\nstatic func accessoryBar<ID>(id: ID) -> ToolbarPlacement\nCreates a unique accessory bar placement.\nstatic var bottomOrnament: ToolbarPlacement\nThe bottom ornament of an app.\nBeta\nstatic var navigationBar: ToolbarPlacement\nThe navigation bar of an app.\nstatic var tabBar: ToolbarPlacement\nThe tab bar of an app.\nstatic var windowToolbar: ToolbarPlacement\nThe window toolbar of an app."
    },
    {
        "title": "buildBlock(_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildblock(_:_:_:)-7ansp",
        "html": "See Also\nBuilding toolbar content\nstatic func buildBlock<Content>(Content) -> some ToolbarContent\nstatic func buildBlock<C0, C1>(C0, C1) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some ToolbarContent"
    },
    {
        "title": "buildBlock(_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildblock(_:_:)-1fjnr",
        "html": "See Also\nBuilding toolbar content\nstatic func buildBlock<Content>(Content) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some ToolbarContent"
    },
    {
        "title": "LocalizedStringKey",
        "url": "https://developer.apple.com/documentation/SwiftUI/LocalizedStringKey",
        "html": "Overview\n\nInitializers for several SwiftUI types \u2013 such as Text, Toggle, Picker and others \u2013 implicitly look up a localized string when you provide a string literal. When you use the initializer Text(\"Hello\"), SwiftUI creates a LocalizedStringKey for you and uses that to look up a localization of the Hello string. This works because LocalizedStringKey conforms to ExpressibleByStringLiteral.\n\nTypes whose initializers take a LocalizedStringKey usually have a corresponding initializer that accepts a parameter that conforms to StringProtocol. Passing a String variable to these initializers avoids localization, which is usually appropriate when the variable contains a user-provided value.\n\nAs a general rule, use a string literal argument when you want localization, and a string variable argument when you don\u2019t. In the case where you want to localize the value of a string variable, use the string to create a new LocalizedStringKey instance.\n\nThe following example shows how to create Text instances both with and without localization. The title parameter provided to the Section is a literal string, so SwiftUI creates a LocalizedStringKey for it. However, the string entries in the messageStore.today array are String variables, so the Text views in the list use the string values verbatim.\n\nList {\n    Section(header: Text(\"Today\")) {\n        ForEach(messageStore.today) { message in\n            Text(message.title)\n        }\n    }\n}\n\n\nIf the app is localized into Japanese with the following translation of its Localizable.strings file:\n\n\"Today\" = \"\u4eca\u65e5\";\n\n\nWhen run in Japanese, the example produces a list like the following, localizing \u201cToday\u201d for the section header, but not the list items.\n\nTopics\nCreating a key from a literal value\ninit(String)\nCreates a localized string key from the given string value.\ninit(stringLiteral: String)\nCreates a localized string key from the given string literal.\nCreating a key from an interpolation\ninit(stringInterpolation: LocalizedStringKey.StringInterpolation)\nCreates a localized string key from the given string interpolation.\nstruct StringInterpolation\nRepresents the contents of a string literal with interpolations while it\u2019s being built, for use in creating a localized string key.\nRelationships\nConforms To\nEquatable\nExpressibleByExtendedGraphemeClusterLiteral\nExpressibleByStringInterpolation\nExpressibleByStringLiteral\nExpressibleByUnicodeScalarLiteral\nSee Also\nLocalizing text\nPreparing views for localization\nSpecify hints and add strings to localize your SwiftUI views.\nvar locale: Locale\nThe current locale that views should use.\nfunc typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View\nSpecifies the language for typesetting.\nfunc typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View\nSpecifies the language for typesetting.\nstruct TypesettingLanguage\nDefines how typesetting language is determined for text."
    },
    {
        "title": "accessoryBar(id:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbaritemplacement/accessorybar(id:)",
        "html": "Parameters\nid\n\nA unique identifier for this placement.\n\nDiscussion\n\nOn macOS, items with an accessory bar placement are placed in a section below the title bar and toolbar area of the window. Each separate identifier will correspond to a separate accessory bar that is added to this area.\n\nextension ToolbarItemPlacement {\n    static let favoritesBar = accessoryBar(id: \"com.example.favorites\")\n}\n...\nBrowserView()\n    .toolbar {\n        ToolbarItem(placement: .favoritesBar) {\n            FavoritesBar()\n        }\n    }\n\nSee Also\nGetting explicit placement\nstatic var topBarLeading: ToolbarItemPlacement\nPlaces the item in the leading edge of the top bar.\nstatic var topBarTrailing: ToolbarItemPlacement\nPlaces the item in the trailing edge of the top bar.\nstatic let bottomBar: ToolbarItemPlacement\nPlaces the item in the bottom toolbar.\nstatic let bottomOrnament: ToolbarItemPlacement\nPlaces the item in an ornament under the window.\nBeta\nstatic let keyboard: ToolbarItemPlacement\nThe item is placed in the keyboard section."
    },
    {
        "title": "description(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/widgetconfiguration/description(_:)-2bfr",
        "html": "Parameters\ndisplayName\n\nA string describing the widget.\n\nReturn Value\n\nA widget configuration with a description of the widget.\n\nSee Also\nSetting a description\nfunc description(Text) -> some WidgetConfiguration\nSets the description shown for a widget when a user adds or edits it using the contents of a text view.\nfunc description(LocalizedStringKey) -> some WidgetConfiguration\nSets the localized description shown for a widget when a user adds or edits the widget."
    },
    {
        "title": "strokeBorder(style:antialiased:)",
        "url": "https://developer.apple.com/documentation/swiftui/insettableshape/strokeborder(style:antialiased:)",
        "html": "See Also\nSetting the stroke border characteristics\nfunc strokeBorder<S>(S, lineWidth: CGFloat, antialiased: Bool) -> StrokeBorderShapeView<Self, S, EmptyView>\nReturns a view that is the result of filling the lineWidth-sized border (aka inner stroke) of self with content. This is equivalent to insetting self by lineWidth / 2 and stroking the resulting shape with lineWidth as the line-width.\nfunc strokeBorder<S>(S, lineWidth: CGFloat, antialiased: Bool) -> some View\nReturns a view that is the result of filling the lineWidth-sized border (aka inner stroke) of self with content. This is equivalent to insetting self by lineWidth / 2 and stroking the resulting shape with lineWidth as the line-width.\nfunc strokeBorder(lineWidth: CGFloat, antialiased: Bool) -> some View\nReturns a view that is the result of filling the lineWidth-sized border (aka inner stroke) of self with the foreground color. This is equivalent to insetting self by lineWidth / 2 and stroking the resulting shape with lineWidth as the line-width.\nfunc strokeBorder<S>(S, style: StrokeStyle, antialiased: Bool) -> StrokeBorderShapeView<Self, S, EmptyView>\nReturns a view that is the result of insetting self by style.lineWidth / 2, stroking the resulting shape with style, and then filling with content.\nfunc strokeBorder<S>(S, style: StrokeStyle, antialiased: Bool) -> some View\nReturns a view that is the result of insetting self by style.lineWidth / 2, stroking the resulting shape with style, and then filling with content."
    },
    {
        "title": "keyboard",
        "url": "https://developer.apple.com/documentation/swiftui/toolbaritemplacement/keyboard",
        "html": "Discussion\n\nOn iOS, keyboard items are above the software keyboard when present, or at the bottom of the screen when a hardware keyboard is attached.\n\nOn macOS, keyboard items will be placed inside the Touch Bar.\n\nA FocusedValuecan be used to adjust the content of the keyboard bar based on the currently focused view. In the example below, the keyboard bar gains additional buttons only when the appropriate TextField is focused.\n\nenum Field {\n    case suit\n    case rank\n}\n\n\nstruct KeyboardBarDemo : View {\n    @FocusedValue(\\.field) var field: Field?\n\n\n    var body: some View {\n        HStack {\n            TextField(\"Suit\", text: $suitText)\n                .focusedValue(\\.field, .suit)\n            TextField(\"Rank\", text: $rankText)\n                .focusedValue(\\.field, .rank)\n        }\n        .toolbar {\n            ToolbarItemGroup(placement: .keyboard) {\n                if field == .suit {\n                    Button(\"\u2663\ufe0f\", action: {})\n                    Button(\"\u2665\ufe0f\", action: {})\n                    Button(\"\u2660\ufe0f\", action: {})\n                    Button(\"\u2666\ufe0f\", action: {})\n                }\n                DoneButton()\n            }\n        }\n    }\n}\n\nSee Also\nGetting explicit placement\nstatic var topBarLeading: ToolbarItemPlacement\nPlaces the item in the leading edge of the top bar.\nstatic var topBarTrailing: ToolbarItemPlacement\nPlaces the item in the trailing edge of the top bar.\nstatic let bottomBar: ToolbarItemPlacement\nPlaces the item in the bottom toolbar.\nstatic let bottomOrnament: ToolbarItemPlacement\nPlaces the item in an ornament under the window.\nBeta\nstatic func accessoryBar<ID>(id: ID) -> ToolbarItemPlacement\nCreates a unique accessory bar placement."
    },
    {
        "title": "buildBlock(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildblock(_:)-p2yj",
        "html": "See Also\nBuilding toolbar content\nstatic func buildBlock<C0, C1>(C0, C1) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some ToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some ToolbarContent"
    },
    {
        "title": "strokeBorder(_:style:antialiased:)",
        "url": "https://developer.apple.com/documentation/swiftui/insettableshape/strokeborder(_:style:antialiased:)-1mblf",
        "html": "See Also\nSetting the stroke border characteristics\nfunc strokeBorder<S>(S, lineWidth: CGFloat, antialiased: Bool) -> StrokeBorderShapeView<Self, S, EmptyView>\nReturns a view that is the result of filling the lineWidth-sized border (aka inner stroke) of self with content. This is equivalent to insetting self by lineWidth / 2 and stroking the resulting shape with lineWidth as the line-width.\nfunc strokeBorder<S>(S, lineWidth: CGFloat, antialiased: Bool) -> some View\nReturns a view that is the result of filling the lineWidth-sized border (aka inner stroke) of self with content. This is equivalent to insetting self by lineWidth / 2 and stroking the resulting shape with lineWidth as the line-width.\nfunc strokeBorder(lineWidth: CGFloat, antialiased: Bool) -> some View\nReturns a view that is the result of filling the lineWidth-sized border (aka inner stroke) of self with the foreground color. This is equivalent to insetting self by lineWidth / 2 and stroking the resulting shape with lineWidth as the line-width.\nfunc strokeBorder<S>(S, style: StrokeStyle, antialiased: Bool) -> some View\nReturns a view that is the result of insetting self by style.lineWidth / 2, stroking the resulting shape with style, and then filling with content.\nfunc strokeBorder(style: StrokeStyle, antialiased: Bool) -> some View\nReturns a view that is the result of insetting self by style.lineWidth / 2, stroking the resulting shape with style, and then filling with the foreground color."
    },
    {
        "title": "bottomOrnament",
        "url": "https://developer.apple.com/documentation/swiftui/toolbaritemplacement/bottomornament",
        "html": "See Also\nGetting explicit placement\nstatic var topBarLeading: ToolbarItemPlacement\nPlaces the item in the leading edge of the top bar.\nstatic var topBarTrailing: ToolbarItemPlacement\nPlaces the item in the trailing edge of the top bar.\nstatic let bottomBar: ToolbarItemPlacement\nPlaces the item in the bottom toolbar.\nstatic let keyboard: ToolbarItemPlacement\nThe item is placed in the keyboard section.\nstatic func accessoryBar<ID>(id: ID) -> ToolbarItemPlacement\nCreates a unique accessory bar placement."
    },
    {
        "title": "description(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/widgetconfiguration/description(_:)-4q9pa",
        "html": "Parameters\ndescriptionKey\n\nThe key for the localized description to display.\n\nReturn Value\n\nA widget configuration with a description of the widget.\n\nSee Also\nSetting a description\nfunc description(Text) -> some WidgetConfiguration\nSets the description shown for a widget when a user adds or edits it using the contents of a text view.\nfunc description<S>(S) -> some WidgetConfiguration\nSets the description shown for a widget when a user adds or edits it using the specified string."
    },
    {
        "title": "InsetShape",
        "url": "https://developer.apple.com/documentation/swiftui/insettableshape/insetshape",
        "html": "Required\n\nSee Also\nSetting the inset\nfunc inset(by: CGFloat) -> Self.InsetShape\nReturns self inset by amount.\n\nRequired"
    },
    {
        "title": "badge(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/badge(_:)-8adyq",
        "html": "Parameters\ncount\n\nAn integer value to display in the badge. Set the value to zero to hide the badge.\n\nDiscussion\n\nUse a badge to convey optional, supplementary information about a view. Keep the contents of the badge as short as possible. Badges appear only in list rows, tab bars, and menus.\n\nThe following example shows a List with the value of recentItems.count represented by a badge on one of the rows:\n\nList {\n    Text(\"Recents\")\n        .badge(recentItems.count)\n    Text(\"Favorites\")\n}\n\n\nSee Also\nDisplaying a badge on a list item\nfunc badge(Text?) -> some View\nGenerates a badge for the view from a text view.\nfunc badge<S>(S?) -> some View\nGenerates a badge for the view from a string.\nfunc badge(LocalizedStringKey?) -> some View\nGenerates a badge for the view from a localized string key.\nfunc badgeProminence(BadgeProminence) -> some View\nSpecifies the prominence of badges created by this view.\nvar badgeProminence: BadgeProminence\nThe prominence to apply to badges associated with this environment.\nstruct BadgeProminence\nThe visual prominence of a badge."
    },
    {
        "title": "swipeActions(edge:allowsFullSwipe:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/swipeactions(edge:allowsfullswipe:content:)",
        "html": "Parameters\nedge\n\nThe edge of the view to associate the swipe actions with. The default is HorizontalEdge.trailing.\n\nallowsFullSwipe\n\nA Boolean value that indicates whether a full swipe automatically performs the first action. The default is true.\n\ncontent\n\nThe content of the swipe actions.\n\nDiscussion\n\nUse this method to add swipe actions to a view that acts as a row in a list. Indicate the HorizontalEdge where the swipe action originates, and define individual actions with Button instances. For example, if you have a list of messages, you can add an action to toggle a message as unread on a swipe from the leading edge, and actions to delete or flag messages on a trailing edge swipe:\n\nList {\n    ForEach(store.messages) { message in\n        MessageCell(message: message)\n            .swipeActions(edge: .leading) {\n                Button { store.toggleUnread(message) } label: {\n                    if message.isUnread {\n                        Label(\"Read\", systemImage: \"envelope.open\")\n                    } else {\n                        Label(\"Unread\", systemImage: \"envelope.badge\")\n                    }\n                }\n            }\n            .swipeActions(edge: .trailing) {\n                Button(role: .destructive) {\n                    store.delete(message)\n                } label: {\n                    Label(\"Delete\", systemImage: \"trash\")\n                }\n                Button { store.flag(message) } label: {\n                    Label(\"Flag\", systemImage: \"flag\")\n                }\n            }\n        }\n    }\n}\n\n\nActions appear in the order you list them, starting from the swipe\u2019s originating edge. In the example above, the Delete action appears closest to the screen\u2019s trailing edge:\n\nFor labels or images that appear in swipe actions, SwiftUI automatically applies the fill symbol variant, as shown above.\n\nBy default, the user can perform the first action for a given swipe direction with a full swipe. For the example above, the user can perform both the toggle unread and delete actions with full swipes. You can opt out of this behavior for an edge by setting the allowsFullSwipe parameter to false. For example, you can disable the full swipe on the leading edge:\n\n.swipeActions(edge: .leading, allowsFullSwipe: false) {\n    Button { store.toggleUnread(message) } label: {\n        if message.isUnread {\n            Label(\"Read\", systemImage: \"envelope.open\")\n        } else {\n            Label(\"Unread\", systemImage: \"envelope.badge\")\n        }\n    }\n}\n\n\nWhen you set a role for a button using one of the values from the ButtonRole enumeration, SwiftUI styles the button according to its role. In the example above, the delete action appears in red because it has the destructive role. If you want to set a different color \u2014 for example, to match the overall theme of your app\u2019s UI \u2014 add the View/tint(_:) modifier to the button:\n\nMessageCell(message: message)\n    .swipeActions(edge: .leading) {\n        Button { store.toggleUnread(message) } label: {\n            if message.isUnread {\n                Label(\"Read\", systemImage: \"envelope.open\")\n            } else {\n                Label(\"Unread\", systemImage: \"envelope.badge\")\n            }\n        }\n        .tint(.blue)\n    }\n    .swipeActions(edge: .trailing) {\n        Button(role: .destructive) { store.delete(message) } label: {\n            Label(\"Delete\", systemImage: \"trash\")\n        }\n        Button { store.flag(message) } label: {\n            Label(\"Flag\", systemImage: \"flag\")\n        }\n        .tint(.orange)\n    }\n\n\nThe modifications in the code above make the toggle unread action blue and the flag action orange:\n\nWhen you add swipe actions, SwiftUI no longer synthesizes the Delete actions that otherwise appear when using the ForEach/onDelete(perform:) method on a ForEach instance. You become responsible for creating a Delete action, if appropriate, among your swipe actions.\n\nActions accumulate for a given edge if you call the modifier multiple times on the same list row view.\n\nSee Also\nConfiguring interaction\nfunc selectionDisabled(Bool) -> some View\nAdds a condition that controls whether users can select this view."
    },
    {
        "title": "listRowSeparator(_:edges:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/listrowseparator(_:edges:)",
        "html": "Parameters\nvisibility\n\nThe visibility of this row\u2019s separators.\n\nedges\n\nThe set of row edges for which this preference applies. The list style might already decide to not display separators for some edges, typically the top edge. The default is all.\n\nDiscussion\n\nSeparators can be presented above and below a row. You can specify to which edge this preference should apply.\n\nThis modifier expresses a preference to the containing List. The list style is the final arbiter of the separator visibility.\n\nThe following example shows a simple grouped list whose row separators are hidden:\n\nList {\n    ForEach(garage.cars) { car in\n        Text(car.model)\n            .listRowSeparator(.hidden)\n    }\n}\n.listStyle(.grouped)\n\n\nTo change the color of a row separators, use listRowSeparatorTint(_:edges:). To hide or change the tint color for a section separators, use listSectionSeparator(_:edges:) and listSectionSeparatorTint(_:edges:).\n\nSee Also\nConfiguring separators\nfunc listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View\nSets the tint color associated with a row.\nfunc listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View\nSets the tint color associated with a section.\nfunc listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View\nSets whether to hide the separator associated with a list section."
    },
    {
        "title": "ImmersiveSpaceViewContent",
        "url": "https://developer.apple.com/documentation/swiftui/immersivespaceviewcontent",
        "html": "Overview\n\nYou don\u2019t create this type directly. SwiftUI creates it when you construct an ImmersiveSpace with view-based content.\n\nRelationships\nConforms To\nImmersiveSpaceContent\nSee Also\nSupporting types\nprotocol ImmersiveSpaceContent\nA type that you can use as the content of an immersive space.\nBeta"
    },
    {
        "title": "scrollPosition(id:anchor:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/scrollposition(id:anchor:)",
        "html": "Discussion\n\nUse this modifier along with the View/scrollTargetLayout() modifier to know the identity of the view that is actively scrolled. As the scroll view scrolls, the binding will be updated with the identity of the leading-most / top-most view.\n\nUse the View/scrollTargetLayout() modifier to configure which the layout that contains your scroll targets. In the following example, the top-most ItemView will update with the scrolledID binding as the scroll view scrolls.\n\n@Binding var items: [Item]\n@Binding var scrolledID: Item.ID?\n\n\nScrollView {\n    LazyVStack {\n        ForEach(items) { item in\n            ItemView(item)\n        }\n    }\n    .scrollTargetLayout()\n}\n.scrollPosition(id: $scrolledID)\n\n\nYou can write to the binding to scroll to the view with the provided identity.\n\n@Binding var items: [Item]\n@Binding var scrolledID: Item.ID?\n\n\nScrollView {\n    // ...\n}\n.scrollPosition(id: $scrolledID)\n.toolbar {\n    Button(\"Scroll to Top\") {\n        scrolledID = items.first\n    }\n}\n\n\nSwiftUI will attempt to keep the view with the identity specified in the provided binding when events occur that might cause it to be scrolled out of view by the system. Some examples of these include:\n\nThe data backing the content of a scroll view is re-ordered.\n\nThe size of the scroll view changes, like when a window is resized on macOS or during a rotation on iOS.\n\nThe scroll view initially lays out it content defaulting to the top most view, but the binding has a different view\u2019s identity.\n\nYou can provide an anchor to this modifier to both:\n\nInfluence which view the system chooses as the view whose identity value will update the providing binding as the scroll view scrolls.\n\nControl the alignment of the view when scrolling to a view when writing a new binding value.\n\nFor example, providing a value of bottom will prefer to have the bottom-most view chosen and prefer to scroll to views aligned to the bottom.\n\nSee Also\nManaging scroll position\nfunc defaultScrollAnchor(UnitPoint?) -> some View\nAssociates an anchor to control which part of the scroll view\u2019s content should be rendered by default."
    },
    {
        "title": "init(id:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/immersivespace/init(id:content:)-611tb",
        "html": "Parameters\nid\n\nA string that uniquely identifies the immersive space. Ensure that identifiers are unique among the immersive spaces in your app.\n\ncontent\n\nAn immersive space content builder that defines the content of the space.\n\nDiscussion\n\nThe space uses the specified content builder to form the content."
    },
    {
        "title": "listSectionSpacing(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/listsectionspacing(_:)-a2sn",
        "html": "Parameters\nspacing\n\nthe amount of spacing to apply.\n\nDiscussion\n\nThe following example creates a List with 5 pts of spacing between sections:\n\nList {\n    Section(\"Colors\") {\n        Text(\"Blue\")\n        Text(\"Red\")\n    }\n\n\n    Section(\"Shapes\") {\n        Text(\"Square\")\n        Text(\"Circle\")\n    }\n}\n.listSectionSpacing(5.0)\n\n\nSpacing can also be specified on a per-section basis. The following example creates a List with compact spacing for its second section:\n\nList {\n    Section(\"Colors\") {\n        Text(\"Blue\")\n        Text(\"Red\")\n    }\n\n\n    Section(\"Borders\") {\n        Text(\"Dashed\")\n        Text(\"Solid\")\n    }\n    .listSectionSpacing(.compact)\n\n\n    Section(\"Shapes\") {\n        Text(\"Square\")\n        Text(\"Circle\")\n    }\n}\n\n\nIf adjacent sections have different spacing value, the smaller value on the shared edge is used. Spacing specified inside the List is preferred over any List-wide value.\n\nSee Also\nConfiguring spacing\nfunc listRowSpacing(CGFloat?) -> some View\nSets the vertical spacing between two adjacent rows in a List.\nfunc listSectionSpacing(ListSectionSpacing) -> some View\nSets the spacing between adjacent sections in a List.\nstruct ListSectionSpacing\nThe spacing options between two adjacent sections in a list."
    },
    {
        "title": "init(content:)",
        "url": "https://developer.apple.com/documentation/swiftui/immersivespace/init(content:)-5di5z",
        "html": "Parameters\ncontent\n\nA view builder that defines the content for each instance of the immersive space.\n\nDiscussion\n\nThe immersive space uses the specified view as a template to form the content of the space."
    },
    {
        "title": "listItemTint(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/listitemtint(_:)-5ehdr",
        "html": "Parameters\ncolor\n\nThe color to use to tint the content, or nil to not override the inherited tint.\n\nDiscussion\n\nThis is equivalent to using a tint of ListItemTint.fixed(_:) with the provided tint color.\n\nThe containing list\u2019s style will apply that tint as appropriate. watchOS uses the tint color for its background platter appearance. Sidebars on iOS and macOS apply the tint color to their Label icons, which otherwise use the accent color by default.\n\nSee Also\nConfiguring rows\nfunc listRowInsets(EdgeInsets?) -> some View\nApplies an inset to the rows in a list.\nfunc listRowHoverEffect(HoverEffect?) -> some View\nRequests that the containing list row use the provided hover effect.\nBeta\nfunc listRowHoverEffectDisabled(Bool) -> some View\nRequests that the containing list row have its hover effect disabled.\nBeta\nfunc listItemTint(ListItemTint?) -> some View\nSets the tint effect for content in a list.\nstruct ListItemTint\nThe configuration of a tint effect applied to content within a List.\nvar defaultMinListRowHeight: CGFloat\nThe default minimum height of a row in a list."
    },
    {
        "title": "placeSubviews(in:proposal:subviews:cache:)",
        "url": "https://developer.apple.com/documentation/swiftui/layout/placesubviews(in:proposal:subviews:cache:)",
        "html": "Required\n\nParameters\nbounds\n\nThe region that the container view\u2019s parent allocates to the container view, specified in the parent\u2019s coordinate space. Place all the container\u2019s subviews within the region. The size of this region matches a size that your container previously returned from a call to the sizeThatFits(proposal:subviews:cache:) method.\n\nproposal\n\nThe size proposal from which the container generated the size that the parent used to create the bounds parameter. The parent might propose more than one size before calling the placement method, but it always uses one of the proposals and the corresponding returned size when placing the container.\n\nsubviews\n\nA collection of proxies that represent the views that the container arranges. Use the proxies in the collection to get information about the subviews and to tell the subviews where to appear.\n\ncache\n\nOptional storage for calculated data that you can share among the methods of your custom layout container. See makeCache(subviews:) for details.\n\nDiscussion\n\nSwiftUI calls your implementation of this method to tell your custom layout container to place its subviews. From this method, call the place(at:anchor:proposal:) method on each element in subviews to tell the subviews where to appear in the user interface.\n\nFor example, you can create a basic vertical stack that places views in a column, with views horizontally aligned on their leading edge:\n\nstruct BasicVStack: Layout {\n    func placeSubviews(\n        in bounds: CGRect,\n        proposal: ProposedViewSize,\n        subviews: Subviews,\n        cache: inout ()\n    ) {\n        var point = bounds.origin\n        for subview in subviews {\n            subview.place(at: point, anchor: .topLeading, proposal: .unspecified)\n            point.y += subview.dimensions(in: .unspecified).height\n        }\n    }\n\n\n    // This layout also needs a sizeThatFits() implementation.\n}\n\n\nThe example creates a placement point that starts at the origin of the specified bounds input and uses that to place the first subview. It then moves the point in the y dimension by the subview\u2019s height, which it reads using the dimensions(in:) method. This prepares the point for the next iteration of the loop. All subview operations use an unspecified size proposal to indicate that subviews should use and report their ideal size.\n\nA more complex layout container might add space between subviews according to their spacing preferences, or a fixed space based on input configuration. For example, you can extend the basic vertical stack\u2019s placement method to calculate the preferred distances between adjacent subviews and store the results in an array:\n\nlet spacing: [CGFloat] = subviews.indices.dropLast().map { index in\n    subviews[index].spacing.distance(\n        to: subviews[index + 1].spacing,\n        along: .vertical)\n}\n\n\nThe spacing\u2019s distance(to:along:) method considers the preferences of adjacent views on the edge where they meet. It returns the smallest distance that satisfies both views\u2019 preferences for the given edge. For example, if one view prefers at least 2 points on its bottom edge, and the next view prefers at least 8 points on its top edge, the distance method returns 8, because that\u2019s the smallest value that satisfies both preferences.\n\nUpdate the placement calculations to use the spacing values:\n\nvar point = bounds.origin\nfor (index, subview) in subviews.enumerated() {\n    if index > 0 { point.y += spacing[index - 1] } // Add spacing.\n    subview.place(at: point, anchor: .topLeading, proposal: .unspecified)\n    point.y += subview.dimensions(in: .unspecified).height\n}\n\n\nBe sure that you use computations during placement that are consistent with those in your implementation of other protocol methods for a given set of inputs. For example, if you add spacing during placement, make sure your implementation of sizeThatFits(proposal:subviews:cache:) accounts for the extra space. Similarly, if the sizing method returns different values for different size proposals, make sure the placement method responds to its proposal input in the same way.\n\nSee Also\nSizing the container and placing subviews\nfunc sizeThatFits(proposal: ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CGSize\nReturns the size of the composite view, given a proposed size and the view\u2019s subviews.\n\nRequired\n\ntypealias Subviews\nA collection of proxies for the subviews of a layout view."
    },
    {
        "title": "topBarTrailing",
        "url": "https://developer.apple.com/documentation/swiftui/toolbaritemplacement/topbartrailing",
        "html": "Discussion\n\nOn watchOS, iOS, and tvOS, the top bar is the navigation bar.\n\nSee Also\nGetting explicit placement\nstatic var topBarLeading: ToolbarItemPlacement\nPlaces the item in the leading edge of the top bar.\nstatic let bottomBar: ToolbarItemPlacement\nPlaces the item in the bottom toolbar.\nstatic let bottomOrnament: ToolbarItemPlacement\nPlaces the item in an ornament under the window.\nBeta\nstatic let keyboard: ToolbarItemPlacement\nThe item is placed in the keyboard section.\nstatic func accessoryBar<ID>(id: ID) -> ToolbarItemPlacement\nCreates a unique accessory bar placement."
    },
    {
        "title": "cancellationAction",
        "url": "https://developer.apple.com/documentation/swiftui/toolbaritemplacement/cancellationaction",
        "html": "Discussion\n\nCancellation actions dismiss the modal interface without taking any action, usually by tapping or clicking a Cancel button.\n\nIn macOS and in Mac Catalyst apps, the system places cancellationAction items on the trailing edge of the sheet but places them before any confirmationAction items.\n\nIn iOS, iPadOS, tvOS, and watchOS, the system places cancellationAction items on the leading edge of the navigation bar.\n\nSee Also\nGetting placement for specific actions\nstatic let primaryAction: ToolbarItemPlacement\nThe item represents a primary action.\nstatic let secondaryAction: ToolbarItemPlacement\nThe item represents a secondary action.\nstatic let confirmationAction: ToolbarItemPlacement\nThe item represents a confirmation action for a modal interface.\nstatic let destructiveAction: ToolbarItemPlacement\nThe item represents a destructive action for a modal interface.\nstatic let navigation: ToolbarItemPlacement\nThe item represents a navigation action."
    },
    {
        "title": "navigation",
        "url": "https://developer.apple.com/documentation/swiftui/toolbaritemplacement/navigation",
        "html": "Discussion\n\nNavigation actions allow the user to move between contexts. For example, the forward and back buttons of a web browser are navigation actions.\n\nIn macOS and in Mac Catalyst apps, the system places navigation items in the leading edge of the toolbar ahead of the inline title if that is present in the toolbar.\n\nIn iOS, iPadOS, and tvOS, navigation items appear in the leading edge of the navigation bar. If a system navigation item such as a back button is present in a compact width, it instead appears in the primaryAction placement.\n\nSee Also\nGetting placement for specific actions\nstatic let primaryAction: ToolbarItemPlacement\nThe item represents a primary action.\nstatic let secondaryAction: ToolbarItemPlacement\nThe item represents a secondary action.\nstatic let confirmationAction: ToolbarItemPlacement\nThe item represents a confirmation action for a modal interface.\nstatic let cancellationAction: ToolbarItemPlacement\nThe item represents a cancellation action for a modal interface.\nstatic let destructiveAction: ToolbarItemPlacement\nThe item represents a destructive action for a modal interface."
    },
    {
        "title": "topBarLeading",
        "url": "https://developer.apple.com/documentation/swiftui/toolbaritemplacement/topbarleading",
        "html": "Discussion\n\nOn watchOS, iOS, and tvOS, the top bar is the navigation bar.\n\nSee Also\nGetting explicit placement\nstatic var topBarTrailing: ToolbarItemPlacement\nPlaces the item in the trailing edge of the top bar.\nstatic let bottomBar: ToolbarItemPlacement\nPlaces the item in the bottom toolbar.\nstatic let bottomOrnament: ToolbarItemPlacement\nPlaces the item in an ornament under the window.\nBeta\nstatic let keyboard: ToolbarItemPlacement\nThe item is placed in the keyboard section.\nstatic func accessoryBar<ID>(id: ID) -> ToolbarItemPlacement\nCreates a unique accessory bar placement."
    },
    {
        "title": "confirmationAction",
        "url": "https://developer.apple.com/documentation/swiftui/toolbaritemplacement/confirmationaction",
        "html": "Discussion\n\nUse confirmation actions to receive user confirmation of a particular action. An example of a confirmation action would be an action with the label \u201cAdd\u201d to add a new event to the calendar.\n\nIn macOS and in Mac Catalyst apps, the system places confirmationAction items on the trailing edge in the trailing-most position of the sheet and gain the apps accent color as a background color.\n\nIn iOS, iPadOS, and tvOS, the system places confirmationAction items in the same location as a primaryAction placement.\n\nIn watchOS, the system places confirmationAction items in the trailing edge of the navigation bar.\n\nSee Also\nGetting placement for specific actions\nstatic let primaryAction: ToolbarItemPlacement\nThe item represents a primary action.\nstatic let secondaryAction: ToolbarItemPlacement\nThe item represents a secondary action.\nstatic let cancellationAction: ToolbarItemPlacement\nThe item represents a cancellation action for a modal interface.\nstatic let destructiveAction: ToolbarItemPlacement\nThe item represents a destructive action for a modal interface.\nstatic let navigation: ToolbarItemPlacement\nThe item represents a navigation action."
    },
    {
        "title": "primaryAction",
        "url": "https://developer.apple.com/documentation/swiftui/toolbaritemplacement/primaryaction",
        "html": "Discussion\n\nA primary action is a more frequently used action for the current context. For example, a button the user clicks or taps to compose a new message in a chat app.\n\nIn macOS and in Mac Catalyst apps, the location for the primary action is the leading edge of the toolbar.\n\nIn iOS, iPadOS, and tvOS, the location for the primary action is the trailing edge of the navigation bar.\n\nIn watchOS the system places the primary action beneath the navigation bar; the user reveals the action by scrolling.\n\nSee Also\nGetting placement for specific actions\nstatic let secondaryAction: ToolbarItemPlacement\nThe item represents a secondary action.\nstatic let confirmationAction: ToolbarItemPlacement\nThe item represents a confirmation action for a modal interface.\nstatic let cancellationAction: ToolbarItemPlacement\nThe item represents a cancellation action for a modal interface.\nstatic let destructiveAction: ToolbarItemPlacement\nThe item represents a destructive action for a modal interface.\nstatic let navigation: ToolbarItemPlacement\nThe item represents a navigation action."
    },
    {
        "title": "bottomTrailing",
        "url": "https://developer.apple.com/documentation/swiftui/unitpoint/bottomtrailing",
        "html": "Discussion\n\nThis point occupies the position where the horizontal and vertical alignment guides intersect for bottomTrailing alignment. The trailing edge appears on the right in a left-to-right language environment and on the left in a right-to-left environment.\n\nSee Also\nGetting bottom points\nstatic let bottomLeading: UnitPoint\nA point that\u2019s in the bottom, leading corner of a view.\nstatic let bottom: UnitPoint\nA point that\u2019s centered horizontally on the bottom edge of a view."
    },
    {
        "title": "projectedValue",
        "url": "https://developer.apple.com/documentation/swiftui/uiapplicationdelegateadaptor/projectedvalue",
        "html": "Discussion\n\nUse the projected value to get a binding to a value that the delegate publishes. Access the projected value by prefixing the name of the delegate instance with a dollar sign ($). For example, you might publish a Boolean value in your application delegate:\n\nclass MyAppDelegate: NSObject, UIApplicationDelegate, ObservableObject {\n    @Published var isEnabled = false\n\n\n    // ...\n}\n\n\nIf you declare the delegate in your App using the UIApplicationDelegateAdaptor property wrapper, you can get the delegate that SwiftUI instantiates from the environment and access a binding to its published values from any view in your app:\n\nstruct MyView: View {\n    @EnvironmentObject private var appDelegate: MyAppDelegate\n\n\n    var body: some View {\n        Toggle(\"Enabled\", isOn: $appDelegate.isEnabled)\n    }\n}\n\nSee Also\nGetting the delegate adaptor\nvar wrappedValue: DelegateType\nThe underlying app delegate."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/nsapplicationdelegateadaptor/init(_:)-67u91",
        "html": "Parameters\ndelegateType\n\nThe type of application delegate that you define in your app, which conforms to the NSApplicationDelegate protocol.\n\nDiscussion\n\nCall this initializer indirectly by creating a property with the NSApplicationDelegateAdaptor property wrapper from inside your App declaration:\n\n@main\nstruct MyApp: App {\n    @NSApplicationDelegateAdaptor private var appDelegate: MyAppDelegate\n\n\n    var body: some Scene { ... }\n}\n\n\nSwiftUI initializes the delegate and manages its lifetime, calling upon it to handle application delegate callbacks.\n\nIf you want SwiftUI to put the instantiated delegate in the Environment, make sure the delegate class also conforms to the ObservableObject protocol. That causes SwiftUI to invoke the init(_:) initializer rather than this one.\n\nSee Also\nCreating a delegate adaptor\ninit(DelegateType.Type)\nCreates an AppKit app delegate adaptor using a delegate that\u2019s an observable object.\nAvailable when DelegateType inherits NSObject, DelegateType conforms to NSApplicationDelegate, and DelegateType conforms to ObservableObject.\ninit(DelegateType.Type)\nCreates an AppKit app delegate adaptor using an observable delegate.\nAvailable when DelegateType inherits NSObject, DelegateType conforms to NSApplicationDelegate, and DelegateType conforms to Observable."
    },
    {
        "title": "init(placement:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbaritem/init(placement:content:)",
        "html": "Parameters\nplacement\n\nWhich section of the toolbar the item should be placed in.\n\ncontent\n\nThe content of the item.\n\nSee Also\nCreating a toolbar item\ninit(id: String, placement: ToolbarItemPlacement, content: () -> Content)\nCreates a toolbar item with the specified placement and content, which allows for user customization.\nAvailable when ID is String and Content conforms to View.\ninit(id: String, placement: ToolbarItemPlacement, showsByDefault: Bool, content: () -> Content)\nCreates a toolbar item with the specified placement and content, which allows for user customization.\nAvailable when ID is String and Content conforms to View."
    },
    {
        "title": "writableContentTypes",
        "url": "https://developer.apple.com/documentation/swiftui/filedocument/writablecontenttypes-2opfc",
        "html": "Required Default implementation provided.\n\nDiscussion\n\nBy default, SwiftUI assumes that your document reads and writes the same set of content types. Only define this property if you need to indicate a different set of types for writing files. Otherwise, the default implementation of this property returns the list that you specify in your implementation of readableContentTypes.\n\nDefault Implementations\nFileDocument Implementations\nstatic var writableContentTypes: [UTType]\nThe file types that the document supports saving or exporting to.\nSee Also\nWriting a document\nfunc fileWrapper(configuration: Self.WriteConfiguration) throws -> FileWrapper\nSerializes a document snapshot to a file wrapper.\n\nRequired\n\ntypealias WriteConfiguration\nThe configuration for writing document contents."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/wkapplicationdelegateadaptor/init(_:)-3tkve",
        "html": "Parameters\ndelegate\n\nthe type of WKApplicationDelegate to use.\n\nDiscussion\n\nThe framework will initialize the provided delegate and manage its lifetime, calling out to it when appropriate after performing its own work.\n\nSee Also\nCreating a delegate adaptor\ninit(DelegateType.Type)\nCreates an WKApplicationDelegateAdaptor using a WatchKit Application Delegate.\nAvailable when DelegateType inherits NSObject, DelegateType conforms to ObservableObject, and DelegateType conforms to WKApplicationDelegate.\ninit(DelegateType.Type)\nCreates an WKApplicationDelegateAdaptor using a WatchKit Application Delegate.\nAvailable when DelegateType inherits NSObject, DelegateType conforms to Observable, and DelegateType conforms to WKApplicationDelegate."
    },
    {
        "title": "principal",
        "url": "https://developer.apple.com/documentation/swiftui/toolbaritemplacement/principal",
        "html": "Discussion\n\nPrincipal actions are key units of functionality that receive prominent placement. For example, the location field for a web browser is a principal item.\n\nIn macOS and in Mac Catalyst apps, the system places the principal item in the center of the toolbar.\n\nIn iOS, iPadOS, and tvOS, the system places the principal item in the center of the navigation bar. This item takes precedent over a title specified through View/navigationTitle.\n\nSee Also\nGetting semantic placement\nstatic let automatic: ToolbarItemPlacement\nThe system places the item automatically, depending on many factors including the platform, size class, or presence of other items.\nstatic let status: ToolbarItemPlacement\nThe item represents a change in status for the current context."
    },
    {
        "title": "init(id:placement:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbaritem/init(id:placement:content:)",
        "html": "Parameters\nid\n\nA unique identifier for this item.\n\nplacement\n\nWhich section of the toolbar the item should be placed in.\n\ncontent\n\nThe content of the item.\n\nSee Also\nCreating a toolbar item\ninit(placement: ToolbarItemPlacement, content: () -> Content)\nCreates a toolbar item with the specified placement and content.\nAvailable when ID is () and Content conforms to View.\ninit(id: String, placement: ToolbarItemPlacement, showsByDefault: Bool, content: () -> Content)\nCreates a toolbar item with the specified placement and content, which allows for user customization.\nAvailable when ID is String and Content conforms to View."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/toolbaritemplacement/automatic",
        "html": "Discussion\n\nIn macOS and in Mac Catalyst apps, the system places items in the current toolbar section in order of leading to trailing. On watchOS, only the first item appears, pinned beneath the navigation bar.\n\nIn iPadOS, the system places items in the center of the navigation bar if the navigation bar supports customization. Otherwise, it places items in the trailing position of the navigation bar.\n\nIn iOS, and tvOS, the system places items in the trailing position of the navigation bar.\n\nIn iOS, iPadOS, and macOS, the system uses the space available to the toolbar when determining how many items to render in the toolbar. If not all items fit in the available space, an overflow menu may be created and remaining items placed in that menu.\n\nSee Also\nGetting semantic placement\nstatic let principal: ToolbarItemPlacement\nThe system places the item in the principal item section.\nstatic let status: ToolbarItemPlacement\nThe item represents a change in status for the current context."
    },
    {
        "title": "saveItem",
        "url": "https://developer.apple.com/documentation/swiftui/commandgroupplacement/saveitem",
        "html": "Discussion\n\nBy default, this group includes the following commands in macOS:\n\nClose\n\nSave\n\nSave As/Duplicate\n\nRevert to Saved\n\nSee Also\nFile manipulation\nstatic let importExport: CommandGroupPlacement\nPlacement for commands that relate to importing and exporting data using formats that the app doesn\u2019t natively support.\nstatic let newItem: CommandGroupPlacement\nPlacement for commands that create and open different kinds of documents.\nstatic let printItem: CommandGroupPlacement\nPlacement for commands related to printing app content."
    },
    {
        "title": "printItem",
        "url": "https://developer.apple.com/documentation/swiftui/commandgroupplacement/printitem",
        "html": "Discussion\n\nBy default, this group includes the following commands in macOS:\n\nPage Setup\n\nPrint\n\nSee Also\nFile manipulation\nstatic let importExport: CommandGroupPlacement\nPlacement for commands that relate to importing and exporting data using formats that the app doesn\u2019t natively support.\nstatic let newItem: CommandGroupPlacement\nPlacement for commands that create and open different kinds of documents.\nstatic let saveItem: CommandGroupPlacement\nPlacement for commands that save open documents and close windows."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/swiftui/toolbartitlemenu/init()",
        "html": "See Also\nCreating a toolbar title menu\ninit(content: () -> Content)\nCreates a toolbar title menu."
    },
    {
        "title": "inline",
        "url": "https://developer.apple.com/documentation/swiftui/toolbartitledisplaymode/inline",
        "html": "Discussion\n\nIn iOS, tvOS, and watchOS this mode displays the title with a smaller size in the middle of the toolbar. This has no effect in macOS.\n\nSee Also\nGetting display modes\nstatic var automatic: ToolbarTitleDisplayMode\nThe automatic mode.\nstatic var inlineLarge: ToolbarTitleDisplayMode\nThe inline large mode.\nstatic var large: ToolbarTitleDisplayMode\nThe large mode."
    },
    {
        "title": "automatic",
        "url": "https://developer.apple.com/documentation/swiftui/toolbartitledisplaymode/automatic",
        "html": "Discussion\n\nFor root content in a navigation stack in iOS, iPadOS, or tvOS this behavior will:\n\nDefault to large when a navigation title is configured.\n\nDefault to inline when no navigation title is provided.\n\nIn all platforms, content pushed onto a navigation stack will use the behavior of the content already on the navigation stack. This has no effect in macOS.\n\nSee Also\nGetting display modes\nstatic var inline: ToolbarTitleDisplayMode\nThe inline mode.\nstatic var inlineLarge: ToolbarTitleDisplayMode\nThe inline large mode.\nstatic var large: ToolbarTitleDisplayMode\nThe large mode."
    },
    {
        "title": "buildIf(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildif(_:)-a5vt",
        "html": "See Also\nBuilding conditional toolbar content\nstatic func buildIf<Content>(Content?) -> Content?\nstatic func buildEither<TrueContent, FalseContent>(first: TrueContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildEither<TrueContent, FalseContent>(first: TrueContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildEither<TrueContent, FalseContent>(second: FalseContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildEither<TrueContent, FalseContent>(second: FalseContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildLimitedAvailability<Content>(Content) -> some ToolbarContent\nstatic func buildLimitedAvailability<Content>(Content) -> some CustomizableToolbarContent"
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildblock(_:_:_:_:_:_:_:_:_:_:)-70xey",
        "html": "See Also\nBuilding customizable toolbar content\nstatic func buildBlock<Content>(Content) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1>(C0, C1) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some CustomizableToolbarContent"
    },
    {
        "title": "buildEither(second:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildeither(second:)-6tdql",
        "html": "See Also\nBuilding conditional toolbar content\nstatic func buildIf<Content>(Content?) -> Content?\nstatic func buildIf<Content>(Content?) -> Content?\nstatic func buildEither<TrueContent, FalseContent>(first: TrueContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildEither<TrueContent, FalseContent>(first: TrueContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildEither<TrueContent, FalseContent>(second: FalseContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildLimitedAvailability<Content>(Content) -> some ToolbarContent\nstatic func buildLimitedAvailability<Content>(Content) -> some CustomizableToolbarContent"
    },
    {
        "title": "buildLimitedAvailability(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildlimitedavailability(_:)-pnpk",
        "html": "See Also\nBuilding conditional toolbar content\nstatic func buildIf<Content>(Content?) -> Content?\nstatic func buildIf<Content>(Content?) -> Content?\nstatic func buildEither<TrueContent, FalseContent>(first: TrueContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildEither<TrueContent, FalseContent>(first: TrueContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildEither<TrueContent, FalseContent>(second: FalseContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildEither<TrueContent, FalseContent>(second: FalseContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildLimitedAvailability<Content>(Content) -> some ToolbarContent"
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildblock(_:_:_:_:_:_:_:_:)-14ys6",
        "html": "See Also\nBuilding customizable toolbar content\nstatic func buildBlock<Content>(Content) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1>(C0, C1) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some CustomizableToolbarContent"
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildblock(_:_:_:_:_:_:_:)-1uahb",
        "html": "See Also\nBuilding customizable toolbar content\nstatic func buildBlock<Content>(Content) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1>(C0, C1) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some CustomizableToolbarContent"
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildblock(_:_:_:_:_:_:_:_:_:)-5f4kc",
        "html": "See Also\nBuilding customizable toolbar content\nstatic func buildBlock<Content>(Content) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1>(C0, C1) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some CustomizableToolbarContent"
    },
    {
        "title": "init(for:content:defaultValue:)",
        "url": "https://developer.apple.com/documentation/swiftui/immersivespace/init(for:content:defaultvalue:)-ndd8",
        "html": "Parameters\ntype\n\nThe type of presented data this immersive space accepts.\n\ncontent\n\nA view builder that defines the content for each instance of the immersive space. The closure receives a binding to the value that you pass to the openImmersiveSpace action when you use it to open an immersive space. The system automatically persists and restores the value of this binding during state restoration.\n\ndefaultValue\n\nA closure that returns a value that SwiftUI presents when it doesn\u2019t receive one from you, like when you call the openImmersiveSpace action without providing a value.\n\nDiscussion\n\nThe immersive space uses the specified view as a template to form the content of the space. Your app invokes this initializer when it presents a value of the specified type using the openImmersiveSpace action.\n\nSee Also\nProviding default data to an immersive space\ninit(for: Data.Type, content: (Binding<Data>) -> Content, defaultValue: () -> Data)\nCreates an immersive space.\nBeta\ninit<V>(id: String, for: Data.Type, content: (Binding<Data>) -> V, defaultValue: () -> Data)\nCreates the immersive space associated with an identifier for a specified type of presented data and a default value if the data is not set.\nAvailable when Content conforms to ImmersiveSpaceContent, Data conforms to Decodable, Data conforms to Encodable, and Data conforms to Hashable.\nBeta\ninit(id: String, for: Data.Type, content: (Binding<Data>) -> Content, defaultValue: () -> Data)\nCreates the immersive space associated with an identifier for a specified type of presented data, and a default value, if the data is not set.\nBeta"
    },
    {
        "title": "buildEither(second:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildeither(second:)-238tf",
        "html": "See Also\nBuilding conditional toolbar content\nstatic func buildIf<Content>(Content?) -> Content?\nstatic func buildIf<Content>(Content?) -> Content?\nstatic func buildEither<TrueContent, FalseContent>(first: TrueContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildEither<TrueContent, FalseContent>(first: TrueContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildEither<TrueContent, FalseContent>(second: FalseContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildLimitedAvailability<Content>(Content) -> some ToolbarContent\nstatic func buildLimitedAvailability<Content>(Content) -> some CustomizableToolbarContent"
    },
    {
        "title": "buildLimitedAvailability(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildlimitedavailability(_:)-52yf7",
        "html": "See Also\nBuilding conditional toolbar content\nstatic func buildIf<Content>(Content?) -> Content?\nstatic func buildIf<Content>(Content?) -> Content?\nstatic func buildEither<TrueContent, FalseContent>(first: TrueContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildEither<TrueContent, FalseContent>(first: TrueContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildEither<TrueContent, FalseContent>(second: FalseContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildEither<TrueContent, FalseContent>(second: FalseContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildLimitedAvailability<Content>(Content) -> some CustomizableToolbarContent"
    },
    {
        "title": "buildEither(first:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildeither(first:)-5bgxz",
        "html": "See Also\nBuilding conditional toolbar content\nstatic func buildIf<Content>(Content?) -> Content?\nstatic func buildIf<Content>(Content?) -> Content?\nstatic func buildEither<TrueContent, FalseContent>(first: TrueContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildEither<TrueContent, FalseContent>(second: FalseContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildEither<TrueContent, FalseContent>(second: FalseContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildLimitedAvailability<Content>(Content) -> some ToolbarContent\nstatic func buildLimitedAvailability<Content>(Content) -> some CustomizableToolbarContent"
    },
    {
        "title": "buildEither(first:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildeither(first:)-93s0y",
        "html": "See Also\nBuilding conditional toolbar content\nstatic func buildIf<Content>(Content?) -> Content?\nstatic func buildIf<Content>(Content?) -> Content?\nstatic func buildEither<TrueContent, FalseContent>(first: TrueContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildEither<TrueContent, FalseContent>(second: FalseContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildEither<TrueContent, FalseContent>(second: FalseContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildLimitedAvailability<Content>(Content) -> some ToolbarContent\nstatic func buildLimitedAvailability<Content>(Content) -> some CustomizableToolbarContent"
    },
    {
        "title": "init(for:content:defaultValue:)",
        "url": "https://developer.apple.com/documentation/swiftui/immersivespace/init(for:content:defaultvalue:)-888ut",
        "html": "Parameters\ntype\n\nThe type of presented data this immersive space accepts.\n\ncontent\n\nAn immersive space content builder that defines the content for each instance of the immersive space. The closure receives a binding to the value that you pass to the openImmersiveSpace action when you call that action to open an immersive space. The system automatically persists and restores the value of this binding during state restoration.\n\ndefaultValue\n\nA closure that returns a value that SwiftUI presents when it doesn\u2019t receive one from you, like when you call the openImmersiveSpace action without providing a value.\n\nDiscussion\n\nThe immersive space uses the specified content builder as a template to form the content of the space. Your app invokes this initializer when it presents a value of the specified type using the openImmersiveSpace action.\n\nSee Also\nProviding default data to an immersive space\ninit<V>(for: Data.Type, content: (Binding<Data>) -> V, defaultValue: () -> Data)\nCreates an immersive space for a specified type of presented data and a default value if the data is not set.\nAvailable when Content conforms to ImmersiveSpaceContent, Data conforms to Decodable, Data conforms to Encodable, and Data conforms to Hashable.\nBeta\ninit<V>(id: String, for: Data.Type, content: (Binding<Data>) -> V, defaultValue: () -> Data)\nCreates the immersive space associated with an identifier for a specified type of presented data and a default value if the data is not set.\nAvailable when Content conforms to ImmersiveSpaceContent, Data conforms to Decodable, Data conforms to Encodable, and Data conforms to Hashable.\nBeta\ninit(id: String, for: Data.Type, content: (Binding<Data>) -> Content, defaultValue: () -> Data)\nCreates the immersive space associated with an identifier for a specified type of presented data, and a default value, if the data is not set.\nBeta"
    },
    {
        "title": "buildBlock(_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildblock(_:_:_:_:_:_:)-3usdr",
        "html": "See Also\nBuilding customizable toolbar content\nstatic func buildBlock<Content>(Content) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1>(C0, C1) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some CustomizableToolbarContent"
    },
    {
        "title": "buildBlock(_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildblock(_:_:_:_:_:)-5v9a3",
        "html": "See Also\nBuilding customizable toolbar content\nstatic func buildBlock<Content>(Content) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1>(C0, C1) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some CustomizableToolbarContent"
    },
    {
        "title": "tabBar",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarplacement/tabbar",
        "html": "See Also\nGetting placements\nstatic var automatic: ToolbarPlacement\nThe primary toolbar.\nstatic func accessoryBar<ID>(id: ID) -> ToolbarPlacement\nCreates a unique accessory bar placement.\nstatic var bottomBar: ToolbarPlacement\nThe bottom toolbar of an app.\nstatic var bottomOrnament: ToolbarPlacement\nThe bottom ornament of an app.\nBeta\nstatic var navigationBar: ToolbarPlacement\nThe navigation bar of an app.\nstatic var windowToolbar: ToolbarPlacement\nThe window toolbar of an app."
    },
    {
        "title": "init(for:content:)",
        "url": "https://developer.apple.com/documentation/swiftui/immersivespace/init(for:content:)-1obs2",
        "html": "Parameters\ntype\n\nThe type of presented data this immersive space accepts.\n\ncontent\n\nAn immersive space content builder that defines the content for each instance of the immersive space. The closure receives a binding to the value that you pass to the openImmersiveSpace action when you call that action to open an immersive space. The system automatically persists and restores the value of this binding during state restoration.\n\nDiscussion\n\nThe space uses the specified content builder to form the content. Your app invokes this initializer when it presents a value of the specified type using the openImmersiveSpace action.\n\nSee Also\nCreating a data-driven immersive space\ninit<V>(for: Data.Type, content: (Binding<Data?>) -> V)\nCreates the immersive space for a specified type of presented data using view-based content.\nAvailable when Content conforms to ImmersiveSpaceContent, Data conforms to Decodable, Data conforms to Encodable, and Data conforms to Hashable.\nBeta\ninit(id: String, for: Data.Type, content: (Binding<Data?>) -> Content)\nCreates the immersive space associated with an identifier for a specified type of presented data.\nBeta\ninit<V>(id: String, for: Data.Type, content: (Binding<Data?>) -> V)\nCreates the immersive space associated with an identifier for a specified type of presented data using view-based content.\nAvailable when Content conforms to ImmersiveSpaceContent, Data conforms to Decodable, Data conforms to Encodable, and Data conforms to Hashable.\nBeta"
    },
    {
        "title": "buildIf(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildif(_:)-8nv4q",
        "html": "See Also\nBuilding conditional toolbar content\nstatic func buildIf<Content>(Content?) -> Content?\nstatic func buildEither<TrueContent, FalseContent>(first: TrueContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildEither<TrueContent, FalseContent>(first: TrueContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildEither<TrueContent, FalseContent>(second: FalseContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildEither<TrueContent, FalseContent>(second: FalseContent) -> _ConditionalContent<TrueContent, FalseContent>\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildExpression<Content>(Content) -> Content\nBuilds an expression within the builder.\nstatic func buildLimitedAvailability<Content>(Content) -> some ToolbarContent\nstatic func buildLimitedAvailability<Content>(Content) -> some CustomizableToolbarContent"
    },
    {
        "title": "buildBlock(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontentbuilder/buildblock(_:_:_:_:)-3px3w",
        "html": "See Also\nBuilding customizable toolbar content\nstatic func buildBlock<Content>(Content) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1>(C0, C1) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some CustomizableToolbarContent\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some CustomizableToolbarContent"
    },
    {
        "title": "windowToolbar",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarplacement/windowtoolbar",
        "html": "See Also\nGetting placements\nstatic var automatic: ToolbarPlacement\nThe primary toolbar.\nstatic func accessoryBar<ID>(id: ID) -> ToolbarPlacement\nCreates a unique accessory bar placement.\nstatic var bottomBar: ToolbarPlacement\nThe bottom toolbar of an app.\nstatic var bottomOrnament: ToolbarPlacement\nThe bottom ornament of an app.\nBeta\nstatic var navigationBar: ToolbarPlacement\nThe navigation bar of an app.\nstatic var tabBar: ToolbarPlacement\nThe tab bar of an app."
    },
    {
        "title": "accessoryBar(id:)",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarplacement/accessorybar(id:)",
        "html": "Parameters\nid\n\nA unique identifier for this placement.\n\nDiscussion\n\nOn macOS, accessory bars are in a section below the title bar and toolbar area of the window. Each separate identifier will correspond to a separate accessory bar that is added to this area.\n\nUse a custom placement to control the appearance of the containing bar for items using a custom ToolbarItemPlacement with the same identifier.\n\nprivate let favoritesBarID = \"com.example.favoritesBar\"\nextension ToolbarItemPlacement {\n    static let favoritesBar = accessoryBar(id: favoritesBarID)\n}\nextension ToolbarPlacement {\n    static let favoritesBar = accessoryBar(id: favoritesBarID)\n}\n...\nBrowserView()\n    .toolbar {\n        ToolbarItem(placement: .favoritesBar) {\n            FavoritesBar()\n        }\n    }\n    .toolbar(.hidden, for: .favoritesBar)\n\nSee Also\nGetting placements\nstatic var automatic: ToolbarPlacement\nThe primary toolbar.\nstatic var bottomBar: ToolbarPlacement\nThe bottom toolbar of an app.\nstatic var bottomOrnament: ToolbarPlacement\nThe bottom ornament of an app.\nBeta\nstatic var navigationBar: ToolbarPlacement\nThe navigation bar of an app.\nstatic var tabBar: ToolbarPlacement\nThe tab bar of an app.\nstatic var windowToolbar: ToolbarPlacement\nThe window toolbar of an app."
    },
    {
        "title": "bottomBar",
        "url": "https://developer.apple.com/documentation/swiftui/toolbaritemplacement/bottombar",
        "html": "See Also\nGetting explicit placement\nstatic var topBarLeading: ToolbarItemPlacement\nPlaces the item in the leading edge of the top bar.\nstatic var topBarTrailing: ToolbarItemPlacement\nPlaces the item in the trailing edge of the top bar.\nstatic let bottomOrnament: ToolbarItemPlacement\nPlaces the item in an ornament under the window.\nBeta\nstatic let keyboard: ToolbarItemPlacement\nThe item is placed in the keyboard section.\nstatic func accessoryBar<ID>(id: ID) -> ToolbarItemPlacement\nCreates a unique accessory bar placement."
    },
    {
        "title": "scrollIndicatorsFlash(trigger:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/scrollindicatorsflash(trigger:)",
        "html": "Parameters\nvalue\n\nThe value that causes scroll indicators to flash. The value must conform to the Equatable protocol.\n\nReturn Value\n\nA view that flashes any visible scroll indicators when a value changes.\n\nDiscussion\n\nWhen the value that you provide to this modifier changes, the scroll indicators of any scrollable views within the modified view hierarchy briefly flash. The following example configures the scroll indicators to flash any time flashCount changes:\n\n@State private var isPresented = false\n@State private var flashCount = 0\n\n\nScrollView {\n    // ...\n}\n.scrollIndicatorsFlash(trigger: flashCount)\n.sheet(isPresented: $isPresented) {\n    // ...\n}\n.onChange(of: isPresented) { newValue in\n    if newValue {\n        flashCount += 1\n    }\n}\n\n\nOnly scroll indicators that you configure to be visible flash. To flash scroll indicators when a scroll view initially appears, use scrollIndicatorsFlash(onAppear:) instead.\n\nSee Also\nShowing scroll indicators\nfunc scrollIndicatorsFlash(onAppear: Bool) -> some View\nFlashes the scroll indicators of a scrollable view when it appears.\nfunc scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View\nSets the visibility of scroll indicators within this view.\nvar horizontalScrollIndicatorVisibility: ScrollIndicatorVisibility\nThe visibility to apply to scroll indicators of any horizontally scrollable content.\nvar verticalScrollIndicatorVisibility: ScrollIndicatorVisibility\nThe visiblity to apply to scroll indicators of any vertically scrollable content.\nstruct ScrollIndicatorVisibility\nThe visibility of scroll indicators of a UI element."
    },
    {
        "title": "refreshable(action:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/refreshable(action:)",
        "html": "Parameters\naction\n\nAn asynchronous handler that SwiftUI executes when the user requests a refresh. Use this handler to initiate an update of model data displayed in the modified view. Use await in front of any asynchronous calls inside the handler.\n\nReturn Value\n\nA view with a new refresh action in its environment.\n\nDiscussion\n\nApply this modifier to a view to set the refresh value in the view\u2019s environment to a RefreshAction instance that uses the specified action as its handler. Views that detect the presence of the instance can change their appearance to provide a way for the user to execute the handler.\n\nFor example, when you apply this modifier on iOS and iPadOS to a List, the list enables a standard pull-to-refresh gesture that refreshes the list contents. When the user drags the top of the scrollable area downward, the view reveals a progress indicator and executes the specified handler. The indicator remains visible for the duration of the refresh, which runs asynchronously:\n\nList(mailbox.conversations) { conversation in\n    ConversationCell(conversation)\n}\n.refreshable {\n    await mailbox.fetch()\n}\n\n\nYou can add refresh capability to your own views as well. For information on how to do that, see RefreshAction.\n\nSee Also\nRefreshing a list\u2019s content\nvar refresh: RefreshAction?\nA refresh action stored in a view\u2019s environment.\nstruct RefreshAction\nAn action that initiates a refresh operation."
    },
    {
        "title": "scrollDisabled(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/scrolldisabled(_:)",
        "html": "Parameters\ndisabled\n\nA Boolean that indicates whether scrolling is disabled.\n\nDiscussion\n\nUse this modifier to control whether a ScrollView can scroll:\n\n@State private var isScrollDisabled = false\n\n\nvar body: some View {\n    ScrollView {\n        VStack {\n            Toggle(\"Disable\", isOn: $isScrollDisabled)\n            MyContent()\n        }\n    }\n    .scrollDisabled(isScrollDisabled)\n}\n\n\nSwiftUI passes the disabled property through the environment, which means you can use this modifier to disable scrolling for all scroll views within a view hierarchy. In the following example, the modifier affects both scroll views:\n\n ScrollView {\n     ForEach(rows) { row in\n         ScrollView(.horizontal) {\n             RowContent(row)\n         }\n     }\n }\n .scrollDisabled(true)\n\n\nYou can also use this modifier to disable scrolling for other kinds of scrollable views, like a List or a TextEditor.\n\nSee Also\nDisabling scrolling\nvar isScrollEnabled: Bool\nA Boolean value that indicates whether any scroll views associated with this environment allow scrolling to occur."
    },
    {
        "title": "BadgeProminence",
        "url": "https://developer.apple.com/documentation/swiftui/badgeprominence",
        "html": "Overview\n\nBadges can be used for different kinds of information, from the passive number of items in a container to the number of required actions. The prominence of badges in Lists can be adjusted to reflect this and be made to draw more or less attention to themselves.\n\nBadges will default to standard prominence unless specified.\n\nThe following example shows a List displaying a list of folders with an informational badge with lower prominence, showing the number of items in the folder.\n\nList(folders) { folder in\n    Text(folder.name)\n        .badge(folder.numberOfItems)\n}\n.badgeProminence(.decreased)\n\nTopics\nGetting background prominence\nstatic let standard: BadgeProminence\nThe standard level of prominence for a badge.\nstatic let increased: BadgeProminence\nThe highest level of prominence for a badge.\nstatic let decreased: BadgeProminence\nThe lowest level of prominence for a badge.\nRelationships\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nDisplaying a badge on a list item\nfunc badge(Text?) -> some View\nGenerates a badge for the view from a text view.\nfunc badge<S>(S?) -> some View\nGenerates a badge for the view from a string.\nfunc badge(LocalizedStringKey?) -> some View\nGenerates a badge for the view from a localized string key.\nfunc badge(Int) -> some View\nGenerates a badge for the view from an integer value.\nfunc badgeProminence(BadgeProminence) -> some View\nSpecifies the prominence of badges created by this view.\nvar badgeProminence: BadgeProminence\nThe prominence to apply to badges associated with this environment."
    },
    {
        "title": "badgeProminence",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/badgeprominence",
        "html": "Discussion\n\nThe default is standard.\n\nSee Also\nDisplaying a badge on a list item\nfunc badge(Text?) -> some View\nGenerates a badge for the view from a text view.\nfunc badge<S>(S?) -> some View\nGenerates a badge for the view from a string.\nfunc badge(LocalizedStringKey?) -> some View\nGenerates a badge for the view from a localized string key.\nfunc badge(Int) -> some View\nGenerates a badge for the view from an integer value.\nfunc badgeProminence(BadgeProminence) -> some View\nSpecifies the prominence of badges created by this view.\nstruct BadgeProminence\nThe visual prominence of a badge."
    },
    {
        "title": "badgeProminence(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/badgeprominence(_:)",
        "html": "Parameters\nprominence\n\nThe prominence to apply to badges.\n\nDiscussion\n\nBadges can be used for different kinds of information, from the passive number of items in a container to the number of required actions. The prominence of badges in Lists can be adjusted to reflect this and be made to draw more or less attention to themselves.\n\nBadges will default to standard prominence unless specified.\n\nThe following example shows a List displaying a list of folders with an informational badge with lower prominence, showing the number of items in the folder.\n\nList(folders) { folder in\n    Text(folder.name)\n        .badge(folder.numberOfItems)\n}\n.badgeProminence(.decreased)\n\nSee Also\nDisplaying a badge on a list item\nfunc badge(Text?) -> some View\nGenerates a badge for the view from a text view.\nfunc badge<S>(S?) -> some View\nGenerates a badge for the view from a string.\nfunc badge(LocalizedStringKey?) -> some View\nGenerates a badge for the view from a localized string key.\nfunc badge(Int) -> some View\nGenerates a badge for the view from an integer value.\nvar badgeProminence: BadgeProminence\nThe prominence to apply to badges associated with this environment.\nstruct BadgeProminence\nThe visual prominence of a badge."
    },
    {
        "title": "badge(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/badge(_:)-84e43",
        "html": "Parameters\nkey\n\nAn optional string key to display as a badge. Set the value to nil to hide the badge.\n\nDiscussion\n\nUse a badge to convey optional, supplementary information about a view. Keep the contents of the badge as short as possible. Badges appear only in list rows, tab bars, and menus.\n\nThis modifier creates a Text view on your behalf, and treats the localized key similar to init(_:tableName:bundle:comment:). For more information about localizing strings, see Text. The following example shows a list with a \u201cDefault\u201d badge on one of its rows.\n\nNavigationView {\n    List(servers) { server in\n        Text(server.name)\n            .badge(server.isDefault ? \"Default\" : nil)\n    }\n    .navigationTitle(\"Servers\")\n}\n\n\nSee Also\nDisplaying a badge on a list item\nfunc badge(Text?) -> some View\nGenerates a badge for the view from a text view.\nfunc badge<S>(S?) -> some View\nGenerates a badge for the view from a string.\nfunc badge(Int) -> some View\nGenerates a badge for the view from an integer value.\nfunc badgeProminence(BadgeProminence) -> some View\nSpecifies the prominence of badges created by this view.\nvar badgeProminence: BadgeProminence\nThe prominence to apply to badges associated with this environment.\nstruct BadgeProminence\nThe visual prominence of a badge."
    },
    {
        "title": "BackgroundProminence",
        "url": "https://developer.apple.com/documentation/swiftui/backgroundprominence",
        "html": "Overview\n\nBackground prominence should influence foreground styling to maintain sufficient contrast against the background. For example, selected rows in a List and Table can have increased prominence backgrounds with accent color fills when focused; the foreground content above the background should be adjusted to reflect that level of prominence.\n\nThis can be read and written for views with the EnvironmentValues.backgroundProminence property.\n\nTopics\nGetting background prominence\nstatic let standard: BackgroundProminence\nThe standard prominence of a background\nstatic let increased: BackgroundProminence\nA more prominent background that likely requires some changes to the views above it.\nRelationships\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nConfiguring backgrounds\nfunc listRowBackground<V>(V?) -> some View\nPlaces a custom background view behind a list row item.\nfunc alternatingRowBackgrounds(AlternatingRowBackgroundBehavior) -> some View\nOverrides whether lists and tables in this view have alternating row backgrounds.\nstruct AlternatingRowBackgroundBehavior\nThe styling of views with respect to alternating row backgrounds.\nvar backgroundProminence: BackgroundProminence\nThe prominence of the background underneath views associated with this environment."
    },
    {
        "title": "badge(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/badge(_:)-6k2u9",
        "html": "Parameters\nlabel\n\nAn optional Text view to display as a badge. Set the value to nil to hide the badge.\n\nDiscussion\n\nUse a badge to convey optional, supplementary information about a view. Keep the contents of the badge as short as possible. Badges appear only in list rows, tab bars, and menus.\n\nUse this initializer when you want to style a Text view for use as a badge. The following example customizes the badge with the monospacedDigit(), foregroundColor(_:), and bold() modifiers.\n\nvar body: some View {\n    let badgeView = Text(\"\\(recentItems.count)\")\n        .monospacedDigit()\n        .foregroundColor(.red)\n        .bold()\n\n\n    List {\n        Text(\"Recents\")\n            .badge(badgeView)\n        Text(\"Favorites\")\n    }\n}\n\n\nStyling the text view has no effect when the badge appears in a TabView.\n\nSee Also\nDisplaying a badge on a list item\nfunc badge<S>(S?) -> some View\nGenerates a badge for the view from a string.\nfunc badge(LocalizedStringKey?) -> some View\nGenerates a badge for the view from a localized string key.\nfunc badge(Int) -> some View\nGenerates a badge for the view from an integer value.\nfunc badgeProminence(BadgeProminence) -> some View\nSpecifies the prominence of badges created by this view.\nvar badgeProminence: BadgeProminence\nThe prominence to apply to badges associated with this environment.\nstruct BadgeProminence\nThe visual prominence of a badge."
    },
    {
        "title": "badge(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/badge(_:)-6x46k",
        "html": "Parameters\nlabel\n\nAn optional string to display as a badge. Set the value to nil to hide the badge.\n\nDiscussion\n\nUse a badge to convey optional, supplementary information about a view. Keep the contents of the badge as short as possible. Badges appear only in list rows, tab bars, and menus.\n\nThis modifier creates a Text view on your behalf, and treats the localized key similar to init(_:). The following example shows a list with a \u201cDefault\u201d badge on one of its rows.\n\nNavigationView {\n    List(servers) { server in\n        Text(server.name)\n            .badge(server.defaultString())\n    }\n    .navigationTitle(\"Servers\")\n}\n\n\nSee Also\nDisplaying a badge on a list item\nfunc badge(Text?) -> some View\nGenerates a badge for the view from a text view.\nfunc badge(LocalizedStringKey?) -> some View\nGenerates a badge for the view from a localized string key.\nfunc badge(Int) -> some View\nGenerates a badge for the view from an integer value.\nfunc badgeProminence(BadgeProminence) -> some View\nSpecifies the prominence of badges created by this view.\nvar badgeProminence: BadgeProminence\nThe prominence to apply to badges associated with this environment.\nstruct BadgeProminence\nThe visual prominence of a badge."
    },
    {
        "title": "AlternatingRowBackgroundBehavior",
        "url": "https://developer.apple.com/documentation/swiftui/alternatingrowbackgroundbehavior",
        "html": "Overview\n\nUse values of this type with the alternatingRowBackgrounds(_:) modifier.\n\nTopics\nGetting alternating row background behavior\nstatic let automatic: AlternatingRowBackgroundBehavior\nThe automatic alternating row background behavior.\nstatic let enabled: AlternatingRowBackgroundBehavior\nAlternating rows will be enabled for applicable views.\nstatic let disabled: AlternatingRowBackgroundBehavior\nAlternating rows will be disabled for applicable views.\nRelationships\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nConfiguring backgrounds\nfunc listRowBackground<V>(V?) -> some View\nPlaces a custom background view behind a list row item.\nfunc alternatingRowBackgrounds(AlternatingRowBackgroundBehavior) -> some View\nOverrides whether lists and tables in this view have alternating row backgrounds.\nvar backgroundProminence: BackgroundProminence\nThe prominence of the background underneath views associated with this environment.\nstruct BackgroundProminence\nThe prominence of backgrounds underneath other views."
    },
    {
        "title": "backgroundProminence",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/backgroundprominence",
        "html": "Discussion\n\nForeground elements above an increased prominence background are typically adjusted to have higher contrast against a potentially vivid color, such as taking on a higher opacity monochrome appearance according to the colorScheme. System styles like primary, secondary, etc will automatically resolve to an appropriate style in this context. The property can be read and used for custom styled elements.\n\nIn the example below, a custom star rating element is in a list row alongside some text. When the row is selected and has an increased prominence appearance, the text and star rating will update their appearance, the star rating replacing its use of yellow with the standard secondary style.\n\nstruct RecipeList: View {\n    var recipes: [Recipe]\n    @Binding var selectedRecipe: Recipe.ID?\n\n\n    var body: some View {\n        List(recipes, selection: $selectedRecipe) {\n            RecipeListRow(recipe: $0)\n        }\n    }\n}\n\n\nstruct RecipeListRow: View {\n    var recipe: Recipe\n    var body: some View {\n        VStack(alignment: .leading) {\n            HStack(alignment: .firstTextBaseline) {\n                Text(recipe.name)\n                Spacer()\n                StarRating(rating: recipe.rating)\n            }\n            Text(recipe.description)\n                .foregroundStyle(.secondary)\n                .lineLimit(2, reservesSpace: true)\n        }\n    }\n}\n\n\nprivate struct StarRating: View {\n    var rating: Int\n\n\n    @Environment(\\.backgroundProminence)\n    private var backgroundProminence\n\n\n    var body: some View {\n        HStack(spacing: 1) {\n            ForEach(0..<rating, id: \\.self) { _ in\n                Image(systemName: \"star.fill\")\n            }\n        }\n        .foregroundStyle(backgroundProminence == .increased ?\n            AnyShapeStyle(.secondary) : AnyShapeStyle(.yellow))\n        .imageScale(.small)\n    }\n}\n\n\nNote that the use of backgroundProminence was used by a view that was nested in additional stack containers within the row. This ensured that the value correctly reflected the environment within the list row itself, as opposed to the environment of the list as a whole. One way to ensure correct resolution would be to prefer using this in a custom ShapeStyle instead, for example:\n\nprivate struct StarRating: View {\n    var rating: Int\n\n\n    var body: some View {\n        HStack(spacing: 1) {\n            ForEach(0..<rating, id: \\.self) { _ in\n                Image(systemName: \"star.fill\")\n            }\n        }\n        .foregroundStyle(FillStyle())\n        .imageScale(.small)\n    }\n}\n\n\nextension StarRating {\n    struct FillStyle: ShapeStyle {\n        func resolve(in env: EnvironmentValues) -> some ShapeStyle {\n            switch env.backgroundProminence {\n            case .increased: return AnyShapeStyle(.secondary)\n            default: return AnyShapeStyle(.yellow)\n            }\n        }\n    }\n}\n\n\nViews like List and Table as well as standard shape styles like ShapeStyle.selection will automatically update the background prominence of foreground views. For custom backgrounds, this environment property can be explicitly set on views above custom backgrounds.\n\nSee Also\nConfiguring backgrounds\nfunc listRowBackground<V>(V?) -> some View\nPlaces a custom background view behind a list row item.\nfunc alternatingRowBackgrounds(AlternatingRowBackgroundBehavior) -> some View\nOverrides whether lists and tables in this view have alternating row backgrounds.\nstruct AlternatingRowBackgroundBehavior\nThe styling of views with respect to alternating row backgrounds.\nstruct BackgroundProminence\nThe prominence of backgrounds underneath other views."
    },
    {
        "title": "alternatingRowBackgrounds(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/alternatingrowbackgrounds(_:)",
        "html": "Parameters\nbehavior\n\nWhether alternating row backgrounds are enabled or not.\n\nDiscussion\n\nThis can be used in conjunction with an explicit list or table style or used by itself to customize the row backgrounds of the automatic style. The only list style this has no effect on is .sidebar.\n\nList(recipe.ingredients) {\n    Text($0.name)\n}\n.listStyle(.bordered)\n.alternatingRowBackgrounds()\n\n\nThis is able to be combined with scrollContentBackground(_:) and applies an alternating row background on top of the overall list or table background.\n\nThis can also be combined with listRowBackground, which overrides the background for a specific list row, replacing the automatic alternating background for that row.\n\nSee Also\nConfiguring backgrounds\nfunc listRowBackground<V>(V?) -> some View\nPlaces a custom background view behind a list row item.\nstruct AlternatingRowBackgroundBehavior\nThe styling of views with respect to alternating row backgrounds.\nvar backgroundProminence: BackgroundProminence\nThe prominence of the background underneath views associated with this environment.\nstruct BackgroundProminence\nThe prominence of backgrounds underneath other views."
    },
    {
        "title": "listRowHoverEffectDisabled(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/listrowhovereffectdisabled(_:)",
        "html": "Parameters\ndisabled\n\nA Boolean value that determines whether the containing list row should display its default hover effect.\n\nReturn Value\n\nA view that requests the default hover effect on its containing list row to conditionally be disabled.\n\nDiscussion\n\nBy default, List rows have built-in hover effects in visionOS. In some cases, it is useful to disable the default hover effect.\n\nSee Also\nConfiguring rows\nfunc listRowInsets(EdgeInsets?) -> some View\nApplies an inset to the rows in a list.\nfunc listRowHoverEffect(HoverEffect?) -> some View\nRequests that the containing list row use the provided hover effect.\nBeta\nfunc listItemTint(Color?) -> some View\nSets a fixed tint color associated with specific content in a list.\nfunc listItemTint(ListItemTint?) -> some View\nSets the tint effect for content in a list.\nstruct ListItemTint\nThe configuration of a tint effect applied to content within a List.\nvar defaultMinListRowHeight: CGFloat\nThe default minimum height of a row in a list."
    },
    {
        "title": "listRowSeparatorTint(_:edges:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/listrowseparatortint(_:edges:)",
        "html": "Parameters\ncolor\n\nThe color to use to tint the row separators, or nil to use the default color for the current list style.\n\nedges\n\nThe set of row edges for which the tint applies. The list style might decide to not display certain separators, typically the top edge. The default is all.\n\nDiscussion\n\nSeparators can be presented above and below a row. You can specify to which edge this preference should apply.\n\nThis modifier expresses a preference to the containing List. The list style is the final arbiter for the separator tint.\n\nThe following example shows a simple grouped list whose row separators are tinted based on row-specific data:\n\nList {\n    ForEach(garage.cars) { car in\n        Text(car.model)\n            .listRowSeparatorTint(car.brandColor)\n    }\n}\n.listStyle(.grouped)\n\n\nTo hide a row separators, use listRowSeparator(_:edges:). To hide or change the tint color for a section separator, use listSectionSeparator(_:edges:) and listSectionSeparatorTint(_:edges:).\n\nSee Also\nConfiguring separators\nfunc listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View\nSets the tint color associated with a section.\nfunc listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View\nSets the display mode for the separator associated with this specific row.\nfunc listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View\nSets whether to hide the separator associated with a list section."
    },
    {
        "title": "listRowBackground(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/listrowbackground(_:)",
        "html": "Parameters\nview\n\nThe View to use as the background behind the list row view.\n\nReturn Value\n\nA list row view with view as its background view.\n\nDiscussion\n\nUse listRowBackground(_:) to place a custom background view behind a list row item.\n\nIn the example below, the Flavor enumeration provides content for list items. The SwiftUI ForEach structure computes views for each element of the Flavor enumeration and extracts the raw value of each of its elements using the resulting text to create each list row item. The listRowBackground(_:) modifier then places the view you supply behind each of the list row items:\n\nstruct ContentView: View {\n    enum Flavor: String, CaseIterable, Identifiable {\n        var id: String { self.rawValue }\n        case vanilla, chocolate, strawberry\n    }\n\n\n    var body: some View {\n        List {\n            ForEach(Flavor.allCases) {\n                Text($0.rawValue)\n                    .listRowBackground(Ellipse()\n                                        .background(Color.clear)\n                                        .foregroundColor(.purple)\n                                        .opacity(0.3)\n                    )\n            }\n        }\n    }\n}\n\n\nSee Also\nConfiguring backgrounds\nfunc alternatingRowBackgrounds(AlternatingRowBackgroundBehavior) -> some View\nOverrides whether lists and tables in this view have alternating row backgrounds.\nstruct AlternatingRowBackgroundBehavior\nThe styling of views with respect to alternating row backgrounds.\nvar backgroundProminence: BackgroundProminence\nThe prominence of the background underneath views associated with this environment.\nstruct BackgroundProminence\nThe prominence of backgrounds underneath other views."
    },
    {
        "title": "Displaying data in lists",
        "url": "https://developer.apple.com/documentation/swiftui/displaying-data-in-lists",
        "html": "Overview\n\nDisplaying a collection of data in a vertical list is a common requirement in many apps. Whether it\u2019s a list of contacts, a schedule of events, an index of categories, or a shopping list, you\u2019ll often find a use for a List.\n\nList views display collections of items vertically, load rows as needed, and add scrolling when the rows don\u2019t fit on the screen, making them suitable for displaying large collections of data.\n\nBy default, list views also apply platform-appropriate styling to their elements. For example, on iOS, the default configuration of a list displays a separator line between each row, and adds disclosure indicators next to items that initiate navigation actions.\n\nNote\n\nIf you want to remove the platform-appropriate styling \u2014 such as row separators or automatic disclosure indicators \u2014 from your list, consider using LazyVStack instead. For more information on working with lazy stacks, see Creating performant scrollable stacks\n\nThe code in this article shows the use of list views to display a company\u2019s staff directory. Each section enhances the usefulness of the list, by adding custom cells, splitting the list into sections, and using the list selection to navigate to a detail view.\n\nPrepare your data for iteration\n\nThe most common use of List is for representing collections of information in your data model. The following example defines a Person as an Identifiable type with the properties name and phoneNumber. An array called staff contains two instances of this type.\n\nstruct Person: Identifiable {\n     let id = UUID()\n     var name: String\n     var phoneNumber: String\n }\n\n\nvar staff = [\n    Person(name: \"Juan Chavez\", phoneNumber: \"(408) 555-4301\"),\n    Person(name: \"Mei Chen\", phoneNumber: \"(919) 555-2481\")\n]\n\n\nTo present the contents of the array as a list, the example creates a List instance. The list\u2019s content builder uses a ForEach to iterate over the staff array. For each member of the array, the listing creates a row view by instantiating a new Text that contains the name of the Person.\n\nstruct StaffList: View {\n    var body: some View {\n        List {\n            ForEach(staff) { person in\n                Text(person.name)\n            }\n        }\n    }\n}\n\n\nMembers of a list must be uniquely identifiable from one another. Unique identifiers allow SwiftUI to automatically generate animations for changes in the underlying data, like inserts, deletions, and moves. Identify list members either by using a type that conforms to Identifiable, as Person does, or by providing an id parameter with the key path to a unique property of the type. The ForEach that populates the list above depends on this behavior, as do the List initializers that take a RandomAccessCollection of members to iterate over.\n\nImportant\n\nThe values you use for Identifiable data must be unique. Using a UUID or a database row identifier are both good choices, whereas using data like a person\u2019s name or phone number could potentially contain duplicates.\n\nDisplay data inside a row\n\nEach row inside a List must be a SwiftUI View. You may be able to represent your data with a single view such as an Image or Text view, or you may need to define a custom view to compose several views into something more complex.\n\nAs your row views get more sophisticated, refactor the views into separate view structures, passing in the data that the row needs to render. The following example defines a PersonRowView to create a two-line view for a Person, using fonts, colors, and the system \u201cphone\u201d icon image to visually style the data.\n\nstruct PersonRowView: View {\n    var person: Person\n\n\n    var body: some View {\n        VStack(alignment: .leading, spacing: 3) {\n            Text(person.name)\n                .foregroundColor(.primary)\n                .font(.headline)\n            HStack(spacing: 3) {\n                Label(person.phoneNumber, systemImage: \"phone\")\n            }\n            .foregroundColor(.secondary)\n            .font(.subheadline)\n        }\n    }\n}\n\n\nstruct StaffList: View {\n    var body: some View {\n        List {\n            ForEach(staff) { person in\n                PersonRowView(person: person)\n            }\n        }\n    }\n}\n\n\nFor more information on composing the types of views commonly used inside list rows, see Building layouts with stack views.\n\nRepresent data hierarchy with sections\n\nList views can also display data with a level of hierarchy, grouping associated data into sections.\n\nConsider an expanded data model that represents an entire company, including multiple departments. Each Department has a name and an array of Person instances, and the company has an array of the Department type.\n\nstruct Department: Identifiable {\n    let id = UUID()\n    var name: String\n    var staff: [Person]\n}\n\n\nstruct Company {\n    var departments: [Department]\n}\n\n\nvar company = Company(departments: [\n    Department(name: \"Sales\", staff: [\n        Person(name: \"Juan Chavez\", phoneNumber: \"(408) 555-4301\"),\n        Person(name: \"Mei Chen\", phoneNumber: \"(919) 555-2481\"),\n        // ...\n    ]),\n    Department(name: \"Engineering\", staff: [\n        Person(name: \"Bill James\", phoneNumber: \"(408) 555-4450\"),\n        Person(name: \"Anne Johnson\", phoneNumber: \"(417) 555-9311\"),\n        // ...\n    ]),\n    // ...\n])\n\n\nUse Section views to give the data inside a List a level of hierarchy. Start by creating the List, using a ForEach to iterate over the company.departments array, and then create Section views for each department. Within the section\u2019s view builder, use a ForEach to iterate over the department\u2019s staff, and return a customized view for each Person.\n\nList {\n     ForEach(company.departments) { department in\n         Section(header: Text(department.name)) {\n             ForEach(department.staff) { person in\n                PersonRowView(person: person)\n             }\n         }\n     }\n }\n\n\nNote\n\nIf your data hierarchy is too deep to represent with a single level of sections and rows, OutlineGroup and DisclosureGroup might be a better fit. These views use a disclosure metaphor to allow the user to drill down to an arbitrary depth in the hierarchy.\n\nUse Lists for Navigation\n\nUsing a NavigationLink within a List contained inside a NavigationView adds platform-appropriate visual styling, and in some cases, additional container views that provide the structure for navigation. SwiftUI uses one of two visual presentations, based on the runtime environment:\n\nA list with disclosure indicators, which performs an animated navigation to a destination scene when the user chooses a list item. SwiftUI uses this presentation on watchOS, tvOS, and on most iOS devices except as described below.\n\nA two-panel split view, with the top-level data as a list on the left side and the detail on the right. To get this presentation, you also need to provide a placeholder view after the list; this placeholder fills the detail pane until the user makes a selection. SwiftUI uses this two-panel approach on macOS, iPadOS, and on iOS devices with sufficient horizontal space, as indicated by the horizontalSizeClass environment value.\n\nThe following example sets up a navigation-based UI by wrapping the list with a navigation view. Instances of NavigationLink wrap the list\u2019s rows to provide a destination view to navigate to when the user taps the row. If a split view navigation is appropriate for the platform, the right panel initially contains the \u201cNo Selection\u201d placeholder view, which the navigation view replaces with the destination view when the user makes a selection.\n\nNavigationView {\n    List {\n        ForEach(company.departments) { department in\n            Section(header: Text(department.name)) {\n                ForEach(department.staff) { person in\n                    NavigationLink(destination: PersonDetailView(person: person)) {\n                        PersonRowView(person: person)\n                    }\n                }\n            }\n        }\n    }\n    .navigationTitle(\"Staff Directory\")\n\n\n    // Placeholder\n    Text(\"No Selection\")\n        .font(.headline)\n}\n\n\nIn this example, the view passed in as the destination is a PersonDetailView, which repeats the information from the list. In a more complex app, this detail view could show more information about a Person than would fit inside the list row.\n\nstruct PersonDetailView: View {\n    var person: Person\n\n\n    var body: some View {\n        VStack {\n            Text(person.name)\n                .foregroundColor(.primary)\n                .font(.title)\n                .padding()\n            HStack {\n                Label(person.phoneNumber, systemImage: \"phone\")\n            }\n            .foregroundColor(.secondary)\n        }\n    }\n}\n\n\nOn most iOS devices (those with a compact horizontal size class), the list appears as a view by itself, and tapping a row performs an animated transition to the destination view. The following figure shows both the list view and the destination view that appears when the user makes a selection:\n\nOn the other hand, iPadOS and macOS show the list and the detail view together as a multi-column view. The following figure shows what this example looks like on macOS prior to making a selection, which means the \u201cNo selection\u201d placeholder view is still in the detail column.\n\nYou can use the navigationViewStyle(_:) view modifier to change the default behavior of a NavigationView. For example, on iOS, the StackNavigationViewStyle forces single-column mode, even on an iPad in landscape orientation.\n\nSee Also\nCreating a list\nstruct List\nA container that presents rows of data arranged in a single column, optionally providing the ability to select one or more members.\nfunc listStyle<S>(S) -> some View\nSets the style for lists within this view.\nstruct Section\nA container view that you can use to add hierarchy within certain views."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/uiapplicationdelegateadaptor/init(_:)-8vsx1",
        "html": "Parameters\ndelegateType\n\nThe type of application delegate that you define in your app, which conforms to the UIApplicationDelegate and ObservableObject protocols.\n\nDiscussion\n\nCall this initializer indirectly by creating a property with the UIApplicationDelegateAdaptor property wrapper from inside your App declaration:\n\n@main\nstruct MyApp: App {\n    @UIApplicationDelegateAdaptor private var appDelegate: MyAppDelegate\n\n\n    var body: some Scene { ... }\n}\n\n\nSwiftUI initializes the delegate and manages its lifetime, calling it as needed to handle application delegate callbacks.\n\nSwiftUI invokes this method when your app delegate conforms to the ObservableObject protocol. In this case, SwiftUI automatically places the delegate in the Environment. You can access such a delegate from any scene or view in your app using the EnvironmentObject property wrapper:\n\n@EnvironmentObject private var appDelegate: MyAppDelegate\n\n\nIf your delegate isn\u2019t an observable object, SwiftUI invokes the init(_:) initializer rather than this one, and doesn\u2019t put the delegate instance in the environment.\n\nSee Also\nCreating a delegate adaptor\ninit(DelegateType.Type)\nCreates a UIKit app delegate adaptor.\ninit(DelegateType.Type)\nCreates a UIKit app delegate adaptor using an observable delegate.\nAvailable when DelegateType inherits NSObject, DelegateType conforms to Observable, and DelegateType conforms to UIApplicationDelegate."
    },
    {
        "title": "listRowHoverEffect(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/listrowhovereffect(_:)",
        "html": "Parameters\neffect\n\nThe hover effect applied to the entire list row.\n\nReturn Value\n\nA view that requests a hover effect for a containing list row\n\nDiscussion\n\nBy default, List rows have built-in hover effects in visionOS. In some cases, it is useful to change the default hover effect.\n\nThis modifier can be applied to a list row\u2019s content to request that the list row\u2019s default effect be replaced by the provided effect. If the view is not contained within a List or if the view does not support hover effects in this context, the modifier has no effect.\n\nUse a nil effect to indicate that the list row\u2019s default hover effect should not be modified.\n\nSee Also\nConfiguring rows\nfunc listRowInsets(EdgeInsets?) -> some View\nApplies an inset to the rows in a list.\nfunc listRowHoverEffectDisabled(Bool) -> some View\nRequests that the containing list row have its hover effect disabled.\nBeta\nfunc listItemTint(Color?) -> some View\nSets a fixed tint color associated with specific content in a list.\nfunc listItemTint(ListItemTint?) -> some View\nSets the tint effect for content in a list.\nstruct ListItemTint\nThe configuration of a tint effect applied to content within a List.\nvar defaultMinListRowHeight: CGFloat\nThe default minimum height of a row in a list."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/nsapplicationdelegateadaptor/init(_:)-1dott",
        "html": "Parameters\ndelegateType\n\nThe type of application delegate that you define in your app, which conforms to the NSApplicationDelegate and ObservableObject protocols.\n\nDiscussion\n\nCall this initializer indirectly by creating a property with the NSApplicationDelegateAdaptor property wrapper from inside your App declaration:\n\n@main\nstruct MyApp: App {\n    @NSApplicationDelegateAdaptor private var appDelegate: MyAppDelegate\n\n\n    var body: some Scene { ... }\n}\n\n\nSwiftUI initializes the delegate and manages its lifetime, calling it as needed to handle application delegate callbacks.\n\nSwiftUI invokes this method when your app delegate conforms to the ObservableObject protocol. In this case, SwiftUI automatically places the delegate in the Environment. You can access such a delegate from any scene or view in your app using the EnvironmentObject property wrapper:\n\n@EnvironmentObject private var appDelegate: MyAppDelegate\n\n\nIf your delegate isn\u2019t an observable object, SwiftUI invokes the init(_:) initializer rather than this one, and doesn\u2019t put the delegate instance in the environment.\n\nSee Also\nCreating a delegate adaptor\ninit(DelegateType.Type)\nCreates an AppKit app delegate adaptor.\ninit(DelegateType.Type)\nCreates an AppKit app delegate adaptor using an observable delegate.\nAvailable when DelegateType inherits NSObject, DelegateType conforms to NSApplicationDelegate, and DelegateType conforms to Observable."
    },
    {
        "title": "defaultMinListRowHeight",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/defaultminlistrowheight",
        "html": "See Also\nConfiguring rows\nfunc listRowInsets(EdgeInsets?) -> some View\nApplies an inset to the rows in a list.\nfunc listRowHoverEffect(HoverEffect?) -> some View\nRequests that the containing list row use the provided hover effect.\nBeta\nfunc listRowHoverEffectDisabled(Bool) -> some View\nRequests that the containing list row have its hover effect disabled.\nBeta\nfunc listItemTint(Color?) -> some View\nSets a fixed tint color associated with specific content in a list.\nfunc listItemTint(ListItemTint?) -> some View\nSets the tint effect for content in a list.\nstruct ListItemTint\nThe configuration of a tint effect applied to content within a List."
    },
    {
        "title": "listSectionSeparatorTint(_:edges:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/listsectionseparatortint(_:edges:)",
        "html": "Parameters\ncolor\n\nThe color to use to tint the section separators, or nil to use the default color for the current list style.\n\nedges\n\nThe set of row edges for which the tint applies. The list style might decide to not display certain separators, typically the top edge. The default is all.\n\nDiscussion\n\nSeparators can be presented above and below a section. You can specify to which edge this preference should apply.\n\nThis modifier expresses a preference to the containing List. The list style is the final arbiter for the separator tint.\n\nThe following example shows a simple grouped list whose section separators are tinted based on section-specific data:\n\nList {\n    ForEach(garage) { garage in\n        Section(header: Text(garage.location)) {\n            ForEach(garage.cars) { car in\n                Text(car.model)\n                    .listRowSeparatorTint(car.brandColor)\n            }\n        }\n        .listSectionSeparatorTint(\n            garage.cars.last?.brandColor, edges: .bottom)\n    }\n}\n.listStyle(.grouped)\n\n\nTo change the visibility and tint color for a row separator, use listRowSeparator(_:edges:) and listRowSeparatorTint(_:edges:). To hide a section separator, use listSectionSeparator(_:edges:).\n\nSee Also\nConfiguring separators\nfunc listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View\nSets the tint color associated with a row.\nfunc listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View\nSets the display mode for the separator associated with this specific row.\nfunc listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View\nSets whether to hide the separator associated with a list section."
    },
    {
        "title": "ListItemTint",
        "url": "https://developer.apple.com/documentation/swiftui/listitemtint",
        "html": "Overview\n\nSee Also: View.listItemTint(_:)\n\nTopics\nGetting list item tint options\nstatic let monochrome: ListItemTint\nA standard grayscale tint effect.\nstatic func fixed(Color) -> ListItemTint\nAn explicit tint color.\nstatic func preferred(Color) -> ListItemTint\nAn explicit tint color that the system can override.\nRelationships\nConforms To\nSendable\nSee Also\nConfiguring rows\nfunc listRowInsets(EdgeInsets?) -> some View\nApplies an inset to the rows in a list.\nfunc listRowHoverEffect(HoverEffect?) -> some View\nRequests that the containing list row use the provided hover effect.\nBeta\nfunc listRowHoverEffectDisabled(Bool) -> some View\nRequests that the containing list row have its hover effect disabled.\nBeta\nfunc listItemTint(Color?) -> some View\nSets a fixed tint color associated with specific content in a list.\nfunc listItemTint(ListItemTint?) -> some View\nSets the tint effect for content in a list.\nvar defaultMinListRowHeight: CGFloat\nThe default minimum height of a row in a list."
    },
    {
        "title": "listItemTint(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/listitemtint(_:)-12mbh",
        "html": "Parameters\ntint\n\nThe tint effect to use. Use nil to avoid overriding the inherited tint.\n\nDiscussion\n\nThe containing list\u2019s style applies the tint as appropriate. For example, watchOS uses the tint color for its background platter appearance. Sidebars on iOS and macOS apply the tint color to their Label icons, which otherwise use the accent color by default.\n\nSee Also\nConfiguring rows\nfunc listRowInsets(EdgeInsets?) -> some View\nApplies an inset to the rows in a list.\nfunc listRowHoverEffect(HoverEffect?) -> some View\nRequests that the containing list row use the provided hover effect.\nBeta\nfunc listRowHoverEffectDisabled(Bool) -> some View\nRequests that the containing list row have its hover effect disabled.\nBeta\nfunc listItemTint(Color?) -> some View\nSets a fixed tint color associated with specific content in a list.\nstruct ListItemTint\nThe configuration of a tint effect applied to content within a List.\nvar defaultMinListRowHeight: CGFloat\nThe default minimum height of a row in a list."
    },
    {
        "title": "init(viewing:contentType:viewer:)",
        "url": "https://developer.apple.com/documentation/swiftui/documentgroup/init(viewing:contenttype:viewer:)-9fpk2",
        "html": "Parameters\nmodelType\n\nThe model type defining the schema used for each document.\n\ncontentType\n\nThe content type of document your app can view. It should conform to UTType.package.\n\nviewer\n\nThe viewing UI for the provided document.\n\nDiscussion\n @main\n struct Todo: App {\n     var body: some Scene {\n         DocumentGroup(viewing: TodoItem.self, contentType: .todoItem) {\n             ContentView()\n         }\n     }\n }\n\n\n extension UTType {\n     static var todoItem = UTType(exportedAs: \"com.myApp.todoItem\")\n }\n\n\nImportant\n\nIf your app declares custom uniform type identifiers, include corresponding entries in the app\u2019s Info.plist. For more information, see Defining file and data types for your app. Also, remember to specify the supported Document types in the Info.plist as well.\n\nSee Also\nViewing a document backed by a persistent store\ninit(viewing: [PersistentModel.Type], contentType: UTType, viewer: () -> Content)\nInstantiates a document group for viewing documents that store several model types.\nAvailable when Document is ModelDocument and Content conforms to View.\ninit(viewing: UTType, migrationPlan: SchemaMigrationPlan.Type, viewer: () -> Content)\nInstantiates a document group for viewing documents described by the last Schema in the migration plan.\nAvailable when Document is ModelDocument and Content conforms to View."
    },
    {
        "title": "shape",
        "url": "https://developer.apple.com/documentation/swiftui/strokebordershapeview/shape",
        "html": "See Also\nGetting shape view properties\nvar background: Background\nThe background shown beneath this view.\nvar isAntialiased: Bool\nWhether this shape should be drawn antialiased.\nvar strokeStyle: StrokeStyle\nThe stroke style used when stroking this view\u2019s shape.\nvar style: Style\nThe style that strokes the border of this view\u2019s shape."
    },
    {
        "title": "secondaryAction",
        "url": "https://developer.apple.com/documentation/swiftui/toolbaritemplacement/secondaryaction",
        "html": "Discussion\n\nA secondary action is a frequently used action for the current context but is not a requirement for the current context to function.\n\nSee Also\nGetting placement for specific actions\nstatic let primaryAction: ToolbarItemPlacement\nThe item represents a primary action.\nstatic let confirmationAction: ToolbarItemPlacement\nThe item represents a confirmation action for a modal interface.\nstatic let cancellationAction: ToolbarItemPlacement\nThe item represents a cancellation action for a modal interface.\nstatic let destructiveAction: ToolbarItemPlacement\nThe item represents a destructive action for a modal interface.\nstatic let navigation: ToolbarItemPlacement\nThe item represents a navigation action."
    },
    {
        "title": "$document",
        "url": "https://developer.apple.com/documentation/swiftui/referencefiledocumentconfiguration/$document",
        "html": "See Also\nGetting and setting the document\nvar document: Document\nThe current document model."
    },
    {
        "title": "Snapshot",
        "url": "https://developer.apple.com/documentation/swiftui/referencefiledocument/snapshot",
        "html": "Required\n\nDiscussion\n\nDefine this type to represent all the data that your document stores. When someone issues a Save command, SwiftUI asks your document for a value of this type by calling the document\u2019s snapshot(contentType:) method. SwiftUI sends the snapshot that you provide to the document\u2019s fileWrapper(snapshot:configuration:) method, where you serialize the contents of the snapshot into a file wrapper.\n\nSee Also\nGetting a snapshot\nfunc snapshot(contentType: UTType) throws -> Self.Snapshot\nCreates a snapshot that represents the current state of the document.\n\nRequired"
    },
    {
        "title": "isEditable",
        "url": "https://developer.apple.com/documentation/swiftui/referencefiledocumentconfiguration/iseditable",
        "html": "Discussion\n\nThe value is false if the document is in viewing mode, or if the file is not writable.\n\nSee Also\nGetting document properties\nvar fileURL: URL?\nThe URL of the open file document."
    },
    {
        "title": "wrappedValue",
        "url": "https://developer.apple.com/documentation/swiftui/wkapplicationdelegateadaptor/wrappedvalue",
        "html": "See Also\nGetting the delegate adaptor\nvar projectedValue: ObservedObject<DelegateType>.Wrapper\nA projection of the observed object that creates bindings to its properties using dynamic member lookup.\nAvailable when DelegateType inherits NSObject, DelegateType conforms to ObservableObject, and DelegateType conforms to WKApplicationDelegate."
    },
    {
        "title": "file",
        "url": "https://developer.apple.com/documentation/swiftui/filedocumentreadconfiguration/file",
        "html": "See Also\nReading the content\nlet contentType: UTType\nThe expected uniform type of the file contents."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/wkapplicationdelegateadaptor/init(_:)-2vpnz",
        "html": "Parameters\ndelegate\n\nthe type of WKApplicationDelegate to use.\n\nDiscussion\n\nThe framework will initialize the provided delegate and manage its lifetime, calling out to it when appropriate after performing its own work.\n\nNote\n\nthe instantiated delegate will be placed in the Environment and may be accessed by using the @Environment property wrapper in the view hierarchy.\n\nSee Also\nCreating a delegate adaptor\ninit(DelegateType.Type)\nCreates an WKApplicationDelegateAdaptor using a WatchKit Application Delegate.\ninit(DelegateType.Type)\nCreates an WKApplicationDelegateAdaptor using a WatchKit Application Delegate.\nAvailable when DelegateType inherits NSObject, DelegateType conforms to ObservableObject, and DelegateType conforms to WKApplicationDelegate."
    },
    {
        "title": "projectedValue",
        "url": "https://developer.apple.com/documentation/swiftui/wkapplicationdelegateadaptor/projectedvalue",
        "html": "Discussion\n\nUse the projected value to pass a binding value down a view hierarchy. To get the projectedValue, prefix the property variable with $.\n\nSee Also\nGetting the delegate adaptor\nvar wrappedValue: DelegateType\nThe underlying delegate."
    },
    {
        "title": "listSectionSeparator(_:edges:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/listsectionseparator(_:edges:)",
        "html": "Parameters\nvisibility\n\nThe visibility of this section\u2019s separators.\n\nedges\n\nThe set of row edges for which the preference applies. The list style might already decide to not display separators for some edges. The default is all.\n\nDiscussion\n\nSeparators can be presented above and below a section. You can specify to which edge this preference should apply.\n\nThis modifier expresses a preference to the containing List. The list style is the final arbiter of the separator visibility.\n\nThe following example shows a simple grouped list whose bottom sections separator are hidden:\n\nList {\n    ForEach(garage) { garage in\n        Section(header: Text(garage.location)) {\n            ForEach(garage.cars) { car in\n                Text(car.model)\n                    .listRowSeparatorTint(car.brandColor)\n            }\n        }\n        .listSectionSeparator(.hidden, edges: .bottom)\n    }\n}\n.listStyle(.grouped)\n\n\nTo change the visibility and tint color for a row separator, use listRowSeparator(_:edges:) and listRowSeparatorTint(_:edges:). To set the tint color for a section separator, use listSectionSeparatorTint(_:edges:).\n\nSee Also\nConfiguring separators\nfunc listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View\nSets the tint color associated with a row.\nfunc listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View\nSets the tint color associated with a section.\nfunc listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View\nSets the display mode for the separator associated with this specific row."
    },
    {
        "title": "headerProminence",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/headerprominence",
        "html": "Discussion\n\nThe default is Prominence.standard.\n\nSee Also\nConfiguring headers\nfunc headerProminence(Prominence) -> some View\nSets the header prominence for this view.\nenum Prominence\nA type indicating the prominence of a view hierarchy.\nvar defaultMinListHeaderHeight: CGFloat?\nThe default minimum height of a header in a list."
    },
    {
        "title": "wrappedValue",
        "url": "https://developer.apple.com/documentation/swiftui/nsapplicationdelegateadaptor/wrappedvalue",
        "html": "See Also\nGetting the delegate adaptor\nvar projectedValue: ObservedObject<DelegateType>.Wrapper\nA projection of the observed object that provides bindings to its properties.\nAvailable when DelegateType inherits NSObject, DelegateType conforms to NSApplicationDelegate, and DelegateType conforms to ObservableObject."
    },
    {
        "title": "status",
        "url": "https://developer.apple.com/documentation/swiftui/toolbaritemplacement/status",
        "html": "Discussion\n\nStatus items are informational in nature, and don\u2019t represent an action that can be taken by the user. For example, a message that indicates the time of the last communication with the server to check for new messages.\n\nIn macOS and in Mac Catalyst apps, the system places status items in the center of the toolbar.\n\nIn iOS and iPadOS, the system places status items in the center of the bottom toolbar.\n\nSee Also\nGetting semantic placement\nstatic let automatic: ToolbarItemPlacement\nThe system places the item automatically, depending on many factors including the platform, size class, or presence of other items.\nstatic let principal: ToolbarItemPlacement\nThe system places the item in the principal item section."
    },
    {
        "title": "body",
        "url": "https://developer.apple.com/documentation/swiftui/toolbarcontent/body-swift.property",
        "html": "Required\n\nSee Also\nImplementing toolbar content\nassociatedtype Body : ToolbarContent\nThe type of content representing the body of this toolbar content.\n\nRequired"
    },
    {
        "title": "headerProminence(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/headerprominence(_:)",
        "html": "Parameters\nprominence\n\nThe prominence to apply.\n\nDiscussion\n\nIn the following example, the section header appears with increased prominence:\n\nList {\n    Section(header: Text(\"Header\")) {\n        Text(\"Row\")\n    }\n    .headerProminence(.increased)\n}\n.listStyle(.insetGrouped)\n\nSee Also\nConfiguring headers\nvar headerProminence: Prominence\nThe prominence to apply to section headers within a view.\nenum Prominence\nA type indicating the prominence of a view hierarchy.\nvar defaultMinListHeaderHeight: CGFloat?\nThe default minimum height of a header in a list."
    },
    {
        "title": "Prominence",
        "url": "https://developer.apple.com/documentation/swiftui/prominence",
        "html": "Topics\nGetting prominence options\ncase standard\nThe standard prominence.\ncase increased\nAn increased prominence.\nRelationships\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nConfiguring headers\nfunc headerProminence(Prominence) -> some View\nSets the header prominence for this view.\nvar headerProminence: Prominence\nThe prominence to apply to section headers within a view.\nvar defaultMinListHeaderHeight: CGFloat?\nThe default minimum height of a header in a list."
    },
    {
        "title": "defaultMinListHeaderHeight",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/defaultminlistheaderheight",
        "html": "Discussion\n\nWhen this value is nil, the system chooses the appropriate height. The default is nil.\n\nSee Also\nConfiguring headers\nfunc headerProminence(Prominence) -> some View\nSets the header prominence for this view.\nvar headerProminence: Prominence\nThe prominence to apply to section headers within a view.\nenum Prominence\nA type indicating the prominence of a view hierarchy."
    },
    {
        "title": "listRowSpacing(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/listrowspacing(_:)",
        "html": "Parameters\nspacing\n\nThe spacing value to use. A value of nil uses the default spacing.\n\nDiscussion\n\nThe following example creates a List with 10 pts of spacing between each row:\n\nList {\n    Text(\"Blue\")\n    Text(\"Red\")\n}\n.listRowSpacing(10.0)\n\nSee Also\nConfiguring spacing\nfunc listSectionSpacing(CGFloat) -> some View\nSets the spacing to a custom value between adjacent sections in a List.\nfunc listSectionSpacing(ListSectionSpacing) -> some View\nSets the spacing between adjacent sections in a List.\nstruct ListSectionSpacing\nThe spacing options between two adjacent sections in a list."
    },
    {
        "title": "listSectionSpacing(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/listsectionspacing(_:)-5t518",
        "html": "Discussion\n\nPass .default for the default spacing, or use .compact for a compact appearance between sections.\n\nThe following example creates a List with compact spacing between sections:\n\nList {\n    Section(\"Colors\") {\n        Text(\"Blue\")\n        Text(\"Red\")\n    }\n\n\n    Section(\"Shapes\") {\n        Text(\"Square\")\n        Text(\"Circle\")\n    }\n}\n.listSectionSpacing(.compact)\n\nSee Also\nConfiguring spacing\nfunc listRowSpacing(CGFloat?) -> some View\nSets the vertical spacing between two adjacent rows in a List.\nfunc listSectionSpacing(CGFloat) -> some View\nSets the spacing to a custom value between adjacent sections in a List.\nstruct ListSectionSpacing\nThe spacing options between two adjacent sections in a list."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/wkapplicationdelegateadaptor/init(_:)-13ybb",
        "html": "Parameters\ndelegate\n\nthe type of WKApplicationDelegate to use.\n\nDiscussion\n\nThe framework will initialize the provided delegate and manage its lifetime, calling out to it when appropriate after performing its own work.\n\nNote\n\nthe instantiated delegate will be placed in the Environment and may be accessed by using the @EnvironmentObject property wrapper in the view hierarchy.\n\nSee Also\nCreating a delegate adaptor\ninit(DelegateType.Type)\nCreates an WKApplicationDelegateAdaptor using a WatchKit Application Delegate.\ninit(DelegateType.Type)\nCreates an WKApplicationDelegateAdaptor using a WatchKit Application Delegate.\nAvailable when DelegateType inherits NSObject, DelegateType conforms to Observable, and DelegateType conforms to WKApplicationDelegate."
    },
    {
        "title": "isEditable",
        "url": "https://developer.apple.com/documentation/swiftui/filedocumentconfiguration/iseditable",
        "html": "Discussion\n\nThis value is false if the document is in viewing mode, or if the file is not writable.\n\nSee Also\nGetting document properties\nvar fileURL: URL?\nThe URL of the open file document."
    },
    {
        "title": "ScrollDismissesKeyboardMode",
        "url": "https://developer.apple.com/documentation/swiftui/scrolldismisseskeyboardmode",
        "html": "Overview\n\nUse this type in a call to the scrollDismissesKeyboard(_:) modifier to specify the dismissal behavior of scrollable views.\n\nTopics\nGetting modes\nstatic var automatic: ScrollDismissesKeyboardMode\nDetermine the mode automatically based on the surrounding context.\nstatic var immediately: ScrollDismissesKeyboardMode\nDismiss the keyboard as soon as scrolling starts.\nstatic var interactively: ScrollDismissesKeyboardMode\nEnable people to interactively dismiss the keyboard as part of the scroll operation.\nstatic var never: ScrollDismissesKeyboardMode\nNever dismiss the keyboard automatically as a result of scrolling.\nRelationships\nConforms To\nSendable\nSee Also\nInteracting with a software keyboard\nfunc scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View\nConfigures the behavior in which scrollable content interacts with the software keyboard.\nvar scrollDismissesKeyboardMode: ScrollDismissesKeyboardMode\nThe way that scrollable content interacts with the software keyboard."
    },
    {
        "title": "fileURL",
        "url": "https://developer.apple.com/documentation/swiftui/filedocumentconfiguration/fileurl",
        "html": "See Also\nGetting document properties\nvar isEditable: Bool\nA Boolean that indicates whether you can edit the document."
    },
    {
        "title": "RefreshAction",
        "url": "https://developer.apple.com/documentation/swiftui/refreshaction",
        "html": "Overview\n\nWhen the refresh environment value contains an instance of this structure, certain built-in views in the corresponding Environment begin offering a refresh capability. They apply the instance\u2019s handler to any refresh operation that the user initiates. By default, the environment value is nil, but you can use the refreshable(action:) modifier to create and store a new refresh action that uses the handler that you specify:\n\nList(mailbox.conversations) { conversation in\n    ConversationCell(conversation)\n}\n.refreshable {\n    await mailbox.fetch()\n}\n\n\nOn iOS and iPadOS, the List in the example above offers a pull to refresh gesture because it detects the refresh action. When the user drags the list down and releases, the list calls the action\u2019s handler. Because SwiftUI declares the handler as asynchronous, it can safely make long-running asynchronous calls, like fetching network data.\n\nRefreshing custom views\n\nYou can also offer refresh capability in your custom views. Read the refresh environment value to get the RefreshAction instance for a given Environment. If you find a non-nil value, change your view\u2019s appearance or behavior to offer the refresh to the user, and call the instance to conduct the refresh. You can call the refresh instance directly because it defines a callAsFunction() method that Swift calls when you call the instance:\n\nstruct RefreshableView: View {\n    @Environment(\\.refresh) private var refresh\n\n\n    var body: some View {\n        Button(\"Refresh\") {\n            Task {\n                await refresh?()\n            }\n        }\n        .disabled(refresh == nil)\n    }\n}\n\n\nBe sure to call the handler asynchronously by preceding it with await. Because the call is asynchronous, you can use its lifetime to indicate progress to the user. For example, you might reveal an indeterminate ProgressView before calling the handler, and hide it when the handler completes.\n\nIf your code isn\u2019t already in an asynchronous context, create a Task for the method to run in. If you do this, consider adding a way for the user to cancel the task. For more information, see Concurrency in The Swift Programming Language.\n\nTopics\nCalling the action\nfunc callAsFunction() async\nInitiates a refresh action.\nRelationships\nConforms To\nSendable\nSee Also\nRefreshing a list\u2019s content\nfunc refreshable(action: () async -> Void) -> some View\nMarks this view as refreshable.\nvar refresh: RefreshAction?\nA refresh action stored in a view\u2019s environment."
    },
    {
        "title": "ScrollBounceBehavior",
        "url": "https://developer.apple.com/documentation/swiftui/scrollbouncebehavior",
        "html": "Overview\n\nUse the scrollBounceBehavior(_:axes:) view modifier to set a value of this type for a scrollable view, like a ScrollView or a List. The value configures the bounce behavior when people scroll to the end of the view\u2019s content.\n\nYou can configure each scrollable axis to use a different bounce mode.\n\nTopics\nBounce behaviors\nstatic var automatic: ScrollBounceBehavior\nThe automatic behavior.\nstatic var always: ScrollBounceBehavior\nThe scrollable view always bounces.\nstatic var basedOnSize: ScrollBounceBehavior\nThe scrollable view bounces when its content is large enough to require scrolling.\nRelationships\nConforms To\nSendable\nSee Also\nConfiguring scroll bounce behavior\nfunc scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View\nConfigures the bounce behavior of scrollable views along the specified axis.\nvar horizontalScrollBounceBehavior: ScrollBounceBehavior\nThe scroll bounce mode for the horizontal axis of scrollable views.\nvar verticalScrollBounceBehavior: ScrollBounceBehavior\nThe scroll bounce mode for the vertical axis of scrollable views."
    },
    {
        "title": "editMode",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/editmode",
        "html": "Discussion\n\nRead this environment value to receive a optional binding to the edit mode state. The binding contains an EditMode value that indicates whether edit mode is active, and that you can use to change the mode. To learn how to read an environment value, see EnvironmentValues.\n\nCertain built-in views automatically alter their appearance and behavior in edit mode. For example, a List with a ForEach that\u2019s configured with the onDelete(perform:) or onMove(perform:) modifier provides controls to delete or move list items while in edit mode. On devices without an attached keyboard and mouse or trackpad, people can make multiple selections in lists only when edit mode is active.\n\nYou can also customize your own views to react to edit mode. The following example replaces a read-only Text view with an editable TextField, checking for edit mode by testing the wrapped value\u2019s isEditing property:\n\n@Environment(\\.editMode) private var editMode\n@State private var name = \"Maria Ruiz\"\n\n\nvar body: some View {\n    Form {\n        if editMode?.wrappedValue.isEditing == true {\n            TextField(\"Name\", text: $name)\n        } else {\n            Text(name)\n        }\n    }\n    .animation(nil, value: editMode?.wrappedValue)\n    .toolbar { // Assumes embedding this view in a NavigationView.\n        EditButton()\n    }\n}\n\n\nYou can set the edit mode through the binding, or you can rely on an EditButton to do that for you, as the example above demonstrates. The button activates edit mode when the user taps the Edit button, and disables editing mode when the user taps Done.\n\nSee Also\nEditing a list\nfunc moveDisabled(Bool) -> some View\nAdds a condition for whether the view\u2019s view hierarchy is movable.\nfunc deleteDisabled(Bool) -> some View\nAdds a condition for whether the view\u2019s view hierarchy is deletable.\nenum EditMode\nA mode that indicates whether the user can edit a view\u2019s content.\nstruct EditActions\nA set of edit actions on a collection of data that a view can offer to a user.\nstruct EditableCollectionContent\nAn opaque wrapper view that adds editing capabilities to a row in a list.\nstruct IndexedIdentifierCollection\nA collection wrapper that iterates over the indices and identifiers of a collection together."
    },
    {
        "title": "EditActions",
        "url": "https://developer.apple.com/documentation/swiftui/editactions",
        "html": "Topics\nGetting edit operations\nstatic var all: EditActions<Data>\nAll the edit actions available on this collection.\nAvailable when Data conforms to MutableCollection and RangeReplaceableCollection.\nstatic var all: EditActions<Data>\nAll the edit actions available on this collection.\nAvailable when Data conforms to MutableCollection.\nstatic var all: EditActions<Data>\nAll the edit actions available on this collection.\nAvailable when Data conforms to RangeReplaceableCollection.\nstatic var all: EditActions<Data>\nAll the edit actions available on this collection.\nstatic var delete: EditActions<Data>\nAn edit action that allows the user to delete one or more elements of a collection.\nAvailable when Data conforms to RangeReplaceableCollection.\nstatic var move: EditActions<Data>\nAn edit action that allows the user to move elements of a collection.\nAvailable when Data conforms to MutableCollection.\nCreating an edit operation\ninit(rawValue: Int)\nCreates a new set from a raw value.\nlet rawValue: Int\nThe raw value.\nRelationships\nConforms To\nEquatable\nExpressibleByArrayLiteral\nOptionSet\nRawRepresentable\nSendable\nSetAlgebra\nSee Also\nEditing a list\nfunc moveDisabled(Bool) -> some View\nAdds a condition for whether the view\u2019s view hierarchy is movable.\nfunc deleteDisabled(Bool) -> some View\nAdds a condition for whether the view\u2019s view hierarchy is deletable.\nvar editMode: Binding<EditMode>?\nAn indication of whether the user can edit the contents of a view associated with this environment.\nenum EditMode\nA mode that indicates whether the user can edit a view\u2019s content.\nstruct EditableCollectionContent\nAn opaque wrapper view that adds editing capabilities to a row in a list.\nstruct IndexedIdentifierCollection\nA collection wrapper that iterates over the indices and identifiers of a collection together."
    },
    {
        "title": "scrollDismissesKeyboardMode",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/scrolldismisseskeyboardmode",
        "html": "Discussion\n\nThe default value is automatic. Use the scrollDismissesKeyboard(_:) modifier to configure this property.\n\nSee Also\nInteracting with a software keyboard\nfunc scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View\nConfigures the behavior in which scrollable content interacts with the software keyboard.\nstruct ScrollDismissesKeyboardMode\nThe ways that scrollable content can interact with the software keyboard."
    },
    {
        "title": "EditMode",
        "url": "https://developer.apple.com/documentation/swiftui/editmode",
        "html": "Overview\n\nYou receive an optional binding to the edit mode state when you read the editMode environment value. The binding contains an EditMode value that indicates whether edit mode is active, and that you can use to change the mode. To learn how to read an environment value, see EnvironmentValues.\n\nCertain built-in views automatically alter their appearance and behavior in edit mode. For example, a List with a ForEach that\u2019s configured with the onDelete(perform:) or onMove(perform:) modifier provides controls to delete or move list items while in edit mode. On devices without an attached keyboard and mouse or trackpad, people can make multiple selections in lists only when edit mode is active.\n\nYou can also customize your own views to react to edit mode. The following example replaces a read-only Text view with an editable TextField, checking for edit mode by testing the wrapped value\u2019s isEditing property:\n\n@Environment(\\.editMode) private var editMode\n@State private var name = \"Maria Ruiz\"\n\n\nvar body: some View {\n    Form {\n        if editMode?.wrappedValue.isEditing == true {\n            TextField(\"Name\", text: $name)\n        } else {\n            Text(name)\n        }\n    }\n    .animation(nil, value: editMode?.wrappedValue)\n    .toolbar { // Assumes embedding this view in a NavigationView.\n        EditButton()\n    }\n}\n\n\nYou can set the edit mode through the binding, or you can rely on an EditButton to do that for you, as the example above demonstrates. The button activates edit mode when the user taps it, and disables the mode when the user taps again.\n\nTopics\nGetting edit modes\ncase active\nThe user can edit the view content.\ncase inactive\nThe user can\u2019t edit the view content.\ncase transient\nThe view is in a temporary edit mode.\nChecking for editing mode\nvar isEditing: Bool\nIndicates whether a view is being edited.\nRelationships\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nEditing a list\nfunc moveDisabled(Bool) -> some View\nAdds a condition for whether the view\u2019s view hierarchy is movable.\nfunc deleteDisabled(Bool) -> some View\nAdds a condition for whether the view\u2019s view hierarchy is deletable.\nvar editMode: Binding<EditMode>?\nAn indication of whether the user can edit the contents of a view associated with this environment.\nstruct EditActions\nA set of edit actions on a collection of data that a view can offer to a user.\nstruct EditableCollectionContent\nAn opaque wrapper view that adds editing capabilities to a row in a list.\nstruct IndexedIdentifierCollection\nA collection wrapper that iterates over the indices and identifiers of a collection together."
    },
    {
        "title": "IndexedIdentifierCollection",
        "url": "https://developer.apple.com/documentation/swiftui/indexedidentifiercollection",
        "html": "Overview\n\nYou don\u2019t use this type directly. Instead SwiftUI creates this type on your behalf.\n\nRelationships\nConforms To\nBidirectionalCollection\nCollection\nRandomAccessCollection\nSequence\nSee Also\nEditing a list\nfunc moveDisabled(Bool) -> some View\nAdds a condition for whether the view\u2019s view hierarchy is movable.\nfunc deleteDisabled(Bool) -> some View\nAdds a condition for whether the view\u2019s view hierarchy is deletable.\nvar editMode: Binding<EditMode>?\nAn indication of whether the user can edit the contents of a view associated with this environment.\nenum EditMode\nA mode that indicates whether the user can edit a view\u2019s content.\nstruct EditActions\nA set of edit actions on a collection of data that a view can offer to a user.\nstruct EditableCollectionContent\nAn opaque wrapper view that adds editing capabilities to a row in a list."
    },
    {
        "title": "verticalScrollBounceBehavior",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/verticalscrollbouncebehavior",
        "html": "Discussion\n\nUse the scrollBounceBehavior(_:axes:) view modifier to set this value in the Environment.\n\nSee Also\nConfiguring scroll bounce behavior\nfunc scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View\nConfigures the bounce behavior of scrollable views along the specified axis.\nvar horizontalScrollBounceBehavior: ScrollBounceBehavior\nThe scroll bounce mode for the horizontal axis of scrollable views.\nstruct ScrollBounceBehavior\nThe ways that a scrollable view can bounce when it reaches the end of its content."
    },
    {
        "title": "ScrollViewProxy",
        "url": "https://developer.apple.com/documentation/swiftui/scrollviewproxy",
        "html": "Overview\n\nYou don\u2019t create instances of ScrollViewProxy directly. Instead, your ScrollViewReader receives an instance of ScrollViewProxy in its content view builder. You use actions within this view builder, such as button and gesture handlers or the onChange(of:perform:) method, to call the proxy\u2019s scrollTo(_:anchor:) method.\n\nTopics\nPerforming scrolling\nfunc scrollTo<ID>(ID, anchor: UnitPoint?)\nScans all scroll views contained by the proxy for the first with a child view with identifier id, and then scrolls to that view.\nSee Also\nCreating a scroll view\nstruct ScrollView\nA scrollable view.\nstruct ScrollViewReader\nA view that provides programmatic scrolling, by working with a proxy to scroll to known child views."
    },
    {
        "title": "deleteDisabled(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/deletedisabled(_:)",
        "html": "See Also\nEditing a list\nfunc moveDisabled(Bool) -> some View\nAdds a condition for whether the view\u2019s view hierarchy is movable.\nvar editMode: Binding<EditMode>?\nAn indication of whether the user can edit the contents of a view associated with this environment.\nenum EditMode\nA mode that indicates whether the user can edit a view\u2019s content.\nstruct EditActions\nA set of edit actions on a collection of data that a view can offer to a user.\nstruct EditableCollectionContent\nAn opaque wrapper view that adds editing capabilities to a row in a list.\nstruct IndexedIdentifierCollection\nA collection wrapper that iterates over the indices and identifiers of a collection together."
    },
    {
        "title": "moveDisabled(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/movedisabled(_:)",
        "html": "See Also\nEditing a list\nfunc deleteDisabled(Bool) -> some View\nAdds a condition for whether the view\u2019s view hierarchy is deletable.\nvar editMode: Binding<EditMode>?\nAn indication of whether the user can edit the contents of a view associated with this environment.\nenum EditMode\nA mode that indicates whether the user can edit a view\u2019s content.\nstruct EditActions\nA set of edit actions on a collection of data that a view can offer to a user.\nstruct EditableCollectionContent\nAn opaque wrapper view that adds editing capabilities to a row in a list.\nstruct IndexedIdentifierCollection\nA collection wrapper that iterates over the indices and identifiers of a collection together."
    },
    {
        "title": "scrollTargetLayout(isEnabled:)",
        "url": "https://developer.apple.com/documentation/swiftui/view/scrolltargetlayout(isenabled:)",
        "html": "Discussion\n\nThis modifier works together with the ViewAlignedScrollTargetBehavior to ensure that scroll views align to view based content.\n\nApply this modifier to layout containers like LazyHStack or VStack within a ScrollView that contain the main repeating content of your ScrollView.\n\nScrollView(.horizontal) {\n    LazyHStack(spacing: 10.0) {\n        ForEach(items) { item in\n            ItemView(item)\n        }\n    }\n    .scrollTargetLayout()\n}\n.scrollTargetBehavior(.viewAligned)\n\n\nScroll target layouts act as a convenience for applying a View/scrollTarget(isEnabled:) modifier to each views in the layout.\n\nA scroll target layout will ensure that any target layout nested within the primary one will not also become a scroll target layout.\n\nLazyHStack { // a scroll target layout\n    VStack { ... } // not a scroll target layout\n    LazyHStack { ... } // also not a scroll target layout\n}\n.scrollTargetLayout()\n\nSee Also\nDefining scroll targets\nfunc scrollTargetBehavior(some ScrollTargetBehavior) -> some View\nSets the scroll behavior of views scrollable in the provided axes.\nstruct ScrollTarget\nA type defining the target in which a scroll view should try and scroll to.\nprotocol ScrollTargetBehavior\nA type that defines the scroll behavior of a scrollable view.\nstruct ScrollTargetBehaviorContext\nThe context in which a scroll target behavior updates its scroll target.\nstruct PagingScrollTargetBehavior\nThe scroll behavior that aligns scroll targets to container-based geometry.\nstruct ViewAlignedScrollTargetBehavior\nThe scroll behavior that aligns scroll targets to view-based geometry."
    },
    {
        "title": "ScrollTransitionConfiguration",
        "url": "https://developer.apple.com/documentation/swiftui/scrolltransitionconfiguration",
        "html": "Topics\nGetting the configuration\nstatic let identity: ScrollTransitionConfiguration\nCreates a new configuration that does not change the appearance of the view.\nstatic let animated: ScrollTransitionConfiguration\nCreates a new configuration that discretely animates the transition when the view becomes visible.\nstatic func animated(Animation) -> ScrollTransitionConfiguration\nCreates a new configuration that discretely animates the transition when the view becomes visible.\nstatic let interactive: ScrollTransitionConfiguration\nCreates a new configuration that interactively interpolates the transition\u2019s effect as the view is scrolled into the visible region of the container.\nstatic func interactive(timingCurve: UnitCurve) -> ScrollTransitionConfiguration\nCreates a new configuration that interactively interpolates the transition\u2019s effect as the view is scrolled into the visible region of the container.\nAccessing the configuration\nfunc animation(Animation) -> ScrollTransitionConfiguration\nSets the animation with which the transition will be applied.\nfunc threshold(ScrollTransitionConfiguration.Threshold) -> ScrollTransitionConfiguration\nSets the threshold at which the view will be considered fully visible.\nstruct Threshold\nDescribes a specific point in the progression of a target view within a container from hidden (fully outside the container) to visible.\nSee Also\nAnimating scroll transitions\nfunc scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View\nApplies the given transition, animating between the phases of the transition as this view appears and disappears within the visible region of the containing scroll view, or other container specified using the coordinateSpace parameter.\nfunc scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View\nApplies the given transition, animating between the phases of the transition as this view appears and disappears within the visible region of the containing scroll view, or other container specified using the coordinateSpace parameter.\nenum ScrollTransitionPhase\nThe phases that a view transitions between when it scrolls among other views."
    },
    {
        "title": "horizontalScrollBounceBehavior",
        "url": "https://developer.apple.com/documentation/swiftui/environmentvalues/horizontalscrollbouncebehavior",
        "html": "Discussion\n\nUse the scrollBounceBehavior(_:axes:) view modifier to set this value in the Environment.\n\nSee Also\nConfiguring scroll bounce behavior\nfunc scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View\nConfigures the bounce behavior of scrollable views along the specified axis.\nvar verticalScrollBounceBehavior: ScrollBounceBehavior\nThe scroll bounce mode for the vertical axis of scrollable views.\nstruct ScrollBounceBehavior\nThe ways that a scrollable view can bounce when it reaches the end of its content."
    },
    {
        "title": "ExpandedWindowToolbarStyle",
        "url": "https://developer.apple.com/documentation/swiftui/expandedwindowtoolbarstyle",
        "html": "Overview\n\nYou can also use expanded to construct this style.\n\nTopics\nCreating the window toolbar style\ninit()\nCreates an expanded window toolbar style.\nRelationships\nConforms To\nWindowToolbarStyle\nSee Also\nSupporting types\nstruct DefaultWindowToolbarStyle\nThe default window toolbar style.\nstruct UnifiedWindowToolbarStyle\nA window toolbar style which displays its toolbar and title bar inline.\nstruct UnifiedCompactWindowToolbarStyle\nA window toolbar style similar to unified, but with a more compact vertical sizing."
    },
    {
        "title": "init(id:for:content:defaultValue:)",
        "url": "https://developer.apple.com/documentation/swiftui/windowgroup/init(id:for:content:defaultvalue:)",
        "html": "Parameters\nid\n\nA string that uniquely identifies the window group. Identifiers must be unique among the window groups in your app.\n\ntype\n\nThe type of presented data this window group accepts.\n\ncontent\n\nA closure that creates the content for each instance of the group. The closure receives a binding to the value that you pass into the openWindow action when you open the window. SwiftUI automatically persists and restores the value of this binding as part of the state restoration process.\n\ndefaultValue\n\nA closure that returns a default value to present. SwiftUI calls this closure when it has no data to provide, like when someone opens a new window from the File > New Window menu item.\n\nDiscussion\n\nThe window group uses the given view as a template to form the content of each window in the group.\n\nSwiftUI creates a window from the group when you present a value of the specified type using the openWindow action.\n\nSee Also\nIdentifying a window group that has default data\ninit<D, C>(LocalizedStringKey, id: String, for: D.Type, content: (Binding<D>) -> C, defaultValue: () -> D)\nCreates a data-presenting window group with a localized title string, an identifier, and a default value.\nAvailable when Content conforms to View.\ninit<S, D, C>(S, id: String, for: D.Type, content: (Binding<D>) -> C, defaultValue: () -> D)\nCreates a data-presenting window group with a title string, an identifier, and a default value.\nAvailable when Content conforms to View.\ninit<D, C>(Text, id: String, for: D.Type, content: (Binding<D>) -> C, defaultValue: () -> D)\nCreates a data-presenting window group with a text view title, an identifier, and a default value.\nAvailable when Content conforms to View."
    },
    {
        "title": "init(_:for:content:defaultValue:)",
        "url": "https://developer.apple.com/documentation/swiftui/windowgroup/init(_:for:content:defaultvalue:)-gbu5",
        "html": "Parameters\ntitle\n\nThe string to use for the title of the group.\n\ntype\n\nThe type of presented data this window group accepts.\n\ncontent\n\nA closure that creates the content for each instance of the group. The closure receives a binding to the value that you pass into the openWindow action when you open the window. SwiftUI automatically persists and restores the value of this binding as part of the state restoration process.\n\ndefaultValue\n\nA closure that returns a default value to present. SwiftUI calls this closure when it has no data to provide, like when someone opens a new window from the File > New Window menu item.\n\nDiscussion\n\nThe window group uses the specified content as a template to create each window in the group.\n\nThe system uses the title to distinguish the window group in the user interface, such as in the name of commands associated with the group.\n\nSwiftUI creates a window from the group when you present a value of the specified type using the openWindow action.\n\nSee Also\nProviding default data to a window group\ninit<D, C>(for: D.Type, content: (Binding<D>) -> C, defaultValue: () -> D)\nCreates a data-presenting window group with a default value.\nAvailable when Content conforms to View.\ninit<D, C>(LocalizedStringKey, for: D.Type, content: (Binding<D>) -> C, defaultValue: () -> D)\nCreates a data-presenting window group with a localized title string and a default value.\nAvailable when Content conforms to View.\ninit<D, C>(Text, for: D.Type, content: (Binding<D>) -> C, defaultValue: () -> D)\nCreates a data-presenting window group with a text view title and a default value.\nAvailable when Content conforms to View."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/swiftui/nsapplicationdelegateadaptor/init(_:)-62dny",
        "html": "Parameters\ndelegateType\n\nThe type of application delegate that you define in your app, which conforms to the NSApplicationDelegate and Observable protocols.\n\nDiscussion\n\nCall this initializer indirectly by creating a property with the NSApplicationDelegateAdaptor property wrapper from inside your App declaration:\n\n@main\nstruct MyApp: App {\n    @NSApplicationDelegateAdaptor private var appDelegate: MyAppDelegate\n\n\n    var body: some Scene { ... }\n}\n\n\nSwiftUI initializes the delegate and manages its lifetime, calling it as needed to handle application delegate callbacks.\n\nSwiftUI invokes this method when your app delegate conforms to the Observable protocol. In this case, SwiftUI automatically places the delegate in the Environment. You can access such a delegate from any scene or view in your app using the Environment property wrapper:\n\n@Environment(MyAppDelegate.self) private var appDelegate\n\n\nIf your delegate isn\u2019t observable, SwiftUI invokes the init(_:) initializer rather than this one, and doesn\u2019t put the delegate instance in the environment.\n\nSee Also\nCreating a delegate adaptor\ninit(DelegateType.Type)\nCreates an AppKit app delegate adaptor using a delegate that\u2019s an observable object.\nAvailable when DelegateType inherits NSObject, DelegateType conforms to NSApplicationDelegate, and DelegateType conforms to ObservableObject.\ninit(DelegateType.Type)\nCreates an AppKit app delegate adaptor."
    },
    {
        "title": "projectedValue",
        "url": "https://developer.apple.com/documentation/swiftui/nsapplicationdelegateadaptor/projectedvalue",
        "html": "Discussion\n\nUse the projected value to get a binding to a value that the delegate publishes. Access the projected value by prefixing the name of the delegate instance with a dollar sign ($). For example, you might publish a Boolean value in your application delegate:\n\nclass MyAppDelegate: NSObject, NSApplicationDelegate, ObservableObject {\n    @Published var isEnabled = false\n\n\n    // ...\n}\n\n\nIf you declare the delegate in your App using the NSApplicationDelegateAdaptor property wrapper, you can get the delegate that SwiftUI instantiates from the environment and access a binding to its published values from any view in your app:\n\nstruct MyView: View {\n    @EnvironmentObject private var appDelegate: MyAppDelegate\n\n\n    var body: some View {\n        Toggle(\"Enabled\", isOn: $appDelegate.isEnabled)\n    }\n}\n\nSee Also\nGetting the delegate adaptor\nvar wrappedValue: DelegateType\nThe underlying delegate."
    }
]