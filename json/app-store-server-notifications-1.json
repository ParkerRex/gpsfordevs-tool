[
  {
    "title": "succeededCount",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/succeededcount",
    "html": "See Also\nData types\ntype requestIdentifier\nA string that contains a unique identifier for a subscription-renewal-date extension request.\ntype environment\nThe server environment, either sandbox or production.\ntype appAppleId\nThe unique identifier of an app in the App Store.\ntype bundleId\nThe bundle identifier of an app.\ntype productId\nThe product identifier of the in-app purchase.\ntype storefrontCountryCodes\nA list of storefront country codes for limiting the storefronts for a subscription-renewal-date extension.\ntype storefrontCountryCode\nThe three-letter code that represents the country or region associated with the App Store storefront.\ntype failedCount\nThe count of subscriptions that fail to receive a subscription-renewal-date extension."
  },
  {
    "title": "isInBillingRetryPeriod",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/isinbillingretryperiod",
    "html": "See Also\nBilling status\ntype gracePeriodExpiresDate\nThe time when the billing grace period for a subscription renewal expires."
  },
  {
    "title": "expirationIntent",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/expirationintent",
    "html": "Possible Values\n1\n\nThe customer canceled their subscription.\n\n2\n\nBilling error; for example, the customer’s payment information is no longer valid.\n\n3\n\nThe customer didn’t consent to an auto-renewable subscription price increase that requires customer consent, allowing the subscription to expire.\n\n4\n\nThe product wasn’t available for purchase at the time of renewal.\n\n5\n\nThe subscription expired for some other reason.\n\nSee Also\nSubscripton renewal and expiration\ntype autoRenewStatus\nThe renewal status for an auto-renewable subscription.\ntype autoRenewProductId\nThe product identifier of the product that will renew at the next billing period.\ntype expiresDate\nThe UNIX time, in milliseconds, an auto-renewable subscription purchase expires or renews.\ntype isUpgraded\nA Boolean value that indicates whether the user upgraded to another subscription.\ntype renewalDate\nThe UNIX time, in milliseconds, when the most recent auto-renewable subscription purchase expires."
  },
  {
    "title": "JWSTransaction",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/jwstransaction",
    "html": "Discussion\n\nThe JWSTransaction type is a string of three Base64 URL-encoded components, separated by a period. The string contains the JWS representation of the transaction information, signed by the App Store according to the JSON Web Signature (JWS) IETF RFC 7515 specification.\n\nThe three components of the string are a header, a payload, and a signature, in that order.\n\nTo read the transaction information, Base64 URL-decode the payload. Use a JWSTransactionDecodedPayload object to read the payload information.\n\nTo read the header, decode it and use a JWSDecodedHeader object to access the information. Use the information in the header to verify the signature.\n\nSee Also\nJWS transaction and renewal info\ntype JWSRenewalInfo\nSubscription renewal information signed by the App Store, in JSON Web Signature (JWS) format.\nobject JWSRenewalInfoDecodedPayload\nA decoded payload containing subscription renewal information for an auto-renewable subscription.\nobject JWSTransactionDecodedPayload\nA decoded payload that contains transaction information."
  },
  {
    "title": "bundleVersion",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/bundleversion",
    "html": "See Also\nApp metadata and environment\ntype appAppleId\nThe unique identifier of an app in the App Store.\ntype bundleId\nThe bundle identifier of an app.\ntype environment\nThe server environment, either sandbox or production.\ntype status\nThe status of an auto-renewable subscription at the time the App Store signs the notification."
  },
  {
    "title": "failedCount",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/failedcount",
    "html": "See Also\nData types\ntype requestIdentifier\nA string that contains a unique identifier for a subscription-renewal-date extension request.\ntype environment\nThe server environment, either sandbox or production.\ntype appAppleId\nThe unique identifier of an app in the App Store.\ntype bundleId\nThe bundle identifier of an app.\ntype productId\nThe product identifier of the in-app purchase.\ntype storefrontCountryCodes\nA list of storefront country codes for limiting the storefronts for a subscription-renewal-date extension.\ntype storefrontCountryCode\nThe three-letter code that represents the country or region associated with the App Store storefront.\ntype succeededCount\nThe count of subscriptions that successfully receive a subscription-renewal-date extension."
  },
  {
    "title": "storefrontCountryCode",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/storefrontcountrycode",
    "html": "Discussion\n\nThis type uses the ISO 3166-1 Alpha-3 country code representation.\n\nSee Also\nData types\ntype requestIdentifier\nA string that contains a unique identifier for a subscription-renewal-date extension request.\ntype environment\nThe server environment, either sandbox or production.\ntype appAppleId\nThe unique identifier of an app in the App Store.\ntype bundleId\nThe bundle identifier of an app.\ntype productId\nThe product identifier of the in-app purchase.\ntype storefrontCountryCodes\nA list of storefront country codes for limiting the storefronts for a subscription-renewal-date extension.\ntype failedCount\nThe count of subscriptions that fail to receive a subscription-renewal-date extension.\ntype succeededCount\nThe count of subscriptions that successfully receive a subscription-renewal-date extension."
  },
  {
    "title": "storefrontCountryCodes",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/storefrontcountrycodes",
    "html": "Discussion\n\nIf you provide a list of storefronts when you call the Extend Subscription Renewal Dates for All Active Subscribers endpoint, the notification returns only those storefronts. If you don’t use the storefrontCountryCodes, the subscription-renewal-date extension applies to all storefronts.\n\nFor information about providing the list of storefronts, see MassExtendRenewalDateRequest.\n\nSee Also\nData types\ntype requestIdentifier\nA string that contains a unique identifier for a subscription-renewal-date extension request.\ntype environment\nThe server environment, either sandbox or production.\ntype appAppleId\nThe unique identifier of an app in the App Store.\ntype bundleId\nThe bundle identifier of an app.\ntype productId\nThe product identifier of the in-app purchase.\ntype storefrontCountryCode\nThe three-letter code that represents the country or region associated with the App Store storefront.\ntype failedCount\nThe count of subscriptions that fail to receive a subscription-renewal-date extension.\ntype succeededCount\nThe count of subscriptions that successfully receive a subscription-renewal-date extension."
  },
  {
    "title": "environment",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/environment",
    "html": "Possible Values\nSandbox\n\nIndicates that the notification applies to testing in the sandbox environment.\n\nProduction\n\nIndicates that the notification applies to the production environment.\n\nDiscussion\n\nYou receive notifications in the sandbox environment when you opt in to receive notifications in the sandbox environment and test your app in the sandbox environment. TestFlight also uses the sandbox environment to send notifications. To opt in to receive notifications, see Enter a URL for App Store Server Notifications. For more information about testing, see Testing at all stages of development with Xcode and the sandbox, and Beta Testing Made Simple with TestFlight.\n\nSee Also\nApp metadata and environment\ntype appAppleId\nThe unique identifier of an app in the App Store.\ntype bundleId\nThe bundle identifier of an app.\ntype bundleVersion\nThe version of the build that identifies an iteration of the bundle.\ntype status\nThe status of an auto-renewable subscription at the time the App Store signs the notification."
  },
  {
    "title": "requestIdentifier",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/requestidentifier",
    "html": "Discussion\n\nYou originally specify the requestIdentifier when you call Extend Subscription Renewal Dates for All Active Subscribers in the App Store Server API.\n\nSee Also\nData types\ntype environment\nThe server environment, either sandbox or production.\ntype appAppleId\nThe unique identifier of an app in the App Store.\ntype bundleId\nThe bundle identifier of an app.\ntype productId\nThe product identifier of the in-app purchase.\ntype storefrontCountryCodes\nA list of storefront country codes for limiting the storefronts for a subscription-renewal-date extension.\ntype storefrontCountryCode\nThe three-letter code that represents the country or region associated with the App Store storefront.\ntype failedCount\nThe count of subscriptions that fail to receive a subscription-renewal-date extension.\ntype succeededCount\nThe count of subscriptions that successfully receive a subscription-renewal-date extension."
  },
  {
    "title": "tokenCreationDate",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/tokencreationdate",
    "html": "Discussion\n\nThis field represents the date when the system created the externalPurchaseToken.\n\nSee Also\nExternal purchase token fields\ntype externalPurchaseId\nThe field of an external purchase token that uniquely identifies the token."
  },
  {
    "title": "signedPayload",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/signedpayload",
    "html": "Discussion\n\nThe signedPayload is a string of three Base64URL-encoded components, separated by a period. The string contains a JWS representation of the notification response body, signed by the App Store according to the JSON Web Signature (JWS) IETF RFC 7515 specification.\n\nThe three components of the string are a header, a payload, and a signature, in that order.\n\nTo read the notification response body, Base64URL-decode the payload. Use a responseBodyV2DecodedPayload object to read the payload information.\n\nTo read the header, Base64URL-decode it and use a JWSDecodedHeader object to access the information. Use the information in the decoded header to verify the signature."
  },
  {
    "title": "x5c",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/x5c",
    "html": "Discussion\n\nFor more information, or to download Apple’s root and intermediate certificates, see Apple PKI.\n\nSee Also\nJWS header types\ntype alg\nThe JSON Web Signature (JWS) header parameter that identifies the cryptographic algorithm used to secure the JWS."
  },
  {
    "title": "type",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/type",
    "html": "Possible Values\nAuto-Renewable Subscription\n\nAn auto-renewable subscription.\n\nNon-Consumable\n\nA non-consumable in-app purchase.\n\nConsumable\n\nA consumable in-app purchase.\n\nNon-Renewing Subscription\n\nA non-renewing subscription.\n\nSee Also\nProduct information\ntype productId\nThe product identifier of the in-app purchase.\ntype subscriptionGroupIdentifier\nThe identifier of the subscription group that the subscription belongs to.\ntype quantity\nThe number of consumable products purchased."
  },
  {
    "title": "webOrderLineItemId",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/weborderlineitemid",
    "html": "Discussion\n\nThis value applies only to auto-renewable subscriptions.\n\nSee Also\nTransaction identifiers\ntype originalTransactionId\nThe original transaction identifier of a purchase.\ntype transactionId\nThe unique identifier for a transaction such as an in-app purchase, restored purchase, or subscription renewal."
  },
  {
    "title": "originalPurchaseDate",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/originalpurchasedate",
    "html": "Discussion\n\nThe original purchase date is in UNIX time, in milliseconds.\n\nSee Also\nPurchase dates\ntype purchaseDate\nThe time that the App Store charged the user’s account for a purchase, a restored product, a subscription, or a subscription renewal after a lapse.\ntype recentSubscriptionStartDate\nThe earliest start date of a subscription in a series of auto-renewable subscription purchases that ignores all lapses of paid service shorter than 60 days."
  },
  {
    "title": "transactionId",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/transactionid",
    "html": "Discussion\n\nThe App Store generates a new value for transaction identifier every time the subscription automatically renews or the user restores it on a new device.\n\nWhen a user first purchases a subscription, the transaction identifier always matches the original transaction identifier (originalTransactionId). For a restore or renewal, the transaction identifier doesn’t match the original transaction identifier. If a user restores or renews the same subscription multiple times, each restore or renewal has a unique transaction identifier.\n\nSee Also\nTransaction identifiers\ntype originalTransactionId\nThe original transaction identifier of a purchase.\ntype webOrderLineItemId\nThe unique identifier of subscription purchase events across devices, including subscription renewals."
  },
  {
    "title": "subscriptionGroupIdentifier",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/subscriptiongroupidentifier",
    "html": "Discussion\n\nAuto-renewable subscriptions always belong to a subscription group. You create the subscription group identifiers in App Store Connect before you create and add an auto-renewable subscription. For more information about subscription groups, see Offer auto-renewable subscriptions.\n\nSee Also\nProduct information\ntype productId\nThe product identifier of the in-app purchase.\ntype type\nThe product type of the in-app purchase.\ntype quantity\nThe number of consumable products purchased."
  },
  {
    "title": "quantity",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/quantity",
    "html": "See Also\nProduct information\ntype productId\nThe product identifier of the in-app purchase.\ntype type\nThe product type of the in-app purchase.\ntype subscriptionGroupIdentifier\nThe identifier of the subscription group that the subscription belongs to."
  },
  {
    "title": "inAppOwnershipType",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/inappownershiptype",
    "html": "Possible Values\nFAMILY_SHARED\n\nThe transaction belongs to a family member who benefits from the service.\n\nPURCHASED\n\nThe transaction belongs to the purchaser."
  },
  {
    "title": "isUpgraded",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/isupgraded",
    "html": "Discussion\n\nIf isUpgraded is true, the user has upgraded the subscription represented by this transaction to another subscription. This value appears in the transaction only when the value is true. To determine the service that the customer is entitled to, look for another transaction that has a subscription with a higher level of service. For more information about subscription groups and levels of service, see Auto-renewable Subscriptions.\n\nSee Also\nSubscripton renewal and expiration\ntype autoRenewStatus\nThe renewal status for an auto-renewable subscription.\ntype autoRenewProductId\nThe product identifier of the product that will renew at the next billing period.\ntype expirationIntent\nThe reason a subscription expired.\ntype expiresDate\nThe UNIX time, in milliseconds, an auto-renewable subscription purchase expires or renews.\ntype renewalDate\nThe UNIX time, in milliseconds, when the most recent auto-renewable subscription purchase expires."
  },
  {
    "title": "expiresDate",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/expiresdate",
    "html": "Discussion\n\nThe expiresDate is a static value that applies for each transaction. When the auto-renewable subscription renews, the App Store creates a new transaction with a new expiresDate.\n\nSee Also\nSubscripton renewal and expiration\ntype autoRenewStatus\nThe renewal status for an auto-renewable subscription.\ntype autoRenewProductId\nThe product identifier of the product that will renew at the next billing period.\ntype expirationIntent\nThe reason a subscription expired.\ntype isUpgraded\nA Boolean value that indicates whether the user upgraded to another subscription.\ntype renewalDate\nThe UNIX time, in milliseconds, when the most recent auto-renewable subscription purchase expires."
  },
  {
    "title": "appAccountToken",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/appaccounttoken",
    "html": "Discussion\n\nWhen a customer initiates an in-app purchase, your app may create an appAccountToken(_:) and send it to the App Store. The App Store returns the same value in appAccountToken in the transaction information after the customer completes the purchase.\n\nIf you’re using the Original API for in-app purchase and provide a UUID in the applicationUsername property, then the appAccountToken field contains that value."
  },
  {
    "title": "offerType",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/offertype",
    "html": "Possible Values\n1\n\nAn introductory offer.\n\n2\n\nA promotional offer.\n\n3\n\nAn offer with a subscription offer code.\n\nDiscussion\n\nThe offer types 2 and 3 have an offerIdentifier.\n\nFor more information about introductory offers, see Implementing introductory offers in your app. For more information about promotional offers, see Set up promotional offers for auto-renewable subscriptions. For more information about promo codes, see Promo codes overview.\n\nSee Also\nPromotional offers\ntype offerIdentifier\nThe identifier that contains the offer code or the promotional offer identifier.\ntype offerDiscountType\nThe payment mode you configure for an introductory offer, promotional offer, or offer code on an auto-renewable subscription."
  },
  {
    "title": "recentSubscriptionStartDate",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/recentsubscriptionstartdate",
    "html": "Discussion\n\nFor more information about the recent subscription start date, see recentSubscriptionStartDate.\n\nImportant\n\nDon’t use the recentSubscriptionStartDate date to calculate days of paid service. For more information about paid days of service, see Net revenue after a year.\n\nSee Also\nPurchase dates\ntype originalPurchaseDate\nThe purchase date of the transaction associated with the original transaction identifier.\ntype purchaseDate\nThe time that the App Store charged the user’s account for a purchase, a restored product, a subscription, or a subscription renewal after a lapse."
  },
  {
    "title": "renewalDate",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/renewaldate",
    "html": "Discussion\n\nThe renewalDate is a value that’s always present in the payload for auto-renewable subscriptions, even for expired subscriptions. This date indicates the expiration date of the most recent auto-renewable subscription purchase, including renewals, and may be in the past. For subscriptions that renew successfully, the renewalDate is the date when the subscription renews.\n\nSee Also\nSubscripton renewal and expiration\ntype autoRenewStatus\nThe renewal status for an auto-renewable subscription.\ntype autoRenewProductId\nThe product identifier of the product that will renew at the next billing period.\ntype expirationIntent\nThe reason a subscription expired.\ntype expiresDate\nThe UNIX time, in milliseconds, an auto-renewable subscription purchase expires or renews.\ntype isUpgraded\nA Boolean value that indicates whether the user upgraded to another subscription."
  },
  {
    "title": "priceIncreaseStatus",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/priceincreasestatus",
    "html": "Possible Values\n0\n\nThe customer hasn’t yet responded to an auto-renewable subscription price increase that requires customer consent.\n\n1\n\nThe customer consented to an auto-renewable subscription price increase that requires customer consent, or the App Store has notified the customer of an auto-renewable subscription price increase that doesn’t require consent.\n\nDiscussion\n\nFor more information about managing prices, see Managing Prices and Manage pricing for auto-renewable subscriptions."
  },
  {
    "title": "offerIdentifier",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/offeridentifier",
    "html": "Discussion\n\nThe offerIdentifier applies only when the offerType has a value of 2 or 3.\n\nThe offerIdentifier provides details about the subscription offer in effect for the transaction. Its value is either the offer code or the promotional offer.\n\nFor more information on offer codes, see Supporting subscription offer codes in your app and Set up offer codes. For more information on promotional offers, see Set up promotional offers for auto-renewable subscriptions.\n\nSee Also\nPromotional offers\ntype offerType\nThe type of subscription offer.\ntype offerDiscountType\nThe payment mode you configure for an introductory offer, promotional offer, or offer code on an auto-renewable subscription."
  },
  {
    "title": "gracePeriodExpiresDate",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/graceperiodexpiresdate",
    "html": "Discussion\n\nFor more information about billing grace periods, see Enable Billing Grace Period for auto-renewable subscriptions.\n\nSee Also\nBilling status\ntype isInBillingRetryPeriod\nA Boolean value that indicates whether the App Store is attempting to automatically renew a subscription that expired due to a billing issue."
  },
  {
    "title": "autoRenewStatus",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/autorenewstatus",
    "html": "Possible Values\n0\n\nAutomatic renewal is off. The customer has turned off automatic renewal for the subscription, and it won’t renew at the end of the current subscription period.\n\n1\n\nAutomatic renewal is on. The subscription renews at the end of the current subscription period.\n\nSee Also\nSubscripton renewal and expiration\ntype autoRenewProductId\nThe product identifier of the product that will renew at the next billing period.\ntype expirationIntent\nThe reason a subscription expired.\ntype expiresDate\nThe UNIX time, in milliseconds, an auto-renewable subscription purchase expires or renews.\ntype isUpgraded\nA Boolean value that indicates whether the user upgraded to another subscription.\ntype renewalDate\nThe UNIX time, in milliseconds, when the most recent auto-renewable subscription purchase expires."
  },
  {
    "title": "autoRenewProductId",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/autorenewproductid",
    "html": "See Also\nSubscripton renewal and expiration\ntype autoRenewStatus\nThe renewal status for an auto-renewable subscription.\ntype expirationIntent\nThe reason a subscription expired.\ntype expiresDate\nThe UNIX time, in milliseconds, an auto-renewable subscription purchase expires or renews.\ntype isUpgraded\nA Boolean value that indicates whether the user upgraded to another subscription.\ntype renewalDate\nThe UNIX time, in milliseconds, when the most recent auto-renewable subscription purchase expires."
  },
  {
    "title": "unified_receipt.Latest_receipt_info",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/unified_receipt/latest_receipt_info",
    "html": "Properties\napp_account_token\nstring\n\nThe appAccountToken associated with this transaction. This field is only present if your app supplied an appAccountToken(_:) or provided a UUID for the applicationUsername property when the user made the purchase.\n\ncancellation_date\nstring\n\nThe time the App Store refunded a transaction or revoked it from family sharing, in a date-time format similar to the ISO 8601. This field is present only for refunded or revoked transactions.\n\ncancellation_date_ms\nstring\n\nThe time the App Store refunded a transaction or revoked it from family sharing, in UNIX epoch time format, in milliseconds. This field is present only for refunded or revoked transactions. Use this time format for processing dates. For more information, see cancellation_date_ms.\n\ncancellation_date_pst\nstring\n\nThe time the App Store refunded a transaction or revoked it from family sharing, in Pacific Standard Time. This field is present only for refunded or revoked transactions.\n\ncancellation_reason\nstring\n\nThe reason for a refunded or revoked transaction. A value of 1 indicates that the customer canceled their transaction due to an actual or perceived issue within your app. A value of 0 indicates that the transaction was canceled for another reason, for example, if the customer made the purchase accidentally.\n\nPossible Values: 1, 0\nexpires_date\nstring\n\nThe time a subscription expires or when it will renew, in a date-time format similar to the ISO 8601.\n\nexpires_date_ms\nstring\n\nThe time when a subscription expires or when it will renew, in UNIX epoch time format, in milliseconds. Use this time format for processing dates. For more information, see expires_date_ms.\n\nexpires_date_pst\nstring\n\nThe time when a subscription expires or when it will renew, in Pacific Standard Time.\n\nin_app_ownership_type\nstring\n\nA value that indicates whether the user is the purchaser of the product or is a family member with access to the product through Family Sharing. See in_app_ownership_type for more information.\n\nPossible Values: FAMILY_SHARED, PURCHASED\nis_in_intro_offer_period\nstring\n\nAn indicator of whether an auto-renewable subscription is in the introductory price period. For more information, see is_in_intro_offer_period.\n\nPossible Values: true, false\nis_trial_period\nstring\n\nAn indicator of whether a subscription is in the free trial period. For more information, see is_trial_period.\n\nPossible Values: true, false\nis_upgraded\nstring\n\nAn indicator that the system canceled a subscription because the user upgraded. This field is only present for subscription upgrade transactions.\n\nValue: true\noffer_code_ref_name\nstring\n\nThe reference name of a subscription offer you configured in App Store Connect. This field is present when a customer redeemed a subscription offer code. For more information, see offer_code_ref_name.\n\noriginal_purchase_date\nstring\n\nThe time of the original app purchase, in a date-time format similar to the ISO 8601 standard.\n\noriginal_purchase_date_ms\nstring\n\nThe time of the original app purchase, in UNIX epoch time format, in milliseconds. Use this time format for processing dates. This value indicates the date of the subscription’s initial purchase. The original purchase date applies to all product types and remains the same in all transactions for the same product ID. This value corresponds to the original transaction’s transactionDate property in StoreKit.\n\noriginal_purchase_date_pst\nstring\n\nThe time of the original app purchase, in Pacific Standard Time.\n\noriginal_transaction_id\nstring\n\nThe transaction identifier of the original purchase. For more information, see original_transaction_id.\n\npromotional_offer_id\nstring\n\nThe identifier of the subscription offer redeemed by the user. For more information, see promotional_offer_id.\n\nproduct_id\nstring\n\nThe unique identifier of the product purchased. You provide this value when creating the product in App Store Connect, and it corresponds to the productIdentifier property of the SKPayment object stored in the transaction’s payment property.\n\npurchase_date\nstring\n\nThe time when the App Store charged the user’s account for a subscription purchase or renewal after a lapse, in a date-time format similar to the ISO 8601 standard.\n\npurchase_date_ms\nstring\n\nThe time when the App Store charged the user’s account for a subscription purchase or renewal after a lapse, in the UNIX epoch time format, in milliseconds. Use this time format for processing dates.\n\npurchase_date_pst\nstring\n\nThe time when the App Store charged the user’s account for a subscription purchase or renewal after a lapse, in Pacific Standard Time.\n\nquantity\nstring\n\nThe number of consumable products purchased. This value corresponds to the quantity property of the SKPayment object stored in the transaction’s payment property. The value is usually 1 unless modified with a mutable payment. The maximum value is 10.\n\nsubscription_group_identifier\nstring\n\nThe identifier of the subscription group to which the subscription belongs. The value for this field is identical to the subscriptionGroupIdentifier property in SKProduct.\n\ntransaction_id\nstring\n\nA unique identifier for a transaction such as a purchase, restore, or renewal. For more information, see transaction_id.\n\nweb_order_line_item_id\nstring\n\nA unique identifier for purchase events across devices, including subscription-renewal events. This value is the primary key to identify subscription purchases."
  },
  {
    "title": "unified_receipt.Pending_renewal_info",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/unified_receipt/pending_renewal_info",
    "html": "Properties\nauto_renew_product_id\nstring\n\nThe current renewal preference for the auto-renewable subscription. The value for this key corresponds to the productIdentifier property of the product that the customer’s subscription renews.\n\nauto_renew_status\nstring\n\nThe current renewal status for the auto-renewable subscription. For more information, see auto_renew_status.\n\nPossible Values: 1, 0\nexpiration_intent\nstring\n\nThe reason a subscription expired. This field is only present for a receipt that contains an expired, auto-renewable subscription. For more information, see expiration_intent.\n\nPossible Values: 1, 2, 3, 4, 5\ngrace_period_expires_date\nstring\n\nThe time at which the grace period for subscription renewals expires, in a date-time format similar to the ISO 8601.\n\ngrace_period_expires_date_ms\nstring\n\nThe time at which the grace period for subscription renewals expires, in UNIX epoch time format, in milliseconds. This key is only present for apps that have Billing Grace Period enabled and when the user experiences a billing error at the time of renewal. Use this time format for processing dates.\n\ngrace_period_expires_date_pst\nstring\n\nThe time at which the grace period for subscription renewals expires, in the Pacific Time zone.\n\nis_in_billing_retry_period\nstring\n\nA flag that indicates Apple is attempting to renew an expired subscription automatically. This field is only present if an auto-renewable subscription is in the billing retry state. For more information, see is_in_billing_retry_period.\n\nPossible Values: 1, 0\noffer_code_ref_name\nstring\n\nThe reference name of a subscription offer you configured in App Store Connect. This field is present when a customer redeemed a subscription offer code. For more information, see offer_code_ref_name.\n\noriginal_transaction_id\nstring\n\nThe transaction identifier of the original purchase.\n\nprice_consent_status\nstring\n\nThe price consent status for a subscription price increase. This field is present only if App Store notified the customer of the price increase. The default value is \"0\" and changes to \"1\" if the customer consents.\n\nPossible Values: 1, 0\nproduct_id\nstring\n\nThe unique identifier of the product purchased. You provide this value when creating the product in App Store Connect, and it corresponds to the productIdentifier property of the SKPayment object stored in the transaction’s payment property.\n\npromotional_offer_id\nstring\n\nThe identifier of the promotional offer for an auto-renewable subscription that the user redeemed. You provide this value in the Promotional Offer Identifier field when you create the promotional offer in App Store Connect. For more information, see promotional_offer_id.\n\nprice_increase_status\nstring\nPossible Values: 1, 0"
  },
  {
    "title": "version",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/version",
    "html": "Discussion\n\nThe version string is “2.0”. It’s present in responseBodyV2DecodedPayload for version 2 notifications.\n\nFor more information about App Store Server Notification changes, see App Store Server Notifications changelog.\n\nSee Also\nResponse types\ntype notificationType\nThe type that describes the in-app purchase or external purchase event for which the App Store sends the version 2 notification.\ntype subtype\nA string that provides details about select notification types in version 2.\ntype signedDate\nThe UNIX time, in milliseconds, that the App Store signed the JSON Web Signature data.\ntype notificationUUID\nA unique identifier for the notification."
  },
  {
    "title": "purchaseDate",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/purchasedate",
    "html": "Discussion\n\nThe purchase date is in UNIX time, in milliseconds.\n\nSee Also\nPurchase dates\ntype originalPurchaseDate\nThe purchase date of the transaction associated with the original transaction identifier.\ntype recentSubscriptionStartDate\nThe earliest start date of a subscription in a series of auto-renewable subscription purchases that ignores all lapses of paid service shorter than 60 days."
  },
  {
    "title": "appAppleId",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/appappleid",
    "html": "See Also\nApp metadata and environment\ntype bundleId\nThe bundle identifier of an app.\ntype bundleVersion\nThe version of the build that identifies an iteration of the bundle.\ntype environment\nThe server environment, either sandbox or production.\ntype status\nThe status of an auto-renewable subscription at the time the App Store signs the notification."
  },
  {
    "title": "bundleId",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/bundleid",
    "html": "See Also\nApp metadata and environment\ntype appAppleId\nThe unique identifier of an app in the App Store.\ntype bundleVersion\nThe version of the build that identifies an iteration of the bundle.\ntype environment\nThe server environment, either sandbox or production.\ntype status\nThe status of an auto-renewable subscription at the time the App Store signs the notification."
  },
  {
    "title": "unified_receipt",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/unified_receipt",
    "html": "Properties\nenvironment\nstring\n\nThe environment for which the App Store generated the receipt.\n\nPossible Values: Sandbox, Production\nlatest_receipt\nbyte\n\nThe latest Base64-encoded app receipt.\n\nlatest_receipt_info\n[unified_receipt.Latest_receipt_info]\n\nAn array that contains the latest 100 in-app purchase transactions of the decoded value in latest_receipt. This array excludes transactions for consumable products your app has marked as finished. The contents of this array are identical to those in responseBody.Latest_receipt_info in the verifyReceipt endpoint response for receipt validation.\n\npending_renewal_info\n[unified_receipt.Pending_renewal_info]\n\nAn array in which each element contains the pending renewal information for each auto-renewable subscription identified in product_id. The contents of this array are identical to those in responseBody.Pending_renewal_info in the verifyReceipt endpoint response for receipt validation.\n\nstatus\ninteger\n\nThe status code, where 0 indicates that the notification is valid.\n\nValue: 0\nTopics\nObjects\nobject unified_receipt.Latest_receipt_info\nAn object that contains information about the latest in-app subscription transaction.\nobject unified_receipt.Pending_renewal_info\nAn array of elements that refers to open auto-renewable subscription renewals or ones that failed in the past."
  },
  {
    "title": "responseBodyV1",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/responsebodyv1",
    "html": "Deprecated\n\nImplement the App Store Server Notifications V2 endpoint on your server to receive version 2 notifications instead.\n\nProperties\nauto_renew_adam_id\nstring\n\nAn identifier that App Store Connect generates and the App Store uses to uniquely identify the auto-renewable subscription that the user’s subscription renews. Treat this value as a 64-bit integer.\n\nauto_renew_product_id\nstring\n\nThe product identifier of the auto-renewable subscription that the user’s subscription renews.\n\nauto_renew_status\nstring\n\nThe current renewal status for an auto-renewable subscription product. Note that these values are the strings “true” and “false”, and not the strings “0” or “1” that appear in auto_renew_status in the receipt.\n\nPossible Values: true, false\nauto_renew_status_change_date\nstring\n\nThe time at which the user turned on or off the renewal status for an auto-renewable subscription, in a date-time format similar to the ISO 8601 standard.\n\nauto_renew_status_change_date_ms\nstring\n\nThe time at which the user turned on or off the renewal status for an auto-renewable subscription, in UNIX time, in milliseconds. Use this time format to process dates.\n\nauto_renew_status_change_date_pst\nstring\n\nThe time at which the user turned on or off the renewal status for an auto-renewable subscription, in Pacific standard time.\n\nbid\nstring\n\nA string that contains the app bundle ID.\n\nbvrs\nstring\n\nA string that contains the app bundle version.\n\ndeprecation\nstring\n\nThe date that App Store Server Notifications V1 are deprecated. For more information, see App Store Server Notifications changelog.\n\nenvironment\nstring\n\nThe environment for which the App Store generated the receipt.\n\nPossible Values: Sandbox, PROD\nexpiration_intent\ninteger\n\nThe reason a subscription expired. This field is only present for an expired auto-renewable subscription. See expiration_intent for more information.\n\nnotification_type\nnotification_type\nDeprecated  \n\nThe subscription event that triggered the notification. See notification_type for the complete list of version 1 notification types.\n\noriginal_transaction_id\nlong\n\nThe original transaction identifier for which App Store Server Notifications sends the notification.\n\npassword\nstring\n\nThe same value as the shared secret you submit in the password field of the App Store Receipt requestBody when validating receipts.\n\nunified_receipt\nunified_receipt\n\nAn object that contains information about the most recent in-app purchase transactions for the app.\n\nDiscussion\n\nUse the information in the response body to react quickly to changes in your users’ subscription states. The fields available in a notification sent to your server depend on the notification_type, which indicates the event that triggered the notification.\n\nTopics\nUnified receipt object\nobject unified_receipt\nAn object that contains information about the most recent in-app purchase transactions for the app.\nSee Also\nVersion 1 notifications\nApp Store Server Notifications V1\nSpecify your secure server’s URL in App Store Connect to receive version 1 notifications.\nDeprecated\ntype notification_type\nThe type that describes the in-app purchase event for which the App Store sends the version 1 notification.\nDeprecated"
  },
  {
    "title": "storefrontId",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/storefrontid",
    "html": "Discussion\n\nThis value is the same as the id value in StoreKit.\n\nSee Also\nStorefront info\ntype storefront\nThe three-letter code that represents the country or region associated with the App Store storefront for the purchase."
  },
  {
    "title": "transactionReason",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/transactionreason",
    "html": "Possible Values\nPURCHASE\n\nThe customer initiated the purchase, which may be for any in-app purchase type: consumable, non-consumable, non-renewing subscription, or auto-renewable subscription.\n\nRENEWAL\n\nThe App Store server initiated the purchase transaction to renew an auto-renewable subscription.\n\nDiscussion\n\nIf a customer upgrades an auto-renewable subscription, the upgrade is effective immediately and the transactionReason is PURCHASE.\n\nIf a customer downgrades an auto-renewable subscription, the product change occurs on the subscription renewal date. The resulting transactionReason is RENEWAL."
  },
  {
    "title": "storefront",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/storefront",
    "html": "Discussion\n\nThis property uses the ISO 3166-1 alpha-3 country code representation. This property is the same as the countryCode in StoreKit.\n\nSee Also\nStorefront info\ntype storefrontId\nAn Apple-defined value that uniquely identifies an App Store storefront."
  },
  {
    "title": "status",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/status",
    "html": "Possible Values\n1\n\nThe auto-renewable subscription is active.\n\n2\n\nThe auto-renewable subscription is expired.\n\n3\n\nThe auto-renewable subscription is in a billing retry period.\n\n4\n\nThe auto-renewable subscription is in a Billing Grace Period.\n\n5\n\nThe auto-renewable subscription is revoked.\n\nDiscussion\n\nThis status value is current as of the signedDate in the decoded payload, responseBodyV2DecodedPayload.\n\nSee Also\nApp metadata and environment\ntype appAppleId\nThe unique identifier of an app in the App Store.\ntype bundleId\nThe bundle identifier of an app.\ntype bundleVersion\nThe version of the build that identifies an iteration of the bundle.\ntype environment\nThe server environment, either sandbox or production."
  },
  {
    "title": "currency",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/currency",
    "html": "Discussion\n\nThe currency property contains an ISO 4217 alpha-3 string that represents the currency of the price of the product.\n\nImportant\n\nDon't use the price or currency values for any revenue reconciliation or recognition. App Store Connect reporting is your source of record for financial and accounting purposes. For more information, see Overview of reporting tools.\n\nDon’t use the currency to infer the storefront. Use the storefront value in the transaction, instead.\n\nFor more information on how you set prices, see Set a price and Set a price for an in-app purchase.\n\nSee Also\nProduct price and currency\ntype price\nThe price, in milliunits, of the in-app purchase or subscription offer that you configured in App Store Connect."
  },
  {
    "title": "offerDiscountType",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/offerdiscounttype",
    "html": "Possible Values\nFREE_TRIAL\n\nA payment mode of a product discount that indicates a free trial.\n\nPAY_AS_YOU_GO\n\nA payment mode of a product discount that is billed over a single or multiple billing periods.\n\nPAY_UP_FRONT\n\nA payment mode of a product discount that is paid up front.\n\nDiscussion\n\nYou set up subscription offers and determine the payment mode when you configure subscriptions in App Store Connect. For more information about the Free Trial, Pay As You Go, and Pay Up Front payment modes, see Pricing and availability.\n\nFor more information about configuring subscription offers, see: Set up introductory offers for auto-renewable subscriptions, Set up promotional offers for auto-renewable subscriptions, and Set up offer codes.\n\nSee Also\nPromotional offers\ntype offerIdentifier\nThe identifier that contains the offer code or the promotional offer identifier.\ntype offerType\nThe type of subscription offer."
  },
  {
    "title": "price",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/price",
    "html": "Discussion\n\nThis value represents the price, in milliunits of the currency, of the in-app purchase or subscription offer that you configured in App Store Connect. One unit of the currency equals 1,000 milliunits.\n\nThe following table shows some examples of the values you may see in the price and currency parameters based on prices that you may configure in App Store Connect:\n\nPrice configured in App Store Connect\n\n\t\n\nprice parameter\n\n\t\n\ncurrency parameter\n\n\n\n\n$1.99 (US dollar)\n\n\t\n\n1990\n\n\t\n\nUSD\n\n\n\n\nKRW 3,300 (South Korean won)\n\n\t\n\n3300000\n\n\t\n\nKRW\n\n\n\n\nJPY 300 (Japanese Yen)\n\n\t\n\n300000\n\n\t\n\nJPY\n\nTo determine the storefront, use the storefront value in the transaction. Don’t use the currency to infer the storefront.\n\nImportant\n\nDon’t use the price or currency values for any revenue reconciliation or recognition. App Store Connect reporting is your source of record for financial and accounting purposes. For more information, see Overview of reporting tools.\n\nFor more information on how you set prices, see Set a price and Set a price for an in-app purchase.\n\nSee Also\nProduct price and currency\ntype currency\nThe three-letter ISO 4217 currency code for the price of the product."
  },
  {
    "title": "externalPurchaseId",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/externalpurchaseid",
    "html": "Discussion\n\nThe externalPurchaseId is the field of an externalPurchaseToken that uniquely identifies the token.\n\nSee Also\nExternal purchase token fields\ntype tokenCreationDate\nThe field of an external purchase token that contains the UNIX date, in milliseconds, when the system created the token."
  },
  {
    "title": "productId",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/productid",
    "html": "Discussion\n\nYou create product identifiers for in-app purchases in App Store Connect.\n\nSee Also\nProduct information\ntype type\nThe product type of the in-app purchase.\ntype subscriptionGroupIdentifier\nThe identifier of the subscription group that the subscription belongs to.\ntype quantity\nThe number of consumable products purchased."
  },
  {
    "title": "revocationReason",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/revocationreason",
    "html": "Possible Values\n0\n\nThe App Store refunded the transaction on behalf of the customer for other reasons, for example, an accidental purchase.\n\n1\n\nThe App Store refunded the transaction on behalf of the customer due to an actual or perceived issue within your app.\n\nSee Also\nRevocation date and reason\ntype revocationDate\nThe UNIX time, in milliseconds, that the App Store refunded the transaction or revoked it from Family Sharing."
  },
  {
    "title": "consumptionRequestReason",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/consumptionrequestreason",
    "html": "Possible Values\nUNINTENDED_PURCHASE\n\nThe customer didn't intend to make the in-app purchase.\n\nFULFILLMENT_ISSUE\n\nThe customer had issues with receiving or using the in-app purchase.\n\nUNSATISFIED_WITH_PURCHASE\n\nThe customer wasn't satisfied with the in-app purchase.\n\nLEGAL\n\nThe customer requested a refund based on a legal reason.\n\nOTHER\n\nThe customer requested a refund for other reasons.\n\nDiscussion\n\nWhen a customer initiates a refund request for a consumable in-app purchase or auto-renewable subscription, the App Store sends a CONSUMPTION_REQUEST notificationType to your server. The notification includes the consumptionRequestReason in the data object."
  },
  {
    "title": "revocationDate",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/revocationdate",
    "html": "See Also\nRevocation date and reason\ntype revocationReason\nThe reason for a refunded transaction."
  },
  {
    "title": "originalTransactionId",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/originaltransactionid",
    "html": "Discussion\n\nThis value is identical to the transaction identifier (transactionId) except when the user restores or renews a subscription.\n\nSee Also\nTransaction identifiers\ntype transactionId\nThe unique identifier for a transaction such as an in-app purchase, restored purchase, or subscription renewal.\ntype webOrderLineItemId\nThe unique identifier of subscription purchase events across devices, including subscription renewals."
  },
  {
    "title": "alg",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/alg",
    "html": "See Also\nJWS header types\ntype x5c\nThe JSON Web Signature (JWS) header parameter that contains the certificate chain that corresponds to the key used to digitally sign the JWS."
  },
  {
    "title": "Transaction data types",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/responsebodyv2decodedpayload/transaction_data_types",
    "html": "Topics\nTransaction identifiers\ntype originalTransactionId\nThe original transaction identifier of a purchase.\ntype transactionId\nThe unique identifier for a transaction such as an in-app purchase, restored purchase, or subscription renewal.\ntype webOrderLineItemId\nThe unique identifier of subscription purchase events across devices, including subscription renewals.\nApp information\ntype bundleId\nThe bundle identifier of an app.\nAccount info\ntype appAccountToken\nA UUID that associates the transaction with a user on your service.\nProduct information\ntype productId\nThe product identifier of the in-app purchase.\ntype type\nThe product type of the in-app purchase.\ntype subscriptionGroupIdentifier\nThe identifier of the subscription group that the subscription belongs to.\ntype quantity\nThe number of consumable products purchased.\nProduct price and currency\ntype price\nThe price, in milliunits, of the in-app purchase or subscription offer that you configured in App Store Connect.\ntype currency\nThe three-letter ISO 4217 currency code for the price of the product.\nStorefront info\ntype storefront\nThe three-letter code that represents the country or region associated with the App Store storefront for the purchase.\ntype storefrontId\nAn Apple-defined value that uniquely identifies an App Store storefront.\nPromotional offers\ntype offerIdentifier\nThe identifier that contains the offer code or the promotional offer identifier.\ntype offerType\nThe type of subscription offer.\ntype offerDiscountType\nThe payment mode you configure for an introductory offer, promotional offer, or offer code on an auto-renewable subscription.\nPurchase dates\ntype originalPurchaseDate\nThe purchase date of the transaction associated with the original transaction identifier.\ntype purchaseDate\nThe time that the App Store charged the user’s account for a purchase, a restored product, a subscription, or a subscription renewal after a lapse.\ntype recentSubscriptionStartDate\nThe earliest start date of a subscription in a series of auto-renewable subscription purchases that ignores all lapses of paid service shorter than 60 days.\nBilling status\ntype isInBillingRetryPeriod\nA Boolean value that indicates whether the App Store is attempting to automatically renew a subscription that expired due to a billing issue.\ntype gracePeriodExpiresDate\nThe time when the billing grace period for a subscription renewal expires.\nSubscripton renewal and expiration\ntype autoRenewStatus\nThe renewal status for an auto-renewable subscription.\ntype autoRenewProductId\nThe product identifier of the product that will renew at the next billing period.\ntype expirationIntent\nThe reason a subscription expired.\ntype expiresDate\nThe UNIX time, in milliseconds, an auto-renewable subscription purchase expires or renews.\ntype isUpgraded\nA Boolean value that indicates whether the user upgraded to another subscription.\ntype renewalDate\nThe UNIX time, in milliseconds, when the most recent auto-renewable subscription purchase expires.\nFamily Sharing\ntype inAppOwnershipType\nA string that describes whether the transaction was purchased by the user, or is available to them through Family Sharing.\nPrice increase status\ntype priceIncreaseStatus\nThe status that indicates whether an auto-renewable subscription is subject to a price increase.\nRevocation date and reason\ntype revocationDate\nThe UNIX time, in milliseconds, that the App Store refunded the transaction or revoked it from Family Sharing.\ntype revocationReason\nThe reason for a refunded transaction.\nTransaction reason\ntype transactionReason\nThe cause of a purchase transaction, which indicates whether it’s a customer’s purchase or a renewal for an auto-renewable subscription that the system initiates.\nJWS signature date\ntype signedDate\nThe UNIX time, in milliseconds, that the App Store signed the JSON Web Signature data.\nSee Also\nJWS header and payload data types\nobject JWSTransactionDecodedPayload\nA decoded payload that contains transaction information.\nobject JWSRenewalInfoDecodedPayload\nA decoded payload containing subscription renewal information for an auto-renewable subscription.\nobject JWSDecodedHeader\nA decoded JSON Web Signature header containing transaction or renewal information."
  },
  {
    "title": "JWSDecodedHeader",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/jwsdecodedheader",
    "html": "Properties\nalg\nalg\n\nThe algorithm used for signing the JSON Web Signature (JWS).\n\nx5c\nx5c\n\nThe X.509 certificate chain that corresponds to the key that the App Store used to secure the JWS.\n\nDiscussion\n\nAll JWS representations, including the signedPayload, contain a JWS header. When you Base64 URL-decode the header, use the JWSDecodedHeader object to read its contents. Use the information in the JWSDecodedHeader to validate the JWS signature. For more information about validating signatures, see the JSON Web Signature (JWS) IETF RFC 7515 specification.\n\nThe App Store signs transaction and renewal information that you receive in App Store Server Notifications V2 and in the App Store Server API. It uses the following x5c certificate chain, in order:\n\nA certificate that contains the public key that corresponds to the key the App Store uses to digitally sign the JWS. Section 4.11.10 Mac App Store Receipt Signing Certificates of the Apple Inc. Certificate Practice Statement Worldwide Developer Relations document defines the policy for this certificate.\n\nAn Apple intermediate certificate from the Apple PKI site that starts with Worldwide Developer Relations.\n\nAn Apple root certificate.\n\nFor more information, or to download Apple’s root and intermediate certificates, see Apple PKI.\n\nTopics\nJWS header types\ntype alg\nThe JSON Web Signature (JWS) header parameter that identifies the cryptographic algorithm used to secure the JWS.\ntype x5c\nThe JSON Web Signature (JWS) header parameter that contains the certificate chain that corresponds to the key used to digitally sign the JWS.\nSee Also\nJWS header and payload data types\nobject JWSTransactionDecodedPayload\nA decoded payload that contains transaction information.\nobject JWSRenewalInfoDecodedPayload\nA decoded payload containing subscription renewal information for an auto-renewable subscription.\nTransaction data types\nTransaction and subscription renewal objects."
  },
  {
    "title": "JWSRenewalInfo",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/jwsrenewalinfo",
    "html": "Discussion\n\nThe JWSRenewalInfo type is a string of three Base64 URL-encoded components, separated by a period. The string contains the JWS representation of the subscription renewal information, signed by the App Store according to the JSON Web Signature (JWS) IETF RFC 7515 specification.\n\nThe three components in the string are a header, a payload, and a signature, in that order.\n\nTo read the subscription renewal information, Base64 URL-decode the payload. Use a JWSRenewalInfoDecodedPayload object to read the payload information.\n\nTo read the header, Base64 URL-decode it and use a JWSDecodedHeader object to access the information. Use the information in the header to verify the signature.\n\nSee Also\nJWS transaction and renewal info\nobject JWSRenewalInfoDecodedPayload\nA decoded payload containing subscription renewal information for an auto-renewable subscription.\ntype JWSTransaction\nTransaction information signed by the App Store, in JSON Web Signature (JWS) format.\nobject JWSTransactionDecodedPayload\nA decoded payload that contains transaction information."
  },
  {
    "title": "JWSTransactionDecodedPayload",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/jwstransactiondecodedpayload",
    "html": "Properties\nappAccountToken\nappAccountToken\n\nA UUID you create at the time of purchase that associates the transaction with a customer on your own service. If your app doesn’t provide an appAccountToken, this string is empty. For more information, see appAccountToken(_:).\n\nbundleId\nbundleId\n\nThe bundle identifier of the app.\n\ncurrency\ncurrency\n\nThe three-letter ISO 4217 currency code associated with the price parameter. This value is present only if price is present.\n\nenvironment\nenvironment\n\nThe server environment, either sandbox or production.\n\nexpiresDate\nexpiresDate\n\nThe UNIX time, in milliseconds, that the subscription expires or renews.\n\ninAppOwnershipType\ninAppOwnershipType\n\nA string that describes whether the transaction was purchased by the customer, or is available to them through Family Sharing.\n\nisUpgraded\nisUpgraded\n\nA Boolean value that indicates whether the customer upgraded to another subscription.\n\nofferDiscountType\nofferDiscountType\n\nThe payment mode the subscription offer uses, such as Free Trial, Pay As You Go, or Pay Up Front.\n\nofferIdentifier\nofferIdentifier\n\nThe identifier that contains the offer code or the promotional offer identifier.\n\nofferType\nofferType\n\nA value that represents the promotional offer type.\n\noriginalPurchaseDate\noriginalPurchaseDate\n\nThe UNIX time, in milliseconds, that represents the purchase date of the original transaction identifier.\n\noriginalTransactionId\noriginalTransactionId\n\nThe transaction identifier of the original purchase.\n\nprice\nprice\n\nAn integer value that represents the price multiplied by 1000 of the in-app purchase or subscription offer you configured in App Store Connect and that the system records at the time of the purchase. For more information, see price. The currency parameter indicates the currency of this price.\n\nproductId\nproductId\n\nThe product identifier of the in-app purchase.\n\npurchaseDate\npurchaseDate\n\nThe UNIX time, in milliseconds, that the App Store charged the user’s account for a purchase, restored product, subscription, or subscription renewal after a lapse.\n\nquantity\nquantity\n\nThe number of consumable products the user purchased.\n\nrevocationDate\nrevocationDate\n\nThe UNIX time, in milliseconds, that the App Store refunded the transaction or revoked it from Family Sharing.\n\nrevocationReason\nrevocationReason\n\nThe reason that the App Store refunded the transaction or revoked it from Family Sharing.\n\nsignedDate\nsignedDate\n\nThe UNIX time, in milliseconds, that the App Store signed the JSON Web Signature (JWS) data.\n\nstorefront\nstorefront\n\nThe three-letter code that represents the country or region associated with the App Store storefront for the purchase.\n\nstorefrontId\nstorefrontId\n\nAn Apple-defined value that uniquely identifies the App Store storefront associated with the purchase.\n\nsubscriptionGroupIdentifier\nsubscriptionGroupIdentifier\n\nThe identifier of the subscription group to which the subscription belongs.\n\ntransactionId\ntransactionId\n\nThe unique identifier of the transaction.\n\ntransactionReason\ntransactionReason\n\nThe reason for the purchase transaction, which indicates whether it’s a customer’s purchase or a renewal for an auto-renewable subscription that the system initiates.\n\ntype\ntype\n\nThe type of the in-app purchase.\n\nwebOrderLineItemId\nwebOrderLineItemId\n\nThe unique identifier of subscription purchase events across devices, including subscription renewals.\n\nDiscussion\n\nImportant\n\nDon’t use the price or currency values for any revenue reconciliation or recognition. App Store Connect reporting is your source of record for financial and accounting purposes. For more information, see Overview of reporting tools.\n\nTopics\nData types\nTransaction data types\nTransaction and subscription renewal objects.\nSee Also\nJWS header and payload data types\nobject JWSRenewalInfoDecodedPayload\nA decoded payload containing subscription renewal information for an auto-renewable subscription.\nobject JWSDecodedHeader\nA decoded JSON Web Signature header containing transaction or renewal information.\nTransaction data types\nTransaction and subscription renewal objects."
  },
  {
    "title": "JWSRenewalInfoDecodedPayload",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/jwsrenewalinfodecodedpayload",
    "html": "Properties\nautoRenewProductId\nautoRenewProductId\n\nThe product identifier of the product that renews at the next billing period.\n\nautoRenewStatus\nautoRenewStatus\n\nThe renewal status for an auto-renewable subscription.\n\nenvironment\nenvironment\n\nThe server environment, either sandbox or production.\n\nexpirationIntent\nexpirationIntent\n\nThe reason a subscription expired.\n\ngracePeriodExpiresDate\ngracePeriodExpiresDate\n\nThe time when the billing grace period for subscription renewals expires.\n\nisInBillingRetryPeriod\nisInBillingRetryPeriod\n\nThe Boolean value that indicates whether the App Store is attempting to automatically renew an expired subscription.\n\nofferIdentifier\nofferIdentifier\n\nThe offer code or the promotional offer identifier.\n\nofferType\nofferType\n\nThe type of subscription offer.\n\noriginalTransactionId\noriginalTransactionId\n\nThe original transaction identifier of a purchase.\n\npriceIncreaseStatus\npriceIncreaseStatus\n\nThe status that indicates whether the auto-renewable subscription is subject to a price increase.\n\nproductId\nproductId\n\nThe product identifier of the in-app purchase.\n\nrecentSubscriptionStartDate\nrecentSubscriptionStartDate\n\nThe earliest start date of an auto-renewable subscription in a series of subscription purchases that ignores all lapses of paid service that are 60 days or less.\n\nrenewalDate\nrenewalDate\n\nThe UNIX time, in milliseconds, that the most recent auto-renewable subscription purchase expires.\n\nsignedDate\nsignedDate\n\nThe UNIX time, in milliseconds, that the App Store signed the JSON Web Signature (JWS) data.\n\nTopics\nData types\nTransaction data types\nTransaction and subscription renewal objects.\nSee Also\nJWS header and payload data types\nobject JWSTransactionDecodedPayload\nA decoded payload that contains transaction information.\nobject JWSDecodedHeader\nA decoded JSON Web Signature header containing transaction or renewal information.\nTransaction data types\nTransaction and subscription renewal objects."
  },
  {
    "title": "notificationUUID",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/notificationuuid",
    "html": "Discussion\n\nThe App Store server assigns a unique identifer to each notification it sends. Use this value to identify, and ignore, duplicate notifications.\n\nSee Also\nResponse types\ntype notificationType\nThe type that describes the in-app purchase or external purchase event for which the App Store sends the version 2 notification.\ntype subtype\nA string that provides details about select notification types in version 2.\ntype version\nA string that indicates the notification’s App Store Server Notifications version number.\ntype signedDate\nThe UNIX time, in milliseconds, that the App Store signed the JSON Web Signature data."
  },
  {
    "title": "signedDate",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/signeddate",
    "html": "See Also\nResponse types\ntype notificationType\nThe type that describes the in-app purchase or external purchase event for which the App Store sends the version 2 notification.\ntype subtype\nA string that provides details about select notification types in version 2.\ntype version\nA string that indicates the notification’s App Store Server Notifications version number.\ntype notificationUUID\nA unique identifier for the notification."
  },
  {
    "title": "data",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/data",
    "html": "Properties\nappAppleId\nappAppleId\n\nThe unique identifier of the app that the notification applies to. This property is available for apps that users download from the App Store. It isn’t present in the sandbox environment.\n\nbundleId\nbundleId\n\nThe bundle identifier of the app.\n\nbundleVersion\nbundleVersion\n\nThe version of the build that identifies an iteration of the bundle.\n\nconsumptionRequestReason\nconsumptionRequestReason\n\nThe reason the customer requested the refund. This field appears only for CONSUMPTION_REQUEST notifications, which the server sends when a customer initiates a refund request for a consumable in-app purchase or auto-renewable subscription.\n\nenvironment\nenvironment\n\nThe server environment that the notification applies to, either sandbox or production.\n\nsignedRenewalInfo\nJWSRenewalInfo\n\nSubscription renewal information signed by the App Store, in JSON Web Signature (JWS) format. This field appears only for notifications that apply to auto-renewable subscriptions.\n\nsignedTransactionInfo\nJWSTransaction\n\nTransaction information signed by the App Store, in JSON Web Signature (JWS) format.\n\nstatus\nstatus\n\nThe status of an auto-renewable subscription as of the signedDate in the responseBodyV2DecodedPayload. This field appears only for notifications sent for auto-renewable subscriptions.\n\nDiscussion\n\nThe data object is part of the responseBodyV2DecodedPayload. It’s present in the payload for notificationType values related to in-app purchases, except RENEWAL_EXTENSION with a SUMMARY subtype, which instead uses a summary object.\n\nUse the notification type along with the transaction and subscription renewal information in the data object to update a user’s service or present promotional offers according to your business logic.\n\nTopics\nApp metadata and environment\ntype appAppleId\nThe unique identifier of an app in the App Store.\ntype bundleId\nThe bundle identifier of an app.\ntype bundleVersion\nThe version of the build that identifies an iteration of the bundle.\ntype environment\nThe server environment, either sandbox or production.\ntype status\nThe status of an auto-renewable subscription at the time the App Store signs the notification.\nJWS transaction and renewal info\ntype JWSRenewalInfo\nSubscription renewal information signed by the App Store, in JSON Web Signature (JWS) format.\nobject JWSRenewalInfoDecodedPayload\nA decoded payload containing subscription renewal information for an auto-renewable subscription.\ntype JWSTransaction\nTransaction information signed by the App Store, in JSON Web Signature (JWS) format.\nobject JWSTransactionDecodedPayload\nA decoded payload that contains transaction information.\nConsumption request info\ntype consumptionRequestReason\nThe customer-provided reason for a refund request.\nSee Also\nResponse objects for in-app purchases\nobject summary\nThe payload data for a subscription-renewal-date extension notification."
  },
  {
    "title": "summary",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/summary",
    "html": "Properties\nrequestIdentifier\nrequestIdentifier\n\nThe UUID that represents a specific request to extend a subscription renewal date. This value matches the value you initially specify in the requestIdentifier when you call Extend Subscription Renewal Dates for All Active Subscribers in the App Store Server API.\n\nenvironment\nenvironment\n\nThe server environment that the notification applies to, either sandbox or production.\n\nappAppleId\nappAppleId\n\nThe unique identifier of the app that the notification applies to. This property is available for apps that users download from the App Store. It isn’t present in the sandbox environment.\n\nbundleId\nbundleId\n\nThe bundle identifier of the app.\n\nproductId\nproductId\n\nThe product identifier of the auto-renewable subscription that the subscription-renewal-date extension applies to.\n\nstorefrontCountryCodes\nstorefrontCountryCodes\n\nA list of country codes that limits the App Store’s attempt to apply the subscription-renewal-date extension. If this list isn’t present, the subscription-renewal-date extension applies to all storefronts.\n\nfailedCount\nfailedCount\n\nThe final count of subscriptions that fail to receive a subscription-renewal-date extension.\n\nsucceededCount\nsucceededCount\n\nThe final count of subscriptions that successfully receive a subscription-renewal-date extension.\n\nDiscussion\n\nThe summary object appears in the responseBodyV2DecodedPayload when the notificationType is RENEWAL_EXTENSION and the subtype is SUMMARY. This notification occurs when the App Store completes your request to extend the subscription renewal date for eligible subscribers. For more information about this request, see Extend Subscription Renewal Dates for All Active Subscribers in the App Store Server API.\n\nTopics\nData types\ntype requestIdentifier\nA string that contains a unique identifier for a subscription-renewal-date extension request.\ntype environment\nThe server environment, either sandbox or production.\ntype appAppleId\nThe unique identifier of an app in the App Store.\ntype bundleId\nThe bundle identifier of an app.\ntype productId\nThe product identifier of the in-app purchase.\ntype storefrontCountryCodes\nA list of storefront country codes for limiting the storefronts for a subscription-renewal-date extension.\ntype storefrontCountryCode\nThe three-letter code that represents the country or region associated with the App Store storefront.\ntype failedCount\nThe count of subscriptions that fail to receive a subscription-renewal-date extension.\ntype succeededCount\nThe count of subscriptions that successfully receive a subscription-renewal-date extension.\nSee Also\nResponse objects for in-app purchases\nobject data\nThe payload data that contains app metadata and the signed renewal and transaction information."
  },
  {
    "title": "App Store Server Notifications Version 1",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/app_store_server_notifications_version_1",
    "html": "Deprecated\n\nThe App Store Server Notifications V1 endpoint and version 1 notifications are deprecated. Implement the App Store Server Notifications V2 endpoint on your server to receive version 2 notifications instead.\n\nTopics\nVersion 1 notifications\nApp Store Server Notifications V1\nSpecify your secure server’s URL in App Store Connect to receive version 1 notifications.\nobject responseBodyV1\nThe response body containing JSON data that the App Store sends in a version 1 server notification.\ntype notification_type\nThe type that describes the in-app purchase event for which the App Store sends the version 1 notification."
  },
  {
    "title": "subtype",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/subtype",
    "html": "Possible Values\nACCEPTED\n\nApplies to the PRICE_INCREASE notificationType. A notification with this subtype indicates that the customer consented to the subscription price increase if the price increase requires customer consent, or that the system notified them of a price increase if the price increase doesn't require customer consent.\n\nAUTO_RENEW_DISABLED\n\nApplies to the DID_CHANGE_RENEWAL_STATUS notificationType. A notification with this subtype indicates that the user disabled subscription auto-renewal, or the App Store disabled subscription auto-renewal after the user requested a refund.\n\nAUTO_RENEW_ENABLED\n\nApplies to the DID_CHANGE_RENEWAL_STATUS notificationType. A notification with this subtype indicates that the user enabled subscription auto-renewal.\n\nBILLING_RECOVERY\n\nApplies to the DID_RENEW notificationType. A notification with this subtype indicates that the expired subscription that previously failed to renew has successfully renewed.\n\nBILLING_RETRY\n\nApplies to the EXPIRED notificationType. A notification with this subtype indicates that the subscription expired because the subscription failed to renew before the billing retry period ended.\n\nDOWNGRADE\n\nApplies to the DID_CHANGE_RENEWAL_PREF notificationType. A notification with this subtype indicates that the user downgraded their subscription or cross-graded to a subscription with a different duration. Downgrades take effect at the next renewal date.\n\nFAILURE\n\nApplies to the RENEWAL_EXTENSION notificationType. A notification with this subtype indicates that the subscription-renewal-date extension failed for an individual subscription. For details, see the data object in the responseBodyV2DecodedPayload. For information on the request, see Extend Subscription Renewal Dates for All Active Subscribers.\n\nGRACE_PERIOD\n\nApplies to the DID_FAIL_TO_RENEW notificationType. A notification with this subtype indicates that the subscription failed to renew due to a billing issue. Continue to provide access to the subscription during the grace period.\n\nINITIAL_BUY\n\nApplies to the SUBSCRIBED notificationType. A notification with this subtype indicates that the user purchased the subscription for the first time or that the user received access to the subscription through Family Sharing for the first time.\n\nPENDING\n\nApplies to the PRICE_INCREASE notificationType. A notification with this subtype indicates that the system informed the user of the subscription price increase, but the user hasn’t accepted it.\n\nPRICE_INCREASE\n\nApplies to the EXPIRED notificationType. A notification with this subtype indicates that the subscription expired because the user didn’t consent to a price increase.\n\nPRODUCT_NOT_FOR_SALE\n\nApplies to the EXPIRED notificationType. A notification with this subtype indicates that the subscription expired because the product wasn’t available for purchase at the time the subscription attempted to renew.\n\nRESUBSCRIBE\n\nApplies to the SUBSCRIBED notificationType. A notification with this subtype indicates that the user resubscribed or received access through Family Sharing to the same subscription or to another subscription within the same subscription group.\n\nSUMMARY\n\nApplies to the RENEWAL_EXTENSION notificationType. A notification with this subtype indicates that the App Store server completed your request to extend the subscription renewal date for all eligible subscribers. For the summary details, see the summary object in the responseBodyV2DecodedPayload. For information on the request, see Extend Subscription Renewal Dates for All Active Subscribers.\n\nUPGRADE\n\nApplies to the DID_CHANGE_RENEWAL_PREF notificationType. A notification with this subtype indicates that the user upgraded their subscription or cross-graded to a subscription with the same duration. Upgrades take effect immediately.\n\nUNREPORTED\n\nApplies to the EXTERNAL_PURCHASE_TOKEN notificationType. A notification with this subtype indicates that Apple created a token for your app but didn't receive a report. For more information about reporting the token, see externalPurchaseToken.\n\nVOLUNTARY\n\nApplies to the EXPIRED notificationType. A notification with this subtype indicates that the subscription expired after the user disabled subscription auto-renewal.\n\nDiscussion\n\nThis subtype field is part of the responseBodyV2DecodedPayload, and further describes an event of type notificationType. It’s present only for specific version 2 notifications.\n\nSee Also\nServer notifications version 2\nApp Store Server Notifications V2\nSpecify your secure server’s URL in App Store Connect to receive version 2 notifications.\nobject responseBodyV2\nThe response body the App Store sends in a version 2 server notification.\nobject responseBodyV2DecodedPayload\nA decoded payload that contains the version 2 notification data.\ntype notificationType\nThe type that describes the in-app purchase or external purchase event for which the App Store sends the version 2 notification."
  },
  {
    "title": "notification_type",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/notification_type",
    "html": "Deprecated\n\nImplement the App Store Server Notifications V2 endpoint on your server to receive version 2 notifications instead.\n\nPossible Values\nCANCEL\n\nIndicates that Apple Support canceled the auto-renewable subscription and the customer received a refund as of the timestamp in cancellation_date_ms.\n\nCONSUMPTION_REQUEST\n\nIndicates that the customer initiated a refund request for a consumable in-app purchase, and the App Store is requesting that you provide consumption data. For more information, see Send Consumption Information.\n\nDID_CHANGE_RENEWAL_PREF\n\nIndicates that the customer made a change in their subscription plan that takes effect at the next renewal. The currently active plan isn’t affected. Check the auto_renew_product_id field in unified_receipt.Pending_renewal_info to retrieve the product identifier for the product the customer’s subscription renews.\n\nDID_CHANGE_RENEWAL_STATUS\n\nIndicates a change in the subscription renewal status. In the JSON response, check auto_renew_status_change_date_ms to retrieve the date and time of the last status update. Check auto_renew_status to get the current renewal status.\n\nDID_FAIL_TO_RENEW\n\nIndicates a subscription that failed to renew due to a billing issue. Check is_in_billing_retry_period to retrieve the current retry status of the subscription. Check grace_period_expires_date to get the new service expiration date if the subscription is in a billing grace period.\n\nDID_RECOVER\n\nIndicates a successful automatic renewal of an expired subscription that failed to renew in the past. Check expires_date to determine the next renewal date and time.\n\nDID_RENEW\n\nIndicates that a customer’s subscription has successfully auto-renewed for a new transaction period. Provide the customer with access to the subscription’s content or service.\n\nINITIAL_BUY\n\nOccurs at the user’s initial purchase of the subscription. Store latest_receipt on your server as a token to verify the user’s subscription status at any time by validating it with the App Store.\n\nINTERACTIVE_RENEWAL\n\nIndicates the customer renewed a subscription interactively, either by using your app’s interface, or on the App Store in the account’s Subscriptions settings. Make service available immediately.\n\nPRICE_INCREASE_CONSENT\n\nIndicates that the App Store has started asking the customer to consent to your app’s auto-renewable subscription price increase that requires consent.\n\nIn the unified_receipt.Pending_renewal_info object, the price_consent_status value is 0 to indicate that the user hasn’t yet responded to the price increase.\n\nThe App Store server sets the price_consent_status to 1 when the customer consents to the price increase.\n\nCheck the latest price consent status by calling the Get All Subscription Statuses endpoint in the App Store Server API. Check the priceIncreaseStatus field in the JWSRenewalInfoDecodedPayload. You can also call verifyReceipt to view the updated price consent status.\n\nFor more information about how StoreKit calls your app before it displays the price consent sheet for subscription price increases that require customer consent, see paymentQueueShouldShowPriceConsent(_:). For more information about managing subscription prices, see Managing Prices.\n\nREFUND\n\nIndicates that the App Store successfully refunded a transaction for a consumable in-app purchase, a non-consumable in-app purchase, or a non-renewing subscription. The cancellation_date_ms contains the timestamp of the refunded transaction. The original_transaction_id and product_id identify the original transaction and product. The cancellation_reason contains the reason.\n\nREVOKE\n\nIndicates that an in-app purchase the user was entitled to through Family Sharing is no longer available through sharing. StoreKit sends this notification when a purchaser disabled Family Sharing for a product, the purchaser (or family member) left the family group, or the purchaser asked for and received a refund. Your app will also receive a paymentQueue(_:didRevokeEntitlementsForProductIdentifiers:) call. For more information about Family Sharing, see Supporting Family Sharing in your app.\n\nRENEWAL (DEPRECATED)\n\nAs of March 10, 2021 this notification is no longer sent in production and sandbox environments. Update your existing code to rely on the DID_RECOVER notification type instead.\n\nDiscussion\n\nYou receive and can react to server notifications in real time for the subscription and refund events that these notification type values describe. The notification_type appears in the responseBodyV1.\n\nNote\n\nIf you’re receiving App Store Server Notifications Version 2, see responseBodyV2 and notificationType instead.\n\nHandle use cases for notification events\n\nWhen events occur that affect the customer’s product and subscription life-cycle, your server receives notifications from the App Store. Here are some examples of product events and the server notifications you can expect to receive:\n\nSubscription or in-app purchase event\n\n\t\n\nNotification types\n\n\n\n\nCustomer completed an initial purchase of a subscription\n\n\t\n\nINITIAL_BUY\n\n\n\n\nSubscription is active; customer upgraded to another SKU\n\n\t\n\nDID_CHANGE_RENEWAL_STATUS, INTERACTIVE_RENEWAL\n\n\n\n\nSubscription is active; customer downgraded to another SKU\n\n\t\n\nDID_CHANGE_RENEWAL_PREF\n\n\n\n\nSubscription has expired; customer resubscribed to the same SKU\n\n\t\n\nDID_CHANGE_RENEWAL_STATUS\n\n\n\n\nSubscription has expired; customer resubscribed to another SKU (upgrade or downgrade)\n\n\t\n\nINTERACTIVE_RENEWAL, DID_CHANGE_RENEWAL_STATUS\n\n\n\n\nCustomer canceled the subscription from the App Store Subscriptions settings page. Their subscription will not auto-renew and will expire on the expires_date\n\n\t\n\nDID_CHANGE_RENEWAL_STATUS\n\n\n\n\nCustomer previously canceled the subscription, but now resubscribed to same product before the subscription expired. The subscription will auto-renew on the expires_date\n\n\t\n\nDID_CHANGE_RENEWAL_STATUS\n\n\n\n\nAppleCare refunded a subscription\n\n\t\n\nCANCEL, DID_CHANGE_RENEWAL_STATUS\n\n\n\n\nSubscription failed to renew because of a billing issue\n\n\t\n\nDID_FAIL_TO_RENEW\n\n\n\n\nExpired subscription recovered by App Store through a billing retry\n\n\t\n\nDID_RECOVER\n\n\n\n\nSubscription churned after failed billing retry attempts\n\n\t\n\nDID_CHANGE_RENEWAL_STATUS\n\n\n\n\nAppleCare successfully refunded the transaction for a consumable, non-consumable, or a non-renewing subscription\n\n\t\n\nREFUND\n\n\n\n\nYou’ve increased the price of an auto-renewable subscription and the price increase requires customer consent before the subscription auto-renews\n\n\t\n\nPRICE_INCREASE_CONSENT\n\n\n\n\nSubscription successfully auto-renewed\n\n\t\n\nDID_RENEW\n\n\n\n\nA purchaser disabled Family Sharing for a product, the purchaser (or family member) left the family group, or the purchaser asked for and received a refund\n\n\t\n\nREVOKE\n\n\n\n\nThe customer initiated a refund request for a consumable in-app purchase\n\n\t\n\nCONSUMPTION_REQUEST\n\nReceive notifications for the purchaser and family members\n\nThe following table identifies the notifications you receive for the purchaser and for their family members who share products through Family Sharing. To determine if a notification is for the purchaser or a family member, check the value of the in_app_ownership_type field, which appears in the unified_receipt.Latest_receipt_info of the responseBody object. For more information about Family Sharing, see Supporting Family Sharing in your app.\n\nNotification type\n\n\t\n\nReceived for Purchaser\n\n\t\n\nReceived for Family Members\n\n\n\n\nCANCEL\n\n\t\n\nYES\n\n\t\n\nNO\n\n\n\n\nCONSUMPTION_REQUEST\n\n\t\n\nYES\n\n\t\n\nN/A\n\n\n\n\nDID_CHANGE_RENEWAL_PREF\n\n\t\n\nYES\n\n\t\n\nYES\n\n\n\n\nDID_CHANGE_RENEWAL_STATUS\n\n\t\n\nYES\n\n\t\n\nYES\n\n\n\n\nDID_FAIL_TO_RENEW\n\n\t\n\nYES\n\n\t\n\nYES\n\n\n\n\nDID_RECOVER\n\n\t\n\nYES\n\n\t\n\nYES\n\n\n\n\nDID_RENEW\n\n\t\n\nYES\n\n\t\n\nYES\n\n\n\n\nINITIAL_BUY\n\n\t\n\nYES\n\n\t\n\nNO\n\n\n\n\nINTERACTIVE_RENEWAL\n\n\t\n\nYES\n\n\t\n\nYES\n\n\n\n\nPRICE_INCREASE_CONSENT\n\n\t\n\nYES\n\n\t\n\nNO\n\n\n\n\nREFUND\n\n\t\n\nYES\n\n\t\n\nNO\n\n\n\n\nREVOKE\n\n\t\n\nNO\n\n\t\n\nYES\n\n\n\n\nRENEWAL (Deprecated)\n\n\t\n\nN/A\n\n\t\n\nN/A\n\nThe CONSUMPTION_REQUEST notification applies to consumable in-app purchases, which aren’t eligible for Family Sharing.\n\nTest notification events with sandbox\n\nYour development-signed apps use the sandbox environment when you sign in to App Store using a Sandbox Apple ID. To create a Sandbox Apple ID or test account in App Store Connect, see Create a sandbox tester account.\n\nIf you enabled App Store Server Notifications, test your logic for transactions in the sandbox environment. To determine if a notification for a subscription event occurred in the test environment, check whether the value of the environment field in the JSON responseBodyV1 object equals Sandbox.\n\nThe following notification types are available in sandbox: INITIAL_BUY, DID_CHANGE_RENEWAL_PREF, DID_CHANGE_RENEWAL_STATUS, DID_RENEW, INTERACTIVE_RENEWAL, CANCEL, and REFUND. Notifications in the sandbox environment are for the purchaser only, and have in_app_ownership_type equal to PURCHASED. For more information about testing in-app purchases, see Testing in-app purchases with sandbox.\n\nSee Also\nVersion 1 notifications\nApp Store Server Notifications V1\nSpecify your secure server’s URL in App Store Connect to receive version 1 notifications.\nDeprecated\nobject responseBodyV1\nThe response body containing JSON data that the App Store sends in a version 1 server notification.\nDeprecated"
  },
  {
    "title": "App Store Server Notifications V1",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/app_store_server_notifications_v1",
    "html": "Deprecated\n\nThe App Store Server Notifications V1 endpoint and version 1 notifications are deprecated. Implement the App Store Server Notifications V2 endpoint on your server to receive version 2 notifications instead.\n\nURL\nPOST https://example.com/v1\nResponse Codes\n200\nresponseBodyV1\nOK\n\nThe response body for a version 1 notification.\n\nContent-Type: application/json\nDiscussion\n\nTo receive server notifications from the App Store, provide your secure server’s HTTPS URL in App Store Connect. For more information, see Enabling App Store Server Notifications. To secure your server and receive notifications, your server must support the Transport Layer Security (TLS) protocol version 1.2 or later.\n\nUpon receiving a server notification, respond to the App Store with an HTTP status code of 200 if the post was successful. If the post was unsuccessful, send HTTP 50x or 40x to have the App Store retry the notification. For more information, see Responding to App Store Server Notifications.\n\nNote\n\nFor version 2 notifications, see App Store Server Notifications V2.\n\nSee Also\nVersion 1 notifications\nobject responseBodyV1\nThe response body containing JSON data that the App Store sends in a version 1 server notification.\nDeprecated\ntype notification_type\nThe type that describes the in-app purchase event for which the App Store sends the version 1 notification.\nDeprecated"
  },
  {
    "title": "externalPurchaseToken",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/externalpurchasetoken",
    "html": "Properties\nexternalPurchaseId\nexternalPurchaseId\n\nThe unique identifier of the token. Use this value to report tokens and their associated transactions in the Send External Purchase Report endpoint.\n\ntokenCreationDate\ntokenCreationDate\n\nThe UNIX time, in milliseconds, when the system created the token.\n\nappAppleId\nappAppleId\n\nThe app Apple ID for which the system generated the token.\n\nbundleId\nbundleId\n\nThe bundle ID of the app for which the system generated the token.\n\nDiscussion\n\nThe externalPurchaseToken object is part of the responseBodyV2DecodedPayload. It’s present in the payload when the notificationType is EXTERNAL_PURCHASE_TOKEN. This notification type applies to apps that use the External Purchase API to offer alternative payment options.\n\nThis notification indicates that Apple didn't receive a report for the token within the time period specified in the Commission, transaction reports, and payments section of the article Using alternative payment options on the App Store in the European Union. To report tokens with or without associated transactions, call the Send External Purchase Report endpoint of the External Purchase Server API from your server.\n\nThe externalPurchaseToken object in the notification payload is the Base64URL-decoded JSON of the external purchase token your app or website receive when your customer initiates an external purchase. For more information on the external purchase token, see Receiving and decoding external purchase tokens.\n\nTopics\nExternal purchase token fields\ntype externalPurchaseId\nThe field of an external purchase token that uniquely identifies the token.\ntype tokenCreationDate\nThe field of an external purchase token that contains the UNIX date, in milliseconds, when the system created the token."
  },
  {
    "title": "Enabling App Store Server Notifications",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/enabling_app_store_server_notifications",
    "html": "Overview\n\nApp Store Server Notifications is a server-to-server service that sends real-time notifications for in-app purchase events, and notifications for unreported external purchase tokens. To enable notifications, set up an HTTPS URL on your server, and configure settings in App Store Connect.\n\nFor information about parsing and interpreting notifications, see Receiving App Store Server Notifications.\n\nSet up your server and App Store Connect settings\n\nTo receive server notifications from the App Store, your server must support the Transport Layer Security (TLS) 1.2 protocol or later.\n\nTo enable App Store Server Notifications, follow these steps:\n\nDetermine the HTTPS URL on your server to receive notifications for the production environment.\n\nOptionally, determine the HTTPS URL on your server to receive notifications for the sandbox environment for testing notifications. You may use the same URL for both the production and the sandbox environments.\n\nApp Store Connect gives you the choice of receiving version 2 or version 1 notifications for each environment. To choose version 2, set up your endpoint as App Store Server Notifications V2.\n\nConfigure your URL in App Store Connect. For more information, see Enter a URL for App Store Server Notifications.\n\nImportant\n\nIf you specify a port in your URL, the port must be either 443 or greater than or equal to 1024. For example, the URL https://example.com:1234/notifications specifies the port 1234.\n\nConfigure your server to respond with HTTP status codes to indicate whether the App Store server notification POST is successful. For more information, see Responding to App Store Server Notifications.\n\nFor new implementations, use App Store Server Notifications V2. To transition from using version 1 notifications to version 2, test version 2 notifications in the sandbox environment before you update your production environment to version 2.\n\nFor information about changes to App Store Server Notifications, see App Store Server Notifications changelog.\n\nConfigure an allow list\n\nIf your server requires IP addresses to be on an allow list, add the IP address subnet 17.0.0.0/8 to allow your server to receive notifications from the App Store server. This subnet applies to both the sandbox and the production environments.\n\nTest your server setup\n\nTo determine whether your server is receiving notifications, call the Request a Test Notification endpoint in the App Store Server API. This endpoint asks the App Store server to send a notification with the notificationType TEST. Use the testNotificationToken you receive to call the Get Test Notification Status endpoint to learn how your server responds to the test notification.\n\nThe App Store server sends the TEST notification in the version 2 notification format. However, it sends it to your server regardless of whether you configure a version 1 or version 2 notification URL in App Store Connect.\n\nSee Also\nEssentials\nReceiving App Store Server Notifications\nImplement server-side code to receive and parse notification posts.\nResponding to App Store Server Notifications\nSend HTTP status codes to indicate the success of a notification post.\nApp Store Server Notifications changelog\nLearn about changes to the App Store Server Notifications service."
  },
  {
    "title": "Receiving App Store Server Notifications",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/receiving_app_store_server_notifications",
    "html": "Overview\n\nThe App Store delivers JSON objects using an HTTP POST to your server for notable in-app purchase events and unreported external purchase tokens. Your server is responsible for parsing, interpreting, and responding to all server-to-server notification posts. For more information about responding, see Responding to App Store Server Notifications.\n\nThe body of the POST contains the data elements described in the responseBodyV2 for version 2 notifications, and responseBodyV1 for version 1. Parse them using the following information:\n\nThe version 2 response body, responseBodyV2, contains a signedPayload that’s cryptographically signed by the App Store in JSON Web Signature (JWS) format. The JWS format increases security and enables you to decode and validate the signature on your server. Some notifications include a data object, which has transaction and subscription renewal information that the App Store signs in JWS. The App Store Server API and the StoreKit In-App Purchase API use the same JWS-signed format for transaction and subscription status information. For more information about JWS, see the IETF RFC 7515 specification.\n\nThe version 1 response body, responseBodyV1, is a JSON object. It includes the receipt that contains the most recent in-app purchase transaction for the app. For more information, see the unified_receipt object.\n\nImportant\n\nThe App Store Server Notifications V1 endpoint and version 1 notifications, notification_type, are deprecated. Instead, implement the App Store Server Notifications V2 endpoint on your server to receive version 2 notifications.\n\nUse the notification type along with the transaction and subscription renewal information to update a user’s service or present promotional offers according to your business logic. For information on handling notifications that contain an external purchase token, see externalPurchaseToken.\n\nSee Also\nEssentials\nEnabling App Store Server Notifications\nConfigure your server and provide an HTTPS URL to receive notifications about in-app purchase events and unreported external purchase tokens.\nResponding to App Store Server Notifications\nSend HTTP status codes to indicate the success of a notification post.\nApp Store Server Notifications changelog\nLearn about changes to the App Store Server Notifications service."
  },
  {
    "title": "App Store Server Notifications changelog",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/app_store_server_notifications_changelog",
    "html": "Overview\n\nApp Store Server Notifications has two versions of notifications. Version 1 notifications and the App Store Server Notifications V1 endpoint are deprecated. Instead, implement the App Store Server Notifications V2 endpoint on your server to receive version 2 notifications.\n\nTo set up your server to receive notifications, see Enabling App Store Server Notifications. Use this changelog to learn about feature updates, version information, deprecations, and removals for App Store Server Notifications.\n\nApril 11, 2024\n\nNew features\n\nAdded the consumptionRequestReason to the data object.\n\nThe CONSUMPTION_REQUEST notificationType added notifications for refund requests for auto-renewable subscription.\n\nMarch 12, 2024\n\nNew features\n\nThe type of the price field changed from int32 to int64.\n\nFebruary 29, 2024\n\nNew features\n\nAdded a new notificationType: EXTERNAL_PURCHASE_TOKEN and a subtype: UNREPORTED.\n\nUpdated the responseBodyV2DecodedPayload to include the new payload object, externalPurchaseToken.\n\nAdded the types externalPurchaseId and tokenCreationDate.\n\nOctober 26, 2023\n\nNew features\n\nAdded new properties in the JWSTransactionDecodedPayload object: price, currency, and offerDiscountType.\n\nJune 5, 2023\n\nNew features\n\nAdded a new version 2 notificationType, REFUND_REVERSED.\n\nAdded the following new fields in the transaction decoded payload, JWSTransactionDecodedPayload: storefront, storefrontId, and transactionReason.\n\nAdded the renewalDate field in the renewal info decoded payload, JWSRenewalInfoDecodedPayload.\n\nAdded a subscription status field in the data object of the responseBodyV2DecodedPayload.\n\nThe responseBodyV1 now includes a deprecation field.\n\nDeprecations\n\nThe App Store Server Notifications V1 endpoint and version 1 notifications are deprecated. Implement the App Store Server Notifications V2 endpoint on your server to receive version 2 notifications instead.\n\nJanuary 30, 2023\n\nNew features\n\nAdded a new notification type for App Store Server Notifications 2 that consists of the notificationType value RENEWAL_EXTENSION and subtype values of SUMMARY and FAILURE. This notification provides information when you extend the subscription renewal date for all active subscribers, based on a product identifier. For more information, see Extend Subscription Renewal Dates for All Active Subscribers in the App Store Server API.\n\nUpdated the responseBodyV2DecodedPayload to include the new summary object, which appears in the payload for a RENEWAL_EXTENSION notification with a SUMMARY subtype.\n\nNovember 7, 2022\n\nNew features\n\nAdded the PRODUCT_NOT_FOR_SALE subtype for the EXPIRED notificationType.\n\nJune 6, 2022\n\nNew features\n\nApp Store Server Notifications 2 supports sending a TEST notification. For more information, see notificationType, and the endpoints Request a Test Notification and Get Test Notification Status in the App Store Server API.\n\nMay 12, 2022\n\nNew features\n\nIn App Store Server Notifications 2, the notification subtype ACCEPTED is now sent when the App Store notifies the customer of an auto-renewable subscription price increase that doesn’t require customer consent. This notification subtype is available only in version 2 notifications. For more information, see subtype.\n\nOctober 21, 2021 - version 2\n\nNew features\n\nApp Store Server Notifications V2 is available, and version 1 is still supported. For information about the notifications sent in version 2, see notificationType, substate, and responseBodyV2.\n\nFor information about the notifications sent in version 1, see notification_type and responseBodyV1 (previously named responseBody).\n\nMarch 10, 2021\n\nDeprecations\n\nIn App Store Server Notifications Version 1, the following notification type and top-level objects are deprecated and removed: RENEWAL,latest_receipt, latest_receipt_info, latest_expired_receipt, and latest_expired_receipt_info. For more information, see responseBodyV1 and notification_type.\n\nNovember 21, 2019 - version 1\n\nNew features\n\nApp Store Server Notifications is available.\n\nSee Also\nEssentials\nEnabling App Store Server Notifications\nConfigure your server and provide an HTTPS URL to receive notifications about in-app purchase events and unreported external purchase tokens.\nReceiving App Store Server Notifications\nImplement server-side code to receive and parse notification posts.\nResponding to App Store Server Notifications\nSend HTTP status codes to indicate the success of a notification post."
  },
  {
    "title": "Responding to App Store Server Notifications",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/responding_to_app_store_server_notifications",
    "html": "Overview\n\nWhen you set up the endpoints on your server to receive notifications, configure your server to send a response. Use HTTP status codes to indicate whether the App Store server notification post succeeded:\n\nSend HTTP 200, or any HTTP code between 200 and 206, if the post was successful.\n\nSend HTTP 50x or 40x to have the App Store retry the notification, if the post didn't succeed.\n\nThe system considers all other HTTP codes an unsuccessful post. Your server isn’t required to return a data value.\n\nIf the App Store server doesn’t receive a success response from your server after the initial notification attempt, it retries as follows:\n\nFor version 2 notifications, it retries five times, at 1, 12, 24, 48, and 72 hours after the previous attempt.\n\nFor version 1 notifications, it retries three times, at 6, 24, and 48 hours after the previous attempt.\n\nNote\n\nRetry notifications are available only in the production environment. In the sandbox environment, the App Store server attempts to send the notification one time.\n\nRecover from server outages\n\nIf your server misses notifications due to an outage, you can always get up-to-date transaction information by calling App Store Server API endpoints including Get Transaction History and Get All Subscription Statuses.\n\nIf you use version 2 notifications (App Store Server Notifications V2), you can recover missed notifications by calling Get Notification History. You can also test whether your server is receiving and responding to version 2 notifications correctly by calling the Request a Test Notification endpoint.\n\nSee Also\nEssentials\nEnabling App Store Server Notifications\nConfigure your server and provide an HTTPS URL to receive notifications about in-app purchase events and unreported external purchase tokens.\nReceiving App Store Server Notifications\nImplement server-side code to receive and parse notification posts.\nApp Store Server Notifications changelog\nLearn about changes to the App Store Server Notifications service."
  },
  {
    "title": "App Store Server Notifications V2",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/app_store_server_notifications_v2",
    "html": "URL\nPOST https://example.com/v2\nResponse Codes\n200\nresponseBodyV2\nOK\n\nThe response body for a version 2 notification.\n\nContent-Type: application/json\nDiscussion\n\nTo receive server notifications from the App Store, provide your secure server’s HTTPS URL in App Store Connect. For more information, see Enabling App Store Server Notifications. To secure your server and receive notifications, your server must support the Transport Layer Security (TLS) protocol version 1.2 or later.\n\nUpon receiving a server notification, respond to the App Store with an HTTP status code of 200-206 if the post was successful. If the post was unsuccessful, send HTTP 50x or 40x to have the App Store retry the notification. For more information, see Responding to App Store Server Notifications.\n\nSee Also\nServer notifications version 2\nobject responseBodyV2\nThe response body the App Store sends in a version 2 server notification.\nobject responseBodyV2DecodedPayload\nA decoded payload that contains the version 2 notification data.\ntype notificationType\nThe type that describes the in-app purchase or external purchase event for which the App Store sends the version 2 notification.\ntype subtype\nA string that provides details about select notification types in version 2."
  },
  {
    "title": "notificationType",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/notificationtype",
    "html": "Possible Values\nCONSUMPTION_REQUEST\n\nA notification type that indicates that the customer initiated a refund request for a consumable in-app purchase or auto-renewable subscription, and the App Store is requesting that you provide consumption data. For more information, see Send Consumption Information.\n\nDID_CHANGE_RENEWAL_PREF\n\nA notification type that, along with its subtype, indicates that the user made a change to their subscription plan. If the subtype is UPGRADE, the user upgraded their subscription. The upgrade goes into effect immediately, starting a new billing period, and the user receives a prorated refund for the unused portion of the previous period. If the subtype is DOWNGRADE, the user downgraded their subscription. Downgrades take effect at the next renewal date and don’t affect the currently active plan.\n\nIf the subtype is empty, the user changed their renewal preference back to the current subscription, effectively canceling a downgrade.\n\nFor more information on subscription levels, see Ranking subscriptions within the group.\n\nDID_CHANGE_RENEWAL_STATUS\n\nA notification type that, along with its subtype, indicates that the user made a change to the subscription renewal status. If the subtype is AUTO_RENEW_ENABLED, the user reenabled subscription auto-renewal. If the subtype is AUTO_RENEW_DISABLED, the user disabled subscription auto-renewal, or the App Store disabled subscription auto-renewal after the user requested a refund.\n\nDID_FAIL_TO_RENEW\n\nA notification type that, along with its subtype, indicates that the subscription failed to renew due to a billing issue. The subscription enters the billing retry period. If the subtype is GRACE_PERIOD, continue to provide service through the grace period. If the subtype is empty, the subscription isn’t in a grace period and you can stop providing the subscription service.\n\nInform the user that there may be an issue with their billing information. The App Store continues to retry billing for 60 days, or until the user resolves their billing issue or cancels their subscription, whichever comes first. For more information, see Reducing Involuntary Subscriber Churn.\n\nDID_RENEW\n\nA notification type that, along with its subtype, indicates that the subscription successfully renewed. If the subtype is BILLING_RECOVERY, the expired subscription that previously failed to renew has successfully renewed. If the substate is empty, the active subscription has successfully auto-renewed for a new transaction period. Provide the customer with access to the subscription’s content or service.\n\nEXPIRED\n\nA notification type that, along with its subtype, indicates that a subscription expired. If the subtype is VOLUNTARY, the subscription expired after the user disabled subscription renewal. If the subtype is BILLING_RETRY, the subscription expired because the billing retry period ended without a successful billing transaction. If the subtype is PRICE_INCREASE, the subscription expired because the user didn’t consent to a price increase that requires user consent. If the subtype is PRODUCT_NOT_FOR_SALE, the subscription expired because the product wasn’t available for purchase at the time the subscription attempted to renew.\n\nA notification without a subtype indicates that the subscription expired for some other reason.\n\nEXTERNAL_PURCHASE_TOKEN\n\nA notification type that, along with its subtype UNREPORTED, indicates that Apple created an external purchase token for your app but didn't receive a report. For more information about reporting the token, see externalPurchaseToken.\n\nThis notification applies only to apps that use the External Purchase API to provide alternative payment options.\n\nGRACE_PERIOD_EXPIRED\n\nA notification type that indicates that the billing grace period has ended without renewing the subscription, so you can turn off access to the service or content. Inform the user that there may be an issue with their billing information. The App Store continues to retry billing for 60 days, or until the user resolves their billing issue or cancels their subscription, whichever comes first. For more information, see Reducing Involuntary Subscriber Churn.\n\nOFFER_REDEEMED\n\nA notification type that, along with its subtype, indicates that the user redeemed a promotional offer or offer code.\n\nIf the subtype is INITIAL_BUY, the user redeemed the offer for a first-time purchase. If the subtype is RESUBSCRIBE, the user redeemed an offer to resubscribe to an inactive subscription. If the subtype is UPGRADE, the user redeemed an offer to upgrade their active subscription, which goes into effect immediately. If the subtype is DOWNGRADE, the user redeemed an offer to downgrade their active subscription, which goes into effect at the next renewal date. If the user redeemed an offer for their active subscription, you receive an OFFER_REDEEMED notification type without a subtype.\n\nFor more information about promotional offers, see Implementing promotional offers in your app. For more information about subscription offer codes, see Implementing offer codes in your app.\n\nPRICE_INCREASE\n\nA notification type that, along with its subtype, indicates that the system has informed the user of an auto-renewable subscription price increase.\n\nIf the price increase requires user consent, the subtype is PENDING if the user hasn’t responded to the price increase, or ACCEPTED if the user has consented to the price increase.\n\nIf the price increase doesn’t require user consent, the subtype is ACCEPTED.\n\nFor information about how the system calls your app before it displays the price consent sheet for subscription price increases that require customer consent, see paymentQueueShouldShowPriceConsent(_:). For information about managing subscription prices, see Managing Price Increases for Auto-Renewable Subscriptions and Managing Prices.\n\nREFUND\n\nA notification type that indicates that the App Store successfully refunded a transaction for a consumable in-app purchase, a non-consumable in-app purchase, an auto-renewable subscription, or a non-renewing subscription.\n\nThe revocationDate contains the timestamp of the refunded transaction. The originalTransactionId and productId identify the original transaction and product. The revocationReason contains the reason.\n\nTo request a list of all refunded transactions for a user, see Get Refund History in the App Store Server API.\n\nREFUND_DECLINED\n\nA notification type that indicates the App Store declined a refund request initiated by the app developer using any of the following methods: beginRefundRequest(for:in:), beginRefundRequest(in:), beginRefundRequest(for:in:), beginRefundRequest(in:), and refundRequestSheet(for:isPresented:onDismiss:).\n\nREFUND_REVERSED\n\nA notification type that indicates the App Store reversed a previously granted refund due to a dispute that the customer raised. If your app revoked content or services as a result of the related refund, it needs to reinstate them.\n\nThis notification type can apply to any in-app purchase type: consumable, non-consumable, non-renewing subscription, and auto-renewable subscription. For auto-renewable subscriptions, the renewal date remains unchanged when the App Store reverses a refund.\n\nRENEWAL_EXTENDED\n\nA notification type that indicates the App Store extended the subscription renewal date for a specific subscription. You request subscription-renewal-date extensions by calling Extend a Subscription Renewal Date or Extend Subscription Renewal Dates for All Active Subscribers in the App Store Server API.\n\nRENEWAL_EXTENSION\n\nA notification type that, along with its subtype, indicates that the App Store is attempting to extend the subscription renewal date that you request by calling Extend Subscription Renewal Dates for All Active Subscribers.\n\nIf the subtype is SUMMARY, the App Store completed extending the renewal date for all eligible subscribers. See the summary in the responseBodyV2DecodedPayload for details. If the subtype is FAILURE, the renewal date extension didn’t succeed for a specific subscription. See the data in the responseBodyV2DecodedPayload for details.\n\nREVOKE\n\nA notification type that indicates that an in-app purchase the user was entitled to through Family Sharing is no longer available through sharing. The App Store sends this notification when a purchaser disables Family Sharing for their purchase, the purchaser (or family member) leaves the family group, or the purchaser receives a refund. Your app also receives a paymentQueue(_:didRevokeEntitlementsForProductIdentifiers:) call. Family Sharing applies to non-consumable in-app purchases and auto-renewable subscriptions. For more information about Family Sharing, see Supporting Family Sharing in your app.\n\nSUBSCRIBED\n\nA notification type that, along with its subtype, indicates that the user subscribed to a product. If the subtype is INITIAL_BUY, the user either purchased or received access through Family Sharing to the subscription for the first time. If the subtype is RESUBSCRIBE, the user resubscribed or received access through Family Sharing to the same subscription or to another subscription within the same subscription group.\n\nTEST\n\nA notification type that the App Store server sends when you request it by calling the Request a Test Notification endpoint. Call that endpoint to test whether your server is receiving notifications. You receive this notification only at your request. For troubleshooting information, see the Get Test Notification Status endpoint.\n\nDiscussion\n\nThe notificationType appears in the notification payload, responseBodyV2DecodedPayload. It describes the event that leads to the notification. Some notifications also have a subtype that further describes the event. See the responseBodyV2DecodedPayload for more information about the notification in the data, summary, or externalPurchaseToken object.\n\nHandle use cases for in-app purchase life-cycle events\n\nWhen events occur that affect the customer’s in-app purchase and subscription life cycle, the App Store server sends you notifications. The following tables list the notifications by life-cycle events.\n\nEvents that enable service for subscriptions, including initial subscriptions, resubscribing, and successful auto-renewals result in the following notifications:\n\nEvent\n\n\t\n\nNotification type\n\n\t\n\nNotification subtype\n\n\n\n\nCustomer subscribes for the first time to any subscription within a subscription group.\n\n\t\n\nSUBSCRIBED\n\n\t\n\nINITIAL_BUY\n\n\n\n\nCustomer resubscribes to any subscription from the same subscription group as their expired subscription.\n\n\t\n\nSUBSCRIBED\n\n\t\n\nRESUBSCRIBE\n\n\n\n\nThe subscription successfully auto-renews.\n\n\t\n\nDID_RENEW\n\n\t\n\n\n\n\nA family member gains access to the subscription through Family Sharing after the purchaser subscribes for the first time.\n\n\t\n\nSUBSCRIBED\n\n\t\n\nINITIAL_BUY\n\n\n\n\nA family member gains access to the subscription through Family Sharing after the purchaser resubscribes.\n\n\t\n\nSUBSCRIBED\n\n\t\n\nRESUBSCRIBE\n\nCustomers changing their subscription options, including upgrading, downgrading or canceling result in the following notifications:\n\nEvent\n\n\t\n\nNotification type\n\n\t\n\nNotification subtype\n\n\n\n\nCustomer downgrades a subscription within the same subscription group.\n\n\t\n\nDID_CHANGE_RENEWAL_PREF\n\n\t\n\nDOWNGRADE\n\n\n\n\nCustomer reverts to the previous subscription, effectively canceling their downgrade.\n\n\t\n\nDID_CHANGE_RENEWAL_PREF\n\n\t\n\n\n\n\nCustomer upgrades a subscription within the same subscription group.\n\n\t\n\nDID_CHANGE_RENEWAL_PREF\n\n\t\n\nUPGRADE\n\n\n\n\nCustomer cancels the subscription from the App Store Subscriptions settings page.\n\n\t\n\nDID_CHANGE_RENEWAL_STATUS\n\n\t\n\nAUTO_RENEW_DISABLED\n\n\n\n\nCustomer subscribes again after canceling a subscription, which re-enables auto-renew.\n\n\t\n\nDID_CHANGE_RENEWAL_STATUS\n\n\t\n\nAUTO_RENEW_ENABLED\n\n\n\n\nThe system disabled auto-renew because the customer initiated a refund through your app using the refund request API.\n\n\t\n\nDID_CHANGE_RENEWAL_STATUS\n\n\t\n\nAUTO_RENEW_DISABLED\n\nCustomers redeeming promotional offer or subscription offer codes result in the following notifications:\n\nEvent\n\n\t\n\nNotification type\n\n\t\n\nNotification subtype\n\n\n\n\nCustomer redeems a promotional offer or offer code for an active subscription.\n\n\t\n\nOFFER_REDEEMED\n\n\t\n\n\n\n\nCustomer redeems an offer code to subscribe for the first time.\n\n\t\n\nOFFER_REDEEMED\n\n\t\n\nINITIAL_BUY\n\n\n\n\nCustomer redeems a promotional offer or offer code after their subscription expired.\n\n\t\n\nOFFER_REDEEMED\n\n\t\n\nRESUBSCRIBE\n\n\n\n\nCustomer redeems a promotional offer or offer code to upgrade their subscription.\n\n\t\n\nOFFER_REDEEMED\n\n\t\n\nUPGRADE\n\n\n\n\nCustomer redeems a promotional offer and downgrades their subscription.\n\n\t\n\nOFFER_REDEEMED\n\n\t\n\nDOWNGRADE\n\nBilling events, including billing retries, entering and exiting Billing Grace Period, and expiring subscriptions result in the following notifications:\n\nEvent\n\n\t\n\nNotification type\n\n\t\n\nNotification subtype\n\n\n\n\nThe subscription expires because the customer chose to cancel it.\n\n\t\n\nEXPIRED\n\n\t\n\nVOLUNTARY\n\n\n\n\nThe subscription expires because the developer removed the subscription from sale and the renewal fails.\n\n\t\n\nEXPIRED\n\n\t\n\nPRODUCT_NOT_FOR_SALE\n\n\n\n\nThe subscription expires because the billing retry period ends without recovering the subscription.\n\n\t\n\nEXPIRED\n\n\t\n\nBILLING_RETRY\n\n\n\n\nThe subscription fails to renew and enters the billing retry period.\n\n\t\n\nDID_FAIL_TO_RENEW\n\n\t\n\n\n\n\nThe subscription fails to renew and enters the billing retry period with Billing Grace Period enabled.\n\n\t\n\nDID_FAIL_TO_RENEW\n\n\t\n\nGRACE_PERIOD\n\n\n\n\nThe billing retry successfully recovers the subscription.\n\n\t\n\nDID_RENEW\n\n\t\n\nBILLING_RECOVERY\n\n\n\n\nThe subscription exits the Billing Grace Period (and continues in billing retry).\n\n\t\n\nGRACE_PERIOD_EXPIRED\n\n\t\n\nEvents or notifications that occur when you increase the price of an auto-renewable subscription include:\n\nEvent\n\n\t\n\nNotification type\n\n\t\n\nNotification subtype\n\n\n\n\nThe system informs the customer of the auto-renewable subscription price increase that requires customer consent, and the customer doesn’t respond.\n\n\t\n\nPRICE_INCREASE\n\n\t\n\nPENDING\n\n\n\n\nThe auto-renewable subscription expires because the customer didn’t consent to the price increase that requires consent.\n\n\t\n\nEXPIRED\n\n\t\n\nPRICE_INCREASE\n\n\n\n\nCustomer consents to an auto-renewable subscription price increase that requires consent.\n\n\t\n\nPRICE_INCREASE\n\n\t\n\nACCEPTED\n\n\n\n\nThe system notifies the customer of the auto-renewable subscription price increase that doesn’t require customer consent.\n\n\t\n\nPRICE_INCREASE\n\n\t\n\nACCEPTED\n\n\n\n\nCustomer canceled the subscription after receiving a price increase notice or a request to consent to a price increase.\n\n\t\n\nDID_CHANGE_RENEWAL_STATUS\n\n\t\n\nCustomers requesting refunds or canceling Family Sharing result in the following notifications:\n\nEvent\n\n\t\n\nNotification type\n\n\t\n\nNotification subtype\n\n\n\n\nApple refunds the transaction for a consumable or non-consumable in-app purchase, a non-renewing subscription, or an auto-renewable subscription.\n\n\t\n\nREFUND\n\n\t\n\n\n\n\nApple reverses a previously granted refund due to a dispute that the customer raised.\n\n\t\n\nREFUND_REVERSED\n\n\t\n\n\n\n\nApple declines a refund that the customer initiated in the app, using the request refund API.\n\n\t\n\nREFUND_DECLINED\n\n\t\n\n\n\n\nApple requests consumption information for a refund request that a customer initiates.\n\n\t\n\nCONSUMPTION_REQUEST\n\n\t\n\n\n\n\nA family member loses access to the subscription through Family Sharing.\n\n\t\n\nREVOKE\n\n\t\n\nDevelopers requesting subscription-renewal-date extensions result in the following notifications:\n\nEvent\n\n\t\n\nNotification type\n\n\t\n\nNotification subtype\n\n\n\n\nThe App Store successfully extends a subscription-renewal date for a specific subscription.\n\n\t\n\nRENEWAL_EXTENDED\n\n\t\n\n\n\n\nThe App Store successfully completes extending the subscription-renewal date for all eligible subscribers.\n\n\t\n\nRENEWAL_EXTENSION\n\n\t\n\nSUMMARY\n\n\n\n\nThe App Store failed to extend the subscription-renewal date for a specific subscriber.\n\n\t\n\nRENEWAL_EXTENSION\n\n\t\n\nFAILURE\n\nSee Also\nServer notifications version 2\nApp Store Server Notifications V2\nSpecify your secure server’s URL in App Store Connect to receive version 2 notifications.\nobject responseBodyV2\nThe response body the App Store sends in a version 2 server notification.\nobject responseBodyV2DecodedPayload\nA decoded payload that contains the version 2 notification data.\ntype subtype\nA string that provides details about select notification types in version 2."
  },
  {
    "title": "responseBodyV2",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/responsebodyv2",
    "html": "Properties\nsignedPayload\nsignedPayload\n\nThe payload in JSON Web Signature (JWS) format, signed by the App Store.\n\nDiscussion\n\nThe signedPayload object is a JWS representation. To get the transaction and subscription renewal details from the notification payload, process the signedPayload as follows:\n\nParse signedPayload to identify the JWS header, payload, and signature representations.\n\nBase64URL-decode the payload to get the responseBodyV2DecodedPayload. The decoded payload contains details of the notification such as the notification type and data.\n\nThe data object contains a signedTransactionInfo (JWSTransaction) and based on the notification type, a signedRenewalInfo (JWSRenewalInfo). Parse and Base64URL-decode these signed JWS representations to get transaction and subscription renewal details.\n\nEach of the signed JWS representations, signedPayload, signedTransactionInfo, and signedRenewalInfo, have a JWS signature that you can validate on your server. Use the algorithm specified in the header’s alg parameter to validate the signature. For more information about validating signatures, see the JSON Web Signature (JWS) IETF RFC 7515 specification.\n\nTopics\nResponse body payload\ntype signedPayload\nA cryptographically signed payload, in JSON Web Signature (JWS) format, that contains the response body for a version 2 notification.\nSee Also\nServer notifications version 2\nApp Store Server Notifications V2\nSpecify your secure server’s URL in App Store Connect to receive version 2 notifications.\nobject responseBodyV2DecodedPayload\nA decoded payload that contains the version 2 notification data.\ntype notificationType\nThe type that describes the in-app purchase or external purchase event for which the App Store sends the version 2 notification.\ntype subtype\nA string that provides details about select notification types in version 2."
  },
  {
    "title": "responseBodyV2DecodedPayload",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/responsebodyv2decodedpayload",
    "html": "Properties\nnotificationType\nnotificationType\n\nThe in-app purchase event for which the App Store sends this version 2 notification.\n\nsubtype\nsubtype\n\nAdditional information that identifies the notification event. The subtype field is present only for specific version 2 notifications.\n\ndata\ndata\n\nThe object that contains the app metadata and signed renewal and transaction information.\n\nThe data, summary, and externalPurchaseToken fields are mutually exclusive. The payload contains only one of these fields.\n\nsummary\nsummary\n\nThe summary data that appears when the App Store server completes your request to extend a subscription renewal date for eligible subscribers. For more information, see Extend Subscription Renewal Dates for All Active Subscribers.\n\nThe data, summary, and externalPurchaseToken fields are mutually exclusive. The payload contains only one of these fields.\n\nexternalPurchaseToken\nexternalPurchaseToken\n\nThis field appears when the notificationType is EXTERNAL_PURCHASE_TOKEN.\n\nThe data, summary, and externalPurchaseToken fields are mutually exclusive. The payload contains only one of these fields.\n\nversion\nversion\n\nThe App Store Server Notification version number, \"2.0\".\n\nsignedDate\nsignedDate\n\nThe UNIX time, in milliseconds, that the App Store signed the JSON Web Signature data.\n\nnotificationUUID\nnotificationUUID\n\nA unique identifier for the notification. Use this value to identify a duplicate notification.\n\nDiscussion\n\nThe responseBodyV2DecodedPayload is the Base64URL-decoded notification information from the JWS payload portion of the signedPayload. Use the notificationType and subtype to understand the event that led to this notification.\n\nThe payload can contain only one of the following three fields:\n\nA data object, which contains details including the environment, the app metadata, and the signed transaction and subscription renewal information.\n\nA summary object, which contains information only when the notification is a RENEWAL_EXTENSION with a SUMMARY subtype. For more information, see Extend Subscription Renewal Dates for All Active Subscribers.\n\nAn externalPurchaseToken, which contains an external purchase token only when the notification is EXTERNAL_PURCHASE_TOKEN. For more information about this notification, see externalPurchaseToken.\n\nTopics\nResponse objects for in-app purchases\nobject summary\nThe payload data for a subscription-renewal-date extension notification.\nobject data\nThe payload data that contains app metadata and the signed renewal and transaction information.\nResponse object for an external purchase\nobject externalPurchaseToken\nThe payload data that contains an external purchase token.\nResponse types\ntype notificationType\nThe type that describes the in-app purchase or external purchase event for which the App Store sends the version 2 notification.\ntype subtype\nA string that provides details about select notification types in version 2.\ntype version\nA string that indicates the notification’s App Store Server Notifications version number.\ntype signedDate\nThe UNIX time, in milliseconds, that the App Store signed the JSON Web Signature data.\ntype notificationUUID\nA unique identifier for the notification.\nJWS header and payload data types\nobject JWSTransactionDecodedPayload\nA decoded payload that contains transaction information.\nobject JWSRenewalInfoDecodedPayload\nA decoded payload containing subscription renewal information for an auto-renewable subscription.\nobject JWSDecodedHeader\nA decoded JSON Web Signature header containing transaction or renewal information.\nTransaction data types\nTransaction and subscription renewal objects.\nSee Also\nServer notifications version 2\nApp Store Server Notifications V2\nSpecify your secure server’s URL in App Store Connect to receive version 2 notifications.\nobject responseBodyV2\nThe response body the App Store sends in a version 2 server notification.\ntype notificationType\nThe type that describes the in-app purchase or external purchase event for which the App Store sends the version 2 notification.\ntype subtype\nA string that provides details about select notification types in version 2."
  },
  {
    "title": "App Store Server Notifications",
    "url": "https://developer.apple.com/documentation/appstoreservernotifications/",
    "html": "Overview\n\nApp Store Server Notifications is a server-to-server service that sends real-time notifications for in-app purchase events, and notifications for unreported external purchase tokens. Use the data in the notifications to update your user-account database, and to monitor and respond to in-app purchase refunds. For notifications related to the External Purchase API, see externalPurchaseToken.\n\nImportant\n\nThe App Store Server Notifications V1 endpoint and version 1 notifications, notification_type, are deprecated. Implement the App Store Server Notifications V2 endpoint on your server to receive version 2 notifications instead.\n\nTo receive server notifications from the App Store, provide your server’s HTTPS URL in App Store Connect. Opt in to receive notifications for the production environment and the sandbox environment. For more information, see Enabling App Store Server Notifications.\n\nYour server is responsible for parsing, interpreting, and responding to all server-to-server notification posts. For more information, see Receiving App Store Server Notifications and Responding to App Store Server Notifications.\n\nProcess in-app purchase notifications\n\nNotifications cover events in the in-app purchase life cycle, including new subscription purchases and renewals, offer redemptions, refunds, and more. For a complete list of notification types, see notificationType for App Store Server Notifications V2.\n\nUse the notification type, along with the transaction and subscription renewal information, to update a customer's service or to present promotional offers according to your business logic.\n\nProcess external purchase token notifications\n\nA notificationType of EXTERNAL_PURCHASE_TOKEN with an UNREPORTED subtype indicates that Apple generated an external purchase token for your app but hasn’t received a report for the token. The notification includes the token in the externalPurchaseToken field of the responseBodyV2DecodedPayload. Use the token information to report it to Apple, including if you don’t recognize the token in your system. To report tokens, with or without associated transactions, call the External Purchase Server API’s Send External Purchase Report endpoint.\n\nFor more information about token reporting requirements, see Using alternative payment options on the App Store in the European Union.\n\nTest your server setup\n\nTo determine whether your server is receiving notifications, call the Request a Test Notification endpoint in the App Store Server API to ask the App Store server to send a notification with the notificationType TEST. Use the testNotificationToken you receive to call the Get Test Notification Status endpoint to learn how your server responds to the test notification.\n\nThe App Store server sends the TEST notification in the version 2 notification format, however, it sends it to your server regardless of whether you configure a version 1 or version 2 notification URL in App Store Connect. For more information about configuring your URL in App Store Connect, see Enter a URL for App Store server notifications.\n\nTopics\nEssentials\nEnabling App Store Server Notifications\nConfigure your server and provide an HTTPS URL to receive notifications about in-app purchase events and unreported external purchase tokens.\nReceiving App Store Server Notifications\nImplement server-side code to receive and parse notification posts.\nResponding to App Store Server Notifications\nSend HTTP status codes to indicate the success of a notification post.\nApp Store Server Notifications changelog\nLearn about changes to the App Store Server Notifications service.\nServer notifications version 2\nApp Store Server Notifications V2\nSpecify your secure server’s URL in App Store Connect to receive version 2 notifications.\nobject responseBodyV2\nThe response body the App Store sends in a version 2 server notification.\nobject responseBodyV2DecodedPayload\nA decoded payload that contains the version 2 notification data.\ntype notificationType\nThe type that describes the in-app purchase or external purchase event for which the App Store sends the version 2 notification.\ntype subtype\nA string that provides details about select notification types in version 2.\nDeprecated\nApp Store Server Notifications Version 1\nReceive, parse, and interpret App Store Server Notifications version 1.\nSee Also\nRelated Documentation\nIn-App Purchase\nOffer users additional content and services by using a Swift-based interface.\nApp Store Server API\nManage your customers’ App Store transactions from your server.\nApp Store Receipts\nValidate app and in-app purchase receipts with the App Store."
  }
]