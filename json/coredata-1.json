[
  {
    "title": "readOnly | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/1506183-readonly",
    "html": "Discussion\n\nYES if the receiver is read-only, otherwise NO.\n\nSee Also\nManaging Store Attributes\nidentifier\nThe unique identifier for the persistent store.\nURL\nThe URL for the persistent store."
  },
  {
    "title": "initWithPersistentStoreCoordinator:configurationName:URL:options: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/1506232-initwithpersistentstorecoordinat",
    "html": "Parameters\ncoordinator\n\nA persistent store coordinator.\n\nconfigurationName\n\nThe name of the managed object model configuration to use. Pass nil if you do not want to specify a configuration.\n\nurl\n\nThe URL of the store to load.\n\noptions\n\nA dictionary containing configuration options. See NSPersistentStoreCoordinator for a list of key names for options in this dictionary.\n\nReturn Value\n\nA new store object, associated with coordinator, that represents a persistent store at url using the options in options and—if it is not nil—the managed object model configuration configurationName.\n\nDiscussion\n\nYou must ensure that you load metadata during initialization and set it using metadata.\n\nSpecial Considerations\n\nThis is the designated initializer for persistent stores.\n\nSee Also\nRelated Documentation\nmetadata\nThe metadata for the persistent store.\nCore Data Programming Guide\nAtomic Store Programming Topics\nIncremental Store Programming Guide"
  },
  {
    "title": "NSPersistentStoreDidImportUbiquitousContentChangesNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoredidimportubiquitouscontentchangesnotification",
    "html": "Discussion\n\nThe notification’s object is set to the NSPersistentStoreCoordinator instance which registered the store. The notification’s userInfo dictionary contains the same keys as the NSManagedObjectContextObjectsDidChangeNotification notification (NSInsertedObjectsKey, NSUpdatedObjectsKeyNSDeletedObjectsKey), however the values are sets of NSManagedObjectID objects rather than sets of NSManagedObject objects."
  },
  {
    "title": "elementsDerivedFromExternalRecordURL: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468919-elementsderivedfromexternalrecor",
    "html": "Parameters\nfileURL\n\nA file URL specifying the location of a Spotlight external record file.\n\nReturn Value\n\nA dictionary containing the parsed elements derived from the Spotlight support file specified by fileURL.\n\nDiscussion\n\nDictionary keys and the corresponding values are described in Spotlight record keys.\n\nSee Also\nDeprecated type methods\n+ metadataForPersistentStoreWithURL:error:\nReturns a dictionary that contains the metadata stored in the persistent store at the specified location.\nDeprecated\n+ metadataForPersistentStoreOfType:URL:error:\nReturns a dictionary containing the metadata stored in the persistent store at a given URL.\nDeprecated\n+ removeUbiquitousContentAndPersistentStoreAtURL:options:error:\nDeletes all ubiquitous content for all peers for the persistent store at a given URL and also delete the local store file.\nDeprecated\n+ setMetadata:forPersistentStoreOfType:URL:error:\nSets the metadata for a given store.\nDeprecated"
  },
  {
    "title": "metadataForPersistentStoreWithURL:error: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468915-metadataforpersistentstorewithur",
    "html": "Deprecated\n\nUse metadataForPersistentStoreOfType:URL:error: instead.\n\nParameters\nurl\n\nAn URL object that specifies the location of a persistent store.\n\nerror\n\nIf no store is found at url or if there is a problem accessing its contents, upon return contains an instance of NSError that describes the problem.\n\nReturn Value\n\nA dictionary containing the metadata for the persistent store at url. If no store is found, or there is a problem accessing its contents, returns nil.\n\nThe keys guaranteed to be in this dictionary are NSStoreTypeKey and NSStoreUUIDKey.\n\nDiscussion\n\nThis method allows you to access the metadata in a persistent store without initializing a Core Data stack.\n\nSee Also\nDeprecated type methods\n+ elementsDerivedFromExternalRecordURL:\nReturns a dictionary containing the parsed elements derived from the Spotlight external record file that is specified by the given URL.\nDeprecated\n+ metadataForPersistentStoreOfType:URL:error:\nReturns a dictionary containing the metadata stored in the persistent store at a given URL.\nDeprecated\n+ removeUbiquitousContentAndPersistentStoreAtURL:options:error:\nDeletes all ubiquitous content for all peers for the persistent store at a given URL and also delete the local store file.\nDeprecated\n+ setMetadata:forPersistentStoreOfType:URL:error:\nSets the metadata for a given store.\nDeprecated\nRelated Documentation\n- setMetadata:forPersistentStore:\nUpdates the metadata for the specified persistent store.\n- metadataForPersistentStore:\nReturns the metadata of the specified persistent store."
  },
  {
    "title": "metadataForPersistentStoreWithURL:error: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/1506741-metadataforpersistentstorewithur",
    "html": "Parameters\nurl\n\nThe location of the store.\n\nerror\n\nIf an error occurs, upon return contains an NSError object that describes the problem.\n\nReturn Value\n\nThe metadata from the persistent store at url. Returns nil if there is an error.\n\nDiscussion\n\nSubclasses must override this method.\n\nDiscussion\n\nHandling Errors in Swift:\n\nIn Swift, this method returns a nonoptional result and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nManaging Store Metadata\n+ setMetadata:forPersistentStoreWithURL:error:\nSets the metadata for the store at a given URL.\n- loadMetadata:\nInstructs the persistent store to load its metadata.\nmetadata\nThe metadata for the persistent store."
  },
  {
    "title": "didAddToPersistentStoreCoordinator: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/1506873-didaddtopersistentstorecoordinat",
    "html": "Parameters\ncoordinator\n\nThe persistent store coordinator to which the receiver was added.\n\nDiscussion\n\nThe default implementation does nothing. You can override this method in a subclass in order to perform any kind of setup necessary before the load method is invoked.\n\nSee Also\nResponding to the Store Life Cycle\n- willRemoveFromPersistentStoreCoordinator:\nInvoked before the persistent store is removed from the persistent store coordinator."
  },
  {
    "title": "importStoreWithIdentifier:fromExternalRecordsDirectory:toURL:options:withType:error: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468788-importstorewithidentifier",
    "html": "Parameters\nstoreIdentifier\n\nThe identifier for a store.\n\nIf this value is nil then the method imports the records for the first store found.\n\nexternalRecordsURL\n\nThe location of the directory containing external records.\n\ndestinationURL\n\nAn URL object that specifies the location for the new store.\n\nThere should be no existing store at this location, as the store will be created from scratch (appending to an existing store is not allowed).\n\noptions\n\nA dictionary containing key-value pairs that specify whether the store should be read-only, and whether (for an XML store) the XML file should be validated against the DTD before it is read. For key definitions, see Store options.\n\nstoreType\n\nA string constant (such as NSSQLiteStoreType) that specifies the type of the new store—see Persistent Store Types.\n\nerror\n\nIf an error occurs, upon return contains an instance of NSError that describes the problem.\n\nReturn Value\n\nAn object representing the newly-created store.\n\nDiscussion\n\nHandling Errors in Swift:\n\nIn Swift, this method returns a nonoptional result and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nDeprecated instance methods\n- lock\nAttempts to acquire a lock.\nDeprecated\n- tryLock\nAttempts to acquire a lock.\nDeprecated\n- unlock\nRelinquishes a previously acquired lock.\nDeprecated\nRelated Documentation\n- removePersistentStore:error:\nRemoves the specified persistent store from the coordinator.\n- migratePersistentStore:toURL:options:withType:error:\nChanges the location and, if necessary, the store type of the specified persistent store.\n- addPersistentStoreWithType:configuration:URL:options:error:\nAdds a specific type of persistent store at the provided location."
  },
  {
    "title": "abstract | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription/1425097-abstract",
    "html": "Return Value\n\nYES if the receiver represents an abstract entity, otherwise NO.\n\nDiscussion\n\nYES if the receiver represents an abstract entity, otherwise NO. An abstract entity might be Shape, with concrete sub-entities such as Rectangle, Triangle, and Circle.\n\nSpecial Considerations\n\nSetting whether an entity is abstract raises an exception if the receiver’s model has been used by an object graph manager.\n\nSee Also\nGetting descriptive information\nname\nThe entity name of the receiver.\nmanagedObjectModel\nThe managed object model with which the receiver is associated.\nmanagedObjectClassName\nThe name of the class that represents the receiver’s entity.\nrenamingIdentifier\nThe renaming identifier for the receiver.\nuserInfo\nThe user info dictionary of the receiver.\ncoreSpotlightDisplayNameExpression\nThe expression that computes the CoreSpotlight display name for instances of the entity."
  },
  {
    "title": "metadataForPersistentStoreOfType:URL:error: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468804-metadataforpersistentstoreoftype",
    "html": "Parameters\nstoreType\n\nThe type of the store at url. If this value is nil, Core Data determines which store class should be used to get or set the store file's metadata by inspecting the file contents.\n\nurl\n\nThe location of a persistent store.\n\nerror\n\nIf no store is found at url or if there is a problem accessing its contents, upon return contains an NSError object that describes the problem.\n\nReturn Value\n\nA dictionary containing the metadata stored in the persistent store at url, or nil if the store cannot be opened or if there is a problem accessing its contents.\n\nThe keys guaranteed to be in this dictionary are NSStoreTypeKey and NSStoreUUIDKey.\n\nDiscussion\n\nYou can use this method to retrieve the metadata from a store without the overhead of creating a Core Data stack.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns a nonoptional result and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nDeprecated type methods\n+ elementsDerivedFromExternalRecordURL:\nReturns a dictionary containing the parsed elements derived from the Spotlight external record file that is specified by the given URL.\nDeprecated\n+ metadataForPersistentStoreWithURL:error:\nReturns a dictionary that contains the metadata stored in the persistent store at the specified location.\nDeprecated\n+ removeUbiquitousContentAndPersistentStoreAtURL:options:error:\nDeletes all ubiquitous content for all peers for the persistent store at a given URL and also delete the local store file.\nDeprecated\n+ setMetadata:forPersistentStoreOfType:URL:error:\nSets the metadata for a given store.\nDeprecated\nRelated Documentation\n- setMetadata:forPersistentStore:\nUpdates the metadata for the specified persistent store.\n- metadataForPersistentStore:\nReturns the metadata of the specified persistent store."
  },
  {
    "title": "willRemoveFromPersistentStoreCoordinator: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/1506731-willremovefrompersistentstorecoo",
    "html": "Parameters\ncoordinator\n\nThe persistent store coordinator from which the receiver was removed.\n\nDiscussion\n\nThe default implementation does nothing. You can override this method in a subclass in order to perform any clean-up before the store is removed from the coordinator (and deallocated).\n\nSee Also\nResponding to the Store Life Cycle\n- didAddToPersistentStoreCoordinator:\nInvoked after the persistent store has been added to the persistent store coordinator."
  },
  {
    "title": "destroyPersistentStoreAtURL:withType:options:error: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468888-destroypersistentstoreaturl",
    "html": "Deprecated\n\nUse destroyPersistentStore(at:type:options:) instead.\n\nParameters\nurl\n\nThe store’s location.\n\nstoreType\n\nThe store type. For possible values, see NSPersistentStore.StoreType.\n\noptions\n\nA dictionary containing key-value pairs that specify store behavior and characteristics. For more information, see Store options.\n\nSee Also\nModifying a store\n- migratePersistentStore:toURL:options:withType:error:\nChanges the location and, if necessary, the store type of the specified persistent store.\n- replacePersistentStoreAtURL:destinationOptions:withPersistentStoreFromURL:sourceOptions:storeType:error:\nReplaces one persistent store with another."
  },
  {
    "title": "addPersistentStoreWithType:configuration:URL:options:error: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468860-addpersistentstorewithtype",
    "html": "Parameters\nstoreType\n\nA string constant (such as NSSQLiteStoreType) that specifies the store type—see Persistent Store Types for possible values.\n\nconfiguration\n\nThe name of a configuration in the receiver's managed object model that will be used by the new store. The configuration can be nil, in which case no other configurations are allowed.\n\nstoreURL\n\nThe file location of the persistent store.\n\noptions\n\nA dictionary containing key-value pairs that specify whether the store should be read-only, and whether (for an XML store) the XML file should be validated against the DTD before it is read. For key definitions, see Store options and Migration options. This value may be nil.\n\nerror\n\nIf a new store cannot be created, upon return contains an instance of NSError that describes the problem\n\nReturn Value\n\nThe newly created store or, if an error occurs, nil.\n\nDiscussion\n\nHandling Errors in Swift:\n\nIn Swift, this method returns a nonoptional result and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nAdding or removing a store\n- addPersistentStoreWithDescription:completionHandler:\nAdds a persistent store using the provided description.\n- removePersistentStore:error:\nRemoves the specified persistent store from the coordinator.\nRelated Documentation\n- migratePersistentStore:toURL:options:withType:error:\nChanges the location and, if necessary, the store type of the specified persistent store.\n- importStoreWithIdentifier:fromExternalRecordsDirectory:toURL:options:withType:error:\nCreates and populates a store with the external records found at a given URL."
  },
  {
    "title": "performBlock: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468794-performblock",
    "html": "Parameters\nblock\n\nThe closure to execute.\n\nSee Also\nPerforming tasks\n- performBlockAndWait:\nExecutes the provided closure on the coordinator’s queue and waits for it to finish.\n- executeRequest:withContext:error:\nExecutes the specified request on each of the coordinator’s persistent stores."
  },
  {
    "title": "managedObjectIDForURIRepresentation: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468882-managedobjectidforurirepresentat",
    "html": "Parameters\nURL\n\nAn URL object containing a URI that specify a managed object.\n\nReturn Value\n\nAn object ID for the object specified by URL.\n\nDiscussion\n\nThe URI representation contains a UUID of the store the ID is coming from, and the coordinator can match it against the stores added to it.\n\nSee Also\nRelated Documentation\n- objectWithID:\nReturns either an existing object from the context or a fault that represents that object.\n- URIRepresentation\nReturns a URI that provides an archiveable reference to the object for the object ID."
  },
  {
    "title": "initWithManagedObjectModel: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468895-initwithmanagedobjectmodel",
    "html": "Parameters\nmodel\n\nA managed object model.\n\nReturn Value\n\nThe receiver, initialized with model.\n\nSee Also\nCreating a persistent store coordinator\nStore options\nThe options keys that configure the behavior and characteristics of a persistent store.\nMigration options\nThe options keys that configure the migration behavior of a persistent store.\nStore versions\nThe metadata keys you use when comparing store versions."
  },
  {
    "title": "performBlockAndWait: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468862-performblockandwait",
    "html": "Parameters\nblock\n\nThe closure to execute.\n\nSee Also\nPerforming tasks\n- performBlock:\nExecutes the provided closure asynchronously on the coordinator’s queue.\n- executeRequest:withContext:error:\nExecutes the specified request on each of the coordinator’s persistent stores."
  },
  {
    "title": "NSPersistentStoreCoordinatorStoresDidChangeNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinatorstoresdidchangenotification",
    "html": "Discussion\n\nThe notification's object is the persistent store coordinator that was affected. The notification’s userInfo dictionary contains information about the stores that were added or removed, specified using the following keys:\n\nNSAddedPersistentStoresKey\n\nNSRemovedPersistentStoresKey\n\nNSUUIDChangedPersistentStoresKey\n\nSee Also\nResponding to changes of the coordinator’s registered stores\nNSPersistentStoreCoordinatorStoresWillChangeNotification\nA notification that posts before the coordinator changes its registered stores.\nNSPersistentStoreCoordinatorWillRemoveStoreNotification\nA notification that posts before a coordinator removes a store.\nNotification keys\nThe keys you use to retrieve values from a notification’s user info dictionary."
  },
  {
    "title": "performBlock: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506578-performblock",
    "html": "Parameters\nblock\n\nThe block to perform.\n\nDiscussion\n\nThis method encapsulates an autorelease pool and a call to processPendingChanges.\n\nSee Also\nPerforming block operations\n- performBlockAndWait:\nSynchronously performs the specified block on the context’s queue."
  },
  {
    "title": "replacePersistentStoreAtURL:destinationOptions:withPersistentStoreFromURL:sourceOptions:storeType:error: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468917-replacepersistentstoreaturl",
    "html": "Deprecated\n\nUse replacePersistentStore(at:destinationOptions:withPersistentStoreFrom:sourceOptions:type:) instead.\n\nParameters\ndestinationURL\n\nThe location of the store to replace.\n\ndestinationOptions\n\nA dictionary containing key-value pairs that specify the behavior and characteristics of the store to replace. For more information, see Store options.\n\nsourceURL\n\nThe location of the store to use as the replacement.\n\nsourceOptions\n\nA dictionary containing key-value pairs that specify the behavior and characteristics of the replacement store. For more information, see Store options.\n\nstoreType\n\nThe store type of the replacement store. For possible values, see NSPersistentStore.StoreType.\n\nSee Also\nModifying a store\n- destroyPersistentStoreAtURL:withType:options:error:\nDeletes a specific type of persistent store at the provided location.\n- migratePersistentStore:toURL:options:withType:error:\nChanges the location and, if necessary, the store type of the specified persistent store."
  },
  {
    "title": "removePersistentStore:error: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468907-removepersistentstore",
    "html": "Parameters\nstore\n\nA persistent store.\n\nerror\n\nIf an error occurs, upon return contains an instance of NSError that describes the problem.\n\nReturn Value\n\nYES if the store is removed, otherwise NO.\n\nDiscussion\n\nHandling Errors in Swift:\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nAdding or removing a store\n- addPersistentStoreWithType:configuration:URL:options:error:\nAdds a specific type of persistent store at the provided location.\n- addPersistentStoreWithDescription:completionHandler:\nAdds a persistent store using the provided description.\nRelated Documentation\n- migratePersistentStore:toURL:options:withType:error:\nChanges the location and, if necessary, the store type of the specified persistent store."
  },
  {
    "title": "isKindOfEntity: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription/1425113-iskindofentity",
    "html": "Parameters\nentity\n\nAn entity.\n\nReturn Value\n\nYES if the receiver is a sub-entity of entity, otherwise NO.\n\nSee Also\nManaging inheritance\nsubentitiesByName\nA dictionary containing the receiver’s sub-entities.\nsubentities\nAn array containing the sub-entities of the receiver.\nsuperentity\nThe super-entity of the receiver."
  },
  {
    "title": "addPersistentStoreWithDescription:completionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1640556-addpersistentstorewithdescriptio",
    "html": "Parameters\nstoreDescription\n\nA description object used to create and load a persistent store.\n\nblock\n\nThe completion handler block that’s invoked after the store is added.\n\nReturn Value\n\nThe newly created store or, if an error occurs, nil.\n\nSee Also\nAdding or removing a store\n- addPersistentStoreWithType:configuration:URL:options:error:\nAdds a specific type of persistent store at the provided location.\n- removePersistentStore:error:\nRemoves the specified persistent store from the coordinator."
  },
  {
    "title": "URLForPersistentStore: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468865-urlforpersistentstore",
    "html": "Parameters\nstore\n\nA persistent store.\n\nReturn Value\n\nThe URL for store.\n\nSee Also\nManaging a store’s location\n- setURL:forPersistentStore:\nChanges the location of the specified persistent store.\n- persistentStoreForURL:\nReturns the persistent store for the specified file URL.\nRelated Documentation\npersistentStores\nThe coordinator’s persistent stores."
  },
  {
    "title": "metadataForPersistentStoreOfType:URL:options:error: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468778-metadataforpersistentstoreoftype",
    "html": "Parameters\nstoreType\n\nThe type of the store. If nil, Core Data automatically attempts to determine the store class to use.\n\nurl\n\nThe file URL of the store.\n\noptions\n\nA dictionary that contains options for the store.\n\nReturn Value\n\nA dictionary that contains, at a minimum, values for the NSStoreTypeKey and NSStoreUUIDKey keys.\n\nSee Also\nManaging a store’s metadata\n+ setMetadata:forPersistentStoreOfType:URL:options:error:\nUpdates the metadata of a specific type of persistent store at the provided location.\n- metadataForPersistentStore:\nReturns the metadata of the specified persistent store.\n- setMetadata:forPersistentStore:\nUpdates the metadata for the specified persistent store.\nNSStoreTypeKey\nA key that identifies the store type.\nNSStoreUUIDKey\nA key that provides the store’s UUID."
  },
  {
    "title": "metadataForPersistentStore: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468911-metadataforpersistentstore",
    "html": "Parameters\nstore\n\nA persistent store.\n\nReturn Value\n\nA dictionary that contains the metadata currently stored or to-be-stored in store.\n\nSee Also\nManaging a store’s metadata\n+ setMetadata:forPersistentStoreOfType:URL:options:error:\nUpdates the metadata of a specific type of persistent store at the provided location.\n+ metadataForPersistentStoreOfType:URL:options:error:\nReturns the metadata of a specific type of persistent store at the provided location.\n- setMetadata:forPersistentStore:\nUpdates the metadata for the specified persistent store.\nNSStoreTypeKey\nA key that identifies the store type.\nNSStoreUUIDKey\nA key that provides the store’s UUID.\nRelated Documentation\n+ setMetadata:forPersistentStoreOfType:URL:error:\nSets the metadata for a given store.\n+ metadataForPersistentStoreOfType:URL:error:\nReturns a dictionary containing the metadata stored in the persistent store at a given URL."
  },
  {
    "title": "executeRequest:withContext:error: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468872-executerequest",
    "html": "Parameters\nrequest\n\nA fetch or save request.\n\ncontext\n\nThe context against which request should be executed.\n\nerror\n\nIf an error occurs, upon return contains an NSError object that describes the problem.\n\nReturn Value\n\nAn array containing managed objects, managed object IDs, or dictionaries as appropriate for a fetch request; an empty array if request is a save request, or nil if an error occurred.\n\nUser defined requests return arrays of arrays, where a nested array is the result returned from a single store.\n\nDiscussion\n\nHandling Errors in Swift:\n\nIn Swift, this method returns a nonoptional result and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nPerforming tasks\n- performBlock:\nExecutes the provided closure asynchronously on the coordinator’s queue.\n- performBlockAndWait:\nExecutes the provided closure on the coordinator’s queue and waits for it to finish."
  },
  {
    "title": "NSPersistentStoreCoordinatorWillRemoveStoreNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinatorwillremovestorenotification",
    "html": "Discussion\n\nThe notification is sent during the invocation of NSPersistentStore’s willRemoveFromPersistentStoreCoordinator: method during store deallocation or removal. The notification's object is the persistent store coordinator will be removed.\n\nSee Also\nResponding to changes of the coordinator’s registered stores\nNSPersistentStoreCoordinatorStoresWillChangeNotification\nA notification that posts before the coordinator changes its registered stores.\nNSPersistentStoreCoordinatorStoresDidChangeNotification\nA notification that posts after a coordinator changes its registered stores.\nNotification keys\nThe keys you use to retrieve values from a notification’s user info dictionary."
  },
  {
    "title": "performBlockAndWait: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506364-performblockandwait",
    "html": "Parameters\nblock\n\nThe block to perform.\n\nDiscussion\n\nThis method supports reentrancy — meaning it’s safe to call the method again, from within the block, before the previous invocation completes.\n\nSee Also\nPerforming block operations\n- performBlock:\nAsynchronously performs the specified block on the context’s queue."
  },
  {
    "title": "initWithConcurrencyType: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506709-initwithconcurrencytype",
    "html": "Deprecated\n\nUse init(_:) instead.\n\nParameters\ntype\n\nThe context’s concurrency type. For possible values, see NSManagedObjectContextConcurrencyType.\n\nDiscussion\n\nFor more information, see Concurrency.\n\nSee Also\nCreating a context\nNSManagedObjectContextConcurrencyType\nThe concurrency types you can use with a managed object context."
  },
  {
    "title": "parentContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506529-parentcontext",
    "html": "Discussion\n\nnil indicates there is no parent context. For more details, see Parent store.\n\nSee Also\nConfiguring a context\npersistentStoreCoordinator\nThe persistent store coordinator of the context.\nname\nThe developer-provided name of the context.\nuserInfo\nThe user information for the context."
  },
  {
    "title": "executeFetchRequest:error: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506672-executefetchrequest",
    "html": "Parameters\nrequest\n\nA fetch request that specifies the search criteria for the fetch.\n\nerror\n\nIf there is a problem executing the fetch, upon return contains an instance of NSError that describes the problem.\n\nReturn Value\n\nAn array of objects that meet the criteria specified by request fetched from the receiver and from the persistent stores associated with the receiver’s persistent store coordinator. If an error occurs, returns nil. If no objects match the criteria specified by request, returns an empty array.\n\nDiscussion\n\nReturned objects are registered with the receiver.\n\nThe following points are important to consider:\n\nIf the fetch request has no predicate, then all instances of the specified entity are retrieved, modulo other criteria below.\n\nAn object that meets the criteria specified by request (it is an instance of the entity specified by the request, and it matches the request’s predicate if there is one) and that has been inserted into a context but which is not yet saved to a persistent store, is retrieved if the fetch request is executed on that context.\n\nIf an object in a context has been modified, a predicate is evaluated against its modified state, not against the current state in the persistent store. Therefore, if an object in a context has been modified such that it meets the fetch request’s criteria, the request retrieves it even if changes have not been saved to the store and the values in the store are such that it does not meet the criteria. Conversely, if an object in a context has been modified such that it does not match the fetch request, the fetch request will not retrieve it even if the version in the store does match.\n\nIf an object has been deleted from the context, the fetch request does not retrieve it even if that deletion has not been saved to a store.\n\nObjects that have been realized (populated, faults fired, “read from”, and so on) as well as pending updated, inserted, or deleted, are never changed by a fetch operation without developer intervention. If you fetch some objects, work with them, and then execute a new fetch that includes a superset of those objects, you do not get new instances or update data for the existing objects—you get the existing objects with their current in-memory state.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns a nonoptional result and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nRegistering and fetching objects\n- countForFetchRequest:error:\nReturns the number of objects the specified request fetches when it executes.\n- objectRegisteredForID:\nReturns an object that exists in the context.\n- objectWithID:\nReturns either an existing object from the context or a fault that represents that object.\n- existingObjectWithID:error:\nReturns an existing object from either the context or the persistent store.\nregisteredObjects\nThe set of registered managed objects in the context.\n- executeRequest:error:\nPasses a request to the persistent store without affecting the contents of the managed object context, and returns a persistent store result.\n- refreshAllObjects\nRefreshes all of the registered managed objects in the context.\nretainsRegisteredObjects\nA Boolean value that indicates whether the context keeps strong references to all registered managed objects.\nRelated Documentation\nCore Data Programming Guide\nPredicate Programming Guide\nCore Data Snippets"
  },
  {
    "title": "objectWithID: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506197-objectwithid",
    "html": "Parameters\nobjectID\n\nThe identifier of the object to retrieve. For more information, see NSManagedObjectID.\n\nReturn Value\n\nThe identified object, if its known to the context; otherwise, a fault with its objectID property set to objectID.\n\nDiscussion\n\nIf the context doesn’t recognize the specified object, this method returns a fault — a placeholder object that doesn’t load its properties until your code accesses them. The context then fetches the corresponding values from the persistent store and uses those values to turn the fault into a fully realized object.\n\nWhen this method returns a fault, Core Data makes no attempts to verify the existence of the underlying object in the persistent store. If the object doesn’t exist when the context tries to the fetch the object’s values, the framework throws an exception.\n\nSee Also\nRegistering and fetching objects\n- executeFetchRequest:error:\nReturns an array of objects that meet the criteria of the specified fetch request.\n- countForFetchRequest:error:\nReturns the number of objects the specified request fetches when it executes.\n- objectRegisteredForID:\nReturns an object that exists in the context.\n- existingObjectWithID:error:\nReturns an existing object from either the context or the persistent store.\nregisteredObjects\nThe set of registered managed objects in the context.\n- executeRequest:error:\nPasses a request to the persistent store without affecting the contents of the managed object context, and returns a persistent store result.\n- refreshAllObjects\nRefreshes all of the registered managed objects in the context.\nretainsRegisteredObjects\nA Boolean value that indicates whether the context keeps strong references to all registered managed objects."
  },
  {
    "title": "existingObjectWithID:error: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506686-existingobjectwithid",
    "html": "Parameters\nobjectID\n\nThe identifier of the object to retrieve. For more information, see NSManagedObjectID.\n\nerror\n\nOn input, a pointer to a variable of type NSError. On output, an error object that describes any issues that occur, or nil if the context successfully retrieves the object.\n\nReturn Value\n\nThe identified object from either the context or the persistent store.\n\nDiscussion\n\nIf the context recognizes the specified object, the method returns that object. Otherwise, the context fetches and returns a fully realized object from the persistent store; unlike objectWithID:, this method never returns a fault. If the object doesn’t exist in both the context and the persistent store, the method throws an error.\n\nSee Also\nRegistering and fetching objects\n- executeFetchRequest:error:\nReturns an array of objects that meet the criteria of the specified fetch request.\n- countForFetchRequest:error:\nReturns the number of objects the specified request fetches when it executes.\n- objectRegisteredForID:\nReturns an object that exists in the context.\n- objectWithID:\nReturns either an existing object from the context or a fault that represents that object.\nregisteredObjects\nThe set of registered managed objects in the context.\n- executeRequest:error:\nPasses a request to the persistent store without affecting the contents of the managed object context, and returns a persistent store result.\n- refreshAllObjects\nRefreshes all of the registered managed objects in the context.\nretainsRegisteredObjects\nA Boolean value that indicates whether the context keeps strong references to all registered managed objects."
  },
  {
    "title": "countForFetchRequest:error: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506868-countforfetchrequest",
    "html": "Parameters\nrequest\n\nA fetch request that specifies the search criteria for the fetch.\n\nerror\n\nIf there is a problem executing the fetch, upon return contains an instance of NSError that describes the problem.\n\nReturn Value\n\nThe number of objects a given fetch request would have returned if it had been passed to executeFetchRequest:error:, or NSNotFound if an error occurs.\n\nSee Also\nRegistering and fetching objects\n- executeFetchRequest:error:\nReturns an array of objects that meet the criteria of the specified fetch request.\n- objectRegisteredForID:\nReturns an object that exists in the context.\n- objectWithID:\nReturns either an existing object from the context or a fault that represents that object.\n- existingObjectWithID:error:\nReturns an existing object from either the context or the persistent store.\nregisteredObjects\nThe set of registered managed objects in the context.\n- executeRequest:error:\nPasses a request to the persistent store without affecting the contents of the managed object context, and returns a persistent store result.\n- refreshAllObjects\nRefreshes all of the registered managed objects in the context.\nretainsRegisteredObjects\nA Boolean value that indicates whether the context keeps strong references to all registered managed objects."
  },
  {
    "title": "currentPersistentHistoryTokenFromStores: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/3325497-currentpersistenthistorytokenfro",
    "html": "Parameters\nstores\n\nThe persistent stores of interest.\n\nReturn Value\n\nA persistent history token, or nil if the coordinator can’t create one.\n\nDiscussion\n\nIf you specify nil or provide an empty array, the coordinator attempts to create a token for all of its registered stores.\n\nSee Also\nMaintaining a record of changes\nNSPersistentHistoryTrackingKey\nThe key you use to enable persistent history tracking."
  },
  {
    "title": "NSPersistentStoreCoordinatorStoresWillChangeNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinatorstoreswillchangenotification",
    "html": "Discussion\n\nThis notification is similar to NSPersistentStoreCoordinatorStoresDidChangeNotification. If the application is running, Core Data will post this notification before responding to iCloud account changes or “Delete All” from Documents & Data.\n\nSee Also\nResponding to changes of the coordinator’s registered stores\nNSPersistentStoreCoordinatorStoresDidChangeNotification\nA notification that posts after a coordinator changes its registered stores.\nNSPersistentStoreCoordinatorWillRemoveStoreNotification\nA notification that posts before a coordinator removes a store.\nNotification keys\nThe keys you use to retrieve values from a notification’s user info dictionary."
  },
  {
    "title": "NSExternalRecordImportError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsexternalrecordimporterror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "executeRequest:error: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506834-executerequest",
    "html": "See Also\nRegistering and fetching objects\n- executeFetchRequest:error:\nReturns an array of objects that meet the criteria of the specified fetch request.\n- countForFetchRequest:error:\nReturns the number of objects the specified request fetches when it executes.\n- objectRegisteredForID:\nReturns an object that exists in the context.\n- objectWithID:\nReturns either an existing object from the context or a fault that represents that object.\n- existingObjectWithID:error:\nReturns an existing object from either the context or the persistent store.\nregisteredObjects\nThe set of registered managed objects in the context.\n- refreshAllObjects\nRefreshes all of the registered managed objects in the context.\nretainsRegisteredObjects\nA Boolean value that indicates whether the context keeps strong references to all registered managed objects."
  },
  {
    "title": "NSStagedMigrationFrameworkVersionMismatchError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsstagedmigrationframeworkversionmismatcherror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSValidationMissingMandatoryPropertyError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsvalidationmissingmandatorypropertyerror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSPersistentStoreIncompatibleVersionHashError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nspersistentstoreincompatibleversionhasherror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "setQueryGenerationFromToken:error: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1640469-setquerygenerationfromtoken",
    "html": "See Also\nManaging concurrency\nNSManagedObjectContextQueryGenerationKey\nConstant used to reference the query generation token.\n+ mergeChangesFromRemoteContextSave:intoContexts:\nHandles changes from other processes or from a serialized state.\nautomaticallyMergesChangesFromParent\nA Boolean value that indicates whether the context automatically merges changes saved to its persistent store coordinator or parent context.\nconcurrencyType\nThe concurrency type for the context.\nmergePolicy\nThe merge policy of the context.\nqueryGenerationToken\nReturns the token associated with the query generation currently in use by this context.\ntransactionAuthor\nThe author for the context that is used as an identifier in persistent history transactions.\n- mergeChangesFromContextDidSaveNotification:\nMerges the changes specified in a given notification."
  },
  {
    "title": "insertObject: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506794-insertobject",
    "html": "Parameters\nobject\n\nA managed object.\n\nDiscussion\n\nThe managed object (object) is registered in the receiver with a temporary global ID. It is assigned a permanent global ID when changes are committed. If the current transaction is rolled back (for example, if the receiver is sent a rollback message) before a save operation, the object is unregistered from the receiver.\n\nSee Also\nHandling managed objects\nshouldDeleteInaccessibleFaults\nA Boolean value that determines whether the context turns inaccessible faults into deleted objects.\ninsertedObjects\nThe set of objects that have been inserted into the context but not yet saved in a persistent store.\nupdatedObjects\nThe set of objects registered with the context that have uncommitted changes.\ndeletedObjects\nThe set of objects that will be removed from their persistent store during the next save operation.\n- shouldHandleInaccessibleFault:forObjectID:triggeredByProperty:\nCreates a log of the inaccessible fault.\n- deleteObject:\nSpecifies an object that should be removed from its persistent store when changes are committed.\n- assignObject:toPersistentStore:\nSpecifies the store in which a newly inserted object will be saved.\n- obtainPermanentIDsForObjects:error:\nConverts to permanent IDs the object IDs of the objects in a given array.\n- detectConflictsForObject:\nMarks an object for conflict detection.\n- refreshObject:mergeChanges:\nUpdates the persistent properties of a managed object to use the latest values from the persistent store.\n- processPendingChanges\nForces the context to process changes to the object graph.\n- observeValueForKeyPath:ofObject:change:context:\nAllows a context that has registered as an observer of a value to be notified of a change to that value."
  },
  {
    "title": "objectRegisteredForID: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506789-objectregisteredforid",
    "html": "Parameters\nobjectID\n\nThe identifier of the object to retrieve. For more information, see NSManagedObjectID.\n\nReturn Value\n\nThe identified object, if it’s known to the context; otherwise, nil.\n\nDiscussion\n\nThis method provides a convenient way to retrieve an object from the context’s registeredObjects property. A nil return value means the context doesn’t recognize the specified object; the object might still exist in the persistent store. If you need to query both the context and the store, use existingObjectWithID:error: instead.\n\nSee Also\nRegistering and fetching objects\n- executeFetchRequest:error:\nReturns an array of objects that meet the criteria of the specified fetch request.\n- countForFetchRequest:error:\nReturns the number of objects the specified request fetches when it executes.\n- objectWithID:\nReturns either an existing object from the context or a fault that represents that object.\n- existingObjectWithID:error:\nReturns an existing object from either the context or the persistent store.\nregisteredObjects\nThe set of registered managed objects in the context.\n- executeRequest:error:\nPasses a request to the persistent store without affecting the contents of the managed object context, and returns a persistent store result.\n- refreshAllObjects\nRefreshes all of the registered managed objects in the context.\nretainsRegisteredObjects\nA Boolean value that indicates whether the context keeps strong references to all registered managed objects."
  },
  {
    "title": "relationshipsWithDestinationEntity: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription/1425127-relationshipswithdestinationenti",
    "html": "Parameters\nentity\n\nAn entity description.\n\nReturn Value\n\nAn array containing the relationships of the receiver where the entity description of the relationship is entity. Elements in the array are instances of NSRelationshipDescription.\n\nSee Also\nWorking with properties\npropertiesByName\nA dictionary containing the properties of the receiver.\nproperties\nAn array containing the properties of the receiver.\nattributesByName\nThe attributes of the receiver in a dictionary.\nrelationshipsByName\nThe relationships of the receiver in a dictionary."
  },
  {
    "title": "copy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription/1806841-copy",
    "html": "Return Value\n\nA copy of the receiver.\n\nOverview\n\nNSEntityDescription’s implementation of copy returns an entity such that:\n\n[[entity copy] isEqual:entity] == NO\n\n\nYou should not, therefore, use an entity as a key in a dictionary (see Using entity descriptions in dictionaries)."
  },
  {
    "title": "entityForName:inManagedObjectContext: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription/1425111-entityforname",
    "html": "Parameters\nentityName\n\nThe name of an entity.\n\ncontext\n\nThe managed object context to use. Must not be nil.\n\nReturn Value\n\nThe entity with the specified name from the managed object model associated with context’s persistent store coordinator.\n\nDiscussion\n\nRaises NSInternalInconsistencyException if context is nil.\n\nThis method is functionally equivalent to the following code example.\n\nNSManagedObjectModel *managedObjectModel = [[context persistentStoreCoordinator] managedObjectModel];\nNSEntityDescription *entity = [[managedObjectModel entitiesByName] objectForKey:entityName];\nreturn entity;\n\nSee Also\nRelated Documentation\nentitiesByName\nThe entities of the model, keyed by name."
  },
  {
    "title": "persistentStoreForURL: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468824-persistentstoreforurl",
    "html": "Parameters\nURL\n\nAn URL object that specifies the location of a persistent store.\n\nReturn Value\n\nThe persistent store at the location specified by URL.\n\nSee Also\nManaging a store’s location\n- setURL:forPersistentStore:\nChanges the location of the specified persistent store.\n- URLForPersistentStore:\nReturns the location of the provided persistent store."
  },
  {
    "title": "NSManagedObjectContextDidSaveNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontextdidsavenotification",
    "html": "Discussion\n\nThe notification object is the managed object context. The userInfo dictionary contains the following keys: NSInsertedObjectsKey, NSUpdatedObjectsKey, and NSDeletedObjectsKey.\n\nYou can only use the managed objects in this notification on the same thread on which it was posted.\n\nYou can pass the notification object to mergeChangesFromContextDidSaveNotification: on another thread, however you must not use the managed object in the user info dictionary directly on another thread. For more details, see Concurrency with Core Data.\n\nSee Also\nManaging notifications\nNSManagedObjectContextObjectsDidChangeNotification\nA notification of changes made to managed objects associated with this context.\nNSManagedObjectContextWillSaveNotification\nA notification that the context is about to save.\nNSInsertedObjectsKey\nA key for the set of objects that were inserted into the context.\nNSUpdatedObjectsKey\nA key for the set of objects that were updated.\nNSDeletedObjectsKey\nA key for the set of objects that were marked for deletion during the previous event.\nNSRefreshedObjectsKey\nA key for the set of objects that were refreshed but were not dirtied in the scope of this context.\nNSInvalidatedObjectsKey\nA key for the set of objects that were invalidated.\nNSInvalidatedAllObjectsKey\nA key that specifies that all objects in the context have been invalidated."
  },
  {
    "title": "obtainPermanentIDsForObjects:error: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506793-obtainpermanentidsforobjects",
    "html": "Parameters\nobjects\n\nAn array of managed objects.\n\nerror\n\nIf an error occurs, upon return contains an NSError object that describes the problem.\n\nReturn Value\n\nYES if permanent IDs are obtained for all the objects in objects, otherwise NO.\n\nDiscussion\n\nThis method converts the object ID of each managed object in objects to a permanent ID. Although the object will have a permanent ID, it will still respond positively to inserted until it is saved. Any object that already has a permanent ID is ignored.\n\nAny object not already assigned to a store is assigned based on the same rules Core Data uses for assignment during a save operation (first writable store supporting the entity, and appropriate for the instance and its related items).\n\nHandling Errors in Swift:\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSpecial Considerations\n\nThis method results in a transaction with the underlying store which changes the file’s modification date.\n\nIn macOS, this results an additional consideration if you invoke this method on the managed object context associated with an instance of NSPersistentDocument. Instances of NSDocument need to know that they are in sync with the underlying content. To avoid problems, after invoking this method you must therefore update the document’s modification date (using fileModificationDate).\n\nSee Also\nHandling managed objects\nshouldDeleteInaccessibleFaults\nA Boolean value that determines whether the context turns inaccessible faults into deleted objects.\ninsertedObjects\nThe set of objects that have been inserted into the context but not yet saved in a persistent store.\nupdatedObjects\nThe set of objects registered with the context that have uncommitted changes.\ndeletedObjects\nThe set of objects that will be removed from their persistent store during the next save operation.\n- shouldHandleInaccessibleFault:forObjectID:triggeredByProperty:\nCreates a log of the inaccessible fault.\n- insertObject:\nRegisters an object to be inserted in the context’s persistent store the next time changes are saved.\n- deleteObject:\nSpecifies an object that should be removed from its persistent store when changes are committed.\n- assignObject:toPersistentStore:\nSpecifies the store in which a newly inserted object will be saved.\n- detectConflictsForObject:\nMarks an object for conflict detection.\n- refreshObject:mergeChanges:\nUpdates the persistent properties of a managed object to use the latest values from the persistent store.\n- processPendingChanges\nForces the context to process changes to the object graph.\n- observeValueForKeyPath:ofObject:change:context:\nAllows a context that has registered as an observer of a value to be notified of a change to that value."
  },
  {
    "title": "observeValueForKeyPath:ofObject:change:context: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506849-observevalueforkeypath",
    "html": "See Also\nHandling managed objects\nshouldDeleteInaccessibleFaults\nA Boolean value that determines whether the context turns inaccessible faults into deleted objects.\ninsertedObjects\nThe set of objects that have been inserted into the context but not yet saved in a persistent store.\nupdatedObjects\nThe set of objects registered with the context that have uncommitted changes.\ndeletedObjects\nThe set of objects that will be removed from their persistent store during the next save operation.\n- shouldHandleInaccessibleFault:forObjectID:triggeredByProperty:\nCreates a log of the inaccessible fault.\n- insertObject:\nRegisters an object to be inserted in the context’s persistent store the next time changes are saved.\n- deleteObject:\nSpecifies an object that should be removed from its persistent store when changes are committed.\n- assignObject:toPersistentStore:\nSpecifies the store in which a newly inserted object will be saved.\n- obtainPermanentIDsForObjects:error:\nConverts to permanent IDs the object IDs of the objects in a given array.\n- detectConflictsForObject:\nMarks an object for conflict detection.\n- refreshObject:mergeChanges:\nUpdates the persistent properties of a managed object to use the latest values from the persistent store.\n- processPendingChanges\nForces the context to process changes to the object graph."
  },
  {
    "title": "detectConflictsForObject: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506843-detectconflictsforobject",
    "html": "Parameters\nobject\n\nA managed object.\n\nDiscussion\n\nIf on the next invocation of save: object has been modified in its persistent store, the save fails. This allows optimistic locking for unchanged objects. Conflict detection is always performed on changed or deleted objects.\n\nSee Also\nHandling managed objects\nshouldDeleteInaccessibleFaults\nA Boolean value that determines whether the context turns inaccessible faults into deleted objects.\ninsertedObjects\nThe set of objects that have been inserted into the context but not yet saved in a persistent store.\nupdatedObjects\nThe set of objects registered with the context that have uncommitted changes.\ndeletedObjects\nThe set of objects that will be removed from their persistent store during the next save operation.\n- shouldHandleInaccessibleFault:forObjectID:triggeredByProperty:\nCreates a log of the inaccessible fault.\n- insertObject:\nRegisters an object to be inserted in the context’s persistent store the next time changes are saved.\n- deleteObject:\nSpecifies an object that should be removed from its persistent store when changes are committed.\n- assignObject:toPersistentStore:\nSpecifies the store in which a newly inserted object will be saved.\n- obtainPermanentIDsForObjects:error:\nConverts to permanent IDs the object IDs of the objects in a given array.\n- refreshObject:mergeChanges:\nUpdates the persistent properties of a managed object to use the latest values from the persistent store.\n- processPendingChanges\nForces the context to process changes to the object graph.\n- observeValueForKeyPath:ofObject:change:context:\nAllows a context that has registered as an observer of a value to be notified of a change to that value."
  },
  {
    "title": "deleteObject: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506847-deleteobject",
    "html": "Parameters\nobject\n\nA managed object.\n\nDiscussion\n\nWhen changes are committed, object will be removed from the uniquing tables. If object has not yet been saved to a persistent store, it is simply removed from the receiver.\n\nSee Also\nHandling managed objects\nshouldDeleteInaccessibleFaults\nA Boolean value that determines whether the context turns inaccessible faults into deleted objects.\ninsertedObjects\nThe set of objects that have been inserted into the context but not yet saved in a persistent store.\nupdatedObjects\nThe set of objects registered with the context that have uncommitted changes.\ndeletedObjects\nThe set of objects that will be removed from their persistent store during the next save operation.\n- shouldHandleInaccessibleFault:forObjectID:triggeredByProperty:\nCreates a log of the inaccessible fault.\n- insertObject:\nRegisters an object to be inserted in the context’s persistent store the next time changes are saved.\n- assignObject:toPersistentStore:\nSpecifies the store in which a newly inserted object will be saved.\n- obtainPermanentIDsForObjects:error:\nConverts to permanent IDs the object IDs of the objects in a given array.\n- detectConflictsForObject:\nMarks an object for conflict detection.\n- refreshObject:mergeChanges:\nUpdates the persistent properties of a managed object to use the latest values from the persistent store.\n- processPendingChanges\nForces the context to process changes to the object graph.\n- observeValueForKeyPath:ofObject:change:context:\nAllows a context that has registered as an observer of a value to be notified of a change to that value.\nRelated Documentation\ndeleted\nA Boolean value that indicates whether the managed object will be deleted during the next save."
  },
  {
    "title": "mergeChangesFromRemoteContextSave:intoContexts: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506546-mergechangesfromremotecontextsav",
    "html": "Discussion\n\nThis method more efficiently merges changes into multiple contexts as well as nested contexts. The dictionary keys should be one or more from an NSManagedObjectContextObjectsDidChangeNotification: NSInsertedObjectsKey, NSUpdatedObjectsKey, NSDeletedObjectsKey. The values should be an NSArray of either NSManagedObjectID or NSURL objects conforming to valid results from URIRepresentation.\n\nSee Also\nManaging concurrency\nNSManagedObjectContextQueryGenerationKey\nConstant used to reference the query generation token.\nautomaticallyMergesChangesFromParent\nA Boolean value that indicates whether the context automatically merges changes saved to its persistent store coordinator or parent context.\nconcurrencyType\nThe concurrency type for the context.\nmergePolicy\nThe merge policy of the context.\nqueryGenerationToken\nReturns the token associated with the query generation currently in use by this context.\ntransactionAuthor\nThe author for the context that is used as an identifier in persistent history transactions.\n- mergeChangesFromContextDidSaveNotification:\nMerges the changes specified in a given notification.\n- setQueryGenerationFromToken:error:\nSets the query generation this context should use."
  },
  {
    "title": "refreshObject:mergeChanges: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506224-refreshobject",
    "html": "Parameters\nobject\n\nA managed object.\n\nflag\n\nA Boolean value.\n\nIf flag is NO, the context discards pending changes and the managed object becomes a fault. Upon next access, the context reloads the object’s values from the persistent store or last cached state.\n\nIf flag is YES, the context reloads the object’s property values from the store or the cache. Then the context applies local changes over the newly loaded values. Merging the local values into object always succeeds, and never results in a merge conflict.\n\nDiscussion\n\nIf you call this method before the stalenessInterval expires, the context reloads the data from the cache instead of fetching from the store. If flag is YES, this method doesn’t affect any transient properties. If flag is NO, the object disposes the value of transient properties.\n\nYou typically use this method to ensure data freshness if multiple managed object contexts share a single persistent store. You can use this method to resolve an optimistic locking failure when attempting to save.\n\nTurning object into a fault by setting flag to NO breaks strong references to related managed objects. You can use this method to release a portion of your object graph if you want to constrain memory usage.\n\nSee Also\nHandling managed objects\nshouldDeleteInaccessibleFaults\nA Boolean value that determines whether the context turns inaccessible faults into deleted objects.\ninsertedObjects\nThe set of objects that have been inserted into the context but not yet saved in a persistent store.\nupdatedObjects\nThe set of objects registered with the context that have uncommitted changes.\ndeletedObjects\nThe set of objects that will be removed from their persistent store during the next save operation.\n- shouldHandleInaccessibleFault:forObjectID:triggeredByProperty:\nCreates a log of the inaccessible fault.\n- insertObject:\nRegisters an object to be inserted in the context’s persistent store the next time changes are saved.\n- deleteObject:\nSpecifies an object that should be removed from its persistent store when changes are committed.\n- assignObject:toPersistentStore:\nSpecifies the store in which a newly inserted object will be saved.\n- obtainPermanentIDsForObjects:error:\nConverts to permanent IDs the object IDs of the objects in a given array.\n- detectConflictsForObject:\nMarks an object for conflict detection.\n- processPendingChanges\nForces the context to process changes to the object graph.\n- observeValueForKeyPath:ofObject:change:context:\nAllows a context that has registered as an observer of a value to be notified of a change to that value.\nRelated Documentation\nstalenessInterval\nThe maximum length of time that may have elapsed since the store previously fetched data before fulfilling a fault issues a new fetch.\n- reset\nReturns the context to its base state."
  },
  {
    "title": "NSPersistentStoreUnsupportedRequestTypeError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nspersistentstoreunsupportedrequesttypeerror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSManagedObjectContextWillSaveNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontextwillsavenotification",
    "html": "Discussion\n\nThe notification object is the managed object context. There is no userInfo dictionary.\n\nSee Also\nManaging notifications\nNSManagedObjectContextObjectsDidChangeNotification\nA notification of changes made to managed objects associated with this context.\nNSManagedObjectContextDidSaveNotification\nA notification that the context completed a save.\nNSInsertedObjectsKey\nA key for the set of objects that were inserted into the context.\nNSUpdatedObjectsKey\nA key for the set of objects that were updated.\nNSDeletedObjectsKey\nA key for the set of objects that were marked for deletion during the previous event.\nNSRefreshedObjectsKey\nA key for the set of objects that were refreshed but were not dirtied in the scope of this context.\nNSInvalidatedObjectsKey\nA key for the set of objects that were invalidated.\nNSInvalidatedAllObjectsKey\nA key that specifies that all objects in the context have been invalidated."
  },
  {
    "title": "mergeChangesFromContextDidSaveNotification: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506606-mergechangesfromcontextdidsaveno",
    "html": "Parameters\nnotification\n\nAn instance of an NSManagedObjectContextDidSaveNotification notification posted by another context.\n\nDiscussion\n\nThis method refreshes any objects which have been updated in the other context, faults in any newly-inserted objects, and invokes deleteObject:: on those which have been deleted.\n\nYou can pass a NSManagedObjectContextDidSaveNotification notification posted by a managed object context on another thread, however you must not use the managed objects in the user info dictionary directly. For more details, see Concurrency with Core Data.\n\nSee Also\nManaging concurrency\nNSManagedObjectContextQueryGenerationKey\nConstant used to reference the query generation token.\n+ mergeChangesFromRemoteContextSave:intoContexts:\nHandles changes from other processes or from a serialized state.\nautomaticallyMergesChangesFromParent\nA Boolean value that indicates whether the context automatically merges changes saved to its persistent store coordinator or parent context.\nconcurrencyType\nThe concurrency type for the context.\nmergePolicy\nThe merge policy of the context.\nqueryGenerationToken\nReturns the token associated with the query generation currently in use by this context.\ntransactionAuthor\nThe author for the context that is used as an identifier in persistent history transactions.\n- setQueryGenerationFromToken:error:\nSets the query generation this context should use."
  },
  {
    "title": "NSStagedMigrationBackwardMigrationError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsstagedmigrationbackwardmigrationerror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSManagedObjectContextObjectsDidChangeNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontextobjectsdidchangenotification",
    "html": "Discussion\n\nThe notification is posted during processPendingChanges, after the changes have been processed, but before it is safe to call save: again (if you try, you will generate an infinite loop).\n\nThe notification object is the managed object context. The userInfo dictionary contains the following keys: NSInsertedObjectsKey, NSUpdatedObjectsKey, and NSDeletedObjectsKey.\n\nNote that this notification is posted only when managed objects are changed; it is not posted when managed objects are added to a context as the result of a fetch.\n\nSee Also\nManaging notifications\nNSManagedObjectContextDidSaveNotification\nA notification that the context completed a save.\nNSManagedObjectContextWillSaveNotification\nA notification that the context is about to save.\nNSInsertedObjectsKey\nA key for the set of objects that were inserted into the context.\nNSUpdatedObjectsKey\nA key for the set of objects that were updated.\nNSDeletedObjectsKey\nA key for the set of objects that were marked for deletion during the previous event.\nNSRefreshedObjectsKey\nA key for the set of objects that were refreshed but were not dirtied in the scope of this context.\nNSInvalidatedObjectsKey\nA key for the set of objects that were invalidated.\nNSInvalidatedAllObjectsKey\nA key that specifies that all objects in the context have been invalidated."
  },
  {
    "title": "NSValidationStringTooLongError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsvalidationstringtoolongerror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSValidationStringTooShortError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsvalidationstringtooshorterror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSValidationInvalidDateError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsvalidationinvaliddateerror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSValidationDateTooSoonError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsvalidationdatetoosoonerror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSValidationNumberTooSmallError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsvalidationnumbertoosmallerror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSValidationNumberTooLargeError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsvalidationnumbertoolargeerror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSFetchIndexElementType.binary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchindexelementtype/binary",
    "html": "See Also\nIndex Types\ncase rTree\nAn R-tree index type."
  },
  {
    "title": "NSValidationRelationshipDeniedDeleteError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsvalidationrelationshipdenieddeleteerror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSFetchIndexElementType.rTree | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchindexelementtype/rtree",
    "html": "See Also\nIndex Types\ncase binary\nA binary index type."
  },
  {
    "title": "NSValidationRelationshipLacksMinimumCountError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsvalidationrelationshiplacksminimumcounterror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSValidationRelationshipExceedsMaximumCountError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsvalidationrelationshipexceedsmaximumcounterror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSEntityMigrationPolicyError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsentitymigrationpolicyerror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSValidationMultipleErrorsError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsvalidationmultipleerrorserror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSInferredMappingModelError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsinferredmappingmodelerror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSCoreDataError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nscoredataerror",
    "html": "See Also\nError codes\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSManagedObjectConstraintValidationError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsmanagedobjectconstraintvalidationerror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSManagedObjectContextLockingError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsmanagedobjectcontextlockingerror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSManagedObjectExternalRelationshipError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsmanagedobjectexternalrelationshiperror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSManagedObjectMergeError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsmanagedobjectmergeerror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSMigrationConstraintViolationError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsmigrationconstraintviolationerror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSMigrationCancelledError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsmigrationcancellederror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSManagedObjectModelReferenceNotFoundError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsmanagedobjectmodelreferencenotfounderror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSManagedObjectReferentialIntegrityError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsmanagedobjectreferentialintegrityerror",
    "html": "Discussion\n\nThe store is accessible, but the object corresponding to the fault cannot be found.\n\nSee Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSManagedObjectValidationError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsmanagedobjectvalidationerror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSMigrationError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsmigrationerror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSMigrationManagerDestinationStoreError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsmigrationmanagerdestinationstoreerror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSPersistentStoreTypeMismatchError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nspersistentstoretypemismatcherror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSPersistentStoreOpenError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nspersistentstoreopenerror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSPersistentStoreSaveConflictsError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nspersistentstoresaveconflictserror",
    "html": "Discussion\n\nThe NSError object’s user info dictionary contains the key NSPersistentStoreSaveConflictsErrorKey.\n\nSee Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSPersistentStoreOperationError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nspersistentstoreoperationerror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSPersistentStoreSaveError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nspersistentstoresaveerror",
    "html": "Discussion\n\nThis code pertains to errors such as permissions problems.\n\nSee Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSSQLiteError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nssqliteerror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSValidationInvalidURIError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsvalidationinvalidurierror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSManagedObjectConstraintMergeError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsmanagedobjectconstraintmergeerror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSValidationStringPatternMatchingError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsvalidationstringpatternmatchingerror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short."
  },
  {
    "title": "NSValidationDateTooLateError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsvalidationdatetoolateerror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSPersistentStoreTimeoutError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nspersistentstoretimeouterror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSPersistentHistoryTokenExpiredError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nspersistenthistorytokenexpirederror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSMigrationManagerSourceStoreError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsmigrationmanagersourcestoreerror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSPersistentStoreInvalidTypeError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nspersistentstoreinvalidtypeerror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSMigrationMissingMappingModelError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsmigrationmissingmappingmodelerror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSMigrationMissingSourceModelError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nsmigrationmissingsourcemodelerror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSPersistentStoreIncompleteSaveError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nspersistentstoreincompletesaveerror",
    "html": "Discussion\n\nThe stores or objects that failed are in the corresponding user info dictionary of the NSError object.\n\nSee Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSPersistentStoreCoordinatorLockingError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nspersistentstorecoordinatorlockingerror",
    "html": "See Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSPersistentStoreIncompatibleSchemaError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes/nspersistentstoreincompatibleschemaerror",
    "html": "Discussion\n\nThis code pertains to database level errors such as a missing table.\n\nSee Also\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "insertNewObjectForEntityForName:inManagedObjectContext: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription/1425093-insertnewobjectforentityforname",
    "html": "Parameters\nentityName\n\nThe name of an entity.\n\ncontext\n\nThe managed object context to use.\n\nReturn Value\n\nA new, autoreleased, fully configured instance of the class for the entity named entityName. The instance has its entity description set and is inserted it into context.\n\nDiscussion\n\nThis method makes it easy for you to create instances of a given entity without worrying about the details of managed object creation. The method is conceptually similar to the following code example.\n\nNSManagedObjectModel *managedObjectModel =\n        [[context persistentStoreCoordinator] managedObjectModel];\nNSEntityDescription *entity =\n        [[managedObjectModel entitiesByName] objectForKey:entityName];\nNSManagedObject *newObject = [[NSManagedObject alloc]\n            initWithEntity:entity insertIntoManagedObjectContext:context];\nreturn newObject;\n\nSee Also\nRelated Documentation\n- initWithEntity:insertIntoManagedObjectContext:\nInitializes a managed object from an entity description and inserts it into the specified managed object context."
  },
  {
    "title": "willAccessValueForKey: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1507001-willaccessvalueforkey",
    "html": "Parameters\nkey\n\nThe name of one of the receiver's properties.\n\nDiscussion\n\nSee didAccessValueForKey: for more details. You can invoke this method with the key value of nil to ensure that a fault has been fired, as illustrated by the following example.\n\n[aManagedObject willAccessValueForKey:nil];\n\nSee Also\nSupporting Key-Value Observing\nautomaticallyNotifiesObserversForKey:\nReturns a Boolean value that indicates whether the receiver provides automatic support for key-value observing change notifications for the given key.\n- didAccessValueForKey:\nProvides support for key-value observing access notification.\n- observationInfo\nReturns the observation info of the managed object.\n- setObservationInfo:\nSets the observation info of the managed object.\n- didChangeValueForKey:\nProvides an opportunity to respond when a value of a given property has changed.\n- didChangeValueForKey:withSetMutation:usingObjects:\nProvides an opportunity to respond when a change was made to a specified to-many relationship.\n- willChangeValueForKey:\nProvides an opportunity to respond when a value of a given property is about to change.\n- willChangeValueForKey:withSetMutation:usingObjects:\nProvides an opportunity to respond when a change is about to be made to a specified to-many relationship."
  },
  {
    "title": "NSBatchDeleteRequestResultType.resultTypeStatusOnly | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchdeleterequestresulttype/resulttypestatusonly",
    "html": "See Also\nResult Types\ncase resultTypeCount\nReturns the number of managed objects the request deletes.\ncase resultTypeObjectIDs\nReturns an array of the deleted managed objects’ identifiers."
  },
  {
    "title": "assignObject:toPersistentStore: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506436-assignobject",
    "html": "Parameters\nobject\n\nA managed object.\n\nstore\n\nA persistent store.\n\nDiscussion\n\nYou can obtain a store from the persistent store coordinator, using for example persistentStoreForURL:.\n\nSpecial Considerations\n\nIt is only necessary to use this method if the receiver’s persistent store coordinator manages multiple writable stores that have object’s entity in their configuration. Maintaining configurations in the managed object model can eliminate the need for invoking this method directly in many situations. If the receiver’s persistent store coordinator manages only a single writable store, or if only one store has object’s entity in its model, object will automatically be assigned to that store.\n\nSee Also\nHandling managed objects\nshouldDeleteInaccessibleFaults\nA Boolean value that determines whether the context turns inaccessible faults into deleted objects.\ninsertedObjects\nThe set of objects that have been inserted into the context but not yet saved in a persistent store.\nupdatedObjects\nThe set of objects registered with the context that have uncommitted changes.\ndeletedObjects\nThe set of objects that will be removed from their persistent store during the next save operation.\n- shouldHandleInaccessibleFault:forObjectID:triggeredByProperty:\nCreates a log of the inaccessible fault.\n- insertObject:\nRegisters an object to be inserted in the context’s persistent store the next time changes are saved.\n- deleteObject:\nSpecifies an object that should be removed from its persistent store when changes are committed.\n- obtainPermanentIDsForObjects:error:\nConverts to permanent IDs the object IDs of the objects in a given array.\n- detectConflictsForObject:\nMarks an object for conflict detection.\n- refreshObject:mergeChanges:\nUpdates the persistent properties of a managed object to use the latest values from the persistent store.\n- processPendingChanges\nForces the context to process changes to the object graph.\n- observeValueForKeyPath:ofObject:change:context:\nAllows a context that has registered as an observer of a value to be notified of a change to that value.\nRelated Documentation\npersistentStoreCoordinator\nThe persistent store coordinator of the context."
  },
  {
    "title": "didAccessValueForKey: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506865-didaccessvalueforkey",
    "html": "Parameters\nkey\n\nThe name of one of the receiver's properties.\n\nDiscussion\n\nTogether with willAccessValueForKey:, this method is used to fire faults, to maintain inverse relationships, and so on. Each read access must be wrapped in this method pair (in the same way that each write access must be wrapped in the willChangeValueForKey:/didChangeValueForKey: method pair). In the default implementation of NSManagedObject these methods are invoked for you automatically. If, say, you create a custom subclass that uses explicit instance variables, you must invoke them yourself, as in the following example.\n\n- (NSString *)firstName\n{\n    [self willAccessValueForKey:@\"firstName\"];\n    NSString *rtn = firstName;\n    [self didAccessValueForKey:@\"firstName\"];\n    return rtn;\n}\n\nSee Also\nSupporting Key-Value Observing\nautomaticallyNotifiesObserversForKey:\nReturns a Boolean value that indicates whether the receiver provides automatic support for key-value observing change notifications for the given key.\n- observationInfo\nReturns the observation info of the managed object.\n- setObservationInfo:\nSets the observation info of the managed object.\n- willAccessValueForKey:\nProvides support for key-value observing access notification.\n- didChangeValueForKey:\nProvides an opportunity to respond when a value of a given property has changed.\n- didChangeValueForKey:withSetMutation:usingObjects:\nProvides an opportunity to respond when a change was made to a specified to-many relationship.\n- willChangeValueForKey:\nProvides an opportunity to respond when a value of a given property is about to change.\n- willChangeValueForKey:withSetMutation:usingObjects:\nProvides an opportunity to respond when a change is about to be made to a specified to-many relationship."
  },
  {
    "title": "mergedModel(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectmodel/1506704-mergedmodel",
    "html": "Parameters\nbundles\n\nAn array of instances of NSBundle to search. If you specify nil, then the main bundle is searched.\n\nReturn Value\n\nA model created by merging all the models found in bundles.\n\nSee Also\nCreating a managed object model\ninit?(contentsOf: URL)\nInitializes the managed object model using the model file at the specified URL.\ninit()\nInitializes an empty managed object model.\nclass func mergedModel(from: [Bundle]?, forStoreMetadata: [String : Any]) -> NSManagedObjectModel?\nReturns a merged model from a specified array for the version information in provided metadata.\ninit?(byMerging: [NSManagedObjectModel]?)\nCreates a single model from an array of existing models.\ninit?(byMerging: [NSManagedObjectModel], forStoreMetadata: [String : Any])\nReturns, for the version information in given metadata, a model merged from a given array of models."
  },
  {
    "title": "refresh | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nssnapshoteventtype/1506602-refresh",
    "html": "See Also\nEvent Types\nstatic var undoInsertion: NSSnapshotEventType\nSpecifies a change due to undo from insertion.\nstatic var undoDeletion: NSSnapshotEventType\nSpecifies a change due to undo from deletion.\nstatic var undoUpdate: NSSnapshotEventType\nSpecifies a change due to a property-level undo.\nstatic var rollback: NSSnapshotEventType\nSpecifies a change due to the managed object context being rolled back.\nstatic var mergePolicy: NSSnapshotEventType\nSpecifies a change due to conflict resolution during a save operation."
  },
  {
    "title": "deleted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506681-deleted",
    "html": "Discussion\n\nYES if Core Data will ask the persistent store to delete the object during the next save operation, otherwise NO. It may return NO at other times, particularly after the object has been deleted. The immediacy with which it will stop returning YES depends on where the object is in the process of being deleted.\n\nIf the receiver is a fault, accessing this property does not cause it to fire.\n\nSee Also\nGetting State Information\nmanagedObjectContext\nThe managed object context with which the managed object is registered.\nhasChanges\nA Boolean value that indicates whether the managed object has been inserted, has been deleted, or has unsaved changes.\ninserted\nA Boolean value that indicates whether the managed object has been inserted in a managed object context.\nupdated\nA Boolean value that indicates whether the managed object has unsaved changes.\nfault\nA Boolean value that indicates whether the managed object is a fault.\nfaultingState\nThe faulting state of the managed object.\n- hasFaultForRelationshipNamed:\nReturns a Boolean value that indicates whether the relationship for a given key is a fault.\nhasPersistentChangedValues\nA Boolean value that indicates whether the managed object has persistent changes.\nRelated Documentation\ndeletedObjects\nThe set of objects that will be removed from their persistent store during the next save operation.\nNSManagedObjectContextObjectsDidChangeNotification\nA notification of changes made to managed objects associated with this context."
  },
  {
    "title": "hasFaultForRelationshipNamed: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506973-hasfaultforrelationshipnamed",
    "html": "Parameters\nkey\n\nThe name of one of the receiver’s relationships.\n\nReturn Value\n\nYES if the relationship for key is a fault; otherwise, NO.\n\nDiscussion\n\nIf the specified relationship is a fault, calling this method does not result in the fault firing.\n\nSee Also\nGetting State Information\nmanagedObjectContext\nThe managed object context with which the managed object is registered.\nhasChanges\nA Boolean value that indicates whether the managed object has been inserted, has been deleted, or has unsaved changes.\ninserted\nA Boolean value that indicates whether the managed object has been inserted in a managed object context.\nupdated\nA Boolean value that indicates whether the managed object has unsaved changes.\ndeleted\nA Boolean value that indicates whether the managed object will be deleted during the next save.\nfault\nA Boolean value that indicates whether the managed object is a fault.\nfaultingState\nThe faulting state of the managed object.\nhasPersistentChangedValues\nA Boolean value that indicates whether the managed object has persistent changes."
  },
  {
    "title": "setFetchRequestTemplate(_:forName:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectmodel/1506695-setfetchrequesttemplate",
    "html": "Parameters\nfetchRequest\n\nA fetch request, typically containing predicates with variables for substitution.\n\nname\n\nA string that specifies the name of the fetch request template.\n\nDiscussion\n\nFor more details on using this method, see Creating Predicates.\n\nSpecial Considerations\n\nThis method raises an exception if the receiver has been used by an object graph manager.\n\nSee Also\nManipulating fetch request templates\nvar fetchRequestTemplatesByName: [String : NSFetchRequest<NSFetchRequestResult>]\nA dictionary of the receiver’s fetch request templates, keyed by name.\nfunc fetchRequestTemplate(forName: String) -> NSFetchRequest<NSFetchRequestResult>?\nReturns the fetch request with a specified name.\nfunc fetchRequestFromTemplate(withName: String, substitutionVariables: [String : Any]) -> NSFetchRequest<NSFetchRequestResult>?\nReturns a copy of the fetch request template with the variables substituted by values from the substitutions dictionary."
  },
  {
    "title": "fetchRequestTemplate(forName:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectmodel/1506369-fetchrequesttemplate",
    "html": "Parameters\nname\n\nA string containing the name of a fetch request template.\n\nReturn Value\n\nThe fetch request named name.\n\nDiscussion\n\nIf the template contains substitution variables, you should instead use fetchRequestFromTemplate(withName:substitutionVariables:) to create a new fetch request.\n\nSee Also\nManipulating fetch request templates\nvar fetchRequestTemplatesByName: [String : NSFetchRequest<NSFetchRequestResult>]\nA dictionary of the receiver’s fetch request templates, keyed by name.\nfunc fetchRequestFromTemplate(withName: String, substitutionVariables: [String : Any]) -> NSFetchRequest<NSFetchRequestResult>?\nReturns a copy of the fetch request template with the variables substituted by values from the substitutions dictionary.\nfunc setFetchRequestTemplate(NSFetchRequest<NSFetchRequestResult>?, forName: String)\nAssociates the specified fetch request with the receiver using the given name."
  },
  {
    "title": "init(byMerging:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectmodel/1506450-init",
    "html": "Parameters\nmodels\n\nAn array of instances of NSManagedObjectModel.\n\nReturn Value\n\nA single model made by combining the models in models.\n\nDiscussion\n\nYou use this method to combine multiple models (typically from different frameworks) into one.\n\nSee Also\nCreating a managed object model\ninit?(contentsOf: URL)\nInitializes the managed object model using the model file at the specified URL.\ninit()\nInitializes an empty managed object model.\nclass func mergedModel(from: [Bundle]?) -> NSManagedObjectModel?\nReturns a model created by merging all the models found in given bundles.\nclass func mergedModel(from: [Bundle]?, forStoreMetadata: [String : Any]) -> NSManagedObjectModel?\nReturns a merged model from a specified array for the version information in provided metadata.\ninit?(byMerging: [NSManagedObjectModel], forStoreMetadata: [String : Any])\nReturns, for the version information in given metadata, a model merged from a given array of models."
  },
  {
    "title": "configurations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectmodel/1506804-configurations",
    "html": "See Also\nManaging entities and configurations\nvar entities: [NSEntityDescription]\nThe entities in the model.\nvar entitiesByName: [String : NSEntityDescription]\nThe entities of the model, keyed by name.\nfunc entities(forConfigurationName: String?) -> [NSEntityDescription]?\nReturns the entities of the model for a specified configuration.\nfunc setEntities([NSEntityDescription], forConfigurationName: String)\nAssociates the specified entities with the model using the given configuration name."
  },
  {
    "title": "init(model:versionChecksum:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectmodelreference/4172797-init",
    "html": "Parameters\nmodel\n\nThe managed object model.\n\nversionChecksum\n\nThe checksum of the object model’s version.\n\nDiscussion\n\nTo determine an object model’s version checksum, use its versionChecksum property. Alternatively, you can find the checksum in the versioned model’s VersionInfo.plist file or in Xcode’s build log.\n\nSee Also\nCreating a reference\ninit(fileURL: URL, versionChecksum: String)\nCreates an object model reference for the model at the specified file URL.\ninit(name: String, in: Bundle?, versionChecksum: String)\nCreates an object model reference for the named model in the specified bundle.\ninit(entityVersionHashes: [AnyHashable : Any], in: Bundle?, versionChecksum: String)\nCreates an object model reference with the entities corresponding to the specified entity version hashes."
  },
  {
    "title": "init(entityVersionHashes:in:versionChecksum:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectmodelreference/4172795-init",
    "html": "Parameters\nversionHash\n\nThe dictionary of entity names and their corresponding version hashes.\n\nbundle\n\nThe bundle to search.\n\nversionChecksum\n\nThe checksum of the object model’s version.\n\nDiscussion\n\nTo determine an object model’s version checksum, use its versionChecksum property. Alternatively, you can find the checksum in the versioned model’s VersionInfo.plist file or in Xcode’s build log.\n\nSee Also\nCreating a reference\ninit(model: NSManagedObjectModel, versionChecksum: String)\nCreates an object model reference for the specified model.\ninit(fileURL: URL, versionChecksum: String)\nCreates an object model reference for the model at the specified file URL.\ninit(name: String, in: Bundle?, versionChecksum: String)\nCreates an object model reference for the named model in the specified bundle."
  },
  {
    "title": "property | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchindexelementdescription/2887049-property",
    "html": "Discussion\n\nThis property may also be an NSExpressionDescription that expresses a function.\n\nSee Also\nInspecting an Index Element Description\nvar collationType: NSFetchIndexElementType\nThe type of collation that the index element uses, either binary or R-tree.\nvar indexDescription: NSFetchIndexDescription?\nvar isAscending: Bool\nA Boolean value that controls whether an index that supports direction is an ascending or descending index.\nvar propertyName: String?\nThe specified name in the property description."
  },
  {
    "title": "localizationDictionary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectmodel/1506846-localizationdictionary",
    "html": "Discussion\n\nTable 1 describes the key and value pattern for the localization dictionary.\n\nTable 1 Key and value pattern for the localization dictionary.\n\nKey\n\n\t\n\nValue\n\n\t\n\nNote\n\n\n\n\n\"Entity/NonLocalizedEntityName\"\n\n\t\n\n\"LocalizedEntityName\"\n\n\t\n\n\n\n\n\"Property/NonLocalizedPropertyName/Entity/EntityName\"\n\n\t\n\n\"LocalizedPropertyName\"\n\n\t\n\n(1)\n\n\n\n\n\"Property/NonLocalizedPropertyName\"\n\n\t\n\n\"LocalizedPropertyName\"\n\n\t\n\n\n\n\n\"ErrorString/NonLocalizedErrorString\"\n\n\t\n\n\"LocalizedErrorString\"\n\n\t\n\n(1) For properties in different entities with the same non-localized name but that should have different localized names.\n\nSpecial Considerations\n\nIn OS X v10.4, localizationDictionary may return nil until Core Data lazily loads the dictionary for its own purposes (for example, reporting a localized error)."
  },
  {
    "title": "collationType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchindexelementdescription/2887048-collationtype",
    "html": "See Also\nInspecting an Index Element Description\nvar indexDescription: NSFetchIndexDescription?\nvar isAscending: Bool\nA Boolean value that controls whether an index that supports direction is an ascending or descending index.\nvar property: NSPropertyDescription?\nA property description.\nvar propertyName: String?\nThe specified name in the property description."
  },
  {
    "title": "isAscending | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchindexelementdescription/2887051-isascending",
    "html": "See Also\nInspecting an Index Element Description\nvar collationType: NSFetchIndexElementType\nThe type of collation that the index element uses, either binary or R-tree.\nvar indexDescription: NSFetchIndexDescription?\nvar property: NSPropertyDescription?\nA property description.\nvar propertyName: String?\nThe specified name in the property description."
  },
  {
    "title": "indexDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchindexelementdescription/2887047-indexdescription",
    "html": "See Also\nInspecting an Index Element Description\nvar collationType: NSFetchIndexElementType\nThe type of collation that the index element uses, either binary or R-tree.\nvar isAscending: Bool\nA Boolean value that controls whether an index that supports direction is an ascending or descending index.\nvar property: NSPropertyDescription?\nA property description.\nvar propertyName: String?\nThe specified name in the property description."
  },
  {
    "title": "isConfiguration(withName:compatibleWithStoreMetadata:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectmodel/1506940-isconfiguration",
    "html": "Parameters\nconfiguration\n\nThe name of a configuration in the receiver. Pass nil to specify no configuration.\n\nmetadata\n\nMetadata for a persistent store.\n\nReturn Value\n\ntrue if the configuration in the receiver specified by configuration is compatible with the store metadata given by metadata, otherwise false.\n\nDiscussion\n\nThis method compares the version information in the store metadata with the entity versions of a given configuration. For information on specific differences, use entityVersionHashesByName and perform an entity-by-entity comparison.\n\nSee Also\nVersioning and migrating entities\nvar versionChecksum: String\nThe Base64-encoded 128-bit model version hash.\nvar versionIdentifiers: Set<AnyHashable>\nThe set of developer-defined version identifiers for the object model.\nvar entityVersionHashesByName: [String : Data]\nThe dictionary of the model’s entity names and their corresponding version hashes."
  },
  {
    "title": "versionIdentifiers | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectmodel/1506268-versionidentifiers",
    "html": "Discussion\n\nMerged models return the combined collection of identifiers. The Core Data framework does not assign a default identifier to object models, nor does it depend on this value at runtime. For models you create in Xcode, set this value in the model inspector.\n\nUse this value when debugging to help determine the models that Core Data merges to create the merged model.\n\nSee Also\nVersioning and migrating entities\nvar versionChecksum: String\nThe Base64-encoded 128-bit model version hash.\nvar entityVersionHashesByName: [String : Data]\nThe dictionary of the model’s entity names and their corresponding version hashes.\nfunc isConfiguration(withName: String?, compatibleWithStoreMetadata: [String : Any]) -> Bool\nReturns a Boolean value that indicates whether a given configuration in the model is compatible with given metadata from a persistent store."
  },
  {
    "title": "NSFetchIndexElementType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchindexelementtype",
    "html": "Topics\nIndex Types\ncase binary\nA binary index type.\ncase rTree\nAn R-tree index type.\nRelationships\nConforms To\nSendable\nSee Also\nWorking with indexes\nclass NSFetchIndexDescription\nThe description of the index.\nclass NSFetchIndexElementDescription\nDescription of an Index Element"
  },
  {
    "title": "name | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchindexdescription/2887056-name",
    "html": "See Also\nInspecting an Index Description\nvar elements: [NSFetchIndexElementDescription]\nAn array of fetch index element descriptions.\nvar entity: NSEntityDescription?\nThe entity description for the fetch index description.\nvar partialIndexPredicate: NSPredicate?\nA predicate that selects rows for indexing, if the index is a partial index."
  },
  {
    "title": "partialIndexPredicate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchindexdescription/2887058-partialindexpredicate",
    "html": "See Also\nInspecting an Index Description\nvar elements: [NSFetchIndexElementDescription]\nAn array of fetch index element descriptions.\nvar entity: NSEntityDescription?\nThe entity description for the fetch index description.\nvar name: String\nThe name of the fetch index description."
  },
  {
    "title": "migrateStore(from:sourceType:options:with:toDestinationURL:destinationType:destinationOptions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationmanager/1417584-migratestore",
    "html": "Deprecated\n\nUse migrateStore(from:type:options:mapping:to:type:options:) instead.\n\nParameters\nsourceURL\n\nThe location of an existing persistent store. A store must exist at this URL.\n\nsStoreType\n\nThe type of store at sourceURL (see NSPersistentStoreCoordinator for possible values).\n\nsOptions\n\nA dictionary of options for the source (see NSPersistentStoreCoordinator for possible values).\n\nmappings\n\nThe mapping model to use to effect the migration.\n\ndURL\n\nThe location of the destination store.\n\ndStoreType\n\nThe type of store at dURL (see NSPersistentStoreCoordinator for possible values).\n\ndOptions\n\nA dictionary of options for the destination (see NSPersistentStoreCoordinator for possible values).\n\nerror\n\nIf an error occurs during the validation or migration, upon return contains an NSError object that describes the problem.\n\nReturn Value\n\ntrue if the migration proceeds without errors during the compatibility checks or migration, otherwise false.\n\nDiscussion\n\nThis method performs compatibility checks on the source and destination models and the mapping model.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSpecial Considerations\n\nIf a store does not exist at the destination URL (dURL), one is created; otherwise, the migration appends to the existing store.\n\nSee Also\nRelated Documentation\nfunc cancelMigrationWithError(Error)\nCancels the migration with a given error."
  },
  {
    "title": "NSPersistentHistoryResultType.objectIDs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistoryresulttype/objectids",
    "html": "See Also\nResult Types\ncase statusOnly\nThe status of the persistent history change request.\ncase count\nThe number of persistent history changes since the requested date, token, or transaction.\ncase transactionsAndChanges\nThe persistent history transactions and changes since the requested date, token, or transaction.\ncase transactionsOnly\nThe persistent history transactions since the requested date, token, or transaction.\ncase changesOnly\nThe persistent history changes since the requested date, token, or transaction."
  },
  {
    "title": "NSPersistentHistoryResultType.count | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistoryresulttype/count",
    "html": "See Also\nResult Types\ncase statusOnly\nThe status of the persistent history change request.\ncase objectIDs\nThe identifiers of managed objects changed since the requested date, token, or transaction.\ncase transactionsAndChanges\nThe persistent history transactions and changes since the requested date, token, or transaction.\ncase transactionsOnly\nThe persistent history transactions since the requested date, token, or transaction.\ncase changesOnly\nThe persistent history changes since the requested date, token, or transaction."
  },
  {
    "title": "NSPersistentHistoryResultType.statusOnly | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistoryresulttype/statusonly",
    "html": "See Also\nResult Types\ncase count\nThe number of persistent history changes since the requested date, token, or transaction.\ncase objectIDs\nThe identifiers of managed objects changed since the requested date, token, or transaction.\ncase transactionsAndChanges\nThe persistent history transactions and changes since the requested date, token, or transaction.\ncase transactionsOnly\nThe persistent history transactions since the requested date, token, or transaction.\ncase changesOnly\nThe persistent history changes since the requested date, token, or transaction."
  },
  {
    "title": "Validation error codes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/1535452-validation_error_codes",
    "html": "Topics\nError codes\nNSCoreDataError\nAn error code that indicates a nonspecific Core Data error.\nNSEntityMigrationPolicyError\nAn error code that indicates a migration failure during processing of an entity migration policy.\nNSExternalRecordImportError\nError code to denote a general error encountered while importing external records.\nNSInferredMappingModelError\nError code to denote a problem with the creation of an inferred mapping model.\nNSManagedObjectConstraintMergeError\nError code to denote a problem with the merging of instances of a managed object.\nNSManagedObjectConstraintValidationError\nError code to denote a problem with the validation of a managed object.\nNSManagedObjectContextLockingError\nError code to denote an inability to acquire a lock in a managed object context.\nNSManagedObjectExternalRelationshipError\nError code to denote that an object being saved has a relationship containing an object from another store.\nNSManagedObjectMergeError\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nNSManagedObjectModelReferenceNotFoundError\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nNSManagedObjectReferentialIntegrityError\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nNSManagedObjectValidationError\nError code to denote a generic validation error.\nNSMigrationCancelledError\nError code to denote that migration failed due to manual cancellation.\nNSMigrationConstraintViolationError\nError code to denote a problem with the validation of a managed object during a migration.\nNSMigrationError\nError code to denote a general migration error.\nNSMigrationManagerDestinationStoreError\nError code to denote that migration failed due to a problem with the destination data store.\nNSMigrationManagerSourceStoreError\nError code to denote that migration failed due to a problem with the source data store.\nNSMigrationMissingMappingModelError\nError code to denote that migration failed due to a missing mapping model.\nNSMigrationMissingSourceModelError\nError code to denote that migration failed due to a missing source data model.\nNSPersistentHistoryTokenExpiredError\nError code to denote that the persistent history token has expired.\nNSPersistentStoreCoordinatorLockingError\nError code to denote an inability to acquire a lock in a persistent store.\nNSPersistentStoreIncompatibleSchemaError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreIncompatibleVersionHashError\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nNSPersistentStoreIncompleteSaveError\nError code to denote that one or more of the stores returned an error during a save operations.\nNSPersistentStoreInvalidTypeError\nError code to denote an unknown persistent store type/format/version.\nNSPersistentStoreOpenError\nError code to denote an error occurred while attempting to open a persistent store.\nNSPersistentStoreOperationError\nError code to denote that a persistent store operation failed.\nNSPersistentStoreSaveConflictsError\nError code to denote that an unresolved merge conflict was encountered during a save. .\nNSPersistentStoreSaveError\nError code to denote that a persistent store returned an error for a save operation.\nNSPersistentStoreTimeoutError\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nNSPersistentStoreTypeMismatchError\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nNSPersistentStoreUnsupportedRequestTypeError\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nNSSQLiteError\nError code to denote a general SQLite error.\nNSStagedMigrationBackwardMigrationError\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nNSStagedMigrationFrameworkVersionMismatchError\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nNSValidationInvalidURIError\nError code to denote a problem with the validation of a URI property.\nNSValidationMultipleErrorsError\nError code to denote an error containing multiple validation errors.\nNSValidationMissingMandatoryPropertyError\nError code for a non-optional property with a nil value.\nNSValidationRelationshipLacksMinimumCountError\nError code to denote a to-many relationship with too few destination objects.\nNSValidationRelationshipExceedsMaximumCountError\nError code to denote a bounded to-many relationship with too many destination objects.\nNSValidationRelationshipDeniedDeleteError\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nNSValidationNumberTooLargeError\nError code to denote some numerical value is too large.\nNSValidationNumberTooSmallError\nError code to denote some numerical value is too small.\nNSValidationDateTooLateError\nError code to denote some date value is too late.\nNSValidationDateTooSoonError\nError code to denote some date value is too soon.\nNSValidationInvalidDateError\nError code to denote some date value fails to match date pattern.\nNSValidationStringTooLongError\nError code to denote some string value is too long.\nNSValidationStringTooShortError\nError code to denote some string value is too short.\nNSValidationStringPatternMatchingError\nError code to denote some string value fails to match some pattern.\nSee Also\nManaging Data Validation\n- validateValue:forKey:error:\nValidates a property value for a given key.\n- validateForDelete:\nDetermines whether the managed object can be deleted in its current state.\n- validateForInsert:\nDetermines whether the managed object can be inserted in its current state.\n- validateForUpdate:\nDetermines whether the managed object's current state is valid.\nNSValidationKeyErrorKey\nThe error key for the attribute that failed to validate.\nNSValidationObjectErrorKey\nThe error key for the object that failed to validate.\nNSValidationPredicateErrorKey\nThe error key for the predicate that failed to validate.\nNSValidationValueErrorKey\nThe error key for the value that failed to validate."
  },
  {
    "title": "NSPersistentHistoryResultType.transactionsOnly | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistoryresulttype/transactionsonly",
    "html": "See Also\nResult Types\ncase statusOnly\nThe status of the persistent history change request.\ncase count\nThe number of persistent history changes since the requested date, token, or transaction.\ncase objectIDs\nThe identifiers of managed objects changed since the requested date, token, or transaction.\ncase transactionsAndChanges\nThe persistent history transactions and changes since the requested date, token, or transaction.\ncase changesOnly\nThe persistent history changes since the requested date, token, or transaction."
  },
  {
    "title": "committedValuesForKeys: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506771-committedvaluesforkeys",
    "html": "Parameters\nkeys\n\nAn array containing names of properties of the receiver, or nil.\n\nReturn Value\n\nA dictionary containing the last fetched or saved values of the receiver for the properties specified by keys.\n\nDiscussion\n\nnil values are represented by an instance of NSNull.\n\nThis method only reports values of properties that are defined as persistent properties of the receiver, not values of transient properties or of custom instance variables.\n\nYou can invoke this method with the keys value of nil to retrieve committed values for all the receiver’s properties, as illustrated by the following example.\n\nNSDictionary *allCommittedValues =\n        [aManagedObject committedValuesForKeys:nil];\n\n\nIt is more efficient to use nil than to pass an array of all the property keys.\n\nSee Also\nManaging Change Events\ncontextShouldIgnoreUnmodeledPropertyChanges\nA Boolean value that indicates whether to mark instances of the class as having changes when an unmodeled property changes.\n- awakeFromFetch\nProvides an opportunity to add code into the life cycle of the managed object when fufilling it from a fault.\n- awakeFromInsert\nProvides an opportunity to add code into the life cycle of the managed object when initially creating it.\n- awakeFromSnapshotEvents:\nProvides an opportunity to add code into the life cycle of the managed object when fulfilling it from a snapshot.\n- changedValues\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\n- changedValuesForCurrentEvent\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\n- prepareForDeletion\nProvides an opportunity to add code into the life cycle of the managed object before deleting it.\n- willSave\nProvides an opportunity to add code into the life cycle of the managed object before saving it.\n- didSave\nProvides an opportunity to add code into the life cycle of the managed object after the managed object’s context completes a save operation.\n- willTurnIntoFault\nProvides an opportunity to add code into the life cycle of the managed object before converting it to a fault.\n- didTurnIntoFault\nProvides an opportunity to add code into the life cycle of the managed object after converting it to a fault.\n+ fetchRequest\nReturns an initialized fetch request with the entity this subclass represents."
  },
  {
    "title": "valueForKey: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506613-valueforkey",
    "html": "Parameters\nkey\n\nThe name of one of the receiver's properties.\n\nReturn Value\n\nThe value of the property specified by key.\n\nDiscussion\n\nIf key is not a property defined by the model, the method raises an exception. This method is overridden by NSManagedObject to access the managed object’s generic dictionary storage unless the receiver’s class explicitly provides key-value coding compliant accessor methods for key.\n\nImportant\n\nYou must not override this method.\n\nSee Also\nSupporting Key-Value Coding\n- setValue:forKey:\nSets the specified property of the managed object to the specified value.\nmutableSetValueForKey:\nReturns a mutable set that provides read-write access to the unordered to-many relationship specified by a given key.\n- primitiveValueForKey:\nReturns the value for the specified property from the managed object’s private internal storage .\n- setPrimitiveValue:forKey:\nSets the value of a given property in the managed object's private internal storage.\n- objectIDsForRelationshipNamed:\nReturns the object IDs for all of the managed objects that are in the named relationship.\nRelated Documentation\n- setObservationInfo:\nSets the observation info of the managed object."
  },
  {
    "title": "awakeFromSnapshotEvents: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506861-awakefromsnapshotevents",
    "html": "Parameters\nflags\n\nA bit mask of didChangeValueForKey: constants to denote the event or events that led to the method being invoked.\n\nFor possible values, see NSSnapshotEventType.\n\nDiscussion\n\nYou typically use this method to compute derived values or to recreate transient relationships from the receiver’s persistent properties.\n\nIf you want to set attribute values and need to avoid emitting key-value observation change notifications, you should use primitive accessor methods (either setPrimitiveValue:forKey: or—better—the appropriate custom primitive accessors). This ensures that the new values are treated as baseline values rather than being recorded as undoable changes for the properties in question.\n\nImportant\n\nSubclasses must invoke super’s implementation before performing their own initialization.\n\nSee Also\nManaging Change Events\ncontextShouldIgnoreUnmodeledPropertyChanges\nA Boolean value that indicates whether to mark instances of the class as having changes when an unmodeled property changes.\n- awakeFromFetch\nProvides an opportunity to add code into the life cycle of the managed object when fufilling it from a fault.\n- awakeFromInsert\nProvides an opportunity to add code into the life cycle of the managed object when initially creating it.\n- changedValues\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\n- changedValuesForCurrentEvent\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\n- committedValuesForKeys:\nReturns a dictionary of the most recent fetched or saved values of the managed object for the properties of the specified keys.\n- prepareForDeletion\nProvides an opportunity to add code into the life cycle of the managed object before deleting it.\n- willSave\nProvides an opportunity to add code into the life cycle of the managed object before saving it.\n- didSave\nProvides an opportunity to add code into the life cycle of the managed object after the managed object’s context completes a save operation.\n- willTurnIntoFault\nProvides an opportunity to add code into the life cycle of the managed object before converting it to a fault.\n- didTurnIntoFault\nProvides an opportunity to add code into the life cycle of the managed object after converting it to a fault.\n+ fetchRequest\nReturns an initialized fetch request with the entity this subclass represents."
  },
  {
    "title": "objectIDsForRelationshipNamed: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506201-objectidsforrelationshipnamed",
    "html": "See Also\nSupporting Key-Value Coding\n- valueForKey:\nReturns the value for the property specified by key.\n- setValue:forKey:\nSets the specified property of the managed object to the specified value.\nmutableSetValueForKey:\nReturns a mutable set that provides read-write access to the unordered to-many relationship specified by a given key.\n- primitiveValueForKey:\nReturns the value for the specified property from the managed object’s private internal storage .\n- setPrimitiveValue:forKey:\nSets the value of a given property in the managed object's private internal storage."
  },
  {
    "title": "primitiveValueForKey: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506728-primitivevalueforkey",
    "html": "Parameters\nkey\n\nThe name of one of the receiver's properties.\n\nReturn Value\n\nThe value of the property specified by key. Returns nil if no value has been set.\n\nDiscussion\n\nThis method does not invoke the access notification methods (willAccessValueForKey: and didAccessValueForKey:). This method is used primarily by subclasses that implement custom accessor methods that need direct access to the receiver’s private storage.\n\nSpecial Considerations\n\nSubclasses should not override this method.\n\nThe following points also apply:\n\nPrimitive accessor methods are only supported on modeled properties. If you invoke a primitive accessor on an unmodeled property, it will instead operate upon a random modeled property. (The debug libraries and frameworks (available from Apple Developer Website) have assertions to test for passing unmodeled keys to these methods.)\n\nYou are strongly encouraged to use the dynamically-generated accessors rather than using this method directly (for example, primitiveName: instead of primitiveValueForKey:@\"name\"). The dynamic accessors are much more efficient, and allow for compile-time checking.\n\nSee Also\nSupporting Key-Value Coding\n- valueForKey:\nReturns the value for the property specified by key.\n- setValue:forKey:\nSets the specified property of the managed object to the specified value.\nmutableSetValueForKey:\nReturns a mutable set that provides read-write access to the unordered to-many relationship specified by a given key.\n- setPrimitiveValue:forKey:\nSets the value of a given property in the managed object's private internal storage.\n- objectIDsForRelationshipNamed:\nReturns the object IDs for all of the managed objects that are in the named relationship.\nRelated Documentation\n- setObservationInfo:\nSets the observation info of the managed object."
  },
  {
    "title": "didChangeValueForKey:withSetMutation:usingObjects: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506936-didchangevalueforkey",
    "html": "Parameters\ninKey\n\nThe name of a property that is a to-many relationship.\n\ninMutationKind\n\nThe type of change that was made.\n\ninObjects\n\nThe objects that were involved in the change (see NSKeyValueSetMutationKind).\n\nDiscussion\n\nFor more details, see Key-Value Observing Programming Guide.\n\nYou must not override this method.\n\nSee Also\nSupporting Key-Value Observing\nautomaticallyNotifiesObserversForKey:\nReturns a Boolean value that indicates whether the receiver provides automatic support for key-value observing change notifications for the given key.\n- didAccessValueForKey:\nProvides support for key-value observing access notification.\n- observationInfo\nReturns the observation info of the managed object.\n- setObservationInfo:\nSets the observation info of the managed object.\n- willAccessValueForKey:\nProvides support for key-value observing access notification.\n- didChangeValueForKey:\nProvides an opportunity to respond when a value of a given property has changed.\n- willChangeValueForKey:\nProvides an opportunity to respond when a value of a given property is about to change.\n- willChangeValueForKey:withSetMutation:usingObjects:\nProvides an opportunity to respond when a change is about to be made to a specified to-many relationship."
  },
  {
    "title": "didChangeValueForKey: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506976-didchangevalueforkey",
    "html": "Parameters\nkey\n\nThe name of the property that changed.\n\nDiscussion\n\nFor more details, see Key-Value Observing Programming Guide.\n\nYou must not override this method.\n\nSee Also\nSupporting Key-Value Observing\nautomaticallyNotifiesObserversForKey:\nReturns a Boolean value that indicates whether the receiver provides automatic support for key-value observing change notifications for the given key.\n- didAccessValueForKey:\nProvides support for key-value observing access notification.\n- observationInfo\nReturns the observation info of the managed object.\n- setObservationInfo:\nSets the observation info of the managed object.\n- willAccessValueForKey:\nProvides support for key-value observing access notification.\n- didChangeValueForKey:withSetMutation:usingObjects:\nProvides an opportunity to respond when a change was made to a specified to-many relationship.\n- willChangeValueForKey:\nProvides an opportunity to respond when a value of a given property is about to change.\n- willChangeValueForKey:withSetMutation:usingObjects:\nProvides an opportunity to respond when a change is about to be made to a specified to-many relationship."
  },
  {
    "title": "NSPersistentStoreUnsupportedRequestTypeError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoreunsupportedrequesttypeerror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSMigrationConstraintViolationError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationconstraintviolationerror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSPersistentStoreInvalidTypeError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoreinvalidtypeerror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "fault | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506837-fault",
    "html": "Discussion\n\nYES if the receiver is a fault, otherwise NO. Knowing whether an object is a fault is useful in many situations when computations are optional. It can also be used to avoid growing the object graph unnecessarily (which may improve performance as it can avoid time-consuming fetches from data stores).\n\nIf this property is NO, then the receiver's data must be in memory. However, if this property is YES, it does not mean that the data is not in memory. The data may be in memory, or it may not, depending on many factors influencing caching.\n\nIf the receiver is a fault, accessing this property does not cause it to fire.\n\nSee Also\nGetting State Information\nmanagedObjectContext\nThe managed object context with which the managed object is registered.\nhasChanges\nA Boolean value that indicates whether the managed object has been inserted, has been deleted, or has unsaved changes.\ninserted\nA Boolean value that indicates whether the managed object has been inserted in a managed object context.\nupdated\nA Boolean value that indicates whether the managed object has unsaved changes.\ndeleted\nA Boolean value that indicates whether the managed object will be deleted during the next save.\nfaultingState\nThe faulting state of the managed object.\n- hasFaultForRelationshipNamed:\nReturns a Boolean value that indicates whether the relationship for a given key is a fault.\nhasPersistentChangedValues\nA Boolean value that indicates whether the managed object has persistent changes."
  },
  {
    "title": "NSValidationStringTooShortError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsvalidationstringtooshorterror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSMergePolicyType.errorMergePolicyType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmergepolicytype/errormergepolicytype",
    "html": "Discussion\n\nIf a save fails because of conflicting objects, you can find the IDs of those objects in error’s userInfo dictionary. Use the NSInsertedObjectsKey and NSUpdatedObjectsKey keys to extract the object IDs.\n\nSee Also\nPolicies\ncase mergeByPropertyStoreTrumpMergePolicyType\nA property-based merge policy that applies external changes.\ncase mergeByPropertyObjectTrumpMergePolicyType\nA property-based merge policy that applies in-memory changes.\ncase overwriteMergePolicyType\nA merge policy type that overwrites the entire stored object.\ncase rollbackMergePolicyType\nA merge policy that discards unsaved changes."
  },
  {
    "title": "init(byMerging:forStoreMetadata:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectmodel/1506856-init",
    "html": "Parameters\nmodels\n\nAn array of instances of NSManagedObjectModel.\n\nmetadata\n\nA dictionary containing version information from the metadata for a persistent store.\n\nReturn Value\n\nA merged model from models for the version information in metadata. If a model cannot be created to match the version information in metadata, returns nil.\n\nDiscussion\n\nThis is the companion method to mergedModel(from:forStoreMetadata:).\n\nSee Also\nCreating a managed object model\ninit?(contentsOf: URL)\nInitializes the managed object model using the model file at the specified URL.\ninit()\nInitializes an empty managed object model.\nclass func mergedModel(from: [Bundle]?) -> NSManagedObjectModel?\nReturns a model created by merging all the models found in given bundles.\nclass func mergedModel(from: [Bundle]?, forStoreMetadata: [String : Any]) -> NSManagedObjectModel?\nReturns a merged model from a specified array for the version information in provided metadata.\ninit?(byMerging: [NSManagedObjectModel]?)\nCreates a single model from an array of existing models."
  },
  {
    "title": "entities(forConfigurationName:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectmodel/1506693-entities",
    "html": "Parameters\nconfiguration\n\nThe name of a configuration in the receiver.\n\nReturn Value\n\nAn array containing the entities of the receiver for the configuration specified by configuration.\n\nSee Also\nManaging entities and configurations\nvar entities: [NSEntityDescription]\nThe entities in the model.\nvar entitiesByName: [String : NSEntityDescription]\nThe entities of the model, keyed by name.\nvar configurations: [String]\nAll the available configuration names of the model.\nfunc setEntities([NSEntityDescription], forConfigurationName: String)\nAssociates the specified entities with the model using the given configuration name."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectmodel/1506410-init",
    "html": "See Also\nCreating a managed object model\ninit?(contentsOf: URL)\nInitializes the managed object model using the model file at the specified URL.\nclass func mergedModel(from: [Bundle]?) -> NSManagedObjectModel?\nReturns a model created by merging all the models found in given bundles.\nclass func mergedModel(from: [Bundle]?, forStoreMetadata: [String : Any]) -> NSManagedObjectModel?\nReturns a merged model from a specified array for the version information in provided metadata.\ninit?(byMerging: [NSManagedObjectModel]?)\nCreates a single model from an array of existing models.\ninit?(byMerging: [NSManagedObjectModel], forStoreMetadata: [String : Any])\nReturns, for the version information in given metadata, a model merged from a given array of models."
  },
  {
    "title": "init(name:in:versionChecksum:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectmodelreference/4172798-init",
    "html": "Parameters\nmodelName\n\nThe name of the managed object model in the specified bundle.\n\nbundle\n\nThe bundle to search.\n\nversionChecksum\n\nThe checksum of the object model’s version.\n\nDiscussion\n\nTo determine an object model’s version checksum, use its versionChecksum property. Alternatively, you can find the checksum in the versioned model’s VersionInfo.plist file or in Xcode’s build log.\n\nSee Also\nCreating a reference\ninit(model: NSManagedObjectModel, versionChecksum: String)\nCreates an object model reference for the specified model.\ninit(fileURL: URL, versionChecksum: String)\nCreates an object model reference for the model at the specified file URL.\ninit(entityVersionHashes: [AnyHashable : Any], in: Bundle?, versionChecksum: String)\nCreates an object model reference with the entities corresponding to the specified entity version hashes."
  },
  {
    "title": "resolvedModel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectmodelreference/4172799-resolvedmodel",
    "html": "See Also\nResolving the model object\nvar versionChecksum: String\nThe version checksum of the resolved model."
  },
  {
    "title": "propertyName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchindexelementdescription/2887045-propertyname",
    "html": "See Also\nInspecting an Index Element Description\nvar collationType: NSFetchIndexElementType\nThe type of collation that the index element uses, either binary or R-tree.\nvar indexDescription: NSFetchIndexDescription?\nvar isAscending: Bool\nA Boolean value that controls whether an index that supports direction is an ascending or descending index.\nvar property: NSPropertyDescription?\nA property description."
  },
  {
    "title": "versionChecksum | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectmodel/4172793-versionchecksum",
    "html": "Discussion\n\nThis value is also available in the versioned model’s VersionInfo.plist file and in Xcode’s build log.\n\nSee Also\nVersioning and migrating entities\nvar versionIdentifiers: Set<AnyHashable>\nThe set of developer-defined version identifiers for the object model.\nvar entityVersionHashesByName: [String : Data]\nThe dictionary of the model’s entity names and their corresponding version hashes.\nfunc isConfiguration(withName: String?, compatibleWithStoreMetadata: [String : Any]) -> Bool\nReturns a Boolean value that indicates whether a given configuration in the model is compatible with given metadata from a persistent store."
  },
  {
    "title": "entityVersionHashesByName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectmodel/1506992-entityversionhashesbyname",
    "html": "Discussion\n\nCore Data use the dictionary of version hash information is to determine schema compatibility.\n\nSee Also\nVersioning and migrating entities\nvar versionChecksum: String\nThe Base64-encoded 128-bit model version hash.\nvar versionIdentifiers: Set<AnyHashable>\nThe set of developer-defined version identifiers for the object model.\nfunc isConfiguration(withName: String?, compatibleWithStoreMetadata: [String : Any]) -> Bool\nReturns a Boolean value that indicates whether a given configuration in the model is compatible with given metadata from a persistent store."
  },
  {
    "title": "elements | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchindexdescription/2887054-elements",
    "html": "Discussion\n\nSetting this property to an invalid value throws an exception, such as when the new value includes both R-tree and non-R-tree elements.\n\nSee Also\nInspecting an Index Description\nvar entity: NSEntityDescription?\nThe entity description for the fetch index description.\nvar name: String\nThe name of the fetch index description.\nvar partialIndexPredicate: NSPredicate?\nA predicate that selects rows for indexing, if the index is a partial index."
  },
  {
    "title": "entity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchindexdescription/2887055-entity",
    "html": "See Also\nInspecting an Index Description\nvar elements: [NSFetchIndexElementDescription]\nAn array of fetch index element descriptions.\nvar name: String\nThe name of the fetch index description.\nvar partialIndexPredicate: NSPredicate?\nA predicate that selects rows for indexing, if the index is a partial index."
  },
  {
    "title": "automaticallyNotifiesObserversForKey: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1807263-automaticallynotifiesobserversfo",
    "html": "Parameters\nkey\n\nThe name of one of the receiver's properties.\n\nReturn Value\n\nYES if the receiver provides automatic support for key-value observing change notifications for key, otherwise NO.\n\nOverview\n\nThe default implementation for NSManagedObject returns NO for modeled properties, and YES for unmodeled properties. For more about key-value observation, see Key-Value Observing Programming Guide.\n\nSee Also\nSupporting Key-Value Observing\n- didAccessValueForKey:\nProvides support for key-value observing access notification.\n- observationInfo\nReturns the observation info of the managed object.\n- setObservationInfo:\nSets the observation info of the managed object.\n- willAccessValueForKey:\nProvides support for key-value observing access notification.\n- didChangeValueForKey:\nProvides an opportunity to respond when a value of a given property has changed.\n- didChangeValueForKey:withSetMutation:usingObjects:\nProvides an opportunity to respond when a change was made to a specified to-many relationship.\n- willChangeValueForKey:\nProvides an opportunity to respond when a value of a given property is about to change.\n- willChangeValueForKey:withSetMutation:usingObjects:\nProvides an opportunity to respond when a change is about to be made to a specified to-many relationship."
  },
  {
    "title": "NSBatchDeleteRequestResultType.resultTypeCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchdeleterequestresulttype/resulttypecount",
    "html": "See Also\nResult Types\ncase resultTypeObjectIDs\nReturns an array of the deleted managed objects’ identifiers.\ncase resultTypeStatusOnly\nReturns a Boolean value that indicates if the request succeeds."
  },
  {
    "title": "NSBatchInsertRequestResultType.objectIDs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchinsertrequestresulttype/objectids",
    "html": "See Also\nRequest Types\ncase statusOnly\nA value that indicates that the return type is a Boolean value representing whether the batch-insertion request succeeded.\ncase count\nA value that indicates that the return type is the number of inserted rows."
  },
  {
    "title": "NSBatchInsertRequestResultType.count | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchinsertrequestresulttype/count",
    "html": "See Also\nRequest Types\ncase statusOnly\nA value that indicates that the return type is a Boolean value representing whether the batch-insertion request succeeded.\ncase objectIDs\nA value that indicates the return type is an array of object IDs that corresponds to the inserted rows."
  },
  {
    "title": "NSBatchInsertRequestResultType.statusOnly | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchinsertrequestresulttype/statusonly",
    "html": "See Also\nRequest Types\ncase objectIDs\nA value that indicates the return type is an array of object IDs that corresponds to the inserted rows.\ncase count\nA value that indicates that the return type is the number of inserted rows."
  },
  {
    "title": "NSBatchUpdateRequestResultType.updatedObjectsCountResultType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchupdaterequestresulttype/updatedobjectscountresulttype",
    "html": "See Also\nRequest Types\ncase statusOnlyResultType\nA value that indicates the return type is a Boolean value representing whether the batch-update request succeeds.\ncase updatedObjectIDsResultType\nA value that indicates the return type is an array of object IDs that corresponds to the updated rows."
  },
  {
    "title": "NSPersistentHistoryResultType.changesOnly | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistoryresulttype/changesonly",
    "html": "See Also\nResult Types\ncase statusOnly\nThe status of the persistent history change request.\ncase count\nThe number of persistent history changes since the requested date, token, or transaction.\ncase objectIDs\nThe identifiers of managed objects changed since the requested date, token, or transaction.\ncase transactionsAndChanges\nThe persistent history transactions and changes since the requested date, token, or transaction.\ncase transactionsOnly\nThe persistent history transactions since the requested date, token, or transaction."
  },
  {
    "title": "NSMergeByPropertyObjectTrumpMergePolicy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmergebypropertyobjecttrumpmergepolicy",
    "html": "Discussion\n\nA policy that merges conflicts between the persistent store’s version of the object and the current in-memory version by individual property, with in-memory changes trumping external changes.\n\nSee Also\nPolicies\nvar NSErrorMergePolicy: AnyObject\nThe default merge policy for all managed object contexts.\nvar NSMergeByPropertyStoreTrumpMergePolicy: AnyObject\nA property-based merge policy that applies external changes.\nvar NSOverwriteMergePolicy: AnyObject\nA merge policy that overwrites the entire stored object.\nvar NSRollbackMergePolicy: AnyObject\nA merge policy that discards unsaved changes.\nenum NSMergePolicyType\nConstants that define merge policy types."
  },
  {
    "title": "NSMergeByPropertyStoreTrumpMergePolicy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmergebypropertystoretrumpmergepolicy",
    "html": "Discussion\n\nA policy that merges conflicts between the persistent store’s version of the object and the current in-memory version by individual property, with external changes trumping in-memory changes.\n\nSee Also\nPolicies\nvar NSErrorMergePolicy: AnyObject\nThe default merge policy for all managed object contexts.\nvar NSMergeByPropertyObjectTrumpMergePolicy: AnyObject\nA property-based merge policy that applies in-memory changes.\nvar NSOverwriteMergePolicy: AnyObject\nA merge policy that overwrites the entire stored object.\nvar NSRollbackMergePolicy: AnyObject\nA merge policy that discards unsaved changes.\nenum NSMergePolicyType\nConstants that define merge policy types."
  },
  {
    "title": "undefined | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/attributetype/3747503-undefined",
    "html": "Discussion\n\nUse this attribute type with transient attributues only. Core Data manages the attribute’s value and registers the necessary undo and redo actions.\n\nSee Also\nAttribute Types\nstatic let binaryData: NSAttributeDescription.AttributeType\nAn attribute that stores binary data.\nstatic let boolean: NSAttributeDescription.AttributeType\nAn attribute that stores a Boolean value.\nstatic let composite: NSAttributeDescription.AttributeType\nAn attribute that derives its value by composing other attributes.\nstatic let date: NSAttributeDescription.AttributeType\nAn attribute that stores a date.\nstatic let decimal: NSAttributeDescription.AttributeType\nAn attribute that stores a decimal value.\nstatic let double: NSAttributeDescription.AttributeType\nAn attribute that stores a double value.\nstatic let float: NSAttributeDescription.AttributeType\nAn attribute that stores a float value.\nstatic let integer16: NSAttributeDescription.AttributeType\nAn attribute that stores a 16-bit signed integer value.\nstatic let integer32: NSAttributeDescription.AttributeType\nAn attribute that stores a 32-bit signed integer value.\nstatic let integer64: NSAttributeDescription.AttributeType\nAn attribute that stores a 64-bit signed integer value.\nstatic let objectID: NSAttributeDescription.AttributeType\nAn attribute that stores a managed object’s ID.\nstatic let string: NSAttributeDescription.AttributeType\nAn attribute that stores a string.\nstatic let transformable: NSAttributeDescription.AttributeType\nAn attribute that uses a value transformer to derive its value.\nstatic let uri: NSAttributeDescription.AttributeType\nAn attribute that stores a uniform resource identifier.\nstatic let uuid: NSAttributeDescription.AttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "willChangeValueForKey: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506229-willchangevalueforkey",
    "html": "Parameters\nkey\n\nThe name of the property that will change.\n\nDiscussion\n\nFor more details, see Key-Value Observing Programming Guide.\n\nYou must not override this method.\n\nSee Also\nSupporting Key-Value Observing\nautomaticallyNotifiesObserversForKey:\nReturns a Boolean value that indicates whether the receiver provides automatic support for key-value observing change notifications for the given key.\n- didAccessValueForKey:\nProvides support for key-value observing access notification.\n- observationInfo\nReturns the observation info of the managed object.\n- setObservationInfo:\nSets the observation info of the managed object.\n- willAccessValueForKey:\nProvides support for key-value observing access notification.\n- didChangeValueForKey:\nProvides an opportunity to respond when a value of a given property has changed.\n- didChangeValueForKey:withSetMutation:usingObjects:\nProvides an opportunity to respond when a change was made to a specified to-many relationship.\n- willChangeValueForKey:withSetMutation:usingObjects:\nProvides an opportunity to respond when a change is about to be made to a specified to-many relationship."
  },
  {
    "title": "willChangeValueForKey:withSetMutation:usingObjects: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506801-willchangevalueforkey",
    "html": "Parameters\ninKey\n\nThe name of a property that is a to-many relationship\n\ninMutationKind\n\nThe type of change that will be made.\n\ninObjects\n\nThe objects that were involved in the change (see NSKeyValueSetMutationKind).\n\nDiscussion\n\nFor more details, see Key-Value Observing Programming Guide.\n\nYou must not override this method.\n\nSee Also\nSupporting Key-Value Observing\nautomaticallyNotifiesObserversForKey:\nReturns a Boolean value that indicates whether the receiver provides automatic support for key-value observing change notifications for the given key.\n- didAccessValueForKey:\nProvides support for key-value observing access notification.\n- observationInfo\nReturns the observation info of the managed object.\n- setObservationInfo:\nSets the observation info of the managed object.\n- willAccessValueForKey:\nProvides support for key-value observing access notification.\n- didChangeValueForKey:\nProvides an opportunity to respond when a value of a given property has changed.\n- didChangeValueForKey:withSetMutation:usingObjects:\nProvides an opportunity to respond when a change was made to a specified to-many relationship.\n- willChangeValueForKey:\nProvides an opportunity to respond when a value of a given property is about to change."
  },
  {
    "title": "NSPersistentStoreOperationError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoreoperationerror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSManagedObjectMergeError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectmergeerror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "updated | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506867-updated",
    "html": "Discussion\n\nYES if the receiver has unsaved changes, otherwise NO. The receiver has unsaved changes if it has been updated since its managed object context was last saved.\n\nIf the receiver is a fault, accessing this property does not cause it to fire.\n\nSee Also\nGetting State Information\nmanagedObjectContext\nThe managed object context with which the managed object is registered.\nhasChanges\nA Boolean value that indicates whether the managed object has been inserted, has been deleted, or has unsaved changes.\ninserted\nA Boolean value that indicates whether the managed object has been inserted in a managed object context.\ndeleted\nA Boolean value that indicates whether the managed object will be deleted during the next save.\nfault\nA Boolean value that indicates whether the managed object is a fault.\nfaultingState\nThe faulting state of the managed object.\n- hasFaultForRelationshipNamed:\nReturns a Boolean value that indicates whether the relationship for a given key is a fault.\nhasPersistentChangedValues\nA Boolean value that indicates whether the managed object has persistent changes."
  },
  {
    "title": "fetchRequestFromTemplate(withName:substitutionVariables:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectmodel/1506422-fetchrequestfromtemplate",
    "html": "Parameters\nname\n\nA string containing the name of a fetch request template.\n\nvariables\n\nA dictionary containing key-value pairs where the keys are the names of variables specified in the template; the corresponding values are substituted before the fetch request is returned. The dictionary must provide values for all the variables in the template.\n\nReturn Value\n\nA copy of the fetch request template with the variables substituted by values from variables.\n\nDiscussion\n\nThe variables dictionary must provide values for all the variables. If you want to test for a nil value, use [NSNull null].\n\nThis method provides the usual way to bind an “abstractly” defined fetch request template to a concrete fetch. For more details on using this method, see Creating Predicates.\n\nSee Also\nManipulating fetch request templates\nvar fetchRequestTemplatesByName: [String : NSFetchRequest<NSFetchRequestResult>]\nA dictionary of the receiver’s fetch request templates, keyed by name.\nfunc fetchRequestTemplate(forName: String) -> NSFetchRequest<NSFetchRequestResult>?\nReturns the fetch request with a specified name.\nfunc setFetchRequestTemplate(NSFetchRequest<NSFetchRequestResult>?, forName: String)\nAssociates the specified fetch request with the receiver using the given name."
  },
  {
    "title": "initWithEntity:insertIntoManagedObjectContext: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506357-initwithentity",
    "html": "Parameters\nentity\n\nThe entity of which to create an instance.\n\nThe model associated with context's persistent store coordinator must contain entity.\n\ncontext\n\nThe context into which the new instance is inserted.\n\nReturn Value\n\nAn initialized instance of the appropriate class for entity.\n\nDiscussion\n\nNSManagedObject uses dynamic class generation to support the Objective-C 2 properties feature (see Declared Properties) by automatically creating a subclass of the class appropriate for entity. initWithEntity:insertIntoManagedObjectContext: therefore returns an instance of the appropriate class for entity. The dynamically-generated subclass will be based on the class specified by the entity, so specifying a custom class in your model will supersede the class passed to alloc.\n\nIf context is not nil, this method invokes [context insertObject:self] (which causes awakeFromInsert to be invoked).\n\nYou are discouraged from overriding this method—you should instead override awakeFromInsert and/or awakeFromFetch (if there is logic common to these methods, it should be factored into a third method which is invoked from both). If you do perform custom initialization in this method, you may cause problems with undo and redo operations.\n\nIn many applications, there is no need to subsequently assign a newly-created managed object to a particular store—see assignObject:toPersistentStore:. If your application has multiple stores and you do need to assign an object to a specific store, you should not do so in a managed object's initializer method. Such an assignment is controller- not model-level logic.\n\nImportant\n\nThis method is the designated initializer for NSManagedObject. You must not initialize a managed object simply by sending it init.\n\nSpecial Considerations\n\nIf you override initWithEntity:insertIntoManagedObjectContext:, you must ensure that you set self to the return value from invocation of super’s implementation, as shown in the following example:\n\n- (id)initWithEntity:(NSEntityDescription*)entity insertIntoManagedObjectContext:(NSManagedObjectContext*)context\n{\n    self = [super initWithEntity:entity insertIntoManagedObjectContext:context];\n    if (self != nil) {\n        // Perform additional initialization.\n    }\n    return self;\n}\n\nSee Also\nCreating a Managed Object\n- initWithContext:\nInitializes a managed object subclass and inserts it into the specified managed object context.\nRelated Documentation\nCore Data Programming Guide\n+ insertNewObjectForEntityForName:inManagedObjectContext:\nCreates, configures, and returns an instance of the class for the entity with a given name."
  },
  {
    "title": "inserted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506281-inserted",
    "html": "Discussion\n\nYES if the receiver has been inserted in a managed object context, otherwise NO. If the receiver is a fault, accessing this property does not cause it to fire.\n\nSee Also\nGetting State Information\nmanagedObjectContext\nThe managed object context with which the managed object is registered.\nhasChanges\nA Boolean value that indicates whether the managed object has been inserted, has been deleted, or has unsaved changes.\nupdated\nA Boolean value that indicates whether the managed object has unsaved changes.\ndeleted\nA Boolean value that indicates whether the managed object will be deleted during the next save.\nfault\nA Boolean value that indicates whether the managed object is a fault.\nfaultingState\nThe faulting state of the managed object.\n- hasFaultForRelationshipNamed:\nReturns a Boolean value that indicates whether the relationship for a given key is a fault.\nhasPersistentChangedValues\nA Boolean value that indicates whether the managed object has persistent changes."
  },
  {
    "title": "initWithContext: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1640602-initwithcontext",
    "html": "Return Value\n\nAn initialized instance of the appropriate subclass.\n\nDiscussion\n\nThis method is only legal to call on subclasses of NSManagedObject that represent a single entity in the model.\n\nSee Also\nCreating a Managed Object\n- initWithEntity:insertIntoManagedObjectContext:\nInitializes a managed object from an entity description and inserts it into the specified managed object context."
  },
  {
    "title": "fetchRequestTemplatesByName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectmodel/1506580-fetchrequesttemplatesbyname",
    "html": "Discussion\n\nIf the template contains a predicate with substitution variables, you should instead use fetchRequestFromTemplate(withName:substitutionVariables:) to create a new fetch request.\n\nSee Also\nManipulating fetch request templates\nfunc fetchRequestTemplate(forName: String) -> NSFetchRequest<NSFetchRequestResult>?\nReturns the fetch request with a specified name.\nfunc fetchRequestFromTemplate(withName: String, substitutionVariables: [String : Any]) -> NSFetchRequest<NSFetchRequestResult>?\nReturns a copy of the fetch request template with the variables substituted by values from the substitutions dictionary.\nfunc setFetchRequestTemplate(NSFetchRequest<NSFetchRequestResult>?, forName: String)\nAssociates the specified fetch request with the receiver using the given name."
  },
  {
    "title": "init(contentsOf:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectmodel/1506225-init",
    "html": "Parameters\nurl\n\nAn URL object specifying the location of a model file.\n\nReturn Value\n\nA managed object model initialized using the file at url.\n\nSee Also\nCreating a managed object model\ninit()\nInitializes an empty managed object model.\nclass func mergedModel(from: [Bundle]?) -> NSManagedObjectModel?\nReturns a model created by merging all the models found in given bundles.\nclass func mergedModel(from: [Bundle]?, forStoreMetadata: [String : Any]) -> NSManagedObjectModel?\nReturns a merged model from a specified array for the version information in provided metadata.\ninit?(byMerging: [NSManagedObjectModel]?)\nCreates a single model from an array of existing models.\ninit?(byMerging: [NSManagedObjectModel], forStoreMetadata: [String : Any])\nReturns, for the version information in given metadata, a model merged from a given array of models.\nRelated Documentation\nCore Data Programming Guide\nCore Data Model Versioning and Data Migration Programming Guide"
  },
  {
    "title": "NSOverwriteMergePolicy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsoverwritemergepolicy",
    "html": "Discussion\n\nThis policy merges conflicts between the persistent store’s version of the object and the current in-memory version by saving the entire in-memory object to the persistent store.\n\nSee Also\nPolicies\nvar NSErrorMergePolicy: AnyObject\nThe default merge policy for all managed object contexts.\nvar NSMergeByPropertyStoreTrumpMergePolicy: AnyObject\nA property-based merge policy that applies external changes.\nvar NSMergeByPropertyObjectTrumpMergePolicy: AnyObject\nA property-based merge policy that applies in-memory changes.\nvar NSRollbackMergePolicy: AnyObject\nA merge policy that discards unsaved changes.\nenum NSMergePolicyType\nConstants that define merge policy types."
  },
  {
    "title": "undoInsertion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nssnapshoteventtype/1506790-undoinsertion",
    "html": "See Also\nEvent Types\nstatic var undoDeletion: NSSnapshotEventType\nSpecifies a change due to undo from deletion.\nstatic var undoUpdate: NSSnapshotEventType\nSpecifies a change due to a property-level undo.\nstatic var rollback: NSSnapshotEventType\nSpecifies a change due to the managed object context being rolled back.\nstatic var refresh: NSSnapshotEventType\nSpecifies a change due to the managed object being refreshed.\nstatic var mergePolicy: NSSnapshotEventType\nSpecifies a change due to conflict resolution during a save operation."
  },
  {
    "title": "NSRollbackMergePolicy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsrollbackmergepolicy",
    "html": "Discussion\n\nThis policy merges conflicts between the persistent store’s version of the object and the current in-memory version by discarding unsaved changes.\n\nSee Also\nPolicies\nvar NSErrorMergePolicy: AnyObject\nThe default merge policy for all managed object contexts.\nvar NSMergeByPropertyStoreTrumpMergePolicy: AnyObject\nA property-based merge policy that applies external changes.\nvar NSMergeByPropertyObjectTrumpMergePolicy: AnyObject\nA property-based merge policy that applies in-memory changes.\nvar NSOverwriteMergePolicy: AnyObject\nA merge policy that overwrites the entire stored object.\nenum NSMergePolicyType\nConstants that define merge policy types."
  },
  {
    "title": "undoDeletion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nssnapshoteventtype/1506242-undodeletion",
    "html": "See Also\nEvent Types\nstatic var undoInsertion: NSSnapshotEventType\nSpecifies a change due to undo from insertion.\nstatic var undoUpdate: NSSnapshotEventType\nSpecifies a change due to a property-level undo.\nstatic var rollback: NSSnapshotEventType\nSpecifies a change due to the managed object context being rolled back.\nstatic var refresh: NSSnapshotEventType\nSpecifies a change due to the managed object being refreshed.\nstatic var mergePolicy: NSSnapshotEventType\nSpecifies a change due to conflict resolution during a save operation."
  },
  {
    "title": "undoUpdate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nssnapshoteventtype/1506420-undoupdate",
    "html": "See Also\nEvent Types\nstatic var undoInsertion: NSSnapshotEventType\nSpecifies a change due to undo from insertion.\nstatic var undoDeletion: NSSnapshotEventType\nSpecifies a change due to undo from deletion.\nstatic var rollback: NSSnapshotEventType\nSpecifies a change due to the managed object context being rolled back.\nstatic var refresh: NSSnapshotEventType\nSpecifies a change due to the managed object being refreshed.\nstatic var mergePolicy: NSSnapshotEventType\nSpecifies a change due to conflict resolution during a save operation."
  },
  {
    "title": "rollback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nssnapshoteventtype/1506962-rollback",
    "html": "See Also\nEvent Types\nstatic var undoInsertion: NSSnapshotEventType\nSpecifies a change due to undo from insertion.\nstatic var undoDeletion: NSSnapshotEventType\nSpecifies a change due to undo from deletion.\nstatic var undoUpdate: NSSnapshotEventType\nSpecifies a change due to a property-level undo.\nstatic var refresh: NSSnapshotEventType\nSpecifies a change due to the managed object being refreshed.\nstatic var mergePolicy: NSSnapshotEventType\nSpecifies a change due to conflict resolution during a save operation."
  },
  {
    "title": "NSValidationStringPatternMatchingError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsvalidationstringpatternmatchingerror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short."
  },
  {
    "title": "NSValidationStringTooLongError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsvalidationstringtoolongerror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSValidationInvalidDateError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsvalidationinvaliddateerror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "mergePolicy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nssnapshoteventtype/1506676-mergepolicy",
    "html": "See Also\nEvent Types\nstatic var undoInsertion: NSSnapshotEventType\nSpecifies a change due to undo from insertion.\nstatic var undoDeletion: NSSnapshotEventType\nSpecifies a change due to undo from deletion.\nstatic var undoUpdate: NSSnapshotEventType\nSpecifies a change due to a property-level undo.\nstatic var rollback: NSSnapshotEventType\nSpecifies a change due to the managed object context being rolled back.\nstatic var refresh: NSSnapshotEventType\nSpecifies a change due to the managed object being refreshed."
  },
  {
    "title": "NSValidationRelationshipExceedsMaximumCountError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsvalidationrelationshipexceedsmaximumcounterror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSValidationRelationshipDeniedDeleteError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsvalidationrelationshipdenieddeleteerror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSValidationNumberTooSmallError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsvalidationnumbertoosmallerror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSValidationDateTooLateError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsvalidationdatetoolateerror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSValidationMissingMandatoryPropertyError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsvalidationmissingmandatorypropertyerror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSEntityMigrationPolicyError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitymigrationpolicyerror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSCoreDataError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataerror",
    "html": "See Also\nError codes\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSExternalRecordImportError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsexternalrecordimporterror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "init(fileURL:versionChecksum:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectmodelreference/4172796-init",
    "html": "Parameters\nfileURL\n\nThe on-disk location of the managed object model.\n\nversionChecksum\n\nThe checksum of the object model’s version.\n\nDiscussion\n\nTo determine an object model’s version checksum, use its versionChecksum property. Alternatively, you can find the checksum in the versioned model’s VersionInfo.plist file or in Xcode’s build log.\n\nSee Also\nCreating a reference\ninit(model: NSManagedObjectModel, versionChecksum: String)\nCreates an object model reference for the specified model.\ninit(name: String, in: Bundle?, versionChecksum: String)\nCreates an object model reference for the named model in the specified bundle.\ninit(entityVersionHashes: [AnyHashable : Any], in: Bundle?, versionChecksum: String)\nCreates an object model reference with the entities corresponding to the specified entity version hashes."
  },
  {
    "title": "versionChecksum | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectmodelreference/4172800-versionchecksum",
    "html": "See Also\nResolving the model object\nvar resolvedModel: NSManagedObjectModel\nThe resolved object model."
  },
  {
    "title": "init(name:elements:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchindexdescription/2887053-init",
    "html": "Parameters\nname\n\nThe name of the fetch index description.\n\nelements\n\nAn array of fetch index element descriptions."
  },
  {
    "title": "NSFetchIndexElementDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchindexelementdescription",
    "html": "Topics\nCreating an Index Element Description\ninit(property: NSPropertyDescription, collationType: NSFetchIndexElementType)\nCreates an index element description using the specified property description and collation type.\nInspecting an Index Element Description\nvar collationType: NSFetchIndexElementType\nThe type of collation that the index element uses, either binary or R-tree.\nvar indexDescription: NSFetchIndexDescription?\nvar isAscending: Bool\nA Boolean value that controls whether an index that supports direction is an ascending or descending index.\nvar property: NSPropertyDescription?\nA property description.\nvar propertyName: String?\nThe specified name in the property description.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCoding\nNSCopying\nSee Also\nWorking with indexes\nenum NSFetchIndexElementType\nDefines the possible types of index elements.\nclass NSFetchIndexDescription\nThe description of the index."
  },
  {
    "title": "NSPersistentStoreUbiquitousTransitionType.contentRemoved | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoreubiquitoustransitiontype/contentremoved",
    "html": "Discussion\n\nThe Core Data integration will transition to an empty store file as a result of this event."
  },
  {
    "title": "NSPersistentStoreUbiquitousTransitionType.accountAdded | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoreubiquitoustransitiontype/accountadded",
    "html": "Discussion\n\nIt is only possible to discern this state when the application is running, and therefore this transition type will only be posted if the account changes while the application is running or in the background."
  },
  {
    "title": "NSPersistentStoreUbiquitousTransitionType.accountRemoved | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoreubiquitoustransitiontype/accountremoved",
    "html": "Discussion\n\nIt is only possible to discern this state when the application is running, and therefore this transition type will only be posted if the account is removed while the application is running or in the background."
  },
  {
    "title": "NSBatchDeleteRequestResultType.resultTypeObjectIDs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchdeleterequestresulttype/resulttypeobjectids",
    "html": "See Also\nResult Types\ncase resultTypeCount\nReturns the number of managed objects the request deletes.\ncase resultTypeStatusOnly\nReturns a Boolean value that indicates if the request succeeds."
  },
  {
    "title": "mergedModel(from:forStoreMetadata:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectmodel/1506788-mergedmodel",
    "html": "Parameters\nbundles\n\nAn array of bundles.\n\nmetadata\n\nA dictionary containing version information from the metadata for a persistent store.\n\nReturn Value\n\nThe managed object model used to create the store for the metadata. If a model cannot be created to match the version information specified by metadata, returns nil.\n\nDiscussion\n\nThis method is a companion to mergedModel(from:).\n\nSee Also\nCreating a managed object model\ninit?(contentsOf: URL)\nInitializes the managed object model using the model file at the specified URL.\ninit()\nInitializes an empty managed object model.\nclass func mergedModel(from: [Bundle]?) -> NSManagedObjectModel?\nReturns a model created by merging all the models found in given bundles.\ninit?(byMerging: [NSManagedObjectModel]?)\nCreates a single model from an array of existing models.\ninit?(byMerging: [NSManagedObjectModel], forStoreMetadata: [String : Any])\nReturns, for the version information in given metadata, a model merged from a given array of models."
  },
  {
    "title": "NSBatchUpdateRequestResultType.updatedObjectIDsResultType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchupdaterequestresulttype/updatedobjectidsresulttype",
    "html": "See Also\nRequest Types\ncase statusOnlyResultType\nA value that indicates the return type is a Boolean value representing whether the batch-update request succeeds.\ncase updatedObjectsCountResultType\nA value that indicates the return type is the number of updated rows."
  },
  {
    "title": "NSBatchUpdateRequestResultType.statusOnlyResultType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchupdaterequestresulttype/statusonlyresulttype",
    "html": "See Also\nRequest Types\ncase updatedObjectIDsResultType\nA value that indicates the return type is an array of object IDs that corresponds to the updated rows.\ncase updatedObjectsCountResultType\nA value that indicates the return type is the number of updated rows."
  },
  {
    "title": "NSAttributeDescription.AttributeType.RawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/attributetype/rawvalue",
    "html": "See Also\nGetting an Attribute Type’s Raw Value\nvar rawValue: NSAttributeType\nThe attribute type’s cardinal value."
  },
  {
    "title": "decimal | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/attributetype/3747490-decimal",
    "html": "Discussion\n\nUse instances of NSDecimalNumber when reading and writing attributes of this type.\n\nSee Also\nAttribute Types\nstatic let binaryData: NSAttributeDescription.AttributeType\nAn attribute that stores binary data.\nstatic let boolean: NSAttributeDescription.AttributeType\nAn attribute that stores a Boolean value.\nstatic let composite: NSAttributeDescription.AttributeType\nAn attribute that derives its value by composing other attributes.\nstatic let date: NSAttributeDescription.AttributeType\nAn attribute that stores a date.\nstatic let double: NSAttributeDescription.AttributeType\nAn attribute that stores a double value.\nstatic let float: NSAttributeDescription.AttributeType\nAn attribute that stores a float value.\nstatic let integer16: NSAttributeDescription.AttributeType\nAn attribute that stores a 16-bit signed integer value.\nstatic let integer32: NSAttributeDescription.AttributeType\nAn attribute that stores a 32-bit signed integer value.\nstatic let integer64: NSAttributeDescription.AttributeType\nAn attribute that stores a 64-bit signed integer value.\nstatic let objectID: NSAttributeDescription.AttributeType\nAn attribute that stores a managed object’s ID.\nstatic let string: NSAttributeDescription.AttributeType\nAn attribute that stores a string.\nstatic let transformable: NSAttributeDescription.AttributeType\nAn attribute that uses a value transformer to derive its value.\nstatic let undefined: NSAttributeDescription.AttributeType\nAn attribute that doesn’t have an explicit type.\nstatic let uri: NSAttributeDescription.AttributeType\nAn attribute that stores a uniform resource identifier.\nstatic let uuid: NSAttributeDescription.AttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "entitiesByName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectmodel/1506203-entitiesbyname",
    "html": "Discussion\n\nEntities are instances of NSEntityDescription.\n\nSee Also\nManaging entities and configurations\nvar entities: [NSEntityDescription]\nThe entities in the model.\nvar configurations: [String]\nAll the available configuration names of the model.\nfunc entities(forConfigurationName: String?) -> [NSEntityDescription]?\nReturns the entities of the model for a specified configuration.\nfunc setEntities([NSEntityDescription], forConfigurationName: String)\nAssociates the specified entities with the model using the given configuration name.\nRelated Documentation\nclass func entity(forEntityName: String, in: NSManagedObjectContext) -> NSEntityDescription?\nReturns the entity with the specified name from the managed object model associated with the specified managed object context’s persistent store coordinator."
  },
  {
    "title": "setValue(_:forPragmaNamed:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoredescription/1640598-setvalue",
    "html": "Parameters\nvalue\n\nThe value of the pragma to be set.\n\nname\n\nThe name of the pragma to be set.\n\nDiscussion\n\nPragma options are for SQLite stores only. All pragma values must be specified as NSStringobjects. The fullfsync and synchronous pragmas control the tradeoff between write performance (write to disk speed and cache utilization) and durability (data loss/corruption sensitivity to power interruption). For more information on pragma settings, see http://sqlite.org/pragma.html.\n\nSee Also\nConfiguring a Persistent Store Description\nvar url: URL?\nThe URL that the store will use for its location.\nvar configuration: String?\nThe name of the configuration used by this store.\nvar timeout: TimeInterval\nThe connection timeout for the associated store.\nvar type: String\nThe type of store this description represents.\nvar isReadOnly: Bool\nA flag that indicates whether this store will be read-only.\nvar shouldAddStoreAsynchronously: Bool\nA flag that determines whether the store is added asynchronously.\nvar shouldInferMappingModelAutomatically: Bool\nA flag indicating whether a mapping model should be created automatically.\nvar shouldMigrateStoreAutomatically: Bool\nA flag indicating whether the associated persistent store should be migrated automatically.\nfunc setOption(NSObject?, forKey: String)\nSets an option on the store."
  },
  {
    "title": "NSInferredMappingModelError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsinferredmappingmodelerror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSManagedObjectConstraintMergeError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectconstraintmergeerror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSManagedObjectConstraintValidationError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectconstraintvalidationerror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSManagedObjectContextLockingError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontextlockingerror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSManagedObjectExternalRelationshipError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectexternalrelationshiperror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSManagedObjectModelReferenceNotFoundError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectmodelreferencenotfounderror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSManagedObjectReferentialIntegrityError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectreferentialintegrityerror",
    "html": "Discussion\n\nThe store is accessible, but the object corresponding to the fault cannot be found.\n\nSee Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSManagedObjectValidationError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectvalidationerror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSMigrationCancelledError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationcancellederror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSMigrationError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationerror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSMigrationManagerDestinationStoreError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationmanagerdestinationstoreerror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSMigrationManagerSourceStoreError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationmanagersourcestoreerror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSMigrationMissingMappingModelError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationmissingmappingmodelerror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSPersistentHistoryTokenExpiredError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorytokenexpirederror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSMigrationMissingSourceModelError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationmissingsourcemodelerror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSPersistentStoreIncompatibleSchemaError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoreincompatibleschemaerror",
    "html": "Discussion\n\nThis code pertains to database level errors such as a missing table.\n\nSee Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSPersistentStoreCoordinatorLockingError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinatorlockingerror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSPersistentStoreIncompatibleVersionHashError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoreincompatibleversionhasherror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSPersistentStoreIncompleteSaveError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoreincompletesaveerror",
    "html": "Discussion\n\nThe stores or objects that failed are in the corresponding user info dictionary of the NSError object.\n\nSee Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSPersistentStoreOpenError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoreopenerror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSPersistentStoreSaveConflictsError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoresaveconflictserror",
    "html": "Discussion\n\nThe NSError object’s user info dictionary contains the key NSPersistentStoreSaveConflictsErrorKey.\n\nSee Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSPersistentStoreSaveError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoresaveerror",
    "html": "Discussion\n\nThis code pertains to errors such as permissions problems.\n\nSee Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSPersistentStoreTimeoutError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoretimeouterror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSPersistentStoreTypeMismatchError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoretypemismatcherror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSStagedMigrationBackwardMigrationError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsstagedmigrationbackwardmigrationerror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSSQLiteError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nssqliteerror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSStagedMigrationFrameworkVersionMismatchError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsstagedmigrationframeworkversionmismatcherror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSValidationInvalidURIError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsvalidationinvalidurierror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSValidationMultipleErrorsError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsvalidationmultipleerrorserror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "mutableSetValueForKey: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1807259-mutablesetvalueforkey",
    "html": "Parameters\nkey\n\nThe name of one of the receiver's to-many relationships.\n\nOverview\n\nIf key is not a property defined by the model, the method raises an exception.\n\nThis method is overridden by NSManagedObject to access the managed object’s generic dictionary storage unless the receiver’s class explicitly provides key-value coding compliant accessor methods for key.\n\nImportant\n\nYou must not override this method.\n\nSpecial Considerations\n\nFor performance reasons, the proxy object returned by managed objects for mutableSetValueForKey: does not support set<Key>: style setters for relationships. For example, if you have a to-many relationship employees of a Department class and implement accessor methods employees and setEmployees:, then manipulate the relationship using the proxy object returned by mutableSetValueForKey:@\"employees\", setEmployees: is not invoked. You should implement the other mutable proxy accessor overrides instead (see Managed Object Accessor Methods in Core Data Programming Guide).\n\nSee Also\nSupporting Key-Value Coding\n- valueForKey:\nReturns the value for the property specified by key.\n- setValue:forKey:\nSets the specified property of the managed object to the specified value.\n- primitiveValueForKey:\nReturns the value for the specified property from the managed object’s private internal storage .\n- setPrimitiveValue:forKey:\nSets the value of a given property in the managed object's private internal storage.\n- objectIDsForRelationshipNamed:\nReturns the object IDs for all of the managed objects that are in the named relationship.\nRelated Documentation\n- setObservationInfo:\nSets the observation info of the managed object."
  },
  {
    "title": "entities | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectmodel/1506318-entities",
    "html": "Discussion\n\nEntities are instances of NSEntityDescription.\n\nSpecial Considerations\n\nSetting the entities for an object model raises an exception if the object model has been used by an object graph manager.\n\nSee Also\nManaging entities and configurations\nvar entitiesByName: [String : NSEntityDescription]\nThe entities of the model, keyed by name.\nvar configurations: [String]\nAll the available configuration names of the model.\nfunc entities(forConfigurationName: String?) -> [NSEntityDescription]?\nReturns the entities of the model for a specified configuration.\nfunc setEntities([NSEntityDescription], forConfigurationName: String)\nAssociates the specified entities with the model using the given configuration name."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/attributetype/3747485",
    "html": "Parameters\nlhs\n\nAn attribute type to compare.\n\nrhs\n\nAnother attribute type to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For values a and b, a != b implies that a == b is false. This is the default implementation of the not-equal-to operator (!=) for any type that conforms to the Equatable protocol."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/attributetype/3747493-hash",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining components of this attribute type.\n\nSee Also\nHashing an Attribute Type\nvar hashValue: Int\nThe attribute type’s computed hash value."
  },
  {
    "title": "referenceObject(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsatomicstore/1388046-referenceobject",
    "html": "Parameters\nobjectID\n\nA managed object ID.\n\nReturn Value\n\nThe reference object for objectID.\n\nDiscussion\n\nSubclasses should invoke this method to extract the reference data from the object ID for each cache node if the data is to be made persistent.\n\nSee Also\nUtility Methods\nfunc cacheNodes() -> Set<NSAtomicStoreCacheNode>\nReturns the set of cache nodes registered with the receiver.\nfunc cacheNode(for: NSManagedObjectID) -> NSAtomicStoreCacheNode?\nReturns the cache node for a given managed object ID."
  },
  {
    "title": "cacheNode(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsatomicstore/1388040-cachenode",
    "html": "Parameters\nobjectID\n\nA managed object ID.\n\nReturn Value\n\nThe cache node for objectID.\n\nDiscussion\n\nThis method is normally used by cache nodes to locate related cache nodes (by relationships).\n\nSee Also\nUtility Methods\nfunc cacheNodes() -> Set<NSAtomicStoreCacheNode>\nReturns the set of cache nodes registered with the receiver.\nfunc referenceObject(for: NSManagedObjectID) -> Any\nReturns the reference object for a given managed object ID."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/scheduledtasktype/3763160",
    "html": "Parameters\nlhs\n\nA scheduled task type to compare.\n\nrhs\n\nAnother scheduled task type to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For values a and b, a != b implies that a == b is false. This is the default implementation of the not-equal-to operator (!=) for any type that conforms to the Equatable protocol.\n\nSee Also\nComparing Scheduled Task Types\nstatic func == (NSManagedObjectContext.ScheduledTaskType, NSManagedObjectContext.ScheduledTaskType) -> Bool\nReturns a Boolean value that indicates whether two scheduled task types are equal."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/attributetype/3747494-hashvalue",
    "html": "See Also\nHashing an Attribute Type\nfunc hash(into: inout Hasher)\nHashes the components of the attribute type using the provided hasher."
  },
  {
    "title": "NSPersistentHistoryResultType.transactionsAndChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistoryresulttype/transactionsandchanges",
    "html": "See Also\nResult Types\ncase statusOnly\nThe status of the persistent history change request.\ncase count\nThe number of persistent history changes since the requested date, token, or transaction.\ncase objectIDs\nThe identifiers of managed objects changed since the requested date, token, or transaction.\ncase transactionsOnly\nThe persistent history transactions since the requested date, token, or transaction.\ncase changesOnly\nThe persistent history changes since the requested date, token, or transaction."
  },
  {
    "title": "setEntities(_:forConfigurationName:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectmodel/1506287-setentities",
    "html": "Parameters\nentities\n\nAn array of instances of NSEntityDescription.\n\nconfiguration\n\nA name for the configuration.\n\nDiscussion\n\nThis method raises an exception if the receiver has been used by an object graph manager.\n\nSee Also\nManaging entities and configurations\nvar entities: [NSEntityDescription]\nThe entities in the model.\nvar entitiesByName: [String : NSEntityDescription]\nThe entities of the model, keyed by name.\nvar configurations: [String]\nAll the available configuration names of the model.\nfunc entities(forConfigurationName: String?) -> [NSEntityDescription]?\nReturns the entities of the model for a specified configuration."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506673-init",
    "html": "See Also\nDeprecated instance methods\ninit(concurrencyType: NSManagedObjectContextConcurrencyType)\nCreates a context that uses the specified concurrency type.\nfunc lock()\nAttempts to acquire a lock on the context.\nDeprecated\nfunc tryLock() -> Bool\nAttempts to acquire a lock.\nDeprecated\nfunc unlock()\nRelinquishes a previously acquired lock.\nDeprecated"
  },
  {
    "title": "NSPersistentStoreUbiquitousContentURLKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoreubiquitouscontenturlkey",
    "html": "Discussion\n\nIn iOS 6 and OS X 10.8 and below, this option is required for ubiquitous content to function. In iOS 7 and macOS 10.9 and later, it is optional.\n\nSee Also\nDeprecated\nlet NSExternalRecordsDirectoryOption: String\nOption indicating the directory where Spotlight external record files should be written to.\nDeprecated\nlet NSExternalRecordExtensionOption: String\nOption indicating the file extension to use for Spotlight external record files.\nDeprecated\nlet NSExternalRecordsFileFormatOption: String\nOption to specify the file format of a Spotlight external records.\nDeprecated\nlet NSPersistentStoreUbiquitousContentNameKey: String\nOption to specify that a persistent store has a given name in ubiquity.\nDeprecated\nlet NSPersistentStoreUbiquitousPeerTokenOption: String\nThe corresponding value is an optionally specified string which will be mixed in to Core Data’s identifier for each iCloud peer. The value must be an alphanumeric string without any special characters, whitespace or punctuation. The primary use for this option is to allow multiple applications on the same peer (device) to share a Core Data store integrated with iCloud. Each application will require its own store file.\nDeprecated\nlet NSPersistentStoreRemoveUbiquitousMetadataOption: String\nThe corresponding value is an NSNumber object representing a boolean that indicates whether the receiver should remove all associated ubiquity metadata from a persistent store. You typically use this option during migration or copying to disassociate a persistent store file from an iCloud account.\nDeprecated\nlet NSPersistentStoreUbiquitousContainerIdentifierKey: String\nThe corresponding value is a string specifying the iCloud container identifier Core Data should pass to url(forUbiquityContainerIdentifier:).\nDeprecated\nlet NSPersistentStoreRebuildFromUbiquitousContentOption: String\nThe corresponding value is an NSNumber object representing a boolean that indicates whether the receiver should erase the local store file and rebuild it from the iCloud data in Mobile Documents.\nDeprecated"
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nssnapshoteventtype/1506338-init",
    "html": "Parameters\nrawValue\n\nThe raw unsigned integer value for the snapshot event."
  },
  {
    "title": "NSPersistentCloudKitContainerEventResult.ResultType.events | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainereventresult/resulttype/events",
    "html": "See Also\nResult Types\ncase countEvents\nThe number of CloudKit container events that match the event request."
  },
  {
    "title": "NSPersistentCloudKitContainerEventResult.ResultType.countEvents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainereventresult/resulttype/countevents",
    "html": "See Also\nResult Types\ncase events\nThe persistent CloudKit container events that match the event request."
  },
  {
    "title": "NSMergePolicyType.mergeByPropertyStoreTrumpMergePolicyType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmergepolicytype/mergebypropertystoretrumpmergepolicytype",
    "html": "Discussion\n\nA policy that merges conflicts between the persistent store’s version of the object and the current in-memory version by individual property, with external changes trumping in-memory changes.\n\nSee Also\nPolicies\ncase errorMergePolicyType\nThe default merge policy for all managed object contexts.\ncase mergeByPropertyObjectTrumpMergePolicyType\nA property-based merge policy that applies in-memory changes.\ncase overwriteMergePolicyType\nA merge policy type that overwrites the entire stored object.\ncase rollbackMergePolicyType\nA merge policy that discards unsaved changes."
  },
  {
    "title": "NSMergePolicyType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmergepolicytype",
    "html": "Topics\nPolicies\ncase errorMergePolicyType\nThe default merge policy for all managed object contexts.\ncase mergeByPropertyStoreTrumpMergePolicyType\nA property-based merge policy that applies external changes.\ncase mergeByPropertyObjectTrumpMergePolicyType\nA property-based merge policy that applies in-memory changes.\ncase overwriteMergePolicyType\nA merge policy type that overwrites the entire stored object.\ncase rollbackMergePolicyType\nA merge policy that discards unsaved changes.\nRelationships\nConforms To\nSendable\nSee Also\nPolicies\nvar NSErrorMergePolicy: AnyObject\nThe default merge policy for all managed object contexts.\nvar NSMergeByPropertyStoreTrumpMergePolicy: AnyObject\nA property-based merge policy that applies external changes.\nvar NSMergeByPropertyObjectTrumpMergePolicy: AnyObject\nA property-based merge policy that applies in-memory changes.\nvar NSOverwriteMergePolicy: AnyObject\nA merge policy that overwrites the entire stored object.\nvar NSRollbackMergePolicy: AnyObject\nA merge policy that discards unsaved changes."
  },
  {
    "title": "NSMergePolicyType.rollbackMergePolicyType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmergepolicytype/rollbackmergepolicytype",
    "html": "Discussion\n\nThis policy merges conflicts between the persistent store’s version of the object and the current in-memory version by discarding unsaved changes.\n\nSee Also\nPolicies\ncase errorMergePolicyType\nThe default merge policy for all managed object contexts.\ncase mergeByPropertyStoreTrumpMergePolicyType\nA property-based merge policy that applies external changes.\ncase mergeByPropertyObjectTrumpMergePolicyType\nA property-based merge policy that applies in-memory changes.\ncase overwriteMergePolicyType\nA merge policy type that overwrites the entire stored object."
  },
  {
    "title": "NSMergePolicyType.overwriteMergePolicyType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmergepolicytype/overwritemergepolicytype",
    "html": "Discussion\n\nThis policy merges conflicts between the persistent store’s version of the object and the current in-memory version by saving the entire in-memory object to the persistent store.\n\nSee Also\nPolicies\ncase errorMergePolicyType\nThe default merge policy for all managed object contexts.\ncase mergeByPropertyStoreTrumpMergePolicyType\nA property-based merge policy that applies external changes.\ncase mergeByPropertyObjectTrumpMergePolicyType\nA property-based merge policy that applies in-memory changes.\ncase rollbackMergePolicyType\nA merge policy that discards unsaved changes."
  },
  {
    "title": "NSValidationRelationshipLacksMinimumCountError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsvalidationrelationshiplacksminimumcounterror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSValidationNumberTooLargeError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsvalidationnumbertoolargeerror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "NSValidationDateTooSoonError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsvalidationdatetoosoonerror",
    "html": "See Also\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern."
  },
  {
    "title": "url | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoredescription/1640616-url",
    "html": "See Also\nConfiguring a Persistent Store Description\nvar configuration: String?\nThe name of the configuration used by this store.\nvar timeout: TimeInterval\nThe connection timeout for the associated store.\nvar type: String\nThe type of store this description represents.\nvar isReadOnly: Bool\nA flag that indicates whether this store will be read-only.\nvar shouldAddStoreAsynchronously: Bool\nA flag that determines whether the store is added asynchronously.\nvar shouldInferMappingModelAutomatically: Bool\nA flag indicating whether a mapping model should be created automatically.\nvar shouldMigrateStoreAutomatically: Bool\nA flag indicating whether the associated persistent store should be migrated automatically.\nfunc setOption(NSObject?, forKey: String)\nSets an option on the store.\nfunc setValue(NSObject?, forPragmaNamed: String)\nAllows you to set pragmas for the SQLite store."
  },
  {
    "title": "NSManagedObjectModelReference | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectmodelreference",
    "html": "Topics\nCreating a reference\ninit(model: NSManagedObjectModel, versionChecksum: String)\nCreates an object model reference for the specified model.\ninit(fileURL: URL, versionChecksum: String)\nCreates an object model reference for the model at the specified file URL.\ninit(name: String, in: Bundle?, versionChecksum: String)\nCreates an object model reference for the named model in the specified bundle.\ninit(entityVersionHashes: [AnyHashable : Any], in: Bundle?, versionChecksum: String)\nCreates an object model reference with the entities corresponding to the specified entity version hashes.\nResolving the model object\nvar resolvedModel: NSManagedObjectModel\nThe resolved object model.\nvar versionChecksum: String\nThe version checksum of the resolved model.\nRelationships\nInherits From\nNSObject\nSee Also\nCreating a custom migration stage\ninit(migratingFrom: NSManagedObjectModelReference, to: NSManagedObjectModelReference)\nCreates a custom migration stage with the specified source and destination model references."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nslightweightmigrationstage/4211265-init",
    "html": "Parameters\nchecksums\n\nThe array of version checksums.\n\nDiscussion\n\nTo determine an object model’s version checksum, use its versionChecksum property. Alternatively, you can find the checksum in the versioned model’s VersionInfo.plist file or in Xcode’s build log."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/notificationkey/3619537-hashvalue",
    "html": "See Also\nCreating and Comparing Keys\ninit?(rawValue: String)\nCreates a notification key using the specified raw value.\nvar rawValue: String\nThe raw string value of the key.\ntypealias NSManagedObjectContext.NotificationKey.RawValue\nThe raw type of notification key values.\nfunc hash(into: inout Hasher)\nHashes the essential components of the value by feeding them into the specified hasher."
  },
  {
    "title": "rawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/attributetype/3747500-rawvalue",
    "html": "Relationships\nFrom Protocol\nRawRepresentable\nSee Also\nGetting an Attribute Type’s Raw Value\ntypealias NSAttributeDescription.AttributeType.RawValue\nThe type the conforming type uses to represent its values."
  },
  {
    "title": "uuid | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/attributetype/3747505-uuid",
    "html": "See Also\nAttribute Types\nstatic let binaryData: NSAttributeDescription.AttributeType\nAn attribute that stores binary data.\nstatic let boolean: NSAttributeDescription.AttributeType\nAn attribute that stores a Boolean value.\nstatic let composite: NSAttributeDescription.AttributeType\nAn attribute that derives its value by composing other attributes.\nstatic let date: NSAttributeDescription.AttributeType\nAn attribute that stores a date.\nstatic let decimal: NSAttributeDescription.AttributeType\nAn attribute that stores a decimal value.\nstatic let double: NSAttributeDescription.AttributeType\nAn attribute that stores a double value.\nstatic let float: NSAttributeDescription.AttributeType\nAn attribute that stores a float value.\nstatic let integer16: NSAttributeDescription.AttributeType\nAn attribute that stores a 16-bit signed integer value.\nstatic let integer32: NSAttributeDescription.AttributeType\nAn attribute that stores a 32-bit signed integer value.\nstatic let integer64: NSAttributeDescription.AttributeType\nAn attribute that stores a 64-bit signed integer value.\nstatic let objectID: NSAttributeDescription.AttributeType\nAn attribute that stores a managed object’s ID.\nstatic let string: NSAttributeDescription.AttributeType\nAn attribute that stores a string.\nstatic let transformable: NSAttributeDescription.AttributeType\nAn attribute that uses a value transformer to derive its value.\nstatic let undefined: NSAttributeDescription.AttributeType\nAn attribute that doesn’t have an explicit type.\nstatic let uri: NSAttributeDescription.AttributeType\nAn attribute that stores a uniform resource identifier."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/attributetype/3747495-init",
    "html": "Parameters\nrawValue\n\nThe raw attribute type. For possible values, see NSAttributeType.\n\nRelationships\nFrom Protocol\nRawRepresentable"
  },
  {
    "title": "uri | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/attributetype/3747504-uri",
    "html": "See Also\nAttribute Types\nstatic let binaryData: NSAttributeDescription.AttributeType\nAn attribute that stores binary data.\nstatic let boolean: NSAttributeDescription.AttributeType\nAn attribute that stores a Boolean value.\nstatic let composite: NSAttributeDescription.AttributeType\nAn attribute that derives its value by composing other attributes.\nstatic let date: NSAttributeDescription.AttributeType\nAn attribute that stores a date.\nstatic let decimal: NSAttributeDescription.AttributeType\nAn attribute that stores a decimal value.\nstatic let double: NSAttributeDescription.AttributeType\nAn attribute that stores a double value.\nstatic let float: NSAttributeDescription.AttributeType\nAn attribute that stores a float value.\nstatic let integer16: NSAttributeDescription.AttributeType\nAn attribute that stores a 16-bit signed integer value.\nstatic let integer32: NSAttributeDescription.AttributeType\nAn attribute that stores a 32-bit signed integer value.\nstatic let integer64: NSAttributeDescription.AttributeType\nAn attribute that stores a 64-bit signed integer value.\nstatic let objectID: NSAttributeDescription.AttributeType\nAn attribute that stores a managed object’s ID.\nstatic let string: NSAttributeDescription.AttributeType\nAn attribute that stores a string.\nstatic let transformable: NSAttributeDescription.AttributeType\nAn attribute that uses a value transformer to derive its value.\nstatic let undefined: NSAttributeDescription.AttributeType\nAn attribute that doesn’t have an explicit type.\nstatic let uuid: NSAttributeDescription.AttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "integer16 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/attributetype/3747496-integer16",
    "html": "See Also\nAttribute Types\nstatic let binaryData: NSAttributeDescription.AttributeType\nAn attribute that stores binary data.\nstatic let boolean: NSAttributeDescription.AttributeType\nAn attribute that stores a Boolean value.\nstatic let composite: NSAttributeDescription.AttributeType\nAn attribute that derives its value by composing other attributes.\nstatic let date: NSAttributeDescription.AttributeType\nAn attribute that stores a date.\nstatic let decimal: NSAttributeDescription.AttributeType\nAn attribute that stores a decimal value.\nstatic let double: NSAttributeDescription.AttributeType\nAn attribute that stores a double value.\nstatic let float: NSAttributeDescription.AttributeType\nAn attribute that stores a float value.\nstatic let integer32: NSAttributeDescription.AttributeType\nAn attribute that stores a 32-bit signed integer value.\nstatic let integer64: NSAttributeDescription.AttributeType\nAn attribute that stores a 64-bit signed integer value.\nstatic let objectID: NSAttributeDescription.AttributeType\nAn attribute that stores a managed object’s ID.\nstatic let string: NSAttributeDescription.AttributeType\nAn attribute that stores a string.\nstatic let transformable: NSAttributeDescription.AttributeType\nAn attribute that uses a value transformer to derive its value.\nstatic let undefined: NSAttributeDescription.AttributeType\nAn attribute that doesn’t have an explicit type.\nstatic let uri: NSAttributeDescription.AttributeType\nAn attribute that stores a uniform resource identifier.\nstatic let uuid: NSAttributeDescription.AttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "string | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/attributetype/3747501-string",
    "html": "See Also\nAttribute Types\nstatic let binaryData: NSAttributeDescription.AttributeType\nAn attribute that stores binary data.\nstatic let boolean: NSAttributeDescription.AttributeType\nAn attribute that stores a Boolean value.\nstatic let composite: NSAttributeDescription.AttributeType\nAn attribute that derives its value by composing other attributes.\nstatic let date: NSAttributeDescription.AttributeType\nAn attribute that stores a date.\nstatic let decimal: NSAttributeDescription.AttributeType\nAn attribute that stores a decimal value.\nstatic let double: NSAttributeDescription.AttributeType\nAn attribute that stores a double value.\nstatic let float: NSAttributeDescription.AttributeType\nAn attribute that stores a float value.\nstatic let integer16: NSAttributeDescription.AttributeType\nAn attribute that stores a 16-bit signed integer value.\nstatic let integer32: NSAttributeDescription.AttributeType\nAn attribute that stores a 32-bit signed integer value.\nstatic let integer64: NSAttributeDescription.AttributeType\nAn attribute that stores a 64-bit signed integer value.\nstatic let objectID: NSAttributeDescription.AttributeType\nAn attribute that stores a managed object’s ID.\nstatic let transformable: NSAttributeDescription.AttributeType\nAn attribute that uses a value transformer to derive its value.\nstatic let undefined: NSAttributeDescription.AttributeType\nAn attribute that doesn’t have an explicit type.\nstatic let uri: NSAttributeDescription.AttributeType\nAn attribute that stores a uniform resource identifier.\nstatic let uuid: NSAttributeDescription.AttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "double | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/attributetype/3747491-double",
    "html": "See Also\nAttribute Types\nstatic let binaryData: NSAttributeDescription.AttributeType\nAn attribute that stores binary data.\nstatic let boolean: NSAttributeDescription.AttributeType\nAn attribute that stores a Boolean value.\nstatic let composite: NSAttributeDescription.AttributeType\nAn attribute that derives its value by composing other attributes.\nstatic let date: NSAttributeDescription.AttributeType\nAn attribute that stores a date.\nstatic let decimal: NSAttributeDescription.AttributeType\nAn attribute that stores a decimal value.\nstatic let float: NSAttributeDescription.AttributeType\nAn attribute that stores a float value.\nstatic let integer16: NSAttributeDescription.AttributeType\nAn attribute that stores a 16-bit signed integer value.\nstatic let integer32: NSAttributeDescription.AttributeType\nAn attribute that stores a 32-bit signed integer value.\nstatic let integer64: NSAttributeDescription.AttributeType\nAn attribute that stores a 64-bit signed integer value.\nstatic let objectID: NSAttributeDescription.AttributeType\nAn attribute that stores a managed object’s ID.\nstatic let string: NSAttributeDescription.AttributeType\nAn attribute that stores a string.\nstatic let transformable: NSAttributeDescription.AttributeType\nAn attribute that uses a value transformer to derive its value.\nstatic let undefined: NSAttributeDescription.AttributeType\nAn attribute that doesn’t have an explicit type.\nstatic let uri: NSAttributeDescription.AttributeType\nAn attribute that stores a uniform resource identifier.\nstatic let uuid: NSAttributeDescription.AttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "float | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/attributetype/3747492-float",
    "html": "See Also\nAttribute Types\nstatic let binaryData: NSAttributeDescription.AttributeType\nAn attribute that stores binary data.\nstatic let boolean: NSAttributeDescription.AttributeType\nAn attribute that stores a Boolean value.\nstatic let composite: NSAttributeDescription.AttributeType\nAn attribute that derives its value by composing other attributes.\nstatic let date: NSAttributeDescription.AttributeType\nAn attribute that stores a date.\nstatic let decimal: NSAttributeDescription.AttributeType\nAn attribute that stores a decimal value.\nstatic let double: NSAttributeDescription.AttributeType\nAn attribute that stores a double value.\nstatic let integer16: NSAttributeDescription.AttributeType\nAn attribute that stores a 16-bit signed integer value.\nstatic let integer32: NSAttributeDescription.AttributeType\nAn attribute that stores a 32-bit signed integer value.\nstatic let integer64: NSAttributeDescription.AttributeType\nAn attribute that stores a 64-bit signed integer value.\nstatic let objectID: NSAttributeDescription.AttributeType\nAn attribute that stores a managed object’s ID.\nstatic let string: NSAttributeDescription.AttributeType\nAn attribute that stores a string.\nstatic let transformable: NSAttributeDescription.AttributeType\nAn attribute that uses a value transformer to derive its value.\nstatic let undefined: NSAttributeDescription.AttributeType\nAn attribute that doesn’t have an explicit type.\nstatic let uri: NSAttributeDescription.AttributeType\nAn attribute that stores a uniform resource identifier.\nstatic let uuid: NSAttributeDescription.AttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "date | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/attributetype/3747489-date",
    "html": "See Also\nAttribute Types\nstatic let binaryData: NSAttributeDescription.AttributeType\nAn attribute that stores binary data.\nstatic let boolean: NSAttributeDescription.AttributeType\nAn attribute that stores a Boolean value.\nstatic let composite: NSAttributeDescription.AttributeType\nAn attribute that derives its value by composing other attributes.\nstatic let decimal: NSAttributeDescription.AttributeType\nAn attribute that stores a decimal value.\nstatic let double: NSAttributeDescription.AttributeType\nAn attribute that stores a double value.\nstatic let float: NSAttributeDescription.AttributeType\nAn attribute that stores a float value.\nstatic let integer16: NSAttributeDescription.AttributeType\nAn attribute that stores a 16-bit signed integer value.\nstatic let integer32: NSAttributeDescription.AttributeType\nAn attribute that stores a 32-bit signed integer value.\nstatic let integer64: NSAttributeDescription.AttributeType\nAn attribute that stores a 64-bit signed integer value.\nstatic let objectID: NSAttributeDescription.AttributeType\nAn attribute that stores a managed object’s ID.\nstatic let string: NSAttributeDescription.AttributeType\nAn attribute that stores a string.\nstatic let transformable: NSAttributeDescription.AttributeType\nAn attribute that uses a value transformer to derive its value.\nstatic let undefined: NSAttributeDescription.AttributeType\nAn attribute that doesn’t have an explicit type.\nstatic let uri: NSAttributeDescription.AttributeType\nAn attribute that stores a uniform resource identifier.\nstatic let uuid: NSAttributeDescription.AttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "composite | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/attributetype/4183758-composite",
    "html": "Discussion\n\nComposite attributes support all attribute types except the following:\n\nundefined\n\nobjectID\n\nbinaryData (when allowsExternalBinaryDataStorage is true)\n\nFor more information, see NSCompositeAttributeDescription.\n\nSee Also\nAttribute Types\nstatic let binaryData: NSAttributeDescription.AttributeType\nAn attribute that stores binary data.\nstatic let boolean: NSAttributeDescription.AttributeType\nAn attribute that stores a Boolean value.\nstatic let date: NSAttributeDescription.AttributeType\nAn attribute that stores a date.\nstatic let decimal: NSAttributeDescription.AttributeType\nAn attribute that stores a decimal value.\nstatic let double: NSAttributeDescription.AttributeType\nAn attribute that stores a double value.\nstatic let float: NSAttributeDescription.AttributeType\nAn attribute that stores a float value.\nstatic let integer16: NSAttributeDescription.AttributeType\nAn attribute that stores a 16-bit signed integer value.\nstatic let integer32: NSAttributeDescription.AttributeType\nAn attribute that stores a 32-bit signed integer value.\nstatic let integer64: NSAttributeDescription.AttributeType\nAn attribute that stores a 64-bit signed integer value.\nstatic let objectID: NSAttributeDescription.AttributeType\nAn attribute that stores a managed object’s ID.\nstatic let string: NSAttributeDescription.AttributeType\nAn attribute that stores a string.\nstatic let transformable: NSAttributeDescription.AttributeType\nAn attribute that uses a value transformer to derive its value.\nstatic let undefined: NSAttributeDescription.AttributeType\nAn attribute that doesn’t have an explicit type.\nstatic let uri: NSAttributeDescription.AttributeType\nAn attribute that stores a uniform resource identifier.\nstatic let uuid: NSAttributeDescription.AttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "binaryData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/attributetype/3747487-binarydata",
    "html": "See Also\nAttribute Types\nstatic let boolean: NSAttributeDescription.AttributeType\nAn attribute that stores a Boolean value.\nstatic let composite: NSAttributeDescription.AttributeType\nAn attribute that derives its value by composing other attributes.\nstatic let date: NSAttributeDescription.AttributeType\nAn attribute that stores a date.\nstatic let decimal: NSAttributeDescription.AttributeType\nAn attribute that stores a decimal value.\nstatic let double: NSAttributeDescription.AttributeType\nAn attribute that stores a double value.\nstatic let float: NSAttributeDescription.AttributeType\nAn attribute that stores a float value.\nstatic let integer16: NSAttributeDescription.AttributeType\nAn attribute that stores a 16-bit signed integer value.\nstatic let integer32: NSAttributeDescription.AttributeType\nAn attribute that stores a 32-bit signed integer value.\nstatic let integer64: NSAttributeDescription.AttributeType\nAn attribute that stores a 64-bit signed integer value.\nstatic let objectID: NSAttributeDescription.AttributeType\nAn attribute that stores a managed object’s ID.\nstatic let string: NSAttributeDescription.AttributeType\nAn attribute that stores a string.\nstatic let transformable: NSAttributeDescription.AttributeType\nAn attribute that uses a value transformer to derive its value.\nstatic let undefined: NSAttributeDescription.AttributeType\nAn attribute that doesn’t have an explicit type.\nstatic let uri: NSAttributeDescription.AttributeType\nAn attribute that stores a uniform resource identifier.\nstatic let uuid: NSAttributeDescription.AttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "boolean | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/attributetype/3747488-boolean",
    "html": "See Also\nAttribute Types\nstatic let binaryData: NSAttributeDescription.AttributeType\nAn attribute that stores binary data.\nstatic let composite: NSAttributeDescription.AttributeType\nAn attribute that derives its value by composing other attributes.\nstatic let date: NSAttributeDescription.AttributeType\nAn attribute that stores a date.\nstatic let decimal: NSAttributeDescription.AttributeType\nAn attribute that stores a decimal value.\nstatic let double: NSAttributeDescription.AttributeType\nAn attribute that stores a double value.\nstatic let float: NSAttributeDescription.AttributeType\nAn attribute that stores a float value.\nstatic let integer16: NSAttributeDescription.AttributeType\nAn attribute that stores a 16-bit signed integer value.\nstatic let integer32: NSAttributeDescription.AttributeType\nAn attribute that stores a 32-bit signed integer value.\nstatic let integer64: NSAttributeDescription.AttributeType\nAn attribute that stores a 64-bit signed integer value.\nstatic let objectID: NSAttributeDescription.AttributeType\nAn attribute that stores a managed object’s ID.\nstatic let string: NSAttributeDescription.AttributeType\nAn attribute that stores a string.\nstatic let transformable: NSAttributeDescription.AttributeType\nAn attribute that uses a value transformer to derive its value.\nstatic let undefined: NSAttributeDescription.AttributeType\nAn attribute that doesn’t have an explicit type.\nstatic let uri: NSAttributeDescription.AttributeType\nAn attribute that stores a uniform resource identifier.\nstatic let uuid: NSAttributeDescription.AttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "shouldAddStoreAsynchronously | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoredescription/1640599-shouldaddstoreasynchronously",
    "html": "Discussion\n\nBy default, the store is added to the NSPersistentStoreCoordinator synchronously on the calling thread. If this flag is set to true, the store is added asynchronously on a background queue. The default for this flag is false.\n\nSee Also\nConfiguring a Persistent Store Description\nvar url: URL?\nThe URL that the store will use for its location.\nvar configuration: String?\nThe name of the configuration used by this store.\nvar timeout: TimeInterval\nThe connection timeout for the associated store.\nvar type: String\nThe type of store this description represents.\nvar isReadOnly: Bool\nA flag that indicates whether this store will be read-only.\nvar shouldInferMappingModelAutomatically: Bool\nA flag indicating whether a mapping model should be created automatically.\nvar shouldMigrateStoreAutomatically: Bool\nA flag indicating whether the associated persistent store should be migrated automatically.\nfunc setOption(NSObject?, forKey: String)\nSets an option on the store.\nfunc setValue(NSObject?, forPragmaNamed: String)\nAllows you to set pragmas for the SQLite store."
  },
  {
    "title": "timeout | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoredescription/1640587-timeout",
    "html": "Discussion\n\nThis is a convenience method for setting the NSPersistentStoreTimeoutOption on the associated store.\n\nSee Also\nConfiguring a Persistent Store Description\nvar url: URL?\nThe URL that the store will use for its location.\nvar configuration: String?\nThe name of the configuration used by this store.\nvar type: String\nThe type of store this description represents.\nvar isReadOnly: Bool\nA flag that indicates whether this store will be read-only.\nvar shouldAddStoreAsynchronously: Bool\nA flag that determines whether the store is added asynchronously.\nvar shouldInferMappingModelAutomatically: Bool\nA flag indicating whether a mapping model should be created automatically.\nvar shouldMigrateStoreAutomatically: Bool\nA flag indicating whether the associated persistent store should be migrated automatically.\nfunc setOption(NSObject?, forKey: String)\nSets an option on the store.\nfunc setValue(NSObject?, forPragmaNamed: String)\nAllows you to set pragmas for the SQLite store."
  },
  {
    "title": "configuration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoredescription/1640634-configuration",
    "html": "Discussion\n\nThis displays the name of a configuration in the receiver's managed object model that will be used by the new store. The configuration can be nil, in which case no other configurations are allowed.\n\nSee Also\nConfiguring a Persistent Store Description\nvar url: URL?\nThe URL that the store will use for its location.\nvar timeout: TimeInterval\nThe connection timeout for the associated store.\nvar type: String\nThe type of store this description represents.\nvar isReadOnly: Bool\nA flag that indicates whether this store will be read-only.\nvar shouldAddStoreAsynchronously: Bool\nA flag that determines whether the store is added asynchronously.\nvar shouldInferMappingModelAutomatically: Bool\nA flag indicating whether a mapping model should be created automatically.\nvar shouldMigrateStoreAutomatically: Bool\nA flag indicating whether the associated persistent store should be migrated automatically.\nfunc setOption(NSObject?, forKey: String)\nSets an option on the store.\nfunc setValue(NSObject?, forPragmaNamed: String)\nAllows you to set pragmas for the SQLite store."
  },
  {
    "title": "isReadOnly | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoredescription/1640626-isreadonly",
    "html": "Discussion\n\nThis is a convenience method for setting the NSReadOnlyPersistentStoreOption on the associated store.\n\nSee Also\nConfiguring a Persistent Store Description\nvar url: URL?\nThe URL that the store will use for its location.\nvar configuration: String?\nThe name of the configuration used by this store.\nvar timeout: TimeInterval\nThe connection timeout for the associated store.\nvar type: String\nThe type of store this description represents.\nvar shouldAddStoreAsynchronously: Bool\nA flag that determines whether the store is added asynchronously.\nvar shouldInferMappingModelAutomatically: Bool\nA flag indicating whether a mapping model should be created automatically.\nvar shouldMigrateStoreAutomatically: Bool\nA flag indicating whether the associated persistent store should be migrated automatically.\nfunc setOption(NSObject?, forKey: String)\nSets an option on the store.\nfunc setValue(NSObject?, forPragmaNamed: String)\nAllows you to set pragmas for the SQLite store."
  },
  {
    "title": "newCacheNode(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsatomicstore/1388052-newcachenode",
    "html": "Parameters\nmanagedObject\n\nA managed object.\n\nReturn Value\n\nA new cache node for managedObject.\n\nDiscussion\n\nThis method is invoked by the framework during a save operation, once for each newly-inserted managed object. It should pull information from the managed object and return a cache node containing the information (the node will be registered by the framework).\n\nSpecial Considerations\n\nYou must override this method.\n\nSee Also\nUpdating Cache Nodes\nfunc newReferenceObject(for: NSManagedObject) -> Any\nReturns a new reference object for a given managed object.\nfunc updateCacheNode(NSAtomicStoreCacheNode, from: NSManagedObject)\nUpdates the given cache node using the values in a given managed object.\nfunc willRemoveCacheNodes(Set<NSAtomicStoreCacheNode>)\nMethod invoked before the store removes the given collection of cache nodes."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/scheduledtasktype/3763163-hash",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining components of this scheduled task type.\n\nRelationships\nFrom Protocol\nHashable\nSee Also\nHashing a Scheduled Task Type\nvar hashValue: Int\nThe scheduled task type’s computed hash value."
  },
  {
    "title": "unlock() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506839-unlock",
    "html": "See Also\nDeprecated instance methods\ninit(concurrencyType: NSManagedObjectContextConcurrencyType)\nCreates a context that uses the specified concurrency type.\ninit()\nDeprecated\nfunc lock()\nAttempts to acquire a lock on the context.\nDeprecated\nfunc tryLock() -> Bool\nAttempts to acquire a lock.\nDeprecated"
  },
  {
    "title": "cacheNodes() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsatomicstore/1388042-cachenodes",
    "html": "Return Value\n\nThe set of cache nodes registered with the receiver.\n\nDiscussion\n\nYou should modify this collection using addCacheNodes(_:): and willRemoveCacheNodes(_:).\n\nSee Also\nUtility Methods\nfunc cacheNode(for: NSManagedObjectID) -> NSAtomicStoreCacheNode?\nReturns the cache node for a given managed object ID.\nfunc referenceObject(for: NSManagedObjectID) -> Any\nReturns the reference object for a given managed object ID."
  },
  {
    "title": "init(concurrencyType:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506709-init",
    "html": "Deprecated\n\nUse init(_:) instead.\n\nParameters\ntype\n\nThe context’s concurrency type. For possible values, see NSManagedObjectContextConcurrencyType.\n\nDiscussion\n\nFor more information, see Concurrency.\n\nSee Also\nDeprecated instance methods\ninit()\nDeprecated\nfunc lock()\nAttempts to acquire a lock on the context.\nDeprecated\nfunc tryLock() -> Bool\nAttempts to acquire a lock.\nDeprecated\nfunc unlock()\nRelinquishes a previously acquired lock.\nDeprecated"
  },
  {
    "title": "NSErrorMergePolicy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nserrormergepolicy",
    "html": "Discussion\n\nIf a save fails because of conflicting objects, you can find the IDs of those objects in error’s userInfo dictionary. Use the NSInsertedObjectsKey and NSUpdatedObjectsKey keys to extract the object IDs.\n\nSee Also\nPolicies\nvar NSMergeByPropertyStoreTrumpMergePolicy: AnyObject\nA property-based merge policy that applies external changes.\nvar NSMergeByPropertyObjectTrumpMergePolicy: AnyObject\nA property-based merge policy that applies in-memory changes.\nvar NSOverwriteMergePolicy: AnyObject\nA merge policy that overwrites the entire stored object.\nvar NSRollbackMergePolicy: AnyObject\nA merge policy that discards unsaved changes.\nenum NSMergePolicyType\nConstants that define merge policy types."
  },
  {
    "title": "NSSQLitePragmasOption | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nssqlitepragmasoption",
    "html": "Discussion\n\nAll pragma values must be specified as NSString objects. The fullfsync and synchronous pragmas control the tradeoff between write performance (write to disk speed & cache utilization) and durability (data loss/corruption sensitivity to power interruption). For more information on pragma settings, see http://sqlite.org/pragma.html."
  },
  {
    "title": "newObjectID(for:referenceObject:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsincrementalstore/1506666-newobjectid",
    "html": "Parameters\nentity\n\nThe entity for the new object ID.\n\ndata\n\nAn object of type NSString or NSNumber to use as the key.\n\nReturn Value\n\nA new object ID for an instance of the entity specified by entity and that uses data as the key.\n\nDiscussion\n\nYou should not override this method.\n\nSee Also\nManipulating Managed Objects\nfunc execute(NSPersistentStoreRequest, with: NSManagedObjectContext?) -> Any\nReturns a value as appropriate for the given request, or nil if the request cannot be completed.\nfunc newValuesForObject(with: NSManagedObjectID, with: NSManagedObjectContext) -> NSIncrementalStoreNode\nReturns an incremental store node encapsulating the persistent external values of the object with a given object ID.\nfunc newValue(forRelationship: NSRelationshipDescription, forObjectWith: NSManagedObjectID, with: NSManagedObjectContext?) -> Any\nReturns the relationship for the given relationship of the object with a given object ID.\nfunc obtainPermanentIDs(for: [NSManagedObject]) -> [NSManagedObjectID]\nReturns an array containing the object IDs for a given array of newly-inserted objects.\nfunc referenceObject(for: NSManagedObjectID) -> Any\nReturns the reference data used to construct a given object ID."
  },
  {
    "title": "attributeType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/1498291-attributetype",
    "html": "Deprecated\n\nUse type instead.\n\nDiscussion\n\nDon’t change an attribute’s type after you add its containing managed object model to a persistent store coordinator; otherwise, Core Data throws an exception."
  },
  {
    "title": "stages | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsstagedmigrationmanager/4172810-stages",
    "html": "Discussion\n\nCore Data sets this property to the stages parameter you specify when creating the migration manager."
  },
  {
    "title": "didMigrateHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscustommigrationstage/4183759-didmigratehandler",
    "html": "Discussion\n\nUse this handler to perform any cleanup tasks on the persistent store’s data after the migration has run. Access the store using the container property of the handler’s migrationManager parameter.\n\nSee Also\nAssigning event handlers\nvar willMigrateHandler: ((NSStagedMigrationManager, NSCustomMigrationStage) -> Void)?\nThe handler to execute before the stage runs."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsstagedmigrationmanager/4211266-init",
    "html": "Parameters\nstages\n\nThe array of migration stages to execute.\n\nDiscussion\n\nImportant\n\nCore Data processes the migration stages in the order that you provide them."
  },
  {
    "title": "versionChecksums | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nslightweightmigrationstage/4172792-versionchecksums",
    "html": "Discussion\n\nCore Data sets this property to the checksums parameter you specify when creating the lightweight migration stage."
  },
  {
    "title": "init(url:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoredescription/1640563-init",
    "html": "Parameters\nurl\n\nLocation for the store.\n\nReturn Value\n\nInitialized NSPersistentStoreDescription configured with the given URL."
  },
  {
    "title": "NSManagedObjectContext.NotificationKey.RawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/notificationkey/rawvalue",
    "html": "See Also\nCreating and Comparing Keys\ninit?(rawValue: String)\nCreates a notification key using the specified raw value.\nvar rawValue: String\nThe raw string value of the key.\nfunc hash(into: inout Hasher)\nHashes the essential components of the value by feeding them into the specified hasher.\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "init(migratingFrom:to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscustommigrationstage/4211264-init",
    "html": "Parameters\ncurrentModel\n\nThe reference that represents the migration’s source model.\n\nnextModel\n\nThe reference that represents the migration’s destination model.\n\nSee Also\nCreating a custom migration stage\nclass NSManagedObjectModelReference\nAn object that describes a specific version of an object model."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/notificationkey/3619538-init",
    "html": "Parameters\nrawValue\n\nThe raw string value of the key.\n\nRelationships\nFrom Protocol\nRawRepresentable\nSee Also\nCreating and Comparing Keys\nvar rawValue: String\nThe raw string value of the key.\ntypealias NSManagedObjectContext.NotificationKey.RawValue\nThe raw type of notification key values.\nfunc hash(into: inout Hasher)\nHashes the essential components of the value by feeding them into the specified hasher.\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "rawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/notificationkey/3619545-rawvalue",
    "html": "Relationships\nFrom Protocol\nRawRepresentable\nSee Also\nCreating and Comparing Keys\ninit?(rawValue: String)\nCreates a notification key using the specified raw value.\ntypealias NSManagedObjectContext.NotificationKey.RawValue\nThe raw type of notification key values.\nfunc hash(into: inout Hasher)\nHashes the essential components of the value by feeding them into the specified hasher.\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "currentModel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscustommigrationstage/4172785-currentmodel",
    "html": "Discussion\n\nCore Data sets this property to the currentModel parameter you specify when creating the migration stage.\n\nSee Also\nAccessing model references\nvar nextModel: NSManagedObjectModelReference\nThe reference that represents the migration’s destination model."
  },
  {
    "title": "NSStoreModelVersionHashesKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsstoremodelversionhasheskey",
    "html": "Discussion\n\nThis key is used in the metadata for a persistent store."
  },
  {
    "title": "objectID(for:withReferenceObject:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsatomicstore/1388058-objectid",
    "html": "Parameters\nentity\n\nAn entity description object.\n\ndata\n\nReference data for which the managed object ID is required.\n\nReturn Value\n\nThe managed object ID from the reference data for a specified entity\n\nDiscussion\n\nYou use this method to create managed object IDs which are then used to create cache nodes for information being loaded into the store.\n\nSpecial Considerations\n\nYou should not override this method.\n\nSee Also\nLoading a Store\nfunc load()\nLoads the cache nodes for the receiver.\nfunc addCacheNodes(Set<NSAtomicStoreCacheNode>)\nRegisters a set of cache nodes with the receiver."
  },
  {
    "title": "init(persistentStoreCoordinator:configurationName:at:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsatomicstore/1388054-init",
    "html": "Parameters\ncoordinator\n\nThe persistent store coordinator.\n\nconfigurationName\n\nThe name of the store’s configuration in the managed object model.\n\nurl\n\nThe URL of the store to load. This value can’t be nil.\n\noptions\n\nA dictionary that contains the store’s options. For possible values, see Store options.\n\nDiscussion\n\nTypically, you don’t invoke this method yourself; instead, the persistent store coordinator invokes the method when it creates a new store or adds an existing one.\n\nIn your implementation, check whether a file exists at url. If it doesn’t exist, create a zero-length file at url so that the file exists before the coordinator calls the store’s load() method. A zero-length file indicates to the system that it should create a new store at that location. If the coordinator removes the store without first calling save(), delete the zero-length file.\n\nIt’s your responsibility to load the store’s metadata during initialization and set it using the setMetadata(_:forPersistentStoreAt:) method.\n\nImportant\n\nIf you override this method, you must invoke the superclass implementation to ensure that Core Data correctly initializes the store."
  },
  {
    "title": "privateQueue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/concurrencytype/3747515-privatequeue",
    "html": "See Also\nConcurrency Types\nstatic let mainQueue: NSManagedObjectContext.ConcurrencyType\nA concurrency type where the context performs its tasks on the main queue."
  },
  {
    "title": "load() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsatomicstore/1388060-load",
    "html": "Parameters\nerror\n\nIf an error occurs, upon return contains an NSError object that describes the problem.\n\nReturn Value\n\ntrue if the cache nodes were loaded correctly, otherwise false.\n\nDiscussion\n\nYou override this method to load the data from the URL specified in init(persistentStoreCoordinator:configurationName:at:options:) and create cache nodes for the represented objects. You must respect the configuration specified for the store, as well as the options.\n\nAny subclass of NSAtomicStore must be able to handle being initialized with a URL pointing to a zero-length file. This serves as an indicator that a new store is to be constructed at the specified location and allows you to securely create reservation files in known locations which can then be passed to Core Data to construct stores. You may choose to create zero-length reservation files during init(persistentStoreCoordinator:configurationName:at:options:) or load(). If you do so, you must remove the reservation file if the store is removed from the coordinator before it is saved.\n\nYou must override this method in a subclass of NSAtomicStore.\n\nSee Also\nLoading a Store\nfunc objectID(for: NSEntityDescription, withReferenceObject: Any) -> NSManagedObjectID\nReturns a managed object ID from the reference data for a specified entity.\nfunc addCacheNodes(Set<NSAtomicStoreCacheNode>)\nRegisters a set of cache nodes with the receiver."
  },
  {
    "title": "NSPersistentStoreOSCompatibility | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoreoscompatibility",
    "html": "Discussion\n\nThe corresponding value is an NSNumber object that takes the form of the constants defined by the availability macros defined in /usr/include/AvailabilityMacros.h; for example 1040 represents OS X version 10.4.0.\n\nBackward compatibility may preclude some features."
  },
  {
    "title": "NSIgnorePersistentStoreVersioningOption | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsignorepersistentstoreversioningoption",
    "html": "Discussion\n\nThe corresponding value is an NSNumber object. If the boolValue of the number is true, Core Data will not compare the version hashes between the managed object model in the coordinator and the metadata for the loaded store. (It will, however, continue to update the version hash information in the metadata.) This key and corresponding value of true is specified by default for all applications linked on or before OS X v10.4."
  },
  {
    "title": "NSStoreModelVersionIdentifiersKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsstoremodelversionidentifierskey",
    "html": "Discussion\n\nIf you add your own annotations to a model’s version identifier (see versionIdentifiers), they are stored in the persistent store’s metadata. You can use this key to retrieve the identifiers from the metadata dictionaries available from NSPersistentStore (metadata) and NSPersistentStoreCoordinator (metadata(for:) and related methods). The corresponding value is a Foundation collection (an NSArray or NSSet object)."
  },
  {
    "title": "indexName() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredatacorespotlightdelegate/2897199-indexname",
    "html": "Discussion\n\nThe default value is nil.\n\nSee Also\nConfiguring the Index\nvar isIndexingEnabled: Bool\nA Boolean value that indicates whether Core Data is currently updating the Core Spotlight index with the persistent store’s entities.\nfunc domainIdentifier() -> String\nReturns the domain identifier."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/concurrencytype/3747509",
    "html": "Parameters\nlhs\n\nA concurrency type to compare.\n\nrhs\n\nAnother concurrency type to compare.\n\nReturn Value\n\nInequality is the inverse of equality. For values a and b, a != b implies that a == b is false. This is the default implementation of the not-equal-to operator (!=) for any type that conforms to the Equatable protocol."
  },
  {
    "title": "transformable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/attributetype/3747502-transformable",
    "html": "See Also\nAttribute Types\nstatic let binaryData: NSAttributeDescription.AttributeType\nAn attribute that stores binary data.\nstatic let boolean: NSAttributeDescription.AttributeType\nAn attribute that stores a Boolean value.\nstatic let composite: NSAttributeDescription.AttributeType\nAn attribute that derives its value by composing other attributes.\nstatic let date: NSAttributeDescription.AttributeType\nAn attribute that stores a date.\nstatic let decimal: NSAttributeDescription.AttributeType\nAn attribute that stores a decimal value.\nstatic let double: NSAttributeDescription.AttributeType\nAn attribute that stores a double value.\nstatic let float: NSAttributeDescription.AttributeType\nAn attribute that stores a float value.\nstatic let integer16: NSAttributeDescription.AttributeType\nAn attribute that stores a 16-bit signed integer value.\nstatic let integer32: NSAttributeDescription.AttributeType\nAn attribute that stores a 32-bit signed integer value.\nstatic let integer64: NSAttributeDescription.AttributeType\nAn attribute that stores a 64-bit signed integer value.\nstatic let objectID: NSAttributeDescription.AttributeType\nAn attribute that stores a managed object’s ID.\nstatic let string: NSAttributeDescription.AttributeType\nAn attribute that stores a string.\nstatic let undefined: NSAttributeDescription.AttributeType\nAn attribute that doesn’t have an explicit type.\nstatic let uri: NSAttributeDescription.AttributeType\nAn attribute that stores a uniform resource identifier.\nstatic let uuid: NSAttributeDescription.AttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "integer32 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/attributetype/3747497-integer32",
    "html": "See Also\nAttribute Types\nstatic let binaryData: NSAttributeDescription.AttributeType\nAn attribute that stores binary data.\nstatic let boolean: NSAttributeDescription.AttributeType\nAn attribute that stores a Boolean value.\nstatic let composite: NSAttributeDescription.AttributeType\nAn attribute that derives its value by composing other attributes.\nstatic let date: NSAttributeDescription.AttributeType\nAn attribute that stores a date.\nstatic let decimal: NSAttributeDescription.AttributeType\nAn attribute that stores a decimal value.\nstatic let double: NSAttributeDescription.AttributeType\nAn attribute that stores a double value.\nstatic let float: NSAttributeDescription.AttributeType\nAn attribute that stores a float value.\nstatic let integer16: NSAttributeDescription.AttributeType\nAn attribute that stores a 16-bit signed integer value.\nstatic let integer64: NSAttributeDescription.AttributeType\nAn attribute that stores a 64-bit signed integer value.\nstatic let objectID: NSAttributeDescription.AttributeType\nAn attribute that stores a managed object’s ID.\nstatic let string: NSAttributeDescription.AttributeType\nAn attribute that stores a string.\nstatic let transformable: NSAttributeDescription.AttributeType\nAn attribute that uses a value transformer to derive its value.\nstatic let undefined: NSAttributeDescription.AttributeType\nAn attribute that doesn’t have an explicit type.\nstatic let uri: NSAttributeDescription.AttributeType\nAn attribute that stores a uniform resource identifier.\nstatic let uuid: NSAttributeDescription.AttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "integer64 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/attributetype/3747498-integer64",
    "html": "See Also\nAttribute Types\nstatic let binaryData: NSAttributeDescription.AttributeType\nAn attribute that stores binary data.\nstatic let boolean: NSAttributeDescription.AttributeType\nAn attribute that stores a Boolean value.\nstatic let composite: NSAttributeDescription.AttributeType\nAn attribute that derives its value by composing other attributes.\nstatic let date: NSAttributeDescription.AttributeType\nAn attribute that stores a date.\nstatic let decimal: NSAttributeDescription.AttributeType\nAn attribute that stores a decimal value.\nstatic let double: NSAttributeDescription.AttributeType\nAn attribute that stores a double value.\nstatic let float: NSAttributeDescription.AttributeType\nAn attribute that stores a float value.\nstatic let integer16: NSAttributeDescription.AttributeType\nAn attribute that stores a 16-bit signed integer value.\nstatic let integer32: NSAttributeDescription.AttributeType\nAn attribute that stores a 32-bit signed integer value.\nstatic let objectID: NSAttributeDescription.AttributeType\nAn attribute that stores a managed object’s ID.\nstatic let string: NSAttributeDescription.AttributeType\nAn attribute that stores a string.\nstatic let transformable: NSAttributeDescription.AttributeType\nAn attribute that uses a value transformer to derive its value.\nstatic let undefined: NSAttributeDescription.AttributeType\nAn attribute that doesn’t have an explicit type.\nstatic let uri: NSAttributeDescription.AttributeType\nAn attribute that stores a uniform resource identifier.\nstatic let uuid: NSAttributeDescription.AttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "objectID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/attributetype/3747499-objectid",
    "html": "See Also\nAttribute Types\nstatic let binaryData: NSAttributeDescription.AttributeType\nAn attribute that stores binary data.\nstatic let boolean: NSAttributeDescription.AttributeType\nAn attribute that stores a Boolean value.\nstatic let composite: NSAttributeDescription.AttributeType\nAn attribute that derives its value by composing other attributes.\nstatic let date: NSAttributeDescription.AttributeType\nAn attribute that stores a date.\nstatic let decimal: NSAttributeDescription.AttributeType\nAn attribute that stores a decimal value.\nstatic let double: NSAttributeDescription.AttributeType\nAn attribute that stores a double value.\nstatic let float: NSAttributeDescription.AttributeType\nAn attribute that stores a float value.\nstatic let integer16: NSAttributeDescription.AttributeType\nAn attribute that stores a 16-bit signed integer value.\nstatic let integer32: NSAttributeDescription.AttributeType\nAn attribute that stores a 32-bit signed integer value.\nstatic let integer64: NSAttributeDescription.AttributeType\nAn attribute that stores a 64-bit signed integer value.\nstatic let string: NSAttributeDescription.AttributeType\nAn attribute that stores a string.\nstatic let transformable: NSAttributeDescription.AttributeType\nAn attribute that uses a value transformer to derive its value.\nstatic let undefined: NSAttributeDescription.AttributeType\nAn attribute that doesn’t have an explicit type.\nstatic let uri: NSAttributeDescription.AttributeType\nAn attribute that stores a uniform resource identifier.\nstatic let uuid: NSAttributeDescription.AttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "NSFetchIndexDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchindexdescription",
    "html": "Topics\nCreating an Index Description\ninit(name: String, elements: [NSFetchIndexElementDescription]?)\nCreates a fetch index description using the specified name and element descriptions.\nInspecting an Index Description\nvar elements: [NSFetchIndexElementDescription]\nAn array of fetch index element descriptions.\nvar entity: NSEntityDescription?\nThe entity description for the fetch index description.\nvar name: String\nThe name of the fetch index description.\nvar partialIndexPredicate: NSPredicate?\nA predicate that selects rows for indexing, if the index is a partial index.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCoding\nNSCopying\nSee Also\nWorking with indexes\nenum NSFetchIndexElementType\nDefines the possible types of index elements.\nclass NSFetchIndexElementDescription\nDescription of an Index Element"
  },
  {
    "title": "sqlitePragmas | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoredescription/1640614-sqlitepragmas",
    "html": "Discussion\n\nThis property contains all of the pragmas set on the associated persistent store. This property is only relevant when the type is set to NSSQLiteStoreType.\n\nSee Also\nAccessing the Configuration Options\nvar options: [String : NSObject]\nA dictionary representation of the options set on the associated persistent store."
  },
  {
    "title": "options | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoredescription/1640571-options",
    "html": "Discussion\n\nA dictionary containing key-value pairs that specify numerous settings for the persistent store. For key definitions, see NSPersistentStoreCoordinator.\n\nSee Also\nAccessing the Configuration Options\nvar sqlitePragmas: [String : NSObject]\nThe SQLite pragmas set for the associated persistent store. (read-only)"
  },
  {
    "title": "shouldInferMappingModelAutomatically | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoredescription/1640623-shouldinfermappingmodelautomatic",
    "html": "Discussion\n\nIf this flag is set to true and the value of the shouldMigrateStoreAutomatically is true, the coordinator attempts to infer a mapping model if none can be found. The default for this flag is true.\n\nSee Also\nConfiguring a Persistent Store Description\nvar url: URL?\nThe URL that the store will use for its location.\nvar configuration: String?\nThe name of the configuration used by this store.\nvar timeout: TimeInterval\nThe connection timeout for the associated store.\nvar type: String\nThe type of store this description represents.\nvar isReadOnly: Bool\nA flag that indicates whether this store will be read-only.\nvar shouldAddStoreAsynchronously: Bool\nA flag that determines whether the store is added asynchronously.\nvar shouldMigrateStoreAutomatically: Bool\nA flag indicating whether the associated persistent store should be migrated automatically.\nfunc setOption(NSObject?, forKey: String)\nSets an option on the store.\nfunc setValue(NSObject?, forPragmaNamed: String)\nAllows you to set pragmas for the SQLite store."
  },
  {
    "title": "setOption(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoredescription/1640574-setoption",
    "html": "Parameters\noption\n\nThe value to be set for an option on the store.\n\nkey\n\nThe key of the value to be set for an option on the store.\n\nDiscussion\n\nIf a value was previously set for the given option, that value is replaced with the given value. Note that the keys are case-sensitive. For a list of the available options, see NSPersistentStoreCoordinator.\n\nSee Also\nConfiguring a Persistent Store Description\nvar url: URL?\nThe URL that the store will use for its location.\nvar configuration: String?\nThe name of the configuration used by this store.\nvar timeout: TimeInterval\nThe connection timeout for the associated store.\nvar type: String\nThe type of store this description represents.\nvar isReadOnly: Bool\nA flag that indicates whether this store will be read-only.\nvar shouldAddStoreAsynchronously: Bool\nA flag that determines whether the store is added asynchronously.\nvar shouldInferMappingModelAutomatically: Bool\nA flag indicating whether a mapping model should be created automatically.\nvar shouldMigrateStoreAutomatically: Bool\nA flag indicating whether the associated persistent store should be migrated automatically.\nfunc setValue(NSObject?, forPragmaNamed: String)\nAllows you to set pragmas for the SQLite store."
  },
  {
    "title": "shouldMigrateStoreAutomatically | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoredescription/1640566-shouldmigratestoreautomatically",
    "html": "Discussion\n\nIf this is set to false and the store is out of sync, attempting to load the store produces an error. If this is set to true and the store is out of sync, attempting to load the store causes Core Data to attempt a migration. This flag is set to true by default.\n\nSee Also\nConfiguring a Persistent Store Description\nvar url: URL?\nThe URL that the store will use for its location.\nvar configuration: String?\nThe name of the configuration used by this store.\nvar timeout: TimeInterval\nThe connection timeout for the associated store.\nvar type: String\nThe type of store this description represents.\nvar isReadOnly: Bool\nA flag that indicates whether this store will be read-only.\nvar shouldAddStoreAsynchronously: Bool\nA flag that determines whether the store is added asynchronously.\nvar shouldInferMappingModelAutomatically: Bool\nA flag indicating whether a mapping model should be created automatically.\nfunc setOption(NSObject?, forKey: String)\nSets an option on the store.\nfunc setValue(NSObject?, forPragmaNamed: String)\nAllows you to set pragmas for the SQLite store."
  },
  {
    "title": "type | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoredescription/1640609-type",
    "html": "Discussion\n\nA string constant (such as NSSQLiteStoreType) that specifies the type of the new store—see NSPersistentStoreCoordinator.\n\nSee Also\nConfiguring a Persistent Store Description\nvar url: URL?\nThe URL that the store will use for its location.\nvar configuration: String?\nThe name of the configuration used by this store.\nvar timeout: TimeInterval\nThe connection timeout for the associated store.\nvar isReadOnly: Bool\nA flag that indicates whether this store will be read-only.\nvar shouldAddStoreAsynchronously: Bool\nA flag that determines whether the store is added asynchronously.\nvar shouldInferMappingModelAutomatically: Bool\nA flag indicating whether a mapping model should be created automatically.\nvar shouldMigrateStoreAutomatically: Bool\nA flag indicating whether the associated persistent store should be migrated automatically.\nfunc setOption(NSObject?, forKey: String)\nSets an option on the store.\nfunc setValue(NSObject?, forPragmaNamed: String)\nAllows you to set pragmas for the SQLite store."
  },
  {
    "title": "addCacheNodes(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsatomicstore/1388062-addcachenodes",
    "html": "Parameters\ncacheNodes\n\nA set of cache nodes.\n\nDiscussion\n\nYou should invoke this method in a subclass during the call to load() to register the loaded information with the store.\n\nSee Also\nLoading a Store\nfunc load()\nLoads the cache nodes for the receiver.\nfunc objectID(for: NSEntityDescription, withReferenceObject: Any) -> NSManagedObjectID\nReturns a managed object ID from the reference data for a specified entity."
  },
  {
    "title": "updateCacheNode(_:from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsatomicstore/1388044-updatecachenode",
    "html": "Parameters\nnode\n\nThe cache node to update.\n\nmanagedObject\n\nThe managed object with which to update node.\n\nDiscussion\n\nThis method is invoked by the framework after a save operation on a managed object context, once for each updated NSManagedObject instance.\n\nYou override this method in a subclass to take the information from managedObject and update node.\n\nSpecial Considerations\n\nYou must override this method.\n\nSee Also\nUpdating Cache Nodes\nfunc newCacheNode(for: NSManagedObject) -> NSAtomicStoreCacheNode\nReturns a new cache node for a given managed object.\nfunc newReferenceObject(for: NSManagedObject) -> Any\nReturns a new reference object for a given managed object.\nfunc willRemoveCacheNodes(Set<NSAtomicStoreCacheNode>)\nMethod invoked before the store removes the given collection of cache nodes."
  },
  {
    "title": "save() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsatomicstore/1388056-save",
    "html": "Parameters\nerror\n\nIf an error occurs, upon return contains an NSError object that describes the problem.\n\nDiscussion\n\nYou override this method to make persistent the necessary information from the cache nodes to the URL specified for the receiver.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSpecial Considerations\n\nYou must override this method.\n\nSee Also\nRelated Documentation\nfunc updateCacheNode(NSAtomicStoreCacheNode, from: NSManagedObject)\nUpdates the given cache node using the values in a given managed object.\nfunc willRemoveCacheNodes(Set<NSAtomicStoreCacheNode>)\nMethod invoked before the store removes the given collection of cache nodes.\nfunc newReferenceObject(for: NSManagedObject) -> Any\nReturns a new reference object for a given managed object."
  },
  {
    "title": "willRemoveCacheNodes(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsatomicstore/1388064-willremovecachenodes",
    "html": "Parameters\ncacheNodes\n\nThe set of cache nodes to remove.\n\nDiscussion\n\nThis method is invoked by the store before the call to save() with the collection of cache nodes marked as deleted by a managed object context. You can override this method to track the nodes which will not be made persistent in the save() method.\n\nYou should not invoke this method directly in a subclass.\n\nSee Also\nUpdating Cache Nodes\nfunc newCacheNode(for: NSManagedObject) -> NSAtomicStoreCacheNode\nReturns a new cache node for a given managed object.\nfunc newReferenceObject(for: NSManagedObject) -> Any\nReturns a new reference object for a given managed object.\nfunc updateCacheNode(NSAtomicStoreCacheNode, from: NSManagedObject)\nUpdates the given cache node using the values in a given managed object.\nRelated Documentation\nfunc save()\nSaves the cache nodes."
  },
  {
    "title": "newReferenceObject(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsatomicstore/1388050-newreferenceobject",
    "html": "Parameters\nmanagedObject\n\nA managed object. At the time this method is called, it has a temporary ID.\n\nReturn Value\n\nA new reference object for managedObject.\n\nDiscussion\n\nThis method is invoked by the framework after a save operation on a managed object context, once for each newly-inserted managed object. The value returned is used to create a permanent ID for the object and must be unique for an instance within its entity's inheritance hierarchy (in this store).\n\nSpecial Considerations\n\nYou must override this method.\n\nThis method must return a stable (unchanging) value for a given object, otherwise Save As and migration will not work correctly. This means that you can use arbitrary numbers, UUIDs, or other random values only if they are persisted with the raw data. If you cannot save the originally-assigned reference object with the data, then the method must derive the reference object from the managed object’s values. For more details, see Atomic Store Programming Topics.\n\nSee Also\nUpdating Cache Nodes\nfunc newCacheNode(for: NSManagedObject) -> NSAtomicStoreCacheNode\nReturns a new cache node for a given managed object.\nfunc updateCacheNode(NSAtomicStoreCacheNode, from: NSManagedObject)\nUpdates the given cache node using the values in a given managed object.\nfunc willRemoveCacheNodes(Set<NSAtomicStoreCacheNode>)\nMethod invoked before the store removes the given collection of cache nodes."
  },
  {
    "title": "insertedObjects | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nssavechangesrequest/1500416-insertedobjects",
    "html": "See Also\nGetting Information about a Request\nvar updatedObjects: Set<NSManagedObject>?\nThe objects that were modified in the calling context.\nvar deletedObjects: Set<NSManagedObject>?\nThe objects that were deleted in the calling context.\nvar lockedObjects: Set<NSManagedObject>?\nThe objects that were flagged for optimistic locking on the calling context."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/scheduledtasktype/3802017",
    "html": "Parameters\na\n\nA scheduled task type to compare.\n\nb\n\nAnother scheduled task type to compare.\n\nSee Also\nComparing Scheduled Task Types\nstatic func != (NSManagedObjectContext.ScheduledTaskType, NSManagedObjectContext.ScheduledTaskType) -> Bool\nReturns a Boolean value that indicates whether two scheduled task types are unequal."
  },
  {
    "title": "lockedObjects | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nssavechangesrequest/1500426-lockedobjects",
    "html": "Discussion\n\nObjects are flagged for optimistic locking with detectConflicts(for:).\n\nSee Also\nGetting Information about a Request\nvar insertedObjects: Set<NSManagedObject>?\nThe objects that were inserted into the calling context.\nvar updatedObjects: Set<NSManagedObject>?\nThe objects that were modified in the calling context.\nvar deletedObjects: Set<NSManagedObject>?\nThe objects that were deleted in the calling context."
  },
  {
    "title": "lock() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506853-lock",
    "html": "Discussion\n\nThis method blocks a thread’s execution until the lock can be acquired. An application protects a critical section of code by requiring a thread to acquire a lock before executing the code. Once the critical section is past, the thread relinquishes the lock by invoking unlock().\n\nSending this message to a managed object context helps the framework to understand the scope of a transaction in a multi-threaded environment. It is preferable to use the NSManagedObjectContext’s implementation of NSLocking instead using of a separate mutex object.\n\nIf you lock (or successfully tryLock) a managed object context, the thread in which the lock call is made must keep a strong reference to the context until it invokes unlock, otherwise if the context is deallocated this will result in deadlock.\n\nSee Also\nDeprecated instance methods\ninit(concurrencyType: NSManagedObjectContextConcurrencyType)\nCreates a context that uses the specified concurrency type.\ninit()\nDeprecated\nfunc tryLock() -> Bool\nAttempts to acquire a lock.\nDeprecated\nfunc unlock()\nRelinquishes a previously acquired lock.\nDeprecated"
  },
  {
    "title": "tryLock() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506497-trylock",
    "html": "Return Value\n\ntrue if a lock was acquired, false otherwise.\n\nDiscussion\n\nThis method returns immediately after the attempt to acquire a lock.\n\nSee Also\nDeprecated instance methods\ninit(concurrencyType: NSManagedObjectContextConcurrencyType)\nCreates a context that uses the specified concurrency type.\ninit()\nDeprecated\nfunc lock()\nAttempts to acquire a lock on the context.\nDeprecated\nfunc unlock()\nRelinquishes a previously acquired lock.\nDeprecated"
  },
  {
    "title": "NSPersistentStoreUbiquitousContainerIdentifierKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoreubiquitouscontaineridentifierkey",
    "html": "See Also\nDeprecated\nlet NSExternalRecordsDirectoryOption: String\nOption indicating the directory where Spotlight external record files should be written to.\nDeprecated\nlet NSExternalRecordExtensionOption: String\nOption indicating the file extension to use for Spotlight external record files.\nDeprecated\nlet NSExternalRecordsFileFormatOption: String\nOption to specify the file format of a Spotlight external records.\nDeprecated\nlet NSPersistentStoreUbiquitousContentNameKey: String\nOption to specify that a persistent store has a given name in ubiquity.\nDeprecated\nlet NSPersistentStoreUbiquitousContentURLKey: String\nOption to specify the log path to use for ubiquitous content logs.\nDeprecated\nlet NSPersistentStoreUbiquitousPeerTokenOption: String\nThe corresponding value is an optionally specified string which will be mixed in to Core Data’s identifier for each iCloud peer. The value must be an alphanumeric string without any special characters, whitespace or punctuation. The primary use for this option is to allow multiple applications on the same peer (device) to share a Core Data store integrated with iCloud. Each application will require its own store file.\nDeprecated\nlet NSPersistentStoreRemoveUbiquitousMetadataOption: String\nThe corresponding value is an NSNumber object representing a boolean that indicates whether the receiver should remove all associated ubiquity metadata from a persistent store. You typically use this option during migration or copying to disassociate a persistent store file from an iCloud account.\nDeprecated\nlet NSPersistentStoreRebuildFromUbiquitousContentOption: String\nThe corresponding value is an NSNumber object representing a boolean that indicates whether the receiver should erase the local store file and rebuild it from the iCloud data in Mobile Documents.\nDeprecated"
  },
  {
    "title": "NSPersistentStoreUbiquitousPeerTokenOption | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoreubiquitouspeertokenoption",
    "html": "See Also\nDeprecated\nlet NSExternalRecordsDirectoryOption: String\nOption indicating the directory where Spotlight external record files should be written to.\nDeprecated\nlet NSExternalRecordExtensionOption: String\nOption indicating the file extension to use for Spotlight external record files.\nDeprecated\nlet NSExternalRecordsFileFormatOption: String\nOption to specify the file format of a Spotlight external records.\nDeprecated\nlet NSPersistentStoreUbiquitousContentNameKey: String\nOption to specify that a persistent store has a given name in ubiquity.\nDeprecated\nlet NSPersistentStoreUbiquitousContentURLKey: String\nOption to specify the log path to use for ubiquitous content logs.\nDeprecated\nlet NSPersistentStoreRemoveUbiquitousMetadataOption: String\nThe corresponding value is an NSNumber object representing a boolean that indicates whether the receiver should remove all associated ubiquity metadata from a persistent store. You typically use this option during migration or copying to disassociate a persistent store file from an iCloud account.\nDeprecated\nlet NSPersistentStoreUbiquitousContainerIdentifierKey: String\nThe corresponding value is a string specifying the iCloud container identifier Core Data should pass to url(forUbiquityContainerIdentifier:).\nDeprecated\nlet NSPersistentStoreRebuildFromUbiquitousContentOption: String\nThe corresponding value is an NSNumber object representing a boolean that indicates whether the receiver should erase the local store file and rebuild it from the iCloud data in Mobile Documents.\nDeprecated"
  },
  {
    "title": "NSPersistentStoreRebuildFromUbiquitousContentOption | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorerebuildfromubiquitouscontentoption",
    "html": "See Also\nDeprecated\nlet NSExternalRecordsDirectoryOption: String\nOption indicating the directory where Spotlight external record files should be written to.\nDeprecated\nlet NSExternalRecordExtensionOption: String\nOption indicating the file extension to use for Spotlight external record files.\nDeprecated\nlet NSExternalRecordsFileFormatOption: String\nOption to specify the file format of a Spotlight external records.\nDeprecated\nlet NSPersistentStoreUbiquitousContentNameKey: String\nOption to specify that a persistent store has a given name in ubiquity.\nDeprecated\nlet NSPersistentStoreUbiquitousContentURLKey: String\nOption to specify the log path to use for ubiquitous content logs.\nDeprecated\nlet NSPersistentStoreUbiquitousPeerTokenOption: String\nThe corresponding value is an optionally specified string which will be mixed in to Core Data’s identifier for each iCloud peer. The value must be an alphanumeric string without any special characters, whitespace or punctuation. The primary use for this option is to allow multiple applications on the same peer (device) to share a Core Data store integrated with iCloud. Each application will require its own store file.\nDeprecated\nlet NSPersistentStoreRemoveUbiquitousMetadataOption: String\nThe corresponding value is an NSNumber object representing a boolean that indicates whether the receiver should remove all associated ubiquity metadata from a persistent store. You typically use this option during migration or copying to disassociate a persistent store file from an iCloud account.\nDeprecated\nlet NSPersistentStoreUbiquitousContainerIdentifierKey: String\nThe corresponding value is a string specifying the iCloud container identifier Core Data should pass to url(forUbiquityContainerIdentifier:).\nDeprecated"
  },
  {
    "title": "NSSQLiteManualVacuumOption | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nssqlitemanualvacuumoption",
    "html": "Discussion\n\nThis invokes SQLite's VACUUM command. It is ignored by stores other than the SQLite store."
  },
  {
    "title": "newValue(forRelationship:forObjectWith:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsincrementalstore/1506438-newvalue",
    "html": "Parameters\nrelationship\n\nThe relationship for which values are requested.\n\nobjectID\n\nThe ID of the object for which values are requested.\n\ncontext\n\nThe managed object context into which values will be returned.\n\nerror\n\nIf an error occurs, upon return contains an NSError object that describes the problem.\n\nReturn Value\n\nThe value of the relationship specified relationship of the object with object ID objectID, or nil if an error occurs.\n\nDiscussion\n\nIf the relationship is a to-one, the method should return an NSManagedObjectID instance that identifies the destination, or an instance of NSNull if the relationship value is nil.\n\nIf the relationship is a to-many, the method should return a collection object containing NSManagedObjectID instances to identify the related objects. Using an NSArray instance is preferred because it will be the most efficient. A store may also return an instance of NSSet or NSOrderedSet; an instance of NSDictionary is not acceptable.\n\nIf an object with object ID objectID cannot be found, the method should return nil and—if error is not NULL—create and return an appropriate error object in error.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns a nonoptional result and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nManipulating Managed Objects\nfunc execute(NSPersistentStoreRequest, with: NSManagedObjectContext?) -> Any\nReturns a value as appropriate for the given request, or nil if the request cannot be completed.\nfunc newValuesForObject(with: NSManagedObjectID, with: NSManagedObjectContext) -> NSIncrementalStoreNode\nReturns an incremental store node encapsulating the persistent external values of the object with a given object ID.\nfunc obtainPermanentIDs(for: [NSManagedObject]) -> [NSManagedObjectID]\nReturns an array containing the object IDs for a given array of newly-inserted objects.\nfunc newObjectID(for: NSEntityDescription, referenceObject: Any) -> NSManagedObjectID\nReturns a new object ID that uses given data as the key.\nfunc referenceObject(for: NSManagedObjectID) -> Any\nReturns the reference data used to construct a given object ID."
  },
  {
    "title": "NSSQLiteAnalyzeOption | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nssqliteanalyzeoption",
    "html": "Discussion\n\nThis invokes SQLite's ANALYZE command. It is ignored by stores other than the SQLite store."
  },
  {
    "title": "NSPersistentStoreTimeoutOption | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoretimeoutoption",
    "html": "Discussion\n\nThe corresponding value is an NSNumber object that represents the duration in seconds that Core Data will wait while attempting to create a connection to a persistent store. If a connection is cannot be made within that timeframe, the operation is aborted and an error is returned."
  },
  {
    "title": "execute(_:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsincrementalstore/1506653-execute",
    "html": "Parameters\nrequest\n\nA fetch request.\n\ncontext\n\nThe managed object context used to execute request.\n\nerror\n\nIf an error occurs, on return contains an NSError object that describes the problem.\n\nReturn Value\n\nA value as appropriate for request, or nil if the request cannot be completed\n\nDiscussion\n\nThe value to return depends on the result type (see resultType) of request:\n\nIf it is NSManagedObjectResultType, NSManagedObjectIDResultType, or NSDictionaryResultType, the method should return an array containing all objects in the store matching the request.\n\nIf it is NSCountResultType, the method should return an array containing an NSNumber whose value is the count of all objects in the store matching the request.\n\nIf the request is a save request, the method should return an empty array.\n\nIf the save request contains nil values for the inserted/updated/deleted/locked collections; you should treat it as a request to save the store metadata.\n\nYou should implement this method conservatively, and expect that unknown request types may at some point be passed to the method. The correct behavior in these cases is to return nil and an error.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns a nonoptional result and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nManipulating Managed Objects\nfunc newValuesForObject(with: NSManagedObjectID, with: NSManagedObjectContext) -> NSIncrementalStoreNode\nReturns an incremental store node encapsulating the persistent external values of the object with a given object ID.\nfunc newValue(forRelationship: NSRelationshipDescription, forObjectWith: NSManagedObjectID, with: NSManagedObjectContext?) -> Any\nReturns the relationship for the given relationship of the object with a given object ID.\nfunc obtainPermanentIDs(for: [NSManagedObject]) -> [NSManagedObjectID]\nReturns an array containing the object IDs for a given array of newly-inserted objects.\nfunc newObjectID(for: NSEntityDescription, referenceObject: Any) -> NSManagedObjectID\nReturns a new object ID that uses given data as the key.\nfunc referenceObject(for: NSManagedObjectID) -> Any\nReturns the reference data used to construct a given object ID."
  },
  {
    "title": "NSValidateXMLStoreOption | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsvalidatexmlstoreoption",
    "html": "Discussion\n\nThe default value is false."
  },
  {
    "title": "NSReadOnlyPersistentStoreOption | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsreadonlypersistentstoreoption",
    "html": "Discussion\n\nThe default value is false."
  },
  {
    "title": "newValuesForObject(with:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsincrementalstore/1506729-newvaluesforobject",
    "html": "Parameters\nobjectID\n\nThe ID of the object for which values are requested.\n\ncontext\n\nThe managed object context into which values will be returned.\n\nerror\n\nIf an error occurs, upon return contains an NSError object that describes the problem.\n\nReturn Value\n\nAn incremental store node encapsulating the persistent external values of the object with object ID objectID, or nil if the corresponding object cannot be found.\n\nDiscussion\n\nThe returned node should include all attributes values and may include to-one relationship values as instances of NSManagedObjectID.\n\nIf an object with object ID objectID cannot be found, the method should return nil and—if error is not NULL—create and return an appropriate error object in error.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns a nonoptional result and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nManipulating Managed Objects\nfunc execute(NSPersistentStoreRequest, with: NSManagedObjectContext?) -> Any\nReturns a value as appropriate for the given request, or nil if the request cannot be completed.\nfunc newValue(forRelationship: NSRelationshipDescription, forObjectWith: NSManagedObjectID, with: NSManagedObjectContext?) -> Any\nReturns the relationship for the given relationship of the object with a given object ID.\nfunc obtainPermanentIDs(for: [NSManagedObject]) -> [NSManagedObjectID]\nReturns an array containing the object IDs for a given array of newly-inserted objects.\nfunc newObjectID(for: NSEntityDescription, referenceObject: Any) -> NSManagedObjectID\nReturns a new object ID that uses given data as the key.\nfunc referenceObject(for: NSManagedObjectID) -> Any\nReturns the reference data used to construct a given object ID."
  },
  {
    "title": "obtainPermanentIDs(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsincrementalstore/1506348-obtainpermanentids",
    "html": "Parameters\narray\n\nAn array of newly-inserted objects.\n\nerror\n\nIf an error occurs, upon return contains an NSError object that describes the problem.\n\nReturn Value\n\nAn array containing the object IDs for the objects in array.\n\nThe returned array must return the object IDs in the same order as the objects appear in array.\n\nDiscussion\n\nThis method is called before execute(_:with:) with a save request, to assign permanent IDs to newly-inserted objects.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns a nonoptional result and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nManipulating Managed Objects\nfunc execute(NSPersistentStoreRequest, with: NSManagedObjectContext?) -> Any\nReturns a value as appropriate for the given request, or nil if the request cannot be completed.\nfunc newValuesForObject(with: NSManagedObjectID, with: NSManagedObjectContext) -> NSIncrementalStoreNode\nReturns an incremental store node encapsulating the persistent external values of the object with a given object ID.\nfunc newValue(forRelationship: NSRelationshipDescription, forObjectWith: NSManagedObjectID, with: NSManagedObjectContext?) -> Any\nReturns the relationship for the given relationship of the object with a given object ID.\nfunc newObjectID(for: NSEntityDescription, referenceObject: Any) -> NSManagedObjectID\nReturns a new object ID that uses given data as the key.\nfunc referenceObject(for: NSManagedObjectID) -> Any\nReturns the reference data used to construct a given object ID."
  },
  {
    "title": "referenceObject(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsincrementalstore/1506828-referenceobject",
    "html": "Parameters\nobjectID\n\nAn object ID created by the receiver.\n\nReturn Value\n\nThe reference data used to construct objectID.\n\nDiscussion\n\nThis method raises an invalidArgumentException if the object ID was not created by the receiving store.\n\nYou should not override this method.\n\nSee Also\nManipulating Managed Objects\nfunc execute(NSPersistentStoreRequest, with: NSManagedObjectContext?) -> Any\nReturns a value as appropriate for the given request, or nil if the request cannot be completed.\nfunc newValuesForObject(with: NSManagedObjectID, with: NSManagedObjectContext) -> NSIncrementalStoreNode\nReturns an incremental store node encapsulating the persistent external values of the object with a given object ID.\nfunc newValue(forRelationship: NSRelationshipDescription, forObjectWith: NSManagedObjectID, with: NSManagedObjectContext?) -> Any\nReturns the relationship for the given relationship of the object with a given object ID.\nfunc obtainPermanentIDs(for: [NSManagedObject]) -> [NSManagedObjectID]\nReturns an array containing the object IDs for a given array of newly-inserted objects.\nfunc newObjectID(for: NSEntityDescription, referenceObject: Any) -> NSManagedObjectID\nReturns a new object ID that uses given data as the key."
  },
  {
    "title": "managedObjectContextDidRegisterObjects(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsincrementalstore/1506199-managedobjectcontextdidregistero",
    "html": "Parameters\nobjectIDs\n\nAn array of object IDs.\n\nDiscussion\n\nThis method and managedObjectContextDidUnregisterObjects(with:) allow managed object contexts to communicate interest in the row data of specific objects in a manner akin to reference counting. For more details, see managedObjectContextDidUnregisterObjects(with:).\n\nSee Also\nResponding to Context Changes\nfunc managedObjectContextDidUnregisterObjects(with: [NSManagedObjectID])\nIndicates that objects identified by a given array of object IDs are no longer being used by a managed object context."
  },
  {
    "title": "managedObjectContextDidUnregisterObjects(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsincrementalstore/1506878-managedobjectcontextdidunregiste",
    "html": "Parameters\nobjectIDs\n\nAn array of object IDs.\n\nDiscussion\n\nThis method is the counterpart to managedObjectContextDidRegisterObjects(with:).\n\nPassing an object ID in the object IDs array of managedObjectContextDidRegisterObjects(with:) is akin to incrementing the object ID’s reference count by 1; passing an object ID in the object IDs array of managedObjectContextDidUnregisterObjects(with:) is akin to decrementing the object ID’s reference count by 1. It is only when an object ID’s reference count is 0 that no contexts indicate that they are using the corresponding managed object. (Object IDs start with a reference count of 0.)\n\nFor example, if the register methods is invoked on two occasions when the object IDs array contains a given object ID, and the unregister method is invoked once when the object IDs array contains that object ID, then a context is still using the object with the given ID.\n\nSee Also\nResponding to Context Changes\nfunc managedObjectContextDidRegisterObjects(with: [NSManagedObjectID])\nIndicates that objects identified by a given array of object IDs are in use in a managed object context."
  },
  {
    "title": "identifierForNewStore(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsincrementalstore/1506781-identifierfornewstore",
    "html": "Parameters\nstoreURL\n\nThe URL of a persistent store.\n\nReturn Value\n\nThe identifier for the store at storeURL.\n\nSee Also\nAccessing Metadata\nfunc loadMetadata()\nLoads the metadata for the store."
  },
  {
    "title": "willMigrateHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscustommigrationstage/4183760-willmigratehandler",
    "html": "Discussion\n\nUse this handler to prepare the persistent store’s data for the pending migration. Access the store using the container property of the handler’s migrationManager parameter.\n\nSee Also\nAssigning event handlers\nvar didMigrateHandler: ((NSStagedMigrationManager, NSCustomMigrationStage) -> Void)?\nThe handler to execute after the stage runs."
  },
  {
    "title": "nextModel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscustommigrationstage/4172788-nextmodel",
    "html": "Discussion\n\nCore Data sets this property to the nextModel parameter you specify when creating the migration stage.\n\nSee Also\nAccessing model references\nvar currentModel: NSManagedObjectModelReference\nThe reference that represents the migration’s source model."
  },
  {
    "title": "label | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationstage/4183319-label",
    "html": "Discussion\n\nPersistent history tracking, if enabled, records the label for later use. The default value is an empty string."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/notificationkey/3619532",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare."
  },
  {
    "title": "unlock() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468890-unlock",
    "html": "See Also\nDeprecated instance methods\nfunc addPersistentStore(ofType: String, configurationName: String?, at: URL?, options: [AnyHashable : Any]?) -> NSPersistentStore\nAdds a specific type of persistent store at the provided location.\nfunc destroyPersistentStore(at: URL, ofType: String, options: [AnyHashable : Any]?)\nDeletes a specific type of persistent store at the provided location.\nfunc importStore(withIdentifier: String?, fromExternalRecordsDirectoryAt: URL, to: URL, options: [AnyHashable : Any]?, ofType: String) -> NSPersistentStore\nCreates and populates a store with the external records found at a given URL.\nDeprecated\nfunc lock()\nAttempts to acquire a lock.\nDeprecated\nfunc migratePersistentStore(NSPersistentStore, to: URL, options: [AnyHashable : Any]?, withType: String) -> NSPersistentStore\nChanges the location and, if necessary, the store type of the specified persistent store.\nfunc replacePersistentStore(at: URL, destinationOptions: [AnyHashable : Any]?, withPersistentStoreFrom: URL, sourceOptions: [AnyHashable : Any]?, ofType: String)\nReplaces one persistent store with another.\nfunc tryLock() -> Bool\nAttempts to acquire a lock.\nDeprecated\nfunc perform(() -> Void)\nExecutes the provided closure asynchronously on the coordinator’s queue.\nfunc performAndWait(() -> Void)\nExecutes the provided closure on the coordinator’s queue and waits for it to finish."
  },
  {
    "title": "perform(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468794-perform",
    "html": "Deprecated\n\nUse perform(_:) instead.\n\nParameters\nblock\n\nThe closure to execute.\n\nSee Also\nDeprecated instance methods\nfunc addPersistentStore(ofType: String, configurationName: String?, at: URL?, options: [AnyHashable : Any]?) -> NSPersistentStore\nAdds a specific type of persistent store at the provided location.\nfunc destroyPersistentStore(at: URL, ofType: String, options: [AnyHashable : Any]?)\nDeletes a specific type of persistent store at the provided location.\nfunc importStore(withIdentifier: String?, fromExternalRecordsDirectoryAt: URL, to: URL, options: [AnyHashable : Any]?, ofType: String) -> NSPersistentStore\nCreates and populates a store with the external records found at a given URL.\nDeprecated\nfunc lock()\nAttempts to acquire a lock.\nDeprecated\nfunc migratePersistentStore(NSPersistentStore, to: URL, options: [AnyHashable : Any]?, withType: String) -> NSPersistentStore\nChanges the location and, if necessary, the store type of the specified persistent store.\nfunc replacePersistentStore(at: URL, destinationOptions: [AnyHashable : Any]?, withPersistentStoreFrom: URL, sourceOptions: [AnyHashable : Any]?, ofType: String)\nReplaces one persistent store with another.\nfunc tryLock() -> Bool\nAttempts to acquire a lock.\nDeprecated\nfunc unlock()\nRelinquishes a previously acquired lock.\nDeprecated\nfunc performAndWait(() -> Void)\nExecutes the provided closure on the coordinator’s queue and waits for it to finish."
  },
  {
    "title": "performAndWait(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468862-performandwait",
    "html": "Deprecated\n\nUse performAndWait(_:) instead.\n\nParameters\nblock\n\nThe closure to execute.\n\nSee Also\nDeprecated instance methods\nfunc addPersistentStore(ofType: String, configurationName: String?, at: URL?, options: [AnyHashable : Any]?) -> NSPersistentStore\nAdds a specific type of persistent store at the provided location.\nfunc destroyPersistentStore(at: URL, ofType: String, options: [AnyHashable : Any]?)\nDeletes a specific type of persistent store at the provided location.\nfunc importStore(withIdentifier: String?, fromExternalRecordsDirectoryAt: URL, to: URL, options: [AnyHashable : Any]?, ofType: String) -> NSPersistentStore\nCreates and populates a store with the external records found at a given URL.\nDeprecated\nfunc lock()\nAttempts to acquire a lock.\nDeprecated\nfunc migratePersistentStore(NSPersistentStore, to: URL, options: [AnyHashable : Any]?, withType: String) -> NSPersistentStore\nChanges the location and, if necessary, the store type of the specified persistent store.\nfunc replacePersistentStore(at: URL, destinationOptions: [AnyHashable : Any]?, withPersistentStoreFrom: URL, sourceOptions: [AnyHashable : Any]?, ofType: String)\nReplaces one persistent store with another.\nfunc tryLock() -> Bool\nAttempts to acquire a lock.\nDeprecated\nfunc unlock()\nRelinquishes a previously acquired lock.\nDeprecated\nfunc perform(() -> Void)\nExecutes the provided closure asynchronously on the coordinator’s queue."
  },
  {
    "title": "willRemove(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/1506731-willremove",
    "html": "Parameters\ncoordinator\n\nThe persistent store coordinator from which the receiver was removed.\n\nDiscussion\n\nThe default implementation does nothing. You can override this method in a subclass in order to perform any clean-up before the store is removed from the coordinator (and deallocated).\n\nSee Also\nResponding to the Store Life Cycle\nfunc didAdd(to: NSPersistentStoreCoordinator)\nInvoked after the persistent store has been added to the persistent store coordinator."
  },
  {
    "title": "domainIdentifier() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredatacorespotlightdelegate/2897202-domainidentifier",
    "html": "Discussion\n\nThe default value is the persistent store’s identifier.\n\nSee Also\nConfiguring the Index\nvar isIndexingEnabled: Bool\nA Boolean value that indicates whether Core Data is currently updating the Core Spotlight index with the persistent store’s entities.\nfunc indexName() -> String?\nReturns the index’s name."
  },
  {
    "title": "migrationProgress | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationmanager/1417602-migrationprogress",
    "html": "Discussion\n\nIf a migration is not taking place, this property is 1. You can observe this value using key-value observing.\n\nSee Also\nMonitoring a Migration’s Progress\nvar currentEntityMapping: NSEntityMapping\nThe entity mapping currently being processed."
  },
  {
    "title": "persistedSnapshot | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmergeconflict/1506412-persistedsnapshot",
    "html": "See Also\nAccessing Merge Conflict Details\nvar sourceObject: NSManagedObject\nThe source object for the conflict.\nvar objectSnapshot: [String : Any]?\nA dictionary containing the values of the source object.\nvar cachedSnapshot: [String : Any]?\nA dictionary containing the values of the source object held in the persistent store coordinator layer.\nvar newVersionNumber: Int\nThe new version number for the change.\nvar oldVersionNumber: Int\nThe old version number for the change."
  },
  {
    "title": "mainQueue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/concurrencytype/3747514-mainqueue",
    "html": "See Also\nConcurrency Types\nstatic let privateQueue: NSManagedObjectContext.ConcurrencyType\nA concurrency type where the context performs its tasks on a private queue."
  },
  {
    "title": "loadMetadata() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsincrementalstore/1506708-loadmetadata",
    "html": "Parameters\nerror\n\nIf an error occurs, on return contains an NSError object that describes the problem.\n\nReturn Value\n\ntrue if the metadata was correctly loaded, otherwise false.\n\nDiscussion\n\nIn your implementation of this method, you must validate that the URL used to create the store is usable (the location exists and if necessary is writable, the schema is compatible, and so on) and return an error if there is an issue.\n\nAny subclass of NSIncrementalStore which is file-based must be able to handle being initialized with a URL pointing to a zero-length file. This serves as an indicator that a new store is to be constructed at the specified location and allows applications using the store to securely create reservation files in known locations.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nAccessing Metadata\nclass func identifierForNewStore(at: URL) -> Any\nReturns the identifier for the store at a given URL.\nRelated Documentation\nIncremental Store Programming Guide"
  },
  {
    "title": "init(objectID:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsatomicstorecachenode/1506754-init",
    "html": "Parameters\nmoid\n\nA managed object ID.\n\nReturn Value\n\nA cache node for the given managed object ID, or nil if the node could not be initialized.\n\nSee Also\nRelated Documentation\nCore Data Programming Guide"
  },
  {
    "title": "NSPersistentStoreConnectionPoolMaxSizeKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoreconnectionpoolmaxsizekey",
    "html": "Discussion\n\nValues that you specify for this key are of type NSNumber. The connection pool size determines the number of requests a store can handle concurrently, and is a function of how many contexts attempt to access store data at any time. Generally, you don’t set this, and use the default value instead.\n\nThe default connection pool size is implementation-dependent and may vary by store type or platform."
  },
  {
    "title": "objectID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsatomicstorecachenode/1506627-objectid",
    "html": "See Also\nManaging Node Data\nvar propertyCache: NSMutableDictionary?\nThe property cache dictionary of the node.\nfunc value(forKey: String) -> Any?\nReturns the value for a given key.\nfunc setValue(Any?, forKey: String)\nSets the value for the given key."
  },
  {
    "title": "value(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsatomicstorecachenode/1506550-value",
    "html": "Parameters\nkey\n\nThe name of a property.\n\nReturn Value\n\nThe value for the property named key. For an attribute, the return value is an instance of an attribute type supported by Core Data (see NSAttributeDescription); for a to-one relationship, the return value must be another cache node instance; for a to-many relationship, the return value must be an collection of the related cache nodes.\n\nDiscussion\n\nThe default implementation forwards the request to the propertyCache dictionary if key matches a property name of the entity for the cache node. If key does not represent a property, the standard value(forKey:) implementation is used.\n\nSee Also\nManaging Node Data\nvar objectID: NSManagedObjectID\nThe managed object ID of the node.\nvar propertyCache: NSMutableDictionary?\nThe property cache dictionary of the node.\nfunc setValue(Any?, forKey: String)\nSets the value for the given key."
  },
  {
    "title": "NSUUIDChangedPersistentStoresKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsuuidchangedpersistentstoreskey",
    "html": "Discussion\n\nThe object at index 0 is the old store instance, and the object at index 1 the new. When migration happens, the array contains a third object (at index 2) that is an array containing the new objectIDs for all the migrated objects."
  },
  {
    "title": "persistentStoreCoordinator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/1506226-persistentstorecoordinator",
    "html": "See Also\nGetting Store Configuration\nvar configurationName: String\nThe name of the managed object model configuration that creates the persistent store.\nvar options: [AnyHashable : Any]?\nThe options that Core Data uses to create the store.\nvar type: String\nThe type string of the persistent store.\nstruct NSPersistentStore.StoreType\nThe types of persistent stores that Core Data supports.\nPersistent Store Types\nPersist data through the available store types."
  },
  {
    "title": "NSXMLExternalRecordType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsxmlexternalrecordtype",
    "html": "See Also\nDeprecated constants\nlet NSBinaryExternalRecordType: String\nSpecifies a binary file format\nDeprecated"
  },
  {
    "title": "NSBinaryExternalRecordType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbinaryexternalrecordtype",
    "html": "See Also\nDeprecated constants\nlet NSXMLExternalRecordType: String\nSpecifies an XML file format.\nDeprecated"
  },
  {
    "title": "elementsDerived(fromExternalRecordAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468919-elementsderived",
    "html": "Parameters\nfileURL\n\nA file URL specifying the location of a Spotlight external record file.\n\nReturn Value\n\nA dictionary containing the parsed elements derived from the Spotlight support file specified by fileURL.\n\nDiscussion\n\nDictionary keys and the corresponding values are described in Spotlight record keys.\n\nSee Also\nDeprecated type methods\nclass func metadataForPersistentStore(with: URL) -> [AnyHashable : Any]\nReturns a dictionary that contains the metadata stored in the persistent store at the specified location.\nDeprecated\nclass func metadataForPersistentStore(ofType: String?, at: URL) -> [String : Any]\nReturns a dictionary containing the metadata stored in the persistent store at a given URL.\nDeprecated\nclass func metadataForPersistentStore(ofType: String, at: URL, options: [AnyHashable : Any]?) -> [String : Any]\nReturns the metadata of a specific type of persistent store at the provided location.\nclass func registerStoreClass(AnyClass?, forStoreType: String)\nRegisters a persistent store subclass using the specified store type identifier.\nclass func removeUbiquitousContentAndPersistentStore(at: URL, options: [AnyHashable : Any]?)\nDeletes all ubiquitous content for all peers for the persistent store at a given URL and also delete the local store file.\nDeprecated\nclass func setMetadata([String : Any]?, forPersistentStoreOfType: String?, at: URL)\nSets the metadata for a given store.\nDeprecated\nclass func setMetadata([String : Any]?, forPersistentStoreOfType: String, at: URL, options: [AnyHashable : Any]?)\nUpdates the metadata of a specific type of persistent store at the provided location."
  },
  {
    "title": "NSPersistentStoreUbiquitousTransitionType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoreubiquitoustransitiontype",
    "html": "Topics\nConstants\ncase accountAdded\nThis value indicates that a new iCloud account is available, and the persistent store in use will or did transition to the new account.\ncase accountRemoved\nThis value indicates that no iCloud account is available, and the persistent store in use will or did transition to the “local” store.\ncase contentRemoved\nThis value indicates that the user has wiped the contents of the iCloud account, usually using Delete All from Documents & Data in Settings.\ncase initialImportCompleted\nThis value indicates that the Core Data integration has finished building a store file that is consistent with the contents of the iCloud account, and is ready to replace the fallback store with that file.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "init(entity:managedObjectHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchinsertrequest/3618791-init",
    "html": "Parameters\nentity\n\nA managed entity to insert data into.\n\nhandler\n\nA closure that inserts data into the managed entity.\n\nReturn Value\n\nA batch-insertion request.\n\nDiscussion\n\nCore Data repeatedly calls the provided closure until it returns true, then finishes the request and saves the data.\n\nSee Also\nCreating a Request\ninit(entity: NSEntityDescription, dictionaryHandler: (NSMutableDictionary) -> Bool)\nCreates a batch-insertion request for a managed entity, and specifies a closure that provides data dictionaries for insertion.\ninit(entityName: String, dictionaryHandler: (NSMutableDictionary) -> Bool)\nCreates a batch-insertion request for a named managed entity, and specifies a closure that provides data dictionaries for insertion.\ninit(entityName: String, managedObjectHandler: (NSManagedObject) -> Bool)\nCreates a batch-insertion request for a named managed entity, and specifies a closure that inserts data into the entity.\ninit(entity: NSEntityDescription, objects: [[String : Any]])\nCreates a batch-insertion request for a managed entity, and provides an array of data dictionaries for insertion.\ninit(entityName: String, objects: [[String : Any]])\nCreates a batch-insertion request for a named managed entity, and provides an array of data dictionaries for insertion.\ninit()\nCreates a Core Data batch-insertion request.\nDeprecated"
  },
  {
    "title": "metadataForPersistentStore(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468915-metadataforpersistentstore",
    "html": "Deprecated\n\nUse metadataForPersistentStore(ofType:at:) instead.\n\nParameters\nurl\n\nAn URL object that specifies the location of a persistent store.\n\nerror\n\nIf no store is found at url or if there is a problem accessing its contents, upon return contains an instance of NSError that describes the problem.\n\nReturn Value\n\nA dictionary containing the metadata for the persistent store at url. If no store is found, or there is a problem accessing its contents, returns nil.\n\nThe keys guaranteed to be in this dictionary are NSStoreTypeKey and NSStoreUUIDKey.\n\nDiscussion\n\nThis method allows you to access the metadata in a persistent store without initializing a Core Data stack.\n\nSee Also\nDeprecated type methods\nclass func elementsDerived(fromExternalRecordAt: URL) -> [AnyHashable : Any]\nReturns a dictionary containing the parsed elements derived from the Spotlight external record file that is specified by the given URL.\nDeprecated\nclass func metadataForPersistentStore(ofType: String?, at: URL) -> [String : Any]\nReturns a dictionary containing the metadata stored in the persistent store at a given URL.\nDeprecated\nclass func metadataForPersistentStore(ofType: String, at: URL, options: [AnyHashable : Any]?) -> [String : Any]\nReturns the metadata of a specific type of persistent store at the provided location.\nclass func registerStoreClass(AnyClass?, forStoreType: String)\nRegisters a persistent store subclass using the specified store type identifier.\nclass func removeUbiquitousContentAndPersistentStore(at: URL, options: [AnyHashable : Any]?)\nDeletes all ubiquitous content for all peers for the persistent store at a given URL and also delete the local store file.\nDeprecated\nclass func setMetadata([String : Any]?, forPersistentStoreOfType: String?, at: URL)\nSets the metadata for a given store.\nDeprecated\nclass func setMetadata([String : Any]?, forPersistentStoreOfType: String, at: URL, options: [AnyHashable : Any]?)\nUpdates the metadata of a specific type of persistent store at the provided location.\nRelated Documentation\nfunc setMetadata([String : Any]?, for: NSPersistentStore)\nUpdates the metadata for the specified persistent store.\nfunc metadata(for: NSPersistentStore) -> [String : Any]\nReturns the metadata of the specified persistent store."
  },
  {
    "title": "metadataForPersistentStore(ofType:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468804-metadataforpersistentstore",
    "html": "Parameters\nstoreType\n\nThe type of the store at url. If this value is nil, Core Data determines which store class should be used to get or set the store file's metadata by inspecting the file contents.\n\nurl\n\nThe location of a persistent store.\n\nerror\n\nIf no store is found at url or if there is a problem accessing its contents, upon return contains an NSError object that describes the problem.\n\nReturn Value\n\nA dictionary containing the metadata stored in the persistent store at url, or nil if the store cannot be opened or if there is a problem accessing its contents.\n\nThe keys guaranteed to be in this dictionary are NSStoreTypeKey and NSStoreUUIDKey.\n\nDiscussion\n\nYou can use this method to retrieve the metadata from a store without the overhead of creating a Core Data stack.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns a nonoptional result and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nDeprecated type methods\nclass func elementsDerived(fromExternalRecordAt: URL) -> [AnyHashable : Any]\nReturns a dictionary containing the parsed elements derived from the Spotlight external record file that is specified by the given URL.\nDeprecated\nclass func metadataForPersistentStore(with: URL) -> [AnyHashable : Any]\nReturns a dictionary that contains the metadata stored in the persistent store at the specified location.\nDeprecated\nclass func metadataForPersistentStore(ofType: String, at: URL, options: [AnyHashable : Any]?) -> [String : Any]\nReturns the metadata of a specific type of persistent store at the provided location.\nclass func registerStoreClass(AnyClass?, forStoreType: String)\nRegisters a persistent store subclass using the specified store type identifier.\nclass func removeUbiquitousContentAndPersistentStore(at: URL, options: [AnyHashable : Any]?)\nDeletes all ubiquitous content for all peers for the persistent store at a given URL and also delete the local store file.\nDeprecated\nclass func setMetadata([String : Any]?, forPersistentStoreOfType: String?, at: URL)\nSets the metadata for a given store.\nDeprecated\nclass func setMetadata([String : Any]?, forPersistentStoreOfType: String, at: URL, options: [AnyHashable : Any]?)\nUpdates the metadata of a specific type of persistent store at the provided location.\nRelated Documentation\nfunc setMetadata([String : Any]?, for: NSPersistentStore)\nUpdates the metadata for the specified persistent store.\nfunc metadata(for: NSPersistentStore) -> [String : Any]\nReturns the metadata of the specified persistent store."
  },
  {
    "title": "importStore(withIdentifier:fromExternalRecordsDirectoryAt:to:options:ofType:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468788-importstore",
    "html": "Parameters\nstoreIdentifier\n\nThe identifier for a store.\n\nIf this value is nil then the method imports the records for the first store found.\n\nexternalRecordsURL\n\nThe location of the directory containing external records.\n\ndestinationURL\n\nAn URL object that specifies the location for the new store.\n\nThere should be no existing store at this location, as the store will be created from scratch (appending to an existing store is not allowed).\n\noptions\n\nA dictionary containing key-value pairs that specify whether the store should be read-only, and whether (for an XML store) the XML file should be validated against the DTD before it is read. For key definitions, see Store options.\n\nstoreType\n\nA string constant (such as NSSQLiteStoreType) that specifies the type of the new store—see Persistent Store Types.\n\nerror\n\nIf an error occurs, upon return contains an instance of NSError that describes the problem.\n\nReturn Value\n\nAn object representing the newly-created store.\n\nDiscussion\n\nHandling Errors in Swift:\n\nIn Swift, this method returns a nonoptional result and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nDeprecated instance methods\nfunc addPersistentStore(ofType: String, configurationName: String?, at: URL?, options: [AnyHashable : Any]?) -> NSPersistentStore\nAdds a specific type of persistent store at the provided location.\nfunc destroyPersistentStore(at: URL, ofType: String, options: [AnyHashable : Any]?)\nDeletes a specific type of persistent store at the provided location.\nfunc lock()\nAttempts to acquire a lock.\nDeprecated\nfunc migratePersistentStore(NSPersistentStore, to: URL, options: [AnyHashable : Any]?, withType: String) -> NSPersistentStore\nChanges the location and, if necessary, the store type of the specified persistent store.\nfunc replacePersistentStore(at: URL, destinationOptions: [AnyHashable : Any]?, withPersistentStoreFrom: URL, sourceOptions: [AnyHashable : Any]?, ofType: String)\nReplaces one persistent store with another.\nfunc tryLock() -> Bool\nAttempts to acquire a lock.\nDeprecated\nfunc unlock()\nRelinquishes a previously acquired lock.\nDeprecated\nfunc perform(() -> Void)\nExecutes the provided closure asynchronously on the coordinator’s queue.\nfunc performAndWait(() -> Void)\nExecutes the provided closure on the coordinator’s queue and waits for it to finish.\nRelated Documentation\nfunc remove(NSPersistentStore)\nRemoves the specified persistent store from the coordinator."
  },
  {
    "title": "destroyPersistentStore(at:ofType:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468888-destroypersistentstore",
    "html": "Deprecated\n\nUse destroyPersistentStore(at:type:options:) instead.\n\nParameters\nurl\n\nThe store’s location.\n\nstoreType\n\nThe store type. For possible values, see NSPersistentStore.StoreType.\n\noptions\n\nA dictionary containing key-value pairs that specify store behavior and characteristics. For more information, see Store options.\n\nSee Also\nDeprecated instance methods\nfunc addPersistentStore(ofType: String, configurationName: String?, at: URL?, options: [AnyHashable : Any]?) -> NSPersistentStore\nAdds a specific type of persistent store at the provided location.\nfunc importStore(withIdentifier: String?, fromExternalRecordsDirectoryAt: URL, to: URL, options: [AnyHashable : Any]?, ofType: String) -> NSPersistentStore\nCreates and populates a store with the external records found at a given URL.\nDeprecated\nfunc lock()\nAttempts to acquire a lock.\nDeprecated\nfunc migratePersistentStore(NSPersistentStore, to: URL, options: [AnyHashable : Any]?, withType: String) -> NSPersistentStore\nChanges the location and, if necessary, the store type of the specified persistent store.\nfunc replacePersistentStore(at: URL, destinationOptions: [AnyHashable : Any]?, withPersistentStoreFrom: URL, sourceOptions: [AnyHashable : Any]?, ofType: String)\nReplaces one persistent store with another.\nfunc tryLock() -> Bool\nAttempts to acquire a lock.\nDeprecated\nfunc unlock()\nRelinquishes a previously acquired lock.\nDeprecated\nfunc perform(() -> Void)\nExecutes the provided closure asynchronously on the coordinator’s queue.\nfunc performAndWait(() -> Void)\nExecutes the provided closure on the coordinator’s queue and waits for it to finish."
  },
  {
    "title": "metadataForPersistentStore(ofType:at:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468778-metadataforpersistentstore",
    "html": "Deprecated\n\nUse metadataForPersistentStore(type:at:options:) instead.\n\nParameters\nstoreType\n\nThe type of the store. If nil, Core Data automatically attempts to determine the store class to use.\n\nurl\n\nThe file URL of the store.\n\noptions\n\nA dictionary that contains options for the store.\n\nReturn Value\n\nA dictionary that contains, at a minimum, values for the NSStoreTypeKey and NSStoreUUIDKey keys.\n\nSee Also\nDeprecated type methods\nclass func elementsDerived(fromExternalRecordAt: URL) -> [AnyHashable : Any]\nReturns a dictionary containing the parsed elements derived from the Spotlight external record file that is specified by the given URL.\nDeprecated\nclass func metadataForPersistentStore(with: URL) -> [AnyHashable : Any]\nReturns a dictionary that contains the metadata stored in the persistent store at the specified location.\nDeprecated\nclass func metadataForPersistentStore(ofType: String?, at: URL) -> [String : Any]\nReturns a dictionary containing the metadata stored in the persistent store at a given URL.\nDeprecated\nclass func registerStoreClass(AnyClass?, forStoreType: String)\nRegisters a persistent store subclass using the specified store type identifier.\nclass func removeUbiquitousContentAndPersistentStore(at: URL, options: [AnyHashable : Any]?)\nDeletes all ubiquitous content for all peers for the persistent store at a given URL and also delete the local store file.\nDeprecated\nclass func setMetadata([String : Any]?, forPersistentStoreOfType: String?, at: URL)\nSets the metadata for a given store.\nDeprecated\nclass func setMetadata([String : Any]?, forPersistentStoreOfType: String, at: URL, options: [AnyHashable : Any]?)\nUpdates the metadata of a specific type of persistent store at the provided location."
  },
  {
    "title": "registerStoreClass(_:forStoreType:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468786-registerstoreclass",
    "html": "Deprecated\n\nUse registerStoreClass(_:type:) instead.\n\nParameters\nstoreClass\n\nThe NSPersistentStore subclass to use for the store of type storeType.\n\nstoreType\n\nA unique string that identifies a store type.\n\nDiscussion\n\nYou must invoke this method before a custom subclass of NSPersistentStore can be loaded into a persistent store coordinator.\n\nYou can pass nil for storeClass to unregister the store type.\n\nSee Also\nDeprecated type methods\nclass func elementsDerived(fromExternalRecordAt: URL) -> [AnyHashable : Any]\nReturns a dictionary containing the parsed elements derived from the Spotlight external record file that is specified by the given URL.\nDeprecated\nclass func metadataForPersistentStore(with: URL) -> [AnyHashable : Any]\nReturns a dictionary that contains the metadata stored in the persistent store at the specified location.\nDeprecated\nclass func metadataForPersistentStore(ofType: String?, at: URL) -> [String : Any]\nReturns a dictionary containing the metadata stored in the persistent store at a given URL.\nDeprecated\nclass func metadataForPersistentStore(ofType: String, at: URL, options: [AnyHashable : Any]?) -> [String : Any]\nReturns the metadata of a specific type of persistent store at the provided location.\nclass func removeUbiquitousContentAndPersistentStore(at: URL, options: [AnyHashable : Any]?)\nDeletes all ubiquitous content for all peers for the persistent store at a given URL and also delete the local store file.\nDeprecated\nclass func setMetadata([String : Any]?, forPersistentStoreOfType: String?, at: URL)\nSets the metadata for a given store.\nDeprecated\nclass func setMetadata([String : Any]?, forPersistentStoreOfType: String, at: URL, options: [AnyHashable : Any]?)\nUpdates the metadata of a specific type of persistent store at the provided location."
  },
  {
    "title": "removeUbiquitousContentAndPersistentStore(at:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468923-removeubiquitouscontentandpersis",
    "html": "Parameters\nstoreURL\n\nThe URL of the store to delete.\n\noptions\n\nA dictionary containing the options normally passed to addPersistentStore(ofType:configurationName:at:options:).\n\nerror\n\nIf the operation fails, upon return contains an NSError object that describes the problem.\n\nReturn Value\n\ntrue if the store was deleted, otherwise false.\n\nDiscussion\n\nErrors may be returned as a result of file I/O, iCloud network or iCloud account issues.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns a nonoptional result and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nDeprecated type methods\nclass func elementsDerived(fromExternalRecordAt: URL) -> [AnyHashable : Any]\nReturns a dictionary containing the parsed elements derived from the Spotlight external record file that is specified by the given URL.\nDeprecated\nclass func metadataForPersistentStore(with: URL) -> [AnyHashable : Any]\nReturns a dictionary that contains the metadata stored in the persistent store at the specified location.\nDeprecated\nclass func metadataForPersistentStore(ofType: String?, at: URL) -> [String : Any]\nReturns a dictionary containing the metadata stored in the persistent store at a given URL.\nDeprecated\nclass func metadataForPersistentStore(ofType: String, at: URL, options: [AnyHashable : Any]?) -> [String : Any]\nReturns the metadata of a specific type of persistent store at the provided location.\nclass func registerStoreClass(AnyClass?, forStoreType: String)\nRegisters a persistent store subclass using the specified store type identifier.\nclass func setMetadata([String : Any]?, forPersistentStoreOfType: String?, at: URL)\nSets the metadata for a given store.\nDeprecated\nclass func setMetadata([String : Any]?, forPersistentStoreOfType: String, at: URL, options: [AnyHashable : Any]?)\nUpdates the metadata of a specific type of persistent store at the provided location."
  },
  {
    "title": "setMetadata(_:forPersistentStoreOfType:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468897-setmetadata",
    "html": "Parameters\nmetadata\n\nA dictionary containing metadata for the store.\n\nstoreType\n\nThe type of the store at url. If this value is nil, Core Data will determine which store class should be used to get or set the store file's metadata by inspecting the file contents.\n\nurl\n\nThe location of a persistent store.\n\nerror\n\nIf no store is found at url or if there is a problem setting its metadata, upon return contains an NSError object that describes the problem.\n\nReturn Value\n\ntrue if the metadata was set correctly, otherwise false.\n\nDiscussion\n\nYou can use this method to set the metadata for a store without the overhead of creating a Core Data stack.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns a nonoptional result and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nDeprecated type methods\nclass func elementsDerived(fromExternalRecordAt: URL) -> [AnyHashable : Any]\nReturns a dictionary containing the parsed elements derived from the Spotlight external record file that is specified by the given URL.\nDeprecated\nclass func metadataForPersistentStore(with: URL) -> [AnyHashable : Any]\nReturns a dictionary that contains the metadata stored in the persistent store at the specified location.\nDeprecated\nclass func metadataForPersistentStore(ofType: String?, at: URL) -> [String : Any]\nReturns a dictionary containing the metadata stored in the persistent store at a given URL.\nDeprecated\nclass func metadataForPersistentStore(ofType: String, at: URL, options: [AnyHashable : Any]?) -> [String : Any]\nReturns the metadata of a specific type of persistent store at the provided location.\nclass func registerStoreClass(AnyClass?, forStoreType: String)\nRegisters a persistent store subclass using the specified store type identifier.\nclass func removeUbiquitousContentAndPersistentStore(at: URL, options: [AnyHashable : Any]?)\nDeletes all ubiquitous content for all peers for the persistent store at a given URL and also delete the local store file.\nDeprecated\nclass func setMetadata([String : Any]?, forPersistentStoreOfType: String, at: URL, options: [AnyHashable : Any]?)\nUpdates the metadata of a specific type of persistent store at the provided location.\nRelated Documentation\nfunc setMetadata([String : Any]?, for: NSPersistentStore)\nUpdates the metadata for the specified persistent store.\nfunc metadata(for: NSPersistentStore) -> [String : Any]\nReturns the metadata of the specified persistent store."
  },
  {
    "title": "NSManagedObjectContext.ScheduledTaskType.enqueued | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/scheduledtasktype/enqueued",
    "html": "Discussion\n\nEnqueued tasks execute asynchronously on the context’s queue. An enqueued task encapsulates an autorelease pool and a call to processPendingChanges(), and its behavior is analogous to perform(_:). The context’s queue executes tasks in the order you add them.\n\nSee Also\nScheduled Task Types\ncase immediate\nThe immediate scheduled task type."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/scheduledtasktype/3763164-hashvalue",
    "html": "Relationships\nFrom Protocol\nHashable\nSee Also\nHashing a Scheduled Task Type\nfunc hash(into: inout Hasher)\nHashes the components of the scheduled task type using the provided hasher."
  },
  {
    "title": "NSManagedObjectContext.ScheduledTaskType.immediate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/scheduledtasktype/immediate",
    "html": "Discussion\n\nImmediate tasks execute right away if the context operates within the current scope; otherwise, the context enqueues the task. Tasks of this type are reentrant, nonblocking, and continuation-aware.\n\nSee Also\nScheduled Task Types\ncase enqueued\nThe enqueued scheduled task type."
  },
  {
    "title": "init(inserted:updated:deleted:locked:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nssavechangesrequest/1500418-init",
    "html": "Parameters\ninsertedObjects\n\nObjects that were inserted into the calling context.\n\nupdatedObjects\n\nObjects that were updated in the calling context.\n\ndeletedObjects\n\nObjects that were deleted in the calling context.\n\nlockedObjects\n\nObjects that were flagged for optimistic locking on the calling context.\n\nReturn Value\n\nA save changes request initialized with the given changes."
  },
  {
    "title": "updatedObjects | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nssavechangesrequest/1500424-updatedobjects",
    "html": "See Also\nGetting Information about a Request\nvar insertedObjects: Set<NSManagedObject>?\nThe objects that were inserted into the calling context.\nvar deletedObjects: Set<NSManagedObject>?\nThe objects that were deleted in the calling context.\nvar lockedObjects: Set<NSManagedObject>?\nThe objects that were flagged for optimistic locking on the calling context."
  },
  {
    "title": "deletedObjects | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nssavechangesrequest/1500420-deletedobjects",
    "html": "See Also\nGetting Information about a Request\nvar insertedObjects: Set<NSManagedObject>?\nThe objects that were inserted into the calling context.\nvar updatedObjects: Set<NSManagedObject>?\nThe objects that were modified in the calling context.\nvar lockedObjects: Set<NSManagedObject>?\nThe objects that were flagged for optimistic locking on the calling context."
  },
  {
    "title": "NSPersistentStoreFileProtectionKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorefileprotectionkey",
    "html": "Discussion\n\nBackward compatibility may preclude some features. The acceptable values are those defined for the protectionKey. The default value is completeUntilFirstUserAuthentication for all applications built on or after iOS v5.0. The default value for all older applications is none."
  },
  {
    "title": "NSExternalRecordsDirectoryOption | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsexternalrecordsdirectoryoption",
    "html": "See Also\nDeprecated\nlet NSExternalRecordExtensionOption: String\nOption indicating the file extension to use for Spotlight external record files.\nDeprecated\nlet NSExternalRecordsFileFormatOption: String\nOption to specify the file format of a Spotlight external records.\nDeprecated\nlet NSPersistentStoreUbiquitousContentNameKey: String\nOption to specify that a persistent store has a given name in ubiquity.\nDeprecated\nlet NSPersistentStoreUbiquitousContentURLKey: String\nOption to specify the log path to use for ubiquitous content logs.\nDeprecated\nlet NSPersistentStoreUbiquitousPeerTokenOption: String\nThe corresponding value is an optionally specified string which will be mixed in to Core Data’s identifier for each iCloud peer. The value must be an alphanumeric string without any special characters, whitespace or punctuation. The primary use for this option is to allow multiple applications on the same peer (device) to share a Core Data store integrated with iCloud. Each application will require its own store file.\nDeprecated\nlet NSPersistentStoreRemoveUbiquitousMetadataOption: String\nThe corresponding value is an NSNumber object representing a boolean that indicates whether the receiver should remove all associated ubiquity metadata from a persistent store. You typically use this option during migration or copying to disassociate a persistent store file from an iCloud account.\nDeprecated\nlet NSPersistentStoreUbiquitousContainerIdentifierKey: String\nThe corresponding value is a string specifying the iCloud container identifier Core Data should pass to url(forUbiquityContainerIdentifier:).\nDeprecated\nlet NSPersistentStoreRebuildFromUbiquitousContentOption: String\nThe corresponding value is an NSNumber object representing a boolean that indicates whether the receiver should erase the local store file and rebuild it from the iCloud data in Mobile Documents.\nDeprecated"
  },
  {
    "title": "NSPersistentStoreUbiquitousContentNameKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoreubiquitouscontentnamekey",
    "html": "Discussion\n\nThis option is required for ubiquitous content to function.\n\nSee Also\nDeprecated\nlet NSExternalRecordsDirectoryOption: String\nOption indicating the directory where Spotlight external record files should be written to.\nDeprecated\nlet NSExternalRecordExtensionOption: String\nOption indicating the file extension to use for Spotlight external record files.\nDeprecated\nlet NSExternalRecordsFileFormatOption: String\nOption to specify the file format of a Spotlight external records.\nDeprecated\nlet NSPersistentStoreUbiquitousContentURLKey: String\nOption to specify the log path to use for ubiquitous content logs.\nDeprecated\nlet NSPersistentStoreUbiquitousPeerTokenOption: String\nThe corresponding value is an optionally specified string which will be mixed in to Core Data’s identifier for each iCloud peer. The value must be an alphanumeric string without any special characters, whitespace or punctuation. The primary use for this option is to allow multiple applications on the same peer (device) to share a Core Data store integrated with iCloud. Each application will require its own store file.\nDeprecated\nlet NSPersistentStoreRemoveUbiquitousMetadataOption: String\nThe corresponding value is an NSNumber object representing a boolean that indicates whether the receiver should remove all associated ubiquity metadata from a persistent store. You typically use this option during migration or copying to disassociate a persistent store file from an iCloud account.\nDeprecated\nlet NSPersistentStoreUbiquitousContainerIdentifierKey: String\nThe corresponding value is a string specifying the iCloud container identifier Core Data should pass to url(forUbiquityContainerIdentifier:).\nDeprecated\nlet NSPersistentStoreRebuildFromUbiquitousContentOption: String\nThe corresponding value is an NSNumber object representing a boolean that indicates whether the receiver should erase the local store file and rebuild it from the iCloud data in Mobile Documents.\nDeprecated"
  },
  {
    "title": "NSExternalRecordsFileFormatOption | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsexternalrecordsfileformatoption",
    "html": "Discussion\n\nFor possible values, see Format Options for Spotlight External Record Files.\n\nSee Also\nDeprecated\nlet NSExternalRecordsDirectoryOption: String\nOption indicating the directory where Spotlight external record files should be written to.\nDeprecated\nlet NSExternalRecordExtensionOption: String\nOption indicating the file extension to use for Spotlight external record files.\nDeprecated\nlet NSPersistentStoreUbiquitousContentNameKey: String\nOption to specify that a persistent store has a given name in ubiquity.\nDeprecated\nlet NSPersistentStoreUbiquitousContentURLKey: String\nOption to specify the log path to use for ubiquitous content logs.\nDeprecated\nlet NSPersistentStoreUbiquitousPeerTokenOption: String\nThe corresponding value is an optionally specified string which will be mixed in to Core Data’s identifier for each iCloud peer. The value must be an alphanumeric string without any special characters, whitespace or punctuation. The primary use for this option is to allow multiple applications on the same peer (device) to share a Core Data store integrated with iCloud. Each application will require its own store file.\nDeprecated\nlet NSPersistentStoreRemoveUbiquitousMetadataOption: String\nThe corresponding value is an NSNumber object representing a boolean that indicates whether the receiver should remove all associated ubiquity metadata from a persistent store. You typically use this option during migration or copying to disassociate a persistent store file from an iCloud account.\nDeprecated\nlet NSPersistentStoreUbiquitousContainerIdentifierKey: String\nThe corresponding value is a string specifying the iCloud container identifier Core Data should pass to url(forUbiquityContainerIdentifier:).\nDeprecated\nlet NSPersistentStoreRebuildFromUbiquitousContentOption: String\nThe corresponding value is an NSNumber object representing a boolean that indicates whether the receiver should erase the local store file and rebuild it from the iCloud data in Mobile Documents.\nDeprecated"
  },
  {
    "title": "NSExternalRecordExtensionOption | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsexternalrecordextensionoption",
    "html": "See Also\nDeprecated\nlet NSExternalRecordsDirectoryOption: String\nOption indicating the directory where Spotlight external record files should be written to.\nDeprecated\nlet NSExternalRecordsFileFormatOption: String\nOption to specify the file format of a Spotlight external records.\nDeprecated\nlet NSPersistentStoreUbiquitousContentNameKey: String\nOption to specify that a persistent store has a given name in ubiquity.\nDeprecated\nlet NSPersistentStoreUbiquitousContentURLKey: String\nOption to specify the log path to use for ubiquitous content logs.\nDeprecated\nlet NSPersistentStoreUbiquitousPeerTokenOption: String\nThe corresponding value is an optionally specified string which will be mixed in to Core Data’s identifier for each iCloud peer. The value must be an alphanumeric string without any special characters, whitespace or punctuation. The primary use for this option is to allow multiple applications on the same peer (device) to share a Core Data store integrated with iCloud. Each application will require its own store file.\nDeprecated\nlet NSPersistentStoreRemoveUbiquitousMetadataOption: String\nThe corresponding value is an NSNumber object representing a boolean that indicates whether the receiver should remove all associated ubiquity metadata from a persistent store. You typically use this option during migration or copying to disassociate a persistent store file from an iCloud account.\nDeprecated\nlet NSPersistentStoreUbiquitousContainerIdentifierKey: String\nThe corresponding value is a string specifying the iCloud container identifier Core Data should pass to url(forUbiquityContainerIdentifier:).\nDeprecated\nlet NSPersistentStoreRebuildFromUbiquitousContentOption: String\nThe corresponding value is an NSNumber object representing a boolean that indicates whether the receiver should erase the local store file and rebuild it from the iCloud data in Mobile Documents.\nDeprecated"
  },
  {
    "title": "NSPersistentStoreRemoveUbiquitousMetadataOption | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoreremoveubiquitousmetadataoption",
    "html": "See Also\nDeprecated\nlet NSExternalRecordsDirectoryOption: String\nOption indicating the directory where Spotlight external record files should be written to.\nDeprecated\nlet NSExternalRecordExtensionOption: String\nOption indicating the file extension to use for Spotlight external record files.\nDeprecated\nlet NSExternalRecordsFileFormatOption: String\nOption to specify the file format of a Spotlight external records.\nDeprecated\nlet NSPersistentStoreUbiquitousContentNameKey: String\nOption to specify that a persistent store has a given name in ubiquity.\nDeprecated\nlet NSPersistentStoreUbiquitousContentURLKey: String\nOption to specify the log path to use for ubiquitous content logs.\nDeprecated\nlet NSPersistentStoreUbiquitousPeerTokenOption: String\nThe corresponding value is an optionally specified string which will be mixed in to Core Data’s identifier for each iCloud peer. The value must be an alphanumeric string without any special characters, whitespace or punctuation. The primary use for this option is to allow multiple applications on the same peer (device) to share a Core Data store integrated with iCloud. Each application will require its own store file.\nDeprecated\nlet NSPersistentStoreUbiquitousContainerIdentifierKey: String\nThe corresponding value is a string specifying the iCloud container identifier Core Data should pass to url(forUbiquityContainerIdentifier:).\nDeprecated\nlet NSPersistentStoreRebuildFromUbiquitousContentOption: String\nThe corresponding value is an NSNumber object representing a boolean that indicates whether the receiver should erase the local store file and rebuild it from the iCloud data in Mobile Documents.\nDeprecated"
  },
  {
    "title": "xml | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/storetype/3755553-xml",
    "html": "Discussion\n\nAn XML store is atomic, which means Core Data reads and writes the file in its entirety. This behavior is different from a sqlite store, which you can partially modify.\n\nSee Also\nStore Types\nstatic let binary: NSPersistentStore.StoreType\nA store that reads from and writes to a persistent binary file.\nstatic let inMemory: NSPersistentStore.StoreType\nAn ephemeral store that reads from and writes to memory only.\nstatic let sqlite: NSPersistentStore.StoreType\nA store that reads from and writes to a persistent SQLite database."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/storetype/3747522",
    "html": "Parameters\nlhs\n\nA store type to compare.\n\nrhs\n\nAnother store type to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For values a and b, a != b implies that a == b is false. This is the default implementation of the not-equal-to operator (!=) for any type that conforms to the Equatable protocol."
  },
  {
    "title": "loadMetadata() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/1506273-loadmetadata",
    "html": "Parameters\nerror\n\nIf an error occurs, upon return contains an NSError object that describes the problem.\n\nReturn Value\n\ntrue if the metadata was loaded correctly, otherwise false.\n\nDiscussion\n\nThere is no way to return an error if the store is invalid.\n\nDiscussion\n\nHandling Errors in Swift:\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nManaging Store Metadata\nclass func metadataForPersistentStore(with: URL) -> [String : Any]\nReturns the metadata from the persistent store at the given URL.\nclass func setMetadata([String : Any]?, forPersistentStoreAt: URL)\nSets the metadata for the store at a given URL.\nvar metadata: [String : Any]!\nThe metadata for the persistent store."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/storetype/3747528-init",
    "html": "Parameters\nrawValue\n\nA string that represents the store type.\n\nRelationships\nFrom Protocol\nRawRepresentable"
  },
  {
    "title": "replacePersistentStore(at:destinationOptions:withPersistentStoreFrom:sourceOptions:ofType:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468917-replacepersistentstore",
    "html": "Deprecated\n\nUse replacePersistentStore(at:destinationOptions:withPersistentStoreFrom:sourceOptions:type:) instead.\n\nParameters\ndestinationURL\n\nThe location of the store to replace.\n\ndestinationOptions\n\nA dictionary containing key-value pairs that specify the behavior and characteristics of the store to replace. For more information, see Store options.\n\nsourceURL\n\nThe location of the store to use as the replacement.\n\nsourceOptions\n\nA dictionary containing key-value pairs that specify the behavior and characteristics of the replacement store. For more information, see Store options.\n\nstoreType\n\nThe store type of the replacement store. For possible values, see NSPersistentStore.StoreType.\n\nSee Also\nDeprecated instance methods\nfunc addPersistentStore(ofType: String, configurationName: String?, at: URL?, options: [AnyHashable : Any]?) -> NSPersistentStore\nAdds a specific type of persistent store at the provided location.\nfunc destroyPersistentStore(at: URL, ofType: String, options: [AnyHashable : Any]?)\nDeletes a specific type of persistent store at the provided location.\nfunc importStore(withIdentifier: String?, fromExternalRecordsDirectoryAt: URL, to: URL, options: [AnyHashable : Any]?, ofType: String) -> NSPersistentStore\nCreates and populates a store with the external records found at a given URL.\nDeprecated\nfunc lock()\nAttempts to acquire a lock.\nDeprecated\nfunc migratePersistentStore(NSPersistentStore, to: URL, options: [AnyHashable : Any]?, withType: String) -> NSPersistentStore\nChanges the location and, if necessary, the store type of the specified persistent store.\nfunc tryLock() -> Bool\nAttempts to acquire a lock.\nDeprecated\nfunc unlock()\nRelinquishes a previously acquired lock.\nDeprecated\nfunc perform(() -> Void)\nExecutes the provided closure asynchronously on the coordinator’s queue.\nfunc performAndWait(() -> Void)\nExecutes the provided closure on the coordinator’s queue and waits for it to finish."
  },
  {
    "title": "lock() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468775-lock",
    "html": "Discussion\n\nThis method blocks a thread’s execution until the lock can be acquired. An application protects a critical section of code by requiring a thread to acquire a lock before executing the code. Once the critical section is past, the thread relinquishes the lock by invoking unlock.\n\nSee Also\nDeprecated instance methods\nfunc addPersistentStore(ofType: String, configurationName: String?, at: URL?, options: [AnyHashable : Any]?) -> NSPersistentStore\nAdds a specific type of persistent store at the provided location.\nfunc destroyPersistentStore(at: URL, ofType: String, options: [AnyHashable : Any]?)\nDeletes a specific type of persistent store at the provided location.\nfunc importStore(withIdentifier: String?, fromExternalRecordsDirectoryAt: URL, to: URL, options: [AnyHashable : Any]?, ofType: String) -> NSPersistentStore\nCreates and populates a store with the external records found at a given URL.\nDeprecated\nfunc migratePersistentStore(NSPersistentStore, to: URL, options: [AnyHashable : Any]?, withType: String) -> NSPersistentStore\nChanges the location and, if necessary, the store type of the specified persistent store.\nfunc replacePersistentStore(at: URL, destinationOptions: [AnyHashable : Any]?, withPersistentStoreFrom: URL, sourceOptions: [AnyHashable : Any]?, ofType: String)\nReplaces one persistent store with another.\nfunc tryLock() -> Bool\nAttempts to acquire a lock.\nDeprecated\nfunc unlock()\nRelinquishes a previously acquired lock.\nDeprecated\nfunc perform(() -> Void)\nExecutes the provided closure asynchronously on the coordinator’s queue.\nfunc performAndWait(() -> Void)\nExecutes the provided closure on the coordinator’s queue and waits for it to finish."
  },
  {
    "title": "metadata | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/1506564-metadata",
    "html": "Discussion\n\nThe dictionary must include the store type (NSStoreTypeKey) and UUID (NSStoreUUIDKey).\n\nSpecial Considerations\n\nSubclasses must override this property to provide storage and persistence for the store metadata.\n\nSee Also\nManaging Store Metadata\nclass func metadataForPersistentStore(with: URL) -> [String : Any]\nReturns the metadata from the persistent store at the given URL.\nclass func setMetadata([String : Any]?, forPersistentStoreAt: URL)\nSets the metadata for the store at a given URL.\nfunc loadMetadata()\nInstructs the persistent store to load its metadata."
  },
  {
    "title": "cancelMigrationWithError(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationmanager/1417608-cancelmigrationwitherror",
    "html": "Parameters\nerror\n\nAn error object that describes the reason why the migration is canceled.\n\nDiscussion\n\nYou can invoke this method from anywhere in the migration process to abort the migration. Calling this method causes migrateStore(from:sourceType:options:with:toDestinationURL:destinationType:destinationOptions:) to abort the migration and return error—you should provide an appropriate error to indicate the reason for the cancellation.\n\nSee Also\nAborting a Migration\nfunc reset()\nResets the association tables for the migration."
  },
  {
    "title": "sourceInstances(forEntityMappingName:destinationInstances:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationmanager/1417580-sourceinstances",
    "html": "Parameters\nmappingName\n\nThe name of an entity mapping in use.\n\ndestinationInstances\n\nA array of managed objects in the destination store.\n\nReturn Value\n\nAn array containing the managed object instances in the source store used to create destinationInstances using the entity mapping named mappingName. If destinationInstances is nil, all of the source instances used to create the destination instance for this property mapping are returned.\n\nDiscussion\n\nThis method throws an NSInvalidArgumentException exception if mappingName is not a valid mapping name.\n\nSee Also\nManaging Sources and Destinations\nfunc associate(sourceInstance: NSManagedObject, withDestinationInstance: NSManagedObject, for: NSEntityMapping)\nAssociates a given source managed object instance with an array of destination instances for a given property mapping.\nfunc destinationInstances(forEntityMappingName: String, sourceInstances: [NSManagedObject]?) -> [NSManagedObject]\nReturns the managed object instances created in the destination store for the named entity mapping for the given array of source instances."
  },
  {
    "title": "tryLock() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468852-trylock",
    "html": "Return Value\n\ntrue if successful, otherwise false.\n\nDiscussion\n\nReturns immediately—contrast lock() which blocks.\n\nSee Also\nDeprecated instance methods\nfunc addPersistentStore(ofType: String, configurationName: String?, at: URL?, options: [AnyHashable : Any]?) -> NSPersistentStore\nAdds a specific type of persistent store at the provided location.\nfunc destroyPersistentStore(at: URL, ofType: String, options: [AnyHashable : Any]?)\nDeletes a specific type of persistent store at the provided location.\nfunc importStore(withIdentifier: String?, fromExternalRecordsDirectoryAt: URL, to: URL, options: [AnyHashable : Any]?, ofType: String) -> NSPersistentStore\nCreates and populates a store with the external records found at a given URL.\nDeprecated\nfunc lock()\nAttempts to acquire a lock.\nDeprecated\nfunc migratePersistentStore(NSPersistentStore, to: URL, options: [AnyHashable : Any]?, withType: String) -> NSPersistentStore\nChanges the location and, if necessary, the store type of the specified persistent store.\nfunc replacePersistentStore(at: URL, destinationOptions: [AnyHashable : Any]?, withPersistentStoreFrom: URL, sourceOptions: [AnyHashable : Any]?, ofType: String)\nReplaces one persistent store with another.\nfunc unlock()\nRelinquishes a previously acquired lock.\nDeprecated\nfunc perform(() -> Void)\nExecutes the provided closure asynchronously on the coordinator’s queue.\nfunc performAndWait(() -> Void)\nExecutes the provided closure on the coordinator’s queue and waits for it to finish."
  },
  {
    "title": "init(forStoreWith:coordinator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredatacorespotlightdelegate/3751984-init",
    "html": "Parameters\ndescription\n\nAn object that describes the persistent store that contains the entities to index.\n\npsc\n\nThe persistent store coordinator, which you initialize with the managed object model that contains the definitions of the entities to index.\n\nDiscussion\n\nAfter you initialize a Core Spotlight delegate, call the startSpotlightIndexing() to begin indexing your store’s contents.\n\nNote\n\nIf you initialize your Core Spotlight delegate using this method, you don’t need to set the NSCoreDataCoreSpotlightExporter option on the specified store description.\n\nSee Also\nCreating a Core Spotlight Delegate\ninit(forStoreWith: NSPersistentStoreDescription, model: NSManagedObjectModel)\nCreates a Core Spotlight delegate with the specified store description and managed object model.\nDeprecated"
  },
  {
    "title": "attributeSet(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredatacorespotlightdelegate/2897197-attributeset",
    "html": "Parameters\nobject\n\nThe managed object to index.\n\nReturn Value\n\nAn instance of CSSearchableItemAttributeSet that provides the searchable item’s attributes.\n\nDiscussion\n\nImportant\n\nIf you enable isIndexedBySpotlight on a property description that describes a relationship, override this method and return the necessary set of attributes. Core Data doesn’t automatically infer indexable information for relationships.\n\nTo prevent Core Spotlight from indexing a specific managed object, override this method and return nil for that object.\n\nSee Also\nManaging the Index\nfunc deleteSpotlightIndex(completionHandler: (Error?) -> Void)\nDeletes all searchable items from the configured index.\nfunc startSpotlightIndexing()\nStarts the indexing of the store’s entities.\nfunc stopSpotlightIndexing()\nStops the indexing of the store’s entities."
  },
  {
    "title": "init(forStoreWith:model:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredatacorespotlightdelegate/2897196-init",
    "html": "Deprecated\n\nUse init(forStoreWith:coordinator:) instead.\n\nParameters\ndescription\n\nAn object that describes the persistent store that contains the entities to index.\n\nmodel\n\nThe managed object model that contains the definitions of the entities to index.\n\nSee Also\nCreating a Core Spotlight Delegate\ninit(forStoreWith: NSPersistentStoreDescription, coordinator: NSPersistentStoreCoordinator)\nCreates a Core Spotlight delegate with the specified store description and coordinator."
  },
  {
    "title": "isIndexingEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredatacorespotlightdelegate/3751983-isindexingenabled",
    "html": "See Also\nConfiguring the Index\nfunc domainIdentifier() -> String\nReturns the domain identifier.\nfunc indexName() -> String?\nReturns the index’s name."
  },
  {
    "title": "startSpotlightIndexing() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredatacorespotlightdelegate/3751985-startspotlightindexing",
    "html": "Discussion\n\nAfter you call this method, the delegate posts a notification whenever the index changes. The type of notification is indexDidUpdateNotification, and its userInfo dictionary contains the keys NSStoreUUIDKey and NSPersistentHistoryTokenKey.\n\nSee Also\nManaging the Index\nfunc attributeSet(for: NSManagedObject) -> CSSearchableItemAttributeSet?\nReturns the searchable attributes for the specified managed object.\nfunc deleteSpotlightIndex(completionHandler: (Error?) -> Void)\nDeletes all searchable items from the configured index.\nfunc stopSpotlightIndexing()\nStops the indexing of the store’s entities."
  },
  {
    "title": "deleteSpotlightIndex(completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredatacorespotlightdelegate/3751982-deletespotlightindex",
    "html": "Discussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc deleteSpotlightIndex() async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThe closure returns no value and takes only a single parameter, which is an error object that contains information about issues preventing the deletion of searchable items, or nil if Core Spotlight successfully deletes all searchable items.\n\nDepending on the cause of the issue, an error can originate from Core Data or from Core Spotlight. Make sure your app can handle both scenarios.\n\nNote\n\nYou must call stopSpotlightIndexing() before you call this method; otherwise, Core Data immediately recreates the index.\n\nSee Also\nManaging the Index\nfunc attributeSet(for: NSManagedObject) -> CSSearchableItemAttributeSet?\nReturns the searchable attributes for the specified managed object.\nfunc startSpotlightIndexing()\nStarts the indexing of the store’s entities.\nfunc stopSpotlightIndexing()\nStops the indexing of the store’s entities."
  },
  {
    "title": "indexDidUpdateNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredatacorespotlightdelegate/3787692-indexdidupdatenotification",
    "html": "Discussion\n\nThe notification’s userInfo dictionary contains the keys NSStoreUUIDKey and NSPersistentHistoryTokenKey.\n\nSee Also\nUpdating the Index\nfunc searchableIndex(CSSearchableIndex, reindexAllSearchableItemsWithAcknowledgementHandler: () -> Void)\nReindexes all searchable items and clears any local state.\nfunc searchableIndex(CSSearchableIndex, reindexSearchableItemsWithIdentifiers: [String], acknowledgementHandler: () -> Void)\nReindexes the searchable items for the specified identifiers."
  },
  {
    "title": "searchableIndex(_:reindexAllSearchableItemsWithAcknowledgementHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredatacorespotlightdelegate/2897201-searchableindex",
    "html": "Parameters\nsearchableIndex\n\nThe index that requires reindexing.\n\nacknowledgementHandler\n\nThe handler to call when you finish saving client state information.\n\nDiscussion\n\nFor more information, see searchableIndex(_:reindexAllSearchableItemsWithAcknowledgementHandler:).\n\nSee Also\nUpdating the Index\nstatic let indexDidUpdateNotification: Notification.Name\nThe notification the delegate posts after Spotlight updates the index.\nfunc searchableIndex(CSSearchableIndex, reindexSearchableItemsWithIdentifiers: [String], acknowledgementHandler: () -> Void)\nReindexes the searchable items for the specified identifiers."
  },
  {
    "title": "searchableIndex(_:reindexSearchableItemsWithIdentifiers:acknowledgementHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredatacorespotlightdelegate/2897198-searchableindex",
    "html": "Parameters\nsearchableIndex\n\nThe index that contains the items that require reindexing.\n\nidentifiers\n\nAn array of strings that identify the searchable items.\n\nacknowledgementHandler\n\nThe handler to call when you finish saving client state information.\n\nDiscussion\n\nFor more information, see searchableIndex(_:reindexSearchableItemsWithIdentifiers:acknowledgementHandler:).\n\nSee Also\nUpdating the Index\nstatic let indexDidUpdateNotification: Notification.Name\nThe notification the delegate posts after Spotlight updates the index.\nfunc searchableIndex(CSSearchableIndex, reindexAllSearchableItemsWithAcknowledgementHandler: () -> Void)\nReindexes all searchable items and clears any local state."
  },
  {
    "title": "NSStorePathKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsstorepathkey",
    "html": "Discussion\n\nThis is resolved to the store-file path contained in the an external record file directory."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/concurrencytype/3747511-hash",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining components of this concurrency type.\n\nSee Also\nHashing a Concurrency Type\nvar hashValue: Int\nThe concurrency type’s computed hash value."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/concurrencytype/3747512-hashvalue",
    "html": "See Also\nHashing a Concurrency Type\nfunc hash(into: inout Hasher)\nHashes the components of the concurrency type using the provided hasher."
  },
  {
    "title": "NSManagedObjectContext.ConcurrencyType.RawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/concurrencytype/rawvalue",
    "html": "See Also\nGetting a Concurrency Type’s Raw Value\nvar rawValue: NSManagedObjectContextConcurrencyType\nThe concurrency type’s cardinal value."
  },
  {
    "title": "NSDeleteRule.cascadeDeleteRule | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsdeleterule/cascadedeleterule",
    "html": "See Also\nDelete Rules\ncase noActionDeleteRule\nA rule that prevents modification of the referenced managed objects.\ncase nullifyDeleteRule\nA rule that nullifies the inverse relationship of the referenced managed objects.\ncase denyDeleteRule\nA rule that prevents the deletion of the owning managed object if the relationship has references to other objects."
  },
  {
    "title": "NSDeleteRule.noActionDeleteRule | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsdeleterule/noactiondeleterule",
    "html": "Discussion\n\nIf you use this delete rule, make sure you delete any referenced managed objects or nullify their inverse relationships. Otherwise, those objects will reference an object that doesn’t exist, and your persistent store will be in an inconsistent state.\n\nSee Also\nDelete Rules\ncase nullifyDeleteRule\nA rule that nullifies the inverse relationship of the referenced managed objects.\ncase cascadeDeleteRule\nA rule that deletes the referenced managed objects.\ncase denyDeleteRule\nA rule that prevents the deletion of the owning managed object if the relationship has references to other objects."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/concurrencytype/3747513-init",
    "html": "Parameters\nrawValue\n\nThe raw concurrency type. For possible values, see NSManagedObjectContextConcurrencyType.\n\nRelationships\nFrom Protocol\nRawRepresentable"
  },
  {
    "title": "NSDeleteRule.denyDeleteRule | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsdeleterule/denydeleterule",
    "html": "See Also\nDelete Rules\ncase noActionDeleteRule\nA rule that prevents modification of the referenced managed objects.\ncase nullifyDeleteRule\nA rule that nullifies the inverse relationship of the referenced managed objects.\ncase cascadeDeleteRule\nA rule that deletes the referenced managed objects."
  },
  {
    "title": "sourceObject | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmergeconflict/1506809-sourceobject",
    "html": "See Also\nAccessing Merge Conflict Details\nvar objectSnapshot: [String : Any]?\nA dictionary containing the values of the source object.\nvar cachedSnapshot: [String : Any]?\nA dictionary containing the values of the source object held in the persistent store coordinator layer.\nvar persistedSnapshot: [String : Any]?\nA dictionary containing the values of the source object held in the persistent store.\nvar newVersionNumber: Int\nThe new version number for the change.\nvar oldVersionNumber: Int\nThe old version number for the change."
  },
  {
    "title": "init(source:newVersion:oldVersion:cachedSnapshot:persistedSnapshot:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmergeconflict/1506216-init",
    "html": "Parameters\nsrcObject\n\nThe source object for the conflict.\n\nnewvers\n\nThe new version number for the change.\n\nA value of 0 means the object was deleted and the corresponding snapshot is nil.\n\noldvers\n\nThe old version number for the change.\n\ncachesnap\n\nA dictionary containing the values of srcObject held in the persistent store coordinator layer.\n\npersnap\n\nA dictionary containing the values of srcObject held in the persistent store.\n\nReturn Value\n\nA merge conflict object initialized with the given parameters.\n\nSee Also\nRelated Documentation\nCore Data Model Versioning and Data Migration Programming Guide"
  },
  {
    "title": "newVersionNumber | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmergeconflict/1506190-newversionnumber",
    "html": "Discussion\n\nA new version number of 0 means the object was deleted and the corresponding snapshot is nil.\n\nSee Also\nAccessing Merge Conflict Details\nvar sourceObject: NSManagedObject\nThe source object for the conflict.\nvar objectSnapshot: [String : Any]?\nA dictionary containing the values of the source object.\nvar cachedSnapshot: [String : Any]?\nA dictionary containing the values of the source object held in the persistent store coordinator layer.\nvar persistedSnapshot: [String : Any]?\nA dictionary containing the values of the source object held in the persistent store.\nvar oldVersionNumber: Int\nThe old version number for the change."
  },
  {
    "title": "cachedSnapshot | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmergeconflict/1506685-cachedsnapshot",
    "html": "See Also\nAccessing Merge Conflict Details\nvar sourceObject: NSManagedObject\nThe source object for the conflict.\nvar objectSnapshot: [String : Any]?\nA dictionary containing the values of the source object.\nvar persistedSnapshot: [String : Any]?\nA dictionary containing the values of the source object held in the persistent store.\nvar newVersionNumber: Int\nThe new version number for the change.\nvar oldVersionNumber: Int\nThe old version number for the change."
  },
  {
    "title": "objectSnapshot | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmergeconflict/1506454-objectsnapshot",
    "html": "See Also\nAccessing Merge Conflict Details\nvar sourceObject: NSManagedObject\nThe source object for the conflict.\nvar cachedSnapshot: [String : Any]?\nA dictionary containing the values of the source object held in the persistent store coordinator layer.\nvar persistedSnapshot: [String : Any]?\nA dictionary containing the values of the source object held in the persistent store.\nvar newVersionNumber: Int\nThe new version number for the change.\nvar oldVersionNumber: Int\nThe old version number for the change."
  },
  {
    "title": "oldVersionNumber | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmergeconflict/1506271-oldversionnumber",
    "html": "See Also\nAccessing Merge Conflict Details\nvar sourceObject: NSManagedObject\nThe source object for the conflict.\nvar objectSnapshot: [String : Any]?\nA dictionary containing the values of the source object.\nvar cachedSnapshot: [String : Any]?\nA dictionary containing the values of the source object held in the persistent store coordinator layer.\nvar persistedSnapshot: [String : Any]?\nA dictionary containing the values of the source object held in the persistent store.\nvar newVersionNumber: Int\nThe new version number for the change."
  },
  {
    "title": "NSDeleteRule.nullifyDeleteRule | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsdeleterule/nullifydeleterule",
    "html": "See Also\nDelete Rules\ncase noActionDeleteRule\nA rule that prevents modification of the referenced managed objects.\ncase cascadeDeleteRule\nA rule that deletes the referenced managed objects.\ncase denyDeleteRule\nA rule that prevents the deletion of the owning managed object if the relationship has references to other objects."
  },
  {
    "title": "databaseSnapshot | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsconstraintconflict/1506687-databasesnapshot",
    "html": "See Also\nInspecting a Conflict\nvar conflictingObjects: [NSManagedObject]\nThe managed objects that are in conflict.\nvar conflictingSnapshots: [[AnyHashable : Any]]\nThe original property values of objects in violation of the constraint.\nvar constraint: [String]\nThe constraint that has been violated.\nvar constraintValues: [String : Any]\nThe values that the conflicting objects had when the conflict was created.\nvar databaseObject: NSManagedObject?\nThe object whose database row is using constraint values."
  },
  {
    "title": "options | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/1506821-options",
    "html": "Discussion\n\nSee NSPersistentStoreCoordinator for a list of key names for options in this dictionary.\n\nSee Also\nGetting Store Configuration\nvar configurationName: String\nThe name of the managed object model configuration that creates the persistent store.\nvar persistentStoreCoordinator: NSPersistentStoreCoordinator?\nThe persistent store coordinator that loads the persistent store.\nvar type: String\nThe type string of the persistent store.\nstruct NSPersistentStore.StoreType\nThe types of persistent stores that Core Data supports.\nPersistent Store Types\nPersist data through the available store types."
  },
  {
    "title": "configurationName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/1506620-configurationname",
    "html": "See Also\nGetting Store Configuration\nvar options: [AnyHashable : Any]?\nThe options that Core Data uses to create the store.\nvar persistentStoreCoordinator: NSPersistentStoreCoordinator?\nThe persistent store coordinator that loads the persistent store.\nvar type: String\nThe type string of the persistent store.\nstruct NSPersistentStore.StoreType\nThe types of persistent stores that Core Data supports.\nPersistent Store Types\nPersist data through the available store types."
  },
  {
    "title": "binary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/storetype/3747524-binary",
    "html": "Discussion\n\nA binary store is atomic, which means Core Data reads and writes the file in its entirety. This behavior is different from a sqlite store, which you can partially modify.\n\nSee Also\nStore Types\nstatic let inMemory: NSPersistentStore.StoreType\nAn ephemeral store that reads from and writes to memory only.\nstatic let sqlite: NSPersistentStore.StoreType\nA store that reads from and writes to a persistent SQLite database.\nstatic let xml: NSPersistentStore.StoreType\nA store that reads from and writes to a persistent XML file."
  },
  {
    "title": "propertyCache | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsatomicstorecachenode/1506283-propertycache",
    "html": "Discussion\n\nThis dictionary is used by value(forKey:) and setValue(_:forKey:) for property values. This property is nil unless it has been explicitly set or non-nil values have been set for keys using setValue(_:forKey:).\n\nSee Also\nManaging Node Data\nvar objectID: NSManagedObjectID\nThe managed object ID of the node.\nfunc value(forKey: String) -> Any?\nReturns the value for a given key.\nfunc setValue(Any?, forKey: String)\nSets the value for the given key."
  },
  {
    "title": "update(withValues:version:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsincrementalstorenode/1506721-update",
    "html": "Parameters\nvalues\n\nA dictionary containing updated values, in the same format as that described in init(objectID:withValues:version:).\n\nversion\n\nThe version number for the transaction.\n\nDiscussion\n\nUpdate the values and version to reflect new data being saved to or loaded from the external store. // The values dictionary is in the same format as the initializer\n\nSee Also\nManaging Node Data\nvar objectID: NSManagedObjectID\nThe object ID that identifies the data stored by the receiver.\nfunc value(for: NSPropertyDescription) -> Any?\nReturns the value for the given property.\nvar version: UInt64\nThe version of data in the receiver."
  },
  {
    "title": "setValue(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsatomicstorecachenode/1506456-setvalue",
    "html": "Parameters\nvalue\n\nThe value for the property identified by key.\n\nkey\n\nThe name of a property.\n\nDiscussion\n\nThe default implementation forwards the request to the propertyCache dictionary if key matches a property name of the entity for this cache node. If key does not represent a property, the standard setValue(_:forKey:) implementation is used.\n\nSee Also\nManaging Node Data\nvar objectID: NSManagedObjectID\nThe managed object ID of the node.\nvar propertyCache: NSMutableDictionary?\nThe property cache dictionary of the node.\nfunc value(forKey: String) -> Any?\nReturns the value for a given key."
  },
  {
    "title": "type | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/1506250-type",
    "html": "Discussion\n\nThis string is used when specifying the type of store to add to a persistent store coordinator.\n\nSpecial Considerations\n\nSubclasses must override this method to provide a unique type.\n\nSee Also\nGetting Store Configuration\nvar configurationName: String\nThe name of the managed object model configuration that creates the persistent store.\nvar options: [AnyHashable : Any]?\nThe options that Core Data uses to create the store.\nvar persistentStoreCoordinator: NSPersistentStoreCoordinator?\nThe persistent store coordinator that loads the persistent store.\nstruct NSPersistentStore.StoreType\nThe types of persistent stores that Core Data supports.\nPersistent Store Types\nPersist data through the available store types."
  },
  {
    "title": "version | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsincrementalstorenode/1506769-version",
    "html": "Discussion\n\nThe version number is used by the persistent store coordinator to detect and handle merge conflicts. The version number should be stored with the record. The version number should (implicitly) start at zero (where zero indicates an unsaved object in memory) and be incremented by exactly one every time you save. In addition, you increment the version number when you or the Core Data framework have marked the associated managed object for optimistic locking.\n\nSee Also\nManaging Node Data\nvar objectID: NSManagedObjectID\nThe object ID that identifies the data stored by the receiver.\nfunc update(withValues: [String : Any], version: UInt64)\nUpdate the values and version to reflect new data being saved to or loaded from the external store.\nfunc value(for: NSPropertyDescription) -> Any?\nReturns the value for the given property."
  },
  {
    "title": "value(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsincrementalstorenode/1506442-value",
    "html": "Parameters\nprop\n\nA property description for one of the properties in the receiver.\n\nReturn Value\n\nThe value for the property specified by prop. May return an instance of NSNull for to-one relationships.\n\nDiscussion\n\nIf a relationship is nil, you should create a new value by invoking newValueForRelationship:forObjectWithID:withContext:error: on the NSPersistentStore object.\n\nSee Also\nManaging Node Data\nvar objectID: NSManagedObjectID\nThe object ID that identifies the data stored by the receiver.\nfunc update(withValues: [String : Any], version: UInt64)\nUpdate the values and version to reflect new data being saved to or loaded from the external store.\nvar version: UInt64\nThe version of data in the receiver."
  },
  {
    "title": "init(objectID:withValues:version:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsincrementalstorenode/1506321-init",
    "html": "Parameters\nobjectID\n\nA managed object ID.\n\nvalues\n\nA dictionary containing the values persisted in an external store with keys corresponding to the names of the property description in the NSEntityDescription object described by objectID:\n\nFor attributes: an immutable value (an instance of a value class such as NSNumber, NSString, NSData). Missing attribute keys will assume a nil value.\n\nFor to-one relationships: the managed object ID of the related object or an instance of NSNull for nil relationship values. A missing key will be resolved lazily through calling newValueForRelationship:forObjectWithID:withContext:error: on the NSPersistentStore object. Lazy resolution for to-one relationships is discouraged.\n\nFor to-many relationships: an instance of NSArray or NSSet containing the managed object IDs of the related objects. Empty to-many relationships must be represented by an empty non-nil collection. A missing key will be resolved lazily through calling newValueForRelationship:forObjectWithID:withContext:error: on the NSPersistentStore object. Lazy resolution for to-many relationships is encouraged.\n\nUnknown or unmodeled keys are stripped out.\n\nversion\n\nThe revision number of this state. This value is used for conflict detection and merging.\n\nReturn Value\n\nAn object initialized with the given values.\n\nSee Also\nRelated Documentation\nIncremental Store Programming Guide"
  },
  {
    "title": "objectID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsincrementalstorenode/1506827-objectid",
    "html": "See Also\nManaging Node Data\nfunc update(withValues: [String : Any], version: UInt64)\nUpdate the values and version to reflect new data being saved to or loaded from the external store.\nfunc value(for: NSPropertyDescription) -> Any?\nReturns the value for the given property.\nvar version: UInt64\nThe version of data in the receiver."
  },
  {
    "title": "init(persistentStoreCoordinator:configurationName:at:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/1506232-init",
    "html": "Parameters\ncoordinator\n\nA persistent store coordinator.\n\nconfigurationName\n\nThe name of the managed object model configuration to use. Pass nil if you do not want to specify a configuration.\n\nurl\n\nThe URL of the store to load.\n\noptions\n\nA dictionary containing configuration options. See NSPersistentStoreCoordinator for a list of key names for options in this dictionary.\n\nReturn Value\n\nA new store object, associated with coordinator, that represents a persistent store at url using the options in options and—if it is not nil—the managed object model configuration configurationName.\n\nDiscussion\n\nYou must ensure that you load metadata during initialization and set it using metadata.\n\nSpecial Considerations\n\nThis is the designated initializer for persistent stores.\n\nSee Also\nRelated Documentation\nvar metadata: [String : Any]!\nThe metadata for the persistent store.\nCore Data Programming Guide\nAtomic Store Programming Topics\nIncremental Store Programming Guide"
  },
  {
    "title": "initWithEntityName: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequest/1506802-initwithentityname",
    "html": "Parameters\nentityName\n\nThe name of the entity to fetch.\n\nReturn Value\n\nA fetch request configured to fetch using the entity named entityName.\n\nDiscussion\n\nThis method provides a convenient way to configure the entity for a fetch request without having to retrieve an NSEntityDescription object. When the fetch is executed, the request uses the managed object context to find the entity with the given name. The model associated with the context’s persistent store coordinator must contain an entity named entityName.\n\nSee Also\nManaging the Fetch Request’s Entity\n+ fetchRequestWithEntityName:\nReturns a fetch request configured with a given entity name.\n- init\nCreates a new fetch request.\nentityName\nThe name of the entity the request is configured to fetch.\nentity\nThe entity specified for the fetch request.\nincludesSubentities\nA Boolean value that indicates whether the fetch request includes subentities in the results.\nNSFetchRequestResultType\nConstants that specify the possible result types a fetch request can return."
  },
  {
    "title": "sourceEntityVersionHash | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitymapping/1443182-sourceentityversionhash",
    "html": "Discussion\n\nThe version hash is calculated by Core Data based on the property values of the entity (see NSEntityDescription’s versionHash method). The sourceEntityVersionHash must equal the version hash of the source entity represented by the mapping.\n\nSee Also\nManaging Source Information\nvar sourceEntityName: String?\nThe source entity name for the entity mapping.\nvar sourceExpression: NSExpression?\nThe source expression for the entity mapping.\nRelated Documentation\nvar destinationEntityVersionHash: Data?\nThe version hash for the destination entity for the entity mapping."
  },
  {
    "title": "result | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchinsertresult/3333246-result",
    "html": "Discussion\n\nCast the result to the type corresponding to resultType to inspect it. The following example shows how to inspect a result type of NSBatchInsertRequestResultType.statusOnly.\n\nlet success = batchInsertResult.result as? Bool\n\n\nSee Also\nAccessing Results\nvar resultType: NSBatchInsertRequestResultType\nThe type of result that Core Data returns from this request.\nenum NSBatchInsertRequestResultType\nResult types for a batch-insertion request."
  },
  {
    "title": "createRelationships(forDestination:in:manager:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitymigrationpolicy/1423783-createrelationships",
    "html": "Parameters\ndInstance\n\nThe destination instance for which to create relationships.\n\nmapping\n\nThe mapping object in use.\n\nmanager\n\nThe migration manager performing the migration.\n\nerror\n\nIf an error occurs, upon return contains an NSError object that describes the problem.\n\nReturn Value\n\ntrue if the relationships are constructed correctly, otherwise false.\n\nDiscussion\n\nYou can use this stage to (re)create relationships between migrated objects—you use the association lookup methods on the NSMigrationManager instance to determine the appropriate relationship targets.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nCustomizing Stages of the Mapping Life Cycle\nfunc begin(NSEntityMapping, with: NSMigrationManager)\nSets up state information before the start of a given entity mapping.\nfunc createDestinationInstances(forSource: NSManagedObject, in: NSEntityMapping, manager: NSMigrationManager)\nCreates the destination instance(s) for a given source instance.\nfunc endInstanceCreation(forMapping: NSEntityMapping, manager: NSMigrationManager)\nIndicates the end of the instance creation stage for the specified entity mapping, and the precursor to the next migration stage.\nfunc endRelationshipCreation(forMapping: NSEntityMapping, manager: NSMigrationManager)\nIndicates the end of the relationship creation stage for the specified entity mapping.\nfunc performCustomValidation(forMapping: NSEntityMapping, manager: NSMigrationManager)\nProvides the option to perform custom validation on migrated objects during the validation stage of the entity migration policy.\nfunc end(NSEntityMapping, manager: NSMigrationManager)\nPerforms cleanup at the end of the migration, from any phase of the mapping."
  },
  {
    "title": "endRelationshipCreation(forMapping:manager:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitymigrationpolicy/1423793-endrelationshipcreation",
    "html": "Parameters\nmapping\n\nThe mapping object in use.\n\nmanager\n\nThe migration manager performing the migration.\n\nerror\n\nIf an error occurs, upon return contains an NSError object that describes the problem.\n\nReturn Value\n\ntrue if the method completes correctly, otherwise false.\n\nDiscussion\n\nThis method is invoked after createRelationships(forDestination:in:manager:); you can override it to clean up state from the creation of relationships, or prepare state for custom validation in performCustomValidation(forMapping:manager:).\n\nHandling Errors in Swift:\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nCustomizing Stages of the Mapping Life Cycle\nfunc begin(NSEntityMapping, with: NSMigrationManager)\nSets up state information before the start of a given entity mapping.\nfunc createDestinationInstances(forSource: NSManagedObject, in: NSEntityMapping, manager: NSMigrationManager)\nCreates the destination instance(s) for a given source instance.\nfunc endInstanceCreation(forMapping: NSEntityMapping, manager: NSMigrationManager)\nIndicates the end of the instance creation stage for the specified entity mapping, and the precursor to the next migration stage.\nfunc createRelationships(forDestination: NSManagedObject, in: NSEntityMapping, manager: NSMigrationManager)\nConstructs the relationships between the newly-created destination instances.\nfunc performCustomValidation(forMapping: NSEntityMapping, manager: NSMigrationManager)\nProvides the option to perform custom validation on migrated objects during the validation stage of the entity migration policy.\nfunc end(NSEntityMapping, manager: NSMigrationManager)\nPerforms cleanup at the end of the migration, from any phase of the mapping."
  },
  {
    "title": "userInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitymapping/1443184-userinfo",
    "html": "Discussion\n\nYou can use the info dictionary in any way that might be useful in your migration. You can set the contents of the dictionary directory or using the appropriate inspector in the Xcode mapping model editor.\n\nSee Also\nManaging Mapping Information\nvar name: String!\nThe name of the entity mapping.\nvar mappingType: NSEntityMappingType\nThe mapping type for the entity mapping.\nvar entityMigrationPolicyClassName: String?\nThe class name of the migration policy for the entity mapping.\nvar attributeMappings: [NSPropertyMapping]?\nThe array of attribute mappings for the entity mapping.\nvar relationshipMappings: [NSPropertyMapping]?\nThe array of relationship mappings for the entity mapping."
  },
  {
    "title": "inMemory | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/storetype/3747527-inmemory",
    "html": "See Also\nStore Types\nstatic let binary: NSPersistentStore.StoreType\nA store that reads from and writes to a persistent binary file.\nstatic let sqlite: NSPersistentStore.StoreType\nA store that reads from and writes to a persistent SQLite database.\nstatic let xml: NSPersistentStore.StoreType\nA store that reads from and writes to a persistent XML file."
  },
  {
    "title": "rawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/storetype/3747529-rawvalue",
    "html": "Relationships\nFrom Protocol\nRawRepresentable\nSee Also\nGetting a Store Type’s Raw Value\ntypealias NSPersistentStore.StoreType.RawValue\nThe type the conforming type uses to represent its values."
  },
  {
    "title": "NSPersistentStore.StoreType.RawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/storetype/rawvalue",
    "html": "See Also\nGetting a Store Type’s Raw Value\nvar rawValue: String\nThe store type’s cardinal value."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/storetype/3747526-hashvalue",
    "html": "See Also\nHashing a Store Type\nfunc hash(into: inout Hasher)\nHashes the components of the store type using the provided hasher."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/storetype/3747525-hash",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining components of this store type.\n\nSee Also\nHashing a Store Type\nvar hashValue: Int\nThe store type’s computed hash value."
  },
  {
    "title": "Persistent Store Types | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/persistent_store_types",
    "html": "Topics\nConstants\nlet NSSQLiteStoreType: String\nThe SQLite database store type.\nlet NSXMLStoreType: String\nThe XML store type.\nlet NSBinaryStoreType: String\nThe binary store type.\nlet NSInMemoryStoreType: String\nThe in-memory store type.\nSee Also\nGetting Store Configuration\nvar configurationName: String\nThe name of the managed object model configuration that creates the persistent store.\nvar options: [AnyHashable : Any]?\nThe options that Core Data uses to create the store.\nvar persistentStoreCoordinator: NSPersistentStoreCoordinator?\nThe persistent store coordinator that loads the persistent store.\nvar type: String\nThe type string of the persistent store.\nstruct NSPersistentStore.StoreType\nThe types of persistent stores that Core Data supports."
  },
  {
    "title": "identifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/1506215-identifier",
    "html": "Discussion\n\nThe identifier is used as part of the managed object IDs for each object in the store.\n\nSpecial Considerations\n\nNSPersistentStore provides a default implementation to provide a globally unique identifier for the store instance.\n\nSee Also\nManaging Store Attributes\nvar isReadOnly: Bool\nA Boolean value that indicates whether the persistent store is read-only.\nvar url: URL?\nThe URL for the persistent store.\nRelated Documentation\nvar metadata: [String : Any]!\nThe metadata for the persistent store."
  },
  {
    "title": "metadataForPersistentStore(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/1506741-metadataforpersistentstore",
    "html": "Parameters\nurl\n\nThe location of the store.\n\nerror\n\nIf an error occurs, upon return contains an NSError object that describes the problem.\n\nReturn Value\n\nThe metadata from the persistent store at url. Returns nil if there is an error.\n\nDiscussion\n\nSubclasses must override this method.\n\nDiscussion\n\nHandling Errors in Swift:\n\nIn Swift, this method returns a nonoptional result and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nManaging Store Metadata\nclass func setMetadata([String : Any]?, forPersistentStoreAt: URL)\nSets the metadata for the store at a given URL.\nfunc loadMetadata()\nInstructs the persistent store to load its metadata.\nvar metadata: [String : Any]!\nThe metadata for the persistent store."
  },
  {
    "title": "url | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/1506700-url",
    "html": "Discussion\n\nTo alter the location of a store, send the persistent store coordinator a setURL(_:for:) message.\n\nSee Also\nManaging Store Attributes\nvar identifier: String!\nThe unique identifier for the persistent store.\nvar isReadOnly: Bool\nA Boolean value that indicates whether the persistent store is read-only."
  },
  {
    "title": "isReadOnly | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/1506183-isreadonly",
    "html": "Discussion\n\ntrue if the receiver is read-only, otherwise false.\n\nSee Also\nManaging Store Attributes\nvar identifier: String!\nThe unique identifier for the persistent store.\nvar url: URL?\nThe URL for the persistent store."
  },
  {
    "title": "setMetadata(_:forPersistentStoreAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/1506824-setmetadata",
    "html": "Parameters\nmetadata\n\nThe metadata for the store at url.\n\nurl\n\nThe location of the store.\n\nerror\n\nIf an error occurs, upon return contains an NSError object that describes the problem.\n\nReturn Value\n\ntrue if the metadata was written correctly, otherwise false.\n\nDiscussion\n\nSubclasses must override this method to set metadata appropriately.\n\nDiscussion\n\nHandling Errors in Swift:\n\nIn Swift, this method returns a nonoptional result and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nManaging Store Metadata\nclass func metadataForPersistentStore(with: URL) -> [String : Any]\nReturns the metadata from the persistent store at the given URL.\nfunc loadMetadata()\nInstructs the persistent store to load its metadata.\nvar metadata: [String : Any]!\nThe metadata for the persistent store."
  },
  {
    "title": "didAdd(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/1506873-didadd",
    "html": "Parameters\ncoordinator\n\nThe persistent store coordinator to which the receiver was added.\n\nDiscussion\n\nThe default implementation does nothing. You can override this method in a subclass in order to perform any kind of setup necessary before the load method is invoked.\n\nSee Also\nResponding to the Store Life Cycle\nfunc willRemove(from: NSPersistentStoreCoordinator?)\nInvoked before the persistent store is removed from the persistent store coordinator."
  },
  {
    "title": "destinationInstances(forEntityMappingName:sourceInstances:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationmanager/1417594-destinationinstances",
    "html": "Parameters\nmappingName\n\nThe name of an entity mapping in use.\n\nsourceInstances\n\nA array of managed objects in the source store.\n\nReturn Value\n\nAn array containing the managed object instances created in the destination store for the entity mapping named mappingName for sourceInstances. If sourceInstances is nil, all of the destination instances created by the specified property mapping are returned.\n\nDiscussion\n\nThis method throws an NSInvalidArgumentException exception if mappingName is not a valid mapping name.\n\nSee Also\nManaging Sources and Destinations\nfunc associate(sourceInstance: NSManagedObject, withDestinationInstance: NSManagedObject, for: NSEntityMapping)\nAssociates a given source managed object instance with an array of destination instances for a given property mapping.\nfunc sourceInstances(forEntityMappingName: String, destinationInstances: [NSManagedObject]?) -> [NSManagedObject]\nReturns the managed object instances in the source store used to create the given destination instances for the passed in property mapping."
  },
  {
    "title": "coreSpotlightExporter | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/2897191-corespotlightexporter",
    "html": "Discussion\n\nSpotlight support isn’t available in a compatible iPad or iPhone app running in visionOS."
  },
  {
    "title": "mappingModel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationmanager/1417600-mappingmodel",
    "html": "See Also\nGetting the Manager’s Configuration\nvar destinationContext: NSManagedObjectContext\nThe managed object context the migration manager uses for writing the destination persistent store.\nvar destinationModel: NSManagedObjectModel\nThe destination model for the migration manager.\nvar sourceContext: NSManagedObjectContext\nThe managed object context the migration manager uses for reading the source persistent store.\nvar sourceModel: NSManagedObjectModel\nThe source model for the migration manager.\nfunc destinationEntity(for: NSEntityMapping) -> NSEntityDescription?\nReturns the entity description for the destination entity of a given entity mapping.\nfunc sourceEntity(for: NSEntityMapping) -> NSEntityDescription?\nReturns the entity description for the source entity of a given entity mapping.\nRelated Documentation\nfunc migrateStore(from: URL, sourceType: String, options: [AnyHashable : Any]?, with: NSMappingModel?, toDestinationURL: URL, destinationType: String, destinationOptions: [AnyHashable : Any]?)\nMigrates the store at a given source URL to the store at a given destination URL, performing all of the mappings specified in a given mapping model."
  },
  {
    "title": "sourceContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationmanager/1417576-sourcecontext",
    "html": "Discussion\n\nThis context is created on demand as part of the initialization of the Core Data stacks used for migration.\n\nSee Also\nGetting the Manager’s Configuration\nvar destinationContext: NSManagedObjectContext\nThe managed object context the migration manager uses for writing the destination persistent store.\nvar destinationModel: NSManagedObjectModel\nThe destination model for the migration manager.\nvar mappingModel: NSMappingModel\nThe mapping model for the migration manager.\nvar sourceModel: NSManagedObjectModel\nThe source model for the migration manager.\nfunc destinationEntity(for: NSEntityMapping) -> NSEntityDescription?\nReturns the entity description for the destination entity of a given entity mapping.\nfunc sourceEntity(for: NSEntityMapping) -> NSEntityDescription?\nReturns the entity description for the source entity of a given entity mapping."
  },
  {
    "title": "usesStoreSpecificMigrationManager | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationmanager/1417606-usesstorespecificmigrationmanage",
    "html": "Return Value\n\ntrue if the receiver uses a store-specific migration manager, otherwise false.\n\nDiscussion\n\ntrue if the receiver uses a store-specific migration manager, otherwise false. The default value is true.\n\nA store-specific migration manager class is not guaranteed to perform any of the migration manager delegate callbacks or update values for the observable properties.\n\nSee Also\nCustomizing the Manager\nvar userInfo: [AnyHashable : Any]?\nThe user info for the migration manager."
  },
  {
    "title": "sourceModel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationmanager/1417592-sourcemodel",
    "html": "See Also\nGetting the Manager’s Configuration\nvar destinationContext: NSManagedObjectContext\nThe managed object context the migration manager uses for writing the destination persistent store.\nvar destinationModel: NSManagedObjectModel\nThe destination model for the migration manager.\nvar mappingModel: NSMappingModel\nThe mapping model for the migration manager.\nvar sourceContext: NSManagedObjectContext\nThe managed object context the migration manager uses for reading the source persistent store.\nfunc destinationEntity(for: NSEntityMapping) -> NSEntityDescription?\nReturns the entity description for the destination entity of a given entity mapping.\nfunc sourceEntity(for: NSEntityMapping) -> NSEntityDescription?\nReturns the entity description for the source entity of a given entity mapping.\nRelated Documentation\ninit(sourceModel: NSManagedObjectModel, destinationModel: NSManagedObjectModel)\nInitializes a migration manager instance with given source and destination models."
  },
  {
    "title": "destinationEntity(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationmanager/1417598-destinationentity",
    "html": "Parameters\nmEntity\n\nAn entity mapping.\n\nReturn Value\n\nThe entity description for the destination entity of mEntity.\n\nDiscussion\n\nEntity mappings do not store the actual description objects, but rather the name and version information of the entity.\n\nSee Also\nGetting the Manager’s Configuration\nvar destinationContext: NSManagedObjectContext\nThe managed object context the migration manager uses for writing the destination persistent store.\nvar destinationModel: NSManagedObjectModel\nThe destination model for the migration manager.\nvar mappingModel: NSMappingModel\nThe mapping model for the migration manager.\nvar sourceContext: NSManagedObjectContext\nThe managed object context the migration manager uses for reading the source persistent store.\nvar sourceModel: NSManagedObjectModel\nThe source model for the migration manager.\nfunc sourceEntity(for: NSEntityMapping) -> NSEntityDescription?\nReturns the entity description for the source entity of a given entity mapping."
  },
  {
    "title": "sourceEntity(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationmanager/1417596-sourceentity",
    "html": "Parameters\nmEntity\n\nAn entity mapping.\n\nReturn Value\n\nThe entity description for the source entity of mEntity.\n\nDiscussion\n\nEntity mappings do not store the actual description objects, but rather the name and version information of the entity.\n\nSee Also\nGetting the Manager’s Configuration\nvar destinationContext: NSManagedObjectContext\nThe managed object context the migration manager uses for writing the destination persistent store.\nvar destinationModel: NSManagedObjectModel\nThe destination model for the migration manager.\nvar mappingModel: NSMappingModel\nThe mapping model for the migration manager.\nvar sourceContext: NSManagedObjectContext\nThe managed object context the migration manager uses for reading the source persistent store.\nvar sourceModel: NSManagedObjectModel\nThe source model for the migration manager.\nfunc destinationEntity(for: NSEntityMapping) -> NSEntityDescription?\nReturns the entity description for the destination entity of a given entity mapping."
  },
  {
    "title": "userInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationmanager/1417588-userinfo",
    "html": "Discussion\n\nYou can use the user info dictionary to aid the customization of your migration process.\n\nSee Also\nCustomizing the Manager\nvar usesStoreSpecificMigrationManager: Bool\nA Boolean value that indicates whether the migration manager tries to use a store specific migration manager to perform the migration."
  },
  {
    "title": "associate(sourceInstance:withDestinationInstance:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationmanager/1417604-associate",
    "html": "Parameters\nsourceInstance\n\nA source managed object.\n\ndestinationInstance\n\nThe destination manage object for sourceInstance.\n\nentityMapping\n\nThe entity mapping to use to associate sourceInstance with the object in destinationInstances.\n\nDiscussion\n\nData migration is performed as a three-stage process (first create the data, then relate the data, then validate the data). You use this method to associate data between the source and destination stores, in order to allow for relationship creation or fix-up after the creation stage.\n\nThis method is called in the default implementation of NSEntityMigrationPolicy’s createDestinationInstances(forSource:in:manager:) method.\n\nSee Also\nManaging Sources and Destinations\nfunc destinationInstances(forEntityMappingName: String, sourceInstances: [NSManagedObject]?) -> [NSManagedObject]\nReturns the managed object instances created in the destination store for the named entity mapping for the given array of source instances.\nfunc sourceInstances(forEntityMappingName: String, destinationInstances: [NSManagedObject]?) -> [NSManagedObject]\nReturns the managed object instances in the source store used to create the given destination instances for the passed in property mapping."
  },
  {
    "title": "migrateStore(from:type:options:mapping:to:type:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationmanager/3747519-migratestore",
    "html": "Parameters\nsourceURL\n\nThe location of the store to migrate.\n\nsourceType\n\nThe persistent store type of the store you’re migrating from. For possible values, see NSPersistentStore.StoreType.\n\nsourceOptions\n\nA dictionary of options to apply to the source store. For possible values, see NSPersistentStoreCoordinator.\n\nmapping\n\nThe mapping model that converts the entities in the source store to those in the destination store.\n\ndestinationURL\n\nThe location of the destination store.\n\ndestinationType\n\nThe persistent store type of the store you’re migrating to. For possible values, see NSPersistentStore.StoreType.\n\ndestinationOptions\n\nA dictionary of options to apply to the destination store. For possible values, see NSPersistentStoreCoordinator.\n\nDiscussion\n\nA store must exist at sourceURL; otherwise, the migration fails. Before the migration occurs, the method ensures compatibility between the source model, the destination model, and the mapping model. If a store doesn’t exist at destinationURL, Core Data creates one as part of the migration; otherwise, the migration updates the existing store."
  },
  {
    "title": "currentEntityMapping | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationmanager/1417582-currententitymapping",
    "html": "Discussion\n\nEach entity is processed a total of three times—instance creation, relationship creation, and validation.\n\nSpecial Considerations\n\nYou can observe this value using key-value observing.\n\nSee Also\nMonitoring a Migration’s Progress\nvar migrationProgress: Float\nA number between 0 and 1 that indicates the proportion of completeness of the migration."
  },
  {
    "title": "NSBatchDeleteRequestResultType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchdeleterequestresulttype",
    "html": "Topics\nResult Types\ncase resultTypeCount\nReturns the number of managed objects the request deletes.\ncase resultTypeObjectIDs\nReturns an array of the deleted managed objects’ identifiers.\ncase resultTypeStatusOnly\nReturns a Boolean value that indicates if the request succeeds.\nRelationships\nConforms To\nSendable\nSee Also\nAccessing the Result\nvar result: Any?\nThe value the request returns after it executes.\nvar resultType: NSBatchDeleteRequestResultType\nThe data type of the request’s result value."
  },
  {
    "title": "stopSpotlightIndexing() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredatacorespotlightdelegate/3751986-stopspotlightindexing",
    "html": "Discussion\n\nAfter you call this method, the delegate no longer posts notifications about index changes.\n\nSee Also\nManaging the Index\nfunc attributeSet(for: NSManagedObject) -> CSSearchableItemAttributeSet?\nReturns the searchable attributes for the specified managed object.\nfunc deleteSpotlightIndex(completionHandler: (Error?) -> Void)\nDeletes all searchable items from the configured index.\nfunc startSpotlightIndexing()\nStarts the indexing of the store’s entities."
  },
  {
    "title": "NSModelPathKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmodelpathkey",
    "html": "Discussion\n\nThis is resolved to the model.mom path contained in the external record file directory."
  },
  {
    "title": "changeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorychange/2892569-changeid",
    "html": "See Also\nInspecting Change Details\nvar changeType: NSPersistentHistoryChangeType\nThe type of change to the managed object in the persistent store.\nenum NSPersistentHistoryChangeType\nThe types of changes to managed objects reflected in persistent history.\nvar changedObjectID: NSManagedObjectID\nThe identifier of the managed object that changed.\nvar tombstone: [AnyHashable : Any]?\nA dictionary of attributes marked for preservation after deletion, and their values when deleted.\nvar transaction: NSPersistentHistoryTransaction?\nThe persistent history transaction containing this change.\nvar updatedProperties: Set<NSPropertyDescription>?\nThe set of properties that were updated on the managed object."
  },
  {
    "title": "entity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchinsertrequest/3333231-entity",
    "html": "See Also\nConfiguring a Request\nvar dictionaryHandler: ((NSMutableDictionary) -> Bool)?\nA closure that provides a dictionary for your app to insert data into.\nvar entityName: String\nThe name of the managed entity to insert data into.\nvar managedObjectHandler: ((NSManagedObject) -> Bool)?\nA closure that provides a managed object for your app to insert data into.\nvar objectsToInsert: [[String : Any]]?\nAn array of dictionaries that represents the objects to insert with the keys as attribute names and their assigned values.\nvar resultType: NSBatchInsertRequestResultType\nThe type of result that Core Data returns from this request."
  },
  {
    "title": "entityName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchinsertrequest/3333232-entityname",
    "html": "See Also\nConfiguring a Request\nvar dictionaryHandler: ((NSMutableDictionary) -> Bool)?\nA closure that provides a dictionary for your app to insert data into.\nvar entity: NSEntityDescription?\nThe managed entity to insert data into.\nvar managedObjectHandler: ((NSManagedObject) -> Bool)?\nA closure that provides a managed object for your app to insert data into.\nvar objectsToInsert: [[String : Any]]?\nAn array of dictionaries that represents the objects to insert with the keys as attribute names and their assigned values.\nvar resultType: NSBatchInsertRequestResultType\nThe type of result that Core Data returns from this request."
  },
  {
    "title": "mergeType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmergepolicy/1506675-mergetype",
    "html": "See Also\nGetting a Merge Policy\ninit(merge: NSMergePolicyType)\nReturns a merge policy initialized with a given policy type."
  },
  {
    "title": "init(merge:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmergepolicy/1506763-init",
    "html": "Parameters\nty\n\nA merge policy type.\n\nReturn Value\n\nA merge policy initialized with a given policy type.\n\nDiscussion\n\nIf you override this method in a subclass, you should invoke the superclass’s implementation with the merge policy that is closest to the behavior you want.\n\nThis will make it easier to use the superclass’s implementation of resolve(mergeConflicts:) and then customize the results.\n\nDue to the complexity of merging to-many relationships, this class is designed with the expectation that you call super as the base implementation.\n\nSee Also\nGetting a Merge Policy\nvar mergeType: NSMergePolicyType\nThe merge type.\nRelated Documentation\nCore Data Model Versioning and Data Migration Programming Guide"
  },
  {
    "title": "resolve(constraintConflicts:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmergepolicy/1506678-resolve",
    "html": "See Also\nResolving a Conflict\nfunc resolve(mergeConflicts: [Any])\nResolves the conflicts in a given list.\nfunc resolve(optimisticLockingConflicts: [NSMergeConflict])\nResolves the conflicts in a given list."
  },
  {
    "title": "resolve(optimisticLockingConflicts:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmergepolicy/1506787-resolve",
    "html": "See Also\nResolving a Conflict\nfunc resolve(mergeConflicts: [Any])\nResolves the conflicts in a given list.\nfunc resolve(constraintConflicts: [NSConstraintConflict])\nResolves the conflicts in a given list."
  },
  {
    "title": "resultType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchinsertresult/3333247-resulttype",
    "html": "See Also\nAccessing Results\nvar result: Any?\nThe result of a batch-insertion request.\nenum NSBatchInsertRequestResultType\nResult types for a batch-insertion request."
  },
  {
    "title": "reset() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationmanager/1417590-reset",
    "html": "Discussion\n\nThis method does not reset the source or destination contexts.\n\nSee Also\nAborting a Migration\nfunc cancelMigrationWithError(Error)\nCancels the migration with a given error."
  },
  {
    "title": "init(from:forSourceModel:destinationModel:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmappingmodel/1506930-init",
    "html": "Parameters\nbundles\n\nAn array of bundles in which to search for mapping models.\n\nsourceModel\n\nThe managed object model for the source store.\n\ndestinationModel\n\nThe managed object model for the destination store.\n\nReturn Value\n\nReturns the mapping model to translate data from sourceModel to destinationModel. If a suitable mapping model cannot be found, returns nil.\n\nDiscussion\n\nThis method is a companion to the mergedModel(from:) and mergedModel(from:forStoreMetadata:) methods. In this case, the framework uses the version information from the models to locate the appropriate mapping model in the available bundles.\n\nSee Also\nCreating a Mapping\nclass func inferredMappingModel(forSourceModel: NSManagedObjectModel, destinationModel: NSManagedObjectModel) -> NSMappingModel\nReturns a newly created mapping model that will migrate data from the source to the destination model.\ninit?(contentsOf: URL?)\nReturns a mapping model initialized from a given URL.\nRelated Documentation\nCore Data Model Versioning and Data Migration Programming Guide"
  },
  {
    "title": "Deprecated Symbols | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationmanager/deprecated_symbols",
    "html": "Topics\nDeprecated Methods\nfunc migrateStore(from: URL, sourceType: String, options: [AnyHashable : Any]?, with: NSMappingModel?, toDestinationURL: URL, destinationType: String, destinationOptions: [AnyHashable : Any]?)\nMigrates the store at a given source URL to the store at a given destination URL, performing all of the mappings specified in a given mapping model."
  },
  {
    "title": "init(contentsOf:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmappingmodel/1506304-init",
    "html": "Parameters\nurl\n\nThe location of an archived mapping model.\n\nReturn Value\n\nA mapping model initialized from url.\n\nSee Also\nCreating a Mapping\ninit?(from: [Bundle]?, forSourceModel: NSManagedObjectModel?, destinationModel: NSManagedObjectModel?)\nReturns the mapping model that will translate data from the source to the destination model.\nclass func inferredMappingModel(forSourceModel: NSManagedObjectModel, destinationModel: NSManagedObjectModel) -> NSMappingModel\nReturns a newly created mapping model that will migrate data from the source to the destination model."
  },
  {
    "title": "destinationEntityName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitymapping/1443176-destinationentityname",
    "html": "Discussion\n\nMappings are not directly bound to entity descriptions. You can use the migration manager’s destinationEntity(for:) method to retrieve the entity description for this entity name.\n\nSee Also\nManaging Destination Information\nvar destinationEntityVersionHash: Data?\nThe version hash for the destination entity for the entity mapping.\nRelated Documentation\nvar sourceEntityName: String?\nThe source entity name for the entity mapping."
  },
  {
    "title": "sourceExpression | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitymapping/1443180-sourceexpression",
    "html": "Discussion\n\nThe source expression is used to obtain the collection of managed objects to process through the mapping. The expression can be a fetch request expression, or any other expression that evaluates to a collection.\n\nSee Also\nManaging Source Information\nvar sourceEntityName: String?\nThe source entity name for the entity mapping.\nvar sourceEntityVersionHash: Data?\nThe version hash of the source entity for the entity mapping."
  },
  {
    "title": "destinationEntityVersionHash | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitymapping/1443169-destinationentityversionhash",
    "html": "Discussion\n\nThe version hash is calculated by Core Data based on the property values of the entity (see NSEntityDescription’s versionHash method). The destinationEntityVersionHash must equal the version hash of the destination entity represented by the mapping.\n\nSee Also\nManaging Destination Information\nvar destinationEntityName: String?\nThe destination entity name for the entity mapping.\nRelated Documentation\nvar sourceEntityVersionHash: Data?\nThe version hash of the source entity for the entity mapping."
  },
  {
    "title": "mappingType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitymapping/1443194-mappingtype",
    "html": "Discussion\n\nIf you specify a custom entity mapping type, you must specify a value for the migration policy class name as well (see entityMigrationPolicyClassName).\n\nSee Also\nManaging Mapping Information\nvar name: String!\nThe name of the entity mapping.\nvar entityMigrationPolicyClassName: String?\nThe class name of the migration policy for the entity mapping.\nvar attributeMappings: [NSPropertyMapping]?\nThe array of attribute mappings for the entity mapping.\nvar relationshipMappings: [NSPropertyMapping]?\nThe array of relationship mappings for the entity mapping.\nvar userInfo: [AnyHashable : Any]?\nThe user info dictionary for the entity mapping."
  },
  {
    "title": "name | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitymapping/1443167-name",
    "html": "Discussion\n\nThe name is used only as a means of distinguishing mappings in a model. If not specified, the value defaults to SOURCE->DESTINATION.\n\nSee Also\nManaging Mapping Information\nvar mappingType: NSEntityMappingType\nThe mapping type for the entity mapping.\nvar entityMigrationPolicyClassName: String?\nThe class name of the migration policy for the entity mapping.\nvar attributeMappings: [NSPropertyMapping]?\nThe array of attribute mappings for the entity mapping.\nvar relationshipMappings: [NSPropertyMapping]?\nThe array of relationship mappings for the entity mapping.\nvar userInfo: [AnyHashable : Any]?\nThe user info dictionary for the entity mapping."
  },
  {
    "title": "createDestinationInstances(forSource:in:manager:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitymigrationpolicy/1423801-createdestinationinstances",
    "html": "Parameters\nsInstance\n\nThe source instance for which to create destination instances.\n\nmapping\n\nThe mapping object in use.\n\nmanager\n\nThe migration manager performing the migration.\n\nerror\n\nIf an error occurs, upon return contains an NSError object that describes the problem.\n\nReturn Value\n\ntrue if the method completes successfully, otherwise false.\n\nDiscussion\n\nThis method is invoked by the migration manager on each source instance (as specified by the sourceExpression in the mapping) to create the corresponding destination instance(s). It also associates the source and destination instances by calling NSMigrationManager’s associate(sourceInstance:withDestinationInstance:for:) method.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSpecial Considerations\n\nIf you override this method and do not invoke super, you must invoke NSMigrationManager’s associate(sourceInstance:withDestinationInstance:for:) to associate the source and destination instances as required. .\n\nSee Also\nCustomizing Stages of the Mapping Life Cycle\nfunc begin(NSEntityMapping, with: NSMigrationManager)\nSets up state information before the start of a given entity mapping.\nfunc endInstanceCreation(forMapping: NSEntityMapping, manager: NSMigrationManager)\nIndicates the end of the instance creation stage for the specified entity mapping, and the precursor to the next migration stage.\nfunc createRelationships(forDestination: NSManagedObject, in: NSEntityMapping, manager: NSMigrationManager)\nConstructs the relationships between the newly-created destination instances.\nfunc endRelationshipCreation(forMapping: NSEntityMapping, manager: NSMigrationManager)\nIndicates the end of the relationship creation stage for the specified entity mapping.\nfunc performCustomValidation(forMapping: NSEntityMapping, manager: NSMigrationManager)\nProvides the option to perform custom validation on migrated objects during the validation stage of the entity migration policy.\nfunc end(NSEntityMapping, manager: NSMigrationManager)\nPerforms cleanup at the end of the migration, from any phase of the mapping."
  },
  {
    "title": "entityMigrationPolicyClassName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitymapping/1443171-entitymigrationpolicyclassname",
    "html": "Discussion\n\nIf not specified, the default migration class name is NSEntityMigrationPolicy. You can specify a subclass to provide custom behavior.\n\nSee Also\nManaging Mapping Information\nvar name: String!\nThe name of the entity mapping.\nvar mappingType: NSEntityMappingType\nThe mapping type for the entity mapping.\nvar attributeMappings: [NSPropertyMapping]?\nThe array of attribute mappings for the entity mapping.\nvar relationshipMappings: [NSPropertyMapping]?\nThe array of relationship mappings for the entity mapping.\nvar userInfo: [AnyHashable : Any]?\nThe user info dictionary for the entity mapping."
  },
  {
    "title": "endInstanceCreation(forMapping:manager:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitymigrationpolicy/1423805-endinstancecreation",
    "html": "Parameters\nmapping\n\nThe mapping object in use.\n\nmanager\n\nThe migration manager performing the migration.\n\nerror\n\nIf an error occurs, upon return contains an NSError object that describes the problem.\n\nReturn Value\n\ntrue if the relationships are constructed correctly, otherwise false.\n\nDiscussion\n\nYou can override this method to clean up state from the creation of destination or to prepare state for the creation of relationships.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nCustomizing Stages of the Mapping Life Cycle\nfunc begin(NSEntityMapping, with: NSMigrationManager)\nSets up state information before the start of a given entity mapping.\nfunc createDestinationInstances(forSource: NSManagedObject, in: NSEntityMapping, manager: NSMigrationManager)\nCreates the destination instance(s) for a given source instance.\nfunc createRelationships(forDestination: NSManagedObject, in: NSEntityMapping, manager: NSMigrationManager)\nConstructs the relationships between the newly-created destination instances.\nfunc endRelationshipCreation(forMapping: NSEntityMapping, manager: NSMigrationManager)\nIndicates the end of the relationship creation stage for the specified entity mapping.\nfunc performCustomValidation(forMapping: NSEntityMapping, manager: NSMigrationManager)\nProvides the option to perform custom validation on migrated objects during the validation stage of the entity migration policy.\nfunc end(NSEntityMapping, manager: NSMigrationManager)\nPerforms cleanup at the end of the migration, from any phase of the mapping."
  },
  {
    "title": "end(_:manager:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitymigrationpolicy/1423787-end",
    "html": "Parameters\nmapping\n\nThe mapping object in use.\n\nmanager\n\nThe migration manager performing the migration.\n\nerror\n\nIf an error occurs, upon return contains an NSError object that describes the problem.\n\nReturn Value\n\ntrue if the method completes correctly, otherwise false.\n\nDiscussion\n\nThis is the end to the given entity mapping. You can implement this method to perform any clean-up at the end of the migration (from any of the three phases of the mapping).\n\nHandling Errors in Swift:\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nCustomizing Stages of the Mapping Life Cycle\nfunc begin(NSEntityMapping, with: NSMigrationManager)\nSets up state information before the start of a given entity mapping.\nfunc createDestinationInstances(forSource: NSManagedObject, in: NSEntityMapping, manager: NSMigrationManager)\nCreates the destination instance(s) for a given source instance.\nfunc endInstanceCreation(forMapping: NSEntityMapping, manager: NSMigrationManager)\nIndicates the end of the instance creation stage for the specified entity mapping, and the precursor to the next migration stage.\nfunc createRelationships(forDestination: NSManagedObject, in: NSEntityMapping, manager: NSMigrationManager)\nConstructs the relationships between the newly-created destination instances.\nfunc endRelationshipCreation(forMapping: NSEntityMapping, manager: NSMigrationManager)\nIndicates the end of the relationship creation stage for the specified entity mapping.\nfunc performCustomValidation(forMapping: NSEntityMapping, manager: NSMigrationManager)\nProvides the option to perform custom validation on migrated objects during the validation stage of the entity migration policy."
  },
  {
    "title": "performCustomValidation(forMapping:manager:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitymigrationpolicy/1423791-performcustomvalidation",
    "html": "Parameters\nmapping\n\nThe mapping object in use.\n\nmanager\n\nThe migration manager performing the migration.\n\nerror\n\nIf an error occurs, upon return contains an NSError object that describes the problem.\n\nReturn Value\n\ntrue if the method completes correctly, otherwise false.\n\nDiscussion\n\nThis method is called before the default save validation is performed by the framework.\n\nIf you implement this method, you must manually obtain the collection of objects you are interested in validating.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nCustomizing Stages of the Mapping Life Cycle\nfunc begin(NSEntityMapping, with: NSMigrationManager)\nSets up state information before the start of a given entity mapping.\nfunc createDestinationInstances(forSource: NSManagedObject, in: NSEntityMapping, manager: NSMigrationManager)\nCreates the destination instance(s) for a given source instance.\nfunc endInstanceCreation(forMapping: NSEntityMapping, manager: NSMigrationManager)\nIndicates the end of the instance creation stage for the specified entity mapping, and the precursor to the next migration stage.\nfunc createRelationships(forDestination: NSManagedObject, in: NSEntityMapping, manager: NSMigrationManager)\nConstructs the relationships between the newly-created destination instances.\nfunc endRelationshipCreation(forMapping: NSEntityMapping, manager: NSMigrationManager)\nIndicates the end of the relationship creation stage for the specified entity mapping.\nfunc end(NSEntityMapping, manager: NSMigrationManager)\nPerforms cleanup at the end of the migration, from any phase of the mapping."
  },
  {
    "title": "NSMigrationDestinationObjectKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationdestinationobjectkey",
    "html": "Discussion\n\nTo access this key in a custom value expression string in the Xcode mapping model editor use $destination."
  },
  {
    "title": "NSMigrationManagerKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationmanagerkey",
    "html": "Discussion\n\nTo access this key in a custom value expression string in the Xcode mapping model editor use $manager."
  },
  {
    "title": "NSMigrationSourceObjectKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationsourceobjectkey",
    "html": "Discussion\n\nTo access this key in a custom value expression string in the Xcode mapping model editor use $source."
  },
  {
    "title": "NSMigrationPropertyMappingKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationpropertymappingkey",
    "html": "Discussion\n\nTo access this key in a custom value expression string in the Xcode mapping model editor use $propertyMapping."
  },
  {
    "title": "validateForInsert() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506683-validateforinsert",
    "html": "Parameters\nerror\n\nIf the receiver cannot be inserted in its current state, upon return contains an instance of NSError that describes the problem.\n\nReturn Value\n\ntrue if the receiver can be inserted in its current state, otherwise false.\n\nDiscussion\n\nSubclasses should invoke super’s implementation before performing their own validation, and should combine any error returned by super’s implementation with their own (see Managed Object Validation).\n\nDiscussion\n\nHandling Errors in Swift:\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nManaging Data Validation\nfunc validateValue(AutoreleasingUnsafeMutablePointer<AnyObject?>, forKey: String)\nValidates a property value for a given key.\nfunc validateForDelete()\nDetermines whether the managed object can be deleted in its current state.\nfunc validateForUpdate()\nDetermines whether the managed object's current state is valid.\nValidation error codes\nError codes relating to the validation of managed objects.\nlet NSValidationKeyErrorKey: String\nThe error key for the attribute that failed to validate.\nlet NSValidationObjectErrorKey: String\nThe error key for the object that failed to validate.\nlet NSValidationPredicateErrorKey: String\nThe error key for the predicate that failed to validate.\nlet NSValidationValueErrorKey: String\nThe error key for the value that failed to validate."
  },
  {
    "title": "init(entityName:dictionaryHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchinsertrequest/3618787-init",
    "html": "Parameters\nentityName\n\nThe name of the managed entity to insert data into.\n\nhandler\n\nA closure that provides a dictionary that represents an object to insert. The dictionary contains an attribute name key and a value.\n\nReturn Value\n\nA batch-insertion request.\n\nDiscussion\n\nCore Data repeatedly calls the provided closure until it returns true, then finishes the request and saves the data.\n\nSee Also\nCreating a Request\ninit(entity: NSEntityDescription, dictionaryHandler: (NSMutableDictionary) -> Bool)\nCreates a batch-insertion request for a managed entity, and specifies a closure that provides data dictionaries for insertion.\ninit(entity: NSEntityDescription, managedObjectHandler: (NSManagedObject) -> Bool)\nCreates a batch-insertion request for a managed entity, and specifies a closure that inserts data into the entity.\ninit(entityName: String, managedObjectHandler: (NSManagedObject) -> Bool)\nCreates a batch-insertion request for a named managed entity, and specifies a closure that inserts data into the entity.\ninit(entity: NSEntityDescription, objects: [[String : Any]])\nCreates a batch-insertion request for a managed entity, and provides an array of data dictionaries for insertion.\ninit(entityName: String, objects: [[String : Any]])\nCreates a batch-insertion request for a named managed entity, and provides an array of data dictionaries for insertion.\ninit()\nCreates a Core Data batch-insertion request.\nDeprecated"
  },
  {
    "title": "init(entity:dictionaryHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchinsertrequest/3618790-init",
    "html": "Parameters\nentity\n\nA managed entity to insert data into.\n\nhandler\n\nA closure that provides a dictionary that represents an object to insert. The dictionary contains an attribute name key and a value.\n\nReturn Value\n\nA batch-insertion request.\n\nDiscussion\n\nCore Data repeatedly calls the provided closure until it returns true, then finishes the request and saves the data.\n\nSee Also\nCreating a Request\ninit(entity: NSEntityDescription, managedObjectHandler: (NSManagedObject) -> Bool)\nCreates a batch-insertion request for a managed entity, and specifies a closure that inserts data into the entity.\ninit(entityName: String, dictionaryHandler: (NSMutableDictionary) -> Bool)\nCreates a batch-insertion request for a named managed entity, and specifies a closure that provides data dictionaries for insertion.\ninit(entityName: String, managedObjectHandler: (NSManagedObject) -> Bool)\nCreates a batch-insertion request for a named managed entity, and specifies a closure that inserts data into the entity.\ninit(entity: NSEntityDescription, objects: [[String : Any]])\nCreates a batch-insertion request for a managed entity, and provides an array of data dictionaries for insertion.\ninit(entityName: String, objects: [[String : Any]])\nCreates a batch-insertion request for a named managed entity, and provides an array of data dictionaries for insertion.\ninit()\nCreates a Core Data batch-insertion request.\nDeprecated"
  },
  {
    "title": "NSMigrationEntityPolicyKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationentitypolicykey",
    "html": "Discussion\n\nTo access this key in a custom value expression string in the Xcode mapping model editor use $entityPolicy."
  },
  {
    "title": "willChangeValue(forKey:withSetMutation:using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506801-willchangevalue",
    "html": "Parameters\ninKey\n\nThe name of a property that is a to-many relationship\n\ninMutationKind\n\nThe type of change that will be made.\n\ninObjects\n\nThe objects that were involved in the change (see NSKeyValueSetMutationKind).\n\nDiscussion\n\nFor more details, see Key-Value Observing Programming Guide.\n\nYou must not override this method.\n\nSee Also\nSupporting Key-Value Observing\nfunc didAccessValue(forKey: String?)\nProvides support for key-value observing access notification.\nfunc observationInfo() -> UnsafeMutableRawPointer?\nReturns the observation info of the managed object.\nfunc setObservationInfo(UnsafeMutableRawPointer?)\nSets the observation info of the managed object.\nfunc willAccessValue(forKey: String?)\nProvides support for key-value observing access notification.\nfunc didChangeValue(forKey: String)\nProvides an opportunity to respond when a value of a given property has changed.\nfunc didChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\nProvides an opportunity to respond when a change was made to a specified to-many relationship.\nfunc willChangeValue(forKey: String)\nProvides an opportunity to respond when a value of a given property is about to change."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchinsertrequest/3333233-init",
    "html": "See Also\nCreating a Request\ninit(entity: NSEntityDescription, dictionaryHandler: (NSMutableDictionary) -> Bool)\nCreates a batch-insertion request for a managed entity, and specifies a closure that provides data dictionaries for insertion.\ninit(entity: NSEntityDescription, managedObjectHandler: (NSManagedObject) -> Bool)\nCreates a batch-insertion request for a managed entity, and specifies a closure that inserts data into the entity.\ninit(entityName: String, dictionaryHandler: (NSMutableDictionary) -> Bool)\nCreates a batch-insertion request for a named managed entity, and specifies a closure that provides data dictionaries for insertion.\ninit(entityName: String, managedObjectHandler: (NSManagedObject) -> Bool)\nCreates a batch-insertion request for a named managed entity, and specifies a closure that inserts data into the entity.\ninit(entity: NSEntityDescription, objects: [[String : Any]])\nCreates a batch-insertion request for a managed entity, and provides an array of data dictionaries for insertion.\ninit(entityName: String, objects: [[String : Any]])\nCreates a batch-insertion request for a named managed entity, and provides an array of data dictionaries for insertion."
  },
  {
    "title": "dictionaryHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchinsertrequest/3618789-dictionaryhandler",
    "html": "See Also\nConfiguring a Request\nvar entity: NSEntityDescription?\nThe managed entity to insert data into.\nvar entityName: String\nThe name of the managed entity to insert data into.\nvar managedObjectHandler: ((NSManagedObject) -> Bool)?\nA closure that provides a managed object for your app to insert data into.\nvar objectsToInsert: [[String : Any]]?\nAn array of dictionaries that represents the objects to insert with the keys as attribute names and their assigned values.\nvar resultType: NSBatchInsertRequestResultType\nThe type of result that Core Data returns from this request."
  },
  {
    "title": "constraint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsconstraintconflict/1506902-constraint",
    "html": "See Also\nInspecting a Conflict\nvar conflictingObjects: [NSManagedObject]\nThe managed objects that are in conflict.\nvar conflictingSnapshots: [[AnyHashable : Any]]\nThe original property values of objects in violation of the constraint.\nvar constraintValues: [String : Any]\nThe values that the conflicting objects had when the conflict was created.\nvar databaseObject: NSManagedObject?\nThe object whose database row is using constraint values.\nvar databaseSnapshot: [String : Any]?\nThe values currently stored in the database."
  },
  {
    "title": "constraintValues | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsconstraintconflict/1506399-constraintvalues",
    "html": "See Also\nInspecting a Conflict\nvar conflictingObjects: [NSManagedObject]\nThe managed objects that are in conflict.\nvar conflictingSnapshots: [[AnyHashable : Any]]\nThe original property values of objects in violation of the constraint.\nvar constraint: [String]\nThe constraint that has been violated.\nvar databaseObject: NSManagedObject?\nThe object whose database row is using constraint values.\nvar databaseSnapshot: [String : Any]?\nThe values currently stored in the database."
  },
  {
    "title": "willChangeValue(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506229-willchangevalue",
    "html": "Parameters\nkey\n\nThe name of the property that will change.\n\nDiscussion\n\nFor more details, see Key-Value Observing Programming Guide.\n\nYou must not override this method.\n\nSee Also\nSupporting Key-Value Observing\nfunc didAccessValue(forKey: String?)\nProvides support for key-value observing access notification.\nfunc observationInfo() -> UnsafeMutableRawPointer?\nReturns the observation info of the managed object.\nfunc setObservationInfo(UnsafeMutableRawPointer?)\nSets the observation info of the managed object.\nfunc willAccessValue(forKey: String?)\nProvides support for key-value observing access notification.\nfunc didChangeValue(forKey: String)\nProvides an opportunity to respond when a value of a given property has changed.\nfunc didChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\nProvides an opportunity to respond when a change was made to a specified to-many relationship.\nfunc willChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\nProvides an opportunity to respond when a change is about to be made to a specified to-many relationship."
  },
  {
    "title": "migratePersistentStore(_:to:options:withType:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468927-migratepersistentstore",
    "html": "Deprecated\n\nUse migratePersistentStore(_:to:options:type:) instead.\n\nParameters\nstore\n\nA persistent store.\n\nURL\n\nAn URL object that specifies the location for the new store.\n\noptions\n\nA dictionary containing key-value pairs that specify whether the store should be read-only, and whether (for an XML store) the XML file should be validated against the DTD before it is read. For key definitions, see Store options.\n\nstoreType\n\nA string constant (such as NSSQLiteStoreType) that specifies the type of the new store—see Persistent Store Types.\n\nerror\n\nIf an error occurs, upon return contains an instance of NSError that describes the problem.\n\nReturn Value\n\nIf the migration is successful, the new store, otherwise nil.\n\nDiscussion\n\nThis method is typically used for “Save As” operations. Performance may vary depending on the type of old and new store. For more details of the action of this method, see Persistent Store Features in Core Data Programming Guide.\n\nImportant\n\nAfter invocation of this method, the specified store is removed from the coordinator thus store is no longer a useful reference.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns a nonoptional result and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nDeprecated instance methods\nfunc addPersistentStore(ofType: String, configurationName: String?, at: URL?, options: [AnyHashable : Any]?) -> NSPersistentStore\nAdds a specific type of persistent store at the provided location.\nfunc destroyPersistentStore(at: URL, ofType: String, options: [AnyHashable : Any]?)\nDeletes a specific type of persistent store at the provided location.\nfunc importStore(withIdentifier: String?, fromExternalRecordsDirectoryAt: URL, to: URL, options: [AnyHashable : Any]?, ofType: String) -> NSPersistentStore\nCreates and populates a store with the external records found at a given URL.\nDeprecated\nfunc lock()\nAttempts to acquire a lock.\nDeprecated\nfunc replacePersistentStore(at: URL, destinationOptions: [AnyHashable : Any]?, withPersistentStoreFrom: URL, sourceOptions: [AnyHashable : Any]?, ofType: String)\nReplaces one persistent store with another.\nfunc tryLock() -> Bool\nAttempts to acquire a lock.\nDeprecated\nfunc unlock()\nRelinquishes a previously acquired lock.\nDeprecated\nfunc perform(() -> Void)\nExecutes the provided closure asynchronously on the coordinator’s queue.\nfunc performAndWait(() -> Void)\nExecutes the provided closure on the coordinator’s queue and waits for it to finish.\nRelated Documentation\nfunc remove(NSPersistentStore)\nRemoves the specified persistent store from the coordinator."
  },
  {
    "title": "NSAttributeType.decimalAttributeType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributetype/decimalattributetype",
    "html": "Discussion\n\nUse instances of NSDecimalNumber when reading and writing attributes of this type.\n\nSee Also\nAttribute types\ncase binaryDataAttributeType\nAn attribute that stores binary data.\ncase booleanAttributeType\nAn attribute that stores a Boolean value.\ncase compositeAttributeType\nAn attribute that derives its value by composing other attributes.\ncase dateAttributeType\nAn attribute that stores a date.\ncase doubleAttributeType\nAn attribute that stores a double value.\ncase floatAttributeType\nAn attribute that stores a float value.\ncase integer16AttributeType\nAn attribute that stores a 16-bit signed integer value.\ncase integer32AttributeType\nAn attribute that stores a 32-bit signed integer value.\ncase integer64AttributeType\nAn attribute that stores a 64-bit signed integer value.\ncase objectIDAttributeType\nAn attribute that stores a managed object’s ID.\ncase stringAttributeType\nAn attribute that stores a string.\ncase transformableAttributeType\nAn attribute that uses a value transformer to derive its value.\ncase undefinedAttributeType\nAn attribute that doesn’t have an explicit type.\ncase URIAttributeType\nAn attribute that stores a uniform resource identifier.\ncase UUIDAttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "NSPersistentStore.StoreType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/storetype",
    "html": "Topics\nStore Types\nstatic let binary: NSPersistentStore.StoreType\nA store that reads from and writes to a persistent binary file.\nstatic let inMemory: NSPersistentStore.StoreType\nAn ephemeral store that reads from and writes to memory only.\nstatic let sqlite: NSPersistentStore.StoreType\nA store that reads from and writes to a persistent SQLite database.\nstatic let xml: NSPersistentStore.StoreType\nA store that reads from and writes to a persistent XML file.\nCreating a Store Type\ninit(rawValue: String)\nCreates a store type using the specified raw value.\nGetting a Store Type’s Raw Value\nvar rawValue: String\nThe store type’s cardinal value.\ntypealias NSPersistentStore.StoreType.RawValue\nThe type the conforming type uses to represent its values.\nHashing a Store Type\nvar hashValue: Int\nThe store type’s computed hash value.\nfunc hash(into: inout Hasher)\nHashes the components of the store type using the provided hasher.\nComparing Store Types\nstatic func != (NSPersistentStore.StoreType, NSPersistentStore.StoreType) -> Bool\nReturns a Boolean value that indicates whether two store types are unequal.\nRelationships\nConforms To\nHashable\nRawRepresentable\nSee Also\nGetting Store Configuration\nvar configurationName: String\nThe name of the managed object model configuration that creates the persistent store.\nvar options: [AnyHashable : Any]?\nThe options that Core Data uses to create the store.\nvar persistentStoreCoordinator: NSPersistentStoreCoordinator?\nThe persistent store coordinator that loads the persistent store.\nvar type: String\nThe type string of the persistent store.\nPersistent Store Types\nPersist data through the available store types."
  },
  {
    "title": "destinationContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationmanager/1417578-destinationcontext",
    "html": "Discussion\n\nThis context is created on demand as part of the initialization of the Core Data stacks used for migration.\n\nSee Also\nGetting the Manager’s Configuration\nvar destinationModel: NSManagedObjectModel\nThe destination model for the migration manager.\nvar mappingModel: NSMappingModel\nThe mapping model for the migration manager.\nvar sourceContext: NSManagedObjectContext\nThe managed object context the migration manager uses for reading the source persistent store.\nvar sourceModel: NSManagedObjectModel\nThe source model for the migration manager.\nfunc destinationEntity(for: NSEntityMapping) -> NSEntityDescription?\nReturns the entity description for the destination entity of a given entity mapping.\nfunc sourceEntity(for: NSEntityMapping) -> NSEntityDescription?\nReturns the entity description for the source entity of a given entity mapping."
  },
  {
    "title": "expressionResultType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsexpressiondescription/1506706-expressionresulttype",
    "html": "Deprecated\n\nUse resultType instead."
  },
  {
    "title": "init(sourceModel:destinationModel:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationmanager/1417583-init",
    "html": "Parameters\nsourceModel\n\nThe source managed object model for the migration manager.\n\ndestinationModel\n\nThe destination managed object model for the migration manager.\n\nReturn Value\n\nA migration manager instance initialized to migrate data in a store that uses sourceModel to a store that uses destinationModel.\n\nDiscussion\n\nYou specify the mapping model in the migration method, migrateStore(from:sourceType:options:with:toDestinationURL:destinationType:destinationOptions:).\n\nSpecial Considerations\n\nThis is the designated initializer for NSMigrationManager.\n\nAlthough validation of the models is performed during migrateStore(from:sourceType:options:with:toDestinationURL:destinationType:destinationOptions:), as with NSPersistentStoreCoordinator once models are added to the migration manager they are immutable and cannot be altered.\n\nSee Also\nRelated Documentation\nvar destinationModel: NSManagedObjectModel\nThe destination model for the migration manager.\nvar mappingModel: NSMappingModel\nThe mapping model for the migration manager.\nvar sourceModel: NSManagedObjectModel\nThe source model for the migration manager.\nfunc migrateStore(from: URL, sourceType: String, options: [AnyHashable : Any]?, with: NSMappingModel?, toDestinationURL: URL, destinationType: String, destinationOptions: [AnyHashable : Any]?)\nMigrates the store at a given source URL to the store at a given destination URL, performing all of the mappings specified in a given mapping model.\nCore Data Model Versioning and Data Migration Programming Guide"
  },
  {
    "title": "migrationManagerClass() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/1506361-migrationmanagerclass",
    "html": "Return Value\n\nThe NSMigrationManager class for this store class\n\nDiscussion\n\nIn a subclass of NSPersistentStore, you can override this to provide a custom migration manager subclass (for example, to take advantage of store-specific functionality to improve migration performance)."
  },
  {
    "title": "destinationModel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationmanager/1417610-destinationmodel",
    "html": "See Also\nGetting the Manager’s Configuration\nvar destinationContext: NSManagedObjectContext\nThe managed object context the migration manager uses for writing the destination persistent store.\nvar mappingModel: NSMappingModel\nThe mapping model for the migration manager.\nvar sourceContext: NSManagedObjectContext\nThe managed object context the migration manager uses for reading the source persistent store.\nvar sourceModel: NSManagedObjectModel\nThe source model for the migration manager.\nfunc destinationEntity(for: NSEntityMapping) -> NSEntityDescription?\nReturns the entity description for the destination entity of a given entity mapping.\nfunc sourceEntity(for: NSEntityMapping) -> NSEntityDescription?\nReturns the entity description for the source entity of a given entity mapping.\nRelated Documentation\ninit(sourceModel: NSManagedObjectModel, destinationModel: NSManagedObjectModel)\nInitializes a migration manager instance with given source and destination models."
  },
  {
    "title": "setPrimitiveValue(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506960-setprimitivevalue",
    "html": "Parameters\nvalue\n\nThe new value for the property specified by key.\n\nkey\n\nThe name of one of the receiver's properties.\n\nDiscussion\n\nSets in the receiver’s private internal storage the value of the property specified by key to value. If key identifies a to-one relationship, relates the object specified by value to the receiver, unrelating the previously related object if there was one. Given a collection object and a key that identifies a to-many relationship, relates the objects contained in the collection to the receiver, unrelating previously related objects if there were any.\n\nThis method does not invoke the change notification methods (willChangeValue(forKey:) and didChangeValue(forKey:)). It is typically used by subclasses that implement custom accessor methods that need direct access to the receiver’s private internal storage. It is also used by the Core Data framework to initialize the receiver with values from a persistent store or to restore a value from a snapshot.\n\nSpecial Considerations\n\nYou must not override this method.\n\nYou should typically use this method only to modify attributes (usually transient), not relationships. If you try to set a to-many relationship to a new NSMutableSet object, it will (eventually) fail. In the unusual event that you need to modify a relationship using this method, you first get the existing set using primitiveValueForKey: (ensure the method does not return nil), create a mutable copy, and then modify the copy—as illustrated in the following example:\n\nNSMutableSet *recentHires = [[dept primitiveValueForKey:@\"recentHires\"] mutableCopy];\nif (recentHires != nil) {\n    [recentHires removeAllObjects];\n    [dept setPrimitiveValue:recentHires forKey:@\"recentHires\"];\n}\n\n\nIf the relationship is bi-directional (that is, if an inverse relationship is specified) then you are also responsible for maintaining the inverse relationship (regardless of cardinality)—in contrast with Core Data's normal behavior described in Using Managed Objects.\n\nThe following points also apply:\n\nPrimitive accessor methods are only supported on modeled properties. If you invoke a primitive accessor on an unmodeled property, it will instead operate upon a random modeled property. (The debug libraries and frameworks from (available from the Apple Developer Website) have assertions to test for passing unmodeled keys to these methods.)\n\nYou are strongly encouraged to use the dynamically-generated accessors rather than using this method directly (for example, setPrimitiveName: instead of setPrimitiveValue:newName forKey:@\"name\"). The dynamic accessors are much more efficient, and allow for compile-time checking.\n\nSee Also\nSupporting Key-Value Coding\nfunc value(forKey: String) -> Any?\nReturns the value for the property specified by key.\nfunc setValue(Any?, forKey: String)\nSets the specified property of the managed object to the specified value.\nfunc primitiveValue(forKey: String) -> Any?\nReturns the value for the specified property from the managed object’s private internal storage .\nfunc objectIDs(forRelationshipNamed: String) -> [NSManagedObjectID]\nReturns the object IDs for all of the managed objects that are in the named relationship.\nRelated Documentation\nfunc awakeFromFetch()\nProvides an opportunity to add code into the life cycle of the managed object when fufilling it from a fault.\nmutableSetValueForKey:\nReturns a mutable set that provides read-write access to the unordered to-many relationship specified by a given key."
  },
  {
    "title": "resultType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchdeleteresult/1404941-resulttype",
    "html": "Discussion\n\nThis property’s value is set to the request’s resultType property.\n\nSee Also\nAccessing the Result\nvar result: Any?\nThe value the request returns after it executes.\nenum NSBatchDeleteRequestResultType\nThe types of result a batch delete request can provide when it executes."
  },
  {
    "title": "type | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/event/3618807-type",
    "html": "See Also\nInspecting Event Properties\nvar identifier: UUID\nA unique identifier for the event in a container.\nvar storeIdentifier: String\nThe associated store identifier in the container for the event.\nvar succeeded: Bool\nA Boolean value that indicates whether the operation the event represents is successful.\nvar startDate: Date\nThe start date of the operation that the event represents.\nvar endDate: Date?\nThe end date of the operation that the event represents.\nvar error: Error?\nAn error that indicates why an operation fails."
  },
  {
    "title": "startDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/event/3618804-startdate",
    "html": "See Also\nInspecting Event Properties\nvar type: NSPersistentCloudKitContainer.EventType\nThe type of event, either setup, import, or export.\nvar identifier: UUID\nA unique identifier for the event in a container.\nvar storeIdentifier: String\nThe associated store identifier in the container for the event.\nvar succeeded: Bool\nA Boolean value that indicates whether the operation the event represents is successful.\nvar endDate: Date?\nThe end date of the operation that the event represents.\nvar error: Error?\nAn error that indicates why an operation fails."
  },
  {
    "title": "error | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/event/3618802-error",
    "html": "See Also\nInspecting Event Properties\nvar type: NSPersistentCloudKitContainer.EventType\nThe type of event, either setup, import, or export.\nvar identifier: UUID\nA unique identifier for the event in a container.\nvar storeIdentifier: String\nThe associated store identifier in the container for the event.\nvar succeeded: Bool\nA Boolean value that indicates whether the operation the event represents is successful.\nvar startDate: Date\nThe start date of the operation that the event represents.\nvar endDate: Date?\nThe end date of the operation that the event represents."
  },
  {
    "title": "requestType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorerequest/1506892-requesttype",
    "html": "See Also\nConfiguring a Request\nvar affectedStores: [NSPersistentStore]?\nThe stores the request should be sent to.\nenum NSPersistentStoreRequestType\nConstants that specify the types of fetch requests."
  },
  {
    "title": "databaseObject | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsconstraintconflict/1506665-databaseobject",
    "html": "See Also\nInspecting a Conflict\nvar conflictingObjects: [NSManagedObject]\nThe managed objects that are in conflict.\nvar conflictingSnapshots: [[AnyHashable : Any]]\nThe original property values of objects in violation of the constraint.\nvar constraint: [String]\nThe constraint that has been violated.\nvar constraintValues: [String : Any]\nThe values that the conflicting objects had when the conflict was created.\nvar databaseSnapshot: [String : Any]?\nThe values currently stored in the database."
  },
  {
    "title": "objectsToInsert | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchinsertrequest/3333238-objectstoinsert",
    "html": "See Also\nConfiguring a Request\nvar dictionaryHandler: ((NSMutableDictionary) -> Bool)?\nA closure that provides a dictionary for your app to insert data into.\nvar entity: NSEntityDescription?\nThe managed entity to insert data into.\nvar entityName: String\nThe name of the managed entity to insert data into.\nvar managedObjectHandler: ((NSManagedObject) -> Bool)?\nA closure that provides a managed object for your app to insert data into.\nvar resultType: NSBatchInsertRequestResultType\nThe type of result that Core Data returns from this request."
  },
  {
    "title": "resultType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchinsertrequest/3333239-resulttype",
    "html": "Discussion\n\nThe default is NSBatchInsertRequestResultType.statusOnly.\n\nSee Also\nConfiguring a Request\nvar dictionaryHandler: ((NSMutableDictionary) -> Bool)?\nA closure that provides a dictionary for your app to insert data into.\nvar entity: NSEntityDescription?\nThe managed entity to insert data into.\nvar entityName: String\nThe name of the managed entity to insert data into.\nvar managedObjectHandler: ((NSManagedObject) -> Bool)?\nA closure that provides a managed object for your app to insert data into.\nvar objectsToInsert: [[String : Any]]?\nAn array of dictionaries that represents the objects to insert with the keys as attribute names and their assigned values."
  },
  {
    "title": "managedObjectHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchinsertrequest/3618792-managedobjecthandler",
    "html": "See Also\nConfiguring a Request\nvar dictionaryHandler: ((NSMutableDictionary) -> Bool)?\nA closure that provides a dictionary for your app to insert data into.\nvar entity: NSEntityDescription?\nThe managed entity to insert data into.\nvar entityName: String\nThe name of the managed entity to insert data into.\nvar objectsToInsert: [[String : Any]]?\nAn array of dictionaries that represents the objects to insert with the keys as attribute names and their assigned values.\nvar resultType: NSBatchInsertRequestResultType\nThe type of result that Core Data returns from this request."
  },
  {
    "title": "resolve(mergeConflicts:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmergepolicy/1506253-resolve",
    "html": "Parameters\nlist\n\nAn array of merge conflicts (instances of NSMergeConflict).\n\nerror\n\nIf an error occurs, upon return contains an NSError object that describes the problem.\n\nReturn Value\n\ntrue if the conflicts were resolved successfully, otherwise false.\n\nDiscussion\n\nIf you override this method in a subclass, you should typically invoke the superclass’s implementation in addition to performing your own operations.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nResolving a Conflict\nfunc resolve(constraintConflicts: [NSConstraintConflict])\nResolves the conflicts in a given list.\nfunc resolve(optimisticLockingConflicts: [NSMergeConflict])\nResolves the conflicts in a given list."
  },
  {
    "title": "mergeByPropertyStoreTrump | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmergepolicy/1690609-mergebypropertystoretrump",
    "html": "Discussion\n\nA policy that merges conflicts between the persistent store’s version of the object and the current in-memory version by individual property, with external changes trumping in-memory changes.\n\nSee Also\nDefining Merge Policies\nclass var error: NSMergePolicy\nThe default merge policy for all managed object contexts.\nclass var mergeByPropertyObjectTrump: NSMergePolicy\nA property-based merge policy that applies in-memory changes.\nclass var overwrite: NSMergePolicy\nA merge policy that overwrites the entire stored object.\nclass var rollback: NSMergePolicy\nA merge policy that discards unsaved changes.\nMerge Policies\nDefine standard ways to handle conflicts during a save operation."
  },
  {
    "title": "error | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmergepolicy/1690612-error",
    "html": "Discussion\n\nIf a save fails because of conflicting objects, you can find the IDs of those objects in error’s userInfo dictionary. Use the NSInsertedObjectsKey and NSUpdatedObjectsKey keys to extract the object IDs.\n\nSee Also\nDefining Merge Policies\nclass var mergeByPropertyStoreTrump: NSMergePolicy\nA property-based merge policy that applies external changes.\nclass var mergeByPropertyObjectTrump: NSMergePolicy\nA property-based merge policy that applies in-memory changes.\nclass var overwrite: NSMergePolicy\nA merge policy that overwrites the entire stored object.\nclass var rollback: NSMergePolicy\nA merge policy that discards unsaved changes.\nMerge Policies\nDefine standard ways to handle conflicts during a save operation."
  },
  {
    "title": "mergeByPropertyObjectTrump | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmergepolicy/1690607-mergebypropertyobjecttrump",
    "html": "Discussion\n\nA policy that merges conflicts between the persistent store’s version of the object and the current in-memory version by individual property, with in-memory changes trumping external changes.\n\nSee Also\nDefining Merge Policies\nclass var error: NSMergePolicy\nThe default merge policy for all managed object contexts.\nclass var mergeByPropertyStoreTrump: NSMergePolicy\nA property-based merge policy that applies external changes.\nclass var overwrite: NSMergePolicy\nA merge policy that overwrites the entire stored object.\nclass var rollback: NSMergePolicy\nA merge policy that discards unsaved changes.\nMerge Policies\nDefine standard ways to handle conflicts during a save operation."
  },
  {
    "title": "rollback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmergepolicy/1690613-rollback",
    "html": "Discussion\n\nThis policy merges conflicts between the persistent store’s version of the object and the current in-memory version by discarding unsaved changes.\n\nSee Also\nDefining Merge Policies\nclass var error: NSMergePolicy\nThe default merge policy for all managed object contexts.\nclass var mergeByPropertyStoreTrump: NSMergePolicy\nA property-based merge policy that applies external changes.\nclass var mergeByPropertyObjectTrump: NSMergePolicy\nA property-based merge policy that applies in-memory changes.\nclass var overwrite: NSMergePolicy\nA merge policy that overwrites the entire stored object.\nMerge Policies\nDefine standard ways to handle conflicts during a save operation."
  },
  {
    "title": "overwrite | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmergepolicy/1690610-overwrite",
    "html": "Discussion\n\nThis policy merges conflicts between the persistent store’s version of the object and the current in-memory version by saving the entire in-memory object to the persistent store.\n\nSee Also\nDefining Merge Policies\nclass var error: NSMergePolicy\nThe default merge policy for all managed object contexts.\nclass var mergeByPropertyStoreTrump: NSMergePolicy\nA property-based merge policy that applies external changes.\nclass var mergeByPropertyObjectTrump: NSMergePolicy\nA property-based merge policy that applies in-memory changes.\nclass var rollback: NSMergePolicy\nA merge policy that discards unsaved changes.\nMerge Policies\nDefine standard ways to handle conflicts during a save operation."
  },
  {
    "title": "Merge Policies | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmergepolicy/merge_policies",
    "html": "Overview\n\nNSErrorMergePolicy is the default policy. It is the only policy that requires action to correct any conflicts. The other policies make a save go through silently by making changes that follow rules specific to that policy.\n\nTopics\nPolicies\nvar NSErrorMergePolicy: AnyObject\nThe default merge policy for all managed object contexts.\nvar NSMergeByPropertyStoreTrumpMergePolicy: AnyObject\nA property-based merge policy that applies external changes.\nvar NSMergeByPropertyObjectTrumpMergePolicy: AnyObject\nA property-based merge policy that applies in-memory changes.\nvar NSOverwriteMergePolicy: AnyObject\nA merge policy that overwrites the entire stored object.\nvar NSRollbackMergePolicy: AnyObject\nA merge policy that discards unsaved changes.\nenum NSMergePolicyType\nConstants that define merge policy types.\nSee Also\nDefining Merge Policies\nclass var error: NSMergePolicy\nThe default merge policy for all managed object contexts.\nclass var mergeByPropertyStoreTrump: NSMergePolicy\nA property-based merge policy that applies external changes.\nclass var mergeByPropertyObjectTrump: NSMergePolicy\nA property-based merge policy that applies in-memory changes.\nclass var overwrite: NSMergePolicy\nA merge policy that overwrites the entire stored object.\nclass var rollback: NSMergePolicy\nA merge policy that discards unsaved changes."
  },
  {
    "title": "NSEntityMappingType.addEntityMappingType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitymappingtype/addentitymappingtype",
    "html": "Discussion\n\nInstances of the entity only exist in the destination."
  },
  {
    "title": "NSEntityMappingType.removeEntityMappingType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitymappingtype/removeentitymappingtype",
    "html": "Discussion\n\nInstances of the entity only exist in the source—source instances are not mapped to destination."
  },
  {
    "title": "predicate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchupdaterequest/1506659-predicate",
    "html": "See Also\nConfiguring a Request\nvar entity: NSEntityDescription\nThe managed entity to update data for.\nvar entityName: String\nThe name of the managed entity to update data for.\nvar includesSubentities: Bool\nA Boolean value that indicates whether to update subentities.\nvar propertiesToUpdate: [AnyHashable : Any]?\nA dictionary of property description pairs that describe the updates.\nvar resultType: NSBatchUpdateRequestResultType\nThe type of result that Core Data returns from the request."
  },
  {
    "title": "propertiesToUpdate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchupdaterequest/1506582-propertiestoupdate",
    "html": "Discussion\n\nThe dictionary keys are either NSPropertyDescription objects or strings that identify the property name.\n\nThe dictionary values are either a constant value or an NSExpression that evaluates to a scalar value.\n\nSee Also\nConfiguring a Request\nvar entity: NSEntityDescription\nThe managed entity to update data for.\nvar entityName: String\nThe name of the managed entity to update data for.\nvar includesSubentities: Bool\nA Boolean value that indicates whether to update subentities.\nvar predicate: NSPredicate?\nA predicate that identifies the objects to update.\nvar resultType: NSBatchUpdateRequestResultType\nThe type of result that Core Data returns from the request."
  },
  {
    "title": "resultType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchupdaterequest/1506350-resulttype",
    "html": "See Also\nConfiguring a Request\nvar entity: NSEntityDescription\nThe managed entity to update data for.\nvar entityName: String\nThe name of the managed entity to update data for.\nvar includesSubentities: Bool\nA Boolean value that indicates whether to update subentities.\nvar predicate: NSPredicate?\nA predicate that identifies the objects to update.\nvar propertiesToUpdate: [AnyHashable : Any]?\nA dictionary of property description pairs that describe the updates."
  },
  {
    "title": "NSBatchInsertRequestResultType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchinsertrequestresulttype",
    "html": "Topics\nRequest Types\ncase statusOnly\nA value that indicates that the return type is a Boolean value representing whether the batch-insertion request succeeded.\ncase objectIDs\nA value that indicates the return type is an array of object IDs that corresponds to the inserted rows.\ncase count\nA value that indicates that the return type is the number of inserted rows.\nRelationships\nConforms To\nSendable\nSee Also\nAccessing Results\nvar result: Any?\nThe result of a batch-insertion request.\nvar resultType: NSBatchInsertRequestResultType\nThe type of result that Core Data returns from this request."
  },
  {
    "title": "init(fetchRequest:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchdeleterequest/1506302-init",
    "html": "Parameters\nfetch\n\nThe fetch request that identifies the managed objects to delete.\n\nSee Also\nCreating a Request\ninit(objectIDs: [NSManagedObjectID])\nCreates a request that deletes the managed objects with the specified identifiers."
  },
  {
    "title": "init(objectIDs:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchdeleterequest/1506746-init",
    "html": "Parameters\nobjects\n\nThe array that contains the identifiers of the managed objects to delete.\n\nDiscussion\n\nImportant\n\nThe identifiers your provide must be from managed objects of the same entity type; mixing entity types results in an error when you execute the request.\n\nSee Also\nCreating a Request\ninit(fetchRequest: NSFetchRequest<NSFetchRequestResult>)\nCreates a request that deletes the results of the specified fetch request."
  },
  {
    "title": "fetchRequest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchdeleterequest/1506206-fetchrequest",
    "html": "Discussion\n\nThis property contains the fetch request that identifies the managed objects to delete. If you initialize NSBatchDeleteRequest with an array of NSManagedObjectID, Core Data automatically generates a fetch request with a predicate that matches the identifiers in that array."
  },
  {
    "title": "entityMappings | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmappingmodel/1506196-entitymappings",
    "html": "Discussion\n\nThe order of the mappings in the array determines the order in which they will be processed during migration.\n\nSee Also\nManaging Entity Mappings\nvar entityMappingsByName: [String : NSEntityMapping]\nThe entity mappings for the mapping model, keyed by name."
  },
  {
    "title": "sourceEntityName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitymapping/1443187-sourceentityname",
    "html": "Discussion\n\nMappings are not directly bound to entity descriptions; you can use the sourceEntity(for:) method on the migration manager to retrieve the entity description for this entity name.\n\nSee Also\nManaging Source Information\nvar sourceEntityVersionHash: Data?\nThe version hash of the source entity for the entity mapping.\nvar sourceExpression: NSExpression?\nThe source expression for the entity mapping.\nRelated Documentation\nCore Data Model Versioning and Data Migration Programming Guide\nvar destinationEntityName: String?\nThe destination entity name for the entity mapping."
  },
  {
    "title": "entityMappingsByName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmappingmodel/1506179-entitymappingsbyname",
    "html": "See Also\nManaging Entity Mappings\nvar entityMappings: [NSEntityMapping]!\nThe entity mappings for the mapping model."
  },
  {
    "title": "begin(_:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitymigrationpolicy/1423785-begin",
    "html": "Parameters\nmapping\n\nThe mapping object in use.\n\nmanager\n\nThe migration manager performing the migration.\n\nerror\n\nIf an error occurs, upon return contains an NSError object that describes the problem.\n\nReturn Value\n\ntrue if the method completes successfully, otherwise false.\n\nDiscussion\n\nThis method is the precursor to the creation stage. In a custom class, you can implement this method to set up any state information that will be useful for the duration of the migration.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nCustomizing Stages of the Mapping Life Cycle\nfunc createDestinationInstances(forSource: NSManagedObject, in: NSEntityMapping, manager: NSMigrationManager)\nCreates the destination instance(s) for a given source instance.\nfunc endInstanceCreation(forMapping: NSEntityMapping, manager: NSMigrationManager)\nIndicates the end of the instance creation stage for the specified entity mapping, and the precursor to the next migration stage.\nfunc createRelationships(forDestination: NSManagedObject, in: NSEntityMapping, manager: NSMigrationManager)\nConstructs the relationships between the newly-created destination instances.\nfunc endRelationshipCreation(forMapping: NSEntityMapping, manager: NSMigrationManager)\nIndicates the end of the relationship creation stage for the specified entity mapping.\nfunc performCustomValidation(forMapping: NSEntityMapping, manager: NSMigrationManager)\nProvides the option to perform custom validation on migrated objects during the validation stage of the entity migration policy.\nfunc end(NSEntityMapping, manager: NSMigrationManager)\nPerforms cleanup at the end of the migration, from any phase of the mapping.\nRelated Documentation\nCore Data Model Versioning and Data Migration Programming Guide"
  },
  {
    "title": "relationshipMappings | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitymapping/1443163-relationshipmappings",
    "html": "Discussion\n\nThe order of mappings in the array specifies the order in which the mappings will be processed during a migration.\n\nSee Also\nManaging Mapping Information\nvar name: String!\nThe name of the entity mapping.\nvar mappingType: NSEntityMappingType\nThe mapping type for the entity mapping.\nvar entityMigrationPolicyClassName: String?\nThe class name of the migration policy for the entity mapping.\nvar attributeMappings: [NSPropertyMapping]?\nThe array of attribute mappings for the entity mapping.\nvar userInfo: [AnyHashable : Any]?\nThe user info dictionary for the entity mapping."
  },
  {
    "title": "attributeMappings | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitymapping/1443193-attributemappings",
    "html": "Discussion\n\nThe order of mappings in the array specifies the order in which the mappings will be processed during a migration.\n\nSee Also\nManaging Mapping Information\nvar name: String!\nThe name of the entity mapping.\nvar mappingType: NSEntityMappingType\nThe mapping type for the entity mapping.\nvar entityMigrationPolicyClassName: String?\nThe class name of the migration policy for the entity mapping.\nvar relationshipMappings: [NSPropertyMapping]?\nThe array of relationship mappings for the entity mapping.\nvar userInfo: [AnyHashable : Any]?\nThe user info dictionary for the entity mapping."
  },
  {
    "title": "NSMigrationEntityMappingKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationentitymappingkey",
    "html": "Discussion\n\nTo access this key in a custom value expression string in the Xcode mapping model editor use $entityMapping."
  },
  {
    "title": "init(entity:objects:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchinsertrequest/3333235-init",
    "html": "Parameters\nentity\n\nThe managed entity to insert data into.\n\ndictionaries\n\nAn array of dictionaries that represents objects to insert. Each dictionary contains an attribute name key and a value.\n\nReturn Value\n\nA batch-insertion request.\n\nSee Also\nCreating a Request\ninit(entity: NSEntityDescription, dictionaryHandler: (NSMutableDictionary) -> Bool)\nCreates a batch-insertion request for a managed entity, and specifies a closure that provides data dictionaries for insertion.\ninit(entity: NSEntityDescription, managedObjectHandler: (NSManagedObject) -> Bool)\nCreates a batch-insertion request for a managed entity, and specifies a closure that inserts data into the entity.\ninit(entityName: String, dictionaryHandler: (NSMutableDictionary) -> Bool)\nCreates a batch-insertion request for a named managed entity, and specifies a closure that provides data dictionaries for insertion.\ninit(entityName: String, managedObjectHandler: (NSManagedObject) -> Bool)\nCreates a batch-insertion request for a named managed entity, and specifies a closure that inserts data into the entity.\ninit(entityName: String, objects: [[String : Any]])\nCreates a batch-insertion request for a named managed entity, and provides an array of data dictionaries for insertion.\ninit()\nCreates a Core Data batch-insertion request.\nDeprecated"
  },
  {
    "title": "init(entityName:managedObjectHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchinsertrequest/3618788-init",
    "html": "Parameters\nentityName\n\nThe name of the managed entity that defines the object to create.\n\nhandler\n\nA closure that inserts data into the managed entity.\n\nReturn Value\n\nA batch-insertion request.\n\nDiscussion\n\nCore Data repeatedly calls the provided closure until it returns true, then finishes the request and saves the data.\n\nSee Also\nCreating a Request\ninit(entity: NSEntityDescription, dictionaryHandler: (NSMutableDictionary) -> Bool)\nCreates a batch-insertion request for a managed entity, and specifies a closure that provides data dictionaries for insertion.\ninit(entity: NSEntityDescription, managedObjectHandler: (NSManagedObject) -> Bool)\nCreates a batch-insertion request for a managed entity, and specifies a closure that inserts data into the entity.\ninit(entityName: String, dictionaryHandler: (NSMutableDictionary) -> Bool)\nCreates a batch-insertion request for a named managed entity, and specifies a closure that provides data dictionaries for insertion.\ninit(entity: NSEntityDescription, objects: [[String : Any]])\nCreates a batch-insertion request for a managed entity, and provides an array of data dictionaries for insertion.\ninit(entityName: String, objects: [[String : Any]])\nCreates a batch-insertion request for a named managed entity, and provides an array of data dictionaries for insertion.\ninit()\nCreates a Core Data batch-insertion request.\nDeprecated"
  },
  {
    "title": "init(entityName:objects:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchinsertrequest/3333237-init",
    "html": "Parameters\nentityName\n\nThe name of the managed entity to insert data into.\n\ndictionaries\n\nAn array of dictionaries that represents objects to insert. Each dictionary contains an attribute name key and a value.\n\nReturn Value\n\nA batch-insertion request.\n\nSee Also\nCreating a Request\ninit(entity: NSEntityDescription, dictionaryHandler: (NSMutableDictionary) -> Bool)\nCreates a batch-insertion request for a managed entity, and specifies a closure that provides data dictionaries for insertion.\ninit(entity: NSEntityDescription, managedObjectHandler: (NSManagedObject) -> Bool)\nCreates a batch-insertion request for a managed entity, and specifies a closure that inserts data into the entity.\ninit(entityName: String, dictionaryHandler: (NSMutableDictionary) -> Bool)\nCreates a batch-insertion request for a named managed entity, and specifies a closure that provides data dictionaries for insertion.\ninit(entityName: String, managedObjectHandler: (NSManagedObject) -> Bool)\nCreates a batch-insertion request for a named managed entity, and specifies a closure that inserts data into the entity.\ninit(entity: NSEntityDescription, objects: [[String : Any]])\nCreates a batch-insertion request for a managed entity, and provides an array of data dictionaries for insertion.\ninit()\nCreates a Core Data batch-insertion request.\nDeprecated"
  },
  {
    "title": "conflictingObjects | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsconstraintconflict/1506707-conflictingobjects",
    "html": "See Also\nInspecting a Conflict\nvar conflictingSnapshots: [[AnyHashable : Any]]\nThe original property values of objects in violation of the constraint.\nvar constraint: [String]\nThe constraint that has been violated.\nvar constraintValues: [String : Any]\nThe values that the conflicting objects had when the conflict was created.\nvar databaseObject: NSManagedObject?\nThe object whose database row is using constraint values.\nvar databaseSnapshot: [String : Any]?\nThe values currently stored in the database."
  },
  {
    "title": "conflictingSnapshots | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsconstraintconflict/1506774-conflictingsnapshots",
    "html": "See Also\nInspecting a Conflict\nvar conflictingObjects: [NSManagedObject]\nThe managed objects that are in conflict.\nvar constraint: [String]\nThe constraint that has been violated.\nvar constraintValues: [String : Any]\nThe values that the conflicting objects had when the conflict was created.\nvar databaseObject: NSManagedObject?\nThe object whose database row is using constraint values.\nvar databaseSnapshot: [String : Any]?\nThe values currently stored in the database."
  },
  {
    "title": "NSAttributeType.binaryDataAttributeType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributetype/binarydataattributetype",
    "html": "See Also\nAttribute types\ncase booleanAttributeType\nAn attribute that stores a Boolean value.\ncase compositeAttributeType\nAn attribute that derives its value by composing other attributes.\ncase dateAttributeType\nAn attribute that stores a date.\ncase decimalAttributeType\nAn attribute that stores a decimal value.\ncase doubleAttributeType\nAn attribute that stores a double value.\ncase floatAttributeType\nAn attribute that stores a float value.\ncase integer16AttributeType\nAn attribute that stores a 16-bit signed integer value.\ncase integer32AttributeType\nAn attribute that stores a 32-bit signed integer value.\ncase integer64AttributeType\nAn attribute that stores a 64-bit signed integer value.\ncase objectIDAttributeType\nAn attribute that stores a managed object’s ID.\ncase stringAttributeType\nAn attribute that stores a string.\ncase transformableAttributeType\nAn attribute that uses a value transformer to derive its value.\ncase undefinedAttributeType\nAn attribute that doesn’t have an explicit type.\ncase URIAttributeType\nAn attribute that stores a uniform resource identifier.\ncase UUIDAttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "NSAttributeType.objectIDAttributeType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributetype/objectidattributetype",
    "html": "See Also\nAttribute types\ncase binaryDataAttributeType\nAn attribute that stores binary data.\ncase booleanAttributeType\nAn attribute that stores a Boolean value.\ncase compositeAttributeType\nAn attribute that derives its value by composing other attributes.\ncase dateAttributeType\nAn attribute that stores a date.\ncase decimalAttributeType\nAn attribute that stores a decimal value.\ncase doubleAttributeType\nAn attribute that stores a double value.\ncase floatAttributeType\nAn attribute that stores a float value.\ncase integer16AttributeType\nAn attribute that stores a 16-bit signed integer value.\ncase integer32AttributeType\nAn attribute that stores a 32-bit signed integer value.\ncase integer64AttributeType\nAn attribute that stores a 64-bit signed integer value.\ncase stringAttributeType\nAn attribute that stores a string.\ncase transformableAttributeType\nAn attribute that uses a value transformer to derive its value.\ncase undefinedAttributeType\nAn attribute that doesn’t have an explicit type.\ncase URIAttributeType\nAn attribute that stores a uniform resource identifier.\ncase UUIDAttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "NSAttributeType.integer16AttributeType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributetype/integer16attributetype",
    "html": "See Also\nAttribute types\ncase binaryDataAttributeType\nAn attribute that stores binary data.\ncase booleanAttributeType\nAn attribute that stores a Boolean value.\ncase compositeAttributeType\nAn attribute that derives its value by composing other attributes.\ncase dateAttributeType\nAn attribute that stores a date.\ncase decimalAttributeType\nAn attribute that stores a decimal value.\ncase doubleAttributeType\nAn attribute that stores a double value.\ncase floatAttributeType\nAn attribute that stores a float value.\ncase integer32AttributeType\nAn attribute that stores a 32-bit signed integer value.\ncase integer64AttributeType\nAn attribute that stores a 64-bit signed integer value.\ncase objectIDAttributeType\nAn attribute that stores a managed object’s ID.\ncase stringAttributeType\nAn attribute that stores a string.\ncase transformableAttributeType\nAn attribute that uses a value transformer to derive its value.\ncase undefinedAttributeType\nAn attribute that doesn’t have an explicit type.\ncase URIAttributeType\nAn attribute that stores a uniform resource identifier.\ncase UUIDAttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "NSAttributeType.integer32AttributeType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributetype/integer32attributetype",
    "html": "See Also\nAttribute types\ncase binaryDataAttributeType\nAn attribute that stores binary data.\ncase booleanAttributeType\nAn attribute that stores a Boolean value.\ncase compositeAttributeType\nAn attribute that derives its value by composing other attributes.\ncase dateAttributeType\nAn attribute that stores a date.\ncase decimalAttributeType\nAn attribute that stores a decimal value.\ncase doubleAttributeType\nAn attribute that stores a double value.\ncase floatAttributeType\nAn attribute that stores a float value.\ncase integer16AttributeType\nAn attribute that stores a 16-bit signed integer value.\ncase integer64AttributeType\nAn attribute that stores a 64-bit signed integer value.\ncase objectIDAttributeType\nAn attribute that stores a managed object’s ID.\ncase stringAttributeType\nAn attribute that stores a string.\ncase transformableAttributeType\nAn attribute that uses a value transformer to derive its value.\ncase undefinedAttributeType\nAn attribute that doesn’t have an explicit type.\ncase URIAttributeType\nAn attribute that stores a uniform resource identifier.\ncase UUIDAttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "resultType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchdeleterequest/1506389-resulttype",
    "html": "Discussion\n\nSet this property before you execute the request if you require a result type other than the default of NSBatchDeleteRequestResultType.resultTypeStatusOnly.\n\nSee Also\nConfiguring the Result Type\nenum NSBatchDeleteRequestResultType\nThe types of result a batch delete request can provide when it executes."
  },
  {
    "title": "result | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchupdateresult/1404946-result",
    "html": "See Also\nAccessing Results\nvar resultType: NSBatchUpdateRequestResultType\nThe type of result that Core Data returns from the request.\nenum NSBatchUpdateRequestResultType\nResult types for a batch-update request."
  },
  {
    "title": "resultType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchupdateresult/1404900-resulttype",
    "html": "See Also\nAccessing Results\nvar result: Any?\nThe result of a batch-update request, either the number of updated objects, the identifiers of the updated objects, or a status value.\nenum NSBatchUpdateRequestResultType\nResult types for a batch-update request."
  },
  {
    "title": "NSBatchUpdateRequestResultType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchupdaterequestresulttype",
    "html": "Topics\nRequest Types\ncase statusOnlyResultType\nA value that indicates the return type is a Boolean value representing whether the batch-update request succeeds.\ncase updatedObjectIDsResultType\nA value that indicates the return type is an array of object IDs that corresponds to the updated rows.\ncase updatedObjectsCountResultType\nA value that indicates the return type is the number of updated rows.\nRelationships\nConforms To\nSendable\nSee Also\nAccessing Results\nvar result: Any?\nThe result of a batch-update request, either the number of updated objects, the identifiers of the updated objects, or a status value.\nvar resultType: NSBatchUpdateRequestResultType\nThe type of result that Core Data returns from the request."
  },
  {
    "title": "result | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchdeleteresult/1404922-result",
    "html": "Discussion\n\nUse resultType to determine the kind of value this property contains, and then cast to the appropriate type as the following example shows:\n\n// resultType is .resultTypeCount.\nguard let count = batchDeleteResult.result as? Int else { return }\n            \n// resultType is .resultTypeObjectIDs.\nguard let objectIDs = batchDeleteResult.result as? [NSManagedObjectID] \n    else { return }\n            \n// resultType is .resultTypeStatusOnly.\nguard let status = batchDeleteResult.result as? Bool else { return }\n\nSee Also\nAccessing the Result\nvar resultType: NSBatchDeleteRequestResultType\nThe data type of the request’s result value.\nenum NSBatchDeleteRequestResultType\nThe types of result a batch delete request can provide when it executes."
  },
  {
    "title": "identifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/event/3618803-identifier",
    "html": "See Also\nInspecting Event Properties\nvar type: NSPersistentCloudKitContainer.EventType\nThe type of event, either setup, import, or export.\nvar storeIdentifier: String\nThe associated store identifier in the container for the event.\nvar succeeded: Bool\nA Boolean value that indicates whether the operation the event represents is successful.\nvar startDate: Date\nThe start date of the operation that the event represents.\nvar endDate: Date?\nThe end date of the operation that the event represents.\nvar error: Error?\nAn error that indicates why an operation fails."
  },
  {
    "title": "storeIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/event/3618805-storeidentifier",
    "html": "See Also\nInspecting Event Properties\nvar type: NSPersistentCloudKitContainer.EventType\nThe type of event, either setup, import, or export.\nvar identifier: UUID\nA unique identifier for the event in a container.\nvar succeeded: Bool\nA Boolean value that indicates whether the operation the event represents is successful.\nvar startDate: Date\nThe start date of the operation that the event represents.\nvar endDate: Date?\nThe end date of the operation that the event represents.\nvar error: Error?\nAn error that indicates why an operation fails."
  },
  {
    "title": "succeeded | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/event/3618806-succeeded",
    "html": "See Also\nInspecting Event Properties\nvar type: NSPersistentCloudKitContainer.EventType\nThe type of event, either setup, import, or export.\nvar identifier: UUID\nA unique identifier for the event in a container.\nvar storeIdentifier: String\nThe associated store identifier in the container for the event.\nvar startDate: Date\nThe start date of the operation that the event represents.\nvar endDate: Date?\nThe end date of the operation that the event represents.\nvar error: Error?\nAn error that indicates why an operation fails."
  },
  {
    "title": "endDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/event/3618801-enddate",
    "html": "See Also\nInspecting Event Properties\nvar type: NSPersistentCloudKitContainer.EventType\nThe type of event, either setup, import, or export.\nvar identifier: UUID\nA unique identifier for the event in a container.\nvar storeIdentifier: String\nThe associated store identifier in the container for the event.\nvar succeeded: Bool\nA Boolean value that indicates whether the operation the event represents is successful.\nvar startDate: Date\nThe start date of the operation that the event represents.\nvar error: Error?\nAn error that indicates why an operation fails."
  },
  {
    "title": "fetchRequest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorychange/3240591-fetchrequest",
    "html": "See Also\nInspecting Change Metadata\nclass var entityDescription: NSEntityDescription?\nThe entity description of the persistent history change entity.\nclass func entityDescription(with: NSManagedObjectContext) -> NSEntityDescription?\nRequests an entity description for the managed object type affected by the change using the provided context."
  },
  {
    "title": "entityDescription(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorychange/3240590-entitydescription",
    "html": "Parameters\ncontext\n\nThe managed object context for this request.\n\nReturn Value\n\nThe entity description (NSEntityDescription) of the persistent history transaction entity.\n\nSee Also\nInspecting Change Metadata\nclass var fetchRequest: NSFetchRequest<NSFetchRequestResult>?\nA fetch request that has the persistent history change as the entity.\nclass var entityDescription: NSEntityDescription?\nThe entity description of the persistent history change entity."
  },
  {
    "title": "NSPersistentHistoryChangeType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorychangetype",
    "html": "Topics\nChange Types\ncase delete\nThe deletion of a managed object from the persistent store.\ncase insert\nThe insertion of a managed object into the persistent store.\ncase update\nAn update to a managed object’s properties in the persistent store.\nRelationships\nConforms To\nSendable\nSee Also\nInspecting Change Details\nvar changeID: Int64\nThe change’s numeric identifier.\nvar changeType: NSPersistentHistoryChangeType\nThe type of change to the managed object in the persistent store.\nvar changedObjectID: NSManagedObjectID\nThe identifier of the managed object that changed.\nvar tombstone: [AnyHashable : Any]?\nA dictionary of attributes marked for preservation after deletion, and their values when deleted.\nvar transaction: NSPersistentHistoryTransaction?\nThe persistent history transaction containing this change.\nvar updatedProperties: Set<NSPropertyDescription>?\nThe set of properties that were updated on the managed object."
  },
  {
    "title": "entityDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorychange/3240589-entitydescription",
    "html": "Discussion\n\nThe entity description of a NSPersistentHistoryChange, includes its properties, which can be useful for filtering your persistent history change request.\n\nSee Also\nInspecting Change Metadata\nclass var fetchRequest: NSFetchRequest<NSFetchRequestResult>?\nA fetch request that has the persistent history change as the entity.\nclass func entityDescription(with: NSManagedObjectContext) -> NSEntityDescription?\nRequests an entity description for the managed object type affected by the change using the provided context."
  },
  {
    "title": "changeType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorychange/2892563-changetype",
    "html": "See Also\nInspecting Change Details\nvar changeID: Int64\nThe change’s numeric identifier.\nenum NSPersistentHistoryChangeType\nThe types of changes to managed objects reflected in persistent history.\nvar changedObjectID: NSManagedObjectID\nThe identifier of the managed object that changed.\nvar tombstone: [AnyHashable : Any]?\nA dictionary of attributes marked for preservation after deletion, and their values when deleted.\nvar transaction: NSPersistentHistoryTransaction?\nThe persistent history transaction containing this change.\nvar updatedProperties: Set<NSPropertyDescription>?\nThe set of properties that were updated on the managed object."
  },
  {
    "title": "transaction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorychange/2892567-transaction",
    "html": "See Also\nInspecting Change Details\nvar changeID: Int64\nThe change’s numeric identifier.\nvar changeType: NSPersistentHistoryChangeType\nThe type of change to the managed object in the persistent store.\nenum NSPersistentHistoryChangeType\nThe types of changes to managed objects reflected in persistent history.\nvar changedObjectID: NSManagedObjectID\nThe identifier of the managed object that changed.\nvar tombstone: [AnyHashable : Any]?\nA dictionary of attributes marked for preservation after deletion, and their values when deleted.\nvar updatedProperties: Set<NSPropertyDescription>?\nThe set of properties that were updated on the managed object."
  },
  {
    "title": "NSPersistentHistoryResultType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistoryresulttype",
    "html": "Topics\nResult Types\ncase statusOnly\nThe status of the persistent history change request.\ncase count\nThe number of persistent history changes since the requested date, token, or transaction.\ncase objectIDs\nThe identifiers of managed objects changed since the requested date, token, or transaction.\ncase transactionsAndChanges\nThe persistent history transactions and changes since the requested date, token, or transaction.\ncase transactionsOnly\nThe persistent history transactions since the requested date, token, or transaction.\ncase changesOnly\nThe persistent history changes since the requested date, token, or transaction.\nRelationships\nConforms To\nSendable\nSee Also\nInspecting History Results\nvar result: Any?\nThe result of the history request determined by the persistent history result type.\nvar resultType: NSPersistentHistoryResultType\nThe type of result that the persistent history change request returns."
  },
  {
    "title": "changedObjectID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorychange/2892570-changedobjectid",
    "html": "See Also\nInspecting Change Details\nvar changeID: Int64\nThe change’s numeric identifier.\nvar changeType: NSPersistentHistoryChangeType\nThe type of change to the managed object in the persistent store.\nenum NSPersistentHistoryChangeType\nThe types of changes to managed objects reflected in persistent history.\nvar tombstone: [AnyHashable : Any]?\nA dictionary of attributes marked for preservation after deletion, and their values when deleted.\nvar transaction: NSPersistentHistoryTransaction?\nThe persistent history transaction containing this change.\nvar updatedProperties: Set<NSPropertyDescription>?\nThe set of properties that were updated on the managed object."
  },
  {
    "title": "NSAttributeType.undefinedAttributeType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributetype/undefinedattributetype",
    "html": "Discussion\n\nUse this attribute type with transient attributues only. Core Data manages the attribute’s value and registers the necessary undo and redo actions.\n\nSee Also\nAttribute types\ncase binaryDataAttributeType\nAn attribute that stores binary data.\ncase booleanAttributeType\nAn attribute that stores a Boolean value.\ncase compositeAttributeType\nAn attribute that derives its value by composing other attributes.\ncase dateAttributeType\nAn attribute that stores a date.\ncase decimalAttributeType\nAn attribute that stores a decimal value.\ncase doubleAttributeType\nAn attribute that stores a double value.\ncase floatAttributeType\nAn attribute that stores a float value.\ncase integer16AttributeType\nAn attribute that stores a 16-bit signed integer value.\ncase integer32AttributeType\nAn attribute that stores a 32-bit signed integer value.\ncase integer64AttributeType\nAn attribute that stores a 64-bit signed integer value.\ncase objectIDAttributeType\nAn attribute that stores a managed object’s ID.\ncase stringAttributeType\nAn attribute that stores a string.\ncase transformableAttributeType\nAn attribute that uses a value transformer to derive its value.\ncase URIAttributeType\nAn attribute that stores a uniform resource identifier.\ncase UUIDAttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "NSAttributeType.UUIDAttributeType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributetype/uuidattributetype",
    "html": "See Also\nAttribute types\ncase binaryDataAttributeType\nAn attribute that stores binary data.\ncase booleanAttributeType\nAn attribute that stores a Boolean value.\ncase compositeAttributeType\nAn attribute that derives its value by composing other attributes.\ncase dateAttributeType\nAn attribute that stores a date.\ncase decimalAttributeType\nAn attribute that stores a decimal value.\ncase doubleAttributeType\nAn attribute that stores a double value.\ncase floatAttributeType\nAn attribute that stores a float value.\ncase integer16AttributeType\nAn attribute that stores a 16-bit signed integer value.\ncase integer32AttributeType\nAn attribute that stores a 32-bit signed integer value.\ncase integer64AttributeType\nAn attribute that stores a 64-bit signed integer value.\ncase objectIDAttributeType\nAn attribute that stores a managed object’s ID.\ncase stringAttributeType\nAn attribute that stores a string.\ncase transformableAttributeType\nAn attribute that uses a value transformer to derive its value.\ncase undefinedAttributeType\nAn attribute that doesn’t have an explicit type.\ncase URIAttributeType\nAn attribute that stores a uniform resource identifier."
  },
  {
    "title": "NSAttributeType.URIAttributeType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributetype/uriattributetype",
    "html": "See Also\nAttribute types\ncase binaryDataAttributeType\nAn attribute that stores binary data.\ncase booleanAttributeType\nAn attribute that stores a Boolean value.\ncase compositeAttributeType\nAn attribute that derives its value by composing other attributes.\ncase dateAttributeType\nAn attribute that stores a date.\ncase decimalAttributeType\nAn attribute that stores a decimal value.\ncase doubleAttributeType\nAn attribute that stores a double value.\ncase floatAttributeType\nAn attribute that stores a float value.\ncase integer16AttributeType\nAn attribute that stores a 16-bit signed integer value.\ncase integer32AttributeType\nAn attribute that stores a 32-bit signed integer value.\ncase integer64AttributeType\nAn attribute that stores a 64-bit signed integer value.\ncase objectIDAttributeType\nAn attribute that stores a managed object’s ID.\ncase stringAttributeType\nAn attribute that stores a string.\ncase transformableAttributeType\nAn attribute that uses a value transformer to derive its value.\ncase undefinedAttributeType\nAn attribute that doesn’t have an explicit type.\ncase UUIDAttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "NSPersistentStoreRequestType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorerequesttype",
    "html": "Overview\n\nrequestType uses these constants.\n\nTopics\nConstants\ncase fetchRequestType\nSpecifies that the request returns managed objects.\ncase saveRequestType\nSpecifies that the request saves managed objects.\ncase batchInsertRequestType\nA request that inserts data into a persistent store using a batch of managed objects or dictionaries.\ncase batchUpdateRequestType\nA request that updates data for multiple managed objects in a persistent store.\ncase batchDeleteRequestType\nA request that deletes data for multiple managed objects from a persistent store.\nRelationships\nConforms To\nSendable\nSee Also\nConfiguring a Request\nvar affectedStores: [NSPersistentStore]?\nThe stores the request should be sent to.\nvar requestType: NSPersistentStoreRequestType\nThe type of the fetch request."
  },
  {
    "title": "prepareForDeletion() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506674-preparefordeletion",
    "html": "Discussion\n\nYou can implement this method to perform any operations required before the object is deleted, such as custom propagation before relationships are torn down, or reconfiguration of objects using key-value observing.\n\nSee Also\nManaging Change Events\nclass var contextShouldIgnoreUnmodeledPropertyChanges: Bool\nA Boolean value that indicates whether to mark instances of the class as having changes when an unmodeled property changes.\nfunc awakeFromFetch()\nProvides an opportunity to add code into the life cycle of the managed object when fufilling it from a fault.\nfunc awakeFromInsert()\nProvides an opportunity to add code into the life cycle of the managed object when initially creating it.\nfunc awake(fromSnapshotEvents: NSSnapshotEventType)\nProvides an opportunity to add code into the life cycle of the managed object when fulfilling it from a snapshot.\nfunc changedValues() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc changedValuesForCurrentEvent() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc committedValues(forKeys: [String]?) -> [String : Any]\nReturns a dictionary of the most recent fetched or saved values of the managed object for the properties of the specified keys.\nfunc willSave()\nProvides an opportunity to add code into the life cycle of the managed object before saving it.\nfunc didSave()\nProvides an opportunity to add code into the life cycle of the managed object after the managed object’s context completes a save operation.\nfunc willTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object before converting it to a fault.\nfunc didTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object after converting it to a fault.\nclass func fetchRequest() -> NSFetchRequest<NSFetchRequestResult>\nReturns an initialized fetch request with the entity this subclass represents.\nvar objectWillChange: ObservableObjectPublisher\nA publisher that emits before the object changes.\ntypealias NSManagedObject.ObjectWillChangePublisher\nAn object that publishes changes from observable objects."
  },
  {
    "title": "resultType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistoryresult/2892356-resulttype",
    "html": "See Also\nInspecting History Results\nvar result: Any?\nThe result of the history request determined by the persistent history result type.\nenum NSPersistentHistoryResultType\nThe types of results from a persistent history change request."
  },
  {
    "title": "userInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspropertymapping/1506516-userinfo",
    "html": "See Also\nManaging Mapping Attributes\nvar name: String?\nThe name of the property in the destination entity for the property mapping.\nvar valueExpression: NSExpression?\nThe value expression for the property mapping."
  },
  {
    "title": "valueExpression | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspropertymapping/1506819-valueexpression",
    "html": "Discussion\n\nThe expression is used to create the value for the destination property.\n\nSee Also\nManaging Mapping Attributes\nvar name: String?\nThe name of the property in the destination entity for the property mapping.\nvar userInfo: [AnyHashable : Any]?\nThe user info for the property mapping."
  },
  {
    "title": "name | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspropertymapping/1506748-name",
    "html": "See Also\nManaging Mapping Attributes\nvar valueExpression: NSExpression?\nThe value expression for the property mapping.\nvar userInfo: [AnyHashable : Any]?\nThe user info for the property mapping.\nRelated Documentation\nCore Data Model Versioning and Data Migration Programming Guide"
  },
  {
    "title": "result | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistoryresult/2892350-result",
    "html": "See Also\nInspecting History Results\nvar resultType: NSPersistentHistoryResultType\nThe type of result that the persistent history change request returns.\nenum NSPersistentHistoryResultType\nThe types of results from a persistent history change request."
  },
  {
    "title": "affectedStores | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorerequest/1506844-affectedstores",
    "html": "Discussion\n\nThe array contains instances of NSPersistentStore.\n\nSee Also\nConfiguring a Request\nvar requestType: NSPersistentStoreRequestType\nThe type of the fetch request.\nenum NSPersistentStoreRequestType\nConstants that specify the types of fetch requests.\nRelated Documentation\nCore Data Programming Guide"
  },
  {
    "title": "entity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchupdaterequest/1506664-entity",
    "html": "See Also\nConfiguring a Request\nvar entityName: String\nThe name of the managed entity to update data for.\nvar includesSubentities: Bool\nA Boolean value that indicates whether to update subentities.\nvar predicate: NSPredicate?\nA predicate that identifies the objects to update.\nvar propertiesToUpdate: [AnyHashable : Any]?\nA dictionary of property description pairs that describe the updates.\nvar resultType: NSBatchUpdateRequestResultType\nThe type of result that Core Data returns from the request."
  },
  {
    "title": "init(entityName:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchupdaterequest/1506702-init",
    "html": "Parameters\nentityName\n\nThe name of the managed entity to update data for.\n\nSee Also\nCreating a Request\ninit(entity: NSEntityDescription)\nCreates a batch-update request for a managed entity."
  },
  {
    "title": "init(entity:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchupdaterequest/1506374-init",
    "html": "Parameters\nentity\n\nThe managed entity to update data for.\n\nSee Also\nCreating a Request\ninit(entityName: String)\nCreates a batch-update request for a named managed entity."
  },
  {
    "title": "includesSubentities | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchupdaterequest/1506477-includessubentities",
    "html": "Discussion\n\nThe default value is true.\n\nSee Also\nConfiguring a Request\nvar entity: NSEntityDescription\nThe managed entity to update data for.\nvar entityName: String\nThe name of the managed entity to update data for.\nvar predicate: NSPredicate?\nA predicate that identifies the objects to update.\nvar propertiesToUpdate: [AnyHashable : Any]?\nA dictionary of property description pairs that describe the updates.\nvar resultType: NSBatchUpdateRequestResultType\nThe type of result that Core Data returns from the request."
  },
  {
    "title": "entityName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchupdaterequest/1506796-entityname",
    "html": "See Also\nConfiguring a Request\nvar entity: NSEntityDescription\nThe managed entity to update data for.\nvar includesSubentities: Bool\nA Boolean value that indicates whether to update subentities.\nvar predicate: NSPredicate?\nA predicate that identifies the objects to update.\nvar propertiesToUpdate: [AnyHashable : Any]?\nA dictionary of property description pairs that describe the updates.\nvar resultType: NSBatchUpdateRequestResultType\nThe type of result that Core Data returns from the request."
  },
  {
    "title": "isFault | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506837-isfault",
    "html": "Discussion\n\ntrue if the receiver is a fault, otherwise false. Knowing whether an object is a fault is useful in many situations when computations are optional. It can also be used to avoid growing the object graph unnecessarily (which may improve performance as it can avoid time-consuming fetches from data stores).\n\nIf this property is false, then the receiver's data must be in memory. However, if this property is true, it does not mean that the data is not in memory. The data may be in memory, or it may not, depending on many factors influencing caching.\n\nIf the receiver is a fault, accessing this property does not cause it to fire.\n\nSee Also\nGetting State Information\nvar managedObjectContext: NSManagedObjectContext?\nThe managed object context with which the managed object is registered.\nvar hasChanges: Bool\nA Boolean value that indicates whether the managed object has been inserted, has been deleted, or has unsaved changes.\nvar isInserted: Bool\nA Boolean value that indicates whether the managed object has been inserted in a managed object context.\nvar isUpdated: Bool\nA Boolean value that indicates whether the managed object has unsaved changes.\nvar isDeleted: Bool\nA Boolean value that indicates whether the managed object will be deleted during the next save.\nvar faultingState: Int\nThe faulting state of the managed object.\nfunc hasFault(forRelationshipNamed: String) -> Bool\nReturns a Boolean value that indicates whether the relationship for a given key is a fault.\nvar hasPersistentChangedValues: Bool\nA Boolean value that indicates whether the managed object has persistent changes."
  },
  {
    "title": "isDeleted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506681-isdeleted",
    "html": "Discussion\n\ntrue if Core Data will ask the persistent store to delete the object during the next save operation, otherwise false. It may return false at other times, particularly after the object has been deleted. The immediacy with which it will stop returning true depends on where the object is in the process of being deleted.\n\nIf the receiver is a fault, accessing this property does not cause it to fire.\n\nSee Also\nGetting State Information\nvar managedObjectContext: NSManagedObjectContext?\nThe managed object context with which the managed object is registered.\nvar hasChanges: Bool\nA Boolean value that indicates whether the managed object has been inserted, has been deleted, or has unsaved changes.\nvar isInserted: Bool\nA Boolean value that indicates whether the managed object has been inserted in a managed object context.\nvar isUpdated: Bool\nA Boolean value that indicates whether the managed object has unsaved changes.\nvar isFault: Bool\nA Boolean value that indicates whether the managed object is a fault.\nvar faultingState: Int\nThe faulting state of the managed object.\nfunc hasFault(forRelationshipNamed: String) -> Bool\nReturns a Boolean value that indicates whether the relationship for a given key is a fault.\nvar hasPersistentChangedValues: Bool\nA Boolean value that indicates whether the managed object has persistent changes.\nRelated Documentation\nvar deletedObjects: Set<NSManagedObject>\nThe set of objects that will be removed from their persistent store during the next save operation.\nstatic let NSManagedObjectContextObjectsDidChange: NSNotification.Name\nA notification of changes made to managed objects associated with this context."
  },
  {
    "title": "NSPersistentCloudKitContainer.EventType.setup | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/eventtype/setup",
    "html": "See Also\nEvent Types\ncase `import`\nAn event the persistent CloudKit container generates when importing records into a store.\ncase export\nAn event the persistent CloudKit container generates when exporting managed objects from a store."
  },
  {
    "title": "NSMergePolicyType.mergeByPropertyObjectTrumpMergePolicyType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmergepolicytype/mergebypropertyobjecttrumpmergepolicytype",
    "html": "Discussion\n\nA policy that merges conflicts between the persistent store’s version of the object and the current in-memory version by individual property, with in-memory changes trumping external changes.\n\nSee Also\nPolicies\ncase errorMergePolicyType\nThe default merge policy for all managed object contexts.\ncase mergeByPropertyStoreTrumpMergePolicyType\nA property-based merge policy that applies external changes.\ncase overwriteMergePolicyType\nA merge policy type that overwrites the entire stored object.\ncase rollbackMergePolicyType\nA merge policy that discards unsaved changes."
  },
  {
    "title": "NSPersistentCloudKitContainer.EventType.import | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/eventtype/import",
    "html": "See Also\nEvent Types\ncase setup\nAn event the persistent CloudKit container generates when setting up a store.\ncase export\nAn event the persistent CloudKit container generates when exporting managed objects from a store."
  },
  {
    "title": "NSPersistentCloudKitContainer.EventType.export | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/eventtype/export",
    "html": "See Also\nEvent Types\ncase setup\nAn event the persistent CloudKit container generates when setting up a store.\ncase `import`\nAn event the persistent CloudKit container generates when importing records into a store."
  },
  {
    "title": "resultType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainereventresult/3618822-resulttype",
    "html": "See Also\nHandling Event Results\nvar result: Any?\nThe result of the persistent CloudKit container event request, which the result type determines.\nenum NSPersistentCloudKitContainerEventResult.ResultType\nThe types of results from a persistent CloudKit container event fetch request."
  },
  {
    "title": "deleteHistory(before:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorychangerequest/2892345-deletehistory",
    "html": "Parameters\ntransaction\n\nThe transaction that marks the end of the delete history request.\n\nReturn Value\n\nA delete history change request (NSPersistentHistoryChangeRequest) using an end transaction boundary.\n\nSee Also\nPurging History\nclass func deleteHistory(before: Date) -> Self\nPurges history older than a given date.\nclass func deleteHistory(before: NSPersistentHistoryToken?) -> Self\nPurges history older than that defined by a given token."
  },
  {
    "title": "NSPersistentCloudKitContainerEventResult.ResultType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainereventresult/resulttype",
    "html": "Topics\nResult Types\ncase events\nThe persistent CloudKit container events that match the event request.\ncase countEvents\nThe number of CloudKit container events that match the event request.\nRelationships\nConforms To\nSendable\nSee Also\nHandling Event Results\nvar result: Any?\nThe result of the persistent CloudKit container event request, which the result type determines.\nvar resultType: NSPersistentCloudKitContainerEventResult.ResultType\nThe type of result that the CloudKit container event fetch request returns."
  },
  {
    "title": "versionHash | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/1498310-versionhash",
    "html": "Discussion\n\nThe version hash is used to uniquely identify an attribute based on its configuration. This value includes the versionHash information from NSPropertyDescription and the attribute type.\n\nSee Also\nRelated Documentation\nvar versionHash: Data\nThe version hash for the receiver."
  },
  {
    "title": "NSAttributeType.stringAttributeType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributetype/stringattributetype",
    "html": "See Also\nAttribute types\ncase binaryDataAttributeType\nAn attribute that stores binary data.\ncase booleanAttributeType\nAn attribute that stores a Boolean value.\ncase compositeAttributeType\nAn attribute that derives its value by composing other attributes.\ncase dateAttributeType\nAn attribute that stores a date.\ncase decimalAttributeType\nAn attribute that stores a decimal value.\ncase doubleAttributeType\nAn attribute that stores a double value.\ncase floatAttributeType\nAn attribute that stores a float value.\ncase integer16AttributeType\nAn attribute that stores a 16-bit signed integer value.\ncase integer32AttributeType\nAn attribute that stores a 32-bit signed integer value.\ncase integer64AttributeType\nAn attribute that stores a 64-bit signed integer value.\ncase objectIDAttributeType\nAn attribute that stores a managed object’s ID.\ncase transformableAttributeType\nAn attribute that uses a value transformer to derive its value.\ncase undefinedAttributeType\nAn attribute that doesn’t have an explicit type.\ncase URIAttributeType\nAn attribute that stores a uniform resource identifier.\ncase UUIDAttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "valueTransformerName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/1498305-valuetransformername",
    "html": "Discussion\n\nThe attribute must be of type NSTransformedAttributeType.\n\nThe transformer must output an NSData object from transformedValue(_:) and must allow reverse transformations.\n\nIf this value is nil, Core Data uses a default a transformer that uses NSCoding to archive and unarchive the attribute value.\n\nSee Also\nConfiguring the behavior\nvar allowsCloudEncryption: Bool\nA Boolean value that determines whether to encrypt the attribute’s value.\nvar allowsExternalBinaryDataStorage: Bool\nA Boolean value that indicates whether the attribute allows external binary storage.\nvar defaultValue: Any?\nThe default value of the attribute.\nvar preservesValueInHistoryOnDeletion: Bool\nA Boolean value that indicates whether the attribute records its value in the persistent history transaction for a managed object’s deletion."
  },
  {
    "title": "NSAttributeType.transformableAttributeType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributetype/transformableattributetype",
    "html": "See Also\nAttribute types\ncase binaryDataAttributeType\nAn attribute that stores binary data.\ncase booleanAttributeType\nAn attribute that stores a Boolean value.\ncase compositeAttributeType\nAn attribute that derives its value by composing other attributes.\ncase dateAttributeType\nAn attribute that stores a date.\ncase decimalAttributeType\nAn attribute that stores a decimal value.\ncase doubleAttributeType\nAn attribute that stores a double value.\ncase floatAttributeType\nAn attribute that stores a float value.\ncase integer16AttributeType\nAn attribute that stores a 16-bit signed integer value.\ncase integer32AttributeType\nAn attribute that stores a 32-bit signed integer value.\ncase integer64AttributeType\nAn attribute that stores a 64-bit signed integer value.\ncase objectIDAttributeType\nAn attribute that stores a managed object’s ID.\ncase stringAttributeType\nAn attribute that stores a string.\ncase undefinedAttributeType\nAn attribute that doesn’t have an explicit type.\ncase URIAttributeType\nAn attribute that stores a uniform resource identifier.\ncase UUIDAttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "NSSnapshotEventType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nssnapshoteventtype",
    "html": "Topics\nInitializing a Snapshot Event\ninit(rawValue: UInt)\nCreates a snapshot event using a raw value.\nEvent Types\nstatic var undoInsertion: NSSnapshotEventType\nSpecifies a change due to undo from insertion.\nstatic var undoDeletion: NSSnapshotEventType\nSpecifies a change due to undo from deletion.\nstatic var undoUpdate: NSSnapshotEventType\nSpecifies a change due to a property-level undo.\nstatic var rollback: NSSnapshotEventType\nSpecifies a change due to the managed object context being rolled back.\nstatic var refresh: NSSnapshotEventType\nSpecifies a change due to the managed object being refreshed.\nstatic var mergePolicy: NSSnapshotEventType\nSpecifies a change due to conflict resolution during a save operation.\nRelationships\nConforms To\nOptionSet\nSendable"
  },
  {
    "title": "NSAttributeType.integer64AttributeType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributetype/integer64attributetype",
    "html": "See Also\nAttribute types\ncase binaryDataAttributeType\nAn attribute that stores binary data.\ncase booleanAttributeType\nAn attribute that stores a Boolean value.\ncase compositeAttributeType\nAn attribute that derives its value by composing other attributes.\ncase dateAttributeType\nAn attribute that stores a date.\ncase decimalAttributeType\nAn attribute that stores a decimal value.\ncase doubleAttributeType\nAn attribute that stores a double value.\ncase floatAttributeType\nAn attribute that stores a float value.\ncase integer16AttributeType\nAn attribute that stores a 16-bit signed integer value.\ncase integer32AttributeType\nAn attribute that stores a 32-bit signed integer value.\ncase objectIDAttributeType\nAn attribute that stores a managed object’s ID.\ncase stringAttributeType\nAn attribute that stores a string.\ncase transformableAttributeType\nAn attribute that uses a value transformer to derive its value.\ncase undefinedAttributeType\nAn attribute that doesn’t have an explicit type.\ncase URIAttributeType\nAn attribute that stores a uniform resource identifier.\ncase UUIDAttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "NSAttributeType.doubleAttributeType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributetype/doubleattributetype",
    "html": "See Also\nAttribute types\ncase binaryDataAttributeType\nAn attribute that stores binary data.\ncase booleanAttributeType\nAn attribute that stores a Boolean value.\ncase compositeAttributeType\nAn attribute that derives its value by composing other attributes.\ncase dateAttributeType\nAn attribute that stores a date.\ncase decimalAttributeType\nAn attribute that stores a decimal value.\ncase floatAttributeType\nAn attribute that stores a float value.\ncase integer16AttributeType\nAn attribute that stores a 16-bit signed integer value.\ncase integer32AttributeType\nAn attribute that stores a 32-bit signed integer value.\ncase integer64AttributeType\nAn attribute that stores a 64-bit signed integer value.\ncase objectIDAttributeType\nAn attribute that stores a managed object’s ID.\ncase stringAttributeType\nAn attribute that stores a string.\ncase transformableAttributeType\nAn attribute that uses a value transformer to derive its value.\ncase undefinedAttributeType\nAn attribute that doesn’t have an explicit type.\ncase URIAttributeType\nAn attribute that stores a uniform resource identifier.\ncase UUIDAttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "NSAttributeType.booleanAttributeType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributetype/booleanattributetype",
    "html": "See Also\nAttribute types\ncase binaryDataAttributeType\nAn attribute that stores binary data.\ncase compositeAttributeType\nAn attribute that derives its value by composing other attributes.\ncase dateAttributeType\nAn attribute that stores a date.\ncase decimalAttributeType\nAn attribute that stores a decimal value.\ncase doubleAttributeType\nAn attribute that stores a double value.\ncase floatAttributeType\nAn attribute that stores a float value.\ncase integer16AttributeType\nAn attribute that stores a 16-bit signed integer value.\ncase integer32AttributeType\nAn attribute that stores a 32-bit signed integer value.\ncase integer64AttributeType\nAn attribute that stores a 64-bit signed integer value.\ncase objectIDAttributeType\nAn attribute that stores a managed object’s ID.\ncase stringAttributeType\nAn attribute that stores a string.\ncase transformableAttributeType\nAn attribute that uses a value transformer to derive its value.\ncase undefinedAttributeType\nAn attribute that doesn’t have an explicit type.\ncase URIAttributeType\nAn attribute that stores a uniform resource identifier.\ncase UUIDAttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "NSAttributeType.compositeAttributeType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributetype/compositeattributetype",
    "html": "Discussion\n\nComposite attributes support all attribute types except the following:\n\nNSAttributeType.undefinedAttributeType\n\nNSAttributeType.objectIDAttributeType\n\nNSAttributeType.binaryDataAttributeType (when allowsExternalBinaryDataStorage is true)\n\nFor more information, see NSCompositeAttributeDescription.\n\nSee Also\nAttribute types\ncase binaryDataAttributeType\nAn attribute that stores binary data.\ncase booleanAttributeType\nAn attribute that stores a Boolean value.\ncase dateAttributeType\nAn attribute that stores a date.\ncase decimalAttributeType\nAn attribute that stores a decimal value.\ncase doubleAttributeType\nAn attribute that stores a double value.\ncase floatAttributeType\nAn attribute that stores a float value.\ncase integer16AttributeType\nAn attribute that stores a 16-bit signed integer value.\ncase integer32AttributeType\nAn attribute that stores a 32-bit signed integer value.\ncase integer64AttributeType\nAn attribute that stores a 64-bit signed integer value.\ncase objectIDAttributeType\nAn attribute that stores a managed object’s ID.\ncase stringAttributeType\nAn attribute that stores a string.\ncase transformableAttributeType\nAn attribute that uses a value transformer to derive its value.\ncase undefinedAttributeType\nAn attribute that doesn’t have an explicit type.\ncase URIAttributeType\nAn attribute that stores a uniform resource identifier.\ncase UUIDAttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "NSAttributeType.dateAttributeType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributetype/dateattributetype",
    "html": "See Also\nAttribute types\ncase binaryDataAttributeType\nAn attribute that stores binary data.\ncase booleanAttributeType\nAn attribute that stores a Boolean value.\ncase compositeAttributeType\nAn attribute that derives its value by composing other attributes.\ncase decimalAttributeType\nAn attribute that stores a decimal value.\ncase doubleAttributeType\nAn attribute that stores a double value.\ncase floatAttributeType\nAn attribute that stores a float value.\ncase integer16AttributeType\nAn attribute that stores a 16-bit signed integer value.\ncase integer32AttributeType\nAn attribute that stores a 32-bit signed integer value.\ncase integer64AttributeType\nAn attribute that stores a 64-bit signed integer value.\ncase objectIDAttributeType\nAn attribute that stores a managed object’s ID.\ncase stringAttributeType\nAn attribute that stores a string.\ncase transformableAttributeType\nAn attribute that uses a value transformer to derive its value.\ncase undefinedAttributeType\nAn attribute that doesn’t have an explicit type.\ncase URIAttributeType\nAn attribute that stores a uniform resource identifier.\ncase UUIDAttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "Validation error codes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1535452-validation_error_codes",
    "html": "Overview\n\nFor additional error codes, including NSValidationErrorMinimum and NSValidationErrorMaximum, see NSError.\n\nTopics\nError codes\nvar NSCoreDataError: Int\nAn error code that indicates a nonspecific Core Data error.\nvar NSEntityMigrationPolicyError: Int\nAn error code that indicates a migration failure during processing of an entity migration policy.\nvar NSExternalRecordImportError: Int\nError code to denote a general error encountered while importing external records.\nvar NSInferredMappingModelError: Int\nError code to denote a problem with the creation of an inferred mapping model.\nvar NSManagedObjectConstraintMergeError: Int\nError code to denote a problem with the merging of instances of a managed object.\nvar NSManagedObjectConstraintValidationError: Int\nError code to denote a problem with the validation of a managed object.\nvar NSManagedObjectContextLockingError: Int\nError code to denote an inability to acquire a lock in a managed object context.\nvar NSManagedObjectExternalRelationshipError: Int\nError code to denote that an object being saved has a relationship containing an object from another store.\nvar NSManagedObjectMergeError: Int\nError code to denote that a merge policy failed—Core Data is unable to complete merging.\nvar NSManagedObjectModelReferenceNotFoundError: Int\nAn error code that indicates Core Data isn’t able to find or instantiate the referenced object model.\nvar NSManagedObjectReferentialIntegrityError: Int\nError code to denote an attempt to fire a fault pointing to an object that does not exist.\nvar NSManagedObjectValidationError: Int\nError code to denote a generic validation error.\nvar NSMigrationCancelledError: Int\nError code to denote that migration failed due to manual cancellation.\nvar NSMigrationConstraintViolationError: Int\nError code to denote a problem with the validation of a managed object during a migration.\nvar NSMigrationError: Int\nError code to denote a general migration error.\nvar NSMigrationManagerDestinationStoreError: Int\nError code to denote that migration failed due to a problem with the destination data store.\nvar NSMigrationManagerSourceStoreError: Int\nError code to denote that migration failed due to a problem with the source data store.\nvar NSMigrationMissingMappingModelError: Int\nError code to denote that migration failed due to a missing mapping model.\nvar NSMigrationMissingSourceModelError: Int\nError code to denote that migration failed due to a missing source data model.\nvar NSPersistentHistoryTokenExpiredError: Int\nError code to denote that the persistent history token has expired.\nvar NSPersistentStoreCoordinatorLockingError: Int\nError code to denote an inability to acquire a lock in a persistent store.\nvar NSPersistentStoreIncompatibleSchemaError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreIncompatibleVersionHashError: Int\nError code to denote that entity version hashes in the store are incompatible with the current managed object model.\nvar NSPersistentStoreIncompleteSaveError: Int\nError code to denote that one or more of the stores returned an error during a save operations.\nvar NSPersistentStoreInvalidTypeError: Int\nError code to denote an unknown persistent store type/format/version.\nvar NSPersistentStoreOpenError: Int\nError code to denote an error occurred while attempting to open a persistent store.\nvar NSPersistentStoreOperationError: Int\nError code to denote that a persistent store operation failed.\nvar NSPersistentStoreSaveConflictsError: Int\nError code to denote that an unresolved merge conflict was encountered during a save. .\nvar NSPersistentStoreSaveError: Int\nError code to denote that a persistent store returned an error for a save operation.\nvar NSPersistentStoreTimeoutError: Int\nError code to denote that Core Data failed to connect to a persistent store within the time specified by NSPersistentStoreTimeoutOption.\nvar NSPersistentStoreTypeMismatchError: Int\nError code returned by a persistent store coordinator if a store is accessed that does not match the specified type.\nvar NSPersistentStoreUnsupportedRequestTypeError: Int\nError code to denote that an NSPersistentStore subclass was passed a request (an instance of NSPersistentStoreRequest) that it did not understand.\nvar NSSQLiteError: Int\nError code to denote a general SQLite error.\nvar NSStagedMigrationBackwardMigrationError: Int\nAn error code that indicates a failed migration because of an attempt to migrate backward.\nvar NSStagedMigrationFrameworkVersionMismatchError: Int\nAn error code that indicates a failed migration because the persistent store’s metadata doesn’t support staged lightweight migrations.\nvar NSValidationInvalidURIError: Int\nError code to denote a problem with the validation of a URI property.\nvar NSValidationMultipleErrorsError: Int\nError code to denote an error containing multiple validation errors.\nvar NSValidationMissingMandatoryPropertyError: Int\nError code for a non-optional property with a nil value.\nvar NSValidationRelationshipLacksMinimumCountError: Int\nError code to denote a to-many relationship with too few destination objects.\nvar NSValidationRelationshipExceedsMaximumCountError: Int\nError code to denote a bounded to-many relationship with too many destination objects.\nvar NSValidationRelationshipDeniedDeleteError: Int\nError code to denote some relationship with delete rule NSDeleteRuleDeny is non-empty.\nvar NSValidationNumberTooLargeError: Int\nError code to denote some numerical value is too large.\nvar NSValidationNumberTooSmallError: Int\nError code to denote some numerical value is too small.\nvar NSValidationDateTooLateError: Int\nError code to denote some date value is too late.\nvar NSValidationDateTooSoonError: Int\nError code to denote some date value is too soon.\nvar NSValidationInvalidDateError: Int\nError code to denote some date value fails to match date pattern.\nvar NSValidationStringTooLongError: Int\nError code to denote some string value is too long.\nvar NSValidationStringTooShortError: Int\nError code to denote some string value is too short.\nvar NSValidationStringPatternMatchingError: Int\nError code to denote some string value fails to match some pattern.\nSee Also\nManaging Data Validation\nfunc validateValue(AutoreleasingUnsafeMutablePointer<AnyObject?>, forKey: String)\nValidates a property value for a given key.\nfunc validateForDelete()\nDetermines whether the managed object can be deleted in its current state.\nfunc validateForInsert()\nDetermines whether the managed object can be inserted in its current state.\nfunc validateForUpdate()\nDetermines whether the managed object's current state is valid.\nlet NSValidationKeyErrorKey: String\nThe error key for the attribute that failed to validate.\nlet NSValidationObjectErrorKey: String\nThe error key for the object that failed to validate.\nlet NSValidationPredicateErrorKey: String\nThe error key for the predicate that failed to validate.\nlet NSValidationValueErrorKey: String\nThe error key for the value that failed to validate."
  },
  {
    "title": "NSValidationKeyErrorKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsvalidationkeyerrorkey",
    "html": "See Also\nManaging Data Validation\nfunc validateValue(AutoreleasingUnsafeMutablePointer<AnyObject?>, forKey: String)\nValidates a property value for a given key.\nfunc validateForDelete()\nDetermines whether the managed object can be deleted in its current state.\nfunc validateForInsert()\nDetermines whether the managed object can be inserted in its current state.\nfunc validateForUpdate()\nDetermines whether the managed object's current state is valid.\nValidation error codes\nError codes relating to the validation of managed objects.\nlet NSValidationObjectErrorKey: String\nThe error key for the object that failed to validate.\nlet NSValidationPredicateErrorKey: String\nThe error key for the predicate that failed to validate.\nlet NSValidationValueErrorKey: String\nThe error key for the value that failed to validate."
  },
  {
    "title": "didChangeValue(forKey:withSetMutation:using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506936-didchangevalue",
    "html": "Parameters\ninKey\n\nThe name of a property that is a to-many relationship.\n\ninMutationKind\n\nThe type of change that was made.\n\ninObjects\n\nThe objects that were involved in the change (see NSKeyValueSetMutationKind).\n\nDiscussion\n\nFor more details, see Key-Value Observing Programming Guide.\n\nYou must not override this method.\n\nSee Also\nSupporting Key-Value Observing\nfunc didAccessValue(forKey: String?)\nProvides support for key-value observing access notification.\nfunc observationInfo() -> UnsafeMutableRawPointer?\nReturns the observation info of the managed object.\nfunc setObservationInfo(UnsafeMutableRawPointer?)\nSets the observation info of the managed object.\nfunc willAccessValue(forKey: String?)\nProvides support for key-value observing access notification.\nfunc didChangeValue(forKey: String)\nProvides an opportunity to respond when a value of a given property has changed.\nfunc willChangeValue(forKey: String)\nProvides an opportunity to respond when a value of a given property is about to change.\nfunc willChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\nProvides an opportunity to respond when a change is about to be made to a specified to-many relationship."
  },
  {
    "title": "didChangeValue(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506976-didchangevalue",
    "html": "Parameters\nkey\n\nThe name of the property that changed.\n\nDiscussion\n\nFor more details, see Key-Value Observing Programming Guide.\n\nYou must not override this method.\n\nSee Also\nSupporting Key-Value Observing\nfunc didAccessValue(forKey: String?)\nProvides support for key-value observing access notification.\nfunc observationInfo() -> UnsafeMutableRawPointer?\nReturns the observation info of the managed object.\nfunc setObservationInfo(UnsafeMutableRawPointer?)\nSets the observation info of the managed object.\nfunc willAccessValue(forKey: String?)\nProvides support for key-value observing access notification.\nfunc didChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\nProvides an opportunity to respond when a change was made to a specified to-many relationship.\nfunc willChangeValue(forKey: String)\nProvides an opportunity to respond when a value of a given property is about to change.\nfunc willChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\nProvides an opportunity to respond when a change is about to be made to a specified to-many relationship."
  },
  {
    "title": "willAccessValue(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1507001-willaccessvalue",
    "html": "Parameters\nkey\n\nThe name of one of the receiver's properties.\n\nDiscussion\n\nSee didAccessValue(forKey:) for more details. You can invoke this method with the key value of nil to ensure that a fault has been fired, as illustrated by the following example.\n\n[aManagedObject willAccessValueForKey:nil];\n\nSee Also\nSupporting Key-Value Observing\nfunc didAccessValue(forKey: String?)\nProvides support for key-value observing access notification.\nfunc observationInfo() -> UnsafeMutableRawPointer?\nReturns the observation info of the managed object.\nfunc setObservationInfo(UnsafeMutableRawPointer?)\nSets the observation info of the managed object.\nfunc didChangeValue(forKey: String)\nProvides an opportunity to respond when a value of a given property has changed.\nfunc didChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\nProvides an opportunity to respond when a change was made to a specified to-many relationship.\nfunc willChangeValue(forKey: String)\nProvides an opportunity to respond when a value of a given property is about to change.\nfunc willChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\nProvides an opportunity to respond when a change is about to be made to a specified to-many relationship."
  },
  {
    "title": "NSValidationObjectErrorKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsvalidationobjecterrorkey",
    "html": "See Also\nManaging Data Validation\nfunc validateValue(AutoreleasingUnsafeMutablePointer<AnyObject?>, forKey: String)\nValidates a property value for a given key.\nfunc validateForDelete()\nDetermines whether the managed object can be deleted in its current state.\nfunc validateForInsert()\nDetermines whether the managed object can be inserted in its current state.\nfunc validateForUpdate()\nDetermines whether the managed object's current state is valid.\nValidation error codes\nError codes relating to the validation of managed objects.\nlet NSValidationKeyErrorKey: String\nThe error key for the attribute that failed to validate.\nlet NSValidationPredicateErrorKey: String\nThe error key for the predicate that failed to validate.\nlet NSValidationValueErrorKey: String\nThe error key for the value that failed to validate."
  },
  {
    "title": "objectIDs(forRelationshipNamed:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506201-objectids",
    "html": "See Also\nSupporting Key-Value Coding\nfunc value(forKey: String) -> Any?\nReturns the value for the property specified by key.\nfunc setValue(Any?, forKey: String)\nSets the specified property of the managed object to the specified value.\nfunc primitiveValue(forKey: String) -> Any?\nReturns the value for the specified property from the managed object’s private internal storage .\nfunc setPrimitiveValue(Any?, forKey: String)\nSets the value of a given property in the managed object's private internal storage."
  },
  {
    "title": "validateForDelete() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506195-validatefordelete",
    "html": "Parameters\nerror\n\nIf the receiver cannot be deleted in its current state, upon return contains an instance of NSError that describes the problem.\n\nReturn Value\n\ntrue if the receiver can be deleted in its current state, otherwise false.\n\nDiscussion\n\nAn object cannot be deleted if it has a relationship has a “deny” delete rule and that relationship has a destination object.\n\nNSManagedObject’s implementation sends the receiver’s entity description a message which performs basic checking based on the presence or absence of values.\n\nImportant\n\nSubclasses should invoke super’s implementation before performing their own validation, and should combine any error returned by super’s implementation with their own (see Managed Object Validation).\n\nHandling Errors in Swift:\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nManaging Data Validation\nfunc validateValue(AutoreleasingUnsafeMutablePointer<AnyObject?>, forKey: String)\nValidates a property value for a given key.\nfunc validateForInsert()\nDetermines whether the managed object can be inserted in its current state.\nfunc validateForUpdate()\nDetermines whether the managed object's current state is valid.\nValidation error codes\nError codes relating to the validation of managed objects.\nlet NSValidationKeyErrorKey: String\nThe error key for the attribute that failed to validate.\nlet NSValidationObjectErrorKey: String\nThe error key for the object that failed to validate.\nlet NSValidationPredicateErrorKey: String\nThe error key for the predicate that failed to validate.\nlet NSValidationValueErrorKey: String\nThe error key for the value that failed to validate."
  },
  {
    "title": "setValue(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506397-setvalue",
    "html": "Parameters\nvalue\n\nThe new value for the property specified by key.\n\nkey\n\nThe name of one of the receiver's properties.\n\nDiscussion\n\nIf key is not a property defined by the model, the method raises an exception. If key identifies a to-one relationship, relates the object specified by value to the receiver, unrelating the previously related object if there was one. Given a collection object and a key that identifies a to-many relationship, relates the objects contained in the collection to the receiver, unrelating previously related objects if there were any.\n\nThis method is overridden by NSManagedObject to access the managed object’s generic dictionary storage unless the receiver’s class explicitly provides key-value coding compliant accessor methods for key.\n\nImportant\n\nYou must not override this method.\n\nSee Also\nSupporting Key-Value Coding\nfunc value(forKey: String) -> Any?\nReturns the value for the property specified by key.\nfunc primitiveValue(forKey: String) -> Any?\nReturns the value for the specified property from the managed object’s private internal storage .\nfunc setPrimitiveValue(Any?, forKey: String)\nSets the value of a given property in the managed object's private internal storage.\nfunc objectIDs(forRelationshipNamed: String) -> [NSManagedObjectID]\nReturns the object IDs for all of the managed objects that are in the named relationship.\nRelated Documentation\nfunc setObservationInfo(UnsafeMutableRawPointer?)\nSets the observation info of the managed object."
  },
  {
    "title": "NSManagedObject.ObjectWillChangePublisher | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/objectwillchangepublisher",
    "html": "See Also\nManaging Change Events\nclass var contextShouldIgnoreUnmodeledPropertyChanges: Bool\nA Boolean value that indicates whether to mark instances of the class as having changes when an unmodeled property changes.\nfunc awakeFromFetch()\nProvides an opportunity to add code into the life cycle of the managed object when fufilling it from a fault.\nfunc awakeFromInsert()\nProvides an opportunity to add code into the life cycle of the managed object when initially creating it.\nfunc awake(fromSnapshotEvents: NSSnapshotEventType)\nProvides an opportunity to add code into the life cycle of the managed object when fulfilling it from a snapshot.\nfunc changedValues() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc changedValuesForCurrentEvent() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc committedValues(forKeys: [String]?) -> [String : Any]\nReturns a dictionary of the most recent fetched or saved values of the managed object for the properties of the specified keys.\nfunc prepareForDeletion()\nProvides an opportunity to add code into the life cycle of the managed object before deleting it.\nfunc willSave()\nProvides an opportunity to add code into the life cycle of the managed object before saving it.\nfunc didSave()\nProvides an opportunity to add code into the life cycle of the managed object after the managed object’s context completes a save operation.\nfunc willTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object before converting it to a fault.\nfunc didTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object after converting it to a fault.\nclass func fetchRequest() -> NSFetchRequest<NSFetchRequestResult>\nReturns an initialized fetch request with the entity this subclass represents.\nvar objectWillChange: ObservableObjectPublisher\nA publisher that emits before the object changes."
  },
  {
    "title": "validateValue(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506776-validatevalue",
    "html": "Parameters\nvalue\n\nA pointer to an object.\n\nkey\n\nThe name of one of the receiver's properties.\n\nerror\n\nIf value is not a valid value for key (and cannot be coerced), upon return contains an instance of NSError that describes the problem.\n\nReturn Value\n\ntrue if value is a valid value for key (or if value can be coerced into a valid value for key), otherwise false.\n\nDiscussion\n\nThis method is responsible for two things: coercing the value into an appropriate type for the object, and validating it according to the object’s rules.\n\nThe default implementation provided by NSManagedObject consults the object’s entity description to coerce the value and to check for basic errors, such as a null value when that isn’t allowed and the length of strings when a field width is specified for the attribute. It then searches for a method of the form validate<Key>:error: and invokes it if it exists.\n\nYou can implement methods of the form validate<Key>:error: to perform validation that is not possible using the constraints available in the property description. If it finds an unacceptable value, your validation method should return false and in error an NSError object that describes the problem. For more details, see Managed Object Validation. For inter-property validation (to check for combinations of values that are invalid), see validateForUpdate() and related methods.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nManaging Data Validation\nfunc validateForDelete()\nDetermines whether the managed object can be deleted in its current state.\nfunc validateForInsert()\nDetermines whether the managed object can be inserted in its current state.\nfunc validateForUpdate()\nDetermines whether the managed object's current state is valid.\nValidation error codes\nError codes relating to the validation of managed objects.\nlet NSValidationKeyErrorKey: String\nThe error key for the attribute that failed to validate.\nlet NSValidationObjectErrorKey: String\nThe error key for the object that failed to validate.\nlet NSValidationPredicateErrorKey: String\nThe error key for the predicate that failed to validate.\nlet NSValidationValueErrorKey: String\nThe error key for the value that failed to validate."
  },
  {
    "title": "validateForUpdate() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506998-validateforupdate",
    "html": "Parameters\nerror\n\nIf the receiver's current state is invalid, upon return contains an instance of NSError that describes the problem.\n\nReturn Value\n\ntrue if the receiver's current state is valid, otherwise false.\n\nDiscussion\n\nNSManagedObject’s implementation iterates through all of the receiver’s properties validating each in turn. If this results in more than one error, the userInfo dictionary in the NSError returned in error contains a key NSDetailedErrorsKey; the corresponding value is an array containing the individual validation errors. If you pass NULL as the error, validation will abort after the first failure.\n\nImportant\n\nSubclasses should invoke super’s implementation before performing their own validation, and should combine any error returned by super’s implementation with their own (see Managed Object Validation).\n\nHandling Errors in Swift:\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nManaging Data Validation\nfunc validateValue(AutoreleasingUnsafeMutablePointer<AnyObject?>, forKey: String)\nValidates a property value for a given key.\nfunc validateForDelete()\nDetermines whether the managed object can be deleted in its current state.\nfunc validateForInsert()\nDetermines whether the managed object can be inserted in its current state.\nValidation error codes\nError codes relating to the validation of managed objects.\nlet NSValidationKeyErrorKey: String\nThe error key for the attribute that failed to validate.\nlet NSValidationObjectErrorKey: String\nThe error key for the object that failed to validate.\nlet NSValidationPredicateErrorKey: String\nThe error key for the predicate that failed to validate.\nlet NSValidationValueErrorKey: String\nThe error key for the value that failed to validate."
  },
  {
    "title": "willSave() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506209-willsave",
    "html": "Discussion\n\nThis method can have “side effects” on persistent values. You can use it to, for example, compute persistent values from other transient or scratchpad values.\n\nIf you want to update a persistent property value, you should typically test for equality of any new value with the existing value before making a change. If you change property values using standard accessor methods, Core Data will observe the resultant change notification and so invoke willSave again before saving the object’s managed object context. If you continue to modify a value in willSave, willSave will continue to be called until your program crashes.\n\nFor example, if you set a last-modified timestamp, you should check whether either you previously set it in the same save operation, or that the existing timestamp is not less than a small delta from the current time. Typically it’s better to calculate the timestamp once for all the objects being saved (for example, in response to an NSManagedObjectContextWillSaveNotification).\n\nIf you change property values using primitive accessors, you avoid the possibility of infinite recursion, but Core Data will not notice the change you make.\n\nThe sense of “save” in the method name is that of a database commit statement and so applies to deletions as well as to updates to objects. For subclasses, this method is therefore an appropriate locus for code to be executed when an object deleted as well as “saved to disk.” You can find out if an object is marked for deletion with isDeleted.\n\nSee Also\nManaging Change Events\nclass var contextShouldIgnoreUnmodeledPropertyChanges: Bool\nA Boolean value that indicates whether to mark instances of the class as having changes when an unmodeled property changes.\nfunc awakeFromFetch()\nProvides an opportunity to add code into the life cycle of the managed object when fufilling it from a fault.\nfunc awakeFromInsert()\nProvides an opportunity to add code into the life cycle of the managed object when initially creating it.\nfunc awake(fromSnapshotEvents: NSSnapshotEventType)\nProvides an opportunity to add code into the life cycle of the managed object when fulfilling it from a snapshot.\nfunc changedValues() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc changedValuesForCurrentEvent() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc committedValues(forKeys: [String]?) -> [String : Any]\nReturns a dictionary of the most recent fetched or saved values of the managed object for the properties of the specified keys.\nfunc prepareForDeletion()\nProvides an opportunity to add code into the life cycle of the managed object before deleting it.\nfunc didSave()\nProvides an opportunity to add code into the life cycle of the managed object after the managed object’s context completes a save operation.\nfunc willTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object before converting it to a fault.\nfunc didTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object after converting it to a fault.\nclass func fetchRequest() -> NSFetchRequest<NSFetchRequestResult>\nReturns an initialized fetch request with the entity this subclass represents.\nvar objectWillChange: ObservableObjectPublisher\nA publisher that emits before the object changes.\ntypealias NSManagedObject.ObjectWillChangePublisher\nAn object that publishes changes from observable objects."
  },
  {
    "title": "didSave() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506585-didsave",
    "html": "Discussion\n\nYou can use this method to notify other objects after a save, and to compute transient values from persistent values.\n\nThis method can have “side effects” on the persistent values, however any changes you make using standard accessor methods will by default dirty the managed object context and leave your context with unsaved changes. Moreover, if the object’s context has an undo manager, such changes will add an undo operation. For document-based applications, changes made in didSave will therefore come into the next undo grouping, which can lead to “empty” undo operations from the user's perspective. You may want to disable undo registration to avoid this issue.\n\nThe sense of “save” in the method name is that of a database commit statement and so applies to deletions as well as to updates to objects. For subclasses, this method is therefore an appropriate locus for code to be executed when an object deleted as well as “saved to disk.” You can find out if an object is marked for deletion with isDeleted.\n\nSpecial Considerations\n\nYou cannot attempt to resurrect a deleted object in didSave.\n\nSee Also\nManaging Change Events\nclass var contextShouldIgnoreUnmodeledPropertyChanges: Bool\nA Boolean value that indicates whether to mark instances of the class as having changes when an unmodeled property changes.\nfunc awakeFromFetch()\nProvides an opportunity to add code into the life cycle of the managed object when fufilling it from a fault.\nfunc awakeFromInsert()\nProvides an opportunity to add code into the life cycle of the managed object when initially creating it.\nfunc awake(fromSnapshotEvents: NSSnapshotEventType)\nProvides an opportunity to add code into the life cycle of the managed object when fulfilling it from a snapshot.\nfunc changedValues() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc changedValuesForCurrentEvent() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc committedValues(forKeys: [String]?) -> [String : Any]\nReturns a dictionary of the most recent fetched or saved values of the managed object for the properties of the specified keys.\nfunc prepareForDeletion()\nProvides an opportunity to add code into the life cycle of the managed object before deleting it.\nfunc willSave()\nProvides an opportunity to add code into the life cycle of the managed object before saving it.\nfunc willTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object before converting it to a fault.\nfunc didTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object after converting it to a fault.\nclass func fetchRequest() -> NSFetchRequest<NSFetchRequestResult>\nReturns an initialized fetch request with the entity this subclass represents.\nvar objectWillChange: ObservableObjectPublisher\nA publisher that emits before the object changes.\ntypealias NSManagedObject.ObjectWillChangePublisher\nAn object that publishes changes from observable objects."
  },
  {
    "title": "value(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506613-value",
    "html": "Parameters\nkey\n\nThe name of one of the receiver's properties.\n\nReturn Value\n\nThe value of the property specified by key.\n\nDiscussion\n\nIf key is not a property defined by the model, the method raises an exception. This method is overridden by NSManagedObject to access the managed object’s generic dictionary storage unless the receiver’s class explicitly provides key-value coding compliant accessor methods for key.\n\nImportant\n\nYou must not override this method.\n\nSee Also\nSupporting Key-Value Coding\nfunc setValue(Any?, forKey: String)\nSets the specified property of the managed object to the specified value.\nfunc primitiveValue(forKey: String) -> Any?\nReturns the value for the specified property from the managed object’s private internal storage .\nfunc setPrimitiveValue(Any?, forKey: String)\nSets the value of a given property in the managed object's private internal storage.\nfunc objectIDs(forRelationshipNamed: String) -> [NSManagedObjectID]\nReturns the object IDs for all of the managed objects that are in the named relationship.\nRelated Documentation\nfunc setObservationInfo(UnsafeMutableRawPointer?)\nSets the observation info of the managed object."
  },
  {
    "title": "willTurnIntoFault() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506537-willturnintofault",
    "html": "Discussion\n\nThis method is the companion of the didTurnIntoFault() method. You can use it to (re)set state which requires access to property values (for example, observers across key paths). The default implementation does nothing.\n\nSee Also\nManaging Change Events\nclass var contextShouldIgnoreUnmodeledPropertyChanges: Bool\nA Boolean value that indicates whether to mark instances of the class as having changes when an unmodeled property changes.\nfunc awakeFromFetch()\nProvides an opportunity to add code into the life cycle of the managed object when fufilling it from a fault.\nfunc awakeFromInsert()\nProvides an opportunity to add code into the life cycle of the managed object when initially creating it.\nfunc awake(fromSnapshotEvents: NSSnapshotEventType)\nProvides an opportunity to add code into the life cycle of the managed object when fulfilling it from a snapshot.\nfunc changedValues() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc changedValuesForCurrentEvent() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc committedValues(forKeys: [String]?) -> [String : Any]\nReturns a dictionary of the most recent fetched or saved values of the managed object for the properties of the specified keys.\nfunc prepareForDeletion()\nProvides an opportunity to add code into the life cycle of the managed object before deleting it.\nfunc willSave()\nProvides an opportunity to add code into the life cycle of the managed object before saving it.\nfunc didSave()\nProvides an opportunity to add code into the life cycle of the managed object after the managed object’s context completes a save operation.\nfunc didTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object after converting it to a fault.\nclass func fetchRequest() -> NSFetchRequest<NSFetchRequestResult>\nReturns an initialized fetch request with the entity this subclass represents.\nvar objectWillChange: ObservableObjectPublisher\nA publisher that emits before the object changes.\ntypealias NSManagedObject.ObjectWillChangePublisher\nAn object that publishes changes from observable objects."
  },
  {
    "title": "didTurnIntoFault() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506470-didturnintofault",
    "html": "Discussion\n\nYou use this method to clear out custom data caches—transient values declared as entity properties are typically already cleared out by the time this method is invoked (see, for example, refresh(_:mergeChanges:)).\n\nSee Also\nManaging Change Events\nclass var contextShouldIgnoreUnmodeledPropertyChanges: Bool\nA Boolean value that indicates whether to mark instances of the class as having changes when an unmodeled property changes.\nfunc awakeFromFetch()\nProvides an opportunity to add code into the life cycle of the managed object when fufilling it from a fault.\nfunc awakeFromInsert()\nProvides an opportunity to add code into the life cycle of the managed object when initially creating it.\nfunc awake(fromSnapshotEvents: NSSnapshotEventType)\nProvides an opportunity to add code into the life cycle of the managed object when fulfilling it from a snapshot.\nfunc changedValues() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc changedValuesForCurrentEvent() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc committedValues(forKeys: [String]?) -> [String : Any]\nReturns a dictionary of the most recent fetched or saved values of the managed object for the properties of the specified keys.\nfunc prepareForDeletion()\nProvides an opportunity to add code into the life cycle of the managed object before deleting it.\nfunc willSave()\nProvides an opportunity to add code into the life cycle of the managed object before saving it.\nfunc didSave()\nProvides an opportunity to add code into the life cycle of the managed object after the managed object’s context completes a save operation.\nfunc willTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object before converting it to a fault.\nclass func fetchRequest() -> NSFetchRequest<NSFetchRequestResult>\nReturns an initialized fetch request with the entity this subclass represents.\nvar objectWillChange: ObservableObjectPublisher\nA publisher that emits before the object changes.\ntypealias NSManagedObject.ObjectWillChangePublisher\nAn object that publishes changes from observable objects."
  },
  {
    "title": "primitiveValue(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506728-primitivevalue",
    "html": "Parameters\nkey\n\nThe name of one of the receiver's properties.\n\nReturn Value\n\nThe value of the property specified by key. Returns nil if no value has been set.\n\nDiscussion\n\nThis method does not invoke the access notification methods (willAccessValue(forKey:) and didAccessValue(forKey:)). This method is used primarily by subclasses that implement custom accessor methods that need direct access to the receiver’s private storage.\n\nSpecial Considerations\n\nSubclasses should not override this method.\n\nThe following points also apply:\n\nPrimitive accessor methods are only supported on modeled properties. If you invoke a primitive accessor on an unmodeled property, it will instead operate upon a random modeled property. (The debug libraries and frameworks (available from Apple Developer Website) have assertions to test for passing unmodeled keys to these methods.)\n\nYou are strongly encouraged to use the dynamically-generated accessors rather than using this method directly (for example, primitiveName: instead of primitiveValueForKey:@\"name\"). The dynamic accessors are much more efficient, and allow for compile-time checking.\n\nSee Also\nSupporting Key-Value Coding\nfunc value(forKey: String) -> Any?\nReturns the value for the property specified by key.\nfunc setValue(Any?, forKey: String)\nSets the specified property of the managed object to the specified value.\nfunc setPrimitiveValue(Any?, forKey: String)\nSets the value of a given property in the managed object's private internal storage.\nfunc objectIDs(forRelationshipNamed: String) -> [NSManagedObjectID]\nReturns the object IDs for all of the managed objects that are in the named relationship.\nRelated Documentation\nfunc setObservationInfo(UnsafeMutableRawPointer?)\nSets the observation info of the managed object.\nmutableSetValueForKey:\nReturns a mutable set that provides read-write access to the unordered to-many relationship specified by a given key."
  },
  {
    "title": "NSPersistentHistoryChangeType.update | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorychangetype/update",
    "html": "See Also\nChange Types\ncase delete\nThe deletion of a managed object from the persistent store.\ncase insert\nThe insertion of a managed object into the persistent store."
  },
  {
    "title": "NSPersistentHistoryChangeType.insert | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorychangetype/insert",
    "html": "See Also\nChange Types\ncase delete\nThe deletion of a managed object from the persistent store.\ncase update\nAn update to a managed object’s properties in the persistent store."
  },
  {
    "title": "NSManagedObjectContextConcurrencyType.confinementConcurrencyType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontextconcurrencytype/confinementconcurrencytype",
    "html": "See Also\nConcurrency Types\ncase privateQueueConcurrencyType\nSpecifies that the context will be associated with a private dispatch queue.\ncase mainQueueConcurrencyType\nSpecifies that the context will be associated with the main queue."
  },
  {
    "title": "entity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectid/1391684-entity",
    "html": "See Also\nGetting Managed Object ID Information\nvar isTemporaryID: Bool\nA Boolean value that indicates whether the object ID is temporary.\nvar persistentStore: NSPersistentStore?\nThe persistent store that fetched the object for the object ID.\nfunc uriRepresentation() -> URL\nReturns a URI that provides an archiveable reference to the object for the object ID.\nRelated Documentation\nCore Data Programming Guide\nvar entity: NSEntityDescription\nThe entity description of the managed object."
  },
  {
    "title": "isTemporaryID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectid/1391691-istemporaryid",
    "html": "Discussion\n\ntrue if the receiver is temporary, otherwise false. Most object IDs return false. New objects inserted into a managed object context are assigned a temporary ID which is replaced with a permanent one once the object gets saved to a persistent store.\n\nSee Also\nGetting Managed Object ID Information\nvar entity: NSEntityDescription\nThe entity description associated with the object ID.\nvar persistentStore: NSPersistentStore?\nThe persistent store that fetched the object for the object ID.\nfunc uriRepresentation() -> URL\nReturns a URI that provides an archiveable reference to the object for the object ID."
  },
  {
    "title": "persistentStore | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectid/1391693-persistentstore",
    "html": "Discussion\n\nnil if the ID is for a newly-inserted object that has not yet been saved to a persistent store.\n\nSee Also\nGetting Managed Object ID Information\nvar entity: NSEntityDescription\nThe entity description associated with the object ID.\nvar isTemporaryID: Bool\nA Boolean value that indicates whether the object ID is temporary.\nfunc uriRepresentation() -> URL\nReturns a URI that provides an archiveable reference to the object for the object ID."
  },
  {
    "title": "isKindOf(entity:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription/1425113-iskindof",
    "html": "Parameters\nentity\n\nAn entity.\n\nReturn Value\n\ntrue if the receiver is a sub-entity of entity, otherwise false.\n\nSee Also\nManaging inheritance\nvar subentitiesByName: [String : NSEntityDescription]\nA dictionary containing the receiver’s sub-entities.\nvar subentities: [NSEntityDescription]\nAn array containing the sub-entities of the receiver.\nvar superentity: NSEntityDescription?\nThe super-entity of the receiver."
  },
  {
    "title": "renamingIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription/1425135-renamingidentifier",
    "html": "Discussion\n\nThe renaming identifier is used to resolve naming conflicts between models. When creating a mapping model between two managed object models, a source entity and a destination entity that share the same identifier indicate that an entity mapping should be configured to migrate from the source to the destination.\n\nIf you do not set this value, the identifier will return the entity’s name.\n\nSee Also\nGetting descriptive information\nvar name: String?\nThe entity name of the receiver.\nvar managedObjectModel: NSManagedObjectModel\nThe managed object model with which the receiver is associated.\nvar managedObjectClassName: String!\nThe name of the class that represents the receiver’s entity.\nvar isAbstract: Bool\nA Boolean value that indicates whether the receiver represents an abstract entity.\nvar userInfo: [AnyHashable : Any]?\nThe user info dictionary of the receiver.\nvar coreSpotlightDisplayNameExpression: NSExpression\nThe expression that computes the CoreSpotlight display name for instances of the entity."
  },
  {
    "title": "managedObjectModel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription/1425121-managedobjectmodel",
    "html": "See Also\nGetting descriptive information\nvar name: String?\nThe entity name of the receiver.\nvar managedObjectClassName: String!\nThe name of the class that represents the receiver’s entity.\nvar renamingIdentifier: String?\nThe renaming identifier for the receiver.\nvar isAbstract: Bool\nA Boolean value that indicates whether the receiver represents an abstract entity.\nvar userInfo: [AnyHashable : Any]?\nThe user info dictionary of the receiver.\nvar coreSpotlightDisplayNameExpression: NSExpression\nThe expression that computes the CoreSpotlight display name for instances of the entity.\nRelated Documentation\nfunc setEntities([NSEntityDescription], forConfigurationName: String)\nAssociates the specified entities with the model using the given configuration name.\nvar entities: [NSEntityDescription]\nThe entities in the model."
  },
  {
    "title": "committedValues(forKeys:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506771-committedvalues",
    "html": "Parameters\nkeys\n\nAn array containing names of properties of the receiver, or nil.\n\nReturn Value\n\nA dictionary containing the last fetched or saved values of the receiver for the properties specified by keys.\n\nDiscussion\n\nnil values are represented by an instance of NSNull.\n\nThis method only reports values of properties that are defined as persistent properties of the receiver, not values of transient properties or of custom instance variables.\n\nYou can invoke this method with the keys value of nil to retrieve committed values for all the receiver’s properties, as illustrated by the following example.\n\nNSDictionary *allCommittedValues =\n        [aManagedObject committedValuesForKeys:nil];\n\n\nIt is more efficient to use nil than to pass an array of all the property keys.\n\nSee Also\nManaging Change Events\nclass var contextShouldIgnoreUnmodeledPropertyChanges: Bool\nA Boolean value that indicates whether to mark instances of the class as having changes when an unmodeled property changes.\nfunc awakeFromFetch()\nProvides an opportunity to add code into the life cycle of the managed object when fufilling it from a fault.\nfunc awakeFromInsert()\nProvides an opportunity to add code into the life cycle of the managed object when initially creating it.\nfunc awake(fromSnapshotEvents: NSSnapshotEventType)\nProvides an opportunity to add code into the life cycle of the managed object when fulfilling it from a snapshot.\nfunc changedValues() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc changedValuesForCurrentEvent() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc prepareForDeletion()\nProvides an opportunity to add code into the life cycle of the managed object before deleting it.\nfunc willSave()\nProvides an opportunity to add code into the life cycle of the managed object before saving it.\nfunc didSave()\nProvides an opportunity to add code into the life cycle of the managed object after the managed object’s context completes a save operation.\nfunc willTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object before converting it to a fault.\nfunc didTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object after converting it to a fault.\nclass func fetchRequest() -> NSFetchRequest<NSFetchRequestResult>\nReturns an initialized fetch request with the entity this subclass represents.\nvar objectWillChange: ObservableObjectPublisher\nA publisher that emits before the object changes.\ntypealias NSManagedObject.ObjectWillChangePublisher\nAn object that publishes changes from observable objects."
  },
  {
    "title": "changedValuesForCurrentEvent() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506472-changedvaluesforcurrentevent",
    "html": "Return Value\n\nA dictionary with keys that are the names of persistent properties with changes since the last posting of NSManagedObjectContextObjectsDidChange, and with the new values for those properties.\n\nDiscussion\n\nThis method only reports changes to properties that are persistent properties of the receiver, not changes to transient properties or custom instance variables.\n\nSee Also\nManaging Change Events\nclass var contextShouldIgnoreUnmodeledPropertyChanges: Bool\nA Boolean value that indicates whether to mark instances of the class as having changes when an unmodeled property changes.\nfunc awakeFromFetch()\nProvides an opportunity to add code into the life cycle of the managed object when fufilling it from a fault.\nfunc awakeFromInsert()\nProvides an opportunity to add code into the life cycle of the managed object when initially creating it.\nfunc awake(fromSnapshotEvents: NSSnapshotEventType)\nProvides an opportunity to add code into the life cycle of the managed object when fulfilling it from a snapshot.\nfunc changedValues() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc committedValues(forKeys: [String]?) -> [String : Any]\nReturns a dictionary of the most recent fetched or saved values of the managed object for the properties of the specified keys.\nfunc prepareForDeletion()\nProvides an opportunity to add code into the life cycle of the managed object before deleting it.\nfunc willSave()\nProvides an opportunity to add code into the life cycle of the managed object before saving it.\nfunc didSave()\nProvides an opportunity to add code into the life cycle of the managed object after the managed object’s context completes a save operation.\nfunc willTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object before converting it to a fault.\nfunc didTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object after converting it to a fault.\nclass func fetchRequest() -> NSFetchRequest<NSFetchRequestResult>\nReturns an initialized fetch request with the entity this subclass represents.\nvar objectWillChange: ObservableObjectPublisher\nA publisher that emits before the object changes.\ntypealias NSManagedObject.ObjectWillChangePublisher\nAn object that publishes changes from observable objects."
  },
  {
    "title": "isUpdated | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506867-isupdated",
    "html": "Discussion\n\ntrue if the receiver has unsaved changes, otherwise false. The receiver has unsaved changes if it has been updated since its managed object context was last saved.\n\nIf the receiver is a fault, accessing this property does not cause it to fire.\n\nSee Also\nGetting State Information\nvar managedObjectContext: NSManagedObjectContext?\nThe managed object context with which the managed object is registered.\nvar hasChanges: Bool\nA Boolean value that indicates whether the managed object has been inserted, has been deleted, or has unsaved changes.\nvar isInserted: Bool\nA Boolean value that indicates whether the managed object has been inserted in a managed object context.\nvar isDeleted: Bool\nA Boolean value that indicates whether the managed object will be deleted during the next save.\nvar isFault: Bool\nA Boolean value that indicates whether the managed object is a fault.\nvar faultingState: Int\nThe faulting state of the managed object.\nfunc hasFault(forRelationshipNamed: String) -> Bool\nReturns a Boolean value that indicates whether the relationship for a given key is a fault.\nvar hasPersistentChangedValues: Bool\nA Boolean value that indicates whether the managed object has persistent changes."
  },
  {
    "title": "hasFault(forRelationshipNamed:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506973-hasfault",
    "html": "Parameters\nkey\n\nThe name of one of the receiver’s relationships.\n\nReturn Value\n\ntrue if the relationship for key is a fault; otherwise, false.\n\nDiscussion\n\nIf the specified relationship is a fault, calling this method does not result in the fault firing.\n\nSee Also\nGetting State Information\nvar managedObjectContext: NSManagedObjectContext?\nThe managed object context with which the managed object is registered.\nvar hasChanges: Bool\nA Boolean value that indicates whether the managed object has been inserted, has been deleted, or has unsaved changes.\nvar isInserted: Bool\nA Boolean value that indicates whether the managed object has been inserted in a managed object context.\nvar isUpdated: Bool\nA Boolean value that indicates whether the managed object has unsaved changes.\nvar isDeleted: Bool\nA Boolean value that indicates whether the managed object will be deleted during the next save.\nvar isFault: Bool\nA Boolean value that indicates whether the managed object is a fault.\nvar faultingState: Int\nThe faulting state of the managed object.\nvar hasPersistentChangedValues: Bool\nA Boolean value that indicates whether the managed object has persistent changes."
  },
  {
    "title": "faultingState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506720-faultingstate",
    "html": "Return Value\n\n0 if the object is fully initialized as a managed object and not transitioning to or from another state, otherwise some other value.\n\nDiscussion\n\n0 if the object is fully initialized as a managed object and not transitioning to or from another state, otherwise some other value. This property allows you to determine if an object is in a transitional phase when receiving a key-value observing change notification.\n\nSee Also\nGetting State Information\nvar managedObjectContext: NSManagedObjectContext?\nThe managed object context with which the managed object is registered.\nvar hasChanges: Bool\nA Boolean value that indicates whether the managed object has been inserted, has been deleted, or has unsaved changes.\nvar isInserted: Bool\nA Boolean value that indicates whether the managed object has been inserted in a managed object context.\nvar isUpdated: Bool\nA Boolean value that indicates whether the managed object has unsaved changes.\nvar isDeleted: Bool\nA Boolean value that indicates whether the managed object will be deleted during the next save.\nvar isFault: Bool\nA Boolean value that indicates whether the managed object is a fault.\nfunc hasFault(forRelationshipNamed: String) -> Bool\nReturns a Boolean value that indicates whether the relationship for a given key is a fault.\nvar hasPersistentChangedValues: Bool\nA Boolean value that indicates whether the managed object has persistent changes."
  },
  {
    "title": "isInserted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506281-isinserted",
    "html": "Discussion\n\ntrue if the receiver has been inserted in a managed object context, otherwise false. If the receiver is a fault, accessing this property does not cause it to fire.\n\nSee Also\nGetting State Information\nvar managedObjectContext: NSManagedObjectContext?\nThe managed object context with which the managed object is registered.\nvar hasChanges: Bool\nA Boolean value that indicates whether the managed object has been inserted, has been deleted, or has unsaved changes.\nvar isUpdated: Bool\nA Boolean value that indicates whether the managed object has unsaved changes.\nvar isDeleted: Bool\nA Boolean value that indicates whether the managed object will be deleted during the next save.\nvar isFault: Bool\nA Boolean value that indicates whether the managed object is a fault.\nvar faultingState: Int\nThe faulting state of the managed object.\nfunc hasFault(forRelationshipNamed: String) -> Bool\nReturns a Boolean value that indicates whether the relationship for a given key is a fault.\nvar hasPersistentChangedValues: Bool\nA Boolean value that indicates whether the managed object has persistent changes."
  },
  {
    "title": "hasChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506654-haschanges",
    "html": "Discussion\n\ntrue if the receiver has been inserted, has been deleted, or has unsaved changes, otherwise false. The result is the equivalent of OR-ing the values of isInserted, isDeleted, and isUpdated.\n\nSee Also\nGetting State Information\nvar managedObjectContext: NSManagedObjectContext?\nThe managed object context with which the managed object is registered.\nvar isInserted: Bool\nA Boolean value that indicates whether the managed object has been inserted in a managed object context.\nvar isUpdated: Bool\nA Boolean value that indicates whether the managed object has unsaved changes.\nvar isDeleted: Bool\nA Boolean value that indicates whether the managed object will be deleted during the next save.\nvar isFault: Bool\nA Boolean value that indicates whether the managed object is a fault.\nvar faultingState: Int\nThe faulting state of the managed object.\nfunc hasFault(forRelationshipNamed: String) -> Bool\nReturns a Boolean value that indicates whether the relationship for a given key is a fault.\nvar hasPersistentChangedValues: Bool\nA Boolean value that indicates whether the managed object has persistent changes."
  },
  {
    "title": "managedObjectContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506677-managedobjectcontext",
    "html": "Discussion\n\nMay be nil if the receiver has been deleted from its context.\n\nIf the receiver is a fault, accessing this property does not cause it to fire.\n\nSee Also\nGetting State Information\nvar hasChanges: Bool\nA Boolean value that indicates whether the managed object has been inserted, has been deleted, or has unsaved changes.\nvar isInserted: Bool\nA Boolean value that indicates whether the managed object has been inserted in a managed object context.\nvar isUpdated: Bool\nA Boolean value that indicates whether the managed object has unsaved changes.\nvar isDeleted: Bool\nA Boolean value that indicates whether the managed object will be deleted during the next save.\nvar isFault: Bool\nA Boolean value that indicates whether the managed object is a fault.\nvar faultingState: Int\nThe faulting state of the managed object.\nfunc hasFault(forRelationshipNamed: String) -> Bool\nReturns a Boolean value that indicates whether the relationship for a given key is a fault.\nvar hasPersistentChangedValues: Bool\nA Boolean value that indicates whether the managed object has persistent changes."
  },
  {
    "title": "uriRepresentation() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectid/1391689-urirepresentation",
    "html": "Return Value\n\nAn NSURL object containing a URI that provides an archiveable reference to the object which the receiver represents.\n\nDiscussion\n\nIf the corresponding managed object has not yet been saved, the object ID (and hence URI) is a temporary value that will change when the corresponding managed object is saved.\n\nSee Also\nGetting Managed Object ID Information\nvar entity: NSEntityDescription\nThe entity description associated with the object ID.\nvar isTemporaryID: Bool\nA Boolean value that indicates whether the object ID is temporary.\nvar persistentStore: NSPersistentStore?\nThe persistent store that fetched the object for the object ID.\nRelated Documentation\nfunc managedObjectID(forURIRepresentation: URL) -> NSManagedObjectID?\nReturns the object identifier for the specified URI representation.\nfunc object(with: NSManagedObjectID) -> NSManagedObject\nReturns either an existing object from the context or a fault that represents that object."
  },
  {
    "title": "resultType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainereventrequest/3618819-resulttype",
    "html": "See Also\nFetching Events\nclass func fetchEvents(after: Date) -> Self\nCreates a fetch request for events after a specified date from a persistent CloudKit container.\nclass func fetchEvents(after: NSPersistentCloudKitContainer.Event?) -> Self\nCreates a fetch request for events that occur after a specified event from a persistent CloudKit container.\nclass func fetchEvents(matchingFetch: NSFetchRequest<NSFetchRequestResult>) -> Self\nCreates a fetch request for events that match a specified fetch request from a persistent CloudKit container.\nclass func fetchForEvents() -> NSFetchRequest<NSFetchRequestResult>\nCreates a fetch request for all events in a persistent CloudKit container."
  },
  {
    "title": "result | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainereventresult/3618821-result",
    "html": "See Also\nHandling Event Results\nvar resultType: NSPersistentCloudKitContainerEventResult.ResultType\nThe type of result that the CloudKit container event fetch request returns.\nenum NSPersistentCloudKitContainerEventResult.ResultType\nThe types of results from a persistent CloudKit container event fetch request."
  },
  {
    "title": "dryRun | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainerschemainitializationoptions/3343550-dryrun",
    "html": "Discussion\n\nThis option is useful for unit testing to ensure your managed object model is valid for use with CloudKit."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainerschemainitializationoptions/3344723-init",
    "html": "Parameters\nrawValue\n\nThe raw unsigned integer value."
  },
  {
    "title": "deleteHistory(before:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorychangerequest/2892338-deletehistory",
    "html": "Parameters\ndate\n\nThe date used to define the end of the delete history request.\n\nReturn Value\n\nA delete history change request (NSPersistentHistoryChangeRequest) using an end date boundary.\n\nSee Also\nPurging History\nclass func deleteHistory(before: NSPersistentHistoryToken?) -> Self\nPurges history older than that defined by a given token.\nclass func deleteHistory(before: NSPersistentHistoryTransaction?) -> Self\nPurges history older than a given transaction."
  },
  {
    "title": "fetchHistory(withFetch:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorychangerequest/3240592-fetchhistory",
    "html": "Parameters\nfetchRequest\n\nThe fetch request that defines the history bounds.\n\nReturn Value\n\nA persistent history fetch request (NSPersistentHistoryChangeRequest) built using an existing fetch request.\n\nSee Also\nFetching History\nclass func fetchHistory(after: Date) -> Self\nRetrieves history since a given date.\nclass func fetchHistory(after: NSPersistentHistoryToken?) -> Self\nRetrieves the request history after a given token.\nclass func fetchHistory(after: NSPersistentHistoryTransaction?) -> Self\nRetrieves history since a given transaction."
  },
  {
    "title": "resultType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorychangerequest/2892341-resulttype",
    "html": "Discussion\n\nThis value defaults to NSPersistentHistoryResultType.transactionsAndChanges.\n\nSee Also\nConfiguring the Request\nvar fetchRequest: NSFetchRequest<NSFetchRequestResult>?\nThe specified fetch request, when retrieving history."
  },
  {
    "title": "controller(_:didChangeContentWith:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultscontrollerdelegate/3235742-controller",
    "html": "Discussion\n\nTo apply the changes, call applySnapshot(_:animatingDifferences:) on the collection or table view’s data source.\n\nIf this method is implemented, no other delegate methods are invoked.\n\nSee Also\nResponding to Changes\nfunc controller(NSFetchedResultsController<NSFetchRequestResult>, didChangeContentWith: CollectionDifference<NSManagedObjectID>)\nNotifies the receiver about changes to the content in the fetched results controller, by using a collection difference.\nfunc controllerWillChangeContent(NSFetchedResultsController<NSFetchRequestResult>)\nNotifies the receiver that the fetched results controller is about to start processing of one or more changes due to an add, remove, move, or update.\nfunc controller(NSFetchedResultsController<NSFetchRequestResult>, didChange: Any, at: IndexPath?, for: NSFetchedResultsChangeType, newIndexPath: IndexPath?)\nNotifies the receiver that a fetched object has been changed due to an add, remove, move, or update.\nfunc controller(NSFetchedResultsController<NSFetchRequestResult>, didChange: NSFetchedResultsSectionInfo, atSectionIndex: Int, for: NSFetchedResultsChangeType)\nNotifies the receiver of the addition or removal of a section.\nfunc controllerDidChangeContent(NSFetchedResultsController<NSFetchRequestResult>)\nNotifies the receiver that the fetched results controller has completed processing of one or more changes due to an add, remove, move, or update."
  },
  {
    "title": "controller(_:didChangeContentWith:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultscontrollerdelegate/3235741-controller",
    "html": "Discussion\n\nThis method is only invoked if the controller’s sectionNameKeyPath property is nil and controller(_:didChangeContentWith:) is not implemented.\n\nIf this method is implemented, no other delegate methods are invoked.\n\nSee Also\nResponding to Changes\nfunc controller(NSFetchedResultsController<NSFetchRequestResult>, didChangeContentWith: NSDiffableDataSourceSnapshot)\nNotifies the receiver about changes to the content in the fetched results controller, by using a diffable data source snapshot.\nfunc controllerWillChangeContent(NSFetchedResultsController<NSFetchRequestResult>)\nNotifies the receiver that the fetched results controller is about to start processing of one or more changes due to an add, remove, move, or update.\nfunc controller(NSFetchedResultsController<NSFetchRequestResult>, didChange: Any, at: IndexPath?, for: NSFetchedResultsChangeType, newIndexPath: IndexPath?)\nNotifies the receiver that a fetched object has been changed due to an add, remove, move, or update.\nfunc controller(NSFetchedResultsController<NSFetchRequestResult>, didChange: NSFetchedResultsSectionInfo, atSectionIndex: Int, for: NSFetchedResultsChangeType)\nNotifies the receiver of the addition or removal of a section.\nfunc controllerDidChangeContent(NSFetchedResultsController<NSFetchRequestResult>)\nNotifies the receiver that the fetched results controller has completed processing of one or more changes due to an add, remove, move, or update."
  },
  {
    "title": "fetchRequest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorychangerequest/3240593-fetchrequest",
    "html": "See Also\nConfiguring the Request\nvar resultType: NSPersistentHistoryResultType\nThe type of result that this request returns."
  },
  {
    "title": "fetchRequest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorytransaction/3240596-fetchrequest",
    "html": "See Also\nCustomizing History Fetch Requests\nclass var entityDescription: NSEntityDescription?\nThe entity description of the persistent history transaction entity.\nclass func entityDescription(with: NSManagedObjectContext) -> NSEntityDescription?\nRequests an entity description using the provided context for the managed object type affected by the transaction."
  },
  {
    "title": "entityDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorytransaction/3240594-entitydescription",
    "html": "Discussion\n\nThe entity description of NSPersistentHistoryTransaction lists the properties of the persistent history change. This can be useful for filtering your request.\n\nSee Also\nCustomizing History Fetch Requests\nclass var fetchRequest: NSFetchRequest<NSFetchRequestResult>?\nA fetch request that has the persistent history transaction as the entity.\nclass func entityDescription(with: NSManagedObjectContext) -> NSEntityDescription?\nRequests an entity description using the provided context for the managed object type affected by the transaction."
  },
  {
    "title": "transactionNumber | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorytransaction/2894945-transactionnumber",
    "html": "See Also\nInspecting Transaction Details\nvar author: String?\nA granular description of the context that made the persistent history change, if available.\nvar bundleID: String\nThe originating bundle’s identifier.\nvar changes: [NSPersistentHistoryChange]?\nThe array of persistent history changes.\nvar contextName: String?\nThe originating context’s name.\nvar processID: String\nThe originating process’s identifier.\nvar storeID: String\nThe originating store’s identifier.\nvar timestamp: Date\nThe date of the persistent history change.\nvar token: NSPersistentHistoryToken\nThe token that represents this transaction in the persistent history."
  },
  {
    "title": "NSAttributeDescription.AttributeType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/attributetype",
    "html": "Overview\n\nCore Data attribute types explicitly distinguish between bit size. This allows their values to exist independent of the persistent store that contains them. A scalar option is available for a number of attribute types, in some cases by default.\n\nAttribute type\n\n\t\n\nType\n\n\t\n\nScalar type\n\n\t\n\nScalar by default\n\n\n\n\nInteger 16\n\n\t\n\nNSNumber\n\n\t\n\nInt16\n\n\t\n\nYes\n\n\n\n\nInteger 32\n\n\t\n\nNSNumber\n\n\t\n\nInt32\n\n\t\n\nYes\n\n\n\n\nInteger 64\n\n\t\n\nNSNumber\n\n\t\n\nInt64\n\n\t\n\nYes\n\n\n\n\nDouble\n\n\t\n\nNSNumber\n\n\t\n\nDouble\n\n\t\n\nYes\n\n\n\n\nFloat\n\n\t\n\nNSNumber\n\n\t\n\nFloat\n\n\t\n\nYes\n\n\n\n\nBoolean\n\n\t\n\nNSNumber\n\n\t\n\nBool\n\n\t\n\nYes\n\n\n\n\nDate\n\n\t\n\nNSDate\n\n\t\n\nTimeInterval\n\n\t\n\nNo\n\n\n\n\nDecimal\n\n\t\n\nNSDecimalNumber\n\n\t\n\nNSDecimalNumber\n\n\t\n\nNo\n\n\n\n\nUUID\n\n\t\n\nUUID\n\n\t\n\nUUID\n\n\t\n\nNo\n\n\n\n\nURI\n\n\t\n\nURL\n\n\t\n\n—\n\n\t\n\n—\n\n\n\n\nString\n\n\t\n\nString\n\n\t\n\n—\n\n\t\n\n—\n\n\n\n\nBinary data\n\n\t\n\nData\n\n\t\n\n—\n\n\t\n\n—\n\n\n\n\nTransformable\n\n\t\n\nNSObject\n\n\t\n\n—\n\n\t\n\n—\n\n\n\n\nComposite\n\n\t\n\n—\n\n\t\n\n—\n\n\t\n\n—\n\n\n\n\nUndefined\n\n\t\n\n—\n\n\t\n\n—\n\n\t\n\n—\n\nNote\n\nIf your application uses BLOBs (binary large objects), such as image and sound files, you can choose to store their data in a location that’s external to the persistent store.\n\nTopics\nAttribute Types\nstatic let binaryData: NSAttributeDescription.AttributeType\nAn attribute that stores binary data.\nstatic let boolean: NSAttributeDescription.AttributeType\nAn attribute that stores a Boolean value.\nstatic let composite: NSAttributeDescription.AttributeType\nAn attribute that derives its value by composing other attributes.\nstatic let date: NSAttributeDescription.AttributeType\nAn attribute that stores a date.\nstatic let decimal: NSAttributeDescription.AttributeType\nAn attribute that stores a decimal value.\nstatic let double: NSAttributeDescription.AttributeType\nAn attribute that stores a double value.\nstatic let float: NSAttributeDescription.AttributeType\nAn attribute that stores a float value.\nstatic let integer16: NSAttributeDescription.AttributeType\nAn attribute that stores a 16-bit signed integer value.\nstatic let integer32: NSAttributeDescription.AttributeType\nAn attribute that stores a 32-bit signed integer value.\nstatic let integer64: NSAttributeDescription.AttributeType\nAn attribute that stores a 64-bit signed integer value.\nstatic let objectID: NSAttributeDescription.AttributeType\nAn attribute that stores a managed object’s ID.\nstatic let string: NSAttributeDescription.AttributeType\nAn attribute that stores a string.\nstatic let transformable: NSAttributeDescription.AttributeType\nAn attribute that uses a value transformer to derive its value.\nstatic let undefined: NSAttributeDescription.AttributeType\nAn attribute that doesn’t have an explicit type.\nstatic let uri: NSAttributeDescription.AttributeType\nAn attribute that stores a uniform resource identifier.\nstatic let uuid: NSAttributeDescription.AttributeType\nAn attribute that stores a universally unique identifier.\nCreating an Attribute Type\ninit(rawValue: NSAttributeType)\nCreates an attribute type using the specified raw value.\nGetting an Attribute Type’s Raw Value\nvar rawValue: NSAttributeType\nThe attribute type’s cardinal value.\ntypealias NSAttributeDescription.AttributeType.RawValue\nThe type the conforming type uses to represent its values.\nHashing an Attribute Type\nvar hashValue: Int\nThe attribute type’s computed hash value.\nfunc hash(into: inout Hasher)\nHashes the components of the attribute type using the provided hasher.\nComparing Attribute Types\nstatic func != (NSAttributeDescription.AttributeType, NSAttributeDescription.AttributeType) -> Bool\nReturns a Boolean value that indicates whether two attribute types are unequal.\nRelationships\nConforms To\nHashable\nRawRepresentable\nSee Also\nManaging the type\nvar attributeValueClassName: String?\nThe class name that represents the attribute’s value.\nvar type: NSAttributeDescription.AttributeType\nThe attribute’s type."
  },
  {
    "title": "defaultValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/1498302-defaultvalue",
    "html": "Discussion\n\nDefault values are retained by a managed object model, not copied. This means that attribute values do not have to implement the NSCopying protocol, however it also means that you should not modify any objects after they have been set as default values.\n\nSpecial Considerations\n\nSetting the default value raises an exception if the receiver’s model has been used by an object graph manager.\n\nSee Also\nConfiguring the behavior\nvar allowsCloudEncryption: Bool\nA Boolean value that determines whether to encrypt the attribute’s value.\nvar allowsExternalBinaryDataStorage: Bool\nA Boolean value that indicates whether the attribute allows external binary storage.\nvar preservesValueInHistoryOnDeletion: Bool\nA Boolean value that indicates whether the attribute records its value in the persistent history transaction for a managed object’s deletion.\nvar valueTransformerName: String?\nThe name of the transformer to use for the attribute value."
  },
  {
    "title": "entity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspropertydescription/1506745-entity",
    "html": "See Also\nAccessing Features of a Property\nvar isIndexed: Bool\nA Boolean value that indicates whether the receiver should be indexed for searching.\nDeprecated\nvar isOptional: Bool\nA Boolean value that indicates whether the receiver is optional.\nvar isTransient: Bool\nA Boolean value that indicates whether the receiver is transient.\nvar name: String\nThe name of the receiver.\nvar userInfo: [AnyHashable : Any]?\nThe user info dictionary of the receiver.\nRelated Documentation\nCore Data Programming Guide\nvar properties: [NSPropertyDescription]\nAn array containing the properties of the receiver."
  },
  {
    "title": "preservesValueInHistoryOnDeletion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/3180042-preservesvalueinhistoryondeletio",
    "html": "See Also\nConfiguring the behavior\nvar allowsCloudEncryption: Bool\nA Boolean value that determines whether to encrypt the attribute’s value.\nvar allowsExternalBinaryDataStorage: Bool\nA Boolean value that indicates whether the attribute allows external binary storage.\nvar defaultValue: Any?\nThe default value of the attribute.\nvar valueTransformerName: String?\nThe name of the transformer to use for the attribute value."
  },
  {
    "title": "allowsExternalBinaryDataStorage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/1498295-allowsexternalbinarydatastorage",
    "html": "Discussion\n\ntrue if the attribute allows external binary storage, otherwise false. If this value is true, the corresponding attribute may be stored in a file external to the persistent store itself.\n\nSee Also\nConfiguring the behavior\nvar allowsCloudEncryption: Bool\nA Boolean value that determines whether to encrypt the attribute’s value.\nvar defaultValue: Any?\nThe default value of the attribute.\nvar preservesValueInHistoryOnDeletion: Bool\nA Boolean value that indicates whether the attribute records its value in the persistent history transaction for a managed object’s deletion.\nvar valueTransformerName: String?\nThe name of the transformer to use for the attribute value."
  },
  {
    "title": "NSAttributeType.floatAttributeType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributetype/floatattributetype",
    "html": "See Also\nAttribute types\ncase binaryDataAttributeType\nAn attribute that stores binary data.\ncase booleanAttributeType\nAn attribute that stores a Boolean value.\ncase compositeAttributeType\nAn attribute that derives its value by composing other attributes.\ncase dateAttributeType\nAn attribute that stores a date.\ncase decimalAttributeType\nAn attribute that stores a decimal value.\ncase doubleAttributeType\nAn attribute that stores a double value.\ncase integer16AttributeType\nAn attribute that stores a 16-bit signed integer value.\ncase integer32AttributeType\nAn attribute that stores a 32-bit signed integer value.\ncase integer64AttributeType\nAn attribute that stores a 64-bit signed integer value.\ncase objectIDAttributeType\nAn attribute that stores a managed object’s ID.\ncase stringAttributeType\nAn attribute that stores a string.\ncase transformableAttributeType\nAn attribute that uses a value transformer to derive its value.\ncase undefinedAttributeType\nAn attribute that doesn’t have an explicit type.\ncase URIAttributeType\nAn attribute that stores a uniform resource identifier.\ncase UUIDAttributeType\nAn attribute that stores a universally unique identifier."
  },
  {
    "title": "setObservationInfo(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506535-setobservationinfo",
    "html": "Parameters\nvalue\n\nThe new observation info for the receiver.\n\nDiscussion\n\nFor more about observation information, see Key-Value Observing Programming Guide.\n\nSee Also\nSupporting Key-Value Observing\nfunc didAccessValue(forKey: String?)\nProvides support for key-value observing access notification.\nfunc observationInfo() -> UnsafeMutableRawPointer?\nReturns the observation info of the managed object.\nfunc willAccessValue(forKey: String?)\nProvides support for key-value observing access notification.\nfunc didChangeValue(forKey: String)\nProvides an opportunity to respond when a value of a given property has changed.\nfunc didChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\nProvides an opportunity to respond when a change was made to a specified to-many relationship.\nfunc willChangeValue(forKey: String)\nProvides an opportunity to respond when a value of a given property is about to change.\nfunc willChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\nProvides an opportunity to respond when a change is about to be made to a specified to-many relationship."
  },
  {
    "title": "NSValidationValueErrorKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsvalidationvalueerrorkey",
    "html": "See Also\nManaging Data Validation\nfunc validateValue(AutoreleasingUnsafeMutablePointer<AnyObject?>, forKey: String)\nValidates a property value for a given key.\nfunc validateForDelete()\nDetermines whether the managed object can be deleted in its current state.\nfunc validateForInsert()\nDetermines whether the managed object can be inserted in its current state.\nfunc validateForUpdate()\nDetermines whether the managed object's current state is valid.\nValidation error codes\nError codes relating to the validation of managed objects.\nlet NSValidationKeyErrorKey: String\nThe error key for the attribute that failed to validate.\nlet NSValidationObjectErrorKey: String\nThe error key for the object that failed to validate.\nlet NSValidationPredicateErrorKey: String\nThe error key for the predicate that failed to validate."
  },
  {
    "title": "NSValidationPredicateErrorKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsvalidationpredicateerrorkey",
    "html": "See Also\nManaging Data Validation\nfunc validateValue(AutoreleasingUnsafeMutablePointer<AnyObject?>, forKey: String)\nValidates a property value for a given key.\nfunc validateForDelete()\nDetermines whether the managed object can be deleted in its current state.\nfunc validateForInsert()\nDetermines whether the managed object can be inserted in its current state.\nfunc validateForUpdate()\nDetermines whether the managed object's current state is valid.\nValidation error codes\nError codes relating to the validation of managed objects.\nlet NSValidationKeyErrorKey: String\nThe error key for the attribute that failed to validate.\nlet NSValidationObjectErrorKey: String\nThe error key for the object that failed to validate.\nlet NSValidationValueErrorKey: String\nThe error key for the value that failed to validate."
  },
  {
    "title": "didAccessValue(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506865-didaccessvalue",
    "html": "Parameters\nkey\n\nThe name of one of the receiver's properties.\n\nDiscussion\n\nTogether with willAccessValue(forKey:), this method is used to fire faults, to maintain inverse relationships, and so on. Each read access must be wrapped in this method pair (in the same way that each write access must be wrapped in the willChangeValueForKey:/didChangeValueForKey: method pair). In the default implementation of NSManagedObject these methods are invoked for you automatically. If, say, you create a custom subclass that uses explicit instance variables, you must invoke them yourself, as in the following example.\n\n- (NSString *)firstName\n{\n    [self willAccessValueForKey:@\"firstName\"];\n    NSString *rtn = firstName;\n    [self didAccessValueForKey:@\"firstName\"];\n    return rtn;\n}\n\nSee Also\nSupporting Key-Value Observing\nfunc observationInfo() -> UnsafeMutableRawPointer?\nReturns the observation info of the managed object.\nfunc setObservationInfo(UnsafeMutableRawPointer?)\nSets the observation info of the managed object.\nfunc willAccessValue(forKey: String?)\nProvides support for key-value observing access notification.\nfunc didChangeValue(forKey: String)\nProvides an opportunity to respond when a value of a given property has changed.\nfunc didChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\nProvides an opportunity to respond when a change was made to a specified to-many relationship.\nfunc willChangeValue(forKey: String)\nProvides an opportunity to respond when a value of a given property is about to change.\nfunc willChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\nProvides an opportunity to respond when a change is about to be made to a specified to-many relationship."
  },
  {
    "title": "observationInfo() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506210-observationinfo",
    "html": "Return Value\n\nThe observation info of the receiver.\n\nDiscussion\n\nFor more about key-value observation, see Key-Value Observing Programming Guide.\n\nImportant\n\nYou must not override this method.\n\nSee Also\nSupporting Key-Value Observing\nfunc didAccessValue(forKey: String?)\nProvides support for key-value observing access notification.\nfunc setObservationInfo(UnsafeMutableRawPointer?)\nSets the observation info of the managed object.\nfunc willAccessValue(forKey: String?)\nProvides support for key-value observing access notification.\nfunc didChangeValue(forKey: String)\nProvides an opportunity to respond when a value of a given property has changed.\nfunc didChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\nProvides an opportunity to respond when a change was made to a specified to-many relationship.\nfunc willChangeValue(forKey: String)\nProvides an opportunity to respond when a value of a given property is about to change.\nfunc willChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\nProvides an opportunity to respond when a change is about to be made to a specified to-many relationship."
  },
  {
    "title": "objectWillChange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/3369526-objectwillchange",
    "html": "Relationships\nFrom Protocol\nObservableObject\nSee Also\nManaging Change Events\nclass var contextShouldIgnoreUnmodeledPropertyChanges: Bool\nA Boolean value that indicates whether to mark instances of the class as having changes when an unmodeled property changes.\nfunc awakeFromFetch()\nProvides an opportunity to add code into the life cycle of the managed object when fufilling it from a fault.\nfunc awakeFromInsert()\nProvides an opportunity to add code into the life cycle of the managed object when initially creating it.\nfunc awake(fromSnapshotEvents: NSSnapshotEventType)\nProvides an opportunity to add code into the life cycle of the managed object when fulfilling it from a snapshot.\nfunc changedValues() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc changedValuesForCurrentEvent() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc committedValues(forKeys: [String]?) -> [String : Any]\nReturns a dictionary of the most recent fetched or saved values of the managed object for the properties of the specified keys.\nfunc prepareForDeletion()\nProvides an opportunity to add code into the life cycle of the managed object before deleting it.\nfunc willSave()\nProvides an opportunity to add code into the life cycle of the managed object before saving it.\nfunc didSave()\nProvides an opportunity to add code into the life cycle of the managed object after the managed object’s context completes a save operation.\nfunc willTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object before converting it to a fault.\nfunc didTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object after converting it to a fault.\nclass func fetchRequest() -> NSFetchRequest<NSFetchRequestResult>\nReturns an initialized fetch request with the entity this subclass represents.\ntypealias NSManagedObject.ObjectWillChangePublisher\nAn object that publishes changes from observable objects."
  },
  {
    "title": "fetchRequest() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1640605-fetchrequest",
    "html": "Discussion\n\nThis method is only legal to call on subclasses of NSManagedObject that represent a single entity in the model.\n\nSee Also\nManaging Change Events\nclass var contextShouldIgnoreUnmodeledPropertyChanges: Bool\nA Boolean value that indicates whether to mark instances of the class as having changes when an unmodeled property changes.\nfunc awakeFromFetch()\nProvides an opportunity to add code into the life cycle of the managed object when fufilling it from a fault.\nfunc awakeFromInsert()\nProvides an opportunity to add code into the life cycle of the managed object when initially creating it.\nfunc awake(fromSnapshotEvents: NSSnapshotEventType)\nProvides an opportunity to add code into the life cycle of the managed object when fulfilling it from a snapshot.\nfunc changedValues() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc changedValuesForCurrentEvent() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc committedValues(forKeys: [String]?) -> [String : Any]\nReturns a dictionary of the most recent fetched or saved values of the managed object for the properties of the specified keys.\nfunc prepareForDeletion()\nProvides an opportunity to add code into the life cycle of the managed object before deleting it.\nfunc willSave()\nProvides an opportunity to add code into the life cycle of the managed object before saving it.\nfunc didSave()\nProvides an opportunity to add code into the life cycle of the managed object after the managed object’s context completes a save operation.\nfunc willTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object before converting it to a fault.\nfunc didTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object after converting it to a fault.\nvar objectWillChange: ObservableObjectPublisher\nA publisher that emits before the object changes.\ntypealias NSManagedObject.ObjectWillChangePublisher\nAn object that publishes changes from observable objects."
  },
  {
    "title": "rollback() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506942-rollback",
    "html": "Discussion\n\nThis method does not refetch data from the persistent store or stores.\n\nSee Also\nUndoing changes\nvar undoManager: UndoManager?\nThe object that provides undo support for the context.\nfunc undo()\nSends an undo message to the context’s undo manager, asking it to reverse the latest uncommitted changes applied to objects in the object graph.\nfunc redo()\nSends a redo message to the context’s undo manager, asking it to reverse the latest undo operation applied to objects in the object graph.\nfunc reset()\nReturns the context to its base state.\nRelated Documentation\nfunc processPendingChanges()\nForces the context to process changes to the object graph.\nvar stalenessInterval: TimeInterval\nThe maximum length of time that may have elapsed since the store previously fetched data before fulfilling a fault issues a new fetch."
  },
  {
    "title": "hasChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506954-haschanges",
    "html": "Discussion\n\nIf you are observing this property using key-value observing (KVO) you should not touch the context or its objects within your implementation of observeValue(forKeyPath:of:change:context:) for this notification. (This is because of the intricacy of the locations of the KVO notifications—for example, the context may be in the middle of an undo operation, or repairing a merge conflict.) If you need to send messages to the context or change any of its managed objects as a result of a change to the value of hasChanges, you must do so after the call stack unwinds (typically using perform(_:with:afterDelay:) or a similar method).\n\nSpecial Considerations\n\nIn macOS 10.6 and later, this property is Key-value observing compliant.\n\nSee Also\nManaging unsaved and uncommitted changes\nfunc save()\nAttempts to commit unsaved changes to registered objects to the context’s parent store."
  },
  {
    "title": "didMergeChangesObjectIDsNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/3619551-didmergechangesobjectidsnotifica",
    "html": "See Also\nManaging notifications\nstatic let didChangeObjectsNotification: Notification.Name\nA notification that posts when the context completes a save.\nstatic let NSManagedObjectContextObjectsDidChange: NSNotification.Name\nA notification of changes made to managed objects associated with this context.\nstatic let didSaveObjectsNotification: Notification.Name\nA notification that posts when the context completes a save.\nstatic let NSManagedObjectContextDidSave: NSNotification.Name\nA notification that the context completed a save.\nstatic let willSaveObjectsNotification: Notification.Name\nA notification that the context is about to save.\nstatic let NSManagedObjectContextWillSave: NSNotification.Name\nA notification that the context is about to save.\nlet NSInsertedObjectsKey: String\nA key for the set of objects that were inserted into the context.\nlet NSUpdatedObjectsKey: String\nA key for the set of objects that were updated.\nlet NSDeletedObjectsKey: String\nA key for the set of objects that were marked for deletion during the previous event.\nlet NSRefreshedObjectsKey: String\nA key for the set of objects that were refreshed but were not dirtied in the scope of this context.\nlet NSInvalidatedObjectsKey: String\nA key for the set of objects that were invalidated.\nlet NSInvalidatedAllObjectsKey: String\nA key that specifies that all objects in the context have been invalidated.\nstatic let didSaveObjectIDsNotification: Notification.Name\nA notification that posts when the context saves changes.\nenum NSManagedObjectContext.NotificationKey\nKeys to access details in user info dictionaries of managed object context notifications."
  },
  {
    "title": "NSUpdatedObjectsKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsupdatedobjectskey",
    "html": "See Also\nManaging notifications\nstatic let didChangeObjectsNotification: Notification.Name\nA notification that posts when the context completes a save.\nstatic let NSManagedObjectContextObjectsDidChange: NSNotification.Name\nA notification of changes made to managed objects associated with this context.\nstatic let didSaveObjectsNotification: Notification.Name\nA notification that posts when the context completes a save.\nstatic let NSManagedObjectContextDidSave: NSNotification.Name\nA notification that the context completed a save.\nstatic let willSaveObjectsNotification: Notification.Name\nA notification that the context is about to save.\nstatic let NSManagedObjectContextWillSave: NSNotification.Name\nA notification that the context is about to save.\nlet NSInsertedObjectsKey: String\nA key for the set of objects that were inserted into the context.\nlet NSDeletedObjectsKey: String\nA key for the set of objects that were marked for deletion during the previous event.\nlet NSRefreshedObjectsKey: String\nA key for the set of objects that were refreshed but were not dirtied in the scope of this context.\nlet NSInvalidatedObjectsKey: String\nA key for the set of objects that were invalidated.\nlet NSInvalidatedAllObjectsKey: String\nA key that specifies that all objects in the context have been invalidated.\nstatic let didMergeChangesObjectIDsNotification: Notification.Name\nA notification that a posts when changes to managed objects with the specified object identifiers merge into the context.\nstatic let didSaveObjectIDsNotification: Notification.Name\nA notification that posts when the context saves changes.\nenum NSManagedObjectContext.NotificationKey\nKeys to access details in user info dictionaries of managed object context notifications."
  },
  {
    "title": "NSPersistentStoreStagedMigrationManagerOptionKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorestagedmigrationmanageroptionkey",
    "html": "See Also\nMigration staging\nclass NSStagedMigrationManager\nAn object that handles the migration event loop and provides access to the migrating persistent store."
  },
  {
    "title": "operationError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoreasynchronousresult/1404904-operationerror",
    "html": "See Also\nInspecting the Result\nvar managedObjectContext: NSManagedObjectContext\nThe managed object context for the result.\nvar progress: Progress?\nAn object that reports progress for the asynchronous fetch request."
  },
  {
    "title": "attributeValueClassName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/1498309-attributevalueclassname",
    "html": "See Also\nManaging the type\nvar type: NSAttributeDescription.AttributeType\nThe attribute’s type.\nstruct NSAttributeDescription.AttributeType\nThe types of attributes that Core Data supports."
  },
  {
    "title": "controller(_:didChange:at:for:newIndexPath:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultscontrollerdelegate/1622296-controller",
    "html": "Parameters\ncontroller\n\nThe fetched results controller that sent the message.\n\nanObject\n\nThe object in controller’s fetched results that changed.\n\nindexPath\n\nThe index path of the changed object (this value is nil for insertions).\n\ntype\n\nThe type of change. For valid values see NSFetchedResultsChangeType.\n\nnewIndexPath\n\nThe destination path for the object for insertions or moves (this value is nil for a deletion).\n\nDiscussion\n\nThe fetched results controller reports changes to its section before changes to the fetch result objects.\n\nChanges are reported with the following heuristics:\n\nOn add and remove operations, only the added/removed object is reported.\n\nIt’s assumed that all objects that come after the affected object are also moved, but these moves are not reported. \n\nA move is reported when the changed attribute on the object is one of the sort descriptors used in the fetch request.\n\nAn update of the object is assumed in this case, but no separate update message is sent to the delegate.\n\nAn update is reported when an object’s state changes, but the changed attributes aren’t part of the sort keys. \n\nSpecial Considerations\n\nThis method may be invoked many times during an update event (for example, if you are importing data on a background thread and adding them to the context in a batch). You should consider carefully whether you want to update the table view on receipt of each message.\n\nSee Also\nResponding to Changes\nfunc controller(NSFetchedResultsController<NSFetchRequestResult>, didChangeContentWith: NSDiffableDataSourceSnapshot)\nNotifies the receiver about changes to the content in the fetched results controller, by using a diffable data source snapshot.\nfunc controller(NSFetchedResultsController<NSFetchRequestResult>, didChangeContentWith: CollectionDifference<NSManagedObjectID>)\nNotifies the receiver about changes to the content in the fetched results controller, by using a collection difference.\nfunc controllerWillChangeContent(NSFetchedResultsController<NSFetchRequestResult>)\nNotifies the receiver that the fetched results controller is about to start processing of one or more changes due to an add, remove, move, or update.\nfunc controller(NSFetchedResultsController<NSFetchRequestResult>, didChange: NSFetchedResultsSectionInfo, atSectionIndex: Int, for: NSFetchedResultsChangeType)\nNotifies the receiver of the addition or removal of a section.\nfunc controllerDidChangeContent(NSFetchedResultsController<NSFetchRequestResult>)\nNotifies the receiver that the fetched results controller has completed processing of one or more changes due to an add, remove, move, or update."
  },
  {
    "title": "versionHash | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription/1425133-versionhash",
    "html": "Discussion\n\nThe version hash is used to uniquely identify an entity based on the collection and configuration of properties for the entity. The version hash uses only values which affect the persistence of data and the user-defined versionHashModifier value. (The values which affect persistence are: the name of the entity, the version hash of the superentity (if present), if the entity is abstract, and all of the version hashes for the properties.) This value is stored as part of the version information in the metadata for stores which use this entity, as well as a definition of an entity involved in an NSEntityMapping object.\n\nSee Also\nManaging versioning\nvar versionHashModifier: String?\nThe version hash modifier for the receiver."
  },
  {
    "title": "entity(forEntityName:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription/1425111-entity",
    "html": "Parameters\nentityName\n\nThe name of an entity.\n\ncontext\n\nThe managed object context to use. Must not be nil.\n\nReturn Value\n\nThe entity with the specified name from the managed object model associated with context’s persistent store coordinator.\n\nDiscussion\n\nRaises internalInconsistencyException if context is nil.\n\nThis method is functionally equivalent to the following code example.\n\nNSManagedObjectModel *managedObjectModel = [[context persistentStoreCoordinator] managedObjectModel];\nNSEntityDescription *entity = [[managedObjectModel entitiesByName] objectForKey:entityName];\nreturn entity;\n\nSee Also\nRelated Documentation\nvar entitiesByName: [String : NSEntityDescription]\nThe entities of the model, keyed by name."
  },
  {
    "title": "insertNewObject(forEntityName:into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription/1425093-insertnewobject",
    "html": "Parameters\nentityName\n\nThe name of an entity.\n\ncontext\n\nThe managed object context to use.\n\nReturn Value\n\nA new, autoreleased, fully configured instance of the class for the entity named entityName. The instance has its entity description set and is inserted it into context.\n\nDiscussion\n\nThis method makes it easy for you to create instances of a given entity without worrying about the details of managed object creation. The method is conceptually similar to the following code example.\n\nNSManagedObjectModel *managedObjectModel =\n        [[context persistentStoreCoordinator] managedObjectModel];\nNSEntityDescription *entity =\n        [[managedObjectModel entitiesByName] objectForKey:entityName];\nNSManagedObject *newObject = [[NSManagedObject alloc]\n            initWithEntity:entity insertIntoManagedObjectContext:context];\nreturn newObject;\n\nSee Also\nRelated Documentation\ninit(entity: NSEntityDescription, insertInto: NSManagedObjectContext?)\nInitializes a managed object from an entity description and inserts it into the specified managed object context."
  },
  {
    "title": "attributesByName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription/1425099-attributesbyname",
    "html": "Discussion\n\nThe keys in the dictionary are the attribute names and the values are instances of NSAttributeDescription. .\n\nSee Also\nWorking with properties\nvar propertiesByName: [String : NSPropertyDescription]\nA dictionary containing the properties of the receiver.\nvar properties: [NSPropertyDescription]\nAn array containing the properties of the receiver.\nvar relationshipsByName: [String : NSRelationshipDescription]\nThe relationships of the receiver in a dictionary.\nfunc relationships(forDestination: NSEntityDescription) -> [NSRelationshipDescription]\nReturns an array containing the relationships of the receiver where the entity description of the relationship is a given entity."
  },
  {
    "title": "compoundIndexes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription/1425115-compoundindexes",
    "html": "Discussion\n\nThe arrays contained in the returned array contain instances of NSAttributeDescription, NSRelationshipDescription that represent properties of the entity, or of NSString that match the name of attributes or relationships of the entity.\n\nCompound indexes are only used by stores that natively support compound indices—setting them is only advisory. Indexes apply to the entire inheritance hierarchy.\n\nSee Also\nConfiguring indexes and constraints\nvar indexes: [NSFetchIndexDescription]\nAn array of fetch index descriptions for the entity.\nvar uniquenessConstraints: [[Any]]\nAn array of arrays that contains one or more attributes with a value that must be unique over the instances of that entity."
  },
  {
    "title": "indexes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription/2887059-indexes",
    "html": "Discussion\n\nThis value doesn’t form part of the entity’s version hash, and stores that don’t natively support indexing may ignore it.\n\nImportant\n\nSet indexes last in a model. Changing an entity hierarchy in any way that affects the validity of indexes drops all existing indexes for entities in that hierarchy, such as adding or removing superentities or subentities, or adding and removing properties anywhere in the hierarchy.\n\nSee Also\nConfiguring indexes and constraints\nvar uniquenessConstraints: [[Any]]\nAn array of arrays that contains one or more attributes with a value that must be unique over the instances of that entity.\nvar compoundIndexes: [[Any]]\nThe compound indexes for the entity as an array of arrays.\nDeprecated"
  },
  {
    "title": "uniquenessConstraints | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription/1425095-uniquenessconstraints",
    "html": "Discussion\n\nEach inner array contains one or more NSAttributeDescription objects or strings that contain the names of attributes on the entity.\n\nThis value forms part of the entity’s version hash. Stores that don’t support uniqueness constraints must refuse to initialize when receiving a model that contains such constraints.\n\nNote\n\nUniqueness constraint violations can be computationally expensive to handle. The recommendation is to use only one uniqueness constraint per entity hierarchy, although subentites may extend a superentity’s constraint.\n\nSee Also\nConfiguring indexes and constraints\nvar indexes: [NSFetchIndexDescription]\nAn array of fetch index descriptions for the entity.\nvar compoundIndexes: [[Any]]\nThe compound indexes for the entity as an array of arrays.\nDeprecated"
  },
  {
    "title": "relationshipsByName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription/1425106-relationshipsbyname",
    "html": "Discussion\n\nThe keys in the dictionary are the relationship names and the values are instances of NSRelationshipDescription.\n\nSee Also\nWorking with properties\nvar propertiesByName: [String : NSPropertyDescription]\nA dictionary containing the properties of the receiver.\nvar properties: [NSPropertyDescription]\nAn array containing the properties of the receiver.\nvar attributesByName: [String : NSAttributeDescription]\nThe attributes of the receiver in a dictionary.\nfunc relationships(forDestination: NSEntityDescription) -> [NSRelationshipDescription]\nReturns an array containing the relationships of the receiver where the entity description of the relationship is a given entity."
  },
  {
    "title": "isStoredInExternalRecord | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspropertydescription/1506260-isstoredinexternalrecord",
    "html": "Discussion\n\ntrue if the property data should be written out in an external record file corresponding to the managed object, otherwise false. For additional information, see Core Data Spotlight Integration Programming Guide.\n\nSpecial Considerations\n\nThis property has no effect on iOS.\n\nSee Also\nSpecifying Spotlight Support\nvar isIndexedBySpotlight: Bool\nA Boolean value that indicates whether Core Data adds the property’s value to the Core Spotlight index."
  },
  {
    "title": "isIndexedBySpotlight | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspropertydescription/1506784-isindexedbyspotlight",
    "html": "Discussion\n\nImportant\n\nIf you set this property to true for a property description that describes a relationship, you must override attributeSet(for:) in your Core Spotlight delegate and return the necessary set of attributes. Core Data doesn’t automatically infer indexable information for relationships.\n\nYou can also set this property using the Index in Spotlight attribute in the Attributes inspector of the Core Data model editor.\n\nSee Also\nSpecifying Spotlight Support\nvar isStoredInExternalRecord: Bool\nA Boolean value that indicates whether to write the property’s data in an external record file that corresponds to the managed object.\nDeprecated"
  },
  {
    "title": "versionHashModifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspropertydescription/1506214-versionhashmodifier",
    "html": "Discussion\n\nThis value is included in the version hash for the property. You use it to mark or denote a property as being a different “version” than another even if all of the values which affect persistence are equal. (Such a difference is important in cases where the attributes of a property are unchanged but the format or content of its data are changed.)\n\nSee Also\nSupporting Versioning\nvar versionHash: Data\nThe version hash for the receiver.\nvar renamingIdentifier: String?\nThe renaming identifier for the receiver."
  },
  {
    "title": "name | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription/1425101-name",
    "html": "Discussion\n\nSetting the name raises an exception if the receiver’s model has been used by an object graph manager.\n\nSee Also\nGetting descriptive information\nvar managedObjectModel: NSManagedObjectModel\nThe managed object model with which the receiver is associated.\nvar managedObjectClassName: String!\nThe name of the class that represents the receiver’s entity.\nvar renamingIdentifier: String?\nThe renaming identifier for the receiver.\nvar isAbstract: Bool\nA Boolean value that indicates whether the receiver represents an abstract entity.\nvar userInfo: [AnyHashable : Any]?\nThe user info dictionary of the receiver.\nvar coreSpotlightDisplayNameExpression: NSExpression\nThe expression that computes the CoreSpotlight display name for instances of the entity.\nRelated Documentation\nCore Data Programming Guide"
  },
  {
    "title": "renamingIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspropertydescription/1506641-renamingidentifier",
    "html": "Discussion\n\nThis is used to resolve naming conflicts between models. When creating an entity mapping between entities in two managed object models, a source entity property and a destination entity property that share the same identifier indicate that a property mapping should be configured to migrate from the source to the destination. If unset, the identifier will return the property's name.\n\nSee Also\nSupporting Versioning\nvar versionHash: Data\nThe version hash for the receiver.\nvar versionHashModifier: String?\nThe version hash modifier for the receiver."
  },
  {
    "title": "versionHash | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspropertydescription/1506198-versionhash",
    "html": "Discussion\n\nThe version hash is used to uniquely identify a property based on its configuration. The version hash uses only values which affect the persistence of data and the user-defined versionHashModifier value. (The values which affect persistence are the name of the property, and the flags for isOptional, isTransient, and isReadOnly.) This value is stored as part of the version information in the metadata for stores, as well as a definition of a property involved in an NSPropertyMapping object.\n\nSee Also\nSupporting Versioning\nvar versionHashModifier: String?\nThe version hash modifier for the receiver.\nvar renamingIdentifier: String?\nThe renaming identifier for the receiver."
  },
  {
    "title": "validationWarnings | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspropertydescription/1506886-validationwarnings",
    "html": "See Also\nSupporting Validation\nvar validationPredicates: [NSPredicate]\nThe validation predicates of the receiver.\nfunc setValidationPredicates([NSPredicate]?, withValidationWarnings: [String]?)\nSets the validation predicates and warnings of the receiver."
  },
  {
    "title": "validationPredicates | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspropertydescription/1506842-validationpredicates",
    "html": "See Also\nSupporting Validation\nvar validationWarnings: [Any]\nThe error strings associated with the receiver’s validation predicates.\nfunc setValidationPredicates([NSPredicate]?, withValidationWarnings: [String]?)\nSets the validation predicates and warnings of the receiver."
  },
  {
    "title": "userInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspropertydescription/1506833-userinfo",
    "html": "Discussion\n\nSetting the user info raises an exception if the receiver’s model has been used by an object graph manager.\n\nSee Also\nAccessing Features of a Property\nvar entity: NSEntityDescription\nThe entity description of the receiver.\nvar isIndexed: Bool\nA Boolean value that indicates whether the receiver should be indexed for searching.\nDeprecated\nvar isOptional: Bool\nA Boolean value that indicates whether the receiver is optional.\nvar isTransient: Bool\nA Boolean value that indicates whether the receiver is transient.\nvar name: String\nThe name of the receiver."
  },
  {
    "title": "isTransient | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspropertydescription/1506766-istransient",
    "html": "Discussion\n\ntrue if the receiver is transient, otherwise false. The transient flag specifies whether or not a property’s value is ignored when an object is saved to a persistent store. Transient properties are not saved to the persistent store, but are still managed for undo, redo, validation, and so on.\n\nSpecial Considerations\n\nSetting this property raises an exception if the receiver’s model has been used by an object graph manager.\n\nSee Also\nAccessing Features of a Property\nvar entity: NSEntityDescription\nThe entity description of the receiver.\nvar isIndexed: Bool\nA Boolean value that indicates whether the receiver should be indexed for searching.\nDeprecated\nvar isOptional: Bool\nA Boolean value that indicates whether the receiver is optional.\nvar name: String\nThe name of the receiver.\nvar userInfo: [AnyHashable : Any]?\nThe user info dictionary of the receiver."
  },
  {
    "title": "fetch(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506672-fetch",
    "html": "Parameters\nrequest\n\nA fetch request that specifies the search criteria for the fetch.\n\nerror\n\nIf there is a problem executing the fetch, upon return contains an instance of NSError that describes the problem.\n\nReturn Value\n\nAn array of objects that meet the criteria specified by request fetched from the receiver and from the persistent stores associated with the receiver’s persistent store coordinator. If an error occurs, returns nil. If no objects match the criteria specified by request, returns an empty array.\n\nDiscussion\n\nReturned objects are registered with the receiver.\n\nThe following points are important to consider:\n\nIf the fetch request has no predicate, then all instances of the specified entity are retrieved, modulo other criteria below.\n\nAn object that meets the criteria specified by request (it is an instance of the entity specified by the request, and it matches the request’s predicate if there is one) and that has been inserted into a context but which is not yet saved to a persistent store, is retrieved if the fetch request is executed on that context.\n\nIf an object in a context has been modified, a predicate is evaluated against its modified state, not against the current state in the persistent store. Therefore, if an object in a context has been modified such that it meets the fetch request’s criteria, the request retrieves it even if changes have not been saved to the store and the values in the store are such that it does not meet the criteria. Conversely, if an object in a context has been modified such that it does not match the fetch request, the fetch request will not retrieve it even if the version in the store does match.\n\nIf an object has been deleted from the context, the fetch request does not retrieve it even if that deletion has not been saved to a store.\n\nObjects that have been realized (populated, faults fired, “read from”, and so on) as well as pending updated, inserted, or deleted, are never changed by a fetch operation without developer intervention. If you fetch some objects, work with them, and then execute a new fetch that includes a superset of those objects, you do not get new instances or update data for the existing objects—you get the existing objects with their current in-memory state.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns a nonoptional result and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nRegistering and fetching objects\nfunc fetch<T>(NSFetchRequest<T>) -> [T]\nReturns an array of items of the specified type that meet the fetch request’s critieria.\nfunc count(for: NSFetchRequest<NSFetchRequestResult>) -> Int\nReturns the number of objects the specified request fetches when it executes.\nfunc registeredObject(for: NSManagedObjectID) -> NSManagedObject?\nReturns an object that exists in the context.\nfunc object(with: NSManagedObjectID) -> NSManagedObject\nReturns either an existing object from the context or a fault that represents that object.\nfunc existingObject(with: NSManagedObjectID) -> NSManagedObject\nReturns an existing object from either the context or the persistent store.\nvar registeredObjects: Set<NSManagedObject>\nThe set of registered managed objects in the context.\nfunc count<T>(for: NSFetchRequest<T>) -> Int\nReturns a count of the objects the specified request fetches when it executes.\nfunc execute(NSPersistentStoreRequest) -> NSPersistentStoreResult\nPasses a request to the persistent store without affecting the contents of the managed object context, and returns a persistent store result.\nfunc refreshAllObjects()\nRefreshes all of the registered managed objects in the context.\nvar retainsRegisteredObjects: Bool\nA Boolean value that indicates whether the context keeps strong references to all registered managed objects.\nRelated Documentation\nCore Data Programming Guide\nPredicate Programming Guide\nCore Data Snippets"
  },
  {
    "title": "isOptional | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspropertydescription/1506735-isoptional",
    "html": "Discussion\n\ntrue if the receiver is optional, otherwise false. The optionality flag specifies whether a property’s value can be nil before an object can be saved to a persistent store.\n\nSpecial Considerations\n\nSetting this property raises an exception if the receiver’s model has been used by an object graph manager.\n\nSee Also\nAccessing Features of a Property\nvar entity: NSEntityDescription\nThe entity description of the receiver.\nvar isIndexed: Bool\nA Boolean value that indicates whether the receiver should be indexed for searching.\nDeprecated\nvar isTransient: Bool\nA Boolean value that indicates whether the receiver is transient.\nvar name: String\nThe name of the receiver.\nvar userInfo: [AnyHashable : Any]?\nThe user info dictionary of the receiver."
  },
  {
    "title": "name | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspropertydescription/1506759-name",
    "html": "Discussion\n\nA property name cannot be the same as any no-parameter method name of NSObject or NSManagedObject. Since there are hundreds of methods on NSObject which may conflict with property names, you should avoid very general words (like \"font”, and “color”) and words or phrases that overlap with Cocoa paradigms (such as “isEditing” and “objectSpecifier”).\n\nSpecial Considerations\n\nSetting the name raises an exception if the receiver’s model has been used by an object graph manager.\n\nSee Also\nAccessing Features of a Property\nvar entity: NSEntityDescription\nThe entity description of the receiver.\nvar isIndexed: Bool\nA Boolean value that indicates whether the receiver should be indexed for searching.\nDeprecated\nvar isOptional: Bool\nA Boolean value that indicates whether the receiver is optional.\nvar isTransient: Bool\nA Boolean value that indicates whether the receiver is transient.\nvar userInfo: [AnyHashable : Any]?\nThe user info dictionary of the receiver."
  },
  {
    "title": "defaultDirectoryURL() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcontainer/1640597-defaultdirectoryurl",
    "html": "Return Value\n\nAn NSURL that references the directory in which the persistent store(s) will be located or are currently located.\n\nDiscussion\n\nThis method returns a platform-dependent NSURL at which the persistent store(s) will be located or are currently located. This method can be overridden in a subclass of NSPersistentContainer.\n\nSee Also\nAccessing the Default Directory\nclass var defaultDirectoryURL: URL\nThe location of the directory that contains the persistent stores."
  },
  {
    "title": "awakeFromFetch() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506424-awakefromfetch",
    "html": "Discussion\n\nYou typically use this method to compute derived values or to recreate transient relationships from the receiver’s persistent properties.\n\nThe managed object context’s change processing is explicitly disabled around this method so that you can use public setters to establish transient values and other caches without dirtying the object or its context. Because of this, however, you should not modify relationships in this method as the inverse will not be set.\n\nImportant\n\nSubclasses must invoke super’s implementation before performing their own initialization.\n\nSee Also\nManaging Change Events\nclass var contextShouldIgnoreUnmodeledPropertyChanges: Bool\nA Boolean value that indicates whether to mark instances of the class as having changes when an unmodeled property changes.\nfunc awakeFromInsert()\nProvides an opportunity to add code into the life cycle of the managed object when initially creating it.\nfunc awake(fromSnapshotEvents: NSSnapshotEventType)\nProvides an opportunity to add code into the life cycle of the managed object when fulfilling it from a snapshot.\nfunc changedValues() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc changedValuesForCurrentEvent() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc committedValues(forKeys: [String]?) -> [String : Any]\nReturns a dictionary of the most recent fetched or saved values of the managed object for the properties of the specified keys.\nfunc prepareForDeletion()\nProvides an opportunity to add code into the life cycle of the managed object before deleting it.\nfunc willSave()\nProvides an opportunity to add code into the life cycle of the managed object before saving it.\nfunc didSave()\nProvides an opportunity to add code into the life cycle of the managed object after the managed object’s context completes a save operation.\nfunc willTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object before converting it to a fault.\nfunc didTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object after converting it to a fault.\nclass func fetchRequest() -> NSFetchRequest<NSFetchRequestResult>\nReturns an initialized fetch request with the entity this subclass represents.\nvar objectWillChange: ObservableObjectPublisher\nA publisher that emits before the object changes.\ntypealias NSManagedObject.ObjectWillChangePublisher\nAn object that publishes changes from observable objects.\nRelated Documentation\nfunc setPrimitiveValue(Any?, forKey: String)\nSets the value of a given property in the managed object's private internal storage.\nfunc primitiveValue(forKey: String) -> Any?\nReturns the value for the specified property from the managed object’s private internal storage ."
  },
  {
    "title": "awake(fromSnapshotEvents:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506861-awake",
    "html": "Parameters\nflags\n\nA bit mask of didChangeValue(forKey:) constants to denote the event or events that led to the method being invoked.\n\nFor possible values, see NSSnapshotEventType.\n\nDiscussion\n\nYou typically use this method to compute derived values or to recreate transient relationships from the receiver’s persistent properties.\n\nIf you want to set attribute values and need to avoid emitting key-value observation change notifications, you should use primitive accessor methods (either setPrimitiveValue(_:forKey:) or—better—the appropriate custom primitive accessors). This ensures that the new values are treated as baseline values rather than being recorded as undoable changes for the properties in question.\n\nImportant\n\nSubclasses must invoke super’s implementation before performing their own initialization.\n\nSee Also\nManaging Change Events\nclass var contextShouldIgnoreUnmodeledPropertyChanges: Bool\nA Boolean value that indicates whether to mark instances of the class as having changes when an unmodeled property changes.\nfunc awakeFromFetch()\nProvides an opportunity to add code into the life cycle of the managed object when fufilling it from a fault.\nfunc awakeFromInsert()\nProvides an opportunity to add code into the life cycle of the managed object when initially creating it.\nfunc changedValues() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc changedValuesForCurrentEvent() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc committedValues(forKeys: [String]?) -> [String : Any]\nReturns a dictionary of the most recent fetched or saved values of the managed object for the properties of the specified keys.\nfunc prepareForDeletion()\nProvides an opportunity to add code into the life cycle of the managed object before deleting it.\nfunc willSave()\nProvides an opportunity to add code into the life cycle of the managed object before saving it.\nfunc didSave()\nProvides an opportunity to add code into the life cycle of the managed object after the managed object’s context completes a save operation.\nfunc willTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object before converting it to a fault.\nfunc didTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object after converting it to a fault.\nclass func fetchRequest() -> NSFetchRequest<NSFetchRequestResult>\nReturns an initialized fetch request with the entity this subclass represents.\nvar objectWillChange: ObservableObjectPublisher\nA publisher that emits before the object changes.\ntypealias NSManagedObject.ObjectWillChangePublisher\nAn object that publishes changes from observable objects."
  },
  {
    "title": "contextShouldIgnoreUnmodeledPropertyChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506727-contextshouldignoreunmodeledprop",
    "html": "Return Value\n\nfalse if instances of the class should be marked as having changes if an unmodeled property is changed, otherwise true.\n\nDiscussion\n\nThe default value is true.\n\nSee Also\nManaging Change Events\nfunc awakeFromFetch()\nProvides an opportunity to add code into the life cycle of the managed object when fufilling it from a fault.\nfunc awakeFromInsert()\nProvides an opportunity to add code into the life cycle of the managed object when initially creating it.\nfunc awake(fromSnapshotEvents: NSSnapshotEventType)\nProvides an opportunity to add code into the life cycle of the managed object when fulfilling it from a snapshot.\nfunc changedValues() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc changedValuesForCurrentEvent() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc committedValues(forKeys: [String]?) -> [String : Any]\nReturns a dictionary of the most recent fetched or saved values of the managed object for the properties of the specified keys.\nfunc prepareForDeletion()\nProvides an opportunity to add code into the life cycle of the managed object before deleting it.\nfunc willSave()\nProvides an opportunity to add code into the life cycle of the managed object before saving it.\nfunc didSave()\nProvides an opportunity to add code into the life cycle of the managed object after the managed object’s context completes a save operation.\nfunc willTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object before converting it to a fault.\nfunc didTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object after converting it to a fault.\nclass func fetchRequest() -> NSFetchRequest<NSFetchRequestResult>\nReturns an initialized fetch request with the entity this subclass represents.\nvar objectWillChange: ObservableObjectPublisher\nA publisher that emits before the object changes.\ntypealias NSManagedObject.ObjectWillChangePublisher\nAn object that publishes changes from observable objects.\nRelated Documentation\nvar hasChanges: Bool\nA Boolean value that indicates whether the context has uncommitted changes."
  },
  {
    "title": "awakeFromInsert() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506548-awakefrominsert",
    "html": "Discussion\n\nYou typically use this method to initialize special default property values. This method is invoked only once in the object's lifetime.\n\nIf you want to set attribute values in an implementation of this method, you should typically use primitive accessor methods (either setPrimitiveValue(_:forKey:) or—better—the appropriate custom primitive accessors). This ensures that the new values are treated as baseline values rather than being recorded as undoable changes for the properties in question.\n\nImportant\n\nSubclasses must invoke super’s implementation before performing their own initialization.\n\nSpecial Considerations\n\nIf you create a managed object then perform undo operations to bring the managed object context to a state prior to the object’s creation, then perform redo operations to bring the managed object context back to a state after the object’s creation, awakeFromInsert() is not invoked a second time.\n\nYou are typically discouraged from performing fetches within an implementation of awakeFromInsert(). Although it is allowed, execution of the fetch request can trigger the sending of internal Core Data notifications which may have unwanted side-effects. For example, in macOS, an instance of NSArrayController may end up inserting a new object into its content array twice.\n\nSee Also\nManaging Change Events\nclass var contextShouldIgnoreUnmodeledPropertyChanges: Bool\nA Boolean value that indicates whether to mark instances of the class as having changes when an unmodeled property changes.\nfunc awakeFromFetch()\nProvides an opportunity to add code into the life cycle of the managed object when fufilling it from a fault.\nfunc awake(fromSnapshotEvents: NSSnapshotEventType)\nProvides an opportunity to add code into the life cycle of the managed object when fulfilling it from a snapshot.\nfunc changedValues() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc changedValuesForCurrentEvent() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc committedValues(forKeys: [String]?) -> [String : Any]\nReturns a dictionary of the most recent fetched or saved values of the managed object for the properties of the specified keys.\nfunc prepareForDeletion()\nProvides an opportunity to add code into the life cycle of the managed object before deleting it.\nfunc willSave()\nProvides an opportunity to add code into the life cycle of the managed object before saving it.\nfunc didSave()\nProvides an opportunity to add code into the life cycle of the managed object after the managed object’s context completes a save operation.\nfunc willTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object before converting it to a fault.\nfunc didTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object after converting it to a fault.\nclass func fetchRequest() -> NSFetchRequest<NSFetchRequestResult>\nReturns an initialized fetch request with the entity this subclass represents.\nvar objectWillChange: ObservableObjectPublisher\nA publisher that emits before the object changes.\ntypealias NSManagedObject.ObjectWillChangePublisher\nAn object that publishes changes from observable objects."
  },
  {
    "title": "hasPersistentChangedValues | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506240-haspersistentchangedvalues",
    "html": "See Also\nGetting State Information\nvar managedObjectContext: NSManagedObjectContext?\nThe managed object context with which the managed object is registered.\nvar hasChanges: Bool\nA Boolean value that indicates whether the managed object has been inserted, has been deleted, or has unsaved changes.\nvar isInserted: Bool\nA Boolean value that indicates whether the managed object has been inserted in a managed object context.\nvar isUpdated: Bool\nA Boolean value that indicates whether the managed object has unsaved changes.\nvar isDeleted: Bool\nA Boolean value that indicates whether the managed object will be deleted during the next save.\nvar isFault: Bool\nA Boolean value that indicates whether the managed object is a fault.\nvar faultingState: Int\nThe faulting state of the managed object.\nfunc hasFault(forRelationshipNamed: String) -> Bool\nReturns a Boolean value that indicates whether the relationship for a given key is a fault."
  },
  {
    "title": "changedValues() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506775-changedvalues",
    "html": "Return Value\n\nA dictionary with keys that are the names of persistent properties with changes since last fetching or saving the receiver, and with the new values for those properties.\n\nDiscussion\n\nThis method only reports changes to properties that are persistent properties of the receiver, not changes to transient properties or custom instance variables.\n\nSee Also\nManaging Change Events\nclass var contextShouldIgnoreUnmodeledPropertyChanges: Bool\nA Boolean value that indicates whether to mark instances of the class as having changes when an unmodeled property changes.\nfunc awakeFromFetch()\nProvides an opportunity to add code into the life cycle of the managed object when fufilling it from a fault.\nfunc awakeFromInsert()\nProvides an opportunity to add code into the life cycle of the managed object when initially creating it.\nfunc awake(fromSnapshotEvents: NSSnapshotEventType)\nProvides an opportunity to add code into the life cycle of the managed object when fulfilling it from a snapshot.\nfunc changedValuesForCurrentEvent() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc committedValues(forKeys: [String]?) -> [String : Any]\nReturns a dictionary of the most recent fetched or saved values of the managed object for the properties of the specified keys.\nfunc prepareForDeletion()\nProvides an opportunity to add code into the life cycle of the managed object before deleting it.\nfunc willSave()\nProvides an opportunity to add code into the life cycle of the managed object before saving it.\nfunc didSave()\nProvides an opportunity to add code into the life cycle of the managed object after the managed object’s context completes a save operation.\nfunc willTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object before converting it to a fault.\nfunc didTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object after converting it to a fault.\nclass func fetchRequest() -> NSFetchRequest<NSFetchRequestResult>\nReturns an initialized fetch request with the entity this subclass represents.\nvar objectWillChange: ObservableObjectPublisher\nA publisher that emits before the object changes.\ntypealias NSManagedObject.ObjectWillChangePublisher\nAn object that publishes changes from observable objects."
  },
  {
    "title": "init(context:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1640602-init",
    "html": "Return Value\n\nAn initialized instance of the appropriate subclass.\n\nDiscussion\n\nThis method is only legal to call on subclasses of NSManagedObject that represent a single entity in the model.\n\nSee Also\nCreating a Managed Object\ninit(entity: NSEntityDescription, insertInto: NSManagedObjectContext?)\nInitializes a managed object from an entity description and inserts it into the specified managed object context."
  },
  {
    "title": "entity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506562-entity",
    "html": "Discussion\n\nIf the receiver is a fault, accessing this property does not cause it to fire.\n\nSee Also\nGetting a Managed Object’s Identity\nvar objectID: NSManagedObjectID\nThe object ID of the managed object.\nclass func entity() -> NSEntityDescription\nReturns the entity description that is associated with this subclass."
  },
  {
    "title": "init(entity:insertInto:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506357-init",
    "html": "Parameters\nentity\n\nThe entity of which to create an instance.\n\nThe model associated with context's persistent store coordinator must contain entity.\n\ncontext\n\nThe context into which the new instance is inserted.\n\nReturn Value\n\nAn initialized instance of the appropriate class for entity.\n\nDiscussion\n\nNSManagedObject uses dynamic class generation to support the Objective-C 2 properties feature (see Declared Properties) by automatically creating a subclass of the class appropriate for entity. initWithEntity:insertIntoManagedObjectContext: therefore returns an instance of the appropriate class for entity. The dynamically-generated subclass will be based on the class specified by the entity, so specifying a custom class in your model will supersede the class passed to alloc.\n\nIf context is not nil, this method invokes [context insertObject:self] (which causes awakeFromInsert() to be invoked).\n\nYou are discouraged from overriding this method—you should instead override awakeFromInsert() and/or awakeFromFetch() (if there is logic common to these methods, it should be factored into a third method which is invoked from both). If you do perform custom initialization in this method, you may cause problems with undo and redo operations.\n\nIn many applications, there is no need to subsequently assign a newly-created managed object to a particular store—see assign(_:to:). If your application has multiple stores and you do need to assign an object to a specific store, you should not do so in a managed object's initializer method. Such an assignment is controller- not model-level logic.\n\nImportant\n\nThis method is the designated initializer for NSManagedObject. You must not initialize a managed object simply by sending it init.\n\nSpecial Considerations\n\nIf you override init(entity:insertInto:), you must ensure that you set self to the return value from invocation of super’s implementation, as shown in the following example:\n\n- (id)initWithEntity:(NSEntityDescription*)entity insertIntoManagedObjectContext:(NSManagedObjectContext*)context\n{\n    self = [super initWithEntity:entity insertIntoManagedObjectContext:context];\n    if (self != nil) {\n        // Perform additional initialization.\n    }\n    return self;\n}\n\nSee Also\nCreating a Managed Object\ninit(context: NSManagedObjectContext)\nInitializes a managed object subclass and inserts it into the specified managed object context.\nRelated Documentation\nCore Data Programming Guide\nclass func insertNewObject(forEntityName: String, into: NSManagedObjectContext) -> NSManagedObject\nCreates, configures, and returns an instance of the class for the entity with a given name."
  },
  {
    "title": "fetchEvents(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainereventrequest/3618815-fetchevents",
    "html": "Parameters\ndate\n\nThe earliest date to return events for.\n\nReturn Value\n\nA request object that fetches persistent CloudKit container events by executing in a managed object context.\n\nSee Also\nFetching Events\nclass func fetchEvents(after: NSPersistentCloudKitContainer.Event?) -> Self\nCreates a fetch request for events that occur after a specified event from a persistent CloudKit container.\nclass func fetchEvents(matchingFetch: NSFetchRequest<NSFetchRequestResult>) -> Self\nCreates a fetch request for events that match a specified fetch request from a persistent CloudKit container.\nclass func fetchForEvents() -> NSFetchRequest<NSFetchRequestResult>\nCreates a fetch request for all events in a persistent CloudKit container.\nvar resultType: NSPersistentCloudKitContainerEventResult.ResultType\nThe type of result that the request returns."
  },
  {
    "title": "fetchEvents(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainereventrequest/3618816-fetchevents",
    "html": "Parameters\nevent\n\nAn event that precedes other events.\n\nReturn Value\n\nA request object that fetches persistent CloudKit container events by executing in a managed object context.\n\nSee Also\nFetching Events\nclass func fetchEvents(after: Date) -> Self\nCreates a fetch request for events after a specified date from a persistent CloudKit container.\nclass func fetchEvents(matchingFetch: NSFetchRequest<NSFetchRequestResult>) -> Self\nCreates a fetch request for events that match a specified fetch request from a persistent CloudKit container.\nclass func fetchForEvents() -> NSFetchRequest<NSFetchRequestResult>\nCreates a fetch request for all events in a persistent CloudKit container.\nvar resultType: NSPersistentCloudKitContainerEventResult.ResultType\nThe type of result that the request returns."
  },
  {
    "title": "fetchForEvents() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainereventrequest/3618818-fetchforevents",
    "html": "Return Value\n\nA request object that fetches persistent CloudKit container events by executing in a managed object context.\n\nSee Also\nFetching Events\nclass func fetchEvents(after: Date) -> Self\nCreates a fetch request for events after a specified date from a persistent CloudKit container.\nclass func fetchEvents(after: NSPersistentCloudKitContainer.Event?) -> Self\nCreates a fetch request for events that occur after a specified event from a persistent CloudKit container.\nclass func fetchEvents(matchingFetch: NSFetchRequest<NSFetchRequestResult>) -> Self\nCreates a fetch request for events that match a specified fetch request from a persistent CloudKit container.\nvar resultType: NSPersistentCloudKitContainerEventResult.ResultType\nThe type of result that the request returns."
  },
  {
    "title": "fetchEvents(matchingFetch:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainereventrequest/3618817-fetchevents",
    "html": "Parameters\nfetchRequest\n\nA fetch request to identify matching events.\n\nReturn Value\n\nA request object that fetches persistent CloudKit container events by executing in a managed object context.\n\nSee Also\nFetching Events\nclass func fetchEvents(after: Date) -> Self\nCreates a fetch request for events after a specified date from a persistent CloudKit container.\nclass func fetchEvents(after: NSPersistentCloudKitContainer.Event?) -> Self\nCreates a fetch request for events that occur after a specified event from a persistent CloudKit container.\nclass func fetchForEvents() -> NSFetchRequest<NSFetchRequestResult>\nCreates a fetch request for all events in a persistent CloudKit container.\nvar resultType: NSPersistentCloudKitContainerEventResult.ResultType\nThe type of result that the request returns."
  },
  {
    "title": "fetchHistory(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorychangerequest/2892344-fetchhistory",
    "html": "Parameters\ntransaction\n\nThe transaction that marks the beginning of the history request.\n\nReturn Value\n\nA persistent history fetch request (NSPersistentHistoryChangeRequest) with an initial transaction boundary.\n\nSee Also\nFetching History\nclass func fetchHistory(after: Date) -> Self\nRetrieves history since a given date.\nclass func fetchHistory(after: NSPersistentHistoryToken?) -> Self\nRetrieves the request history after a given token.\nclass func fetchHistory(withFetch: NSFetchRequest<NSFetchRequestResult>) -> Self\nRetrieves history based on a fetch request."
  },
  {
    "title": "token | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorytransaction/2894938-token",
    "html": "See Also\nInspecting Transaction Details\nvar author: String?\nA granular description of the context that made the persistent history change, if available.\nvar bundleID: String\nThe originating bundle’s identifier.\nvar changes: [NSPersistentHistoryChange]?\nThe array of persistent history changes.\nvar contextName: String?\nThe originating context’s name.\nvar processID: String\nThe originating process’s identifier.\nvar storeID: String\nThe originating store’s identifier.\nvar timestamp: Date\nThe date of the persistent history change.\nvar transactionNumber: Int64\nThe transaction’s numeric identifier."
  },
  {
    "title": "timestamp | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorytransaction/2894940-timestamp",
    "html": "See Also\nInspecting Transaction Details\nvar author: String?\nA granular description of the context that made the persistent history change, if available.\nvar bundleID: String\nThe originating bundle’s identifier.\nvar changes: [NSPersistentHistoryChange]?\nThe array of persistent history changes.\nvar contextName: String?\nThe originating context’s name.\nvar processID: String\nThe originating process’s identifier.\nvar storeID: String\nThe originating store’s identifier.\nvar token: NSPersistentHistoryToken\nThe token that represents this transaction in the persistent history.\nvar transactionNumber: Int64\nThe transaction’s numeric identifier."
  },
  {
    "title": "entityDescription(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorytransaction/3240595-entitydescription",
    "html": "Parameters\ncontext\n\nThe managed object context for this request.\n\nReturn Value\n\nThe entity description (NSEntityDescription) of the persistent history transaction entity.\n\nSee Also\nCustomizing History Fetch Requests\nclass var fetchRequest: NSFetchRequest<NSFetchRequestResult>?\nA fetch request that has the persistent history transaction as the entity.\nclass var entityDescription: NSEntityDescription?\nThe entity description of the persistent history transaction entity."
  },
  {
    "title": "metadata(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468911-metadata",
    "html": "Parameters\nstore\n\nA persistent store.\n\nReturn Value\n\nA dictionary that contains the metadata currently stored or to-be-stored in store.\n\nSee Also\nManaging a store’s metadata\nclass func setMetadata([String : Any]?, type: NSPersistentStore.StoreType, at: URL, options: [AnyHashable : Any]?)\nUpdates the metadata of a specific type of persistent store at the provided location.\nclass func metadataForPersistentStore(type: NSPersistentStore.StoreType, at: URL, options: [AnyHashable : Any]?) -> [String : Any]\nReturns the metadata of a specific type of persistent store at the provided location.\nfunc setMetadata([String : Any]?, for: NSPersistentStore)\nUpdates the metadata for the specified persistent store.\nlet NSStoreTypeKey: String\nA key that identifies the store type.\nlet NSStoreUUIDKey: String\nA key that provides the store’s UUID.\nRelated Documentation\nclass func setMetadata([String : Any]?, forPersistentStoreOfType: String?, at: URL)\nSets the metadata for a given store.\nclass func metadataForPersistentStore(ofType: String?, at: URL) -> [String : Any]\nReturns a dictionary containing the metadata stored in the persistent store at a given URL."
  },
  {
    "title": "retainsRegisteredObjects | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506290-retainsregisteredobjects",
    "html": "Discussion\n\nIf set to true, the receiver keeps strong references to all registered managed objects. If set to false, then the receiver keeps strong references to registered objects only when they are inserted, updated, deleted, or locked. The default is false.\n\nSee Also\nRegistering and fetching objects\nfunc fetch(NSFetchRequest<NSFetchRequestResult>) -> [Any]\nReturns an array of objects that meet the criteria of the specified fetch request.\nfunc fetch<T>(NSFetchRequest<T>) -> [T]\nReturns an array of items of the specified type that meet the fetch request’s critieria.\nfunc count(for: NSFetchRequest<NSFetchRequestResult>) -> Int\nReturns the number of objects the specified request fetches when it executes.\nfunc registeredObject(for: NSManagedObjectID) -> NSManagedObject?\nReturns an object that exists in the context.\nfunc object(with: NSManagedObjectID) -> NSManagedObject\nReturns either an existing object from the context or a fault that represents that object.\nfunc existingObject(with: NSManagedObjectID) -> NSManagedObject\nReturns an existing object from either the context or the persistent store.\nvar registeredObjects: Set<NSManagedObject>\nThe set of registered managed objects in the context.\nfunc count<T>(for: NSFetchRequest<T>) -> Int\nReturns a count of the objects the specified request fetches when it executes.\nfunc execute(NSPersistentStoreRequest) -> NSPersistentStoreResult\nPasses a request to the persistent store without affecting the contents of the managed object context, and returns a persistent store result.\nfunc refreshAllObjects()\nRefreshes all of the registered managed objects in the context."
  },
  {
    "title": "NSPersistentStoreDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoredescription",
    "html": "Topics\nCreating a Persistent Store Description\ninit(url: URL)\nInitializes the receiver with a URL for the store.\nConfiguring a Persistent Store Description\nvar url: URL?\nThe URL that the store will use for its location.\nvar configuration: String?\nThe name of the configuration used by this store.\nvar timeout: TimeInterval\nThe connection timeout for the associated store.\nvar type: String\nThe type of store this description represents.\nvar isReadOnly: Bool\nA flag that indicates whether this store will be read-only.\nvar shouldAddStoreAsynchronously: Bool\nA flag that determines whether the store is added asynchronously.\nvar shouldInferMappingModelAutomatically: Bool\nA flag indicating whether a mapping model should be created automatically.\nvar shouldMigrateStoreAutomatically: Bool\nA flag indicating whether the associated persistent store should be migrated automatically.\nfunc setOption(NSObject?, forKey: String)\nSets an option on the store.\nfunc setValue(NSObject?, forPragmaNamed: String)\nAllows you to set pragmas for the SQLite store.\nAccessing the Configuration Options\nvar options: [String : NSObject]\nA dictionary representation of the options set on the associated persistent store.\nvar sqlitePragmas: [String : NSObject]\nThe SQLite pragmas set for the associated persistent store. (read-only)\nSyncing to CloudKit\nvar cloudKitContainerOptions: NSPersistentCloudKitContainerOptions?\nOptions that customize how this store description aligns with a CloudKit database.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nSee Also\nStore Coordination\nclass NSPersistentStoreCoordinator\nAn object that enables an app’s contexts and the underlying persistent stores to work together.\nclass NSPersistentStore\nThe abstract base class for all Core Data persistent stores.\nclass NSPersistentStoreRequest\nCriteria used to retrieve data from or save data to a persistent store.\nclass NSPersistentStoreResult\nThe abstract base class for results returned from a persistent store coordinator.\nclass NSPersistentStoreAsynchronousResult\nA concrete class used to represent the results of an asynchronous request.\nclass NSSaveChangesRequest\nAn encapsulation of a collection of changes to be made by an object store in response to a save operation on a managed object context.\nclass NSAtomicStore\nAn abstract superclass that you subclass to create a Core Data atomic store.\nclass NSAtomicStoreCacheNode\nA concrete class that you use to represent basic nodes in a Core Data atomic store.\nclass NSIncrementalStore\nAn abstract superclass defining the API through which Core Data communicates with a store.\nclass NSIncrementalStoreNode\nA concrete class used to represent basic nodes in a Core Data incremental store."
  },
  {
    "title": "Deprecated symbols | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/deprecated_symbols",
    "html": "Topics\nDeprecated properties\nvar attributeType: NSAttributeType\nThe attribute’s type."
  },
  {
    "title": "isIndexed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspropertydescription/1506669-isindexed",
    "html": "Discussion\n\ntrue if the receiver should be indexed for searching, otherwise false. Object stores can optionally use this information upon store creation for operations such as defining indexes.\n\nSpecial Considerations\n\nSetting this property raises an exception if the receiver’s model has been used by an object graph manager.\n\nSee Also\nAccessing Features of a Property\nvar entity: NSEntityDescription\nThe entity description of the receiver.\nvar isOptional: Bool\nA Boolean value that indicates whether the receiver is optional.\nvar isTransient: Bool\nA Boolean value that indicates whether the receiver is transient.\nvar name: String\nThe name of the receiver.\nvar userInfo: [AnyHashable : Any]?\nThe user info dictionary of the receiver."
  },
  {
    "title": "progress | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoreasynchronousresult/1404920-progress",
    "html": "See Also\nInspecting the Result\nvar managedObjectContext: NSManagedObjectContext\nThe managed object context for the result.\nvar operationError: Error?\nAn error that contains details if the asynchronous fetch request fails."
  },
  {
    "title": "type | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/3747506-type",
    "html": "Discussion\n\nDon’t change an attribute’s type after you add its containing managed object model to a persistent store coordinator; otherwise, Core Data throws an exception.\n\nSee Also\nManaging the type\nvar attributeValueClassName: String?\nThe class name that represents the attribute’s value.\nstruct NSAttributeDescription.AttributeType\nThe types of attributes that Core Data supports."
  },
  {
    "title": "managedObjectContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoreasynchronousresult/1404916-managedobjectcontext",
    "html": "See Also\nInspecting the Result\nvar operationError: Error?\nAn error that contains details if the asynchronous fetch request fails.\nvar progress: Progress?\nAn object that reports progress for the asynchronous fetch request."
  },
  {
    "title": "NSStagedMigrationManager | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsstagedmigrationmanager",
    "html": "Overview\n\nA staged migration manager contains the individual stages of a migration and applies those stages, in the order you specify, when that migration runs. The manager handles the migration’s event loop, and provides access to the migrating store through its container property. Stages can be custom, which enables you to perform tasks immediately before and after a stage runs, or lightweight, which supplements custom stages with those that Core Data can invoke automatically because they’re already compatible with lightweight migrations.\n\nUse NSPersistentStoreStagedMigrationManagerOptionKey to include an instance of NSStagedMigrationManager in your persistent store’s options dictionary, as the following example shows:\n\n// Create a migration manager with the required stages.\nlet manager = NSStagedMigrationManager(stages)\n\n\nlet options = [\n    // Enable lightweight migrations for this store.\n    NSMigratePersistentStoresAutomaticallyOption: true,\n    NSInferMappingModelAutomaticallyOption: true\n    // Specify the migration manager to use with this store.\n    NSPersistentStoreStagedMigrationManagerOptionKey: manager \n]\n\n\n// Add the store to the persistent store coordinator.        \nlet store = coordinator.addPersistentStore(\n    type: .sqlite,\n    at: storeURL,\n    options: options\n)\n\nTopics\nCreating a migration manager\ninit([NSMigrationStage])\nCreates a migration manager with the specified stages.\nAccessing the persistent container\nvar container: NSPersistentContainer?\nThe container that provides access to the migrating persistent store.\nAccessing the stages\nvar stages: [NSMigrationStage]\nThe migration stages.\nRelationships\nInherits From\nNSObject\nSee Also\nMigration staging\nlet NSPersistentStoreStagedMigrationManagerOptionKey: String\nThe key for specifying your staged migration manager."
  },
  {
    "title": "NSLightweightMigrationStage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nslightweightmigrationstage",
    "html": "Overview\n\nUse NSLightweightMigrationStage when you have a series of models to migrate and those models are compatible with lightweight migrations. Instances of this class supplement your custom migration stages and help maintain a consistent stage order for the entire migration.\n\nTopics\nCreating a migration stage\ninit([String])\nCreates a lightweight migration stage with the specified version checksums.\nAccessing the checksums\nvar versionChecksums: [String]\nThe array of version checksums.\nRelationships\nInherits From\nNSMigrationStage\nSee Also\nMigration stages\nclass NSCustomMigrationStage\nAn object that enables you to participate in the migration between two versions of the same model.\nclass NSMigrationStage\nAn abstract base class for describing an individual stage of a migration."
  },
  {
    "title": "NSCustomMigrationStage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscustommigrationstage",
    "html": "Overview\n\nUse NSCustomMigrationStage when you have two versions of a model that Core Data can’t automatically migrate. Custom migration stages enable you to participate in the migration process by assigning handlers that the stage invokes before and after it runs. The handlers provide an opportunity to prepare the persistent store’s data for the upcoming changes before the stage runs, and perform any cleanup tasks afterward.\n\nFor example, to support a migration that changes an optional attribute to be nonoptional, you might assign a handler to the stage’s willMigrateHandler property that sets any nil instances of that attribute to a default value, thereby ensuring the migration succeeds. To access the store you’re migrating, use the container property of the migration manager that Core Data provides to every handler.\n\nTopics\nCreating a custom migration stage\ninit(migratingFrom: NSManagedObjectModelReference, to: NSManagedObjectModelReference)\nCreates a custom migration stage with the specified source and destination model references.\nclass NSManagedObjectModelReference\nAn object that describes a specific version of an object model.\nAccessing model references\nvar currentModel: NSManagedObjectModelReference\nThe reference that represents the migration’s source model.\nvar nextModel: NSManagedObjectModelReference\nThe reference that represents the migration’s destination model.\nAssigning event handlers\nvar willMigrateHandler: ((NSStagedMigrationManager, NSCustomMigrationStage) -> Void)?\nThe handler to execute before the stage runs.\nvar didMigrateHandler: ((NSStagedMigrationManager, NSCustomMigrationStage) -> Void)?\nThe handler to execute after the stage runs.\nRelationships\nInherits From\nNSMigrationStage\nSee Also\nMigration stages\nclass NSLightweightMigrationStage\nAn object that describes a series of models suitable for lightweight migration.\nclass NSMigrationStage\nAn abstract base class for describing an individual stage of a migration."
  },
  {
    "title": "NSMigrationStage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationstage",
    "html": "Overview\n\nImportant\n\nDon’t create instances of NSMigrationStage. Instead, use a concrete subclass, such as NSLightweightMigrationStage or NSCustomMigrationStage.\n\nTopics\nDescribing the purpose\nvar label: String!\nThe textual description of the migration stage’s purpose.\nRelationships\nInherits From\nNSObject\nSee Also\nMigration stages\nclass NSLightweightMigrationStage\nAn object that describes a series of models suitable for lightweight migration.\nclass NSCustomMigrationStage\nAn object that enables you to participate in the migration between two versions of the same model."
  },
  {
    "title": "stalenessInterval | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506875-stalenessinterval",
    "html": "Discussion\n\nThe staleness interval controls whether fulfilling a fault uses data previously fetched by the application, or issues a new fetch (see also refresh(_:mergeChanges:)). The staleness interval does not affect objects currently in use (that is, it is not used to automatically update property values from a persistent store after a certain period of time).\n\nThe expiration value is applied on a per object basis. It is the relative time until cached data (snapshots) should be considered stale. For example, a value of 300.0 informs the context to utilize cached information for no more than 5 minutes after an object was originally fetched.\n\nNote that the staleness interval is a hint and may not be supported by all persistent store types. It is not used by XML and binary stores, because these stores maintain all current values in memory.\n\nThe default is a negative value, which represents infinite staleness allowed. 0.0 represents “no staleness acceptable”."
  },
  {
    "title": "propagatesDeletesAtEndOfEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506228-propagatesdeletesatendofevent",
    "html": "Discussion\n\ntrue if the receiver propagates deletes at the end of the event in which a change was made, false if it propagates deletes only during a save operation. The default is true."
  },
  {
    "title": "redo() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506688-redo",
    "html": "See Also\nUndoing changes\nvar undoManager: UndoManager?\nThe object that provides undo support for the context.\nfunc undo()\nSends an undo message to the context’s undo manager, asking it to reverse the latest uncommitted changes applied to objects in the object graph.\nfunc reset()\nReturns the context to its base state.\nfunc rollback()\nRemoves everything from the undo stack, discards all insertions and deletions, and restores updated objects to their last committed values.\nRelated Documentation\nfunc processPendingChanges()\nForces the context to process changes to the object graph."
  },
  {
    "title": "undo() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506969-undo",
    "html": "See Also\nUndoing changes\nvar undoManager: UndoManager?\nThe object that provides undo support for the context.\nfunc redo()\nSends a redo message to the context’s undo manager, asking it to reverse the latest undo operation applied to objects in the object graph.\nfunc reset()\nReturns the context to its base state.\nfunc rollback()\nRemoves everything from the undo stack, discards all insertions and deletions, and restores updated objects to their last committed values.\nRelated Documentation\nfunc processPendingChanges()\nForces the context to process changes to the object graph."
  },
  {
    "title": "NSManagedObjectContext.NotificationKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/notificationkey",
    "html": "Topics\nConstants\ncase deletedObjectIDs\nA key for the set of deleted object identifiers.\ncase deletedObjects\nA key for the context’s set of deleted objects.\ncase insertedObjectIDs\nA key for the set of inserted object identifiers.\ncase insertedObjects\nA key for the context’s set of inserted objects.\ncase invalidatedAllObjects\nA key for the context’s set of all invalidated objects.\ncase invalidatedObjectIDs\nA key for the set of invalidated object identifiers.\ncase invalidatedObjects\nA key for the context’s set of invalidated objects.\ncase queryGeneration\nA key for the token that indicates which generation of the persistent store Core Data is accessing\ncase refreshedObjectIDs\nA key for the set of refreshed object identifiers.\ncase refreshedObjects\nA key for the context’s set of refreshed objects.\ncase updatedObjectIDs\nA key for the set of updated object identifiers.\ncase updatedObjects\nA key for the context’s set of updated objects.\nCreating and Comparing Keys\ninit?(rawValue: String)\nCreates a notification key using the specified raw value.\nvar rawValue: String\nThe raw string value of the key.\ntypealias NSManagedObjectContext.NotificationKey.RawValue\nThe raw type of notification key values.\nfunc hash(into: inout Hasher)\nHashes the essential components of the value by feeding them into the specified hasher.\nvar hashValue: Int\nThe hash value.\nOperators\nstatic func != (NSManagedObjectContext.NotificationKey, NSManagedObjectContext.NotificationKey) -> Bool\nReturns a Boolean value that indicates whether two values are unequal.\nSee Also\nManaging notifications\nstatic let didChangeObjectsNotification: Notification.Name\nA notification that posts when the context completes a save.\nstatic let NSManagedObjectContextObjectsDidChange: NSNotification.Name\nA notification of changes made to managed objects associated with this context.\nstatic let didSaveObjectsNotification: Notification.Name\nA notification that posts when the context completes a save.\nstatic let NSManagedObjectContextDidSave: NSNotification.Name\nA notification that the context completed a save.\nstatic let willSaveObjectsNotification: Notification.Name\nA notification that the context is about to save.\nstatic let NSManagedObjectContextWillSave: NSNotification.Name\nA notification that the context is about to save.\nlet NSInsertedObjectsKey: String\nA key for the set of objects that were inserted into the context.\nlet NSUpdatedObjectsKey: String\nA key for the set of objects that were updated.\nlet NSDeletedObjectsKey: String\nA key for the set of objects that were marked for deletion during the previous event.\nlet NSRefreshedObjectsKey: String\nA key for the set of objects that were refreshed but were not dirtied in the scope of this context.\nlet NSInvalidatedObjectsKey: String\nA key for the set of objects that were invalidated.\nlet NSInvalidatedAllObjectsKey: String\nA key that specifies that all objects in the context have been invalidated.\nstatic let didMergeChangesObjectIDsNotification: Notification.Name\nA notification that a posts when changes to managed objects with the specified object identifiers merge into the context.\nstatic let didSaveObjectIDsNotification: Notification.Name\nA notification that posts when the context saves changes."
  },
  {
    "title": "didSaveObjectIDsNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/3619552-didsaveobjectidsnotification",
    "html": "See Also\nManaging notifications\nstatic let didChangeObjectsNotification: Notification.Name\nA notification that posts when the context completes a save.\nstatic let NSManagedObjectContextObjectsDidChange: NSNotification.Name\nA notification of changes made to managed objects associated with this context.\nstatic let didSaveObjectsNotification: Notification.Name\nA notification that posts when the context completes a save.\nstatic let NSManagedObjectContextDidSave: NSNotification.Name\nA notification that the context completed a save.\nstatic let willSaveObjectsNotification: Notification.Name\nA notification that the context is about to save.\nstatic let NSManagedObjectContextWillSave: NSNotification.Name\nA notification that the context is about to save.\nlet NSInsertedObjectsKey: String\nA key for the set of objects that were inserted into the context.\nlet NSUpdatedObjectsKey: String\nA key for the set of objects that were updated.\nlet NSDeletedObjectsKey: String\nA key for the set of objects that were marked for deletion during the previous event.\nlet NSRefreshedObjectsKey: String\nA key for the set of objects that were refreshed but were not dirtied in the scope of this context.\nlet NSInvalidatedObjectsKey: String\nA key for the set of objects that were invalidated.\nlet NSInvalidatedAllObjectsKey: String\nA key that specifies that all objects in the context have been invalidated.\nstatic let didMergeChangesObjectIDsNotification: Notification.Name\nA notification that a posts when changes to managed objects with the specified object identifiers merge into the context.\nenum NSManagedObjectContext.NotificationKey\nKeys to access details in user info dictionaries of managed object context notifications."
  },
  {
    "title": "undoManager | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506663-undomanager",
    "html": "Discussion\n\nEnable undo support for a context by setting this property to an instance of UndoManager. This can be an undo manager that’s exclusive to the context, or an existing undo manager if you want to integrate the context’s undo operations with those of the rest of your app.\n\nIf your context uses an undo manager, you can realize a performance benefit by temporarily setting this property to nil when performing expensive operations on that context, such as importing a large number of objects.\n\nThe default value is nil.\n\nSee Also\nUndoing changes\nfunc undo()\nSends an undo message to the context’s undo manager, asking it to reverse the latest uncommitted changes applied to objects in the object graph.\nfunc redo()\nSends a redo message to the context’s undo manager, asking it to reverse the latest undo operation applied to objects in the object graph.\nfunc reset()\nReturns the context to its base state.\nfunc rollback()\nRemoves everything from the undo stack, discards all insertions and deletions, and restores updated objects to their last committed values."
  },
  {
    "title": "NSInvalidatedObjectsKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsinvalidatedobjectskey",
    "html": "See Also\nManaging notifications\nstatic let didChangeObjectsNotification: Notification.Name\nA notification that posts when the context completes a save.\nstatic let NSManagedObjectContextObjectsDidChange: NSNotification.Name\nA notification of changes made to managed objects associated with this context.\nstatic let didSaveObjectsNotification: Notification.Name\nA notification that posts when the context completes a save.\nstatic let NSManagedObjectContextDidSave: NSNotification.Name\nA notification that the context completed a save.\nstatic let willSaveObjectsNotification: Notification.Name\nA notification that the context is about to save.\nstatic let NSManagedObjectContextWillSave: NSNotification.Name\nA notification that the context is about to save.\nlet NSInsertedObjectsKey: String\nA key for the set of objects that were inserted into the context.\nlet NSUpdatedObjectsKey: String\nA key for the set of objects that were updated.\nlet NSDeletedObjectsKey: String\nA key for the set of objects that were marked for deletion during the previous event.\nlet NSRefreshedObjectsKey: String\nA key for the set of objects that were refreshed but were not dirtied in the scope of this context.\nlet NSInvalidatedAllObjectsKey: String\nA key that specifies that all objects in the context have been invalidated.\nstatic let didMergeChangesObjectIDsNotification: Notification.Name\nA notification that a posts when changes to managed objects with the specified object identifiers merge into the context.\nstatic let didSaveObjectIDsNotification: Notification.Name\nA notification that posts when the context saves changes.\nenum NSManagedObjectContext.NotificationKey\nKeys to access details in user info dictionaries of managed object context notifications."
  },
  {
    "title": "NSInvalidatedAllObjectsKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsinvalidatedallobjectskey",
    "html": "See Also\nManaging notifications\nstatic let didChangeObjectsNotification: Notification.Name\nA notification that posts when the context completes a save.\nstatic let NSManagedObjectContextObjectsDidChange: NSNotification.Name\nA notification of changes made to managed objects associated with this context.\nstatic let didSaveObjectsNotification: Notification.Name\nA notification that posts when the context completes a save.\nstatic let NSManagedObjectContextDidSave: NSNotification.Name\nA notification that the context completed a save.\nstatic let willSaveObjectsNotification: Notification.Name\nA notification that the context is about to save.\nstatic let NSManagedObjectContextWillSave: NSNotification.Name\nA notification that the context is about to save.\nlet NSInsertedObjectsKey: String\nA key for the set of objects that were inserted into the context.\nlet NSUpdatedObjectsKey: String\nA key for the set of objects that were updated.\nlet NSDeletedObjectsKey: String\nA key for the set of objects that were marked for deletion during the previous event.\nlet NSRefreshedObjectsKey: String\nA key for the set of objects that were refreshed but were not dirtied in the scope of this context.\nlet NSInvalidatedObjectsKey: String\nA key for the set of objects that were invalidated.\nstatic let didMergeChangesObjectIDsNotification: Notification.Name\nA notification that a posts when changes to managed objects with the specified object identifiers merge into the context.\nstatic let didSaveObjectIDsNotification: Notification.Name\nA notification that posts when the context saves changes.\nenum NSManagedObjectContext.NotificationKey\nKeys to access details in user info dictionaries of managed object context notifications."
  },
  {
    "title": "NSRefreshedObjectsKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsrefreshedobjectskey",
    "html": "See Also\nManaging notifications\nstatic let didChangeObjectsNotification: Notification.Name\nA notification that posts when the context completes a save.\nstatic let NSManagedObjectContextObjectsDidChange: NSNotification.Name\nA notification of changes made to managed objects associated with this context.\nstatic let didSaveObjectsNotification: Notification.Name\nA notification that posts when the context completes a save.\nstatic let NSManagedObjectContextDidSave: NSNotification.Name\nA notification that the context completed a save.\nstatic let willSaveObjectsNotification: Notification.Name\nA notification that the context is about to save.\nstatic let NSManagedObjectContextWillSave: NSNotification.Name\nA notification that the context is about to save.\nlet NSInsertedObjectsKey: String\nA key for the set of objects that were inserted into the context.\nlet NSUpdatedObjectsKey: String\nA key for the set of objects that were updated.\nlet NSDeletedObjectsKey: String\nA key for the set of objects that were marked for deletion during the previous event.\nlet NSInvalidatedObjectsKey: String\nA key for the set of objects that were invalidated.\nlet NSInvalidatedAllObjectsKey: String\nA key that specifies that all objects in the context have been invalidated.\nstatic let didMergeChangesObjectIDsNotification: Notification.Name\nA notification that a posts when changes to managed objects with the specified object identifiers merge into the context.\nstatic let didSaveObjectIDsNotification: Notification.Name\nA notification that posts when the context saves changes.\nenum NSManagedObjectContext.NotificationKey\nKeys to access details in user info dictionaries of managed object context notifications."
  },
  {
    "title": "NSDeletedObjectsKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsdeletedobjectskey",
    "html": "See Also\nManaging notifications\nstatic let didChangeObjectsNotification: Notification.Name\nA notification that posts when the context completes a save.\nstatic let NSManagedObjectContextObjectsDidChange: NSNotification.Name\nA notification of changes made to managed objects associated with this context.\nstatic let didSaveObjectsNotification: Notification.Name\nA notification that posts when the context completes a save.\nstatic let NSManagedObjectContextDidSave: NSNotification.Name\nA notification that the context completed a save.\nstatic let willSaveObjectsNotification: Notification.Name\nA notification that the context is about to save.\nstatic let NSManagedObjectContextWillSave: NSNotification.Name\nA notification that the context is about to save.\nlet NSInsertedObjectsKey: String\nA key for the set of objects that were inserted into the context.\nlet NSUpdatedObjectsKey: String\nA key for the set of objects that were updated.\nlet NSRefreshedObjectsKey: String\nA key for the set of objects that were refreshed but were not dirtied in the scope of this context.\nlet NSInvalidatedObjectsKey: String\nA key for the set of objects that were invalidated.\nlet NSInvalidatedAllObjectsKey: String\nA key that specifies that all objects in the context have been invalidated.\nstatic let didMergeChangesObjectIDsNotification: Notification.Name\nA notification that a posts when changes to managed objects with the specified object identifiers merge into the context.\nstatic let didSaveObjectIDsNotification: Notification.Name\nA notification that posts when the context saves changes.\nenum NSManagedObjectContext.NotificationKey\nKeys to access details in user info dictionaries of managed object context notifications."
  },
  {
    "title": "willSaveObjectsNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/3619554-willsaveobjectsnotification",
    "html": "Discussion\n\nThe notification object is the managed object context. There is no userInfo dictionary.\n\nSee Also\nManaging notifications\nstatic let didChangeObjectsNotification: Notification.Name\nA notification that posts when the context completes a save.\nstatic let NSManagedObjectContextObjectsDidChange: NSNotification.Name\nA notification of changes made to managed objects associated with this context.\nstatic let didSaveObjectsNotification: Notification.Name\nA notification that posts when the context completes a save.\nstatic let NSManagedObjectContextDidSave: NSNotification.Name\nA notification that the context completed a save.\nstatic let NSManagedObjectContextWillSave: NSNotification.Name\nA notification that the context is about to save.\nlet NSInsertedObjectsKey: String\nA key for the set of objects that were inserted into the context.\nlet NSUpdatedObjectsKey: String\nA key for the set of objects that were updated.\nlet NSDeletedObjectsKey: String\nA key for the set of objects that were marked for deletion during the previous event.\nlet NSRefreshedObjectsKey: String\nA key for the set of objects that were refreshed but were not dirtied in the scope of this context.\nlet NSInvalidatedObjectsKey: String\nA key for the set of objects that were invalidated.\nlet NSInvalidatedAllObjectsKey: String\nA key that specifies that all objects in the context have been invalidated.\nstatic let didMergeChangesObjectIDsNotification: Notification.Name\nA notification that a posts when changes to managed objects with the specified object identifiers merge into the context.\nstatic let didSaveObjectIDsNotification: Notification.Name\nA notification that posts when the context saves changes.\nenum NSManagedObjectContext.NotificationKey\nKeys to access details in user info dictionaries of managed object context notifications."
  },
  {
    "title": "NSInsertedObjectsKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsinsertedobjectskey",
    "html": "See Also\nManaging notifications\nstatic let didChangeObjectsNotification: Notification.Name\nA notification that posts when the context completes a save.\nstatic let NSManagedObjectContextObjectsDidChange: NSNotification.Name\nA notification of changes made to managed objects associated with this context.\nstatic let didSaveObjectsNotification: Notification.Name\nA notification that posts when the context completes a save.\nstatic let NSManagedObjectContextDidSave: NSNotification.Name\nA notification that the context completed a save.\nstatic let willSaveObjectsNotification: Notification.Name\nA notification that the context is about to save.\nstatic let NSManagedObjectContextWillSave: NSNotification.Name\nA notification that the context is about to save.\nlet NSUpdatedObjectsKey: String\nA key for the set of objects that were updated.\nlet NSDeletedObjectsKey: String\nA key for the set of objects that were marked for deletion during the previous event.\nlet NSRefreshedObjectsKey: String\nA key for the set of objects that were refreshed but were not dirtied in the scope of this context.\nlet NSInvalidatedObjectsKey: String\nA key for the set of objects that were invalidated.\nlet NSInvalidatedAllObjectsKey: String\nA key that specifies that all objects in the context have been invalidated.\nstatic let didMergeChangesObjectIDsNotification: Notification.Name\nA notification that a posts when changes to managed objects with the specified object identifiers merge into the context.\nstatic let didSaveObjectIDsNotification: Notification.Name\nA notification that posts when the context saves changes.\nenum NSManagedObjectContext.NotificationKey\nKeys to access details in user info dictionaries of managed object context notifications."
  },
  {
    "title": "didSaveObjectsNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/3619553-didsaveobjectsnotification",
    "html": "Discussion\n\nThe notification object is the managed object context. The userInfo dictionary contains the following keys: NSInsertedObjectsKey, NSUpdatedObjectsKey, and NSDeletedObjectsKey.\n\nYou can only use the managed objects in this notification on the same thread that it posts on.\n\nYou can pass the notification object to mergeChanges(fromContextDidSave:) on another thread, however, you must not use the managed object in the user info dictionary directly on another thread.\n\nSee Also\nManaging notifications\nstatic let didChangeObjectsNotification: Notification.Name\nA notification that posts when the context completes a save.\nstatic let NSManagedObjectContextObjectsDidChange: NSNotification.Name\nA notification of changes made to managed objects associated with this context.\nstatic let NSManagedObjectContextDidSave: NSNotification.Name\nA notification that the context completed a save.\nstatic let willSaveObjectsNotification: Notification.Name\nA notification that the context is about to save.\nstatic let NSManagedObjectContextWillSave: NSNotification.Name\nA notification that the context is about to save.\nlet NSInsertedObjectsKey: String\nA key for the set of objects that were inserted into the context.\nlet NSUpdatedObjectsKey: String\nA key for the set of objects that were updated.\nlet NSDeletedObjectsKey: String\nA key for the set of objects that were marked for deletion during the previous event.\nlet NSRefreshedObjectsKey: String\nA key for the set of objects that were refreshed but were not dirtied in the scope of this context.\nlet NSInvalidatedObjectsKey: String\nA key for the set of objects that were invalidated.\nlet NSInvalidatedAllObjectsKey: String\nA key that specifies that all objects in the context have been invalidated.\nstatic let didMergeChangesObjectIDsNotification: Notification.Name\nA notification that a posts when changes to managed objects with the specified object identifiers merge into the context.\nstatic let didSaveObjectIDsNotification: Notification.Name\nA notification that posts when the context saves changes.\nenum NSManagedObjectContext.NotificationKey\nKeys to access details in user info dictionaries of managed object context notifications."
  },
  {
    "title": "observeValue(forKeyPath:of:change:context:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506849-observevalue",
    "html": "See Also\nHandling managed objects\nvar shouldDeleteInaccessibleFaults: Bool\nA Boolean value that determines whether the context turns inaccessible faults into deleted objects.\nvar insertedObjects: Set<NSManagedObject>\nThe set of objects that have been inserted into the context but not yet saved in a persistent store.\nvar updatedObjects: Set<NSManagedObject>\nThe set of objects registered with the context that have uncommitted changes.\nvar deletedObjects: Set<NSManagedObject>\nThe set of objects that will be removed from their persistent store during the next save operation.\nfunc shouldHandleInaccessibleFault(NSManagedObject, for: NSManagedObjectID, triggeredByProperty: NSPropertyDescription?) -> Bool\nCreates a log of the inaccessible fault.\nfunc insert(NSManagedObject)\nRegisters an object to be inserted in the context’s persistent store the next time changes are saved.\nfunc delete(NSManagedObject)\nSpecifies an object that should be removed from its persistent store when changes are committed.\nfunc assign(Any, to: NSPersistentStore)\nSpecifies the store in which a newly inserted object will be saved.\nfunc obtainPermanentIDs(for: [NSManagedObject])\nConverts to permanent IDs the object IDs of the objects in a given array.\nfunc detectConflicts(for: NSManagedObject)\nMarks an object for conflict detection.\nfunc refresh(NSManagedObject, mergeChanges: Bool)\nUpdates the persistent properties of a managed object to use the latest values from the persistent store.\nfunc processPendingChanges()\nForces the context to process changes to the object graph."
  },
  {
    "title": "insert(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506794-insert",
    "html": "Parameters\nobject\n\nA managed object.\n\nDiscussion\n\nThe managed object (object) is registered in the receiver with a temporary global ID. It is assigned a permanent global ID when changes are committed. If the current transaction is rolled back (for example, if the receiver is sent a rollback() message) before a save operation, the object is unregistered from the receiver.\n\nSee Also\nHandling managed objects\nvar shouldDeleteInaccessibleFaults: Bool\nA Boolean value that determines whether the context turns inaccessible faults into deleted objects.\nvar insertedObjects: Set<NSManagedObject>\nThe set of objects that have been inserted into the context but not yet saved in a persistent store.\nvar updatedObjects: Set<NSManagedObject>\nThe set of objects registered with the context that have uncommitted changes.\nvar deletedObjects: Set<NSManagedObject>\nThe set of objects that will be removed from their persistent store during the next save operation.\nfunc shouldHandleInaccessibleFault(NSManagedObject, for: NSManagedObjectID, triggeredByProperty: NSPropertyDescription?) -> Bool\nCreates a log of the inaccessible fault.\nfunc delete(NSManagedObject)\nSpecifies an object that should be removed from its persistent store when changes are committed.\nfunc assign(Any, to: NSPersistentStore)\nSpecifies the store in which a newly inserted object will be saved.\nfunc obtainPermanentIDs(for: [NSManagedObject])\nConverts to permanent IDs the object IDs of the objects in a given array.\nfunc detectConflicts(for: NSManagedObject)\nMarks an object for conflict detection.\nfunc refresh(NSManagedObject, mergeChanges: Bool)\nUpdates the persistent properties of a managed object to use the latest values from the persistent store.\nfunc processPendingChanges()\nForces the context to process changes to the object graph.\nfunc observeValue(forKeyPath: String?, of: Any?, change: [String : Any]?, context: UnsafeMutableRawPointer?)\nAllows a context that has registered as an observer of a value to be notified of a change to that value."
  },
  {
    "title": "detectConflicts(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506843-detectconflicts",
    "html": "Parameters\nobject\n\nA managed object.\n\nDiscussion\n\nIf on the next invocation of save() object has been modified in its persistent store, the save fails. This allows optimistic locking for unchanged objects. Conflict detection is always performed on changed or deleted objects.\n\nSee Also\nHandling managed objects\nvar shouldDeleteInaccessibleFaults: Bool\nA Boolean value that determines whether the context turns inaccessible faults into deleted objects.\nvar insertedObjects: Set<NSManagedObject>\nThe set of objects that have been inserted into the context but not yet saved in a persistent store.\nvar updatedObjects: Set<NSManagedObject>\nThe set of objects registered with the context that have uncommitted changes.\nvar deletedObjects: Set<NSManagedObject>\nThe set of objects that will be removed from their persistent store during the next save operation.\nfunc shouldHandleInaccessibleFault(NSManagedObject, for: NSManagedObjectID, triggeredByProperty: NSPropertyDescription?) -> Bool\nCreates a log of the inaccessible fault.\nfunc insert(NSManagedObject)\nRegisters an object to be inserted in the context’s persistent store the next time changes are saved.\nfunc delete(NSManagedObject)\nSpecifies an object that should be removed from its persistent store when changes are committed.\nfunc assign(Any, to: NSPersistentStore)\nSpecifies the store in which a newly inserted object will be saved.\nfunc obtainPermanentIDs(for: [NSManagedObject])\nConverts to permanent IDs the object IDs of the objects in a given array.\nfunc refresh(NSManagedObject, mergeChanges: Bool)\nUpdates the persistent properties of a managed object to use the latest values from the persistent store.\nfunc processPendingChanges()\nForces the context to process changes to the object graph.\nfunc observeValue(forKeyPath: String?, of: Any?, change: [String : Any]?, context: UnsafeMutableRawPointer?)\nAllows a context that has registered as an observer of a value to be notified of a change to that value."
  },
  {
    "title": "delete(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506847-delete",
    "html": "Parameters\nobject\n\nA managed object.\n\nDiscussion\n\nWhen changes are committed, object will be removed from the uniquing tables. If object has not yet been saved to a persistent store, it is simply removed from the receiver.\n\nSee Also\nHandling managed objects\nvar shouldDeleteInaccessibleFaults: Bool\nA Boolean value that determines whether the context turns inaccessible faults into deleted objects.\nvar insertedObjects: Set<NSManagedObject>\nThe set of objects that have been inserted into the context but not yet saved in a persistent store.\nvar updatedObjects: Set<NSManagedObject>\nThe set of objects registered with the context that have uncommitted changes.\nvar deletedObjects: Set<NSManagedObject>\nThe set of objects that will be removed from their persistent store during the next save operation.\nfunc shouldHandleInaccessibleFault(NSManagedObject, for: NSManagedObjectID, triggeredByProperty: NSPropertyDescription?) -> Bool\nCreates a log of the inaccessible fault.\nfunc insert(NSManagedObject)\nRegisters an object to be inserted in the context’s persistent store the next time changes are saved.\nfunc assign(Any, to: NSPersistentStore)\nSpecifies the store in which a newly inserted object will be saved.\nfunc obtainPermanentIDs(for: [NSManagedObject])\nConverts to permanent IDs the object IDs of the objects in a given array.\nfunc detectConflicts(for: NSManagedObject)\nMarks an object for conflict detection.\nfunc refresh(NSManagedObject, mergeChanges: Bool)\nUpdates the persistent properties of a managed object to use the latest values from the persistent store.\nfunc processPendingChanges()\nForces the context to process changes to the object graph.\nfunc observeValue(forKeyPath: String?, of: Any?, change: [String : Any]?, context: UnsafeMutableRawPointer?)\nAllows a context that has registered as an observer of a value to be notified of a change to that value.\nRelated Documentation\nvar isDeleted: Bool\nA Boolean value that indicates whether the managed object will be deleted during the next save."
  },
  {
    "title": "obtainPermanentIDs(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506793-obtainpermanentids",
    "html": "Parameters\nobjects\n\nAn array of managed objects.\n\nerror\n\nIf an error occurs, upon return contains an NSError object that describes the problem.\n\nReturn Value\n\ntrue if permanent IDs are obtained for all the objects in objects, otherwise false.\n\nDiscussion\n\nThis method converts the object ID of each managed object in objects to a permanent ID. Although the object will have a permanent ID, it will still respond positively to isInserted until it is saved. Any object that already has a permanent ID is ignored.\n\nAny object not already assigned to a store is assigned based on the same rules Core Data uses for assignment during a save operation (first writable store supporting the entity, and appropriate for the instance and its related items).\n\nHandling Errors in Swift:\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSpecial Considerations\n\nThis method results in a transaction with the underlying store which changes the file’s modification date.\n\nIn macOS, this results an additional consideration if you invoke this method on the managed object context associated with an instance of NSPersistentDocument. Instances of NSDocument need to know that they are in sync with the underlying content. To avoid problems, after invoking this method you must therefore update the document’s modification date (using fileModificationDate).\n\nSee Also\nHandling managed objects\nvar shouldDeleteInaccessibleFaults: Bool\nA Boolean value that determines whether the context turns inaccessible faults into deleted objects.\nvar insertedObjects: Set<NSManagedObject>\nThe set of objects that have been inserted into the context but not yet saved in a persistent store.\nvar updatedObjects: Set<NSManagedObject>\nThe set of objects registered with the context that have uncommitted changes.\nvar deletedObjects: Set<NSManagedObject>\nThe set of objects that will be removed from their persistent store during the next save operation.\nfunc shouldHandleInaccessibleFault(NSManagedObject, for: NSManagedObjectID, triggeredByProperty: NSPropertyDescription?) -> Bool\nCreates a log of the inaccessible fault.\nfunc insert(NSManagedObject)\nRegisters an object to be inserted in the context’s persistent store the next time changes are saved.\nfunc delete(NSManagedObject)\nSpecifies an object that should be removed from its persistent store when changes are committed.\nfunc assign(Any, to: NSPersistentStore)\nSpecifies the store in which a newly inserted object will be saved.\nfunc detectConflicts(for: NSManagedObject)\nMarks an object for conflict detection.\nfunc refresh(NSManagedObject, mergeChanges: Bool)\nUpdates the persistent properties of a managed object to use the latest values from the persistent store.\nfunc processPendingChanges()\nForces the context to process changes to the object graph.\nfunc observeValue(forKeyPath: String?, of: Any?, change: [String : Any]?, context: UnsafeMutableRawPointer?)\nAllows a context that has registered as an observer of a value to be notified of a change to that value."
  },
  {
    "title": "deletedObjects | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506699-deletedobjects",
    "html": "Discussion\n\nThe returned set does not necessarily include all the objects that have been deleted (using delete(_:))—if an object has been inserted and deleted without an intervening save operation, it may not be included in the set.\n\nA managed object context does not post key-value observing notifications when the return value of deletedObjects changes. A context does, however, post a NSManagedObjectContextObjectsDidChange notification when a change is made, and a NSManagedObjectContextWillSave notification and a NSManagedObjectContextDidSave notification before and after changes are committed respectively (although again the set of deleted objects given for an NSManagedObjectContextDidSave does not include objects that were inserted and deleted without an intervening save operation—that is, they had never been saved to a persistent store).\n\nSee Also\nHandling managed objects\nvar shouldDeleteInaccessibleFaults: Bool\nA Boolean value that determines whether the context turns inaccessible faults into deleted objects.\nvar insertedObjects: Set<NSManagedObject>\nThe set of objects that have been inserted into the context but not yet saved in a persistent store.\nvar updatedObjects: Set<NSManagedObject>\nThe set of objects registered with the context that have uncommitted changes.\nfunc shouldHandleInaccessibleFault(NSManagedObject, for: NSManagedObjectID, triggeredByProperty: NSPropertyDescription?) -> Bool\nCreates a log of the inaccessible fault.\nfunc insert(NSManagedObject)\nRegisters an object to be inserted in the context’s persistent store the next time changes are saved.\nfunc delete(NSManagedObject)\nSpecifies an object that should be removed from its persistent store when changes are committed.\nfunc assign(Any, to: NSPersistentStore)\nSpecifies the store in which a newly inserted object will be saved.\nfunc obtainPermanentIDs(for: [NSManagedObject])\nConverts to permanent IDs the object IDs of the objects in a given array.\nfunc detectConflicts(for: NSManagedObject)\nMarks an object for conflict detection.\nfunc refresh(NSManagedObject, mergeChanges: Bool)\nUpdates the persistent properties of a managed object to use the latest values from the persistent store.\nfunc processPendingChanges()\nForces the context to process changes to the object graph.\nfunc observeValue(forKeyPath: String?, of: Any?, change: [String : Any]?, context: UnsafeMutableRawPointer?)\nAllows a context that has registered as an observer of a value to be notified of a change to that value.\nRelated Documentation\nvar registeredObjects: Set<NSManagedObject>\nThe set of registered managed objects in the context.\nvar isDeleted: Bool\nA Boolean value that indicates whether the managed object will be deleted during the next save."
  },
  {
    "title": "updatedObjects | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506985-updatedobjects",
    "html": "Discussion\n\nA managed object context does not post key-value observing notifications when the return value of updatedObjects changes. A context does, however, post a NSManagedObjectContextObjectsDidChange notification when a change is made, and a NSManagedObjectContextWillSave notification and a NSManagedObjectContextDidSave notification before and after changes are committed respectively.\n\nSee Also\nHandling managed objects\nvar shouldDeleteInaccessibleFaults: Bool\nA Boolean value that determines whether the context turns inaccessible faults into deleted objects.\nvar insertedObjects: Set<NSManagedObject>\nThe set of objects that have been inserted into the context but not yet saved in a persistent store.\nvar deletedObjects: Set<NSManagedObject>\nThe set of objects that will be removed from their persistent store during the next save operation.\nfunc shouldHandleInaccessibleFault(NSManagedObject, for: NSManagedObjectID, triggeredByProperty: NSPropertyDescription?) -> Bool\nCreates a log of the inaccessible fault.\nfunc insert(NSManagedObject)\nRegisters an object to be inserted in the context’s persistent store the next time changes are saved.\nfunc delete(NSManagedObject)\nSpecifies an object that should be removed from its persistent store when changes are committed.\nfunc assign(Any, to: NSPersistentStore)\nSpecifies the store in which a newly inserted object will be saved.\nfunc obtainPermanentIDs(for: [NSManagedObject])\nConverts to permanent IDs the object IDs of the objects in a given array.\nfunc detectConflicts(for: NSManagedObject)\nMarks an object for conflict detection.\nfunc refresh(NSManagedObject, mergeChanges: Bool)\nUpdates the persistent properties of a managed object to use the latest values from the persistent store.\nfunc processPendingChanges()\nForces the context to process changes to the object graph.\nfunc observeValue(forKeyPath: String?, of: Any?, change: [String : Any]?, context: UnsafeMutableRawPointer?)\nAllows a context that has registered as an observer of a value to be notified of a change to that value.\nRelated Documentation\nvar registeredObjects: Set<NSManagedObject>\nThe set of registered managed objects in the context."
  },
  {
    "title": "shouldHandleInaccessibleFault(_:for:triggeredByProperty:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506810-shouldhandleinaccessiblefault",
    "html": "See Also\nHandling managed objects\nvar shouldDeleteInaccessibleFaults: Bool\nA Boolean value that determines whether the context turns inaccessible faults into deleted objects.\nvar insertedObjects: Set<NSManagedObject>\nThe set of objects that have been inserted into the context but not yet saved in a persistent store.\nvar updatedObjects: Set<NSManagedObject>\nThe set of objects registered with the context that have uncommitted changes.\nvar deletedObjects: Set<NSManagedObject>\nThe set of objects that will be removed from their persistent store during the next save operation.\nfunc insert(NSManagedObject)\nRegisters an object to be inserted in the context’s persistent store the next time changes are saved.\nfunc delete(NSManagedObject)\nSpecifies an object that should be removed from its persistent store when changes are committed.\nfunc assign(Any, to: NSPersistentStore)\nSpecifies the store in which a newly inserted object will be saved.\nfunc obtainPermanentIDs(for: [NSManagedObject])\nConverts to permanent IDs the object IDs of the objects in a given array.\nfunc detectConflicts(for: NSManagedObject)\nMarks an object for conflict detection.\nfunc refresh(NSManagedObject, mergeChanges: Bool)\nUpdates the persistent properties of a managed object to use the latest values from the persistent store.\nfunc processPendingChanges()\nForces the context to process changes to the object graph.\nfunc observeValue(forKeyPath: String?, of: Any?, change: [String : Any]?, context: UnsafeMutableRawPointer?)\nAllows a context that has registered as an observer of a value to be notified of a change to that value."
  },
  {
    "title": "versionHashModifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription/1425119-versionhashmodifier",
    "html": "Discussion\n\nThis value is included in the version hash for the entity. You use it to mark or denote an entity as being a different “version” than another even if all of the values which affect persistence are equal. (Such a difference is important in cases where, for example, the structure of an entity is unchanged but the format or content of data has changed.)\n\nSee Also\nManaging versioning\nvar versionHash: Data\nThe version hash for the receiver."
  },
  {
    "title": "controllerWillChangeContent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultscontrollerdelegate/1622295-controllerwillchangecontent",
    "html": "Parameters\ncontroller\n\nThe fetched results controller that sent the message.\n\nDiscussion\n\nThis method is invoked before all invocations of controller(_:didChange:at:for:newIndexPath:) and controller(_:didChange:atSectionIndex:for:) have been sent for a given change event (such as the controller receiving a NSManagedObjectContextDidSave notification).\n\nSee Also\nResponding to Changes\nfunc controller(NSFetchedResultsController<NSFetchRequestResult>, didChangeContentWith: NSDiffableDataSourceSnapshot)\nNotifies the receiver about changes to the content in the fetched results controller, by using a diffable data source snapshot.\nfunc controller(NSFetchedResultsController<NSFetchRequestResult>, didChangeContentWith: CollectionDifference<NSManagedObjectID>)\nNotifies the receiver about changes to the content in the fetched results controller, by using a collection difference.\nfunc controller(NSFetchedResultsController<NSFetchRequestResult>, didChange: Any, at: IndexPath?, for: NSFetchedResultsChangeType, newIndexPath: IndexPath?)\nNotifies the receiver that a fetched object has been changed due to an add, remove, move, or update.\nfunc controller(NSFetchedResultsController<NSFetchRequestResult>, didChange: NSFetchedResultsSectionInfo, atSectionIndex: Int, for: NSFetchedResultsChangeType)\nNotifies the receiver of the addition or removal of a section.\nfunc controllerDidChangeContent(NSFetchedResultsController<NSFetchRequestResult>)\nNotifies the receiver that the fetched results controller has completed processing of one or more changes due to an add, remove, move, or update.\nRelated Documentation\nCore Data Programming Guide"
  },
  {
    "title": "controller(_:sectionIndexTitleForSectionName:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultscontrollerdelegate/1622286-controller",
    "html": "Parameters\ncontroller\n\nThe fetched results controller that sent the message.\n\nsectionName\n\nThe default name of the section.\n\nReturn Value\n\nThe string to use as the name for the specified section.\n\nDiscussion\n\nThis method does not enable change tracking. It is only needed if a section index is used.\n\nIf the delegate doesn’t implement this method, the default implementation returns the capitalized first letter of the section name (see sectionIndexTitle(forSectionName:) in NSFetchedResultsController)."
  },
  {
    "title": "controller(_:didChange:atSectionIndex:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultscontrollerdelegate/1622298-controller",
    "html": "Parameters\ncontroller\n\nThe fetched results controller that sent the message.\n\nsectionInfo\n\nThe section that changed.\n\nsectionIndex\n\nThe index of the changed section.\n\ntype\n\nThe type of change (insert or delete). Valid values are NSFetchedResultsChangeType.insert and NSFetchedResultsChangeType.delete.\n\nDiscussion\n\nThe fetched results controller reports changes to its section before changes to the fetched result objects.\n\nSpecial Considerations\n\nThis method may be invoked many times during an update event (for example, if you are importing data on a background thread and adding them to the context in a batch). You should consider carefully whether you want to update the table view on receipt of each message.\n\nSee Also\nResponding to Changes\nfunc controller(NSFetchedResultsController<NSFetchRequestResult>, didChangeContentWith: NSDiffableDataSourceSnapshot)\nNotifies the receiver about changes to the content in the fetched results controller, by using a diffable data source snapshot.\nfunc controller(NSFetchedResultsController<NSFetchRequestResult>, didChangeContentWith: CollectionDifference<NSManagedObjectID>)\nNotifies the receiver about changes to the content in the fetched results controller, by using a collection difference.\nfunc controllerWillChangeContent(NSFetchedResultsController<NSFetchRequestResult>)\nNotifies the receiver that the fetched results controller is about to start processing of one or more changes due to an add, remove, move, or update.\nfunc controller(NSFetchedResultsController<NSFetchRequestResult>, didChange: Any, at: IndexPath?, for: NSFetchedResultsChangeType, newIndexPath: IndexPath?)\nNotifies the receiver that a fetched object has been changed due to an add, remove, move, or update.\nfunc controllerDidChangeContent(NSFetchedResultsController<NSFetchRequestResult>)\nNotifies the receiver that the fetched results controller has completed processing of one or more changes due to an add, remove, move, or update."
  },
  {
    "title": "maxCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsrelationshipdescription/1506780-maxcount",
    "html": "Discussion\n\nIf you declare a relationship attribute as optional when defining your entities, the framework only enforces minCount and maxCount when that attribute is not nil.\n\nThe default value is 0.\n\nSee Also\nConfiguring Cardinality\nvar isToMany: Bool\nReturns a Boolean value that indicates whether the relationship can contain many managed objects.\nvar minCount: Int\nThe minimum number of managed objects the relationship can reference."
  },
  {
    "title": "relationships(forDestination:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription/1425127-relationships",
    "html": "Parameters\nentity\n\nAn entity description.\n\nReturn Value\n\nAn array containing the relationships of the receiver where the entity description of the relationship is entity. Elements in the array are instances of NSRelationshipDescription.\n\nSee Also\nWorking with properties\nvar propertiesByName: [String : NSPropertyDescription]\nA dictionary containing the properties of the receiver.\nvar properties: [NSPropertyDescription]\nAn array containing the properties of the receiver.\nvar attributesByName: [String : NSAttributeDescription]\nThe attributes of the receiver in a dictionary.\nvar relationshipsByName: [String : NSRelationshipDescription]\nThe relationships of the receiver in a dictionary."
  },
  {
    "title": "propertiesByName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription/1425137-propertiesbyname",
    "html": "Discussion\n\nThe keys in the dictionary are the property names and the values are instances of NSAttributeDescription and/or NSRelationshipDescription.\n\nSee Also\nWorking with properties\nvar properties: [NSPropertyDescription]\nAn array containing the properties of the receiver.\nvar attributesByName: [String : NSAttributeDescription]\nThe attributes of the receiver in a dictionary.\nvar relationshipsByName: [String : NSRelationshipDescription]\nThe relationships of the receiver in a dictionary.\nfunc relationships(forDestination: NSEntityDescription) -> [NSRelationshipDescription]\nReturns an array containing the relationships of the receiver where the entity description of the relationship is a given entity."
  },
  {
    "title": "coreSpotlightDisplayNameExpression | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription/2892364-corespotlightdisplaynameexpressi",
    "html": "See Also\nGetting descriptive information\nvar name: String?\nThe entity name of the receiver.\nvar managedObjectModel: NSManagedObjectModel\nThe managed object model with which the receiver is associated.\nvar managedObjectClassName: String!\nThe name of the class that represents the receiver’s entity.\nvar renamingIdentifier: String?\nThe renaming identifier for the receiver.\nvar isAbstract: Bool\nA Boolean value that indicates whether the receiver represents an abstract entity.\nvar userInfo: [AnyHashable : Any]?\nThe user info dictionary of the receiver."
  },
  {
    "title": "superentity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription/1425129-superentity",
    "html": "Discussion\n\nIf the receiver has no super-entity, returns nil.\n\nSee Also\nManaging inheritance\nvar subentitiesByName: [String : NSEntityDescription]\nA dictionary containing the receiver’s sub-entities.\nvar subentities: [NSEntityDescription]\nAn array containing the sub-entities of the receiver.\nfunc isKindOf(entity: NSEntityDescription) -> Bool\nReturns a Boolean value that indicates whether the receiver is a sub-entity of another given entity."
  },
  {
    "title": "subentitiesByName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription/1425123-subentitiesbyname",
    "html": "Return Value\n\nThe keys in the dictionary are the sub-entity names, the corresponding values are instances of NSEntityDescription.\n\nSee Also\nManaging inheritance\nvar subentities: [NSEntityDescription]\nAn array containing the sub-entities of the receiver.\nvar superentity: NSEntityDescription?\nThe super-entity of the receiver.\nfunc isKindOf(entity: NSEntityDescription) -> Bool\nReturns a Boolean value that indicates whether the receiver is a sub-entity of another given entity."
  },
  {
    "title": "userInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription/1425117-userinfo",
    "html": "Discussion\n\nSetting the user info dictionary raises an exception if the receiver’s model has been used by an object graph manager.\n\nSee Also\nGetting descriptive information\nvar name: String?\nThe entity name of the receiver.\nvar managedObjectModel: NSManagedObjectModel\nThe managed object model with which the receiver is associated.\nvar managedObjectClassName: String!\nThe name of the class that represents the receiver’s entity.\nvar renamingIdentifier: String?\nThe renaming identifier for the receiver.\nvar isAbstract: Bool\nA Boolean value that indicates whether the receiver represents an abstract entity.\nvar coreSpotlightDisplayNameExpression: NSExpression\nThe expression that computes the CoreSpotlight display name for instances of the entity."
  },
  {
    "title": "managedObjectClassName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription/1425131-managedobjectclassname",
    "html": "Discussion\n\nThe class specified by name must NSManagedObject or a subclass of NSManagedObject.\n\nSpecial Considerations\n\nSetting the class name raises an exception if the receiver’s model has been used by an object graph manager.\n\nSee Also\nGetting descriptive information\nvar name: String?\nThe entity name of the receiver.\nvar managedObjectModel: NSManagedObjectModel\nThe managed object model with which the receiver is associated.\nvar renamingIdentifier: String?\nThe renaming identifier for the receiver.\nvar isAbstract: Bool\nA Boolean value that indicates whether the receiver represents an abstract entity.\nvar userInfo: [AnyHashable : Any]?\nThe user info dictionary of the receiver.\nvar coreSpotlightDisplayNameExpression: NSExpression\nThe expression that computes the CoreSpotlight display name for instances of the entity."
  },
  {
    "title": "subentities | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription/1425104-subentities",
    "html": "Discussion\n\nThe sub-entities are instances of NSEntityDescription.\n\nSpecial Considerations\n\nSetting the sub-entities raises an exception if the receiver’s model has been used by an object graph manager.\n\nSee Also\nManaging inheritance\nvar subentitiesByName: [String : NSEntityDescription]\nA dictionary containing the receiver’s sub-entities.\nvar superentity: NSEntityDescription?\nThe super-entity of the receiver.\nfunc isKindOf(entity: NSEntityDescription) -> Bool\nReturns a Boolean value that indicates whether the receiver is a sub-entity of another given entity."
  },
  {
    "title": "isAbstract | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription/1425097-isabstract",
    "html": "Return Value\n\ntrue if the receiver represents an abstract entity, otherwise false.\n\nDiscussion\n\ntrue if the receiver represents an abstract entity, otherwise false. An abstract entity might be Shape, with concrete sub-entities such as Rectangle, Triangle, and Circle.\n\nSpecial Considerations\n\nSetting whether an entity is abstract raises an exception if the receiver’s model has been used by an object graph manager.\n\nSee Also\nGetting descriptive information\nvar name: String?\nThe entity name of the receiver.\nvar managedObjectModel: NSManagedObjectModel\nThe managed object model with which the receiver is associated.\nvar managedObjectClassName: String!\nThe name of the class that represents the receiver’s entity.\nvar renamingIdentifier: String?\nThe renaming identifier for the receiver.\nvar userInfo: [AnyHashable : Any]?\nThe user info dictionary of the receiver.\nvar coreSpotlightDisplayNameExpression: NSExpression\nThe expression that computes the CoreSpotlight display name for instances of the entity."
  },
  {
    "title": "Store versions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/store_versions",
    "html": "Topics\nConstants\nlet NSStoreModelVersionHashesKey: String\nKey to represent the version hash information for the model used to create the store.\nlet NSStoreModelVersionIdentifiersKey: String\nKey to represent the version identifiers for the model used to create the store.\nlet NSPersistentStoreOSCompatibility: String\nKey to represent the earliest version of the operation system that the persistent store supports.\nSee Also\nCreating a persistent store coordinator\ninit(managedObjectModel: NSManagedObjectModel)\nCreates a persistent store coordinator with the specified managed object model.\nStore options\nThe options keys that configure the behavior and characteristics of a persistent store.\nMigration options\nThe options keys that configure the migration behavior of a persistent store."
  },
  {
    "title": "addPersistentStore(ofType:configurationName:at:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468860-addpersistentstore",
    "html": "Deprecated\n\nUse addPersistentStore(type:configuration:at:options:) instead.\n\nParameters\nstoreType\n\nA string constant (such as NSSQLiteStoreType) that specifies the store type—see Persistent Store Types for possible values.\n\nconfiguration\n\nThe name of a configuration in the receiver's managed object model that will be used by the new store. The configuration can be nil, in which case no other configurations are allowed.\n\nstoreURL\n\nThe file location of the persistent store.\n\noptions\n\nA dictionary containing key-value pairs that specify whether the store should be read-only, and whether (for an XML store) the XML file should be validated against the DTD before it is read. For key definitions, see Store options and Migration options. This value may be nil.\n\nerror\n\nIf a new store cannot be created, upon return contains an instance of NSError that describes the problem\n\nReturn Value\n\nThe newly created store or, if an error occurs, nil.\n\nDiscussion\n\nHandling Errors in Swift:\n\nIn Swift, this method returns a nonoptional result and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nDeprecated instance methods\nfunc destroyPersistentStore(at: URL, ofType: String, options: [AnyHashable : Any]?)\nDeletes a specific type of persistent store at the provided location.\nfunc importStore(withIdentifier: String?, fromExternalRecordsDirectoryAt: URL, to: URL, options: [AnyHashable : Any]?, ofType: String) -> NSPersistentStore\nCreates and populates a store with the external records found at a given URL.\nDeprecated\nfunc lock()\nAttempts to acquire a lock.\nDeprecated\nfunc migratePersistentStore(NSPersistentStore, to: URL, options: [AnyHashable : Any]?, withType: String) -> NSPersistentStore\nChanges the location and, if necessary, the store type of the specified persistent store.\nfunc replacePersistentStore(at: URL, destinationOptions: [AnyHashable : Any]?, withPersistentStoreFrom: URL, sourceOptions: [AnyHashable : Any]?, ofType: String)\nReplaces one persistent store with another.\nfunc tryLock() -> Bool\nAttempts to acquire a lock.\nDeprecated\nfunc unlock()\nRelinquishes a previously acquired lock.\nDeprecated\nfunc perform(() -> Void)\nExecutes the provided closure asynchronously on the coordinator’s queue.\nfunc performAndWait(() -> Void)\nExecutes the provided closure on the coordinator’s queue and waits for it to finish.\nRelated Documentation\nfunc remove(NSPersistentStore)\nRemoves the specified persistent store from the coordinator."
  },
  {
    "title": "Migration options | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/migration_options",
    "html": "Topics\nConstants\nlet NSIgnorePersistentStoreVersioningOption: String\nKey to ignore the built-in versioning provided by Core Data.\nlet NSMigratePersistentStoresAutomaticallyOption: String\nKey to automatically attempt to migrate versioned stores.\nlet NSInferMappingModelAutomaticallyOption: String\nKey to attempt to create the mapping model automatically.\nSee Also\nCreating a persistent store coordinator\ninit(managedObjectModel: NSManagedObjectModel)\nCreates a persistent store coordinator with the specified managed object model.\nStore options\nThe options keys that configure the behavior and characteristics of a persistent store.\nStore versions\nThe metadata keys you use when comparing store versions."
  },
  {
    "title": "NSInferMappingModelAutomaticallyOption | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsinfermappingmodelautomaticallyoption",
    "html": "Discussion\n\nThe corresponding value is an NSNumber object. If the boolValue of the number is true and the value of the NSMigratePersistentStoresAutomaticallyOption is true, the coordinator will attempt to infer a mapping model if none can be found."
  },
  {
    "title": "NSMigratePersistentStoresAutomaticallyOption | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigratepersistentstoresautomaticallyoption",
    "html": "Discussion\n\nThe corresponding value is an NSNumber object. If the boolValue of the number is true and if the version hash information for the added store is determined to be incompatible with the model for the coordinator, Core Data will attempt to locate the source and mapping models in the application bundles, and perform a migration."
  },
  {
    "title": "defaultDirectoryURL | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcontainer/3747520-defaultdirectoryurl",
    "html": "See Also\nAccessing the Default Directory\nclass func defaultDirectoryURL() -> URL\nReturns the location of the directory that contains the persistent stores."
  },
  {
    "title": "init(name:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcontainer/1640557-init",
    "html": "Parameters\nname\n\nThe name of the NSPersistentContainer object.\n\nReturn Value\n\nA persistent container initialized with the given name.\n\nDiscussion\n\nBy default, the provided name value is used to name the persistent store and is used to look up the name of the NSManagedObjectModel object to be used with the NSPersistentContainer object.\n\nSee Also\nCreating a Container\ninit(name: String, managedObjectModel: NSManagedObjectModel)\nCreate a container with the specified name and managed object model."
  },
  {
    "title": "NSPersistentStoreAsynchronousFetchResultCompletionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoreasynchronousfetchresultcompletionblock",
    "html": "Parameters\nresult\n\nThe result of the fetch request."
  },
  {
    "title": "shouldDeleteInaccessibleFaults | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506221-shoulddeleteinaccessiblefaults",
    "html": "Discussion\n\nUse this property to control how the context behaves when it encounters an inaccessible fault — an object with no underlying data in the persistent store. For example, you might fetch an object that has a to-many relationship, but then a background context deletes the related objects from the store before you traverse that relationship.\n\nWhen this property is set to true, the context returns a managed object with the following characteristics:\n\nThe object’s attributes, including scalars, nullable, and mandatory attributes are all set to nil or 0.\n\nThe object’s isDeleted property is set to true, which adds the object to the context’s deletedObjects set.\n\nThe object is exempt from validation rules, including optionality, because the object is nonexistent and the context discards it when you next call save() or reset().\n\nWhen the context returns an object with these characteristics, your app can continue running and process this object in the same way as any other deleted object.\n\nWhen this property is set to false, the context throws an exception.\n\nThe default value is true.\n\nNote\n\nYou can use query generations to pin a context to a stable view of the store’s data and isolate that context from changes that other contexts or processes make. For more information, see Accessing data when the store changes.\n\nSee Also\nHandling managed objects\nvar insertedObjects: Set<NSManagedObject>\nThe set of objects that have been inserted into the context but not yet saved in a persistent store.\nvar updatedObjects: Set<NSManagedObject>\nThe set of objects registered with the context that have uncommitted changes.\nvar deletedObjects: Set<NSManagedObject>\nThe set of objects that will be removed from their persistent store during the next save operation.\nfunc shouldHandleInaccessibleFault(NSManagedObject, for: NSManagedObjectID, triggeredByProperty: NSPropertyDescription?) -> Bool\nCreates a log of the inaccessible fault.\nfunc insert(NSManagedObject)\nRegisters an object to be inserted in the context’s persistent store the next time changes are saved.\nfunc delete(NSManagedObject)\nSpecifies an object that should be removed from its persistent store when changes are committed.\nfunc assign(Any, to: NSPersistentStore)\nSpecifies the store in which a newly inserted object will be saved.\nfunc obtainPermanentIDs(for: [NSManagedObject])\nConverts to permanent IDs the object IDs of the objects in a given array.\nfunc detectConflicts(for: NSManagedObject)\nMarks an object for conflict detection.\nfunc refresh(NSManagedObject, mergeChanges: Bool)\nUpdates the persistent properties of a managed object to use the latest values from the persistent store.\nfunc processPendingChanges()\nForces the context to process changes to the object graph.\nfunc observeValue(forKeyPath: String?, of: Any?, change: [String : Any]?, context: UnsafeMutableRawPointer?)\nAllows a context that has registered as an observer of a value to be notified of a change to that value."
  },
  {
    "title": "NSAtomicStore | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsatomicstore",
    "html": "Overview\n\nUse an atomic store to handle data sets that can be expressed in memory. The atomic store API favors simplicity over performance.\n\nThis class provides default implementations of some utility methods. Create a custom atomic store subclass when you have a custom file format that you want to integrate with a Core Data app. When you create a subclass, override the following NSAtomicStore methods:\n\nload()\n\nnewCacheNode(for:)\n\nnewReferenceObject(for:)\n\nsave()\n\nupdateCacheNode(_:from:)\n\nAlso override the following properties and methods of NSPersistentStore, from which the atomic store class inherits:\n\ntype\n\nidentifier\n\nmetadata\n\nmetadataForPersistentStore(with:)\n\nsetMetadata(_:forPersistentStoreAt:)\n\nTopics\nInitializing a Store\ninit(persistentStoreCoordinator: NSPersistentStoreCoordinator?, configurationName: String?, at: URL, options: [AnyHashable : Any]?)\nCreates an atomic store at the specified location.\nLoading a Store\nfunc load()\nLoads the cache nodes for the receiver.\nfunc objectID(for: NSEntityDescription, withReferenceObject: Any) -> NSManagedObjectID\nReturns a managed object ID from the reference data for a specified entity.\nfunc addCacheNodes(Set<NSAtomicStoreCacheNode>)\nRegisters a set of cache nodes with the receiver.\nUpdating Cache Nodes\nfunc newCacheNode(for: NSManagedObject) -> NSAtomicStoreCacheNode\nReturns a new cache node for a given managed object.\nfunc newReferenceObject(for: NSManagedObject) -> Any\nReturns a new reference object for a given managed object.\nfunc updateCacheNode(NSAtomicStoreCacheNode, from: NSManagedObject)\nUpdates the given cache node using the values in a given managed object.\nfunc willRemoveCacheNodes(Set<NSAtomicStoreCacheNode>)\nMethod invoked before the store removes the given collection of cache nodes.\nSaving a Store\nfunc save()\nSaves the cache nodes.\nUtility Methods\nfunc cacheNodes() -> Set<NSAtomicStoreCacheNode>\nReturns the set of cache nodes registered with the receiver.\nfunc cacheNode(for: NSManagedObjectID) -> NSAtomicStoreCacheNode?\nReturns the cache node for a given managed object ID.\nfunc referenceObject(for: NSManagedObjectID) -> Any\nReturns the reference object for a given managed object ID.\nRelationships\nInherits From\nNSPersistentStore\nSee Also\nStore Coordination\nclass NSPersistentStoreCoordinator\nAn object that enables an app’s contexts and the underlying persistent stores to work together.\nclass NSPersistentStore\nThe abstract base class for all Core Data persistent stores.\nclass NSPersistentStoreDescription\nA description object used to create and load a persistent store.\nclass NSPersistentStoreRequest\nCriteria used to retrieve data from or save data to a persistent store.\nclass NSPersistentStoreResult\nThe abstract base class for results returned from a persistent store coordinator.\nclass NSPersistentStoreAsynchronousResult\nA concrete class used to represent the results of an asynchronous request.\nclass NSSaveChangesRequest\nAn encapsulation of a collection of changes to be made by an object store in response to a save operation on a managed object context.\nclass NSAtomicStoreCacheNode\nA concrete class that you use to represent basic nodes in a Core Data atomic store.\nclass NSIncrementalStore\nAn abstract superclass defining the API through which Core Data communicates with a store.\nclass NSIncrementalStoreNode\nA concrete class used to represent basic nodes in a Core Data incremental store."
  },
  {
    "title": "NSSaveChangesRequest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nssavechangesrequest",
    "html": "Topics\nInitializing a Request\ninit(inserted: Set<NSManagedObject>?, updated: Set<NSManagedObject>?, deleted: Set<NSManagedObject>?, locked: Set<NSManagedObject>?)\nInitializes a save changes request with collections of given changes.\nGetting Information about a Request\nvar insertedObjects: Set<NSManagedObject>?\nThe objects that were inserted into the calling context.\nvar updatedObjects: Set<NSManagedObject>?\nThe objects that were modified in the calling context.\nvar deletedObjects: Set<NSManagedObject>?\nThe objects that were deleted in the calling context.\nvar lockedObjects: Set<NSManagedObject>?\nThe objects that were flagged for optimistic locking on the calling context.\nRelationships\nInherits From\nNSPersistentStoreRequest\nSee Also\nStore Coordination\nclass NSPersistentStoreCoordinator\nAn object that enables an app’s contexts and the underlying persistent stores to work together.\nclass NSPersistentStore\nThe abstract base class for all Core Data persistent stores.\nclass NSPersistentStoreDescription\nA description object used to create and load a persistent store.\nclass NSPersistentStoreRequest\nCriteria used to retrieve data from or save data to a persistent store.\nclass NSPersistentStoreResult\nThe abstract base class for results returned from a persistent store coordinator.\nclass NSPersistentStoreAsynchronousResult\nA concrete class used to represent the results of an asynchronous request.\nclass NSAtomicStore\nAn abstract superclass that you subclass to create a Core Data atomic store.\nclass NSAtomicStoreCacheNode\nA concrete class that you use to represent basic nodes in a Core Data atomic store.\nclass NSIncrementalStore\nAn abstract superclass defining the API through which Core Data communicates with a store.\nclass NSIncrementalStoreNode\nA concrete class used to represent basic nodes in a Core Data incremental store."
  },
  {
    "title": "insertedObjects | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506192-insertedobjects",
    "html": "Discussion\n\nA managed object context does not post key-value observing notifications when the return value of insertedObjects changes—it does, however, post a NSManagedObjectContextObjectsDidChange notification when a change is made, and a NSManagedObjectContextWillSave and a NSManagedObjectContextDidSave notification before and after changes are committed respectively.\n\nSee Also\nHandling managed objects\nvar shouldDeleteInaccessibleFaults: Bool\nA Boolean value that determines whether the context turns inaccessible faults into deleted objects.\nvar updatedObjects: Set<NSManagedObject>\nThe set of objects registered with the context that have uncommitted changes.\nvar deletedObjects: Set<NSManagedObject>\nThe set of objects that will be removed from their persistent store during the next save operation.\nfunc shouldHandleInaccessibleFault(NSManagedObject, for: NSManagedObjectID, triggeredByProperty: NSPropertyDescription?) -> Bool\nCreates a log of the inaccessible fault.\nfunc insert(NSManagedObject)\nRegisters an object to be inserted in the context’s persistent store the next time changes are saved.\nfunc delete(NSManagedObject)\nSpecifies an object that should be removed from its persistent store when changes are committed.\nfunc assign(Any, to: NSPersistentStore)\nSpecifies the store in which a newly inserted object will be saved.\nfunc obtainPermanentIDs(for: [NSManagedObject])\nConverts to permanent IDs the object IDs of the objects in a given array.\nfunc detectConflicts(for: NSManagedObject)\nMarks an object for conflict detection.\nfunc refresh(NSManagedObject, mergeChanges: Bool)\nUpdates the persistent properties of a managed object to use the latest values from the persistent store.\nfunc processPendingChanges()\nForces the context to process changes to the object graph.\nfunc observeValue(forKeyPath: String?, of: Any?, change: [String : Any]?, context: UnsafeMutableRawPointer?)\nAllows a context that has registered as an observer of a value to be notified of a change to that value.\nRelated Documentation\nvar registeredObjects: Set<NSManagedObject>\nThe set of registered managed objects in the context."
  },
  {
    "title": "resultType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsexpressiondescription/3747507-resulttype",
    "html": "See Also\nConfiguring the Expression Description\nvar expression: NSExpression?\nThe expression to evaluate."
  },
  {
    "title": "execute(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506834-execute",
    "html": "See Also\nRegistering and fetching objects\nfunc fetch(NSFetchRequest<NSFetchRequestResult>) -> [Any]\nReturns an array of objects that meet the criteria of the specified fetch request.\nfunc fetch<T>(NSFetchRequest<T>) -> [T]\nReturns an array of items of the specified type that meet the fetch request’s critieria.\nfunc count(for: NSFetchRequest<NSFetchRequestResult>) -> Int\nReturns the number of objects the specified request fetches when it executes.\nfunc registeredObject(for: NSManagedObjectID) -> NSManagedObject?\nReturns an object that exists in the context.\nfunc object(with: NSManagedObjectID) -> NSManagedObject\nReturns either an existing object from the context or a fault that represents that object.\nfunc existingObject(with: NSManagedObjectID) -> NSManagedObject\nReturns an existing object from either the context or the persistent store.\nvar registeredObjects: Set<NSManagedObject>\nThe set of registered managed objects in the context.\nfunc count<T>(for: NSFetchRequest<T>) -> Int\nReturns a count of the objects the specified request fetches when it executes.\nfunc refreshAllObjects()\nRefreshes all of the registered managed objects in the context.\nvar retainsRegisteredObjects: Bool\nA Boolean value that indicates whether the context keeps strong references to all registered managed objects."
  },
  {
    "title": "count(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1948985-count",
    "html": "See Also\nRegistering and fetching objects\nfunc fetch(NSFetchRequest<NSFetchRequestResult>) -> [Any]\nReturns an array of objects that meet the criteria of the specified fetch request.\nfunc fetch<T>(NSFetchRequest<T>) -> [T]\nReturns an array of items of the specified type that meet the fetch request’s critieria.\nfunc count(for: NSFetchRequest<NSFetchRequestResult>) -> Int\nReturns the number of objects the specified request fetches when it executes.\nfunc registeredObject(for: NSManagedObjectID) -> NSManagedObject?\nReturns an object that exists in the context.\nfunc object(with: NSManagedObjectID) -> NSManagedObject\nReturns either an existing object from the context or a fault that represents that object.\nfunc existingObject(with: NSManagedObjectID) -> NSManagedObject\nReturns an existing object from either the context or the persistent store.\nvar registeredObjects: Set<NSManagedObject>\nThe set of registered managed objects in the context.\nfunc execute(NSPersistentStoreRequest) -> NSPersistentStoreResult\nPasses a request to the persistent store without affecting the contents of the managed object context, and returns a persistent store result.\nfunc refreshAllObjects()\nRefreshes all of the registered managed objects in the context.\nvar retainsRegisteredObjects: Bool\nA Boolean value that indicates whether the context keeps strong references to all registered managed objects."
  },
  {
    "title": "object(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506197-object",
    "html": "Parameters\nobjectID\n\nThe identifier of the object to retrieve. For more information, see NSManagedObjectID.\n\nReturn Value\n\nThe identified object, if its known to the context; otherwise, a fault with its objectID property set to objectID.\n\nDiscussion\n\nIf the context doesn’t recognize the specified object, this method returns a fault — a placeholder object that doesn’t load its properties until your code accesses them. The context then fetches the corresponding values from the persistent store and uses those values to turn the fault into a fully realized object.\n\nWhen this method returns a fault, Core Data makes no attempts to verify the existence of the underlying object in the persistent store. If the object doesn’t exist when the context tries to the fetch the object’s values, the framework throws an exception.\n\nSee Also\nRegistering and fetching objects\nfunc fetch(NSFetchRequest<NSFetchRequestResult>) -> [Any]\nReturns an array of objects that meet the criteria of the specified fetch request.\nfunc fetch<T>(NSFetchRequest<T>) -> [T]\nReturns an array of items of the specified type that meet the fetch request’s critieria.\nfunc count(for: NSFetchRequest<NSFetchRequestResult>) -> Int\nReturns the number of objects the specified request fetches when it executes.\nfunc registeredObject(for: NSManagedObjectID) -> NSManagedObject?\nReturns an object that exists in the context.\nfunc existingObject(with: NSManagedObjectID) -> NSManagedObject\nReturns an existing object from either the context or the persistent store.\nvar registeredObjects: Set<NSManagedObject>\nThe set of registered managed objects in the context.\nfunc count<T>(for: NSFetchRequest<T>) -> Int\nReturns a count of the objects the specified request fetches when it executes.\nfunc execute(NSPersistentStoreRequest) -> NSPersistentStoreResult\nPasses a request to the persistent store without affecting the contents of the managed object context, and returns a persistent store result.\nfunc refreshAllObjects()\nRefreshes all of the registered managed objects in the context.\nvar retainsRegisteredObjects: Bool\nA Boolean value that indicates whether the context keeps strong references to all registered managed objects."
  },
  {
    "title": "registeredObjects | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506493-registeredobjects",
    "html": "Discussion\n\nA managed object context does not post key-value observing notifications when the return value of registeredObjects changes.\n\nSee Also\nRegistering and fetching objects\nfunc fetch(NSFetchRequest<NSFetchRequestResult>) -> [Any]\nReturns an array of objects that meet the criteria of the specified fetch request.\nfunc fetch<T>(NSFetchRequest<T>) -> [T]\nReturns an array of items of the specified type that meet the fetch request’s critieria.\nfunc count(for: NSFetchRequest<NSFetchRequestResult>) -> Int\nReturns the number of objects the specified request fetches when it executes.\nfunc registeredObject(for: NSManagedObjectID) -> NSManagedObject?\nReturns an object that exists in the context.\nfunc object(with: NSManagedObjectID) -> NSManagedObject\nReturns either an existing object from the context or a fault that represents that object.\nfunc existingObject(with: NSManagedObjectID) -> NSManagedObject\nReturns an existing object from either the context or the persistent store.\nfunc count<T>(for: NSFetchRequest<T>) -> Int\nReturns a count of the objects the specified request fetches when it executes.\nfunc execute(NSPersistentStoreRequest) -> NSPersistentStoreResult\nPasses a request to the persistent store without affecting the contents of the managed object context, and returns a persistent store result.\nfunc refreshAllObjects()\nRefreshes all of the registered managed objects in the context.\nvar retainsRegisteredObjects: Bool\nA Boolean value that indicates whether the context keeps strong references to all registered managed objects.\nRelated Documentation\nvar deletedObjects: Set<NSManagedObject>\nThe set of objects that will be removed from their persistent store during the next save operation.\nvar insertedObjects: Set<NSManagedObject>\nThe set of objects that have been inserted into the context but not yet saved in a persistent store.\nvar updatedObjects: Set<NSManagedObject>\nThe set of objects registered with the context that have uncommitted changes."
  },
  {
    "title": "existingObject(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506686-existingobject",
    "html": "Parameters\nobjectID\n\nThe identifier of the object to retrieve. For more information, see NSManagedObjectID.\n\nReturn Value\n\nThe identified object from either the context or the persistent store.\n\nDiscussion\n\nIf the context recognizes the specified object, the method returns that object. Otherwise, the context fetches and returns a fully realized object from the persistent store; unlike object(with:), this method never returns a fault. If the object doesn’t exist in both the context and the persistent store, the method throws an error.\n\nSee Also\nRegistering and fetching objects\nfunc fetch(NSFetchRequest<NSFetchRequestResult>) -> [Any]\nReturns an array of objects that meet the criteria of the specified fetch request.\nfunc fetch<T>(NSFetchRequest<T>) -> [T]\nReturns an array of items of the specified type that meet the fetch request’s critieria.\nfunc count(for: NSFetchRequest<NSFetchRequestResult>) -> Int\nReturns the number of objects the specified request fetches when it executes.\nfunc registeredObject(for: NSManagedObjectID) -> NSManagedObject?\nReturns an object that exists in the context.\nfunc object(with: NSManagedObjectID) -> NSManagedObject\nReturns either an existing object from the context or a fault that represents that object.\nvar registeredObjects: Set<NSManagedObject>\nThe set of registered managed objects in the context.\nfunc count<T>(for: NSFetchRequest<T>) -> Int\nReturns a count of the objects the specified request fetches when it executes.\nfunc execute(NSPersistentStoreRequest) -> NSPersistentStoreResult\nPasses a request to the persistent store without affecting the contents of the managed object context, and returns a persistent store result.\nfunc refreshAllObjects()\nRefreshes all of the registered managed objects in the context.\nvar retainsRegisteredObjects: Bool\nA Boolean value that indicates whether the context keeps strong references to all registered managed objects."
  },
  {
    "title": "currentPersistentHistoryToken(fromStores:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/3325497-currentpersistenthistorytoken",
    "html": "Parameters\nstores\n\nThe persistent stores of interest.\n\nReturn Value\n\nA persistent history token, or nil if the coordinator can’t create one.\n\nDiscussion\n\nIf you specify nil or provide an empty array, the coordinator attempts to create a token for all of its registered stores.\n\nSee Also\nMaintaining a record of changes\nlet NSPersistentHistoryTrackingKey: String\nThe key you use to enable persistent history tracking."
  },
  {
    "title": "registeredObject(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506789-registeredobject",
    "html": "Parameters\nobjectID\n\nThe identifier of the object to retrieve. For more information, see NSManagedObjectID.\n\nReturn Value\n\nThe identified object, if it’s known to the context; otherwise, nil.\n\nDiscussion\n\nThis method provides a convenient way to retrieve an object from the context’s registeredObjects property. A nil return value means the context doesn’t recognize the specified object; the object might still exist in the persistent store. If you need to query both the context and the store, use existingObject(with:) instead.\n\nSee Also\nRegistering and fetching objects\nfunc fetch(NSFetchRequest<NSFetchRequestResult>) -> [Any]\nReturns an array of objects that meet the criteria of the specified fetch request.\nfunc fetch<T>(NSFetchRequest<T>) -> [T]\nReturns an array of items of the specified type that meet the fetch request’s critieria.\nfunc count(for: NSFetchRequest<NSFetchRequestResult>) -> Int\nReturns the number of objects the specified request fetches when it executes.\nfunc object(with: NSManagedObjectID) -> NSManagedObject\nReturns either an existing object from the context or a fault that represents that object.\nfunc existingObject(with: NSManagedObjectID) -> NSManagedObject\nReturns an existing object from either the context or the persistent store.\nvar registeredObjects: Set<NSManagedObject>\nThe set of registered managed objects in the context.\nfunc count<T>(for: NSFetchRequest<T>) -> Int\nReturns a count of the objects the specified request fetches when it executes.\nfunc execute(NSPersistentStoreRequest) -> NSPersistentStoreResult\nPasses a request to the persistent store without affecting the contents of the managed object context, and returns a persistent store result.\nfunc refreshAllObjects()\nRefreshes all of the registered managed objects in the context.\nvar retainsRegisteredObjects: Bool\nA Boolean value that indicates whether the context keeps strong references to all registered managed objects."
  },
  {
    "title": "execute(_:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468872-execute",
    "html": "Parameters\nrequest\n\nA fetch or save request.\n\ncontext\n\nThe context against which request should be executed.\n\nerror\n\nIf an error occurs, upon return contains an NSError object that describes the problem.\n\nReturn Value\n\nAn array containing managed objects, managed object IDs, or dictionaries as appropriate for a fetch request; an empty array if request is a save request, or nil if an error occurred.\n\nUser defined requests return arrays of arrays, where a nested array is the result returned from a single store.\n\nDiscussion\n\nHandling Errors in Swift:\n\nIn Swift, this method returns a nonoptional result and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nPerforming tasks\nfunc perform<T>(() -> T) -> T\nExecutes the provided closure asynchronously on the coordinator’s queue and awaits the result.\nfunc performAndWait<T>(() -> T) -> T\nExecutes the provided closure on the coordinator’s queue and waits for it to finish."
  },
  {
    "title": "count(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506868-count",
    "html": "Parameters\nrequest\n\nA fetch request that specifies the search criteria for the fetch.\n\nerror\n\nIf there is a problem executing the fetch, upon return contains an instance of NSError that describes the problem.\n\nReturn Value\n\nThe number of objects a given fetch request would have returned if it had been passed to fetch(_:), or NSNotFound if an error occurs.\n\nSee Also\nRegistering and fetching objects\nfunc fetch(NSFetchRequest<NSFetchRequestResult>) -> [Any]\nReturns an array of objects that meet the criteria of the specified fetch request.\nfunc fetch<T>(NSFetchRequest<T>) -> [T]\nReturns an array of items of the specified type that meet the fetch request’s critieria.\nfunc registeredObject(for: NSManagedObjectID) -> NSManagedObject?\nReturns an object that exists in the context.\nfunc object(with: NSManagedObjectID) -> NSManagedObject\nReturns either an existing object from the context or a fault that represents that object.\nfunc existingObject(with: NSManagedObjectID) -> NSManagedObject\nReturns an existing object from either the context or the persistent store.\nvar registeredObjects: Set<NSManagedObject>\nThe set of registered managed objects in the context.\nfunc count<T>(for: NSFetchRequest<T>) -> Int\nReturns a count of the objects the specified request fetches when it executes.\nfunc execute(NSPersistentStoreRequest) -> NSPersistentStoreResult\nPasses a request to the persistent store without affecting the contents of the managed object context, and returns a persistent store result.\nfunc refreshAllObjects()\nRefreshes all of the registered managed objects in the context.\nvar retainsRegisteredObjects: Bool\nA Boolean value that indicates whether the context keeps strong references to all registered managed objects."
  },
  {
    "title": "NSCoreDataCoreSpotlightExporter | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredatacorespotlightexporter",
    "html": "See Also\nIntegrating with Spotlight\nclass NSCoreDataCoreSpotlightDelegate\nA set of methods that enable integration with Core Spotlight.\nSpotlight record keys\nThe keys for the values that exist in Spotlight’s external record files.\nShowcase App Data in Spotlight\n​ ​Index app data so users can find it by using Spotlight search. ​​"
  },
  {
    "title": "finishDeferredLightweightMigration() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/4172803-finishdeferredlightweightmigrati",
    "html": "Discussion\n\nNote\n\nEnable deferred lightweight migrations before using this method. For more information, see NSPersistentStoreDeferredLightweightMigrationOptionKey.\n\nSee Also\nDeferring a store’s migrations\nlet NSPersistentStoreDeferredLightweightMigrationOptionKey: String\nThe key for enabling deferred lightweight migrations.\nfunc finishDeferredLightweightMigrationTask()\nExecutes a single pending task of a deferred lightweight migration."
  },
  {
    "title": "performAndWait(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/3802022-performandwait",
    "html": "Parameters\nblock\n\nThe closure to execute.\n\nSee Also\nPerforming tasks\nfunc perform<T>(() -> T) -> T\nExecutes the provided closure asynchronously on the coordinator’s queue and awaits the result.\nfunc execute(NSPersistentStoreRequest, with: NSManagedObjectContext) -> Any\nExecutes the specified request on each of the coordinator’s persistent stores."
  },
  {
    "title": "perform(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/3802021-perform",
    "html": "Parameters\nblock\n\nThe closure to execute.\n\nSee Also\nPerforming tasks\nfunc performAndWait<T>(() -> T) -> T\nExecutes the provided closure on the coordinator’s queue and waits for it to finish.\nfunc execute(NSPersistentStoreRequest, with: NSManagedObjectContext) -> Any\nExecutes the specified request on each of the coordinator’s persistent stores."
  },
  {
    "title": "NSPersistentStoreDeferredLightweightMigrationOptionKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoredeferredlightweightmigrationoptionkey",
    "html": "Discussion\n\nAs your managed object model changes, Core Data can use lightweight migrations to synchronize the underlying store data with those evolving entity definitions. These migrations happen at runtime, so they need to be fast or they can lead to a poor experience, because a migration must complete before your app can continue. Reduce the impact of migrations by deferring expensive cleanup tasks — such as dropping a table — until a more opportune time.\n\nImportant\n\nThis key is dual-purpose. When adding a persistent store to the coordinator, you use it to enable deferred lightweight migrations for that store. Afterward, Core Data uses it to indicate whether there are deferred cleanup tasks to run. Therefore, don’t use this key to later determine whether you enabled deferred lightweight migrations on a specific store.\n\nDeferred lightweight migrations are off by default. To enable them, add NSPersistentStoreDeferredLightweightMigrationOptionKey, with a value of true, to the options dictionary you provide when adding a persistent store to the coordinator.\n\nlet options = [\n    // Enable deferred lightweight migrations.\n    NSPersistentStoreDeferredLightweightMigrationOptionKey: true,\n    // Enable lightweight migrations.\n    NSMigratePersistentStoresAutomaticallyOption: true,\n    NSInferMappingModelAutomaticallyOption: true\n]\n        \nlet store = coordinator.addPersistentStore(\n    type: .sqlite,\n    at: storeURL,\n    options: options\n)\n\n\nAfter you enable deferred lightweight migrations, Core Data continues to perform your lightweight migrations as usual, but defers any time-consuming cleanup tasks that don’t impact the execution of your app. Those tasks still need to run, but you choose when to run them. To determine whether there are deferred tasks to finish, query the store’s metadata with NSPersistentStoreDeferredLightweightMigrationOptionKey. If the returned value is true, execute those tasks using the coordinator. A single migration may defer several distinct tasks and you can execute them all at once using finishDeferredLightweightMigration(), or individually using finishDeferredLightweightMigrationTask().\n\nlet key = NSPersistentStoreDeferredLightweightMigrationOptionKey\nif let hasMigration = store.metadata[key], hasMigration == true {\n    coordinator.finishDeferredLightweightMigration()\n}\n\n\nSee Also\nDeferring a store’s migrations\nfunc finishDeferredLightweightMigrationTask()\nExecutes a single pending task of a deferred lightweight migration.\nfunc finishDeferredLightweightMigration()\nExecutes all remaining tasks of a deferred lightweight migration."
  },
  {
    "title": "finishDeferredLightweightMigrationTask() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/4172804-finishdeferredlightweightmigrati",
    "html": "Discussion\n\nNote\n\nEnable deferred lightweight migrations before using this method. For more information, see NSPersistentStoreDeferredLightweightMigrationOptionKey.\n\nSee Also\nDeferring a store’s migrations\nlet NSPersistentStoreDeferredLightweightMigrationOptionKey: String\nThe key for enabling deferred lightweight migrations.\nfunc finishDeferredLightweightMigration()\nExecutes all remaining tasks of a deferred lightweight migration."
  },
  {
    "title": "NSStoreUUIDKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsstoreuuidkey",
    "html": "Discussion\n\nThe store UUID is useful to identify stores through URI representations, but it is not guaranteed to be unique. The UUID generated for new stores is unique—users can freely copy files and thus the UUID stored inside—so if you track or reference stores explicitly you need to be aware of duplicate UUIDs and potentially override the UUID when a new store is added to the list of known stores in your application.\n\nSee Also\nManaging a store’s metadata\nclass func setMetadata([String : Any]?, type: NSPersistentStore.StoreType, at: URL, options: [AnyHashable : Any]?)\nUpdates the metadata of a specific type of persistent store at the provided location.\nclass func metadataForPersistentStore(type: NSPersistentStore.StoreType, at: URL, options: [AnyHashable : Any]?) -> [String : Any]\nReturns the metadata of a specific type of persistent store at the provided location.\nfunc metadata(for: NSPersistentStore) -> [String : Any]\nReturns the metadata of the specified persistent store.\nfunc setMetadata([String : Any]?, for: NSPersistentStore)\nUpdates the metadata for the specified persistent store.\nlet NSStoreTypeKey: String\nA key that identifies the store type."
  },
  {
    "title": "NSCoreDataVersionNumber_iPhoneOS_5_1 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber_iphoneos_5_1",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSCoreDataVersionNumber10_11_3 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber10_11_3",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSStoreTypeKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsstoretypekey",
    "html": "See Also\nManaging a store’s metadata\nclass func setMetadata([String : Any]?, type: NSPersistentStore.StoreType, at: URL, options: [AnyHashable : Any]?)\nUpdates the metadata of a specific type of persistent store at the provided location.\nclass func metadataForPersistentStore(type: NSPersistentStore.StoreType, at: URL, options: [AnyHashable : Any]?) -> [String : Any]\nReturns the metadata of a specific type of persistent store at the provided location.\nfunc metadata(for: NSPersistentStore) -> [String : Any]\nReturns the metadata of the specified persistent store.\nfunc setMetadata([String : Any]?, for: NSPersistentStore)\nUpdates the metadata for the specified persistent store.\nlet NSStoreUUIDKey: String\nA key that provides the store’s UUID."
  },
  {
    "title": "NSCoreDataVersionNumber10_4_3 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber10_4_3",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "setMetadata(_:type:at:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/3747537-setmetadata",
    "html": "Parameters\nmetadata\n\nA dictionary that contains the metadata to associate with the store.\n\nstoreType\n\nThe store type. For possible values, see NSPersistentStore.StoreType.\n\nstoreURL\n\nThe store’s location.\n\noptions\n\nA dictionary containing key-value pairs that specify store behavior and characteristics. For more information, see Store options.\n\nSee Also\nManaging a store’s metadata\nclass func metadataForPersistentStore(type: NSPersistentStore.StoreType, at: URL, options: [AnyHashable : Any]?) -> [String : Any]\nReturns the metadata of a specific type of persistent store at the provided location.\nfunc metadata(for: NSPersistentStore) -> [String : Any]\nReturns the metadata of the specified persistent store.\nfunc setMetadata([String : Any]?, for: NSPersistentStore)\nUpdates the metadata for the specified persistent store.\nlet NSStoreTypeKey: String\nA key that identifies the store type.\nlet NSStoreUUIDKey: String\nA key that provides the store’s UUID."
  },
  {
    "title": "setMetadata(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468899-setmetadata",
    "html": "Parameters\nmetadata\n\nA dictionary containing metadata for the store.\n\nstore\n\nA persistent store.\n\nDiscussion\n\nThe store type and UUID (NSStoreTypeKey and NSStoreUUIDKey) are always added automatically, however NSStoreUUIDKey is only added if it is not set manually as part of the dictionary argument.\n\nImportant\n\nSetting the metadata for a store does not change the information on disk until the store is actually saved.\n\nSee Also\nManaging a store’s metadata\nclass func setMetadata([String : Any]?, type: NSPersistentStore.StoreType, at: URL, options: [AnyHashable : Any]?)\nUpdates the metadata of a specific type of persistent store at the provided location.\nclass func metadataForPersistentStore(type: NSPersistentStore.StoreType, at: URL, options: [AnyHashable : Any]?) -> [String : Any]\nReturns the metadata of a specific type of persistent store at the provided location.\nfunc metadata(for: NSPersistentStore) -> [String : Any]\nReturns the metadata of the specified persistent store.\nlet NSStoreTypeKey: String\nA key that identifies the store type.\nlet NSStoreUUIDKey: String\nA key that provides the store’s UUID.\nRelated Documentation\nclass func setMetadata([String : Any]?, forPersistentStoreOfType: String?, at: URL)\nSets the metadata for a given store.\nclass func metadataForPersistentStore(ofType: String?, at: URL) -> [String : Any]\nReturns a dictionary containing the metadata stored in the persistent store at a given URL."
  },
  {
    "title": "metadataForPersistentStore(type:at:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/3747533-metadataforpersistentstore",
    "html": "Parameters\nstoreType\n\nThe store type. For possible values, see NSPersistentStore.StoreType.\n\nstoreURL\n\nThe store’s location.\n\noptions\n\nA dictionary containing key-value pairs that specify store behavior and characteristics. For more information, see Store options.\n\nSee Also\nManaging a store’s metadata\nclass func setMetadata([String : Any]?, type: NSPersistentStore.StoreType, at: URL, options: [AnyHashable : Any]?)\nUpdates the metadata of a specific type of persistent store at the provided location.\nfunc metadata(for: NSPersistentStore) -> [String : Any]\nReturns the metadata of the specified persistent store.\nfunc setMetadata([String : Any]?, for: NSPersistentStore)\nUpdates the metadata for the specified persistent store.\nlet NSStoreTypeKey: String\nA key that identifies the store type.\nlet NSStoreUUIDKey: String\nA key that provides the store’s UUID."
  },
  {
    "title": "url(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468865-url",
    "html": "Parameters\nstore\n\nA persistent store.\n\nReturn Value\n\nThe URL for store.\n\nSee Also\nManaging a store’s location\nfunc setURL(URL, for: NSPersistentStore) -> Bool\nChanges the location of the specified persistent store.\nfunc persistentStore(for: URL) -> NSPersistentStore?\nReturns the persistent store for the specified file URL.\nRelated Documentation\nvar persistentStores: [NSPersistentStore]\nThe coordinator’s persistent stores."
  },
  {
    "title": "perform(schedule:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/3802018-perform",
    "html": "Parameters\nschedule\n\nThe required execution schedule. For more information, see NSManagedObjectContext.ScheduledTaskType.\n\nblock\n\nThe closure to perform.\n\nSee Also\nPerforming block operations\nfunc perform(() -> Void)\nAsynchronously performs the specified closure on the context’s queue.\nfunc performAndWait(() -> Void)\nSynchronously performs the specified closure on the context’s queue.\nfunc performAndWait<T>(() -> T) -> T\nSubmits a closure to the context’s queue for synchronous execution.\nenum NSManagedObjectContext.ScheduledTaskType\nThe different types of scheduled tasks."
  },
  {
    "title": "NSManagedObjectContext.ScheduledTaskType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/scheduledtasktype",
    "html": "Topics\nScheduled Task Types\ncase enqueued\nThe enqueued scheduled task type.\ncase immediate\nThe immediate scheduled task type.\nHashing a Scheduled Task Type\nvar hashValue: Int\nThe scheduled task type’s computed hash value.\nfunc hash(into: inout Hasher)\nHashes the components of the scheduled task type using the provided hasher.\nComparing Scheduled Task Types\nstatic func == (NSManagedObjectContext.ScheduledTaskType, NSManagedObjectContext.ScheduledTaskType) -> Bool\nReturns a Boolean value that indicates whether two scheduled task types are equal.\nstatic func != (NSManagedObjectContext.ScheduledTaskType, NSManagedObjectContext.ScheduledTaskType) -> Bool\nReturns a Boolean value that indicates whether two scheduled task types are unequal.\nSee Also\nPerforming block operations\nfunc perform(() -> Void)\nAsynchronously performs the specified closure on the context’s queue.\nfunc perform<T>(schedule: NSManagedObjectContext.ScheduledTaskType, () -> T) -> T\nSubmits a closure to the context’s queue for asynchronous execution.\nfunc performAndWait(() -> Void)\nSynchronously performs the specified closure on the context’s queue.\nfunc performAndWait<T>(() -> T) -> T\nSubmits a closure to the context’s queue for synchronous execution."
  },
  {
    "title": "Deprecated symbols | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/deprecated_symbols",
    "html": "Topics\nDeprecated type methods\nclass func new() -> Self\nDeprecated\nDeprecated instance methods\ninit(concurrencyType: NSManagedObjectContextConcurrencyType)\nCreates a context that uses the specified concurrency type.\ninit()\nDeprecated\nfunc lock()\nAttempts to acquire a lock on the context.\nDeprecated\nfunc tryLock() -> Bool\nAttempts to acquire a lock.\nDeprecated\nfunc unlock()\nRelinquishes a previously acquired lock.\nDeprecated"
  },
  {
    "title": "performAndWait(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/3802019-performandwait",
    "html": "Parameters\nblock\n\nThe closure to perform.\n\nDiscussion\n\nThis method supports reentrancy — meaning it’s safe to call the method again, from within the closure, before the previous invocation completes.\n\nSee Also\nPerforming block operations\nfunc perform(() -> Void)\nAsynchronously performs the specified closure on the context’s queue.\nfunc perform<T>(schedule: NSManagedObjectContext.ScheduledTaskType, () -> T) -> T\nSubmits a closure to the context’s queue for asynchronous execution.\nfunc performAndWait(() -> Void)\nSynchronously performs the specified closure on the context’s queue.\nenum NSManagedObjectContext.ScheduledTaskType\nThe different types of scheduled tasks."
  },
  {
    "title": "didChangeObjectsNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/3619550-didchangeobjectsnotification",
    "html": "Discussion\n\nThe notification object is the managed object context. The userInfo dictionary contains the following keys: NSInsertedObjectsKey, NSUpdatedObjectsKey, and NSDeletedObjectsKey.\n\nYou can only use the managed objects in this notification on the same thread that it posts on.\n\nYou can pass the notification object to mergeChanges(fromContextDidSave:) on another thread, however, you must not use the managed object in the user info dictionary directly on another thread.\n\nSee Also\nManaging notifications\nstatic let NSManagedObjectContextObjectsDidChange: NSNotification.Name\nA notification of changes made to managed objects associated with this context.\nstatic let didSaveObjectsNotification: Notification.Name\nA notification that posts when the context completes a save.\nstatic let NSManagedObjectContextDidSave: NSNotification.Name\nA notification that the context completed a save.\nstatic let willSaveObjectsNotification: Notification.Name\nA notification that the context is about to save.\nstatic let NSManagedObjectContextWillSave: NSNotification.Name\nA notification that the context is about to save.\nlet NSInsertedObjectsKey: String\nA key for the set of objects that were inserted into the context.\nlet NSUpdatedObjectsKey: String\nA key for the set of objects that were updated.\nlet NSDeletedObjectsKey: String\nA key for the set of objects that were marked for deletion during the previous event.\nlet NSRefreshedObjectsKey: String\nA key for the set of objects that were refreshed but were not dirtied in the scope of this context.\nlet NSInvalidatedObjectsKey: String\nA key for the set of objects that were invalidated.\nlet NSInvalidatedAllObjectsKey: String\nA key that specifies that all objects in the context have been invalidated.\nstatic let didMergeChangesObjectIDsNotification: Notification.Name\nA notification that a posts when changes to managed objects with the specified object identifiers merge into the context.\nstatic let didSaveObjectIDsNotification: Notification.Name\nA notification that posts when the context saves changes.\nenum NSManagedObjectContext.NotificationKey\nKeys to access details in user info dictionaries of managed object context notifications."
  },
  {
    "title": "concurrencyType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506792-concurrencytype",
    "html": "Discussion\n\nFor more details on concurrency type, see Concurrency.\n\nSee Also\nManaging concurrency\nlet NSManagedObjectContextQueryGenerationKey: String\nConstant used to reference the query generation token.\nclass func mergeChanges(fromRemoteContextSave: [AnyHashable : Any], into: [NSManagedObjectContext])\nHandles changes from other processes or from a serialized state.\nvar automaticallyMergesChangesFromParent: Bool\nA Boolean value that indicates whether the context automatically merges changes saved to its persistent store coordinator or parent context.\nvar mergePolicy: Any\nThe merge policy of the context.\nvar queryGenerationToken: NSQueryGenerationToken?\nReturns the token associated with the query generation currently in use by this context.\nvar transactionAuthor: String?\nThe author for the context that is used as an identifier in persistent history transactions.\nfunc mergeChanges(fromContextDidSave: Notification)\nMerges the changes specified in a given notification.\nfunc setQueryGenerationFrom(NSQueryGenerationToken?)\nSets the query generation this context should use.\nRelated Documentation\ninit(concurrencyType: NSManagedObjectContextConcurrencyType)\nCreates a context that uses the specified concurrency type."
  },
  {
    "title": "mergePolicy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506490-mergepolicy",
    "html": "Discussion\n\nThe default is NSErrorMergePolicy. For possible values, see NSMergePolicy.\n\nSee Also\nManaging concurrency\nlet NSManagedObjectContextQueryGenerationKey: String\nConstant used to reference the query generation token.\nclass func mergeChanges(fromRemoteContextSave: [AnyHashable : Any], into: [NSManagedObjectContext])\nHandles changes from other processes or from a serialized state.\nvar automaticallyMergesChangesFromParent: Bool\nA Boolean value that indicates whether the context automatically merges changes saved to its persistent store coordinator or parent context.\nvar concurrencyType: NSManagedObjectContextConcurrencyType\nThe concurrency type for the context.\nvar queryGenerationToken: NSQueryGenerationToken?\nReturns the token associated with the query generation currently in use by this context.\nvar transactionAuthor: String?\nThe author for the context that is used as an identifier in persistent history transactions.\nfunc mergeChanges(fromContextDidSave: Notification)\nMerges the changes specified in a given notification.\nfunc setQueryGenerationFrom(NSQueryGenerationToken?)\nSets the query generation this context should use."
  },
  {
    "title": "NSManagedObjectContextQueryGenerationKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontextquerygenerationkey",
    "html": "See Also\nManaging concurrency\nclass func mergeChanges(fromRemoteContextSave: [AnyHashable : Any], into: [NSManagedObjectContext])\nHandles changes from other processes or from a serialized state.\nvar automaticallyMergesChangesFromParent: Bool\nA Boolean value that indicates whether the context automatically merges changes saved to its persistent store coordinator or parent context.\nvar concurrencyType: NSManagedObjectContextConcurrencyType\nThe concurrency type for the context.\nvar mergePolicy: Any\nThe merge policy of the context.\nvar queryGenerationToken: NSQueryGenerationToken?\nReturns the token associated with the query generation currently in use by this context.\nvar transactionAuthor: String?\nThe author for the context that is used as an identifier in persistent history transactions.\nfunc mergeChanges(fromContextDidSave: Notification)\nMerges the changes specified in a given notification.\nfunc setQueryGenerationFrom(NSQueryGenerationToken?)\nSets the query generation this context should use."
  },
  {
    "title": "automaticallyMergesChangesFromParent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1845237-automaticallymergeschangesfrompa",
    "html": "See Also\nManaging concurrency\nlet NSManagedObjectContextQueryGenerationKey: String\nConstant used to reference the query generation token.\nclass func mergeChanges(fromRemoteContextSave: [AnyHashable : Any], into: [NSManagedObjectContext])\nHandles changes from other processes or from a serialized state.\nvar concurrencyType: NSManagedObjectContextConcurrencyType\nThe concurrency type for the context.\nvar mergePolicy: Any\nThe merge policy of the context.\nvar queryGenerationToken: NSQueryGenerationToken?\nReturns the token associated with the query generation currently in use by this context.\nvar transactionAuthor: String?\nThe author for the context that is used as an identifier in persistent history transactions.\nfunc mergeChanges(fromContextDidSave: Notification)\nMerges the changes specified in a given notification.\nfunc setQueryGenerationFrom(NSQueryGenerationToken?)\nSets the query generation this context should use."
  },
  {
    "title": "returnsDistinctResults | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequest/1506344-returnsdistinctresults",
    "html": "Discussion\n\nThis value is used only if a value has been set for propertiesToFetch.\n\nThis value is true if when the fetch is executed, it returns only distinct values for the fields specified by propertiesToFetch; otherwise, the value is false. The default value is false.\n\nSee Also\nManaging How Results Are Returned\nvar resultType: NSFetchRequestResultType\nThe result type of the fetch request.\nvar includesPendingChanges: Bool\nA Boolean value that indicates whether, when the fetch is executed, it matches against currently unsaved changes in the managed object context.\nvar propertiesToFetch: [Any]?\nA collection of either property descriptions or string property names that specify which properties should be returned by the fetch.\nvar includesPropertyValues: Bool\nA Boolean value that indicates whether, when the fetch is executed, property data is obtained from the persistent store.\nvar shouldRefreshRefetchedObjects: Bool\nA Boolean value that indicates whether the property values of fetched objects will be updated with the current values in the persistent store.\nvar returnsObjectsAsFaults: Bool\nA Boolean value that indicates whether the objects resulting from a fetch request are faults.\nstruct NSFetchRequestResultType\nConstants that specify the possible result types a fetch request can return.\nprotocol NSFetchRequestResult\nAn abstract protocol used with parameterized fetch requests."
  },
  {
    "title": "includesPropertyValues | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequest/1506387-includespropertyvalues",
    "html": "Discussion\n\nThis value is true if when the fetch is executed, property data is obtained from the persistent store; otherwise it is false. The default value is true.\n\nYou can set includesPropertyValues to false to avoid creating objects to represent property values and thereby reduce memory overhead. You typically should only do so, however, if you are sure that you will not need the actual property data, or you already have the information in the row cache. Otherwise, you will incur multiple trips to the database.\n\nDuring a normal fetch (includesPropertyValues is true), Core Data fetches the object ID and property data for the matching records, fills the row cache with the information, and returns managed objects as faults (see returnsObjectsAsFaults). Although these faults are managed objects, all of their property data still resides in the row cache until the fault is fired. When the fault is fired, Core Data retrieves the data from the row cache—there is no need to go back to the database.\n\nIf includesPropertyValues is false, then Core Data fetches only the object ID information for the matching records—it does not populate the row cache. Core Data still returns managed objects because it only needs managed object IDs to create faults. However, if you subsequently fire the fault, Core Data looks in the (empty) row cache, doesn't find any data, and then goes back to the store a second time for the data.\n\nIf includesPropertyValues is true and resultType is set to managedObjectIDResultType, the properties are fetched even though they are not being presented to the application and can result in a significant performance penalty.\n\nSee Also\nManaging How Results Are Returned\nvar resultType: NSFetchRequestResultType\nThe result type of the fetch request.\nvar includesPendingChanges: Bool\nA Boolean value that indicates whether, when the fetch is executed, it matches against currently unsaved changes in the managed object context.\nvar propertiesToFetch: [Any]?\nA collection of either property descriptions or string property names that specify which properties should be returned by the fetch.\nvar returnsDistinctResults: Bool\nA Boolean value that indicates whether the fetch request returns only distinct values for the fields specified by propertiesToFetch.\nvar shouldRefreshRefetchedObjects: Bool\nA Boolean value that indicates whether the property values of fetched objects will be updated with the current values in the persistent store.\nvar returnsObjectsAsFaults: Bool\nA Boolean value that indicates whether the objects resulting from a fetch request are faults.\nstruct NSFetchRequestResultType\nConstants that specify the possible result types a fetch request can return.\nprotocol NSFetchRequestResult\nAn abstract protocol used with parameterized fetch requests."
  },
  {
    "title": "returnsObjectsAsFaults | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequest/1506756-returnsobjectsasfaults",
    "html": "Discussion\n\nThis value is true if the objects resulting from a fetch using the NSFetchRequest are faults; otherwise, it is false. The default value is true. This setting is not used if the result type (see resultType) is NSManagedObjectIDResultType, as object IDs do not have property values. You can set returnsObjectsAsFaults to false to gain a performance benefit if you know you will need to access the property values from the returned objects.\n\nWhen you execute a fetch, by default returnsObjectsAsFaults is true; Core Data fetches the object data for the matching records, fills the row cache with the information, and returns managed object as faults. These faults are managed objects, but all of their property data resides in the row cache until the fault is fired. When the fault is fired, Core Data retrieves the data from the row cache. Although the overhead for this operation is small, for large datasets it may not be trivial. If you need to access the property values from the returned objects (for example, if you iterate over all the objects to calculate the average value of a particular attribute), then it is more efficient to set returnsObjectsAsFaults to false to avoid the additional overhead.\n\nSee Also\nManaging How Results Are Returned\nvar resultType: NSFetchRequestResultType\nThe result type of the fetch request.\nvar includesPendingChanges: Bool\nA Boolean value that indicates whether, when the fetch is executed, it matches against currently unsaved changes in the managed object context.\nvar propertiesToFetch: [Any]?\nA collection of either property descriptions or string property names that specify which properties should be returned by the fetch.\nvar returnsDistinctResults: Bool\nA Boolean value that indicates whether the fetch request returns only distinct values for the fields specified by propertiesToFetch.\nvar includesPropertyValues: Bool\nA Boolean value that indicates whether, when the fetch is executed, property data is obtained from the persistent store.\nvar shouldRefreshRefetchedObjects: Bool\nA Boolean value that indicates whether the property values of fetched objects will be updated with the current values in the persistent store.\nstruct NSFetchRequestResultType\nConstants that specify the possible result types a fetch request can return.\nprotocol NSFetchRequestResult\nAn abstract protocol used with parameterized fetch requests."
  },
  {
    "title": "NSInvalidatedObjectIDsKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsinvalidatedobjectidskey",
    "html": "See Also\nUser Info Dictionary Keys\nlet NSAffectedObjectsErrorKey: String\nThe key for objects prompting an error.\nlet NSAffectedStoresErrorKey: String\nThe key for stores prompting an error.\nlet NSDetailedErrorsKey: String\nIf multiple validation errors occur in one operation, they are collected in an array and added with this key to the “top-level error” of the operation.\nlet NSDeletedObjectIDsKey: String\nA user info key to identify deleted object identifiers in notifications after saving a managed object context.\nlet NSInsertedObjectIDsKey: String\nA user info key to identify inserted object identifiers in notifications after saving a managed object context.\nlet NSPersistentHistoryTokenKey: String\nA user info key to identify the history token in persistent store remote change notifications.\nlet NSPersistentStoreURLKey: String\nA user info key to identify the store URL in persistent store remote change notifications.\nlet NSRefreshedObjectIDsKey: String\nA user info key to identify refreshed object identifiers in notifications after saving a managed object context.\nlet NSUpdatedObjectIDsKey: String\nA user info key to identify updated object identifiers in notifications after saving a managed object context."
  },
  {
    "title": "NSCoreDataVersionNumber_iPhoneOS_9_0 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber_iphoneos_9_0",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "persistentStore(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468824-persistentstore",
    "html": "Parameters\nURL\n\nAn URL object that specifies the location of a persistent store.\n\nReturn Value\n\nThe persistent store at the location specified by URL.\n\nSee Also\nManaging a store’s location\nfunc setURL(URL, for: NSPersistentStore) -> Bool\nChanges the location of the specified persistent store.\nfunc url(for: NSPersistentStore) -> URL\nReturns the location of the provided persistent store."
  },
  {
    "title": "setURL(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468858-seturl",
    "html": "Parameters\nurl\n\nThe new location for store.\n\nstore\n\nA persistent store associated with the receiver.\n\nReturn Value\n\ntrue if the store was relocated, otherwise false.\n\nDiscussion\n\nFor atomic stores, this method alters the location to which the next save operation will write the file; for non-atomic stores, invoking this method will relinquish the existing connection and create a new one at the specified URL. (For non-atomic stores, a store must already exist at the destination URL; a new store will not be created.)\n\nSee Also\nManaging a store’s location\nfunc persistentStore(for: URL) -> NSPersistentStore?\nReturns the persistent store for the specified file URL.\nfunc url(for: NSPersistentStore) -> URL\nReturns the location of the provided persistent store."
  },
  {
    "title": "addPersistentStore(with:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1640556-addpersistentstore",
    "html": "Parameters\nstoreDescription\n\nA description object used to create and load a persistent store.\n\nblock\n\nThe completion handler block that’s invoked after the store is added.\n\nReturn Value\n\nThe newly created store or, if an error occurs, nil.\n\nSee Also\nAdding or removing a store\nfunc addPersistentStore(type: NSPersistentStore.StoreType, configuration: String?, at: URL, options: [AnyHashable : Any]?) -> NSPersistentStore\nAdds a specific type of persistent store at the provided location.\nfunc remove(NSPersistentStore)\nRemoves the specified persistent store from the coordinator."
  },
  {
    "title": "replacePersistentStore(at:destinationOptions:withPersistentStoreFrom:sourceOptions:type:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/3747536-replacepersistentstore",
    "html": "Parameters\ndestinationURL\n\nThe location of the store to replace.\n\ndestinationOptions\n\nA dictionary containing key-value pairs that specify the behavior and characteristics of the store to replace. For more information, see Store options.\n\nsourceURL\n\nThe location of the store to use as the replacement.\n\nsourceOptions\n\nA dictionary containing key-value pairs that specify the behavior and characteristics of the replacement store. For more information, see Store options.\n\nsourceType\n\nThe store type of the replacement store. For possible values, see NSPersistentStore.StoreType.\n\nSee Also\nModifying a store\nfunc destroyPersistentStore(at: URL, type: NSPersistentStore.StoreType, options: [AnyHashable : Any]?)\nDeletes a specific type of persistent store at the provided location.\nfunc migratePersistentStore(NSPersistentStore, to: URL, options: [AnyHashable : Any]?, type: NSPersistentStore.StoreType) -> NSPersistentStore\nChanges the location and, if necessary, the store type of the specified persistent store."
  },
  {
    "title": "registerStoreClass(_:type:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/3747535-registerstoreclass",
    "html": "Parameters\nstoreClass\n\nA subclass of NSPersistentStore.\n\ntype\n\nThe store type. For possible values, see NSPersistentStore.StoreType.\n\nDiscussion\n\nYou must register the subclass before you load instances of it into the persistent store coordinator. To unregister a subclass for a specific store type, use nil for storeClass.\n\nSee Also\nRegistering store types\nclass var registeredStoreTypes: [String : NSValue]\nThe coordinator’s registered store types."
  },
  {
    "title": "persistentStores | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468790-persistentstores",
    "html": "See Also\nManaging configuration\nvar name: String?\nThe coordinator’s name.\nvar managedObjectModel: NSManagedObjectModel\nThe coordinator’s managed object model."
  },
  {
    "title": "managedObjectModel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468834-managedobjectmodel",
    "html": "See Also\nManaging configuration\nvar name: String?\nThe coordinator’s name.\nvar persistentStores: [NSPersistentStore]\nThe coordinator’s persistent stores."
  },
  {
    "title": "name | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468929-name",
    "html": "See Also\nManaging configuration\nvar managedObjectModel: NSManagedObjectModel\nThe coordinator’s managed object model.\nvar persistentStores: [NSPersistentStore]\nThe coordinator’s persistent stores."
  },
  {
    "title": "performBackgroundTask(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcontainer/3802020-performbackgroundtask",
    "html": "See Also\nPerforming Background Tasks\nfunc performBackgroundTask((NSManagedObjectContext) -> Void)\nExecutes a closure on a private queue using an ephemeral managed object context."
  },
  {
    "title": "Store options | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/store_options",
    "html": "Topics\nConstants\nlet NSReadOnlyPersistentStoreOption: String\nA flag that indicates whether a store is treated as read-only or not.\nlet NSValidateXMLStoreOption: String\nA flag that indicates whether an XML file should be validated with the DTD while opening.\nlet NSPersistentStoreTimeoutOption: String\nOptions key that specifies the connection timeout for Core Data stores.\nlet NSSQLitePragmasOption: String\nOptions key for a dictionary of SQLite pragma settings with pragma values indexed by pragma names as keys.\nlet NSSQLiteAnalyzeOption: String\nOption key to run an analysis of the store data to optimize indices based on statistical information when the store is added to the coordinator.\nlet NSSQLiteManualVacuumOption: String\nOption key to rebuild the store file, forcing a database wide defragmentation when the store is added to the coordinator.\nlet NSPersistentStoreFileProtectionKey: String\nKey to represent the protection class for the persistent store.\nlet NSPersistentStoreForceDestroyOption: String\nA flag that indicates the coordinator destroys the store file even if the operation might be unsafe, overriding locks, if necessary.\nDeprecated\nlet NSExternalRecordsDirectoryOption: String\nOption indicating the directory where Spotlight external record files should be written to.\nDeprecated\nlet NSExternalRecordExtensionOption: String\nOption indicating the file extension to use for Spotlight external record files.\nDeprecated\nlet NSExternalRecordsFileFormatOption: String\nOption to specify the file format of a Spotlight external records.\nDeprecated\nlet NSPersistentStoreUbiquitousContentNameKey: String\nOption to specify that a persistent store has a given name in ubiquity.\nDeprecated\nlet NSPersistentStoreUbiquitousContentURLKey: String\nOption to specify the log path to use for ubiquitous content logs.\nDeprecated\nlet NSPersistentStoreUbiquitousPeerTokenOption: String\nThe corresponding value is an optionally specified string which will be mixed in to Core Data’s identifier for each iCloud peer. The value must be an alphanumeric string without any special characters, whitespace or punctuation. The primary use for this option is to allow multiple applications on the same peer (device) to share a Core Data store integrated with iCloud. Each application will require its own store file.\nDeprecated\nlet NSPersistentStoreRemoveUbiquitousMetadataOption: String\nThe corresponding value is an NSNumber object representing a boolean that indicates whether the receiver should remove all associated ubiquity metadata from a persistent store. You typically use this option during migration or copying to disassociate a persistent store file from an iCloud account.\nDeprecated\nlet NSPersistentStoreUbiquitousContainerIdentifierKey: String\nThe corresponding value is a string specifying the iCloud container identifier Core Data should pass to url(forUbiquityContainerIdentifier:).\nDeprecated\nlet NSPersistentStoreRebuildFromUbiquitousContentOption: String\nThe corresponding value is an NSNumber object representing a boolean that indicates whether the receiver should erase the local store file and rebuild it from the iCloud data in Mobile Documents.\nDeprecated\nSee Also\nCreating a persistent store coordinator\ninit(managedObjectModel: NSManagedObjectModel)\nCreates a persistent store coordinator with the specified managed object model.\nMigration options\nThe options keys that configure the migration behavior of a persistent store.\nStore versions\nThe metadata keys you use when comparing store versions."
  },
  {
    "title": "init(managedObjectModel:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468895-init",
    "html": "Parameters\nmodel\n\nA managed object model.\n\nReturn Value\n\nThe receiver, initialized with model.\n\nSee Also\nCreating a persistent store coordinator\nStore options\nThe options keys that configure the behavior and characteristics of a persistent store.\nMigration options\nThe options keys that configure the migration behavior of a persistent store.\nStore versions\nThe metadata keys you use when comparing store versions."
  },
  {
    "title": "loadPersistentStores(completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcontainer/1640568-loadpersistentstores",
    "html": "Parameters\nblock\n\nOnce the loading of the persistent stores has completed, this block will be executed on the calling thread.\n\nDiscussion\n\nOnce the persistent container has been initialized, you need to execute loadPersistentStores(completionHandler:) to instruct the container to load the persistent stores and complete the creation of the Core Data stack.\n\nOnce the completion handler has fired, the stack is fully initialized and is ready for use. The completion handler will be called once for each persistent store that is created.\n\nIf there is an error in the loading of the persistent stores, the NSError value will be populated.\n\nSee Also\nManaging Persistent Stores\nvar persistentStoreDescriptions: [NSPersistentStoreDescription]\nThe descriptions of the container’s persistent stores."
  },
  {
    "title": "persistentStoreDescriptions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcontainer/1640577-persistentstoredescriptions",
    "html": "Discussion\n\nIf you want to override the type (or types) of persistent store(s) used by the persistent container, you can set this property with an array of NSPersistentStoreDescription objects.\n\nIf you will be configuring custom persistent store descriptions, you must set this property before calling loadPersistentStores(completionHandler:).\n\nSee Also\nManaging Persistent Stores\nfunc loadPersistentStores(completionHandler: (NSPersistentStoreDescription, Error?) -> Void)\nLoads the persistent stores."
  },
  {
    "title": "init(name:managedObjectModel:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcontainer/1640584-init",
    "html": "Parameters\nname\n\nThe name used by the persistent container.\n\nmodel\n\nThe managed object model to be used by the persistent container.\n\nReturn Value\n\nA persistent container initialized with the given name and model.\n\nDiscussion\n\nBy default, the provided name value of the container is used as the name of the persisent store associated with the container. Passing in the NSManagedObjectModel object overrides the lookup of the model by the provided name value.\n\nSee Also\nCreating a Container\ninit(name: String)\nCreates a container with the specified name."
  },
  {
    "title": "name | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcontainer/1640579-name",
    "html": "Discussion\n\nThis property is passed in as part of the initialization of the persistent container. This name is used to locate the NSManagedObjectModel (if the NSManagedObjectModel object is not passed in as part of the initialization) and is used to name the persistent store.\n\nSee Also\nGetting the Container’s Configuration\nvar managedObjectModel: NSManagedObjectModel\nThe container’s managed object model.\nvar persistentStoreCoordinator: NSPersistentStoreCoordinator\nThe container’s persistent store coordinator."
  },
  {
    "title": "allowsCloudEncryption | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription/3746827-allowscloudencryption",
    "html": "Discussion\n\nSet this property to true to store the attribute’s value in an encrypted form in iCloud. Only use this property with new attributes. Core Data doesn’t support encrypting attributes that already exist in your CloudKit schema, or attributes that represent relationships between entities.\n\nYou can also set this property using the Allow Cloud Encryption attribute in the Attributes inspector of the Core Data model editor.\n\nImportant\n\nAttributes can’t change their encryption state after you promote them to your production CloudKit schema. If you choose to encrypt an attribute, it always remains that way.\n\nSee Also\nConfiguring the behavior\nvar allowsExternalBinaryDataStorage: Bool\nA Boolean value that indicates whether the attribute allows external binary storage.\nvar defaultValue: Any?\nThe default value of the attribute.\nvar preservesValueInHistoryOnDeletion: Bool\nA Boolean value that indicates whether the attribute records its value in the persistent history transaction for a managed object’s deletion.\nvar valueTransformerName: String?\nThe name of the transformer to use for the attribute value."
  },
  {
    "title": "isCountOnlyRequest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequestexpression/1391670-iscountonlyrequest",
    "html": "Discussion\n\ntrue if the receiver represents a count-only fetch request, otherwise false. If this method returns false, the managed object context (from the contextExpression) will perform fetch(_:): with the requestExpression; if this method returns true, the managed object context will perform count(for:) with the requestExpression.\n\nSee Also\nExamining a Fetch Request Expression\nvar requestExpression: NSExpression\nThe expression for the receiver’s fetch request.\nvar contextExpression: NSExpression\nThe expression for the receiver’s managed object context."
  },
  {
    "title": "inferredMappingModel(forSourceModel:destinationModel:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmappingmodel/1506468-inferredmappingmodel",
    "html": "Parameters\nsource\n\nThe source managed object model.\n\ndestination\n\nThe destination managed object model.\n\nerror\n\nIf a problem occurs, on return contains an NSInferredMappingModelError error that describes the problem.\n\nThe error’s user info will contain additional details about why inferring the mapping model failed (check for the following keys: reason, entity, property.\n\nReturn Value\n\nA newly-created mapping model to migrate data from the source to the destination model. If the mapping model can not be created, returns nil.\n\nDiscussion\n\nA model will be created only if all changes are simple enough to be able to reasonably infer a mapping (for example, removing or renaming an attribute, adding an optional attribute or relationship, or adding renaming or deleting an entity). Element IDs are used to track renamed properties and entities.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns a nonoptional result and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nCreating a Mapping\ninit?(from: [Bundle]?, forSourceModel: NSManagedObjectModel?, destinationModel: NSManagedObjectModel?)\nReturns the mapping model that will translate data from the source to the destination model.\ninit?(contentsOf: URL?)\nReturns a mapping model initialized from a given URL."
  },
  {
    "title": "refresh(_:mergeChanges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506224-refresh",
    "html": "Parameters\nobject\n\nA managed object.\n\nflag\n\nA Boolean value.\n\nIf flag is false, the context discards pending changes and the managed object becomes a fault. Upon next access, the context reloads the object’s values from the persistent store or last cached state.\n\nIf flag is true, the context reloads the object’s property values from the store or the cache. Then the context applies local changes over the newly loaded values. Merging the local values into object always succeeds, and never results in a merge conflict.\n\nDiscussion\n\nIf you call this method before the stalenessInterval expires, the context reloads the data from the cache instead of fetching from the store. If flag is true, this method doesn’t affect any transient properties. If flag is false, the object disposes the value of transient properties.\n\nYou typically use this method to ensure data freshness if multiple managed object contexts share a single persistent store. You can use this method to resolve an optimistic locking failure when attempting to save.\n\nTurning object into a fault by setting flag to false breaks strong references to related managed objects. You can use this method to release a portion of your object graph if you want to constrain memory usage.\n\nSee Also\nHandling managed objects\nvar shouldDeleteInaccessibleFaults: Bool\nA Boolean value that determines whether the context turns inaccessible faults into deleted objects.\nvar insertedObjects: Set<NSManagedObject>\nThe set of objects that have been inserted into the context but not yet saved in a persistent store.\nvar updatedObjects: Set<NSManagedObject>\nThe set of objects registered with the context that have uncommitted changes.\nvar deletedObjects: Set<NSManagedObject>\nThe set of objects that will be removed from their persistent store during the next save operation.\nfunc shouldHandleInaccessibleFault(NSManagedObject, for: NSManagedObjectID, triggeredByProperty: NSPropertyDescription?) -> Bool\nCreates a log of the inaccessible fault.\nfunc insert(NSManagedObject)\nRegisters an object to be inserted in the context’s persistent store the next time changes are saved.\nfunc delete(NSManagedObject)\nSpecifies an object that should be removed from its persistent store when changes are committed.\nfunc assign(Any, to: NSPersistentStore)\nSpecifies the store in which a newly inserted object will be saved.\nfunc obtainPermanentIDs(for: [NSManagedObject])\nConverts to permanent IDs the object IDs of the objects in a given array.\nfunc detectConflicts(for: NSManagedObject)\nMarks an object for conflict detection.\nfunc processPendingChanges()\nForces the context to process changes to the object graph.\nfunc observeValue(forKeyPath: String?, of: Any?, change: [String : Any]?, context: UnsafeMutableRawPointer?)\nAllows a context that has registered as an observer of a value to be notified of a change to that value.\nRelated Documentation\nvar stalenessInterval: TimeInterval\nThe maximum length of time that may have elapsed since the store previously fetched data before fulfilling a fault issues a new fetch.\nfunc reset()\nReturns the context to its base state."
  },
  {
    "title": "NSIncrementalStore | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsincrementalstore",
    "html": "Overview\n\nYou use this interface to create persistent stores that load and save data incrementally, allowing for the management of large and/or shared datasets.\n\nSubclassing Notes\nMethods to Override\n\nIn a subclass of NSIncrementalStore, you must override the following methods to provide behavior appropriate for your store:\n\nloadMetadata()\n\nexecute(_:with:)\n\nnewValuesForObject(with:with:)\n\nnewValue(forRelationship:forObjectWith:with:)\n\nobtainPermanentIDs(for:)\n\nYou can also optionally override the following methods:\n\nidentifierForNewStore(at:)\n\nmanagedObjectContextDidRegisterObjects(with:)\n\nmanagedObjectContextDidUnregisterObjects(with:)\n\nThere is no need to override the methods that you must otherwise override for a subclass of NSPersistentStore.\n\nMethods that Should Not Be Overridden\n\nIn a subclass of NSIncrementalStore, you should not override the following methods:\n\nnewObjectID(for:referenceObject:)\n\nreferenceObject(for:)\n\nTopics\nManipulating Managed Objects\nfunc execute(NSPersistentStoreRequest, with: NSManagedObjectContext?) -> Any\nReturns a value as appropriate for the given request, or nil if the request cannot be completed.\nfunc newValuesForObject(with: NSManagedObjectID, with: NSManagedObjectContext) -> NSIncrementalStoreNode\nReturns an incremental store node encapsulating the persistent external values of the object with a given object ID.\nfunc newValue(forRelationship: NSRelationshipDescription, forObjectWith: NSManagedObjectID, with: NSManagedObjectContext?) -> Any\nReturns the relationship for the given relationship of the object with a given object ID.\nfunc obtainPermanentIDs(for: [NSManagedObject]) -> [NSManagedObjectID]\nReturns an array containing the object IDs for a given array of newly-inserted objects.\nfunc newObjectID(for: NSEntityDescription, referenceObject: Any) -> NSManagedObjectID\nReturns a new object ID that uses given data as the key.\nfunc referenceObject(for: NSManagedObjectID) -> Any\nReturns the reference data used to construct a given object ID.\nResponding to Context Changes\nfunc managedObjectContextDidRegisterObjects(with: [NSManagedObjectID])\nIndicates that objects identified by a given array of object IDs are in use in a managed object context.\nfunc managedObjectContextDidUnregisterObjects(with: [NSManagedObjectID])\nIndicates that objects identified by a given array of object IDs are no longer being used by a managed object context.\nAccessing Metadata\nclass func identifierForNewStore(at: URL) -> Any\nReturns the identifier for the store at a given URL.\nfunc loadMetadata()\nLoads the metadata for the store.\nRelationships\nInherits From\nNSPersistentStore\nSee Also\nStore Coordination\nclass NSPersistentStoreCoordinator\nAn object that enables an app’s contexts and the underlying persistent stores to work together.\nclass NSPersistentStore\nThe abstract base class for all Core Data persistent stores.\nclass NSPersistentStoreDescription\nA description object used to create and load a persistent store.\nclass NSPersistentStoreRequest\nCriteria used to retrieve data from or save data to a persistent store.\nclass NSPersistentStoreResult\nThe abstract base class for results returned from a persistent store coordinator.\nclass NSPersistentStoreAsynchronousResult\nA concrete class used to represent the results of an asynchronous request.\nclass NSSaveChangesRequest\nAn encapsulation of a collection of changes to be made by an object store in response to a save operation on a managed object context.\nclass NSAtomicStore\nAn abstract superclass that you subclass to create a Core Data atomic store.\nclass NSAtomicStoreCacheNode\nA concrete class that you use to represent basic nodes in a Core Data atomic store.\nclass NSIncrementalStoreNode\nA concrete class used to represent basic nodes in a Core Data incremental store."
  },
  {
    "title": "NSAtomicStoreCacheNode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsatomicstorecachenode",
    "html": "Overview\n\nA node represents a single record in a persistent store.\n\nYou can subclass NSAtomicStoreCacheNode to provide custom behavior.\n\nTopics\nInitializing a Cache Node\ninit(objectID: NSManagedObjectID)\nReturns a cache node for the given managed object ID.\nManaging Node Data\nvar objectID: NSManagedObjectID\nThe managed object ID of the node.\nvar propertyCache: NSMutableDictionary?\nThe property cache dictionary of the node.\nfunc value(forKey: String) -> Any?\nReturns the value for a given key.\nfunc setValue(Any?, forKey: String)\nSets the value for the given key.\nRelationships\nInherits From\nNSObject\nSee Also\nStore Coordination\nclass NSPersistentStoreCoordinator\nAn object that enables an app’s contexts and the underlying persistent stores to work together.\nclass NSPersistentStore\nThe abstract base class for all Core Data persistent stores.\nclass NSPersistentStoreDescription\nA description object used to create and load a persistent store.\nclass NSPersistentStoreRequest\nCriteria used to retrieve data from or save data to a persistent store.\nclass NSPersistentStoreResult\nThe abstract base class for results returned from a persistent store coordinator.\nclass NSPersistentStoreAsynchronousResult\nA concrete class used to represent the results of an asynchronous request.\nclass NSSaveChangesRequest\nAn encapsulation of a collection of changes to be made by an object store in response to a save operation on a managed object context.\nclass NSAtomicStore\nAn abstract superclass that you subclass to create a Core Data atomic store.\nclass NSIncrementalStore\nAn abstract superclass defining the API through which Core Data communicates with a store.\nclass NSIncrementalStoreNode\nA concrete class used to represent basic nodes in a Core Data incremental store."
  },
  {
    "title": "fetchRequestWithEntityName: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequest/1563437-fetchrequestwithentityname",
    "html": "Parameters\nentityName\n\nThe name of the entity to fetch.\n\nReturn Value\n\nA fetch request configured to fetch the entity named entityName.\n\nDiscussion\n\nThis method provides a convenient way to configure the entity for a fetch request without having to retrieve an NSEntityDescription object. When the fetch is executed, the request uses the managed object context to find the entity with the given name. The model associated with the context’s persistent store coordinator must contain an entity named entityName.\n\nSee Also\nManaging the Fetch Request’s Entity\n- init\nCreates a new fetch request.\n- initWithEntityName:\nInitializes a fetch request configured with a given entity name.\nentityName\nThe name of the entity the request is configured to fetch.\nentity\nThe entity specified for the fetch request.\nincludesSubentities\nA Boolean value that indicates whether the fetch request includes subentities in the results.\nNSFetchRequestResultType\nConstants that specify the possible result types a fetch request can return.\nRelated Documentation\nPredicate Programming Guide\nCore Data Programming Guide"
  },
  {
    "title": "fetchRequest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedpropertydescription/1494679-fetchrequest",
    "html": "Discussion\n\nSetting the fetch request raises an exception if the receiver’s model has been used by an object graph manager.\n\nSee Also\nRelated Documentation\nCore Data Programming Guide\nPredicate Programming Guide"
  },
  {
    "title": "NSIncrementalStoreNode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsincrementalstorenode",
    "html": "Overview\n\nA node represents a single record in a persistent store.\n\nYou can subclass NSIncrementalStoreNode to provide custom behavior.\n\nTopics\nInitializing a Node\ninit(objectID: NSManagedObjectID, withValues: [String : Any], version: UInt64)\nReturns an object initialized with the given values.\nManaging Node Data\nvar objectID: NSManagedObjectID\nThe object ID that identifies the data stored by the receiver.\nfunc update(withValues: [String : Any], version: UInt64)\nUpdate the values and version to reflect new data being saved to or loaded from the external store.\nfunc value(for: NSPropertyDescription) -> Any?\nReturns the value for the given property.\nvar version: UInt64\nThe version of data in the receiver.\nRelationships\nInherits From\nNSObject\nSee Also\nStore Coordination\nclass NSPersistentStoreCoordinator\nAn object that enables an app’s contexts and the underlying persistent stores to work together.\nclass NSPersistentStore\nThe abstract base class for all Core Data persistent stores.\nclass NSPersistentStoreDescription\nA description object used to create and load a persistent store.\nclass NSPersistentStoreRequest\nCriteria used to retrieve data from or save data to a persistent store.\nclass NSPersistentStoreResult\nThe abstract base class for results returned from a persistent store coordinator.\nclass NSPersistentStoreAsynchronousResult\nA concrete class used to represent the results of an asynchronous request.\nclass NSSaveChangesRequest\nAn encapsulation of a collection of changes to be made by an object store in response to a save operation on a managed object context.\nclass NSAtomicStore\nAn abstract superclass that you subclass to create a Core Data atomic store.\nclass NSAtomicStoreCacheNode\nA concrete class that you use to represent basic nodes in a Core Data atomic store.\nclass NSIncrementalStore\nAn abstract superclass defining the API through which Core Data communicates with a store."
  },
  {
    "title": "expression | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsexpressiondescription/1506817-expression",
    "html": "See Also\nConfiguring the Expression Description\nvar resultType: NSAttributeDescription.AttributeType\nThe attribute type of the expression’s result."
  },
  {
    "title": "NSPersistentStoreResult | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoreresult",
    "html": "Relationships\nInherits From\nNSObject\nSee Also\nStore Coordination\nclass NSPersistentStoreCoordinator\nAn object that enables an app’s contexts and the underlying persistent stores to work together.\nclass NSPersistentStore\nThe abstract base class for all Core Data persistent stores.\nclass NSPersistentStoreDescription\nA description object used to create and load a persistent store.\nclass NSPersistentStoreRequest\nCriteria used to retrieve data from or save data to a persistent store.\nclass NSPersistentStoreAsynchronousResult\nA concrete class used to represent the results of an asynchronous request.\nclass NSSaveChangesRequest\nAn encapsulation of a collection of changes to be made by an object store in response to a save operation on a managed object context.\nclass NSAtomicStore\nAn abstract superclass that you subclass to create a Core Data atomic store.\nclass NSAtomicStoreCacheNode\nA concrete class that you use to represent basic nodes in a Core Data atomic store.\nclass NSIncrementalStore\nAn abstract superclass defining the API through which Core Data communicates with a store.\nclass NSIncrementalStoreNode\nA concrete class used to represent basic nodes in a Core Data incremental store."
  },
  {
    "title": "versionHash | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsrelationshipdescription/1506791-versionhash",
    "html": "Discussion\n\nTo calculate its version hash, the relationship combines its superclass’s versionHash property with the values of inverseRelationship, destinationEntity, minCount, and maxCount."
  },
  {
    "title": "NSPersistentStore | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore",
    "html": "Overview\n\nCore Data provides four store types—SQLite, Binary, XML, and In-Memory (the XML store is not available on iOS); these are described in Persistent Store Features. Core Data also provides subclasses of NSPersistentStore that you can use to define your own store types: NSAtomicStore and NSIncrementalStore. The Binary and XML stores are examples of atomic stores that inherit functionality from NSAtomicStore.\n\nSubclassing Notes\n\nYou should not subclass NSPersistentStore directly. Core Data only supports subclassing of NSAtomicStore and NSIncrementalStore.\n\nThe designated initializer is init(persistentStoreCoordinator:configurationName:at:options:). When you implement the initializer, you must ensure you load metadata during initialization and set it using metadata.\n\nYou must override these methods:\n\ntype\n\nmetadata\n\nmetadataForPersistentStore(with:)\n\nsetMetadata(_:forPersistentStoreAt:)\n\nTopics\nCreating a Persistent Store\ninit(persistentStoreCoordinator: NSPersistentStoreCoordinator?, configurationName: String?, at: URL, options: [AnyHashable : Any]?)\nReturns a store initialized with the given arguments.\nGetting Store Configuration\nvar configurationName: String\nThe name of the managed object model configuration that creates the persistent store.\nvar options: [AnyHashable : Any]?\nThe options that Core Data uses to create the store.\nvar persistentStoreCoordinator: NSPersistentStoreCoordinator?\nThe persistent store coordinator that loads the persistent store.\nvar type: String\nThe type string of the persistent store.\nstruct NSPersistentStore.StoreType\nThe types of persistent stores that Core Data supports.\nPersistent Store Types\nPersist data through the available store types.\nManaging Store Attributes\nvar identifier: String!\nThe unique identifier for the persistent store.\nvar isReadOnly: Bool\nA Boolean value that indicates whether the persistent store is read-only.\nvar url: URL?\nThe URL for the persistent store.\nManaging Store Metadata\nclass func metadataForPersistentStore(with: URL) -> [String : Any]\nReturns the metadata from the persistent store at the given URL.\nclass func setMetadata([String : Any]?, forPersistentStoreAt: URL)\nSets the metadata for the store at a given URL.\nfunc loadMetadata()\nInstructs the persistent store to load its metadata.\nvar metadata: [String : Any]!\nThe metadata for the persistent store.\nResponding to the Store Life Cycle\nfunc didAdd(to: NSPersistentStoreCoordinator)\nInvoked after the persistent store has been added to the persistent store coordinator.\nfunc willRemove(from: NSPersistentStoreCoordinator?)\nInvoked before the persistent store is removed from the persistent store coordinator.\nIntegrating with Spotlight\nvar coreSpotlightExporter: NSCoreDataCoreSpotlightDelegate\nThe spotlight exporter associated with this persistent store.\nProviding a Migration Manager\nclass func migrationManagerClass() -> AnyClass\nReturns the migration manager class for this store class.\nRelationships\nInherits From\nNSObject\nSee Also\nStore Coordination\nclass NSPersistentStoreCoordinator\nAn object that enables an app’s contexts and the underlying persistent stores to work together.\nclass NSPersistentStoreDescription\nA description object used to create and load a persistent store.\nclass NSPersistentStoreRequest\nCriteria used to retrieve data from or save data to a persistent store.\nclass NSPersistentStoreResult\nThe abstract base class for results returned from a persistent store coordinator.\nclass NSPersistentStoreAsynchronousResult\nA concrete class used to represent the results of an asynchronous request.\nclass NSSaveChangesRequest\nAn encapsulation of a collection of changes to be made by an object store in response to a save operation on a managed object context.\nclass NSAtomicStore\nAn abstract superclass that you subclass to create a Core Data atomic store.\nclass NSAtomicStoreCacheNode\nA concrete class that you use to represent basic nodes in a Core Data atomic store.\nclass NSIncrementalStore\nAn abstract superclass defining the API through which Core Data communicates with a store.\nclass NSIncrementalStoreNode\nA concrete class used to represent basic nodes in a Core Data incremental store."
  },
  {
    "title": "Notification keys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/notification_keys",
    "html": "Topics\nConstants\nlet NSAddedPersistentStoresKey: String\nKey for the array of stores that were added.\nlet NSRemovedPersistentStoresKey: String\nKey for the array of stores that were removed.\nlet NSUUIDChangedPersistentStoresKey: String\nKey for an array containing the old and new stores.\nlet NSPersistentStoreConnectionPoolMaxSizeKey: String\nThe maximum connection pool size to use on a store that supports concurrent request handling.\nlet NSPersistentStoreSaveConflictsErrorKey: String\nThe key for the array of merge conflict objects (instances of NSMergeConflict).\nlet NSPersistentStoreUbiquitousTransitionTypeKey: String\nIn the NSPersistentStoreCoordinatorStoresWillChange and NSPersistentStoreCoordinatorStoresDidChange userInfo dictionaries, this identifies the type of event. The corresponding value is one of the NSPersistentStoreUbiquitousTransitionType enum values as an NSNumber object.\nDeprecated\nSee Also\nResponding to changes of the coordinator’s registered stores\nstatic let NSPersistentStoreCoordinatorStoresWillChange: NSNotification.Name\nA notification that posts before the coordinator changes its registered stores.\nstatic let NSPersistentStoreCoordinatorStoresDidChange: NSNotification.Name\nA notification that posts after a coordinator changes its registered stores.\nstatic let NSPersistentStoreCoordinatorWillRemoveStore: NSNotification.Name\nA notification that posts before a coordinator removes a store."
  },
  {
    "title": "Deprecated Symbols | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/deprecated_symbols",
    "html": "Topics\nDeprecated constants\nlet NSXMLExternalRecordType: String\nSpecifies an XML file format.\nDeprecated\nlet NSBinaryExternalRecordType: String\nSpecifies a binary file format\nDeprecated\nDeprecated enumerations\nenum NSPersistentStoreUbiquitousTransitionType\nThese constants are used as the value corresponding to the NSPersistentStoreUbiquitousTransitionTypeKey in the user info dictionary of NSPersistentStoreCoordinatorStoresWillChange and NSPersistentStoreCoordinatorStoresDidChange notifications to identify the type of event leading to a change.\nDeprecated\nDeprecated type properties\nstatic let NSPersistentStoreDidImportUbiquitousContentChanges: NSNotification.Name\nPosted after records are imported from the ubiquitous content store.\nDeprecated\nDeprecated type methods\nclass func elementsDerived(fromExternalRecordAt: URL) -> [AnyHashable : Any]\nReturns a dictionary containing the parsed elements derived from the Spotlight external record file that is specified by the given URL.\nDeprecated\nclass func metadataForPersistentStore(with: URL) -> [AnyHashable : Any]\nReturns a dictionary that contains the metadata stored in the persistent store at the specified location.\nDeprecated\nclass func metadataForPersistentStore(ofType: String?, at: URL) -> [String : Any]\nReturns a dictionary containing the metadata stored in the persistent store at a given URL.\nDeprecated\nclass func metadataForPersistentStore(ofType: String, at: URL, options: [AnyHashable : Any]?) -> [String : Any]\nReturns the metadata of a specific type of persistent store at the provided location.\nclass func registerStoreClass(AnyClass?, forStoreType: String)\nRegisters a persistent store subclass using the specified store type identifier.\nclass func removeUbiquitousContentAndPersistentStore(at: URL, options: [AnyHashable : Any]?)\nDeletes all ubiquitous content for all peers for the persistent store at a given URL and also delete the local store file.\nDeprecated\nclass func setMetadata([String : Any]?, forPersistentStoreOfType: String?, at: URL)\nSets the metadata for a given store.\nDeprecated\nclass func setMetadata([String : Any]?, forPersistentStoreOfType: String, at: URL, options: [AnyHashable : Any]?)\nUpdates the metadata of a specific type of persistent store at the provided location.\nDeprecated instance methods\nfunc addPersistentStore(ofType: String, configurationName: String?, at: URL?, options: [AnyHashable : Any]?) -> NSPersistentStore\nAdds a specific type of persistent store at the provided location.\nfunc destroyPersistentStore(at: URL, ofType: String, options: [AnyHashable : Any]?)\nDeletes a specific type of persistent store at the provided location.\nfunc importStore(withIdentifier: String?, fromExternalRecordsDirectoryAt: URL, to: URL, options: [AnyHashable : Any]?, ofType: String) -> NSPersistentStore\nCreates and populates a store with the external records found at a given URL.\nDeprecated\nfunc lock()\nAttempts to acquire a lock.\nDeprecated\nfunc migratePersistentStore(NSPersistentStore, to: URL, options: [AnyHashable : Any]?, withType: String) -> NSPersistentStore\nChanges the location and, if necessary, the store type of the specified persistent store.\nfunc replacePersistentStore(at: URL, destinationOptions: [AnyHashable : Any]?, withPersistentStoreFrom: URL, sourceOptions: [AnyHashable : Any]?, ofType: String)\nReplaces one persistent store with another.\nfunc tryLock() -> Bool\nAttempts to acquire a lock.\nDeprecated\nfunc unlock()\nRelinquishes a previously acquired lock.\nDeprecated\nfunc perform(() -> Void)\nExecutes the provided closure asynchronously on the coordinator’s queue.\nfunc performAndWait(() -> Void)\nExecutes the provided closure on the coordinator’s queue and waits for it to finish."
  },
  {
    "title": "NSCoreDataCoreSpotlightDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredatacorespotlightdelegate",
    "html": "Overview\n\nNote\n\nCore Spotlight integration is only available for persistent stores that have a store type of sqlite, and which use persistent history tracking. For more information, see Consuming relevant store changes.\n\nTopics\nCreating a Core Spotlight Delegate\ninit(forStoreWith: NSPersistentStoreDescription, coordinator: NSPersistentStoreCoordinator)\nCreates a Core Spotlight delegate with the specified store description and coordinator.\ninit(forStoreWith: NSPersistentStoreDescription, model: NSManagedObjectModel)\nCreates a Core Spotlight delegate with the specified store description and managed object model.\nDeprecated\nConfiguring the Index\nvar isIndexingEnabled: Bool\nA Boolean value that indicates whether Core Data is currently updating the Core Spotlight index with the persistent store’s entities.\nfunc domainIdentifier() -> String\nReturns the domain identifier.\nfunc indexName() -> String?\nReturns the index’s name.\nManaging the Index\nfunc attributeSet(for: NSManagedObject) -> CSSearchableItemAttributeSet?\nReturns the searchable attributes for the specified managed object.\nfunc deleteSpotlightIndex(completionHandler: (Error?) -> Void)\nDeletes all searchable items from the configured index.\nfunc startSpotlightIndexing()\nStarts the indexing of the store’s entities.\nfunc stopSpotlightIndexing()\nStops the indexing of the store’s entities.\nUpdating the Index\nstatic let indexDidUpdateNotification: Notification.Name\nThe notification the delegate posts after Spotlight updates the index.\nfunc searchableIndex(CSSearchableIndex, reindexAllSearchableItemsWithAcknowledgementHandler: () -> Void)\nReindexes all searchable items and clears any local state.\nfunc searchableIndex(CSSearchableIndex, reindexSearchableItemsWithIdentifiers: [String], acknowledgementHandler: () -> Void)\nReindexes the searchable items for the specified identifiers.\nRelationships\nInherits From\nNSObject\nSee Also\nIntegrating with Spotlight\nlet NSCoreDataCoreSpotlightExporter: String\nThe key you use to specify your Core Spotlight delegate.\nSpotlight record keys\nThe keys for the values that exist in Spotlight’s external record files.\nShowcase App Data in Spotlight\n​ ​Index app data so users can find it by using Spotlight search. ​​"
  },
  {
    "title": "Spotlight record keys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/spotlight_record_keys",
    "html": "Topics\nConstants\nlet NSEntityNameInPathKey: String\nDictionary key for the entity name extracted from an external record file.\nDeprecated\nlet NSStoreUUIDInPathKey: String\nDictionary key for the store UUID extracted from an external record file.\nDeprecated\nlet NSStorePathKey: String\nDictionary key for the store path (an instance of NSURL) extracted from an external record file.\nDeprecated\nlet NSModelPathKey: String\nDictionary key for the managed object model path (an instance of NSURL) extracted from an external record file.\nDeprecated\nlet NSObjectURIKey: String\nDictionary key for the object URI extracted from an external record file.\nDeprecated\nSee Also\nIntegrating with Spotlight\nlet NSCoreDataCoreSpotlightExporter: String\nThe key you use to specify your Core Spotlight delegate.\nclass NSCoreDataCoreSpotlightDelegate\nA set of methods that enable integration with Core Spotlight.\nShowcase App Data in Spotlight\n​ ​Index app data so users can find it by using Spotlight search. ​​"
  },
  {
    "title": "Showcase App Data in Spotlight | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/showcase_app_data_in_spotlight",
    "html": "Overview\n\n​\n\nNote\n\nThis sample code project is associated with WWDC21 session 10098: Showcase App Data in Spotlight.\n\nSee Also\nIntegrating with Spotlight\nlet NSCoreDataCoreSpotlightExporter: String\nThe key you use to specify your Core Spotlight delegate.\nclass NSCoreDataCoreSpotlightDelegate\nA set of methods that enable integration with Core Spotlight.\nSpotlight record keys\nThe keys for the values that exist in Spotlight’s external record files."
  },
  {
    "title": "managedObjectID(forURIRepresentation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468882-managedobjectid",
    "html": "Parameters\nURL\n\nAn URL object containing a URI that specify a managed object.\n\nReturn Value\n\nAn object ID for the object specified by URL.\n\nDiscussion\n\nThe URI representation contains a UUID of the store the ID is coming from, and the coordinator can match it against the stores added to it.\n\nSee Also\nRelated Documentation\nfunc object(with: NSManagedObjectID) -> NSManagedObject\nReturns either an existing object from the context or a fault that represents that object.\nfunc uriRepresentation() -> URL\nReturns a URI that provides an archiveable reference to the object for the object ID."
  },
  {
    "title": "persistentStoreCoordinator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506618-persistentstorecoordinator",
    "html": "Return Value\n\nThe persistent store coordinator of the receiver.\n\nDiscussion\n\nThe coordinator provides the managed object model and handles persistency. Note that multiple contexts can share a coordinator. May not be nil.\n\nSetting persistentStoreCoordinator to nil will raise an exception. If you want to “disconnect\" a context from its persistent store coordinator, you should simply set all strong references to the context to nil and allow it to be deallocated normally.\n\nFor more details, see Parent store.\n\nSee Also\nConfiguring a context\nvar parent: NSManagedObjectContext?\nThe parent of the context.\nvar name: String?\nThe developer-provided name of the context.\nvar userInfo: NSMutableDictionary\nThe user information for the context."
  },
  {
    "title": "NSManagedObjectContextConcurrencyType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontextconcurrencytype",
    "html": "Topics\nConcurrency Types\ncase privateQueueConcurrencyType\nSpecifies that the context will be associated with a private dispatch queue.\ncase mainQueueConcurrencyType\nSpecifies that the context will be associated with the main queue.\ncase confinementConcurrencyType\nSpecifies that the context will use the thread confinement pattern.\nDeprecated\nRelationships\nConforms To\nSendable\nSee Also\nCreating a context\ninit(NSManagedObjectContext.ConcurrencyType)\nCreates a context that uses the specified concurrency type.\nstruct NSManagedObjectContext.ConcurrencyType\nThe concurrency types to use with a managed object context."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/3747518-init",
    "html": "Parameters\ntype\n\nThe context’s concurrency type. For possible values, see NSManagedObjectContext.ConcurrencyType.\n\nDiscussion\n\nFor more information, see Concurrency.\n\nSee Also\nCreating a context\nstruct NSManagedObjectContext.ConcurrencyType\nThe concurrency types to use with a managed object context.\nenum NSManagedObjectContextConcurrencyType\nThe concurrency types you can use with a managed object context."
  },
  {
    "title": "NSManagedObjectContext.ConcurrencyType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/concurrencytype",
    "html": "Topics\nConcurrency Types\nstatic let mainQueue: NSManagedObjectContext.ConcurrencyType\nA concurrency type where the context performs its tasks on the main queue.\nstatic let privateQueue: NSManagedObjectContext.ConcurrencyType\nA concurrency type where the context performs its tasks on a private queue.\nCreating a Concurrency Type\ninit(rawValue: NSManagedObjectContextConcurrencyType)\nCreates a concurrency type using the specified raw value.\nGetting a Concurrency Type’s Raw Value\nvar rawValue: NSManagedObjectContextConcurrencyType\nThe concurrency type’s cardinal value.\ntypealias NSManagedObjectContext.ConcurrencyType.RawValue\nThe type the conforming type uses to represent its values.\nHashing a Concurrency Type\nvar hashValue: Int\nThe concurrency type’s computed hash value.\nfunc hash(into: inout Hasher)\nHashes the components of the concurrency type using the provided hasher.\nComparing Concurrency Types\nstatic func != (NSManagedObjectContext.ConcurrencyType, NSManagedObjectContext.ConcurrencyType) -> Bool\nReturns a Boolean value that indicates whether two concurrency types are unequal.\nRelationships\nConforms To\nHashable\nRawRepresentable\nSee Also\nCreating a context\ninit(NSManagedObjectContext.ConcurrencyType)\nCreates a context that uses the specified concurrency type.\nenum NSManagedObjectContextConcurrencyType\nThe concurrency types you can use with a managed object context."
  },
  {
    "title": "parent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506529-parent",
    "html": "Discussion\n\nnil indicates there is no parent context. For more details, see Parent store.\n\nSee Also\nConfiguring a context\nvar persistentStoreCoordinator: NSPersistentStoreCoordinator?\nThe persistent store coordinator of the context.\nvar name: String?\nThe developer-provided name of the context.\nvar userInfo: NSMutableDictionary\nThe user information for the context."
  },
  {
    "title": "userInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506740-userinfo",
    "html": "See Also\nConfiguring a context\nvar persistentStoreCoordinator: NSPersistentStoreCoordinator?\nThe persistent store coordinator of the context.\nvar parent: NSManagedObjectContext?\nThe parent of the context.\nvar name: String?\nThe developer-provided name of the context."
  },
  {
    "title": "NSCoreDataVersionNumber_iPhoneOS_5_0 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber_iphoneos_5_0",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSPersistentHistoryTransaction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorytransaction",
    "html": "Topics\nRequesting Notifications\nfunc objectIDNotification() -> Notification\nObtains a notification for use in merging the transaction’s changes into a managed object context.\nCustomizing History Fetch Requests\nclass var fetchRequest: NSFetchRequest<NSFetchRequestResult>?\nA fetch request that has the persistent history transaction as the entity.\nclass var entityDescription: NSEntityDescription?\nThe entity description of the persistent history transaction entity.\nclass func entityDescription(with: NSManagedObjectContext) -> NSEntityDescription?\nRequests an entity description using the provided context for the managed object type affected by the transaction.\nInspecting Transaction Details\nvar author: String?\nA granular description of the context that made the persistent history change, if available.\nvar bundleID: String\nThe originating bundle’s identifier.\nvar changes: [NSPersistentHistoryChange]?\nThe array of persistent history changes.\nvar contextName: String?\nThe originating context’s name.\nvar processID: String\nThe originating process’s identifier.\nvar storeID: String\nThe originating store’s identifier.\nvar timestamp: Date\nThe date of the persistent history change.\nvar token: NSPersistentHistoryToken\nThe token that represents this transaction in the persistent history.\nvar transactionNumber: Int64\nThe transaction’s numeric identifier.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nSee Also\nReading History\nclass NSPersistentHistoryChange\nA change representing the insertion, update, or deletion of a managed object in the persistent store."
  },
  {
    "title": "NSCoreDataVersionNumber | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "bundleID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorytransaction/2894943-bundleid",
    "html": "See Also\nInspecting Transaction Details\nvar author: String?\nA granular description of the context that made the persistent history change, if available.\nvar changes: [NSPersistentHistoryChange]?\nThe array of persistent history changes.\nvar contextName: String?\nThe originating context’s name.\nvar processID: String\nThe originating process’s identifier.\nvar storeID: String\nThe originating store’s identifier.\nvar timestamp: Date\nThe date of the persistent history change.\nvar token: NSPersistentHistoryToken\nThe token that represents this transaction in the persistent history.\nvar transactionNumber: Int64\nThe transaction’s numeric identifier."
  },
  {
    "title": "NSCoreDataVersionNumber10_5_3 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber10_5_3",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSCoreDataVersionNumber10_6 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber10_6",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSCoreDataVersionNumber10_5 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber10_5",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSCoreDataVersionNumber10_6_3 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber10_6_3",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSCoreDataVersionNumber10_9_3 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber10_9_3",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSCoreDataVersionNumber_iPhoneOS_4_3 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber_iphoneos_4_3",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSDeleteRule | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsdeleterule",
    "html": "Topics\nDelete Rules\ncase noActionDeleteRule\nA rule that prevents modification of the referenced managed objects.\ncase nullifyDeleteRule\nA rule that nullifies the inverse relationship of the referenced managed objects.\ncase cascadeDeleteRule\nA rule that deletes the referenced managed objects.\ncase denyDeleteRule\nA rule that prevents the deletion of the owning managed object if the relationship has references to other objects.\nRelationships\nConforms To\nSendable\nSee Also\nConfiguring Delete Behavior\nvar deleteRule: NSDeleteRule\nThe rule to apply when you delete the relationship’s owning managed object."
  },
  {
    "title": "NSMergeConflict | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmergeconflict",
    "html": "Overview\n\nA conflict can occur in two situations:\n\nBetween the managed object context and its in-memory cached state at the persistent store coordinator layer.\n\nBetween the cached state at the persistent store coordinator layer and the external store (file, database, and so forth). In this case, the merge conflict has a cached snapshot and a persisted snapshot. The source object is also provided as a convenience, but it is not directly involved in the conflict.\n\nSnapshot dictionaries include values for all attributes and to-one relationships, but not to-many relationships. Relationship values are NSManagedObjectID references. To-many relationships must be pulled from the persistent store as needed.\n\nTopics\nInitializing a Merge Conflict\ninit(source: NSManagedObject, newVersion: Int, oldVersion: Int, cachedSnapshot: [String : Any]?, persistedSnapshot: [String : Any]?)\nInitializes a merge conflict.\nAccessing Merge Conflict Details\nvar sourceObject: NSManagedObject\nThe source object for the conflict.\nvar objectSnapshot: [String : Any]?\nA dictionary containing the values of the source object.\nvar cachedSnapshot: [String : Any]?\nA dictionary containing the values of the source object held in the persistent store coordinator layer.\nvar persistedSnapshot: [String : Any]?\nA dictionary containing the values of the source object held in the persistent store.\nvar newVersionNumber: Int\nThe new version number for the change.\nvar oldVersionNumber: Int\nThe old version number for the change.\nRelationships\nInherits From\nNSObject\nSee Also\nConflict Management\nclass NSConstraintConflict\nAn encapsulation of conflicts that occur during an attempt to save a managed object.\nclass NSMergePolicy\nA policy object that you use to resolve conflicts between the persistent store and in-memory versions of managed objects.\nclass NSQueryGenerationToken\nA token that indicates which generation of the persistent store is being accessed."
  },
  {
    "title": "deleteRule | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsrelationshipdescription/1506870-deleterule",
    "html": "Discussion\n\nThe default value is NSDeleteRule.nullifyDeleteRule. For possible values, see NSDeleteRule.\n\nSee Also\nConfiguring Delete Behavior\nenum NSDeleteRule\nConstants that determine what happens when you delete a relationship’s owning managed object."
  },
  {
    "title": "sqlite | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/storetype/3747530-sqlite",
    "html": "See Also\nStore Types\nstatic let binary: NSPersistentStore.StoreType\nA store that reads from and writes to a persistent binary file.\nstatic let inMemory: NSPersistentStore.StoreType\nAn ephemeral store that reads from and writes to memory only.\nstatic let xml: NSPersistentStore.StoreType\nA store that reads from and writes to a persistent XML file."
  },
  {
    "title": "minCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsrelationshipdescription/1506599-mincount",
    "html": "Discussion\n\nIf you declare a relationship attribute as optional when defining your entities, the framework only enforces minCount and maxCount when that attribute is not nil.\n\nThe default value is 0.\n\nSee Also\nConfiguring Cardinality\nvar isToMany: Bool\nReturns a Boolean value that indicates whether the relationship can contain many managed objects.\nvar maxCount: Int\nThe maximum number of managed objects the relationship can reference."
  },
  {
    "title": "inverseRelationship | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsrelationshipdescription/1506596-inverserelationship",
    "html": "Discussion\n\nThe inverse relationship is the description of the current relationship from the destination entity’s perspective. For example, the inverse of a department’s relationship to an employee (a to-many relationship) is the employees’ relationship to the department (a to-one relationship).\n\nSee Also\nConfiguring the Destination\nvar destinationEntity: NSEntityDescription?\nThe type of object the relationship contains.\nvar isOrdered: Bool\nA Boolean value that determines whether the relationship preserves the order of the referenced managed objects."
  },
  {
    "title": "isOrdered | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsrelationshipdescription/1506382-isordered",
    "html": "Discussion\n\nThe default value is false.\n\nSee Also\nConfiguring the Destination\nvar inverseRelationship: NSRelationshipDescription?\nThe relationship that represents the inverse of the current relationship.\nvar destinationEntity: NSEntityDescription?\nThe type of object the relationship contains."
  },
  {
    "title": "NSPersistentStoreRemoteChangeNotificationPostOptionKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoreremotechangenotificationpostoptionkey",
    "html": "See Also\nPersistent Store Metadata Keys\nlet NSBinaryStoreInsecureDecodingCompatibilityOption: String\nA flag that indicates Core Data decodes the binary store insecurely.\nlet NSBinaryStoreSecureDecodingClasses: String\nAn additional set of classes to use while decoding a binary store."
  },
  {
    "title": "relationshipKeyPathsForPrefetching | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequest/1506813-relationshipkeypathsforprefetchi",
    "html": "Discussion\n\nThis property is an array of relationship key-path strings in NSKeyValueCoding notation (as you typically use with value(forKeyPath:)). The default value is an empty array (no prefetching).\n\nPrefetching allows Core Data to obtain related objects in a single fetch (per entity), rather than incurring subsequent access to the store for each individual record as their faults are tripped. For example, given an Employee entity with a relationship to a Department entity, suppose you fetch all the employees, and then for each print out their name and the name of the department to which they belong. In this case, a fault might be fired for each individual Department object. This can represent a significant overhead. You can avoid this by prefetching the department relationship in the Employee fetch, as illustrated in Listing 1.\n\n(For more details, see Core Data Performance in Core Data Programming Guide)\n\nlet request = NSFetchRequest(entityName: \"Employee\") as NSFetchRequest<NSManagedObject>\nrequest.relationshipKeyPathsForPrefetching = [\"department\"]\n"
  },
  {
    "title": "shouldRefreshRefetchedObjects | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequest/1506440-shouldrefreshrefetchedobjects",
    "html": "Discussion\n\nThis value is true if the property values of fetched objects will be updated with the current values in the persistent store; otherwise, it is false.\n\nBy default when you fetch objects, they maintain their current property values, even if the values in the persistent store have changed. Invoking this method with the parameter true means that when the fetch is executed, the property values of fetched objects are updated with the current values in the persistent store. This is a more convenient way to ensure that managed object property values are consistent with the store than by using refresh(_:mergeChanges:) (NSManagedObjetContext) for multiple objects in turn.\n\nSee Also\nManaging How Results Are Returned\nvar resultType: NSFetchRequestResultType\nThe result type of the fetch request.\nvar includesPendingChanges: Bool\nA Boolean value that indicates whether, when the fetch is executed, it matches against currently unsaved changes in the managed object context.\nvar propertiesToFetch: [Any]?\nA collection of either property descriptions or string property names that specify which properties should be returned by the fetch.\nvar returnsDistinctResults: Bool\nA Boolean value that indicates whether the fetch request returns only distinct values for the fields specified by propertiesToFetch.\nvar includesPropertyValues: Bool\nA Boolean value that indicates whether, when the fetch is executed, property data is obtained from the persistent store.\nvar returnsObjectsAsFaults: Bool\nA Boolean value that indicates whether the objects resulting from a fetch request are faults.\nstruct NSFetchRequestResultType\nConstants that specify the possible result types a fetch request can return.\nprotocol NSFetchRequestResult\nAn abstract protocol used with parameterized fetch requests."
  },
  {
    "title": "includesPendingChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequest/1506724-includespendingchanges",
    "html": "Discussion\n\nThis value is true if when the fetch is executed, the fetch will match against currently unsaved changes in the managed object context; otherwise the value is false. The default value is true.\n\nIf the value is false, the fetch request doesn't check unsaved changes and only returns objects that matched the predicate in the persistent store.\n\nSpecial Considerations\n\nA value of true is not supported in conjunction with the result type dictionaryResultType, including calculation of aggregate results (such as max and min). For dictionaries, the array returned from the fetch reflects the current state in the persistent store, and does not take into account any pending changes, insertions, or deletions in the context.\n\nIf you need to take pending changes into account for some simple aggregations like max and min, you can instead use a normal fetch request, sorted on the attribute you want, with a fetch limit of 1.\n\nSee Also\nManaging How Results Are Returned\nvar resultType: NSFetchRequestResultType\nThe result type of the fetch request.\nvar propertiesToFetch: [Any]?\nA collection of either property descriptions or string property names that specify which properties should be returned by the fetch.\nvar returnsDistinctResults: Bool\nA Boolean value that indicates whether the fetch request returns only distinct values for the fields specified by propertiesToFetch.\nvar includesPropertyValues: Bool\nA Boolean value that indicates whether, when the fetch is executed, property data is obtained from the persistent store.\nvar shouldRefreshRefetchedObjects: Bool\nA Boolean value that indicates whether the property values of fetched objects will be updated with the current values in the persistent store.\nvar returnsObjectsAsFaults: Bool\nA Boolean value that indicates whether the objects resulting from a fetch request are faults.\nstruct NSFetchRequestResultType\nConstants that specify the possible result types a fetch request can return.\nprotocol NSFetchRequestResult\nAn abstract protocol used with parameterized fetch requests."
  },
  {
    "title": "havingPredicate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequest/1506429-havingpredicate",
    "html": "Discussion\n\nIf a havingPredicate value is supplied, the predicate will be run after .Specifying a havingPredicate requires that propertiesToGroupBy also be specified.\n\nSee Also\nGrouping and Filtering Dictionary Results\nvar propertiesToGroupBy: [Any]?\nAn array of objects that indicates how data should be grouped before a select statement is run in a SQL database.\nRelated Documentation\nclass NSFetchRequest\nA description of search criteria used to retrieve data from a persistent store."
  },
  {
    "title": "execute() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequest/1640594-execute",
    "html": "Discussion\n\nCalling execute on an NSFetchRequest will cause the NSFetchRequest to run against the managed object context (NSManagedObjectContext) that is associated with the queue on which the execute is called."
  },
  {
    "title": "propertiesToGroupBy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequest/1506191-propertiestogroupby",
    "html": "Discussion\n\nAn array of NSPropertyDescription or NSExpressionDescription objects or key-path strings that indicate how data should be grouped before a select statement is run in an SQL database.\n\nIf you use this setting, you must set the resultType to dictionaryResultType, and the SELECT values must be literals, aggregates, or columns specified in propertiesToGroupBy.\n\nAggregates will operate on the groups specified in propertiesToGroupBy\n\nrather than the whole table. If you set propertiesToGroupBy, you can also set a predicate to filter rows that are returned by propertiesToGroupBy.\n\nSee havingPredicate.\n\nSee Also\nGrouping and Filtering Dictionary Results\nvar havingPredicate: NSPredicate?\nThe predicate used to filter rows being returned by a query containing a GROUP BY directive."
  },
  {
    "title": "propertiesToFetch | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequest/1506851-propertiestofetch",
    "html": "Discussion\n\nProperty descriptions can either be instances of NSPropertyDescription or NSString. The property descriptions may represent attributes, to-one relationships, or expressions. The name of an attribute or relationship description must match the name of a description on the fetch request’s entity.\n\nSpecial Considerations\n\nYou must set the entity for the fetch request before setting this value; otherwise, NSFetchRequest throws an invalidArgumentException exception.\n\nThis property can be set with managedObjectResultType and thereby implement a partial faulting (whereby only some of the properties are populated) of the returned objects, as well as the dictionaryResultType to define what properties are included in the resulting NSDictionary.\n\nSee Also\nManaging How Results Are Returned\nvar resultType: NSFetchRequestResultType\nThe result type of the fetch request.\nvar includesPendingChanges: Bool\nA Boolean value that indicates whether, when the fetch is executed, it matches against currently unsaved changes in the managed object context.\nvar returnsDistinctResults: Bool\nA Boolean value that indicates whether the fetch request returns only distinct values for the fields specified by propertiesToFetch.\nvar includesPropertyValues: Bool\nA Boolean value that indicates whether, when the fetch is executed, property data is obtained from the persistent store.\nvar shouldRefreshRefetchedObjects: Bool\nA Boolean value that indicates whether the property values of fetched objects will be updated with the current values in the persistent store.\nvar returnsObjectsAsFaults: Bool\nA Boolean value that indicates whether the objects resulting from a fetch request are faults.\nstruct NSFetchRequestResultType\nConstants that specify the possible result types a fetch request can return.\nprotocol NSFetchRequestResult\nAn abstract protocol used with parameterized fetch requests."
  },
  {
    "title": "NSInsertedObjectIDsKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsinsertedobjectidskey",
    "html": "See Also\nUser Info Dictionary Keys\nlet NSAffectedObjectsErrorKey: String\nThe key for objects prompting an error.\nlet NSAffectedStoresErrorKey: String\nThe key for stores prompting an error.\nlet NSDetailedErrorsKey: String\nIf multiple validation errors occur in one operation, they are collected in an array and added with this key to the “top-level error” of the operation.\nlet NSDeletedObjectIDsKey: String\nA user info key to identify deleted object identifiers in notifications after saving a managed object context.\nlet NSInvalidatedObjectIDsKey: String\nA user info key to identify invalidated object identifiers in notifications after saving a managed object context.\nlet NSPersistentHistoryTokenKey: String\nA user info key to identify the history token in persistent store remote change notifications.\nlet NSPersistentStoreURLKey: String\nA user info key to identify the store URL in persistent store remote change notifications.\nlet NSRefreshedObjectIDsKey: String\nA user info key to identify refreshed object identifiers in notifications after saving a managed object context.\nlet NSUpdatedObjectIDsKey: String\nA user info key to identify updated object identifiers in notifications after saving a managed object context."
  },
  {
    "title": "NSCoreDataVersionNumber_iPhoneOS_9_3 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber_iphoneos_9_3",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2."
  },
  {
    "title": "NSCoreDataVersionNumber_iPhoneOS_8_3 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber_iphoneos_8_3",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSDeletedObjectIDsKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsdeletedobjectidskey",
    "html": "See Also\nUser Info Dictionary Keys\nlet NSAffectedObjectsErrorKey: String\nThe key for objects prompting an error.\nlet NSAffectedStoresErrorKey: String\nThe key for stores prompting an error.\nlet NSDetailedErrorsKey: String\nIf multiple validation errors occur in one operation, they are collected in an array and added with this key to the “top-level error” of the operation.\nlet NSInsertedObjectIDsKey: String\nA user info key to identify inserted object identifiers in notifications after saving a managed object context.\nlet NSInvalidatedObjectIDsKey: String\nA user info key to identify invalidated object identifiers in notifications after saving a managed object context.\nlet NSPersistentHistoryTokenKey: String\nA user info key to identify the history token in persistent store remote change notifications.\nlet NSPersistentStoreURLKey: String\nA user info key to identify the store URL in persistent store remote change notifications.\nlet NSRefreshedObjectIDsKey: String\nA user info key to identify refreshed object identifiers in notifications after saving a managed object context.\nlet NSUpdatedObjectIDsKey: String\nA user info key to identify updated object identifiers in notifications after saving a managed object context."
  },
  {
    "title": "NSCoreDataVersionNumber_iPhoneOS_9_2 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber_iphoneos_9_2",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSDetailedErrorsKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsdetailederrorskey",
    "html": "See Also\nUser Info Dictionary Keys\nlet NSAffectedObjectsErrorKey: String\nThe key for objects prompting an error.\nlet NSAffectedStoresErrorKey: String\nThe key for stores prompting an error.\nlet NSDeletedObjectIDsKey: String\nA user info key to identify deleted object identifiers in notifications after saving a managed object context.\nlet NSInsertedObjectIDsKey: String\nA user info key to identify inserted object identifiers in notifications after saving a managed object context.\nlet NSInvalidatedObjectIDsKey: String\nA user info key to identify invalidated object identifiers in notifications after saving a managed object context.\nlet NSPersistentHistoryTokenKey: String\nA user info key to identify the history token in persistent store remote change notifications.\nlet NSPersistentStoreURLKey: String\nA user info key to identify the store URL in persistent store remote change notifications.\nlet NSRefreshedObjectIDsKey: String\nA user info key to identify refreshed object identifiers in notifications after saving a managed object context.\nlet NSUpdatedObjectIDsKey: String\nA user info key to identify updated object identifiers in notifications after saving a managed object context."
  },
  {
    "title": "NSAffectedStoresErrorKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsaffectedstoreserrorkey",
    "html": "See Also\nUser Info Dictionary Keys\nlet NSAffectedObjectsErrorKey: String\nThe key for objects prompting an error.\nlet NSDetailedErrorsKey: String\nIf multiple validation errors occur in one operation, they are collected in an array and added with this key to the “top-level error” of the operation.\nlet NSDeletedObjectIDsKey: String\nA user info key to identify deleted object identifiers in notifications after saving a managed object context.\nlet NSInsertedObjectIDsKey: String\nA user info key to identify inserted object identifiers in notifications after saving a managed object context.\nlet NSInvalidatedObjectIDsKey: String\nA user info key to identify invalidated object identifiers in notifications after saving a managed object context.\nlet NSPersistentHistoryTokenKey: String\nA user info key to identify the history token in persistent store remote change notifications.\nlet NSPersistentStoreURLKey: String\nA user info key to identify the store URL in persistent store remote change notifications.\nlet NSRefreshedObjectIDsKey: String\nA user info key to identify refreshed object identifiers in notifications after saving a managed object context.\nlet NSUpdatedObjectIDsKey: String\nA user info key to identify updated object identifiers in notifications after saving a managed object context."
  },
  {
    "title": "NSAffectedObjectsErrorKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsaffectedobjectserrorkey",
    "html": "See Also\nUser Info Dictionary Keys\nlet NSAffectedStoresErrorKey: String\nThe key for stores prompting an error.\nlet NSDetailedErrorsKey: String\nIf multiple validation errors occur in one operation, they are collected in an array and added with this key to the “top-level error” of the operation.\nlet NSDeletedObjectIDsKey: String\nA user info key to identify deleted object identifiers in notifications after saving a managed object context.\nlet NSInsertedObjectIDsKey: String\nA user info key to identify inserted object identifiers in notifications after saving a managed object context.\nlet NSInvalidatedObjectIDsKey: String\nA user info key to identify invalidated object identifiers in notifications after saving a managed object context.\nlet NSPersistentHistoryTokenKey: String\nA user info key to identify the history token in persistent store remote change notifications.\nlet NSPersistentStoreURLKey: String\nA user info key to identify the store URL in persistent store remote change notifications.\nlet NSRefreshedObjectIDsKey: String\nA user info key to identify refreshed object identifiers in notifications after saving a managed object context.\nlet NSUpdatedObjectIDsKey: String\nA user info key to identify updated object identifiers in notifications after saving a managed object context."
  },
  {
    "title": "NSSQLiteErrorDomain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nssqliteerrordomain",
    "html": "Discussion\n\nThe value of \"code\" corresponds to preexisting values in SQLite."
  },
  {
    "title": "destroyPersistentStore(at:type:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/3747532-destroypersistentstore",
    "html": "Parameters\nurl\n\nThe store’s location.\n\nstoreType\n\nThe store type. For possible values, see NSPersistentStore.StoreType.\n\noptions\n\nA dictionary containing key-value pairs that specify store behavior and characteristics. For more information, see Store options.\n\nSee Also\nModifying a store\nfunc migratePersistentStore(NSPersistentStore, to: URL, options: [AnyHashable : Any]?, type: NSPersistentStore.StoreType) -> NSPersistentStore\nChanges the location and, if necessary, the store type of the specified persistent store.\nfunc replacePersistentStore(at: URL, destinationOptions: [AnyHashable : Any]?, withPersistentStoreFrom: URL, sourceOptions: [AnyHashable : Any]?, type: NSPersistentStore.StoreType)\nReplaces one persistent store with another."
  },
  {
    "title": "remove(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468907-remove",
    "html": "Parameters\nstore\n\nA persistent store.\n\nerror\n\nIf an error occurs, upon return contains an instance of NSError that describes the problem.\n\nReturn Value\n\ntrue if the store is removed, otherwise false.\n\nDiscussion\n\nHandling Errors in Swift:\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nAdding or removing a store\nfunc addPersistentStore(type: NSPersistentStore.StoreType, configuration: String?, at: URL, options: [AnyHashable : Any]?) -> NSPersistentStore\nAdds a specific type of persistent store at the provided location.\nfunc addPersistentStore(with: NSPersistentStoreDescription, completionHandler: (NSPersistentStoreDescription, Error?) -> Void)\nAdds a persistent store using the provided description.\nRelated Documentation\nfunc migratePersistentStore(NSPersistentStore, to: URL, options: [AnyHashable : Any]?, withType: String) -> NSPersistentStore\nChanges the location and, if necessary, the store type of the specified persistent store.\nfunc addPersistentStore(ofType: String, configurationName: String?, at: URL?, options: [AnyHashable : Any]?) -> NSPersistentStore\nAdds a specific type of persistent store at the provided location."
  },
  {
    "title": "migratePersistentStore(_:to:options:type:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/3747534-migratepersistentstore",
    "html": "Parameters\nstore\n\nThe peristent store to migrate.\n\nstoreURL\n\nThe location of the new persistent store.\n\noptions\n\nA dictionary containing key-value pairs that specify store behavior and characteristics. For more information, see Store options.\n\nstoreType\n\nThe new store type. For possible values, see NSPersistentStore.StoreType.\n\nDiscussion\n\nPerformance may vary depending on the store types of the old and new stores. Invoking this method removes the specified store from the coordinator.\n\nSee Also\nModifying a store\nfunc destroyPersistentStore(at: URL, type: NSPersistentStore.StoreType, options: [AnyHashable : Any]?)\nDeletes a specific type of persistent store at the provided location.\nfunc replacePersistentStore(at: URL, destinationOptions: [AnyHashable : Any]?, withPersistentStoreFrom: URL, sourceOptions: [AnyHashable : Any]?, type: NSPersistentStore.StoreType)\nReplaces one persistent store with another."
  },
  {
    "title": "addPersistentStore(type:configuration:at:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/3747531-addpersistentstore",
    "html": "Parameters\ntype\n\nThe store type. For possible values, see NSPersistentStore.StoreType.\n\nconfiguration\n\nThe name of the configuration to use. You must define this configuration in the coordinator’s managed object model.\n\nstoreURL\n\nThe store’s location.\n\noptions\n\nA dictionary containing key-value pairs that specify store behavior and characteristics. For more information, see Store options.\n\nSee Also\nAdding or removing a store\nfunc addPersistentStore(with: NSPersistentStoreDescription, completionHandler: (NSPersistentStoreDescription, Error?) -> Void)\nAdds a persistent store using the provided description.\nfunc remove(NSPersistentStore)\nRemoves the specified persistent store from the coordinator."
  },
  {
    "title": "registeredStoreTypes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator/1468870-registeredstoretypes",
    "html": "Return Value\n\nA dictionary of the registered store types—the keys are the store type strings, and the values are the NSPersistentStore subclasses.\n\nSee Also\nRegistering store types\nclass func registerStoreClass(AnyClass?, type: NSPersistentStore.StoreType)\nRegisters a persistent store subclass using the specified store type."
  },
  {
    "title": "expression(forFetch:context:countOnly:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequestexpression/1391661-expression",
    "html": "Parameters\nfetch\n\nAn expression that evaluates to an instance of NSFetchRequest.\n\ncontext\n\nAn expression that evaluates to an instance of NSManagedObjectContext.\n\ncountFlag\n\nIf true, when the new expression is evaluated the managed object context (from context) will perform count(for:) with the fetch request (from fetch). If false, when the new expression is evaluated the managed object context will perform fetch(_:) with the fetch request.\n\nReturn Value\n\nAn expression which will evaluate to the result of executing a fetch request (from fetch) on a managed object context (from context).\n\nSee Also\nRelated Documentation\nPredicate Programming Guide\nCore Data Programming Guide"
  },
  {
    "title": "properties | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription/1425125-properties",
    "html": "Discussion\n\nThe elements in the array are instances of NSAttributeDescription, NSRelationshipDescription, and/or NSFetchedPropertyDescription.\n\nSpecial Considerations\n\nSetting the properties raises an exception if the receiver’s model has been used by an object graph manager.\n\nSee Also\nWorking with properties\nvar propertiesByName: [String : NSPropertyDescription]\nA dictionary containing the properties of the receiver.\nvar attributesByName: [String : NSAttributeDescription]\nThe attributes of the receiver in a dictionary.\nvar relationshipsByName: [String : NSRelationshipDescription]\nThe relationships of the receiver in a dictionary.\nfunc relationships(forDestination: NSEntityDescription) -> [NSRelationshipDescription]\nReturns an array containing the relationships of the receiver where the entity description of the relationship is a given entity."
  },
  {
    "title": "requestExpression | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequestexpression/1391672-requestexpression",
    "html": "Discussion\n\nThe expression must evaluate to an NSFetchRequest object.\n\nSee Also\nExamining a Fetch Request Expression\nvar contextExpression: NSExpression\nThe expression for the receiver’s managed object context.\nvar isCountOnlyRequest: Bool\nReturns a Boolean value that indicates whether the receiver represents a count-only fetch request."
  },
  {
    "title": "contextExpression | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequestexpression/1391665-contextexpression",
    "html": "Discussion\n\nThe expression must evaluate to an NSManagedObjectContext object.\n\nSee Also\nExamining a Fetch Request Expression\nvar requestExpression: NSExpression\nThe expression for the receiver’s fetch request.\nvar isCountOnlyRequest: Bool\nReturns a Boolean value that indicates whether the receiver represents a count-only fetch request."
  },
  {
    "title": "Deprecated Symbols | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsexpressiondescription/deprecated_symbols",
    "html": "Topics\nDeprecated Properties\nvar expressionResultType: NSAttributeType\nThe attribute type of the expression’s result."
  },
  {
    "title": "derivationExpression | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsderivedattributedescription/3174854-derivationexpression",
    "html": "Discussion\n\nWhen using derived attributes in an SQL store, this expression should be\n\na keypath expression (including @operation components)\n\na function expression using one of the predefined functions defined in NSExpression\n\nAny keypaths used in the expression must be accessible from the entity on which the derived attribute is specified.\n\nIf you try to add a store to a coordinator whose model contains derived attributes of a type not supported by the store, the add fails and throws an error."
  },
  {
    "title": "NSPersistentHistoryChange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorychange",
    "html": "Topics\nInspecting Change Metadata\nclass var fetchRequest: NSFetchRequest<NSFetchRequestResult>?\nA fetch request that has the persistent history change as the entity.\nclass var entityDescription: NSEntityDescription?\nThe entity description of the persistent history change entity.\nclass func entityDescription(with: NSManagedObjectContext) -> NSEntityDescription?\nRequests an entity description for the managed object type affected by the change using the provided context.\nInspecting Change Details\nvar changeID: Int64\nThe change’s numeric identifier.\nvar changeType: NSPersistentHistoryChangeType\nThe type of change to the managed object in the persistent store.\nenum NSPersistentHistoryChangeType\nThe types of changes to managed objects reflected in persistent history.\nvar changedObjectID: NSManagedObjectID\nThe identifier of the managed object that changed.\nvar tombstone: [AnyHashable : Any]?\nA dictionary of attributes marked for preservation after deletion, and their values when deleted.\nvar transaction: NSPersistentHistoryTransaction?\nThe persistent history transaction containing this change.\nvar updatedProperties: Set<NSPropertyDescription>?\nThe set of properties that were updated on the managed object.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nSee Also\nReading History\nclass NSPersistentHistoryTransaction\nA set of changes in the persistent history based on a context save or batch operation."
  },
  {
    "title": "changes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorytransaction/2894948-changes",
    "html": "See Also\nInspecting Transaction Details\nvar author: String?\nA granular description of the context that made the persistent history change, if available.\nvar bundleID: String\nThe originating bundle’s identifier.\nvar contextName: String?\nThe originating context’s name.\nvar processID: String\nThe originating process’s identifier.\nvar storeID: String\nThe originating store’s identifier.\nvar timestamp: Date\nThe date of the persistent history change.\nvar token: NSPersistentHistoryToken\nThe token that represents this transaction in the persistent history.\nvar transactionNumber: Int64\nThe transaction’s numeric identifier."
  },
  {
    "title": "NSPersistentHistoryTrackingKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorytrackingkey",
    "html": "Discussion\n\nPersistent history tracking is off by default.\n\nSee Also\nMaintaining a record of changes\nfunc currentPersistentHistoryToken(fromStores: [Any]?) -> NSPersistentHistoryToken?\nReturns a single persistent history token representing all of the specified stores."
  },
  {
    "title": "NSCoreDataVersionNumber_iPhoneOS_7_1 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber_iphoneos_7_1",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSCoreDataVersionNumber_iPhoneOS_6_1 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber_iphoneos_6_1",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSCoreDataVersionNumber_iPhoneOS_8_0 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber_iphoneos_8_0",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSCoreDataVersionNumber_iPhoneOS_7_0 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber_iphoneos_7_0",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSCoreDataVersionNumber_iPhoneOS_6_0 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber_iphoneos_6_0",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "storeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorytransaction/2894941-storeid",
    "html": "See Also\nInspecting Transaction Details\nvar author: String?\nA granular description of the context that made the persistent history change, if available.\nvar bundleID: String\nThe originating bundle’s identifier.\nvar changes: [NSPersistentHistoryChange]?\nThe array of persistent history changes.\nvar contextName: String?\nThe originating context’s name.\nvar processID: String\nThe originating process’s identifier.\nvar timestamp: Date\nThe date of the persistent history change.\nvar token: NSPersistentHistoryToken\nThe token that represents this transaction in the persistent history.\nvar transactionNumber: Int64\nThe transaction’s numeric identifier."
  },
  {
    "title": "NSCoreDataVersionNumber10_6_2 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber10_6_2",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSCoreDataVersionNumber10_7 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber10_7",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSCoreDataVersionNumber10_7_2 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber10_7_2",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSCoreDataVersionNumber10_7_3 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber10_7_3",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSCoreDataVersionNumber10_8 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber10_8",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSCoreDataVersionNumber10_7_4 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber10_7_4",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSCoreDataVersionNumber10_8_2 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber10_8_2",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSCoreDataVersionNumber10_9 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber10_9",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSCoreDataVersionNumber10_9_2 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber10_9_2",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSCoreDataVersionNumber_iPhoneOS_3_0 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber_iphoneos_3_0",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSCoreDataVersionNumber_iPhoneOS_3_2 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber_iphoneos_3_2",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSCoreDataVersionNumber_iPhoneOS_4_0 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber_iphoneos_4_0",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSCoreDataVersionNumber_iPhoneOS_3_1 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber_iphoneos_3_1",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSCoreDataVersionNumber_iPhoneOS_4_1 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber_iphoneos_4_1",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSCoreDataVersionNumber_iPhoneOS_4_2 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber_iphoneos_4_2",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSMigrationManager | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmigrationmanager",
    "html": "Topics\nCreating a Migration Manager\ninit(sourceModel: NSManagedObjectModel, destinationModel: NSManagedObjectModel)\nInitializes a migration manager instance with given source and destination models.\nGetting the Manager’s Configuration\nvar destinationContext: NSManagedObjectContext\nThe managed object context the migration manager uses for writing the destination persistent store.\nvar destinationModel: NSManagedObjectModel\nThe destination model for the migration manager.\nvar mappingModel: NSMappingModel\nThe mapping model for the migration manager.\nvar sourceContext: NSManagedObjectContext\nThe managed object context the migration manager uses for reading the source persistent store.\nvar sourceModel: NSManagedObjectModel\nThe source model for the migration manager.\nfunc destinationEntity(for: NSEntityMapping) -> NSEntityDescription?\nReturns the entity description for the destination entity of a given entity mapping.\nfunc sourceEntity(for: NSEntityMapping) -> NSEntityDescription?\nReturns the entity description for the source entity of a given entity mapping.\nCustomizing the Manager\nvar userInfo: [AnyHashable : Any]?\nThe user info for the migration manager.\nvar usesStoreSpecificMigrationManager: Bool\nA Boolean value that indicates whether the migration manager tries to use a store specific migration manager to perform the migration.\nManaging Sources and Destinations\nfunc associate(sourceInstance: NSManagedObject, withDestinationInstance: NSManagedObject, for: NSEntityMapping)\nAssociates a given source managed object instance with an array of destination instances for a given property mapping.\nfunc destinationInstances(forEntityMappingName: String, sourceInstances: [NSManagedObject]?) -> [NSManagedObject]\nReturns the managed object instances created in the destination store for the named entity mapping for the given array of source instances.\nfunc sourceInstances(forEntityMappingName: String, destinationInstances: [NSManagedObject]?) -> [NSManagedObject]\nReturns the managed object instances in the source store used to create the given destination instances for the passed in property mapping.\nPerforming a Migration\nfunc migrateStore(from: URL, type: NSPersistentStore.StoreType, options: [AnyHashable : Any]?, mapping: NSMappingModel, to: URL, type: NSPersistentStore.StoreType, options: [AnyHashable : Any]?)\nMigrates the source store to the destination using the specified mapping model.\nMonitoring a Migration’s Progress\nvar migrationProgress: Float\nA number between 0 and 1 that indicates the proportion of completeness of the migration.\nvar currentEntityMapping: NSEntityMapping\nThe entity mapping currently being processed.\nAborting a Migration\nfunc cancelMigrationWithError(Error)\nCancels the migration with a given error.\nfunc reset()\nResets the association tables for the migration.\nDeprecated\nDeprecated Symbols\nReview unsupported symbols and their replacements.\nRelationships\nInherits From\nNSObject\nSee Also\nEntity Mapping\nclass NSMappingModel\nA model instance that specifies how to map a model from a source to a destination managed object model.\nclass NSEntityMapping\nA mapping instance that specifies how to map an entity from a source to a destination managed object model.\nclass NSEntityMigrationPolicy\nA policy instance that customizes the migration process for an entity mapping.\nenum NSEntityMappingType\nThe types for mapping an entity between a source model and a destination model.\nclass NSPropertyMapping\nA mapping instance that specifies in a model how to map from a property in a source entity to a property in a destination entity."
  },
  {
    "title": "NSMappingModel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmappingmodel",
    "html": "Topics\nCreating a Mapping\ninit?(from: [Bundle]?, forSourceModel: NSManagedObjectModel?, destinationModel: NSManagedObjectModel?)\nReturns the mapping model that will translate data from the source to the destination model.\nclass func inferredMappingModel(forSourceModel: NSManagedObjectModel, destinationModel: NSManagedObjectModel) -> NSMappingModel\nReturns a newly created mapping model that will migrate data from the source to the destination model.\ninit?(contentsOf: URL?)\nReturns a mapping model initialized from a given URL.\nManaging Entity Mappings\nvar entityMappings: [NSEntityMapping]!\nThe entity mappings for the mapping model.\nvar entityMappingsByName: [String : NSEntityMapping]\nThe entity mappings for the mapping model, keyed by name.\nRelationships\nInherits From\nNSObject\nSee Also\nEntity Mapping\nclass NSMigrationManager\nA migration manager instance that performs a migration of data from one persistent store to another using a given mapping model.\nclass NSEntityMapping\nA mapping instance that specifies how to map an entity from a source to a destination managed object model.\nclass NSEntityMigrationPolicy\nA policy instance that customizes the migration process for an entity mapping.\nenum NSEntityMappingType\nThe types for mapping an entity between a source model and a destination model.\nclass NSPropertyMapping\nA mapping instance that specifies in a model how to map from a property in a source entity to a property in a destination entity."
  },
  {
    "title": "NSEntityMapping | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitymapping",
    "html": "Topics\nManaging Source Information\nvar sourceEntityName: String?\nThe source entity name for the entity mapping.\nvar sourceEntityVersionHash: Data?\nThe version hash of the source entity for the entity mapping.\nvar sourceExpression: NSExpression?\nThe source expression for the entity mapping.\nManaging Destination Information\nvar destinationEntityName: String?\nThe destination entity name for the entity mapping.\nvar destinationEntityVersionHash: Data?\nThe version hash for the destination entity for the entity mapping.\nManaging Mapping Information\nvar name: String!\nThe name of the entity mapping.\nvar mappingType: NSEntityMappingType\nThe mapping type for the entity mapping.\nvar entityMigrationPolicyClassName: String?\nThe class name of the migration policy for the entity mapping.\nvar attributeMappings: [NSPropertyMapping]?\nThe array of attribute mappings for the entity mapping.\nvar relationshipMappings: [NSPropertyMapping]?\nThe array of relationship mappings for the entity mapping.\nvar userInfo: [AnyHashable : Any]?\nThe user info dictionary for the entity mapping.\nConstants\ncase undefinedEntityMappingType\nSpecifies that the developer handles destination instance creation.\ncase customEntityMappingType\nSpecifies a custom mapping.\ncase addEntityMappingType\nSpecifies that this is a new entity in the destination model.\ncase removeEntityMappingType\nSpecifies that this entity is not present in the destination model.\ncase copyEntityMappingType\nSpecifies that source instances are migrated as-is.\ncase transformEntityMappingType\nSpecifies that entity exists in source and destination and is mapped.\nRelationships\nInherits From\nNSObject\nSee Also\nEntity Mapping\nclass NSMigrationManager\nA migration manager instance that performs a migration of data from one persistent store to another using a given mapping model.\nclass NSMappingModel\nA model instance that specifies how to map a model from a source to a destination managed object model.\nclass NSEntityMigrationPolicy\nA policy instance that customizes the migration process for an entity mapping.\nenum NSEntityMappingType\nThe types for mapping an entity between a source model and a destination model.\nclass NSPropertyMapping\nA mapping instance that specifies in a model how to map from a property in a source entity to a property in a destination entity."
  },
  {
    "title": "NSEntityMigrationPolicy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitymigrationpolicy",
    "html": "Overview\n\nYou set the policy for an entity mapping by passing the name of the migration policy class as the argument to entityMigrationPolicyClassName. Typically, you specify the name in the Xcode mapping model editor.\n\nTopics\nCustomizing Stages of the Mapping Life Cycle\nfunc begin(NSEntityMapping, with: NSMigrationManager)\nSets up state information before the start of a given entity mapping.\nfunc createDestinationInstances(forSource: NSManagedObject, in: NSEntityMapping, manager: NSMigrationManager)\nCreates the destination instance(s) for a given source instance.\nfunc endInstanceCreation(forMapping: NSEntityMapping, manager: NSMigrationManager)\nIndicates the end of the instance creation stage for the specified entity mapping, and the precursor to the next migration stage.\nfunc createRelationships(forDestination: NSManagedObject, in: NSEntityMapping, manager: NSMigrationManager)\nConstructs the relationships between the newly-created destination instances.\nfunc endRelationshipCreation(forMapping: NSEntityMapping, manager: NSMigrationManager)\nIndicates the end of the relationship creation stage for the specified entity mapping.\nfunc performCustomValidation(forMapping: NSEntityMapping, manager: NSMigrationManager)\nProvides the option to perform custom validation on migrated objects during the validation stage of the entity migration policy.\nfunc end(NSEntityMapping, manager: NSMigrationManager)\nPerforms cleanup at the end of the migration, from any phase of the mapping.\nConstants\nlet NSMigrationManagerKey: String\nKey for the migration manager.\nlet NSMigrationSourceObjectKey: String\nKey for the source object.\nlet NSMigrationDestinationObjectKey: String\nKey for the destination object.\nlet NSMigrationEntityMappingKey: String\nKey for the entity mapping object.\nlet NSMigrationPropertyMappingKey: String\nKey for the property mapping object.\nlet NSMigrationEntityPolicyKey: String\nKey for the entity migration policy object.\nRelationships\nInherits From\nNSObject\nSee Also\nEntity Mapping\nclass NSMigrationManager\nA migration manager instance that performs a migration of data from one persistent store to another using a given mapping model.\nclass NSMappingModel\nA model instance that specifies how to map a model from a source to a destination managed object model.\nclass NSEntityMapping\nA mapping instance that specifies how to map an entity from a source to a destination managed object model.\nenum NSEntityMappingType\nThe types for mapping an entity between a source model and a destination model.\nclass NSPropertyMapping\nA mapping instance that specifies in a model how to map from a property in a source entity to a property in a destination entity."
  },
  {
    "title": "NSConstraintConflict | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsconstraintconflict",
    "html": "Overview\n\nA constraint conflict occurs when your data model is using unique constraints and one or more managed objects are violating that constraint.\n\nWhen this error occurs, the error instance can be interrogated to determine which instance of NSManagedObject is violating the constraint and which property on the NSManagedObject instance is in violation.\n\nTopics\nInitializing a Conflict\ninit(constraint: [String], database: NSManagedObject?, databaseSnapshot: [AnyHashable : Any]?, conflicting: [NSManagedObject], conflictingSnapshots: [Any])\nInitializes a constraint conflict.\nInspecting a Conflict\nvar conflictingObjects: [NSManagedObject]\nThe managed objects that are in conflict.\nvar conflictingSnapshots: [[AnyHashable : Any]]\nThe original property values of objects in violation of the constraint.\nvar constraint: [String]\nThe constraint that has been violated.\nvar constraintValues: [String : Any]\nThe values that the conflicting objects had when the conflict was created.\nvar databaseObject: NSManagedObject?\nThe object whose database row is using constraint values.\nvar databaseSnapshot: [String : Any]?\nThe values currently stored in the database.\nRelationships\nInherits From\nNSObject\nSee Also\nConflict Management\nclass NSMergeConflict\nAn encapsulation of conflicts that occur during an attempt to save changes in a managed object context.\nclass NSMergePolicy\nA policy object that you use to resolve conflicts between the persistent store and in-memory versions of managed objects.\nclass NSQueryGenerationToken\nA token that indicates which generation of the persistent store is being accessed."
  },
  {
    "title": "NSBatchInsertRequest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchinsertrequest",
    "html": "Topics\nCreating a Request\ninit(entity: NSEntityDescription, dictionaryHandler: (NSMutableDictionary) -> Bool)\nCreates a batch-insertion request for a managed entity, and specifies a closure that provides data dictionaries for insertion.\ninit(entity: NSEntityDescription, managedObjectHandler: (NSManagedObject) -> Bool)\nCreates a batch-insertion request for a managed entity, and specifies a closure that inserts data into the entity.\ninit(entityName: String, dictionaryHandler: (NSMutableDictionary) -> Bool)\nCreates a batch-insertion request for a named managed entity, and specifies a closure that provides data dictionaries for insertion.\ninit(entityName: String, managedObjectHandler: (NSManagedObject) -> Bool)\nCreates a batch-insertion request for a named managed entity, and specifies a closure that inserts data into the entity.\ninit(entity: NSEntityDescription, objects: [[String : Any]])\nCreates a batch-insertion request for a managed entity, and provides an array of data dictionaries for insertion.\ninit(entityName: String, objects: [[String : Any]])\nCreates a batch-insertion request for a named managed entity, and provides an array of data dictionaries for insertion.\ninit()\nCreates a Core Data batch-insertion request.\nDeprecated\nConfiguring a Request\nvar dictionaryHandler: ((NSMutableDictionary) -> Bool)?\nA closure that provides a dictionary for your app to insert data into.\nvar entity: NSEntityDescription?\nThe managed entity to insert data into.\nvar entityName: String\nThe name of the managed entity to insert data into.\nvar managedObjectHandler: ((NSManagedObject) -> Bool)?\nA closure that provides a managed object for your app to insert data into.\nvar objectsToInsert: [[String : Any]]?\nAn array of dictionaries that represents the objects to insert with the keys as attribute names and their assigned values.\nvar resultType: NSBatchInsertRequestResultType\nThe type of result that Core Data returns from this request.\nRelationships\nInherits From\nNSPersistentStoreRequest\nSee Also\nData Inserts\nclass NSBatchInsertResult\nThe result that Core Data returns when executing a batch-insertion request."
  },
  {
    "title": "NSMergePolicy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmergepolicy",
    "html": "Overview\n\nA conflict is a mismatch between state held at two different layers in the Core Data stack. A conflict can arise when you save a managed object context and you have stale data at another layer. There are two places in which a conflict may occur:\n\nBetween the managed object context layer and its in-memory cached state at the persistent store coordinator layer.\n\nBetween the cached state at the persistent store coordinator and the external store (file, database, and so forth).\n\nConflicts are represented by instances of NSMergeConflict.\n\nTopics\nGetting a Merge Policy\ninit(merge: NSMergePolicyType)\nReturns a merge policy initialized with a given policy type.\nvar mergeType: NSMergePolicyType\nThe merge type.\nResolving a Conflict\nfunc resolve(mergeConflicts: [Any])\nResolves the conflicts in a given list.\nfunc resolve(constraintConflicts: [NSConstraintConflict])\nResolves the conflicts in a given list.\nfunc resolve(optimisticLockingConflicts: [NSMergeConflict])\nResolves the conflicts in a given list.\nDefining Merge Policies\nclass var error: NSMergePolicy\nThe default merge policy for all managed object contexts.\nclass var mergeByPropertyStoreTrump: NSMergePolicy\nA property-based merge policy that applies external changes.\nclass var mergeByPropertyObjectTrump: NSMergePolicy\nA property-based merge policy that applies in-memory changes.\nclass var overwrite: NSMergePolicy\nA merge policy that overwrites the entire stored object.\nclass var rollback: NSMergePolicy\nA merge policy that discards unsaved changes.\nMerge Policies\nDefine standard ways to handle conflicts during a save operation.\nRelationships\nInherits From\nNSObject\nSee Also\nConflict Management\nclass NSConstraintConflict\nAn encapsulation of conflicts that occur during an attempt to save a managed object.\nclass NSMergeConflict\nAn encapsulation of conflicts that occur during an attempt to save changes in a managed object context.\nclass NSQueryGenerationToken\nA token that indicates which generation of the persistent store is being accessed."
  },
  {
    "title": "NSEntityMappingType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitymappingtype",
    "html": "Topics\nEnumeration Cases\ncase addEntityMappingType\nSpecifies that this is a new entity in the destination model.\ncase copyEntityMappingType\nSpecifies that source instances are migrated as-is.\ncase customEntityMappingType\nSpecifies a custom mapping.\ncase removeEntityMappingType\nSpecifies that this entity is not present in the destination model.\ncase transformEntityMappingType\nSpecifies that entity exists in source and destination and is mapped.\ncase undefinedEntityMappingType\nSpecifies that the developer handles destination instance creation.\nRelationships\nConforms To\nSendable\nSee Also\nEntity Mapping\nclass NSMigrationManager\nA migration manager instance that performs a migration of data from one persistent store to another using a given mapping model.\nclass NSMappingModel\nA model instance that specifies how to map a model from a source to a destination managed object model.\nclass NSEntityMapping\nA mapping instance that specifies how to map an entity from a source to a destination managed object model.\nclass NSEntityMigrationPolicy\nA policy instance that customizes the migration process for an entity mapping.\nclass NSPropertyMapping\nA mapping instance that specifies in a model how to map from a property in a source entity to a property in a destination entity."
  },
  {
    "title": "NSBatchUpdateRequest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchupdaterequest",
    "html": "Topics\nCreating a Request\ninit(entity: NSEntityDescription)\nCreates a batch-update request for a managed entity.\ninit(entityName: String)\nCreates a batch-update request for a named managed entity.\nConfiguring a Request\nvar entity: NSEntityDescription\nThe managed entity to update data for.\nvar entityName: String\nThe name of the managed entity to update data for.\nvar includesSubentities: Bool\nA Boolean value that indicates whether to update subentities.\nvar predicate: NSPredicate?\nA predicate that identifies the objects to update.\nvar propertiesToUpdate: [AnyHashable : Any]?\nA dictionary of property description pairs that describe the updates.\nvar resultType: NSBatchUpdateRequestResultType\nThe type of result that Core Data returns from the request.\nRelationships\nInherits From\nNSPersistentStoreRequest\nSee Also\nData Updates\nclass NSBatchUpdateResult\nThe result returned when executing a batch update request."
  },
  {
    "title": "NSBatchInsertResult | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchinsertresult",
    "html": "Topics\nAccessing Results\nvar result: Any?\nThe result of a batch-insertion request.\nvar resultType: NSBatchInsertRequestResultType\nThe type of result that Core Data returns from this request.\nenum NSBatchInsertRequestResultType\nResult types for a batch-insertion request.\nRelationships\nInherits From\nNSPersistentStoreResult\nSee Also\nData Inserts\nclass NSBatchInsertRequest\nA request to insert a batch of data in a persistent store."
  },
  {
    "title": "NSBatchDeleteRequest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchdeleterequest",
    "html": "Overview\n\nNSBatchDeleteRequest — available only when using a SQLite persistent store — deletes managed objects at the SQL level of the persistent store. This request is quicker and more efficient than using a context to fetch a large number of objects into memory, delete them, and then save those deletions back to the store. You create a request using an instance of NSFetchRequest that identifies the objects to delete. Alternatively, you can provide an array of identifiers from specific objects of the same entity type; mixing entity types results in an error when you execute the request.\n\nNSManagedObjectContext doesn’t automatically merge a request’s deletions because they happen at the SQL level. Subsequently, you must remove any deleted objects from memory after the request finishes. To determine the objects a request deletes, configure it to return the NSManagedObjectID of each deleted object and use those identifiers to update your contexts, as the following example shows:\n\n// Configure the request to return the IDs of the objects it deletes.\nrequest.resultType = .resultTypeObjectIDs\n\n\ndo {\n    // Execute the request.\n    let deleteResult = try context.execute(request) as? NSBatchDeleteResult\n    \n    // Extract the IDs of the deleted managed objectss from the request's result.\n    if let objectIDs = deleteResult?.result as? [NSManagedObjectID] {\n        \n        // Merge the deletions into the app's managed object context.\n        NSManagedObjectContext.mergeChanges(\n            fromRemoteContextSave: [NSDeletedObjectsKey: objectIDs],\n            into: [context]\n        )\n    }\n} catch {\n    // Handle any thrown errors.\n}\n\n\nAlternatively, you can use persistent history tracking to make your contexts aware of changes that happen at the persistent store level. For more information, see Consuming relevant store changes.\n\nImportant\n\nEnsure that a request’s changes don’t violate the validation rules in your data model beyond basic delete rules, such as reducing a relationship count below the specified minimum. The Deny delete rule isn’t compatible with NSBatchDeleteRequest.\n\nTopics\nCreating a Request\ninit(fetchRequest: NSFetchRequest<NSFetchRequestResult>)\nCreates a request that deletes the results of the specified fetch request.\ninit(objectIDs: [NSManagedObjectID])\nCreates a request that deletes the managed objects with the specified identifiers.\nAccessing the Fetch Request\nvar fetchRequest: NSFetchRequest<NSFetchRequestResult>\nThe fetch request that identifies the managed objects to delete.\nConfiguring the Result Type\nvar resultType: NSBatchDeleteRequestResultType\nThe type of result the request provides when it executes.\nenum NSBatchDeleteRequestResultType\nThe types of result a batch delete request can provide when it executes.\nRelationships\nInherits From\nNSPersistentStoreRequest\nSee Also\nData Deletion\nclass NSBatchDeleteResult\nAn object that describes the result of a batch delete request."
  },
  {
    "title": "NSBatchUpdateResult | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchupdateresult",
    "html": "Topics\nAccessing Results\nvar result: Any?\nThe result of a batch-update request, either the number of updated objects, the identifiers of the updated objects, or a status value.\nvar resultType: NSBatchUpdateRequestResultType\nThe type of result that Core Data returns from the request.\nenum NSBatchUpdateRequestResultType\nResult types for a batch-update request.\nRelationships\nInherits From\nNSPersistentStoreResult\nSee Also\nData Updates\nclass NSBatchUpdateRequest\nA request to Core Data to do a batch update of data in a persistent store without loading any data into memory."
  },
  {
    "title": "NSBatchDeleteResult | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbatchdeleteresult",
    "html": "Topics\nAccessing the Result\nvar result: Any?\nThe value the request returns after it executes.\nvar resultType: NSBatchDeleteRequestResultType\nThe data type of the request’s result value.\nenum NSBatchDeleteRequestResultType\nThe types of result a batch delete request can provide when it executes.\nRelationships\nInherits From\nNSPersistentStoreResult\nSee Also\nData Deletion\nclass NSBatchDeleteRequest\nA request that deletes objects in the SQLite persistent store without loading them into memory."
  },
  {
    "title": "isToMany | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsrelationshipdescription/1506560-istomany",
    "html": "Discussion\n\nIf maxCount is equal to 1, implying a to-one relationship, this property returns false; otherwise, it returns true.\n\nSee Also\nConfiguring Cardinality\nvar minCount: Int\nThe minimum number of managed objects the relationship can reference.\nvar maxCount: Int\nThe maximum number of managed objects the relationship can reference."
  },
  {
    "title": "destinationEntity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsrelationshipdescription/1506652-destinationentity",
    "html": "See Also\nConfiguring the Destination\nvar inverseRelationship: NSRelationshipDescription?\nThe relationship that represents the inverse of the current relationship.\nvar isOrdered: Bool\nA Boolean value that determines whether the relationship preserves the order of the referenced managed objects."
  },
  {
    "title": "NSRefreshedObjectIDsKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsrefreshedobjectidskey",
    "html": "See Also\nUser Info Dictionary Keys\nlet NSAffectedObjectsErrorKey: String\nThe key for objects prompting an error.\nlet NSAffectedStoresErrorKey: String\nThe key for stores prompting an error.\nlet NSDetailedErrorsKey: String\nIf multiple validation errors occur in one operation, they are collected in an array and added with this key to the “top-level error” of the operation.\nlet NSDeletedObjectIDsKey: String\nA user info key to identify deleted object identifiers in notifications after saving a managed object context.\nlet NSInsertedObjectIDsKey: String\nA user info key to identify inserted object identifiers in notifications after saving a managed object context.\nlet NSInvalidatedObjectIDsKey: String\nA user info key to identify invalidated object identifiers in notifications after saving a managed object context.\nlet NSPersistentHistoryTokenKey: String\nA user info key to identify the history token in persistent store remote change notifications.\nlet NSPersistentStoreURLKey: String\nA user info key to identify the store URL in persistent store remote change notifications.\nlet NSUpdatedObjectIDsKey: String\nA user info key to identify updated object identifiers in notifications after saving a managed object context."
  },
  {
    "title": "NSUpdatedObjectIDsKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsupdatedobjectidskey",
    "html": "See Also\nUser Info Dictionary Keys\nlet NSAffectedObjectsErrorKey: String\nThe key for objects prompting an error.\nlet NSAffectedStoresErrorKey: String\nThe key for stores prompting an error.\nlet NSDetailedErrorsKey: String\nIf multiple validation errors occur in one operation, they are collected in an array and added with this key to the “top-level error” of the operation.\nlet NSDeletedObjectIDsKey: String\nA user info key to identify deleted object identifiers in notifications after saving a managed object context.\nlet NSInsertedObjectIDsKey: String\nA user info key to identify inserted object identifiers in notifications after saving a managed object context.\nlet NSInvalidatedObjectIDsKey: String\nA user info key to identify invalidated object identifiers in notifications after saving a managed object context.\nlet NSPersistentHistoryTokenKey: String\nA user info key to identify the history token in persistent store remote change notifications.\nlet NSPersistentStoreURLKey: String\nA user info key to identify the store URL in persistent store remote change notifications.\nlet NSRefreshedObjectIDsKey: String\nA user info key to identify refreshed object identifiers in notifications after saving a managed object context."
  },
  {
    "title": "NSPersistentHistoryTokenKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorytokenkey",
    "html": "See Also\nUser Info Dictionary Keys\nlet NSAffectedObjectsErrorKey: String\nThe key for objects prompting an error.\nlet NSAffectedStoresErrorKey: String\nThe key for stores prompting an error.\nlet NSDetailedErrorsKey: String\nIf multiple validation errors occur in one operation, they are collected in an array and added with this key to the “top-level error” of the operation.\nlet NSDeletedObjectIDsKey: String\nA user info key to identify deleted object identifiers in notifications after saving a managed object context.\nlet NSInsertedObjectIDsKey: String\nA user info key to identify inserted object identifiers in notifications after saving a managed object context.\nlet NSInvalidatedObjectIDsKey: String\nA user info key to identify invalidated object identifiers in notifications after saving a managed object context.\nlet NSPersistentStoreURLKey: String\nA user info key to identify the store URL in persistent store remote change notifications.\nlet NSRefreshedObjectIDsKey: String\nA user info key to identify refreshed object identifiers in notifications after saving a managed object context.\nlet NSUpdatedObjectIDsKey: String\nA user info key to identify updated object identifiers in notifications after saving a managed object context."
  },
  {
    "title": "NSPersistentStoreURLKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoreurlkey",
    "html": "See Also\nUser Info Dictionary Keys\nlet NSAffectedObjectsErrorKey: String\nThe key for objects prompting an error.\nlet NSAffectedStoresErrorKey: String\nThe key for stores prompting an error.\nlet NSDetailedErrorsKey: String\nIf multiple validation errors occur in one operation, they are collected in an array and added with this key to the “top-level error” of the operation.\nlet NSDeletedObjectIDsKey: String\nA user info key to identify deleted object identifiers in notifications after saving a managed object context.\nlet NSInsertedObjectIDsKey: String\nA user info key to identify inserted object identifiers in notifications after saving a managed object context.\nlet NSInvalidatedObjectIDsKey: String\nA user info key to identify invalidated object identifiers in notifications after saving a managed object context.\nlet NSPersistentHistoryTokenKey: String\nA user info key to identify the history token in persistent store remote change notifications.\nlet NSRefreshedObjectIDsKey: String\nA user info key to identify refreshed object identifiers in notifications after saving a managed object context.\nlet NSUpdatedObjectIDsKey: String\nA user info key to identify updated object identifiers in notifications after saving a managed object context."
  },
  {
    "title": "NSBinaryStoreSecureDecodingClasses | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbinarystoresecuredecodingclasses",
    "html": "Discussion\n\nThis option is preferable to using NSBinaryStoreInsecureDecodingCompatibilityOption.\n\nSee Also\nPersistent Store Metadata Keys\nlet NSBinaryStoreInsecureDecodingCompatibilityOption: String\nA flag that indicates Core Data decodes the binary store insecurely.\nlet NSPersistentStoreRemoteChangeNotificationPostOptionKey: String\nA key that indicates a persistent store posts a remote change notification for every write to the store, including writes by other processes."
  },
  {
    "title": "NSBinaryStoreInsecureDecodingCompatibilityOption | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsbinarystoreinsecuredecodingcompatibilityoption",
    "html": "Discussion\n\nUse the NSBinaryStoreSecureDecodingClasses option instead, if possible, to allow Core Data to securely decode the binary store.\n\nIf a store has metadata or transformable properties that contain nonstandard classes, this option may be appropriate. Apps linked before the availability date default to using this option.\n\nSee Also\nPersistent Store Metadata Keys\nlet NSBinaryStoreSecureDecodingClasses: String\nAn additional set of classes to use while decoding a binary store.\nlet NSPersistentStoreRemoteChangeNotificationPostOptionKey: String\nA key that indicates a persistent store posts a remote change notification for every write to the store, including writes by other processes."
  },
  {
    "title": "NSPersistentCloudKitContainer.Event | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/event",
    "html": "Topics\nInspecting Event Properties\nvar type: NSPersistentCloudKitContainer.EventType\nThe type of event, either setup, import, or export.\nvar identifier: UUID\nA unique identifier for the event in a container.\nvar storeIdentifier: String\nThe associated store identifier in the container for the event.\nvar succeeded: Bool\nA Boolean value that indicates whether the operation the event represents is successful.\nvar startDate: Date\nThe start date of the operation that the event represents.\nvar endDate: Date?\nThe end date of the operation that the event represents.\nvar error: Error?\nAn error that indicates why an operation fails.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nSee Also\nMonitoring Container Events\nenum NSPersistentCloudKitContainer.EventType\nThe type of event in a persistent CloudKit container, either setup, import, or export.\nclass NSPersistentCloudKitContainerEventRequest\nA request to fetch setup, import, or export events in a persistent CloudKit container.\nclass NSPersistentCloudKitContainerEventResult\nThe result of a request to fetch persistent CloudKit container events.\nclass let eventChangedNotification: NSNotification.Name\nA notification that contains details about an event in a persistent CloudKit container.\nclass let eventNotificationUserInfoKey: String\nThe user info dictionary key for the persistent CloudKit container event."
  },
  {
    "title": "NSQueryGenerationToken | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsquerygenerationtoken",
    "html": "Overview\n\nWhen a managed object context is pinned to a specific generation of the app data, a query generation token will be associated with that context.\n\nTopics\nIdentifying Generations of App Data\nclass var current: NSQueryGenerationToken\nA token that informs a context to use the current generation.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nConflict Management\nclass NSConstraintConflict\nAn encapsulation of conflicts that occur during an attempt to save a managed object.\nclass NSMergeConflict\nAn encapsulation of conflicts that occur during an attempt to save changes in a managed object context.\nclass NSMergePolicy\nA policy object that you use to resolve conflicts between the persistent store and in-memory versions of managed objects."
  },
  {
    "title": "purgeObjectsAndRecordsInZone(with:in:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/3746833-purgeobjectsandrecordsinzone",
    "html": "Parameters\nzoneID\n\nThe ID of the record zone to purge.\n\npersistentStore\n\nThe persistent store that manages the CloudKit database containing the record zone. Use nil to attempt the purge in each of the container’s persistent stores that manages a CloudKit database.\n\ncompletion\n\nThe handler to invoke after Core Data purges the CloudKit records and managed objects.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc purgeObjectsAndRecordsInZone(with zoneID: CKRecordZoneID, in persistentStore: NSPersistentStore?) async throws -> CKRecordZoneID\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\ncompletion returns no value and takes the following parameters:\n\nThe ID of the purged record zone, or nil if the purge fails.\n\nAn error object that contains information about a problem, or nil if Core Data successfully purges the record zone.\n\nIf persistentStore is nil, the method invokes the completion handler once for each of the persistent container’s stores that manages a CloudKit database."
  },
  {
    "title": "init(containerIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontaineroptions/3141675-init",
    "html": "See Also\nCreating Container Options\nvar containerIdentifier: String\nThe identifier of the CloudKit container associated with a given store description.\nvar databaseScope: CKDatabase.Scope\nThe database scope — public, private, or shared — to use for a specified store in a persistent CloudKit container."
  },
  {
    "title": "containerIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontaineroptions/3141674-containeridentifier",
    "html": "See Also\nCreating Container Options\ninit(containerIdentifier: String)\nInitializes container options using the given CloudKit container identifier.\nvar databaseScope: CKDatabase.Scope\nThe database scope — public, private, or shared — to use for a specified store in a persistent CloudKit container."
  },
  {
    "title": "recordID(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/3141669-recordid",
    "html": "Parameters\nmanagedObjectID\n\nThe ID of the managed object.\n\nReturn Value\n\nAn instance of CKRecord.ID if the managed object has an underlying CloudKit record; otherwise, nil.\n\nSee Also\nAccessing Records\nfunc record(for: NSManagedObjectID) -> CKRecord?\nReturns the CloudKit record for the specified managed object ID.\nfunc records(for: [NSManagedObjectID]) -> [NSManagedObjectID : CKRecord]\nReturns a dictionary that contains the CloudKit records for the specified managed object IDs.\nfunc recordIDs(for: [NSManagedObjectID]) -> [NSManagedObjectID : CKRecordID]\nReturns a dictionary that contains the CloudKit record IDs for the specified managed object IDs."
  },
  {
    "title": "record(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/3141668-record",
    "html": "Parameters\nmanagedObjectID\n\nThe ID of the managed object.\n\nReturn Value\n\nAn instance of CKRecord if the managed object has an underlying CloudKit record; otherwise, nil.\n\nSee Also\nAccessing Records\nfunc records(for: [NSManagedObjectID]) -> [NSManagedObjectID : CKRecord]\nReturns a dictionary that contains the CloudKit records for the specified managed object IDs.\nfunc recordID(for: NSManagedObjectID) -> CKRecordID?\nReturns the CloudKit record ID for the specified managed object ID.\nfunc recordIDs(for: [NSManagedObjectID]) -> [NSManagedObjectID : CKRecordID]\nReturns a dictionary that contains the CloudKit record IDs for the specified managed object IDs."
  },
  {
    "title": "canModifyManagedObjects(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/3649647-canmodifymanagedobjects",
    "html": "Parameters\nstore\n\nThe persistent store.\n\nReturn Value\n\ntrue if the user can modify records in the persistent store’s CloudKit database; otherwise, false.\n\nDiscussion\n\nUse this method to determine whether the user is able to write any records to the CloudKit database. To find out if the user can modify a specific object, use the canUpdateRecord(forManagedObjectWith:) and canDeleteRecord(forManagedObjectWith:) methods instead.\n\nThis method always returns true for persistent stores that manage the user’s private CloudKit database.\n\nSee Also\nChecking Permissions\nfunc canUpdateRecord(forManagedObjectWith: NSManagedObjectID) -> Bool\nReturns a Boolean value that indicates whether the user can modify the managed object’s underlying CloudKit record.\nfunc canDeleteRecord(forManagedObjectWith: NSManagedObjectID) -> Bool\nReturns a Boolean value that indicates whether the user can delete the managed object’s underlying CloudKit record."
  },
  {
    "title": "Creating a Core Data Model for CloudKit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/mirroring_a_core_data_store_with_cloudkit/creating_a_core_data_model_for_cloudkit",
    "html": "Overview\n\nTo pass records between a Core Data store and a CloudKit database, they both require a shared understanding of the data structure. You define this in the Core Data model and then use that to generate a CloudKit schema.\n\nCreate a Data Model\n\nUse Xcode’s Core Data model editor to define your app’s entities and their attributes, or construct your model in code. For more information, see Creating a Core Data model and the articles under Modeling data.\n\nCloudKit doesn’t support all the features of a Core Data model. As you design your model, be aware of the following limitations and make sure you create a compatible data model.\n\nCore Data model element\n\n\t\n\nCloudKit schema limitation\n\n\n\n\nEntities\n\n\t\n\nUnique constraints aren’t supported.\n\n\n\n\nAttributes\n\n\t\n\nUndefined and objectID attribute types aren’t supported.\n\n\n\n\nRelationships\n\n\t\n\nAll relationships must be optional. Due to operation size limitations, CloudKit may not save relationship changes atomically.\n\nAll relationships must have an inverse, in case the records synchronize out of order.\n\nCloudKit doesn’t support the Deny deletion rule.\n\n\n\n\nConfigurations\n\n\t\n\nEntities in a configuration must not have relationships to entities in another configuration.\n\nFor more information about how Core Data translates managed objects to CloudKit records, see Reading CloudKit Records for Core Data.\n\nInitialize Your CloudKit Schema During Development\n\nAfter creating your Core Data model, inform CloudKit about the types of records it contains by initializing a development schema. This is a draft schema that you can rewrite as often as necessary during development. You can’t delete a record type or modify any existing attributes after you promote a development schema to production.\n\nUse the persistent container to initialize the development schema, which you can do during app launch or from within one or more integration tests. To exclude schema initialization from your production builds, use the following:\n\nlet container = NSPersistentCloudKitContainer(name: \"Earthquakes\")\n\n\n// Only initialize the schema when building the app with the \n// Debug build configuration.        \n#if DEBUG\ndo {\n    // Use the container to initialize the development schema.\n    try container.initializeCloudKitSchema(options: [])\n} catch {\n    // Handle any errors.\n}\n#endif\n\n\nAfter initializing the schema, the console contains an entry similar to the following:\n\n<NSCloudKitMirroringDelegate: 0x7f9699d29a90>: Successfully set up CloudKit \n    integration for store\n\n\nWhile initializing the schema, Core Data creates a temporary instance of each distinct record type in each of the container’s stores that mirror to a CloudKit database and uploads them to the iCloud servers. After completing the upload, the schema is visible in the CloudKit dashboard and Core Data removes the temporary records.\n\nFor more information about configuring a CloudKit persistent container, see Setting Up Core Data with CloudKit.\n\nReset the Environment\n\nAs you change the model during development, periodically visit the CloudKit dashboard to reset the development environment and delete the existing development schema, before initializing a new one. For more information about resetting the development environment, see Using CloudKit Dashboard to Manage Databases.\n\nPromote the Schema to Production\n\nWhen you’re happy with your data model, have a fully tested app, and are ready to submit it to the App Store, it’s time to promote your schema from development to production.\n\nImportant\n\nAfter you promote your schema to production, the record types and their fields are immutable and exist for all time. You can add new record types, and additional fields to existing record types, but you can’t modify or delete existing record types.\n\nInitialize your schema one last time, then promote it from the CloudKit dashboard. For more information about promoting a schema from development to production, see Deploying the Schema.\n\nUpdate the Production Schema\n\nPlan carefully for how your app handles forward compatibility and major changes to the data model, because you can’t rename or delete CloudKit record types and fields in production. Consider these strategies:\n\nMigrate users to a completely new store, using NSPersistentCloudKitContainerOptions to associate the new store with a new container.\n\nIncrementally add new fields to existing record types. If you adopt this approach, older versions of your app have access to every record a user creates, but not every field.\n\nVersion your entities by including a version attribute from the outset, and use a fetch request to select only those records that are compatible with the current version of the app. If you adopt this approach, older versions of your app won’t fetch records that a user creates with a more recent version, effectively hiding them on that device.\n\nFor example, consider a Post entity with a version attribute that stores the version of the app that creates the record. You can use a predicate to fetch only the records that are compatible with the current version of the app.\n\n// The current version of the app's data model.\nlet maxCompatibleVersion = 3\n\n\nlet context = NSManagedObjectContext(\n    concurrencyType: .privateQueueConcurrencyType\n)\n\n\ncontext.performAndWait {\n    let fetchRequest = NSFetchRequest<NSManagedObject>(entityName: \"Post\")\n    \n    // Create a predicate that matches against the version attribute.\n    fetchRequest.predicate = NSPredicate(\n        format: \"version <= %d\",\n        argumentArray: [maxCompatibleVersion]\n    )\n    \n    // Fetch all posts with a version less than or equal to maxCompatibleVersion.\n    let results = context.fetch(fetchRequest)\n}\n\n\nAlong with these choices, consider your timelines for supporting multiple versions of your app, and for migrating users to newer app versions.\n\nFor tips on migrating records to a new schema, see Designing for CloudKit. For more information about Core Data model migration, see Migrating your data model automatically. For heavyweight migrations, see the Core Data Model Versioning and Data Migration guide.\n\nSee Also\nConfiguring CloudKit Mirroring\nSetting Up Core Data with CloudKit\nSet up the classes and capabilities that sync your store to CloudKit.\nSyncing a Core Data Store with CloudKit\nSynchronize objects between devices, and handle store changes in the user interface.\nReading CloudKit Records for Core Data\nAccess CloudKit records created from Core Data managed objects."
  },
  {
    "title": "NSFetchedResultsChangeType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultschangetype",
    "html": "Topics\nConstants\ncase insert\nSpecifies that an object was inserted.\ncase delete\nSpecifies that an object was deleted.\ncase move\nSpecifies that an object was moved.\ncase update\nSpecifies that an object was changed.\nRelationships\nConforms To\nSendable\nSee Also\nResponding to Changes\nprotocol NSFetchedResultsControllerDelegate\nA delegate protocol that describes the methods that will be called by the associated fetched results controller when the fetch results have changed.\nprotocol NSFetchedResultsSectionInfo\nA protocol that defines the interface for section objects vended by a fetched results controller.\nstruct NSFetchRequestResultType\nConstants that specify the possible result types a fetch request can return."
  },
  {
    "title": "performAndWait(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506364-performandwait",
    "html": "Parameters\nblock\n\nThe closure to perform.\n\nDiscussion\n\nThis method supports reentrancy — meaning it’s safe to call the method again, from within the closure, before the previous invocation completes.\n\nSee Also\nPerforming block operations\nfunc perform(() -> Void)\nAsynchronously performs the specified closure on the context’s queue.\nfunc perform<T>(schedule: NSManagedObjectContext.ScheduledTaskType, () -> T) -> T\nSubmits a closure to the context’s queue for asynchronous execution.\nfunc performAndWait<T>(() -> T) -> T\nSubmits a closure to the context’s queue for synchronous execution.\nenum NSManagedObjectContext.ScheduledTaskType\nThe different types of scheduled tasks."
  },
  {
    "title": "Setting Up Core Data with CloudKit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/mirroring_a_core_data_store_with_cloudkit/setting_up_core_data_with_cloudkit",
    "html": "Overview\n\nTo sync your Core Data store to CloudKit, you enable the CloudKit capability for your app. You also set up the Core Data stack with a persistent container that is capable of managing one or more local persistent stores that are backed by a CloudKit private database.\n\nConfigure a New Xcode Project\n\nWhen you create a new project, you specify whether you want to add support for Core Data with CloudKit directly from the project setup interface. The resulting project instantiates an NSPersistentCloudKitContainer in your app’s delegate. Once you enable CloudKit in your project, you use this container to manage one or more local stores that are backed with a CloudKit database.\n\nChoose File > New > Project to create a new project.\n\nSelect a project template to use as the starting point for your project, and click Next.\n\nSelect the Use Core Data and Use CloudKit checkboxes.\n\nEnter any other project details and click Next.\n\nSpecify a location for your project and click Create.\n\nNot all project templates support Core Data. If the template you want to use doesn’t support Core Data, add Core Data to the project as described in Setting up a Core Data stack. Then add Core Data with CloudKit as described in Update an Existing Xcode Project.\n\nEnable iCloud\n\nCore Data with CloudKit requires specific entitlements for your app to communicate with the server. Begin by adding the iCloud capability to your Xcode project.\n\nIn Project Settings, select the Signing & Capabilities tab.\n\nMake sure that “Automatically manage signing” is selected.\n\nSpecify your development team.\n\nClick the + Capability button, then do a search for iCloud in the Add Capability editor and select that capability.\n\nAn iCloud section appears on your app’s Signing & Capabilities page.\n\nEnable CloudKit and Push Notifications\n\nCore Data with CloudKit uses the CloudKit service to access your team’s containers. To enable CloudKit, configure the iCloud capability.\n\nIn Project Settings, select the Signing & Capabilities tab.\n\nIn the iCloud section, under Services, select the CloudKit checkbox. This selection also adds push notifications that notify your app when remote content has changed.\n\nUnder Containers, leave the selection as “Use default container.”\n\nXcode checks that your development team supports the Push Notification and iCloud capabilities, then registers your app’s bundle identifier and manages provisioning profiles.\n\nFor more information about working with CloudKit containers and setting up profiles, see Enabling CloudKit in Your App.\n\nEnable Remote Notifications in the Background\n\nFor CloudKit to silently notify your app when new content is available, without presenting a user notification such as an alert, sound, or badge, you need to enable the remote notifications background mode.\n\nIn Project Settings, select the Signing & Capabilities tab.\n\nClick the + Capability button, then do a search for Background Modes in the Add Capability editor and select that capability.\n\nSelect the “Remote notifications” checkbox.\n\nFor more information about silent notifications, see Pushing background updates to your App.\n\nUpdate an Existing Xcode Project\n\nIf you want to add Core Data with CloudKit to an app that already uses Core Data, you need to modify both your project’s configuration and some of its code.\n\nFirst, enable iCloud, CloudKit, push notifications, and remote notifications in the background as described in the preceeding sections. Then, replace your persistent container with an instance of NSPersistentCloudKitContainer.\n\nFor example, if you created a project from the iOS Single View App template, with the Use Core Data checkbox selected, the following code appeared in your app’s delegate:\n\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n\n    // ...\n    \n    lazy var persistentContainer: NSPersistentContainer = {\n    \n        let container = NSPersistentContainer(name: \"Earthquakes\")\n        container.loadPersistentStores(completionHandler: { \n            (storeDescription, error) in\n            if let error = error as NSError? {\n                fatalError(\"Unresolved error \\(error), \\(error.userInfo)\")\n            }\n        })\n        return container\n    }()\n    \n    // ...\n}\n\n\nNSPersistentContainer supports only local persistent stores. To add the ability to sync a local store to a CloudKit database, replace NSPersistentContainer with the subclass NSPersistentCloudKitContainer.\n\n    let container = NSPersistentCloudKitContainer(name: \"Earthquakes\")\n\nManage Multiple Stores\n\nYou may wish to mirror a subset of your data using CloudKit, while keeping other data completely local. You can add configurations to your model to organize your data in separate stores, then choose which stores to sync to CloudKit.\n\nOpen your project’s .xcdatamodeld file.\n\nChoose Editor > Add Configuration.\n\nDrag each entity into a configuration.\n\nSelect a configuration that you want to sync to CloudKit, then select the \"Used with CloudKit\" checkbox in the data model editor. Repeat for each configuration that you want to sync.\n\nFor an app without configurations, NSPersistentCloudKitContainer matches the first store description with the first CloudKit container identifier in the entitlements.\n\nFor an app with configurations, you need to tell it which CloudKit container, if any, to use with each store. For each of your configurations, make the following changes to your container setup:\n\nCreate an NSPersistentStoreDescription.\n\nSet the store description’s configuration.\n\nIf this configuration should synchronize to CloudKit, set the store description’s cloudKitContainerOptions to an instance of NSPersistentCloudKitContainerOptions. Provide the container identifier of your CloudKit container in the initializer.\n\nAdd the store description to the persistent container before loading the store.\n\nThe following example code creates two store descriptions: one for the “Local” configuration, and one for the “Cloud” configuration. It then sets the cloud store description’s cloudKitContainerOptions to match the store with its CloudKit container. Finally, it updates the container’s list of persistent store descriptions to include all local and cloud-backed store descriptions, and loads both stores.\n\nlazy var persistentContainer: NSPersistentCloudKitContainer = {\n    let container = NSPersistentCloudKitContainer(name: \"Earthquakes\")\n    \n    // Create a store description for a local store\n    let localStoreLocation = URL(fileURLWithPath: \"/path/to/local.store\")\n    let localStoreDescription =\n        NSPersistentStoreDescription(url: localStoreLocation)\n    localStoreDescription.configuration = \"Local\"\n    \n    // Create a store description for a CloudKit-backed local store\n    let cloudStoreLocation = URL(fileURLWithPath: \"/path/to/cloud.store\")\n    let cloudStoreDescription =\n        NSPersistentStoreDescription(url: cloudStoreLocation)\n    cloudStoreDescription.configuration = \"Cloud\"\n\n\n    // Set the container options on the cloud store\n    cloudStoreDescription.cloudKitContainerOptions = \n        NSPersistentCloudKitContainerOptions(\n            containerIdentifier: \"com.my.container\")\n    \n    // Update the container's list of store descriptions\n    container.persistentStoreDescriptions = [\n        cloudStoreDescription,\n        localStoreDescription\n    ]\n    \n    // Load both stores\n    container.loadPersistentStores { storeDescription, error in\n        guard error == nil else {\n            fatalError(\"Could not load persistent stores. \\(error!)\")\n        }\n    }\n    \n    return container\n}()\n\n\nSee Also\nConfiguring CloudKit Mirroring\nCreating a Core Data Model for CloudKit\nDesign a CloudKit-compatible data model and initialize your CloudKit schema.\nSyncing a Core Data Store with CloudKit\nSynchronize objects between devices, and handle store changes in the user interface.\nReading CloudKit Records for Core Data\nAccess CloudKit records created from Core Data managed objects."
  },
  {
    "title": "perform(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506578-perform",
    "html": "Parameters\nblock\n\nThe closure to perform.\n\nDiscussion\n\nThis method encapsulates an autorelease pool and a call to processPendingChanges().\n\nSee Also\nPerforming block operations\nfunc perform<T>(schedule: NSManagedObjectContext.ScheduledTaskType, () -> T) -> T\nSubmits a closure to the context’s queue for asynchronous execution.\nfunc performAndWait(() -> Void)\nSynchronously performs the specified closure on the context’s queue.\nfunc performAndWait<T>(() -> T) -> T\nSubmits a closure to the context’s queue for synchronous execution.\nenum NSManagedObjectContext.ScheduledTaskType\nThe different types of scheduled tasks."
  },
  {
    "title": "NSManagedObjectID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectid",
    "html": "Overview\n\nThis identifier forms the basis for uniquing in the Core Data Framework. A managed object ID uniquely identifies the same managed object both between managed object contexts in a single application, and in multiple applications (as in distributed systems). Identifiers contain the information needed to exactly describe an object in a persistent store (like the primary key in the database), although the detailed information is not exposed. The framework completely encapsulates the “external” information and presents a clean object oriented interface.\n\nObject IDs can be transformed into a URI representation which can be archived and recreated later to refer back to a given object (using managedObjectID(forURIRepresentation:) (NSPersistentStoreCoordinator) and object(with:) (NSManagedObjectContext). For example, the last selected group in an application could be stored in the user defaults through the group object’s ID. You can also use object ID URI representations to store “weak” relationships across persistent stores (where no hard join is possible).\n\nTopics\nGetting Managed Object ID Information\nvar entity: NSEntityDescription\nThe entity description associated with the object ID.\nvar isTemporaryID: Bool\nA Boolean value that indicates whether the object ID is temporary.\nvar persistentStore: NSPersistentStore?\nThe persistent store that fetched the object for the object ID.\nfunc uriRepresentation() -> URL\nReturns a URI that provides an archiveable reference to the object for the object ID.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSFetchRequestResult\nSendable\nSee Also\nObject Management\nclass NSManagedObjectContext\nAn object space to manipulate and track changes to managed objects.\nclass NSManagedObject\nThe base class that all Core Data model objects inherit from."
  },
  {
    "title": "managedObjectIDResultType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequestresulttype/1506948-managedobjectidresulttype",
    "html": "See Also\nResult Types\nstatic var managedObjectResultType: NSFetchRequestResultType\nThe request returns managed objects.\nstatic var dictionaryResultType: NSFetchRequestResultType\nThe request returns dictionaries.\nstatic var countResultType: NSFetchRequestResultType\nThe request returns the count of the objects that match the request."
  },
  {
    "title": "newBackgroundContext() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcontainer/1640581-newbackgroundcontext",
    "html": "Return Value\n\nA newly created private managed object context.\n\nDiscussion\n\nInvoking this method causes the persistent container to create and return a new NSManagedObjectContext with the concurrencyType set to NSManagedObjectContextConcurrencyType.privateQueueConcurrencyType. This new context will be associated with the NSPersistentStoreCoordinator directly and is set to consume NSManagedObjectContextDidSave broadcasts automatically.\n\nSee Also\nAcquiring Contexts\nvar viewContext: NSManagedObjectContext\nThe main queue’s managed object context."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequestresulttype/1506779-init",
    "html": "Parameters\nrawValue\n\nThe raw unsigned integer value."
  },
  {
    "title": "deleteHistory(before:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorychangerequest/2892340-deletehistory",
    "html": "Parameters\ntoken\n\nThe bookmark that marks the end of the delete history request.\n\nReturn Value\n\nA delete history change request (NSPersistentHistoryChangeRequest) using an end token bookmark boundary.\n\nSee Also\nPurging History\nclass func deleteHistory(before: Date) -> Self\nPurges history older than a given date.\nclass func deleteHistory(before: NSPersistentHistoryTransaction?) -> Self\nPurges history older than a given transaction."
  },
  {
    "title": "performBackgroundTask(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcontainer/1640564-performbackgroundtask",
    "html": "Parameters\nblock\n\nA block that is executed by the persistent container against a newly created private context. The private context is passed into the block as part of the execution of the block.\n\nDiscussion\n\nEach time this method is invoked, the persistent container creates a new NSManagedObjectContext with the concurrencyType set to NSManagedObjectContextConcurrencyType.privateQueueConcurrencyType. The persistent container then executes the passed in block against that newly created context on the context’s private queue.\n\nSee Also\nPerforming Background Tasks\nfunc performBackgroundTask<T>((NSManagedObjectContext) -> T) -> T"
  },
  {
    "title": "NSPersistentHistoryChangeType.delete | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorychangetype/delete",
    "html": "See Also\nChange Types\ncase insert\nThe insertion of a managed object into the persistent store.\ncase update\nAn update to a managed object’s properties in the persistent store."
  },
  {
    "title": "NSManagedObjectContextConcurrencyType.privateQueueConcurrencyType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontextconcurrencytype/privatequeueconcurrencytype",
    "html": "See Also\nConcurrency Types\ncase mainQueueConcurrencyType\nSpecifies that the context will be associated with the main queue.\ncase confinementConcurrencyType\nSpecifies that the context will use the thread confinement pattern.\nDeprecated"
  },
  {
    "title": "objectIDNotification() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorytransaction/2894946-objectidnotification",
    "html": "Return Value\n\nAn NSManagedObjectContextDidSaveObjectIDsNotification notification.\n\nDiscussion\n\nTo merge the relevant changes into your view context, first obtain a notification by calling objectIDNotification() on the transaction. Then, pass the notification to mergeChanges(fromContextDidSave:)."
  },
  {
    "title": "NSManagedObjectContextConcurrencyType.mainQueueConcurrencyType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontextconcurrencytype/mainqueueconcurrencytype",
    "html": "See Also\nConcurrency Types\ncase privateQueueConcurrencyType\nSpecifies that the context will be associated with a private dispatch queue.\ncase confinementConcurrencyType\nSpecifies that the context will use the thread confinement pattern.\nDeprecated"
  },
  {
    "title": "tombstone | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorychange/2892564-tombstone",
    "html": "Discussion\n\nThis value is expected on changes of type NSPersistentHistoryChangeType.delete.\n\nSee Also\nInspecting Change Details\nvar changeID: Int64\nThe change’s numeric identifier.\nvar changeType: NSPersistentHistoryChangeType\nThe type of change to the managed object in the persistent store.\nenum NSPersistentHistoryChangeType\nThe types of changes to managed objects reflected in persistent history.\nvar changedObjectID: NSManagedObjectID\nThe identifier of the managed object that changed.\nvar transaction: NSPersistentHistoryTransaction?\nThe persistent history transaction containing this change.\nvar updatedProperties: Set<NSPropertyDescription>?\nThe set of properties that were updated on the managed object."
  },
  {
    "title": "objectID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject/1506848-objectid",
    "html": "Discussion\n\nIf the receiver is a fault, accessing this property does not cause it to fire.\n\nImportant\n\nIf the receiver has not yet been saved, the object ID is a temporary value that will change when the object is saved.\n\nSee Also\nGetting a Managed Object’s Identity\nvar entity: NSEntityDescription\nThe entity description of the managed object.\nclass func entity() -> NSEntityDescription\nReturns the entity description that is associated with this subclass.\nRelated Documentation\nfunc uriRepresentation() -> URL\nReturns a URI that provides an archiveable reference to the object for the object ID."
  },
  {
    "title": "updatedProperties | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorychange/2892568-updatedproperties",
    "html": "Discussion\n\nThis value is expected on changes of type NSPersistentHistoryChangeType.update.\n\nSee Also\nInspecting Change Details\nvar changeID: Int64\nThe change’s numeric identifier.\nvar changeType: NSPersistentHistoryChangeType\nThe type of change to the managed object in the persistent store.\nenum NSPersistentHistoryChangeType\nThe types of changes to managed objects reflected in persistent history.\nvar changedObjectID: NSManagedObjectID\nThe identifier of the managed object that changed.\nvar tombstone: [AnyHashable : Any]?\nA dictionary of attributes marked for preservation after deletion, and their values when deleted.\nvar transaction: NSPersistentHistoryTransaction?\nThe persistent history transaction containing this change."
  },
  {
    "title": "NSPersistentHistoryChangeRequest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorychangerequest",
    "html": "Topics\nConfiguring the Request\nvar fetchRequest: NSFetchRequest<NSFetchRequestResult>?\nThe specified fetch request, when retrieving history.\nvar resultType: NSPersistentHistoryResultType\nThe type of result that this request returns.\nGetting the Token\nvar token: NSPersistentHistoryToken?\nThe specified token, when retrieving history defined by a token.\nFetching History\nclass func fetchHistory(after: Date) -> Self\nRetrieves history since a given date.\nclass func fetchHistory(after: NSPersistentHistoryToken?) -> Self\nRetrieves the request history after a given token.\nclass func fetchHistory(after: NSPersistentHistoryTransaction?) -> Self\nRetrieves history since a given transaction.\nclass func fetchHistory(withFetch: NSFetchRequest<NSFetchRequestResult>) -> Self\nRetrieves history based on a fetch request.\nPurging History\nclass func deleteHistory(before: Date) -> Self\nPurges history older than a given date.\nclass func deleteHistory(before: NSPersistentHistoryToken?) -> Self\nPurges history older than that defined by a given token.\nclass func deleteHistory(before: NSPersistentHistoryTransaction?) -> Self\nPurges history older than a given transaction.\nRelationships\nInherits From\nNSPersistentStoreRequest\nSee Also\nRequesting History\nclass NSPersistentHistoryResult\nThe result of a request to fetch persistent history."
  },
  {
    "title": "fetchHistory(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorychangerequest/2892339-fetchhistory",
    "html": "Parameters\ndate\n\nThe date used to define the start of the fetch history.\n\nReturn Value\n\nA persistent history fetch request (NSPersistentHistoryChangeRequest) with an initial date boundary.\n\nSee Also\nFetching History\nclass func fetchHistory(after: NSPersistentHistoryToken?) -> Self\nRetrieves the request history after a given token.\nclass func fetchHistory(after: NSPersistentHistoryTransaction?) -> Self\nRetrieves history since a given transaction.\nclass func fetchHistory(withFetch: NSFetchRequest<NSFetchRequestResult>) -> Self\nRetrieves history based on a fetch request."
  },
  {
    "title": "name | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506231-name",
    "html": "See Also\nConfiguring a context\nvar persistentStoreCoordinator: NSPersistentStoreCoordinator?\nThe persistent store coordinator of the context.\nvar parent: NSManagedObjectContext?\nThe parent of the context.\nvar userInfo: NSMutableDictionary\nThe user information for the context."
  },
  {
    "title": "NSPersistentHistoryToken | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorytoken",
    "html": "Overview\n\nYou can save a token to disk and fetch history when your app loads based on that token. See Keep Track of Your Place in the History in Consuming relevant store changes.\n\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding"
  },
  {
    "title": "NSPersistentHistoryResult | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistoryresult",
    "html": "Topics\nInspecting History Results\nvar result: Any?\nThe result of the history request determined by the persistent history result type.\nvar resultType: NSPersistentHistoryResultType\nThe type of result that the persistent history change request returns.\nenum NSPersistentHistoryResultType\nThe types of results from a persistent history change request.\nRelationships\nInherits From\nNSPersistentStoreResult\nSee Also\nRequesting History\nclass NSPersistentHistoryChangeRequest\nA request to fetch or purge persistent history."
  },
  {
    "title": "processID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorytransaction/2894939-processid",
    "html": "See Also\nInspecting Transaction Details\nvar author: String?\nA granular description of the context that made the persistent history change, if available.\nvar bundleID: String\nThe originating bundle’s identifier.\nvar changes: [NSPersistentHistoryChange]?\nThe array of persistent history changes.\nvar contextName: String?\nThe originating context’s name.\nvar storeID: String\nThe originating store’s identifier.\nvar timestamp: Date\nThe date of the persistent history change.\nvar token: NSPersistentHistoryToken\nThe token that represents this transaction in the persistent history.\nvar transactionNumber: Int64\nThe transaction’s numeric identifier."
  },
  {
    "title": "refreshAllObjects() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506217-refreshallobjects",
    "html": "See Also\nRegistering and fetching objects\nfunc fetch(NSFetchRequest<NSFetchRequestResult>) -> [Any]\nReturns an array of objects that meet the criteria of the specified fetch request.\nfunc fetch<T>(NSFetchRequest<T>) -> [T]\nReturns an array of items of the specified type that meet the fetch request’s critieria.\nfunc count(for: NSFetchRequest<NSFetchRequestResult>) -> Int\nReturns the number of objects the specified request fetches when it executes.\nfunc registeredObject(for: NSManagedObjectID) -> NSManagedObject?\nReturns an object that exists in the context.\nfunc object(with: NSManagedObjectID) -> NSManagedObject\nReturns either an existing object from the context or a fault that represents that object.\nfunc existingObject(with: NSManagedObjectID) -> NSManagedObject\nReturns an existing object from either the context or the persistent store.\nvar registeredObjects: Set<NSManagedObject>\nThe set of registered managed objects in the context.\nfunc count<T>(for: NSFetchRequest<T>) -> Int\nReturns a count of the objects the specified request fetches when it executes.\nfunc execute(NSPersistentStoreRequest) -> NSPersistentStoreResult\nPasses a request to the persistent store without affecting the contents of the managed object context, and returns a persistent store result.\nvar retainsRegisteredObjects: Bool\nA Boolean value that indicates whether the context keeps strong references to all registered managed objects."
  },
  {
    "title": "processPendingChanges() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506661-processpendingchanges",
    "html": "Discussion\n\nThis method causes changes to registered managed objects to be recorded with the undo manager.\n\nIn AppKit-based applications, this method is invoked automatically at least once during the event loop (at the end of the loop)—it may be called more often than that if the framework needs to coalesce your changes before doing something else. You can also invoke it manually to coalesce any pending unprocessed changes.\n\nSee Also\nHandling managed objects\nvar shouldDeleteInaccessibleFaults: Bool\nA Boolean value that determines whether the context turns inaccessible faults into deleted objects.\nvar insertedObjects: Set<NSManagedObject>\nThe set of objects that have been inserted into the context but not yet saved in a persistent store.\nvar updatedObjects: Set<NSManagedObject>\nThe set of objects registered with the context that have uncommitted changes.\nvar deletedObjects: Set<NSManagedObject>\nThe set of objects that will be removed from their persistent store during the next save operation.\nfunc shouldHandleInaccessibleFault(NSManagedObject, for: NSManagedObjectID, triggeredByProperty: NSPropertyDescription?) -> Bool\nCreates a log of the inaccessible fault.\nfunc insert(NSManagedObject)\nRegisters an object to be inserted in the context’s persistent store the next time changes are saved.\nfunc delete(NSManagedObject)\nSpecifies an object that should be removed from its persistent store when changes are committed.\nfunc assign(Any, to: NSPersistentStore)\nSpecifies the store in which a newly inserted object will be saved.\nfunc obtainPermanentIDs(for: [NSManagedObject])\nConverts to permanent IDs the object IDs of the objects in a given array.\nfunc detectConflicts(for: NSManagedObject)\nMarks an object for conflict detection.\nfunc refresh(NSManagedObject, mergeChanges: Bool)\nUpdates the persistent properties of a managed object to use the latest values from the persistent store.\nfunc observeValue(forKeyPath: String?, of: Any?, change: [String : Any]?, context: UnsafeMutableRawPointer?)\nAllows a context that has registered as an observer of a value to be notified of a change to that value.\nRelated Documentation\nfunc undo()\nSends an undo message to the context’s undo manager, asking it to reverse the latest uncommitted changes applied to objects in the object graph.\nvar undoManager: UndoManager?\nThe object that provides undo support for the context.\nfunc redo()\nSends a redo message to the context’s undo manager, asking it to reverse the latest undo operation applied to objects in the object graph."
  },
  {
    "title": "controllerDidChangeContent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultscontrollerdelegate/1622290-controllerdidchangecontent",
    "html": "Parameters\ncontroller\n\nThe fetched results controller that sent the message.\n\nDiscussion\n\nThis method is invoked after all invocations of controller(_:didChange:at:for:newIndexPath:) and controller(_:didChange:atSectionIndex:for:) have been sent for a given change event (such as the controller receiving a NSManagedObjectContextDidSave notification).\n\nSee Also\nResponding to Changes\nfunc controller(NSFetchedResultsController<NSFetchRequestResult>, didChangeContentWith: NSDiffableDataSourceSnapshot)\nNotifies the receiver about changes to the content in the fetched results controller, by using a diffable data source snapshot.\nfunc controller(NSFetchedResultsController<NSFetchRequestResult>, didChangeContentWith: CollectionDifference<NSManagedObjectID>)\nNotifies the receiver about changes to the content in the fetched results controller, by using a collection difference.\nfunc controllerWillChangeContent(NSFetchedResultsController<NSFetchRequestResult>)\nNotifies the receiver that the fetched results controller is about to start processing of one or more changes due to an add, remove, move, or update.\nfunc controller(NSFetchedResultsController<NSFetchRequestResult>, didChange: Any, at: IndexPath?, for: NSFetchedResultsChangeType, newIndexPath: IndexPath?)\nNotifies the receiver that a fetched object has been changed due to an add, remove, move, or update.\nfunc controller(NSFetchedResultsController<NSFetchRequestResult>, didChange: NSFetchedResultsSectionInfo, atSectionIndex: Int, for: NSFetchedResultsChangeType)\nNotifies the receiver of the addition or removal of a section."
  },
  {
    "title": "fetch(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1948986-fetch",
    "html": "Parameters\nrequest\n\nThe fetch request that specifies the search criteria.\n\nDiscussion\n\nThis method fetches objects from the context and the persistent stores that you associate with the context’s persistent store coordinator. The method registers any objects it retrieves from a store with the context.\n\nConsider the following when fetching:\n\nIf the fetch request doesn’t have a predicate, it returns all instances of the specified entity.\n\nThe fetch results include any object in the context that’s an instance of the request’s entity, and that meets the request’s criteria, even if the context has yet to save the object to a persistent store.\n\nThe fetch request evalutes the in-memory state of each object. Therefore, the fetch results include any unsaved objects with changes that cause them to meet the request’s criteria, even if their counterparts in the persistent store don’t. Conversely, the results don’t include unsaved objects with in-memory changes that mean they no longer meet the criteria, even if their store versions do.\n\nThe fetch results don’t include deleted objects, even if the context has yet to save the deletion to the persistent store.\n\nA fetch never changes realized objects, or those with pending changes, without developer intervention. If you fetch objects, modify them, and then execute a new fetch that includes a superset of those objects, you don’t receive new instances of those objects. Instead, you receive the existing objects with their current in-memory state.\n\nSee Also\nRegistering and fetching objects\nfunc fetch(NSFetchRequest<NSFetchRequestResult>) -> [Any]\nReturns an array of objects that meet the criteria of the specified fetch request.\nfunc count(for: NSFetchRequest<NSFetchRequestResult>) -> Int\nReturns the number of objects the specified request fetches when it executes.\nfunc registeredObject(for: NSManagedObjectID) -> NSManagedObject?\nReturns an object that exists in the context.\nfunc object(with: NSManagedObjectID) -> NSManagedObject\nReturns either an existing object from the context or a fault that represents that object.\nfunc existingObject(with: NSManagedObjectID) -> NSManagedObject\nReturns an existing object from either the context or the persistent store.\nvar registeredObjects: Set<NSManagedObject>\nThe set of registered managed objects in the context.\nfunc count<T>(for: NSFetchRequest<T>) -> Int\nReturns a count of the objects the specified request fetches when it executes.\nfunc execute(NSPersistentStoreRequest) -> NSPersistentStoreResult\nPasses a request to the persistent store without affecting the contents of the managed object context, and returns a persistent store result.\nfunc refreshAllObjects()\nRefreshes all of the registered managed objects in the context.\nvar retainsRegisteredObjects: Bool\nA Boolean value that indicates whether the context keeps strong references to all registered managed objects."
  },
  {
    "title": "NSPersistentStoreRequest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorerequest",
    "html": "Topics\nConfiguring a Request\nvar affectedStores: [NSPersistentStore]?\nThe stores the request should be sent to.\nvar requestType: NSPersistentStoreRequestType\nThe type of the fetch request.\nenum NSPersistentStoreRequestType\nConstants that specify the types of fetch requests.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nSee Also\nStore Coordination\nclass NSPersistentStoreCoordinator\nAn object that enables an app’s contexts and the underlying persistent stores to work together.\nclass NSPersistentStore\nThe abstract base class for all Core Data persistent stores.\nclass NSPersistentStoreDescription\nA description object used to create and load a persistent store.\nclass NSPersistentStoreResult\nThe abstract base class for results returned from a persistent store coordinator.\nclass NSPersistentStoreAsynchronousResult\nA concrete class used to represent the results of an asynchronous request.\nclass NSSaveChangesRequest\nAn encapsulation of a collection of changes to be made by an object store in response to a save operation on a managed object context.\nclass NSAtomicStore\nAn abstract superclass that you subclass to create a Core Data atomic store.\nclass NSAtomicStoreCacheNode\nA concrete class that you use to represent basic nodes in a Core Data atomic store.\nclass NSIncrementalStore\nAn abstract superclass defining the API through which Core Data communicates with a store.\nclass NSIncrementalStoreNode\nA concrete class used to represent basic nodes in a Core Data incremental store."
  },
  {
    "title": "indexPath(forObject:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultscontroller/1622306-indexpath",
    "html": "Parameters\nobject\n\nAn object in the receiver’s fetch results.\n\nReturn Value\n\nThe index path of object in the receiver’s fetch results, or nil if object could not be found.\n\nDiscussion\n\nIn versions of iOS before 3.2, this method raises an exception if object is not contained in the receiver’s fetch results.\n\nSee Also\nAccessing Results\nvar fetchedObjects: [ResultType]?\nThe results of the fetch.\nfunc object(at: IndexPath) -> ResultType\nReturns the object at the given index path in the fetch results."
  },
  {
    "title": "NSCoreDataVersionNumber10_4 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber10_4",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSCoreDataVersionNumber10_10_3 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber10_10_3",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSCoreDataVersionNumber10_11 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber10_11",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSCoreDataVersionNumber10_10_2 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber10_10_2",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSCoreDataVersionNumber10_10 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscoredataversionnumber10_10",
    "html": "See Also\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3."
  },
  {
    "title": "NSPropertyMapping | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspropertymapping",
    "html": "Topics\nManaging Mapping Attributes\nvar name: String?\nThe name of the property in the destination entity for the property mapping.\nvar valueExpression: NSExpression?\nThe value expression for the property mapping.\nvar userInfo: [AnyHashable : Any]?\nThe user info for the property mapping.\nRelationships\nInherits From\nNSObject\nSee Also\nEntity Mapping\nclass NSMigrationManager\nA migration manager instance that performs a migration of data from one persistent store to another using a given mapping model.\nclass NSMappingModel\nA model instance that specifies how to map a model from a source to a destination managed object model.\nclass NSEntityMapping\nA mapping instance that specifies how to map an entity from a source to a destination managed object model.\nclass NSEntityMigrationPolicy\nA policy instance that customizes the migration process for an entity mapping.\nenum NSEntityMappingType\nThe types for mapping an entity between a source model and a destination model."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultscontroller/1622291-delegate",
    "html": "Discussion\n\nIf you do not specify a delegate, the controller does not track changes to managed objects associated with its managed object context.\n\nSee Also\nGetting Configuration Information\nvar fetchRequest: NSFetchRequest<ResultType>\nThe fetch request used to do the fetching.\nvar managedObjectContext: NSManagedObjectContext\nThe managed object context used to fetch objects.\nvar sectionNameKeyPath: String?\nThe key path of the attribute that determines which section the fetched entity belongs to.\nvar cacheName: String?\nThe name of the file used to cache section information.\nclass func deleteCache(withName: String?)\nDeletes the cached section information with the given name."
  },
  {
    "title": "NSAttributeType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributetype",
    "html": "Overview\n\nCore Data supports the following attribute types, which differentiate between bit sizes to enable data-store independence. For some types, a scalar option is available.\n\nAttribute type\n\n\t\n\nType\n\n\t\n\nScalar type\n\n\t\n\nScalar by default?\n\n\n\n\nInteger 16\n\n\t\n\nNSNumber\n\n\t\n\nInt16\n\n\t\n\nyes\n\n\n\n\nInteger 32\n\n\t\n\nNSNumber\n\n\t\n\nInt32\n\n\t\n\nyes\n\n\n\n\nInteger 64\n\n\t\n\nNSNumber\n\n\t\n\nInt64\n\n\t\n\nyes\n\n\n\n\nDouble\n\n\t\n\nNSNumber\n\n\t\n\nDouble\n\n\t\n\nyes\n\n\n\n\nFloat\n\n\t\n\nNSNumber\n\n\t\n\nFloat\n\n\t\n\nyes\n\n\n\n\nBoolean\n\n\t\n\nNSNumber\n\n\t\n\nBool\n\n\t\n\nyes\n\n\n\n\nDate\n\n\t\n\nNSDate\n\n\t\n\nTimeInterval\n\n\t\n\nno\n\n\n\n\nDecimal\n\n\t\n\nNSDecimalNumber\n\n\t\n\nNSDecimalNumber\n\n\t\n\nno\n\n\n\n\nUUID\n\n\t\n\nUUID\n\n\t\n\nUUID\n\n\t\n\nno\n\n\n\n\nURI\n\n\t\n\nURL\n\n\t\n\n—\n\n\t\n\n—\n\n\n\n\nString\n\n\t\n\nString\n\n\t\n\n—\n\n\t\n\n—\n\n\n\n\nBinary data\n\n\t\n\nData\n\n\t\n\n—\n\n\t\n\n—\n\n\n\n\nTransformable\n\n\t\n\nNSObject\n\n\t\n\n—\n\n\t\n\n—\n\n\n\n\nComposite\n\n\t\n\n—\n\n\t\n\n—\n\n\t\n\n—\n\n\n\n\nUndefined\n\n\t\n\n—\n\n\t\n\n—\n\n\t\n\n—\n\nNote\n\nIf your application uses Binary Large Objects (BLOBs) like image and sound data, prefer to store its binary data outside of the Core Data store.\n\nTopics\nAttribute types\ncase binaryDataAttributeType\nAn attribute that stores binary data.\ncase booleanAttributeType\nAn attribute that stores a Boolean value.\ncase compositeAttributeType\nAn attribute that derives its value by composing other attributes.\ncase dateAttributeType\nAn attribute that stores a date.\ncase decimalAttributeType\nAn attribute that stores a decimal value.\ncase doubleAttributeType\nAn attribute that stores a double value.\ncase floatAttributeType\nAn attribute that stores a float value.\ncase integer16AttributeType\nAn attribute that stores a 16-bit signed integer value.\ncase integer32AttributeType\nAn attribute that stores a 32-bit signed integer value.\ncase integer64AttributeType\nAn attribute that stores a 64-bit signed integer value.\ncase objectIDAttributeType\nAn attribute that stores a managed object’s ID.\ncase stringAttributeType\nAn attribute that stores a string.\ncase transformableAttributeType\nAn attribute that uses a value transformer to derive its value.\ncase undefinedAttributeType\nAn attribute that doesn’t have an explicit type.\ncase URIAttributeType\nAn attribute that stores a uniform resource identifier.\ncase UUIDAttributeType\nAn attribute that stores a universally unique identifier.\nRelationships\nConforms To\nSendable\nSee Also\nStandard attributes\nclass NSPropertyDescription\nA description of a single property belonging to an entity.\nclass NSAttributeDescription\nA description of a single attribute belonging to an entity.\nclass NSRelationshipDescription\nA description of a relationship between two entities."
  },
  {
    "title": "mergeChanges(fromContextDidSave:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506606-mergechanges",
    "html": "Parameters\nnotification\n\nAn instance of an NSManagedObjectContextDidSave notification posted by another context.\n\nDiscussion\n\nThis method refreshes any objects which have been updated in the other context, faults in any newly-inserted objects, and invokes delete(_:): on those which have been deleted.\n\nYou can pass a NSManagedObjectContextDidSave notification posted by a managed object context on another thread, however you must not use the managed objects in the user info dictionary directly. For more details, see Concurrency with Core Data.\n\nSee Also\nManaging concurrency\nlet NSManagedObjectContextQueryGenerationKey: String\nConstant used to reference the query generation token.\nclass func mergeChanges(fromRemoteContextSave: [AnyHashable : Any], into: [NSManagedObjectContext])\nHandles changes from other processes or from a serialized state.\nvar automaticallyMergesChangesFromParent: Bool\nA Boolean value that indicates whether the context automatically merges changes saved to its persistent store coordinator or parent context.\nvar concurrencyType: NSManagedObjectContextConcurrencyType\nThe concurrency type for the context.\nvar mergePolicy: Any\nThe merge policy of the context.\nvar queryGenerationToken: NSQueryGenerationToken?\nReturns the token associated with the query generation currently in use by this context.\nvar transactionAuthor: String?\nThe author for the context that is used as an identifier in persistent history transactions.\nfunc setQueryGenerationFrom(NSQueryGenerationToken?)\nSets the query generation this context should use."
  },
  {
    "title": "NSManagedObject | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobject",
    "html": "Overview\n\nA managed object has an associated entity description (NSEntityDescription) that provides metadata about the object, including the name of the entity that the object represents and the names of its attributes and relationships. A managed object also has an associated managed object context that tracks changes to the object graph.\n\nYou can’t use instances of direct subclasses of NSObject, or any other class that doesn’t inherit from NSManagedObject, with a managed object context. You may create custom subclasses of NSManagedObject, although this isn’t always necessary. If you don’t need custom logic, you can create a complete object graph with NSManagedObject instances.\n\nIf you instantiate a managed object directly, you must call the designated initializer init(entity:insertInto:).\n\nData Storage\n\nIn some respects, an NSManagedObject acts like a dictionary—it’s a generic container object that provides efficient storage for the properties defined by its associated NSEntityDescription instance. NSManagedObject supports a range of common types for attribute values, including string, date, and number (see NSAttributeDescription for full details). Therefore, typically you don’t need to define instance variables in subclasses. Sometimes, however, you want to use types that aren’t supported directly, such as colors and C structures. For example, in a graphics application you might want to define a Rectangle entity that has color and bounds attributes that are an instance of NSColor and an NSRect struct, respectively. For some types you can use a transformable attribute, for others this may require you to create a subclass of NSManagedObject.\n\nFaulting\n\nManaged objects typically represent data held in a persistent store. In some situations a managed object may be a fault—an object whose property values haven’t yet been loaded from the external data store. When you access persistent property values, the fault “fires” and the data is retrieved from the store automatically. This can be a comparatively expensive process (potentially requiring a round trip to the persistent store), and you may wish to avoid unnecessarily firing a fault. See Faulting and Uniquing for more details on faults.\n\nYou can safely invoke the following methods and properties on a fault without causing it to fire: isEqual(_:), hash, superclass, class, self(), isProxy(), isKind(of:), isMember(of:), conforms(to:), responds(to:), description, managedObjectContext, entity, objectID, isInserted, isUpdated, isDeleted, faultingState, and isFault. Because isEqual and hash don’t cause a fault to fire, managed objects can typically be placed in collections without firing a fault. Note, however, that invoking key-value coding methods on the collection object might in turn result in an invocation of valueForKey: on a managed object, which would fire the fault.\n\nAlthough the description property doesn’t cause a fault to fire, if you implement a custom description that accesses the object’s persistent properties, this does cause a fault to fire. You are strongly discouraged from overriding description in this way.\n\nSubclassing Notes\n\nIn combination with the entity description in the managed object model, NSManagedObject provides a rich set of default behaviors including support for arbitrary properties and value validation. If you decide to subclass NSManagedObject to implement custom features, make sure you don’t disrupt Core Data’s behavior.\n\nMethods and Properties You Must Not Override\n\nNSManagedObject itself customizes many features of NSObject so that managed objects can be properly integrated into the Core Data infrastructure. Core Data relies on the NSManagedObject implementation of the following methods and properties, which you therefore absolutely must not override: primitiveValue(forKey:), setPrimitiveValue(_:forKey:), isEqual(_:), hash, superclass, class, self(), isProxy(), isKind(of:), isMember(of:), conforms(to:), responds(to:), managedObjectContext, entity, objectID, isInserted, isUpdated, isDeleted, and isFault, alloc, allocWithZone:, new, instancesRespond(to:), instanceMethod(for:), method(for:), methodSignatureForSelector:, instanceMethodSignatureForSelector:, or isSubclass(of:).\n\nMethods and Properties You Shouldn't Override\n\nAs with any class, you are strongly discouraged from overriding the key-value observing methods such as willChangeValue(forKey:) and didChangeValue(forKey:withSetMutation:using:). Avoid overriding description—if this method fires a fault during a debugging operation, the results may be unpredictable. Also avoid overriding init(entity:insertInto:), or dealloc. Changing values in the init(entity:insertInto:) method won't be noticed by the context, and if you aren't careful, those changes may not be saved. Perform most initialization customization in one of the awake… methods. If you do override init(entity:insertInto:), make sure you adhere to the requirements set out in the method description. See init(entity:insertInto:).\n\nDon’t override dealloc because didTurnIntoFault() is usually a better time to clear values—a managed object may not be reclaimed for some time after it has been turned into a fault. Core Data doesn’t guarantee that dealloc will be called in all scenarios (such as when the application quits). Therefore, don’t include required side effects (like saving or changes to the file system, user preferences, and so on) in these methods.\n\nIn summary, for init(entity:insertInto:) and dealloc, Core Data reserves exclusive control over the life cycle of the managed object (that is, raw memory management). This is so that the framework can provide features such as uniquing and by consequence, relationship maintenance, as well as much better performance than would be possible otherwise.\n\nAdditional Override Considerations\n\nThe following methods are intended to be fine grained and aren’t suitable for large-scale operations. Don’t fetch or save in these methods. In particular, they shouldn’t have side effects on the managed object context.\n\ninit(entity:insertInto:)\n\ndidTurnIntoFault()\n\nwillTurnIntoFault()\n\ndealloc\n\nIn addition, if you plan to override awakeFromInsert, awakeFromFetch, and validation methods, first invoke super.method(), the superclass’s implementation. Don’t modify relationships in awakeFromFetch()—see the method description for details.\n\nCustom Accessor Methods\n\nTypically, you don’t need to write custom accessor methods for properties that are defined in the entity of a managed object’s corresponding managed object model. If you need to do so, follow the implementation patterns described in Managed Object Accessor Methods in Core Data Programming Guide.\n\nCore Data automatically generates accessor methods (and primitive accessor methods) for you. For attributes and to-one relationships, Core Data generates the standard get and set accessor methods; for to-many relationships, Core Data generates the indexed accessor methods as described in Achieving Basic Key-Value Coding Compliance in Key-Value Coding Programming Guide. You do however need to declare the accessor methods or use Objective-C properties to suppress compiler warnings. For a full discussion, see Managed Object Accessor Methods in Core Data Programming Guide.\n\nCustom Instance Variables\n\nBy default, NSManagedObject stores its properties in an internal structure as objects, and in general Core Data is more efficient working with storage under its own control rather than by using custom instance variables.\n\nNSManagedObject provides support for a range of common types for attribute values, including string, date, and number (see NSAttributeDescription for full details). If you want to use types that aren’t supported directly, like colors and C structures, you can either use transformable attributes or create a subclass of NSManagedObject.\n\nSometimes it’s convenient to represent variables as scalars—in drawing applications, for example, where variables represent dimensions and x and y coordinates and are frequently used in calculations. To represent attributes as scalars, you declare instance variables as you do in any other class. You also need to implement suitable accessor methods as described in Managed Object Accessor Methods.\n\nIf you define custom instance variables for example to store derived attributes or other transient properties, clean up these variables in didTurnIntoFault() rather than dealloc.\n\nValidation Methods\n\nNSManagedObject provides consistent hooks for validating property and inter-property values. You typically shouldn’t override validateValue(_:forKey:). Instead implement methods of the form validate<Key>:error:, as defined by the NSKeyValueCoding protocol. If you want to validate inter-property values, you can override validateForUpdate() and/or related validation methods.\n\nDon’t call validateValue:forKey:error: within custom property validation methods—if you do, you create an infinite loop when validateValue:forKey:error: is invoked at runtime. If you do implement custom validation methods, don’t call them directly. Instead, call validateValue:forKey:error: with the appropriate key. This ensures that any constraints defined in the managed object model are applied.\n\nIf you implement custom inter-property validation methods like validateForUpdate(), call the superclass’s implementation first. This ensures that individual property validation methods are also invoked. If there are multiple validation failures in one operation, collect them in an array and add the array—using the key NSDetailedErrorsKey—to the userInfo dictionary in the NSError object you return. For an example, see Managed Object Validation.\n\nTopics\nCreating a Managed Object\ninit(entity: NSEntityDescription, insertInto: NSManagedObjectContext?)\nInitializes a managed object from an entity description and inserts it into the specified managed object context.\ninit(context: NSManagedObjectContext)\nInitializes a managed object subclass and inserts it into the specified managed object context.\nGetting a Managed Object’s Identity\nvar entity: NSEntityDescription\nThe entity description of the managed object.\nvar objectID: NSManagedObjectID\nThe object ID of the managed object.\nclass func entity() -> NSEntityDescription\nReturns the entity description that is associated with this subclass.\nGetting State Information\nvar managedObjectContext: NSManagedObjectContext?\nThe managed object context with which the managed object is registered.\nvar hasChanges: Bool\nA Boolean value that indicates whether the managed object has been inserted, has been deleted, or has unsaved changes.\nvar isInserted: Bool\nA Boolean value that indicates whether the managed object has been inserted in a managed object context.\nvar isUpdated: Bool\nA Boolean value that indicates whether the managed object has unsaved changes.\nvar isDeleted: Bool\nA Boolean value that indicates whether the managed object will be deleted during the next save.\nvar isFault: Bool\nA Boolean value that indicates whether the managed object is a fault.\nvar faultingState: Int\nThe faulting state of the managed object.\nfunc hasFault(forRelationshipNamed: String) -> Bool\nReturns a Boolean value that indicates whether the relationship for a given key is a fault.\nvar hasPersistentChangedValues: Bool\nA Boolean value that indicates whether the managed object has persistent changes.\nManaging Change Events\nclass var contextShouldIgnoreUnmodeledPropertyChanges: Bool\nA Boolean value that indicates whether to mark instances of the class as having changes when an unmodeled property changes.\nfunc awakeFromFetch()\nProvides an opportunity to add code into the life cycle of the managed object when fufilling it from a fault.\nfunc awakeFromInsert()\nProvides an opportunity to add code into the life cycle of the managed object when initially creating it.\nfunc awake(fromSnapshotEvents: NSSnapshotEventType)\nProvides an opportunity to add code into the life cycle of the managed object when fulfilling it from a snapshot.\nfunc changedValues() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc changedValuesForCurrentEvent() -> [String : Any]\nReturns a dictionary containing the keys and new values of persistent properties with changes since the last fetching or saving of the managed object.\nfunc committedValues(forKeys: [String]?) -> [String : Any]\nReturns a dictionary of the most recent fetched or saved values of the managed object for the properties of the specified keys.\nfunc prepareForDeletion()\nProvides an opportunity to add code into the life cycle of the managed object before deleting it.\nfunc willSave()\nProvides an opportunity to add code into the life cycle of the managed object before saving it.\nfunc didSave()\nProvides an opportunity to add code into the life cycle of the managed object after the managed object’s context completes a save operation.\nfunc willTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object before converting it to a fault.\nfunc didTurnIntoFault()\nProvides an opportunity to add code into the life cycle of the managed object after converting it to a fault.\nclass func fetchRequest() -> NSFetchRequest<NSFetchRequestResult>\nReturns an initialized fetch request with the entity this subclass represents.\nvar objectWillChange: ObservableObjectPublisher\nA publisher that emits before the object changes.\ntypealias NSManagedObject.ObjectWillChangePublisher\nAn object that publishes changes from observable objects.\nSupporting Key-Value Coding\nfunc value(forKey: String) -> Any?\nReturns the value for the property specified by key.\nfunc setValue(Any?, forKey: String)\nSets the specified property of the managed object to the specified value.\nfunc primitiveValue(forKey: String) -> Any?\nReturns the value for the specified property from the managed object’s private internal storage .\nfunc setPrimitiveValue(Any?, forKey: String)\nSets the value of a given property in the managed object's private internal storage.\nfunc objectIDs(forRelationshipNamed: String) -> [NSManagedObjectID]\nReturns the object IDs for all of the managed objects that are in the named relationship.\nManaging Data Validation\nfunc validateValue(AutoreleasingUnsafeMutablePointer<AnyObject?>, forKey: String)\nValidates a property value for a given key.\nfunc validateForDelete()\nDetermines whether the managed object can be deleted in its current state.\nfunc validateForInsert()\nDetermines whether the managed object can be inserted in its current state.\nfunc validateForUpdate()\nDetermines whether the managed object's current state is valid.\nValidation error codes\nError codes relating to the validation of managed objects.\nlet NSValidationKeyErrorKey: String\nThe error key for the attribute that failed to validate.\nlet NSValidationObjectErrorKey: String\nThe error key for the object that failed to validate.\nlet NSValidationPredicateErrorKey: String\nThe error key for the predicate that failed to validate.\nlet NSValidationValueErrorKey: String\nThe error key for the value that failed to validate.\nSupporting Key-Value Observing\nfunc didAccessValue(forKey: String?)\nProvides support for key-value observing access notification.\nfunc observationInfo() -> UnsafeMutableRawPointer?\nReturns the observation info of the managed object.\nfunc setObservationInfo(UnsafeMutableRawPointer?)\nSets the observation info of the managed object.\nfunc willAccessValue(forKey: String?)\nProvides support for key-value observing access notification.\nfunc didChangeValue(forKey: String)\nProvides an opportunity to respond when a value of a given property has changed.\nfunc didChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\nProvides an opportunity to respond when a change was made to a specified to-many relationship.\nfunc willChangeValue(forKey: String)\nProvides an opportunity to respond when a value of a given property is about to change.\nfunc willChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\nProvides an opportunity to respond when a change is about to be made to a specified to-many relationship.\nReinitializing Values\nstruct NSSnapshotEventType\nConstants that specify the reason the managed object may need to reinitialize its values.\nRelationships\nInherits From\nNSObject\nConforms To\nNSFetchRequestResult\nObservableObject\nSee Also\nObjects and entities\nclass NSEntityDescription\nA description of a Core Data entity."
  },
  {
    "title": "mergeChanges(fromRemoteContextSave:into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506546-mergechanges",
    "html": "Discussion\n\nThis method more efficiently merges changes into multiple contexts as well as nested contexts. The dictionary keys should be one or more from an NSManagedObjectContextObjectsDidChange: NSInsertedObjectsKey, NSUpdatedObjectsKey, NSDeletedObjectsKey. The values should be an NSArray of either NSManagedObjectID or NSURL objects conforming to valid results from uriRepresentation().\n\nSee Also\nManaging concurrency\nlet NSManagedObjectContextQueryGenerationKey: String\nConstant used to reference the query generation token.\nvar automaticallyMergesChangesFromParent: Bool\nA Boolean value that indicates whether the context automatically merges changes saved to its persistent store coordinator or parent context.\nvar concurrencyType: NSManagedObjectContextConcurrencyType\nThe concurrency type for the context.\nvar mergePolicy: Any\nThe merge policy of the context.\nvar queryGenerationToken: NSQueryGenerationToken?\nReturns the token associated with the query generation currently in use by this context.\nvar transactionAuthor: String?\nThe author for the context that is used as an identifier in persistent history transactions.\nfunc mergeChanges(fromContextDidSave: Notification)\nMerges the changes specified in a given notification.\nfunc setQueryGenerationFrom(NSQueryGenerationToken?)\nSets the query generation this context should use."
  },
  {
    "title": "save() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506866-save",
    "html": "Parameters\nerror\n\nA pointer to an NSError object. You do not need to create an NSError object. The save operation aborts after the first failure if you pass NULL.\n\nReturn Value\n\ntrue if the save succeeds, otherwise false.\n\nDiscussion\n\nIf there were multiple errors (for example several edited objects had validation failures) the description of NSError returned indicates that there were multiple errors, and its userInfo dictionary contains the key NSDetailedErrors. The value associated with the NSDetailedErrors key is an array that contains the individual NSError objects.\n\nIf a context’s parent store is a persistent store coordinator, then changes are committed to the external store. If a context’s parent store is another managed object context, then save() only updates managed objects in that parent store. To commit changes to the external store, you must save changes in the chain of contexts up to and including the context whose parent is the persistent store coordinator.\n\nImportant\n\nAlways verify that the context has uncommitted changes (using the hasChanges property) before invoking the save: method. Otherwise, Core Data may perform unnecessary work.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nManaging unsaved and uncommitted changes\nvar hasChanges: Bool\nA Boolean value that indicates whether the context has uncommitted changes."
  },
  {
    "title": "queryGenerationToken | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1640477-querygenerationtoken",
    "html": "See Also\nManaging concurrency\nlet NSManagedObjectContextQueryGenerationKey: String\nConstant used to reference the query generation token.\nclass func mergeChanges(fromRemoteContextSave: [AnyHashable : Any], into: [NSManagedObjectContext])\nHandles changes from other processes or from a serialized state.\nvar automaticallyMergesChangesFromParent: Bool\nA Boolean value that indicates whether the context automatically merges changes saved to its persistent store coordinator or parent context.\nvar concurrencyType: NSManagedObjectContextConcurrencyType\nThe concurrency type for the context.\nvar mergePolicy: Any\nThe merge policy of the context.\nvar transactionAuthor: String?\nThe author for the context that is used as an identifier in persistent history transactions.\nfunc mergeChanges(fromContextDidSave: Notification)\nMerges the changes specified in a given notification.\nfunc setQueryGenerationFrom(NSQueryGenerationToken?)\nSets the query generation this context should use."
  },
  {
    "title": "setQueryGenerationFrom(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1640469-setquerygenerationfrom",
    "html": "See Also\nManaging concurrency\nlet NSManagedObjectContextQueryGenerationKey: String\nConstant used to reference the query generation token.\nclass func mergeChanges(fromRemoteContextSave: [AnyHashable : Any], into: [NSManagedObjectContext])\nHandles changes from other processes or from a serialized state.\nvar automaticallyMergesChangesFromParent: Bool\nA Boolean value that indicates whether the context automatically merges changes saved to its persistent store coordinator or parent context.\nvar concurrencyType: NSManagedObjectContextConcurrencyType\nThe concurrency type for the context.\nvar mergePolicy: Any\nThe merge policy of the context.\nvar queryGenerationToken: NSQueryGenerationToken?\nReturns the token associated with the query generation currently in use by this context.\nvar transactionAuthor: String?\nThe author for the context that is used as an identifier in persistent history transactions.\nfunc mergeChanges(fromContextDidSave: Notification)\nMerges the changes specified in a given notification."
  },
  {
    "title": "sectionNameKeyPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultscontroller/1622285-sectionnamekeypath",
    "html": "Discussion\n\nThis property returns the value you specify for the sectionNameKeyPath parameter when you initialize the fetched results controller.\n\nIf the controller generates sections, typically this property’s value matches the specified key path of the first sort descriptor in the controller’s fetch request. If the two key paths don’t match, then they must generate the same relative ordering. For example, the fetch request’s first sort descriptor might specify the key path of a persistent attribute, but sectionNameKeyPath might specify the key path of a transient attribute that derives its value from the persistent one.\n\nSee Also\nGetting Configuration Information\nvar fetchRequest: NSFetchRequest<ResultType>\nThe fetch request used to do the fetching.\nvar managedObjectContext: NSManagedObjectContext\nThe managed object context used to fetch objects.\nvar cacheName: String?\nThe name of the file used to cache section information.\nvar delegate: NSFetchedResultsControllerDelegate?\nThe object that is notified when the fetched results changed.\nclass func deleteCache(withName: String?)\nDeletes the cached section information with the given name."
  },
  {
    "title": "Generating Code | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/modeling_data/generating_code",
    "html": "Overview\n\nAfter you define your entities, their attributes, and relationships as described in Configuring a Core Data Model, specify the classes that you’ll use to create instances of your entities. Core Data optionally generates two files to support your class: a class file and a properties file.\n\nThe class file declares the class as a subclass of NSManagedObject:\n\n//\n//  Quake+CoreDataClass.swift\n//  \n//  This file was automatically generated and should not be edited.\n//\n\n\nimport Foundation\nimport CoreData\n\n\npublic class Quake: NSManagedObject {\n\n\n}\n\n\nThe properties file declares an extension to hold the @NSManaged properties representing attributes and relationships, their accessors, and helper functionality for fetching instances of this type:\n\n//\n//  Quake+CoreDataProperties.swift\n//\n//  This file was automatically generated and should not be edited.\n//\n\n\nimport Foundation\nimport CoreData\n\n\nextension Quake {\n\n\n    @nonobjc public class func fetchRequest() -> NSFetchRequest<Quake> {\n        return NSFetchRequest<Quake>(entityName: \"Quake\")\n    }\n\n\n    @NSManaged public var code: String?\n    @NSManaged public var magnitude: Float\n    @NSManaged public var place: String?\n    @NSManaged public var time: Date?\n    @NSManaged public var countries: NSSet?\n}\n\n\n// MARK: Generated accessors for countries\nextension Quake {\n\n\n    @objc(addCountriesObject:)\n    @NSManaged public func addToCountries(_ value: Country)\n\n\n    @objc(removeCountriesObject:)\n    @NSManaged public func removeFromCountries(_ value: Country)\n\n\n    @objc(addCountries:)\n    @NSManaged public func addToCountries(_ values: NSSet)\n\n\n    @objc(removeCountries:)\n    @NSManaged public func removeFromCountries(_ values: NSSet)\n}\n\n\nCore Data takes care of generating managed object subclasses for you, but you take control when you need to add logic or edit properties.\n\nSelect a Code Generation Option\n\nTo select a code generation option:\n\nSelect an entity from the Entities list.\n\nIn the Data Model inspector, below Class, the Codegen pop-up menu offers three options: Manual/None, Class Definition, and Category/Extension.\n\nThe sections that follow describe circumstances for choosing each option.\n\nAutomatically Generate Both Files\n\nChoose Class Definition when you don’t need to edit the properties or functionality of the managed object subclass and properties files that Core Data generates for you.\n\nThe generated source code doesn’t appear in your project’s source list. Xcode produces the class and properties files as part of the build process and places them in your project’s build directory.\n\nThese files regenerate whenever the related entity changes in the data model.\n\nGenerate the Properties File Only\n\nChoose Category/Extension to add additional convenience methods or business logic inside your managed object subclass.\n\nThis option allows you take full control of the class file, while continuing to automatically generate the properties file to keep it up-to-date with the model editor. It’s up to you to create and maintain your class manually.\n\nTo generate the class file initially, do the following:\n\nFrom the Xcode menu bar, choose Editor > Create NSManagedObject Subclass.\n\nSelect your data model, then the appropriate entity, and choose where to save the files. Xcode places both class and properties files into your project.\n\nBecause the build process continues to generate the properties file, move this duplicate file from your project source list to the Trash.\n\nYou can now see and edit the class file in your project source list.\n\nManage Both Files Manually\n\nChoose Manual/None to edit the properties in your managed object subclass, for example, to alter access modifiers, and to add additional convenience methods or business logic.\n\nUsing this option, Core Data doesn’t generate any files to support your managed object. You create and maintain your class, including its properties, manually. Core Data then locates these files using the values you supply in the class name and module fields.\n\nTo generate the class and properties files initially:\n\nFrom the Xcode menu bar, choose Editor > Create NSManagedObject Subclass.\n\nSelect your data model, then the appropriate entity, and choose where to save the files. Xcode places both a class and a properties file into your project.\n\nYou can now see and edit both the class and properties files in your project source list.\n\nNote\n\nTo regenerate class and properties files at any time, choose Editor > Create NSManagedObject Subclass. Be aware that the new files overwrite any existing files at the target location.\n\nSee Also\nConfiguring a Core Data Model\nConfiguring Entities\nModel your app’s objects.\nConfiguring Attributes\nDescribe the properties that compose an entity.\nConfiguring Relationships\nSpecify how entities relate and how change propagates between them."
  },
  {
    "title": "Configuring Entities | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/modeling_data/configuring_entities",
    "html": "Overview\n\nAn entity describes an object, including its name, attributes, and relationships. Create an entity for each of your app’s objects.\n\nAdd Entities\n\nAfter you create a Core Data model as described in Creating a Core Data model, add an entity to your project’s .xcdatamodeld file:\n\nClick Add Entity at the bottom of the editor area. A new entity with placeholder name Entity appears in the Entities list.\n\nIn the Entities list, double-click the newly added entity and rename it. This step updates both the entity name and class name visible in the Data Model inspector.\n\nIn addition to the required name and class name fields, entities have a default setting for the required code generation field. If you need to add inheritance, unique constraints, versioning, or other optional information, configure your entity as described below. Otherwise, add the properties that compose your entity as described in Configuring Attributes.\n\nConfigure Entities\n\nUse the data model inspector (choose View > Inspectors > Show Data Model Inspector) to configure your entity.\n\nEntity Name\n\nThe name of the entity in the managed object model. This field reflects the name shown in the Entities list.\n\nAbstract Entity\n\nSelect the Abstract Entity checkbox if you won’t create any instances of the entity—for example, if it exists only as a parent entity that must never be instantiated directly. By default, this option is unselected, resulting in a concrete entity.\n\nParent Entity\n\nIf you have a number of similar entities, you can define the common properties in a parent entity, and have child entities inherit those properties. By default, this field is blank.\n\nClass Name\n\nThe name of the class you'll use when creating managed object instances from this entity. By default, the class name mirrors the entity name; however, if you change the class name, the entity name doesn’t reflect the changes.\n\nModule\n\nThe module where the class for this entity resides. By default, Core Data locates class files in the global namespace.\n\nCodegen\n\nChoose a code generation option for generating managed object subclass and properties files to support your entity. By default, this option is set to Class Definition, and Core Data generates both files for you automatically.\n\nFor information about the options for code generation, see Generating Code.\n\nConstraints\n\nAfter adding attributes as shown in Configuring Attributes, optionally enter the name of an attribute (or comma-separated list of attributes) to serve as unique constraints on the entity.\n\nUnique constraints prevent duplicate records in the store. When saving a new record, the store checks whether any record already exists with the same value for the constrained attribute. In the case of a conflict, NSMergePolicyType.mergeByPropertyObjectTrumpMergePolicyType causes the new record to overwrite all fields in the existing record.\n\nSpotlight Display Name\n\nAn NSExpression that Core Spotlight uses to display an instance of this entity. This expression may include keypaths, language functions like lowercased() and uppercased(), and custom functions.\n\nFor more information, see Core Spotlight.\n\nUser Info\n\nA dictionary in which you can optionally store any application-specific information related to the entity.\n\nVersioning Hash Modifier\n\nProvide a hash modifier when maintaining multiple model versions if the structure of an entity is the same, but the format or content of its data has changed.\n\nVersioning Renaming ID\n\nProvide a renaming ID if you rename an entity between model versions. Set the renaming identifier in the new model to the name of the corresponding entity in the previous model.\n\nFor more information, see Migrating your data model automatically.\n\nSee Also\nConfiguring a Core Data Model\nConfiguring Attributes\nDescribe the properties that compose an entity.\nConfiguring Relationships\nSpecify how entities relate and how change propagates between them.\nGenerating Code\nAutomatically or manually generate managed object subclasses from entities."
  },
  {
    "title": "Setting Up a Core Data Stack Manually | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/setting_up_a_core_data_stack/setting_up_a_core_data_stack_manually",
    "html": "Overview\n\nNSPersistentContainer is supported in iOS 10.0+ and macOS 10.12+. If you’re deploying to an earlier target, you need to manually instantiate an NSManagedObjectModel, an NSPersistentStoreCoordinator, and at least one NSManagedObjectContext.\n\nCreate a Managed Object Model\n\nTo instantiate an NSManagedObjectModel, you pass in a URL that points to the compiled version of the .xcdatamodeld file. This .momd file is typically part of your app bundle.\n\nguard let modelURL = Bundle.main.url(forResource: \"DataModel\",\n                                     withExtension: \"momd\") else {\n    fatalError(\"Failed to find data model\")\n}\nguard let mom = NSManagedObjectModel(contentsOf: modelURL) else {\n    fatalError(\"Failed to create model from file: \\(modelURL)\")\n}\n\nCreate a Persistent Store Coordinator\n\nNext, you pass the loaded model into the NSPersistentStoreCoordinator initializer, to create a store coordinator associated with the model.\n\nlet psc = NSPersistentStoreCoordinator(managedObjectModel: mom)\n\nAdd a Persistent Store\n\nIf you want Core Data to persist your data model to disk, tell the store coordinator where the file will reside and what format to use.\n\nlet dirURL = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).last\nlet fileURL = URL(string: \"DataModel.sql\", relativeTo: dirURL)\ndo {\n    try psc.addPersistentStore(ofType: NSSQLiteStoreType,\n                               configurationName: nil,\n                               at: fileURL, options: nil)\n} catch {\n    fatalError(\"Error configuring persistent store: \\(error)\")\n}\n\n\nThere are advantages and disadvantages to each of the available store types. Refer to the NSPersistentStoreCoordinator documentation for details on each store type.\n\nCreate a Managed Object Context\n\nCreate an NSManagedObjectContext, and set its store coordinator property.\n\nlet moc = NSManagedObjectContext(concurrencyType: .mainQueueConcurrencyType)\nmoc.persistentStoreCoordinator = psc\n\n\nThe bulk of your app’s interaction with Core Data will be with this context. Pass this context by reference to your user interface. See Pass a Persistent Container Reference to a View Controller."
  },
  {
    "title": "eventNotificationUserInfoKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/3618813-eventnotificationuserinfokey",
    "html": "See Also\nMonitoring Container Events\nclass NSPersistentCloudKitContainer.Event\nAn object that represents activity in a persistent CloudKit container.\nenum NSPersistentCloudKitContainer.EventType\nThe type of event in a persistent CloudKit container, either setup, import, or export.\nclass NSPersistentCloudKitContainerEventRequest\nA request to fetch setup, import, or export events in a persistent CloudKit container.\nclass NSPersistentCloudKitContainerEventResult\nThe result of a request to fetch persistent CloudKit container events.\nclass let eventChangedNotification: NSNotification.Name\nA notification that contains details about an event in a persistent CloudKit container."
  },
  {
    "title": "databaseScope | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontaineroptions/3580372-databasescope",
    "html": "See Also\nCreating Container Options\ninit(containerIdentifier: String)\nInitializes container options using the given CloudKit container identifier.\nvar containerIdentifier: String\nThe identifier of the CloudKit container associated with a given store description."
  },
  {
    "title": "eventChangedNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/3618808-eventchangednotification",
    "html": "See Also\nMonitoring Container Events\nclass NSPersistentCloudKitContainer.Event\nAn object that represents activity in a persistent CloudKit container.\nenum NSPersistentCloudKitContainer.EventType\nThe type of event in a persistent CloudKit container, either setup, import, or export.\nclass NSPersistentCloudKitContainerEventRequest\nA request to fetch setup, import, or export events in a persistent CloudKit container.\nclass NSPersistentCloudKitContainerEventResult\nThe result of a request to fetch persistent CloudKit container events.\nclass let eventNotificationUserInfoKey: String\nThe user info dictionary key for the persistent CloudKit container event."
  },
  {
    "title": "NSPersistentCloudKitContainer.EventType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/eventtype",
    "html": "Topics\nEvent Types\ncase setup\nAn event the persistent CloudKit container generates when setting up a store.\ncase `import`\nAn event the persistent CloudKit container generates when importing records into a store.\ncase export\nAn event the persistent CloudKit container generates when exporting managed objects from a store.\nRelationships\nConforms To\nSendable\nSee Also\nMonitoring Container Events\nclass NSPersistentCloudKitContainer.Event\nAn object that represents activity in a persistent CloudKit container.\nclass NSPersistentCloudKitContainerEventRequest\nA request to fetch setup, import, or export events in a persistent CloudKit container.\nclass NSPersistentCloudKitContainerEventResult\nThe result of a request to fetch persistent CloudKit container events.\nclass let eventChangedNotification: NSNotification.Name\nA notification that contains details about an event in a persistent CloudKit container.\nclass let eventNotificationUserInfoKey: String\nThe user info dictionary key for the persistent CloudKit container event."
  },
  {
    "title": "NSPersistentCloudKitContainerEventRequest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainereventrequest",
    "html": "Topics\nFetching Events\nclass func fetchEvents(after: Date) -> Self\nCreates a fetch request for events after a specified date from a persistent CloudKit container.\nclass func fetchEvents(after: NSPersistentCloudKitContainer.Event?) -> Self\nCreates a fetch request for events that occur after a specified event from a persistent CloudKit container.\nclass func fetchEvents(matchingFetch: NSFetchRequest<NSFetchRequestResult>) -> Self\nCreates a fetch request for events that match a specified fetch request from a persistent CloudKit container.\nclass func fetchForEvents() -> NSFetchRequest<NSFetchRequestResult>\nCreates a fetch request for all events in a persistent CloudKit container.\nvar resultType: NSPersistentCloudKitContainerEventResult.ResultType\nThe type of result that the request returns.\nRelationships\nInherits From\nNSPersistentStoreRequest\nSee Also\nMonitoring Container Events\nclass NSPersistentCloudKitContainer.Event\nAn object that represents activity in a persistent CloudKit container.\nenum NSPersistentCloudKitContainer.EventType\nThe type of event in a persistent CloudKit container, either setup, import, or export.\nclass NSPersistentCloudKitContainerEventResult\nThe result of a request to fetch persistent CloudKit container events.\nclass let eventChangedNotification: NSNotification.Name\nA notification that contains details about an event in a persistent CloudKit container.\nclass let eventNotificationUserInfoKey: String\nThe user info dictionary key for the persistent CloudKit container event."
  },
  {
    "title": "NSPersistentCloudKitContainerEventResult | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainereventresult",
    "html": "Topics\nHandling Event Results\nvar result: Any?\nThe result of the persistent CloudKit container event request, which the result type determines.\nvar resultType: NSPersistentCloudKitContainerEventResult.ResultType\nThe type of result that the CloudKit container event fetch request returns.\nenum NSPersistentCloudKitContainerEventResult.ResultType\nThe types of results from a persistent CloudKit container event fetch request.\nRelationships\nInherits From\nNSPersistentStoreResult\nSee Also\nMonitoring Container Events\nclass NSPersistentCloudKitContainer.Event\nAn object that represents activity in a persistent CloudKit container.\nenum NSPersistentCloudKitContainer.EventType\nThe type of event in a persistent CloudKit container, either setup, import, or export.\nclass NSPersistentCloudKitContainerEventRequest\nA request to fetch setup, import, or export events in a persistent CloudKit container.\nclass let eventChangedNotification: NSNotification.Name\nA notification that contains details about an event in a persistent CloudKit container.\nclass let eventNotificationUserInfoKey: String\nThe user info dictionary key for the persistent CloudKit container event."
  },
  {
    "title": "NSPersistentCloudKitContainerSchemaInitializationOptions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainerschemainitializationoptions",
    "html": "Topics\nConstants\nstatic var dryRun: NSPersistentCloudKitContainerSchemaInitializationOptions\nA flag that indicates the container validates the model and generates the records, but doesn’t upload them to CloudKit.\nstatic var printSchema: NSPersistentCloudKitContainerSchemaInitializationOptions\nPrints the generated records to the console.\nCreating Schema Initialization Options\ninit(rawValue: UInt)\nCreates the schema initialization options using the specified raw value.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nPromoting Your Schema\nfunc initializeCloudKitSchema(options: NSPersistentCloudKitContainerSchemaInitializationOptions)\nCreates the CloudKit schema for all stores in the container that manage a CloudKit database."
  },
  {
    "title": "share(_:to:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/3746834-share",
    "html": "Parameters\nmanagedObjects\n\nThe managed objects to share.\n\nshare\n\nA share record that identifies an existing shared record zone to associate the managed objects with. Use nil to create a new shared record zone that contains only the specified managed objects and doesn’t have any participants.\n\ncompletion\n\nThe handler to invoke after Core Data shares the managed objects.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc share(_ managedObjects: [NSManagedObject], to share: CKShare?) async throws -> (Set<NSManagedObjectID>, CKShare, CKContainer)\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\ncompletion returns no value and takes the following parameters:\n\nThe IDs of the shared objects.\n\nThe share record. For more information, see CKShare.\n\nThe CloudKit container of the database that stores the shared record zone. For more information, see CKContainer.\n\nAn error object that contains information about a problem, or nil if the managed objects share successfully.\n\nWhen you invoke this method, Core Data performs a deep traversal among the specified managed objects and adds any related object to the share.\n\nSharing fails if any of the following conditions apply:\n\nAny objects in managedObjects, or those the traversal finds, belong to an existing share record.\n\nAny objects in managedObjects belong to a persistent store that doesn’t support sharing, such as those you configure with the CKDatabase.Scope.public database scope.\n\nThe current device state doesn’t supporting shared, such as when there isn’t an active iCloud account.\n\nYou can use completion directly with the init(preparationHandler:) method of UICloudSharingController, as the following example shows.\n\nfunc share(_ objects: [NSManagedObjects], in container: NSPersistentCloudKitContainer) {\n  // Create an instance of UICloudSharingController.\n  let cloudSharingController = UICloudSharingController {\n    (controller, completion: @escaping (CKShare?, CKContainer?, Error?) -> Void) in\n    \n    // Call the container's share method, passing the managed objects to share.\n    container.share(objects, to: nil) { _, share, container, error in\n      // Invoke the cloud-sharing controller's completion handler,\n      // passing the share, container, and error parameters that\n      // NSPersistentCloudKitContainer provides.\n      completion(share, container, error)\n    }\n  }\n\n\n  // Present the cloud-sharing controller to the user.\n  present(cloudSharingController, animated: true)\n}\n\n\nSee Also\nSharing Objects\nAccepting Share Invitations in a SwiftUI App\nAdapt your app to use UIKit’s application and scene delegates so it can process CloudKit share invitations.\nfunc acceptShareInvitations(from: [CKShareMetadata], into: NSPersistentStore, completion: (([CKShareMetadata]?, Error?) -> Void)?)\nAccepts one or more invitations to participate in sharing using the specified metadata.\nfunc fetchParticipants(matching: [CKUserIdentityLookupInfo], into: NSPersistentStore, completion: ([CKShareParticipant]?, Error?) -> Void)\nFetches all participants that match the specified critieria.\nfunc fetchShares(in: NSPersistentStore?) -> [CKShare]\nReturns an array that contains all share records in the specified persistent store.\nfunc fetchShares(matching: [NSManagedObjectID]) -> [NSManagedObjectID : CKShare]\nReturns a dictionary that contains the share records that CloudKit associates with specified managed object IDs.\nfunc persistUpdatedShare(CKShare, in: NSPersistentStore, completion: ((CKShare?, Error?) -> Void)?)\nSaves the share record and schedules it for export to iCloud."
  },
  {
    "title": "initializeCloudKitSchema(options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/3343548-initializecloudkitschema",
    "html": "Parameters\noptions\n\nThe options to use when creating the CloudKit schema.\n\nReturn Value\n\ntrue if the operations succeed; otherwise, false. If the operations fail, the error parameter holds the underlying error.\n\nDiscussion\n\nTo create the schema, this method creates a set of representative CKRecord instances for all stores in the container that use Core Data with CloudKit, and uploads them to CloudKit. These records have a representative value for every field Core Data might serialize for the specified managed object model. After successfully uploading the records, the schema is visible in the CloudKit Dashboard and the container deletes the representative records.\n\nNote\n\nThis method also validates the managed object model in use for a store, so if the model isn’t valid for use with CloudKit, a validation error may return.\n\nSee Also\nPromoting Your Schema\nstruct NSPersistentCloudKitContainerSchemaInitializationOptions\nOptions that control the behavior when promoting the container’s schema to CloudKit."
  },
  {
    "title": "persistUpdatedShare(_:in:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/3746832-persistupdatedshare",
    "html": "Parameters\nshare\n\nThe share record to save.\n\npersistentStore\n\nThe persistent store that provides the database scope and the CloudKit container’s identifier. For more information, see NSPersistentCloudKitContainerOptions.\n\ncompletion\n\nThe handler to invoke after the export finishes.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc persistUpdatedShare(_ share: CKShare, in persistentStore: NSPersistentStore) async throws -> CKShare\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\ncompletion returns no value and takes the following parameters:\n\nThe saved share record, or nil if the save fails.\n\nAn error object that contains information about a problem, or nil if the share record saves successfully.\n\nCore Data saves the share to the persistent store before this method returns, but doesn’t invoke the completion handler until after the export finishes.\n\nImportant\n\nWhenever you modify a share record, save the changes using this method to keep the record and the local store’s metadata in sync.\n\nSee Also\nSharing Objects\nAccepting Share Invitations in a SwiftUI App\nAdapt your app to use UIKit’s application and scene delegates so it can process CloudKit share invitations.\nfunc acceptShareInvitations(from: [CKShareMetadata], into: NSPersistentStore, completion: (([CKShareMetadata]?, Error?) -> Void)?)\nAccepts one or more invitations to participate in sharing using the specified metadata.\nfunc fetchParticipants(matching: [CKUserIdentityLookupInfo], into: NSPersistentStore, completion: ([CKShareParticipant]?, Error?) -> Void)\nFetches all participants that match the specified critieria.\nfunc fetchShares(in: NSPersistentStore?) -> [CKShare]\nReturns an array that contains all share records in the specified persistent store.\nfunc fetchShares(matching: [NSManagedObjectID]) -> [NSManagedObjectID : CKShare]\nReturns a dictionary that contains the share records that CloudKit associates with specified managed object IDs.\nfunc share([NSManagedObject], to: CKShare?, completion: (Set<NSManagedObjectID>?, CKShare?, CKContainer?, Error?) -> Void)\nAssociates the specified managed objects with a new or existing share record."
  },
  {
    "title": "fetchShares(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/3746830-fetchshares",
    "html": "Parameters\npersistentStore\n\nThe persistent store that contains the share records. Use nil to fetch share records from each of the persistent container’s stores.\n\nerror\n\nOn return, an error object that contains information about a problem, or nil if the method successfully fetches all share records.\n\nReturn Value\n\nAn array of CKShare objects. If the fetch is successful, but Core Data doesn’t find any share records, the method returns an empty array.\n\nDiscussion\n\nUse a fetched share record to manage its participants and their permissions, or assign data directly to it. A share record is a subclass of CKRecord, which means you can store any data you choose in the underlying record to meet your specific needs. For more information, see CKShare.\n\nIf you modify a share record, you must save it using the persistUpdatedShare(_:in:completion:) method.\n\nNote\n\nThis method fetches known share records only. It doesn’t attempt to discover additional record zones or share records in the persistent store’s CloudKit database.\n\nSee Also\nSharing Objects\nAccepting Share Invitations in a SwiftUI App\nAdapt your app to use UIKit’s application and scene delegates so it can process CloudKit share invitations.\nfunc acceptShareInvitations(from: [CKShareMetadata], into: NSPersistentStore, completion: (([CKShareMetadata]?, Error?) -> Void)?)\nAccepts one or more invitations to participate in sharing using the specified metadata.\nfunc fetchParticipants(matching: [CKUserIdentityLookupInfo], into: NSPersistentStore, completion: ([CKShareParticipant]?, Error?) -> Void)\nFetches all participants that match the specified critieria.\nfunc fetchShares(matching: [NSManagedObjectID]) -> [NSManagedObjectID : CKShare]\nReturns a dictionary that contains the share records that CloudKit associates with specified managed object IDs.\nfunc persistUpdatedShare(CKShare, in: NSPersistentStore, completion: ((CKShare?, Error?) -> Void)?)\nSaves the share record and schedules it for export to iCloud.\nfunc share([NSManagedObject], to: CKShare?, completion: (Set<NSManagedObjectID>?, CKShare?, CKContainer?, Error?) -> Void)\nAssociates the specified managed objects with a new or existing share record."
  },
  {
    "title": "fetchShares(matching:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/3746831-fetchshares",
    "html": "Parameters\nobjectIDs\n\nAn array of managed object IDs.\n\nerror\n\nOn return, an error object that contains information about a problem, or nil if the method successfully fetches the share records.\n\nReturn Value\n\nA dictionary that uses objectIDs as its keys, and the associated share records as its values.\n\nDiscussion\n\nIf a specified managed object doesn’t belong to a shared record zone, or if Core Data has yet to save the object to iCloud and, therefore, its record zone is unknown, the returned dictionary doesn’t include it.\n\nUse a fetched share record to manage its participants and their permissions, or assign data directly to it. A share record is a subclass of CKRecord, which means you can store any data you choose in the underlying record to meet your specific needs. For more information, see CKShare.\n\nIf you modify a share record, you must save it using the persistUpdatedShare(_:in:completion:) method.\n\nNote\n\nThis method fetches known share records only. It doesn’t attempt to discover additional record zones or share records in any of the persistent container’s CloudKit databases.\n\nSee Also\nSharing Objects\nAccepting Share Invitations in a SwiftUI App\nAdapt your app to use UIKit’s application and scene delegates so it can process CloudKit share invitations.\nfunc acceptShareInvitations(from: [CKShareMetadata], into: NSPersistentStore, completion: (([CKShareMetadata]?, Error?) -> Void)?)\nAccepts one or more invitations to participate in sharing using the specified metadata.\nfunc fetchParticipants(matching: [CKUserIdentityLookupInfo], into: NSPersistentStore, completion: ([CKShareParticipant]?, Error?) -> Void)\nFetches all participants that match the specified critieria.\nfunc fetchShares(in: NSPersistentStore?) -> [CKShare]\nReturns an array that contains all share records in the specified persistent store.\nfunc persistUpdatedShare(CKShare, in: NSPersistentStore, completion: ((CKShare?, Error?) -> Void)?)\nSaves the share record and schedules it for export to iCloud.\nfunc share([NSManagedObject], to: CKShare?, completion: (Set<NSManagedObjectID>?, CKShare?, CKContainer?, Error?) -> Void)\nAssociates the specified managed objects with a new or existing share record."
  },
  {
    "title": "acceptShareInvitations(from:into:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/3746828-acceptshareinvitations",
    "html": "Parameters\nmetadata\n\nAn array of share metadata. For more information, see CKShare.Metadata.\n\npersistentStore\n\nThe persistent store that provides the CloudKit container’s identifier. The store must have the CKDatabase.Scope.shared database scope. For more information, see NSPersistentCloudKitContainerOptions.\n\ncompletion\n\nThe handler to invoke after you process the specified invitations.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc acceptShareInvitations(from metadata: [CKShareMetadata], into persistentStore: NSPersistentStore) async throws -> [CKShareMetadata]\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\ncompletion returns no value and takes the following parameters:\n\nAn array of accepted share metadata\n\nAn error object that contains information about a problem, or nil if the method successfully accepts all invitations\n\nYou typically call this method from your scene delegate’s windowScene(_:userDidAcceptCloudKitShareWith:) method. For SwiftUI apps, there are additional steps you need to complete before you can do this. For more information, see Accepting Share Invitations in a SwiftUI App.\n\nNote\n\nTo be able to accept the share invitations, this method requires an active network connection. It executes a number of CloudKit operations, and imports any shared records into the relevant persistent stores, so it may take some time to complete.\n\nSee Also\nSharing Objects\nAccepting Share Invitations in a SwiftUI App\nAdapt your app to use UIKit’s application and scene delegates so it can process CloudKit share invitations.\nfunc fetchParticipants(matching: [CKUserIdentityLookupInfo], into: NSPersistentStore, completion: ([CKShareParticipant]?, Error?) -> Void)\nFetches all participants that match the specified critieria.\nfunc fetchShares(in: NSPersistentStore?) -> [CKShare]\nReturns an array that contains all share records in the specified persistent store.\nfunc fetchShares(matching: [NSManagedObjectID]) -> [NSManagedObjectID : CKShare]\nReturns a dictionary that contains the share records that CloudKit associates with specified managed object IDs.\nfunc persistUpdatedShare(CKShare, in: NSPersistentStore, completion: ((CKShare?, Error?) -> Void)?)\nSaves the share record and schedules it for export to iCloud.\nfunc share([NSManagedObject], to: CKShare?, completion: (Set<NSManagedObjectID>?, CKShare?, CKContainer?, Error?) -> Void)\nAssociates the specified managed objects with a new or existing share record."
  },
  {
    "title": "fetchParticipants(matching:into:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/3746829-fetchparticipants",
    "html": "Parameters\nlookupInfos\n\nAn array of criteria that CloudKit uses to find participants. For more information, see CKUserIdentity.LookupInfo.\n\npersistentStore\n\nThe persistent store that provides the CloudKit container’s identifier. For more information, see NSPersistentCloudKitContainerOptions.\n\ncompletion\n\nThe handler to invoke after the method fetches participants.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc fetchParticipants(matching lookupInfos: [CKUserIdentityLookupInfo], into persistentStore: NSPersistentStore) async throws -> [CKShareParticipant]\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\ncompletion returns no value and takes the following parameters:\n\nAn array of fetched participants. For more information, see CKShare.Participant.\n\nAn error object that contains information about a problem, or nil if the method successfully fetches participants.\n\nNote\n\nTo fetch participants, this method executes operations against CKContainer, and requires an active network connection.\n\nSee Also\nSharing Objects\nAccepting Share Invitations in a SwiftUI App\nAdapt your app to use UIKit’s application and scene delegates so it can process CloudKit share invitations.\nfunc acceptShareInvitations(from: [CKShareMetadata], into: NSPersistentStore, completion: (([CKShareMetadata]?, Error?) -> Void)?)\nAccepts one or more invitations to participate in sharing using the specified metadata.\nfunc fetchShares(in: NSPersistentStore?) -> [CKShare]\nReturns an array that contains all share records in the specified persistent store.\nfunc fetchShares(matching: [NSManagedObjectID]) -> [NSManagedObjectID : CKShare]\nReturns a dictionary that contains the share records that CloudKit associates with specified managed object IDs.\nfunc persistUpdatedShare(CKShare, in: NSPersistentStore, completion: ((CKShare?, Error?) -> Void)?)\nSaves the share record and schedules it for export to iCloud.\nfunc share([NSManagedObject], to: CKShare?, completion: (Set<NSManagedObjectID>?, CKShare?, CKContainer?, Error?) -> Void)\nAssociates the specified managed objects with a new or existing share record."
  },
  {
    "title": "Reading CloudKit Records for Core Data | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/mirroring_a_core_data_store_with_cloudkit/reading_cloudkit_records_for_core_data",
    "html": "Overview\n\nAlthough your Core Data app interacts primarily with managed objects, you can access a managed object’s CKRecord directly. This is useful if you’re leveraging CloudKit to add features like sharing. You can also use CloudKit JS to access CloudKit records from your web app.\n\nTo prevent collision with existing CloudKit record types and reserved names, CloudKit prefixes the CKRecord types and fields it creates for your Core Data entities with CD_.\n\nTo work with records directly, you need to understand the mappings between entities and record types, attributes and fields, and the ways a record stores relationships.\n\nNote\n\nCore Data doesn’t use CloudKit’s native support for relationships, CKRecord.Reference, because this field limits the number of references to 750, and cannot represent many-to-many relationships. Core Data stores the relationship in CloudKit according to its cardinality (one-to-one, one-to-many, or many-to-many), as described in this article.\n\nRead Entities from Record Types\n\nCloudKit doesn’t typically support inheritance, so it provides only a single system field, recordType, to hold type information. Core Data stores the name of the root entity from the inheritance hierarchy in recordType.\n\nWhen you initialize a schema, Core Data adds a custom field to the record type, CD_entityName, to store the name of the current entity.\n\nFor example, an entity named Post generates the following structure (before adding its attributes), with its CD_entityName set to Post, and its recordType set to CD_Post.\n\n<CKRecord: 0x7fbae9e19510; recordID=CD_Post_UUID:\n(com.apple.coredata.cloudkit.zone:__defaultOwner__), values={\n    \"CD_entityName\" = Post;\n}, recordType=CD_Post>\n\n\nConsider a second entity, ImagePost, that inherits from Post.\n\nImagePost generates the following structure (before adding its attributes), with its CD_entityName set to ImagePost, and its recordType set to CD_Post.\n\n<CKRecord: 0x7f9c9fe17780; recordID=CD_ImagePost_UUID:\n(com.apple.coredata.cloudkit.zone:__defaultOwner__), values={\n    \"CD_entityName\" = ImagePost;\n}, recordType=CD_Post>\n\n\nQuery against recordType when searching against an entity’s inheritance hierarchy. Query against CD_entityName when searching for instances of a specific type.\n\nFor more information about CloudKit queries, see CKQuery.\n\nRead Attributes from Fields\n\nWhen you initialize a schema, Core Data creates fields for each of an entity’s attributes, mapping the attribute name to a field with a key in the form CD_[attribute.name]. The field’s type may vary between Core Data and CloudKit.\n\nCore Data attribute type\n\n\t\n\nNSManagedObject attribute type\n\n\t\n\nCKRecord attribute type\n\n\n\n\nInteger 16\n\n\t\n\nNSNumber\n\n\t\n\nNSNumber\n\n\n\n\nInteger 32\n\n\t\n\nNSNumber\n\n\t\n\nNSNumber\n\n\n\n\nInteger 64\n\n\t\n\nNSNumber\n\n\t\n\nNSNumber\n\n\n\n\nDouble\n\n\t\n\nNSNumber\n\n\t\n\nNSNumber\n\n\n\n\nFloat\n\n\t\n\nNSNumber\n\n\t\n\nNSNumber\n\n\n\n\nBoolean\n\n\t\n\nNSNumber\n\n\t\n\nNSNumber\n\n\n\n\nDate\n\n\t\n\nNSDate\n\n\t\n\nNSDate\n\n\n\n\nDecimal\n\n\t\n\nNSDecimalNumber\n\n\t\n\nNSNumber\n\n\n\n\nUUID\n\n\t\n\nNSUUID\n\n\t\n\nNSString\n\n\n\n\nURI\n\n\t\n\nNSURL\n\n\t\n\nNSString\n\n\n\n\nString\n\n\t\n\nNSString\n\n\t\n\nNSString or CKAsset\n\n\n\n\nBinary Data\n\n\t\n\nNSData\n\n\t\n\nNSData or CKAsset\n\n\n\n\nTransformable\n\n\t\n\nNSData\n\n\t\n\nNSData or CKAsset\n\n\n\n\nUndefined\n\n\t\n\n—\n\n\t\n\nnot supported\n\n\n\n\nObject ID\n\n\t\n\n—\n\n\t\n\nnot supported\n\nAll variable length attribute types—String, Binary Data, and Transformable—generate an additional field with a key in the form CD_[attribute.name]_ckAsset. If a field’s value grows too large to store within the record size limit of 1MB, Core Data automatically converts the value to an external asset. Core Data transitions between the original field and its asset counterpart transparently during serialization. When inspecting a CloudKit record directly, check the length of the original field’s value; if it is zero, look in the asset field.\n\nFor example, an entity named Post with String content and title attributes would generate the following fully materialized record, with pairs of fields for CD_content and CD_content_ckAsset, and for CD_title and CD_title_ckAsset.\n\n<CKRecord: 0x7f9c9fd0f870; recordID=CD_Post_UUID:\n(com.apple.coredata.cloudkit.zone:__defaultOwner__), values={\n    \"CD_content\" = \"An example core data string\";\n    \"CD_content_ckAsset\" = \"<CKAsset: 0x7f9c9fe1db50; \npath=/var/folders/*/C9EDC901-385B-4778-9D78-03E9C740AD89.fxd, \nUUID=C37985B7-F959-4174-AA93-C404F9DCC6A5>\";\n    \"CD_entityName\" = Post;\n    \"CD_title\" = \"An example core data string\";\n    \"CD_title_ckAsset\" = \"<CKAsset: 0x7f9c9fd10140; \npath=/var/folders/*/C7977A3A-623E-441E-9086-66F2F5B7B746.fxd, \nUUID=81800071-ECBD-46E1-B4F9-2F7168269497>\";\n}, recordType=CD_Post\n\nRead One-to-One Relationships from Fields\n\nOne-to-one relationships store foreign keys in both related records, mapping the relationship name to a field with a key in the form CD_[relationship.name]. This field stores the foreign key of the related object in the form CKRecord.recordID.recordName.\n\nFor example, consider a one-to-one relationship between an ImageData entity and an Attachment entity. In Core Data, the Attachment has an imageData relationship, and the ImageData has an attachment relationship.\n\nThis one-to-one relationship between ImageData and Attachment would generate the following CloudKit records.\n\n<CKRecord: 0x7f9ca1300f50; recordID=CD_Attachment_UUID:\n(com.apple.coredata.cloudkit.zone:__defaultOwner__), values={\n    \"CD_entityName\" = Attachment;\n    \"CD_imageData\" = \"CD_ImageData_UUID\";\n}, recordType=CD_Attachment>\n<CKRecord: 0x7f9c9fc18610; recordID=CD_ImageData_UUID:\n(com.apple.coredata.cloudkit.zone:__defaultOwner__), values={\n    \"CD_attachment\" = \"CD_Attachment_UUID\";\n    \"CD_entityName\" = ImageData;\n}, recordType=CD_ImageData>\n\n\nThe CD_imageData field on the CD_Attachment contains the foreign key of the image, and the CD_attachment field on the CD_ImageData contains the foreign key of the attachment.\n\nRead One-to-Many Relationships from Fields\n\nOne-to-many relationships store a foreign key on each record on the many side of the relationship, mapping the relationship name to a field with a key in the form CD_[relationship name]. This field stores the foreign key of the related object in the form CKRecord.recordID.recordName.\n\nFor example, a one-to-many relationship between a single Post and multiple Attachment instances would generate multiple CD_Attachment records. Each record contains the foreign key of the Post it belongs to in their CD_post field.\n\n<CKRecord: 0x7f9ca1300f50; recordID=CD_Attachment_UUID:\n(com.apple.coredata.cloudkit.zone:__defaultOwner__), values={\n    \"CD_entityName\" = Attachment;\n    \"CD_post\" = \"CD_VideoPost_UUID\";\n}, recordType=CD_Attachment>\n\n\nGenerated Post records don’t contain a reference to their attachments.\n\nRead Many-to-Many Relationships from CDMR Records\n\nMany-to-many relationships model the join table using a custom Core Data Mirrored Relationship (CDMR) record type.\n\nCloudKit doesn’t support the notion of a join, and it’s inefficient to encode arrays on both records and keep them in sync. Instead, Core Data constructs a CDMR record to accurately and succintly capture all of the criteria of the join.\n\nCDMR records have the following fields.\n\nCDMR Field\n\n\t\n\nDescription\n\n\n\n\nCD_entityNames\n\n\t\n\nAn alphabetically sorted, semicolon-separated list of the entities in the relationship, for example, “Post:Tag”. The ordering of this field determines the ordering for all other fields.\n\n\n\n\nCD_recordNames\n\n\t\n\nThe record names of the two related objects, for example, “CD_Post_F587C290-BC2F-441B-98FC-1357BA89C411:CD_Tag_215FA1E0-6A16-4A2B-BFA2-C13202BE6D50”, sorted according to the CD_entityNames order.\n\n\n\n\nCD_relationships\n\n\t\n\nThe relationship names, for example, “tags:posts”, sorted according to the CD_entityNames order.\n\nFor example, consider a many-to-many relationship between Tag and Post entities.\n\nThe individual Tag and Post records don’t contain fields for the relationship.\n\n<CKRecord: 0x7f9c9fd0f870; recordID=CD_Post_UUID:\n(com.apple.coredata.cloudkit.zone:__defaultOwner__), values={\n    \"CD_content\" = \"An example core data string\";\n    \"CD_content_ckAsset\" = \"<CKAsset: 0x7f9c9fe1db50; \npath=/var/folders/*/C9EDC901-385B-4778-9D78-03E9C740AD89.fxd, \nUUID=C37985B7-F959-4174-AA93-C404F9DCC6A5>\";\n    \"CD_entityName\" = Post;\n    \"CD_title\" = \"An example core data string\";\n    \"CD_title_ckAsset\" = \"<CKAsset: 0x7f9c9fd10140; \npath=/var/folders/*/C7977A3A-623E-441E-9086-66F2F5B7B746.fxd, \nUUID=81800071-ECBD-46E1-B4F9-2F7168269497>\";\n}, recordType=CD_Post>\n<CKRecord: 0x7f9ca10188d0; recordID=CD_Tag_UUID:\n(com.apple.coredata.cloudkit.zone:__defaultOwner__), values={\n    \"CD_color\" = {length = 17, bytes = 0x536f6d65206578616d706c652064617461};\n    \"CD_color_ckAsset\" = \"<CKAsset: 0x7f9c9fd07790; \npath=/var/folders/*/5D5DF5B2-DB27-4F01-B311-52A274374F59.fxd, \nUUID=787F4868-1F4D-4BF7-86D4-3867BEA65172>\";\n    \"CD_entityName\" = Tag;\n    \"CD_name\" = \"An example core data string\";\n    \"CD_name_ckAsset\" = \"<CKAsset: 0x7f9ca1300af0; \npath=/var/folders/*/C40A1E1F-C2F5-4BA1-A6ED-F5977301A1F7.fxd, \nUUID=A4C4B698-55FC-4C87-BA8A-D6DD0011DD90>\";\n    \"CD_uuid\" = \"51BAFD98-D1F7-472F-95D6-BBF40D7CBD75\";\n}, recordType=CD_Tag>\n\n\nThe relationship between any two Tag and Post records exists in a third CDMR record. The CDMR record describes the entity type, record name, and Core Data relationship between the Tag and Post.\n\n<CKRecord: 0x7f9ca1301780; recordID=EE64F478-A761-4049-B559-853457ABA997:\n(com.apple.coredata.cloudkit.zone:__defaultOwner__), values={\n    \"CD_entityNames\" = \"Post:Tag\";\n    \"CD_recordNames\" = \"CD_Post_UUID:CD_Tag_UUID\";\n    \"CD_relationships\" = \"tags:posts\";\n}, recordType=CDMR>\n\n\nThe structure of a CDMR record is carefully designed to occupy the minimum necessary footprint, and to require the least effort to decode and work with, making it usable outside the Core Data framework.\n\nAccess CloudKit Objects\n\nYou can access a managed object’s CKRecord directly through its associated context using record(for:) for a single record, or records(for:) for multiple records. To retrieve the record ID only, use recordID(for:), or recordIDs(for:).\n\nAlternatively, use the class functions record(for:), records(for:), recordID(for:), and recordIDs(for:) on NSPersistentCloudKitContainer.\n\nSee Also\nConfiguring CloudKit Mirroring\nSetting Up Core Data with CloudKit\nSet up the classes and capabilities that sync your store to CloudKit.\nCreating a Core Data Model for CloudKit\nDesign a CloudKit-compatible data model and initialize your CloudKit schema.\nSyncing a Core Data Store with CloudKit\nSynchronize objects between devices, and handle store changes in the user interface."
  },
  {
    "title": "name | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultssectioninfo/1622302-name",
    "html": "Required\n\nSee Also\nAccessing the Name and Title\nvar indexTitle: String?\nThe index title of the section.\n\nRequired"
  },
  {
    "title": "objects | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultssectioninfo/1622293-objects",
    "html": "Required\n\nSee Also\nAccessing Objects\nvar numberOfObjects: Int\nThe number of objects (rows) in the section.\n\nRequired"
  },
  {
    "title": "Syncing a Core Data Store with CloudKit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/mirroring_a_core_data_store_with_cloudkit/syncing_a_core_data_store_with_cloudkit",
    "html": "Overview\n\nOnce you set up your Xcode project (see Setting Up Core Data with CloudKit) and initialize your development schema (see Creating a Core Data Model for CloudKit), you’re ready to sync a Core Data store to CloudKit.\n\nRun Your App and Create Managed Object Instances\n\nRun your app and begin creating NSManagedObject instances. The objects automatically synchronize with the CloudKit database and propagate to other devices logged into the same iCloud account. The tasks that send changes to the cloud and receive remote changes in the local store happen on the system in the background. You don’t need to add any code to your project to synchronize records across devices.\n\nIt can be helpful to think of this process as similar to the water cycle. Water evaporates up and rains down on a natural cadence. Similarly, changes move from Core Data up to CloudKit and across to other devices on a natural rhythm within the system event loop.\n\nGenerally, you can expect data to synchronize a local change within about a minute of the change. Core Data also occasionally syncs CloudKit data in scenarios such as when the app hasn’t synced in a long time.\n\nUpload Core Data Changes to CloudKit\n\nWhen the user makes a change on one device, Core Data uploads the change to CloudKit before sending it to the user’s other devices.\n\nFirst, the user creates, updates, or deletes a managed object, such as adding a post or editing a tag. When its managed object context saves changes to the store, Core Data creates a background task for the system to convert the NSManagedObject to a CKRecord. The system executes the task, creating the record and uploading it to CloudKit.\n\nFor more information about background tasks, see UIApplication.\n\nDownload CloudKit Changes into Core Data\n\nAfter CloudKit receives a change and saves it to the CloudKit store, it notifies the user’s other devices about the change.\n\nFirst, CloudKit periodically sends push notifications to other devices on a user’s account. Then, on each device, the system creates a background task to download all of the changed records since the last fetch and converts them into instances of NSManagedObject. Finally, Core Data saves these managed objects into the local store.\n\nFor more information about push notifications, see User Notifications.\n\nIsolate the Current View from Store Changes\n\nConsider what happens if a user deletes a record from their phone. This change uploads to CloudKit, and later downloads to a laptop and an iPad. The iPad’s current view may still show the record if the UI hasn’t updated with the changes yet. The user taps on the now-deleted record, which is no longer available in the store. This may lead to inconsistent representation of the record, such as missing data, in your UI.\n\nFor this reason, you need to isolate the current view from changes to the store by ensuring that the records the view expects continue to exist. Using query generations, you pin the persistent container’s viewContext to a specific generation of store data. This allows the context to fulfill faults — placeholder objects whose values haven’t yet been fetched — that existed at the time the view loaded, even if the store changes underneath.\n\nPin a context to a query generation before its first read from the store.\n\ntry? persistentContainer.viewContext.setQueryGenerationFrom(.current)\n\n\nAny time you save, merge, or reset the context, it automatically updates its pin to the current query generation.\n\nFor more information about faults, see Faulting and Uniquing.\n\nFor more information about query generations, see Accessing data when the store changes.\n\nIntegrate Store Changes Relevant to the Current View\n\nYour app receives remote change notifications when the local store updates from CloudKit. However, it’s unnecessary to update your UI in response to every notification, because some changes may not be relevant to the current view.\n\nAnalyze the persistent history to determine whether the changes are relevant to the current view before consuming them in the user interface. Inspect the details of each transaction, such as the entity name, its updated properties, and the type of change, to decide whether to act.\n\nFor more information about persistent history tracking, see Consuming relevant store changes.\n\nDebug Errors in Core Data with CloudKit\n\nMost errors, like those that result from a network failure or a user not being signed in, are transient and don’t require action. You can choose the level of detail that Core Data with CloudKit logs to the system log.\n\nChoose Product > Scheme > Edit Scheme. Select an action such as Run, and select the Arguments tab. Pass the com.apple.CoreData.CloudKitDebug user default setting with a debug level value as an argument to the application.\n\nHigher argument values produce more information; start at 1 and increase if you need more detail. For more information about handling errors, see Troubleshooting Core Data.\n\nIf you observe persistent errors that don’t automatically recover, file a bug. For more information about bug reporting, see Submitting Bugs and Feedback.\n\nInspect Logs to See What Happened\n\nIf Core Data with CloudKit doesn’t appear to be syncing, confirm that you’re testing on two unlocked devices logged into the same iCloud account, with good wireless internet connections.\n\nPush notifications may get dropped or deferred, so don’t rely on them for testing. Watch system logs to observe the status and result of expected activity. Run the log stream command from the terminal, filtering by process and container ID. If the logs don’t include the operation, your push may have been dropped. Check the originating device for export activity.\n\nFilter CloudKit logs to see operations on the cloudd process for your container.\n\n$ log stream --info --debug --predicate 'process = \"cloudd\" and message\ncontains[cd] \"containerID=com.mycontainer\"'\n\n\nFilter Core Data logs to see information about the mirroring delegate’s setup, exports, and imports for your process.\n\n$ log stream --info --debug --predicate 'process = \"myprocess\" and \n(subsystem = \"com.apple.coredata\" or subsystem = \"com.apple.cloudkit\")'\n\n\nOr monitor both CloudKit and Core Data logs at the same time.\n\n$ log stream --info --debug --predicate '(process = \"myprocess\" and\n(subsystem = \"com.apple.coredata\" or subsystem = \"com.apple.cloudkit\")) or\n(process = \"cloudd\" and message contains[cd] \"container=com.mycontainer\")'\n\n\nFor more information about logging, see Viewing Log Messages.\n\nSee Also\nConfiguring CloudKit Mirroring\nSetting Up Core Data with CloudKit\nSet up the classes and capabilities that sync your store to CloudKit.\nCreating a Core Data Model for CloudKit\nDesign a CloudKit-compatible data model and initialize your CloudKit schema.\nReading CloudKit Records for Core Data\nAccess CloudKit records created from Core Data managed objects."
  },
  {
    "title": "numberOfObjects | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultssectioninfo/1622289-numberofobjects",
    "html": "Required\n\nSee Also\nAccessing Objects\nvar objects: [Any]?\nThe array of objects in the section.\n\nRequired\n\nRelated Documentation\nCore Data Programming Guide"
  },
  {
    "title": "indexTitle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultssectioninfo/1622300-indextitle",
    "html": "Required\n\nDiscussion\n\nThis is used when displaying the index.\n\nSee Also\nAccessing the Name and Title\nvar name: String\nThe name of the section.\n\nRequired"
  },
  {
    "title": "Adopting SwiftData for a Core Data app | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/adopting_swiftdata_for_a_core_data_app",
    "html": "Overview\n\nThis sample project is designed to help you understand how to adopt SwiftData in an existing Core Data app. The SampleTrips app fetches and displays all upcoming trips from the store, and allows people to create or remove trips, and to add, update, or remove information from the itinerary for each trip. There are three versions of this app:\n\nA Core Data version that demonstrates Core Data best practices.\n\nA SwiftData version that shows the complete app conversion from Core Data to SwiftData.\n\nA coexistence version, where the sample app uses Core Data, and adds a widget extension that uses SwiftData. This version covers a scenario where you might want to adopt SwiftData incrementally, or for certain portions of your app.\n\nConfigure the sample code project\n\nOpen the sample code project in Xcode. Before building it, do the following:\n\nSet the developer team for all targets to your team so Xcode automatically manages the provisioning profile. For more information, see Assign a project to a team.\n\nReplace the App Group container identifier — group.com.example.apple-samplecode.SampleTrips — with one specific to your team for the entire project. The identifier points to an App Group container that the app and widget use to share data. You can search for group.com.example.apple-samplecode.SampleTrips using the Find navigator in Xcode, and then change all of the occurrences (except those in this README file). For more information, see Configuring App Groups.\n\nAdopt SwiftData\n\nThe SwiftData sample sets up the schema with Swift types that conform to the PersistentModel protocol, which captures information about the app’s types, including properties and relationships. Each model file corresponds to an individual entity, with identical entity names, properties, and relationships as its Core Data counterpart.\n\nEach model file in this sample uses the Model() macro to add necessary conformances for the PersistentModel and Observable protocols:\n\n@Model final class Trip {\n    var destination: String\n    var endDate: Date\n    var name: String\n    var startDate: Date\n    \n    @Relationship(deleteRule: .cascade, inverse: \\BucketListItem.trip)\n    var bucketList: [BucketListItem] = [BucketListItem]()\n    \n    @Relationship(deleteRule: .cascade, inverse: \\LivingAccommodation.trip)\n    var livingAccommodation: LivingAccommodation?\n\n\nAdditionally, the app sets up the container using ModelContainer to ensure that all views access the same ModelContainer.\n\n.modelContainer(for: Trip.self)\n\n\nSetting up the ModelContainer also creates and set a default ModelContext in the environment. The app can access the ModelContext from any scene or view using an environment property.\n\n@Environment(\\.modelContext) private var modelContext\n\nCreate a persisted data object\n\nThis app creates a new instance of a trip and inserts it into the ModelContext for persistence:\n\nlet newTrip = Trip(name: name, destination: destination, startDate: startDate, endDate: endDate)\nmodelContext.insert(newTrip)\n\nPersist data\n\nThe app uses the SwiftData implicit save feature to persist data. This implicit save occurs on UI life cycle events and on a timer after the context changes. For more information about enabling autosave, see the autosaveEnabled property.\n\nThe app calls delete(_:) on the ModelContext with the instance to delete.\n\nmodelContext.delete(trip)\n\nFetch persisted data\n\nThis sample app fetches the complete list of upcoming trips by wrapping an array of trips in Query, which fetches Trip objects from the container.\n\n@Query(sort: \\Trip.startDate, order: .forward)\nvar trips: [Trip]\n\n\nThis sample also fetches data by calling fetch(_:) on the ModelContext and passing in a FetchDescriptor that specifies both the entity to retrieve data from as well as a corresponding Predicate specifying the conditions for the object to fetch.\n\nvar descriptor = FetchDescriptor<BucketListItem>()\nlet tripName = trip.name\ndescriptor.predicate = #Predicate { item in\n    item.title.contains(searchText) && tripName == item.trip?.name\n}\nlet filteredList = try? modelContext.fetch(descriptor)\n\nCoexistence between Core Data and SwiftData\n\nThe coexistence version of the app has two persistence stacks: a Core Data persistence stack for the host app, and a SwiftData persistence stack for the widget extension. Both stacks write to the same store file.\n\nNamespace models\n\nThe namespaces in the coexistence sample use the pre-existing NSManagedObject-based entity subclasses such that they don’t collide with the SwiftData classes. Note that this consideration refers to the class name, not the entity name.\n\nclass CDTrip: NSManagedObject {\n\n\nThe sample then refers to the entity as CDTrip when accessing it in the Core Data host app. For instance, when adding a new Trip:\n\nlet newTrip = CDTrip(context: viewContext)\n\nShare the same store file\n\nThis sample ensures that both the Core Data and SwiftData persistent stacks write to the same store file by setting the persistent store URL for the container description:\n\nif let description = container.persistentStoreDescriptions.first {\n    description.url = url\n\n\nAdditionally, the coexistence sample must set the NSPersistentHistoryTrackingKey. Although SwiftData enables persistent history tracking automatically, Core Data does not, so the app enables persistent history manually.\n\ndescription.setOption(true as NSNumber, forKey: NSPersistentHistoryTrackingKey)\n\n\nBy default, SwiftData behaves in the following way when determining where it persists data:\n\nIt persists data store to the app’s Application Support directory.\n\nThis sample app uses App Groups to access shared containers and share data between the SwiftData widget extension and the Core Data host app. For an app that has the App Groups Entitlement, it persists the data store to the root directory of the app group container. For apps that evolve from a version that doesn’t have any app group container to a version that has one, SwiftData copies the existing store to the app group container.\n\nIn this sample, the main app and widget share the same store via an app group container, and the store is located in the default location in the app group container. To ensure SwiftData accesses the same store, the main app and widget both share the ModelContainer.\n\nThe widget in this sample doesn’t write to the SwiftData store, but in general, an app and its extensions can safely read and write to the same SwiftData store simultaneously."
  },
  {
    "title": "resultType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequest/1506189-resulttype",
    "html": "Discussion\n\nThe default value is managedObjectResultType.\n\nIf you set the value to managedObjectIDResultType, and do not include property values in the request, sort orderings are demoted to “best efforts” hints.\n\nincludesPendingChanges discusses with whether pending changes are taken into account when the resultType is set to managedObjectResultType.\n\nincludesPropertyValues discusses whether property values are included or not by default when the resultType is set to managedObjectResultType.\n\nSee Also\nManaging How Results Are Returned\nvar includesPendingChanges: Bool\nA Boolean value that indicates whether, when the fetch is executed, it matches against currently unsaved changes in the managed object context.\nvar propertiesToFetch: [Any]?\nA collection of either property descriptions or string property names that specify which properties should be returned by the fetch.\nvar returnsDistinctResults: Bool\nA Boolean value that indicates whether the fetch request returns only distinct values for the fields specified by propertiesToFetch.\nvar includesPropertyValues: Bool\nA Boolean value that indicates whether, when the fetch is executed, property data is obtained from the persistent store.\nvar shouldRefreshRefetchedObjects: Bool\nA Boolean value that indicates whether the property values of fetched objects will be updated with the current values in the persistent store.\nvar returnsObjectsAsFaults: Bool\nA Boolean value that indicates whether the objects resulting from a fetch request are faults.\nstruct NSFetchRequestResultType\nConstants that specify the possible result types a fetch request can return.\nprotocol NSFetchRequestResult\nAn abstract protocol used with parameterized fetch requests."
  },
  {
    "title": "dictionaryResultType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequestresulttype/1506237-dictionaryresulttype",
    "html": "Discussion\n\nSee also includesPendingChanges and propertiesToFetch.\n\nSee Also\nResult Types\nstatic var managedObjectResultType: NSFetchRequestResultType\nThe request returns managed objects.\nstatic var managedObjectIDResultType: NSFetchRequestResultType\nThe request returns managed object IDs.\nstatic var countResultType: NSFetchRequestResultType\nThe request returns the count of the objects that match the request."
  },
  {
    "title": "predicate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequest/1506638-predicate",
    "html": "Discussion\n\nThe predicate instance constrains the selection of objects the NSFetchRequest instance is to fetch.\n\nIf the predicate is empty—for example, if it is an AND predicate whose array of elements contains no predicates—the request has its predicate set to nil. For more about predicates, see Predicate Programming Guide.\n\nSee Also\nSpecifying Fetch Constraints\nvar fetchLimit: Int\nThe fetch limit of the fetch request.\nvar fetchOffset: Int\nThe fetch offset of the fetch request.\nvar fetchBatchSize: Int\nThe batch size of the objects specified in the fetch request.\nvar affectedStores: [NSPersistentStore]?\nAn array of persistent stores specified for the fetch request.\nclass NSFetchRequestExpression\nAn expression that evaluates the result of a fetch request on a managed object context.\nclass NSExpressionDescription\nAn object that describes an expression to include with a fetch request.\nclass NSFetchedPropertyDescription\nA description object used to define which properties are fetched from Core Data."
  },
  {
    "title": "managedObjectResultType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequestresulttype/1506452-managedobjectresulttype",
    "html": "See Also\nResult Types\nstatic var managedObjectIDResultType: NSFetchRequestResultType\nThe request returns managed object IDs.\nstatic var dictionaryResultType: NSFetchRequestResultType\nThe request returns dictionaries.\nstatic var countResultType: NSFetchRequestResultType\nThe request returns the count of the objects that match the request."
  },
  {
    "title": "includesSubentities | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequest/1506366-includessubentities",
    "html": "Discussion\n\nThe value is true if the request will include all subentities of the entity for the request; otherwise it is false. The default is true.\n\nSee Also\nManaging the Fetch Request’s Entity\ninit()\nCreates a new fetch request.\ninit(entityName: String)\nInitializes a fetch request configured with a given entity name.\nvar entityName: String?\nThe name of the entity the request is configured to fetch.\nvar entity: NSEntityDescription?\nThe entity specified for the fetch request.\nstruct NSFetchRequestResultType\nConstants that specify the possible result types a fetch request can return."
  },
  {
    "title": "transactionAuthor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/2892348-transactionauthor",
    "html": "Discussion\n\nSet a managed object context’s transactionAuthor before saving it to differentiate among multiple call sites that modify the same context. Doing this records an author in subsequent transactions.\n\nfunc addColor(_ name: String, in context: NSManagedObjectContext) {\n    let color = Color(context: context)\n    color.name = name\n    color.creationDate = Date()\n\n\n    // set the transaction author\n    context.transactionAuthor = \"addColor\"\n    persistentContainer.saveContext(context)\n    context.transactionAuthor = nil\n}\n\n\nReset the context’s transactionAuthor to nil after the save to prevent misattribution of future transactions.\n\nSee Also\nManaging concurrency\nlet NSManagedObjectContextQueryGenerationKey: String\nConstant used to reference the query generation token.\nclass func mergeChanges(fromRemoteContextSave: [AnyHashable : Any], into: [NSManagedObjectContext])\nHandles changes from other processes or from a serialized state.\nvar automaticallyMergesChangesFromParent: Bool\nA Boolean value that indicates whether the context automatically merges changes saved to its persistent store coordinator or parent context.\nvar concurrencyType: NSManagedObjectContextConcurrencyType\nThe concurrency type for the context.\nvar mergePolicy: Any\nThe merge policy of the context.\nvar queryGenerationToken: NSQueryGenerationToken?\nReturns the token associated with the query generation currently in use by this context.\nfunc mergeChanges(fromContextDidSave: Notification)\nMerges the changes specified in a given notification.\nfunc setQueryGenerationFrom(NSQueryGenerationToken?)\nSets the query generation this context should use."
  },
  {
    "title": "fetchHistory(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorychangerequest/2892337-fetchhistory",
    "html": "Parameters\ntoken\n\nThe bookmark that defines the start of the request history.\n\nReturn Value\n\nA persistent history fetch request (NSPersistentHistoryChangeRequest) with an initial token bookmark boundary.\n\nSee Also\nFetching History\nclass func fetchHistory(after: Date) -> Self\nRetrieves history since a given date.\nclass func fetchHistory(after: NSPersistentHistoryTransaction?) -> Self\nRetrieves history since a given transaction.\nclass func fetchHistory(withFetch: NSFetchRequest<NSFetchRequestResult>) -> Self\nRetrieves history based on a fetch request."
  },
  {
    "title": "author | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorytransaction/2894947-author",
    "html": "Discussion\n\nThis property has a value if the managed object context set a transactionAuthor before the save.\n\nSee Also\nInspecting Transaction Details\nvar bundleID: String\nThe originating bundle’s identifier.\nvar changes: [NSPersistentHistoryChange]?\nThe array of persistent history changes.\nvar contextName: String?\nThe originating context’s name.\nvar processID: String\nThe originating process’s identifier.\nvar storeID: String\nThe originating store’s identifier.\nvar timestamp: Date\nThe date of the persistent history change.\nvar token: NSPersistentHistoryToken\nThe token that represents this transaction in the persistent history.\nvar transactionNumber: Int64\nThe transaction’s numeric identifier."
  },
  {
    "title": "contextName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistenthistorytransaction/2894944-contextname",
    "html": "See Also\nInspecting Transaction Details\nvar author: String?\nA granular description of the context that made the persistent history change, if available.\nvar bundleID: String\nThe originating bundle’s identifier.\nvar changes: [NSPersistentHistoryChange]?\nThe array of persistent history changes.\nvar processID: String\nThe originating process’s identifier.\nvar storeID: String\nThe originating store’s identifier.\nvar timestamp: Date\nThe date of the persistent history change.\nvar token: NSPersistentHistoryToken\nThe token that represents this transaction in the persistent history.\nvar transactionNumber: Int64\nThe transaction’s numeric identifier."
  },
  {
    "title": "assign(_:to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506436-assign",
    "html": "Parameters\nobject\n\nA managed object.\n\nstore\n\nA persistent store.\n\nDiscussion\n\nYou can obtain a store from the persistent store coordinator, using for example persistentStore(for:).\n\nSpecial Considerations\n\nIt is only necessary to use this method if the receiver’s persistent store coordinator manages multiple writable stores that have object’s entity in their configuration. Maintaining configurations in the managed object model can eliminate the need for invoking this method directly in many situations. If the receiver’s persistent store coordinator manages only a single writable store, or if only one store has object’s entity in its model, object will automatically be assigned to that store.\n\nSee Also\nHandling managed objects\nvar shouldDeleteInaccessibleFaults: Bool\nA Boolean value that determines whether the context turns inaccessible faults into deleted objects.\nvar insertedObjects: Set<NSManagedObject>\nThe set of objects that have been inserted into the context but not yet saved in a persistent store.\nvar updatedObjects: Set<NSManagedObject>\nThe set of objects registered with the context that have uncommitted changes.\nvar deletedObjects: Set<NSManagedObject>\nThe set of objects that will be removed from their persistent store during the next save operation.\nfunc shouldHandleInaccessibleFault(NSManagedObject, for: NSManagedObjectID, triggeredByProperty: NSPropertyDescription?) -> Bool\nCreates a log of the inaccessible fault.\nfunc insert(NSManagedObject)\nRegisters an object to be inserted in the context’s persistent store the next time changes are saved.\nfunc delete(NSManagedObject)\nSpecifies an object that should be removed from its persistent store when changes are committed.\nfunc obtainPermanentIDs(for: [NSManagedObject])\nConverts to permanent IDs the object IDs of the objects in a given array.\nfunc detectConflicts(for: NSManagedObject)\nMarks an object for conflict detection.\nfunc refresh(NSManagedObject, mergeChanges: Bool)\nUpdates the persistent properties of a managed object to use the latest values from the persistent store.\nfunc processPendingChanges()\nForces the context to process changes to the object graph.\nfunc observeValue(forKeyPath: String?, of: Any?, change: [String : Any]?, context: UnsafeMutableRawPointer?)\nAllows a context that has registered as an observer of a value to be notified of a change to that value.\nRelated Documentation\nvar persistentStoreCoordinator: NSPersistentStoreCoordinator?\nThe persistent store coordinator of the context."
  },
  {
    "title": "reset() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506807-reset",
    "html": "Discussion\n\nAll the receiver's managed objects are “forgotten.” If you use this method, you should ensure that you also discard references to any managed objects fetched using the receiver, since they will be invalid afterwards.\n\nSee Also\nUndoing changes\nvar undoManager: UndoManager?\nThe object that provides undo support for the context.\nfunc undo()\nSends an undo message to the context’s undo manager, asking it to reverse the latest uncommitted changes applied to objects in the object graph.\nfunc redo()\nSends a redo message to the context’s undo manager, asking it to reverse the latest undo operation applied to objects in the object graph.\nfunc rollback()\nRemoves everything from the undo stack, discards all insertions and deletions, and restores updated objects to their last committed values.\nRelated Documentation\nvar stalenessInterval: TimeInterval\nThe maximum length of time that may have elapsed since the store previously fetched data before fulfilling a fault issues a new fetch."
  },
  {
    "title": "NSFetchedResultsControllerDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultscontrollerdelegate",
    "html": "Overview\n\nYou should consider carefully whether you want to update the table view as each change is made. If a large number of modifications are made simultaneously—for example, if you are reading data from a background thread—it may be computationally expensive to animate all the changes. Rather than responding to changes individually (as illustrated in Typical Use), you could just implement controllerDidChangeContent(_:) (which is sent to the delegate when all pending changes have been processed) to reload the table view.\n\nThe fetched results controller reports changes to its section before changes to the fetched objects themselves.\n\nTypical Use\n\nYou can use controllerWillChangeContent(_:) and controllerDidChangeContent(_:) to bracket updates to a table view whose content is provided by the fetched results controller as illustrated in the following example:\n\n/*\n Assume self has a property 'tableView' -- as is the case for an instance of a UITableViewController\n subclass -- and a method configureCell:atIndexPath: which updates the contents of a given cell\n with information from a managed object at the given index path in the fetched results controller.\n */\n \n- (void)controllerWillChangeContent:(NSFetchedResultsController *)controller {\n    [self.tableView beginUpdates];\n}\n \n \n- (void)controller:(NSFetchedResultsController *)controller didChangeSection:(id <NSFetchedResultsSectionInfo>)sectionInfo\n    atIndex:(NSUInteger)sectionIndex forChangeType:(NSFetchedResultsChangeType)type {\n \n    switch(type) {\n        case NSFetchedResultsChangeInsert:\n            [self.tableView insertSections:[NSIndexSet indexSetWithIndex:sectionIndex]\n                            withRowAnimation:UITableViewRowAnimationFade];\n            break;\n \n        case NSFetchedResultsChangeDelete:\n            [self.tableView deleteSections:[NSIndexSet indexSetWithIndex:sectionIndex]\n                             withRowAnimation:UITableViewRowAnimationFade];\n            break;\n    }\n}\n \n \n- (void)controller:(NSFetchedResultsController *)controller didChangeObject:(id)anObject\n    atIndexPath:(NSIndexPath *)indexPath forChangeType:(NSFetchedResultsChangeType)type\n    newIndexPath:(NSIndexPath *)newIndexPath {\n \n    UITableView *tableView = self.tableView;\n \n    switch(type) {\n \n        case NSFetchedResultsChangeInsert:\n            [tableView insertRowsAtIndexPaths:[NSArray arrayWithObject:newIndexPath]\n                       withRowAnimation:UITableViewRowAnimationFade];\n            break;\n \n        case NSFetchedResultsChangeDelete:\n            [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath]\n                       withRowAnimation:UITableViewRowAnimationFade];\n            break;\n \n        case NSFetchedResultsChangeUpdate:\n            [self configureCell:[tableView cellForRowAtIndexPath:indexPath]\n                  atIndexPath:indexPath];\n            break;\n \n        case NSFetchedResultsChangeMove:\n            [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath]\n                       withRowAnimation:UITableViewRowAnimationFade];\n            [tableView insertRowsAtIndexPaths:[NSArray arrayWithObject:newIndexPath]\n                       withRowAnimation:UITableViewRowAnimationFade];\n            break;\n    }\n}\n \n \n- (void)controllerDidChangeContent:(NSFetchedResultsController *)controller {\n    [self.tableView endUpdates];\n}\n\nUser-Driven Updates\n\nIn general, NSFetchedResultsController is designed to respond to changes at the model layer. If you allow a user to reorder table rows, then your implementation of the delegate methods must take this into account.\n\nTypically, if you allow the user to reorder table rows, your model object has an attribute that specifies its index. When the user moves a row, you update this attribute accordingly. This, however, has the side effect of causing the controller to notice the change, and so inform its delegate of the update (using controller(_:didChange:at:for:newIndexPath:)). If you simply use the implementation of this method shown in Typical Use, then the delegate attempts to update the table view. The table view, however, is already in the appropriate state because of the user’s action.\n\nIn general, therefore, if you support user-driven updates, you should set a flag if a move is initiated by the user. In the implementation of your delegate methods, if the flag is set, you bypass main method implementations; for example:\n\n- (void)controller:(NSFetchedResultsController *)controller didChangeObject:(id)anObject\n    atIndexPath:(NSIndexPath *)indexPath forChangeType:(NSFetchedResultsChangeType)type\n    newIndexPath:(NSIndexPath *)newIndexPath {\n \n    if (!changeIsUserDriven) {\n        UITableView *tableView = self.tableView;\n        // Implementation continues...\n\n\nNote\n\nPrior to iOS 4.0, NSFetchedResultsController did not support sections being deleted as a result of a UI-driven change.\n\nTopics\nResponding to Changes\nfunc controller(NSFetchedResultsController<NSFetchRequestResult>, didChangeContentWith: NSDiffableDataSourceSnapshot)\nNotifies the receiver about changes to the content in the fetched results controller, by using a diffable data source snapshot.\nfunc controller(NSFetchedResultsController<NSFetchRequestResult>, didChangeContentWith: CollectionDifference<NSManagedObjectID>)\nNotifies the receiver about changes to the content in the fetched results controller, by using a collection difference.\nfunc controllerWillChangeContent(NSFetchedResultsController<NSFetchRequestResult>)\nNotifies the receiver that the fetched results controller is about to start processing of one or more changes due to an add, remove, move, or update.\nfunc controller(NSFetchedResultsController<NSFetchRequestResult>, didChange: Any, at: IndexPath?, for: NSFetchedResultsChangeType, newIndexPath: IndexPath?)\nNotifies the receiver that a fetched object has been changed due to an add, remove, move, or update.\nfunc controller(NSFetchedResultsController<NSFetchRequestResult>, didChange: NSFetchedResultsSectionInfo, atSectionIndex: Int, for: NSFetchedResultsChangeType)\nNotifies the receiver of the addition or removal of a section.\nfunc controllerDidChangeContent(NSFetchedResultsController<NSFetchRequestResult>)\nNotifies the receiver that the fetched results controller has completed processing of one or more changes due to an add, remove, move, or update.\nCustomizing Section Names\nfunc controller(NSFetchedResultsController<NSFetchRequestResult>, sectionIndexTitleForSectionName: String) -> String?\nReturns the name for a given section.\nConstants\nenum NSFetchedResultsChangeType\nConstants that specify the possible types of changes that are reported.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nResponding to Changes\nprotocol NSFetchedResultsSectionInfo\nA protocol that defines the interface for section objects vended by a fetched results controller.\nstruct NSFetchRequestResultType\nConstants that specify the possible result types a fetch request can return.\nenum NSFetchedResultsChangeType\nConstants that specify the possible types of changes that are reported."
  },
  {
    "title": "section(forSectionIndexTitle:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultscontroller/1622284-section",
    "html": "Parameters\ntitle\n\nThe title of a section\n\nsectionIndex\n\nThe index of a section.\n\nReturn Value\n\nThe section number for the given section title and index in the section index\n\nDiscussion\n\nYou would typically call this method when executing UITableViewDataSource’s tableView(_:sectionForSectionIndexTitle:at:) method.\n\nSee Also\nQuerying Section Information\nvar sections: [NSFetchedResultsSectionInfo]?\nThe sections for the fetch results."
  },
  {
    "title": "sections | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultscontroller/1622303-sections",
    "html": "Discussion\n\nThe objects in the sections array implement the NSFetchedResultsSectionInfo protocol.\n\nYou typically use the sections array when implementing UITableViewDataSource methods, such as numberOfSections(in:) and tableView(_:titleForHeaderInSection:).\n\nSee Also\nQuerying Section Information\nfunc section(forSectionIndexTitle: String, at: Int) -> Int\nReturns the section number for a given section title and index in the section index."
  },
  {
    "title": "entity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequest/1506979-entity",
    "html": "Discussion\n\nWhen an NSFetchRequest instance is created with init(), it is expected that the entity property will be set. If this property is not set, the fetch request fails upon execution.\n\nSee Also\nManaging the Fetch Request’s Entity\ninit()\nCreates a new fetch request.\ninit(entityName: String)\nInitializes a fetch request configured with a given entity name.\nvar entityName: String?\nThe name of the entity the request is configured to fetch.\nvar includesSubentities: Bool\nA Boolean value that indicates whether the fetch request includes subentities in the results.\nstruct NSFetchRequestResultType\nConstants that specify the possible result types a fetch request can return.\nRelated Documentation\n+ fetchRequestWithEntityName:\nReturns a fetch request configured with a given entity name."
  },
  {
    "title": "entityName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequest/1506233-entityname",
    "html": "Discussion\n\nThe entity name property is populated whenever the NSFetchRequest is created with init(entityName:) or fetchRequestWithEntityName:.\n\nSee Also\nManaging the Fetch Request’s Entity\ninit()\nCreates a new fetch request.\ninit(entityName: String)\nInitializes a fetch request configured with a given entity name.\nvar entity: NSEntityDescription?\nThe entity specified for the fetch request.\nvar includesSubentities: Bool\nA Boolean value that indicates whether the fetch request includes subentities in the results.\nstruct NSFetchRequestResultType\nConstants that specify the possible result types a fetch request can return.\nRelated Documentation\n+ fetchRequestWithEntityName:\nReturns a fetch request configured with a given entity name."
  },
  {
    "title": "fetchRequest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsasynchronousfetchrequest/1506719-fetchrequest",
    "html": "See Also\nPreparing a Request\nvar completionBlock: NSPersistentStoreAsynchronousFetchResultCompletionBlock?\nThe block that is executed when the fetch request has completed.\nvar estimatedResultCount: Int\nA configuration parameter that assists Core Data with scheduling the asynchronous fetch request."
  },
  {
    "title": "object(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultscontroller/1622281-object",
    "html": "Parameters\nindexPath\n\nAn index path in the fetch results.\n\nIf indexPath does not describe a valid index path in the fetch results, an exception is raised.\n\nReturn Value\n\nThe object at a given index path in the fetch results.\n\nSee Also\nAccessing Results\nvar fetchedObjects: [ResultType]?\nThe results of the fetch.\nfunc indexPath(forObject: ResultType) -> IndexPath?\nReturns the index path of a given object."
  },
  {
    "title": "NSEntityDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsentitydescription",
    "html": "Overview\n\nEntities are to managed objects what Class is to id, or — to use a database analogy — what tables are to rows. An instance specifies the entity’s name, its attributes and relationships (as instances of NSAttributeDescription and NSRelationshipDescription) and the class that represents it. Instances of that class correspond to entries in the associated persistent store. As a minimum, an entity description requires:\n\nA name.\n\nThe class name of the corresponding managed object.\n\nIf you don’t specify a class name, the framework uses NSManagedObject.\n\nYou define entities in a managed object model (an instance of NSManagedObjectModel) using Xcode’s data modeling tool. Core Data uses NSEntityDescription to map entries in the persistent store to managed objects in your app. It’s unlikely you’ll interact with entity descriptions directly unless you’re specifically working with models. NSEntityDescription provides a user dictionary for you to store any related, app-specific information.\n\nEditing entity descriptions\n\nEntity descriptions are editable until an object graph manager uses them, which allows you to create or modify descriptions dynamically. However, once you associate the description’s managed object model with a persistent store coordinator, you can no longer modify it. The framework enforces this rule at runtime; any attempt to mutate the model, or any of its child objects, after you associate it with a persistent store coordinator results in an exception. If you need to modify a model that’s in use, create a copy of that model, modify it, and then discard the stale model.\n\nIf you want to create an entity hierarchy, consider the relevant API. You can only set an entity’s subentities, not an entity’s super-entity. To set an entity’s super-entity, set an array of subentities on the super entity that includes the desired entity; the entity hierarchy is built top-down.\n\nTopics\nGetting descriptive information\nvar name: String?\nThe entity name of the receiver.\nvar managedObjectModel: NSManagedObjectModel\nThe managed object model with which the receiver is associated.\nvar managedObjectClassName: String!\nThe name of the class that represents the receiver’s entity.\nvar renamingIdentifier: String?\nThe renaming identifier for the receiver.\nvar isAbstract: Bool\nA Boolean value that indicates whether the receiver represents an abstract entity.\nvar userInfo: [AnyHashable : Any]?\nThe user info dictionary of the receiver.\nvar coreSpotlightDisplayNameExpression: NSExpression\nThe expression that computes the CoreSpotlight display name for instances of the entity.\nManaging inheritance\nvar subentitiesByName: [String : NSEntityDescription]\nA dictionary containing the receiver’s sub-entities.\nvar subentities: [NSEntityDescription]\nAn array containing the sub-entities of the receiver.\nvar superentity: NSEntityDescription?\nThe super-entity of the receiver.\nfunc isKindOf(entity: NSEntityDescription) -> Bool\nReturns a Boolean value that indicates whether the receiver is a sub-entity of another given entity.\nWorking with properties\nvar propertiesByName: [String : NSPropertyDescription]\nA dictionary containing the properties of the receiver.\nvar properties: [NSPropertyDescription]\nAn array containing the properties of the receiver.\nvar attributesByName: [String : NSAttributeDescription]\nThe attributes of the receiver in a dictionary.\nvar relationshipsByName: [String : NSRelationshipDescription]\nThe relationships of the receiver in a dictionary.\nfunc relationships(forDestination: NSEntityDescription) -> [NSRelationshipDescription]\nReturns an array containing the relationships of the receiver where the entity description of the relationship is a given entity.\nConfiguring indexes and constraints\nvar indexes: [NSFetchIndexDescription]\nAn array of fetch index descriptions for the entity.\nvar uniquenessConstraints: [[Any]]\nAn array of arrays that contains one or more attributes with a value that must be unique over the instances of that entity.\nvar compoundIndexes: [[Any]]\nThe compound indexes for the entity as an array of arrays.\nDeprecated\nCreating a managed object\nclass func insertNewObject(forEntityName: String, into: NSManagedObjectContext) -> NSManagedObject\nCreates, configures, and returns an instance of the class for the entity with a given name.\nRetrieving a description by its name\nclass func entity(forEntityName: String, in: NSManagedObjectContext) -> NSEntityDescription?\nReturns the entity with the specified name from the managed object model associated with the specified managed object context’s persistent store coordinator.\nManaging versioning\nvar versionHash: Data\nThe version hash for the receiver.\nvar versionHashModifier: String?\nThe version hash modifier for the receiver.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCoding\nNSCopying\nNSFastEnumeration\nSee Also\nObjects and entities\nclass NSManagedObject\nThe base class that all Core Data model objects inherit from."
  },
  {
    "title": "cacheName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultscontroller/1622280-cachename",
    "html": "Discussion\n\nThe file itself is stored in a private directory; you can only access it by name using deleteCache(withName:)\n\nSee Also\nGetting Configuration Information\nvar fetchRequest: NSFetchRequest<ResultType>\nThe fetch request used to do the fetching.\nvar managedObjectContext: NSManagedObjectContext\nThe managed object context used to fetch objects.\nvar sectionNameKeyPath: String?\nThe key path of the attribute that determines which section the fetched entity belongs to.\nvar delegate: NSFetchedResultsControllerDelegate?\nThe object that is notified when the fetched results changed.\nclass func deleteCache(withName: String?)\nDeletes the cached section information with the given name.\nRelated Documentation\ninit(fetchRequest: NSFetchRequest<ResultType>, managedObjectContext: NSManagedObjectContext, sectionNameKeyPath: String?, cacheName: String?)\nReturns a fetch request controller initialized using the given arguments."
  },
  {
    "title": "NSPropertyDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspropertydescription",
    "html": "Overview\n\nA property describes a single value within an object managed by the Core Data Framework. There are different types of property, each represented by a subclass which encapsulates the specific property behavior—see NSAttributeDescription, NSRelationshipDescription, and NSFetchedPropertyDescription.\n\nNote that a property name cannot be the same as any no-parameter method name of NSObject or NSManagedObject. For example, you cannot give a property the name \"description\". There are hundreds of methods on NSObject which may conflict with property names—and this list can grow without warning from frameworks or other libraries. You should avoid very general words (like “font”, and “color”) and words or phrases which overlap with Cocoa paradigms (such as “isEditing” and “objectSpecifier”).\n\nProperties—relationships as well as attributes—may be transient. A managed object context knows about transient properties and tracks changes made to them. Transient properties are ignored by the persistent store, and not just during saves: you cannot fetch using a predicate based on transients (although you can use transient properties to filter in memory yourself).\n\nEditing Property Descriptions\n\nProperty descriptions are editable until they are used by an object graph manager (such as a persistent store coordinator). This allows you to create or modify them dynamically. However, once a description is used (when the managed object model to which it belongs is associated with a persistent store coordinator), it must not (indeed cannot) be changed. This is enforced at runtime: any attempt to mutate a model or any of its sub-objects after the model is associated with a persistent store coordinator causes an exception to be thrown. If you need to modify a model that is in use, create a copy, modify the copy, and then discard the objects with the old model.\n\nTopics\nAccessing Features of a Property\nvar entity: NSEntityDescription\nThe entity description of the receiver.\nvar isIndexed: Bool\nA Boolean value that indicates whether the receiver should be indexed for searching.\nDeprecated\nvar isOptional: Bool\nA Boolean value that indicates whether the receiver is optional.\nvar isTransient: Bool\nA Boolean value that indicates whether the receiver is transient.\nvar name: String\nThe name of the receiver.\nvar userInfo: [AnyHashable : Any]?\nThe user info dictionary of the receiver.\nSupporting Validation\nvar validationPredicates: [NSPredicate]\nThe validation predicates of the receiver.\nvar validationWarnings: [Any]\nThe error strings associated with the receiver’s validation predicates.\nfunc setValidationPredicates([NSPredicate]?, withValidationWarnings: [String]?)\nSets the validation predicates and warnings of the receiver.\nSupporting Versioning\nvar versionHash: Data\nThe version hash for the receiver.\nvar versionHashModifier: String?\nThe version hash modifier for the receiver.\nvar renamingIdentifier: String?\nThe renaming identifier for the receiver.\nSpecifying Spotlight Support\nvar isIndexedBySpotlight: Bool\nA Boolean value that indicates whether Core Data adds the property’s value to the Core Spotlight index.\nvar isStoredInExternalRecord: Bool\nA Boolean value that indicates whether to write the property’s data in an external record file that corresponds to the managed object.\nDeprecated\nRelationships\nInherits From\nNSObject\nConforms To\nNSCoding\nNSCopying\nSee Also\nStandard attributes\nclass NSAttributeDescription\nA description of a single attribute belonging to an entity.\nenum NSAttributeType\nThe types of attribute that Core Data supports.\nclass NSRelationshipDescription\nA description of a relationship between two entities."
  },
  {
    "title": "NSPersistentStoreAsynchronousResult | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstoreasynchronousresult",
    "html": "Topics\nInspecting the Result\nvar managedObjectContext: NSManagedObjectContext\nThe managed object context for the result.\nvar operationError: Error?\nAn error that contains details if the asynchronous fetch request fails.\nvar progress: Progress?\nAn object that reports progress for the asynchronous fetch request.\nCanceling the Result\nfunc cancel()\nCancels the asynchronous fetch request.\nData Types\ntypealias NSPersistentStoreAsynchronousFetchResultCompletionBlock\nA completion block that an asynchronous fetch request calls with a result.\nRelationships\nInherits From\nNSPersistentStoreResult\nSee Also\nStore Coordination\nclass NSPersistentStoreCoordinator\nAn object that enables an app’s contexts and the underlying persistent stores to work together.\nclass NSPersistentStore\nThe abstract base class for all Core Data persistent stores.\nclass NSPersistentStoreDescription\nA description object used to create and load a persistent store.\nclass NSPersistentStoreRequest\nCriteria used to retrieve data from or save data to a persistent store.\nclass NSPersistentStoreResult\nThe abstract base class for results returned from a persistent store coordinator.\nclass NSSaveChangesRequest\nAn encapsulation of a collection of changes to be made by an object store in response to a save operation on a managed object context.\nclass NSAtomicStore\nAn abstract superclass that you subclass to create a Core Data atomic store.\nclass NSAtomicStoreCacheNode\nA concrete class that you use to represent basic nodes in a Core Data atomic store.\nclass NSIncrementalStore\nAn abstract superclass defining the API through which Core Data communicates with a store.\nclass NSIncrementalStoreNode\nA concrete class used to represent basic nodes in a Core Data incremental store."
  },
  {
    "title": "NSAttributeDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsattributedescription",
    "html": "Overview\n\nNSAttributeDescription inherits from NSPropertyDescription, which provides most of the basic behavior. Instances of NSAttributeDescription are used to describe attributes, as distinct from relationships. The class adds the ability to specify the attribute type, and to specify a default value. In a managed object model, you must specify the type of all attributes—you can only use the undefined attribute type (NSUndefinedAttributeType) for transient attributes.\n\nEditing Attribute Descriptions\n\nAttribute descriptions are editable until they are used by an object graph manager. This allows you to create or modify them dynamically. However, once a description is used (when the managed object model to which it belongs is associated with a persistent store coordinator), it must not (indeed cannot) be changed. This is enforced at runtime: any attempt to mutate a model or any of its sub-objects after the model is associated with a persistent store coordinator causes an exception to be thrown. If you need to modify a model that is in use, create a copy, modify the copy, and then discard the objects with the old model.\n\nNote\n\nDefault values set for attributes are retained by a managed object model, not copied. This means that attribute values do not have to implement the NSCopying protocol, however it also means that you should not modify any objects after they have been set as default values.\n\nTopics\nManaging the type\nvar attributeValueClassName: String?\nThe class name that represents the attribute’s value.\nvar type: NSAttributeDescription.AttributeType\nThe attribute’s type.\nstruct NSAttributeDescription.AttributeType\nThe types of attributes that Core Data supports.\nConfiguring the behavior\nvar allowsCloudEncryption: Bool\nA Boolean value that determines whether to encrypt the attribute’s value.\nvar allowsExternalBinaryDataStorage: Bool\nA Boolean value that indicates whether the attribute allows external binary storage.\nvar defaultValue: Any?\nThe default value of the attribute.\nvar preservesValueInHistoryOnDeletion: Bool\nA Boolean value that indicates whether the attribute records its value in the persistent history transaction for a managed object’s deletion.\nvar valueTransformerName: String?\nThe name of the transformer to use for the attribute value.\nGetting version information\nvar versionHash: Data\nThe version hash for the attribute.\nDeprecated\nDeprecated symbols\nReview unsupported symbols and their replacements.\nRelationships\nInherits From\nNSPropertyDescription\nSee Also\nStandard attributes\nclass NSPropertyDescription\nA description of a single property belonging to an entity.\nenum NSAttributeType\nThe types of attribute that Core Data supports.\nclass NSRelationshipDescription\nA description of a relationship between two entities."
  },
  {
    "title": "fetchRequest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsasynchronousfetchresult/1404906-fetchrequest",
    "html": "See Also\nGetting Information About a Result\nvar finalResult: [ResultType]?\nThe results that were received from the fetch request."
  },
  {
    "title": "finalResult | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsasynchronousfetchresult/1404930-finalresult",
    "html": "See Also\nGetting Information About a Result\nvar fetchRequest: NSAsynchronousFetchRequest<ResultType>\nThe underlying fetch request that was executed."
  },
  {
    "title": "NSFetchRequest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequest",
    "html": "Overview\n\nAn instance of NSFetchRequest collects the criteria needed to select and optionally to sort a group of managed objects held in a persistent store. (See NSPersistentStore and NSManagedObject.) A fetch request must contain an entity description (an instance of NSEntityDescription) or an entity name that specifies which entity to search. It frequently also contains:\n\nA predicate (an instance of NSPredicate) that specifies which properties to filter by and the constraints on selection, for example, “last name begins with a ‘J’”. If you don’t specify a predicate, then all instances of the specified entity are selected (subject to other constraints; see fetch(_:) for full details).\n\nAn array of sort descriptors (instances of NSSortDescriptor) that specify how the returned objects should be ordered, for example, by last name then by first name.\n\nYou can also specify other aspects of a fetch request:\n\nThe maximum number of objects that a request should return; see fetchLimit.\n\nWhich data stores the request should access; see affectedStores.\n\nWhether the fetch returns managed objects or just object IDs; see resultType.\n\nWhether objects are fully populated with their properties; see includesSubentities, includesPropertyValues, and returnsObjectsAsFaults.\n\nWhich properties to fetch; see propertiesToFetch.resultType.\n\nThe offset for the fetch to start; see fetchOffset.\n\nWhether unsaved changes should be included; see includesPendingChanges.\n\nYou can also fetch distinct property values, and attribute values that satisfy a given function, as illustrated in Core Data Snippets.\n\nYou use NSFetchRequest objects with the methods fetch(_:) and count(for:), defined by NSManagedObjectContext.\n\nYou often predefine fetch requests in a managed object model—NSManagedObjectModel provides an API to retrieve a stored fetch request by name. Stored fetch requests can include placeholders for variable substitution, and so serve as templates for later completion. Fetch request templates therefore allow you to predefine queries with variables that are substituted at runtime.\n\nNote\n\nWhen you execute an instance of NSFetchRequest, it always accesses the underlying persistent stores to retrieve the latest results.\n\nTopics\nManaging the Fetch Request’s Entity\ninit()\nCreates a new fetch request.\ninit(entityName: String)\nInitializes a fetch request configured with a given entity name.\nvar entityName: String?\nThe name of the entity the request is configured to fetch.\nvar entity: NSEntityDescription?\nThe entity specified for the fetch request.\nvar includesSubentities: Bool\nA Boolean value that indicates whether the fetch request includes subentities in the results.\nstruct NSFetchRequestResultType\nConstants that specify the possible result types a fetch request can return.\nSpecifying Fetch Constraints\nvar predicate: NSPredicate?\nThe predicate of the fetch request.\nvar fetchLimit: Int\nThe fetch limit of the fetch request.\nvar fetchOffset: Int\nThe fetch offset of the fetch request.\nvar fetchBatchSize: Int\nThe batch size of the objects specified in the fetch request.\nvar affectedStores: [NSPersistentStore]?\nAn array of persistent stores specified for the fetch request.\nclass NSFetchRequestExpression\nAn expression that evaluates the result of a fetch request on a managed object context.\nclass NSExpressionDescription\nAn object that describes an expression to include with a fetch request.\nclass NSFetchedPropertyDescription\nA description object used to define which properties are fetched from Core Data.\nSorting the Results\nvar sortDescriptors: [NSSortDescriptor]?\nThe sort descriptors of the fetch request.\nPrefetching Related Objects\nvar relationshipKeyPathsForPrefetching: [String]?\nThe relationship key paths to prefetch along with the entity for the request.\nManaging How Results Are Returned\nvar resultType: NSFetchRequestResultType\nThe result type of the fetch request.\nvar includesPendingChanges: Bool\nA Boolean value that indicates whether, when the fetch is executed, it matches against currently unsaved changes in the managed object context.\nvar propertiesToFetch: [Any]?\nA collection of either property descriptions or string property names that specify which properties should be returned by the fetch.\nvar returnsDistinctResults: Bool\nA Boolean value that indicates whether the fetch request returns only distinct values for the fields specified by propertiesToFetch.\nvar includesPropertyValues: Bool\nA Boolean value that indicates whether, when the fetch is executed, property data is obtained from the persistent store.\nvar shouldRefreshRefetchedObjects: Bool\nA Boolean value that indicates whether the property values of fetched objects will be updated with the current values in the persistent store.\nvar returnsObjectsAsFaults: Bool\nA Boolean value that indicates whether the objects resulting from a fetch request are faults.\nstruct NSFetchRequestResultType\nConstants that specify the possible result types a fetch request can return.\nprotocol NSFetchRequestResult\nAn abstract protocol used with parameterized fetch requests.\nGrouping and Filtering Dictionary Results\nvar propertiesToGroupBy: [Any]?\nAn array of objects that indicates how data should be grouped before a select statement is run in a SQL database.\nvar havingPredicate: NSPredicate?\nThe predicate used to filter rows being returned by a query containing a GROUP BY directive.\nExecuting a Fetch Request Directly\nfunc execute() -> [ResultType]\nExecutes the fetch request against the managed object context that is associated with the current queue.\nRelationships\nInherits From\nNSPersistentStoreRequest\nConforms To\nNSCoding\nNSCopying\nSee Also\nFetch requests\nclass NSAsynchronousFetchRequest\nA fetch request that retrieves results asynchronously and supports progress notification.\nclass NSAsynchronousFetchResult\nA fetch result object that encompasses the response from an executed asynchronous fetch request.\nclass NSFetchedResultsController\nA controller that you use to manage the results of a Core Data fetch request and to display data to the user."
  },
  {
    "title": "Staged migrations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/staged_migrations",
    "html": "Overview\n\nCore Data uses lightweight migrations to keep the data in your app’s persistent store consistent with the app’s managed object model. A lightweight migration automatically determines the differences between two model versions and generates a mapping model that Core Data then uses to make the necessary changes to the persistent store. Lightweight migrations support a number of common operations, such as adding an entity, removing a relationship, changing a nonoptional attribute to an optional attribute, renaming an entity, and so on.\n\nAs your object model evolves, you may find that the aggregate changes between two model versions exceed the capabilities of lightweight migrations. For example, if you change an optional attribute to be nonoptional, there’s no way for a lightweight migration to infer the default value it needs to assign to any instances of that attribute with a nil value.\n\nStaged lightweight migrations solve this problem by reducing an incompatible migration into a series of compatible stages. A migration manager runs these stages in a specific order, providing opportunities for you to prepare the persistent store before each stage runs, and perform any cleanup afterward. This enables you to handle scenarios like changing an optional attribute to be nonoptional because you have an opportunity to set any nil values to a concrete value before the stage runs.\n\nImportant\n\nSuccessful Core Data migrations depend on properly versioned object models, and staged lightweight migrations require a distinct migration stage for each model version.\n\nTopics\nMigration staging\nlet NSPersistentStoreStagedMigrationManagerOptionKey: String\nThe key for specifying your staged migration manager.\nclass NSStagedMigrationManager\nAn object that handles the migration event loop and provides access to the migrating persistent store.\nMigration stages\nclass NSLightweightMigrationStage\nAn object that describes a series of models suitable for lightweight migration.\nclass NSCustomMigrationStage\nAn object that enables you to participate in the migration between two versions of the same model.\nclass NSMigrationStage\nAn abstract base class for describing an individual stage of a migration.\nSee Also\nData model migration\nMigrating your data model automatically\nEnable lightweight migrations to keep your data model and the underlying data in a consistent state.\nManual migrations\nMigrate elaborate data models with changes that go beyond the capabilities of both lightweight and staged migrations."
  },
  {
    "title": "NSManagedObjectContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext",
    "html": "Overview\n\nA context consists of a group of related model objects that represent an internally consistent view of one or more persistent stores. Changes to managed objects remain in memory in the associated context until Core Data saves that context to one or more persistent stores. A single managed object instance exists in one and only one context, but multiple copies of an object can exist in different contexts. Therefore, an object is unique to a particular context.\n\nLife cycle management\n\nThe context is a powerful object with a central role in the life cycle of managed objects, with responsibilities from life cycle management (including faulting) to validation, inverse relationship handling, and undo/redo. Through a context you can retrieve or “fetch” objects from a persistent store, make changes to those objects, and then either discard the changes or—again through the context—commit them back to the persistent store. The context is responsible for watching for changes in its objects and maintains an undo manager so you can have finer-grained control over undo and redo. You can insert new objects and delete ones you have fetched, and commit these modifications to the persistent store.\n\nAll objects fetched from an external store are registered in a context together with a global identifier (an instance of NSManagedObjectID) that’s used to uniquely identify each object to the external store.\n\nParent store\n\nManaged object contexts have a parent store from which they retrieve data representing managed objects and through which they commit changes to managed objects.\n\nPrior to OS X v10.7 and iOS v5.0, the parent store is always a persistent store coordinator. In macOS 10.7 and later and iOS v5.0 and later, the parent store may be another managed object context. Ultimately the root of a context’s ancestry must be a persistent store coordinator. The coordinator provides the managed object model and dispatches requests to the various persistent stores containing the data.\n\nIf a context’s parent store is another managed object context, fetch and save operations are mediated by the parent context instead of a coordinator. This pattern has a number of usage scenarios, including:\n\nPerforming background operations on a second thread or queue.\n\nManaging discardable edits, such as in an inspector window or view.\n\nAs the first scenario implies, a parent context can service requests from children on different threads. You cannot, therefore, use parent contexts created with the thread confinement type (see Concurrency).\n\nWhen you save changes in a context, the changes are only committed “one store up.” If you save a child context, changes are pushed to its parent. Changes are not saved to the persistent store until the root context is saved. (A root managed object context is one whose parent context is nil.) In addition, a parent does not pull changes from children before it saves. You must save a child context if you want ultimately to commit the changes.\n\nNotifications\n\nA context posts notifications at various points—see NSManagedObjectContextObjectsDidChange for example. Typically, you should register to receive these notifications only from known contexts:\n\nNotificationCenter.default.addObserver(self,\n                                       selector: #selector(<#methodToCall#>),\n                                       name: .NSManagedObjectContextDidSave,\n                                       object: <#managedObjectContext#>)\n\n\nSeveral system frameworks use Core Data internally. If you register to receive these notifications from all contexts (by passing nil as the object parameter to a method such as addObserver(_:selector:name:object:)), then you may receive unexpected notifications that are difficult to handle.\n\nConcurrency\n\nCore Data uses thread (or serialized queue) confinement to protect managed objects and managed object contexts (see Core Data Programming Guide). A consequence of this is that a context assumes the default owner is the thread or queue that creates it. Don’t, therefore, initialize a context on one thread then pass it to another. Instead, pass a reference to a persistent store coordinator and have the receiving thread or queue create a new context using that. If you use Operation, you must create the context in main() (for a serial queue) or start() (for a concurrent queue).\n\nWhen you create a context you specify the concurrency type with which you’ll use it. When you create a managed object context, you have two options for its thread (queue) association:\n\nPrivate: The context creates and manages a private queue.\n\nMain: The context associates with the main queue and is dependent on the application’s event loop; otherwise, it’s similar to a private context. Use this type for contexts that update view controllers and other user interface elements.\n\nYou use contexts using the queue-based concurrency types in conjunction with perform(_:) and performAndWait(_:). You group “standard” messages to send to the context within a block to pass to one of these methods. There are two exceptions:\n\nSetter methods on queue-based managed object contexts are thread-safe. You can invoke these methods directly on any thread.\n\nIf your code executes on the main thread, you can invoke methods on the main queue style contexts directly instead of using the block based API.\n\nperform(_:) and performAndWait(_:) ensure the block operations execute on the correct queue for the context. The perform(_:) method returns immediately and the context executes the block methods on its own thread. With the performAndWait(_:) method, the context still executes the block methods on its own thread, but the method doesn’t return until the block completes.\n\nIt’s important to appreciate that blocks execute as a distinct body of work. As soon as your block ends, anyone else can enqueue another block, undo changes, reset the context, and so on. Thus blocks may be quite large, and typically end by invoking save().\n\nvar savedOK = false\nmanagedObjectContext.performAndWait() {\n\n\n    // Perform operations with the context.\n\n\n    do {\n        try managedObjectContext.save()\n        savedOK = true\n    } catch {\n        print(\"Error saving context: \\(error)\")\n    }\n}\n\n\nYou can also perform other operations, such as:\n\nlet fetchRequest: NSFetchRequest<Entity> = NSFetchRequest(entityName: \"Entity\")\nvar count = 0\n\n\nmanagedObjectContext.performAndWait() {\n    do {\n        count = try managedObjectContext.count(for: fetchRequest)\n    } catch {\n        print(\"Error counting objects: \\(error)\")\n    }\n}\n\n\nprint(\"The fetch request would return \\(count) objects\")\n\nSubclassing notes\n\nYou are strongly discouraged from subclassing NSManagedObjectContext. The change tracking and undo management mechanisms are highly optimized and hence intricate and delicate. Interposing your own additional logic that might impact processPendingChanges() can have unforeseen consequences. In situations such as store migration, Core Data will create instances of NSManagedObjectContext for its own use. Under these circumstances, you cannot rely on any features of your custom subclass. Any NSManagedObject subclass must always be fully compatible with NSManagedObjectContext (that is, it cannot rely on features of a subclass of NSManagedObjectContext).\n\nTopics\nCreating a context\ninit(NSManagedObjectContext.ConcurrencyType)\nCreates a context that uses the specified concurrency type.\nstruct NSManagedObjectContext.ConcurrencyType\nThe concurrency types to use with a managed object context.\nenum NSManagedObjectContextConcurrencyType\nThe concurrency types you can use with a managed object context.\nConfiguring a context\nvar persistentStoreCoordinator: NSPersistentStoreCoordinator?\nThe persistent store coordinator of the context.\nvar parent: NSManagedObjectContext?\nThe parent of the context.\nvar name: String?\nThe developer-provided name of the context.\nvar userInfo: NSMutableDictionary\nThe user information for the context.\nRegistering and fetching objects\nfunc fetch(NSFetchRequest<NSFetchRequestResult>) -> [Any]\nReturns an array of objects that meet the criteria of the specified fetch request.\nfunc fetch<T>(NSFetchRequest<T>) -> [T]\nReturns an array of items of the specified type that meet the fetch request’s critieria.\nfunc count(for: NSFetchRequest<NSFetchRequestResult>) -> Int\nReturns the number of objects the specified request fetches when it executes.\nfunc registeredObject(for: NSManagedObjectID) -> NSManagedObject?\nReturns an object that exists in the context.\nfunc object(with: NSManagedObjectID) -> NSManagedObject\nReturns either an existing object from the context or a fault that represents that object.\nfunc existingObject(with: NSManagedObjectID) -> NSManagedObject\nReturns an existing object from either the context or the persistent store.\nvar registeredObjects: Set<NSManagedObject>\nThe set of registered managed objects in the context.\nfunc count<T>(for: NSFetchRequest<T>) -> Int\nReturns a count of the objects the specified request fetches when it executes.\nfunc execute(NSPersistentStoreRequest) -> NSPersistentStoreResult\nPasses a request to the persistent store without affecting the contents of the managed object context, and returns a persistent store result.\nfunc refreshAllObjects()\nRefreshes all of the registered managed objects in the context.\nvar retainsRegisteredObjects: Bool\nA Boolean value that indicates whether the context keeps strong references to all registered managed objects.\nHandling managed objects\nvar shouldDeleteInaccessibleFaults: Bool\nA Boolean value that determines whether the context turns inaccessible faults into deleted objects.\nvar insertedObjects: Set<NSManagedObject>\nThe set of objects that have been inserted into the context but not yet saved in a persistent store.\nvar updatedObjects: Set<NSManagedObject>\nThe set of objects registered with the context that have uncommitted changes.\nvar deletedObjects: Set<NSManagedObject>\nThe set of objects that will be removed from their persistent store during the next save operation.\nfunc shouldHandleInaccessibleFault(NSManagedObject, for: NSManagedObjectID, triggeredByProperty: NSPropertyDescription?) -> Bool\nCreates a log of the inaccessible fault.\nfunc insert(NSManagedObject)\nRegisters an object to be inserted in the context’s persistent store the next time changes are saved.\nfunc delete(NSManagedObject)\nSpecifies an object that should be removed from its persistent store when changes are committed.\nfunc assign(Any, to: NSPersistentStore)\nSpecifies the store in which a newly inserted object will be saved.\nfunc obtainPermanentIDs(for: [NSManagedObject])\nConverts to permanent IDs the object IDs of the objects in a given array.\nfunc detectConflicts(for: NSManagedObject)\nMarks an object for conflict detection.\nfunc refresh(NSManagedObject, mergeChanges: Bool)\nUpdates the persistent properties of a managed object to use the latest values from the persistent store.\nfunc processPendingChanges()\nForces the context to process changes to the object graph.\nfunc observeValue(forKeyPath: String?, of: Any?, change: [String : Any]?, context: UnsafeMutableRawPointer?)\nAllows a context that has registered as an observer of a value to be notified of a change to that value.\nManaging concurrency\nlet NSManagedObjectContextQueryGenerationKey: String\nConstant used to reference the query generation token.\nclass func mergeChanges(fromRemoteContextSave: [AnyHashable : Any], into: [NSManagedObjectContext])\nHandles changes from other processes or from a serialized state.\nvar automaticallyMergesChangesFromParent: Bool\nA Boolean value that indicates whether the context automatically merges changes saved to its persistent store coordinator or parent context.\nvar concurrencyType: NSManagedObjectContextConcurrencyType\nThe concurrency type for the context.\nvar mergePolicy: Any\nThe merge policy of the context.\nvar queryGenerationToken: NSQueryGenerationToken?\nReturns the token associated with the query generation currently in use by this context.\nvar transactionAuthor: String?\nThe author for the context that is used as an identifier in persistent history transactions.\nfunc mergeChanges(fromContextDidSave: Notification)\nMerges the changes specified in a given notification.\nfunc setQueryGenerationFrom(NSQueryGenerationToken?)\nSets the query generation this context should use.\nManaging notifications\nstatic let didChangeObjectsNotification: Notification.Name\nA notification that posts when the context completes a save.\nstatic let NSManagedObjectContextObjectsDidChange: NSNotification.Name\nA notification of changes made to managed objects associated with this context.\nstatic let didSaveObjectsNotification: Notification.Name\nA notification that posts when the context completes a save.\nstatic let NSManagedObjectContextDidSave: NSNotification.Name\nA notification that the context completed a save.\nstatic let willSaveObjectsNotification: Notification.Name\nA notification that the context is about to save.\nstatic let NSManagedObjectContextWillSave: NSNotification.Name\nA notification that the context is about to save.\nlet NSInsertedObjectsKey: String\nA key for the set of objects that were inserted into the context.\nlet NSUpdatedObjectsKey: String\nA key for the set of objects that were updated.\nlet NSDeletedObjectsKey: String\nA key for the set of objects that were marked for deletion during the previous event.\nlet NSRefreshedObjectsKey: String\nA key for the set of objects that were refreshed but were not dirtied in the scope of this context.\nlet NSInvalidatedObjectsKey: String\nA key for the set of objects that were invalidated.\nlet NSInvalidatedAllObjectsKey: String\nA key that specifies that all objects in the context have been invalidated.\nstatic let didMergeChangesObjectIDsNotification: Notification.Name\nA notification that a posts when changes to managed objects with the specified object identifiers merge into the context.\nstatic let didSaveObjectIDsNotification: Notification.Name\nA notification that posts when the context saves changes.\nenum NSManagedObjectContext.NotificationKey\nKeys to access details in user info dictionaries of managed object context notifications.\nManaging unsaved and uncommitted changes\nfunc save()\nAttempts to commit unsaved changes to registered objects to the context’s parent store.\nvar hasChanges: Bool\nA Boolean value that indicates whether the context has uncommitted changes.\nUndoing changes\nvar undoManager: UndoManager?\nThe object that provides undo support for the context.\nfunc undo()\nSends an undo message to the context’s undo manager, asking it to reverse the latest uncommitted changes applied to objects in the object graph.\nfunc redo()\nSends a redo message to the context’s undo manager, asking it to reverse the latest undo operation applied to objects in the object graph.\nfunc reset()\nReturns the context to its base state.\nfunc rollback()\nRemoves everything from the undo stack, discards all insertions and deletions, and restores updated objects to their last committed values.\nHandling delete propagation\nvar propagatesDeletesAtEndOfEvent: Bool\nA Boolean value that indicates whether the context propagates deletes at the end of the event in which a change was made.\nManaging the staleness interval\nvar stalenessInterval: TimeInterval\nThe maximum length of time that may have elapsed since the store previously fetched data before fulfilling a fault issues a new fetch.\nPerforming block operations\nfunc perform(() -> Void)\nAsynchronously performs the specified closure on the context’s queue.\nfunc perform<T>(schedule: NSManagedObjectContext.ScheduledTaskType, () -> T) -> T\nSubmits a closure to the context’s queue for asynchronous execution.\nfunc performAndWait(() -> Void)\nSynchronously performs the specified closure on the context’s queue.\nfunc performAndWait<T>(() -> T) -> T\nSubmits a closure to the context’s queue for synchronous execution.\nenum NSManagedObjectContext.ScheduledTaskType\nThe different types of scheduled tasks.\nDeprecated\nDeprecated symbols\nReview unsupported symbols and their replacements.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCoding\nNSEditor\nNSEditorRegistration\nNSLocking\nSee Also\nObject Management\nclass NSManagedObject\nThe base class that all Core Data model objects inherit from.\nclass NSManagedObjectID\nA compact, universal identifier for a managed object."
  },
  {
    "title": "NSPersistentStoreCoordinator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentstorecoordinator",
    "html": "Overview\n\nA managed object context uses a coordinator to facilitate the persistence of its entities in the coordinator’s registered stores. A context can’t function without a coordinator because it relies on the coordinator’s access to the managed object model. The coordinator presents its registered stores as an aggregate, allowing a context to operate on the union of those stores instead of on each individually. A coordinator performs its work on a private queue and executes that work serially. You can use multiple coordinators if the work requires separate queues.\n\nUse a coordinator to add or remove persistent stores, change the type or location on-disk of those stores, query the metadata of a specific store, defer a store’s migrations, determine whether two objects originate from the same store, and so on.\n\nTopics\nCreating a persistent store coordinator\ninit(managedObjectModel: NSManagedObjectModel)\nCreates a persistent store coordinator with the specified managed object model.\nStore options\nThe options keys that configure the behavior and characteristics of a persistent store.\nMigration options\nThe options keys that configure the migration behavior of a persistent store.\nStore versions\nThe metadata keys you use when comparing store versions.\nManaging configuration\nvar name: String?\nThe coordinator’s name.\nvar managedObjectModel: NSManagedObjectModel\nThe coordinator’s managed object model.\nvar persistentStores: [NSPersistentStore]\nThe coordinator’s persistent stores.\nRegistering store types\nclass func registerStoreClass(AnyClass?, type: NSPersistentStore.StoreType)\nRegisters a persistent store subclass using the specified store type.\nclass var registeredStoreTypes: [String : NSValue]\nThe coordinator’s registered store types.\nAdding or removing a store\nfunc addPersistentStore(type: NSPersistentStore.StoreType, configuration: String?, at: URL, options: [AnyHashable : Any]?) -> NSPersistentStore\nAdds a specific type of persistent store at the provided location.\nfunc addPersistentStore(with: NSPersistentStoreDescription, completionHandler: (NSPersistentStoreDescription, Error?) -> Void)\nAdds a persistent store using the provided description.\nfunc remove(NSPersistentStore)\nRemoves the specified persistent store from the coordinator.\nModifying a store\nfunc destroyPersistentStore(at: URL, type: NSPersistentStore.StoreType, options: [AnyHashable : Any]?)\nDeletes a specific type of persistent store at the provided location.\nfunc migratePersistentStore(NSPersistentStore, to: URL, options: [AnyHashable : Any]?, type: NSPersistentStore.StoreType) -> NSPersistentStore\nChanges the location and, if necessary, the store type of the specified persistent store.\nfunc replacePersistentStore(at: URL, destinationOptions: [AnyHashable : Any]?, withPersistentStoreFrom: URL, sourceOptions: [AnyHashable : Any]?, type: NSPersistentStore.StoreType)\nReplaces one persistent store with another.\nManaging a store’s location\nfunc setURL(URL, for: NSPersistentStore) -> Bool\nChanges the location of the specified persistent store.\nfunc persistentStore(for: URL) -> NSPersistentStore?\nReturns the persistent store for the specified file URL.\nfunc url(for: NSPersistentStore) -> URL\nReturns the location of the provided persistent store.\nManaging a store’s metadata\nclass func setMetadata([String : Any]?, type: NSPersistentStore.StoreType, at: URL, options: [AnyHashable : Any]?)\nUpdates the metadata of a specific type of persistent store at the provided location.\nclass func metadataForPersistentStore(type: NSPersistentStore.StoreType, at: URL, options: [AnyHashable : Any]?) -> [String : Any]\nReturns the metadata of a specific type of persistent store at the provided location.\nfunc metadata(for: NSPersistentStore) -> [String : Any]\nReturns the metadata of the specified persistent store.\nfunc setMetadata([String : Any]?, for: NSPersistentStore)\nUpdates the metadata for the specified persistent store.\nlet NSStoreTypeKey: String\nA key that identifies the store type.\nlet NSStoreUUIDKey: String\nA key that provides the store’s UUID.\nDeferring a store’s migrations\nlet NSPersistentStoreDeferredLightweightMigrationOptionKey: String\nThe key for enabling deferred lightweight migrations.\nfunc finishDeferredLightweightMigrationTask()\nExecutes a single pending task of a deferred lightweight migration.\nfunc finishDeferredLightweightMigration()\nExecutes all remaining tasks of a deferred lightweight migration.\nPerforming tasks\nfunc perform<T>(() -> T) -> T\nExecutes the provided closure asynchronously on the coordinator’s queue and awaits the result.\nfunc performAndWait<T>(() -> T) -> T\nExecutes the provided closure on the coordinator’s queue and waits for it to finish.\nfunc execute(NSPersistentStoreRequest, with: NSManagedObjectContext) -> Any\nExecutes the specified request on each of the coordinator’s persistent stores.\nMaintaining a record of changes\nlet NSPersistentHistoryTrackingKey: String\nThe key you use to enable persistent history tracking.\nfunc currentPersistentHistoryToken(fromStores: [Any]?) -> NSPersistentHistoryToken?\nReturns a single persistent history token representing all of the specified stores.\nIntegrating with Spotlight\nlet NSCoreDataCoreSpotlightExporter: String\nThe key you use to specify your Core Spotlight delegate.\nclass NSCoreDataCoreSpotlightDelegate\nA set of methods that enable integration with Core Spotlight.\nSpotlight record keys\nThe keys for the values that exist in Spotlight’s external record files.\nShowcase App Data in Spotlight\n​ ​Index app data so users can find it by using Spotlight search. ​​\nGetting individual object identifiers\nfunc managedObjectID(forURIRepresentation: URL) -> NSManagedObjectID?\nReturns the object identifier for the specified URI representation.\nResponding to changes of the coordinator’s registered stores\nstatic let NSPersistentStoreCoordinatorStoresWillChange: NSNotification.Name\nA notification that posts before the coordinator changes its registered stores.\nstatic let NSPersistentStoreCoordinatorStoresDidChange: NSNotification.Name\nA notification that posts after a coordinator changes its registered stores.\nstatic let NSPersistentStoreCoordinatorWillRemoveStore: NSNotification.Name\nA notification that posts before a coordinator removes a store.\nNotification keys\nThe keys you use to retrieve values from a notification’s user info dictionary.\nDeprecated\nDeprecated Symbols\nReview unsupported symbols and their replacements.\nRelationships\nInherits From\nNSObject\nConforms To\nNSLocking\nSendable\nSee Also\nStore Coordination\nclass NSPersistentStore\nThe abstract base class for all Core Data persistent stores.\nclass NSPersistentStoreDescription\nA description object used to create and load a persistent store.\nclass NSPersistentStoreRequest\nCriteria used to retrieve data from or save data to a persistent store.\nclass NSPersistentStoreResult\nThe abstract base class for results returned from a persistent store coordinator.\nclass NSPersistentStoreAsynchronousResult\nA concrete class used to represent the results of an asynchronous request.\nclass NSSaveChangesRequest\nAn encapsulation of a collection of changes to be made by an object store in response to a save operation on a managed object context.\nclass NSAtomicStore\nAn abstract superclass that you subclass to create a Core Data atomic store.\nclass NSAtomicStoreCacheNode\nA concrete class that you use to represent basic nodes in a Core Data atomic store.\nclass NSIncrementalStore\nAn abstract superclass defining the API through which Core Data communicates with a store.\nclass NSIncrementalStoreNode\nA concrete class used to represent basic nodes in a Core Data incremental store."
  },
  {
    "title": "managedObjectModel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcontainer/1640561-managedobjectmodel",
    "html": "Discussion\n\nThis property contains a reference to the NSManagedObjectModel object associated with this persistent container.\n\nSee Also\nGetting the Container’s Configuration\nvar name: String\nThe container’s name.\nvar persistentStoreCoordinator: NSPersistentStoreCoordinator\nThe container’s persistent store coordinator."
  },
  {
    "title": "viewContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcontainer/1640622-viewcontext",
    "html": "Discussion\n\nThis property contains a reference to the NSManagedObjectContext that is created and owned by the persistent container which is associated with the main queue of the application. This context is created automatically as part of the initialization of the persistent container.\n\nThis context is associated directly with the NSPersistentStoreCoordinator and is non-generational by default.\n\nSee Also\nAcquiring Contexts\nfunc newBackgroundContext() -> NSManagedObjectContext\nReturns a new managed object context that executes on a private queue."
  },
  {
    "title": "persistentStoreCoordinator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcontainer/1640567-persistentstorecoordinator",
    "html": "Discussion\n\nWhen the persistent container is initialized, it creates a persistent store coordinator as part of that initialization. That persistent store coordinator is referenced in this property.\n\nSee Also\nGetting the Container’s Configuration\nvar managedObjectModel: NSManagedObjectModel\nThe container’s managed object model.\nvar name: String\nThe container’s name."
  },
  {
    "title": "NSPersistentContainer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcontainer",
    "html": "Overview\n\nNSPersistentContainer simplifies the creation and management of the Core Data stack by handling the creation of the managed object model (NSManagedObjectModel), persistent store coordinator (NSPersistentStoreCoordinator), and the managed object context (NSManagedObjectContext).\n\nTopics\nCreating a Container\ninit(name: String)\nCreates a container with the specified name.\ninit(name: String, managedObjectModel: NSManagedObjectModel)\nCreate a container with the specified name and managed object model.\nGetting the Container’s Configuration\nvar managedObjectModel: NSManagedObjectModel\nThe container’s managed object model.\nvar name: String\nThe container’s name.\nvar persistentStoreCoordinator: NSPersistentStoreCoordinator\nThe container’s persistent store coordinator.\nAccessing the Default Directory\nclass var defaultDirectoryURL: URL\nThe location of the directory that contains the persistent stores.\nclass func defaultDirectoryURL() -> URL\nReturns the location of the directory that contains the persistent stores.\nManaging Persistent Stores\nvar persistentStoreDescriptions: [NSPersistentStoreDescription]\nThe descriptions of the container’s persistent stores.\nfunc loadPersistentStores(completionHandler: (NSPersistentStoreDescription, Error?) -> Void)\nLoads the persistent stores.\nAcquiring Contexts\nfunc newBackgroundContext() -> NSManagedObjectContext\nReturns a new managed object context that executes on a private queue.\nvar viewContext: NSManagedObjectContext\nThe main queue’s managed object context.\nPerforming Background Tasks\nfunc performBackgroundTask((NSManagedObjectContext) -> Void)\nExecutes a closure on a private queue using an ephemeral managed object context.\nfunc performBackgroundTask<T>((NSManagedObjectContext) -> T) -> T\nRelationships\nInherits From\nNSObject\nConforms To\nSendable"
  },
  {
    "title": "Configuring Attributes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/modeling_data/configuring_attributes",
    "html": "Overview\n\nAfter you create an entity as described in Configuring Entities, you can add attributes to that entity.\n\nAn attribute describes a property of an entity. At minimum, you need to specify the property’s name and data type, whether it must be saved in the store, and whether it’s required to have a value when it’s saved.\n\nFor some attribute types, you can also choose whether to use a scalar type to represent the attribute in generated classes, as well as configure the attribute to have a default value, or to apply data validation rules.\n\nAdd Attributes\n\nAdd an attribute as indicated in the screenshot and the steps that follow:\n\nWith an entity selected, click Add Attribute at the bottom of the editor area. A new attribute with the placeholder name attribute, of type Undefined, appears in the Attributes list.\n\nIn the Attributes list, double-click the newly added attribute, and rename it.\n\nIn the Attributes list, as shown in the second screenshot, click Undefined and choose the attribute’s data type from the Type pop-up menu.\n\nConfigure Attributes\n\nUse the data model inspector (choose View > Inspectors > Show Data Model Inspector) to configure attributes.\n\nAttribute Type\n\nThe attribute’s data type. This field reflects the selection made in the Attributes list’s Type pop-up menu.\n\nFor the full list of types, see NSAttributeType.\n\nOptional\n\nOptional attributes aren’t required to have a value when saved to the persistent store. Attributes are optional by default.\n\nCore Data optionals aren’t the same as Swift optionals. You can use a Swift optional to represent a required attribute, for example, if you need flexibility to set its value during the time between the object’s initialization and its first save.\n\nTransient\n\nTransient attributes aren’t saved to the persistent store. By default, attributes are saved to the store. Transient attributes are a useful place to temporarily store calculated or derived values. Core Data does track changes to transient property values for undo purposes.\n\nAllows Cloud Encryption\n\nFor persistent stores that write to a CloudKit database, this option instructs the system to encrypt the attribute’s value before it’s sent to iCloud. For more information, see allowsCloudEncryption.\n\nDefault Value\n\nMost types allow you to supply a default value. New object instances set the attribute to this default value on initialization, unless you specify another value at that time.\n\nSupplying a default value, in combination with making the type non-optional, can provide performance benefits.\n\nUse Scalar Type\n\nOptionally, for some types, choose between scalar and nonscalar representations during code generation. For a Double, selecting the Use Scalar checkbox produces a Double, while leaving it unselected produces an NSNumber.\n\nFor the full list of types, including scalar variants, see NSAttributeType.\n\nValidation\n\nOptionally, set validation rules, such as the minimum and maximum values for a numeric type, or regular expressions requirements for strings. The data model inspector shows validation options specific to the selected attribute’s type.\n\nIndex in Spotlight\n\nAdds the field to the Spotlight index for instances created from this entity.\n\nFor more information, see Core Spotlight.\n\nPreserve After Deletion\n\nIncludes the attribute in this entity’s tombstone. When persistent history tracking is enabled and a context deletes a managed object, Core Data records an identifying marker, known as its tombstone, in the relevant transaction.\n\nUser Info\n\nA dictionary in which you can store any application-specific information related to the attribute.\n\nVersioning Hash Modifier\n\nProvide a hash modifier when maintaining multiple model versions if the structure of an attribute is the same, but the format or content of its data has changed.\n\nVersioning Renaming ID\n\nIf you rename an attribute between model versions, set the renaming identifier in the new model to the name of the corresponding attribute in the previous model.\n\nFor more information, see Migrating your data model automatically.\n\nSee Also\nConfiguring a Core Data Model\nConfiguring Entities\nModel your app’s objects.\nConfiguring Relationships\nSpecify how entities relate and how change propagates between them.\nGenerating Code\nAutomatically or manually generate managed object subclasses from entities."
  },
  {
    "title": "Migrating your data model automatically | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/migrating_your_data_model_automatically",
    "html": "Overview\n\nCore Data can typically perform an automatic data migration, referred to as lightweight migration. Lightweight migration infers the migration from the differences between the source and the destination managed object models.\n\nGenerating an Inferred Mapping Model\n\nTo perform automatic lightweight migration, Core Data needs to be able to find the source and destination managed object models at runtime. It looks for models in the bundles returned by the allBundles and allFrameworks methods of the Bundle class. Core Data then analyzes the schema changes to persistent entities and properties, and generates an inferred mapping model.\n\nGenerating an inferred mapping model requires changes to fit an obvious migration pattern, for example:\n\nAddition of an attribute\n\nRemoval of an attribute\n\nA nonoptional attribute becoming optional\n\nAn optional attribute becoming non-optional, and defining a default value\n\nRenaming an entity or property\n\nManaging Changes to Entities and Properties\n\nIf you rename an entity or property, you can set the renaming identifier in the destination model to the name of the corresponding property or entity in the source model. Use the Xcode Data Modeling tool’s property inspector (for either an entity or a property) to set the renaming identifier in the managed object model. For example, you can:\n\nRename a Car entity to Automobile\n\nRename a Car’s color attribute to paintColor\n\nThe renaming identifier creates a canonical name, so set the renaming identifier to the name of the property in the source model (unless that property already has a renaming identifier). This means you can rename a property in version 2 of a model, then rename it again in version 3. The renaming will work correctly going from version 2 to version 3, or from version 1 to version 3.\n\nManaging Changes to Relationships\n\nLightweight migration can also manage changes to relationships and to the type of relationship. You can add a new relationship or delete an existing relationship. You can also rename a relationship by using a renaming identifier, just like an attribute.\n\nIn addition, you can change a relationship from a to-one to a to-many, or a nonordered to-many to an ordered (and vice versa).\n\nManaging Changes to Hierarchies\n\nYou can add, remove, and rename entities in the hierarchy. You can also create a new parent or child entity and move properties up and down the entity hierarchy. You can move entities out of a hierarchy. You cannot, however, merge entity hierarchies; if two existing entities do not share a common parent in the source, they cannot share a common parent in the destination.\n\nConfirming Whether Core Data Can Infer the Model\n\nIf you want to determine in advance whether Core Data can infer the mapping model between the source and destination models without actually doing the work of migration, you can use NSMappingModel's inferredMappingModel(forSourceModel:destinationModel:) method. The method returns the inferred model if Core Data is able to create it; otherwise, it returns nil.\n\nIf your data change exceeds the capabilities of automatic migration, you can perform a heavyweight migration (often referred to as manual migration).\n\nRequesting Lightweight Migration\n\nYou request automatic lightweight migration using the options dictionary that you pass into addPersistentStore(ofType:configurationName:at:options:). Set values corresponding to both the NSMigratePersistentStoresAutomaticallyOption and the NSInferMappingModelAutomaticallyOption keys to true:\n\nlet psc = NSPersistentStoreCoordinator(managedObjectModel: mom)\nlet options = [NSMigratePersistentStoresAutomaticallyOption: true, NSInferMappingModelAutomaticallyOption: true]\ndo {\n    try psc.addPersistentStore(ofType: NSSQLiteStoreType, configurationName: nil, at: storeURL, options: options)\n} catch {\n    fatalError(\"Failed to add persistent store: \\(error)\")\n}\n\n\n\n\nWith these settings in place, Core Data will attempt a lightweight migration when it detects the persistent store no longer matches the current model.\n\nSee Also\nData model migration\nStaged migrations\nMigrate complex data models containing changes that are incompatible with lightweight migrations.\nManual migrations\nMigrate elaborate data models with changes that go beyond the capabilities of both lightweight and staged migrations."
  },
  {
    "title": "Configuring Relationships | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/modeling_data/configuring_relationships",
    "html": "Overview\n\nAfter you define at least two entities as described in Configuring Entities, you can add a relationship between the entities.\n\nA relationship describes how an entity affects another entity. At minimum, a relationship specifies a name, a destination entity, a delete rule, a cardinality type (To One or To Many), settings for whether the relationship must be saved in the store (transient), and whether it is required to have a value when saved (optional). You must also configure every relationship with an inverse relationship.\n\nAdd Relationships\n\nTo add a relationship, do the following:\n\nSelect the graph editor style to view all your app’s entities.\n\nControl-drag from one entity to another to create a pair of relationships. An arrow appears between the entities to indicate a relationship, and the editor creates a placeholder relationship with the name newRelationship in each entity.\n\nConfigure Relationships\n\nAfter creating a pair of relationships, configure each relationship as indicated in the screenshot and the steps that follow:\n\nSelect the table editor style to edit one entity at a time.\n\nOpen the Data Model inspector (choose View > Inspectors > Show Data Model Inspector).\n\nSelect the source entity from the Entities list, then select the new relationship in the Relationships list. Use the Data Model inspector to configure its name, destination, inverse, delete rule, and cardinality type, and to indicate if it is transient or optional.\n\nSelect the destination entity from the Entities list, then select the new relationship in the Relationships list. Use the Data Model inspector to configure its name, destination, inverse, delete rule, and cardinality type, and to indicate if it is transient or optional.\n\nThe above example shows a Quake entity’s countries relationship, referring to one or more countries a given earthquake affects. It has an inverse relationship on the Country entity called quakes, referring to any earthquakes affecting that country.\n\nTransient\n\nTransient relationships aren’t saved to the persistent store. So transient relationships are useful to temporarily store calculated or derived values. Core Data does track changes to transient property values for undo purposes.\n\nOptional\n\nOptional relationships aren’t required to have any instances of their destination type. A required relationship must point to one or more instances of the destination type.\n\nDestination\n\nEach relationship points from a source entity (the entity whose relationships you’re editing) to a destination entity. The destination entity is a related type that affects and is affected by the source type.\n\nSetting the same source and destination types creates a reflexive relationship. For example, an Employee may manage another Employee.\n\nInverse\n\nInverse relationships enable Core Data to propagate change in both directions when an instance of either the source or destination type changes. Every relationship must have an inverse.\n\nWhen creating relationships in the Graph editor, you add inverse relationships between entities in a single step. When creating relationships in the Table editor, you add inverse relationships to each entity individually.\n\nDelete Rule\n\nA relationship’s delete rule specifies how changes propagate across relationships when Core Data deletes a source instance.\n\nSelect No Action to delete the source object instance, but leave references to it in any destination object instances, which you update manually.\n\nSelect Nullify to delete the source object instance, and nullify references to it in any destination object instances.\n\nSelect Cascade to delete the source object instance, and with it, all of the destination object instances.\n\nSelect Deny to delete the source object only if it doesn’t point to any destination object instances.\n\nCardinality Type\n\nSpecify a relationship as being To One or To Many, which is known as its cardinality.\n\nUse To One relationships to connect the source with a single instance of the destination type.\n\nUse To Many relationships to connect the source with a mutable set of the destination type, and to optionally specify an arrangement and count:\n\nArrangement—Select the Ordered checkbox to specify that the relationship has an inherent ordering, and to generate an ordered mutable set.\n\nCount—You can also place upper and lower limits on the number of destination instances. For optional relationships, the number of instances can be zero or within these bounds.\n\nIndex in Spotlight\n\nIncludes the field in the Spotlight index. For more information, see Core Spotlight.\n\nSee Also\nConfiguring a Core Data Model\nConfiguring Entities\nModel your app’s objects.\nConfiguring Attributes\nDescribe the properties that compose an entity.\nGenerating Code\nAutomatically or manually generate managed object subclasses from entities.\nRelated Documentation\nenum NSDeleteRule\nConstants that determine what happens when you delete a relationship’s owning managed object."
  },
  {
    "title": "recordIDs(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/3141670-recordids",
    "html": "Parameters\nmanagedObjectIDs\n\nAn array of the managed object IDs.\n\nReturn Value\n\nA dictionary that uses managedObjectIDs as its keys, and the CKRecord.ID of each object’s underlying CloudKit record as its values. The dictionary excludes IDs that don’t have a CloudKit record.\n\nSee Also\nAccessing Records\nfunc record(for: NSManagedObjectID) -> CKRecord?\nReturns the CloudKit record for the specified managed object ID.\nfunc records(for: [NSManagedObjectID]) -> [NSManagedObjectID : CKRecord]\nReturns a dictionary that contains the CloudKit records for the specified managed object IDs.\nfunc recordID(for: NSManagedObjectID) -> CKRecordID?\nReturns the CloudKit record ID for the specified managed object ID."
  },
  {
    "title": "Accepting Share Invitations in a SwiftUI App | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/accepting_share_invitations_in_a_swiftui_app",
    "html": "Overview\n\nWhen the user accepts an invitation to participate in a CloudKit share, the system passes that share’s metadata to your app’s scene delegate for processing. To receive this metadata in a SwiftUI app:\n\nAdd a scene delegate — an object that conforms to UIWindowSceneDelegate — that’s responsible for passing the accepted share metadata to your app’s persistent container.\n\nAdd an application delegate — an object that conforms to UIApplicationDelegate — that configures new scenes to use your custom scene delegate class.\n\nModify your app’s App structure to use UIApplicationDelegateAdaptor to initialize and manage an application delegate at runtime.\n\nAdd a Scene Delegate to Process Share Invitations\n\nIn response to the user accepting a CloudKit share invitation, the system routes that action, for processing, to the delegate of the app’s active scene. SwiftUI apps don’t contain a scene delegate by default, but you can add one, and use it to implement the windowScene(_:userDidAcceptCloudKitShareWith:) method. Your implementation is responsible for passing the provided share metadata to your app’s persistent container for processing.\n\nTo create the scene delegate, right-click your project in Xcode’s Project navigator and select New File. Choose the Swift File template and name the file SceneDelegate.swift. Open the new file in Xcode’s source editor and define the SceneDelegate class as a subclass of UIResponder that adopts the UIWindowSceneDelegate protocol. Within this class, add your implementation of windowScene(_:userDidAcceptCloudKitShareWith:), as shown in the following example.\n\nclass SceneDelegate: UIResponder, UIWindowSceneDelegate {\n    func windowScene(_ windowScene: UIWindowScene,\n        userDidAcceptCloudKitShareWith cloudKitShareMetadata: CKShare.Metadata) {\n        \n        let stack = CoreDataStack.shared\n\n\n        // Get references to the app's persistent container \n        // and shared persistent store.\n        let container = stack.persistentContainer\n        let store = stack.sharedPersistentStore\n\n\n        // Tell the container to accept the specified share, adding\n        // the shared objects to the shared persistent store.\n       container.acceptShareInvitations(from: [cloudKitShareMetadata],\n                                        into: store,\n                                        completion: nil)\n    }\n}\n\n\nThe example above uses a CoreDataStack object that manages the initialization of the persistent container, and the private and shared persistent stores. For a reference implementation, see the sample code project Synchronizing a local store to the cloud.\n\nAdd an Application Delegate to Configure New Scenes\n\nBefore an app connects a new scene, the system asks the application delegate to provide the configuration for the new scene, including the class to use as its own delegate. By providing this configuration, your app can use your custom delegate implementation and correctly process accepted CloudKit share invitations. Because SwiftUI apps don’t include an application delegate, you need to add one to your app’s target.\n\nRight-click your project in Xcode’s Project navigator and select New File. Choose the Swift File template and name the file AppDelegate.swift. Open the new file in Xcode’s source editor and add the following code, which configures each new scene to use the custom SceneDelegate class from the previous section.\n\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n    func application(_ application: UIApplication, configurationForConnecting\n        connectingSceneSession: UISceneSession,\n        options: UIScene.ConnectionOptions) -> UISceneConfiguration {\n\n\n        // Create a scene configuration object for the\n        // specified session role.\n        let config = UISceneConfiguration(name: nil,\n            sessionRole: connectingSceneSession.role)\n\n\n        // Set the configuration's delegate class to the\n        // scene delegate that implements the share\n        // acceptance method.\n        config.delegateClass = SceneDelegate.self\n\n\n        return config\n    }\n}\n\n\nFor more information on scene configuration, see application(_:configurationForConnecting:options:).\n\nModify Your App to Utilize the Application Delegate\n\nAfter you add the scene and application delegates to your app’s target, use the UIApplicationDelegateAdaptor property wrapper to instruct your app’s top-level object — the structure that adopts SwiftUI’s App protocol — to initialize and manage an instance of the application delegate at runtime, as shown in the following example.\n\n@main\nstruct SharingExample: App {\n    // Instruct SwiftUI to use the custom AppDelegate class \n    // as the app's application delegate.\n    @UIApplicationDelegateAdaptor var appDelegate: AppDelegate\n\n\n    var body: some Scene {\n        WindowGroup {\n            ContentView()\n                .environment(\\.managedObjectContext,\n                    CoreDataStack.shared.persistentContainer.viewContext)\n        }\n    }\n}\n\n\nWith this change in place, whenever the user accepts a CloudKit share invitation, SwiftUI notifies the active scene’s delegate where you can process the accepted invitation accordingly.\n\nSee Also\nSharing Objects\nfunc acceptShareInvitations(from: [CKShareMetadata], into: NSPersistentStore, completion: (([CKShareMetadata]?, Error?) -> Void)?)\nAccepts one or more invitations to participate in sharing using the specified metadata.\nfunc fetchParticipants(matching: [CKUserIdentityLookupInfo], into: NSPersistentStore, completion: ([CKShareParticipant]?, Error?) -> Void)\nFetches all participants that match the specified critieria.\nfunc fetchShares(in: NSPersistentStore?) -> [CKShare]\nReturns an array that contains all share records in the specified persistent store.\nfunc fetchShares(matching: [NSManagedObjectID]) -> [NSManagedObjectID : CKShare]\nReturns a dictionary that contains the share records that CloudKit associates with specified managed object IDs.\nfunc persistUpdatedShare(CKShare, in: NSPersistentStore, completion: ((CKShare?, Error?) -> Void)?)\nSaves the share record and schedules it for export to iCloud.\nfunc share([NSManagedObject], to: CKShare?, completion: (Set<NSManagedObjectID>?, CKShare?, CKContainer?, Error?) -> Void)\nAssociates the specified managed objects with a new or existing share record."
  },
  {
    "title": "canUpdateRecord(forManagedObjectWith:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/3649648-canupdaterecord",
    "html": "Parameters\nobjectID\n\nThe ID of the managed object.\n\nReturn Value\n\ntrue if the user can modify the CloudKit record; otherwise, false.\n\nDiscussion\n\nThis method returns true if canModifyManagedObjects(in:) returns true and any of the following conditions are true:\n\nobjectID is a temporary object identifier.\n\nThe persistent store that contains the managed object isn’t using CloudKit.\n\nThe persistent store manages the user’s private database.\n\nThe persistent store manages the public database, and the user owns the underlying record or Core Data has yet to save the managed object to iCloud.\n\nThe persistent store manages the shared database, and the user has the necessary permissions to update the managed object’s underlying record. For more information, see CKShare.ParticipantPermission.\n\nSee Also\nChecking Permissions\nfunc canDeleteRecord(forManagedObjectWith: NSManagedObjectID) -> Bool\nReturns a Boolean value that indicates whether the user can delete the managed object’s underlying CloudKit record.\nfunc canModifyManagedObjects(in: NSPersistentStore) -> Bool\nReturns a Boolean value that indicates whether the user can modify the specified persistent store."
  },
  {
    "title": "canDeleteRecord(forManagedObjectWith:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/3649646-candeleterecord",
    "html": "Parameters\nobjectID\n\nThe ID of the managed object.\n\nReturn Value\n\ntrue if the user can delete the CloudKit record; otherwise, false.\n\nDiscussion\n\nThis method returns true if canModifyManagedObjects(in:) returns true and any of the following conditions are true:\n\nobjectID is a temporary object identifier.\n\nThe persistent store that contains the managed object isn’t using CloudKit.\n\nThe persistent store manages the user’s private database.\n\nThe persistent store manages the public database, and the user owns the underlying record or Core Data has yet to save the managed object to iCloud.\n\nThe persistent store manages the shared database, and the user has the necessary permissions to delete the managed object’s underlying record. For more information, see CKShare.ParticipantPermission.\n\nSee Also\nChecking Permissions\nfunc canUpdateRecord(forManagedObjectWith: NSManagedObjectID) -> Bool\nReturns a Boolean value that indicates whether the user can modify the managed object’s underlying CloudKit record.\nfunc canModifyManagedObjects(in: NSPersistentStore) -> Bool\nReturns a Boolean value that indicates whether the user can modify the specified persistent store."
  },
  {
    "title": "records(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer/3141671-records",
    "html": "Parameters\nmanagedObjectIDs\n\nAn array of managed object IDs.\n\nReturn Value\n\nA dictionary that uses managedObjectIDs as its keys, and each object’s underlying CKRecord as its values. The dictionary excludes IDs that don’t have a CloudKit record.\n\nSee Also\nAccessing Records\nfunc record(for: NSManagedObjectID) -> CKRecord?\nReturns the CloudKit record for the specified managed object ID.\nfunc recordID(for: NSManagedObjectID) -> CKRecordID?\nReturns the CloudKit record ID for the specified managed object ID.\nfunc recordIDs(for: [NSManagedObjectID]) -> [NSManagedObjectID : CKRecordID]\nReturns a dictionary that contains the CloudKit record IDs for the specified managed object IDs."
  },
  {
    "title": "fetchBatchSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequest/1506558-fetchbatchsize",
    "html": "Discussion\n\nThe default value is 0. A batch size of 0 is treated as infinite, which disables the batch fetching behavior.\n\nIf you set a nonzero batch size, the collection of objects returned when an instance of NSFetchRequest is executed is broken into batches. When the fetch is executed, the entire request is evaluated and the identities of all matching objects recorded, but only data for objects up to the batchSize will be fetched from the persistent store at a time. The array returned from executing the request is a proxy object that transparently fetches subsequent batches on demand. (In database terms, this is an in-memory cursor.)\n\nYou can use this feature to restrict the working set of data in your application. In combination with fetchLimit, you can create a subrange of an arbitrary result set.\n\nSpecial Considerations\n\nFor purposes of thread safety, when the fetch is executed, consider the array proxy returned as being owned by the managed object context the request is executed against. Treat the array proxy as if it were a managed object registered with that context.\n\nSee Also\nSpecifying Fetch Constraints\nvar predicate: NSPredicate?\nThe predicate of the fetch request.\nvar fetchLimit: Int\nThe fetch limit of the fetch request.\nvar fetchOffset: Int\nThe fetch offset of the fetch request.\nvar affectedStores: [NSPersistentStore]?\nAn array of persistent stores specified for the fetch request.\nclass NSFetchRequestExpression\nAn expression that evaluates the result of a fetch request on a managed object context.\nclass NSExpressionDescription\nAn object that describes an expression to include with a fetch request.\nclass NSFetchedPropertyDescription\nA description object used to define which properties are fetched from Core Data."
  },
  {
    "title": "NSFetchRequestExpression | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequestexpression",
    "html": "Overview\n\nNSFetchRequestExpression inherits from NSExpression, which provides most of the basic behavior. The first argument must be an expression which evaluates to an NSFetchRequest object, and the second must be an expression which evaluates to an NSManagedObjectContext object. If you simply want the count for the request, the countOnly argument should be true.\n\nTopics\nCreating a Fetch Request Expression\nclass func expression(forFetch: NSExpression, context: NSExpression, countOnly: Bool) -> NSExpression\nReturns an expression which will evaluate to the result of executing a fetch request on a context.\nExamining a Fetch Request Expression\nvar requestExpression: NSExpression\nThe expression for the receiver’s fetch request.\nvar contextExpression: NSExpression\nThe expression for the receiver’s managed object context.\nvar isCountOnlyRequest: Bool\nReturns a Boolean value that indicates whether the receiver represents a count-only fetch request.\nConstants\nlet NSFetchRequestExpressionType: NSExpression.ExpressionType\nThis constant specifies the fetch request expression type.\nRelationships\nInherits From\nNSExpression\nSee Also\nSpecifying Fetch Constraints\nvar predicate: NSPredicate?\nThe predicate of the fetch request.\nvar fetchLimit: Int\nThe fetch limit of the fetch request.\nvar fetchOffset: Int\nThe fetch offset of the fetch request.\nvar fetchBatchSize: Int\nThe batch size of the objects specified in the fetch request.\nvar affectedStores: [NSPersistentStore]?\nAn array of persistent stores specified for the fetch request.\nclass NSExpressionDescription\nAn object that describes an expression to include with a fetch request.\nclass NSFetchedPropertyDescription\nA description object used to define which properties are fetched from Core Data."
  },
  {
    "title": "fetchLimit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequest/1506622-fetchlimit",
    "html": "Discussion\n\nThe fetch limit specifies the maximum number of objects that a request should return when executed.\n\nIf you set a fetch limit, the framework makes a best effort to improve efficiency, but does not guarantee it. For every object store except the SQL store, a fetch request executed with a fetch limit in effect simply performs an unlimited fetch and throws away the unasked for rows.\n\nSee Also\nSpecifying Fetch Constraints\nvar predicate: NSPredicate?\nThe predicate of the fetch request.\nvar fetchOffset: Int\nThe fetch offset of the fetch request.\nvar fetchBatchSize: Int\nThe batch size of the objects specified in the fetch request.\nvar affectedStores: [NSPersistentStore]?\nAn array of persistent stores specified for the fetch request.\nclass NSFetchRequestExpression\nAn expression that evaluates the result of a fetch request on a managed object context.\nclass NSExpressionDescription\nAn object that describes an expression to include with a fetch request.\nclass NSFetchedPropertyDescription\nA description object used to define which properties are fetched from Core Data."
  },
  {
    "title": "fetchOffset | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequest/1506770-fetchoffset",
    "html": "Discussion\n\nThe default value is 0.\n\nThis setting allows you to specify an offset at which rows will begin being returned. Effectively, the request skips the specified number of matching entries. For example, given a fetch that typically returns a, b, c, d, specifying an offset of 1 will return b, c, d, and an offset of 4 will return an empty array. Offsets are ignored in nested requests such as subqueries.\n\nThis property can be used to restrict the working set of data. In combination with fetchLimit, you can create a subrange of an arbitrary result set.\n\nSee Also\nSpecifying Fetch Constraints\nvar predicate: NSPredicate?\nThe predicate of the fetch request.\nvar fetchLimit: Int\nThe fetch limit of the fetch request.\nvar fetchBatchSize: Int\nThe batch size of the objects specified in the fetch request.\nvar affectedStores: [NSPersistentStore]?\nAn array of persistent stores specified for the fetch request.\nclass NSFetchRequestExpression\nAn expression that evaluates the result of a fetch request on a managed object context.\nclass NSExpressionDescription\nAn object that describes an expression to include with a fetch request.\nclass NSFetchedPropertyDescription\nA description object used to define which properties are fetched from Core Data."
  },
  {
    "title": "affectedStores | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequest/1506518-affectedstores",
    "html": "Discussion\n\nThe contents of the array are the identifiers for the stores to be searched when the fetch request is executed.\n\nSee Also\nSpecifying Fetch Constraints\nvar predicate: NSPredicate?\nThe predicate of the fetch request.\nvar fetchLimit: Int\nThe fetch limit of the fetch request.\nvar fetchOffset: Int\nThe fetch offset of the fetch request.\nvar fetchBatchSize: Int\nThe batch size of the objects specified in the fetch request.\nclass NSFetchRequestExpression\nAn expression that evaluates the result of a fetch request on a managed object context.\nclass NSExpressionDescription\nAn object that describes an expression to include with a fetch request.\nclass NSFetchedPropertyDescription\nA description object used to define which properties are fetched from Core Data."
  },
  {
    "title": "NSExpressionDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsexpressiondescription",
    "html": "Overview\n\nAn expression description describes a value that a fetch request returns, which doesn’t appear as an attribute or relationship on an entity. For example, expressions can aggregate data, or transform an attribute’s value. You add expression descriptions to a fetch request using the propertiesToFetch method.\n\nImportant\n\nDon’t add expression descriptions to the properties array of NSEntityDescription.\n\nTopics\nConfiguring the Expression Description\nvar expression: NSExpression?\nThe expression to evaluate.\nvar resultType: NSAttributeDescription.AttributeType\nThe attribute type of the expression’s result.\nDeprecated\nDeprecated Symbols\nReview unsupported symbols and their replacements.\nRelationships\nInherits From\nNSPropertyDescription\nSee Also\nSpecifying Fetch Constraints\nvar predicate: NSPredicate?\nThe predicate of the fetch request.\nvar fetchLimit: Int\nThe fetch limit of the fetch request.\nvar fetchOffset: Int\nThe fetch offset of the fetch request.\nvar fetchBatchSize: Int\nThe batch size of the objects specified in the fetch request.\nvar affectedStores: [NSPersistentStore]?\nAn array of persistent stores specified for the fetch request.\nclass NSFetchRequestExpression\nAn expression that evaluates the result of a fetch request on a managed object context.\nclass NSFetchedPropertyDescription\nA description object used to define which properties are fetched from Core Data."
  },
  {
    "title": "sortDescriptors | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequest/1506262-sortdescriptors",
    "html": "Discussion\n\nThe sort descriptors specify how the objects returned when the NSFetchRequest is issued should be ordered—for example, by last name and then by first name. The sort descriptors are applied in the order in which they appear in the sortDescriptors array (serially in lowest-array-index-first order).\n\nA value of nil is treated as no sort descriptors."
  },
  {
    "title": "sectionIndexTitle(forSectionName:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultscontroller/1622308-sectionindextitle",
    "html": "Parameters\nsectionName\n\nThe name of a section.\n\nReturn Value\n\nThe section index entry corresponding to the section with name sectionName.\n\nDiscussion\n\nThe default implementation returns the capitalized first letter of the section name.\n\nYou should override this method if you need a different way to convert from a section name to its name in the section index.\n\nSpecial Considerations\n\nYou only need this method if you use a section index.\n\nSee Also\nConfiguring Section Information\nvar sectionIndexTitles: [String]\nThe array of section index titles."
  },
  {
    "title": "init(entityName:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequest/1506802-init",
    "html": "Parameters\nentityName\n\nThe name of the entity to fetch.\n\nReturn Value\n\nA fetch request configured to fetch using the entity named entityName.\n\nDiscussion\n\nThis method provides a convenient way to configure the entity for a fetch request without having to retrieve an NSEntityDescription object. When the fetch is executed, the request uses the managed object context to find the entity with the given name. The model associated with the context’s persistent store coordinator must contain an entity named entityName.\n\nSee Also\nManaging the Fetch Request’s Entity\ninit()\nCreates a new fetch request.\nvar entityName: String?\nThe name of the entity the request is configured to fetch.\nvar entity: NSEntityDescription?\nThe entity specified for the fetch request.\nvar includesSubentities: Bool\nA Boolean value that indicates whether the fetch request includes subentities in the results.\nstruct NSFetchRequestResultType\nConstants that specify the possible result types a fetch request can return.\nRelated Documentation\n+ fetchRequestWithEntityName:\nReturns a fetch request configured with a given entity name."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequest/1506679-init",
    "html": "See Also\nManaging the Fetch Request’s Entity\ninit(entityName: String)\nInitializes a fetch request configured with a given entity name.\nvar entityName: String?\nThe name of the entity the request is configured to fetch.\nvar entity: NSEntityDescription?\nThe entity specified for the fetch request.\nvar includesSubentities: Bool\nA Boolean value that indicates whether the fetch request includes subentities in the results.\nstruct NSFetchRequestResultType\nConstants that specify the possible result types a fetch request can return."
  },
  {
    "title": "completionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsasynchronousfetchrequest/1506815-completionblock",
    "html": "See Also\nPreparing a Request\nvar estimatedResultCount: Int\nA configuration parameter that assists Core Data with scheduling the asynchronous fetch request.\nvar fetchRequest: NSFetchRequest<ResultType>\nThe underlying fetch request that is executed asynchronously."
  },
  {
    "title": "estimatedResultCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsasynchronousfetchrequest/1506474-estimatedresultcount",
    "html": "See Also\nPreparing a Request\nvar completionBlock: NSPersistentStoreAsynchronousFetchResultCompletionBlock?\nThe block that is executed when the fetch request has completed.\nvar fetchRequest: NSFetchRequest<ResultType>\nThe underlying fetch request that is executed asynchronously."
  },
  {
    "title": "fetchedObjects | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultscontroller/1622278-fetchedobjects",
    "html": "Discussion\n\nThe value of the property is nil if performFetch() hasn’t been called.\n\nThe results array only includes instances of the entity specified by the fetch request (fetchRequest) and that match its predicate. (If the fetch request has no predicate, then the results array includes all instances of the entity specified by the fetch request.)\n\nThe results array reflects the in-memory state of managed objects in the controller’s managed object context, not their state in the persistent store. The returned array does not, however, update as managed objects are inserted, modified, or deleted.\n\nSee Also\nAccessing Results\nfunc object(at: IndexPath) -> ResultType\nReturns the object at the given index path in the fetch results.\nfunc indexPath(forObject: ResultType) -> IndexPath?\nReturns the index path of a given object.\nRelated Documentation\nfunc fetch(NSFetchRequest<NSFetchRequestResult>) -> [Any]\nReturns an array of objects that meet the criteria of the specified fetch request."
  },
  {
    "title": "deleteCache(withName:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultscontroller/1622283-deletecache",
    "html": "Parameters\nname\n\nThe name of the cache file to delete.\n\nIf name is nil, deletes all cache files.\n\nSee Also\nGetting Configuration Information\nvar fetchRequest: NSFetchRequest<ResultType>\nThe fetch request used to do the fetching.\nvar managedObjectContext: NSManagedObjectContext\nThe managed object context used to fetch objects.\nvar sectionNameKeyPath: String?\nThe key path of the attribute that determines which section the fetched entity belongs to.\nvar cacheName: String?\nThe name of the file used to cache section information.\nvar delegate: NSFetchedResultsControllerDelegate?\nThe object that is notified when the fetched results changed."
  },
  {
    "title": "NSFetchedPropertyDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedpropertydescription",
    "html": "Overview\n\nAn example might be a iTunes playlist, if expressed as a property of a containing object. Songs don’t belong to a particular playlist, especially in the case that they’re on a remote server. The playlist may remain even after the songs have been deleted, or the remote server has become inaccessible. Note, however, that unlike a playlist a fetched property is static—it does not dynamically update itself as objects in the destination entity change.\n\nThe effect of a fetched property is similar to executing a fetch request yourself and placing the results in a transient attribute, although with the framework managing the details. In particular, a fetched property is not fetched until it is requested, and the results are then cached until the object is turned into a fault. You use refresh(_:mergeChanges:) (NSManagedObjectContext) to manually refresh the properties—this causes the fetch request associated with this property to be executed again when the object fault is next fired.\n\nUnlike other relationships, which are all sets, fetched properties are represented by an ordered NSArray object just as if you executed the fetch request yourself. The fetch request associated with the property can have a sort ordering. The value for a fetched property of a managed object does not support mutableArrayValueForKey:.\n\nFetch Request Variables\n\nFetch requests set on an fetched property have 2 special variable bindings you can use: $FETCH_SOURCE and $FETCHED_PROPERTY. The source refers to the specific managed object that has this property; the property refers to the NSFetchedPropertyDescription object itself (which may have a user info associated with it that you want to use).\n\nEditing Fetched Property Descriptions\n\nFetched Property descriptions are editable until they are used by an object graph manager. This allows you to create or modify them dynamically. However, once a description is used (when the managed object model to which it belongs is associated with a persistent store coordinator), it must not (indeed cannot) be changed. This is enforced at runtime: any attempt to mutate a model or any of its subjects after the model is associated with a persistent store coordinator causes an exception to be thrown. If you need to modify a model that is in use, create a copy, modify the copy, and then discard the objects with the old model.\n\nTopics\nGetting and setting the fetch request\nvar fetchRequest: NSFetchRequest<NSFetchRequestResult>?\nThe fetch request of the receiver.\nRelationships\nInherits From\nNSPropertyDescription\nSee Also\nSpecifying Fetch Constraints\nvar predicate: NSPredicate?\nThe predicate of the fetch request.\nvar fetchLimit: Int\nThe fetch limit of the fetch request.\nvar fetchOffset: Int\nThe fetch offset of the fetch request.\nvar fetchBatchSize: Int\nThe batch size of the objects specified in the fetch request.\nvar affectedStores: [NSPersistentStore]?\nAn array of persistent stores specified for the fetch request.\nclass NSFetchRequestExpression\nAn expression that evaluates the result of a fetch request on a managed object context.\nclass NSExpressionDescription\nAn object that describes an expression to include with a fetch request."
  },
  {
    "title": "fetchRequest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultscontroller/1622287-fetchrequest",
    "html": "Discussion\n\nIf you want to modify the fetch request, you must follow the steps described in Modifying the Fetch Request.\n\nSee Also\nGetting Configuration Information\nvar managedObjectContext: NSManagedObjectContext\nThe managed object context used to fetch objects.\nvar sectionNameKeyPath: String?\nThe key path of the attribute that determines which section the fetched entity belongs to.\nvar cacheName: String?\nThe name of the file used to cache section information.\nvar delegate: NSFetchedResultsControllerDelegate?\nThe object that is notified when the fetched results changed.\nclass func deleteCache(withName: String?)\nDeletes the cached section information with the given name.\nRelated Documentation\ninit(fetchRequest: NSFetchRequest<ResultType>, managedObjectContext: NSManagedObjectContext, sectionNameKeyPath: String?, cacheName: String?)\nReturns a fetch request controller initialized using the given arguments."
  },
  {
    "title": "managedObjectContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultscontroller/1622304-managedobjectcontext",
    "html": "Discussion\n\nThe controller registers to listen to change notifications on this context and properly update its result set and section information. \n\nSee Also\nGetting Configuration Information\nvar fetchRequest: NSFetchRequest<ResultType>\nThe fetch request used to do the fetching.\nvar sectionNameKeyPath: String?\nThe key path of the attribute that determines which section the fetched entity belongs to.\nvar cacheName: String?\nThe name of the file used to cache section information.\nvar delegate: NSFetchedResultsControllerDelegate?\nThe object that is notified when the fetched results changed.\nclass func deleteCache(withName: String?)\nDeletes the cached section information with the given name."
  },
  {
    "title": "NSDerivedAttributeDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsderivedattributedescription",
    "html": "Overview\n\nUse derived attributes to optimize fetch performance; for example:\n\nCreate a derived searchName attribute to reflect a name attribute with case and diacritics removed for more efficient comparison.\n\nCreate a derived relationshipCount attribute to reflect the number of objects in a relationship and avoid having to do a join.\n\nDerived attributes support the following expressions:\n\nExpression\n\n\t\n\nDescription\n\n\t\n\nExample\n\n\n\n\nto-one keypath\n\n\t\n\nA single value to replicate.\n\n\t\n\nname or author.name\n\n\n\n\nto-one keypath with a function\n\n\t\n\nThe result of calling a function on a single value.\n\nSupported functions include canonical:, uppercase:, and lowercase:.\n\nThe canonical: function returns a case- and diacritic-insensitive String value.\n\n\t\n\ncanonical:(name)\n\n\n\n\nto-many keypath with a function\n\n\t\n\nThe result of calling an aggregate function on a set of values.\n\nSupported functions include @count and @sum.\n\n\t\n\nfriends.@count\n\n\n\n\ntime\n\n\t\n\nThe current time.\n\n\t\n\nnow()\n\nImportant\n\nData recomputes derived attributes when you save a context. A managed object’s property does not reflect unsaved changes until you save the context and refresh the object.\n\nTopics\nSpecifying the Derivation Expression\nvar derivationExpression: NSExpression?\nAn expression for generating derived data.\nRelationships\nInherits From\nNSAttributeDescription\nSee Also\nObject Modeling\nclass NSManagedObjectModel\nA programmatic representation of the .xcdatamodeld file describing your objects.\nclass NSEntityDescription\nA description of a Core Data entity.\nclass NSPropertyDescription\nA description of a single property belonging to an entity.\nclass NSAttributeDescription\nA description of a single attribute belonging to an entity.\nclass NSRelationshipDescription\nA description of a relationship between two entities."
  },
  {
    "title": "NSRelationshipDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsrelationshipdescription",
    "html": "Overview\n\nNSRelationshipDescription provides additional attributes that are specific to modeling a relationship between two entities. For the common attributes of all property types, see NSPropertyDescription.\n\nFor example, use this class to define a relationship’s cardinality — the number of managed objects the relationship can reference.\n\nFor a to-one relationship, set maxCount to 1.\n\nFor a to-many relationship, set maxCount to a number greater than 1 to impose an upper limit; otherwise, use 0 to allow an unlimited number of referenced objects.\n\nAt runtime, you can modify a relationship description until you associate its owning managed object model with a persistent store coordinator. If you attempt to modify the model after you associate it, Core Data throws an exception. To modify a model that’s in use, create and modify a copy and then discard any objects that belong to the original model.\n\nTopics\nConfiguring the Destination\nvar inverseRelationship: NSRelationshipDescription?\nThe relationship that represents the inverse of the current relationship.\nvar destinationEntity: NSEntityDescription?\nThe type of object the relationship contains.\nvar isOrdered: Bool\nA Boolean value that determines whether the relationship preserves the order of the referenced managed objects.\nConfiguring Cardinality\nvar isToMany: Bool\nReturns a Boolean value that indicates whether the relationship can contain many managed objects.\nvar minCount: Int\nThe minimum number of managed objects the relationship can reference.\nvar maxCount: Int\nThe maximum number of managed objects the relationship can reference.\nConfiguring Delete Behavior\nvar deleteRule: NSDeleteRule\nThe rule to apply when you delete the relationship’s owning managed object.\nenum NSDeleteRule\nConstants that determine what happens when you delete a relationship’s owning managed object.\nGetting Version Data\nvar versionHash: Data\nThe relationship’s unique identity.\nRelationships\nInherits From\nNSPropertyDescription\nSee Also\nStandard attributes\nclass NSPropertyDescription\nA description of a single property belonging to an entity.\nclass NSAttributeDescription\nA description of a single attribute belonging to an entity.\nenum NSAttributeType\nThe types of attribute that Core Data supports."
  },
  {
    "title": "NSCompositeAttributeDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nscompositeattributedescription",
    "html": "Overview\n\nComposite attributes enable you to define and store complex data types, and then query, index, and apply constraints to those types. Model classes use dictionaries to represent those composites in-memory, where each dictionary contains keys corresponding to the names of the underlying attributes. You may use composite attributes anywhere you use standard attributes, including lightweight migrations and CloudKit, through NSPersistentCloudKitContainer. You can even nest composites inside other composites to create complex object hierarchies without additional model classes.\n\nNote\n\nComposite attributes are available only to persistent stores that you configure with the sqlite store type.\n\nIn most scenarios, prefer to use Xcode’s model editor to add composite attributes to your entities and then regenerate your model classes. However, if you need to create composites dynamically at runtime, create an instance of this class and populate its elements property with the necessary attribute descriptions.\n\nYou can access a composite’s underlying attributes using namespaced key paths and property-like setters and getters, as the following example demonstrates:\n\n// A model class that represents the Quake entity.\nclass Quake: NSManagedObject {\n    @NSManaged var code: String?\n    @NSManaged var place: String?\n    @NSManaged var date: Date?\n\n\n    // A composite attribute that uses a dictionary for its in-memory storage.\n    @NSManaged var magnitude: [String: Any]?\n}\n\n\n// Use namespaced key paths to access a composite's indvidual attributes.\nlet request = NSFetchRequest(entityName: \"Quake\")\nrequest.predicate = NSPredicate(format: \"magnitude.richter > 4.5\")\n\n\n// Use property-like setters and getters to manage the underlying attributes directly.\nquake.magnitude.richter = 4.6\nprint(quake.magnitude.richter)\n\n\n\n\nTopics\nComposing attributes\nvar elements: [NSAttributeDescription]\nThe composed attribute descriptions.\nRelationships\nInherits From\nNSAttributeDescription\nSee Also\nComputed attributes\nclass NSDerivedAttributeDescription\nA description of an attribute that derives its value by performing a calculation on a related attribute."
  },
  {
    "title": "NSFetchRequestResult | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequestresult",
    "html": "Relationships\nInherits From\nNSObjectProtocol\nConforming Types\nNSDictionary\nNSManagedObject\nNSManagedObjectID\nNSNumber\nSee Also\nManaging How Results Are Returned\nvar resultType: NSFetchRequestResultType\nThe result type of the fetch request.\nvar includesPendingChanges: Bool\nA Boolean value that indicates whether, when the fetch is executed, it matches against currently unsaved changes in the managed object context.\nvar propertiesToFetch: [Any]?\nA collection of either property descriptions or string property names that specify which properties should be returned by the fetch.\nvar returnsDistinctResults: Bool\nA Boolean value that indicates whether the fetch request returns only distinct values for the fields specified by propertiesToFetch.\nvar includesPropertyValues: Bool\nA Boolean value that indicates whether, when the fetch is executed, property data is obtained from the persistent store.\nvar shouldRefreshRefetchedObjects: Bool\nA Boolean value that indicates whether the property values of fetched objects will be updated with the current values in the persistent store.\nvar returnsObjectsAsFaults: Bool\nA Boolean value that indicates whether the objects resulting from a fetch request are faults.\nstruct NSFetchRequestResultType\nConstants that specify the possible result types a fetch request can return."
  },
  {
    "title": "Core Data Constants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/core_data_constants",
    "html": "Topics\nCore Data Versions\nvar NSCoreDataVersionNumber: Double\nThe version of Core Data available in the current process.\nvar NSCoreDataVersionNumber10_10: Double\nThe Core Data version number released with macOS 10.10.\nvar NSCoreDataVersionNumber10_10_2: Double\nThe Core Data version number released with macOS 10.10.2.\nvar NSCoreDataVersionNumber10_10_3: Double\nThe Core Data version number released with macOS 10.10.3.\nvar NSCoreDataVersionNumber10_11: Double\nThe Core Data version number released with macOS 10.11.\nvar NSCoreDataVersionNumber10_11_3: Double\nThe Core Data version number released with macOS 10.11.3.\nvar NSCoreDataVersionNumber10_4: Double\nThe Core Data version number released with macOS 10.4.\nvar NSCoreDataVersionNumber10_4_3: Double\nThe Core Data version number released with macOS 10.4.3.\nvar NSCoreDataVersionNumber10_5: Double\nThe Core Data version number released with macOS 10.5.\nvar NSCoreDataVersionNumber10_5_3: Double\nThe Core Data version number released with macOS 10.5.3.\nvar NSCoreDataVersionNumber10_6: Double\nThe Core Data version number released with macOS 10.6.\nvar NSCoreDataVersionNumber10_6_2: Double\nThe Core Data version number released with macOS 10.6.2.\nvar NSCoreDataVersionNumber10_6_3: Double\nThe Core Data version number released with macOS 10.6.3.\nvar NSCoreDataVersionNumber10_7: Double\nThe Core Data version number released with macOS 10.7.\nvar NSCoreDataVersionNumber10_7_2: Double\nThe Core Data version number released with macOS 10.7.2.\nvar NSCoreDataVersionNumber10_7_3: Double\nThe Core Data version number released with macOS 10.7.3.\nvar NSCoreDataVersionNumber10_7_4: Double\nThe Core Data version number released with macOS 10.7.4.\nvar NSCoreDataVersionNumber10_8: Double\nThe Core Data version number released with macOS 10.8.\nvar NSCoreDataVersionNumber10_8_2: Double\nThe Core Data version number released with macOS 10.8.2.\nvar NSCoreDataVersionNumber10_9: Double\nThe Core Data version number released with macOS 10.9.\nvar NSCoreDataVersionNumber10_9_2: Double\nThe Core Data version number released with macOS 10.9.2.\nvar NSCoreDataVersionNumber10_9_3: Double\nThe Core Data version number released with macOS 10.9.3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_0: Double\nThe Core Data version number released with iOS 3.\nvar NSCoreDataVersionNumber_iPhoneOS_3_1: Double\nThe Core Data version number released with iOS 3.1.\nvar NSCoreDataVersionNumber_iPhoneOS_3_2: Double\nThe Core Data version number released with iOS 3.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_0: Double\nThe Core Data version number released with iOS 4.\nvar NSCoreDataVersionNumber_iPhoneOS_4_1: Double\nThe Core Data version number released with iOS 4.1.\nvar NSCoreDataVersionNumber_iPhoneOS_4_2: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_4_3: Double\nThe Core Data version number released with iOS 4.2.\nvar NSCoreDataVersionNumber_iPhoneOS_5_0: Double\nThe Core Data version number released with iOS 5.\nvar NSCoreDataVersionNumber_iPhoneOS_5_1: Double\nThe Core Data version number released with iOS 5.1.\nvar NSCoreDataVersionNumber_iPhoneOS_6_0: Double\nThe Core Data version number released with iOS 6.\nvar NSCoreDataVersionNumber_iPhoneOS_6_1: Double\nThe Core Data version number released with iOS 6.1.\nvar NSCoreDataVersionNumber_iPhoneOS_7_0: Double\nThe Core Data version number released with iOS 7.0.\nvar NSCoreDataVersionNumber_iPhoneOS_7_1: Double\nThe Core Data version number released with iOS 7.1.\nvar NSCoreDataVersionNumber_iPhoneOS_8_0: Double\nThe Core Data version number released with iOS 8.0.\nvar NSCoreDataVersionNumber_iPhoneOS_8_3: Double\nThe Core Data version number released with iOS 8.3.\nvar NSCoreDataVersionNumber_iPhoneOS_9_0: Double\nThe Core Data version number released with iOS 9.0.\nvar NSCoreDataVersionNumber_iPhoneOS_9_2: Double\nThe Core Data version number released with iOS 9.2.\nvar NSCoreDataVersionNumber_iPhoneOS_9_3: Double\nThe Core Data version number released with iOS 9.3.\nError Domains\nlet NSSQLiteErrorDomain: String\nDomain for SQLite errors.\nUser Info Dictionary Keys\nlet NSAffectedObjectsErrorKey: String\nThe key for objects prompting an error.\nlet NSAffectedStoresErrorKey: String\nThe key for stores prompting an error.\nlet NSDetailedErrorsKey: String\nIf multiple validation errors occur in one operation, they are collected in an array and added with this key to the “top-level error” of the operation.\nlet NSDeletedObjectIDsKey: String\nA user info key to identify deleted object identifiers in notifications after saving a managed object context.\nlet NSInsertedObjectIDsKey: String\nA user info key to identify inserted object identifiers in notifications after saving a managed object context.\nlet NSInvalidatedObjectIDsKey: String\nA user info key to identify invalidated object identifiers in notifications after saving a managed object context.\nlet NSPersistentHistoryTokenKey: String\nA user info key to identify the history token in persistent store remote change notifications.\nlet NSPersistentStoreURLKey: String\nA user info key to identify the store URL in persistent store remote change notifications.\nlet NSRefreshedObjectIDsKey: String\nA user info key to identify refreshed object identifiers in notifications after saving a managed object context.\nlet NSUpdatedObjectIDsKey: String\nA user info key to identify updated object identifiers in notifications after saving a managed object context.\nPersistent Store Metadata Keys\nlet NSBinaryStoreInsecureDecodingCompatibilityOption: String\nA flag that indicates Core Data decodes the binary store insecurely.\nlet NSBinaryStoreSecureDecodingClasses: String\nAn additional set of classes to use while decoding a binary store.\nlet NSPersistentStoreRemoteChangeNotificationPostOptionKey: String\nA key that indicates a persistent store posts a remote change notification for every write to the store, including writes by other processes."
  },
  {
    "title": "Manual migrations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/manual_migrations",
    "html": "Topics\nEntity Mapping\nclass NSMigrationManager\nA migration manager instance that performs a migration of data from one persistent store to another using a given mapping model.\nclass NSMappingModel\nA model instance that specifies how to map a model from a source to a destination managed object model.\nclass NSEntityMapping\nA mapping instance that specifies how to map an entity from a source to a destination managed object model.\nclass NSEntityMigrationPolicy\nA policy instance that customizes the migration process for an entity mapping.\nenum NSEntityMappingType\nThe types for mapping an entity between a source model and a destination model.\nclass NSPropertyMapping\nA mapping instance that specifies in a model how to map from a property in a source entity to a property in a destination entity.\nSee Also\nData model migration\nMigrating your data model automatically\nEnable lightweight migrations to keep your data model and the underlying data in a consistent state.\nStaged migrations\nMigrate complex data models containing changes that are incompatible with lightweight migrations."
  },
  {
    "title": "Conflict resolution | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/conflict_resolution",
    "html": "Topics\nConflict Management\nclass NSConstraintConflict\nAn encapsulation of conflicts that occur during an attempt to save a managed object.\nclass NSMergeConflict\nAn encapsulation of conflicts that occur during an attempt to save changes in a managed object context.\nclass NSMergePolicy\nA policy object that you use to resolve conflicts between the persistent store and in-memory versions of managed objects.\nclass NSQueryGenerationToken\nA token that indicates which generation of the persistent store is being accessed.\nSee Also\nBackground tasks\nUsing Core Data in the background\nUse Core Data in both a single-threaded and multithreaded app.\nLoading and Displaying a Large Data Feed\nConsume data in the background, and lower memory use by batching imports and preventing duplicate records.\nBatch processing\nUse batch processes to manage large data changes."
  },
  {
    "title": "Batch processing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/batch_processing",
    "html": "Topics\nData Inserts\nclass NSBatchInsertRequest\nA request to insert a batch of data in a persistent store.\nclass NSBatchInsertResult\nThe result that Core Data returns when executing a batch-insertion request.\nData Updates\nclass NSBatchUpdateRequest\nA request to Core Data to do a batch update of data in a persistent store without loading any data into memory.\nclass NSBatchUpdateResult\nThe result returned when executing a batch update request.\nData Deletion\nclass NSBatchDeleteRequest\nA request that deletes objects in the SQLite persistent store without loading them into memory.\nclass NSBatchDeleteResult\nAn object that describes the result of a batch delete request.\nSee Also\nBackground tasks\nUsing Core Data in the background\nUse Core Data in both a single-threaded and multithreaded app.\nLoading and Displaying a Large Data Feed\nConsume data in the background, and lower memory use by batching imports and preventing duplicate records.\nConflict resolution\nDetect and resolve conflicts that occur when data is changed on multiple threads."
  },
  {
    "title": "Using Core Data in the background | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/using_core_data_in_the_background",
    "html": "Overview\n\nCore Data is designed to work in a multithreaded environment. However, not every object under the Core Data framework is thread safe. To use Core Data in a multithreaded environment, ensure that:\n\nManaged object contexts are bound to the thread (queue) that they are associated with upon initialization.\n\nManaged objects retrieved from a context are bound to the same queue that the context is bound to.\n\nComparing Main Queue and Private Queue Contexts\n\nThere are two types of managed object contexts: main queue and private queue. The type of context is defined as part of its initialization.\n\nA main queue context (as defined by a NSManagedObjectContextConcurrencyType.mainQueueConcurrencyType) is specifically for use with your application interface and can only be used on the main queue of your app.\n\nA private queue context (as defined by a NSManagedObjectContextConcurrencyType.privateQueueConcurrencyType) creates its own queue upon initialization and can be used only on that queue. Because the queue is private and internal to the NSManagedObjectContext instance, it can only be accessed through the perform(_:) and the performAndWait(_:) methods.\n\nInitializing and Configuring Contexts\n\nFor both contexts, the initialization of the NSManagedObjectContext instance is the same:\n\nlet moc = NSManagedObjectContext(concurrencyType:<#type#>)\n\n\nThe parameter being passed in as part of the initialization determines what type of NSManagedObjectContext is returned.\n\nWhen you use the NSPersistentContainer, you configure the viewContext property as a main queue (NSManagedObjectContextConcurrencyType.mainQueueConcurrencyType) context, and configure the contexts associated with performBackgroundTask(_:) and newBackgroundContext() as a private queue (NSManagedObjectContextConcurrencyType.privateQueueConcurrencyType).\n\nAvoiding Problems\n\nIn general, avoid doing data processing on the main queue that is not user-related. Data processing can be CPU-intensive, and if it is performed on the main queue, it can result in unresponsiveness in the user interface. If your application will be processing data, like importing data into Core Data from JSON, create a private queue context and perform the import on the private context.\n\nDo not pass NSManagedObject instances between queues. Doing so can result in corruption of the data and termination of the app. When it is necessary to hand off a managed object reference from one queue to another, use NSManagedObjectID instances.\n\nYou retrieve the managed object ID of a managed object by calling the objectID accessor on the NSManagedObject instance.\n\nSee Also\nBackground tasks\nLoading and Displaying a Large Data Feed\nConsume data in the background, and lower memory use by batching imports and preventing duplicate records.\nConflict resolution\nDetect and resolve conflicts that occur when data is changed on multiple threads.\nBatch processing\nUse batch processes to manage large data changes."
  },
  {
    "title": "Persistent history | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/persistent_history",
    "html": "Topics\nTracking History\nclass NSPersistentHistoryToken\nA bookmark for keeping track the most recent history that you’ve processed.\nRequesting History\nclass NSPersistentHistoryChangeRequest\nA request to fetch or purge persistent history.\nclass NSPersistentHistoryResult\nThe result of a request to fetch persistent history.\nReading History\nclass NSPersistentHistoryTransaction\nA set of changes in the persistent history based on a context save or batch operation.\nclass NSPersistentHistoryChange\nA change representing the insertion, update, or deletion of a managed object in the persistent store.\nSee Also\nChange processing\nAccessing data when the store changes\nGuarantee that a context won’t see store changes until you tell it to look.\nConsuming relevant store changes\nFilter store transactions for changes relevant to the current view."
  },
  {
    "title": "Consuming relevant store changes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/consuming_relevant_store_changes",
    "html": "Overview\n\nUse persistent history tracking to determine what changes have occurred in the store, and to update your view context only as needed.\n\nFor example, consider an app that sometimes shows a list of colors, and sometimes shows a list of shapes. As the user views the Color objects from the view context, a background context may download additional Color data from a remote source. If the import happens through a batch operation, the save to the store doesn’t generate an NSManagedObjectContextDidSave notification, and the view misses these relevant updates. Alternatively, the background context may save changes to the store that don’t affect the current view—for example, inserting, modifying, or deleting Shape objects. These changes do generate context save events, so your view context processes them even though it doesn’t need to.\n\nPersistent history solves the problem by keeping track of every transaction on the store. You can filter this history for relevant changes and decide how or whether to update a view.\n\nEnable History Tracking for Your Local Store\n\nWhen creating a persistent container in your app’s delegate, set the NSPersistentHistoryTrackingKey option on the store description to true.\n\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n\n    // ...\n    \n    lazy var persistentContainer: PersistentContainer = {\n        let container = PersistentContainer(name: \"PersistentHistoryTracking\")\n        \n        // turn on persistent history tracking\n        let description = container.persistentStoreDescriptions.first\n        description?.setOption(true as NSNumber,\n                               forKey: NSPersistentHistoryTrackingKey)\n        \n        // ...\n    \n        return container\n    }()\n    \n    // ...\n}\n\n\nCore Data now tracks all changes to your local store.\n\nListen for Remote Changes\n\nIn the persistent container in your app’s delegate, toggle the store description option for enabling remote change notifications to true.\n\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n\n    // ...\n\n\n    lazy var persistentContainer: PersistentContainer = {\n        let container = PersistentContainer(name: \"PersistentHistoryTracking\")\n        \n        // ...\n        \n        // turn on remote change notifications\n        let remoteChangeKey = \"NSPersistentStoreRemoteChangeNotificationOptionKey\"\n        description?.setOption(true as NSNumber,\n                                   forKey: remoteChangeKey)\n    \n        // ...\n    \n        return container\n    }()\n\n\n    // ...\n}\n\n\nIn your view controller, add an observer to listen for remote change notifications.\n\nNotificationCenter.default.addObserver(\n    self,\n    selector: #selector(fetchChanges),\n    name: NSNotification.Name(\n        rawValue: \"NSPersistentStoreRemoteChangeNotification\"), \n        object: persistentContainer.persistentStoreCoordinator\n)\n\nProvide Details About a Transaction’s Source\n\nEach history transaction automatically includes the originating storeID, bundleID and processID. You can supply additional information about the source of a change by setting each managed object context’s name and transactionAuthor.\n\nProvide a unique name for each context to identify it in the persistent history. The context’s name becomes the persistent history transaction’s contextName. You only need to set this once per context.\n\nclass PersistentContainer: NSPersistentContainer {\n    \n    override init(name: String, managedObjectModel model: NSManagedObjectModel) {\n        super.init(name: name, managedObjectModel: model)\n\n\n        // set the context name\n        viewContext.name = \"viewContext\"\n    }\n}\n\n\nYou can also set a transactionAuthor before each context save to differentiate among multiple call sites that modify the same context. The context’s transactionAuthor becomes the author of subsequent persistent history transactions.\n\nfunc addColor(_ name: String, in context: NSManagedObjectContext) {\n    let color = Color(context: context)\n    color.name = name\n    color.creationDate = Date()\n\n\n    // set the transaction author\n    context.transactionAuthor = \"addColor\"\n    persistentContainer.saveContext(context)\n    context.transactionAuthor = nil\n}\n\n\nReset the context’s transactionAuthor to nil after saving the context to prevent misattribution of future transactions.\n\nKeep Track of Your Place in the History\n\nCreate an instance of NSPersistentHistoryToken to keep track of the most recent history that you have processed.\n\nvar lastToken: NSPersistentHistoryToken?\n\n\nYou can encode the token to disk so that when your app exits, you can keep track of where you were in the history. When you relaunch your app, fetch history based on your token.\n\nvar lastToken: NSPersistentHistoryToken? = nil {\n    didSet {\n        guard let token = lastToken,\n            let data = try? NSKeyedArchiver.archivedData(\n                withRootObject: token,\n                requiringSecureCoding: true\n            ) else { return }\n        do {\n            try data.write(to: tokenFile)\n        } catch {\n            let message = \"Could not write token data\"\n            print(\"###\\(#function): \\(message): \\(error)\")\n        }\n    }\n}\n\n\nlazy var tokenFile: URL = {\n    let url = NSPersistentContainer.defaultDirectoryURL().appendingPathComponent(\n        \"YourProjectName\", \n        isDirectory: true\n    )\n    if !FileManager.default.fileExists(atPath: url.path) {\n        do {\n            try FileManager.default.createDirectory(\n                at: url, \n                withIntermediateDirectories: true, \n                attributes: nil\n            )\n        } catch {\n            let message = \"Could not create persistent container URL\"\n            print(\"###\\(#function): \\(message): \\(error)\")\n        }\n    }\n    return url.appendingPathComponent(\"token.data\", isDirectory: false)\n}()\n\nRequest History\n\nTo request history, use the fetchHistory(after:) type method on NSPersistentHistoryChangeRequest. This example shows a request to fetch the history that is new since you last fetched history. Execute the fetch request on a background context to avoid blocking the main thread. Convert the NSPersistentHistoryResult to an array of NSPersistentHistoryTransaction.\n\nlet fetchHistoryRequest = NSPersistentHistoryChangeRequest.fetchHistory(\n    after: lastToken\n)\n\n\nlet context = persistentContainer.backgroundContext\nguard\n    let historyResult = try? context.execute(fetchHistoryRequest)\n        as? NSPersistentHistoryResult,\n    let history = historyResult!.result as? [NSPersistentHistoryTransaction]\n    else {\n        fatalError(\"Could not convert history result to transactions.\")\n}\n\n\nAlternatively you can use fetchHistory(after:) to get history after a particular date, or after a particular a transaction.\n\nRead History Transactions\n\nEach transaction represents a set of changes. Iterate through the array of transactions to learn their details. The following code loops through the results of the fetchHistoryRequest to inspect the properties of each transaction.\n\nfor transaction in history.reversed() { \n\n\n    // token, date and transaction number\n    let token = transaction.token\n    let timestamp = transaction.timestamp\n    let transactionNumber = transaction.transactionNumber\n\n\n    // transaction source details\n    let store = transaction.storeID\n    let bundle = transaction.bundleID\n    let process = transaction.processID\n    let context = transaction.contextName ?? \"unknown context\"\n    let author = transaction.author ?? \"unknown author\"\n    \n    // the list of changes\n    guard let changes = transaction.changes else { continue }\n}\n\n\nA transaction’s changes array includes information about multiple changes. A single NSPersistentHistoryChange represents the insertion, update, or deletion of an object.\n\nIterate through a transaction’s changes to identify each object that changed, the type of change that occurred, and any details about the change.\n\nIn the case of an update, the updatedProperties set includes any updated attributes and relationships. In the case of a deletion, the tombstone dictionary includes key-value pairs for any attributes marked for preservation after deletion.\n\n    for change in changes {\n        \n        let objectID = change.changedObjectID\n        let changeID = change.changeID\n        let transaction = change.transaction\n        let changeType = change.changeType\n        \n        switch(changeType) {\n        case .update:\n            guard let updatedProperties = change.updatedProperties else { break }\n            for updatedProperty in updatedProperties {\n                let name = updatedProperty.name\n            }\n        case .delete:\n            if let tombstone = change.tombstone {\n                let name = tombstone[\"name\"]\n            }\n        default:\n            break\n        }\n    }\n\nFilter for Transactions Relevant to the View\n\nFilter the history to narrow it to changes affecting the current view. The following code filters for changes to Color instances, updating the last transaction token as it goes.\n\nvar filteredTransactions = [NSPersistentHistoryTransaction]()\nfor transaction in transactions {\n    let filteredChanges = transaction.changes!.filter { change -> Bool in\n        return Color.entity().name == change.changedObjectID.entity.name\n    }\n    if !filteredChanges.isEmpty { \n        filteredTransactions.append(transaction) \n    }\n    self.lastToken = transaction.token\n}\nif filteredTransactions.isEmpty { return }\n\n\nRelevant changes may include all changes to a given entity, or more selectively, only changes to those properties that are visible on the screen.\n\nMerge Relevant Transactions into a Context\n\nTo merge the relevant changes into your view context, first obtain a notification by calling objectIDNotification() on the transaction. Then, pass the notification to mergeChanges(fromContextDidSave:).\n\nfor transaction in filteredTransactions {\n    self.fetchedResultsController.managedObjectContext.perform {\n        self.fetchedResultsController.managedObjectContext.mergeChanges(\n            fromContextDidSave: transaction.objectIDNotification()\n        )\n    }\n}\n\nAccess Attributes of a Deleted Object\n\nAfter you delete an object from the store, its objectID is no longer relevant. Identify a deleted object by recording select properties in its tombstone.\n\nIn the Core Data model editor, select an attribute. In the data model editor, select the Preserve After Deletion checkbox.\n\nIn the persistent history, NSPersistentHistoryChangeType.delete changes include a tombstone dictionary with key-value pairs for any attributes marked for preservation after deletion.\n\nfor transaction in history.reversed() {\n    guard let changes = transaction.changes else { continue }\n    for change in changes where change.changeType == .delete {\n        if let tombstone = change.tombstone {\n            let name = tombstone[\"name\"]\n        }\n    }\n}\n\nPurge History\n\nBecause persistent history tracking transactions take up space on disk, determine a clean-up strategy to remove them when they are no longer needed. Before pruning history, a single gatekeeper should ensure that your app and its clients have consumed the history they need.\n\nSimilar to fetching history, you can use deleteHistory(before:) to delete history older than a token, a transaction, or a date. For example, you can delete all transactions older than seven days.\n\nlet sevenDaysAgo = Date(timeIntervalSinceNow: TimeInterval(exactly: -604_800)!)\nlet purgeHistoryRequest =\n    NSPersistentHistoryChangeRequest.deleteHistory(\n        before: sevenDaysAgo)\n\n\ndo {\n    try persistentContainer.backgroundContext.execute(purgeHistoryRequest)\n} catch {\n    fatalError(\"Could not purge history: \\(error)\")\n}\n\n\nIf you attempt to fetch purged history, Core Data throws an expired token error.\n\nSee Also\nChange processing\nAccessing data when the store changes\nGuarantee that a context won’t see store changes until you tell it to look.\nPersistent history\nUse persistent history tracking to determine what changes have occurred in the store since the enabling of persistent history tracking."
  },
  {
    "title": "Sharing Core Data objects between iCloud users | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/sharing_core_data_objects_between_icloud_users",
    "html": "Overview\n\nMore and more people own multiple devices and use them for digital asset sharing and collaboration. They expect seamless data synchronization and sharing experiences with robust privacy and security features. Apps can support such use cases by implementing a data-sharing flow using Core Data and CloudKit.\n\nThis sample code project demonstrates how to use Core Data CloudKit to share photos between iCloud users. Users who share photos, called owners, can create a share, send an invitation, manage the permissions, and stop the sharing. Users who accept the share, called participants, can view and edit the photos, or stop participating in the share.\n\nConfigure the sample code project\n\nOpen the sample code project in Xcode. Before building it, perform the following steps:\n\nIn the Signing & Capabilities pane of the CoreDataCloudKitShare target, set the developer team to let Xcode automatically manage the provisioning profile. See Preparing your app for distribution for details.\n\nIn the iCloud section, select an empty iCloud container from the Containers list. If there isn’t an empty container, click the Add button (+), enter a container name, and click OK to let Xcode create the container and associate it with the app. An iCloud container identifier is case-sensitive, and must be unique and begin with “iCloud.”.\n\nSpecify the same team and iCloud container for all other targets.\n\nSpecify the same iCloud container for the gCloudKitContainerIdentifier variable in PersistenceController.swift.\n\nIn the Info pane of the CoreDataCloudKitShareOnWatch target, change the value of the WKCompanionAppBundleIdentifier key to <The iOS app bundle ID>.\n\nTo run the sample app on a device, configure the device as follows:\n\nLog in with an Apple ID. For an Apple Watch, open the Apple Watch app on the paired iPhone, and note the Apple ID in the Settings app on the watch.\n\nFor an iOS device, be sure that iCloud is turned on for the app at Settings > Apple ID > iCloud > Apps Using iCloud.\n\nAfter running the app on the device, be sure that Allow Notifications is turned on for the app at Settings > Notifications. For an Apple Watch, use the Apple Watch app on the paired iPhone.\n\nFor more details about configuring a Core Data CloudKit project, see Setting Up Core Data with CloudKit.\n\nCreate the CloudKit schema\n\nCloudKit apps require a schema to declare the data types they use. When apps create a record in the CloudKit development environment, CloudKit automatically creates the record type if it doesn’t exist. In the production environment, CloudKit doesn’t have that capability, nor does it allow removing an existing record type or field, so after finalizing the schema, developers need to deploy it to the production environment. Without this step, apps that work in the production environment, like the ones users download from the App Store or TestFlight, can’t communicate with the CloudKit server. For more information, see Deploying an iCloud Container’s Schema.\n\nCore Data CloudKit apps can use initializeCloudKitSchema(options:) to create the CloudKit schema that matches their Core Data model, or keep it up-to-date every time their model changes. The method works by creating fake data for the record types and then deleting it, which can take some time and blocks the other CloudKit operations. Apps must not call it in the production environment, or in the normal development process that doesn’t include model changes.\n\nTo create the CloudKit schema for this sample app, select the InitializeCloudKitSchema target from Xcode’s target menu, and run it. Having a target dedicated on CloudKit schema creation separates the initializeCloudKitSchema(options:) call from the normal flow. After running the target, use CloudKit Console to ensure each Core Data entity and attribute has a CloudKit counterpart. See Reading CloudKit Records for Core Data for the detailed mapping rules.\n\nFor apps that use the CloudKit public database, use CloudKit Console to manually add the Queryable index for the recordName field, and the Queryable and Sortable indexes for the modifiedAt field for all record types, including the CDMR type that Core Data generates to manage many-to-many relationships.\n\nFor more information, see Creating a Core Data Model for CloudKit.\n\nTry out the sharing flow\n\nTo create and share a photo using the sample app, follow these steps:\n\nPrepare two iOS devices, A and B, and log in to each device with a different Apple ID.\n\nUse Xcode to build and run the sample app on the devices.\n\nOn device A, tap the Add button (+) to add a photo to the Core Data store.\n\nTouch and hold the photo to display the context menu, and then tap New Share to present the sharing UI.\n\nFollow the UI to send a link to the Apple ID on device B. Use iMessage if you can because it’s easier to set up.\n\nAfter receiving the link on device B, tap it to accept and open the share, which launches the sample app and shows the photo.\n\nNote\n\nIt may take some time for one user to see changes from the other. Core Data CloudKit isn’t for real-time synchronization. For apps that use the technology, the system determines when to synchronize data. This helps balance the use of system resources and achieve the best overall user experience. There is no API for apps to configure the timing for the synchronization.\n\nTo discover more features of the sample app:\n\nOn device A, add another photo, touch and hold it, tap Add to Share, and then tap the trailing icon of the share. The photo soon appears on device B.\n\nOn device B, touch and hold the photo, tap Participants, and then tap the Remove Me icon to stop the participation. The photo disappears.\n\nTap the Manage Shares icon, and then tap a trailing icon of the share to present and use the sharing management UI.\n\nSet up the Core Data stack\n\nEvery CloudKit container has a privateCloudDatabase and a sharedCloudDatabase. To mirror both of them, the sample app sets up a Core Data stack with two stores, sets one store’s databaseScope to .private and the other to .shared, and then uses affectedStores or assign(_:to:) to specify the target store for data fetching or saving.\n\nWhen setting up the store description, the sample app enables Persistent history tracking and turns on remote change notifications by setting the NSPersistentHistoryTrackingKey and NSPersistentStoreRemoteChangeNotificationPostOptionKey options to true. Core Data relies on the persistent history to track the store changes, and the sample app updates its UI when remote changes occur.\n\nprivateStoreDescription.setOption(true as NSNumber, forKey: NSPersistentHistoryTrackingKey)\nprivateStoreDescription.setOption(true as NSNumber, forKey: NSPersistentStoreRemoteChangeNotificationPostOptionKey)\n\n\nTo synchronize data through CloudKit, apps need to use the same CloudKit container. The sample app explicitly specifies the same container for its iOS, macOS, and watchOS apps when setting up the CloudKit container options.\n\nlet cloudKitContainerOptions = NSPersistentCloudKitContainerOptions(containerIdentifier: gCloudKitContainerIdentifier)\n\nShare a Core Data object\n\nSharing a Core Data object between iCloud users includes creating a share (CKShare) from the owner side, accepting the sharing invitation from the participant side, and managing the share from both sides. Owners can stop their sharing or change the share permission. Participants can stop their participation. The sample app uses the following system sharing UI to implement the flow:\n\nIt uses ShareLink to start a new sharing and send the invitation. (Non-SwiftUI apps use UIActivityViewController or NSSharingServicePicker.)\n\nIt uses UICloudSharingController or NSSharingService to manage a share. (Apps that use the Shared with You framework can use SWCollaborationView if the UI is appropriate. For more information, see Adding shared content collaboration to your app.)\n\nShareLink requires the sharing object be Transferable. The Photo class in this sample conforms to the protocol by implementing transferRepresentation to provide a CKShareTransferRepresentation instance, which is based on a new share it creates by calling share(_:to:completion:).\n\nCore Data uses CloudKit zone sharing to share objects. Each share has its own record zone on the CloudKit server. CloudKit has a limit on how many record zones a database can have. To avoid reaching the limit over time, the sample app provides an option for users to share an object by adding it to an existing share, as the following example shows:\n\nfunc shareObject(_ unsharedObject: NSManagedObject, to existingShare: CKShare?,\n                 completionHandler: ((_ share: CKShare?, _ error: Error?) -> Void)? = nil)\n\n\nThe system sharing UI may change the share and save it directly to the CloudKit server. Since iOS 16.4, iPadOS 16.4, macOS 13.3, and watchOS 9.4, NSPersistentCloudKitContainer automatically observes the changes and updates the share it maintains. Therefore, apps don’t need to do anything for the synchronization between the system sharing UI and Core Data. To support earlier systems that can’t upgrade to the latest versions, developers can implement the relevant methods of UICloudSharingControllerDelegate or NSCloudSharingServiceDelegate to update the share Core Data maintains.\n\nThe sample app doesn’t interact with the system sharing UI for other purposes. Apps that need to do so can create a CKSystemSharingUIObserver object and provide a closure for systemSharingUIDidSaveShareBlock and systemSharingUIDidStopSharingBlock to detect and react to the changes. For systems where CKSystemSharingUIObserver is unavailable, apps can use UICloudSharingControllerDelegate or NSCloudSharingServiceDelegate to do so.\n\nCore Data doesn’t support cross-share relationships. That is, it doesn’t allow relating objects associated with different shares. When sharing an object, Core Data moves the entire object graph, which includes the object and all its relationships, to the share’s record zone. When a participant stops participating in a share, Core Data deletes the object graph from the shared persistent store.\n\nNote\n\nFor details about Core Data and CloudKit sharing, see Build apps that share data through CloudKit and Core Data and What’s new in CloudKit.\n\nDetect relevant changes by consuming store persistent history\n\nWhen importing data from CloudKit, NSPersistentCloudKitContainer records the changes on Core Data objects in the store’s persistent history, and triggers remote change notifications (.NSPersistentStoreRemoteChange) so apps can keep their state up-to-date. The sample app observes the notification and performs the following actions in the notification handler:\n\nGathers the relevant history transactions (NSPersistentHistoryTransaction), and notifies the views when remote changes happen. The changes on shares don’t generate any transactions.\n\nMerges the transactions to the viewContext of the persistent container, which triggers a SwiftUI update for the views that present photos. Views relevant to shares fetch the shares from the stores, and update the UI.\n\nDetects the new tags, and handles duplicates, if necessary.\n\nTo process the persistent history more effectively, the sample app:\n\nMaintains the token of the last transaction it consumes for each store, and uses it as the starting point of the next run.\n\nMaintains a transaction author, and uses it to filter the transactions irrelevant to Core Data CloudKit.\n\nOnly fetches and consumes the history of the relevant persistent store.\n\nThe following code sets up the history fetch request (NSPersistentHistoryChangeRequest):\n\nlet lastHistoryToken = historyToken(with: storeUUID)\nlet request = NSPersistentHistoryChangeRequest.fetchHistory(after: lastHistoryToken)\nlet historyFetchRequest = NSPersistentHistoryTransaction.fetchRequest!\nhistoryFetchRequest.predicate = NSPredicate(format: \"author != %@\", TransactionAuthor.app)\nrequest.fetchRequest = historyFetchRequest\n\n\nif privatePersistentStore.identifier == storeUUID {\n    request.affectedStores = [privatePersistentStore]\n} else if sharedPersistentStore.identifier == storeUUID {\n    request.affectedStores = [sharedPersistentStore]\n}\n\n\nThe persistent history stays on the device as a part of the Core Data store, and accumulates over time. Apps that have a large data set can purge it. To do so, apps can observe eventChangedNotification to determine the start date of the last successful .export event, and then purge the history that occurs sometime before that date. The sometime needs to be long enough for the history to become irrelevant, which can be several months for apps that users use on a regular basis. Apps generally only need to purge the history several times a year.\n\nNote\n\nCore Data relies on the persistent history to determine the data it needs to export. The history stays relevant before Core Data finishes processing it. Purging the history that is still relevant invalidates Core Data’s internal state, and triggers a reset operation that synchronizes the store with the CloudKit server truth.\n\nFor more information about persistent history processing, see Consuming relevant store changes.\n\nRemove duplicate data\n\nIn the CloudKit environment, duplicate data is sometimes inevitable because:\n\nDifferent peers can create the same data. In the sample app, owners can share a photo with a permission that allows participants to tag it. When owners and participants simultaneously create the same tag, a duplicate occurs.\n\nApps rely on some initial data and there’s no way to allow only one peer to preload it. Duplicates occur when multiple peers preload the data at the same time.\n\nTo remove duplicate data (or deduplicate), apps need to implement a way that allows all peers to eventually reserve the same object and remove others. The sample app does so in the following way:\n\nIt gives each tag a universally unique identifier (UUID). Tags that have the same name (but different UUIDs) and are associated with the same share (and are, therefore, in the same CloudKit record zone) are duplicates, so only one of them can exist.\n\nIt detects new tags from CloudKit by looking into the persistent history each time a remote change notification occurs. Deduplication only applies to the private persistent store because the user may not have permission to change the shared persistent store.\n\nFor each new tag, it fetches the duplicates from the same persistent store, and sorts them by their UUID so the tag with the lowest UUID goes first.\n\nIt picks the first tag as the one to reserve and marks the others as deduplicated. Because each UUID is globally unique and each peer picks the first tag, all peers eventually reserve the same tag, which is the one that has the globally lowest UUID.\n\nIt removes the deduplicated tags sometime later.\n\nWhen detecting duplicate tags, the sample app doesn’t delete them immediately. It waits until the next eventChangedNotification occurs, and only removes the tags with a deduplicatedDate that’s sometime before the last successful export and import event. This allows enough time for Core Data to synchronize the relationships of the deduplicated tags, and the app to establish the relationships for the tag it reserves.\n\nThe following code implements the deduplication process:\n\nfunc deduplicateAndWait(tagObjectIDs: [NSManagedObjectID])\n\n\nThe following code shows how the app determines the deduplicated tags it can safely remove:\n\n@objc\nfunc containerEventChanged(_ notification: Notification)\n\nImplement a custom sharing flow\n\nApps can implement a custom sharing flow when the system sharing UI is unavailable or doesn’t fit. The sample app performs the following tasks so users can share photos from watchOS:\n\nIt creates a share using share(_:to:completion:) when an owner shares a photo.\n\nIt configures the share with appropriate permissions, and adds participants for a share. A share is private if its publicPermission is CKShare.ParticipantPermission.none. For shares that have a public permission more permissive than .none (called public shares), users can participate by tapping the share link, so there’s no need to add participants beforehand. The sample app looks up participants using fetchParticipants(matching:into:completion:), configures the participant permission using permission, and adds it to the share using addParticipant(_:).\n\nIt allows users to deliver the share URL (url) to a participant using ShareLink.\n\nIt implements userDidAcceptCloudKitShare(with:) to accept the share using acceptShareInvitations(from:into:completion:). After the acceptance synchronizes, the photo and its relationships are available in the participant’s shared persistent store.\n\nIt manages the participants using addParticipant(_:) and removeParticipant(_:) from the owner side, or stops the sharing or participation by calling purgeObjectsAndRecordsInZone(with:in:completion:). (The purge API deletes the zone from CloudKit, and also the object graph from the Core Data store. Apps that need to keep the object graph can make a deep copy, ensure the new graph doesn’t connect to any share, and save it to the store.)\n\nNote\n\nTo be able to accept a share when users tap a share link, an app’s Info.plist file needs to contain the CKSharingSupported key with a value of true.\n\nIn this process, the sample app calls persistUpdatedShare(_:in:completion:) when it changes the share using CloudKit APIs for NSPersistentCloudKitContainer to update the store. The following code shows how the app adds a participant:\n\nparticipant.permission = permission\nparticipant.role = .privateUser\nshare.addParticipant(participant)\n\n\nself.persistentContainer.persistUpdatedShare(share, in: persistentStore) { (share, error) in\n    if let error = error {\n        print(\"\\(#function): Failed to persist updated share: \\(error)\")\n    }\n    completionHandler?(share, error)\n}\n\nSee Also\nCloudKit mirroring\nMirroring a Core Data store with CloudKit\nBack user interfaces with a local replica of a CloudKit private database.\nSynchronizing a local store to the cloud\nShare data between a user’s devices and other iCloud users.\nclass NSPersistentCloudKitContainer\nA container that encapsulates the Core Data stack in your app, and mirrors select persistent stores to a CloudKit private database.\nclass NSPersistentCloudKitContainerOptions\nAn object that customizes how a store description aligns with a CloudKit database."
  },
  {
    "title": "Accessing data when the store changes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/accessing_data_when_the_store_changes",
    "html": "Overview\n\nQuery generations give your UI a stable view of data in the database, regardless of changes happening to the store underneath. Whenever you read from a context, you see the same generation, or snapshot, of data until you choose to advance it to a later generation.\n\nUse query generations when you want to isolate your view context from any changes made in the store by background threads in your app, app extensions, CloudKit, or other sources.\n\nEnsure the Correct Type and Mode for the Persistent Store\n\nTo use query generations, the persistent store must be an NSSQLiteStoreType in write-ahead logging (WAL) journal mode. Core Data creates SQLite stores with WAL mode enabled by default.\n\nQuery generations leverage WAL mode to let you query against the historical state of the database. Core Data appends transactions to a .sqlite-wal file, or journal, in the same directory as the main store file. When your context reads from the journal, it starts at the transaction associated with a specific generation, instead of at the most recent transaction.\n\nTo confirm whether a custom store has WAL mode enabled, turn on SQL logging. Choose Product > Scheme > Edit Scheme, choose the Run action, and add the following line under Arguments Passed on Launch.\n\n-com.apple.CoreData.SQLDebug 1\n\n\nRun your app, and look for the following output in the console.\n\nCoreData: sql: pragma journal_mode=wal\n\n\nIf you try to use query generations with a store that’s not an NSSQLiteStoreType in WAL journal mode, your contexts gracefully revert to unpinned behavior.\n\nPin Your View to a Store Generation\n\nBy default, contexts are unpinned, and read from the store at the generation of the most recent transaction. Pinned contexts read from the store at the generation of a specific transaction.\n\nTo pin a context, call setQueryGenerationFrom(_:), passing an opaque NSQueryGenerationToken. The context updates to the specified generation lazily on the next read (fetching or faulting) operation.\n\nUse the current generation token to pin the context to the generation corresponding to the most recent store transaction. For example, pass the current generation token when setting up your stack to pin the view context to the first generation that it fetches.\n\ntry? persistentContainer.viewContext.setQueryGenerationFrom(.current)\n\n\nAlternatively, use the queryGenerationToken from another pinned context to align both contexts to the same generation.\n\nTo unpin a context, call setQueryGenerationFrom(_:), passing nil.\n\ntry? persistentContainer.viewContext.setQueryGenerationFrom(nil)\n\n\nNested contexts inherit their parent’s generation. They’re implicitly unpinned, but they see data as viewed through the generation of their parent with the addition of their parent’s pending changes.\n\nA generation doesn’t include stores added to the store coordinator after the generation’s creation. Additionally, if you remove a store from the coordinator, do not try to load data from the deleted store into a context.\n\nUpdate Your View Context to the Current Store Generation\n\nAdvance a context to the generation of the most recent transaction, and pin it there, by calling setQueryGenerationFrom(_:) and passing the current token. The context updates to the specified generation lazily on the next read (fetching or faulting) operation.\n\ntry? persistentContainer.viewContext.setQueryGenerationFrom(.current)\n\n\nAlternatively, update a context’s generation by calling any of the following.\n\nsetQueryGenerationFrom(_:)\n\nsave()\n\nmergeChanges(fromContextDidSave:)\n\nmergeChanges(fromRemoteContextSave:into:)\n\nreset()\n\nUpdate contexts to the current generation as soon as a specific generation is no longer needed. Query generations hold a file lock open to maintain the integrity of the journal for the duration of a query generation. Once no contexts refer to a query generation, it expires, and the system can reclaim the journal disk space.\n\nRefresh Objects\n\nRefresh any managed objects registered to the context after you change the context’s query generation or unpin the context. Managed objects do not automatically refresh, as this behavior may not be desirable and is difficult to revert.\n\nCall refreshAllObjects() on the context to refresh its existing managed objects.\n\npersistentContainer.viewContext.refreshAllObjects()\n\n\nYou can also refresh your objects by fetching them again. Call fetch(_:) on the context to retrieve a fresh set of managed objects matching your request criteria.\n\nlet request: NSFetchRequest<Quake> = NSFetchRequest(entityName: \"Quake\")\nrequest.fetchBatchSize = 10\ntry? persistentContainer.viewContext.fetch(request)\n\n\nThe fetch reads the journal from the context’s query generation if pinned, or from the most recent transaction if unpinned.\n\nSee Also\nChange processing\nConsuming relevant store changes\nFilter store transactions for changes relevant to the current view.\nPersistent history\nUse persistent history tracking to determine what changes have occurred in the store since the enabling of persistent history tracking."
  },
  {
    "title": "sectionIndexTitles | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultscontroller/1622299-sectionindextitles",
    "html": "Discussion\n\nThe default implementation returns the array created by calling sectionIndexTitle(forSectionName:) on all the known sections. You should override this method if you want to return a different array for the section index.\n\nSpecial Considerations\n\nYou only need this method if you use a section index.\n\nSee Also\nConfiguring Section Information\nfunc sectionIndexTitle(forSectionName: String) -> String?\nReturns the corresponding section index entry for a given section name."
  },
  {
    "title": "NSPersistentCloudKitContainerOptions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontaineroptions",
    "html": "Overview\n\nUse NSPersistentCloudKitContainerOptions to customize the behavior of an NSPersistentCloudKitContainer or to create additional store descriptions that sync to other containers.\n\nFor more information about setting up multiple stores, see Setting Up Core Data with CloudKit.\n\nTopics\nCreating Container Options\ninit(containerIdentifier: String)\nInitializes container options using the given CloudKit container identifier.\nvar containerIdentifier: String\nThe identifier of the CloudKit container associated with a given store description.\nvar databaseScope: CKDatabase.Scope\nThe database scope — public, private, or shared — to use for a specified store in a persistent CloudKit container.\nRelationships\nInherits From\nNSObject\nSee Also\nCloudKit mirroring\nMirroring a Core Data store with CloudKit\nBack user interfaces with a local replica of a CloudKit private database.\nSynchronizing a local store to the cloud\nShare data between a user’s devices and other iCloud users.\nclass NSPersistentCloudKitContainer\nA container that encapsulates the Core Data stack in your app, and mirrors select persistent stores to a CloudKit private database.\nSharing Core Data objects between iCloud users\nUse Core Data CloudKit to synchronize data between devices of an iCloud user and share data between different iCloud users."
  },
  {
    "title": "NSPersistentCloudKitContainer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainer",
    "html": "Overview\n\nNSPersistentCloudKitContainer is a subclass of NSPersistentContainer capable of managing both CloudKit-backed and noncloud stores.\n\nBy default, NSPersistentCloudKitContainer contains a single store description, which Core Data assigns to the first CloudKit container identifier in an app’s entitlements. Use NSPersistentCloudKitContainerOptions to customize this behavior or create additional store descriptions with backing by different containers.\n\nFor more information about setting up multiple stores, see Setting Up Core Data with CloudKit.\n\nTopics\nAccessing Records\nfunc record(for: NSManagedObjectID) -> CKRecord?\nReturns the CloudKit record for the specified managed object ID.\nfunc records(for: [NSManagedObjectID]) -> [NSManagedObjectID : CKRecord]\nReturns a dictionary that contains the CloudKit records for the specified managed object IDs.\nfunc recordID(for: NSManagedObjectID) -> CKRecordID?\nReturns the CloudKit record ID for the specified managed object ID.\nfunc recordIDs(for: [NSManagedObjectID]) -> [NSManagedObjectID : CKRecordID]\nReturns a dictionary that contains the CloudKit record IDs for the specified managed object IDs.\nChecking Permissions\nfunc canUpdateRecord(forManagedObjectWith: NSManagedObjectID) -> Bool\nReturns a Boolean value that indicates whether the user can modify the managed object’s underlying CloudKit record.\nfunc canDeleteRecord(forManagedObjectWith: NSManagedObjectID) -> Bool\nReturns a Boolean value that indicates whether the user can delete the managed object’s underlying CloudKit record.\nfunc canModifyManagedObjects(in: NSPersistentStore) -> Bool\nReturns a Boolean value that indicates whether the user can modify the specified persistent store.\nSharing Objects\nAccepting Share Invitations in a SwiftUI App\nAdapt your app to use UIKit’s application and scene delegates so it can process CloudKit share invitations.\nfunc acceptShareInvitations(from: [CKShareMetadata], into: NSPersistentStore, completion: (([CKShareMetadata]?, Error?) -> Void)?)\nAccepts one or more invitations to participate in sharing using the specified metadata.\nfunc fetchParticipants(matching: [CKUserIdentityLookupInfo], into: NSPersistentStore, completion: ([CKShareParticipant]?, Error?) -> Void)\nFetches all participants that match the specified critieria.\nfunc fetchShares(in: NSPersistentStore?) -> [CKShare]\nReturns an array that contains all share records in the specified persistent store.\nfunc fetchShares(matching: [NSManagedObjectID]) -> [NSManagedObjectID : CKShare]\nReturns a dictionary that contains the share records that CloudKit associates with specified managed object IDs.\nfunc persistUpdatedShare(CKShare, in: NSPersistentStore, completion: ((CKShare?, Error?) -> Void)?)\nSaves the share record and schedules it for export to iCloud.\nfunc share([NSManagedObject], to: CKShare?, completion: (Set<NSManagedObjectID>?, CKShare?, CKContainer?, Error?) -> Void)\nAssociates the specified managed objects with a new or existing share record.\nPurging Record Zones\nfunc purgeObjectsAndRecordsInZone(with: CKRecordZoneID, in: NSPersistentStore?, completion: ((CKRecordZoneID?, Error?) -> Void)?)\nDeletes all CloudKit records in the specified record zone, along with their corresponding managed objects.\nPromoting Your Schema\nfunc initializeCloudKitSchema(options: NSPersistentCloudKitContainerSchemaInitializationOptions)\nCreates the CloudKit schema for all stores in the container that manage a CloudKit database.\nstruct NSPersistentCloudKitContainerSchemaInitializationOptions\nOptions that control the behavior when promoting the container’s schema to CloudKit.\nMonitoring Container Events\nclass NSPersistentCloudKitContainer.Event\nAn object that represents activity in a persistent CloudKit container.\nenum NSPersistentCloudKitContainer.EventType\nThe type of event in a persistent CloudKit container, either setup, import, or export.\nclass NSPersistentCloudKitContainerEventRequest\nA request to fetch setup, import, or export events in a persistent CloudKit container.\nclass NSPersistentCloudKitContainerEventResult\nThe result of a request to fetch persistent CloudKit container events.\nclass let eventChangedNotification: NSNotification.Name\nA notification that contains details about an event in a persistent CloudKit container.\nclass let eventNotificationUserInfoKey: String\nThe user info dictionary key for the persistent CloudKit container event.\nRelationships\nInherits From\nNSPersistentContainer\nConforms To\nSendable\nSee Also\nCloudKit mirroring\nMirroring a Core Data store with CloudKit\nBack user interfaces with a local replica of a CloudKit private database.\nSynchronizing a local store to the cloud\nShare data between a user’s devices and other iCloud users.\nclass NSPersistentCloudKitContainerOptions\nAn object that customizes how a store description aligns with a CloudKit database.\nSharing Core Data objects between iCloud users\nUse Core Data CloudKit to synchronize data between devices of an iCloud user and share data between different iCloud users."
  },
  {
    "title": "Mirroring a Core Data store with CloudKit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/mirroring_a_core_data_store_with_cloudkit",
    "html": "Overview\n\nUse Core Data with CloudKit to give users seamless access to the data in your app across all their devices.\n\nCore Data with CloudKit combines the benefits of local persistence with cloud backup and distribution. Core Data provides powerful object graph management features for developing an app with structured data. CloudKit lets users access their data across every device on their iCloud account, while serving as an always-available backup service.\n\nDetermine If Your App Is Eligible for Core Data with CloudKit\n\nApps adopting Core Data can use Core Data with CloudKit as long as the persistent store is an NSSQLiteStoreType store, and the data model is compatible with CloudKit limitations. For example, CloudKit does not support unique constraints, undefined attributes, or required relationships.\n\nApps using CloudKit cannot use Core Data with CloudKit with existing CloudKit containers. To fully manage all aspects of data mirroring, Core Data owns the CloudKit schema created from the Core Data model. Existing CloudKit containers aren’t compatible with this schema. If your app already uses CloudKit, you can add Core Data with CloudKit when synchronizing a Core Data store with a new container. For more information about working with multiple stores, see Manage Multiple Stores.\n\nFor more information about data model requirements, see Create a Data Model.\n\nSet Up Your Development Environment\n\nYou need an Apple Developer Program account to access the CloudKit service and your team’s CloudKit containers during development.\n\nYou also need an iCloud account to save records to a CloudKit container. Core Data with CloudKit uses a specific record zone in the CloudKit private database, which is accessible only to the current user.\n\nYou can run and test Core Data with CloudKit apps using Simulator. You may also test with multiple physical devices logged into the same iCloud account. Connect all devices to a stable wireless internet connection to avoid network problems that could hinder synchronization.\n\nFor more information, see Create an iCloud Account for Development.\n\nConfigure Core Data with CloudKit\n\nAdd Core Data with CloudKit to your project as follows:\n\nSet up your Xcode project’s capabilities to enable CloudKit, and modify your Core Data stack setup to use NSPersistentCloudKitContainer. See Setting Up Core Data with CloudKit.\n\nDesign your Core Data model, and use it to initialize the CloudKit schema. See Creating a Core Data Model for CloudKit.\n\nModify your views to incorporate remote store changes at appropriate times. See Syncing a Core Data Store with CloudKit.\n\nFinally, if you are building custom features or writing a web app, discover how to work with the generated CloudKit schema in Reading CloudKit Records for Core Data.\n\nTopics\nConfiguring CloudKit Mirroring\nSetting Up Core Data with CloudKit\nSet up the classes and capabilities that sync your store to CloudKit.\nCreating a Core Data Model for CloudKit\nDesign a CloudKit-compatible data model and initialize your CloudKit schema.\nSyncing a Core Data Store with CloudKit\nSynchronize objects between devices, and handle store changes in the user interface.\nReading CloudKit Records for Core Data\nAccess CloudKit records created from Core Data managed objects.\nSee Also\nCloudKit mirroring\nSynchronizing a local store to the cloud\nShare data between a user’s devices and other iCloud users.\nclass NSPersistentCloudKitContainer\nA container that encapsulates the Core Data stack in your app, and mirrors select persistent stores to a CloudKit private database.\nclass NSPersistentCloudKitContainerOptions\nAn object that customizes how a store description aligns with a CloudKit database.\nSharing Core Data objects between iCloud users\nUse Core Data CloudKit to synchronize data between devices of an iCloud user and share data between different iCloud users."
  },
  {
    "title": "Synchronizing a local store to the cloud | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/synchronizing_a_local_store_to_the_cloud",
    "html": "Overview\n\nNote\n\nThis sample code project is associated with the WWDC22 session 10119: Optimize your use of Core Data and CloudKit .\n\nConfigure the sample code project\n\nBefore you run the sample code project in Xcode, do the following:\n\nIn Xcode’s Project navigator, select the project, and click the Signing & Capabilities tab.\n\nFrom the Team pop-up menu, choose your developer team.\n\nIn the Bundle Identifier field, enter a new bundle ID for the CoreDataCloudKitDemo target. The bundle identifier for the project has an associated App ID, so you need a unique identifier to create your own App ID. Use a reverse-DNS format for your identifier, as Preparing your app for distribution describes.\n\nIn the iCloud Capability Section, click the + button to create a new iCloud Container, or click a the checkbox next to an existing container you would like to use.\n\nSelect the CoreDataCloudKitDemoUnitTests target and use the Team pop-up menu to choose your developer team.\n\nXcode automatically generates provisioning profiles as needed. You can now build and run the CoreDataCloudKitDemo app or tests.\n\nRun the CoreDataCloudKitDemo app\n\nSelect the CoreDataCloudKitDemo scheme.\n\nChoose a destination. The CoreDataCloudKitDemo app supports the following destinations:\n\nAny iOS simulator\n\nAny iOS device\n\nMy Mac (Mac Catalyst)\n\nConfiguration options\n\nTo facilitate testing, the app supports the following configuration options the AppDelegate class parses into properties:\n\n-CDCKDTesting\n\nSet to 1 to store files in the special directory TestStores, so that tests don’t overwrite user data.\n\n-CDCKDAllowCloudKitSync\n\nSet to 0 to disable CloudKit sync during testing.\n\ncom.apple.CoreData.ConcurrencyDebug\n\nEnable Core Data multithreading assertions to verify all Core Data operations use the correct queue.\n\nSee Also\nCloudKit mirroring\nMirroring a Core Data store with CloudKit\nBack user interfaces with a local replica of a CloudKit private database.\nclass NSPersistentCloudKitContainer\nA container that encapsulates the Core Data stack in your app, and mirrors select persistent stores to a CloudKit private database.\nclass NSPersistentCloudKitContainerOptions\nAn object that customizes how a store description aligns with a CloudKit database.\nSharing Core Data objects between iCloud users\nUse Core Data CloudKit to synchronize data between devices of an iCloud user and share data between different iCloud users."
  },
  {
    "title": "NSFetchedResultsSectionInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultssectioninfo",
    "html": "Topics\nAccessing Objects\nvar numberOfObjects: Int\nThe number of objects (rows) in the section.\n\nRequired\n\nvar objects: [Any]?\nThe array of objects in the section.\n\nRequired\n\nAccessing the Name and Title\nvar name: String\nThe name of the section.\n\nRequired\n\nvar indexTitle: String?\nThe index title of the section.\n\nRequired\n\nSee Also\nResponding to Changes\nprotocol NSFetchedResultsControllerDelegate\nA delegate protocol that describes the methods that will be called by the associated fetched results controller when the fetch results have changed.\nstruct NSFetchRequestResultType\nConstants that specify the possible result types a fetch request can return.\nenum NSFetchedResultsChangeType\nConstants that specify the possible types of changes that are reported."
  },
  {
    "title": "NSFetchRequestResultType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchrequestresulttype",
    "html": "Overview\n\nThese constants are used by resultType.\n\nTopics\nInitializing a Result Type\ninit(rawValue: UInt)\nCreates a fetch request result type using the specified raw value.\nResult Types\nstatic var managedObjectResultType: NSFetchRequestResultType\nThe request returns managed objects.\nstatic var managedObjectIDResultType: NSFetchRequestResultType\nThe request returns managed object IDs.\nstatic var dictionaryResultType: NSFetchRequestResultType\nThe request returns dictionaries.\nstatic var countResultType: NSFetchRequestResultType\nThe request returns the count of the objects that match the request.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nManaging the Fetch Request’s Entity\ninit()\nCreates a new fetch request.\ninit(entityName: String)\nInitializes a fetch request configured with a given entity name.\nvar entityName: String?\nThe name of the entity the request is configured to fetch.\nvar entity: NSEntityDescription?\nThe entity specified for the fetch request.\nvar includesSubentities: Bool\nA Boolean value that indicates whether the fetch request includes subentities in the results."
  },
  {
    "title": "NSAsynchronousFetchRequest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsasynchronousfetchrequest",
    "html": "Topics\nInitializing a Request\ninit(fetchRequest: NSFetchRequest<ResultType>, completionBlock: ((NSAsynchronousFetchResult<ResultType>) -> Void)?)\nInitializes a new asynchronous fetch request configured with the provided fetch request and completion block.\nPreparing a Request\nvar completionBlock: NSPersistentStoreAsynchronousFetchResultCompletionBlock?\nThe block that is executed when the fetch request has completed.\nvar estimatedResultCount: Int\nA configuration parameter that assists Core Data with scheduling the asynchronous fetch request.\nvar fetchRequest: NSFetchRequest<ResultType>\nThe underlying fetch request that is executed asynchronously.\nRelationships\nInherits From\nNSPersistentStoreRequest\nSee Also\nFetch requests\nclass NSFetchRequest\nA description of search criteria used to retrieve data from a persistent store.\nclass NSAsynchronousFetchResult\nA fetch result object that encompasses the response from an executed asynchronous fetch request.\nclass NSFetchedResultsController\nA controller that you use to manage the results of a Core Data fetch request and to display data to the user."
  },
  {
    "title": "init(fetchRequest:managedObjectContext:sectionNameKeyPath:cacheName:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultscontroller/1622282-init",
    "html": "Parameters\nfetchRequest\n\nThe fetch request used to get the objects.\n\nThe fetch request must have at least one sort descriptor. If the controller generates sections, the first sort descriptor in the array is used to group the objects into sections; its key must either be the same as sectionNameKeyPath or the relative ordering using its key must match that using sectionNameKeyPath.\n\nImportant\n\nYou must not modify fetchRequest after invoking this method. For example, you must not change its predicate or the sort orderings.\n\ncontext\n\nThe managed object against which fetchRequest is executed.\n\nsectionNameKeyPath\n\nA key path on result objects that returns the section name. Pass nil to indicate that the controller should generate a single section.\n\nThe section name is used to pre-compute the section information.\n\nIf this key path is not the same as that specified by the first sort descriptor in fetchRequest, they must generate the same relative orderings. For example, the first sort descriptor in fetchRequest might specify the key for a persistent property; sectionNameKeyPath might specify a key for a transient property derived from the persistent property.\n\nname\n\nThe name of the cache file the receiver should use. Pass nil to prevent caching.\n\nPre-computed section info is cached to a private directory under this name. If Core Data finds a cache stored with this name, it is checked to see if it matches the fetchRequest. If it does, the cache is loaded directly—this avoids the overhead of computing the section and index information. If the cached information doesn’t match the request, the cache is deleted and recomputed when the fetch happens.\n\nReturn Value\n\nThe receiver initialized with the specified fetch request, context, key path, and cache name.\n\nSee Also\nInitializing a Fetched Results Controller\nfunc performFetch()\nExecutes the controller’s fetch request.\nRelated Documentation\nCore Data Programming Guide"
  },
  {
    "title": "Core Data model | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/core_data_model",
    "html": "Overview\n\nIn most cases, you describe your app’s data model using Xcode’s data model editor. NSManagedObjectModel represents the .xcdatamodeld file in your project’s source list. This is where you define entities that you use to generate NSManagedObject subclasses for Core Data to manage.\n\nThe entities you create are NSEntityDescription instances. Entities’ properties are subclasses of NSPropertyDescription, namely NSAttributeDescription for attributes, NSRelationshipDescription for relationships, and NSFetchedPropertyDescription for fetched properties.\n\nThe various attribute types are enumerated in NSAttributeType.\n\nTopics\nObjects and entities\nclass NSManagedObject\nThe base class that all Core Data model objects inherit from.\nclass NSEntityDescription\nA description of a Core Data entity.\nStandard attributes\nclass NSPropertyDescription\nA description of a single property belonging to an entity.\nclass NSAttributeDescription\nA description of a single attribute belonging to an entity.\nenum NSAttributeType\nThe types of attribute that Core Data supports.\nclass NSRelationshipDescription\nA description of a relationship between two entities.\nComputed attributes\nclass NSCompositeAttributeDescription\nA description of an attribute that derives its value by composing other attributes.\nclass NSDerivedAttributeDescription\nA description of an attribute that derives its value by performing a calculation on a related attribute.\nFetched properties\nclass NSFetchedPropertyDescription\nA description object used to define which properties are fetched from Core Data.\nSee Also\nData modeling\nModeling data\nConfigure the data model file to contain your app’s object graph."
  },
  {
    "title": "performFetch() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultscontroller/1622305-performfetch",
    "html": "Discussion\n\nAfter you execute this method, access the controller’s fetched objects using the fetchedObjects property.\n\nImportant\n\nIf you specify a value for the sectionNameKeyPath parameter when you initialize the fetched results controller, the fetch request must include a sort descriptor for the corresponding key path; otherwise, the fetch fails.\n\nSee Also\nInitializing a Fetched Results Controller\ninit(fetchRequest: NSFetchRequest<ResultType>, managedObjectContext: NSManagedObjectContext, sectionNameKeyPath: String?, cacheName: String?)\nReturns a fetch request controller initialized using the given arguments."
  },
  {
    "title": "Linking Data Between Two Core Data Stores | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/linking_data_between_two_core_data_stores",
    "html": "Overview\n\nSometimes your app needs to work with multiple Core Data stores. For example, if you need to label data in a read-only store, you must write the labeling result to a different store. If you need to synchronize part of a large data set to iCloud, your app can organize the data in two stores to mirror one to CloudKit and keep the other on the local device.\n\nThis sample app shows how to manage and link data from two different stores with one Core Data stack. The app organizes the records of books and user feedback on the books into two separate stores. It connects two entities from the stores with a fetched property, which enables the app to access a book’s feedback directly. When users add or remove a feedback record and save the change, the app updates the fetched property by refreshing the book object.\n\nConfigure the Data Model\n\nThe sample app creates a Book entity and a Feedback entity in the Core Data model, and then creates one Configuration for each store, named Book and Feedback as well, to contain the store’s entity.\n\nTo link the entities, the sample app adds a fetched property, feedbackList, in the Book entity, which is displayed in the entity’s Fetched Properties section in Xcode. The fetched property’s target is set to the Feedback entity and its predicate is bookUUID == $FETCH_SOURCE.uuid, where bookUUID is a key path of the target and $FETCH_SOURCE will be replaced with the source of the fetched property, which is the Book object in this sample. With this setup, when the app refreshes a Book object and accesses its feedbackList property, Core Data executes an NSFetchRequest with the predicate on the Feedback entity, and returns the result to the property.\n\nSet Up the Core Data Stack\n\nThe sample app creates one NSPersistentStoreDescription object for each store with the store’s URL and model configuration, then uses NSPersistentContainer to load the stores.\n\nlet container = NSPersistentContainer(name: \"CoreDataFetchedProperty\")\nlet defaultDirectoryURL = NSPersistentContainer.defaultDirectoryURL()\n\n\nlet bookStoreURL = defaultDirectoryURL.appendingPathComponent(\"Books.sqlite\")\nlet bookStoreDescription = NSPersistentStoreDescription(url: bookStoreURL)\nbookStoreDescription.configuration = \"Book\"\n\n\nlet feedbackStoreURL = defaultDirectoryURL.appendingPathComponent(\"Feedback.sqlite\")\nlet feedbackStoreDescription = NSPersistentStoreDescription(url: feedbackStoreURL)\nfeedbackStoreDescription.configuration = \"Feedback\"\n\n\ncontainer.persistentStoreDescriptions = [bookStoreDescription, feedbackStoreDescription]\ncontainer.loadPersistentStores(completionHandler: { (_, error) in\n    guard let error = error as NSError? else { return }\n    fatalError(\"###\\(#function): Failed to load persistent stores:\\(error)\")\n})\n\n\nWith this setup, when the app fetches or changes data, Core Data automatically routes the request to the right store based on where the entities are.\n\nImplement the Fetched Property\n\nXcode currently doesn’t generate code for fetched properties, so the sample app adds the following extension to provide the accessor for feedbackList.\n\nextension Book {\n    var feedbackList: [Feedback]? { // The accessor of the feedbackList property.\n        return value(forKey: \"feedbackList\") as? [Feedback]\n    }\n}\n\n\nWith the feedbackList accessor, the app can access the fetched property directly.\n\nguard let feedback = book.feedbackList?[indexPath.row] else { return cell }\nlet rating = Int(feedback.rating)\nlet comment = feedback.comment ?? \"\"\n\n\nUnlike a relationship, a fetched property can’t be used in a predicate for NSFetchRequest. It isn’t automatically updated when the managed context is saved either. When the sample app saves changes on the Feedback entity, the app must refresh the book object to update the book.feedbackList property.\n\ncontext.refresh(book, mergeChanges: true)\n\nSee Also\nEssentials\nCreating a Core Data model\nDefine your app’s object structure with a data model file.\nSetting up a Core Data stack\nSet up the classes that manage and persist your app’s objects.\nCore Data stack\nManage and persist your app’s model layer.\nHandling Different Data Types in Core Data\nCreate, store, and present records for a variety of data types."
  },
  {
    "title": "Modeling data | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/modeling_data",
    "html": "Overview\n\nA data model holds information about your application’s objects and the graph of how objects relate to each other. You provide this information in your project’s .xcdatamodeld file package. To add a data model to your project, see Creating a Core Data model.\n\nThis screenshot shows the data model for an app that displays a feed of earthquake data.\n\nModel your data by describing your objects as entities, adding their properties as attributes and relationships, and finally generating respective NSManagedObject subclasses to inherit change tracking and life cycle management.\n\nTopics\nConfiguring a Core Data Model\nConfiguring Entities\nModel your app’s objects.\nConfiguring Attributes\nDescribe the properties that compose an entity.\nConfiguring Relationships\nSpecify how entities relate and how change propagates between them.\nGenerating Code\nAutomatically or manually generate managed object subclasses from entities.\nSee Also\nData modeling\nCore Data model\nDescribe your app’s object structure."
  },
  {
    "title": "Setting up a Core Data stack | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/setting_up_a_core_data_stack",
    "html": "Overview\n\nAfter you create a data model file as described in Creating a Core Data model, set up the classes that collaboratively support your app’s model layer. These classes are referred to collectively as the Core Data stack.\n\nAn instance of NSManagedObjectModel represents your app’s model file describing your app’s types, properties, and relationships.\n\nAn instance of NSManagedObjectContext tracks changes to instances of your app’s types.\n\nAn instance of NSPersistentStoreCoordinator saves and fetches instances of your app’s types from stores.\n\nAn instance of NSPersistentContainer sets up the model, context, and store coordinator all at once.\n\nInitialize a Persistent Container\n\nTypically, you initialize Core Data during your app’s startup. Create the persistent container as a lazy variable to defer instantiation until its first use in your app’s delegate.\n\nIf you selected the Core Data checkbox when creating a new Xcode project, the template automatically includes this setup code in the AppDelegate.\n\nDeclare a lazy variable of type NSPersistentContainer.\n\nCreate a persistent container instance, passing the data model filename to its initializer.\n\nLoad any persistent stores. This call creates a store, if none exists.\n\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n\n    ...\n\n\n    lazy var persistentContainer: NSPersistentContainer = {        \n        let container = NSPersistentContainer(name: \"DataModel\")\n        container.loadPersistentStores { description, error in\n            if let error = error {\n                fatalError(\"Unable to load persistent stores: \\(error)\")\n            }\n        }\n        return container\n    }()\n\n\n    ...\n}\n\n\nOnce created, the persistent container holds references to the model, context, and store coordinator instances in its managedObjectModel, viewContext, and persistentStoreCoordinator properties, respectively.\n\nYou can now pass a reference to the container to your user interface.\n\nPass a Persistent Container Reference to a View Controller\n\nIn your app’s root view controller, import Core Data and create a variable to hold a reference to a persistent container.\n\nimport UIKit\nimport CoreData\n\n\nclass ViewController: UIViewController {\n\n\n    var container: NSPersistentContainer!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        guard container != nil else {\n            fatalError(\"This view needs a persistent container.\")\n        }\n        // The persistent container is available.\n    }\n}\n\n\nReturn to your app’s delegate. In application(_:didFinishLaunchingWithOptions:), downcast the app window’s rootViewController to your app’s root view controller type. In this reference, set the root view controller’s container property to the persistent container.\n\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n\n    ...\n\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {        \n        if let rootVC = window?.rootViewController as? ViewController {\n            rootVC.container = persistentContainer\n        }        \n        return true\n    }\n\n\n    ...\n}\n\n\nTo pass the persistent container to additional view controllers, repeat the creation of a container variable in each view controller, and set its value in the previous view controller’s prepare(for:sender:).\n\nclass ViewController: UIViewController {\n\n\n    ...\n    \n    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n        if let nextVC = segue.destination as? NextViewController {\n            nextVC.container = container\n        }\n    }\n}\n\nSubclass the Persistent Container\n\nNSPersistentContainer is intended to be subclassed. Your subclass is a convenient place to put Core Data–related code like functions that return subsets of data and calls to persist data to disk.\n\nimport CoreData\n\n\nclass PersistentContainer: NSPersistentContainer {    \n\n\n    func saveContext(backgroundContext: NSManagedObjectContext? = nil) {\n        let context = backgroundContext ?? viewContext\n        guard context.hasChanges else { return }\n        do {\n            try context.save()\n        } catch let error as NSError {\n            print(\"Error: \\(error), \\(error.userInfo)\")\n        }\n    }    \n}\n\n\nThe above example adds a saveContext function to the container, to improve performance by saving the context only when there are changes.\n\nNote\n\nWhen factoring a model layer into its own framework, an NSPersistentContainer subclass locates the model file in its own bundle.\n\nTopics\nLegacy Stack Setup\nSetting Up a Core Data Stack Manually\nSee Also\nEssentials\nCreating a Core Data model\nDefine your app’s object structure with a data model file.\nCore Data stack\nManage and persist your app’s model layer.\nHandling Different Data Types in Core Data\nCreate, store, and present records for a variety of data types.\nLinking Data Between Two Core Data Stores\nOrganize data in two different stores and implement a link between them."
  },
  {
    "title": "Creating a Core Data model | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/creating_a_core_data_model",
    "html": "Overview\n\nThe first step in working with Core Data is to create a data model file to define the structure of your app’s objects, including their object types, properties, and relationships.\n\nYou can add a Core Data model file to your Xcode project when you create the project, or you can add it to an existing project.\n\nAdd Core Data to a New Xcode Project\n\nIn the dialog for creating a new project, select the Use Core Data checkbox, and click Next.\n\nThe resulting project includes an .xcdatamodeld file.\n\nAdd a Core Data Model to an Existing Project\n\nChoose File > New > File and select the iOS platform tab. Scroll down to the Core Data section, select Data Model, and click Next.\n\nName your model file, select its group and targets, and click Create.\n\nXcode adds an .xcdatamodeld file with the specified name to your project.\n\nSee Also\nEssentials\nSetting up a Core Data stack\nSet up the classes that manage and persist your app’s objects.\nCore Data stack\nManage and persist your app’s model layer.\nHandling Different Data Types in Core Data\nCreate, store, and present records for a variety of data types.\nLinking Data Between Two Core Data Stores\nOrganize data in two different stores and implement a link between them.\nRelated Documentation\nConfiguring Attributes\nDescribe the properties that compose an entity.\nConfiguring Relationships\nSpecify how entities relate and how change propagates between them.\nGenerating Code\nAutomatically or manually generate managed object subclasses from entities."
  },
  {
    "title": "NSFetchedResultsController | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsfetchedresultscontroller",
    "html": "Overview\n\nWhile table views can be used in several ways, fetched results controllers primarily assist you with a primary list view. UITableView expects its data source to provide cells as an array of sections made up of rows. You configure a fetched results controller using a fetch request — an object that specifies what type of entity to fetch and how to sort the results. You can also add criteria for when to include a specific instance of the entity.\n\nThe fetched results controller efficiently analyzes the result of the fetch request and computes all the information about sections in the result set. It also computes all the information for the index based on the result set.\n\nIn addition, fetched results controllers:\n\nOptionally monitor changes to objects in the associated managed object context, and report changes in the results set to its delegate (see The Controller’s Delegate).\n\nOptionally cache the results of its computation so that if the same data is subsequently re-displayed, the work does not have to be repeated (see The Cache).\n\nA controller thus effectively has three modes of operation, determined by whether it has a delegate and whether the cache file name is set.\n\nNo tracking: The delegate is set to nil. The controller simply provides access to the data as it was when the fetch was executed.\n\nMemory-only tracking: the delegate is non-nil and the file cache name is set to nil. The controller monitors objects in its result set and updates section and ordering information in response to relevant changes.\n\nFull persistent tracking: the delegate and the file cache name are non-nil. The controller monitors objects in its result set and updates section and ordering information in response to relevant changes. The controller maintains a persistent cache of the results of its computation.\n\nImportant\n\nA delegate must implement at least one of the change tracking delegate methods in order for change tracking to be enabled. Providing an empty implementation of controllerDidChangeContent(_:) is sufficient.\n\nUsing NSFetchedResultsController\nCreating the Fetched Results Controller\n\nYou typically create an instance of NSFetchedResultsController as an instance variable of a table view controller. When you initialize the fetch results controller, you provide four parameters:\n\nA fetch request. This must contain at least one sort descriptor to order the results.\n\nA managed object context. The controller uses this context to execute the fetch request.\n\nOptionally, a key path on result objects that returns the section name. The controller uses the key path to split the results into sections (passing nil indicates that the controller should generate a single section).\n\nOptionally, the name of the cache file the controller should use (passing nil prevents caching). Using a cache can avoid the overhead of computing the section and index information.\n\nAfter creating an instance, you invoke performFetch() to actually execute the fetch.\n\nlet context = <#Managed object context#>\nlet fetchRequest = NSFetchRequest<AAAEmployeeMO>(entityName: \"Employee\")\n// Configure the request's entity, and optionally its predicate\nfetchRequest.sortDescriptors = [NSSortDescriptor(key: \"<#Sort key#>\", ascending: true)]\nlet controller = NSFetchedResultsController(fetchRequest: fetchRequest, managedObjectContext: context, sectionNameKeyPath: nil, cacheName: nil)\ndo {\n    try controller.performFetch()\n} catch {\n    fatalError(\"Failed to fetch entities: \\(error)\")\n}\n\n\nImportant\n\nIf you are using a cache, you must call deleteCache(withName:) before changing any of the fetch request, its predicate, or its sort descriptors. You must not reuse the same fetched results controller for multiple queries unless you set the cacheName to nil.\n\nThe Controller’s Delegate\n\nIf you set a delegate for a fetched results controller, the controller registers to receive change notifications from its managed object context. Any change in the context that affects the result set or section information is processed and the results are updated accordingly. The controller notifies the delegate when result objects change location or when sections are modified (see NSFetchedResultsControllerDelegate). You typically use these methods to update the display of the table view.\n\nThe Cache\n\nWhere possible, a controller uses a cache to avoid the need to repeat work performed in setting up any sections and ordering the contents. The cache is maintained across launches of your application.\n\nWhen you initialize an instance of NSFetchedResultsController, you typically specify a cache name. (If you do not specify a cache name, the controller does not cache data.) When you create a controller, it looks for an existing cache with the given name:\n\nIf the controller can’t find an appropriate cache, it calculates the required sections and the order of objects within sections. It then writes this information to disk.\n\nIf it finds a cache with the same name, the controller tests the cache to determine whether its contents are still valid. The controller compares the current entity name, entity version hash, sort descriptors, and section key-path with those stored in the cache, as well as the modification date of the cached information file and the persistent store file.\n\nIf the cache is consistent with the current information, the controller reuses the previously-computed information.\n\nIf the cache is not consistent with the current information, then the required information is recomputed, and the cache updated.\n\nAny time the section and ordering information change, the cache is updated.\n\nIf you have multiple fetched results controllers with different configurations (different sort descriptors and so on), you must give each a different cache name.\n\nYou can purge a cache using deleteCache(withName:).\n\nImplementing the Table View Datasource Methods\n\nYou ask the object to provide relevant information in your implementation of the table view data source methods:\n\noverride func numberOfSections(in tableView: UITableView) -> Int {\n    if let frc = <#Fetched results controller#> {\n        return frc.sections!.count\n    }\n    return 0\n}\noverride func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n    guard let sections = self.<#Fetched results controller#>?.sections else {\n        fatalError(\"No sections in fetchedResultsController\")\n    }\n    let sectionInfo = sections[section]\n    return sectionInfo.numberOfObjects\n}\noverride func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n    let cell = <#Get the cell#>\n    guard let object = self.<#Fetched results controller#>?.object(at: indexPath) else {\n        fatalError(\"Attempt to configure cell without a managed object\")\n    }\n    // Configure the cell with data from the managed object.\n    return cell\n}\noverride func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {\n    guard let sectionInfo = <#Fetched results controller#>?.sections?[section] else {\n        return nil\n    }\n    return sectionInfo.name\n}\noverride func sectionIndexTitles(for tableView: UITableView) -> [String]? {\n    return <#Fetched results controller#>?.sectionIndexTitles\n}\noverride func tableView(_ tableView: UITableView, sectionForSectionIndexTitle title: String, at index: Int) -> Int {\n    guard let result = <#Fetched results controller#>?.section(forSectionIndexTitle: title, at: index) else {\n        fatalError(\"Unable to locate section for \\(title) at index: \\(index)\")\n    }\n    return result\n}\n\nResponding to Changes\n\nIn general, NSFetchedResultsController is designed to respond to changes at the model layer, by informing its delegate when result objects change location or when sections are modified.\n\nIf you allow a user to reorder table rows, then your implementation of the delegate methods must take this into account—see NSFetchedResultsControllerDelegate.\n\nChanges are not reflected until after the controller’s managed object context has received a processPendingChanges() message. Therefore, if you change the value of a managed object’s attribute so that its location in a fetched results controller’s results set would change, its index as reported by the controller would typically not change until the end of the current event cycle (when processPendingChanges() is invoked). For example, the following code fragment would log “same”:\n\nlet frc = <#A fetched results controller#>\nlet managedObject = <#A managed object in frc's fetchedObjects array#>\nlet beforeIndexPath = frc.indexPath(forObject: managedObject)\nmanagedObject.setValue(\"Fred\", forKey: \"name\")\nlet afterIndexPath = frc.indexPath(forObject: managedObject)\nif beforeIndexPath?.compare(afterIndexPath!) == .orderedSame {\n    print(\"same\")\n}\n\nModifying the Fetch Request\n\nYou cannot simply change the fetch request to modify the results. If you want to change the fetch request, you must:\n\nIf you are using a cache, delete it (using deleteCache(withName:)).\n\nTypically you should not use a cache if you are changing the fetch request.\n\nChange the fetch request.\n\nInvoke performFetch().\n\nHandling Object Invalidation\n\nWhen a managed object context notifies the fetched results controller that individual objects are invalidated, the controller treats these as deleted objects and sends the proper delegate calls.\n\nIt’s possible for all the objects in a managed object context to be invalidated simultaneously. (For example, as a result of calling reset(), or if a store is removed from the persistent store coordinator.) When this happens, NSFetchedResultsController does not invalidate all objects, nor does it send individual notifications for object deletions. Instead, you must call performFetch() to reset the state of the controller then reload the data in the table view (reloadData()).\n\nSubclassing Notes\n\nYou create a subclass of this class if you want to customize the creation of sections and index titles. You override sectionIndexTitle(forSectionName:) if you want the section index title to be something other than the capitalized first letter of the section name. You override sectionIndexTitles if you want the index titles to be something other than the array created by calling sectionIndexTitle(forSectionName:) on all the known sections.\n\nTopics\nInitializing a Fetched Results Controller\ninit(fetchRequest: NSFetchRequest<ResultType>, managedObjectContext: NSManagedObjectContext, sectionNameKeyPath: String?, cacheName: String?)\nReturns a fetch request controller initialized using the given arguments.\nfunc performFetch()\nExecutes the controller’s fetch request.\nGetting Configuration Information\nvar fetchRequest: NSFetchRequest<ResultType>\nThe fetch request used to do the fetching.\nvar managedObjectContext: NSManagedObjectContext\nThe managed object context used to fetch objects.\nvar sectionNameKeyPath: String?\nThe key path of the attribute that determines which section the fetched entity belongs to.\nvar cacheName: String?\nThe name of the file used to cache section information.\nvar delegate: NSFetchedResultsControllerDelegate?\nThe object that is notified when the fetched results changed.\nclass func deleteCache(withName: String?)\nDeletes the cached section information with the given name.\nAccessing Results\nvar fetchedObjects: [ResultType]?\nThe results of the fetch.\nfunc object(at: IndexPath) -> ResultType\nReturns the object at the given index path in the fetch results.\nfunc indexPath(forObject: ResultType) -> IndexPath?\nReturns the index path of a given object.\nQuerying Section Information\nvar sections: [NSFetchedResultsSectionInfo]?\nThe sections for the fetch results.\nfunc section(forSectionIndexTitle: String, at: Int) -> Int\nReturns the section number for a given section title and index in the section index.\nConfiguring Section Information\nfunc sectionIndexTitle(forSectionName: String) -> String?\nReturns the corresponding section index entry for a given section name.\nvar sectionIndexTitles: [String]\nThe array of section index titles.\nResponding to Changes\nprotocol NSFetchedResultsControllerDelegate\nA delegate protocol that describes the methods that will be called by the associated fetched results controller when the fetch results have changed.\nprotocol NSFetchedResultsSectionInfo\nA protocol that defines the interface for section objects vended by a fetched results controller.\nstruct NSFetchRequestResultType\nConstants that specify the possible result types a fetch request can return.\nenum NSFetchedResultsChangeType\nConstants that specify the possible types of changes that are reported.\nRelationships\nInherits From\nNSObject\nSee Also\nFetch requests\nclass NSFetchRequest\nA description of search criteria used to retrieve data from a persistent store.\nclass NSAsynchronousFetchRequest\nA fetch request that retrieves results asynchronously and supports progress notification.\nclass NSAsynchronousFetchResult\nA fetch result object that encompasses the response from an executed asynchronous fetch request."
  },
  {
    "title": "NSAsynchronousFetchResult | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata/nsasynchronousfetchresult",
    "html": "Topics\nGetting Information About a Result\nvar fetchRequest: NSAsynchronousFetchRequest<ResultType>\nThe underlying fetch request that was executed.\nvar finalResult: [ResultType]?\nThe results that were received from the fetch request.\nRelationships\nInherits From\nNSPersistentStoreAsynchronousResult\nSee Also\nFetch requests\nclass NSFetchRequest\nA description of search criteria used to retrieve data from a persistent store.\nclass NSAsynchronousFetchRequest\nA fetch request that retrieves results asynchronously and supports progress notification.\nclass NSFetchedResultsController\nA controller that you use to manage the results of a Core Data fetch request and to display data to the user."
  },
  {
    "title": "Core Data | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coredata",
    "html": "Overview\n\nUse Core Data to save your application’s permanent data for offline use, to cache temporary data, and to add undo functionality to your app on a single device. To sync data across multiple devices in a single iCloud account, Core Data automatically mirrors your schema to a CloudKit container.\n\nThrough Core Data’s Data Model editor, you define your data’s types and relationships, and generate respective class definitions. Core Data can then manage object instances at runtime to provide the following features.\n\nPersistence\n\nCore Data abstracts the details of mapping your objects to a store, making it easy to save data from Swift and Objective-C without administering a database directly.\n\nUndo and redo of individual and batched changes\n\nCore Data’s undo manager tracks changes and can roll them back individually, in groups, or all at once, making it easy to add undo and redo support to your app.\n\nBackground data tasks\n\nPerform potentially UI-blocking data tasks, like parsing JSON into objects, in the background. You can then cache or store the results to reduce server roundtrips.\n\nView synchronization\n\nCore Data also helps keep your views and data synchronized by providing data sources for table and collection views.\n\nVersioning and migration\n\nCore Data includes mechanisms for versioning your data model and migrating user data as your app evolves.\n\nTopics\nEssentials\nCreating a Core Data model\nDefine your app’s object structure with a data model file.\nSetting up a Core Data stack\nSet up the classes that manage and persist your app’s objects.\nCore Data stack\nManage and persist your app’s model layer.\nHandling Different Data Types in Core Data\nCreate, store, and present records for a variety of data types.\nLinking Data Between Two Core Data Stores\nOrganize data in two different stores and implement a link between them.\nData modeling\nModeling data\nConfigure the data model file to contain your app’s object graph.\nCore Data model\nDescribe your app’s object structure.\nFetch requests\nCore Data retrieves persisted data to be used by your app.\nclass NSFetchRequest\nA description of search criteria used to retrieve data from a persistent store.\nclass NSAsynchronousFetchRequest\nA fetch request that retrieves results asynchronously and supports progress notification.\nclass NSAsynchronousFetchResult\nA fetch result object that encompasses the response from an executed asynchronous fetch request.\nclass NSFetchedResultsController\nA controller that you use to manage the results of a Core Data fetch request and to display data to the user.\nSwiftData migration and coexistence\nAdopting SwiftData for a Core Data app\nPersist data in your app intuitively with the Swift native persistence framework.\nCloudKit mirroring\nMirroring a Core Data store with CloudKit\nBack user interfaces with a local replica of a CloudKit private database.\nSynchronizing a local store to the cloud\nShare data between a user’s devices and other iCloud users.\nclass NSPersistentCloudKitContainer\nA container that encapsulates the Core Data stack in your app, and mirrors select persistent stores to a CloudKit private database.\nclass NSPersistentCloudKitContainerOptions\nAn object that customizes how a store description aligns with a CloudKit database.\nSharing Core Data objects between iCloud users\nUse Core Data CloudKit to synchronize data between devices of an iCloud user and share data between different iCloud users.\nChange processing\nAccessing data when the store changes\nGuarantee that a context won’t see store changes until you tell it to look.\nConsuming relevant store changes\nFilter store transactions for changes relevant to the current view.\nPersistent history\nUse persistent history tracking to determine what changes have occurred in the store since the enabling of persistent history tracking.\nBackground tasks\nUsing Core Data in the background\nUse Core Data in both a single-threaded and multithreaded app.\nLoading and Displaying a Large Data Feed\nConsume data in the background, and lower memory use by batching imports and preventing duplicate records.\nConflict resolution\nDetect and resolve conflicts that occur when data is changed on multiple threads.\nBatch processing\nUse batch processes to manage large data changes.\nData model migration\nCore Data has built-in data migration tools to help synchronize your app's data with the current data model.\nMigrating your data model automatically\nEnable lightweight migrations to keep your data model and the underlying data in a consistent state.\nStaged migrations\nMigrate complex data models containing changes that are incompatible with lightweight migrations.\nManual migrations\nMigrate elaborate data models with changes that go beyond the capabilities of both lightweight and staged migrations.\nRelated types\nCore Data Constants\nKeys to use with persistent stores and notifications from Core Data."
  }
]
